
SD_Card_File_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002cebc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c8c  0802d084  0802d084  0003d084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030d10  08030d10  00050054  2**0
                  CONTENTS
  4 .ARM          00000008  08030d10  08030d10  00040d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030d18  08030d18  00050054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030d18  08030d18  00040d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030d1c  08030d1c  00040d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08030d20  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00022930  20000054  08030d74  00050054  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20022984  08030d74  00052984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000677c8  00000000  00000000  00050084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ae1e  00000000  00000000  000b784c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000037d0  00000000  00000000  000c2670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003698  00000000  00000000  000c5e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354ac  00000000  00000000  000c94d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0004387f  00000000  00000000  000fe984  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010760e  00000000  00000000  00142203  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00249811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e86c  00000000  00000000  0024988c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000054 	.word	0x20000054
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0802d06c 	.word	0x0802d06c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000058 	.word	0x20000058
 8000204:	0802d06c 	.word	0x0802d06c

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b972 	b.w	8000528 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	4604      	mov	r4, r0
 8000264:	4688      	mov	r8, r1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d14b      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026a:	428a      	cmp	r2, r1
 800026c:	4615      	mov	r5, r2
 800026e:	d967      	bls.n	8000340 <__udivmoddi4+0xe4>
 8000270:	fab2 f282 	clz	r2, r2
 8000274:	b14a      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000276:	f1c2 0720 	rsb	r7, r2, #32
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	fa20 f707 	lsr.w	r7, r0, r7
 8000282:	4095      	lsls	r5, r2
 8000284:	ea47 0803 	orr.w	r8, r7, r3
 8000288:	4094      	lsls	r4, r2
 800028a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028e:	0c23      	lsrs	r3, r4, #16
 8000290:	fbb8 f7fe 	udiv	r7, r8, lr
 8000294:	fa1f fc85 	uxth.w	ip, r5
 8000298:	fb0e 8817 	mls	r8, lr, r7, r8
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	fb07 f10c 	mul.w	r1, r7, ip
 80002a4:	4299      	cmp	r1, r3
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x60>
 80002a8:	18eb      	adds	r3, r5, r3
 80002aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ae:	f080 811b 	bcs.w	80004e8 <__udivmoddi4+0x28c>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 8118 	bls.w	80004e8 <__udivmoddi4+0x28c>
 80002b8:	3f02      	subs	r7, #2
 80002ba:	442b      	add	r3, r5
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d0:	45a4      	cmp	ip, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x8c>
 80002d4:	192c      	adds	r4, r5, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002de:	45a4      	cmp	ip, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x290>
 80002e4:	3802      	subs	r0, #2
 80002e6:	442c      	add	r4, r5
 80002e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ec:	eba4 040c 	sub.w	r4, r4, ip
 80002f0:	2700      	movs	r7, #0
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa0>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xbe>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80eb 	beq.w	80004e2 <__udivmoddi4+0x286>
 800030c:	2700      	movs	r7, #0
 800030e:	e9c6 0100 	strd	r0, r1, [r6]
 8000312:	4638      	mov	r0, r7
 8000314:	4639      	mov	r1, r7
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f783 	clz	r7, r3
 800031e:	2f00      	cmp	r7, #0
 8000320:	d147      	bne.n	80003b2 <__udivmoddi4+0x156>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd0>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2c4>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	4698      	mov	r8, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa0>
 800033a:	e9c6 4800 	strd	r4, r8, [r6]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa0>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xe8>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 808f 	bne.w	800046c <__udivmoddi4+0x210>
 800034e:	1b49      	subs	r1, r1, r5
 8000350:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000354:	fa1f f885 	uxth.w	r8, r5
 8000358:	2701      	movs	r7, #1
 800035a:	fbb1 fcfe 	udiv	ip, r1, lr
 800035e:	0c23      	lsrs	r3, r4, #16
 8000360:	fb0e 111c 	mls	r1, lr, ip, r1
 8000364:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000368:	fb08 f10c 	mul.w	r1, r8, ip
 800036c:	4299      	cmp	r1, r3
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x124>
 8000370:	18eb      	adds	r3, r5, r3
 8000372:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4299      	cmp	r1, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2bc>
 800037e:	4684      	mov	ip, r0
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	b2a3      	uxth	r3, r4
 8000384:	fbb1 f0fe 	udiv	r0, r1, lr
 8000388:	fb0e 1410 	mls	r4, lr, r0, r1
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	fb08 f800 	mul.w	r8, r8, r0
 8000394:	45a0      	cmp	r8, r4
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x14c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x14a>
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	f200 80b6 	bhi.w	8000512 <__udivmoddi4+0x2b6>
 80003a6:	4618      	mov	r0, r3
 80003a8:	eba4 0408 	sub.w	r4, r4, r8
 80003ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b0:	e79f      	b.n	80002f2 <__udivmoddi4+0x96>
 80003b2:	f1c7 0c20 	rsb	ip, r7, #32
 80003b6:	40bb      	lsls	r3, r7
 80003b8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003bc:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c0:	fa01 f407 	lsl.w	r4, r1, r7
 80003c4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003cc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d0:	4325      	orrs	r5, r4
 80003d2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d6:	0c2c      	lsrs	r4, r5, #16
 80003d8:	fb08 3319 	mls	r3, r8, r9, r3
 80003dc:	fa1f fa8e 	uxth.w	sl, lr
 80003e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e4:	fb09 f40a 	mul.w	r4, r9, sl
 80003e8:	429c      	cmp	r4, r3
 80003ea:	fa02 f207 	lsl.w	r2, r2, r7
 80003ee:	fa00 f107 	lsl.w	r1, r0, r7
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1e 0303 	adds.w	r3, lr, r3
 80003f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003fc:	f080 8087 	bcs.w	800050e <__udivmoddi4+0x2b2>
 8000400:	429c      	cmp	r4, r3
 8000402:	f240 8084 	bls.w	800050e <__udivmoddi4+0x2b2>
 8000406:	f1a9 0902 	sub.w	r9, r9, #2
 800040a:	4473      	add	r3, lr
 800040c:	1b1b      	subs	r3, r3, r4
 800040e:	b2ad      	uxth	r5, r5
 8000410:	fbb3 f0f8 	udiv	r0, r3, r8
 8000414:	fb08 3310 	mls	r3, r8, r0, r3
 8000418:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800041c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000420:	45a2      	cmp	sl, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1e 0404 	adds.w	r4, lr, r4
 8000428:	f100 33ff 	add.w	r3, r0, #4294967295
 800042c:	d26b      	bcs.n	8000506 <__udivmoddi4+0x2aa>
 800042e:	45a2      	cmp	sl, r4
 8000430:	d969      	bls.n	8000506 <__udivmoddi4+0x2aa>
 8000432:	3802      	subs	r0, #2
 8000434:	4474      	add	r4, lr
 8000436:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043a:	fba0 8902 	umull	r8, r9, r0, r2
 800043e:	eba4 040a 	sub.w	r4, r4, sl
 8000442:	454c      	cmp	r4, r9
 8000444:	46c2      	mov	sl, r8
 8000446:	464b      	mov	r3, r9
 8000448:	d354      	bcc.n	80004f4 <__udivmoddi4+0x298>
 800044a:	d051      	beq.n	80004f0 <__udivmoddi4+0x294>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2c8>
 8000450:	ebb1 050a 	subs.w	r5, r1, sl
 8000454:	eb64 0403 	sbc.w	r4, r4, r3
 8000458:	fa04 fc0c 	lsl.w	ip, r4, ip
 800045c:	40fd      	lsrs	r5, r7
 800045e:	40fc      	lsrs	r4, r7
 8000460:	ea4c 0505 	orr.w	r5, ip, r5
 8000464:	e9c6 5400 	strd	r5, r4, [r6]
 8000468:	2700      	movs	r7, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f703 	lsr.w	r7, r0, r3
 8000474:	4095      	lsls	r5, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	fa21 f303 	lsr.w	r3, r1, r3
 800047e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000482:	4338      	orrs	r0, r7
 8000484:	0c01      	lsrs	r1, r0, #16
 8000486:	fbb3 f7fe 	udiv	r7, r3, lr
 800048a:	fa1f f885 	uxth.w	r8, r5
 800048e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb07 f308 	mul.w	r3, r7, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x256>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004a8:	d22f      	bcs.n	800050a <__udivmoddi4+0x2ae>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d92d      	bls.n	800050a <__udivmoddi4+0x2ae>
 80004ae:	3f02      	subs	r7, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1acb      	subs	r3, r1, r3
 80004b4:	b281      	uxth	r1, r0
 80004b6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ba:	fb0e 3310 	mls	r3, lr, r0, r3
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb00 f308 	mul.w	r3, r0, r8
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x27e>
 80004ca:	1869      	adds	r1, r5, r1
 80004cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d0:	d217      	bcs.n	8000502 <__udivmoddi4+0x2a6>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d915      	bls.n	8000502 <__udivmoddi4+0x2a6>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4429      	add	r1, r5
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e0:	e73b      	b.n	800035a <__udivmoddi4+0xfe>
 80004e2:	4637      	mov	r7, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e709      	b.n	80002fc <__udivmoddi4+0xa0>
 80004e8:	4607      	mov	r7, r0
 80004ea:	e6e7      	b.n	80002bc <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x8c>
 80004f0:	4541      	cmp	r1, r8
 80004f2:	d2ab      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f8:	eb69 020e 	sbc.w	r2, r9, lr
 80004fc:	3801      	subs	r0, #1
 80004fe:	4613      	mov	r3, r2
 8000500:	e7a4      	b.n	800044c <__udivmoddi4+0x1f0>
 8000502:	4660      	mov	r0, ip
 8000504:	e7e9      	b.n	80004da <__udivmoddi4+0x27e>
 8000506:	4618      	mov	r0, r3
 8000508:	e795      	b.n	8000436 <__udivmoddi4+0x1da>
 800050a:	4667      	mov	r7, ip
 800050c:	e7d1      	b.n	80004b2 <__udivmoddi4+0x256>
 800050e:	4681      	mov	r9, r0
 8000510:	e77c      	b.n	800040c <__udivmoddi4+0x1b0>
 8000512:	3802      	subs	r0, #2
 8000514:	442c      	add	r4, r5
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0x14c>
 8000518:	f1ac 0c02 	sub.w	ip, ip, #2
 800051c:	442b      	add	r3, r5
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x124>
 8000520:	4638      	mov	r0, r7
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xda>
 8000524:	4637      	mov	r7, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa0>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <FB_Init>:
extern char SDPath[4];

static void FB_Message_Warning(lv_obj_t *parent, uint16_t x_pos, uint16_t y_pos, const char *message);

void FB_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	  Displayer_GUI_Init();
 8000530:	f000 f9f4 	bl	800091c <Displayer_GUI_Init>
	  Touch_Screen_Init();
 8000534:	f000 fac6 	bl	8000ac4 <Touch_Screen_Init>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <FB_Main_Screen>:


void FB_Main_Screen(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	File_Init(&file_manage);
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <FB_Main_Screen+0x14>)
 8000542:	f000 f807 	bl	8000554 <File_Init>

	File_Find_Text_File(&file_manage);
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <FB_Main_Screen+0x14>)
 8000548:	f000 f820 	bl	800058c <File_Find_Text_File>

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20020110 	.word	0x20020110

08000554 <File_Init>:


extern char SDPath[4];

void File_Init(file_manager_t *file_manage)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	MX_SDMMC1_SD_Init();
 800055c:	f000 fefa 	bl	8001354 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000560:	f02a f874 	bl	802a64c <MX_FATFS_Init>
	file_manage->file_result = f_mount(&file_manage->drive_handler, SDPath, 0);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2200      	movs	r2, #0
 8000568:	4907      	ldr	r1, [pc, #28]	; (8000588 <File_Init+0x34>)
 800056a:	4618      	mov	r0, r3
 800056c:	f02c fa96 	bl	802ca9c <f_mount>
 8000570:	4603      	mov	r3, r0
 8000572:	4619      	mov	r1, r3
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	f241 036c 	movw	r3, #4204	; 0x106c
 800057a:	4413      	add	r3, r2
 800057c:	460a      	mov	r2, r1
 800057e:	701a      	strb	r2, [r3, #0]
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20021914 	.word	0x20021914

0800058c <File_Find_Text_File>:
    f_closedir(&dj);
}
#endif

void File_Find_Text_File(file_manager_t *file_manage)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

	static size_t  file_counter = 0;
	if( file_counter == 0 )
 8000594:	4b29      	ldr	r3, [pc, #164]	; (800063c <File_Find_Text_File+0xb0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d114      	bne.n	80005c6 <File_Find_Text_File+0x3a>
	{
		file_manage->file_result = f_findfirst(&file_manage->file_direction,&file_manage->file_info, "", "fil*.txt");
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f241 0070 	movw	r0, #4208	; 0x1070
 80005a2:	4418      	add	r0, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f241 01a8 	movw	r1, #4264	; 0x10a8
 80005aa:	4419      	add	r1, r3
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <File_Find_Text_File+0xb4>)
 80005ae:	4a25      	ldr	r2, [pc, #148]	; (8000644 <File_Find_Text_File+0xb8>)
 80005b0:	f02c fbd8 	bl	802cd64 <f_findfirst>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4619      	mov	r1, r3
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	f241 036c 	movw	r3, #4204	; 0x106c
 80005be:	4413      	add	r3, r2
 80005c0:	460a      	mov	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
		{
			file_counter = 0;
		}
	}

}
 80005c4:	e036      	b.n	8000634 <File_Find_Text_File+0xa8>
	else if(( file_manage->file_result == FR_OK ) && ( file_manage->file_info.fname[0] ) && ( file_counter != 0))
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	f241 036c 	movw	r3, #4204	; 0x106c
 80005cc:	4413      	add	r3, r2
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d12f      	bne.n	8000634 <File_Find_Text_File+0xa8>
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	f241 03be 	movw	r3, #4286	; 0x10be
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d028      	beq.n	8000634 <File_Find_Text_File+0xa8>
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <File_Find_Text_File+0xb0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d024      	beq.n	8000634 <File_Find_Text_File+0xa8>
		file_manage->file_result = f_findnext(&file_manage->file_direction, &file_manage->file_info);
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	f241 0370 	movw	r3, #4208	; 0x1070
 80005f0:	4413      	add	r3, r2
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	f241 02a8 	movw	r2, #4264	; 0x10a8
 80005f8:	440a      	add	r2, r1
 80005fa:	4611      	mov	r1, r2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f02c fb89 	bl	802cd14 <f_findnext>
 8000602:	4603      	mov	r3, r0
 8000604:	4619      	mov	r1, r3
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	f241 036c 	movw	r3, #4204	; 0x106c
 800060c:	4413      	add	r3, r2
 800060e:	460a      	mov	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
		if(( file_manage->file_result == FR_OK ) && ( file_manage->file_info.fname[0] ) )
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	f241 036c 	movw	r3, #4204	; 0x106c
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d109      	bne.n	8000634 <File_Find_Text_File+0xa8>
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	f241 03be 	movw	r3, #4286	; 0x10be
 8000626:	4413      	add	r3, r2
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <File_Find_Text_File+0xa8>
			file_counter = 0;
 800062e:	4b03      	ldr	r3, [pc, #12]	; (800063c <File_Find_Text_File+0xb0>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000070 	.word	0x20000070
 8000640:	0802d084 	.word	0x0802d084
 8000644:	0802d090 	.word	0x0802d090

08000648 <SDRAM_Init>:
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *sdram_handle, FMC_SDRAM_CommandTypeDef *command);

SDRAM_HandleTypeDef hsdram1;

void SDRAM_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	; 0x30
 800064c:	af00      	add	r7, sp, #0


	FMC_SDRAM_CommandTypeDef   command;
    FMC_SDRAM_TimingTypeDef    SdramTiming = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
 800065e:	619a      	str	r2, [r3, #24]

  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SDRAM_Init+0x9c>)
 8000662:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SDRAM_Init+0xa0>)
 8000664:	601a      	str	r2, [r3, #0]

  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SDRAM_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SDRAM_Init+0x9c>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SDRAM_Init+0x9c>)
 8000674:	2204      	movs	r2, #4
 8000676:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SDRAM_Init+0x9c>)
 800067a:	2210      	movs	r2, #16
 800067c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SDRAM_Init+0x9c>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SDRAM_Init+0x9c>)
 8000686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800068a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <SDRAM_Init+0x9c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SDRAM_Init+0x9c>)
 8000694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000698:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <SDRAM_Init+0x9c>)
 800069c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <SDRAM_Init+0x9c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28


  SdramTiming.LoadToActiveDelay = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80006ac:	2306      	movs	r3, #6
 80006ae:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]

  HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	4806      	ldr	r0, [pc, #24]	; (80006e4 <SDRAM_Init+0x9c>)
 80006ca:	f028 fe4d 	bl	8029368 <HAL_SDRAM_Init>

  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4619      	mov	r1, r3
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <SDRAM_Init+0x9c>)
 80006d6:	f000 f809 	bl	80006ec <SDRAM_Initialization_Sequence>

}
 80006da:	bf00      	nop
 80006dc:	3730      	adds	r7, #48	; 0x30
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200214d8 	.word	0x200214d8
 80006e8:	a0000140 	.word	0xa0000140

080006ec <SDRAM_Initialization_Sequence>:

static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *sdram_handle, FMC_SDRAM_CommandTypeDef *command)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd;

  command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	2210      	movs	r2, #16
 8000700:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	2201      	movs	r2, #1
 8000706:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 800070e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000712:	6839      	ldr	r1, [r7, #0]
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f028 fe5b 	bl	80293d0 <HAL_SDRAM_SendCommand>

  HAL_Delay(1);
 800071a:	2001      	movs	r0, #1
 800071c:	f024 fee8 	bl	80254f0 <HAL_Delay>

  command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	2202      	movs	r2, #2
 8000724:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2210      	movs	r2, #16
 800072a:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	2201      	movs	r2, #1
 8000730:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073c:	6839      	ldr	r1, [r7, #0]
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f028 fe46 	bl	80293d0 <HAL_SDRAM_SendCommand>

  command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	2203      	movs	r2, #3
 8000748:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2210      	movs	r2, #16
 800074e:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 8;
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2208      	movs	r2, #8
 8000754:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 800075c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000760:	6839      	ldr	r1, [r7, #0]
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f028 fe34 	bl	80293d0 <HAL_SDRAM_SendCommand>

  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000768:	f44f 7308 	mov.w	r3, #544	; 0x220
 800076c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2204      	movs	r2, #4
 8000772:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2210      	movs	r2, #16
 8000778:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	2201      	movs	r2, #1
 800077e:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = tmpmrd;
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800078a:	6839      	ldr	r1, [r7, #0]
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f028 fe1f 	bl	80293d0 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, SDRAM_REFRESH_TIME);
 8000792:	f240 6103 	movw	r1, #1539	; 0x603
 8000796:	4803      	ldr	r0, [pc, #12]	; (80007a4 <SDRAM_Initialization_Sequence+0xb8>)
 8000798:	f028 fe45 	bl	8029426 <HAL_SDRAM_SetAutoRefreshNumber>

}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200214d8 	.word	0x200214d8

080007a8 <Displayer_Init>:
 * retval: none.
 * brief : This function gets displayer ready to be driven.
 */

void Displayer_Init()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

	LCD_BACKLIGHT_STATE(1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2108      	movs	r1, #8
 80007b0:	4823      	ldr	r0, [pc, #140]	; (8000840 <Displayer_Init+0x98>)
 80007b2:	f025 fc4b 	bl	802604c <HAL_GPIO_WritePin>
	LCD_DISP_STATE(1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007bc:	4821      	ldr	r0, [pc, #132]	; (8000844 <Displayer_Init+0x9c>)
 80007be:	f025 fc45 	bl	802604c <HAL_GPIO_WritePin>

	lcd_handle.Instance = LTDC;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <Displayer_Init+0xa0>)
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <Displayer_Init+0xa4>)
 80007c6:	601a      	str	r2, [r3, #0]
	lcd_handle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <Displayer_Init+0xa0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
	lcd_handle.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <Displayer_Init+0xa0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
	lcd_handle.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <Displayer_Init+0xa0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
	lcd_handle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <Displayer_Init+0xa0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
	lcd_handle.Init.HorizontalSync = (DISPLAYER_HSYNC - 1);
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <Displayer_Init+0xa0>)
 80007e2:	2228      	movs	r2, #40	; 0x28
 80007e4:	615a      	str	r2, [r3, #20]
	lcd_handle.Init.VerticalSync = (DISPLAYER_VSYNC - 1);
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <Displayer_Init+0xa0>)
 80007e8:	2209      	movs	r2, #9
 80007ea:	619a      	str	r2, [r3, #24]
	lcd_handle.Init.AccumulatedHBP = (DISPLAYER_HSYNC + DISPLAYER_HBP - 1);
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <Displayer_Init+0xa0>)
 80007ee:	2235      	movs	r2, #53	; 0x35
 80007f0:	61da      	str	r2, [r3, #28]
	lcd_handle.Init.AccumulatedVBP = (DISPLAYER_VSYNC + DISPLAYER_VBP - 1);
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <Displayer_Init+0xa0>)
 80007f4:	220b      	movs	r2, #11
 80007f6:	621a      	str	r2, [r3, #32]
	lcd_handle.Init.AccumulatedActiveH = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <Displayer_Init+0xa0>)
 80007fa:	f240 121b 	movw	r2, #283	; 0x11b
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
			+ DISPLAYER_VBP - 1);
	lcd_handle.Init.AccumulatedActiveW = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <Displayer_Init+0xa0>)
 8000802:	f240 2215 	movw	r2, #533	; 0x215
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
			+ DISPLAYER_HBP - 1);
	lcd_handle.Init.TotalHeigh = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <Displayer_Init+0xa0>)
 800080a:	f240 121d 	movw	r2, #285	; 0x11d
 800080e:	631a      	str	r2, [r3, #48]	; 0x30
			+ DISPLAYER_VBP + DISPLAYER_VFP - 1);
	lcd_handle.Init.TotalWidth = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <Displayer_Init+0xa0>)
 8000812:	f240 2235 	movw	r2, #565	; 0x235
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
			+ DISPLAYER_HBP + DISPLAYER_HFP - 1);
	lcd_handle.Init.Backcolor.Blue = 0;
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <Displayer_Init+0xa0>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	lcd_handle.Init.Backcolor.Green = 0;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <Displayer_Init+0xa0>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	lcd_handle.Init.Backcolor.Red = 0;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <Displayer_Init+0xa0>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	HAL_LTDC_Init(&lcd_handle);
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <Displayer_Init+0xa0>)
 8000832:	f026 f849 	bl	80268c8 <HAL_LTDC_Init>
	Displayer_Layer_Init();
 8000836:	f000 f80b 	bl	8000850 <Displayer_Layer_Init>

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40022800 	.word	0x40022800
 8000844:	40022000 	.word	0x40022000
 8000848:	2002150c 	.word	0x2002150c
 800084c:	40016800 	.word	0x40016800

08000850 <Displayer_Layer_Init>:
 * brief : This function initialises first layer.
 */


static void Displayer_Layer_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

	lcd_handle.LayerCfg[0].WindowX0 = 0;
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <Displayer_Layer_Init+0x84>)
 8000856:	2200      	movs	r2, #0
 8000858:	639a      	str	r2, [r3, #56]	; 0x38
	lcd_handle.LayerCfg[0].WindowX1 = DISPLAYER_WIDTH;
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <Displayer_Layer_Init+0x84>)
 800085c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000860:	63da      	str	r2, [r3, #60]	; 0x3c
	lcd_handle.LayerCfg[0].WindowY0 = 0;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <Displayer_Layer_Init+0x84>)
 8000864:	2200      	movs	r2, #0
 8000866:	641a      	str	r2, [r3, #64]	; 0x40
	lcd_handle.LayerCfg[0].WindowY1 = DISPLAYER_HEIGHT;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <Displayer_Layer_Init+0x84>)
 800086a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800086e:	645a      	str	r2, [r3, #68]	; 0x44
	lcd_handle.LayerCfg[0].PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <Displayer_Layer_Init+0x84>)
 8000872:	2200      	movs	r2, #0
 8000874:	649a      	str	r2, [r3, #72]	; 0x48
	lcd_handle.LayerCfg[0].Alpha = 255;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <Displayer_Layer_Init+0x84>)
 8000878:	22ff      	movs	r2, #255	; 0xff
 800087a:	64da      	str	r2, [r3, #76]	; 0x4c
	lcd_handle.LayerCfg[0].Alpha0 = 0;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <Displayer_Layer_Init+0x84>)
 800087e:	2200      	movs	r2, #0
 8000880:	651a      	str	r2, [r3, #80]	; 0x50
	lcd_handle.LayerCfg[0].BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <Displayer_Layer_Init+0x84>)
 8000884:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000888:	655a      	str	r2, [r3, #84]	; 0x54
	lcd_handle.LayerCfg[0].BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <Displayer_Layer_Init+0x84>)
 800088c:	2207      	movs	r2, #7
 800088e:	659a      	str	r2, [r3, #88]	; 0x58
	lcd_handle.LayerCfg[0].FBStartAdress = (uint32_t)0xC0000000;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <Displayer_Layer_Init+0x84>)
 8000892:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000896:	65da      	str	r2, [r3, #92]	; 0x5c
	lcd_handle.LayerCfg[0].ImageWidth = DISPLAYER_WIDTH;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <Displayer_Layer_Init+0x84>)
 800089a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800089e:	661a      	str	r2, [r3, #96]	; 0x60
	lcd_handle.LayerCfg[0].ImageHeight = DISPLAYER_HEIGHT;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <Displayer_Layer_Init+0x84>)
 80008a2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80008a6:	665a      	str	r2, [r3, #100]	; 0x64
	lcd_handle.LayerCfg[0].Backcolor.Blue = 0;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <Displayer_Layer_Init+0x84>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	lcd_handle.LayerCfg[0].Backcolor.Green = 0;
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <Displayer_Layer_Init+0x84>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	lcd_handle.LayerCfg[0].Backcolor.Red = 0;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <Displayer_Layer_Init+0x84>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_LTDC_ConfigLayer(&lcd_handle, &lcd_handle.LayerCfg[0], 1);
 80008c0:	2201      	movs	r2, #1
 80008c2:	4905      	ldr	r1, [pc, #20]	; (80008d8 <Displayer_Layer_Init+0x88>)
 80008c4:	4803      	ldr	r0, [pc, #12]	; (80008d4 <Displayer_Layer_Init+0x84>)
 80008c6:	f026 f8cf 	bl	8026a68 <HAL_LTDC_ConfigLayer>
	HAL_LTDC_EnableDither(&lcd_handle);
 80008ca:	4802      	ldr	r0, [pc, #8]	; (80008d4 <Displayer_Layer_Init+0x84>)
 80008cc:	f026 f90a 	bl	8026ae4 <HAL_LTDC_EnableDither>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2002150c 	.word	0x2002150c
 80008d8:	20021544 	.word	0x20021544

080008dc <Display_Draw_Pixel>:
/*
 * NOTE : This function will wait for SDRAM to start.
 */

void Display_Draw_Pixel (int16_t Xpos, int16_t Ypos, uint32_t color)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	603a      	str	r2, [r7, #0]
 80008e6:	80fb      	strh	r3, [r7, #6]
 80008e8:	460b      	mov	r3, r1
 80008ea:	80bb      	strh	r3, [r7, #4]
	*(__IO uint32_t *)(lcd_handle.LayerCfg[0].FBStartAdress+( 4 * (Ypos * lcd_handle.LayerCfg [0] .ImageWidth + Xpos))) = color;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <Display_Draw_Pixel+0x3c>)
 80008ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008f4:	4908      	ldr	r1, [pc, #32]	; (8000918 <Display_Draw_Pixel+0x3c>)
 80008f6:	6e09      	ldr	r1, [r1, #96]	; 0x60
 80008f8:	fb01 f103 	mul.w	r1, r1, r3
 80008fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000900:	440b      	add	r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	461a      	mov	r2, r3
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	2002150c 	.word	0x2002150c

0800091c <Displayer_GUI_Init>:


static void display_interface(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p);

void Displayer_GUI_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	; 0x38
 8000920:	af00      	add	r7, sp, #0
	  SDRAM_Init();
 8000922:	f7ff fe91 	bl	8000648 <SDRAM_Init>
	  Displayer_Init();
 8000926:	f7ff ff3f 	bl	80007a8 <Displayer_Init>

	  lv_init();
 800092a:	f004 fbfd 	bl	8005128 <lv_init>

	  static lv_disp_buf_t disp_buf;
	  static lv_color_t buf[LV_HOR_RES_MAX * 50];
	  lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 50);
 800092e:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8000932:	2200      	movs	r2, #0
 8000934:	4909      	ldr	r1, [pc, #36]	; (800095c <Displayer_GUI_Init+0x40>)
 8000936:	480a      	ldr	r0, [pc, #40]	; (8000960 <Displayer_GUI_Init+0x44>)
 8000938:	f019 fc2c 	bl	801a194 <lv_disp_buf_init>

	  lv_disp_drv_t disp_drv;
	  lv_disp_drv_init(&disp_drv);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4618      	mov	r0, r3
 8000940:	f019 fbe5 	bl	801a10e <lv_disp_drv_init>
	  disp_drv.flush_cb = display_interface;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <Displayer_GUI_Init+0x48>)
 8000946:	613b      	str	r3, [r7, #16]
	  disp_drv.buffer = &disp_buf;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <Displayer_GUI_Init+0x44>)
 800094a:	60bb      	str	r3, [r7, #8]
	  lv_disp_drv_register(&disp_drv);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4618      	mov	r0, r3
 8000950:	f019 fc3c 	bl	801a1cc <lv_disp_drv_register>
}
 8000954:	bf00      	nop
 8000956:	3738      	adds	r7, #56	; 0x38
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000098 	.word	0x20000098
 8000960:	20000074 	.word	0x20000074
 8000964:	08000969 	.word	0x08000969

08000968 <display_interface>:

static void display_interface(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
    int32_t x, y;
    for(y = area->y1; y <= area->y2; y++) {
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	e01d      	b.n	80009ba <display_interface+0x52>
        for(x = area->x1; x <= area->x2; x++) {
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	e00e      	b.n	80009a6 <display_interface+0x3e>
        	Display_Draw_Pixel(x, y, (uint32_t)color_p->full);
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	b218      	sxth	r0, r3
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	b219      	sxth	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	f7ff ffa1 	bl	80008dc <Display_Draw_Pixel>
            color_p++;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3304      	adds	r3, #4
 800099e:	607b      	str	r3, [r7, #4]
        for(x = area->x1; x <= area->x2; x++) {
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009ac:	461a      	mov	r2, r3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	4293      	cmp	r3, r2
 80009b2:	dde9      	ble.n	8000988 <display_interface+0x20>
    for(y = area->y1; y <= area->y2; y++) {
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	3301      	adds	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80009c0:	461a      	mov	r2, r3
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	4293      	cmp	r3, r2
 80009c6:	ddda      	ble.n	800097e <display_interface+0x16>
        }
    }

    lv_disp_flush_ready(disp);
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f019 fd77 	bl	801a4bc <lv_disp_flush_ready>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <Touch_Screen_Ispressed>:
#include "touch_screen_reglist.h"

#define I2C_Handle (&hi2c3)

_Bool Touch_Screen_Ispressed()
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af04      	add	r7, sp, #16

	uint8_t touch_num;

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_NUM, I2C_MEMADD_SIZE_8BIT, &touch_num, 1, 10);
 80009de:	230a      	movs	r3, #10
 80009e0:	9302      	str	r3, [sp, #8]
 80009e2:	2301      	movs	r3, #1
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2301      	movs	r3, #1
 80009ec:	2202      	movs	r2, #2
 80009ee:	2171      	movs	r1, #113	; 0x71
 80009f0:	4806      	ldr	r0, [pc, #24]	; (8000a0c <Touch_Screen_Ispressed+0x34>)
 80009f2:	f025 fbd5 	bl	80261a0 <HAL_I2C_Mem_Read>

	if(touch_num > 0)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <Touch_Screen_Ispressed+0x28>
	{
		return true;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <Touch_Screen_Ispressed+0x2a>
	}
	else
	{
		return false;
 8000a00:	2300      	movs	r3, #0
	}

}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200215b4 	.word	0x200215b4

08000a10 <Touch_Screen_Read>:

void Touch_Screen_Read(uint16_t *touch_x, uint16_t *touch_y)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af04      	add	r7, sp, #16
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	 uint8_t ts_x[2] ;
	 uint8_t ts_y[2] ;

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_X_H, I2C_MEMADD_SIZE_8BIT, &ts_x[0], 1, 10);
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	9302      	str	r3, [sp, #8]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	9301      	str	r3, [sp, #4]
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	2171      	movs	r1, #113	; 0x71
 8000a2e:	4824      	ldr	r0, [pc, #144]	; (8000ac0 <Touch_Screen_Read+0xb0>)
 8000a30:	f025 fbb6 	bl	80261a0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_X_L, I2C_MEMADD_SIZE_8BIT, &ts_x[1], 1, 10);
 8000a34:	230a      	movs	r3, #10
 8000a36:	9302      	str	r3, [sp, #8]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	3301      	adds	r3, #1
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2301      	movs	r3, #1
 8000a46:	2204      	movs	r2, #4
 8000a48:	2171      	movs	r1, #113	; 0x71
 8000a4a:	481d      	ldr	r0, [pc, #116]	; (8000ac0 <Touch_Screen_Read+0xb0>)
 8000a4c:	f025 fba8 	bl	80261a0 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_Y_H, I2C_MEMADD_SIZE_8BIT, &ts_y[0], 1, 10);
 8000a50:	230a      	movs	r3, #10
 8000a52:	9302      	str	r3, [sp, #8]
 8000a54:	2301      	movs	r3, #1
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2205      	movs	r2, #5
 8000a62:	2171      	movs	r1, #113	; 0x71
 8000a64:	4816      	ldr	r0, [pc, #88]	; (8000ac0 <Touch_Screen_Read+0xb0>)
 8000a66:	f025 fb9b 	bl	80261a0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_Y_L, I2C_MEMADD_SIZE_8BIT, &ts_y[1], 1, 10);
 8000a6a:	230a      	movs	r3, #10
 8000a6c:	9302      	str	r3, [sp, #8]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	3301      	adds	r3, #1
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2206      	movs	r2, #6
 8000a7e:	2171      	movs	r1, #113	; 0x71
 8000a80:	480f      	ldr	r0, [pc, #60]	; (8000ac0 <Touch_Screen_Read+0xb0>)
 8000a82:	f025 fb8d 	bl	80261a0 <HAL_I2C_Mem_Read>

	*touch_x = ts_x[1] + ((ts_x[0] & 0x0F) << 8);
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	7b3b      	ldrb	r3, [r7, #12]
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	4413      	add	r3, r2
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	801a      	strh	r2, [r3, #0]
	*touch_y = ts_y[1] + ((ts_y[0] & 0x0F) << 8);
 8000a9e:	7a7b      	ldrb	r3, [r7, #9]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	7a3b      	ldrb	r3, [r7, #8]
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	4413      	add	r3, r2
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	801a      	strh	r2, [r3, #0]

}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200215b4 	.word	0x200215b4

08000ac4 <Touch_Screen_Init>:
#include "touch_screen.h"

static bool my_touchpad_read(struct _lv_indev_drv_t * indev, lv_indev_data_t * data);

void Touch_Screen_Init()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
	MX_I2C3_Init();
 8000aca:	f000 f9bb 	bl	8000e44 <MX_I2C3_Init>

	lv_indev_drv_t indev_drv;
	lv_indev_drv_init(&indev_drv);
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f019 fda3 	bl	801a61c <lv_indev_drv_init>
	indev_drv.type = LV_INDEV_TYPE_POINTER;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	713b      	strb	r3, [r7, #4]
	indev_drv.read_cb = my_touchpad_read;
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <Touch_Screen_Init+0x2c>)
 8000adc:	60bb      	str	r3, [r7, #8]
	lv_indev_drv_register(&indev_drv);
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f019 fdbd 	bl	801a660 <lv_indev_drv_register>
}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	08000af5 	.word	0x08000af5

08000af4 <my_touchpad_read>:

static bool my_touchpad_read(struct _lv_indev_drv_t * indev, lv_indev_data_t * data)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
	uint16_t ts_x;
	uint16_t ts_y;

	data->state = Touch_Screen_Ispressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 8000afe:	f7ff ff6b 	bl	80009d8 <Touch_Screen_Ispressed>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	739a      	strb	r2, [r3, #14]

	if (data->state == LV_INDEV_STATE_PR)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	7b9b      	ldrb	r3, [r3, #14]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d107      	bne.n	8000b22 <my_touchpad_read+0x2e>
	{
		Touch_Screen_Read(&ts_x, &ts_y);
 8000b12:	f107 020c 	add.w	r2, r7, #12
 8000b16:	f107 030e 	add.w	r3, r7, #14
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff77 	bl	8000a10 <Touch_Screen_Read>
	}

	data->point.x = (int16_t)ts_y;
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	b21a      	sxth	r2, r3
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	801a      	strh	r2, [r3, #0]
	data->point.y = (int16_t)ts_x;
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	805a      	strh	r2, [r3, #2]

	return false;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_DMA_Init+0x48>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <MX_DMA_Init+0x48>)
 8000b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <MX_DMA_Init+0x48>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	203b      	movs	r0, #59	; 0x3b
 8000b60:	f024 fda0 	bl	80256a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b64:	203b      	movs	r0, #59	; 0x3b
 8000b66:	f024 fdb9 	bl	80256dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2045      	movs	r0, #69	; 0x45
 8000b70:	f024 fd98 	bl	80256a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b74:	2045      	movs	r0, #69	; 0x45
 8000b76:	f024 fdb1 	bl	80256dc <HAL_NVIC_EnableIRQ>

}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b9c:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <HAL_FMC_MspInit+0x100>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d16d      	bne.n	8000c80 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000ba4:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <HAL_FMC_MspInit+0x100>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000baa:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <HAL_FMC_MspInit+0x104>)
 8000bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bae:	4a37      	ldr	r2, [pc, #220]	; (8000c8c <HAL_FMC_MspInit+0x104>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6393      	str	r3, [r2, #56]	; 0x38
 8000bb6:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <HAL_FMC_MspInit+0x104>)
 8000bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000bc2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000bc6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	482c      	ldr	r0, [pc, #176]	; (8000c90 <HAL_FMC_MspInit+0x108>)
 8000bde:	f025 f873 	bl	8025cc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000be2:	f248 1313 	movw	r3, #33043	; 0x8113
 8000be6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4825      	ldr	r0, [pc, #148]	; (8000c94 <HAL_FMC_MspInit+0x10c>)
 8000bfe:	f025 f863 	bl	8025cc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000c02:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c14:	230c      	movs	r3, #12
 8000c16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	481e      	ldr	r0, [pc, #120]	; (8000c98 <HAL_FMC_MspInit+0x110>)
 8000c1e:	f025 f853 	bl	8025cc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c22:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c34:	230c      	movs	r3, #12
 8000c36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4817      	ldr	r0, [pc, #92]	; (8000c9c <HAL_FMC_MspInit+0x114>)
 8000c3e:	f025 f843 	bl	8025cc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000c42:	2328      	movs	r3, #40	; 0x28
 8000c44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c52:	230c      	movs	r3, #12
 8000c54:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <HAL_FMC_MspInit+0x118>)
 8000c5c:	f025 f834 	bl	8025cc8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c60:	2308      	movs	r3, #8
 8000c62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c70:	230c      	movs	r3, #12
 8000c72:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <HAL_FMC_MspInit+0x11c>)
 8000c7a:	f025 f825 	bl	8025cc8 <HAL_GPIO_Init>
 8000c7e:	e000      	b.n	8000c82 <HAL_FMC_MspInit+0xfa>
    return;
 8000c80:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20017798 	.word	0x20017798
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40021800 	.word	0x40021800
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021400 	.word	0x40021400
 8000ca0:	40021c00 	.word	0x40021c00
 8000ca4:	40020800 	.word	0x40020800

08000ca8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000cb0:	f7ff ff6a 	bl	8000b88 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	; 0x40
 8000cc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd2:	4b58      	ldr	r3, [pc, #352]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a57      	ldr	r2, [pc, #348]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	4b52      	ldr	r3, [pc, #328]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a51      	ldr	r2, [pc, #324]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b4f      	ldr	r3, [pc, #316]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b4c      	ldr	r3, [pc, #304]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a4b      	ldr	r2, [pc, #300]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b49      	ldr	r3, [pc, #292]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	623b      	str	r3, [r7, #32]
 8000d18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1a:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a45      	ldr	r2, [pc, #276]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d32:	4b40      	ldr	r3, [pc, #256]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a3f      	ldr	r2, [pc, #252]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a39      	ldr	r2, [pc, #228]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d62:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a33      	ldr	r2, [pc, #204]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a2d      	ldr	r2, [pc, #180]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d80:	f043 0320 	orr.w	r3, r3, #32
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0320 	and.w	r3, r3, #32
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_GPIO_Init+0x178>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	481c      	ldr	r0, [pc, #112]	; (8000e38 <MX_GPIO_Init+0x17c>)
 8000dc8:	f025 f940 	bl	802604c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f241 0102 	movw	r1, #4098	; 0x1002
 8000dd2:	481a      	ldr	r0, [pc, #104]	; (8000e3c <MX_GPIO_Init+0x180>)
 8000dd4:	f025 f93a 	bl	802604c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 8000dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	4814      	ldr	r0, [pc, #80]	; (8000e40 <MX_GPIO_Init+0x184>)
 8000dee:	f024 ff6b 	bl	8025cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000df2:	2308      	movs	r3, #8
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <MX_GPIO_Init+0x17c>)
 8000e0a:	f024 ff5d 	bl	8025cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000e0e:	f241 0302 	movw	r3, #4098	; 0x1002
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_GPIO_Init+0x180>)
 8000e28:	f024 ff4e 	bl	8025cc8 <HAL_GPIO_Init>

}
 8000e2c:	bf00      	nop
 8000e2e:	3740      	adds	r7, #64	; 0x40
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40022800 	.word	0x40022800
 8000e3c:	40022000 	.word	0x40022000
 8000e40:	40020800 	.word	0x40020800

08000e44 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <MX_I2C3_Init+0x78>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0040EAFF;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e50:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <MX_I2C3_Init+0x7c>)
 8000e52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e56:	22e0      	movs	r2, #224	; 0xe0
 8000e58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e80:	f025 f8fe 	bl	8026080 <HAL_I2C_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e8a:	f000 fa5f 	bl	800134c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000e92:	f025 fc81 	bl	8026798 <HAL_I2CEx_ConfigAnalogFilter>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e9c:	f000 fa56 	bl	800134c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_I2C3_Init+0x74>)
 8000ea4:	f025 fcc3 	bl	802682e <HAL_I2CEx_ConfigDigitalFilter>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000eae:	f000 fa4d 	bl	800134c <Error_Handler>
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200215b4 	.word	0x200215b4
 8000ebc:	40005c00 	.word	0x40005c00
 8000ec0:	0040eaff 	.word	0x0040eaff

08000ec4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <HAL_I2C_MspInit+0x8c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d130      	bne.n	8000f48 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_I2C_MspInit+0x90>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <HAL_I2C_MspInit+0x90>)
 8000eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_I2C_MspInit+0x90>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000efe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f04:	2312      	movs	r3, #18
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f10:	2304      	movs	r3, #4
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480f      	ldr	r0, [pc, #60]	; (8000f58 <HAL_I2C_MspInit+0x94>)
 8000f1c:	f024 fed4 	bl	8025cc8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_I2C_MspInit+0x90>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <HAL_I2C_MspInit+0x90>)
 8000f26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_I2C_MspInit+0x90>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2048      	movs	r0, #72	; 0x48
 8000f3e:	f024 fbb1 	bl	80256a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000f42:	2048      	movs	r0, #72	; 0x48
 8000f44:	f024 fbca 	bl	80256dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40005c00 	.word	0x40005c00
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40021c00 	.word	0x40021c00

08000f5c <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08e      	sub	sp, #56	; 0x38
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a51      	ldr	r2, [pc, #324]	; (80010c0 <HAL_LTDC_MspInit+0x164>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	f040 809b 	bne.w	80010b6 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f80:	4b50      	ldr	r3, [pc, #320]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f84:	4a4f      	ldr	r2, [pc, #316]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000f86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f94:	623b      	str	r3, [r7, #32]
 8000f96:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f98:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4a49      	ldr	r2, [pc, #292]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa4:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fb0:	4b44      	ldr	r3, [pc, #272]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe0:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a37      	ldr	r2, [pc, #220]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ff8:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_LTDC_MspInit+0x168>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001010:	2310      	movs	r3, #16
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001020:	230e      	movs	r3, #14
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4827      	ldr	r0, [pc, #156]	; (80010c8 <HAL_LTDC_MspInit+0x16c>)
 800102c:	f024 fe4c 	bl	8025cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001030:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001042:	230e      	movs	r3, #14
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4619      	mov	r1, r3
 800104c:	481f      	ldr	r0, [pc, #124]	; (80010cc <HAL_LTDC_MspInit+0x170>)
 800104e:	f024 fe3b 	bl	8025cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001052:	23f7      	movs	r3, #247	; 0xf7
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001062:	230e      	movs	r3, #14
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	4818      	ldr	r0, [pc, #96]	; (80010d0 <HAL_LTDC_MspInit+0x174>)
 800106e:	f024 fe2b 	bl	8025cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001084:	2309      	movs	r3, #9
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4619      	mov	r1, r3
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <HAL_LTDC_MspInit+0x178>)
 8001090:	f024 fe1a 	bl	8025cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001094:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a6:	230e      	movs	r3, #14
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <HAL_LTDC_MspInit+0x17c>)
 80010b2:	f024 fe09 	bl	8025cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80010b6:	bf00      	nop
 80010b8:	3738      	adds	r7, #56	; 0x38
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40016800 	.word	0x40016800
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40022400 	.word	0x40022400
 80010d0:	40022800 	.word	0x40022800
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40022000 	.word	0x40022000

080010dc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010e4:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <SCB_EnableICache+0x3c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <SCB_EnableICache+0x3c>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <SCB_EnableICache+0x3c>)
 80010fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001102:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001104:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001108:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <SCB_EnableDCache+0x7c>)
 8001124:	2200      	movs	r2, #0
 8001126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800112a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <SCB_EnableDCache+0x7c>)
 8001130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001134:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0b5b      	lsrs	r3, r3, #13
 800113a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800113e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001148:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	015a      	lsls	r2, r3, #5
 800114e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001152:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001158:	490f      	ldr	r1, [pc, #60]	; (8001198 <SCB_EnableDCache+0x7c>)
 800115a:	4313      	orrs	r3, r2
 800115c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1e5a      	subs	r2, r3, #1
 8001164:	60ba      	str	r2, [r7, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1ef      	bne.n	800114a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	60fa      	str	r2, [r7, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1e5      	bne.n	8001140 <SCB_EnableDCache+0x24>
 8001174:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <SCB_EnableDCache+0x7c>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <SCB_EnableDCache+0x7c>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001182:	6153      	str	r3, [r2, #20]
 8001184:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001188:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80011a0:	f7ff ff9c 	bl	80010dc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80011a4:	f7ff ffba 	bl	800111c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f024 f974 	bl	8025494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f80c 	bl	80011c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f7ff fd84 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 80011b4:	f7ff fcc2 	bl	8000b3c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* Module Init */
  FB_Init();
 80011b8:	f7ff f9b8 	bl	800052c <FB_Init>

  /* Create Main Screen */
  FB_Main_Screen();
 80011bc:	f7ff f9be 	bl	800053c <FB_Main_Screen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  lv_task_handler();
 80011c0:	f01c f982 	bl	801d4c8 <lv_task_handler>
 80011c4:	e7fc      	b.n	80011c0 <main+0x24>
	...

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0b4      	sub	sp, #208	; 0xd0
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011d2:	2230      	movs	r2, #48	; 0x30
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f02b ff37 	bl	802d04a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	2284      	movs	r2, #132	; 0x84
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f02b ff28 	bl	802d04a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b43      	ldr	r3, [pc, #268]	; (8001308 <SystemClock_Config+0x140>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a42      	ldr	r2, [pc, #264]	; (8001308 <SystemClock_Config+0x140>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b40      	ldr	r3, [pc, #256]	; (8001308 <SystemClock_Config+0x140>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <SystemClock_Config+0x144>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a3d      	ldr	r2, [pc, #244]	; (800130c <SystemClock_Config+0x144>)
 8001218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b3b      	ldr	r3, [pc, #236]	; (800130c <SystemClock_Config+0x144>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122a:	2301      	movs	r3, #1
 800122c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001246:	230f      	movs	r3, #15
 8001248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 240;
 800124c:	23f0      	movs	r3, #240	; 0xf0
 800124e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001258:	2309      	movs	r3, #9
 800125a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001262:	4618      	mov	r0, r3
 8001264:	f025 fe52 	bl	8026f0c <HAL_RCC_OscConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800126e:	f000 f86d 	bl	800134c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001272:	f025 fdfb 	bl	8026e6c <HAL_PWREx_EnableOverDrive>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800127c:	f000 f866 	bl	800134c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001280:	230f      	movs	r3, #15
 8001282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001292:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001296:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012a6:	2106      	movs	r1, #6
 80012a8:	4618      	mov	r0, r3
 80012aa:	f026 f8d3 	bl	8027454 <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80012b4:	f000 f84a 	bl	800134c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <SystemClock_Config+0x148>)
 80012ba:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 80012bc:	2372      	movs	r3, #114	; 0x72
 80012be:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80012c0:	2305      	movs	r3, #5
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80012c8:	2303      	movs	r3, #3
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80012d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80012da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4618      	mov	r0, r3
 80012ee:	f026 facd 	bl	802788c <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x134>
  {
    Error_Handler();
 80012f8:	f000 f828 	bl	800134c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80012fc:	f026 f996 	bl	802762c <HAL_RCC_EnableCSS>
}
 8001300:	bf00      	nop
 8001302:	37d0      	adds	r7, #208	; 0xd0
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000
 8001310:	00a10008 	.word	0x00a10008

08001314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim->Instance == TIM1) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d104      	bne.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x1c>
	    HAL_IncTick();
 8001326:	f024 f8c3 	bl	80254b0 <HAL_IncTick>
	    lv_tick_inc(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f019 fa4a 	bl	801a7c4 <lv_tick_inc>
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 800133a:	f024 f8b9 	bl	80254b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40010000 	.word	0x40010000

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x4>
	...

08001354 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <MX_SDMMC1_SD_Init+0x3c>)
 800135c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]

}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	20021600 	.word	0x20021600
 8001390:	40012c00 	.word	0x40012c00

08001394 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a69      	ldr	r2, [pc, #420]	; (8001558 <HAL_SD_MspInit+0x1c4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	f040 80cc 	bne.w	8001550 <HAL_SD_MspInit+0x1bc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013b8:	4b68      	ldr	r3, [pc, #416]	; (800155c <HAL_SD_MspInit+0x1c8>)
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	4a67      	ldr	r2, [pc, #412]	; (800155c <HAL_SD_MspInit+0x1c8>)
 80013be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c2:	6453      	str	r3, [r2, #68]	; 0x44
 80013c4:	4b65      	ldr	r3, [pc, #404]	; (800155c <HAL_SD_MspInit+0x1c8>)
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4b62      	ldr	r3, [pc, #392]	; (800155c <HAL_SD_MspInit+0x1c8>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a61      	ldr	r2, [pc, #388]	; (800155c <HAL_SD_MspInit+0x1c8>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b5f      	ldr	r3, [pc, #380]	; (800155c <HAL_SD_MspInit+0x1c8>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e8:	4b5c      	ldr	r3, [pc, #368]	; (800155c <HAL_SD_MspInit+0x1c8>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a5b      	ldr	r2, [pc, #364]	; (800155c <HAL_SD_MspInit+0x1c8>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b59      	ldr	r3, [pc, #356]	; (800155c <HAL_SD_MspInit+0x1c8>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001412:	230c      	movs	r3, #12
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4850      	ldr	r0, [pc, #320]	; (8001560 <HAL_SD_MspInit+0x1cc>)
 800141e:	f024 fc53 	bl	8025cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8001422:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142c:	2301      	movs	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001434:	230c      	movs	r3, #12
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4848      	ldr	r0, [pc, #288]	; (8001560 <HAL_SD_MspInit+0x1cc>)
 8001440:	f024 fc42 	bl	8025cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001444:	2304      	movs	r3, #4
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001454:	230c      	movs	r3, #12
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4841      	ldr	r0, [pc, #260]	; (8001564 <HAL_SD_MspInit+0x1d0>)
 8001460:	f024 fc32 	bl	8025cc8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001464:	4b40      	ldr	r3, [pc, #256]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 8001466:	4a41      	ldr	r2, [pc, #260]	; (800156c <HAL_SD_MspInit+0x1d8>)
 8001468:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 800146c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001470:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001478:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800147e:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 8001480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001484:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 8001488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800148c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 8001490:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001494:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001496:	4b34      	ldr	r3, [pc, #208]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 8001498:	2220      	movs	r2, #32
 800149a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 80014a4:	2204      	movs	r2, #4
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 80014aa:	2203      	movs	r2, #3
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 80014b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 80014b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014be:	482a      	ldr	r0, [pc, #168]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 80014c0:	f024 f91a 	bl	80256f8 <HAL_DMA_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 80014ca:	f7ff ff3f 	bl	800134c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <HAL_SD_MspInit+0x1d4>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 80014dc:	4a25      	ldr	r2, [pc, #148]	; (8001574 <HAL_SD_MspInit+0x1e0>)
 80014de:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 80014e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 80014ea:	2240      	movs	r2, #64	; 0x40
 80014ec:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 80014f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fa:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 80014fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001502:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 8001506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 800150e:	2220      	movs	r2, #32
 8001510:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 800151a:	2204      	movs	r2, #4
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 8001520:	2203      	movs	r2, #3
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 8001526:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 800152e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001534:	480e      	ldr	r0, [pc, #56]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 8001536:	f024 f8df 	bl	80256f8 <HAL_DMA_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8001540:	f7ff ff04 	bl	800134c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 8001548:	63da      	str	r2, [r3, #60]	; 0x3c
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <HAL_SD_MspInit+0x1dc>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40012c00 	.word	0x40012c00
 800155c:	40023800 	.word	0x40023800
 8001560:	40020800 	.word	0x40020800
 8001564:	40020c00 	.word	0x40020c00
 8001568:	20021684 	.word	0x20021684
 800156c:	40026458 	.word	0x40026458
 8001570:	200216e4 	.word	0x200216e4
 8001574:	400264a0 	.word	0x400264a0

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_MspInit+0x44>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_MspInit+0x44>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_MspInit+0x44>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x44>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x44>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x44>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	; 0x30
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	2019      	movs	r0, #25
 80015d6:	f024 f865 	bl	80256a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015da:	2019      	movs	r0, #25
 80015dc:	f024 f87e 	bl	80256dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_InitTick+0xa0>)
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <HAL_InitTick+0xa0>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6453      	str	r3, [r2, #68]	; 0x44
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_InitTick+0xa0>)
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f8:	f107 0210 	add.w	r2, r7, #16
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f026 f8f4 	bl	80277f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001608:	f026 f8de 	bl	80277c8 <HAL_RCC_GetPCLK2Freq>
 800160c:	4603      	mov	r3, r0
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	4a13      	ldr	r2, [pc, #76]	; (8001664 <HAL_InitTick+0xa4>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	3b01      	subs	r3, #1
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_InitTick+0xa8>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_InitTick+0xac>)
 8001624:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_InitTick+0xa8>)
 8001628:	f240 32e7 	movw	r2, #999	; 0x3e7
 800162c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_InitTick+0xa8>)
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_InitTick+0xa8>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_InitTick+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001640:	4809      	ldr	r0, [pc, #36]	; (8001668 <HAL_InitTick+0xa8>)
 8001642:	f027 ff10 	bl	8029466 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d104      	bne.n	8001656 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800164c:	4806      	ldr	r0, [pc, #24]	; (8001668 <HAL_InitTick+0xa8>)
 800164e:	f027 ff3f 	bl	80294d0 <HAL_TIM_Base_Start_IT>
 8001652:	4603      	mov	r3, r0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3730      	adds	r7, #48	; 0x30
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	431bde83 	.word	0x431bde83
 8001668:	20021744 	.word	0x20021744
 800166c:	40010000 	.word	0x40010000

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001674:	f026 f8ee 	bl	8027854 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x8>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016d2:	f027 ff27 	bl	8029524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20021744 	.word	0x20021744

080016e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DMA2_Stream3_IRQHandler+0x10>)
 80016e6:	f024 f8b5 	bl	8025854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20021684 	.word	0x20021684

080016f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <DMA2_Stream6_IRQHandler+0x10>)
 80016fa:	f024 f8ab 	bl	8025854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200216e4 	.word	0x200216e4

08001708 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <I2C3_EV_IRQHandler+0x10>)
 800170e:	f024 fe61 	bl	80263d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200215b4 	.word	0x200215b4

0800171c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <SystemInit+0x28>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <SystemInit+0x28>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SystemInit+0x28>)
 8001732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001736:	609a      	str	r2, [r3, #8]
#endif
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800174c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800174e:	e003      	b.n	8001758 <LoopCopyDataInit>

08001750 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001752:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001754:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001756:	3104      	adds	r1, #4

08001758 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001758:	480b      	ldr	r0, [pc, #44]	; (8001788 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800175c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800175e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001760:	d3f6      	bcc.n	8001750 <CopyDataInit>
  ldr  r2, =_sbss
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001764:	e002      	b.n	800176c <LoopFillZerobss>

08001766 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001766:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001768:	f842 3b04 	str.w	r3, [r2], #4

0800176c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800176e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001770:	d3f9      	bcc.n	8001766 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001772:	f7ff ffd3 	bl	800171c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001776:	f02b fc35 	bl	802cfe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fd0f 	bl	800119c <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001784:	08030d20 	.word	0x08030d20
  ldr  r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800178c:	20000054 	.word	0x20000054
  ldr  r2, =_sbss
 8001790:	20000054 	.word	0x20000054
  ldr  r3, = _ebss
 8001794:	20022984 	.word	0x20022984

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>

0800179a <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <lv_disp_get_scr_act+0x14>
 80017a8:	f018 fde6 	bl	801a378 <lv_disp_get_default>
 80017ac:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e001      	b.n	80017bc <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <lv_disp_get_scr_prev+0x14>
 80017d2:	f018 fdd1 	bl	801a378 <lv_disp_get_default>
 80017d6:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <lv_disp_get_scr_prev+0x1e>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	e001      	b.n	80017e6 <lv_disp_get_scr_prev+0x22>
    }

    return disp->prev_scr;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <lv_disp_get_layer_top+0x14>
 80017fc:	f018 fdbc 	bl	801a378 <lv_disp_get_default>
 8001800:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 8001808:	2300      	movs	r3, #0
 800180a:	e001      	b.n	8001810 <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <lv_disp_get_layer_sys+0x14>
 8001826:	f018 fda7 	bl	801a378 <lv_disp_get_default>
 800182a:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 8001832:	2300      	movs	r3, #0
 8001834:	e001      	b.n	800183a <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <_lv_group_init>:

/**
 * Init. the group module
 */
void _lv_group_init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8001848:	2118      	movs	r1, #24
 800184a:	4802      	ldr	r0, [pc, #8]	; (8001854 <_lv_group_init+0x10>)
 800184c:	f01a fbd2 	bl	801bff4 <_lv_ll_init>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200218f4 	.word	0x200218f4

08001858 <lv_group_add_obj>:
 * Add an object to a group
 * @param group pointer to a group
 * @param obj pointer to an object to add
 */
void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d04e      	beq.n	8001906 <lv_group_add_obj+0xae>
    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    _LV_LL_READ(group->obj_ll, obj_i) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4618      	mov	r0, r3
 800186c:	f01a fd38 	bl	801c2e0 <_lv_ll_get_head>
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	e00a      	b.n	800188a <lv_group_add_obj+0x32>
        if((*obj_i) == obj) {
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d045      	beq.n	800190a <lv_group_add_obj+0xb2>
    _LV_LL_READ(group->obj_ll, obj_i) {
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	4618      	mov	r0, r3
 8001884:	f01a fd52 	bl	801c32c <_lv_ll_get_next>
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f1      	bne.n	8001874 <lv_group_add_obj+0x1c>
            return;
        }
    }

    /*If the object is already in a group and focused then defocus it*/
    if(obj->group_p) {
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00a      	beq.n	80018ae <lv_group_add_obj+0x56>
        if(lv_obj_is_focused(obj)) {
 8001898:	6838      	ldr	r0, [r7, #0]
 800189a:	f005 fe3f 	bl	800751c <lv_obj_is_focused>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <lv_group_add_obj+0x56>
            lv_group_refocus(obj->group_p);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f999 	bl	8001be0 <lv_group_refocus>

            LV_LOG_INFO("lv_group_add_obj: assign object to an other group");
        }
    }

    obj->group_p     = group;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f01a fc30 	bl	801c11c <_lv_ll_ins_tail>
 80018bc:	60b8      	str	r0, [r7, #8]
    LV_ASSERT_MEM(next);
 80018be:	68b8      	ldr	r0, [r7, #8]
 80018c0:	f01a f958 	bl	801bb74 <lv_debug_check_null>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f083 0301 	eor.w	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <lv_group_add_obj+0x8a>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f04f 0400 	mov.w	r4, #0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4623      	mov	r3, r4
 80018da:	480f      	ldr	r0, [pc, #60]	; (8001918 <lv_group_add_obj+0xc0>)
 80018dc:	f01a f95a 	bl	801bb94 <lv_debug_log_error>
 80018e0:	e7fe      	b.n	80018e0 <lv_group_add_obj+0x88>
    if(next == NULL) return;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d012      	beq.n	800190e <lv_group_add_obj+0xb6>
    *next = obj;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	601a      	str	r2, [r3, #0]

    /* If the head and the tail is equal then there is only one object in the linked list.
     * In this case automatically activate it*/
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f01a fcf5 	bl	801c2e0 <_lv_ll_get_head>
 80018f6:	4602      	mov	r2, r0
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d108      	bne.n	8001910 <lv_group_add_obj+0xb8>
        lv_group_refocus(group);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f96e 	bl	8001be0 <lv_group_refocus>
 8001904:	e004      	b.n	8001910 <lv_group_add_obj+0xb8>
    if(group == NULL) return;
 8001906:	bf00      	nop
 8001908:	e002      	b.n	8001910 <lv_group_add_obj+0xb8>
            return;
 800190a:	bf00      	nop
 800190c:	e000      	b.n	8001910 <lv_group_add_obj+0xb8>
    if(next == NULL) return;
 800190e:	bf00      	nop
    }
}
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}
 8001916:	bf00      	nop
 8001918:	0802d094 	.word	0x0802d094

0800191c <lv_group_focus_obj>:
/**
 * Focus on an object (defocus the current)
 * @param obj pointer to an object to focus on
 */
void lv_group_focus_obj(lv_obj_t * obj)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8084 	beq.w	8001a34 <lv_group_focus_obj+0x118>
    lv_group_t * g = obj->group_p;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001930:	613b      	str	r3, [r7, #16]
    if(g == NULL) return;
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d07f      	beq.n	8001a38 <lv_group_focus_obj+0x11c>

    if(g->frozen != 0) return;
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	7d1b      	ldrb	r3, [r3, #20]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d17a      	bne.n	8001a3c <lv_group_focus_obj+0x120>

    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <lv_group_focus_obj+0x3e>
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	d072      	beq.n	8001a40 <lv_group_focus_obj+0x124>

    /*On defocus edit mode must be leaved*/
    lv_group_set_editing(g, false);
 800195a:	2100      	movs	r1, #0
 800195c:	6938      	ldr	r0, [r7, #16]
 800195e:	f000 f8ca 	bl	8001af6 <lv_group_set_editing>

    lv_obj_t ** i;
    _LV_LL_READ(g->obj_ll, i) {
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4618      	mov	r0, r3
 8001966:	f01a fcbb 	bl	801c2e0 <_lv_ll_get_head>
 800196a:	6178      	str	r0, [r7, #20]
 800196c:	e05e      	b.n	8001a2c <lv_group_focus_obj+0x110>
        if(*i == obj) {
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	d153      	bne.n	8001a20 <lv_group_focus_obj+0x104>
            if(g->obj_focus != NULL) {
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01c      	beq.n	80019ba <lv_group_focus_obj+0x9e>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68d2      	ldr	r2, [r2, #12]
 800198c:	6810      	ldr	r0, [r2, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	2117      	movs	r1, #23
 8001992:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	210e      	movs	r1, #14
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 fe0a 	bl	80065b8 <lv_event_send>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]
                if(res != LV_RES_OK) return;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d14a      	bne.n	8001a44 <lv_group_focus_obj+0x128>
                lv_obj_invalidate(*g->obj_focus);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 ff4b 	bl	8005850 <lv_obj_invalidate>
            }

            g->obj_focus = i;
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	60da      	str	r2, [r3, #12]

            if(g->obj_focus != NULL) {
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d03f      	beq.n	8001a48 <lv_group_focus_obj+0x12c>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68d2      	ldr	r2, [r2, #12]
 80019d4:	6810      	ldr	r0, [r2, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	2116      	movs	r1, #22
 80019da:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <lv_group_focus_obj+0xd0>
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	6938      	ldr	r0, [r7, #16]
 80019ea:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	210d      	movs	r1, #13
 80019f6:	4618      	mov	r0, r3
 80019f8:	f004 fdde 	bl	80065b8 <lv_event_send>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73bb      	strb	r3, [r7, #14]
                if(res != LV_RES_OK) return;
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d122      	bne.n	8001a4c <lv_group_focus_obj+0x130>
                lv_obj_invalidate(*g->obj_focus);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 ff1f 	bl	8005850 <lv_obj_invalidate>

                /*If the object or its parent has `top == true` bring it to the foreground*/
                obj_to_foreground(*g->obj_focus);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 f9e5 	bl	8001de8 <obj_to_foreground>
            }
            break;
 8001a1e:	e013      	b.n	8001a48 <lv_group_focus_obj+0x12c>
    _LV_LL_READ(g->obj_ll, i) {
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	6979      	ldr	r1, [r7, #20]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f01a fc81 	bl	801c32c <_lv_ll_get_next>
 8001a2a:	6178      	str	r0, [r7, #20]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d19d      	bne.n	800196e <lv_group_focus_obj+0x52>
 8001a32:	e00c      	b.n	8001a4e <lv_group_focus_obj+0x132>
    if(obj == NULL) return;
 8001a34:	bf00      	nop
 8001a36:	e00a      	b.n	8001a4e <lv_group_focus_obj+0x132>
    if(g == NULL) return;
 8001a38:	bf00      	nop
 8001a3a:	e008      	b.n	8001a4e <lv_group_focus_obj+0x132>
    if(g->frozen != 0) return;
 8001a3c:	bf00      	nop
 8001a3e:	e006      	b.n	8001a4e <lv_group_focus_obj+0x132>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
 8001a40:	bf00      	nop
 8001a42:	e004      	b.n	8001a4e <lv_group_focus_obj+0x132>
                if(res != LV_RES_OK) return;
 8001a44:	bf00      	nop
 8001a46:	e002      	b.n	8001a4e <lv_group_focus_obj+0x132>
            break;
 8001a48:	bf00      	nop
 8001a4a:	e000      	b.n	8001a4e <lv_group_focus_obj+0x132>
                if(res != LV_RES_OK) return;
 8001a4c:	bf00      	nop
        }
    }
}
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <lv_group_focus_next>:
/**
 * Focus the next object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_next(lv_group_t * group)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <lv_group_focus_next+0x1c>)
 8001a5e:	4905      	ldr	r1, [pc, #20]	; (8001a74 <lv_group_focus_next+0x20>)
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f8ee 	bl	8001c42 <focus_next_core>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	0801c32d 	.word	0x0801c32d
 8001a74:	0801c2e1 	.word	0x0801c2e1

08001a78 <lv_group_focus_prev>:
/**
 * Focus the previous object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_prev(lv_group_t * group)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <lv_group_focus_prev+0x1c>)
 8001a82:	4905      	ldr	r1, [pc, #20]	; (8001a98 <lv_group_focus_prev+0x20>)
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f8dc 	bl	8001c42 <focus_next_core>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	0801c361 	.word	0x0801c361
 8001a98:	0801c307 	.word	0x0801c307

08001a9c <lv_group_send_data>:
 * @param group pointer to a group
 * @param c a character (use LV_KEY_.. to navigate)
 * @return result of focused object in group.
 */
lv_res_t lv_group_send_data(lv_group_t * group, uint32_t c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
    lv_obj_t * act = lv_group_get_focused(group);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f868 	bl	8001b7c <lv_group_get_focused>
 8001aac:	60f8      	str	r0, [r7, #12]
    if(act == NULL) return LV_RES_OK;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <lv_group_send_data+0x1c>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e01a      	b.n	8001aee <lv_group_send_data+0x52>

    lv_res_t res;

    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	463a      	mov	r2, r7
 8001abe:	2118      	movs	r1, #24
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	4798      	blx	r3
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	72fb      	strb	r3, [r7, #11]
    if(res != LV_RES_OK) return res;
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <lv_group_send_data+0x36>
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	e00d      	b.n	8001aee <lv_group_send_data+0x52>

    res = lv_event_send(act, LV_EVENT_KEY, &c);
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	210c      	movs	r1, #12
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f004 fd6d 	bl	80065b8 <lv_event_send>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	72fb      	strb	r3, [r7, #11]
    if(res != LV_RES_OK) return res;
 8001ae2:	7afb      	ldrb	r3, [r7, #11]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d001      	beq.n	8001aec <lv_group_send_data+0x50>
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	e000      	b.n	8001aee <lv_group_send_data+0x52>

    return res;
 8001aec:	7afb      	ldrb	r3, [r7, #11]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <lv_group_set_editing>:
 * Manually set the current mode (edit or navigate).
 * @param group pointer to group
 * @param edit: true: edit mode; false: navigate mode
 */
void lv_group_set_editing(lv_group_t * group, bool edit)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	70fb      	strb	r3, [r7, #3]
    if(group == NULL) return;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d031      	beq.n	8001b6c <lv_group_set_editing+0x76>
    uint8_t en_val = edit ? 1 : 0;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	75fb      	strb	r3, [r7, #23]

    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7d1b      	ldrb	r3, [r3, #20]
 8001b10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d028      	beq.n	8001b70 <lv_group_set_editing+0x7a>

    group->editing     = en_val;
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	b2d9      	uxtb	r1, r3
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	7d13      	ldrb	r3, [r2, #20]
 8001b2a:	f361 0341 	bfi	r3, r1, #1, #1
 8001b2e:	7513      	strb	r3, [r2, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f823 	bl	8001b7c <lv_group_get_focused>
 8001b36:	6138      	str	r0, [r7, #16]

    if(focused) {
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d01b      	beq.n	8001b76 <lv_group_set_editing+0x80>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2200      	movs	r2, #0
 8001b44:	2116      	movs	r1, #22
 8001b46:	6938      	ldr	r0, [r7, #16]
 8001b48:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2200      	movs	r2, #0
 8001b52:	210d      	movs	r1, #13
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fd2f 	bl	80065b8 <lv_event_send>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
        if(res != LV_RES_OK) return;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d107      	bne.n	8001b74 <lv_group_set_editing+0x7e>

        lv_obj_invalidate(focused);
 8001b64:	6938      	ldr	r0, [r7, #16]
 8001b66:	f003 fe73 	bl	8005850 <lv_obj_invalidate>
 8001b6a:	e004      	b.n	8001b76 <lv_group_set_editing+0x80>
    if(group == NULL) return;
 8001b6c:	bf00      	nop
 8001b6e:	e002      	b.n	8001b76 <lv_group_set_editing+0x80>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8001b70:	bf00      	nop
 8001b72:	e000      	b.n	8001b76 <lv_group_set_editing+0x80>
        if(res != LV_RES_OK) return;
 8001b74:	bf00      	nop
    }
}
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <lv_group_get_focused>:
 * Get the focused object or NULL if there isn't one
 * @param group pointer to a group
 * @return pointer to the focused object
 */
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    if(!group) return NULL;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <lv_group_get_focused+0x12>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e008      	b.n	8001ba0 <lv_group_get_focused+0x24>
    if(group->obj_focus == NULL) return NULL;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <lv_group_get_focused+0x1e>
 8001b96:	2300      	movs	r3, #0
 8001b98:	e002      	b.n	8001ba0 <lv_group_get_focused+0x24>

    return *group->obj_focus;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <lv_group_get_editing>:
 * Get the current mode (edit or navigate).
 * @param group pointer to group
 * @return true: edit mode; false: navigate mode
 */
bool lv_group_get_editing(const lv_group_t * group)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <lv_group_get_editing+0x12>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e00a      	b.n	8001bd4 <lv_group_get_editing+0x28>
    return group->editing ? true : false;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7d1b      	ldrb	r3, [r3, #20]
 8001bc2:	085b      	lsrs	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bf14      	ite	ne
 8001bce:	2301      	movne	r3, #1
 8001bd0:	2300      	moveq	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7d1b      	ldrb	r3, [r3, #20]
 8001bec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	7d13      	ldrb	r3, [r2, #20]
 8001bf8:	f043 0310 	orr.w	r3, r3, #16
 8001bfc:	7513      	strb	r3, [r2, #20]

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7d1b      	ldrb	r3, [r3, #20]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <lv_group_refocus+0x34>
        lv_group_focus_next(g);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff21 	bl	8001a54 <lv_group_focus_next>
 8001c12:	e009      	b.n	8001c28 <lv_group_refocus+0x48>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7d1b      	ldrb	r3, [r3, #20]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <lv_group_refocus+0x48>
        lv_group_focus_prev(g);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ff28 	bl	8001a78 <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	b2d9      	uxtb	r1, r3
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	7d13      	ldrb	r3, [r2, #20]
 8001c34:	f361 1304 	bfi	r3, r1, #4, #1
 8001c38:	7513      	strb	r3, [r2, #20]
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <focus_next_core>:

static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b088      	sub	sp, #32
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
    if(group->frozen) return;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	7d1b      	ldrb	r3, [r3, #20]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 80b3 	bne.w	8001dc4 <focus_next_core+0x182>

    lv_obj_t ** obj_next     = group->obj_focus;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	61fb      	str	r3, [r7, #28]
    lv_obj_t ** obj_sentinel = NULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
    bool can_move            = true;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	75fb      	strb	r3, [r7, #23]
    bool can_begin           = true;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	75bb      	strb	r3, [r7, #22]

    for(;;) {
        if(obj_next == NULL) {
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d11a      	bne.n	8001cac <focus_next_core+0x6a>
            if(group->wrap || obj_sentinel == NULL) {
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	7d1b      	ldrb	r3, [r3, #20]
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d103      	bne.n	8001c8c <focus_next_core+0x4a>
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 809e 	bne.w	8001dc8 <focus_next_core+0x186>
                if(!can_begin) return;
 8001c8c:	7dbb      	ldrb	r3, [r7, #22]
 8001c8e:	f083 0301 	eor.w	r3, r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 8099 	bne.w	8001dcc <focus_next_core+0x18a>
                obj_next  = begin(&group->obj_ll);
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4798      	blx	r3
 8001ca2:	61f8      	str	r0, [r7, #28]
                can_move  = false;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	75fb      	strb	r3, [r7, #23]
                can_begin = false;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75bb      	strb	r3, [r7, #22]
                /*Currently focused object is the last/first in the group, keep it that way*/
                return;
            }
        }

        if(obj_sentinel == NULL) {
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <focus_next_core+0x7c>
            obj_sentinel = obj_next;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	61bb      	str	r3, [r7, #24]
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8089 	beq.w	8001dd0 <focus_next_core+0x18e>
        }

        if(can_move) {
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d009      	beq.n	8001cd8 <focus_next_core+0x96>
            obj_next = move(&group->obj_ll, obj_next);
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69f9      	ldr	r1, [r7, #28]
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4798      	blx	r3
 8001cce:	61f8      	str	r0, [r7, #28]

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return;
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d07d      	beq.n	8001dd4 <focus_next_core+0x192>
        }

        can_move = true;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	75fb      	strb	r3, [r7, #23]

        if(obj_next == NULL) continue;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d016      	beq.n	8001d10 <focus_next_core+0xce>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f005 fbc7 	bl	800747c <lv_obj_get_state>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10d      	bne.n	8001d14 <focus_next_core+0xd2>

        /*Hidden and disabled objects don't receive focus*/
        if(!lv_obj_get_hidden(*obj_next)) break;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f005 fa73 	bl	80071e8 <lv_obj_get_hidden>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f083 0301 	eor.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d104      	bne.n	8001d18 <focus_next_core+0xd6>
 8001d0e:	e7af      	b.n	8001c70 <focus_next_core+0x2e>
        if(obj_next == NULL) continue;
 8001d10:	bf00      	nop
 8001d12:	e7ad      	b.n	8001c70 <focus_next_core+0x2e>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 8001d14:	bf00      	nop
        if(obj_next == NULL) {
 8001d16:	e7ab      	b.n	8001c70 <focus_next_core+0x2e>
        if(!lv_obj_get_hidden(*obj_next)) break;
 8001d18:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d059      	beq.n	8001dd8 <focus_next_core+0x196>

    if(group->obj_focus) {
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01c      	beq.n	8001d66 <focus_next_core+0x124>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	68d2      	ldr	r2, [r2, #12]
 8001d38:	6810      	ldr	r0, [r2, #0]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2117      	movs	r1, #23
 8001d3e:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	210e      	movs	r1, #14
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f004 fc34 	bl	80065b8 <lv_event_send>
 8001d50:	4603      	mov	r3, r0
 8001d52:	757b      	strb	r3, [r7, #21]
        if(res != LV_RES_OK) return;
 8001d54:	7d7b      	ldrb	r3, [r7, #21]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d140      	bne.n	8001ddc <focus_next_core+0x19a>
        lv_obj_invalidate(*group->obj_focus);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fd75 	bl	8005850 <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	60da      	str	r2, [r3, #12]

    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	68d2      	ldr	r2, [r2, #12]
 8001d78:	6810      	ldr	r0, [r2, #0]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2116      	movs	r1, #22
 8001d7e:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	210d      	movs	r1, #13
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fc14 	bl	80065b8 <lv_event_send>
 8001d90:	4603      	mov	r3, r0
 8001d92:	753b      	strb	r3, [r7, #20]
    if(res != LV_RES_OK) return;
 8001d94:	7d3b      	ldrb	r3, [r7, #20]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d122      	bne.n	8001de0 <focus_next_core+0x19e>

    /*If the object or its parent has `top == true` bring it to the foreground*/
    obj_to_foreground(*group->obj_focus);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f821 	bl	8001de8 <obj_to_foreground>

    lv_obj_invalidate(*group->obj_focus);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 fd4f 	bl	8005850 <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d013      	beq.n	8001de2 <focus_next_core+0x1a0>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	4798      	blx	r3
 8001dc2:	e00e      	b.n	8001de2 <focus_next_core+0x1a0>
    if(group->frozen) return;
 8001dc4:	bf00      	nop
 8001dc6:	e00c      	b.n	8001de2 <focus_next_core+0x1a0>
                return;
 8001dc8:	bf00      	nop
 8001dca:	e00a      	b.n	8001de2 <focus_next_core+0x1a0>
                if(!can_begin) return;
 8001dcc:	bf00      	nop
 8001dce:	e008      	b.n	8001de2 <focus_next_core+0x1a0>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8001dd0:	bf00      	nop
 8001dd2:	e006      	b.n	8001de2 <focus_next_core+0x1a0>
            if(obj_next == obj_sentinel) return;
 8001dd4:	bf00      	nop
 8001dd6:	e004      	b.n	8001de2 <focus_next_core+0x1a0>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8001dd8:	bf00      	nop
 8001dda:	e002      	b.n	8001de2 <focus_next_core+0x1a0>
        if(res != LV_RES_OK) return;
 8001ddc:	bf00      	nop
 8001dde:	e000      	b.n	8001de2 <focus_next_core+0x1a0>
    if(res != LV_RES_OK) return;
 8001de0:	bf00      	nop
}
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <obj_to_foreground>:

static void obj_to_foreground(lv_obj_t * obj)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	60fb      	str	r3, [r7, #12]
    lv_obj_t * last_top = NULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
    while(i != NULL) {
 8001df8:	e00d      	b.n	8001e16 <obj_to_foreground+0x2e>
        if(i->top != 0) last_top = i;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <obj_to_foreground+0x26>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
        i = lv_obj_get_parent(i);
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f004 fd3e 	bl	8006890 <lv_obj_get_parent>
 8001e14:	60f8      	str	r0, [r7, #12]
    while(i != NULL) {
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ee      	bne.n	8001dfa <obj_to_foreground+0x12>
    }

    if(last_top != NULL) {
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <obj_to_foreground+0x40>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8001e22:	68b8      	ldr	r0, [r7, #8]
 8001e24:	f003 fdfa 	bl	8005a1c <lv_obj_move_foreground>
    }
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_lv_indev_init>:

/**
 * Initialize the display input device subsystem
 */
void _lv_indev_init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
 8001e34:	2100      	movs	r1, #0
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 f8b0 	bl	8001f9c <lv_indev_reset>
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_lv_indev_read_task>:
/**
 * Called periodically to read the input devices
 * @param param pointer to and input device to read
 */
void _lv_indev_read_task(lv_task_t * task)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("indev read task started");

    lv_indev_data_t data;

    indev_act = task->user_data;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a4b      	ldr	r2, [pc, #300]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001e4e:	6013      	str	r3, [r2, #0]

    /*Read and process all indevs*/
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8001e50:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8089 	beq.w	8001f6e <_lv_indev_read_task+0x12e>

    /*Handle reset query before processing the point*/
    indev_proc_reset_query_handler(indev_act);
 8001e5c:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 fb2b 	bl	80034bc <indev_proc_reset_query_handler>

    if(indev_act->proc.disabled) return;
 8001e66:	4b45      	ldr	r3, [pc, #276]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d17c      	bne.n	8001f72 <_lv_indev_read_task+0x132>
    bool more_to_read;
    do {
        /*Read the data*/
        more_to_read = _lv_indev_read(indev_act, &data);
 8001e78:	4b40      	ldr	r3, [pc, #256]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f107 020c 	add.w	r2, r7, #12
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f018 fc60 	bl	801a748 <_lv_indev_read>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	77fb      	strb	r3, [r7, #31]

        /*The active object might deleted even in the read function*/
        indev_proc_reset_query_handler(indev_act);
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 fb13 	bl	80034bc <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <_lv_indev_read_task+0x140>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        indev_act->proc.state = data.state;
 8001e9c:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	7eba      	ldrb	r2, [r7, #26]
 8001ea2:	771a      	strb	r2, [r3, #28]

        /*Save the last activity time*/
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	7f1b      	ldrb	r3, [r3, #28]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <_lv_indev_read_task+0x80>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8001eae:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68dc      	ldr	r4, [r3, #12]
 8001eb4:	f018 fc9e 	bl	801a7f4 <lv_tick_get>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8001ebe:	e010      	b.n	8001ee2 <_lv_indev_read_task+0xa2>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d10b      	bne.n	8001ee2 <_lv_indev_read_task+0xa2>
 8001eca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <_lv_indev_read_task+0xa2>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68dc      	ldr	r4, [r3, #12]
 8001ed8:	f018 fc8c 	bl	801a7f4 <lv_tick_get>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
        }

        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <_lv_indev_read_task+0xbe>
            indev_pointer_proc(indev_act, &data);
 8001eec:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f107 020c 	add.w	r2, r7, #12
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f8a2 	bl	8002040 <indev_pointer_proc>
 8001efc:	e028      	b.n	8001f50 <_lv_indev_read_task+0x110>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d108      	bne.n	8001f1a <_lv_indev_read_task+0xda>
            indev_keypad_proc(indev_act, &data);
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f107 020c 	add.w	r2, r7, #12
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f8e0 	bl	80020d8 <indev_keypad_proc>
 8001f18:	e01a      	b.n	8001f50 <_lv_indev_read_task+0x110>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d108      	bne.n	8001f36 <_lv_indev_read_task+0xf6>
            indev_encoder_proc(indev_act, &data);
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f107 020c 	add.w	r2, r7, #12
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fb12 	bl	8002558 <indev_encoder_proc>
 8001f34:	e00c      	b.n	8001f50 <_lv_indev_read_task+0x110>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d107      	bne.n	8001f50 <_lv_indev_read_task+0x110>
            indev_button_proc(indev_act, &data);
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f107 020c 	add.w	r2, r7, #12
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fe40 	bl	8002bd0 <indev_button_proc>
        }
        /*Handle reset query if it happened in during processing*/
        indev_proc_reset_query_handler(indev_act);
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 fab1 	bl	80034bc <indev_proc_reset_query_handler>
    } while(more_to_read);
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d18b      	bne.n	8001e78 <_lv_indev_read_task+0x38>

    /*End of indev processing, so no act indev*/
    indev_act     = NULL;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <_lv_indev_read_task+0x13c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    indev_obj_act = NULL;
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <_lv_indev_read_task+0x140>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e002      	b.n	8001f74 <_lv_indev_read_task+0x134>
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <_lv_indev_read_task+0x134>
    if(indev_act->proc.disabled) return;
 8001f72:	bf00      	nop

    LV_LOG_TRACE("indev read task finished");
}
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd90      	pop	{r4, r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2001779c 	.word	0x2001779c
 8001f80:	200177a0 	.word	0x200177a0

08001f84 <lv_indev_get_act>:
 * Get the currently processed input device. Can be used in action functions too.
 * @return pointer to the currently processed input device or NULL if no input device processing
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
    return indev_act;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <lv_indev_get_act+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	2001779c 	.word	0x2001779c

08001f9c <lv_indev_reset>:
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
    if(indev) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01a      	beq.n	8001fe2 <lv_indev_reset+0x46>
        indev->proc.reset_query = 1;
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <lv_indev_reset+0x9c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d102      	bne.n	8001fca <lv_indev_reset+0x2e>
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <lv_indev_reset+0xa0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <lv_indev_reset+0x3e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d129      	bne.n	800202e <lv_indev_reset+0x92>
            indev->proc.types.pointer.last_pressed = NULL;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	63da      	str	r2, [r3, #60]	; 0x3c
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
        }
    }
}
 8001fe0:	e025      	b.n	800202e <lv_indev_reset+0x92>
        lv_indev_t * i = lv_indev_get_next(NULL);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f018 fb98 	bl	801a718 <lv_indev_get_next>
 8001fe8:	60f8      	str	r0, [r7, #12]
        while(i) {
 8001fea:	e01d      	b.n	8002028 <lv_indev_reset+0x8c>
            i->proc.reset_query = 1;
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <lv_indev_reset+0x9c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d102      	bne.n	800200a <lv_indev_reset+0x6e>
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <lv_indev_reset+0xa0>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <lv_indev_reset+0x7e>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d102      	bne.n	8002020 <lv_indev_reset+0x84>
                i->proc.types.pointer.last_pressed = NULL;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	63da      	str	r2, [r3, #60]	; 0x3c
            i = lv_indev_get_next(i);
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f018 fb79 	bl	801a718 <lv_indev_get_next>
 8002026:	60f8      	str	r0, [r7, #12]
        while(i) {
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1de      	bne.n	8001fec <lv_indev_reset+0x50>
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2001779c 	.word	0x2001779c
 800203c:	200177a0 	.word	0x200177a0

08002040 <indev_pointer_proc>:
 * Process a new point from LV_INDEV_TYPE_POINTER input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_pointer_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
    /*Move the cursor if set and moved*/
    if(i->cursor != NULL &&
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01a      	beq.n	8002088 <indev_pointer_proc+0x48>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f9b3 3000 	ldrsh.w	r3, [r3]
    if(i->cursor != NULL &&
 800205e:	429a      	cmp	r2, r3
 8002060:	d107      	bne.n	8002072 <indev_pointer_proc+0x32>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800206e:	429a      	cmp	r2, r3
 8002070:	d00a      	beq.n	8002088 <indev_pointer_proc+0x48>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f9b3 1000 	ldrsh.w	r1, [r3]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002082:	461a      	mov	r2, r3
 8002084:	f003 fd08 	bl	8005a98 <lv_obj_set_pos>
    }

    i->proc.types.pointer.act_point.x = data->point.x;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	841a      	strh	r2, [r3, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	845a      	strh	r2, [r3, #34]	; 0x22

    if(i->proc.state == LV_INDEV_STATE_PR) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7f1b      	ldrb	r3, [r3, #28]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <indev_pointer_proc+0x70>
        indev_proc_press(&i->proc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	331c      	adds	r3, #28
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fdf9 	bl	8002ca0 <indev_proc_press>
 80020ae:	e004      	b.n	80020ba <indev_pointer_proc+0x7a>
    }
    else {
        indev_proc_release(&i->proc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	331c      	adds	r3, #28
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 f8cf 	bl	8003258 <indev_proc_release>
    }

    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	849a      	strh	r2, [r3, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	84da      	strh	r2, [r3, #38]	; 0x26
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <indev_keypad_proc>:
 * Process a new point from LV_INDEV_TYPE_KEYPAD input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_keypad_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
#if LV_USE_GROUP
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	7b9b      	ldrb	r3, [r3, #14]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d108      	bne.n	80020fc <indev_keypad_proc+0x24>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 8212 	bne.w	8002520 <indev_keypad_proc+0x448>

    if(i->proc.wait_until_release) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d014      	beq.n	8002136 <indev_keypad_proc+0x5e>
        i->proc.wait_until_release      = 0;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002112:	f36f 03c3 	bfc	r3, #3, #1
 8002116:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002126:	f36f 0300 	bfc	r3, #0, #1
 800212a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2020 	strb.w	r2, [r3, #32]
    }

    lv_group_t * g = i->group;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	617b      	str	r3, [r7, #20]
    if(g == NULL) return;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 81f0 	beq.w	8002524 <indev_keypad_proc+0x44c>

    indev_obj_act = lv_group_get_focused(g);
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f7ff fd19 	bl	8001b7c <lv_group_get_focused>
 800214a:	4602      	mov	r2, r0
 800214c:	4bae      	ldr	r3, [pc, #696]	; (8002408 <indev_keypad_proc+0x330>)
 800214e:	601a      	str	r2, [r3, #0]
    if(indev_obj_act == NULL) return;
 8002150:	4bad      	ldr	r3, [pc, #692]	; (8002408 <indev_keypad_proc+0x330>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 81e7 	beq.w	8002528 <indev_keypad_proc+0x450>

    /*Save the last key to compare it with the current latter on RELEASE*/
    uint32_t prev_key = i->proc.types.keypad.last_key;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	613b      	str	r3, [r7, #16]

    /* Save the last key.
     * It must be done here else `lv_indev_get_key` will return the last key in events and signals*/
    i->proc.types.keypad.last_key = data->key;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

    /* Save the previous state so we can detect state changes below and also set the last state now
     * so if any signal/event handler on the way returns `LV_RES_INV` the last state is remembered
     * for the next time*/
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216e:	60fb      	str	r3, [r7, #12]
    i->proc.types.keypad.last_state = data->state;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	7b9a      	ldrb	r2, [r3, #14]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f883 2020 	strb.w	r2, [r3, #32]

    /*Key press happened*/
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	7b9b      	ldrb	r3, [r3, #14]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d17b      	bne.n	800227a <indev_keypad_proc+0x1a2>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d178      	bne.n	800227a <indev_keypad_proc+0x1a2>
        i->proc.pr_timestamp = lv_tick_get();
 8002188:	f018 fb34 	bl	801a7f4 <lv_tick_get>
 800218c:	4602      	mov	r2, r0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	649a      	str	r2, [r3, #72]	; 0x48

        /*Simulate a press on the object if ENTER was pressed*/
        if(data->key == LV_KEY_ENTER) {
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b0a      	cmp	r3, #10
 8002198:	d125      	bne.n	80021e6 <indev_keypad_proc+0x10e>
            /*Send the ENTER as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ENTER);
 800219a:	210a      	movs	r1, #10
 800219c:	6978      	ldr	r0, [r7, #20]
 800219e:	f7ff fc7d 	bl	8001a9c <lv_group_send_data>

            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 80021a2:	4b99      	ldr	r3, [pc, #612]	; (8002408 <indev_keypad_proc+0x330>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	4a97      	ldr	r2, [pc, #604]	; (8002408 <indev_keypad_proc+0x330>)
 80021aa:	6810      	ldr	r0, [r2, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	210b      	movs	r1, #11
 80021b0:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	331c      	adds	r3, #28
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 ffa2 	bl	8004100 <indev_reset_check>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 81b4 	bne.w	800252c <indev_keypad_proc+0x454>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 80021c4:	4b90      	ldr	r3, [pc, #576]	; (8002408 <indev_keypad_proc+0x330>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 f9f3 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	331c      	adds	r3, #28
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 ff92 	bl	8004100 <indev_reset_check>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8197 	beq.w	8002512 <indev_keypad_proc+0x43a>
 80021e4:	e1b3      	b.n	800254e <indev_keypad_proc+0x476>
        }
        else if(data->key == LV_KEY_ESC) {
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b1b      	cmp	r3, #27
 80021ec:	d114      	bne.n	8002218 <indev_keypad_proc+0x140>
            /*Send the ESC as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ESC);
 80021ee:	211b      	movs	r1, #27
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f7ff fc53 	bl	8001a9c <lv_group_send_data>

            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 80021f6:	4b84      	ldr	r3, [pc, #528]	; (8002408 <indev_keypad_proc+0x330>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2200      	movs	r2, #0
 80021fc:	2114      	movs	r1, #20
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 f9da 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	331c      	adds	r3, #28
 8002208:	4618      	mov	r0, r3
 800220a:	f001 ff79 	bl	8004100 <indev_reset_check>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 817e 	beq.w	8002512 <indev_keypad_proc+0x43a>
 8002216:	e19a      	b.n	800254e <indev_keypad_proc+0x476>
        }
        /*Move the focus on NEXT*/
        else if(data->key == LV_KEY_NEXT) {
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b09      	cmp	r3, #9
 800221e:	d110      	bne.n	8002242 <indev_keypad_proc+0x16a>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002220:	2100      	movs	r1, #0
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff fc67 	bl	8001af6 <lv_group_set_editing>
            lv_group_focus_next(g);
 8002228:	6978      	ldr	r0, [r7, #20]
 800222a:	f7ff fc13 	bl	8001a54 <lv_group_focus_next>
            if(indev_reset_check(&i->proc)) return;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	331c      	adds	r3, #28
 8002232:	4618      	mov	r0, r3
 8002234:	f001 ff64 	bl	8004100 <indev_reset_check>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8169 	beq.w	8002512 <indev_keypad_proc+0x43a>
 8002240:	e185      	b.n	800254e <indev_keypad_proc+0x476>
        }
        /*Move the focus on PREV*/
        else if(data->key == LV_KEY_PREV) {
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b0b      	cmp	r3, #11
 8002248:	d110      	bne.n	800226c <indev_keypad_proc+0x194>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 800224a:	2100      	movs	r1, #0
 800224c:	6978      	ldr	r0, [r7, #20]
 800224e:	f7ff fc52 	bl	8001af6 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff fc10 	bl	8001a78 <lv_group_focus_prev>
            if(indev_reset_check(&i->proc)) return;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	331c      	adds	r3, #28
 800225c:	4618      	mov	r0, r3
 800225e:	f001 ff4f 	bl	8004100 <indev_reset_check>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8154 	beq.w	8002512 <indev_keypad_proc+0x43a>
 800226a:	e170      	b.n	800254e <indev_keypad_proc+0x476>
        }
        /*Just send other keys to the object (e.g. 'A' or `LV_GROUP_KEY_RIGHT`)*/
        else {
            lv_group_send_data(g, data->key);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4619      	mov	r1, r3
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f7ff fc12 	bl	8001a9c <lv_group_send_data>
        if(data->key == LV_KEY_ENTER) {
 8002278:	e14b      	b.n	8002512 <indev_keypad_proc+0x43a>
        }
    }
    /*Pressing*/
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	7b9b      	ldrb	r3, [r3, #14]
 800227e:	2b01      	cmp	r3, #1
 8002280:	f040 80e9 	bne.w	8002456 <indev_keypad_proc+0x37e>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	f040 80e5 	bne.w	8002456 <indev_keypad_proc+0x37e>

        if(data->key == LV_KEY_ENTER) {
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b0a      	cmp	r3, #10
 8002292:	d120      	bne.n	80022d6 <indev_keypad_proc+0x1fe>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
 8002294:	4b5c      	ldr	r3, [pc, #368]	; (8002408 <indev_keypad_proc+0x330>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a5b      	ldr	r2, [pc, #364]	; (8002408 <indev_keypad_proc+0x330>)
 800229c:	6810      	ldr	r0, [r2, #0]
 800229e:	2200      	movs	r2, #0
 80022a0:	210c      	movs	r1, #12
 80022a2:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	331c      	adds	r3, #28
 80022a8:	4618      	mov	r0, r3
 80022aa:	f001 ff29 	bl	8004100 <indev_reset_check>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 813d 	bne.w	8002530 <indev_keypad_proc+0x458>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 80022b6:	4b54      	ldr	r3, [pc, #336]	; (8002408 <indev_keypad_proc+0x330>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2101      	movs	r1, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 f97a 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	331c      	adds	r3, #28
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 ff19 	bl	8004100 <indev_reset_check>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 812f 	bne.w	8002534 <indev_keypad_proc+0x45c>
        }

        /*Long press time has elapsed?*/
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d13b      	bne.n	800235e <indev_keypad_proc+0x286>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ea:	4618      	mov	r0, r3
 80022ec:	f018 fa9c 	bl	801a828 <lv_tick_elaps>
 80022f0:	4602      	mov	r2, r0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	8b1b      	ldrh	r3, [r3, #24]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d931      	bls.n	800235e <indev_keypad_proc+0x286>
            i->proc.long_pr_sent = 1;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b0a      	cmp	r3, #10
 800230e:	f040 80a0 	bne.w	8002452 <indev_keypad_proc+0x37a>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8002312:	f018 fa6f 	bl	801a7f4 <lv_tick_get>
 8002316:	4602      	mov	r2, r0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	64da      	str	r2, [r3, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 800231c:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <indev_keypad_proc+0x330>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a39      	ldr	r2, [pc, #228]	; (8002408 <indev_keypad_proc+0x330>)
 8002324:	6810      	ldr	r0, [r2, #0]
 8002326:	2200      	movs	r2, #0
 8002328:	210f      	movs	r1, #15
 800232a:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	331c      	adds	r3, #28
 8002330:	4618      	mov	r0, r3
 8002332:	f001 fee5 	bl	8004100 <indev_reset_check>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 80fd 	bne.w	8002538 <indev_keypad_proc+0x460>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 800233e:	4b32      	ldr	r3, [pc, #200]	; (8002408 <indev_keypad_proc+0x330>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	2104      	movs	r1, #4
 8002346:	4618      	mov	r0, r3
 8002348:	f004 f936 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	331c      	adds	r3, #28
 8002350:	4618      	mov	r0, r3
 8002352:	f001 fed5 	bl	8004100 <indev_reset_check>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d07a      	beq.n	8002452 <indev_keypad_proc+0x37a>
 800235c:	e0f7      	b.n	800254e <indev_keypad_proc+0x476>
            }
        }
        /*Long press repeated time has elapsed?*/
        else if(i->proc.long_pr_sent != 0 &&
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80d3 	beq.w	8002516 <indev_keypad_proc+0x43e>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	4618      	mov	r0, r3
 8002376:	f018 fa57 	bl	801a828 <lv_tick_elaps>
 800237a:	4602      	mov	r2, r0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8b5b      	ldrh	r3, [r3, #26]
        else if(i->proc.long_pr_sent != 0 &&
 8002380:	429a      	cmp	r2, r3
 8002382:	f240 80c8 	bls.w	8002516 <indev_keypad_proc+0x43e>

            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002386:	f018 fa35 	bl	801a7f4 <lv_tick_get>
 800238a:	4602      	mov	r2, r0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	64da      	str	r2, [r3, #76]	; 0x4c

            /*Send LONG_PRESS_REP on ENTER*/
            if(data->key == LV_KEY_ENTER) {
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b0a      	cmp	r3, #10
 8002396:	d121      	bne.n	80023dc <indev_keypad_proc+0x304>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <indev_keypad_proc+0x330>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <indev_keypad_proc+0x330>)
 80023a0:	6810      	ldr	r0, [r2, #0]
 80023a2:	2200      	movs	r2, #0
 80023a4:	2110      	movs	r1, #16
 80023a6:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	331c      	adds	r3, #28
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 fea7 	bl	8004100 <indev_reset_check>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f040 80c1 	bne.w	800253c <indev_keypad_proc+0x464>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <indev_keypad_proc+0x330>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	2105      	movs	r1, #5
 80023c2:	4618      	mov	r0, r3
 80023c4:	f004 f8f8 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	331c      	adds	r3, #28
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 fe97 	bl	8004100 <indev_reset_check>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 809e 	beq.w	8002516 <indev_keypad_proc+0x43e>
 80023da:	e0b8      	b.n	800254e <indev_keypad_proc+0x476>
            }
            /*Move the focus on NEXT again*/
            else if(data->key == LV_KEY_NEXT) {
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	d113      	bne.n	800240c <indev_keypad_proc+0x334>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80023e4:	2100      	movs	r1, #0
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f7ff fb85 	bl	8001af6 <lv_group_set_editing>
                lv_group_focus_next(g);
 80023ec:	6978      	ldr	r0, [r7, #20]
 80023ee:	f7ff fb31 	bl	8001a54 <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	331c      	adds	r3, #28
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 fe82 	bl	8004100 <indev_reset_check>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8089 	beq.w	8002516 <indev_keypad_proc+0x43e>
 8002404:	e0a3      	b.n	800254e <indev_keypad_proc+0x476>
 8002406:	bf00      	nop
 8002408:	200177a0 	.word	0x200177a0
            }
            /*Move the focus on PREV again*/
            else if(data->key == LV_KEY_PREV) {
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b0b      	cmp	r3, #11
 8002412:	d10f      	bne.n	8002434 <indev_keypad_proc+0x35c>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002414:	2100      	movs	r1, #0
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff fb6d 	bl	8001af6 <lv_group_set_editing>
                lv_group_focus_prev(g);
 800241c:	6978      	ldr	r0, [r7, #20]
 800241e:	f7ff fb2b 	bl	8001a78 <lv_group_focus_prev>
                if(indev_reset_check(&i->proc)) return;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	331c      	adds	r3, #28
 8002426:	4618      	mov	r0, r3
 8002428:	f001 fe6a 	bl	8004100 <indev_reset_check>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d071      	beq.n	8002516 <indev_keypad_proc+0x43e>
 8002432:	e08c      	b.n	800254e <indev_keypad_proc+0x476>
            }
            /*Just send other keys again to the object (e.g. 'A' or `LV_GROUP_KEY_RIGHT)*/
            else {
                lv_group_send_data(g, data->key);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4619      	mov	r1, r3
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff fb2e 	bl	8001a9c <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	331c      	adds	r3, #28
 8002444:	4618      	mov	r0, r3
 8002446:	f001 fe5b 	bl	8004100 <indev_reset_check>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d062      	beq.n	8002516 <indev_keypad_proc+0x43e>
 8002450:	e07d      	b.n	800254e <indev_keypad_proc+0x476>
            if(data->key == LV_KEY_ENTER) {
 8002452:	bf00      	nop
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002454:	e05f      	b.n	8002516 <indev_keypad_proc+0x43e>
            }
        }
    }
    /*Release happened*/
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	7b9b      	ldrb	r3, [r3, #14]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d15c      	bne.n	8002518 <indev_keypad_proc+0x440>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d159      	bne.n	8002518 <indev_keypad_proc+0x440>
        /*The user might clear the key when it was released. Always release the pressed key*/
        data->key = prev_key;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	605a      	str	r2, [r3, #4]
        if(data->key == LV_KEY_ENTER) {
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b0a      	cmp	r3, #10
 8002470:	d144      	bne.n	80024fc <indev_keypad_proc+0x424>

            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <indev_keypad_proc+0x47c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4a36      	ldr	r2, [pc, #216]	; (8002554 <indev_keypad_proc+0x47c>)
 800247a:	6810      	ldr	r0, [r2, #0]
 800247c:	2200      	movs	r2, #0
 800247e:	210e      	movs	r1, #14
 8002480:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	331c      	adds	r3, #28
 8002486:	4618      	mov	r0, r3
 8002488:	f001 fe3a 	bl	8004100 <indev_reset_check>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d156      	bne.n	8002540 <indev_keypad_proc+0x468>

            if(i->proc.long_pr_sent == 0) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10e      	bne.n	80024c0 <indev_keypad_proc+0x3e8>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 80024a2:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <indev_keypad_proc+0x47c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2103      	movs	r1, #3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 f884 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	331c      	adds	r3, #28
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fe23 	bl	8004100 <indev_reset_check>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d141      	bne.n	8002544 <indev_keypad_proc+0x46c>
            }

            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 80024c0:	4b24      	ldr	r3, [pc, #144]	; (8002554 <indev_keypad_proc+0x47c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2106      	movs	r1, #6
 80024c8:	4618      	mov	r0, r3
 80024ca:	f004 f875 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	331c      	adds	r3, #28
 80024d2:	4618      	mov	r0, r3
 80024d4:	f001 fe14 	bl	8004100 <indev_reset_check>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d134      	bne.n	8002548 <indev_keypad_proc+0x470>

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <indev_keypad_proc+0x47c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	2107      	movs	r1, #7
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 f866 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	331c      	adds	r3, #28
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 fe05 	bl	8004100 <indev_reset_check>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d127      	bne.n	800254c <indev_keypad_proc+0x474>
        }
        i->proc.pr_timestamp = 0;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002508:	f36f 0300 	bfc	r3, #0, #1
 800250c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8002510:	e002      	b.n	8002518 <indev_keypad_proc+0x440>
        if(data->key == LV_KEY_ENTER) {
 8002512:	bf00      	nop
 8002514:	e000      	b.n	8002518 <indev_keypad_proc+0x440>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002516:	bf00      	nop
    }
    indev_obj_act = NULL;
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <indev_keypad_proc+0x47c>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e016      	b.n	800254e <indev_keypad_proc+0x476>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8002520:	bf00      	nop
 8002522:	e014      	b.n	800254e <indev_keypad_proc+0x476>
    if(g == NULL) return;
 8002524:	bf00      	nop
 8002526:	e012      	b.n	800254e <indev_keypad_proc+0x476>
    if(indev_obj_act == NULL) return;
 8002528:	bf00      	nop
 800252a:	e010      	b.n	800254e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 800252c:	bf00      	nop
 800252e:	e00e      	b.n	800254e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002530:	bf00      	nop
 8002532:	e00c      	b.n	800254e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002534:	bf00      	nop
 8002536:	e00a      	b.n	800254e <indev_keypad_proc+0x476>
                if(indev_reset_check(&i->proc)) return;
 8002538:	bf00      	nop
 800253a:	e008      	b.n	800254e <indev_keypad_proc+0x476>
                if(indev_reset_check(&i->proc)) return;
 800253c:	bf00      	nop
 800253e:	e006      	b.n	800254e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002540:	bf00      	nop
 8002542:	e004      	b.n	800254e <indev_keypad_proc+0x476>
                if(indev_reset_check(&i->proc)) return;
 8002544:	bf00      	nop
 8002546:	e002      	b.n	800254e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002548:	bf00      	nop
 800254a:	e000      	b.n	800254e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 800254c:	bf00      	nop
#else
    (void)data; /*Unused*/
    (void)i;    /*Unused*/
#endif
}
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200177a0 	.word	0x200177a0

08002558 <indev_encoder_proc>:
 * Process a new point from LV_INDEV_TYPE_ENCODER input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_encoder_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
#if LV_USE_GROUP

    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	7b9b      	ldrb	r3, [r3, #14]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d108      	bne.n	800257c <indev_encoder_proc+0x24>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 830a 	bne.w	8002b90 <indev_encoder_proc+0x638>

    if(i->proc.wait_until_release) {
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d014      	beq.n	80025b6 <indev_encoder_proc+0x5e>
        i->proc.wait_until_release      = 0;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002592:	f36f 03c3 	bfc	r3, #3, #1
 8002596:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80025a6:	f36f 0300 	bfc	r3, #0, #1
 80025aa:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2020 	strb.w	r2, [r3, #32]
    }

    /* Save the last keys before anything else.
     * They need to be already saved if the function returns for any reason*/
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025bc:	75fb      	strb	r3, [r7, #23]
    i->proc.types.keypad.last_state = data->state;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	7b9a      	ldrb	r2, [r3, #14]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f883 2020 	strb.w	r2, [r3, #32]
    i->proc.types.keypad.last_key   = data->key;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

    lv_group_t * g = i->group;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	613b      	str	r3, [r7, #16]
    if(g == NULL) return;
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 82db 	beq.w	8002b94 <indev_encoder_proc+0x63c>

    indev_obj_act = lv_group_get_focused(g);
 80025de:	6938      	ldr	r0, [r7, #16]
 80025e0:	f7ff facc 	bl	8001b7c <lv_group_get_focused>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4bab      	ldr	r3, [pc, #684]	; (8002894 <indev_encoder_proc+0x33c>)
 80025e8:	601a      	str	r2, [r3, #0]
    if(indev_obj_act == NULL) return;
 80025ea:	4baa      	ldr	r3, [pc, #680]	; (8002894 <indev_encoder_proc+0x33c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 82d2 	beq.w	8002b98 <indev_encoder_proc+0x640>

    /*Process the steps they are valid only with released button*/
    if(data->state != LV_INDEV_STATE_REL) {
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	7b9b      	ldrb	r3, [r3, #14]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <indev_encoder_proc+0xaa>
        data->enc_diff = 0;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	819a      	strh	r2, [r3, #12]
    }

    /*Refresh the focused object. It might change due to lv_group_focus_prev/next*/
    indev_obj_act = lv_group_get_focused(g);
 8002602:	6938      	ldr	r0, [r7, #16]
 8002604:	f7ff faba 	bl	8001b7c <lv_group_get_focused>
 8002608:	4602      	mov	r2, r0
 800260a:	4ba2      	ldr	r3, [pc, #648]	; (8002894 <indev_encoder_proc+0x33c>)
 800260c:	601a      	str	r2, [r3, #0]
    if(indev_obj_act == NULL) return;
 800260e:	4ba1      	ldr	r3, [pc, #644]	; (8002894 <indev_encoder_proc+0x33c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 82c2 	beq.w	8002b9c <indev_encoder_proc+0x644>

    /*Button press happened*/
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	7b9b      	ldrb	r3, [r3, #14]
 800261c:	2b01      	cmp	r3, #1
 800261e:	f040 8083 	bne.w	8002728 <indev_encoder_proc+0x1d0>
 8002622:	7dfb      	ldrb	r3, [r7, #23]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d17f      	bne.n	8002728 <indev_encoder_proc+0x1d0>

        i->proc.pr_timestamp = lv_tick_get();
 8002628:	f018 f8e4 	bl	801a7f4 <lv_tick_get>
 800262c:	4602      	mov	r2, r0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	649a      	str	r2, [r3, #72]	; 0x48

        if(data->key == LV_KEY_ENTER) {
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b0a      	cmp	r3, #10
 8002638:	d13a      	bne.n	80026b0 <indev_encoder_proc+0x158>
            bool editable = false;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 800263e:	4b95      	ldr	r3, [pc, #596]	; (8002894 <indev_encoder_proc+0x33c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4a93      	ldr	r2, [pc, #588]	; (8002894 <indev_encoder_proc+0x33c>)
 8002646:	6810      	ldr	r0, [r2, #0]
 8002648:	f107 020f 	add.w	r2, r7, #15
 800264c:	2119      	movs	r1, #25
 800264e:	4798      	blx	r3

            if(lv_group_get_editing(g) == true || editable == false) {
 8002650:	6938      	ldr	r0, [r7, #16]
 8002652:	f7ff faab 	bl	8001bac <lv_group_get_editing>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <indev_encoder_proc+0x112>
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	f083 0301 	eor.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8228 	beq.w	8002aba <indev_encoder_proc+0x562>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 800266a:	4b8a      	ldr	r3, [pc, #552]	; (8002894 <indev_encoder_proc+0x33c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4a88      	ldr	r2, [pc, #544]	; (8002894 <indev_encoder_proc+0x33c>)
 8002672:	6810      	ldr	r0, [r2, #0]
 8002674:	2200      	movs	r2, #0
 8002676:	210b      	movs	r1, #11
 8002678:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	331c      	adds	r3, #28
 800267e:	4618      	mov	r0, r3
 8002680:	f001 fd3e 	bl	8004100 <indev_reset_check>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 828a 	bne.w	8002ba0 <indev_encoder_proc+0x648>

                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 800268c:	4b81      	ldr	r3, [pc, #516]	; (8002894 <indev_encoder_proc+0x33c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f003 ff8f 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	331c      	adds	r3, #28
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 fd2e 	bl	8004100 <indev_reset_check>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8207 	beq.w	8002aba <indev_encoder_proc+0x562>
 80026ac:	bf00      	nop
 80026ae:	e28a      	b.n	8002bc6 <indev_encoder_proc+0x66e>
            }
        }
        else if(data->key == LV_KEY_LEFT) {
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b14      	cmp	r3, #20
 80026b6:	d109      	bne.n	80026cc <indev_encoder_proc+0x174>
            /*emulate encoder left*/
            data->enc_diff--;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	819a      	strh	r2, [r3, #12]
        if(data->key == LV_KEY_ENTER) {
 80026ca:	e1f6      	b.n	8002aba <indev_encoder_proc+0x562>
        }
        else if(data->key == LV_KEY_RIGHT) {
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b13      	cmp	r3, #19
 80026d2:	d109      	bne.n	80026e8 <indev_encoder_proc+0x190>
            /*emulate encoder right*/
            data->enc_diff++;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	819a      	strh	r2, [r3, #12]
        if(data->key == LV_KEY_ENTER) {
 80026e6:	e1e8      	b.n	8002aba <indev_encoder_proc+0x562>
        }
        else if(data->key == LV_KEY_ESC) {
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b1b      	cmp	r3, #27
 80026ee:	d114      	bne.n	800271a <indev_encoder_proc+0x1c2>
            /*Send the ESC as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ESC);
 80026f0:	211b      	movs	r1, #27
 80026f2:	6938      	ldr	r0, [r7, #16]
 80026f4:	f7ff f9d2 	bl	8001a9c <lv_group_send_data>

            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 80026f8:	4b66      	ldr	r3, [pc, #408]	; (8002894 <indev_encoder_proc+0x33c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2114      	movs	r1, #20
 8002700:	4618      	mov	r0, r3
 8002702:	f003 ff59 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	331c      	adds	r3, #28
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fcf8 	bl	8004100 <indev_reset_check>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 81d1 	beq.w	8002aba <indev_encoder_proc+0x562>
 8002718:	e255      	b.n	8002bc6 <indev_encoder_proc+0x66e>
        }
        /*Just send other keys to the object (e.g. 'A' or `LV_GROUP_KEY_RIGHT`)*/
        else {
            lv_group_send_data(g, data->key);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4619      	mov	r1, r3
 8002720:	6938      	ldr	r0, [r7, #16]
 8002722:	f7ff f9bb 	bl	8001a9c <lv_group_send_data>
        if(data->key == LV_KEY_ENTER) {
 8002726:	e1c8      	b.n	8002aba <indev_encoder_proc+0x562>
        }
    }
    /*Pressing*/
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	7b9b      	ldrb	r3, [r3, #14]
 800272c:	2b01      	cmp	r3, #1
 800272e:	f040 80df 	bne.w	80028f0 <indev_encoder_proc+0x398>
 8002732:	7dfb      	ldrb	r3, [r7, #23]
 8002734:	2b01      	cmp	r3, #1
 8002736:	f040 80db 	bne.w	80028f0 <indev_encoder_proc+0x398>
        /* Long press*/
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d164      	bne.n	8002814 <indev_encoder_proc+0x2bc>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274e:	4618      	mov	r0, r3
 8002750:	f018 f86a 	bl	801a828 <lv_tick_elaps>
 8002754:	4602      	mov	r2, r0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	8b1b      	ldrh	r3, [r3, #24]
 800275a:	429a      	cmp	r2, r3
 800275c:	d95a      	bls.n	8002814 <indev_encoder_proc+0x2bc>

            i->proc.long_pr_sent = 1;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800276c:	f018 f842 	bl	801a7f4 <lv_tick_get>
 8002770:	4602      	mov	r2, r0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	64da      	str	r2, [r3, #76]	; 0x4c

            if(data->key == LV_KEY_ENTER) {
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b0a      	cmp	r3, #10
 800277c:	d142      	bne.n	8002804 <indev_encoder_proc+0x2ac>
                bool editable = false;
 800277e:	2300      	movs	r3, #0
 8002780:	73bb      	strb	r3, [r7, #14]
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8002782:	4b44      	ldr	r3, [pc, #272]	; (8002894 <indev_encoder_proc+0x33c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	4a42      	ldr	r2, [pc, #264]	; (8002894 <indev_encoder_proc+0x33c>)
 800278a:	6810      	ldr	r0, [r2, #0]
 800278c:	f107 020e 	add.w	r2, r7, #14
 8002790:	2119      	movs	r1, #25
 8002792:	4798      	blx	r3

                /*On enter long press toggle edit mode.*/
                if(editable) {
 8002794:	7bbb      	ldrb	r3, [r7, #14]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d012      	beq.n	80027c0 <indev_encoder_proc+0x268>
                    /*Don't leave edit mode if there is only one object (nowhere to navigate)*/
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4618      	mov	r0, r3
 800279e:	f019 fdf8 	bl	801c392 <_lv_ll_get_len>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d92d      	bls.n	8002804 <indev_encoder_proc+0x2ac>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 80027a8:	6938      	ldr	r0, [r7, #16]
 80027aa:	f7ff f9ff 	bl	8001bac <lv_group_get_editing>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f083 0301 	eor.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	4619      	mov	r1, r3
 80027b8:	6938      	ldr	r0, [r7, #16]
 80027ba:	f7ff f99c 	bl	8001af6 <lv_group_set_editing>
 80027be:	e021      	b.n	8002804 <indev_encoder_proc+0x2ac>
                    }
                }
                /*If not editable then just send a long press signal*/
                else {
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 80027c0:	4b34      	ldr	r3, [pc, #208]	; (8002894 <indev_encoder_proc+0x33c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4a33      	ldr	r2, [pc, #204]	; (8002894 <indev_encoder_proc+0x33c>)
 80027c8:	6810      	ldr	r0, [r2, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	210f      	movs	r1, #15
 80027ce:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	331c      	adds	r3, #28
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fc93 	bl	8004100 <indev_reset_check>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f040 81e1 	bne.w	8002ba4 <indev_encoder_proc+0x64c>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <indev_encoder_proc+0x33c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2104      	movs	r1, #4
 80027ea:	4618      	mov	r0, r3
 80027ec:	f003 fee4 	bl	80065b8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	331c      	adds	r3, #28
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 fc83 	bl	8004100 <indev_reset_check>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <indev_encoder_proc+0x2ac>
 8002800:	bf00      	nop
 8002802:	e1e0      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                }
            }

            i->proc.long_pr_sent = 1;
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002812:	e154      	b.n	8002abe <indev_encoder_proc+0x566>
        }
        /*Long press repeated time has elapsed?*/
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 814c 	beq.w	8002abe <indev_encoder_proc+0x566>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	4618      	mov	r0, r3
 800282c:	f017 fffc 	bl	801a828 <lv_tick_elaps>
 8002830:	4602      	mov	r2, r0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8b5b      	ldrh	r3, [r3, #26]
 8002836:	429a      	cmp	r2, r3
 8002838:	f240 8141 	bls.w	8002abe <indev_encoder_proc+0x566>

            i->proc.longpr_rep_timestamp = lv_tick_get();
 800283c:	f017 ffda 	bl	801a7f4 <lv_tick_get>
 8002840:	4602      	mov	r2, r0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	64da      	str	r2, [r3, #76]	; 0x4c

            if(data->key == LV_KEY_ENTER) {
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b0a      	cmp	r3, #10
 800284c:	d124      	bne.n	8002898 <indev_encoder_proc+0x340>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <indev_encoder_proc+0x33c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <indev_encoder_proc+0x33c>)
 8002856:	6810      	ldr	r0, [r2, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	2110      	movs	r1, #16
 800285c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	331c      	adds	r3, #28
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fc4c 	bl	8004100 <indev_reset_check>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	f040 819c 	bne.w	8002ba8 <indev_encoder_proc+0x650>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <indev_encoder_proc+0x33c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	2105      	movs	r1, #5
 8002878:	4618      	mov	r0, r3
 800287a:	f003 fe9d 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	331c      	adds	r3, #28
 8002882:	4618      	mov	r0, r3
 8002884:	f001 fc3c 	bl	8004100 <indev_reset_check>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8117 	beq.w	8002abe <indev_encoder_proc+0x566>
 8002890:	e199      	b.n	8002bc6 <indev_encoder_proc+0x66e>
 8002892:	bf00      	nop
 8002894:	200177a0 	.word	0x200177a0
            }
            else if(data->key == LV_KEY_LEFT) {
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b14      	cmp	r3, #20
 800289e:	d109      	bne.n	80028b4 <indev_encoder_proc+0x35c>
                /*emulate encoder left*/
                data->enc_diff--;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	819a      	strh	r2, [r3, #12]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80028b2:	e104      	b.n	8002abe <indev_encoder_proc+0x566>
            }
            else if(data->key == LV_KEY_RIGHT) {
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b13      	cmp	r3, #19
 80028ba:	d109      	bne.n	80028d0 <indev_encoder_proc+0x378>
                /*emulate encoder right*/
                data->enc_diff++;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	b21a      	sxth	r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	819a      	strh	r2, [r3, #12]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80028ce:	e0f6      	b.n	8002abe <indev_encoder_proc+0x566>
            }
            else {
                lv_group_send_data(g, data->key);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4619      	mov	r1, r3
 80028d6:	6938      	ldr	r0, [r7, #16]
 80028d8:	f7ff f8e0 	bl	8001a9c <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	331c      	adds	r3, #28
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 fc0d 	bl	8004100 <indev_reset_check>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80e8 	beq.w	8002abe <indev_encoder_proc+0x566>
 80028ee:	e16a      	b.n	8002bc6 <indev_encoder_proc+0x66e>

        }

    }
    /*Release happened*/
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	7b9b      	ldrb	r3, [r3, #14]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f040 80e3 	bne.w	8002ac0 <indev_encoder_proc+0x568>
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f040 80df 	bne.w	8002ac0 <indev_encoder_proc+0x568>

        if(data->key == LV_KEY_ENTER) {
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b0a      	cmp	r3, #10
 8002908:	f040 80cc 	bne.w	8002aa4 <indev_encoder_proc+0x54c>
            bool editable = false;
 800290c:	2300      	movs	r3, #0
 800290e:	737b      	strb	r3, [r7, #13]
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8002910:	4bae      	ldr	r3, [pc, #696]	; (8002bcc <indev_encoder_proc+0x674>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4aad      	ldr	r2, [pc, #692]	; (8002bcc <indev_encoder_proc+0x674>)
 8002918:	6810      	ldr	r0, [r2, #0]
 800291a:	f107 020d 	add.w	r2, r7, #13
 800291e:	2119      	movs	r1, #25
 8002920:	4798      	blx	r3

            /*The button was released on a non-editable object. Just send enter*/
            if(editable == false) {
 8002922:	7b7b      	ldrb	r3, [r7, #13]
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d048      	beq.n	80029c0 <indev_encoder_proc+0x468>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 800292e:	4ba7      	ldr	r3, [pc, #668]	; (8002bcc <indev_encoder_proc+0x674>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	4aa5      	ldr	r2, [pc, #660]	; (8002bcc <indev_encoder_proc+0x674>)
 8002936:	6810      	ldr	r0, [r2, #0]
 8002938:	2200      	movs	r2, #0
 800293a:	210e      	movs	r1, #14
 800293c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	331c      	adds	r3, #28
 8002942:	4618      	mov	r0, r3
 8002944:	f001 fbdc 	bl	8004100 <indev_reset_check>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 812e 	bne.w	8002bac <indev_encoder_proc+0x654>

                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d106      	bne.n	800296e <indev_encoder_proc+0x416>
 8002960:	4b9a      	ldr	r3, [pc, #616]	; (8002bcc <indev_encoder_proc+0x674>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	2103      	movs	r1, #3
 8002968:	4618      	mov	r0, r3
 800296a:	f003 fe25 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	331c      	adds	r3, #28
 8002972:	4618      	mov	r0, r3
 8002974:	f001 fbc4 	bl	8004100 <indev_reset_check>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 8118 	bne.w	8002bb0 <indev_encoder_proc+0x658>

                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002980:	4b92      	ldr	r3, [pc, #584]	; (8002bcc <indev_encoder_proc+0x674>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2200      	movs	r2, #0
 8002986:	2106      	movs	r1, #6
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fe15 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	331c      	adds	r3, #28
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fbb4 	bl	8004100 <indev_reset_check>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 810a 	bne.w	8002bb4 <indev_encoder_proc+0x65c>

                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 80029a0:	4b8a      	ldr	r3, [pc, #552]	; (8002bcc <indev_encoder_proc+0x674>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2107      	movs	r1, #7
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 fe05 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	331c      	adds	r3, #28
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 fba4 	bl	8004100 <indev_reset_check>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d072      	beq.n	8002aa4 <indev_encoder_proc+0x54c>
 80029be:	e102      	b.n	8002bc6 <indev_encoder_proc+0x66e>
            }
            /*An object is being edited and the button is released. */
            else if(g->editing) {
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	7d1b      	ldrb	r3, [r3, #20]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d054      	beq.n	8002a78 <indev_encoder_proc+0x520>
                /*Ignore long pressed enter release because it comes from mode switch*/
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <indev_encoder_proc+0x494>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f019 fcd6 	bl	801c392 <_lv_ll_get_len>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d85b      	bhi.n	8002aa4 <indev_encoder_proc+0x54c>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 80029ec:	4b77      	ldr	r3, [pc, #476]	; (8002bcc <indev_encoder_proc+0x674>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a76      	ldr	r2, [pc, #472]	; (8002bcc <indev_encoder_proc+0x674>)
 80029f4:	6810      	ldr	r0, [r2, #0]
 80029f6:	2200      	movs	r2, #0
 80029f8:	210e      	movs	r1, #14
 80029fa:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	331c      	adds	r3, #28
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 fb7d 	bl	8004100 <indev_reset_check>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f040 80d5 	bne.w	8002bb8 <indev_encoder_proc+0x660>

                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8002a0e:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <indev_encoder_proc+0x674>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2103      	movs	r1, #3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fdce 	bl	80065b8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	331c      	adds	r3, #28
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 fb6d 	bl	8004100 <indev_reset_check>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f040 80c7 	bne.w	8002bbc <indev_encoder_proc+0x664>

                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002a2e:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <indev_encoder_proc+0x674>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	2106      	movs	r1, #6
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fdbe 	bl	80065b8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	331c      	adds	r3, #28
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 fb5d 	bl	8004100 <indev_reset_check>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 80b9 	bne.w	8002bc0 <indev_encoder_proc+0x668>

                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <indev_encoder_proc+0x674>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2107      	movs	r1, #7
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 fdae 	bl	80065b8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	331c      	adds	r3, #28
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 fb4d 	bl	8004100 <indev_reset_check>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 80ab 	bne.w	8002bc4 <indev_encoder_proc+0x66c>

                    lv_group_send_data(g, LV_KEY_ENTER);
 8002a6e:	210a      	movs	r1, #10
 8002a70:	6938      	ldr	r0, [r7, #16]
 8002a72:	f7ff f813 	bl	8001a9c <lv_group_send_data>
 8002a76:	e015      	b.n	8002aa4 <indev_encoder_proc+0x54c>
                }
            }
            /*If the focused object is editable and now in navigate mode then on enter switch edit
               mode*/
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
 8002a78:	7b7b      	ldrb	r3, [r7, #13]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d012      	beq.n	8002aa4 <indev_encoder_proc+0x54c>
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	7d1b      	ldrb	r3, [r3, #20]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <indev_encoder_proc+0x54c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <indev_encoder_proc+0x54c>
                lv_group_set_editing(g, true); /*Set edit mode*/
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	6938      	ldr	r0, [r7, #16]
 8002aa0:	f7ff f829 	bl	8001af6 <lv_group_set_editing>
            }
        }

        i->proc.pr_timestamp = 0;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002ab0:	f36f 0300 	bfc	r3, #0, #1
 8002ab4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8002ab8:	e002      	b.n	8002ac0 <indev_encoder_proc+0x568>
        if(data->key == LV_KEY_ENTER) {
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <indev_encoder_proc+0x568>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002abe:	bf00      	nop
    }
    indev_obj_act = NULL;
 8002ac0:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <indev_encoder_proc+0x674>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]

    /*if encoder steps or simulated steps via left/right keys*/
    if(data->enc_diff != 0) {
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d07a      	beq.n	8002bc6 <indev_encoder_proc+0x66e>
        /*In edit mode send LEFT/RIGHT keys*/
        if(lv_group_get_editing(g)) {
 8002ad0:	6938      	ldr	r0, [r7, #16]
 8002ad2:	f7ff f86b 	bl	8001bac <lv_group_get_editing>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d02d      	beq.n	8002b38 <indev_encoder_proc+0x5e0>
            int32_t s;
            if(data->enc_diff < 0) {
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	da11      	bge.n	8002b0a <indev_encoder_proc+0x5b2>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e006      	b.n	8002afa <indev_encoder_proc+0x5a2>
 8002aec:	2114      	movs	r1, #20
 8002aee:	6938      	ldr	r0, [r7, #16]
 8002af0:	f7fe ffd4 	bl	8001a9c <lv_group_send_data>
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	3301      	adds	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b00:	425b      	negs	r3, r3
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dbf1      	blt.n	8002aec <indev_encoder_proc+0x594>
 8002b08:	e05d      	b.n	8002bc6 <indev_encoder_proc+0x66e>
            }
            else if(data->enc_diff > 0) {
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	dd58      	ble.n	8002bc6 <indev_encoder_proc+0x66e>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	e006      	b.n	8002b28 <indev_encoder_proc+0x5d0>
 8002b1a:	2113      	movs	r1, #19
 8002b1c:	6938      	ldr	r0, [r7, #16]
 8002b1e:	f7fe ffbd 	bl	8001a9c <lv_group_send_data>
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	dbf1      	blt.n	8002b1a <indev_encoder_proc+0x5c2>
 8002b36:	e046      	b.n	8002bc6 <indev_encoder_proc+0x66e>
            }
        }
        /*In navigate mode focus on the next/prev objects*/
        else {
            int32_t s;
            if(data->enc_diff < 0) {
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	da10      	bge.n	8002b64 <indev_encoder_proc+0x60c>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	e005      	b.n	8002b54 <indev_encoder_proc+0x5fc>
 8002b48:	6938      	ldr	r0, [r7, #16]
 8002b4a:	f7fe ff95 	bl	8001a78 <lv_group_focus_prev>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b5a:	425b      	negs	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	dbf2      	blt.n	8002b48 <indev_encoder_proc+0x5f0>
 8002b62:	e030      	b.n	8002bc6 <indev_encoder_proc+0x66e>
            }
            else if(data->enc_diff > 0) {
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	dd2b      	ble.n	8002bc6 <indev_encoder_proc+0x66e>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	e005      	b.n	8002b80 <indev_encoder_proc+0x628>
 8002b74:	6938      	ldr	r0, [r7, #16]
 8002b76:	f7fe ff6d 	bl	8001a54 <lv_group_focus_next>
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b86:	461a      	mov	r2, r3
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	dbf2      	blt.n	8002b74 <indev_encoder_proc+0x61c>
 8002b8e:	e01a      	b.n	8002bc6 <indev_encoder_proc+0x66e>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8002b90:	bf00      	nop
 8002b92:	e018      	b.n	8002bc6 <indev_encoder_proc+0x66e>
    if(g == NULL) return;
 8002b94:	bf00      	nop
 8002b96:	e016      	b.n	8002bc6 <indev_encoder_proc+0x66e>
    if(indev_obj_act == NULL) return;
 8002b98:	bf00      	nop
 8002b9a:	e014      	b.n	8002bc6 <indev_encoder_proc+0x66e>
    if(indev_obj_act == NULL) return;
 8002b9c:	bf00      	nop
 8002b9e:	e012      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002ba0:	bf00      	nop
 8002ba2:	e010      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002ba4:	bf00      	nop
 8002ba6:	e00e      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002ba8:	bf00      	nop
 8002baa:	e00c      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002bac:	bf00      	nop
 8002bae:	e00a      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002bb0:	bf00      	nop
 8002bb2:	e008      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002bb4:	bf00      	nop
 8002bb6:	e006      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002bb8:	bf00      	nop
 8002bba:	e004      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002bbc:	bf00      	nop
 8002bbe:	e002      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002bc0:	bf00      	nop
 8002bc2:	e000      	b.n	8002bc6 <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002bc4:	bf00      	nop

#else
    (void)data; /*Unused*/
    (void)i;    /*Unused*/
#endif
}
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200177a0 	.word	0x200177a0

08002bd0 <indev_button_proc>:
 * @param indev pointer to an input device state
 * @param x x coordinate of the next point
 * @param y y coordinate of the next point
 */
static void indev_button_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
    /* Die gracefully if i->btn_points is NULL */
    if(i->btn_points == NULL) {
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d056      	beq.n	8002c90 <indev_button_proc+0xc0>
        LV_LOG_WARN("indev_button_proc: btn_points was NULL");
        return;
    }

    lv_coord_t x = i->btn_points[data->btn_id].x;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	81fb      	strh	r3, [r7, #14]
    lv_coord_t y = i->btn_points[data->btn_id].y;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	885b      	ldrh	r3, [r3, #2]
 8002c00:	81bb      	strh	r3, [r7, #12]

    /*If a new point comes always make a release*/
    if(data->state == LV_INDEV_STATE_PR) {
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	7b9b      	ldrb	r3, [r3, #14]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d112      	bne.n	8002c30 <indev_button_proc+0x60>
        if(i->proc.types.pointer.last_point.x != x ||
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002c10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d106      	bne.n	8002c26 <indev_button_proc+0x56>
           i->proc.types.pointer.last_point.y != y) {
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
        if(i->proc.types.pointer.last_point.x != x ||
 8002c1e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d004      	beq.n	8002c30 <indev_button_proc+0x60>
            indev_proc_release(&i->proc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	331c      	adds	r3, #28
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fb14 	bl	8003258 <indev_proc_release>
        }
    }

    if(indev_reset_check(&i->proc)) return;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	331c      	adds	r3, #28
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 fa63 	bl	8004100 <indev_reset_check>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d129      	bne.n	8002c94 <indev_button_proc+0xc4>

    /*Save the new points*/
    i->proc.types.pointer.act_point.x = x;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	89fa      	ldrh	r2, [r7, #14]
 8002c44:	841a      	strh	r2, [r3, #32]
    i->proc.types.pointer.act_point.y = y;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	89ba      	ldrh	r2, [r7, #12]
 8002c4a:	845a      	strh	r2, [r3, #34]	; 0x22

    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	7b9b      	ldrb	r3, [r3, #14]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d105      	bne.n	8002c60 <indev_button_proc+0x90>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	331c      	adds	r3, #28
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f821 	bl	8002ca0 <indev_proc_press>
 8002c5e:	e004      	b.n	8002c6a <indev_button_proc+0x9a>
    else indev_proc_release(&i->proc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	331c      	adds	r3, #28
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 faf7 	bl	8003258 <indev_proc_release>

    if(indev_reset_check(&i->proc)) return;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	331c      	adds	r3, #28
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 fa46 	bl	8004100 <indev_reset_check>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <indev_button_proc+0xc8>

    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	849a      	strh	r2, [r3, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	84da      	strh	r2, [r3, #38]	; 0x26
 8002c8e:	e004      	b.n	8002c9a <indev_button_proc+0xca>
        return;
 8002c90:	bf00      	nop
 8002c92:	e002      	b.n	8002c9a <indev_button_proc+0xca>
    if(indev_reset_check(&i->proc)) return;
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <indev_button_proc+0xca>
    if(indev_reset_check(&i->proc)) return;
 8002c98:	bf00      	nop
}
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <indev_proc_press>:
 * Process the pressed state of LV_INDEV_TYPE_POINTER input devices
 * @param indev pointer to an input device 'proc'
 * @return LV_RES_OK: no indev reset required; LV_RES_INV: indev reset is required
 */
static void indev_proc_press(lv_indev_proc_t * proc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    indev_obj_act = proc->types.pointer.act_obj;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	4a8d      	ldr	r2, [pc, #564]	; (8002ee4 <indev_proc_press+0x244>)
 8002cae:	6013      	str	r3, [r2, #0]

    if(proc->wait_until_release != 0) return;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 82a7 	bne.w	8003210 <indev_proc_press+0x570>

    lv_disp_t * disp = indev_act->driver.disp;
 8002cc2:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <indev_proc_press+0x248>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	613b      	str	r3, [r7, #16]
    bool new_obj_searched = false;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	77fb      	strb	r3, [r7, #31]

    /*If there is no last object then search*/
    if(indev_obj_act == NULL) {
 8002cce:	4b85      	ldr	r3, [pc, #532]	; (8002ee4 <indev_proc_press+0x244>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d131      	bne.n	8002d3a <indev_proc_press+0x9a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8002cd6:	6938      	ldr	r0, [r7, #16]
 8002cd8:	f7fe fd9e 	bl	8001818 <lv_disp_get_layer_sys>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f000 fc45 	bl	8003574 <lv_indev_search_obj>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <indev_proc_press+0x244>)
 8002cee:	601a      	str	r2, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8002cf0:	4b7c      	ldr	r3, [pc, #496]	; (8002ee4 <indev_proc_press+0x244>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10c      	bne.n	8002d12 <indev_proc_press+0x72>
 8002cf8:	6938      	ldr	r0, [r7, #16]
 8002cfa:	f7fe fd78 	bl	80017ee <lv_disp_get_layer_top>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f000 fc34 	bl	8003574 <lv_indev_search_obj>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b75      	ldr	r3, [pc, #468]	; (8002ee4 <indev_proc_press+0x244>)
 8002d10:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8002d12:	4b74      	ldr	r3, [pc, #464]	; (8002ee4 <indev_proc_press+0x244>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10c      	bne.n	8002d34 <indev_proc_press+0x94>
 8002d1a:	6938      	ldr	r0, [r7, #16]
 8002d1c:	f7fe fd3d 	bl	800179a <lv_disp_get_scr_act>
 8002d20:	4602      	mov	r2, r0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f000 fc23 	bl	8003574 <lv_indev_search_obj>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <indev_proc_press+0x244>)
 8002d32:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        new_obj_searched = true;
 8002d34:	2301      	movs	r3, #1
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	e044      	b.n	8002dc4 <indev_proc_press+0x124>
    }
    /*If there is last object but it is not dragged and not protected also search*/
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d13c      	bne.n	8002dc4 <indev_proc_press+0x124>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
 8002d4a:	4b66      	ldr	r3, [pc, #408]	; (8002ee4 <indev_proc_press+0x244>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2110      	movs	r1, #16
 8002d50:	4618      	mov	r0, r3
 8002d52:	f004 fb69 	bl	8007428 <lv_obj_is_protected>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f083 0301 	eor.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d030      	beq.n	8002dc4 <indev_proc_press+0x124>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8002d62:	6938      	ldr	r0, [r7, #16]
 8002d64:	f7fe fd58 	bl	8001818 <lv_disp_get_layer_sys>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f000 fbff 	bl	8003574 <lv_indev_search_obj>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b5a      	ldr	r3, [pc, #360]	; (8002ee4 <indev_proc_press+0x244>)
 8002d7a:	601a      	str	r2, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8002d7c:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <indev_proc_press+0x244>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10c      	bne.n	8002d9e <indev_proc_press+0xfe>
 8002d84:	6938      	ldr	r0, [r7, #16]
 8002d86:	f7fe fd32 	bl	80017ee <lv_disp_get_layer_top>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4610      	mov	r0, r2
 8002d94:	f000 fbee 	bl	8003574 <lv_indev_search_obj>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b52      	ldr	r3, [pc, #328]	; (8002ee4 <indev_proc_press+0x244>)
 8002d9c:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8002d9e:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <indev_proc_press+0x244>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <indev_proc_press+0x120>
 8002da6:	6938      	ldr	r0, [r7, #16]
 8002da8:	f7fe fcf7 	bl	800179a <lv_disp_get_scr_act>
 8002dac:	4602      	mov	r2, r0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f000 fbdd 	bl	8003574 <lv_indev_search_obj>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <indev_proc_press+0x244>)
 8002dbe:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        new_obj_searched = true;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	77fb      	strb	r3, [r7, #31]
    /*If a draggable or a protected object was the last then keep it*/
    else {
    }

    /*The last object might have drag throw. Stop it manually*/
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8002dc4:	7ffb      	ldrb	r3, [r7, #31]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00c      	beq.n	8002de4 <indev_proc_press+0x144>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <indev_proc_press+0x144>
        proc->types.pointer.drag_throw_vect.x = 0;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	829a      	strh	r2, [r3, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	82da      	strh	r2, [r3, #22]
        indev_drag_throw(proc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 ff66 	bl	8003cb0 <indev_drag_throw>
    }

    /*If a new object was found reset some variables and send a pressed signal*/
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	4b3e      	ldr	r3, [pc, #248]	; (8002ee4 <indev_proc_press+0x244>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f000 80c9 	beq.w	8002f84 <indev_proc_press+0x2e4>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	811a      	strh	r2, [r3, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	815a      	strh	r2, [r3, #10]

        /*If a new object found the previous was lost, so send a signal*/
        if(proc->types.pointer.act_obj != NULL) {
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01c      	beq.n	8002e48 <indev_proc_press+0x1a8>
            /*Save the obj because in special cases `act_obj` can change in the signal function*/
            lv_obj_t * last_obj = proc->types.pointer.act_obj;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	60fb      	str	r3, [r7, #12]

            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4a33      	ldr	r2, [pc, #204]	; (8002ee8 <indev_proc_press+0x248>)
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	210d      	movs	r1, #13
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f001 f96c 	bl	8004100 <indev_reset_check>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f040 81f2 	bne.w	8003214 <indev_proc_press+0x574>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2102      	movs	r1, #2
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f003 fbbf 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f001 f960 	bl	8004100 <indev_reset_check>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f040 81e8 	bne.w	8003218 <indev_proc_press+0x578>

        }

        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 8002e48:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <indev_proc_press+0x244>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	619a      	str	r2, [r3, #24]
        proc->types.pointer.last_obj = indev_obj_act;
 8002e50:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <indev_proc_press+0x244>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	61da      	str	r2, [r3, #28]

        if(indev_obj_act != NULL) {
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <indev_proc_press+0x244>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8091 	beq.w	8002f84 <indev_proc_press+0x2e4>
            /* Save the time when the obj pressed to count long press time.*/
            proc->pr_timestamp                 = lv_tick_get();
 8002e62:	f017 fcc7 	bl	801a7f4 <lv_tick_get>
 8002e66:	4602      	mov	r2, r0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8002e72:	f36f 0300 	bfc	r3, #0, #1
 8002e76:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002e80:	f36f 0300 	bfc	r3, #0, #1
 8002e84:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.drag_in_prog   = 0;
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002e8e:	f36f 0341 	bfc	r3, #1, #1
 8002e92:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	821a      	strh	r2, [r3, #16]
            proc->types.pointer.drag_sum.y     = 0;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	825a      	strh	r2, [r3, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	f361 0384 	bfi	r3, r1, #2, #3
 8002eae:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.gesture_sent   = 0;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002eb8:	f36f 1345 	bfc	r3, #5, #1
 8002ebc:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	84da      	strh	r2, [r3, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	819a      	strh	r2, [r3, #12]
            proc->types.pointer.vect.y         = 0;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	81da      	strh	r2, [r3, #14]

            /*Search for 'top' attribute*/
            lv_obj_t * i        = indev_obj_act;
 8002ed8:	4b02      	ldr	r3, [pc, #8]	; (8002ee4 <indev_proc_press+0x244>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	61bb      	str	r3, [r7, #24]
            lv_obj_t * last_top = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
            while(i != NULL) {
 8002ee2:	e011      	b.n	8002f08 <indev_proc_press+0x268>
 8002ee4:	200177a0 	.word	0x200177a0
 8002ee8:	2001779c 	.word	0x2001779c
                if(i->top) last_top = i;
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <indev_proc_press+0x260>
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	617b      	str	r3, [r7, #20]
                i = lv_obj_get_parent(i);
 8002f00:	69b8      	ldr	r0, [r7, #24]
 8002f02:	f003 fcc5 	bl	8006890 <lv_obj_get_parent>
 8002f06:	61b8      	str	r0, [r7, #24]
            while(i != NULL) {
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ee      	bne.n	8002eec <indev_proc_press+0x24c>
            }

            if(last_top != NULL) {
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <indev_proc_press+0x27a>
                /*Move the last_top object to the foreground*/
                lv_obj_move_foreground(last_top);
 8002f14:	6978      	ldr	r0, [r7, #20]
 8002f16:	f002 fd81 	bl	8005a1c <lv_obj_move_foreground>
            }

            /*Send a signal about the press*/
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
 8002f1a:	4b48      	ldr	r3, [pc, #288]	; (800303c <indev_proc_press+0x39c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4a46      	ldr	r2, [pc, #280]	; (800303c <indev_proc_press+0x39c>)
 8002f22:	6810      	ldr	r0, [r2, #0]
 8002f24:	4a46      	ldr	r2, [pc, #280]	; (8003040 <indev_proc_press+0x3a0>)
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	210b      	movs	r1, #11
 8002f2a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f001 f8e7 	bl	8004100 <indev_reset_check>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 8171 	bne.w	800321c <indev_proc_press+0x57c>

            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8002f3a:	4b40      	ldr	r3, [pc, #256]	; (800303c <indev_proc_press+0x39c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 fb38 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f001 f8d9 	bl	8004100 <indev_reset_check>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 8165 	bne.w	8003220 <indev_proc_press+0x580>

            if(indev_act->proc.wait_until_release) return;
 8002f56:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <indev_proc_press+0x3a0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 815d 	bne.w	8003224 <indev_proc_press+0x584>

            /*Handle focus*/
            indev_click_focus(&indev_act->proc);
 8002f6a:	4b35      	ldr	r3, [pc, #212]	; (8003040 <indev_proc_press+0x3a0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	331c      	adds	r3, #28
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fb67 	bl	8003644 <indev_click_focus>
            if(indev_reset_check(proc)) return;
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f001 f8c2 	bl	8004100 <indev_reset_check>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f040 8152 	bne.w	8003228 <indev_proc_press+0x588>

        }
    }

    /*Calculate the types.pointer.vector*/
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	819a      	strh	r2, [r3, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b21a      	sxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	81da      	strh	r2, [r3, #14]

    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	10db      	asrs	r3, r3, #3
 8002fc8:	b21a      	sxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	10db      	asrs	r3, r3, #3
 8002fde:	b21a      	sxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	82da      	strh	r2, [r3, #22]

    if(proc->types.pointer.drag_throw_vect.x < 0)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	da09      	bge.n	8003002 <indev_proc_press+0x362>
        proc->types.pointer.drag_throw_vect.x++;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	b21a      	sxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	829a      	strh	r2, [r3, #20]
 8003000:	e00d      	b.n	800301e <indev_proc_press+0x37e>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	dd08      	ble.n	800301e <indev_proc_press+0x37e>
        proc->types.pointer.drag_throw_vect.x--;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29b      	uxth	r3, r3
 8003018:	b21a      	sxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	829a      	strh	r2, [r3, #20]

    if(proc->types.pointer.drag_throw_vect.y < 0)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003024:	2b00      	cmp	r3, #0
 8003026:	da0d      	bge.n	8003044 <indev_proc_press+0x3a4>
        proc->types.pointer.drag_throw_vect.y++;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800302e:	b29b      	uxth	r3, r3
 8003030:	3301      	adds	r3, #1
 8003032:	b29b      	uxth	r3, r3
 8003034:	b21a      	sxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	82da      	strh	r2, [r3, #22]
 800303a:	e011      	b.n	8003060 <indev_proc_press+0x3c0>
 800303c:	200177a0 	.word	0x200177a0
 8003040:	2001779c 	.word	0x2001779c
    else if(proc->types.pointer.drag_throw_vect.y > 0)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800304a:	2b00      	cmp	r3, #0
 800304c:	dd08      	ble.n	8003060 <indev_proc_press+0x3c0>
        proc->types.pointer.drag_throw_vect.y--;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	b21a      	sxth	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	82da      	strh	r2, [r3, #22]

    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003066:	b29a      	uxth	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	10db      	asrs	r3, r3, #3
 8003072:	b29b      	uxth	r3, r3
 8003074:	4413      	add	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	b21a      	sxth	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003084:	b29a      	uxth	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	10db      	asrs	r3, r3, #3
 8003090:	b29b      	uxth	r3, r3
 8003092:	4413      	add	r3, r2
 8003094:	b29b      	uxth	r3, r3
 8003096:	b21a      	sxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	82da      	strh	r2, [r3, #22]

    /*If there is active object and it can be dragged run the drag*/
    if(indev_obj_act != NULL) {
 800309c:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <indev_proc_press+0x5b0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80d2 	beq.w	800324a <indev_proc_press+0x5aa>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
 80030a6:	4b6a      	ldr	r3, [pc, #424]	; (8003250 <indev_proc_press+0x5b0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	4a68      	ldr	r2, [pc, #416]	; (8003250 <indev_proc_press+0x5b0>)
 80030ae:	6810      	ldr	r0, [r2, #0]
 80030b0:	4a68      	ldr	r2, [pc, #416]	; (8003254 <indev_proc_press+0x5b4>)
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	210c      	movs	r1, #12
 80030b6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f001 f821 	bl	8004100 <indev_reset_check>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f040 80b3 	bne.w	800322c <indev_proc_press+0x58c>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 80030c6:	4b62      	ldr	r3, [pc, #392]	; (8003250 <indev_proc_press+0x5b0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	2101      	movs	r1, #1
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fa72 	bl	80065b8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f001 f813 	bl	8004100 <indev_reset_check>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f040 80a7 	bne.w	8003230 <indev_proc_press+0x590>
        if(indev_act->proc.wait_until_release) return;
 80030e2:	4b5c      	ldr	r3, [pc, #368]	; (8003254 <indev_proc_press+0x5b4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 809f 	bne.w	8003234 <indev_proc_press+0x594>

        indev_drag(proc);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fbb8 	bl	800386c <indev_drag>
        indev_gesture(proc);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 ff3b 	bl	8003f78 <indev_gesture>
        if(indev_reset_check(proc)) return;
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fffc 	bl	8004100 <indev_reset_check>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 8094 	bne.w	8003238 <indev_proc_press+0x598>

        /*If there is no drag then check for long press time*/
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d13a      	bne.n	8003196 <indev_proc_press+0x4f6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d132      	bne.n	8003196 <indev_proc_press+0x4f6>
            /*Send a signal about the long press if enough time elapsed*/
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	4618      	mov	r0, r3
 8003136:	f017 fb77 	bl	801a828 <lv_tick_elaps>
 800313a:	4602      	mov	r2, r0
 800313c:	4b45      	ldr	r3, [pc, #276]	; (8003254 <indev_proc_press+0x5b4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	8b1b      	ldrh	r3, [r3, #24]
 8003142:	429a      	cmp	r2, r3
 8003144:	d927      	bls.n	8003196 <indev_proc_press+0x4f6>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
 8003146:	4b42      	ldr	r3, [pc, #264]	; (8003250 <indev_proc_press+0x5b0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4a40      	ldr	r2, [pc, #256]	; (8003250 <indev_proc_press+0x5b0>)
 800314e:	6810      	ldr	r0, [r2, #0]
 8003150:	4a40      	ldr	r2, [pc, #256]	; (8003254 <indev_proc_press+0x5b4>)
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	210f      	movs	r1, #15
 8003156:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 ffd1 	bl	8004100 <indev_reset_check>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d16b      	bne.n	800323c <indev_proc_press+0x59c>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <indev_proc_press+0x5b0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2200      	movs	r2, #0
 800316a:	2104      	movs	r1, #4
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fa23 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 ffc4 	bl	8004100 <indev_reset_check>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d160      	bne.n	8003240 <indev_proc_press+0x5a0>

                /*Mark the signal sending to do not send it again*/
                proc->long_pr_sent = 1;
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

                /*Save the long press time stamp for the long press repeat handler*/
                proc->longpr_rep_timestamp = lv_tick_get();
 800318c:	f017 fb32 	bl	801a7f4 <lv_tick_get>
 8003190:	4602      	mov	r2, r0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        /*Send long press repeated signal*/
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d151      	bne.n	800324a <indev_proc_press+0x5aa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d049      	beq.n	800324a <indev_proc_press+0x5aa>
            /*Send a signal about the long press repeat if enough time elapsed*/
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4618      	mov	r0, r3
 80031bc:	f017 fb34 	bl	801a828 <lv_tick_elaps>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b24      	ldr	r3, [pc, #144]	; (8003254 <indev_proc_press+0x5b4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	8b5b      	ldrh	r3, [r3, #26]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d93e      	bls.n	800324a <indev_proc_press+0x5aa>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <indev_proc_press+0x5b0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <indev_proc_press+0x5b0>)
 80031d4:	6810      	ldr	r0, [r2, #0]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <indev_proc_press+0x5b4>)
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	2110      	movs	r1, #16
 80031dc:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 ff8e 	bl	8004100 <indev_reset_check>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d12c      	bne.n	8003244 <indev_proc_press+0x5a4>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <indev_proc_press+0x5b0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2200      	movs	r2, #0
 80031f0:	2105      	movs	r1, #5
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 f9e0 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 ff81 	bl	8004100 <indev_reset_check>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d121      	bne.n	8003248 <indev_proc_press+0x5a8>
                proc->longpr_rep_timestamp = lv_tick_get();
 8003204:	f017 faf6 	bl	801a7f4 <lv_tick_get>
 8003208:	4602      	mov	r2, r0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
 800320e:	e01c      	b.n	800324a <indev_proc_press+0x5aa>
    if(proc->wait_until_release != 0) return;
 8003210:	bf00      	nop
 8003212:	e01a      	b.n	800324a <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8003214:	bf00      	nop
 8003216:	e018      	b.n	800324a <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8003218:	bf00      	nop
 800321a:	e016      	b.n	800324a <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 800321c:	bf00      	nop
 800321e:	e014      	b.n	800324a <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8003220:	bf00      	nop
 8003222:	e012      	b.n	800324a <indev_proc_press+0x5aa>
            if(indev_act->proc.wait_until_release) return;
 8003224:	bf00      	nop
 8003226:	e010      	b.n	800324a <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8003228:	bf00      	nop
 800322a:	e00e      	b.n	800324a <indev_proc_press+0x5aa>
        if(indev_reset_check(proc)) return;
 800322c:	bf00      	nop
 800322e:	e00c      	b.n	800324a <indev_proc_press+0x5aa>
        if(indev_reset_check(proc)) return;
 8003230:	bf00      	nop
 8003232:	e00a      	b.n	800324a <indev_proc_press+0x5aa>
        if(indev_act->proc.wait_until_release) return;
 8003234:	bf00      	nop
 8003236:	e008      	b.n	800324a <indev_proc_press+0x5aa>
        if(indev_reset_check(proc)) return;
 8003238:	bf00      	nop
 800323a:	e006      	b.n	800324a <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 800323c:	bf00      	nop
 800323e:	e004      	b.n	800324a <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 8003240:	bf00      	nop
 8003242:	e002      	b.n	800324a <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 8003244:	bf00      	nop
 8003246:	e000      	b.n	800324a <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 8003248:	bf00      	nop
            }
        }
    }
}
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200177a0 	.word	0x200177a0
 8003254:	2001779c 	.word	0x2001779c

08003258 <indev_proc_release>:
/**
 * Process the released state of LV_INDEV_TYPE_POINTER input devices
 * @param proc pointer to an input device 'proc'
 */
static void indev_proc_release(lv_indev_proc_t * proc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
    if(proc->wait_until_release != 0) {
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d012      	beq.n	8003296 <indev_proc_release+0x3e>
        proc->types.pointer.act_obj  = NULL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	619a      	str	r2, [r3, #24]
        proc->types.pointer.last_obj = NULL;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	61da      	str	r2, [r3, #28]
        proc->pr_timestamp           = 0;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	62da      	str	r2, [r3, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
        proc->wait_until_release     = 0;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800328e:	f36f 03c3 	bfc	r3, #3, #1
 8003292:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    }
    indev_obj_act = proc->types.pointer.act_obj;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	4a86      	ldr	r2, [pc, #536]	; (80034b4 <indev_proc_release+0x25c>)
 800329c:	6013      	str	r3, [r2, #0]

    /*Forget the act obj and send a released signal */
    if(indev_obj_act) {
 800329e:	4b85      	ldr	r3, [pc, #532]	; (80034b4 <indev_proc_release+0x25c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80dd 	beq.w	8003462 <indev_proc_release+0x20a>

        /* If the object was protected against press lost then it possible that
         * the object is already not pressed but still it is the `act_obj`.
         * In this case send the `LV_SIGNAL_RELEASED/CLICKED` instead of `LV_SIGNAL_PRESS_LOST` if
         * the indev is ON the `types.pointer.act_obj` */
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 80032a8:	4b82      	ldr	r3, [pc, #520]	; (80034b4 <indev_proc_release+0x25c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2110      	movs	r1, #16
 80032ae:	4618      	mov	r0, r3
 80032b0:	f004 f8ba 	bl	8007428 <lv_obj_is_protected>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d049      	beq.n	800334e <indev_proc_release+0xf6>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 80032ba:	4b7e      	ldr	r3, [pc, #504]	; (80034b4 <indev_proc_release+0x25c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	4a7c      	ldr	r2, [pc, #496]	; (80034b4 <indev_proc_release+0x25c>)
 80032c2:	6810      	ldr	r0, [r2, #0]
 80032c4:	4a7c      	ldr	r2, [pc, #496]	; (80034b8 <indev_proc_release+0x260>)
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	210e      	movs	r1, #14
 80032ca:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 ff17 	bl	8004100 <indev_reset_check>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 80d9 	bne.w	800348c <indev_proc_release+0x234>

            if(proc->types.pointer.drag_in_prog == 0) {
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d123      	bne.n	8003332 <indev_proc_release+0xda>
                if(proc->long_pr_sent == 0) {
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <indev_proc_release+0xbe>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 80032fa:	4b6e      	ldr	r3, [pc, #440]	; (80034b4 <indev_proc_release+0x25c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2200      	movs	r2, #0
 8003300:	2103      	movs	r1, #3
 8003302:	4618      	mov	r0, r3
 8003304:	f003 f958 	bl	80065b8 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fef9 	bl	8004100 <indev_reset_check>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	f040 80bd 	bne.w	8003490 <indev_proc_release+0x238>
                }

                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8003316:	4b67      	ldr	r3, [pc, #412]	; (80034b4 <indev_proc_release+0x25c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	2106      	movs	r1, #6
 800331e:	4618      	mov	r0, r3
 8003320:	f003 f94a 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 feeb 	bl	8004100 <indev_reset_check>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	f040 80b1 	bne.w	8003494 <indev_proc_release+0x23c>
            }

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8003332:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <indev_proc_release+0x25c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	2107      	movs	r1, #7
 800333a:	4618      	mov	r0, r3
 800333c:	f003 f93c 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fedd 	bl	8004100 <indev_reset_check>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d04f      	beq.n	80033ec <indev_proc_release+0x194>
 800334c:	e0af      	b.n	80034ae <indev_proc_release+0x256>
        }
        /* The simple case: `act_obj` was not protected against press lost.
         * If it is already not pressed then `indev_proc_press` would set `indev_obj_act = NULL`*/
        else {
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 800334e:	4b59      	ldr	r3, [pc, #356]	; (80034b4 <indev_proc_release+0x25c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4a57      	ldr	r2, [pc, #348]	; (80034b4 <indev_proc_release+0x25c>)
 8003356:	6810      	ldr	r0, [r2, #0]
 8003358:	4a57      	ldr	r2, [pc, #348]	; (80034b8 <indev_proc_release+0x260>)
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	210e      	movs	r1, #14
 800335e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fecd 	bl	8004100 <indev_reset_check>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	f040 8095 	bne.w	8003498 <indev_proc_release+0x240>

            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d114      	bne.n	80033a8 <indev_proc_release+0x150>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <indev_proc_release+0x150>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 800338e:	4b49      	ldr	r3, [pc, #292]	; (80034b4 <indev_proc_release+0x25c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	2103      	movs	r1, #3
 8003396:	4618      	mov	r0, r3
 8003398:	f003 f90e 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 feaf 	bl	8004100 <indev_reset_check>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d179      	bne.n	800349c <indev_proc_release+0x244>
            }

            if(proc->types.pointer.drag_in_prog == 0) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10c      	bne.n	80033d2 <indev_proc_release+0x17a>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 80033b8:	4b3e      	ldr	r3, [pc, #248]	; (80034b4 <indev_proc_release+0x25c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2200      	movs	r2, #0
 80033be:	2106      	movs	r1, #6
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 f8f9 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fe9a 	bl	8004100 <indev_reset_check>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d166      	bne.n	80034a0 <indev_proc_release+0x248>
            }

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 80033d2:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <indev_proc_release+0x25c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	2107      	movs	r1, #7
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 f8ec 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fe8d 	bl	8004100 <indev_reset_check>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d15b      	bne.n	80034a4 <indev_proc_release+0x24c>
        }

        /*Send LV_EVENT_DRAG_THROW_BEGIN if required */
        /*If drag parent is active check recursively the drag_parent attribute*/
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
 80033ec:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <indev_proc_release+0x25c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fda3 	bl	8003f3c <get_dragged_obj>
 80033f6:	60f8      	str	r0, [r7, #12]
        if(drag_obj) {
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d028      	beq.n	8003450 <indev_proc_release+0x1f8>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f003 ff8c 	bl	800731c <lv_obj_get_drag_throw>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d022      	beq.n	8003450 <indev_proc_release+0x1f8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01a      	beq.n	8003450 <indev_proc_release+0x1f8>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <indev_proc_release+0x1d6>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	2200      	movs	r2, #0
 8003428:	2112      	movs	r1, #18
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fe66 	bl	8004100 <indev_reset_check>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d136      	bne.n	80034a8 <indev_proc_release+0x250>

                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
 800343a:	2200      	movs	r2, #0
 800343c:	210a      	movs	r1, #10
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f003 f8ba 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fe5b 	bl	8004100 <indev_reset_check>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d12d      	bne.n	80034ac <indev_proc_release+0x254>
            }
        }

        proc->types.pointer.act_obj = NULL;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	619a      	str	r2, [r3, #24]
        proc->pr_timestamp          = 0;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /*The reset can be set in the signal function.
     * In case of reset query ignore the remaining parts.*/
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d021      	beq.n	80034ae <indev_proc_release+0x256>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d119      	bne.n	80034ae <indev_proc_release+0x256>
        indev_drag_throw(proc);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fc18 	bl	8003cb0 <indev_drag_throw>
        if(indev_reset_check(proc)) return;
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fe3d 	bl	8004100 <indev_reset_check>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	e010      	b.n	80034ae <indev_proc_release+0x256>
            if(indev_reset_check(proc)) return;
 800348c:	bf00      	nop
 800348e:	e00e      	b.n	80034ae <indev_proc_release+0x256>
                    if(indev_reset_check(proc)) return;
 8003490:	bf00      	nop
 8003492:	e00c      	b.n	80034ae <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 8003494:	bf00      	nop
 8003496:	e00a      	b.n	80034ae <indev_proc_release+0x256>
            if(indev_reset_check(proc)) return;
 8003498:	bf00      	nop
 800349a:	e008      	b.n	80034ae <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 800349c:	bf00      	nop
 800349e:	e006      	b.n	80034ae <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 80034a0:	bf00      	nop
 80034a2:	e004      	b.n	80034ae <indev_proc_release+0x256>
            if(indev_reset_check(proc)) return;
 80034a4:	bf00      	nop
 80034a6:	e002      	b.n	80034ae <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 80034ac:	bf00      	nop
    }
}
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200177a0 	.word	0x200177a0
 80034b8:	2001779c 	.word	0x2001779c

080034bc <indev_proc_reset_query_handler>:
 * @param data pointer to the data read from the input device
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    if(indev->proc.reset_query) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d046      	beq.n	8003562 <indev_proc_reset_query_handler+0xa6>
        indev->proc.types.pointer.act_obj           = NULL;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	635a      	str	r2, [r3, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 80034e6:	f36f 0300 	bfc	r3, #0, #1
 80034ea:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 80034f4:	f36f 0341 	bfc	r3, #1, #1
 80034f8:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
        indev->proc.long_pr_sent                    = 0;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8003502:	f36f 0300 	bfc	r3, #0, #1
 8003506:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	649a      	str	r2, [r3, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	64da      	str	r2, [r3, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	859a      	strh	r2, [r3, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	85da      	strh	r2, [r3, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 8003528:	2103      	movs	r1, #3
 800352a:	f361 0384 	bfi	r3, r1, #2, #3
 800352e:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	861a      	strh	r2, [r3, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	865a      	strh	r2, [r3, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        indev->proc.reset_query                     = 0;
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8003554:	f36f 0341 	bfc	r3, #1, #1
 8003558:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        indev_obj_act                               = NULL;
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <indev_proc_reset_query_handler+0xb4>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
    }
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	200177a0 	.word	0x200177a0

08003574 <lv_indev_search_obj>:
 * @param obj pointer to a start object, typically the screen
 * @param point pointer to a point for searching the most top child
 * @return pointer to the found object or NULL if there was no suitable object
 */
lv_obj_t * lv_indev_search_obj(lv_obj_t * obj, lv_point_t * point)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]

    /*If the point is on this object check its children too*/
    if(lv_obj_hittest(obj, point)) {
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f004 f83e 	bl	8007606 <lv_obj_hittest>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d053      	beq.n	8003638 <lv_indev_search_obj+0xc4>
        lv_obj_t * i;

        _LV_LL_READ(obj->child_ll, i) {
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4618      	mov	r0, r3
 8003596:	f018 fea3 	bl	801c2e0 <_lv_ll_get_head>
 800359a:	6138      	str	r0, [r7, #16]
 800359c:	e00e      	b.n	80035bc <lv_indev_search_obj+0x48>
            found_p = lv_indev_search_obj(i, point);
 800359e:	6839      	ldr	r1, [r7, #0]
 80035a0:	6938      	ldr	r0, [r7, #16]
 80035a2:	f7ff ffe7 	bl	8003574 <lv_indev_search_obj>
 80035a6:	6178      	str	r0, [r7, #20]

            /*If a child was found then break*/
            if(found_p != NULL) {
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <lv_indev_search_obj+0x50>
        _LV_LL_READ(obj->child_ll, i) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	6939      	ldr	r1, [r7, #16]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f018 feb9 	bl	801c32c <_lv_ll_get_next>
 80035ba:	6138      	str	r0, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ed      	bne.n	800359e <lv_indev_search_obj+0x2a>
 80035c2:	e000      	b.n	80035c6 <lv_indev_search_obj+0x52>
                break;
 80035c4:	bf00      	nop
            }
        }

        /*If then the children was not ok, and this obj is clickable
         * and it or its parent is not hidden then save this object*/
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d135      	bne.n	8003638 <lv_indev_search_obj+0xc4>
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f003 fe33 	bl	8007238 <lv_obj_get_click>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02f      	beq.n	8003638 <lv_indev_search_obj+0xc4>
            lv_obj_t * hidden_i = obj;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60fb      	str	r3, [r7, #12]
            while(hidden_i != NULL) {
 80035dc:	e009      	b.n	80035f2 <lv_indev_search_obj+0x7e>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f003 fe02 	bl	80071e8 <lv_obj_get_hidden>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d107      	bne.n	80035fa <lv_indev_search_obj+0x86>
                hidden_i = lv_obj_get_parent(hidden_i);
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f003 f950 	bl	8006890 <lv_obj_get_parent>
 80035f0:	60f8      	str	r0, [r7, #12]
            while(hidden_i != NULL) {
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f2      	bne.n	80035de <lv_indev_search_obj+0x6a>
 80035f8:	e000      	b.n	80035fc <lv_indev_search_obj+0x88>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80035fa:	bf00      	nop
            }
            /*No parent found with hidden == true*/
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false){
 80035fc:	2140      	movs	r1, #64	; 0x40
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f003 ff12 	bl	8007428 <lv_obj_is_protected>
 8003604:	4603      	mov	r3, r0
 8003606:	f083 0301 	eor.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <lv_indev_search_obj+0xba>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d110      	bne.n	8003638 <lv_indev_search_obj+0xc4>
 8003616:	2100      	movs	r1, #0
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f003 ff2f 	bl	800747c <lv_obj_get_state>
 800361e:	4603      	mov	r3, r0
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <lv_indev_search_obj+0xc4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e004      	b.n	8003638 <lv_indev_search_obj+0xc4>
            }
            else {
                if(hidden_i == NULL) found_p = obj;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <lv_indev_search_obj+0xc4>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 8003638:	697b      	ldr	r3, [r7, #20]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <indev_click_focus>:
/**
 * Handle focus/defocus on click for POINTER input devices
 * @param proc pointer to the state of the indev
 */
static void indev_click_focus(lv_indev_proc_t * proc)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
    /*Handle click focus*/
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
 800364c:	4b86      	ldr	r3, [pc, #536]	; (8003868 <indev_click_focus+0x224>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f004 ff60 	bl	8008516 <lv_obj_get_focused_obj>
 8003656:	6178      	str	r0, [r7, #20]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 8003658:	4b83      	ldr	r3, [pc, #524]	; (8003868 <indev_click_focus+0x224>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2120      	movs	r1, #32
 800365e:	4618      	mov	r0, r3
 8003660:	f003 fee2 	bl	8007428 <lv_obj_is_protected>
 8003664:	4603      	mov	r3, r0
 8003666:	f083 0301 	eor.w	r3, r3, #1
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80f8 	beq.w	8003862 <indev_click_focus+0x21e>
       proc->types.pointer.last_pressed != obj_to_focus) {
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	429a      	cmp	r2, r3
 800367a:	f000 80f2 	beq.w	8003862 <indev_click_focus+0x21e>
#if LV_USE_GROUP
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f003 ff2e 	bl	80074e0 <lv_obj_get_group>
 8003684:	6138      	str	r0, [r7, #16]
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d006      	beq.n	800369c <indev_click_focus+0x58>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4618      	mov	r0, r3
 8003694:	f003 ff24 	bl	80074e0 <lv_obj_get_group>
 8003698:	4603      	mov	r3, r0
 800369a:	e000      	b.n	800369e <indev_click_focus+0x5a>
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]

        /*If both the last and act. obj. are in the same group (or no group but it's also the same) */
        if(g_act == g_prev) {
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d146      	bne.n	8003736 <indev_click_focus+0xf2>
            /*The objects are in a group*/
            if(g_act) {
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <indev_click_focus+0x80>
                lv_group_focus_obj(obj_to_focus);
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f7fe f934 	bl	800191c <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fd23 	bl	8004100 <indev_reset_check>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80bb 	beq.w	8003838 <indev_click_focus+0x1f4>
 80036c2:	e0ce      	b.n	8003862 <indev_click_focus+0x21e>
            }
            /*The object are not in group*/
            else {
                if(proc->types.pointer.last_pressed) {
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01b      	beq.n	8003704 <indev_click_focus+0xc0>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	2200      	movs	r2, #0
 80036d2:	2117      	movs	r1, #23
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 f81f 	bl	8006718 <lv_signal_send>
                    if(indev_reset_check(proc)) return;
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fd10 	bl	8004100 <indev_reset_check>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 80ac 	bne.w	8003840 <indev_click_focus+0x1fc>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	2200      	movs	r2, #0
 80036ee:	210e      	movs	r1, #14
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 ff61 	bl	80065b8 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fd02 	bl	8004100 <indev_reset_check>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 80a0 	bne.w	8003844 <indev_click_focus+0x200>
                }

                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 8003704:	2200      	movs	r2, #0
 8003706:	2116      	movs	r1, #22
 8003708:	6978      	ldr	r0, [r7, #20]
 800370a:	f003 f805 	bl	8006718 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fcf6 	bl	8004100 <indev_reset_check>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	f040 8096 	bne.w	8003848 <indev_click_focus+0x204>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 800371c:	2200      	movs	r2, #0
 800371e:	210d      	movs	r1, #13
 8003720:	6978      	ldr	r0, [r7, #20]
 8003722:	f002 ff49 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fcea 	bl	8004100 <indev_reset_check>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8082 	beq.w	8003838 <indev_click_focus+0x1f4>
 8003734:	e095      	b.n	8003862 <indev_click_focus+0x21e>
            }
        }
        /*The object are not in the same group (in different group or one in not a group)*/
        else {
            /*If the prev. obj. is not in a group then defocus it.*/
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d11e      	bne.n	800377a <indev_click_focus+0x136>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01a      	beq.n	800377a <indev_click_focus+0x136>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	2200      	movs	r2, #0
 800374a:	2117      	movs	r1, #23
 800374c:	4618      	mov	r0, r3
 800374e:	f002 ffe3 	bl	8006718 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fcd4 	bl	8004100 <indev_reset_check>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d176      	bne.n	800384c <indev_click_focus+0x208>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	2200      	movs	r2, #0
 8003764:	210e      	movs	r1, #14
 8003766:	4618      	mov	r0, r3
 8003768:	f002 ff26 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fcc7 	bl	8004100 <indev_reset_check>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d03c      	beq.n	80037f2 <indev_click_focus+0x1ae>
 8003778:	e073      	b.n	8003862 <indev_click_focus+0x21e>
            }
            /*Focus on a non-group object*/
            else {
                if(proc->types.pointer.last_pressed) {
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d037      	beq.n	80037f2 <indev_click_focus+0x1ae>
                    /*If the prev. object also wasn't in a group defocus it*/
                    if(g_prev == NULL) {
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11a      	bne.n	80037be <indev_click_focus+0x17a>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	2200      	movs	r2, #0
 800378e:	2117      	movs	r1, #23
 8003790:	4618      	mov	r0, r3
 8003792:	f002 ffc1 	bl	8006718 <lv_signal_send>
                        if(indev_reset_check(proc)) return;
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fcb2 	bl	8004100 <indev_reset_check>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d156      	bne.n	8003850 <indev_click_focus+0x20c>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	2200      	movs	r2, #0
 80037a8:	210e      	movs	r1, #14
 80037aa:	4618      	mov	r0, r3
 80037ac:	f002 ff04 	bl	80065b8 <lv_event_send>
                        if(indev_reset_check(proc)) return;
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fca5 	bl	8004100 <indev_reset_check>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01a      	beq.n	80037f2 <indev_click_focus+0x1ae>
 80037bc:	e051      	b.n	8003862 <indev_click_focus+0x21e>
                    }
                    /*If the prev. object also was in a group at least "LEAVE" it instead of defocus*/
                    else {
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	2200      	movs	r2, #0
 80037c4:	2115      	movs	r1, #21
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 ffa6 	bl	8006718 <lv_signal_send>
                        if(indev_reset_check(proc)) return;
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fc97 	bl	8004100 <indev_reset_check>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d13d      	bne.n	8003854 <indev_click_focus+0x210>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	2200      	movs	r2, #0
 80037de:	210f      	movs	r1, #15
 80037e0:	4618      	mov	r0, r3
 80037e2:	f002 fee9 	bl	80065b8 <lv_event_send>
                        if(indev_reset_check(proc)) return;
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fc8a 	bl	8004100 <indev_reset_check>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d132      	bne.n	8003858 <indev_click_focus+0x214>
                    }
                }
            }

            /*Focus to the act. in its group*/
            if(g_act) {
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d009      	beq.n	800380c <indev_click_focus+0x1c8>
                lv_group_focus_obj(obj_to_focus);
 80037f8:	6978      	ldr	r0, [r7, #20]
 80037fa:	f7fe f88f 	bl	800191c <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fc7e 	bl	8004100 <indev_reset_check>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <indev_click_focus+0x1f4>
 800380a:	e02a      	b.n	8003862 <indev_click_focus+0x21e>
            }
            else {
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 800380c:	2200      	movs	r2, #0
 800380e:	2116      	movs	r1, #22
 8003810:	6978      	ldr	r0, [r7, #20]
 8003812:	f002 ff81 	bl	8006718 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fc72 	bl	8004100 <indev_reset_check>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11c      	bne.n	800385c <indev_click_focus+0x218>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 8003822:	2200      	movs	r2, #0
 8003824:	210d      	movs	r1, #13
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f002 fec6 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fc67 	bl	8004100 <indev_reset_check>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d113      	bne.n	8003860 <indev_click_focus+0x21c>
        lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
        if(indev_reset_check(proc)) return;
        lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
        if(indev_reset_check(proc)) return;
#endif
        proc->types.pointer.last_pressed = obj_to_focus;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	621a      	str	r2, [r3, #32]
 800383e:	e010      	b.n	8003862 <indev_click_focus+0x21e>
                    if(indev_reset_check(proc)) return;
 8003840:	bf00      	nop
 8003842:	e00e      	b.n	8003862 <indev_click_focus+0x21e>
                    if(indev_reset_check(proc)) return;
 8003844:	bf00      	nop
 8003846:	e00c      	b.n	8003862 <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 8003848:	bf00      	nop
 800384a:	e00a      	b.n	8003862 <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 800384c:	bf00      	nop
 800384e:	e008      	b.n	8003862 <indev_click_focus+0x21e>
                        if(indev_reset_check(proc)) return;
 8003850:	bf00      	nop
 8003852:	e006      	b.n	8003862 <indev_click_focus+0x21e>
                        if(indev_reset_check(proc)) return;
 8003854:	bf00      	nop
 8003856:	e004      	b.n	8003862 <indev_click_focus+0x21e>
                        if(indev_reset_check(proc)) return;
 8003858:	bf00      	nop
 800385a:	e002      	b.n	8003862 <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 800385c:	bf00      	nop
 800385e:	e000      	b.n	8003862 <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 8003860:	bf00      	nop
    }

}
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200177a0 	.word	0x200177a0

0800386c <indev_drag>:
/**
 * Handle the dragging of indev_proc_p->types.pointer.act_obj
 * @param indev pointer to a input device state
 */
static void indev_drag(lv_indev_proc_t * proc)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fb5f 	bl	8003f3c <get_dragged_obj>
 800387e:	61f8      	str	r0, [r7, #28]
    bool drag_just_started = false;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(drag_obj == NULL) return;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8207 	beq.w	8003c9c <indev_drag+0x430>

    if(lv_obj_get_drag(drag_obj) == false) return;
 800388e:	69f8      	ldr	r0, [r7, #28]
 8003890:	f003 fcfa 	bl	8007288 <lv_obj_get_drag>
 8003894:	4603      	mov	r3, r0
 8003896:	f083 0301 	eor.w	r3, r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	f040 81ff 	bne.w	8003ca0 <indev_drag+0x434>

    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 80038a2:	69f8      	ldr	r0, [r7, #28]
 80038a4:	f003 fd18 	bl	80072d8 <lv_obj_get_drag_dir>
 80038a8:	4603      	mov	r3, r0
 80038aa:	76fb      	strb	r3, [r7, #27]

    /*Count the movement by drag*/
    if(proc->types.pointer.drag_limit_out == 0) {
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d172      	bne.n	80039a2 <indev_drag+0x136>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b21a      	sxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	821a      	strh	r2, [r3, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80038dc:	b29a      	uxth	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	b21a      	sxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	825a      	strh	r2, [r3, #18]

        /*Enough move?*/
        bool hor_en = false;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        bool ver_en = false;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
 80038fc:	7efb      	ldrb	r3, [r7, #27]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d002      	beq.n	8003908 <indev_drag+0x9c>
 8003902:	7efb      	ldrb	r3, [r7, #27]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d102      	bne.n	800390e <indev_drag+0xa2>
            hor_en = true;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        }

        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 800390e:	7efb      	ldrb	r3, [r7, #27]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d002      	beq.n	800391a <indev_drag+0xae>
 8003914:	7efb      	ldrb	r3, [r7, #27]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d102      	bne.n	8003920 <indev_drag+0xb4>
            ver_en = true;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        }

        if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8003920:	7efb      	ldrb	r3, [r7, #27]
 8003922:	2b04      	cmp	r3, #4
 8003924:	d115      	bne.n	8003952 <indev_drag+0xe6>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800392c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003930:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800393a:	2b00      	cmp	r3, #0
 800393c:	bfb8      	it	lt
 800393e:	425b      	neglt	r3, r3
 8003940:	429a      	cmp	r2, r3
 8003942:	dd03      	ble.n	800394c <indev_drag+0xe0>
                hor_en = true;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800394a:	e002      	b.n	8003952 <indev_drag+0xe6>
            }
            else {
                ver_en = true;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
        }

        /*If a move is greater then LV_DRAG_LIMIT then begin the drag*/
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 8003952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <indev_drag+0x104>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	bfb8      	it	lt
 8003964:	425b      	neglt	r3, r3
 8003966:	4a6a      	ldr	r2, [pc, #424]	; (8003b10 <indev_drag+0x2a4>)
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	7d12      	ldrb	r2, [r2, #20]
 800396c:	4293      	cmp	r3, r2
 800396e:	da0e      	bge.n	800398e <indev_drag+0x122>
 8003970:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003974:	2b00      	cmp	r3, #0
 8003976:	d014      	beq.n	80039a2 <indev_drag+0x136>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800397e:	2b00      	cmp	r3, #0
 8003980:	bfb8      	it	lt
 8003982:	425b      	neglt	r3, r3
 8003984:	4a62      	ldr	r2, [pc, #392]	; (8003b10 <indev_drag+0x2a4>)
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	7d12      	ldrb	r2, [r2, #20]
 800398a:	4293      	cmp	r3, r2
 800398c:	db09      	blt.n	80039a2 <indev_drag+0x136>
            proc->types.pointer.drag_limit_out = 1;
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            drag_just_started                   = true;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    /*If the drag limit is exceeded handle the dragging*/
    if(proc->types.pointer.drag_limit_out != 0) {
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8179 	beq.w	8003ca6 <indev_drag+0x43a>
        /*Set new position if the vector is not zero*/
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d105      	bne.n	80039ca <indev_drag+0x15e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 816e 	beq.w	8003ca6 <indev_drag+0x43a>

            lv_coord_t prev_x     = drag_obj->coords.x1;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	8a1b      	ldrh	r3, [r3, #16]
 80039ce:	833b      	strh	r3, [r7, #24]
            lv_coord_t prev_y     = drag_obj->coords.y1;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	8a5b      	ldrh	r3, [r3, #18]
 80039d4:	82fb      	strh	r3, [r7, #22]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 80039d6:	69f8      	ldr	r0, [r7, #28]
 80039d8:	f002 ff5a 	bl	8006890 <lv_obj_get_parent>
 80039dc:	4603      	mov	r3, r0
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 f832 	bl	8006a48 <lv_obj_get_width>
 80039e4:	4603      	mov	r3, r0
 80039e6:	82bb      	strh	r3, [r7, #20]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 80039e8:	69f8      	ldr	r0, [r7, #28]
 80039ea:	f002 ff51 	bl	8006890 <lv_obj_get_parent>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f003 f84b 	bl	8006a8c <lv_obj_get_height>
 80039f6:	4603      	mov	r3, r0
 80039f8:	827b      	strh	r3, [r7, #18]

            /*Get the coordinates of the object and modify them*/
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 80039fa:	69f8      	ldr	r0, [r7, #28]
 80039fc:	f002 ffbc 	bl	8006978 <lv_obj_get_x>
 8003a00:	4603      	mov	r3, r0
 8003a02:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 8003a04:	69f8      	ldr	r0, [r7, #28]
 8003a06:	f002 ffeb 	bl	80069e0 <lv_obj_get_y>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	843b      	strh	r3, [r7, #32]

            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
 8003a0e:	7efb      	ldrb	r3, [r7, #27]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d11d      	bne.n	8003a50 <indev_drag+0x1e4>
                if(drag_just_started) {
 8003a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 808e 	beq.w	8003b3a <indev_drag+0x2ce>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003a24:	2103      	movs	r1, #3
 8003a26:	f361 0384 	bfi	r3, r1, #2, #3
 8003a2a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a38:	4413      	add	r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	847b      	strh	r3, [r7, #34]	; 0x22
                    act_y += proc->types.pointer.drag_sum.y;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	8c3b      	ldrh	r3, [r7, #32]
 8003a48:	4413      	add	r3, r2
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	843b      	strh	r3, [r7, #32]
 8003a4e:	e074      	b.n	8003b3a <indev_drag+0x2ce>
                }
            }
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
 8003a50:	7efb      	ldrb	r3, [r7, #27]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d117      	bne.n	8003a86 <indev_drag+0x21a>
                if(drag_just_started) {
 8003a56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d06d      	beq.n	8003b3a <indev_drag+0x2ce>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003a64:	2101      	movs	r1, #1
 8003a66:	f361 0384 	bfi	r3, r1, #2, #3
 8003a6a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	825a      	strh	r2, [r3, #18]
                    act_x += proc->types.pointer.drag_sum.x;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a7e:	4413      	add	r3, r2
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a84:	e059      	b.n	8003b3a <indev_drag+0x2ce>
                }
            }
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
 8003a86:	7efb      	ldrb	r3, [r7, #27]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d117      	bne.n	8003abc <indev_drag+0x250>
                if(drag_just_started) {
 8003a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d052      	beq.n	8003b3a <indev_drag+0x2ce>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	f361 0384 	bfi	r3, r1, #2, #3
 8003aa0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	821a      	strh	r2, [r3, #16]
                    act_y += proc->types.pointer.drag_sum.y;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	8c3b      	ldrh	r3, [r7, #32]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	843b      	strh	r3, [r7, #32]
 8003aba:	e03e      	b.n	8003b3a <indev_drag+0x2ce>
                }
            }
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8003abc:	7efb      	ldrb	r3, [r7, #27]
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d13b      	bne.n	8003b3a <indev_drag+0x2ce>
                if(drag_just_started) {
 8003ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d037      	beq.n	8003b3a <indev_drag+0x2ce>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003ad0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003ad4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bfb8      	it	lt
 8003ae2:	425b      	neglt	r3, r3
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	dd15      	ble.n	8003b14 <indev_drag+0x2a8>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003aee:	2101      	movs	r1, #1
 8003af0:	f361 0384 	bfi	r3, r1, #2, #3
 8003af4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	825a      	strh	r2, [r3, #18]
                        act_x += proc->types.pointer.drag_sum.x;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b08:	4413      	add	r3, r2
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b0e:	e014      	b.n	8003b3a <indev_drag+0x2ce>
 8003b10:	2001779c 	.word	0x2001779c
                    }
                    else {
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	f361 0384 	bfi	r3, r1, #2, #3
 8003b20:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	821a      	strh	r2, [r3, #16]
                        act_y += proc->types.pointer.drag_sum.y;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	8c3b      	ldrh	r3, [r7, #32]
 8003b34:	4413      	add	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	843b      	strh	r3, [r7, #32]
                    }
                }
            }

            /*Move the object*/
            if(allowed_dirs == LV_DRAG_DIR_HOR ||
 8003b3a:	7efb      	ldrb	r3, [r7, #27]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d014      	beq.n	8003b6a <indev_drag+0x2fe>
 8003b40:	7efb      	ldrb	r3, [r7, #27]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d011      	beq.n	8003b6a <indev_drag+0x2fe>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 8003b46:	7efb      	ldrb	r3, [r7, #27]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d116      	bne.n	8003b7a <indev_drag+0x30e>
               (allowed_dirs == LV_DRAG_DIR_ONE &&
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b52:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003b56:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bfb8      	it	lt
 8003b64:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 8003b66:	429a      	cmp	r2, r3
 8003b68:	dd07      	ble.n	8003b7a <indev_drag+0x30e>
                act_x += proc->types.pointer.vect.x;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b74:	4413      	add	r3, r2
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	847b      	strh	r3, [r7, #34]	; 0x22
            }
            if(allowed_dirs == LV_DRAG_DIR_VER ||
 8003b7a:	7efb      	ldrb	r3, [r7, #27]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d014      	beq.n	8003baa <indev_drag+0x33e>
 8003b80:	7efb      	ldrb	r3, [r7, #27]
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d011      	beq.n	8003baa <indev_drag+0x33e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 8003b86:	7efb      	ldrb	r3, [r7, #27]
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d116      	bne.n	8003bba <indev_drag+0x34e>
               (allowed_dirs == LV_DRAG_DIR_ONE &&
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b92:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003b96:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bfb8      	it	lt
 8003ba4:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	da07      	bge.n	8003bba <indev_drag+0x34e>
                act_y += proc->types.pointer.vect.y;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	8c3b      	ldrh	r3, [r7, #32]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	843b      	strh	r3, [r7, #32]
            }

            uint16_t inv_buf_size =
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
 8003bba:	4b3c      	ldr	r3, [pc, #240]	; (8003cac <indev_drag+0x440>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
            uint16_t inv_buf_size =
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f016 fcb1 	bl	801a528 <lv_disp_get_inv_buf_size>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	823b      	strh	r3, [r7, #16]

            lv_obj_set_pos(drag_obj, act_x, act_y);
 8003bca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003bce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	69f8      	ldr	r0, [r7, #28]
 8003bd6:	f001 ff5f 	bl	8005a98 <lv_obj_set_pos>
            proc->types.pointer.drag_in_prog = 1;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

            /*If the object didn't moved then clear the invalidated areas*/
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003bee:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d136      	bne.n	8003c64 <indev_drag+0x3f8>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003bfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d12f      	bne.n	8003c64 <indev_drag+0x3f8>
                /*In a special case if the object is moved on a page and
                 * the scrollable has fit == true and the object is dragged of the page then
                 * while its coordinate is not changing only the parent's size is reduced */
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8003c04:	69f8      	ldr	r0, [r7, #28]
 8003c06:	f002 fe43 	bl	8006890 <lv_obj_get_parent>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f002 ff1b 	bl	8006a48 <lv_obj_get_width>
 8003c12:	4603      	mov	r3, r0
 8003c14:	81fb      	strh	r3, [r7, #14]
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8003c16:	69f8      	ldr	r0, [r7, #28]
 8003c18:	f002 fe3a 	bl	8006890 <lv_obj_get_parent>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f002 ff34 	bl	8006a8c <lv_obj_get_height>
 8003c24:	4603      	mov	r3, r0
 8003c26:	81bb      	strh	r3, [r7, #12]
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 8003c28:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003c2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d117      	bne.n	8003c64 <indev_drag+0x3f8>
 8003c34:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003c38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d111      	bne.n	8003c64 <indev_drag+0x3f8>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
 8003c40:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <indev_drag+0x440>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f016 fc6e 	bl	801a528 <lv_disp_get_inv_buf_size>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	817b      	strh	r3, [r7, #10]
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
 8003c50:	4b16      	ldr	r3, [pc, #88]	; (8003cac <indev_drag+0x440>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68d8      	ldr	r0, [r3, #12]
 8003c56:	897a      	ldrh	r2, [r7, #10]
 8003c58:	8a3b      	ldrh	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f016 fc72 	bl	801a548 <_lv_disp_pop_from_inv_buf>
                }
            }

            /*Set the drag in progress flag*/
            /*Send the drag begin signal on first move*/
            if(drag_just_started) {
 8003c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01c      	beq.n	8003ca6 <indev_drag+0x43a>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <indev_drag+0x440>)
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	2111      	movs	r1, #17
 8003c76:	69f8      	ldr	r0, [r7, #28]
 8003c78:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa40 	bl	8004100 <indev_reset_check>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10e      	bne.n	8003ca4 <indev_drag+0x438>

                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2108      	movs	r1, #8
 8003c8a:	69f8      	ldr	r0, [r7, #28]
 8003c8c:	f002 fc94 	bl	80065b8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fa35 	bl	8004100 <indev_reset_check>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	e004      	b.n	8003ca6 <indev_drag+0x43a>
    if(drag_obj == NULL) return;
 8003c9c:	bf00      	nop
 8003c9e:	e002      	b.n	8003ca6 <indev_drag+0x43a>
    if(lv_obj_get_drag(drag_obj) == false) return;
 8003ca0:	bf00      	nop
 8003ca2:	e000      	b.n	8003ca6 <indev_drag+0x43a>
                if(indev_reset_check(proc)) return;
 8003ca4:	bf00      	nop
            }

        }
    }
}
 8003ca6:	3728      	adds	r7, #40	; 0x28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	2001779c 	.word	0x2001779c

08003cb0 <indev_drag_throw>:
/**
 * Handle throwing by drag if the drag is ended
 * @param indev pointer to an input device state
 */
static void indev_drag_throw(lv_indev_proc_t * proc)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	; 0x28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
    if(proc->types.pointer.drag_in_prog == 0) return;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8126 	beq.w	8003f16 <indev_drag_throw+0x266>

    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f934 	bl	8003f3c <get_dragged_obj>
 8003cd4:	6278      	str	r0, [r7, #36]	; 0x24

    if(drag_obj == NULL) return;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 811e 	beq.w	8003f1a <indev_drag_throw+0x26a>

    /*Return if the drag throw is not enabled*/
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 8003cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ce0:	f003 fb1c 	bl	800731c <lv_obj_get_drag_throw>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f083 0301 	eor.w	r3, r3, #1
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01a      	beq.n	8003d26 <indev_drag_throw+0x76>
        proc->types.pointer.drag_in_prog = 0;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003cf6:	f36f 0341 	bfc	r3, #1, #1
 8003cfa:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	4a8c      	ldr	r2, [pc, #560]	; (8003f34 <indev_drag_throw+0x284>)
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	2113      	movs	r1, #19
 8003d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d0a:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f9f7 	bl	8004100 <indev_reset_check>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f040 8102 	bne.w	8003f1e <indev_drag_throw+0x26e>

        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2109      	movs	r1, #9
 8003d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d20:	f002 fc4a 	bl	80065b8 <lv_event_send>
        return;
 8003d24:	e102      	b.n	8003f2c <indev_drag_throw+0x27c>
    }

    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8003d26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d28:	f003 fad6 	bl	80072d8 <lv_obj_get_drag_dir>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /*Reduce the vectors*/
    proc->types.pointer.drag_throw_vect.x =
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b7e      	ldr	r3, [pc, #504]	; (8003f34 <indev_drag_throw+0x284>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	7d5b      	ldrb	r3, [r3, #21]
 8003d40:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003d44:	fb03 f302 	mul.w	r3, r3, r2
 8003d48:	4a7b      	ldr	r2, [pc, #492]	; (8003f38 <indev_drag_throw+0x288>)
 8003d4a:	fb82 1203 	smull	r1, r2, r2, r3
 8003d4e:	1152      	asrs	r2, r2, #5
 8003d50:	17db      	asrs	r3, r3, #31
 8003d52:	1ad3      	subs	r3, r2, r3
    proc->types.pointer.drag_throw_vect.x =
 8003d54:	b21a      	sxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y =
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003d60:	461a      	mov	r2, r3
 8003d62:	4b74      	ldr	r3, [pc, #464]	; (8003f34 <indev_drag_throw+0x284>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	7d5b      	ldrb	r3, [r3, #21]
 8003d68:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003d6c:	fb03 f302 	mul.w	r3, r3, r2
 8003d70:	4a71      	ldr	r2, [pc, #452]	; (8003f38 <indev_drag_throw+0x288>)
 8003d72:	fb82 1203 	smull	r1, r2, r2, r3
 8003d76:	1152      	asrs	r2, r2, #5
 8003d78:	17db      	asrs	r3, r3, #31
 8003d7a:	1ad3      	subs	r3, r2, r3
    proc->types.pointer.drag_throw_vect.y =
 8003d7c:	b21a      	sxth	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	82da      	strh	r2, [r3, #22]

    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <indev_drag_throw+0xe8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80a0 	beq.w	8003ed8 <indev_drag_throw+0x228>
        /*Get the coordinates and modify them*/
        lv_area_t coords_ori;
        lv_obj_get_coords(drag_obj, &coords_ori);
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da0:	f002 fdc6 	bl	8006930 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8003da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da6:	f002 fde7 	bl	8006978 <lv_obj_get_x>
 8003daa:	4603      	mov	r3, r0
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	843b      	strh	r3, [r7, #32]
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8003dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dbe:	f002 fe0f 	bl	80069e0 <lv_obj_get_y>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	83fb      	strh	r3, [r7, #30]

        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
 8003dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d108      	bne.n	8003dee <indev_drag_throw+0x13e>
 8003ddc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003de0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003de4:	4619      	mov	r1, r3
 8003de6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003de8:	f001 fe56 	bl	8005a98 <lv_obj_set_pos>
 8003dec:	e02b      	b.n	8003e46 <indev_drag_throw+0x196>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
 8003dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d106      	bne.n	8003e04 <indev_drag_throw+0x154>
 8003df6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dfe:	f001 fef1 	bl	8005be4 <lv_obj_set_x>
 8003e02:	e020      	b.n	8003e46 <indev_drag_throw+0x196>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
 8003e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d106      	bne.n	8003e1a <indev_drag_throw+0x16a>
 8003e0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e10:	4619      	mov	r1, r3
 8003e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e14:	f001 ff10 	bl	8005c38 <lv_obj_set_y>
 8003e18:	e015      	b.n	8003e46 <indev_drag_throw+0x196>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8003e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d111      	bne.n	8003e46 <indev_drag_throw+0x196>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d006      	beq.n	8003e3a <indev_drag_throw+0x18a>
 8003e2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003e30:	4619      	mov	r1, r3
 8003e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e34:	f001 fed6 	bl	8005be4 <lv_obj_set_x>
 8003e38:	e005      	b.n	8003e46 <indev_drag_throw+0x196>
            else lv_obj_set_y(drag_obj, act_y);
 8003e3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e42:	f001 fef9 	bl	8005c38 <lv_obj_set_y>
        }
        lv_area_t coord_new;
        lv_obj_get_coords(drag_obj, &coord_new);
 8003e46:	f107 030c 	add.w	r3, r7, #12
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e4e:	f002 fd6f 	bl	8006930 <lv_obj_get_coords>

        /*If non of the coordinates are changed then do not continue throwing*/
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8003e52:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003e56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d004      	beq.n	8003e68 <indev_drag_throw+0x1b8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d15c      	bne.n	8003f22 <indev_drag_throw+0x272>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8003e68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003e6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d004      	beq.n	8003e7e <indev_drag_throw+0x1ce>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d151      	bne.n	8003f22 <indev_drag_throw+0x272>
            proc->types.pointer.drag_in_prog      = 0;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003e84:	f36f 0341 	bfc	r3, #1, #1
 8003e88:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	819a      	strh	r2, [r3, #12]
            proc->types.pointer.vect.y            = 0;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	81da      	strh	r2, [r3, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	829a      	strh	r2, [r3, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	82da      	strh	r2, [r3, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	4a22      	ldr	r2, [pc, #136]	; (8003f34 <indev_drag_throw+0x284>)
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	2113      	movs	r1, #19
 8003eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eb0:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f924 	bl	8004100 <indev_reset_check>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d133      	bne.n	8003f26 <indev_drag_throw+0x276>

            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2109      	movs	r1, #9
 8003ec2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ec4:	f002 fb78 	bl	80065b8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f919 	bl	8004100 <indev_reset_check>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d026      	beq.n	8003f22 <indev_drag_throw+0x272>
 8003ed4:	bf00      	nop
 8003ed6:	e029      	b.n	8003f2c <indev_drag_throw+0x27c>
        }
    }
    /*If the types.pointer.vectors become 0 -> types.pointer.drag_in_prog = 0 and send a drag end
       signal*/
    else {
        proc->types.pointer.drag_in_prog = 0;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003ede:	f36f 0341 	bfc	r3, #1, #1
 8003ee2:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <indev_drag_throw+0x284>)
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	2113      	movs	r1, #19
 8003ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ef2:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f903 	bl	8004100 <indev_reset_check>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d114      	bne.n	8003f2a <indev_drag_throw+0x27a>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8003f00:	2200      	movs	r2, #0
 8003f02:	2109      	movs	r1, #9
 8003f04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f06:	f002 fb57 	bl	80065b8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8f8 	bl	8004100 <indev_reset_check>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	e00a      	b.n	8003f2c <indev_drag_throw+0x27c>
    if(proc->types.pointer.drag_in_prog == 0) return;
 8003f16:	bf00      	nop
 8003f18:	e008      	b.n	8003f2c <indev_drag_throw+0x27c>
    if(drag_obj == NULL) return;
 8003f1a:	bf00      	nop
 8003f1c:	e006      	b.n	8003f2c <indev_drag_throw+0x27c>
        if(indev_reset_check(proc)) return;
 8003f1e:	bf00      	nop
 8003f20:	e004      	b.n	8003f2c <indev_drag_throw+0x27c>
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8003f22:	bf00      	nop
 8003f24:	e002      	b.n	8003f2c <indev_drag_throw+0x27c>
            if(indev_reset_check(proc)) return;
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <indev_drag_throw+0x27c>
        if(indev_reset_check(proc)) return;
 8003f2a:	bf00      	nop
    }
}
 8003f2c:	3728      	adds	r7, #40	; 0x28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	2001779c 	.word	0x2001779c
 8003f38:	51eb851f 	.word	0x51eb851f

08003f3c <get_dragged_obj>:
 * Get the really dragged object by taking `drag_parent` into account.
 * @param obj the start object
 * @return the object to really drag
 */
static lv_obj_t * get_dragged_obj(lv_obj_t * obj)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <get_dragged_obj+0x12>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e010      	b.n	8003f70 <get_dragged_obj+0x34>
    lv_obj_t * drag_obj = obj;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8003f52:	e003      	b.n	8003f5c <get_dragged_obj+0x20>
        drag_obj = lv_obj_get_parent(drag_obj);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f002 fc9b 	bl	8006890 <lv_obj_get_parent>
 8003f5a:	60f8      	str	r0, [r7, #12]
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f003 fa05 	bl	800736c <lv_obj_get_drag_parent>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <get_dragged_obj+0x32>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f2      	bne.n	8003f54 <get_dragged_obj+0x18>
    }

    return drag_obj;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <indev_gesture>:
/**
* Handle the gesture of indev_proc_p->types.pointer.act_obj
* @param indev pointer to a input device state
*/
static void indev_gesture(lv_indev_proc_t * proc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

    if(proc->types.pointer.gesture_sent) return;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f040 80ac 	bne.w	80040ea <indev_gesture+0x172>

    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	60fb      	str	r3, [r7, #12]

    /*If gesture parent is active check recursively the gesture attribute*/
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 8003f98:	e003      	b.n	8003fa2 <indev_gesture+0x2a>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f002 fc78 	bl	8006890 <lv_obj_get_parent>
 8003fa0:	60f8      	str	r0, [r7, #12]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <indev_gesture+0x3c>
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f003 f9f4 	bl	8007396 <lv_obj_get_gesture_parent>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f2      	bne.n	8003f9a <indev_gesture+0x22>
    }

    if(gesture_obj == NULL) return;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8099 	beq.w	80040ee <indev_gesture+0x176>

    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfb8      	it	lt
 8003fc6:	425b      	neglt	r3, r3
 8003fc8:	4a4c      	ldr	r2, [pc, #304]	; (80040fc <indev_gesture+0x184>)
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	7d92      	ldrb	r2, [r2, #22]
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	da10      	bge.n	8003ff4 <indev_gesture+0x7c>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bfb8      	it	lt
 8003fdc:	425b      	neglt	r3, r3
 8003fde:	4a47      	ldr	r2, [pc, #284]	; (80040fc <indev_gesture+0x184>)
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	7d92      	ldrb	r2, [r2, #22]
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	da05      	bge.n	8003ff4 <indev_gesture+0x7c>
        proc->types.pointer.gesture_sum.x = 0;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	84da      	strh	r2, [r3, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /*Count the movement by gesture*/
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004002:	b29b      	uxth	r3, r3
 8004004:	4413      	add	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	b21a      	sxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	84da      	strh	r2, [r3, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800401c:	b29b      	uxth	r3, r3
 800401e:	4413      	add	r3, r2
 8004020:	b29b      	uxth	r3, r3
 8004022:	b21a      	sxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28

    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800402e:	2b00      	cmp	r3, #0
 8004030:	bfb8      	it	lt
 8004032:	425b      	neglt	r3, r3
 8004034:	4a31      	ldr	r2, [pc, #196]	; (80040fc <indev_gesture+0x184>)
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	7dd2      	ldrb	r2, [r2, #23]
 800403a:	4293      	cmp	r3, r2
 800403c:	dc0a      	bgt.n	8004054 <indev_gesture+0xdc>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	bfb8      	it	lt
 8004048:	425b      	neglt	r3, r3
 800404a:	4a2c      	ldr	r2, [pc, #176]	; (80040fc <indev_gesture+0x184>)
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	7dd2      	ldrb	r2, [r2, #23]
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 8004050:	4293      	cmp	r3, r2
 8004052:	dd4f      	ble.n	80040f4 <indev_gesture+0x17c>

        proc->types.pointer.gesture_sent = 1;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800405a:	f043 0320 	orr.w	r3, r3, #32
 800405e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004068:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800406c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004076:	2b00      	cmp	r3, #0
 8004078:	bfb8      	it	lt
 800407a:	425b      	neglt	r3, r3
 800407c:	429a      	cmp	r2, r3
 800407e:	dd0e      	ble.n	800409e <indev_gesture+0x126>
            if(proc->types.pointer.gesture_sum.x > 0)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004086:	2b00      	cmp	r3, #0
 8004088:	dd04      	ble.n	8004094 <indev_gesture+0x11c>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2203      	movs	r2, #3
 800408e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004092:	e012      	b.n	80040ba <indev_gesture+0x142>
            else
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800409c:	e00d      	b.n	80040ba <indev_gesture+0x142>
        }
        else {
            if(proc->types.pointer.gesture_sum.y > 0)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	dd04      	ble.n	80040b2 <indev_gesture+0x13a>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040b0:	e003      	b.n	80040ba <indev_gesture+0x142>
            else
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4a0f      	ldr	r2, [pc, #60]	; (80040fc <indev_gesture+0x184>)
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	2114      	movs	r1, #20
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f819 	bl	8004100 <indev_reset_check>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10e      	bne.n	80040f2 <indev_gesture+0x17a>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
 80040d4:	2200      	movs	r2, #0
 80040d6:	210b      	movs	r1, #11
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f002 fa6d 	bl	80065b8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f80e 	bl	8004100 <indev_reset_check>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	e004      	b.n	80040f4 <indev_gesture+0x17c>
    if(proc->types.pointer.gesture_sent) return;
 80040ea:	bf00      	nop
 80040ec:	e002      	b.n	80040f4 <indev_gesture+0x17c>
    if(gesture_obj == NULL) return;
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <indev_gesture+0x17c>
        if(indev_reset_check(proc)) return;
 80040f2:	bf00      	nop
    }
}
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	2001779c 	.word	0x2001779c

08004100 <indev_reset_check>:
 * Checks if the reset_query flag has been set. If so, perform necessary global indev cleanup actions
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
    if(proc->reset_query) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <indev_reset_check+0x1e>
        indev_obj_act = NULL;
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <indev_reset_check+0x44>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	200177a0 	.word	0x200177a0

08004148 <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	613b      	str	r3, [r7, #16]

    while(len) {
 800415c:	e00c      	b.n	8004178 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	701a      	strb	r2, [r3, #0]
        d8++;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	3301      	adds	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
        s8++;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	3301      	adds	r3, #1
 8004170:	613b      	str	r3, [r7, #16]
        len--;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3b01      	subs	r3, #1
 8004176:	607b      	str	r3, [r7, #4]
    while(len) {
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1ef      	bne.n	800415e <_lv_memcpy_small+0x16>
    }

    return dst;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	4618      	mov	r0, r3
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8004196:	2208      	movs	r2, #8
 8004198:	6839      	ldr	r1, [r7, #0]
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ffd4 	bl	8004148 <_lv_memcpy_small>
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	b21b      	sxth	r3, r3
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	b21b      	sxth	r3, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8004212:	7bbb      	ldrb	r3, [r7, #14]
 8004214:	461a      	mov	r2, r3
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	fb03 f202 	mul.w	r2, r3, r2
 800421c:	7abb      	ldrb	r3, [r7, #10]
 800421e:	4619      	mov	r1, r3
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004226:	fb03 f301 	mul.w	r3, r3, r1
 800422a:	4413      	add	r3, r2
 800422c:	461a      	mov	r2, r3
 800422e:	4613      	mov	r3, r2
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	4413      	add	r3, r2
 8004234:	01db      	lsls	r3, r3, #7
 8004236:	4413      	add	r3, r2
 8004238:	0ddb      	lsrs	r3, r3, #23
 800423a:	b2db      	uxtb	r3, r3
 800423c:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800423e:	7b7b      	ldrb	r3, [r7, #13]
 8004240:	461a      	mov	r2, r3
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	fb03 f202 	mul.w	r2, r3, r2
 8004248:	7a7b      	ldrb	r3, [r7, #9]
 800424a:	4619      	mov	r1, r3
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004252:	fb03 f301 	mul.w	r3, r3, r1
 8004256:	4413      	add	r3, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4613      	mov	r3, r2
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	4413      	add	r3, r2
 8004260:	01db      	lsls	r3, r3, #7
 8004262:	4413      	add	r3, r2
 8004264:	0ddb      	lsrs	r3, r3, #23
 8004266:	b2db      	uxtb	r3, r3
 8004268:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800426a:	7b3b      	ldrb	r3, [r7, #12]
 800426c:	461a      	mov	r2, r3
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	fb03 f202 	mul.w	r2, r3, r2
 8004274:	7a3b      	ldrb	r3, [r7, #8]
 8004276:	4619      	mov	r1, r3
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800427e:	fb03 f301 	mul.w	r3, r3, r1
 8004282:	4413      	add	r3, r2
 8004284:	461a      	mov	r2, r3
 8004286:	4613      	mov	r3, r2
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	4413      	add	r3, r2
 800428c:	01db      	lsls	r3, r3, #7
 800428e:	4413      	add	r3, r2
 8004290:	0ddb      	lsrs	r3, r3, #23
 8004292:	b2db      	uxtb	r3, r3
 8004294:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 8004296:	23ff      	movs	r3, #255	; 0xff
 8004298:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800429a:	697b      	ldr	r3, [r7, #20]
}
 800429c:	4618      	mov	r0, r3
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 80042a8:	b490      	push	{r4, r7}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4604      	mov	r4, r0
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	4622      	mov	r2, r4
 80042b6:	71fa      	strb	r2, [r7, #7]
 80042b8:	4602      	mov	r2, r0
 80042ba:	71ba      	strb	r2, [r7, #6]
 80042bc:	460a      	mov	r2, r1
 80042be:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 80042c0:	797a      	ldrb	r2, [r7, #5]
 80042c2:	f362 0307 	bfi	r3, r2, #0, #8
 80042c6:	79ba      	ldrb	r2, [r7, #6]
 80042c8:	f362 230f 	bfi	r3, r2, #8, #8
 80042cc:	79fa      	ldrb	r2, [r7, #7]
 80042ce:	f362 4317 	bfi	r3, r2, #16, #8
 80042d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc90      	pop	{r4, r7}
 80042de:	4770      	bx	lr

080042e0 <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	b2d8      	uxtb	r0, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	f7ff ffd5 	bl	80042a8 <lv_color_make>
 80042fe:	4603      	mov	r3, r0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
    a->var     = var;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	601a      	str	r2, [r3, #0]
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <lv_anim_set_exec_cb>:
 * @param exec_cb a function to execute during animation
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	605a      	str	r2, [r3, #4]
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param duration duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
    a->time     = duration;
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <lv_anim_set_delay>:
 * Set a delay before starting the animation
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay before the animation in milliseconds
 */
static inline void lv_anim_set_delay(lv_anim_t * a, uint32_t delay)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	425a      	negs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <lv_anim_set_values>:
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start the start value
 * @param end the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, lv_anim_value_t start, lv_anim_value_t end)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	807b      	strh	r3, [r7, #2]
 8004386:	4613      	mov	r3, r2
 8004388:	803b      	strh	r3, [r7, #0]
    a->start = start;
 800438a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	619a      	str	r2, [r3, #24]
    a->current = start;
 8004392:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	61da      	str	r2, [r3, #28]
    a->end   = end;
 800439a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <lv_anim_set_path>:
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function the get the current value of the animation.
 *                The built in functions starts with `lv_anim_path_...`
 */
static inline void lv_anim_set_path(lv_anim_t * a, const lv_anim_path_t * path)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(&a->path, path, sizeof(lv_anim_path_t));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3310      	adds	r3, #16
 80043bc:	2208      	movs	r2, #8
 80043be:	6839      	ldr	r1, [r7, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fec1 	bl	8004148 <_lv_memcpy_small>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <lv_anim_set_start_cb>:
 * Set a function call when the animation really starts (considering `delay`)
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	609a      	str	r2, [r3, #8]
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	60da      	str	r2, [r3, #12]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <lv_style_list_get_style>:
 * @param list pointer to a style list.
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
    if(list->has_trans && list->skip_trans) id++;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	791b      	ldrb	r3, [r3, #4]
 8004416:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <lv_style_list_get_style+0x2e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	795b      	ldrb	r3, [r3, #5]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <lv_style_list_get_style+0x2e>
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	3301      	adds	r3, #1
 8004432:	70fb      	strb	r3, [r7, #3]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	791b      	ldrb	r3, [r3, #4]
 8004438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <lv_style_list_get_style+0x4e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	791b      	ldrb	r3, [r3, #4]
 8004446:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	4293      	cmp	r3, r2
 8004452:	d301      	bcc.n	8004458 <lv_style_list_get_style+0x52>
 8004454:	2300      	movs	r3, #0
 8004456:	e005      	b.n	8004464 <lv_style_list_get_style+0x5e>
    return list->style_list[id];
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <lv_obj_get_style_radius>:
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	2201      	movs	r2, #1
 8004480:	4619      	mov	r1, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f002 fb47 	bl	8006b16 <_lv_obj_get_style_int>
 8004488:	4603      	mov	r3, r0
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <lv_obj_get_style_clip_corner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	70fb      	strb	r3, [r7, #3]
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	2202      	movs	r2, #2
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f002 fb36 	bl	8006b16 <_lv_obj_get_style_int>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <lv_obj_get_style_size>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	70fb      	strb	r3, [r7, #3]
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	2203      	movs	r2, #3
 80044ce:	4619      	mov	r1, r3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f002 fb20 	bl	8006b16 <_lv_obj_get_style_int>
 80044d6:	4603      	mov	r3, r0
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <lv_obj_get_style_transform_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	2204      	movs	r2, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f002 fb0f 	bl	8006b16 <_lv_obj_get_style_int>
 80044f8:	4603      	mov	r3, r0
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <lv_obj_get_style_transform_height>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	70fb      	strb	r3, [r7, #3]
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	2205      	movs	r2, #5
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f002 fafe 	bl	8006b16 <_lv_obj_get_style_int>
 800451a:	4603      	mov	r3, r0
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <lv_obj_get_style_transform_angle>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	2206      	movs	r2, #6
 8004534:	4619      	mov	r1, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f002 faed 	bl	8006b16 <_lv_obj_get_style_int>
 800453c:	4603      	mov	r3, r0
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <lv_obj_get_style_transform_zoom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	70fb      	strb	r3, [r7, #3]
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	2207      	movs	r2, #7
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f002 fadc 	bl	8006b16 <_lv_obj_get_style_int>
 800455e:	4603      	mov	r3, r0
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <lv_obj_get_style_opa_scale>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	f248 020c 	movw	r2, #32780	; 0x800c
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f002 fcbe 	bl	8006efe <_lv_obj_get_style_opa>
 8004582:	4603      	mov	r3, r0
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <lv_obj_get_style_pad_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	2210      	movs	r2, #16
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f002 fab9 	bl	8006b16 <_lv_obj_get_style_int>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <lv_obj_get_style_pad_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	2211      	movs	r2, #17
 80045be:	4619      	mov	r1, r3
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f002 faa8 	bl	8006b16 <_lv_obj_get_style_int>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <lv_obj_get_style_pad_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	2212      	movs	r2, #18
 80045e0:	4619      	mov	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f002 fa97 	bl	8006b16 <_lv_obj_get_style_int>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <lv_obj_get_style_pad_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	70fb      	strb	r3, [r7, #3]
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	2213      	movs	r2, #19
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f002 fa86 	bl	8006b16 <_lv_obj_get_style_int>
 800460a:	4603      	mov	r3, r0
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <lv_obj_get_style_pad_inner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	2214      	movs	r2, #20
 8004624:	4619      	mov	r1, r3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f002 fa75 	bl	8006b16 <_lv_obj_get_style_int>
 800462c:	4603      	mov	r3, r0
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <lv_obj_get_style_margin_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	460b      	mov	r3, r1
 8004640:	70fb      	strb	r3, [r7, #3]
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	2215      	movs	r2, #21
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f002 fa64 	bl	8006b16 <_lv_obj_get_style_int>
 800464e:	4603      	mov	r3, r0
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <lv_obj_get_style_margin_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	70fb      	strb	r3, [r7, #3]
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	2216      	movs	r2, #22
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f002 fa53 	bl	8006b16 <_lv_obj_get_style_int>
 8004670:	4603      	mov	r3, r0
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <lv_obj_get_style_margin_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	70fb      	strb	r3, [r7, #3]
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	2217      	movs	r2, #23
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f002 fa42 	bl	8006b16 <_lv_obj_get_style_int>
 8004692:	4603      	mov	r3, r0
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <lv_obj_get_style_margin_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	2218      	movs	r2, #24
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f002 fa31 	bl	8006b16 <_lv_obj_get_style_int>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <lv_obj_get_style_bg_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	460b      	mov	r3, r1
 80046c8:	70fb      	strb	r3, [r7, #3]
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	2220      	movs	r2, #32
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f002 fa20 	bl	8006b16 <_lv_obj_get_style_int>
 80046d6:	4603      	mov	r3, r0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <lv_obj_get_style_bg_main_stop>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	70fb      	strb	r3, [r7, #3]
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	2221      	movs	r2, #33	; 0x21
 80046f2:	4619      	mov	r1, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f002 fa0e 	bl	8006b16 <_lv_obj_get_style_int>
 80046fa:	4603      	mov	r3, r0
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <lv_obj_get_style_bg_grad_stop>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	70fb      	strb	r3, [r7, #3]
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	2222      	movs	r2, #34	; 0x22
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f002 f9fd 	bl	8006b16 <_lv_obj_get_style_int>
 800471c:	4603      	mov	r3, r0
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <lv_obj_get_style_bg_grad_dir>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	70fb      	strb	r3, [r7, #3]
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	2223      	movs	r2, #35	; 0x23
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f002 f9ec 	bl	8006b16 <_lv_obj_get_style_int>
 800473e:	4603      	mov	r3, r0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <lv_obj_get_style_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	460b      	mov	r3, r1
 8004754:	70fb      	strb	r3, [r7, #3]
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	2229      	movs	r2, #41	; 0x29
 800475a:	4619      	mov	r1, r3
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f002 fb63 	bl	8006e28 <_lv_obj_get_style_color>
 8004762:	4603      	mov	r3, r0
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <lv_obj_get_style_bg_grad_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	70fb      	strb	r3, [r7, #3]
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	222a      	movs	r2, #42	; 0x2a
 800477c:	4619      	mov	r1, r3
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f002 fb52 	bl	8006e28 <_lv_obj_get_style_color>
 8004784:	4603      	mov	r3, r0
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <lv_obj_get_style_bg_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	70fb      	strb	r3, [r7, #3]
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	222c      	movs	r2, #44	; 0x2c
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f002 fbac 	bl	8006efe <_lv_obj_get_style_opa>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <lv_obj_get_style_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	2230      	movs	r2, #48	; 0x30
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f002 f9a7 	bl	8006b16 <_lv_obj_get_style_int>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <lv_obj_get_style_border_side>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	460b      	mov	r3, r1
 80047dc:	70fb      	strb	r3, [r7, #3]
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	2231      	movs	r2, #49	; 0x31
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f002 f996 	bl	8006b16 <_lv_obj_get_style_int>
 80047ea:	4603      	mov	r3, r0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <lv_obj_get_style_border_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	70fb      	strb	r3, [r7, #3]
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	2232      	movs	r2, #50	; 0x32
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f002 f984 	bl	8006b16 <_lv_obj_get_style_int>
 800480e:	4603      	mov	r3, r0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <lv_obj_get_style_border_post>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	70fb      	strb	r3, [r7, #3]
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	2233      	movs	r2, #51	; 0x33
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f002 f972 	bl	8006b16 <_lv_obj_get_style_int>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <lv_obj_get_style_border_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	70fb      	strb	r3, [r7, #3]
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	2239      	movs	r2, #57	; 0x39
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f002 fae5 	bl	8006e28 <_lv_obj_get_style_color>
 800485e:	4603      	mov	r3, r0
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <lv_obj_get_style_border_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	223c      	movs	r2, #60	; 0x3c
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f002 fb3f 	bl	8006efe <_lv_obj_get_style_opa>
 8004880:	4603      	mov	r3, r0
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <lv_obj_get_style_outline_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	70fb      	strb	r3, [r7, #3]
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	2240      	movs	r2, #64	; 0x40
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f002 f93a 	bl	8006b16 <_lv_obj_get_style_int>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <lv_obj_get_style_outline_pad>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	2241      	movs	r2, #65	; 0x41
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f002 f929 	bl	8006b16 <_lv_obj_get_style_int>
 80048c4:	4603      	mov	r3, r0
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <lv_obj_get_style_outline_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	460b      	mov	r3, r1
 80048d8:	70fb      	strb	r3, [r7, #3]
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	2242      	movs	r2, #66	; 0x42
 80048de:	4619      	mov	r1, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f002 f918 	bl	8006b16 <_lv_obj_get_style_int>
 80048e6:	4603      	mov	r3, r0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <lv_obj_get_style_outline_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	70fb      	strb	r3, [r7, #3]
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	2249      	movs	r2, #73	; 0x49
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f002 fa8f 	bl	8006e28 <_lv_obj_get_style_color>
 800490a:	4603      	mov	r3, r0
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <lv_obj_get_style_outline_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	224c      	movs	r2, #76	; 0x4c
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f002 fae9 	bl	8006efe <_lv_obj_get_style_opa>
 800492c:	4603      	mov	r3, r0
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <lv_obj_get_style_shadow_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	460b      	mov	r3, r1
 8004940:	70fb      	strb	r3, [r7, #3]
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	2250      	movs	r2, #80	; 0x50
 8004946:	4619      	mov	r1, r3
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f002 f8e4 	bl	8006b16 <_lv_obj_get_style_int>
 800494e:	4603      	mov	r3, r0
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <lv_obj_get_style_shadow_ofs_x>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	2251      	movs	r2, #81	; 0x51
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f002 f8d3 	bl	8006b16 <_lv_obj_get_style_int>
 8004970:	4603      	mov	r3, r0
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <lv_obj_get_style_shadow_ofs_y>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	70fb      	strb	r3, [r7, #3]
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	2252      	movs	r2, #82	; 0x52
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f002 f8c2 	bl	8006b16 <_lv_obj_get_style_int>
 8004992:	4603      	mov	r3, r0
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <lv_obj_get_style_shadow_spread>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	2253      	movs	r2, #83	; 0x53
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f002 f8b1 	bl	8006b16 <_lv_obj_get_style_int>
 80049b4:	4603      	mov	r3, r0
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <lv_obj_get_style_shadow_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	460b      	mov	r3, r1
 80049c8:	70fb      	strb	r3, [r7, #3]
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	2254      	movs	r2, #84	; 0x54
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f002 f8a0 	bl	8006b16 <_lv_obj_get_style_int>
 80049d6:	4603      	mov	r3, r0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <lv_obj_get_style_shadow_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	70fb      	strb	r3, [r7, #3]
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	2259      	movs	r2, #89	; 0x59
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f002 fa17 	bl	8006e28 <_lv_obj_get_style_color>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <lv_obj_get_style_shadow_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	225c      	movs	r2, #92	; 0x5c
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f002 fa71 	bl	8006efe <_lv_obj_get_style_opa>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <lv_obj_get_style_pattern_repeat>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	70fb      	strb	r3, [r7, #3]
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	2261      	movs	r2, #97	; 0x61
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f002 f86c 	bl	8006b16 <_lv_obj_get_style_int>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <lv_obj_get_style_pattern_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	70fb      	strb	r3, [r7, #3]
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	2260      	movs	r2, #96	; 0x60
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f002 f856 	bl	8006b16 <_lv_obj_get_style_int>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <lv_obj_get_style_pattern_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	70fb      	strb	r3, [r7, #3]
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	2269      	movs	r2, #105	; 0x69
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f002 f9cd 	bl	8006e28 <_lv_obj_get_style_color>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <lv_obj_get_style_pattern_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	226c      	movs	r2, #108	; 0x6c
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f002 fa27 	bl	8006efe <_lv_obj_get_style_opa>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <lv_obj_get_style_pattern_recolor_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	70fb      	strb	r3, [r7, #3]
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	226d      	movs	r2, #109	; 0x6d
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f002 fa16 	bl	8006efe <_lv_obj_get_style_opa>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <lv_obj_get_style_pattern_image>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	226e      	movs	r2, #110	; 0x6e
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f002 fac2 	bl	8007078 <_lv_obj_get_style_ptr>
 8004af4:	4603      	mov	r3, r0
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <lv_obj_get_style_value_letter_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	460b      	mov	r3, r1
 8004b08:	70fb      	strb	r3, [r7, #3]
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	2270      	movs	r2, #112	; 0x70
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f002 f800 	bl	8006b16 <_lv_obj_get_style_int>
 8004b16:	4603      	mov	r3, r0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <lv_obj_get_style_value_line_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	70fb      	strb	r3, [r7, #3]
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	2271      	movs	r2, #113	; 0x71
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 ffef 	bl	8006b16 <_lv_obj_get_style_int>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <lv_obj_get_style_value_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	70fb      	strb	r3, [r7, #3]
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	2272      	movs	r2, #114	; 0x72
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f001 ffde 	bl	8006b16 <_lv_obj_get_style_int>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <lv_obj_get_style_value_ofs_x>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	70fb      	strb	r3, [r7, #3]
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	2273      	movs	r2, #115	; 0x73
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f001 ffcc 	bl	8006b16 <_lv_obj_get_style_int>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <lv_obj_get_style_value_ofs_y>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	2274      	movs	r2, #116	; 0x74
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f001 ffbb 	bl	8006b16 <_lv_obj_get_style_int>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <lv_obj_get_style_value_align>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	70fb      	strb	r3, [r7, #3]
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	2275      	movs	r2, #117	; 0x75
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f001 ffaa 	bl	8006b16 <_lv_obj_get_style_int>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <lv_obj_get_style_value_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	70fb      	strb	r3, [r7, #3]
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	2279      	movs	r2, #121	; 0x79
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f002 f921 	bl	8006e28 <_lv_obj_get_style_color>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <lv_obj_get_style_value_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70fb      	strb	r3, [r7, #3]
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	227c      	movs	r2, #124	; 0x7c
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f002 f97b 	bl	8006efe <_lv_obj_get_style_opa>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <lv_obj_get_style_value_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	70fb      	strb	r3, [r7, #3]
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	227e      	movs	r2, #126	; 0x7e
 8004c22:	4619      	mov	r1, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f002 fa27 	bl	8007078 <_lv_obj_get_style_ptr>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <lv_obj_get_style_value_str>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	227f      	movs	r2, #127	; 0x7f
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f002 fa16 	bl	8007078 <_lv_obj_get_style_ptr>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <lv_obj_get_style_text_letter_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f248 0280 	movw	r2, #32896	; 0x8080
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f001 ff53 	bl	8006b16 <_lv_obj_get_style_int>
 8004c70:	4603      	mov	r3, r0
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <lv_obj_get_style_text_line_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	70fb      	strb	r3, [r7, #3]
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	f248 0281 	movw	r2, #32897	; 0x8081
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f001 ff41 	bl	8006b16 <_lv_obj_get_style_int>
 8004c94:	4603      	mov	r3, r0
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <lv_obj_get_style_text_decor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	70fb      	strb	r3, [r7, #3]
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	f248 0282 	movw	r2, #32898	; 0x8082
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 ff2f 	bl	8006b16 <_lv_obj_get_style_int>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <lv_obj_get_style_text_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	f248 0283 	movw	r2, #32899	; 0x8083
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f001 ff1c 	bl	8006b16 <_lv_obj_get_style_int>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <lv_obj_get_style_text_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	70fb      	strb	r3, [r7, #3]
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	f248 0289 	movw	r2, #32905	; 0x8089
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f002 f892 	bl	8006e28 <_lv_obj_get_style_color>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <lv_obj_get_style_text_sel_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	70fb      	strb	r3, [r7, #3]
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	f248 028a 	movw	r2, #32906	; 0x808a
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f002 f880 	bl	8006e28 <_lv_obj_get_style_color>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <lv_obj_get_style_text_sel_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	70fb      	strb	r3, [r7, #3]
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	f248 028b 	movw	r2, #32907	; 0x808b
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f002 f86e 	bl	8006e28 <_lv_obj_get_style_color>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <lv_obj_get_style_text_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	70fb      	strb	r3, [r7, #3]
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	f248 028c 	movw	r2, #32908	; 0x808c
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f002 f8c7 	bl	8006efe <_lv_obj_get_style_opa>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <lv_obj_get_style_text_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	460b      	mov	r3, r1
 8004d84:	70fb      	strb	r3, [r7, #3]
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	f248 028e 	movw	r2, #32910	; 0x808e
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f002 f972 	bl	8007078 <_lv_obj_get_style_ptr>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <lv_obj_get_style_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	70fb      	strb	r3, [r7, #3]
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	2290      	movs	r2, #144	; 0x90
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f001 feb0 	bl	8006b16 <_lv_obj_get_style_int>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <lv_obj_get_style_line_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	70fb      	strb	r3, [r7, #3]
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	2291      	movs	r2, #145	; 0x91
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f001 fe9f 	bl	8006b16 <_lv_obj_get_style_int>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <lv_obj_get_style_line_dash_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	2292      	movs	r2, #146	; 0x92
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f001 fe8d 	bl	8006b16 <_lv_obj_get_style_int>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <lv_obj_get_style_line_dash_gap>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	2293      	movs	r2, #147	; 0x93
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f001 fe7c 	bl	8006b16 <_lv_obj_get_style_int>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <lv_obj_get_style_line_rounded>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	2294      	movs	r2, #148	; 0x94
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 fe6b 	bl	8006b16 <_lv_obj_get_style_int>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf14      	ite	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	2300      	moveq	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <lv_obj_get_style_line_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	2299      	movs	r2, #153	; 0x99
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f001 ffde 	bl	8006e28 <_lv_obj_get_style_color>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <lv_obj_get_style_line_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	70fb      	strb	r3, [r7, #3]
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	229c      	movs	r2, #156	; 0x9c
 8004e86:	4619      	mov	r1, r3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f002 f838 	bl	8006efe <_lv_obj_get_style_opa>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <lv_obj_get_style_image_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70fb      	strb	r3, [r7, #3]
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f001 fe32 	bl	8006b16 <_lv_obj_get_style_int>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <lv_obj_get_style_image_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	70fb      	strb	r3, [r7, #3]
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f248 02a9 	movw	r2, #32937	; 0x80a9
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f001 ffa8 	bl	8006e28 <_lv_obj_get_style_color>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <lv_obj_get_style_image_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	f248 02ac 	movw	r2, #32940	; 0x80ac
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f002 f801 	bl	8006efe <_lv_obj_get_style_opa>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <lv_obj_get_style_image_recolor_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	70fb      	strb	r3, [r7, #3]
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f001 ffef 	bl	8006efe <_lv_obj_get_style_opa>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <lv_obj_get_style_transition_time>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	460b      	mov	r3, r1
 8004f34:	70fb      	strb	r3, [r7, #3]
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	22b0      	movs	r2, #176	; 0xb0
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f001 fdea 	bl	8006b16 <_lv_obj_get_style_int>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <lv_obj_get_style_transition_delay>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	22b1      	movs	r2, #177	; 0xb1
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f001 fdd9 	bl	8006b16 <_lv_obj_get_style_int>
 8004f64:	4603      	mov	r3, r0
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <lv_obj_get_style_transition_prop_1>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	70fb      	strb	r3, [r7, #3]
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	22b2      	movs	r2, #178	; 0xb2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f001 fdc8 	bl	8006b16 <_lv_obj_get_style_int>
 8004f86:	4603      	mov	r3, r0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <lv_obj_get_style_transition_prop_2>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	70fb      	strb	r3, [r7, #3]
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	22b3      	movs	r2, #179	; 0xb3
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f001 fdb7 	bl	8006b16 <_lv_obj_get_style_int>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <lv_obj_get_style_transition_prop_3>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	70fb      	strb	r3, [r7, #3]
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	22b4      	movs	r2, #180	; 0xb4
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 fda6 	bl	8006b16 <_lv_obj_get_style_int>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <lv_obj_get_style_transition_prop_4>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	70fb      	strb	r3, [r7, #3]
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	22b5      	movs	r2, #181	; 0xb5
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f001 fd95 	bl	8006b16 <_lv_obj_get_style_int>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <lv_obj_get_style_transition_prop_5>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	70fb      	strb	r3, [r7, #3]
 8005002:	78fb      	ldrb	r3, [r7, #3]
 8005004:	22b6      	movs	r2, #182	; 0xb6
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 fd84 	bl	8006b16 <_lv_obj_get_style_int>
 800500e:	4603      	mov	r3, r0
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <lv_obj_get_style_transition_prop_6>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	22b7      	movs	r2, #183	; 0xb7
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f001 fd73 	bl	8006b16 <_lv_obj_get_style_int>
 8005030:	4603      	mov	r3, r0
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <lv_obj_get_style_transition_path>:
#if LV_USE_ANIMATION
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	70fb      	strb	r3, [r7, #3]
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	22be      	movs	r2, #190	; 0xbe
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f002 f813 	bl	8007078 <_lv_obj_get_style_ptr>
 8005052:	4603      	mov	r3, r0
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <lv_obj_get_style_scale_width>:
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	22c0      	movs	r2, #192	; 0xc0
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 fd51 	bl	8006b16 <_lv_obj_get_style_int>
 8005074:	4603      	mov	r3, r0
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <lv_obj_get_style_scale_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	70fb      	strb	r3, [r7, #3]
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	22c1      	movs	r2, #193	; 0xc1
 800508e:	4619      	mov	r1, r3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fd40 	bl	8006b16 <_lv_obj_get_style_int>
 8005096:	4603      	mov	r3, r0
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <lv_obj_get_style_scale_end_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	22c2      	movs	r2, #194	; 0xc2
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f001 fd2f 	bl	8006b16 <_lv_obj_get_style_int>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <lv_obj_get_style_scale_end_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	460b      	mov	r3, r1
 80050cc:	70fb      	strb	r3, [r7, #3]
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	22c3      	movs	r2, #195	; 0xc3
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 fd1e 	bl	8006b16 <_lv_obj_get_style_int>
 80050da:	4603      	mov	r3, r0
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <lv_obj_get_style_scale_grad_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	22c9      	movs	r2, #201	; 0xc9
 80050f4:	4619      	mov	r1, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f001 fe96 	bl	8006e28 <_lv_obj_get_style_color>
 80050fc:	4603      	mov	r3, r0
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <lv_obj_get_style_scale_end_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	70fb      	strb	r3, [r7, #3]
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	22ca      	movs	r2, #202	; 0xca
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f001 fe85 	bl	8006e28 <_lv_obj_get_style_color>
 800511e:	4603      	mov	r3, r0
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af04      	add	r7, sp, #16
    /* Do nothing if already initialized */
    if(lv_initialized) {
 800512e:	4b27      	ldr	r3, [pc, #156]	; (80051cc <lv_init+0xa4>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d146      	bne.n	80051c4 <lv_init+0x9c>
    }

    LV_LOG_TRACE("lv_init started");

    /*Initialize the lv_misc modules*/
    _lv_mem_init();
 8005136:	f017 fa89 	bl	801c64c <_lv_mem_init>
    _lv_task_core_init();
 800513a:	f018 f9b7 	bl	801d4ac <_lv_task_core_init>

#if LV_USE_FILESYSTEM
    _lv_fs_init();
 800513e:	f016 fdb9 	bl	801bcb4 <_lv_fs_init>
#endif

#if LV_USE_ANIMATION
    _lv_anim_core_init();
 8005142:	f015 fbaf 	bl	801a8a4 <_lv_anim_core_init>
#endif

#if LV_USE_GROUP
    _lv_group_init();
 8005146:	f7fc fb7d 	bl	8001844 <_lv_group_init>
        LV_LOG_ERROR("PXP init error. STOP.\n");
        for(; ;) ;
    }
#endif

    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
 800514a:	2110      	movs	r1, #16
 800514c:	4820      	ldr	r0, [pc, #128]	; (80051d0 <lv_init+0xa8>)
 800514e:	f016 ff51 	bl	801bff4 <_lv_ll_init>

    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8005152:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005156:	481f      	ldr	r0, [pc, #124]	; (80051d4 <lv_init+0xac>)
 8005158:	f016 ff4c 	bl	801bff4 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 800515c:	2160      	movs	r1, #96	; 0x60
 800515e:	481e      	ldr	r0, [pc, #120]	; (80051d8 <lv_init+0xb0>)
 8005160:	f016 ff48 	bl	801bff4 <_lv_ll_init>

    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
 8005164:	481d      	ldr	r0, [pc, #116]	; (80051dc <lv_init+0xb4>)
 8005166:	f7ff f8bb 	bl	80042e0 <lv_color_hex>
 800516a:	4604      	mov	r4, r0
 800516c:	481c      	ldr	r0, [pc, #112]	; (80051e0 <lv_init+0xb8>)
 800516e:	f7ff f8b7 	bl	80042e0 <lv_color_hex>
 8005172:	4601      	mov	r1, r0
 8005174:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <lv_init+0xbc>)
 8005176:	9302      	str	r3, [sp, #8]
 8005178:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <lv_init+0xbc>)
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	4b19      	ldr	r3, [pc, #100]	; (80051e4 <lv_init+0xbc>)
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <lv_init+0xbc>)
 8005182:	2202      	movs	r2, #2
 8005184:	4620      	mov	r0, r4
 8005186:	f01f fc0f 	bl	80249a8 <lv_theme_material_init>
 800518a:	60f8      	str	r0, [r7, #12]
                                            LV_THEME_DEFAULT_FLAG,
                                            LV_THEME_DEFAULT_FONT_SMALL, LV_THEME_DEFAULT_FONT_NORMAL, LV_THEME_DEFAULT_FONT_SUBTITLE, LV_THEME_DEFAULT_FONT_TITLE);
    lv_theme_set_act(th);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f019 f8fb 	bl	801e388 <lv_theme_set_act>

    /*Initialize the screen refresh system*/
    _lv_refr_init();
 8005192:	f005 f80e 	bl	800a1b2 <_lv_refr_init>

    /*Init the input device handling*/
    _lv_indev_init();
 8005196:	f7fc fe4b 	bl	8001e30 <_lv_indev_init>

    _lv_img_decoder_init();
 800519a:	f013 f8c5 	bl	8018328 <_lv_img_decoder_init>
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 800519e:	2001      	movs	r0, #1
 80051a0:	f012 ffc4 	bl	801812c <lv_img_cache_set_size>
#endif
    /*Test if the IDE has UTF-8 encoding*/
    char * txt = "Á";
 80051a4:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <lv_init+0xc0>)
 80051a6:	60bb      	str	r3, [r7, #8]

    uint8_t * txt_u8 = (uint8_t *) txt;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	607b      	str	r3, [r7, #4]
    if(txt_u8[0] != 0xc3 || txt_u8[1] != 0x81 || txt_u8[2] != 0x00) {
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2bc3      	cmp	r3, #195	; 0xc3
 80051b2:	d103      	bne.n	80051bc <lv_init+0x94>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3301      	adds	r3, #1
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b81      	cmp	r3, #129	; 0x81
        LV_LOG_WARN("The strings has no UTF-8 encoding. Some characters won't be displayed.")
    }

    lv_initialized = true;
 80051bc:	4b03      	ldr	r3, [pc, #12]	; (80051cc <lv_init+0xa4>)
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e000      	b.n	80051c6 <lv_init+0x9e>
        return;
 80051c4:	bf00      	nop
    LV_LOG_INFO("lv_init ready");
}
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd90      	pop	{r4, r7, pc}
 80051cc:	200177a4 	.word	0x200177a4
 80051d0:	20021844 	.word	0x20021844
 80051d4:	200217a0 	.word	0x200217a0
 80051d8:	20021794 	.word	0x20021794
 80051dc:	0001a2b1 	.word	0x0001a2b1
 80051e0:	0044d1b6 	.word	0x0044d1b6
 80051e4:	20000020 	.word	0x20000020
 80051e8:	0802d0a4 	.word	0x0802d0a4

080051ec <lv_obj_create>:
 *                  If NULL then a screen will be created
 * @param copy pointer to a base object, if not NULL then the new object will be copied from it
 * @return pointer to the new object
 */
lv_obj_t * lv_obj_create(lv_obj_t * parent, const lv_obj_t * copy)
{
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
    lv_obj_t * new_obj = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]

    /*Create a screen*/
    if(parent == NULL) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d153      	bne.n	80052a8 <lv_obj_create+0xbc>
        LV_LOG_TRACE("Screen create started");
        lv_disp_t * disp = lv_disp_get_default();
 8005200:	f015 f8ba 	bl	801a378 <lv_disp_get_default>
 8005204:	60b8      	str	r0, [r7, #8]
        if(!disp) {
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <lv_obj_create+0x24>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
            return NULL;
 800520c:	2300      	movs	r3, #0
 800520e:	e2e3      	b.n	80057d8 <lv_obj_create+0x5ec>
        }

        new_obj = _lv_ll_ins_head(&disp->scr_ll);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	3338      	adds	r3, #56	; 0x38
 8005214:	4618      	mov	r0, r3
 8005216:	f016 ff06 	bl	801c026 <_lv_ll_ins_head>
 800521a:	60f8      	str	r0, [r7, #12]
        LV_ASSERT_MEM(new_obj);
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f016 fca9 	bl	801bb74 <lv_debug_check_null>
 8005222:	4603      	mov	r3, r0
 8005224:	f083 0301 	eor.w	r3, r3, #1
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <lv_obj_create+0x54>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f04f 0400 	mov.w	r4, #0
 8005234:	461a      	mov	r2, r3
 8005236:	4623      	mov	r3, r4
 8005238:	4881      	ldr	r0, [pc, #516]	; (8005440 <lv_obj_create+0x254>)
 800523a:	f016 fcab 	bl	801bb94 <lv_debug_log_error>
 800523e:	e7fe      	b.n	800523e <lv_obj_create+0x52>
        if(new_obj == NULL) return NULL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <lv_obj_create+0x5e>
 8005246:	2300      	movs	r3, #0
 8005248:	e2c6      	b.n	80057d8 <lv_obj_create+0x5ec>

        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 800524a:	214c      	movs	r1, #76	; 0x4c
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f017 ff88 	bl	801d162 <_lv_memset_00>

#if LV_USE_BIDI
        new_obj->base_dir     = LV_BIDI_BASE_DIR_DEF;
#else
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8005258:	f36f 1346 	bfc	r3, #5, #2
 800525c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
#endif

        /*Set the callbacks*/
        new_obj->signal_cb = lv_obj_signal;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a78      	ldr	r2, [pc, #480]	; (8005444 <lv_obj_create+0x258>)
 8005264:	61da      	str	r2, [r3, #28]
        new_obj->design_cb = lv_obj_design;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4a77      	ldr	r2, [pc, #476]	; (8005448 <lv_obj_create+0x25c>)
 800526a:	621a      	str	r2, [r3, #32]
        new_obj->event_cb = NULL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	619a      	str	r2, [r3, #24]

        /*Set coordinates to full screen size*/
        new_obj->coords.x1    = 0;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = 0;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 800527e:	2000      	movs	r0, #0
 8005280:	f015 f886 	bl	801a390 <lv_disp_get_hor_res>
 8005284:	4603      	mov	r3, r0
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29b      	uxth	r3, r3
 800528c:	b21a      	sxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8005292:	2000      	movs	r0, #0
 8005294:	f015 f89e 	bl	801a3d4 <lv_disp_get_ver_res>
 8005298:	4603      	mov	r3, r0
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29b      	uxth	r3, r3
 80052a0:	b21a      	sxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	82da      	strh	r2, [r3, #22]
 80052a6:	e0db      	b.n	8005460 <lv_obj_create+0x274>
    }
    /*Create a normal object*/
    else {
        LV_LOG_TRACE("Object create started");
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f016 fc63 	bl	801bb74 <lv_debug_check_null>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f083 0301 	eor.w	r3, r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d008      	beq.n	80052cc <lv_obj_create+0xe0>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f04f 0400 	mov.w	r4, #0
 80052c0:	461a      	mov	r2, r3
 80052c2:	4623      	mov	r3, r4
 80052c4:	4861      	ldr	r0, [pc, #388]	; (800544c <lv_obj_create+0x260>)
 80052c6:	f016 fc65 	bl	801bb94 <lv_debug_log_error>
 80052ca:	e7fe      	b.n	80052ca <lv_obj_create+0xde>

        new_obj = _lv_ll_ins_head(&parent->child_ll);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4618      	mov	r0, r3
 80052d2:	f016 fea8 	bl	801c026 <_lv_ll_ins_head>
 80052d6:	60f8      	str	r0, [r7, #12]
        LV_ASSERT_MEM(new_obj);
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f016 fc4b 	bl	801bb74 <lv_debug_check_null>
 80052de:	4603      	mov	r3, r0
 80052e0:	f083 0301 	eor.w	r3, r3, #1
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <lv_obj_create+0x110>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f04f 0400 	mov.w	r4, #0
 80052f0:	461a      	mov	r2, r3
 80052f2:	4623      	mov	r3, r4
 80052f4:	4852      	ldr	r0, [pc, #328]	; (8005440 <lv_obj_create+0x254>)
 80052f6:	f016 fc4d 	bl	801bb94 <lv_debug_log_error>
 80052fa:	e7fe      	b.n	80052fa <lv_obj_create+0x10e>
        if(new_obj == NULL) return NULL;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <lv_obj_create+0x11a>
 8005302:	2300      	movs	r3, #0
 8005304:	e268      	b.n	80057d8 <lv_obj_create+0x5ec>

        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8005306:	214c      	movs	r1, #76	; 0x4c
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f017 ff2a 	bl	801d162 <_lv_memset_00>

        new_obj->parent = parent;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]

#if LV_USE_BIDI
        new_obj->base_dir     = LV_BIDI_DIR_INHERIT;
#else
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800531a:	f36f 1346 	bfc	r3, #5, #2
 800531e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
#endif

        /*Set the callbacks (signal:cb is required in `lv_obj_get_base_dir` if `LV_USE_ASSERT_OBJ` is enabled)*/
        new_obj->signal_cb = lv_obj_signal;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a47      	ldr	r2, [pc, #284]	; (8005444 <lv_obj_create+0x258>)
 8005326:	61da      	str	r2, [r3, #28]
        new_obj->design_cb = lv_obj_design;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a47      	ldr	r2, [pc, #284]	; (8005448 <lv_obj_create+0x25c>)
 800532c:	621a      	str	r2, [r3, #32]
        new_obj->event_cb = NULL;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	619a      	str	r2, [r3, #24]

        new_obj->coords.y1    = parent->coords.y1;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	825a      	strh	r2, [r3, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005344:	b29c      	uxth	r4, r3
 8005346:	2000      	movs	r0, #0
 8005348:	f015 f866 	bl	801a418 <lv_disp_get_dpi>
 800534c:	4603      	mov	r3, r0
 800534e:	461a      	mov	r2, r3
 8005350:	2332      	movs	r3, #50	; 0x32
 8005352:	fb03 f302 	mul.w	r3, r3, r2
 8005356:	3350      	adds	r3, #80	; 0x50
 8005358:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800535c:	db10      	blt.n	8005380 <lv_obj_create+0x194>
 800535e:	2000      	movs	r0, #0
 8005360:	f015 f85a 	bl	801a418 <lv_disp_get_dpi>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	2332      	movs	r3, #50	; 0x32
 800536a:	fb03 f302 	mul.w	r3, r3, r2
 800536e:	3350      	adds	r3, #80	; 0x50
 8005370:	4a37      	ldr	r2, [pc, #220]	; (8005450 <lv_obj_create+0x264>)
 8005372:	fb82 1203 	smull	r1, r2, r2, r3
 8005376:	1192      	asrs	r2, r2, #6
 8005378:	17db      	asrs	r3, r3, #31
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	b29b      	uxth	r3, r3
 800537e:	e000      	b.n	8005382 <lv_obj_create+0x196>
 8005380:	2301      	movs	r3, #1
 8005382:	4423      	add	r3, r4
 8005384:	b29b      	uxth	r3, r3
 8005386:	b21a      	sxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	82da      	strh	r2, [r3, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f002 f82d 	bl	80073ec <lv_obj_get_base_dir>
 8005392:	4603      	mov	r3, r0
 8005394:	2b01      	cmp	r3, #1
 8005396:	d12c      	bne.n	80053f2 <lv_obj_create+0x206>
            new_obj->coords.x2    = parent->coords.x2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	829a      	strh	r2, [r3, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80053a8:	b29c      	uxth	r4, r3
 80053aa:	2000      	movs	r0, #0
 80053ac:	f015 f834 	bl	801a418 <lv_disp_get_dpi>
 80053b0:	4603      	mov	r3, r0
 80053b2:	461a      	mov	r2, r3
 80053b4:	2364      	movs	r3, #100	; 0x64
 80053b6:	fb03 f302 	mul.w	r3, r3, r2
 80053ba:	3350      	adds	r3, #80	; 0x50
 80053bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80053c0:	db10      	blt.n	80053e4 <lv_obj_create+0x1f8>
 80053c2:	2000      	movs	r0, #0
 80053c4:	f015 f828 	bl	801a418 <lv_disp_get_dpi>
 80053c8:	4603      	mov	r3, r0
 80053ca:	461a      	mov	r2, r3
 80053cc:	2364      	movs	r3, #100	; 0x64
 80053ce:	fb03 f302 	mul.w	r3, r3, r2
 80053d2:	3350      	adds	r3, #80	; 0x50
 80053d4:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <lv_obj_create+0x264>)
 80053d6:	fb82 1203 	smull	r1, r2, r2, r3
 80053da:	1192      	asrs	r2, r2, #6
 80053dc:	17db      	asrs	r3, r3, #31
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	e000      	b.n	80053e6 <lv_obj_create+0x1fa>
 80053e4:	2301      	movs	r3, #1
 80053e6:	1ae3      	subs	r3, r4, r3
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	b21a      	sxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	821a      	strh	r2, [r3, #16]
 80053f0:	e036      	b.n	8005460 <lv_obj_create+0x274>
        }
        else {
            new_obj->coords.x1    = parent->coords.x1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	821a      	strh	r2, [r3, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005402:	b29c      	uxth	r4, r3
 8005404:	2000      	movs	r0, #0
 8005406:	f015 f807 	bl	801a418 <lv_disp_get_dpi>
 800540a:	4603      	mov	r3, r0
 800540c:	461a      	mov	r2, r3
 800540e:	2364      	movs	r3, #100	; 0x64
 8005410:	fb03 f302 	mul.w	r3, r3, r2
 8005414:	3350      	adds	r3, #80	; 0x50
 8005416:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800541a:	db1b      	blt.n	8005454 <lv_obj_create+0x268>
 800541c:	2000      	movs	r0, #0
 800541e:	f014 fffb 	bl	801a418 <lv_disp_get_dpi>
 8005422:	4603      	mov	r3, r0
 8005424:	461a      	mov	r2, r3
 8005426:	2364      	movs	r3, #100	; 0x64
 8005428:	fb03 f302 	mul.w	r3, r3, r2
 800542c:	3350      	adds	r3, #80	; 0x50
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <lv_obj_create+0x264>)
 8005430:	fb82 1203 	smull	r1, r2, r2, r3
 8005434:	1192      	asrs	r2, r2, #6
 8005436:	17db      	asrs	r3, r3, #31
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	b29b      	uxth	r3, r3
 800543c:	e00b      	b.n	8005456 <lv_obj_create+0x26a>
 800543e:	bf00      	nop
 8005440:	0802d0a8 	.word	0x0802d0a8
 8005444:	08008555 	.word	0x08008555
 8005448:	08008165 	.word	0x08008165
 800544c:	0802d0b8 	.word	0x0802d0b8
 8005450:	66666667 	.word	0x66666667
 8005454:	2301      	movs	r3, #1
 8005456:	4423      	add	r3, r4
 8005458:	b29b      	uxth	r3, r3
 800545a:	b21a      	sxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	829a      	strh	r2, [r3, #20]
        }
    }

    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3304      	adds	r3, #4
 8005464:	214c      	movs	r1, #76	; 0x4c
 8005466:	4618      	mov	r0, r3
 8005468:	f016 fdc4 	bl	801bff4 <_lv_ll_init>

    new_obj->ext_draw_pad = 0;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	865a      	strh	r2, [r3, #50]	; 0x32

#if LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_FULL
    _lv_memset_00(&new_obj->ext_click_pad, sizeof(new_obj->ext_click_pad));
#elif LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_TINY
    new_obj->ext_click_pad_hor = 0;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif

    /*Init realign*/
#if LV_USE_OBJ_REALIGN
    new_obj->realign.align        = LV_ALIGN_CENTER;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    new_obj->realign.xofs         = 0;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    new_obj->realign.yofs         = 0;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    new_obj->realign.base         = NULL;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	641a      	str	r2, [r3, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 80054a6:	f36f 0300 	bfc	r3, #0, #1
 80054aa:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#if LV_USE_USER_DATA
    _lv_memset_00(&new_obj->user_data, sizeof(lv_obj_user_data_t));
#endif

#if LV_USE_GROUP
    new_obj->group_p = NULL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
#endif

    /*Set attributes*/
    new_obj->adv_hittest  = 0;
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80054ba:	f36f 13c7 	bfc	r3, #7, #1
 80054be:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->click        = 1;
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag         = 0;
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80054d6:	f36f 0341 	bfc	r3, #1, #1
 80054da:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag_throw   = 0;
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80054e4:	f36f 0382 	bfc	r3, #2, #1
 80054e8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag_parent  = 0;
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80054f2:	f36f 03c3 	bfc	r3, #3, #1
 80054f6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8005500:	2103      	movs	r1, #3
 8005502:	f361 0384 	bfi	r3, r1, #2, #3
 8005506:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    new_obj->hidden       = 0;
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005510:	f36f 1304 	bfc	r3, #4, #1
 8005514:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->top          = 0;
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800551e:	f36f 1345 	bfc	r3, #5, #1
 8005522:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->protect      = LV_PROTECT_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    new_obj->parent_event = 0;
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005534:	f36f 1386 	bfc	r3, #6, #1
 8005538:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf14      	ite	ne
 8005542:	2301      	movne	r3, #1
 8005544:	2300      	moveq	r3, #0
 8005546:	b2d9      	uxtb	r1, r3
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800554e:	f361 0300 	bfi	r3, r1, #0, #1
 8005552:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    new_obj->focus_parent  = 0;
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800555c:	f36f 0341 	bfc	r3, #1, #1
 8005560:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    new_obj->ext_attr = NULL;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	625a      	str	r2, [r3, #36]	; 0x24

    lv_style_list_init(&new_obj->style_list);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3328      	adds	r3, #40	; 0x28
 8005576:	4618      	mov	r0, r3
 8005578:	f005 fe1f 	bl	800b1ba <lv_style_list_init>
    if(copy == NULL) {
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10c      	bne.n	800559c <lv_obj_create+0x3b0>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <lv_obj_create+0x3a6>
 8005588:	2102      	movs	r1, #2
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f018 ff0c 	bl	801e3a8 <lv_theme_apply>
 8005590:	e00d      	b.n	80055ae <lv_obj_create+0x3c2>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
 8005592:	2101      	movs	r1, #1
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f018 ff07 	bl	801e3a8 <lv_theme_apply>
 800559a:	e008      	b.n	80055ae <lv_obj_create+0x3c2>
    }
    else {
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	3328      	adds	r3, #40	; 0x28
 80055a6:	4619      	mov	r1, r3
 80055a8:	4610      	mov	r0, r2
 80055aa:	f005 fe12 	bl	800b1d2 <lv_style_list_copy>
    }
    /*Copy the attributes if required*/
    if(copy != NULL) {
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8104 	beq.w	80057be <lv_obj_create+0x5d2>
        lv_area_copy(&new_obj->coords, &copy->coords);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f103 0210 	add.w	r2, r3, #16
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	3310      	adds	r3, #16
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7fe fde2 	bl	800418c <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	865a      	strh	r2, [r3, #50]	; 0x32

#if LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_FULL
        lv_area_copy(&new_obj->ext_click_pad, &copy->ext_click_pad);
#elif LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_TINY
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        /*Set user data*/
#if LV_USE_USER_DATA
        _lv_memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
#endif

        new_obj->base_dir = copy->base_dir;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055f0:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80055f4:	b2d9      	uxtb	r1, r3
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80055fc:	f361 1346 	bfi	r3, r1, #5, #2
 8005600:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35

        /*Copy realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = copy->realign.align;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	641a      	str	r2, [r3, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005636:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800563a:	b2d9      	uxtb	r1, r3
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 8005642:	f361 0300 	bfi	r3, r1, #0, #1
 8005646:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#endif

        /*Only copy the `event_cb`. `signal_cb` and `design_cb` will be copied in the derived
         * object type (e.g. `lv_btn`)*/
        new_obj->event_cb = copy->event_cb;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	619a      	str	r2, [r3, #24]

        /*Copy attributes*/
        new_obj->adv_hittest  = copy->adv_hittest;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005658:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800565c:	b2d9      	uxtb	r1, r3
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005664:	f361 13c7 	bfi	r3, r1, #7, #1
 8005668:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->click        = copy->click;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005672:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005676:	b2d9      	uxtb	r1, r3
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800567e:	f361 0300 	bfi	r3, r1, #0, #1
 8005682:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->drag         = copy->drag;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800568c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005690:	b2d9      	uxtb	r1, r3
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005698:	f361 0341 	bfi	r3, r1, #1, #1
 800569c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056a6:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80056aa:	b2d9      	uxtb	r1, r3
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80056b2:	f361 0384 	bfi	r3, r1, #2, #3
 80056b6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056c4:	b2d9      	uxtb	r1, r3
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80056cc:	f361 0382 	bfi	r3, r1, #2, #1
 80056d0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80056de:	b2d9      	uxtb	r1, r3
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80056e6:	f361 03c3 	bfi	r3, r1, #3, #1
 80056ea:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056f8:	b2d9      	uxtb	r1, r3
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005700:	f361 1304 	bfi	r3, r1, #4, #1
 8005704:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->top          = copy->top;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800570e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005712:	b2d9      	uxtb	r1, r3
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800571a:	f361 1345 	bfi	r3, r1, #5, #1
 800571e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005728:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800572c:	b2d9      	uxtb	r1, r3
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005734:	f361 1386 	bfi	r3, r1, #6, #1
 8005738:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

        new_obj->protect      = copy->protect;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800574e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005752:	b2d9      	uxtb	r1, r3
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800575a:	f361 0300 	bfi	r3, r1, #0, #1
 800575e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005768:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800576c:	b2d9      	uxtb	r1, r3
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8005774:	f361 0341 	bfi	r3, r1, #1, #1
 8005778:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35

#if LV_USE_GROUP
        /*Add to the same group*/
        if(copy->group_p != NULL) {
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <lv_obj_create+0x5a4>
            lv_group_add_obj(copy->group_p, new_obj);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	68f9      	ldr	r1, [r7, #12]
 800578a:	4618      	mov	r0, r3
 800578c:	f7fc f864 	bl	8001858 <lv_group_add_obj>
        }
#endif

        /*Set the same coordinates for non screen objects*/
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8005790:	6838      	ldr	r0, [r7, #0]
 8005792:	f001 f87d 	bl	8006890 <lv_obj_get_parent>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d010      	beq.n	80057be <lv_obj_create+0x5d2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <lv_obj_create+0x5d2>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 80057a2:	6838      	ldr	r0, [r7, #0]
 80057a4:	f001 f8e8 	bl	8006978 <lv_obj_get_x>
 80057a8:	4603      	mov	r3, r0
 80057aa:	461c      	mov	r4, r3
 80057ac:	6838      	ldr	r0, [r7, #0]
 80057ae:	f001 f917 	bl	80069e0 <lv_obj_get_y>
 80057b2:	4603      	mov	r3, r0
 80057b4:	461a      	mov	r2, r3
 80057b6:	4621      	mov	r1, r4
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f96d 	bl	8005a98 <lv_obj_set_pos>
        }
    }

    /*Send a signal to the parent to notify it about the new child*/
    if(parent != NULL) {
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <lv_obj_create+0x5ea>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	2101      	movs	r1, #1
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(new_obj);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f83d 	bl	8005850 <lv_obj_invalidate>
    }

    LV_LOG_INFO("Object create ready");

    return new_obj;
 80057d6:	68fb      	ldr	r3, [r7, #12]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd90      	pop	{r4, r7, pc}

080057e0 <lv_obj_invalidate_area>:
 * This area will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 * @param area the area to redraw
 */
void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
{
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f016 f9c2 	bl	801bb74 <lv_debug_check_null>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f083 0301 	eor.w	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <lv_obj_invalidate_area+0x2e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f04f 0400 	mov.w	r4, #0
 8005802:	461a      	mov	r2, r3
 8005804:	4623      	mov	r3, r4
 8005806:	4811      	ldr	r0, [pc, #68]	; (800584c <lv_obj_invalidate_area+0x6c>)
 8005808:	f016 f9c4 	bl	801bb94 <lv_debug_log_error>
 800580c:	e7fe      	b.n	800580c <lv_obj_invalidate_area+0x2c>

    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, area);
 800580e:	f107 030c 	add.w	r3, r7, #12
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f7fe fcb9 	bl	800418c <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 800581a:	f107 030c 	add.w	r3, r7, #12
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f863 	bl	80058ec <lv_obj_area_is_visible>
 8005826:	4603      	mov	r3, r0
 8005828:	75fb      	strb	r3, [r7, #23]

    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 800582a:	7dfb      	ldrb	r3, [r7, #23]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <lv_obj_invalidate_area+0x64>
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 ffdf 	bl	80067f4 <lv_obj_get_disp>
 8005836:	4602      	mov	r2, r0
 8005838:	f107 030c 	add.w	r3, r7, #12
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f004 fcbe 	bl	800a1c0 <_lv_inv_area>
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	bd90      	pop	{r4, r7, pc}
 800584c:	0802d0b8 	.word	0x0802d0b8

08005850 <lv_obj_invalidate>:
/**
 * Mark the object as invalid therefore its current position will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 */
void lv_obj_invalidate(const lv_obj_t * obj)
{
 8005850:	b590      	push	{r4, r7, lr}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f016 f98b 	bl	801bb74 <lv_debug_check_null>
 800585e:	4603      	mov	r3, r0
 8005860:	f083 0301 	eor.w	r3, r3, #1
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <lv_obj_invalidate+0x2c>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	461a      	mov	r2, r3
 8005872:	4623      	mov	r3, r4
 8005874:	481c      	ldr	r0, [pc, #112]	; (80058e8 <lv_obj_invalidate+0x98>)
 8005876:	f016 f98d 	bl	801bb94 <lv_debug_log_error>
 800587a:	e7fe      	b.n	800587a <lv_obj_invalidate+0x2a>

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    lv_coord_t ext_size = obj->ext_draw_pad;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005880:	82fb      	strh	r3, [r7, #22]
    lv_area_copy(&obj_coords, &obj->coords);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f103 0210 	add.w	r2, r3, #16
 8005888:	f107 030c 	add.w	r3, r7, #12
 800588c:	4611      	mov	r1, r2
 800588e:	4618      	mov	r0, r3
 8005890:	f7fe fc7c 	bl	800418c <lv_area_copy>
    obj_coords.x1 -= ext_size;
 8005894:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005898:	b29a      	uxth	r2, r3
 800589a:	8afb      	ldrh	r3, [r7, #22]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	b29b      	uxth	r3, r3
 80058a0:	b21b      	sxth	r3, r3
 80058a2:	81bb      	strh	r3, [r7, #12]
    obj_coords.y1 -= ext_size;
 80058a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	8afb      	ldrh	r3, [r7, #22]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	b21b      	sxth	r3, r3
 80058b2:	81fb      	strh	r3, [r7, #14]
    obj_coords.x2 += ext_size;
 80058b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	8afb      	ldrh	r3, [r7, #22]
 80058bc:	4413      	add	r3, r2
 80058be:	b29b      	uxth	r3, r3
 80058c0:	b21b      	sxth	r3, r3
 80058c2:	823b      	strh	r3, [r7, #16]
    obj_coords.y2 += ext_size;
 80058c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	8afb      	ldrh	r3, [r7, #22]
 80058cc:	4413      	add	r3, r2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	b21b      	sxth	r3, r3
 80058d2:	827b      	strh	r3, [r7, #18]

    lv_obj_invalidate_area(obj, &obj_coords);
 80058d4:	f107 030c 	add.w	r3, r7, #12
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff ff80 	bl	80057e0 <lv_obj_invalidate_area>

}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}
 80058e8:	0802d0b8 	.word	0x0802d0b8

080058ec <lv_obj_area_is_visible>:
 * @param obj pointer to an object
 * @param area the are to check. The visible part of the area will be written back here.
 * @return true: visible; false: not visible (hidden, out of parent, on other screen, etc)
 */
bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
    if(lv_obj_get_hidden(obj)) return false;
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f001 fc76 	bl	80071e8 <lv_obj_get_hidden>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <lv_obj_area_is_visible+0x1a>
 8005902:	2300      	movs	r3, #0
 8005904:	e086      	b.n	8005a14 <lv_obj_area_is_visible+0x128>

    /*Invalidate the object only if it belongs to the current or previous'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 ff4c 	bl	80067a4 <lv_obj_get_screen>
 800590c:	61b8      	str	r0, [r7, #24]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800590e:	69b8      	ldr	r0, [r7, #24]
 8005910:	f000 ff70 	bl	80067f4 <lv_obj_get_disp>
 8005914:	6178      	str	r0, [r7, #20]
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f7fb ff3f 	bl	800179a <lv_disp_get_scr_act>
 800591c:	4602      	mov	r2, r0
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	4293      	cmp	r3, r2
 8005922:	d014      	beq.n	800594e <lv_obj_area_is_visible+0x62>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 8005924:	6978      	ldr	r0, [r7, #20]
 8005926:	f7fb ff4d 	bl	80017c4 <lv_disp_get_scr_prev>
 800592a:	4602      	mov	r2, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	4293      	cmp	r3, r2
 8005930:	d00d      	beq.n	800594e <lv_obj_area_is_visible+0x62>
       obj_scr == lv_disp_get_layer_top(disp) ||
 8005932:	6978      	ldr	r0, [r7, #20]
 8005934:	f7fb ff5b 	bl	80017ee <lv_disp_get_layer_top>
 8005938:	4602      	mov	r2, r0
       obj_scr == lv_disp_get_scr_prev(disp) ||
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	4293      	cmp	r3, r2
 800593e:	d006      	beq.n	800594e <lv_obj_area_is_visible+0x62>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8005940:	6978      	ldr	r0, [r7, #20]
 8005942:	f7fb ff69 	bl	8001818 <lv_disp_get_layer_sys>
 8005946:	4602      	mov	r2, r0
       obj_scr == lv_disp_get_layer_top(disp) ||
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	4293      	cmp	r3, r2
 800594c:	d161      	bne.n	8005a12 <lv_obj_area_is_visible+0x126>

        /*Truncate the area to the object*/
        lv_area_t obj_coords;
        lv_coord_t ext_size = obj->ext_draw_pad;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005952:	827b      	strh	r3, [r7, #18]
        lv_area_copy(&obj_coords, &obj->coords);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f103 0210 	add.w	r2, r3, #16
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	4611      	mov	r1, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fc13 	bl	800418c <lv_area_copy>
        obj_coords.x1 -= ext_size;
 8005966:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800596a:	b29a      	uxth	r2, r3
 800596c:	8a7b      	ldrh	r3, [r7, #18]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	b29b      	uxth	r3, r3
 8005972:	b21b      	sxth	r3, r3
 8005974:	813b      	strh	r3, [r7, #8]
        obj_coords.y1 -= ext_size;
 8005976:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800597a:	b29a      	uxth	r2, r3
 800597c:	8a7b      	ldrh	r3, [r7, #18]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	b29b      	uxth	r3, r3
 8005982:	b21b      	sxth	r3, r3
 8005984:	817b      	strh	r3, [r7, #10]
        obj_coords.x2 += ext_size;
 8005986:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800598a:	b29a      	uxth	r2, r3
 800598c:	8a7b      	ldrh	r3, [r7, #18]
 800598e:	4413      	add	r3, r2
 8005990:	b29b      	uxth	r3, r3
 8005992:	b21b      	sxth	r3, r3
 8005994:	81bb      	strh	r3, [r7, #12]
        obj_coords.y2 += ext_size;
 8005996:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800599a:	b29a      	uxth	r2, r3
 800599c:	8a7b      	ldrh	r3, [r7, #18]
 800599e:	4413      	add	r3, r2
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	b21b      	sxth	r3, r3
 80059a4:	81fb      	strh	r3, [r7, #14]

        bool is_common;

        is_common = _lv_area_intersect(area, area, &obj_coords);
 80059a6:	f107 0308 	add.w	r3, r7, #8
 80059aa:	461a      	mov	r2, r3
 80059ac:	6839      	ldr	r1, [r7, #0]
 80059ae:	6838      	ldr	r0, [r7, #0]
 80059b0:	f015 fa86 	bl	801aec0 <_lv_area_intersect>
 80059b4:	4603      	mov	r3, r0
 80059b6:	747b      	strb	r3, [r7, #17]
        if(is_common == false) return false;  /*The area is not on the object*/
 80059b8:	7c7b      	ldrb	r3, [r7, #17]
 80059ba:	f083 0301 	eor.w	r3, r3, #1
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <lv_obj_area_is_visible+0xdc>
 80059c4:	2300      	movs	r3, #0
 80059c6:	e025      	b.n	8005a14 <lv_obj_area_is_visible+0x128>

        /*Truncate recursively to the parents*/
        lv_obj_t * par = lv_obj_get_parent(obj);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 ff61 	bl	8006890 <lv_obj_get_parent>
 80059ce:	61f8      	str	r0, [r7, #28]
        while(par != NULL) {
 80059d0:	e01c      	b.n	8005a0c <lv_obj_area_is_visible+0x120>
            is_common = _lv_area_intersect(area, area, &par->coords);
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	3310      	adds	r3, #16
 80059d6:	461a      	mov	r2, r3
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6838      	ldr	r0, [r7, #0]
 80059dc:	f015 fa70 	bl	801aec0 <_lv_area_intersect>
 80059e0:	4603      	mov	r3, r0
 80059e2:	747b      	strb	r3, [r7, #17]
            if(is_common == false) return false;       /*If no common parts with parent break;*/
 80059e4:	7c7b      	ldrb	r3, [r7, #17]
 80059e6:	f083 0301 	eor.w	r3, r3, #1
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <lv_obj_area_is_visible+0x108>
 80059f0:	2300      	movs	r3, #0
 80059f2:	e00f      	b.n	8005a14 <lv_obj_area_is_visible+0x128>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 80059f4:	69f8      	ldr	r0, [r7, #28]
 80059f6:	f001 fbf7 	bl	80071e8 <lv_obj_get_hidden>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <lv_obj_area_is_visible+0x118>
 8005a00:	2300      	movs	r3, #0
 8005a02:	e007      	b.n	8005a14 <lv_obj_area_is_visible+0x128>

            par = lv_obj_get_parent(par);
 8005a04:	69f8      	ldr	r0, [r7, #28]
 8005a06:	f000 ff43 	bl	8006890 <lv_obj_get_parent>
 8005a0a:	61f8      	str	r0, [r7, #28]
        while(par != NULL) {
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1df      	bne.n	80059d2 <lv_obj_area_is_visible+0xe6>
        }
    }

    return true;
 8005a12:	2301      	movs	r3, #1
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3720      	adds	r7, #32
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <lv_obj_move_foreground>:
/**
 * Move and object to the foreground
 * @param obj pointer to an object
 */
void lv_obj_move_foreground(lv_obj_t * obj)
{
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f016 f8a5 	bl	801bb74 <lv_debug_check_null>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f083 0301 	eor.w	r3, r3, #1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d008      	beq.n	8005a48 <lv_obj_move_foreground+0x2c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f04f 0400 	mov.w	r4, #0
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4623      	mov	r3, r4
 8005a40:	4814      	ldr	r0, [pc, #80]	; (8005a94 <lv_obj_move_foreground+0x78>)
 8005a42:	f016 f8a7 	bl	801bb94 <lv_debug_log_error>
 8005a46:	e7fe      	b.n	8005a46 <lv_obj_move_foreground+0x2a>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 ff21 	bl	8006890 <lv_obj_get_parent>
 8005a4e:	60f8      	str	r0, [r7, #12]

    /*Do nothing of already in the foreground*/
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4618      	mov	r0, r3
 8005a56:	f016 fc43 	bl	801c2e0 <_lv_ll_get_head>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d014      	beq.n	8005a8c <lv_obj_move_foreground+0x70>

    lv_obj_invalidate(parent);
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f7ff fef4 	bl	8005850 <lv_obj_invalidate>

    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1d18      	adds	r0, r3, #4
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	1d19      	adds	r1, r3, #4
 8005a70:	2301      	movs	r3, #1
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	f016 fbdf 	bl	801c236 <_lv_ll_chg_list>

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	2101      	movs	r1, #1
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	4798      	blx	r3

    lv_obj_invalidate(parent);
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff fee3 	bl	8005850 <lv_obj_invalidate>
 8005a8a:	e000      	b.n	8005a8e <lv_obj_move_foreground+0x72>
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 8005a8c:	bf00      	nop
}
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd90      	pop	{r4, r7, pc}
 8005a94:	0802d0b8 	.word	0x0802d0b8

08005a98 <lv_obj_set_pos>:
 * @param obj pointer to an object
 * @param x new distance from the left side of the parent
 * @param y new distance from the top of the parent
 */
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8005a98:	b590      	push	{r4, r7, lr}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	807b      	strh	r3, [r7, #2]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f016 f863 	bl	801bb74 <lv_debug_check_null>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f083 0301 	eor.w	r3, r3, #1
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d008      	beq.n	8005acc <lv_obj_set_pos+0x34>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f04f 0400 	mov.w	r4, #0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	4846      	ldr	r0, [pc, #280]	; (8005be0 <lv_obj_set_pos+0x148>)
 8005ac6:	f016 f865 	bl	801bb94 <lv_debug_log_error>
 8005aca:	e7fe      	b.n	8005aca <lv_obj_set_pos+0x32>

    /*Convert x and y to absolute coordinates*/
    lv_obj_t * par = obj->parent;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	617b      	str	r3, [r7, #20]

    if(par) {
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00f      	beq.n	8005af8 <lv_obj_set_pos+0x60>
        x = x + par->coords.x1;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	887b      	ldrh	r3, [r7, #2]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	807b      	strh	r3, [r7, #2]
        y = y + par->coords.y1;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	883b      	ldrh	r3, [r7, #0]
 8005af2:	4413      	add	r3, r2
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	803b      	strh	r3, [r7, #0]
    }

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 8005af8:	887a      	ldrh	r2, [r7, #2]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	b21b      	sxth	r3, r3
 8005b08:	823b      	strh	r3, [r7, #16]
    diff.y = y - obj->coords.y1;
 8005b0a:	883a      	ldrh	r2, [r7, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	b21b      	sxth	r3, r3
 8005b1a:	827b      	strh	r3, [r7, #18]

    /* Do nothing if the position is not changed */
    /* It is very important else recursive positioning can
     * occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 8005b1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <lv_obj_set_pos+0x94>
 8005b24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d054      	beq.n	8005bd6 <lv_obj_set_pos+0x13e>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff fe8f 	bl	8005850 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8005b32:	f107 0308 	add.w	r3, r7, #8
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fef9 	bl	8006930 <lv_obj_get_coords>

    obj->coords.x1 += diff.x;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	b21a      	sxth	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	821a      	strh	r2, [r3, #16]
    obj->coords.y1 += diff.y;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	4413      	add	r3, r2
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	b21a      	sxth	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	825a      	strh	r2, [r3, #18]
    obj->coords.x2 += diff.x;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	b21a      	sxth	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 += diff.y;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	4413      	add	r3, r2
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	b21a      	sxth	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	82da      	strh	r2, [r3, #22]

    refresh_children_position(obj, diff.x, diff.y);
 8005b9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ba2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f002 fd8d 	bl	80086c8 <refresh_children_position>

    /*Inform the object about its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f107 0208 	add.w	r2, r7, #8
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	4798      	blx	r3

    /*Send a signal to the parent too*/
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <lv_obj_set_pos+0x136>
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	2101      	movs	r1, #1
 8005bca:	6978      	ldr	r0, [r7, #20]
 8005bcc:	4798      	blx	r3

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff fe3e 	bl	8005850 <lv_obj_invalidate>
 8005bd4:	e000      	b.n	8005bd8 <lv_obj_set_pos+0x140>
    if(diff.x == 0 && diff.y == 0) return;
 8005bd6:	bf00      	nop
}
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd90      	pop	{r4, r7, pc}
 8005bde:	bf00      	nop
 8005be0:	0802d0b8 	.word	0x0802d0b8

08005be4 <lv_obj_set_x>:
 * Set the x coordinate of a object
 * @param obj pointer to an object
 * @param x new distance from the left side from the parent
 */
void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 8005be4:	b590      	push	{r4, r7, lr}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f015 ffbf 	bl	801bb74 <lv_debug_check_null>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f083 0301 	eor.w	r3, r3, #1
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <lv_obj_set_x+0x30>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f04f 0400 	mov.w	r4, #0
 8005c08:	461a      	mov	r2, r3
 8005c0a:	4623      	mov	r3, r4
 8005c0c:	4809      	ldr	r0, [pc, #36]	; (8005c34 <lv_obj_set_x+0x50>)
 8005c0e:	f015 ffc1 	bl	801bb94 <lv_debug_log_error>
 8005c12:	e7fe      	b.n	8005c12 <lv_obj_set_x+0x2e>

    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fee3 	bl	80069e0 <lv_obj_get_y>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff ff37 	bl	8005a98 <lv_obj_set_pos>
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd90      	pop	{r4, r7, pc}
 8005c32:	bf00      	nop
 8005c34:	0802d0b8 	.word	0x0802d0b8

08005c38 <lv_obj_set_y>:
 * Set the y coordinate of a object
 * @param obj pointer to an object
 * @param y new distance from the top of the parent
 */
void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f015 ff95 	bl	801bb74 <lv_debug_check_null>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f083 0301 	eor.w	r3, r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <lv_obj_set_y+0x30>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f04f 0400 	mov.w	r4, #0
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4623      	mov	r3, r4
 8005c60:	4809      	ldr	r0, [pc, #36]	; (8005c88 <lv_obj_set_y+0x50>)
 8005c62:	f015 ff97 	bl	801bb94 <lv_debug_log_error>
 8005c66:	e7fe      	b.n	8005c66 <lv_obj_set_y+0x2e>

    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fe85 	bl	8006978 <lv_obj_get_x>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4619      	mov	r1, r3
 8005c72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c76:	461a      	mov	r2, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff ff0d 	bl	8005a98 <lv_obj_set_pos>
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd90      	pop	{r4, r7, pc}
 8005c86:	bf00      	nop
 8005c88:	0802d0b8 	.word	0x0802d0b8

08005c8c <lv_obj_align>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_ofs x coordinate offset after alignment
 * @param y_ofs y coordinate offset after alignment
 */
void lv_obj_align(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b089      	sub	sp, #36	; 0x24
 8005c90:	af04      	add	r7, sp, #16
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4611      	mov	r1, r2
 8005c98:	461a      	mov	r2, r3
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	71fb      	strb	r3, [r7, #7]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	80bb      	strh	r3, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f015 ff66 	bl	801bb74 <lv_debug_check_null>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f083 0301 	eor.w	r3, r3, #1
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <lv_obj_align+0x3a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f04f 0400 	mov.w	r4, #0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4623      	mov	r3, r4
 8005cbe:	4822      	ldr	r0, [pc, #136]	; (8005d48 <lv_obj_align+0xbc>)
 8005cc0:	f015 ff68 	bl	801bb94 <lv_debug_log_error>
 8005cc4:	e7fe      	b.n	8005cc4 <lv_obj_align+0x38>

    if(base == NULL) base = lv_obj_get_parent(obj);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <lv_obj_align+0x48>
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fddf 	bl	8006890 <lv_obj_get_parent>
 8005cd2:	60b8      	str	r0, [r7, #8]

    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 8005cd4:	68b8      	ldr	r0, [r7, #8]
 8005cd6:	f015 ff4d 	bl	801bb74 <lv_debug_check_null>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f083 0301 	eor.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d008      	beq.n	8005cf8 <lv_obj_align+0x6c>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f04f 0400 	mov.w	r4, #0
 8005cec:	461a      	mov	r2, r3
 8005cee:	4623      	mov	r3, r4
 8005cf0:	4815      	ldr	r0, [pc, #84]	; (8005d48 <lv_obj_align+0xbc>)
 8005cf2:	f015 ff4f 	bl	801bb94 <lv_debug_log_error>
 8005cf6:	e7fe      	b.n	8005cf6 <lv_obj_align+0x6a>

    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
 8005cf8:	79fa      	ldrb	r2, [r7, #7]
 8005cfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005cfe:	9302      	str	r3, [sp, #8]
 8005d00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	2301      	movs	r3, #1
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f002 fd9e 	bl	8008850 <obj_align_core>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	79fa      	ldrb	r2, [r7, #7]
 8005d18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88ba      	ldrh	r2, [r7, #4]
 8005d20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8c3a      	ldrh	r2, [r7, #32]
 8005d28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    obj->realign.base        = base;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
    obj->realign.mid_align = 0;
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 8005d38:	f36f 0341 	bfc	r3, #1, #1
 8005d3c:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#endif
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd90      	pop	{r4, r7, pc}
 8005d48:	0802d0b8 	.word	0x0802d0b8

08005d4c <lv_obj_align_mid>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_ofs x coordinate offset after alignment
 * @param y_ofs y coordinate offset after alignment
 */
void lv_obj_align_mid(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8005d4c:	b590      	push	{r4, r7, lr}
 8005d4e:	b089      	sub	sp, #36	; 0x24
 8005d50:	af04      	add	r7, sp, #16
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4611      	mov	r1, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	71fb      	strb	r3, [r7, #7]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80bb      	strh	r3, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f015 ff06 	bl	801bb74 <lv_debug_check_null>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f083 0301 	eor.w	r3, r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <lv_obj_align_mid+0x3a>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f04f 0400 	mov.w	r4, #0
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	4822      	ldr	r0, [pc, #136]	; (8005e08 <lv_obj_align_mid+0xbc>)
 8005d80:	f015 ff08 	bl	801bb94 <lv_debug_log_error>
 8005d84:	e7fe      	b.n	8005d84 <lv_obj_align_mid+0x38>

    if(base == NULL) {
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <lv_obj_align_mid+0x48>
        base = lv_obj_get_parent(obj);
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fd7f 	bl	8006890 <lv_obj_get_parent>
 8005d92:	60b8      	str	r0, [r7, #8]
    }

    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 8005d94:	68b8      	ldr	r0, [r7, #8]
 8005d96:	f015 feed 	bl	801bb74 <lv_debug_check_null>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f083 0301 	eor.w	r3, r3, #1
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d008      	beq.n	8005db8 <lv_obj_align_mid+0x6c>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f04f 0400 	mov.w	r4, #0
 8005dac:	461a      	mov	r2, r3
 8005dae:	4623      	mov	r3, r4
 8005db0:	4815      	ldr	r0, [pc, #84]	; (8005e08 <lv_obj_align_mid+0xbc>)
 8005db2:	f015 feef 	bl	801bb94 <lv_debug_log_error>
 8005db6:	e7fe      	b.n	8005db6 <lv_obj_align_mid+0x6a>

    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
 8005db8:	79fa      	ldrb	r2, [r7, #7]
 8005dba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005dbe:	9302      	str	r3, [sp, #8]
 8005dc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	2301      	movs	r3, #1
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f002 fda6 	bl	8008920 <obj_align_mid_core>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	79fa      	ldrb	r2, [r7, #7]
 8005dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	88ba      	ldrh	r2, [r7, #4]
 8005de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8c3a      	ldrh	r2, [r7, #32]
 8005de8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    obj->realign.base        = base;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
    obj->realign.mid_align = 1;
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 8005df8:	f043 0302 	orr.w	r3, r3, #2
 8005dfc:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#endif
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd90      	pop	{r4, r7, pc}
 8005e08:	0802d0b8 	.word	0x0802d0b8

08005e0c <lv_obj_realign>:
/**
 * Realign the object based on the last `lv_obj_align` parameters.
 * @param obj pointer to an object
 */
void lv_obj_realign(lv_obj_t * obj)
{
 8005e0c:	b590      	push	{r4, r7, lr}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f015 fead 	bl	801bb74 <lv_debug_check_null>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f083 0301 	eor.w	r3, r3, #1
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <lv_obj_realign+0x2c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f04f 0400 	mov.w	r4, #0
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4623      	mov	r3, r4
 8005e30:	4818      	ldr	r0, [pc, #96]	; (8005e94 <lv_obj_realign+0x88>)
 8005e32:	f015 feaf 	bl	801bb94 <lv_debug_log_error>
 8005e36:	e7fe      	b.n	8005e36 <lv_obj_realign+0x2a>

#if LV_USE_OBJ_REALIGN
    if(obj->realign.mid_align)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d010      	beq.n	8005e6a <lv_obj_realign+0x5e>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f9b3 0044 	ldrsh.w	r0, [r3, #68]	; 0x44
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	4603      	mov	r3, r0
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ff72 	bl	8005d4c <lv_obj_align_mid>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
#else
    (void)obj;
    LV_LOG_WARN("lv_obj_realign: no effect because LV_USE_OBJ_REALIGN = 0");
#endif
}
 8005e68:	e00f      	b.n	8005e8a <lv_obj_realign+0x7e>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f9b3 0044 	ldrsh.w	r0, [r3, #68]	; 0x44
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	4603      	mov	r3, r0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ff01 	bl	8005c8c <lv_obj_align>
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd90      	pop	{r4, r7, pc}
 8005e92:	bf00      	nop
 8005e94:	0802d0b8 	.word	0x0802d0b8

08005e98 <lv_obj_clean_style_list>:
 * @param obj pointer to an object
 * @param part the part of the object which style list should be reset.
 * E.g. `LV_OBJ_PART_MAIN`, `LV_BTN_PART_MAIN`, `LV_SLIDER_PART_KNOB`
 */
void lv_obj_clean_style_list(lv_obj_t * obj, uint8_t part)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fe11 	bl	8006ad0 <lv_obj_get_style_list>
 8005eae:	60f8      	str	r0, [r7, #12]
    if(style_dsc == NULL) {
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <lv_obj_clean_style_list+0x32>
        LV_LOG_WARN("lv_obj_clean_style_list: can't find style with `part`");
        return;
    }

    _lv_style_list_reset(style_dsc);
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f005 fba8 	bl	800b60c <_lv_style_list_reset>
#if LV_USE_ANIMATION
    trans_del(obj, part, 0xFF, NULL);
 8005ebc:	78f9      	ldrb	r1, [r7, #3]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	22ff      	movs	r2, #255	; 0xff
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f003 f980 	bl	80091c8 <trans_del>
 8005ec8:	e000      	b.n	8005ecc <lv_obj_clean_style_list+0x34>
        return;
 8005eca:	bf00      	nop
#endif
}
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <lv_obj_reset_style_list>:
 * @param obj pointer to an object
 * @param part the part of the object which style list should be reset.
 * E.g. `LV_OBJ_PART_MAIN`, `LV_BTN_PART_MAIN`, `LV_SLIDER_PART_KNOB`
 */
void lv_obj_reset_style_list(lv_obj_t * obj, uint8_t part)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	460b      	mov	r3, r1
 8005edc:	70fb      	strb	r3, [r7, #3]
    lv_obj_clean_style_list(obj, part);
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff ffd8 	bl	8005e98 <lv_obj_clean_style_list>

    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	22ff      	movs	r2, #255	; 0xff
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f804 	bl	8005efc <lv_obj_refresh_style>
}
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <lv_obj_refresh_style>:
 * @param obj pointer to an object
 * @param part the part of the object which style property should be refreshed.
 * @param prop `LV_STYLE_PROP_ALL` or an `LV_STYLE_...` property. It is used to optimize what needs to be refreshed.
 */
void lv_obj_refresh_style(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8005efc:	b590      	push	{r4, r7, lr}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f015 fe31 	bl	801bb74 <lv_debug_check_null>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f083 0301 	eor.w	r3, r3, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <lv_obj_refresh_style+0x34>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f04f 0400 	mov.w	r4, #0
 8005f24:	461a      	mov	r2, r3
 8005f26:	4623      	mov	r3, r4
 8005f28:	483e      	ldr	r0, [pc, #248]	; (8006024 <lv_obj_refresh_style+0x128>)
 8005f2a:	f015 fe33 	bl	801bb94 <lv_debug_log_error>
 8005f2e:	e7fe      	b.n	8005f2e <lv_obj_refresh_style+0x32>

    invalidate_style_cache(obj, part, prop);
 8005f30:	883a      	ldrh	r2, [r7, #0]
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f003 fe24 	bl	8009b84 <invalidate_style_cache>

    /*If a real style refresh is required*/
    bool real_refr = false;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	73fb      	strb	r3, [r7, #15]
    switch(prop) {
 8005f40:	883b      	ldrh	r3, [r7, #0]
 8005f42:	2b71      	cmp	r3, #113	; 0x71
 8005f44:	dc17      	bgt.n	8005f76 <lv_obj_refresh_style+0x7a>
 8005f46:	2b70      	cmp	r3, #112	; 0x70
 8005f48:	da31      	bge.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f4a:	2b41      	cmp	r3, #65	; 0x41
 8005f4c:	dc09      	bgt.n	8005f62 <lv_obj_refresh_style+0x66>
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	da2d      	bge.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	db2e      	blt.n	8005fb4 <lv_obj_refresh_style+0xb8>
 8005f56:	2b07      	cmp	r3, #7
 8005f58:	dd29      	ble.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f5a:	3b10      	subs	r3, #16
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d829      	bhi.n	8005fb4 <lv_obj_refresh_style+0xb8>
 8005f60:	e025      	b.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f62:	2b53      	cmp	r3, #83	; 0x53
 8005f64:	dc04      	bgt.n	8005f70 <lv_obj_refresh_style+0x74>
 8005f66:	2b50      	cmp	r3, #80	; 0x50
 8005f68:	da21      	bge.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f6a:	2b4c      	cmp	r3, #76	; 0x4c
 8005f6c:	d01f      	beq.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f6e:	e021      	b.n	8005fb4 <lv_obj_refresh_style+0xb8>
 8005f70:	2b5c      	cmp	r3, #92	; 0x5c
 8005f72:	d01c      	beq.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f74:	e01e      	b.n	8005fb4 <lv_obj_refresh_style+0xb8>
 8005f76:	2b7f      	cmp	r3, #127	; 0x7f
 8005f78:	dc08      	bgt.n	8005f8c <lv_obj_refresh_style+0x90>
 8005f7a:	2b7e      	cmp	r3, #126	; 0x7e
 8005f7c:	da17      	bge.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f7e:	2b73      	cmp	r3, #115	; 0x73
 8005f80:	db18      	blt.n	8005fb4 <lv_obj_refresh_style+0xb8>
 8005f82:	2b75      	cmp	r3, #117	; 0x75
 8005f84:	dd13      	ble.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f86:	2b7c      	cmp	r3, #124	; 0x7c
 8005f88:	d011      	beq.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f8a:	e013      	b.n	8005fb4 <lv_obj_refresh_style+0xb8>
 8005f8c:	f248 0281 	movw	r2, #32897	; 0x8081
 8005f90:	4293      	cmp	r3, r2
 8005f92:	dc08      	bgt.n	8005fa6 <lv_obj_refresh_style+0xaa>
 8005f94:	f248 0280 	movw	r2, #32896	; 0x8080
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	da08      	bge.n	8005fae <lv_obj_refresh_style+0xb2>
 8005f9c:	2b90      	cmp	r3, #144	; 0x90
 8005f9e:	d006      	beq.n	8005fae <lv_obj_refresh_style+0xb2>
 8005fa0:	2bff      	cmp	r3, #255	; 0xff
 8005fa2:	d004      	beq.n	8005fae <lv_obj_refresh_style+0xb2>
 8005fa4:	e006      	b.n	8005fb4 <lv_obj_refresh_style+0xb8>
 8005fa6:	f248 028e 	movw	r2, #32910	; 0x808e
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d102      	bne.n	8005fb4 <lv_obj_refresh_style+0xb8>
        case LV_STYLE_VALUE_OPA:
        case LV_STYLE_TEXT_LETTER_SPACE:
        case LV_STYLE_TEXT_LINE_SPACE:
        case LV_STYLE_TEXT_FONT:
        case LV_STYLE_LINE_WIDTH:
            real_refr = true;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	73fb      	strb	r3, [r7, #15]
            break;
 8005fb2:	e001      	b.n	8005fb8 <lv_obj_refresh_style+0xbc>
        default:
            real_refr = false;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]
    }

    if(real_refr) {
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d02a      	beq.n	8006014 <lv_obj_refresh_style+0x118>
        lv_obj_invalidate(obj);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff fc46 	bl	8005850 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2104      	movs	r1, #4
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3

        switch(prop) {
 8005fd0:	883b      	ldrh	r3, [r7, #0]
 8005fd2:	2b15      	cmp	r3, #21
 8005fd4:	db10      	blt.n	8005ff8 <lv_obj_refresh_style+0xfc>
 8005fd6:	2b18      	cmp	r3, #24
 8005fd8:	dd01      	ble.n	8005fde <lv_obj_refresh_style+0xe2>
 8005fda:	2bff      	cmp	r3, #255	; 0xff
 8005fdc:	d10c      	bne.n	8005ff8 <lv_obj_refresh_style+0xfc>
            case LV_STYLE_PROP_ALL:
            case LV_STYLE_MARGIN_TOP:
            case LV_STYLE_MARGIN_BOTTOM:
            case LV_STYLE_MARGIN_LEFT:
            case LV_STYLE_MARGIN_RIGHT:
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <lv_obj_refresh_style+0xfa>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6810      	ldr	r0, [r2, #0]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	4798      	blx	r3
                break;
 8005ff6:	bf00      	nop
        }

        lv_obj_invalidate(obj);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff fc29 	bl	8005850 <lv_obj_invalidate>

        /*Send style change signals*/
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8005ffe:	883b      	ldrh	r3, [r7, #0]
 8006000:	2bff      	cmp	r3, #255	; 0xff
 8006002:	d003      	beq.n	800600c <lv_obj_refresh_style+0x110>
 8006004:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006008:	2b00      	cmp	r3, #0
 800600a:	da06      	bge.n	800601a <lv_obj_refresh_style+0x11e>
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f002 fbfa 	bl	8008806 <refresh_children_style>
    }
    else {
        lv_obj_invalidate(obj);
    }
}
 8006012:	e002      	b.n	800601a <lv_obj_refresh_style+0x11e>
        lv_obj_invalidate(obj);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff fc1b 	bl	8005850 <lv_obj_invalidate>
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	bd90      	pop	{r4, r7, pc}
 8006022:	bf00      	nop
 8006024:	0802d0b8 	.word	0x0802d0b8

08006028 <lv_obj_report_style_mod>:
 * Notify all object if a style is modified
 * @param style pointer to a style. Only the objects with this style will be notified
 *               (NULL to notify all objects)
 */
void lv_obj_report_style_mod(lv_style_t * style)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_disp_get_next(NULL);
 8006030:	2000      	movs	r0, #0
 8006032:	f014 fa55 	bl	801a4e0 <lv_disp_get_next>
 8006036:	60f8      	str	r0, [r7, #12]

    while(d) {
 8006038:	e018      	b.n	800606c <lv_obj_report_style_mod+0x44>
        lv_obj_t * i;
        _LV_LL_READ(d->scr_ll, i) {
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3338      	adds	r3, #56	; 0x38
 800603e:	4618      	mov	r0, r3
 8006040:	f016 f94e 	bl	801c2e0 <_lv_ll_get_head>
 8006044:	60b8      	str	r0, [r7, #8]
 8006046:	e00a      	b.n	800605e <lv_obj_report_style_mod+0x36>
            report_style_mod_core(style, i);
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f002 fb89 	bl	8008762 <report_style_mod_core>
        _LV_LL_READ(d->scr_ll, i) {
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3338      	adds	r3, #56	; 0x38
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	4618      	mov	r0, r3
 8006058:	f016 f968 	bl	801c32c <_lv_ll_get_next>
 800605c:	60b8      	str	r0, [r7, #8]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f1      	bne.n	8006048 <lv_obj_report_style_mod+0x20>
        }
        d = lv_disp_get_next(d);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f014 fa3b 	bl	801a4e0 <lv_disp_get_next>
 800606a:	60f8      	str	r0, [r7, #12]
    while(d) {
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e3      	bne.n	800603a <lv_obj_report_style_mod+0x12>
    }
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <_lv_obj_disable_style_caching>:
 * Enable/disable the use of style cache for an object
 * @param obj pointer to an object
 * @param dis true: disable; false: enable (re-enable)
 */
void _lv_obj_disable_style_caching(lv_obj_t * obj, bool dis)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
    uint8_t part;
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]
 800608a:	e011      	b.n	80060b0 <_lv_obj_disable_style_caching+0x36>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fd1d 	bl	8006ad0 <lv_obj_get_style_list>
 8006096:	6138      	str	r0, [r7, #16]
        if(list == NULL) break;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00c      	beq.n	80060b8 <_lv_obj_disable_style_caching+0x3e>
        list->ignore_cache = dis;
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	7953      	ldrb	r3, [r2, #5]
 80060a2:	78f9      	ldrb	r1, [r7, #3]
 80060a4:	f361 03c3 	bfi	r3, r1, #3, #1
 80060a8:	7153      	strb	r3, [r2, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	3301      	adds	r3, #1
 80060ae:	75fb      	strb	r3, [r7, #23]
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b3f      	cmp	r3, #63	; 0x3f
 80060b4:	d9ea      	bls.n	800608c <_lv_obj_disable_style_caching+0x12>
 80060b6:	e000      	b.n	80060ba <_lv_obj_disable_style_caching+0x40>
        if(list == NULL) break;
 80060b8:	bf00      	nop
    }
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 80060ba:	2340      	movs	r3, #64	; 0x40
 80060bc:	75fb      	strb	r3, [r7, #23]
 80060be:	e011      	b.n	80060e4 <_lv_obj_disable_style_caching+0x6a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fd03 	bl	8006ad0 <lv_obj_get_style_list>
 80060ca:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00c      	beq.n	80060ec <_lv_obj_disable_style_caching+0x72>
        list->ignore_cache = dis;
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	7953      	ldrb	r3, [r2, #5]
 80060d6:	78f9      	ldrb	r1, [r7, #3]
 80060d8:	f361 03c3 	bfi	r3, r1, #3, #1
 80060dc:	7153      	strb	r3, [r2, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 80060de:	7dfb      	ldrb	r3, [r7, #23]
 80060e0:	3301      	adds	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
 80060e6:	2bff      	cmp	r3, #255	; 0xff
 80060e8:	d1ea      	bne.n	80060c0 <_lv_obj_disable_style_caching+0x46>
    }
}
 80060ea:	e000      	b.n	80060ee <_lv_obj_disable_style_caching+0x74>
        if(list == NULL) break;
 80060ec:	bf00      	nop
}
 80060ee:	bf00      	nop
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <lv_obj_set_click>:
 * Enable or disable the clicking of an object
 * @param obj pointer to an object
 * @param en true: make the object clickable
 */
void lv_obj_set_click(lv_obj_t * obj, bool en)
{
 80060f8:	b590      	push	{r4, r7, lr}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f015 fd35 	bl	801bb74 <lv_debug_check_null>
 800610a:	4603      	mov	r3, r0
 800610c:	f083 0301 	eor.w	r3, r3, #1
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d008      	beq.n	8006128 <lv_obj_set_click+0x30>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f04f 0400 	mov.w	r4, #0
 800611c:	461a      	mov	r2, r3
 800611e:	4623      	mov	r3, r4
 8006120:	4807      	ldr	r0, [pc, #28]	; (8006140 <lv_obj_set_click+0x48>)
 8006122:	f015 fd37 	bl	801bb94 <lv_debug_log_error>
 8006126:	e7fe      	b.n	8006126 <lv_obj_set_click+0x2e>

    obj->click = (en == true ? 1 : 0);
 8006128:	78f9      	ldrb	r1, [r7, #3]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8006130:	f361 0300 	bfi	r3, r1, #0, #1
 8006134:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	bd90      	pop	{r4, r7, pc}
 8006140:	0802d0b8 	.word	0x0802d0b8

08006144 <lv_obj_set_state>:
 * from the previous state to the current
 * @param obj pointer to an object
 * @param state the new state
 */
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8006144:	b590      	push	{r4, r7, lr}
 8006146:	b0ff      	sub	sp, #508	; 0x1fc
 8006148:	af02      	add	r7, sp, #8
 800614a:	1d3b      	adds	r3, r7, #4
 800614c:	6018      	str	r0, [r3, #0]
 800614e:	460a      	mov	r2, r1
 8006150:	1cfb      	adds	r3, r7, #3
 8006152:	701a      	strb	r2, [r3, #0]
    if(obj->state == new_state) return;
 8006154:	1d3b      	adds	r3, r7, #4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	1cfa      	adds	r2, r7, #3
 800615e:	7812      	ldrb	r2, [r2, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	f000 81b6 	beq.w	80064d2 <lv_obj_set_state+0x38e>

    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006166:	1d3b      	adds	r3, r7, #4
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f015 fd03 	bl	801bb74 <lv_debug_check_null>
 800616e:	4603      	mov	r3, r0
 8006170:	f083 0301 	eor.w	r3, r3, #1
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <lv_obj_set_state+0x4a>
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f04f 0400 	mov.w	r4, #0
 8006182:	461a      	mov	r2, r3
 8006184:	4623      	mov	r3, r4
 8006186:	48d6      	ldr	r0, [pc, #856]	; (80064e0 <lv_obj_set_state+0x39c>)
 8006188:	f015 fd04 	bl	801bb94 <lv_debug_log_error>
 800618c:	e7fe      	b.n	800618c <lv_obj_set_state+0x48>

    lv_state_t prev_state = obj->state;
 800618e:	1d3b      	adds	r3, r7, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006196:	f887 31ec 	strb.w	r3, [r7, #492]	; 0x1ec
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
 800619a:	2300      	movs	r3, #0
 800619c:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
    uint8_t part;
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80061a0:	2300      	movs	r3, #0
 80061a2:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 80061a6:	e048      	b.n	800623a <lv_obj_set_state+0xf6>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 80061a8:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80061ac:	1d3b      	adds	r3, r7, #4
 80061ae:	4611      	mov	r1, r2
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	f000 fc8d 	bl	8006ad0 <lv_obj_get_style_list>
 80061b6:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
        if(style_list == NULL) break;   /*No more style lists*/
 80061ba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d040      	beq.n	8006244 <lv_obj_set_state+0x100>
        obj->state = prev_state;
 80061c2:	1d3b      	adds	r3, r7, #4
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f897 21ec 	ldrb.w	r2, [r7, #492]	; 0x1ec
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        style_snapshot_t shot_pre;
        style_snapshot(obj, part, &shot_pre);
 80061ce:	f107 0208 	add.w	r2, r7, #8
 80061d2:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	f003 fd2d 	bl	8009c38 <style_snapshot>
        obj->state = new_state;
 80061de:	1d3b      	adds	r3, r7, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	1cfa      	adds	r2, r7, #3
 80061e4:	7812      	ldrb	r2, [r2, #0]
 80061e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        style_snapshot_t shot_post;
        style_snapshot(obj, part, &shot_post);
 80061ea:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80061ee:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	f003 fd1f 	bl	8009c38 <style_snapshot>

        style_snapshot_res_t r = style_snapshot_compare(&shot_pre, &shot_post);
 80061fa:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80061fe:	f107 0308 	add.w	r3, r7, #8
 8006202:	4611      	mov	r1, r2
 8006204:	4618      	mov	r0, r3
 8006206:	f003 fe64 	bl	8009ed2 <style_snapshot_compare>
 800620a:	4603      	mov	r3, r0
 800620c:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
        if(r == STYLE_COMPARE_DIFF) {
 8006210:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 8006214:	2b02      	cmp	r3, #2
 8006216:	d104      	bne.n	8006222 <lv_obj_set_state+0xde>
            cmp_res = STYLE_COMPARE_DIFF;
 8006218:	2302      	movs	r3, #2
 800621a:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
            break;
 800621e:	bf00      	nop
 8006220:	e011      	b.n	8006246 <lv_obj_set_state+0x102>
        }
        if(r == STYLE_COMPARE_VISUAL_DIFF) {
 8006222:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 8006226:	2b01      	cmp	r3, #1
 8006228:	d102      	bne.n	8006230 <lv_obj_set_state+0xec>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
 800622a:	2301      	movs	r3, #1
 800622c:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8006230:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 8006234:	3301      	adds	r3, #1
 8006236:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 800623a:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 800623e:	2b3f      	cmp	r3, #63	; 0x3f
 8006240:	d9b2      	bls.n	80061a8 <lv_obj_set_state+0x64>
 8006242:	e000      	b.n	8006246 <lv_obj_set_state+0x102>
        if(style_list == NULL) break;   /*No more style lists*/
 8006244:	bf00      	nop
        }
    }

    obj->state = new_state;
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	1cfa      	adds	r2, r7, #3
 800624c:	7812      	ldrb	r2, [r2, #0]
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    if(cmp_res == STYLE_COMPARE_SAME) {
 8006252:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 813d 	beq.w	80064d6 <lv_obj_set_state+0x392>
#if LV_USE_ANIMATION == 0
    if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
#else

    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
 800625c:	2300      	movs	r3, #0
 800625e:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 8006262:	e126      	b.n	80064b2 <lv_obj_set_state+0x36e>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 8006264:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8006268:	1d3b      	adds	r3, r7, #4
 800626a:	4611      	mov	r1, r2
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	f000 fc2f 	bl	8006ad0 <lv_obj_get_style_list>
 8006272:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
        if(style_list == NULL) break;   /*No more style lists*/
 8006276:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 811f 	beq.w	80064be <lv_obj_set_state+0x37a>
        if(style_list->ignore_trans) continue;
 8006280:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006284:	795b      	ldrb	r3, [r3, #5]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	f040 810a 	bne.w	80064a6 <lv_obj_set_state+0x362>

        lv_style_int_t time = lv_obj_get_style_transition_time(obj, part);
 8006292:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	4611      	mov	r1, r2
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	f7fe fe45 	bl	8004f2a <lv_obj_get_style_transition_time>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
        lv_style_property_t props[LV_STYLE_TRANS_NUM_MAX];
        lv_style_int_t delay = lv_obj_get_style_transition_delay(obj, part);
 80062a6:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80062aa:	1d3b      	adds	r3, r7, #4
 80062ac:	4611      	mov	r1, r2
 80062ae:	6818      	ldr	r0, [r3, #0]
 80062b0:	f7fe fe4c 	bl	8004f4c <lv_obj_get_style_transition_delay>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f8a7 31dc 	strh.w	r3, [r7, #476]	; 0x1dc
        lv_anim_path_t * path = lv_obj_get_style_transition_path(obj, part);
 80062ba:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	4611      	mov	r1, r2
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	f7fe feb9 	bl	800503a <lv_obj_get_style_transition_path>
 80062c8:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
 80062cc:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80062d0:	1d3b      	adds	r3, r7, #4
 80062d2:	4611      	mov	r1, r2
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f7fe fe4a 	bl	8004f6e <lv_obj_get_style_transition_prop_1>
 80062da:	4603      	mov	r3, r0
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
 80062e2:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80062e6:	1d3b      	adds	r3, r7, #4
 80062e8:	4611      	mov	r1, r2
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	f7fe fe50 	bl	8004f90 <lv_obj_get_style_transition_prop_2>
 80062f0:	4603      	mov	r3, r0
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
 80062f8:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80062fc:	1d3b      	adds	r3, r7, #4
 80062fe:	4611      	mov	r1, r2
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	f7fe fe56 	bl	8004fb2 <lv_obj_get_style_transition_prop_3>
 8006306:	4603      	mov	r3, r0
 8006308:	b29b      	uxth	r3, r3
 800630a:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
 800630e:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8006312:	1d3b      	adds	r3, r7, #4
 8006314:	4611      	mov	r1, r2
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	f7fe fe5c 	bl	8004fd4 <lv_obj_get_style_transition_prop_4>
 800631c:	4603      	mov	r3, r0
 800631e:	b29b      	uxth	r3, r3
 8006320:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
 8006324:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8006328:	1d3b      	adds	r3, r7, #4
 800632a:	4611      	mov	r1, r2
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	f7fe fe62 	bl	8004ff6 <lv_obj_get_style_transition_prop_5>
 8006332:	4603      	mov	r3, r0
 8006334:	b29b      	uxth	r3, r3
 8006336:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
 800633a:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	4611      	mov	r1, r2
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	f7fe fe68 	bl	8005018 <lv_obj_get_style_transition_prop_6>
 8006348:	4603      	mov	r3, r0
 800634a:	b29b      	uxth	r3, r3
 800634c:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2

        uint8_t i;
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
 8006350:	2300      	movs	r3, #0
 8006352:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
 8006356:	e08a      	b.n	800646e <lv_obj_set_state+0x32a>
            if(props[i] != 0) {
 8006358:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8006362:	4413      	add	r3, r2
 8006364:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d07b      	beq.n	8006464 <lv_obj_set_state+0x320>
                _lv_style_list_add_trans_style(style_list);
 800636c:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8006370:	f005 fd58 	bl	800be24 <_lv_style_list_add_trans_style>

                lv_style_trans_t * tr = trans_create(obj, props[i], part, prev_state, new_state);
 8006374:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800637e:	4413      	add	r3, r2
 8006380:	f833 1c28 	ldrh.w	r1, [r3, #-40]
 8006384:	f897 41ec 	ldrb.w	r4, [r7, #492]	; 0x1ec
 8006388:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 800638c:	1d38      	adds	r0, r7, #4
 800638e:	1cfb      	adds	r3, r7, #3
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4623      	mov	r3, r4
 8006396:	6800      	ldr	r0, [r0, #0]
 8006398:	f002 fcde 	bl	8008d58 <trans_create>
 800639c:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4

                /*If there is a pending anim for this property remove it*/
                if(tr) {
 80063a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d05d      	beq.n	8006464 <lv_obj_set_state+0x320>
                    tr->obj = obj;
 80063a8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80063ac:	1d3a      	adds	r2, r7, #4
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	601a      	str	r2, [r3, #0]
                    tr->prop = props[i];
 80063b2:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80063bc:	4413      	add	r3, r2
 80063be:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 80063c2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80063c6:	809a      	strh	r2, [r3, #4]
                    tr->part = part;
 80063c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80063cc:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80063d0:	719a      	strb	r2, [r3, #6]

                    lv_anim_t a;
                    lv_anim_init(&a);
 80063d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80063d6:	4618      	mov	r0, r3
 80063d8:	f014 fa8a 	bl	801a8f0 <lv_anim_init>
                    lv_anim_set_var(&a, tr);
 80063dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80063e0:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fd ff8f 	bl	8004308 <lv_anim_set_var>
                    lv_anim_set_exec_cb(&a, (lv_anim_exec_xcb_t)trans_anim_cb);
 80063ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80063ee:	493d      	ldr	r1, [pc, #244]	; (80064e4 <lv_obj_set_state+0x3a0>)
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fd ff97 	bl	8004324 <lv_anim_set_exec_cb>
                    lv_anim_set_start_cb(&a, trans_anim_start_cb);
 80063f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80063fa:	493b      	ldr	r1, [pc, #236]	; (80064e8 <lv_obj_set_state+0x3a4>)
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fd ffe6 	bl	80043ce <lv_anim_set_start_cb>
                    lv_anim_set_ready_cb(&a, trans_anim_ready_cb);
 8006402:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006406:	4939      	ldr	r1, [pc, #228]	; (80064ec <lv_obj_set_state+0x3a8>)
 8006408:	4618      	mov	r0, r3
 800640a:	f7fd ffee 	bl	80043ea <lv_anim_set_ready_cb>
                    lv_anim_set_values(&a, 0x00, 0xFF);
 800640e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006412:	22ff      	movs	r2, #255	; 0xff
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd ffaf 	bl	800437a <lv_anim_set_values>
                    lv_anim_set_time(&a, time);
 800641c:	f9b7 21de 	ldrsh.w	r2, [r7, #478]	; 0x1de
 8006420:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f7fd ff8a 	bl	8004340 <lv_anim_set_time>
                    lv_anim_set_delay(&a, delay);
 800642c:	f9b7 21dc 	ldrsh.w	r2, [r7, #476]	; 0x1dc
 8006430:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006434:	4611      	mov	r1, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f7fd ff90 	bl	800435c <lv_anim_set_delay>
                    lv_anim_set_path(&a, path);
 800643c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006440:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8006444:	4618      	mov	r0, r3
 8006446:	f7fd ffb2 	bl	80043ae <lv_anim_set_path>
                    a.early_apply = 0;
 800644a:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800644e:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8006452:	f36f 0300 	bfc	r3, #0, #1
 8006456:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    lv_anim_start(&a);
 800645a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800645e:	4618      	mov	r0, r3
 8006460:	f014 fa70 	bl	801a944 <lv_anim_start>
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
 8006464:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 8006468:	3301      	adds	r3, #1
 800646a:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
 800646e:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 8006472:	2b05      	cmp	r3, #5
 8006474:	f67f af70 	bls.w	8006358 <lv_obj_set_state+0x214>
                }

            }
        }
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8006478:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 800647c:	2b02      	cmp	r3, #2
 800647e:	d106      	bne.n	800648e <lv_obj_set_state+0x34a>
 8006480:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 8006484:	1d3b      	adds	r3, r7, #4
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	f7ff fd37 	bl	8005efc <lv_obj_refresh_style>

        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
 800648e:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8006492:	2b01      	cmp	r3, #1
 8006494:	d108      	bne.n	80064a8 <lv_obj_set_state+0x364>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
 8006496:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 800649a:	1d3b      	adds	r3, r7, #4
 800649c:	22ff      	movs	r2, #255	; 0xff
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	f003 fb70 	bl	8009b84 <invalidate_style_cache>
 80064a4:	e000      	b.n	80064a8 <lv_obj_set_state+0x364>
        if(style_list->ignore_trans) continue;
 80064a6:	bf00      	nop
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
 80064a8:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 80064ac:	3301      	adds	r3, #1
 80064ae:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 80064b2:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 80064b6:	2b3f      	cmp	r3, #63	; 0x3f
 80064b8:	f67f aed4 	bls.w	8006264 <lv_obj_set_state+0x120>
 80064bc:	e000      	b.n	80064c0 <lv_obj_set_state+0x37c>
        if(style_list == NULL) break;   /*No more style lists*/
 80064be:	bf00      	nop
        }
    }

    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
 80064c0:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d107      	bne.n	80064d8 <lv_obj_set_state+0x394>
        lv_obj_invalidate(obj);
 80064c8:	1d3b      	adds	r3, r7, #4
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	f7ff f9c0 	bl	8005850 <lv_obj_invalidate>
 80064d0:	e002      	b.n	80064d8 <lv_obj_set_state+0x394>
    if(obj->state == new_state) return;
 80064d2:	bf00      	nop
 80064d4:	e000      	b.n	80064d8 <lv_obj_set_state+0x394>
        return;
 80064d6:	bf00      	nop
    }

#endif

}
 80064d8:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd90      	pop	{r4, r7, pc}
 80064e0:	0802d0b8 	.word	0x0802d0b8
 80064e4:	08009279 	.word	0x08009279
 80064e8:	080093f1 	.word	0x080093f1
 80064ec:	080094a9 	.word	0x080094a9

080064f0 <lv_obj_add_state>:
 * from the previous state to the current
 * @param obj pointer to an object
 * @param state the state bits to add. E.g `LV_STATE_PRESSED | LV_STATE_FOCUSED`
 */
void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)
{
 80064f0:	b590      	push	{r4, r7, lr}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f015 fb39 	bl	801bb74 <lv_debug_check_null>
 8006502:	4603      	mov	r3, r0
 8006504:	f083 0301 	eor.w	r3, r3, #1
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d008      	beq.n	8006520 <lv_obj_add_state+0x30>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f04f 0400 	mov.w	r4, #0
 8006514:	461a      	mov	r2, r3
 8006516:	4623      	mov	r3, r4
 8006518:	480c      	ldr	r0, [pc, #48]	; (800654c <lv_obj_add_state+0x5c>)
 800651a:	f015 fb3b 	bl	801bb94 <lv_debug_log_error>
 800651e:	e7fe      	b.n	800651e <lv_obj_add_state+0x2e>

    lv_state_t new_state = obj->state | state;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	4313      	orrs	r3, r2
 800652a:	73fb      	strb	r3, [r7, #15]
    if(obj->state != new_state) {
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006532:	7bfa      	ldrb	r2, [r7, #15]
 8006534:	429a      	cmp	r2, r3
 8006536:	d004      	beq.n	8006542 <lv_obj_add_state+0x52>
        lv_obj_set_state(obj, new_state);
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff fe01 	bl	8006144 <lv_obj_set_state>
    }
}
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	bd90      	pop	{r4, r7, pc}
 800654a:	bf00      	nop
 800654c:	0802d0b8 	.word	0x0802d0b8

08006550 <lv_obj_clear_state>:
 * from the previous state to the current
 * @param obj pointer to an object
 * @param state the state bits to remove. E.g `LV_STATE_PRESSED | LV_STATE_FOCUSED`
 */
void lv_obj_clear_state(lv_obj_t * obj, lv_state_t state)
{
 8006550:	b590      	push	{r4, r7, lr}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f015 fb09 	bl	801bb74 <lv_debug_check_null>
 8006562:	4603      	mov	r3, r0
 8006564:	f083 0301 	eor.w	r3, r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d008      	beq.n	8006580 <lv_obj_clear_state+0x30>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f04f 0400 	mov.w	r4, #0
 8006574:	461a      	mov	r2, r3
 8006576:	4623      	mov	r3, r4
 8006578:	480e      	ldr	r0, [pc, #56]	; (80065b4 <lv_obj_clear_state+0x64>)
 800657a:	f015 fb0b 	bl	801bb94 <lv_debug_log_error>
 800657e:	e7fe      	b.n	800657e <lv_obj_clear_state+0x2e>

    lv_state_t new_state = obj->state & (~state);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006586:	b25a      	sxtb	r2, r3
 8006588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800658c:	43db      	mvns	r3, r3
 800658e:	b25b      	sxtb	r3, r3
 8006590:	4013      	ands	r3, r2
 8006592:	b25b      	sxtb	r3, r3
 8006594:	73fb      	strb	r3, [r7, #15]
    if(obj->state != new_state) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659c:	7bfa      	ldrb	r2, [r7, #15]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d004      	beq.n	80065ac <lv_obj_clear_state+0x5c>
        lv_obj_set_state(obj, new_state);
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff fdcc 	bl	8006144 <lv_obj_set_state>
    }
}
 80065ac:	bf00      	nop
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd90      	pop	{r4, r7, pc}
 80065b4:	0802d0b8 	.word	0x0802d0b8

080065b8 <lv_event_send>:
 * @param event the type of the event from `lv_event_t`
 * @param data arbitrary data depending on the object type and the event. (Usually `NULL`)
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send(lv_obj_t * obj, lv_event_t event, const void * data)
{
 80065b8:	b590      	push	{r4, r7, lr}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	460b      	mov	r3, r1
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <lv_event_send+0x18>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e01b      	b.n	8006608 <lv_event_send+0x50>

    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f015 facf 	bl	801bb74 <lv_debug_check_null>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f083 0301 	eor.w	r3, r3, #1
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <lv_event_send+0x3c>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f04f 0400 	mov.w	r4, #0
 80065e8:	461a      	mov	r2, r3
 80065ea:	4623      	mov	r3, r4
 80065ec:	4808      	ldr	r0, [pc, #32]	; (8006610 <lv_event_send+0x58>)
 80065ee:	f015 fad1 	bl	801bb94 <lv_debug_log_error>
 80065f2:	e7fe      	b.n	80065f2 <lv_event_send+0x3a>

    lv_res_t res;
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6998      	ldr	r0, [r3, #24]
 80065f8:	7afa      	ldrb	r2, [r7, #11]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68f9      	ldr	r1, [r7, #12]
 80065fe:	f000 f809 	bl	8006614 <lv_event_send_func>
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]
    return res;
 8006606:	7dfb      	ldrb	r3, [r7, #23]
}
 8006608:	4618      	mov	r0, r3
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	bd90      	pop	{r4, r7, pc}
 8006610:	0802d0b8 	.word	0x0802d0b8

08006614 <lv_event_send_func>:
 * @param event an event
 * @param data pointer to a custom data
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send_func(lv_event_cb_t event_xcb, lv_obj_t * obj, lv_event_t event, const void * data)
{
 8006614:	b590      	push	{r4, r7, lr}
 8006616:	b08b      	sub	sp, #44	; 0x2c
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	603b      	str	r3, [r7, #0]
 8006620:	4613      	mov	r3, r2
 8006622:	71fb      	strb	r3, [r7, #7]
    if(obj != NULL) {
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d011      	beq.n	800664e <lv_event_send_func+0x3a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800662a:	68b8      	ldr	r0, [r7, #8]
 800662c:	f015 faa2 	bl	801bb74 <lv_debug_check_null>
 8006630:	4603      	mov	r3, r0
 8006632:	f083 0301 	eor.w	r3, r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <lv_event_send_func+0x3a>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f04f 0400 	mov.w	r4, #0
 8006642:	461a      	mov	r2, r3
 8006644:	4623      	mov	r3, r4
 8006646:	4831      	ldr	r0, [pc, #196]	; (800670c <lv_event_send_func+0xf8>)
 8006648:	f015 faa4 	bl	801bb94 <lv_debug_log_error>
 800664c:	e7fe      	b.n	800664c <lv_event_send_func+0x38>

    /* Build a simple linked list from the objects used in the events
     * It's important to know if an this object was deleted by a nested event
     * called from this `even_cb`. */
    lv_event_temp_data_t event_temp_data;
    event_temp_data.obj     = obj;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	613b      	str	r3, [r7, #16]
    event_temp_data.deleted = false;
 8006652:	2300      	movs	r3, #0
 8006654:	753b      	strb	r3, [r7, #20]
    event_temp_data.prev    = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]

    if(event_temp_data_head) {
 800665a:	4b2d      	ldr	r3, [pc, #180]	; (8006710 <lv_event_send_func+0xfc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <lv_event_send_func+0x54>
        event_temp_data.prev = event_temp_data_head;
 8006662:	4b2b      	ldr	r3, [pc, #172]	; (8006710 <lv_event_send_func+0xfc>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	61bb      	str	r3, [r7, #24]
    }
    event_temp_data_head = &event_temp_data;
 8006668:	4a29      	ldr	r2, [pc, #164]	; (8006710 <lv_event_send_func+0xfc>)
 800666a:	f107 0310 	add.w	r3, r7, #16
 800666e:	6013      	str	r3, [r2, #0]

    const void * event_act_data_save = event_act_data;
 8006670:	4b28      	ldr	r3, [pc, #160]	; (8006714 <lv_event_send_func+0x100>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
    event_act_data                   = data;
 8006676:	4a27      	ldr	r2, [pc, #156]	; (8006714 <lv_event_send_func+0x100>)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	6013      	str	r3, [r2, #0]

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 800667c:	f7fb fc82 	bl	8001f84 <lv_indev_get_act>
 8006680:	6238      	str	r0, [r7, #32]
    if(indev_act) {
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d009      	beq.n	800669c <lv_event_send_func+0x88>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <lv_event_send_func+0x88>
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	6a3a      	ldr	r2, [r7, #32]
 8006696:	79f9      	ldrb	r1, [r7, #7]
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
    }

    /*Call the event callback itself*/
    if(event_xcb) event_xcb(obj, event);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <lv_event_send_func+0x98>
 80066a2:	79fa      	ldrb	r2, [r7, #7]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4611      	mov	r1, r2
 80066a8:	68b8      	ldr	r0, [r7, #8]
 80066aa:	4798      	blx	r3

    /*Restore the event data*/
    event_act_data = event_act_data_save;
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <lv_event_send_func+0x100>)
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	6013      	str	r3, [r2, #0]

    /*Remove this element from the list*/
    event_temp_data_head = event_temp_data_head->prev;
 80066b2:	4b17      	ldr	r3, [pc, #92]	; (8006710 <lv_event_send_func+0xfc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4a15      	ldr	r2, [pc, #84]	; (8006710 <lv_event_send_func+0xfc>)
 80066ba:	6013      	str	r3, [r2, #0]

    if(event_temp_data.deleted) {
 80066bc:	7d3b      	ldrb	r3, [r7, #20]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <lv_event_send_func+0xb2>
        return LV_RES_INV;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e01d      	b.n	8006702 <lv_event_send_func+0xee>
    }

    if(obj) {
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d019      	beq.n	8006700 <lv_event_send_func+0xec>
        if(obj->parent_event && obj->parent) {
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d011      	beq.n	8006700 <lv_event_send_func+0xec>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00d      	beq.n	8006700 <lv_event_send_func+0xec>
            lv_res_t res = lv_event_send(obj->parent, event, data);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	79f9      	ldrb	r1, [r7, #7]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff ff63 	bl	80065b8 <lv_event_send>
 80066f2:	4603      	mov	r3, r0
 80066f4:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) {
 80066f6:	7ffb      	ldrb	r3, [r7, #31]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d001      	beq.n	8006700 <lv_event_send_func+0xec>
                return LV_RES_INV;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e000      	b.n	8006702 <lv_event_send_func+0xee>
            }
        }
    }

    return LV_RES_OK;
 8006700:	2301      	movs	r3, #1
}
 8006702:	4618      	mov	r0, r3
 8006704:	372c      	adds	r7, #44	; 0x2c
 8006706:	46bd      	mov	sp, r7
 8006708:	bd90      	pop	{r4, r7, pc}
 800670a:	bf00      	nop
 800670c:	0802d0b8 	.word	0x0802d0b8
 8006710:	200177a8 	.word	0x200177a8
 8006714:	200177ac 	.word	0x200177ac

08006718 <lv_signal_send>:
 * @param obj pointer to an object
 * @param event the type of the event from `lv_event_t`.
 * @return LV_RES_OK or LV_RES_INV
 */
lv_res_t lv_signal_send(lv_obj_t * obj, lv_signal_t signal, void * param)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	460b      	mov	r3, r1
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <lv_signal_send+0x18>
 800672c:	2301      	movs	r3, #1
 800672e:	e00e      	b.n	800674e <lv_signal_send+0x36>

    lv_res_t res = LV_RES_OK;
 8006730:	2301      	movs	r3, #1
 8006732:	75fb      	strb	r3, [r7, #23]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <lv_signal_send+0x34>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	7af9      	ldrb	r1, [r7, #11]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	4798      	blx	r3
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]

    return res;
 800674c:	7dfb      	ldrb	r3, [r7, #23]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <lv_obj_refresh_ext_draw_pad>:
 * Send a 'LV_SIGNAL_REFR_EXT_SIZE' signal to the object to refresh the extended draw area.
 * he object needs to be invalidated by `lv_obj_invalidate(obj)` manually after this function.
 * @param obj pointer to an object
 */
void lv_obj_refresh_ext_draw_pad(lv_obj_t * obj)
{
 8006758:	b590      	push	{r4, r7, lr}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f015 fa07 	bl	801bb74 <lv_debug_check_null>
 8006766:	4603      	mov	r3, r0
 8006768:	f083 0301 	eor.w	r3, r3, #1
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d008      	beq.n	8006784 <lv_obj_refresh_ext_draw_pad+0x2c>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f04f 0400 	mov.w	r4, #0
 8006778:	461a      	mov	r2, r3
 800677a:	4623      	mov	r3, r4
 800677c:	4808      	ldr	r0, [pc, #32]	; (80067a0 <lv_obj_refresh_ext_draw_pad+0x48>)
 800677e:	f015 fa09 	bl	801bb94 <lv_debug_log_error>
 8006782:	e7fe      	b.n	8006782 <lv_obj_refresh_ext_draw_pad+0x2a>

    obj->ext_draw_pad = 0;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	865a      	strh	r2, [r3, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	2200      	movs	r2, #0
 8006790:	2106      	movs	r1, #6
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3

}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	bd90      	pop	{r4, r7, pc}
 800679e:	bf00      	nop
 80067a0:	0802d0b8 	.word	0x0802d0b8

080067a4 <lv_obj_get_screen>:
 * Return with the screen of an object
 * @param obj pointer to an object
 * @return pointer to a screen
 */
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f015 f9e1 	bl	801bb74 <lv_debug_check_null>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f083 0301 	eor.w	r3, r3, #1
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d008      	beq.n	80067d0 <lv_obj_get_screen+0x2c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f04f 0400 	mov.w	r4, #0
 80067c4:	461a      	mov	r2, r3
 80067c6:	4623      	mov	r3, r4
 80067c8:	4809      	ldr	r0, [pc, #36]	; (80067f0 <lv_obj_get_screen+0x4c>)
 80067ca:	f015 f9e3 	bl	801bb94 <lv_debug_log_error>
 80067ce:	e7fe      	b.n	80067ce <lv_obj_get_screen+0x2a>

    const lv_obj_t * par = obj;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_p;

    do {
        act_p = par;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	60bb      	str	r3, [r7, #8]
        par   = lv_obj_get_parent(act_p);
 80067d8:	68b8      	ldr	r0, [r7, #8]
 80067da:	f000 f859 	bl	8006890 <lv_obj_get_parent>
 80067de:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f6      	bne.n	80067d4 <lv_obj_get_screen+0x30>

    return (lv_obj_t *)act_p;
 80067e6:	68bb      	ldr	r3, [r7, #8]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd90      	pop	{r4, r7, pc}
 80067f0:	0802d0b8 	.word	0x0802d0b8

080067f4 <lv_obj_get_disp>:
 * Get the display of an object
 * @param scr pointer to an object
 * @return pointer the object's display
 */
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 80067f4:	b590      	push	{r4, r7, lr}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f015 f9b9 	bl	801bb74 <lv_debug_check_null>
 8006802:	4603      	mov	r3, r0
 8006804:	f083 0301 	eor.w	r3, r3, #1
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <lv_obj_get_disp+0x2c>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f04f 0400 	mov.w	r4, #0
 8006814:	461a      	mov	r2, r3
 8006816:	4623      	mov	r3, r4
 8006818:	481b      	ldr	r0, [pc, #108]	; (8006888 <lv_obj_get_disp+0x94>)
 800681a:	f015 f9bb 	bl	801bb94 <lv_debug_log_error>
 800681e:	e7fe      	b.n	800681e <lv_obj_get_disp+0x2a>

    const lv_obj_t * scr;

    if(obj->parent == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <lv_obj_get_disp+0x3a>
        scr = obj; /*`obj` is a screen*/
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	e003      	b.n	8006836 <lv_obj_get_disp+0x42>
    else
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff ffb8 	bl	80067a4 <lv_obj_get_screen>
 8006834:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 8006836:	4815      	ldr	r0, [pc, #84]	; (800688c <lv_obj_get_disp+0x98>)
 8006838:	f015 fd52 	bl	801c2e0 <_lv_ll_get_head>
 800683c:	6138      	str	r0, [r7, #16]
 800683e:	e01b      	b.n	8006878 <lv_obj_get_disp+0x84>
        lv_obj_t * s;
        _LV_LL_READ(d->scr_ll, s) {
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3338      	adds	r3, #56	; 0x38
 8006844:	4618      	mov	r0, r3
 8006846:	f015 fd4b 	bl	801c2e0 <_lv_ll_get_head>
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	e00c      	b.n	8006868 <lv_obj_get_disp+0x74>
            if(s == scr) return d;
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	429a      	cmp	r2, r3
 8006854:	d101      	bne.n	800685a <lv_obj_get_disp+0x66>
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	e012      	b.n	8006880 <lv_obj_get_disp+0x8c>
        _LV_LL_READ(d->scr_ll, s) {
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	3338      	adds	r3, #56	; 0x38
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	4618      	mov	r0, r3
 8006862:	f015 fd63 	bl	801c32c <_lv_ll_get_next>
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1ef      	bne.n	800684e <lv_obj_get_disp+0x5a>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 800686e:	6939      	ldr	r1, [r7, #16]
 8006870:	4806      	ldr	r0, [pc, #24]	; (800688c <lv_obj_get_disp+0x98>)
 8006872:	f015 fd5b 	bl	801c32c <_lv_ll_get_next>
 8006876:	6138      	str	r0, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e0      	bne.n	8006840 <lv_obj_get_disp+0x4c>
        }
    }

    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    return NULL;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	371c      	adds	r7, #28
 8006884:	46bd      	mov	sp, r7
 8006886:	bd90      	pop	{r4, r7, pc}
 8006888:	0802d0b8 	.word	0x0802d0b8
 800688c:	200217a0 	.word	0x200217a0

08006890 <lv_obj_get_parent>:
 * Returns with the parent of an object
 * @param obj pointer to an object
 * @return pointer to the parent of  'obj'
 */
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 8006890:	b590      	push	{r4, r7, lr}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f015 f96b 	bl	801bb74 <lv_debug_check_null>
 800689e:	4603      	mov	r3, r0
 80068a0:	f083 0301 	eor.w	r3, r3, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d008      	beq.n	80068bc <lv_obj_get_parent+0x2c>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f04f 0400 	mov.w	r4, #0
 80068b0:	461a      	mov	r2, r3
 80068b2:	4623      	mov	r3, r4
 80068b4:	4804      	ldr	r0, [pc, #16]	; (80068c8 <lv_obj_get_parent+0x38>)
 80068b6:	f015 f96d 	bl	801bb94 <lv_debug_log_error>
 80068ba:	e7fe      	b.n	80068ba <lv_obj_get_parent+0x2a>

    return obj->parent;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd90      	pop	{r4, r7, pc}
 80068c8:	0802d0b8 	.word	0x0802d0b8

080068cc <lv_obj_get_child>:
 * @param child NULL at first call to get the next children
 *                  and the previous return value later
 * @return the child after 'act_child' or NULL if no more child
 */
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, const lv_obj_t * child)
{
 80068cc:	b590      	push	{r4, r7, lr}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f015 f94c 	bl	801bb74 <lv_debug_check_null>
 80068dc:	4603      	mov	r3, r0
 80068de:	f083 0301 	eor.w	r3, r3, #1
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d008      	beq.n	80068fa <lv_obj_get_child+0x2e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f04f 0400 	mov.w	r4, #0
 80068ee:	461a      	mov	r2, r3
 80068f0:	4623      	mov	r3, r4
 80068f2:	480e      	ldr	r0, [pc, #56]	; (800692c <lv_obj_get_child+0x60>)
 80068f4:	f015 f94e 	bl	801bb94 <lv_debug_log_error>
 80068f8:	e7fe      	b.n	80068f8 <lv_obj_get_child+0x2c>

    lv_obj_t * result = NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]

    if(child == NULL) {
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <lv_obj_get_child+0x46>
        result = _lv_ll_get_head(&obj->child_ll);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3304      	adds	r3, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f015 fce9 	bl	801c2e0 <_lv_ll_get_head>
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	e006      	b.n	8006920 <lv_obj_get_child+0x54>
    }
    else {
        result = _lv_ll_get_next(&obj->child_ll, child);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f015 fd07 	bl	801c32c <_lv_ll_get_next>
 800691e:	60f8      	str	r0, [r7, #12]
    }

    return result;
 8006920:	68fb      	ldr	r3, [r7, #12]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bd90      	pop	{r4, r7, pc}
 800692a:	bf00      	nop
 800692c:	0802d0b8 	.word	0x0802d0b8

08006930 <lv_obj_get_coords>:
 * Copy the coordinates of an object to an area
 * @param obj pointer to an object
 * @param cords_p pointer to an area to store the coordinates
 */
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * cords_p)
{
 8006930:	b590      	push	{r4, r7, lr}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f015 f91a 	bl	801bb74 <lv_debug_check_null>
 8006940:	4603      	mov	r3, r0
 8006942:	f083 0301 	eor.w	r3, r3, #1
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <lv_obj_get_coords+0x2e>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f04f 0400 	mov.w	r4, #0
 8006952:	461a      	mov	r2, r3
 8006954:	4623      	mov	r3, r4
 8006956:	4807      	ldr	r0, [pc, #28]	; (8006974 <lv_obj_get_coords+0x44>)
 8006958:	f015 f91c 	bl	801bb94 <lv_debug_log_error>
 800695c:	e7fe      	b.n	800695c <lv_obj_get_coords+0x2c>

    lv_area_copy(cords_p, &obj->coords);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3310      	adds	r3, #16
 8006962:	4619      	mov	r1, r3
 8006964:	6838      	ldr	r0, [r7, #0]
 8006966:	f7fd fc11 	bl	800418c <lv_area_copy>
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	bd90      	pop	{r4, r7, pc}
 8006972:	bf00      	nop
 8006974:	0802d0b8 	.word	0x0802d0b8

08006978 <lv_obj_get_x>:
 * Get the x coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the left side of its parent
 */
lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f015 f8f7 	bl	801bb74 <lv_debug_check_null>
 8006986:	4603      	mov	r3, r0
 8006988:	f083 0301 	eor.w	r3, r3, #1
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <lv_obj_get_x+0x2c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f04f 0400 	mov.w	r4, #0
 8006998:	461a      	mov	r2, r3
 800699a:	4623      	mov	r3, r4
 800699c:	480f      	ldr	r0, [pc, #60]	; (80069dc <lv_obj_get_x+0x64>)
 800699e:	f015 f8f9 	bl	801bb94 <lv_debug_log_error>
 80069a2:	e7fe      	b.n	80069a2 <lv_obj_get_x+0x2a>

    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff ff73 	bl	8006890 <lv_obj_get_parent>
 80069aa:	60b8      	str	r0, [r7, #8]
    if(parent) {
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <lv_obj_get_x+0x52>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	81fb      	strh	r3, [r7, #14]
 80069c8:	e002      	b.n	80069d0 <lv_obj_get_x+0x58>
    }
    else {
        rel_x = obj->coords.x1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8a1b      	ldrh	r3, [r3, #16]
 80069ce:	81fb      	strh	r3, [r7, #14]
    }
    return rel_x;
 80069d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd90      	pop	{r4, r7, pc}
 80069dc:	0802d0b8 	.word	0x0802d0b8

080069e0 <lv_obj_get_y>:
 * Get the y coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the top of its parent
 */
lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 80069e0:	b590      	push	{r4, r7, lr}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f015 f8c3 	bl	801bb74 <lv_debug_check_null>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f083 0301 	eor.w	r3, r3, #1
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <lv_obj_get_y+0x2c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f04f 0400 	mov.w	r4, #0
 8006a00:	461a      	mov	r2, r3
 8006a02:	4623      	mov	r3, r4
 8006a04:	480f      	ldr	r0, [pc, #60]	; (8006a44 <lv_obj_get_y+0x64>)
 8006a06:	f015 f8c5 	bl	801bb94 <lv_debug_log_error>
 8006a0a:	e7fe      	b.n	8006a0a <lv_obj_get_y+0x2a>

    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff ff3f 	bl	8006890 <lv_obj_get_parent>
 8006a12:	60b8      	str	r0, [r7, #8]
    if(parent) {
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00b      	beq.n	8006a32 <lv_obj_get_y+0x52>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	81fb      	strh	r3, [r7, #14]
 8006a30:	e002      	b.n	8006a38 <lv_obj_get_y+0x58>
    }
    else {
        rel_y = obj->coords.y1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	8a5b      	ldrh	r3, [r3, #18]
 8006a36:	81fb      	strh	r3, [r7, #14]
    }
    return rel_y;
 8006a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd90      	pop	{r4, r7, pc}
 8006a44:	0802d0b8 	.word	0x0802d0b8

08006a48 <lv_obj_get_width>:
 * Get the width of an object
 * @param obj pointer to an object
 * @return the width
 */
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f015 f88f 	bl	801bb74 <lv_debug_check_null>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f083 0301 	eor.w	r3, r3, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d008      	beq.n	8006a74 <lv_obj_get_width+0x2c>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f04f 0400 	mov.w	r4, #0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4623      	mov	r3, r4
 8006a6c:	4806      	ldr	r0, [pc, #24]	; (8006a88 <lv_obj_get_width+0x40>)
 8006a6e:	f015 f891 	bl	801bb94 <lv_debug_log_error>
 8006a72:	e7fe      	b.n	8006a72 <lv_obj_get_width+0x2a>

    return lv_area_get_width(&obj->coords);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3310      	adds	r3, #16
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fd fb95 	bl	80041a8 <lv_area_get_width>
 8006a7e:	4603      	mov	r3, r0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd90      	pop	{r4, r7, pc}
 8006a88:	0802d0b8 	.word	0x0802d0b8

08006a8c <lv_obj_get_height>:
 * Get the height of an object
 * @param obj pointer to an object
 * @return the height
 */
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 8006a8c:	b590      	push	{r4, r7, lr}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f015 f86d 	bl	801bb74 <lv_debug_check_null>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f083 0301 	eor.w	r3, r3, #1
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <lv_obj_get_height+0x2c>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f04f 0400 	mov.w	r4, #0
 8006aac:	461a      	mov	r2, r3
 8006aae:	4623      	mov	r3, r4
 8006ab0:	4806      	ldr	r0, [pc, #24]	; (8006acc <lv_obj_get_height+0x40>)
 8006ab2:	f015 f86f 	bl	801bb94 <lv_debug_log_error>
 8006ab6:	e7fe      	b.n	8006ab6 <lv_obj_get_height+0x2a>

    return lv_area_get_height(&obj->coords);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3310      	adds	r3, #16
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fd fb8a 	bl	80041d6 <lv_area_get_height>
 8006ac2:	4603      	mov	r3, r0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd90      	pop	{r4, r7, pc}
 8006acc:	0802d0b8 	.word	0x0802d0b8

08006ad0 <lv_obj_get_style_list>:
/*-----------------
 * Appearance get
 *---------------*/

lv_style_list_t * lv_obj_get_style_list(const lv_obj_t * obj, uint8_t part)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	70fb      	strb	r3, [r7, #3]
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <lv_obj_get_style_list+0x18>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3328      	adds	r3, #40	; 0x28
 8006ae6:	e012      	b.n	8006b0e <lv_obj_get_style_list+0x3e>

    lv_get_style_info_t info;
    info.part = part;
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	733b      	strb	r3, [r7, #12]
    info.result = NULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	613b      	str	r3, [r7, #16]

    lv_res_t res;
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 8006af0:	f107 030c 	add.w	r3, r7, #12
 8006af4:	461a      	mov	r2, r3
 8006af6:	2108      	movs	r1, #8
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fe0d 	bl	8006718 <lv_signal_send>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]

    if(res != LV_RES_OK) return NULL;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d001      	beq.n	8006b0c <lv_obj_get_style_list+0x3c>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e000      	b.n	8006b0e <lv_obj_get_style_list+0x3e>

    return info.result;
 8006b0c:	693b      	ldr	r3, [r7, #16]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <_lv_obj_get_style_int>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_width()`
 * @note for performance reasons it's not checked if the property really has integer type
 */
lv_style_int_t _lv_obj_get_style_int(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b088      	sub	sp, #32
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
 8006b22:	4613      	mov	r3, r2
 8006b24:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8006b26:	883b      	ldrh	r3, [r7, #0]
 8006b28:	833b      	strh	r3, [r7, #24]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 8006b2a:	8b3b      	ldrh	r3, [r7, #24]
 8006b2c:	0a1b      	lsrs	r3, r3, #8
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	75fb      	strb	r3, [r7, #23]

    lv_style_int_t value_act;
    lv_res_t res = LV_RES_INV;
 8006b32:	2300      	movs	r3, #0
 8006b34:	75bb      	strb	r3, [r7, #22]
    const lv_obj_t * parent = obj;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	61fb      	str	r3, [r7, #28]
    while(parent) {
 8006b3a:	e14a      	b.n	8006dd2 <_lv_obj_get_style_int+0x2bc>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	69f8      	ldr	r0, [r7, #28]
 8006b42:	f7ff ffc5 	bl	8006ad0 <lv_obj_get_style_list>
 8006b46:	6138      	str	r0, [r7, #16]
        if(!list->ignore_cache && list->style_cnt > 0) {
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	795b      	ldrb	r3, [r3, #5]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f040 8112 	bne.w	8006d7c <_lv_obj_get_style_int+0x266>
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	791b      	ldrb	r3, [r3, #4]
 8006b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 810a 	beq.w	8006d7c <_lv_obj_get_style_int+0x266>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	795b      	ldrb	r3, [r3, #5]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d108      	bne.n	8006b88 <_lv_obj_get_style_int+0x72>
 8006b76:	883b      	ldrh	r3, [r7, #0]
 8006b78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	4619      	mov	r1, r3
 8006b82:	69f8      	ldr	r0, [r7, #28]
 8006b84:	f002 fd4c 	bl	8009620 <update_style_cache>

            bool def = false;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	76fb      	strb	r3, [r7, #27]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8006b8c:	883b      	ldrh	r3, [r7, #0]
 8006b8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b92:	2b33      	cmp	r3, #51	; 0x33
 8006b94:	f000 8086 	beq.w	8006ca4 <_lv_obj_get_style_int+0x18e>
 8006b98:	2b33      	cmp	r3, #51	; 0x33
 8006b9a:	dc23      	bgt.n	8006be4 <_lv_obj_get_style_int+0xce>
 8006b9c:	2b13      	cmp	r3, #19
 8006b9e:	dc0f      	bgt.n	8006bc0 <_lv_obj_get_style_int+0xaa>
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	f280 80a7 	bge.w	8006cf4 <_lv_obj_get_style_int+0x1de>
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d04a      	beq.n	8006c40 <_lv_obj_get_style_int+0x12a>
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	dc03      	bgt.n	8006bb6 <_lv_obj_get_style_int+0xa0>
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	f000 808c 	beq.w	8006ccc <_lv_obj_get_style_int+0x1b6>
 8006bb4:	e0df      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
 8006bb6:	3b04      	subs	r3, #4
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	f200 80dc 	bhi.w	8006d76 <_lv_obj_get_style_int+0x260>
 8006bbe:	e053      	b.n	8006c68 <_lv_obj_get_style_int+0x152>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	f000 80ab 	beq.w	8006d1c <_lv_obj_get_style_int+0x206>
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	dc04      	bgt.n	8006bd4 <_lv_obj_get_style_int+0xbe>
 8006bca:	3b15      	subs	r3, #21
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	f200 80d2 	bhi.w	8006d76 <_lv_obj_get_style_int+0x260>
 8006bd2:	e099      	b.n	8006d08 <_lv_obj_get_style_int+0x1f2>
 8006bd4:	2b31      	cmp	r3, #49	; 0x31
 8006bd6:	d05b      	beq.n	8006c90 <_lv_obj_get_style_int+0x17a>
 8006bd8:	2b31      	cmp	r3, #49	; 0x31
 8006bda:	f300 809f 	bgt.w	8006d1c <_lv_obj_get_style_int+0x206>
 8006bde:	2b30      	cmp	r3, #48	; 0x30
 8006be0:	d04c      	beq.n	8006c7c <_lv_obj_get_style_int+0x166>
 8006be2:	e0c8      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
 8006be4:	2b72      	cmp	r3, #114	; 0x72
 8006be6:	f000 8099 	beq.w	8006d1c <_lv_obj_get_style_int+0x206>
 8006bea:	2b72      	cmp	r3, #114	; 0x72
 8006bec:	dc10      	bgt.n	8006c10 <_lv_obj_get_style_int+0xfa>
 8006bee:	2b50      	cmp	r3, #80	; 0x50
 8006bf0:	d076      	beq.n	8006ce0 <_lv_obj_get_style_int+0x1ca>
 8006bf2:	2b50      	cmp	r3, #80	; 0x50
 8006bf4:	dc05      	bgt.n	8006c02 <_lv_obj_get_style_int+0xec>
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d05e      	beq.n	8006cb8 <_lv_obj_get_style_int+0x1a2>
 8006bfa:	2b42      	cmp	r3, #66	; 0x42
 8006bfc:	f000 808e 	beq.w	8006d1c <_lv_obj_get_style_int+0x206>
 8006c00:	e0b9      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
 8006c02:	2b54      	cmp	r3, #84	; 0x54
 8006c04:	f000 808a 	beq.w	8006d1c <_lv_obj_get_style_int+0x206>
 8006c08:	2b60      	cmp	r3, #96	; 0x60
 8006c0a:	f000 8087 	beq.w	8006d1c <_lv_obj_get_style_int+0x206>
 8006c0e:	e0b2      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
 8006c10:	f248 0281 	movw	r2, #32897	; 0x8081
 8006c14:	4293      	cmp	r3, r2
 8006c16:	dc06      	bgt.n	8006c26 <_lv_obj_get_style_int+0x110>
 8006c18:	f248 0280 	movw	r2, #32896	; 0x8080
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	da19      	bge.n	8006c54 <_lv_obj_get_style_int+0x13e>
 8006c20:	2b91      	cmp	r3, #145	; 0x91
 8006c22:	d07b      	beq.n	8006d1c <_lv_obj_get_style_int+0x206>
 8006c24:	e0a7      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
 8006c26:	f248 0283 	movw	r2, #32899	; 0x8083
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d076      	beq.n	8006d1c <_lv_obj_get_style_int+0x206>
 8006c2e:	f248 0283 	movw	r2, #32899	; 0x8083
 8006c32:	4293      	cmp	r3, r2
 8006c34:	db7c      	blt.n	8006d30 <_lv_obj_get_style_int+0x21a>
 8006c36:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d06e      	beq.n	8006d1c <_lv_obj_get_style_int+0x206>
 8006c3e:	e09a      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                case LV_STYLE_CLIP_CORNER:
                    if(list->clip_corner_off) def = true;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	795b      	ldrb	r3, [r3, #5]
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d07a      	beq.n	8006d44 <_lv_obj_get_style_int+0x22e>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	76fb      	strb	r3, [r7, #27]
                    break;
 8006c52:	e077      	b.n	8006d44 <_lv_obj_get_style_int+0x22e>
                case LV_STYLE_TEXT_LETTER_SPACE:
                case LV_STYLE_TEXT_LINE_SPACE:
                    if(list->text_space_zero) def = true;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	79db      	ldrb	r3, [r3, #7]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d072      	beq.n	8006d48 <_lv_obj_get_style_int+0x232>
 8006c62:	2301      	movs	r3, #1
 8006c64:	76fb      	strb	r3, [r7, #27]
                    break;
 8006c66:	e06f      	b.n	8006d48 <_lv_obj_get_style_int+0x232>
                case LV_STYLE_TRANSFORM_ANGLE:
                case LV_STYLE_TRANSFORM_WIDTH:
                case LV_STYLE_TRANSFORM_HEIGHT:
                case LV_STYLE_TRANSFORM_ZOOM:
                    if(list->transform_all_zero) def = true;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	795b      	ldrb	r3, [r3, #5]
 8006c6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d06a      	beq.n	8006d4c <_lv_obj_get_style_int+0x236>
 8006c76:	2301      	movs	r3, #1
 8006c78:	76fb      	strb	r3, [r7, #27]
                    break;
 8006c7a:	e067      	b.n	8006d4c <_lv_obj_get_style_int+0x236>
                case LV_STYLE_BORDER_WIDTH:
                    if(list->border_width_zero) def = true;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	799b      	ldrb	r3, [r3, #6]
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d062      	beq.n	8006d50 <_lv_obj_get_style_int+0x23a>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	76fb      	strb	r3, [r7, #27]
                    break;
 8006c8e:	e05f      	b.n	8006d50 <_lv_obj_get_style_int+0x23a>
                case LV_STYLE_BORDER_SIDE:
                    if(list->border_side_full) def = true;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	799b      	ldrb	r3, [r3, #6]
 8006c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d05a      	beq.n	8006d54 <_lv_obj_get_style_int+0x23e>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	76fb      	strb	r3, [r7, #27]
                    break;
 8006ca2:	e057      	b.n	8006d54 <_lv_obj_get_style_int+0x23e>
                case LV_STYLE_BORDER_POST:
                    if(list->border_post_off) def = true;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	799b      	ldrb	r3, [r3, #6]
 8006ca8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d052      	beq.n	8006d58 <_lv_obj_get_style_int+0x242>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	76fb      	strb	r3, [r7, #27]
                    break;
 8006cb6:	e04f      	b.n	8006d58 <_lv_obj_get_style_int+0x242>
                case LV_STYLE_OUTLINE_WIDTH:
                    if(list->outline_width_zero) def = true;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	79db      	ldrb	r3, [r3, #7]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d04a      	beq.n	8006d5c <_lv_obj_get_style_int+0x246>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	76fb      	strb	r3, [r7, #27]
                    break;
 8006cca:	e047      	b.n	8006d5c <_lv_obj_get_style_int+0x246>
                case LV_STYLE_RADIUS:
                    if(list->radius_zero) def = true;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	795b      	ldrb	r3, [r3, #5]
 8006cd0:	f003 0310 	and.w	r3, r3, #16
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d042      	beq.n	8006d60 <_lv_obj_get_style_int+0x24a>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	76fb      	strb	r3, [r7, #27]
                    break;
 8006cde:	e03f      	b.n	8006d60 <_lv_obj_get_style_int+0x24a>
                case LV_STYLE_SHADOW_WIDTH:
                    if(list->shadow_width_zero) def = true;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	79db      	ldrb	r3, [r3, #7]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d03a      	beq.n	8006d64 <_lv_obj_get_style_int+0x24e>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	76fb      	strb	r3, [r7, #27]
                    break;
 8006cf2:	e037      	b.n	8006d64 <_lv_obj_get_style_int+0x24e>
                case LV_STYLE_PAD_TOP:
                case LV_STYLE_PAD_BOTTOM:
                case LV_STYLE_PAD_LEFT:
                case LV_STYLE_PAD_RIGHT:
                    if(list->pad_all_zero) def = true;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	799b      	ldrb	r3, [r3, #6]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d032      	beq.n	8006d68 <_lv_obj_get_style_int+0x252>
 8006d02:	2301      	movs	r3, #1
 8006d04:	76fb      	strb	r3, [r7, #27]
                    break;
 8006d06:	e02f      	b.n	8006d68 <_lv_obj_get_style_int+0x252>
                case LV_STYLE_MARGIN_TOP:
                case LV_STYLE_MARGIN_BOTTOM:
                case LV_STYLE_MARGIN_LEFT:
                case LV_STYLE_MARGIN_RIGHT:
                    if(list->margin_all_zero) def = true;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	799b      	ldrb	r3, [r3, #6]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d02a      	beq.n	8006d6c <_lv_obj_get_style_int+0x256>
 8006d16:	2301      	movs	r3, #1
 8006d18:	76fb      	strb	r3, [r7, #27]
                    break;
 8006d1a:	e027      	b.n	8006d6c <_lv_obj_get_style_int+0x256>
                case LV_STYLE_OUTLINE_BLEND_MODE:
                case LV_STYLE_PATTERN_BLEND_MODE:
                case LV_STYLE_SHADOW_BLEND_MODE:
                case LV_STYLE_TEXT_BLEND_MODE:
                case LV_STYLE_VALUE_BLEND_MODE:
                    if(list->blend_mode_all_normal) def = true;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	799b      	ldrb	r3, [r3, #6]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d022      	beq.n	8006d70 <_lv_obj_get_style_int+0x25a>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	76fb      	strb	r3, [r7, #27]
                    break;
 8006d2e:	e01f      	b.n	8006d70 <_lv_obj_get_style_int+0x25a>
                case LV_STYLE_TEXT_DECOR:
                    if(list->text_decor_none) def = true;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	79db      	ldrb	r3, [r3, #7]
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d01a      	beq.n	8006d74 <_lv_obj_get_style_int+0x25e>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	76fb      	strb	r3, [r7, #27]
                    break;
 8006d42:	e017      	b.n	8006d74 <_lv_obj_get_style_int+0x25e>
                    break;
 8006d44:	bf00      	nop
 8006d46:	e016      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d48:	bf00      	nop
 8006d4a:	e014      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d4c:	bf00      	nop
 8006d4e:	e012      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d50:	bf00      	nop
 8006d52:	e010      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d54:	bf00      	nop
 8006d56:	e00e      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d58:	bf00      	nop
 8006d5a:	e00c      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d5c:	bf00      	nop
 8006d5e:	e00a      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d60:	bf00      	nop
 8006d62:	e008      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d64:	bf00      	nop
 8006d66:	e006      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d68:	bf00      	nop
 8006d6a:	e004      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d6c:	bf00      	nop
 8006d6e:	e002      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d70:	bf00      	nop
 8006d72:	e000      	b.n	8006d76 <_lv_obj_get_style_int+0x260>
                    break;
 8006d74:	bf00      	nop
            }

            if(def) {
 8006d76:	7efb      	ldrb	r3, [r7, #27]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d12f      	bne.n	8006ddc <_lv_obj_get_style_int+0x2c6>
                break;
            }
        }

        lv_state_t state = lv_obj_get_state(parent, part);
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	69f8      	ldr	r0, [r7, #28]
 8006d82:	f000 fb7b 	bl	800747c <lv_obj_get_state>
 8006d86:	4603      	mov	r3, r0
 8006d88:	73fb      	strb	r3, [r7, #15]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	8b3b      	ldrh	r3, [r7, #24]
 8006d94:	4413      	add	r3, r2
 8006d96:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_int(list, prop, &value_act);
 8006d98:	f107 020c 	add.w	r2, r7, #12
 8006d9c:	883b      	ldrh	r3, [r7, #0]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6938      	ldr	r0, [r7, #16]
 8006da2:	f005 f893 	bl	800becc <_lv_style_list_get_int>
 8006da6:	4603      	mov	r3, r0
 8006da8:	75bb      	strb	r3, [r7, #22]
        if(res == LV_RES_OK) return value_act;
 8006daa:	7dbb      	ldrb	r3, [r7, #22]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d102      	bne.n	8006db6 <_lv_obj_get_style_int+0x2a0>
 8006db0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006db4:	e034      	b.n	8006e20 <_lv_obj_get_style_int+0x30a>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	da10      	bge.n	8006de0 <_lv_obj_get_style_int+0x2ca>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <_lv_obj_get_style_int+0x2b4>
            part = LV_OBJ_PART_MAIN;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	70fb      	strb	r3, [r7, #3]
            continue;
 8006dc8:	e003      	b.n	8006dd2 <_lv_obj_get_style_int+0x2bc>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 8006dca:	69f8      	ldr	r0, [r7, #28]
 8006dcc:	f7ff fd60 	bl	8006890 <lv_obj_get_parent>
 8006dd0:	61f8      	str	r0, [r7, #28]
    while(parent) {
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f47f aeb1 	bne.w	8006b3c <_lv_obj_get_style_int+0x26>
 8006dda:	e002      	b.n	8006de2 <_lv_obj_get_style_int+0x2cc>
                break;
 8006ddc:	bf00      	nop
 8006dde:	e000      	b.n	8006de2 <_lv_obj_get_style_int+0x2cc>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006de0:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 8006de2:	883b      	ldrh	r3, [r7, #0]
 8006de4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006de8:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 8006dea:	883b      	ldrh	r3, [r7, #0]
 8006dec:	2b22      	cmp	r3, #34	; 0x22
 8006dee:	d011      	beq.n	8006e14 <_lv_obj_get_style_int+0x2fe>
 8006df0:	2b22      	cmp	r3, #34	; 0x22
 8006df2:	dc04      	bgt.n	8006dfe <_lv_obj_get_style_int+0x2e8>
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d009      	beq.n	8006e0c <_lv_obj_get_style_int+0x2f6>
 8006df8:	2b07      	cmp	r3, #7
 8006dfa:	d00d      	beq.n	8006e18 <_lv_obj_get_style_int+0x302>
 8006dfc:	e00f      	b.n	8006e1e <_lv_obj_get_style_int+0x308>
 8006dfe:	2b31      	cmp	r3, #49	; 0x31
 8006e00:	d002      	beq.n	8006e08 <_lv_obj_get_style_int+0x2f2>
 8006e02:	2bc0      	cmp	r3, #192	; 0xc0
 8006e04:	d004      	beq.n	8006e10 <_lv_obj_get_style_int+0x2fa>
 8006e06:	e00a      	b.n	8006e1e <_lv_obj_get_style_int+0x308>
        case LV_STYLE_BORDER_SIDE:
            return LV_BORDER_SIDE_FULL;
 8006e08:	230f      	movs	r3, #15
 8006e0a:	e009      	b.n	8006e20 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_SIZE:
            return LV_DPI / 20;
 8006e0c:	2306      	movs	r3, #6
 8006e0e:	e007      	b.n	8006e20 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_SCALE_WIDTH:
            return LV_DPI / 8;
 8006e10:	2310      	movs	r3, #16
 8006e12:	e005      	b.n	8006e20 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_BG_GRAD_STOP:
            return 255;
 8006e14:	23ff      	movs	r3, #255	; 0xff
 8006e16:	e003      	b.n	8006e20 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_TRANSFORM_ZOOM:
            return LV_IMG_ZOOM_NONE;
 8006e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e1c:	e000      	b.n	8006e20 <_lv_obj_get_style_int+0x30a>
    }

    return 0;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <_lv_obj_get_style_color>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_color()`
 * @note for performance reasons it's not checked if the property really has color type
 */
lv_color_t _lv_obj_get_style_color(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8006e28:	b590      	push	{r4, r7, lr}
 8006e2a:	b089      	sub	sp, #36	; 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
 8006e34:	4613      	mov	r3, r2
 8006e36:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8006e38:	883b      	ldrh	r3, [r7, #0]
 8006e3a:	837b      	strh	r3, [r7, #26]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 8006e3c:	8b7b      	ldrh	r3, [r7, #26]
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	767b      	strb	r3, [r7, #25]

    lv_color_t value_act;
    lv_res_t res = LV_RES_INV;
 8006e44:	2300      	movs	r3, #0
 8006e46:	763b      	strb	r3, [r7, #24]
    const lv_obj_t * parent = obj;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	61fb      	str	r3, [r7, #28]
    while(parent) {
 8006e4c:	e02f      	b.n	8006eae <_lv_obj_get_style_color+0x86>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	4619      	mov	r1, r3
 8006e52:	69f8      	ldr	r0, [r7, #28]
 8006e54:	f7ff fe3c 	bl	8006ad0 <lv_obj_get_style_list>
 8006e58:	6178      	str	r0, [r7, #20]

        lv_state_t state = lv_obj_get_state(parent, part);
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	69f8      	ldr	r0, [r7, #28]
 8006e60:	f000 fb0c 	bl	800747c <lv_obj_get_state>
 8006e64:	4603      	mov	r3, r0
 8006e66:	74fb      	strb	r3, [r7, #19]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8006e68:	7cfb      	ldrb	r3, [r7, #19]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	8b7b      	ldrh	r3, [r7, #26]
 8006e72:	4413      	add	r3, r2
 8006e74:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_color(list, prop, &value_act);
 8006e76:	f107 020c 	add.w	r2, r7, #12
 8006e7a:	883b      	ldrh	r3, [r7, #0]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6978      	ldr	r0, [r7, #20]
 8006e80:	f005 f8a2 	bl	800bfc8 <_lv_style_list_get_color>
 8006e84:	4603      	mov	r3, r0
 8006e86:	763b      	strb	r3, [r7, #24]
        if(res == LV_RES_OK) return value_act;
 8006e88:	7e3b      	ldrb	r3, [r7, #24]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <_lv_obj_get_style_color+0x6a>
 8006e8e:	68fc      	ldr	r4, [r7, #12]
 8006e90:	e030      	b.n	8006ef4 <_lv_obj_get_style_color+0xcc>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006e92:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da0d      	bge.n	8006eb6 <_lv_obj_get_style_color+0x8e>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <_lv_obj_get_style_color+0x7e>
            part = LV_OBJ_PART_MAIN;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	70fb      	strb	r3, [r7, #3]
            continue;
 8006ea4:	e003      	b.n	8006eae <_lv_obj_get_style_color+0x86>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 8006ea6:	69f8      	ldr	r0, [r7, #28]
 8006ea8:	f7ff fcf2 	bl	8006890 <lv_obj_get_parent>
 8006eac:	61f8      	str	r0, [r7, #28]
    while(parent) {
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1cc      	bne.n	8006e4e <_lv_obj_get_style_color+0x26>
 8006eb4:	e000      	b.n	8006eb8 <_lv_obj_get_style_color+0x90>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006eb6:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 8006eb8:	883b      	ldrh	r3, [r7, #0]
 8006eba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ebe:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 8006ec0:	883b      	ldrh	r3, [r7, #0]
 8006ec2:	3b29      	subs	r3, #41	; 0x29
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d80c      	bhi.n	8006ee2 <_lv_obj_get_style_color+0xba>
        case LV_STYLE_BG_COLOR:
        case LV_STYLE_BG_GRAD_COLOR:
            return LV_COLOR_WHITE;
 8006ec8:	4623      	mov	r3, r4
 8006eca:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 8006ece:	4623      	mov	r3, r4
 8006ed0:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 8006ed4:	4623      	mov	r3, r4
 8006ed6:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 8006eda:	4623      	mov	r3, r4
 8006edc:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8006ee0:	e008      	b.n	8006ef4 <_lv_obj_get_style_color+0xcc>
    }

    return LV_COLOR_BLACK;
 8006ee2:	f36f 0407 	bfc	r4, #0, #8
 8006ee6:	f36f 240f 	bfc	r4, #8, #8
 8006eea:	f36f 4417 	bfc	r4, #16, #8
 8006eee:	4623      	mov	r3, r4
 8006ef0:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8006ef4:	4623      	mov	r3, r4
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3724      	adds	r7, #36	; 0x24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd90      	pop	{r4, r7, pc}

08006efe <_lv_obj_get_style_opa>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_opa()`
 * @note for performance reasons it's not checked if the property really has opacity type
 */
lv_opa_t _lv_obj_get_style_opa(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b088      	sub	sp, #32
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	70fb      	strb	r3, [r7, #3]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8006f0e:	883b      	ldrh	r3, [r7, #0]
 8006f10:	833b      	strh	r3, [r7, #24]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 8006f12:	8b3b      	ldrh	r3, [r7, #24]
 8006f14:	0a1b      	lsrs	r3, r3, #8
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	75fb      	strb	r3, [r7, #23]

    lv_opa_t value_act;
    lv_res_t res = LV_RES_INV;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	75bb      	strb	r3, [r7, #22]
    const lv_obj_t * parent = obj;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	61fb      	str	r3, [r7, #28]
    while(parent) {
 8006f22:	e08c      	b.n	800703e <_lv_obj_get_style_opa+0x140>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	4619      	mov	r1, r3
 8006f28:	69f8      	ldr	r0, [r7, #28]
 8006f2a:	f7ff fdd1 	bl	8006ad0 <lv_obj_get_style_list>
 8006f2e:	6138      	str	r0, [r7, #16]

        if(!list->ignore_cache && list->style_cnt > 0) {
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	795b      	ldrb	r3, [r3, #5]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d155      	bne.n	8006fea <_lv_obj_get_style_opa+0xec>
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	791b      	ldrb	r3, [r3, #4]
 8006f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d04e      	beq.n	8006fea <_lv_obj_get_style_opa+0xec>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	795b      	ldrb	r3, [r3, #5]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d108      	bne.n	8006f6c <_lv_obj_get_style_opa+0x6e>
 8006f5a:	883b      	ldrh	r3, [r7, #0]
 8006f5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	4619      	mov	r1, r3
 8006f66:	69f8      	ldr	r0, [r7, #28]
 8006f68:	f002 fb5a 	bl	8009620 <update_style_cache>
            bool def = false;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	76fb      	strb	r3, [r7, #27]
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 8006f70:	883b      	ldrh	r3, [r7, #0]
 8006f72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f76:	f248 020c 	movw	r2, #32780	; 0x800c
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d006      	beq.n	8006f8c <_lv_obj_get_style_opa+0x8e>
 8006f7e:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d01f      	beq.n	8006fc6 <_lv_obj_get_style_opa+0xc8>
 8006f86:	2b2c      	cmp	r3, #44	; 0x2c
 8006f88:	d00a      	beq.n	8006fa0 <_lv_obj_get_style_opa+0xa2>
 8006f8a:	e02b      	b.n	8006fe4 <_lv_obj_get_style_opa+0xe6>
                case LV_STYLE_OPA_SCALE:
                    if(list->opa_scale_cover) def = true;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	795b      	ldrb	r3, [r3, #5]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d01f      	beq.n	8006fda <_lv_obj_get_style_opa+0xdc>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	76fb      	strb	r3, [r7, #27]
                    break;
 8006f9e:	e01c      	b.n	8006fda <_lv_obj_get_style_opa+0xdc>
                case LV_STYLE_BG_OPA:
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	799b      	ldrb	r3, [r3, #6]
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <_lv_obj_get_style_opa+0xb4>
 8006fae:	23ff      	movs	r3, #255	; 0xff
 8006fb0:	e05d      	b.n	800706e <_lv_obj_get_style_opa+0x170>
                    if(list->bg_opa_transp) def = true;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	799b      	ldrb	r3, [r3, #6]
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00e      	beq.n	8006fde <_lv_obj_get_style_opa+0xe0>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	76fb      	strb	r3, [r7, #27]
                    break;
 8006fc4:	e00b      	b.n	8006fde <_lv_obj_get_style_opa+0xe0>
                case LV_STYLE_IMAGE_RECOLOR_OPA:
                    if(list->img_recolor_opa_transp) def = true;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	79db      	ldrb	r3, [r3, #7]
 8006fca:	f003 0310 	and.w	r3, r3, #16
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d006      	beq.n	8006fe2 <_lv_obj_get_style_opa+0xe4>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	76fb      	strb	r3, [r7, #27]
                    break;
 8006fd8:	e003      	b.n	8006fe2 <_lv_obj_get_style_opa+0xe4>
                    break;
 8006fda:	bf00      	nop
 8006fdc:	e002      	b.n	8006fe4 <_lv_obj_get_style_opa+0xe6>
                    break;
 8006fde:	bf00      	nop
 8006fe0:	e000      	b.n	8006fe4 <_lv_obj_get_style_opa+0xe6>
                    break;
 8006fe2:	bf00      	nop
            }

            if(def) {
 8006fe4:	7efb      	ldrb	r3, [r7, #27]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d12e      	bne.n	8007048 <_lv_obj_get_style_opa+0x14a>
                break;
            }
        }

        lv_state_t state = lv_obj_get_state(parent, part);
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	4619      	mov	r1, r3
 8006fee:	69f8      	ldr	r0, [r7, #28]
 8006ff0:	f000 fa44 	bl	800747c <lv_obj_get_state>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	8b3b      	ldrh	r3, [r7, #24]
 8007002:	4413      	add	r3, r2
 8007004:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_opa(list, prop, &value_act);
 8007006:	f107 020e 	add.w	r2, r7, #14
 800700a:	883b      	ldrh	r3, [r7, #0]
 800700c:	4619      	mov	r1, r3
 800700e:	6938      	ldr	r0, [r7, #16]
 8007010:	f005 f857 	bl	800c0c2 <_lv_style_list_get_opa>
 8007014:	4603      	mov	r3, r0
 8007016:	75bb      	strb	r3, [r7, #22]
        if(res == LV_RES_OK) return value_act;
 8007018:	7dbb      	ldrb	r3, [r7, #22]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <_lv_obj_get_style_opa+0x124>
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	e025      	b.n	800706e <_lv_obj_get_style_opa+0x170>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8007022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007026:	2b00      	cmp	r3, #0
 8007028:	da10      	bge.n	800704c <_lv_obj_get_style_opa+0x14e>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <_lv_obj_get_style_opa+0x138>
            part = LV_OBJ_PART_MAIN;
 8007030:	2300      	movs	r3, #0
 8007032:	70fb      	strb	r3, [r7, #3]
            continue;
 8007034:	e003      	b.n	800703e <_lv_obj_get_style_opa+0x140>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 8007036:	69f8      	ldr	r0, [r7, #28]
 8007038:	f7ff fc2a 	bl	8006890 <lv_obj_get_parent>
 800703c:	61f8      	str	r0, [r7, #28]
    while(parent) {
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f47f af6f 	bne.w	8006f24 <_lv_obj_get_style_opa+0x26>
 8007046:	e002      	b.n	800704e <_lv_obj_get_style_opa+0x150>
                break;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <_lv_obj_get_style_opa+0x150>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 800704c:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 800704e:	883b      	ldrh	r3, [r7, #0]
 8007050:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007054:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 8007056:	883b      	ldrh	r3, [r7, #0]
 8007058:	2b6d      	cmp	r3, #109	; 0x6d
 800705a:	d005      	beq.n	8007068 <_lv_obj_get_style_opa+0x16a>
 800705c:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8007060:	4293      	cmp	r3, r2
 8007062:	d001      	beq.n	8007068 <_lv_obj_get_style_opa+0x16a>
 8007064:	2b2c      	cmp	r3, #44	; 0x2c
 8007066:	d101      	bne.n	800706c <_lv_obj_get_style_opa+0x16e>
        case LV_STYLE_BG_OPA:
        case LV_STYLE_IMAGE_RECOLOR_OPA:
        case LV_STYLE_PATTERN_RECOLOR_OPA:
            return LV_OPA_TRANSP;
 8007068:	2300      	movs	r3, #0
 800706a:	e000      	b.n	800706e <_lv_obj_get_style_opa+0x170>
    }

    return LV_OPA_COVER;
 800706c:	23ff      	movs	r3, #255	; 0xff
}
 800706e:	4618      	mov	r0, r3
 8007070:	3720      	adds	r7, #32
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <_lv_obj_get_style_ptr>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_opa()`
 * @note for performance reasons it's not checked if the property really has pointer type
 */
const void * _lv_obj_get_style_ptr(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	70fb      	strb	r3, [r7, #3]
 8007084:	4613      	mov	r3, r2
 8007086:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8007088:	883b      	ldrh	r3, [r7, #0]
 800708a:	833b      	strh	r3, [r7, #24]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 800708c:	8b3b      	ldrh	r3, [r7, #24]
 800708e:	0a1b      	lsrs	r3, r3, #8
 8007090:	b29b      	uxth	r3, r3
 8007092:	75fb      	strb	r3, [r7, #23]

    const void * value_act;
    lv_res_t res = LV_RES_INV;
 8007094:	2300      	movs	r3, #0
 8007096:	75bb      	strb	r3, [r7, #22]
    const lv_obj_t * parent = obj;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	61fb      	str	r3, [r7, #28]
    while(parent) {
 800709c:	e081      	b.n	80071a2 <_lv_obj_get_style_ptr+0x12a>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	4619      	mov	r1, r3
 80070a2:	69f8      	ldr	r0, [r7, #28]
 80070a4:	f7ff fd14 	bl	8006ad0 <lv_obj_get_style_list>
 80070a8:	6138      	str	r0, [r7, #16]

        if(!list->ignore_cache && list->style_cnt > 0) {
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	795b      	ldrb	r3, [r3, #5]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d14a      	bne.n	800714e <_lv_obj_get_style_ptr+0xd6>
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	791b      	ldrb	r3, [r3, #4]
 80070bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d043      	beq.n	800714e <_lv_obj_get_style_ptr+0xd6>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	795b      	ldrb	r3, [r3, #5]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d108      	bne.n	80070e6 <_lv_obj_get_style_ptr+0x6e>
 80070d4:	883b      	ldrh	r3, [r7, #0]
 80070d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070da:	b29a      	uxth	r2, r3
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	4619      	mov	r1, r3
 80070e0:	69f8      	ldr	r0, [r7, #28]
 80070e2:	f002 fa9d 	bl	8009620 <update_style_cache>
            bool def = false;
 80070e6:	2300      	movs	r3, #0
 80070e8:	76fb      	strb	r3, [r7, #27]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80070ea:	883b      	ldrh	r3, [r7, #0]
 80070ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070f0:	2b7f      	cmp	r3, #127	; 0x7f
 80070f2:	d006      	beq.n	8007102 <_lv_obj_get_style_ptr+0x8a>
 80070f4:	f248 028e 	movw	r2, #32910	; 0x808e
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d016      	beq.n	800712a <_lv_obj_get_style_ptr+0xb2>
 80070fc:	2b6e      	cmp	r3, #110	; 0x6e
 80070fe:	d00a      	beq.n	8007116 <_lv_obj_get_style_ptr+0x9e>
 8007100:	e022      	b.n	8007148 <_lv_obj_get_style_ptr+0xd0>
                case LV_STYLE_VALUE_STR:
                    if(list->value_txt_str) def = true;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	79db      	ldrb	r3, [r3, #7]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d016      	beq.n	800713e <_lv_obj_get_style_ptr+0xc6>
 8007110:	2301      	movs	r3, #1
 8007112:	76fb      	strb	r3, [r7, #27]
                    break;
 8007114:	e013      	b.n	800713e <_lv_obj_get_style_ptr+0xc6>
                case LV_STYLE_PATTERN_IMAGE:
                    if(list->pattern_img_null) def = true;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	79db      	ldrb	r3, [r3, #7]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00e      	beq.n	8007142 <_lv_obj_get_style_ptr+0xca>
 8007124:	2301      	movs	r3, #1
 8007126:	76fb      	strb	r3, [r7, #27]
                    break;
 8007128:	e00b      	b.n	8007142 <_lv_obj_get_style_ptr+0xca>
                case LV_STYLE_TEXT_FONT:
                    if(list->text_font_normal) def = true;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	79db      	ldrb	r3, [r3, #7]
 800712e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d006      	beq.n	8007146 <_lv_obj_get_style_ptr+0xce>
 8007138:	2301      	movs	r3, #1
 800713a:	76fb      	strb	r3, [r7, #27]
                    break;
 800713c:	e003      	b.n	8007146 <_lv_obj_get_style_ptr+0xce>
                    break;
 800713e:	bf00      	nop
 8007140:	e002      	b.n	8007148 <_lv_obj_get_style_ptr+0xd0>
                    break;
 8007142:	bf00      	nop
 8007144:	e000      	b.n	8007148 <_lv_obj_get_style_ptr+0xd0>
                    break;
 8007146:	bf00      	nop
            }

            if(def) {
 8007148:	7efb      	ldrb	r3, [r7, #27]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d12e      	bne.n	80071ac <_lv_obj_get_style_ptr+0x134>
                break;
            }
        }

        lv_state_t state = lv_obj_get_state(parent, part);
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	4619      	mov	r1, r3
 8007152:	69f8      	ldr	r0, [r7, #28]
 8007154:	f000 f992 	bl	800747c <lv_obj_get_state>
 8007158:	4603      	mov	r3, r0
 800715a:	73fb      	strb	r3, [r7, #15]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	b29b      	uxth	r3, r3
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	b29a      	uxth	r2, r3
 8007164:	8b3b      	ldrh	r3, [r7, #24]
 8007166:	4413      	add	r3, r2
 8007168:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_ptr(list, prop, &value_act);
 800716a:	f107 0208 	add.w	r2, r7, #8
 800716e:	883b      	ldrh	r3, [r7, #0]
 8007170:	4619      	mov	r1, r3
 8007172:	6938      	ldr	r0, [r7, #16]
 8007174:	f005 f820 	bl	800c1b8 <_lv_style_list_get_ptr>
 8007178:	4603      	mov	r3, r0
 800717a:	75bb      	strb	r3, [r7, #22]
        if(res == LV_RES_OK)  return value_act;
 800717c:	7dbb      	ldrb	r3, [r7, #22]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <_lv_obj_get_style_ptr+0x10e>
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	e029      	b.n	80071da <_lv_obj_get_style_ptr+0x162>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8007186:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800718a:	2b00      	cmp	r3, #0
 800718c:	da10      	bge.n	80071b0 <_lv_obj_get_style_ptr+0x138>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <_lv_obj_get_style_ptr+0x122>
            part = LV_OBJ_PART_MAIN;
 8007194:	2300      	movs	r3, #0
 8007196:	70fb      	strb	r3, [r7, #3]
            continue;
 8007198:	e003      	b.n	80071a2 <_lv_obj_get_style_ptr+0x12a>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 800719a:	69f8      	ldr	r0, [r7, #28]
 800719c:	f7ff fb78 	bl	8006890 <lv_obj_get_parent>
 80071a0:	61f8      	str	r0, [r7, #28]
    while(parent) {
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f47f af7a 	bne.w	800709e <_lv_obj_get_style_ptr+0x26>
 80071aa:	e002      	b.n	80071b2 <_lv_obj_get_style_ptr+0x13a>
                break;
 80071ac:	bf00      	nop
 80071ae:	e000      	b.n	80071b2 <_lv_obj_get_style_ptr+0x13a>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 80071b0:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 80071b2:	883b      	ldrh	r3, [r7, #0]
 80071b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071b8:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 80071ba:	883b      	ldrh	r3, [r7, #0]
 80071bc:	2bbe      	cmp	r3, #190	; 0xbe
 80071be:	d009      	beq.n	80071d4 <_lv_obj_get_style_ptr+0x15c>
 80071c0:	f248 028e 	movw	r2, #32910	; 0x808e
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d001      	beq.n	80071cc <_lv_obj_get_style_ptr+0x154>
 80071c8:	2b7e      	cmp	r3, #126	; 0x7e
 80071ca:	d105      	bne.n	80071d8 <_lv_obj_get_style_ptr+0x160>
        case LV_STYLE_TEXT_FONT:
        case LV_STYLE_VALUE_FONT:
            return lv_theme_get_font_normal();
 80071cc:	f017 f904 	bl	801e3d8 <lv_theme_get_font_normal>
 80071d0:	4603      	mov	r3, r0
 80071d2:	e002      	b.n	80071da <_lv_obj_get_style_ptr+0x162>
#if LV_USE_ANIMATION
        case LV_STYLE_TRANSITION_PATH:
            return &lv_anim_path_def;
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <_lv_obj_get_style_ptr+0x16c>)
 80071d6:	e000      	b.n	80071da <_lv_obj_get_style_ptr+0x162>
#endif
    }

    return NULL;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3720      	adds	r7, #32
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	080307e0 	.word	0x080307e0

080071e8 <lv_obj_get_hidden>:
 * Get the hidden attribute of an object
 * @param obj pointer to an object
 * @return true: the object is hidden
 */
bool lv_obj_get_hidden(const lv_obj_t * obj)
{
 80071e8:	b590      	push	{r4, r7, lr}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f014 fcbf 	bl	801bb74 <lv_debug_check_null>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f083 0301 	eor.w	r3, r3, #1
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d008      	beq.n	8007214 <lv_obj_get_hidden+0x2c>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f04f 0400 	mov.w	r4, #0
 8007208:	461a      	mov	r2, r3
 800720a:	4623      	mov	r3, r4
 800720c:	4809      	ldr	r0, [pc, #36]	; (8007234 <lv_obj_get_hidden+0x4c>)
 800720e:	f014 fcc1 	bl	801bb94 <lv_debug_log_error>
 8007212:	e7fe      	b.n	8007212 <lv_obj_get_hidden+0x2a>

    return obj->hidden == 0 ? false : true;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	bf14      	ite	ne
 8007224:	2301      	movne	r3, #1
 8007226:	2300      	moveq	r3, #0
 8007228:	b2db      	uxtb	r3, r3
}
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	bd90      	pop	{r4, r7, pc}
 8007232:	bf00      	nop
 8007234:	0802d0b8 	.word	0x0802d0b8

08007238 <lv_obj_get_click>:
 * Get the click enable attribute of an object
 * @param obj pointer to an object
 * @return true: the object is clickable
 */
bool lv_obj_get_click(const lv_obj_t * obj)
{
 8007238:	b590      	push	{r4, r7, lr}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f014 fc97 	bl	801bb74 <lv_debug_check_null>
 8007246:	4603      	mov	r3, r0
 8007248:	f083 0301 	eor.w	r3, r3, #1
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d008      	beq.n	8007264 <lv_obj_get_click+0x2c>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f04f 0400 	mov.w	r4, #0
 8007258:	461a      	mov	r2, r3
 800725a:	4623      	mov	r3, r4
 800725c:	4809      	ldr	r0, [pc, #36]	; (8007284 <lv_obj_get_click+0x4c>)
 800725e:	f014 fc99 	bl	801bb94 <lv_debug_log_error>
 8007262:	e7fe      	b.n	8007262 <lv_obj_get_click+0x2a>

    return obj->click == 0 ? false : true;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	bf14      	ite	ne
 8007274:	2301      	movne	r3, #1
 8007276:	2300      	moveq	r3, #0
 8007278:	b2db      	uxtb	r3, r3
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bd90      	pop	{r4, r7, pc}
 8007282:	bf00      	nop
 8007284:	0802d0b8 	.word	0x0802d0b8

08007288 <lv_obj_get_drag>:
 * Get the drag enable attribute of an object
 * @param obj pointer to an object
 * @return true: the object is draggable
 */
bool lv_obj_get_drag(const lv_obj_t * obj)
{
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f014 fc6f 	bl	801bb74 <lv_debug_check_null>
 8007296:	4603      	mov	r3, r0
 8007298:	f083 0301 	eor.w	r3, r3, #1
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <lv_obj_get_drag+0x2c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f04f 0400 	mov.w	r4, #0
 80072a8:	461a      	mov	r2, r3
 80072aa:	4623      	mov	r3, r4
 80072ac:	4809      	ldr	r0, [pc, #36]	; (80072d4 <lv_obj_get_drag+0x4c>)
 80072ae:	f014 fc71 	bl	801bb94 <lv_debug_log_error>
 80072b2:	e7fe      	b.n	80072b2 <lv_obj_get_drag+0x2a>

    return obj->drag == 0 ? false : true;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bf14      	ite	ne
 80072c4:	2301      	movne	r3, #1
 80072c6:	2300      	moveq	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd90      	pop	{r4, r7, pc}
 80072d2:	bf00      	nop
 80072d4:	0802d0b8 	.word	0x0802d0b8

080072d8 <lv_obj_get_drag_dir>:
 * Get the directions an object can be dragged
 * @param obj pointer to an object
 * @return bitwise OR of allowed directions an object can be dragged in
 */
lv_drag_dir_t lv_obj_get_drag_dir(const lv_obj_t * obj)
{
 80072d8:	b590      	push	{r4, r7, lr}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f014 fc47 	bl	801bb74 <lv_debug_check_null>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f083 0301 	eor.w	r3, r3, #1
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d008      	beq.n	8007304 <lv_obj_get_drag_dir+0x2c>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f04f 0400 	mov.w	r4, #0
 80072f8:	461a      	mov	r2, r3
 80072fa:	4623      	mov	r3, r4
 80072fc:	4806      	ldr	r0, [pc, #24]	; (8007318 <lv_obj_get_drag_dir+0x40>)
 80072fe:	f014 fc49 	bl	801bb94 <lv_debug_log_error>
 8007302:	e7fe      	b.n	8007302 <lv_obj_get_drag_dir+0x2a>

    return obj->drag_dir;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800730a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800730e:	b2db      	uxtb	r3, r3
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	bd90      	pop	{r4, r7, pc}
 8007318:	0802d0b8 	.word	0x0802d0b8

0800731c <lv_obj_get_drag_throw>:
 * Get the drag throw enable attribute of an object
 * @param obj pointer to an object
 * @return true: drag throw is enabled
 */
bool lv_obj_get_drag_throw(const lv_obj_t * obj)
{
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f014 fc25 	bl	801bb74 <lv_debug_check_null>
 800732a:	4603      	mov	r3, r0
 800732c:	f083 0301 	eor.w	r3, r3, #1
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d008      	beq.n	8007348 <lv_obj_get_drag_throw+0x2c>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f04f 0400 	mov.w	r4, #0
 800733c:	461a      	mov	r2, r3
 800733e:	4623      	mov	r3, r4
 8007340:	4809      	ldr	r0, [pc, #36]	; (8007368 <lv_obj_get_drag_throw+0x4c>)
 8007342:	f014 fc27 	bl	801bb94 <lv_debug_log_error>
 8007346:	e7fe      	b.n	8007346 <lv_obj_get_drag_throw+0x2a>

    return obj->drag_throw == 0 ? false : true;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	bf14      	ite	ne
 8007358:	2301      	movne	r3, #1
 800735a:	2300      	moveq	r3, #0
 800735c:	b2db      	uxtb	r3, r3
}
 800735e:	4618      	mov	r0, r3
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	bd90      	pop	{r4, r7, pc}
 8007366:	bf00      	nop
 8007368:	0802d0b8 	.word	0x0802d0b8

0800736c <lv_obj_get_drag_parent>:
 * Get the drag parent attribute of an object
 * @param obj pointer to an object
 * @return true: drag parent is enabled
 */
bool lv_obj_get_drag_parent(const lv_obj_t * obj)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
    return obj->drag_parent == 0 ? false : true;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf14      	ite	ne
 8007384:	2301      	movne	r3, #1
 8007386:	2300      	moveq	r3, #0
 8007388:	b2db      	uxtb	r3, r3
}
 800738a:	4618      	mov	r0, r3
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <lv_obj_get_gesture_parent>:
* Get the gesture parent attribute of an object
* @param obj pointer to an object
* @return true: gesture parent is enabled
*/
bool lv_obj_get_gesture_parent(const lv_obj_t * obj)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
    return obj->gesture_parent == 0 ? false : true;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bf14      	ite	ne
 80073ae:	2301      	movne	r3, #1
 80073b0:	2300      	moveq	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <lv_obj_get_focus_parent>:
* Get the focus parent attribute of an object
* @param obj pointer to an object
* @return true: focus parent is enabled
*/
bool lv_obj_get_focus_parent(const lv_obj_t * obj)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
    return obj->focus_parent == 0 ? false : true;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
}
 80073de:	4618      	mov	r0, r3
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <lv_obj_get_base_dir>:

    return obj->parent_event == 0 ? false : true;
}

lv_bidi_dir_t lv_obj_get_base_dir(const lv_obj_t * obj)
{
 80073ec:	b590      	push	{r4, r7, lr}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f014 fbbd 	bl	801bb74 <lv_debug_check_null>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f083 0301 	eor.w	r3, r3, #1
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d008      	beq.n	8007418 <lv_obj_get_base_dir+0x2c>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f04f 0400 	mov.w	r4, #0
 800740c:	461a      	mov	r2, r3
 800740e:	4623      	mov	r3, r4
 8007410:	4804      	ldr	r0, [pc, #16]	; (8007424 <lv_obj_get_base_dir+0x38>)
 8007412:	f014 fbbf 	bl	801bb94 <lv_debug_log_error>
 8007416:	e7fe      	b.n	8007416 <lv_obj_get_base_dir+0x2a>
    }

    return LV_BIDI_BASE_DIR_DEF;
#else
    (void) obj;  /*Unused*/
    return LV_BIDI_DIR_LTR;
 8007418:	2300      	movs	r3, #0
#endif
}
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	bd90      	pop	{r4, r7, pc}
 8007422:	bf00      	nop
 8007424:	0802d0b8 	.word	0x0802d0b8

08007428 <lv_obj_is_protected>:
 * @param obj pointer to an object
 * @param prot protect bits to test ('OR'ed values of `lv_protect_t`)
 * @return false: none of the given bits are set, true: at least one bit is set
 */
bool lv_obj_is_protected(const lv_obj_t * obj, uint8_t prot)
{
 8007428:	b590      	push	{r4, r7, lr}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f014 fb9d 	bl	801bb74 <lv_debug_check_null>
 800743a:	4603      	mov	r3, r0
 800743c:	f083 0301 	eor.w	r3, r3, #1
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d008      	beq.n	8007458 <lv_obj_is_protected+0x30>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f04f 0400 	mov.w	r4, #0
 800744c:	461a      	mov	r2, r3
 800744e:	4623      	mov	r3, r4
 8007450:	4809      	ldr	r0, [pc, #36]	; (8007478 <lv_obj_is_protected+0x50>)
 8007452:	f014 fb9f 	bl	801bb94 <lv_debug_log_error>
 8007456:	e7fe      	b.n	8007456 <lv_obj_is_protected+0x2e>

    return (obj->protect & prot) == 0 ? false : true;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	4013      	ands	r3, r2
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	bf14      	ite	ne
 8007468:	2301      	movne	r3, #1
 800746a:	2300      	moveq	r3, #0
 800746c:	b2db      	uxtb	r3, r3
}
 800746e:	4618      	mov	r0, r3
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	bd90      	pop	{r4, r7, pc}
 8007476:	bf00      	nop
 8007478:	0802d0b8 	.word	0x0802d0b8

0800747c <lv_obj_get_state>:

lv_state_t lv_obj_get_state(const lv_obj_t * obj, uint8_t part)
{
 800747c:	b590      	push	{r4, r7, lr}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f014 fb73 	bl	801bb74 <lv_debug_check_null>
 800748e:	4603      	mov	r3, r0
 8007490:	f083 0301 	eor.w	r3, r3, #1
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d008      	beq.n	80074ac <lv_obj_get_state+0x30>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f04f 0400 	mov.w	r4, #0
 80074a0:	461a      	mov	r2, r3
 80074a2:	4623      	mov	r3, r4
 80074a4:	480d      	ldr	r0, [pc, #52]	; (80074dc <lv_obj_get_state+0x60>)
 80074a6:	f014 fb75 	bl	801bb94 <lv_debug_log_error>
 80074aa:	e7fe      	b.n	80074aa <lv_obj_get_state+0x2e>

    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	2b3f      	cmp	r3, #63	; 0x3f
 80074b0:	d803      	bhi.n	80074ba <lv_obj_get_state+0x3e>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b8:	e00b      	b.n	80074d2 <lv_obj_get_state+0x56>

    /*If a real part is asked, then use the object's signal to get its state.
     * A real object can be in different state then the main part
     * and only the object itself knows who to get it's state. */
    lv_get_state_info_t info;
    info.part = part;
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	733b      	strb	r3, [r7, #12]
    info.result = LV_STATE_DEFAULT;
 80074be:	2300      	movs	r3, #0
 80074c0:	737b      	strb	r3, [r7, #13]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 80074c2:	f107 030c 	add.w	r3, r7, #12
 80074c6:	461a      	mov	r2, r3
 80074c8:	2109      	movs	r1, #9
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff f924 	bl	8006718 <lv_signal_send>

    return info.result;
 80074d0:	7b7b      	ldrb	r3, [r7, #13]

}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd90      	pop	{r4, r7, pc}
 80074da:	bf00      	nop
 80074dc:	0802d0b8 	.word	0x0802d0b8

080074e0 <lv_obj_get_group>:
 * Get the group of the object
 * @param obj pointer to an object
 * @return the pointer to group of the object
 */
void * lv_obj_get_group(const lv_obj_t * obj)
{
 80074e0:	b590      	push	{r4, r7, lr}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f014 fb43 	bl	801bb74 <lv_debug_check_null>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f083 0301 	eor.w	r3, r3, #1
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d008      	beq.n	800750c <lv_obj_get_group+0x2c>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f04f 0400 	mov.w	r4, #0
 8007500:	461a      	mov	r2, r3
 8007502:	4623      	mov	r3, r4
 8007504:	4804      	ldr	r0, [pc, #16]	; (8007518 <lv_obj_get_group+0x38>)
 8007506:	f014 fb45 	bl	801bb94 <lv_debug_log_error>
 800750a:	e7fe      	b.n	800750a <lv_obj_get_group+0x2a>

#if LV_USE_GROUP
    return obj->group_p;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
#else
    LV_UNUSED(obj);
    return NULL;
#endif
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	bd90      	pop	{r4, r7, pc}
 8007518:	0802d0b8 	.word	0x0802d0b8

0800751c <lv_obj_is_focused>:
 * Tell whether the object is the focused object of a group or not.
 * @param obj pointer to an object
 * @return true: the object is focused, false: the object is not focused or not in a group
 */
bool lv_obj_is_focused(const lv_obj_t * obj)
{
 800751c:	b590      	push	{r4, r7, lr}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f014 fb25 	bl	801bb74 <lv_debug_check_null>
 800752a:	4603      	mov	r3, r0
 800752c:	f083 0301 	eor.w	r3, r3, #1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <lv_obj_is_focused+0x2c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f04f 0400 	mov.w	r4, #0
 800753c:	461a      	mov	r2, r3
 800753e:	4623      	mov	r3, r4
 8007540:	480b      	ldr	r0, [pc, #44]	; (8007570 <lv_obj_is_focused+0x54>)
 8007542:	f014 fb27 	bl	801bb94 <lv_debug_log_error>
 8007546:	e7fe      	b.n	8007546 <lv_obj_is_focused+0x2a>

#if LV_USE_GROUP
    if(obj->group_p) {
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <lv_obj_is_focused+0x4a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	4618      	mov	r0, r3
 8007556:	f7fa fb11 	bl	8001b7c <lv_group_get_focused>
 800755a:	4602      	mov	r2, r0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4293      	cmp	r3, r2
 8007560:	d101      	bne.n	8007566 <lv_obj_is_focused+0x4a>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <lv_obj_is_focused+0x4c>
    }
    return false;
 8007566:	2300      	movs	r3, #0
#else
    LV_UNUSED(obj);
    return false;
#endif
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	bd90      	pop	{r4, r7, pc}
 8007570:	0802d0b8 	.word	0x0802d0b8

08007574 <lv_obj_is_point_on_coords>:
 * whether the point is even within the object (as an optimization).
 * @param obj object to check
 * @param point screen-space point
 */
bool lv_obj_is_point_on_coords(lv_obj_t * obj, const lv_point_t * point)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
#if LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_TINY
    lv_area_t ext_area;
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007584:	b29a      	uxth	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800758c:	b29b      	uxth	r3, r3
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	b29b      	uxth	r3, r3
 8007592:	b21b      	sxth	r3, r3
 8007594:	813b      	strh	r3, [r7, #8]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	4413      	add	r3, r2
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	b21b      	sxth	r3, r3
 80075ac:	81bb      	strh	r3, [r7, #12]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075bc:	b29b      	uxth	r3, r3
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	b21b      	sxth	r3, r3
 80075c4:	817b      	strh	r3, [r7, #10]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	4413      	add	r3, r2
 80075d8:	b29b      	uxth	r3, r3
 80075da:	b21b      	sxth	r3, r3
 80075dc:	81fb      	strh	r3, [r7, #14]

    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 80075de:	f107 0308 	add.w	r3, r7, #8
 80075e2:	2200      	movs	r2, #0
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f013 fcf7 	bl	801afda <_lv_area_is_point_on>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f083 0301 	eor.w	r3, r3, #1
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <lv_obj_is_point_on_coords+0x88>

    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
#else
    if(!_lv_area_is_point_on(&obj->coords, point, 0)) {
#endif
        return false;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e000      	b.n	80075fe <lv_obj_is_point_on_coords+0x8a>
    }
    return true;
 80075fc:	2301      	movs	r3, #1
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <lv_obj_hittest>:
 * @param obj object to hit-test
 * @param point screen-space point
 * @return true if the object is considered under the point
 */
bool lv_obj_hittest(lv_obj_t * obj, lv_point_t * point)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]
    if(obj->adv_hittest) {
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007616:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00c      	beq.n	800763a <lv_obj_hittest+0x34>
        lv_hit_test_info_t hit_info;
        hit_info.point = point;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	60bb      	str	r3, [r7, #8]
        hit_info.result = true;
 8007624:	2301      	movs	r3, #1
 8007626:	733b      	strb	r3, [r7, #12]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f107 0208 	add.w	r2, r7, #8
 8007630:	210a      	movs	r1, #10
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
        return hit_info.result;
 8007636:	7b3b      	ldrb	r3, [r7, #12]
 8007638:	e004      	b.n	8007644 <lv_obj_hittest+0x3e>
    }
    else
        return lv_obj_is_point_on_coords(obj, point);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff ff99 	bl	8007574 <lv_obj_is_point_on_coords>
 8007642:	4603      	mov	r3, r0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <lv_obj_handle_get_type_signal>:
 * @param buf pointer to `lv_obj_type_t`. (`param` in the signal callback)
 * @param name name of the object. E.g. "lv_btn". (Only the pointer is saved)
 * @return LV_RES_OK
 */
lv_res_t lv_obj_handle_get_type_signal(lv_obj_type_t * buf, const char * name)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
    uint8_t i;
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
 800765a:	e008      	b.n	800766e <lv_obj_handle_get_type_signal+0x22>
        if(buf->type[i] == NULL) break;
 800765c:	7bfa      	ldrb	r2, [r7, #15]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d006      	beq.n	8007676 <lv_obj_handle_get_type_signal+0x2a>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	3301      	adds	r3, #1
 800766c:	73fb      	strb	r3, [r7, #15]
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b06      	cmp	r3, #6
 8007672:	d9f3      	bls.n	800765c <lv_obj_handle_get_type_signal+0x10>
 8007674:	e000      	b.n	8007678 <lv_obj_handle_get_type_signal+0x2c>
        if(buf->type[i] == NULL) break;
 8007676:	bf00      	nop
    }
    buf->type[i] = name;
 8007678:	7bfa      	ldrb	r2, [r7, #15]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    return LV_RES_OK;
 8007682:	2301      	movs	r3, #1
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <lv_obj_init_draw_rect_dsc>:
 * @param draw_dsc the descriptor the initialize
 * @note Only the relevant fields will be set.
 * E.g. if `border width == 0` the other border properties won't be evaluated.
 */
void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint8_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8007690:	b590      	push	{r4, r7, lr}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	460b      	mov	r3, r1
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	72fb      	strb	r3, [r7, #11]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 800769e:	7afb      	ldrb	r3, [r7, #11]
 80076a0:	4619      	mov	r1, r3
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7fc fee4 	bl	8004470 <lv_obj_get_style_radius>
 80076a8:	4603      	mov	r3, r0
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	801a      	strh	r2, [r3, #0]

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7fc ff57 	bl	8004568 <lv_obj_get_style_opa_scale>
 80076ba:	4603      	mov	r3, r0
 80076bc:	75fb      	strb	r3, [r7, #23]
    if(opa_scale <= LV_OPA_MIN) {
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d812      	bhi.n	80076ea <lv_obj_init_draw_rect_dsc+0x5a>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	749a      	strb	r2, [r3, #18]
        draw_dsc->border_opa = LV_OPA_TRANSP;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	771a      	strb	r2, [r3, #28]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        draw_dsc->value_opa = LV_OPA_TRANSP;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        return;
 80076e8:	e223      	b.n	8007b32 <lv_obj_init_draw_rect_dsc+0x4a2>
    }
#endif

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7c9b      	ldrb	r3, [r3, #18]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d042      	beq.n	8007778 <lv_obj_init_draw_rect_dsc+0xe8>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80076f2:	7afb      	ldrb	r3, [r7, #11]
 80076f4:	4619      	mov	r1, r3
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7fd f849 	bl	800478e <lv_obj_get_style_bg_opa>
 80076fc:	4603      	mov	r3, r0
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	749a      	strb	r2, [r3, #18]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	7c9b      	ldrb	r3, [r3, #18]
 8007708:	2b02      	cmp	r3, #2
 800770a:	d935      	bls.n	8007778 <lv_obj_init_draw_rect_dsc+0xe8>
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
 800770c:	687c      	ldr	r4, [r7, #4]
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	4619      	mov	r1, r3
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7fd f819 	bl	800474a <lv_obj_get_style_bg_color>
 8007718:	6060      	str	r0, [r4, #4]
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	4619      	mov	r1, r3
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f7fd f801 	bl	8004726 <lv_obj_get_style_bg_grad_dir>
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	731a      	strb	r2, [r3, #12]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	7b1b      	ldrb	r3, [r3, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d018      	beq.n	8007766 <lv_obj_init_draw_rect_dsc+0xd6>
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 8007734:	687c      	ldr	r4, [r7, #4]
 8007736:	7afb      	ldrb	r3, [r7, #11]
 8007738:	4619      	mov	r1, r3
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7fd f816 	bl	800476c <lv_obj_get_style_bg_grad_color>
 8007740:	60a0      	str	r0, [r4, #8]
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	4619      	mov	r1, r3
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f7fc ffcb 	bl	80046e2 <lv_obj_get_style_bg_main_stop>
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	81da      	strh	r2, [r3, #14]
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	4619      	mov	r1, r3
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7fc ffd3 	bl	8004704 <lv_obj_get_style_bg_grad_stop>
 800775e:	4603      	mov	r3, r0
 8007760:	461a      	mov	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	821a      	strh	r2, [r3, #16]
            }

#if LV_USE_BLEND_MODES
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
 8007766:	7afb      	ldrb	r3, [r7, #11]
 8007768:	4619      	mov	r1, r3
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7fc ffa7 	bl	80046be <lv_obj_get_style_bg_blend_mode>
 8007770:	4603      	mov	r3, r0
 8007772:	461a      	mov	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	74da      	strb	r2, [r3, #19]
#endif
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	4619      	mov	r1, r3
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f7fd f817 	bl	80047b0 <lv_obj_get_style_border_width>
 8007782:	4603      	mov	r3, r0
 8007784:	461a      	mov	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	831a      	strh	r2, [r3, #24]
    if(draw_dsc->border_width) {
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d029      	beq.n	80077e8 <lv_obj_init_draw_rect_dsc+0x158>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	7f1b      	ldrb	r3, [r3, #28]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d025      	beq.n	80077e8 <lv_obj_init_draw_rect_dsc+0x158>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7fd f861 	bl	8004868 <lv_obj_get_style_border_opa>
 80077a6:	4603      	mov	r3, r0
 80077a8:	461a      	mov	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	771a      	strb	r2, [r3, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7f1b      	ldrb	r3, [r3, #28]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d90f      	bls.n	80077d6 <lv_obj_init_draw_rect_dsc+0x146>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	4619      	mov	r1, r3
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7fd f809 	bl	80047d2 <lv_obj_get_style_border_side>
 80077c0:	4603      	mov	r3, r0
 80077c2:	b21a      	sxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	835a      	strh	r2, [r3, #26]
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
 80077c8:	687c      	ldr	r4, [r7, #4]
 80077ca:	7afb      	ldrb	r3, [r7, #11]
 80077cc:	4619      	mov	r1, r3
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7fd f839 	bl	8004846 <lv_obj_get_style_border_color>
 80077d4:	6160      	str	r0, [r4, #20]
            }
#if LV_USE_BLEND_MODES
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
 80077d6:	7afb      	ldrb	r3, [r7, #11]
 80077d8:	4619      	mov	r1, r3
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f7fd f80b 	bl	80047f6 <lv_obj_get_style_border_blend_mode>
 80077e0:	4603      	mov	r3, r0
 80077e2:	461a      	mov	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	775a      	strb	r2, [r3, #29]
#endif
        }
    }

#if LV_USE_OUTLINE
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 80077e8:	7afb      	ldrb	r3, [r7, #11]
 80077ea:	4619      	mov	r1, r3
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f7fd f84c 	bl	800488a <lv_obj_get_style_outline_width>
 80077f2:	4603      	mov	r3, r0
 80077f4:	461a      	mov	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	849a      	strh	r2, [r3, #36]	; 0x24
    if(draw_dsc->outline_width) {
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02d      	beq.n	8007860 <lv_obj_init_draw_rect_dsc+0x1d0>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800780a:	2b00      	cmp	r3, #0
 800780c:	d028      	beq.n	8007860 <lv_obj_init_draw_rect_dsc+0x1d0>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 800780e:	7afb      	ldrb	r3, [r7, #11]
 8007810:	4619      	mov	r1, r3
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7fd f87e 	bl	8004914 <lv_obj_get_style_outline_opa>
 8007818:	4603      	mov	r3, r0
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007828:	2b02      	cmp	r3, #2
 800782a:	d90f      	bls.n	800784c <lv_obj_init_draw_rect_dsc+0x1bc>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 800782c:	7afb      	ldrb	r3, [r7, #11]
 800782e:	4619      	mov	r1, r3
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7fd f83b 	bl	80048ac <lv_obj_get_style_outline_pad>
 8007836:	4603      	mov	r3, r0
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	84da      	strh	r2, [r3, #38]	; 0x26
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
 800783e:	687c      	ldr	r4, [r7, #4]
 8007840:	7afb      	ldrb	r3, [r7, #11]
 8007842:	4619      	mov	r1, r3
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7fd f854 	bl	80048f2 <lv_obj_get_style_outline_color>
 800784a:	6220      	str	r0, [r4, #32]
            }
#if LV_USE_BLEND_MODES
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7fd f83c 	bl	80048ce <lv_obj_get_style_outline_blend_mode>
 8007856:	4603      	mov	r3, r0
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        }
    }
#endif

#if LV_USE_PATTERN
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
 8007860:	7afb      	ldrb	r3, [r7, #11]
 8007862:	4619      	mov	r1, r3
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f7fd f939 	bl	8004adc <lv_obj_get_style_pattern_image>
 800786a:	4602      	mov	r2, r0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	63da      	str	r2, [r3, #60]	; 0x3c
    if(draw_dsc->pattern_image) {
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d059      	beq.n	800792c <lv_obj_init_draw_rect_dsc+0x29c>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800787e:	2b00      	cmp	r3, #0
 8007880:	d054      	beq.n	800792c <lv_obj_init_draw_rect_dsc+0x29c>
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	4619      	mov	r1, r3
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7fd f906 	bl	8004a98 <lv_obj_get_style_pattern_opa>
 800788c:	4603      	mov	r3, r0
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800789c:	2b02      	cmp	r3, #2
 800789e:	d945      	bls.n	800792c <lv_obj_init_draw_rect_dsc+0x29c>
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	4619      	mov	r1, r3
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f7fd f908 	bl	8004aba <lv_obj_get_style_pattern_recolor_opa>
 80078aa:	4603      	mov	r3, r0
 80078ac:	461a      	mov	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	4619      	mov	r1, r3
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f7fd f8b4 	bl	8004a26 <lv_obj_get_style_pattern_repeat>
 80078be:	4603      	mov	r3, r0
 80078c0:	4619      	mov	r1, r3
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 80078c8:	f361 0300 	bfi	r3, r1, #0, #1
 80078cc:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d4:	4618      	mov	r0, r3
 80078d6:	f006 fd65 	bl	800e3a4 <lv_img_src_get_type>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d10f      	bne.n	8007900 <lv_obj_init_draw_rect_dsc+0x270>
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 80078e0:	687c      	ldr	r4, [r7, #4]
 80078e2:	7afb      	ldrb	r3, [r7, #11]
 80078e4:	4619      	mov	r1, r3
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7fd f8c5 	bl	8004a76 <lv_obj_get_style_pattern_recolor>
 80078ec:	6460      	str	r0, [r4, #68]	; 0x44
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
 80078ee:	7afb      	ldrb	r3, [r7, #11]
 80078f0:	4619      	mov	r1, r3
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f7fd fa41 	bl	8004d7a <lv_obj_get_style_text_font>
 80078f8:	4602      	mov	r2, r0
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	641a      	str	r2, [r3, #64]	; 0x40
 80078fe:	e00b      	b.n	8007918 <lv_obj_init_draw_rect_dsc+0x288>
                }
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007906:	2b02      	cmp	r3, #2
 8007908:	d906      	bls.n	8007918 <lv_obj_init_draw_rect_dsc+0x288>
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 800790a:	687c      	ldr	r4, [r7, #4]
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	4619      	mov	r1, r3
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f7fd f8b0 	bl	8004a76 <lv_obj_get_style_pattern_recolor>
 8007916:	6460      	str	r0, [r4, #68]	; 0x44
                }
#if LV_USE_BLEND_MODES
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	4619      	mov	r1, r3
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7fd f898 	bl	8004a52 <lv_obj_get_style_pattern_blend_mode>
 8007922:	4603      	mov	r3, r0
 8007924:	461a      	mov	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        }
    }
#endif

#if LV_USE_SHADOW
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	4619      	mov	r1, r3
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7fd f800 	bl	8004936 <lv_obj_get_style_shadow_width>
 8007936:	4603      	mov	r3, r0
 8007938:	461a      	mov	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	861a      	strh	r2, [r3, #48]	; 0x30
    if(draw_dsc->shadow_width) {
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007944:	2b00      	cmp	r3, #0
 8007946:	d03f      	beq.n	80079c8 <lv_obj_init_draw_rect_dsc+0x338>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800794e:	2b02      	cmp	r3, #2
 8007950:	d93a      	bls.n	80079c8 <lv_obj_init_draw_rect_dsc+0x338>
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007952:	7afb      	ldrb	r3, [r7, #11]
 8007954:	4619      	mov	r1, r3
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7fd f854 	bl	8004a04 <lv_obj_get_style_shadow_opa>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800796c:	2b02      	cmp	r3, #2
 800796e:	d92b      	bls.n	80079c8 <lv_obj_init_draw_rect_dsc+0x338>
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007970:	7afb      	ldrb	r3, [r7, #11]
 8007972:	4619      	mov	r1, r3
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f7fc ffef 	bl	8004958 <lv_obj_get_style_shadow_ofs_x>
 800797a:	4603      	mov	r3, r0
 800797c:	461a      	mov	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	865a      	strh	r2, [r3, #50]	; 0x32
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007982:	7afb      	ldrb	r3, [r7, #11]
 8007984:	4619      	mov	r1, r3
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7fc fff7 	bl	800497a <lv_obj_get_style_shadow_ofs_y>
 800798c:	4603      	mov	r3, r0
 800798e:	461a      	mov	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	869a      	strh	r2, [r3, #52]	; 0x34
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8007994:	7afb      	ldrb	r3, [r7, #11]
 8007996:	4619      	mov	r1, r3
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7fc ffff 	bl	800499c <lv_obj_get_style_shadow_spread>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	86da      	strh	r2, [r3, #54]	; 0x36
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
 80079a6:	687c      	ldr	r4, [r7, #4]
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	4619      	mov	r1, r3
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f7fd f818 	bl	80049e2 <lv_obj_get_style_shadow_color>
 80079b2:	62e0      	str	r0, [r4, #44]	; 0x2c
#if LV_USE_BLEND_MODES
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	4619      	mov	r1, r3
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7fd f800 	bl	80049be <lv_obj_get_style_shadow_blend_mode>
 80079be:	4603      	mov	r3, r0
 80079c0:	461a      	mov	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
#endif

#if LV_USE_VALUE_STR
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	4619      	mov	r1, r3
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f7fd f931 	bl	8004c34 <lv_obj_get_style_value_str>
 80079d2:	4602      	mov	r2, r0
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	64da      	str	r2, [r3, #76]	; 0x4c
    if(draw_dsc->value_str) {
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d05e      	beq.n	8007a9e <lv_obj_init_draw_rect_dsc+0x40e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d959      	bls.n	8007a9e <lv_obj_init_draw_rect_dsc+0x40e>
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
 80079ea:	7afb      	ldrb	r3, [r7, #11]
 80079ec:	4619      	mov	r1, r3
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7fd f8fe 	bl	8004bf0 <lv_obj_get_style_value_opa>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            if(draw_dsc->value_opa > LV_OPA_MIN) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d94a      	bls.n	8007a9e <lv_obj_init_draw_rect_dsc+0x40e>
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7fd f8aa 	bl	8004b66 <lv_obj_get_style_value_ofs_x>
 8007a12:	4603      	mov	r3, r0
 8007a14:	461a      	mov	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7fd f8b1 	bl	8004b88 <lv_obj_get_style_value_ofs_y>
 8007a26:	4603      	mov	r3, r0
 8007a28:	461a      	mov	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
 8007a30:	687c      	ldr	r4, [r7, #4]
 8007a32:	7afb      	ldrb	r3, [r7, #11]
 8007a34:	4619      	mov	r1, r3
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7fd f8c9 	bl	8004bce <lv_obj_get_style_value_color>
 8007a3c:	65a0      	str	r0, [r4, #88]	; 0x58
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	4619      	mov	r1, r3
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7fd f8e5 	bl	8004c12 <lv_obj_get_style_value_font>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	651a      	str	r2, [r3, #80]	; 0x50
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	4619      	mov	r1, r3
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7fd f853 	bl	8004afe <lv_obj_get_style_value_letter_space>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
 8007a62:	7afb      	ldrb	r3, [r7, #11]
 8007a64:	4619      	mov	r1, r3
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7fd f85a 	bl	8004b20 <lv_obj_get_style_value_line_space>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	461a      	mov	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7fd f895 	bl	8004baa <lv_obj_get_style_value_align>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
#if LV_USE_BLEND_MODES
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7fd f857 	bl	8004b42 <lv_obj_get_style_value_blend_mode>
 8007a94:	4603      	mov	r3, r0
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        }
    }
#endif

#if LV_USE_OPA_SCALE
    if(opa_scale < LV_OPA_MAX) {
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	2bfc      	cmp	r3, #252	; 0xfc
 8007aa2:	d846      	bhi.n	8007b32 <lv_obj_init_draw_rect_dsc+0x4a2>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7c9b      	ldrb	r3, [r3, #18]
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	fb12 f303 	smulbb	r3, r2, r3
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	749a      	strb	r2, [r3, #18]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	7f1b      	ldrb	r3, [r3, #28]
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	fb12 f303 	smulbb	r3, r2, r3
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	0a1b      	lsrs	r3, r3, #8
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	771a      	strb	r2, [r3, #28]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	fb12 f303 	smulbb	r3, r2, r3
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	0a1b      	lsrs	r3, r3, #8
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	fb12 f303 	smulbb	r3, r2, r3
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	0a1b      	lsrs	r3, r3, #8
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	fb12 f303 	smulbb	r3, r2, r3
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }
#endif
}
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd90      	pop	{r4, r7, pc}

08007b38 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint8_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	460b      	mov	r3, r1
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	72fb      	strb	r3, [r7, #11]
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f7fd f903 	bl	8004d56 <lv_obj_get_style_text_opa>
 8007b50:	4603      	mov	r3, r0
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	741a      	strb	r2, [r3, #16]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7c1b      	ldrb	r3, [r3, #16]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d96a      	bls.n	8007c36 <lv_obj_init_draw_label_dsc+0xfe>

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	4619      	mov	r1, r3
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7fc fcff 	bl	8004568 <lv_obj_get_style_opa_scale>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	75fb      	strb	r3, [r7, #23]
    if(opa_scale < LV_OPA_MAX) {
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	2bfc      	cmp	r3, #252	; 0xfc
 8007b72:	d80c      	bhi.n	8007b8e <lv_obj_init_draw_label_dsc+0x56>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7c1b      	ldrb	r3, [r3, #16]
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	fb12 f303 	smulbb	r3, r2, r3
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	0a1b      	lsrs	r3, r3, #8
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	741a      	strb	r2, [r3, #16]
    }
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	7c1b      	ldrb	r3, [r3, #16]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d951      	bls.n	8007c3a <lv_obj_init_draw_label_dsc+0x102>
#endif

    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
 8007b96:	687c      	ldr	r4, [r7, #4]
 8007b98:	7afb      	ldrb	r3, [r7, #11]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f7fd f8a4 	bl	8004cea <lv_obj_get_style_text_color>
 8007ba2:	6020      	str	r0, [r4, #0]
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7fd f854 	bl	8004c56 <lv_obj_get_style_text_letter_space>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	829a      	strh	r2, [r3, #20]
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8007bb6:	7afb      	ldrb	r3, [r7, #11]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7fd f85d 	bl	8004c7a <lv_obj_get_style_text_line_space>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	825a      	strh	r2, [r3, #18]
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7fd f866 	bl	8004c9e <lv_obj_get_style_text_decor>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#if LV_USE_BLEND_MODES
    draw_dsc->blend_mode = lv_obj_get_style_text_blend_mode(obj, part);
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	4619      	mov	r1, r3
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7fd f86f 	bl	8004cc4 <lv_obj_get_style_text_blend_mode>
 8007be6:	4603      	mov	r3, r0
 8007be8:	461a      	mov	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7fd f8c0 	bl	8004d7a <lv_obj_get_style_text_font>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60da      	str	r2, [r3, #12]

    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d017      	beq.n	8007c3c <lv_obj_init_draw_label_dsc+0x104>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d011      	beq.n	8007c3c <lv_obj_init_draw_label_dsc+0x104>
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
 8007c18:	687c      	ldr	r4, [r7, #4]
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7fd f875 	bl	8004d0e <lv_obj_get_style_text_sel_color>
 8007c24:	6060      	str	r0, [r4, #4]
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
 8007c26:	687c      	ldr	r4, [r7, #4]
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7fd f880 	bl	8004d32 <lv_obj_get_style_text_sel_bg_color>
 8007c32:	60a0      	str	r0, [r4, #8]
 8007c34:	e002      	b.n	8007c3c <lv_obj_init_draw_label_dsc+0x104>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007c36:	bf00      	nop
 8007c38:	e000      	b.n	8007c3c <lv_obj_init_draw_label_dsc+0x104>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007c3a:	bf00      	nop
    }

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_base_dir(obj);
#endif
}
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd90      	pop	{r4, r7, pc}

08007c42 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint8_t part, lv_draw_img_dsc_t * draw_dsc)
{
 8007c42:	b590      	push	{r4, r7, lr}
 8007c44:	b087      	sub	sp, #28
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	607a      	str	r2, [r7, #4]
 8007c4e:	72fb      	strb	r3, [r7, #11]
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	4619      	mov	r1, r3
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7fd f944 	bl	8004ee2 <lv_obj_get_style_image_opa>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	701a      	strb	r2, [r3, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d959      	bls.n	8007d1e <lv_obj_init_draw_img_dsc+0xdc>

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8007c6a:	7afb      	ldrb	r3, [r7, #11]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f7fc fc7a 	bl	8004568 <lv_obj_get_style_opa_scale>
 8007c74:	4603      	mov	r3, r0
 8007c76:	75fb      	strb	r3, [r7, #23]
    if(opa_scale < LV_OPA_MAX) {
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2bfc      	cmp	r3, #252	; 0xfc
 8007c7c:	d80c      	bhi.n	8007c98 <lv_obj_init_draw_img_dsc+0x56>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	fb12 f303 	smulbb	r3, r2, r3
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	0a1b      	lsrs	r3, r3, #8
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	701a      	strb	r2, [r3, #0]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d940      	bls.n	8007d22 <lv_obj_init_draw_img_dsc+0xe0>
#endif

    draw_dsc->angle = 0;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	805a      	strh	r2, [r3, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cac:	811a      	strh	r2, [r3, #8]
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3310      	adds	r3, #16
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fc fa78 	bl	80041a8 <lv_area_get_width>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	da00      	bge.n	8007cc0 <lv_obj_init_draw_img_dsc+0x7e>
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	105b      	asrs	r3, r3, #1
 8007cc2:	b21a      	sxth	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	809a      	strh	r2, [r3, #4]
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	3310      	adds	r3, #16
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fc fa82 	bl	80041d6 <lv_area_get_height>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	da00      	bge.n	8007cda <lv_obj_init_draw_img_dsc+0x98>
 8007cd8:	3301      	adds	r3, #1
 8007cda:	105b      	asrs	r3, r3, #1
 8007cdc:	b21a      	sxth	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	80da      	strh	r2, [r3, #6]

    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
 8007ce2:	7afb      	ldrb	r3, [r7, #11]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7fd f90d 	bl	8004f06 <lv_obj_get_style_image_recolor_opa>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	729a      	strb	r2, [r3, #10]
    if(draw_dsc->recolor_opa > 0) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	7a9b      	ldrb	r3, [r3, #10]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d006      	beq.n	8007d0a <lv_obj_init_draw_img_dsc+0xc8>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
 8007cfc:	687c      	ldr	r4, [r7, #4]
 8007cfe:	7afb      	ldrb	r3, [r7, #11]
 8007d00:	4619      	mov	r1, r3
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7fd f8db 	bl	8004ebe <lv_obj_get_style_image_recolor>
 8007d08:	60e0      	str	r0, [r4, #12]
    }
#if LV_USE_BLEND_MODES
    draw_dsc->blend_mode = lv_obj_get_style_image_blend_mode(obj, part);
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7fd f8c2 	bl	8004e98 <lv_obj_get_style_image_blend_mode>
 8007d14:	4603      	mov	r3, r0
 8007d16:	461a      	mov	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	741a      	strb	r2, [r3, #16]
 8007d1c:	e002      	b.n	8007d24 <lv_obj_init_draw_img_dsc+0xe2>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007d1e:	bf00      	nop
 8007d20:	e000      	b.n	8007d24 <lv_obj_init_draw_img_dsc+0xe2>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007d22:	bf00      	nop
#endif
}
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd90      	pop	{r4, r7, pc}

08007d2a <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint8_t part, lv_draw_line_dsc_t * draw_dsc)
{
 8007d2a:	b590      	push	{r4, r7, lr}
 8007d2c:	b087      	sub	sp, #28
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	460b      	mov	r3, r1
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	72fb      	strb	r3, [r7, #11]
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7fd f82e 	bl	8004d9e <lv_obj_get_style_line_width>
 8007d42:	4603      	mov	r3, r0
 8007d44:	461a      	mov	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	809a      	strh	r2, [r3, #4]
    if(draw_dsc->width == 0) return;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d06a      	beq.n	8007e2a <lv_obj_init_draw_line_dsc+0x100>

    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	4619      	mov	r1, r3
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7fd f88c 	bl	8004e76 <lv_obj_get_style_line_opa>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	461a      	mov	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	729a      	strb	r2, [r3, #10]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	7a9b      	ldrb	r3, [r3, #10]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d95f      	bls.n	8007e2e <lv_obj_init_draw_line_dsc+0x104>

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	4619      	mov	r1, r3
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7fc fbf8 	bl	8004568 <lv_obj_get_style_opa_scale>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	75fb      	strb	r3, [r7, #23]
    if(opa_scale < LV_OPA_MAX) {
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	2bfc      	cmp	r3, #252	; 0xfc
 8007d80:	d80c      	bhi.n	8007d9c <lv_obj_init_draw_line_dsc+0x72>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	7a9b      	ldrb	r3, [r3, #10]
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	7dfb      	ldrb	r3, [r7, #23]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	fb12 f303 	smulbb	r3, r2, r3
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	729a      	strb	r2, [r3, #10]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7a9b      	ldrb	r3, [r3, #10]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d946      	bls.n	8007e32 <lv_obj_init_draw_line_dsc+0x108>
#endif

    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 8007da4:	687c      	ldr	r4, [r7, #4]
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	4619      	mov	r1, r3
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7fd f852 	bl	8004e54 <lv_obj_get_style_line_color>
 8007db0:	6020      	str	r0, [r4, #0]

    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8007db2:	7afb      	ldrb	r3, [r7, #11]
 8007db4:	4619      	mov	r1, r3
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f7fd f814 	bl	8004de4 <lv_obj_get_style_line_dash_width>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	80da      	strh	r2, [r3, #6]
    if(draw_dsc->dash_width) {
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d008      	beq.n	8007de0 <lv_obj_init_draw_line_dsc+0xb6>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 8007dce:	7afb      	ldrb	r3, [r7, #11]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7fd f817 	bl	8004e06 <lv_obj_get_style_line_dash_gap>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	461a      	mov	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	811a      	strh	r2, [r3, #8]
    }

    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	4619      	mov	r1, r3
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7fd f81f 	bl	8004e28 <lv_obj_get_style_line_rounded>
 8007dea:	4603      	mov	r3, r0
 8007dec:	4619      	mov	r1, r3
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	7ad3      	ldrb	r3, [r2, #11]
 8007df2:	f361 0382 	bfi	r3, r1, #2, #1
 8007df6:	72d3      	strb	r3, [r2, #11]
    draw_dsc->round_end = draw_dsc->round_start;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	7adb      	ldrb	r3, [r3, #11]
 8007dfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007e00:	b2d9      	uxtb	r1, r3
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	7ad3      	ldrb	r3, [r2, #11]
 8007e06:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e0a:	72d3      	strb	r3, [r2, #11]

#if LV_USE_BLEND_MODES
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
 8007e0c:	7afb      	ldrb	r3, [r7, #11]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7fc ffd5 	bl	8004dc0 <lv_obj_get_style_line_blend_mode>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f003 0303 	and.w	r3, r3, #3
 8007e1c:	b2d9      	uxtb	r1, r3
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	7ad3      	ldrb	r3, [r2, #11]
 8007e22:	f361 0301 	bfi	r3, r1, #0, #2
 8007e26:	72d3      	strb	r3, [r2, #11]
 8007e28:	e004      	b.n	8007e34 <lv_obj_init_draw_line_dsc+0x10a>
    if(draw_dsc->width == 0) return;
 8007e2a:	bf00      	nop
 8007e2c:	e002      	b.n	8007e34 <lv_obj_init_draw_line_dsc+0x10a>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007e2e:	bf00      	nop
 8007e30:	e000      	b.n	8007e34 <lv_obj_init_draw_line_dsc+0x10a>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007e32:	bf00      	nop
#endif
}
 8007e34:	371c      	adds	r7, #28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd90      	pop	{r4, r7, pc}

08007e3a <lv_obj_get_draw_rect_ext_pad_size>:
 * Get the required extra size (around the object's part) to draw shadow, outline, value etc.
 * @param obj pointer to an object
 * @param part part of the object
 */
lv_coord_t lv_obj_get_draw_rect_ext_pad_size(lv_obj_t * obj, uint8_t part)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b096      	sub	sp, #88	; 0x58
 8007e3e:	af04      	add	r7, sp, #16
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
    lv_coord_t s = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7fc fd70 	bl	8004936 <lv_obj_get_style_shadow_width>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    if(sh_width) {
 8007e5c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d054      	beq.n	8007f0e <lv_obj_get_draw_rect_ext_pad_size+0xd4>
        lv_opa_t sh_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7fc fdcb 	bl	8004a04 <lv_obj_get_style_shadow_opa>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        if(sh_opa > LV_OPA_MIN) {
 8007e74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d948      	bls.n	8007f0e <lv_obj_get_draw_rect_ext_pad_size+0xd4>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
 8007e7c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	da00      	bge.n	8007e86 <lv_obj_get_draw_rect_ext_pad_size+0x4c>
 8007e84:	3301      	adds	r3, #1
 8007e86:	105b      	asrs	r3, r3, #1
 8007e88:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            sh_width++;
 8007e8c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	3301      	adds	r3, #1
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7fc fd7c 	bl	800499c <lv_obj_get_style_shadow_spread>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007eac:	4413      	add	r3, r2
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            lv_style_int_t sh_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7fc fd4d 	bl	8004958 <lv_obj_get_style_shadow_ofs_x>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            lv_style_int_t sh_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7fc fd56 	bl	800497a <lv_obj_get_style_shadow_ofs_y>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	87fb      	strh	r3, [r7, #62]	; 0x3e
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 8007ed2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8007ed6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8007eda:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8007ede:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	bfb8      	it	lt
 8007ee6:	425b      	neglt	r3, r3
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	bfb8      	it	lt
 8007eec:	4613      	movlt	r3, r2
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ef4:	4413      	add	r3, r2
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            s = LV_MATH_MAX(s, sh_width);
 8007efc:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8007f00:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8007f04:	4293      	cmp	r3, r2
 8007f06:	bfb8      	it	lt
 8007f08:	4613      	movlt	r3, r2
 8007f0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }
    }

    const char * value_str = lv_obj_get_style_value_str(obj, part);
 8007f0e:	78fb      	ldrb	r3, [r7, #3]
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fc fe8e 	bl	8004c34 <lv_obj_get_style_value_str>
 8007f18:	63b8      	str	r0, [r7, #56]	; 0x38
    if(value_str) {
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 80d0 	beq.w	80080c2 <lv_obj_get_draw_rect_ext_pad_size+0x288>
        lv_opa_t value_opa = lv_obj_get_style_value_opa(obj, part);
 8007f22:	78fb      	ldrb	r3, [r7, #3]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7fc fe62 	bl	8004bf0 <lv_obj_get_style_value_opa>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(value_opa > LV_OPA_MIN) {
 8007f32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	f240 80c3 	bls.w	80080c2 <lv_obj_get_draw_rect_ext_pad_size+0x288>
            lv_style_int_t letter_space = lv_obj_get_style_value_letter_space(obj, part);
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7fc fddc 	bl	8004afe <lv_obj_get_style_value_letter_space>
 8007f46:	4603      	mov	r3, r0
 8007f48:	86bb      	strh	r3, [r7, #52]	; 0x34
            lv_style_int_t line_space = lv_obj_get_style_value_letter_space(obj, part);
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fc fdd5 	bl	8004afe <lv_obj_get_style_value_letter_space>
 8007f54:	4603      	mov	r3, r0
 8007f56:	867b      	strh	r3, [r7, #50]	; 0x32
            const lv_font_t * font = lv_obj_get_style_value_font(obj, part);
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7fc fe58 	bl	8004c12 <lv_obj_get_style_value_font>
 8007f62:	62f8      	str	r0, [r7, #44]	; 0x2c

            lv_point_t txt_size;
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 8007f64:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8007f68:	f107 0014 	add.w	r0, r7, #20
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9302      	str	r3, [sp, #8]
 8007f70:	f647 4318 	movw	r3, #31768	; 0x7c18
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f82:	f015 fd6f 	bl	801da64 <_lv_txt_get_size>

            lv_area_t value_area;
            value_area.x1 = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	81bb      	strh	r3, [r7, #12]
            value_area.y1 = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	81fb      	strh	r3, [r7, #14]
            value_area.x2 = txt_size.x - 1;
 8007f8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	b21b      	sxth	r3, r3
 8007f9a:	823b      	strh	r3, [r7, #16]
            value_area.y2 = txt_size.y - 1;
 8007f9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	b21b      	sxth	r3, r3
 8007fa8:	827b      	strh	r3, [r7, #18]

            lv_style_int_t align = lv_obj_get_style_value_align(obj, part);
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7fc fdfb 	bl	8004baa <lv_obj_get_style_value_align>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	857b      	strh	r3, [r7, #42]	; 0x2a
            lv_style_int_t xofs = lv_obj_get_style_value_ofs_x(obj, part);
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7fc fdd2 	bl	8004b66 <lv_obj_get_style_value_ofs_x>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	853b      	strh	r3, [r7, #40]	; 0x28
            lv_style_int_t yofs = lv_obj_get_style_value_ofs_y(obj, part);
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7fc fddc 	bl	8004b88 <lv_obj_get_style_value_ofs_y>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_point_t p_align;
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f103 0010 	add.w	r0, r3, #16
 8007fda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	f107 0308 	add.w	r3, r7, #8
 8007fe2:	f107 010c 	add.w	r1, r7, #12
 8007fe6:	f013 f9ed 	bl	801b3c4 <_lv_area_align>

            value_area.x1 += p_align.x + xofs;
 8007fea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007ff4:	b299      	uxth	r1, r3
 8007ff6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ff8:	440b      	add	r3, r1
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	4413      	add	r3, r2
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	b21b      	sxth	r3, r3
 8008002:	81bb      	strh	r3, [r7, #12]
            value_area.y1 += p_align.y + yofs;
 8008004:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008008:	b29a      	uxth	r2, r3
 800800a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800800e:	b299      	uxth	r1, r3
 8008010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008012:	440b      	add	r3, r1
 8008014:	b29b      	uxth	r3, r3
 8008016:	4413      	add	r3, r2
 8008018:	b29b      	uxth	r3, r3
 800801a:	b21b      	sxth	r3, r3
 800801c:	81fb      	strh	r3, [r7, #14]
            value_area.x2 += p_align.x + xofs;
 800801e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008022:	b29a      	uxth	r2, r3
 8008024:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008028:	b299      	uxth	r1, r3
 800802a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800802c:	440b      	add	r3, r1
 800802e:	b29b      	uxth	r3, r3
 8008030:	4413      	add	r3, r2
 8008032:	b29b      	uxth	r3, r3
 8008034:	b21b      	sxth	r3, r3
 8008036:	823b      	strh	r3, [r7, #16]
            value_area.y2 += p_align.y + yofs;
 8008038:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800803c:	b29a      	uxth	r2, r3
 800803e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008042:	b299      	uxth	r1, r3
 8008044:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008046:	440b      	add	r3, r1
 8008048:	b29b      	uxth	r3, r3
 800804a:	4413      	add	r3, r2
 800804c:	b29b      	uxth	r3, r3
 800804e:	b21b      	sxth	r3, r3
 8008050:	827b      	strh	r3, [r7, #18]

            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008058:	461a      	mov	r2, r3
 800805a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008064:	4293      	cmp	r3, r2
 8008066:	bfb8      	it	lt
 8008068:	4613      	movlt	r3, r2
 800806a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008074:	461a      	mov	r2, r3
 8008076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800807a:	1ad2      	subs	r2, r2, r3
 800807c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008080:	4293      	cmp	r3, r2
 8008082:	bfb8      	it	lt
 8008084:	4613      	movlt	r3, r2
 8008086:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 800808a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008096:	1ad2      	subs	r2, r2, r3
 8008098:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800809c:	4293      	cmp	r3, r2
 800809e:	bfb8      	it	lt
 80080a0:	4613      	movlt	r3, r2
 80080a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 80080a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80080b2:	1ad2      	subs	r2, r2, r3
 80080b4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80080b8:	4293      	cmp	r3, r2
 80080ba:	bfb8      	it	lt
 80080bc:	4613      	movlt	r3, r2
 80080be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }
    }

    lv_style_int_t outline_width = lv_obj_get_style_outline_width(obj, part);
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fc fbdf 	bl	800488a <lv_obj_get_style_outline_width>
 80080cc:	4603      	mov	r3, r0
 80080ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    if(outline_width) {
 80080d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01e      	beq.n	8008116 <lv_obj_get_draw_rect_ext_pad_size+0x2dc>
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7fc fc19 	bl	8004914 <lv_obj_get_style_outline_opa>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(outline_opa > LV_OPA_MIN) {
 80080e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d912      	bls.n	8008116 <lv_obj_get_draw_rect_ext_pad_size+0x2dc>
            lv_style_int_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7fc fbd9 	bl	80048ac <lv_obj_get_style_outline_pad>
 80080fa:	4603      	mov	r3, r0
 80080fc:	843b      	strh	r3, [r7, #32]
            s = LV_MATH_MAX(s, outline_pad + outline_width);
 80080fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008102:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008106:	441a      	add	r2, r3
 8008108:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800810c:	4293      	cmp	r3, r2
 800810e:	bfb8      	it	lt
 8008110:	4613      	movlt	r3, r2
 8008112:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7fc f9e0 	bl	80044e0 <lv_obj_get_style_transform_width>
 8008120:	4603      	mov	r3, r0
 8008122:	83fb      	strh	r3, [r7, #30]
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7fc f9ea 	bl	8004502 <lv_obj_get_style_transform_height>
 800812e:	4603      	mov	r3, r0
 8008130:	83bb      	strh	r3, [r7, #28]
    lv_coord_t wh = LV_MATH_MAX(w, h);
 8008132:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008136:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800813a:	4293      	cmp	r3, r2
 800813c:	bfb8      	it	lt
 800813e:	4613      	movlt	r3, r2
 8008140:	837b      	strh	r3, [r7, #26]
    if(wh > 0) s += wh;
 8008142:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008146:	2b00      	cmp	r3, #0
 8008148:	dd06      	ble.n	8008158 <lv_obj_get_draw_rect_ext_pad_size+0x31e>
 800814a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800814e:	8b7b      	ldrh	r3, [r7, #26]
 8008150:	4413      	add	r3, r2
 8008152:	b29b      	uxth	r3, r3
 8008154:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    return s;
 8008158:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
}
 800815c:	4618      	mov	r0, r3
 800815e:	3748      	adds	r7, #72	; 0x48
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <lv_obj_design>:
 *                                  (return 'true' if yes)
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_obj_design(lv_obj_t * obj, const lv_area_t * clip_area, lv_design_mode_t mode)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b0ac      	sub	sp, #176	; 0xb0
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	4613      	mov	r3, r2
 8008170:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	2b02      	cmp	r3, #2
 8008176:	f040 8085 	bne.w	8008284 <lv_obj_design+0x120>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 800817a:	2100      	movs	r1, #0
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7fc f988 	bl	8004492 <lv_obj_get_style_clip_corner>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <lv_obj_design+0x28>
 8008188:	2303      	movs	r3, #3
 800818a:	e1c0      	b.n	800850e <lv_obj_design+0x3aa>

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        lv_coord_t r = lv_obj_get_style_radius(obj, LV_OBJ_PART_MAIN);
 800818c:	2100      	movs	r1, #0
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f7fc f96e 	bl	8004470 <lv_obj_get_style_radius>
 8008194:	4603      	mov	r3, r0
 8008196:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_OBJ_PART_MAIN);
 800819a:	2100      	movs	r1, #0
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f7fc f99f 	bl	80044e0 <lv_obj_get_style_transform_width>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_OBJ_PART_MAIN);
 80081a8:	2100      	movs	r1, #0
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7fc f9a9 	bl	8004502 <lv_obj_get_style_transform_height>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f103 0210 	add.w	r2, r3, #16
 80081bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80081c0:	4611      	mov	r1, r2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fb ffe2 	bl	800418c <lv_area_copy>
        coords.x1 -= w;
 80081c8:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	b21b      	sxth	r3, r3
 80081d8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        coords.x2 += w;
 80081dc:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80081e6:	4413      	add	r3, r2
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	b21b      	sxth	r3, r3
 80081ec:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
        coords.y1 -= h;
 80081f0:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	b21b      	sxth	r3, r3
 8008200:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
        coords.y2 += h;
 8008204:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8008208:	b29a      	uxth	r2, r3
 800820a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800820e:	4413      	add	r3, r2
 8008210:	b29b      	uxth	r3, r3
 8008212:	b21b      	sxth	r3, r3
 8008214:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8008218:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 800821c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008220:	4619      	mov	r1, r3
 8008222:	68b8      	ldr	r0, [r7, #8]
 8008224:	f013 f830 	bl	801b288 <_lv_area_is_in>
 8008228:	4603      	mov	r3, r0
 800822a:	f083 0301 	eor.w	r3, r3, #1
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <lv_obj_design+0xd4>
 8008234:	2302      	movs	r3, #2
 8008236:	e16a      	b.n	800850e <lv_obj_design+0x3aa>

        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8008238:	2100      	movs	r1, #0
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f7fc faa7 	bl	800478e <lv_obj_get_style_bg_opa>
 8008240:	4603      	mov	r3, r0
 8008242:	2bfc      	cmp	r3, #252	; 0xfc
 8008244:	d801      	bhi.n	800824a <lv_obj_design+0xe6>
 8008246:	2302      	movs	r3, #2
 8008248:	e161      	b.n	800850e <lv_obj_design+0x3aa>

        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 800824a:	2100      	movs	r1, #0
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7fc fa36 	bl	80046be <lv_obj_get_style_bg_blend_mode>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <lv_obj_design+0xf8>
 8008258:	2302      	movs	r3, #2
 800825a:	e158      	b.n	800850e <lv_obj_design+0x3aa>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 800825c:	2100      	movs	r1, #0
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7fc fac9 	bl	80047f6 <lv_obj_get_style_border_blend_mode>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <lv_obj_design+0x10a>
 800826a:	2302      	movs	r3, #2
 800826c:	e14f      	b.n	800850e <lv_obj_design+0x3aa>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 800826e:	2100      	movs	r1, #0
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f7fc f979 	bl	8004568 <lv_obj_get_style_opa_scale>
 8008276:	4603      	mov	r3, r0
 8008278:	2bfc      	cmp	r3, #252	; 0xfc
 800827a:	d801      	bhi.n	8008280 <lv_obj_design+0x11c>
 800827c:	2302      	movs	r3, #2
 800827e:	e146      	b.n	800850e <lv_obj_design+0x3aa>

        return LV_DESIGN_RES_COVER;
 8008280:	2301      	movs	r3, #1
 8008282:	e144      	b.n	800850e <lv_obj_design+0x3aa>

    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f040 80c4 	bne.w	8008414 <lv_obj_design+0x2b0>
        lv_draw_rect_dsc_t draw_dsc;
        lv_draw_rect_dsc_init(&draw_dsc);
 800828c:	f107 0310 	add.w	r3, r7, #16
 8008290:	4618      	mov	r0, r3
 8008292:	f00b f865 	bl	8013360 <lv_draw_rect_dsc_init>
        /*If the border is drawn later disable loading its properties*/
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8008296:	2100      	movs	r1, #0
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7fc fabe 	bl	800481a <lv_obj_get_style_border_post>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d005      	beq.n	80082b0 <lv_obj_design+0x14c>
            draw_dsc.border_post = 1;
 80082a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80082a8:	f043 0301 	orr.w	r3, r3, #1
 80082ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }

        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 80082b0:	f107 0310 	add.w	r3, r7, #16
 80082b4:	461a      	mov	r2, r3
 80082b6:	2100      	movs	r1, #0
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7ff f9e9 	bl	8007690 <lv_obj_init_draw_rect_dsc>

        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_OBJ_PART_MAIN);
 80082be:	2100      	movs	r1, #0
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f7fc f90d 	bl	80044e0 <lv_obj_get_style_transform_width>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_OBJ_PART_MAIN);
 80082cc:	2100      	movs	r1, #0
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f7fc f917 	bl	8004502 <lv_obj_get_style_transform_height>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f103 0210 	add.w	r2, r3, #16
 80082e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fb ff50 	bl	800418c <lv_area_copy>
        coords.x1 -= w;
 80082ec:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	b21b      	sxth	r3, r3
 80082fc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        coords.x2 += w;
 8008300:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8008304:	b29a      	uxth	r2, r3
 8008306:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800830a:	4413      	add	r3, r2
 800830c:	b29b      	uxth	r3, r3
 800830e:	b21b      	sxth	r3, r3
 8008310:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        coords.y1 -= h;
 8008314:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8008318:	b29a      	uxth	r2, r3
 800831a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	b29b      	uxth	r3, r3
 8008322:	b21b      	sxth	r3, r3
 8008324:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        coords.y2 += h;
 8008328:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 800832c:	b29a      	uxth	r2, r3
 800832e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8008332:	4413      	add	r3, r2
 8008334:	b29b      	uxth	r3, r3
 8008336:	b21b      	sxth	r3, r3
 8008338:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

        lv_draw_rect(&coords, clip_area, &draw_dsc);
 800833c:	f107 0210 	add.w	r2, r7, #16
 8008340:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	4618      	mov	r0, r3
 8008348:	f00b f88e 	bl	8013468 <lv_draw_rect>

        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 800834c:	2100      	movs	r1, #0
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7fc f89f 	bl	8004492 <lv_obj_get_style_clip_corner>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 80d8 	beq.w	800850c <lv_obj_design+0x3a8>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 800835c:	201c      	movs	r0, #28
 800835e:	f014 faf7 	bl	801c950 <_lv_mem_buf_get>
 8008362:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

            lv_coord_t r = lv_obj_get_style_radius(obj, LV_OBJ_PART_MAIN);
 8008366:	2100      	movs	r1, #0
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7fc f881 	bl	8004470 <lv_obj_get_style_radius>
 800836e:	4603      	mov	r3, r0
 8008370:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            /* If it has border make the clip area 1 px smaller to avoid color bleeding
             * The border will cover the minimal issue on the edges*/
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 8008374:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d035      	beq.n	80083ee <lv_obj_design+0x28a>
 8008382:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d931      	bls.n	80083ee <lv_obj_design+0x28a>
 800838a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800838e:	2b00      	cmp	r3, #0
 8008390:	dd2d      	ble.n	80083ee <lv_obj_design+0x28a>
                lv_area_t cc_area;
                cc_area.x1 = obj->coords.x1 + 1;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008398:	b29b      	uxth	r3, r3
 800839a:	3301      	adds	r3, #1
 800839c:	b29b      	uxth	r3, r3
 800839e:	b21b      	sxth	r3, r3
 80083a0:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                cc_area.y1 = obj->coords.y1 + 1;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	3301      	adds	r3, #1
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	b21b      	sxth	r3, r3
 80083b2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                cc_area.x2 = obj->coords.x2 - 1;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	3b01      	subs	r3, #1
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	b21b      	sxth	r3, r3
 80083c4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
                cc_area.y2 = obj->coords.y2 - 1;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	b21b      	sxth	r3, r3
 80083d6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 80083da:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 80083de:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80083e2:	2300      	movs	r3, #0
 80083e4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80083e8:	f009 fd96 	bl	8011f18 <lv_draw_mask_radius_init>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 80083ec:	e009      	b.n	8008402 <lv_obj_design+0x29e>
            }
            /*If no border use the full size.*/
            else {
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f103 0110 	add.w	r1, r3, #16
 80083f4:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 80083f8:	2300      	movs	r3, #0
 80083fa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80083fe:	f009 fd8b 	bl	8011f18 <lv_draw_mask_radius_init>
            }

            /*Add the mask and use `obj+8` as custom id. Don't use `obj` directly because it might be used by the user*/
            lv_draw_mask_add(mp, obj + 8);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008408:	4619      	mov	r1, r3
 800840a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800840e:	f009 fb69 	bl	8011ae4 <lv_draw_mask_add>
 8008412:	e07b      	b.n	800850c <lv_obj_design+0x3a8>
        }
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d178      	bne.n	800850c <lv_obj_design+0x3a8>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 800841a:	2100      	movs	r1, #0
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f7fc f838 	bl	8004492 <lv_obj_get_style_clip_corner>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <lv_obj_design+0x2dc>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800842e:	4618      	mov	r0, r3
 8008430:	f009 fbf6 	bl	8011c20 <lv_draw_mask_remove_custom>
 8008434:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            _lv_mem_buf_release(param);
 8008438:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800843c:	f014 fb66 	bl	801cb0c <_lv_mem_buf_release>
        }

        /*If the border is drawn later disable loading other properties*/
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8008440:	2100      	movs	r1, #0
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7fc f9e9 	bl	800481a <lv_obj_get_style_border_post>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d05e      	beq.n	800850c <lv_obj_design+0x3a8>
            lv_draw_rect_dsc_t draw_dsc;
            lv_draw_rect_dsc_init(&draw_dsc);
 800844e:	f107 0310 	add.w	r3, r7, #16
 8008452:	4618      	mov	r0, r3
 8008454:	f00a ff84 	bl	8013360 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8008458:	2300      	movs	r3, #0
 800845a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 800845e:	2300      	movs	r3, #0
 8008460:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8008464:	2300      	movs	r3, #0
 8008466:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            draw_dsc.value_opa = LV_OPA_TRANSP;
 800846a:	2300      	movs	r3, #0
 800846c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8008470:	f107 0310 	add.w	r3, r7, #16
 8008474:	461a      	mov	r2, r3
 8008476:	2100      	movs	r1, #0
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7ff f909 	bl	8007690 <lv_obj_init_draw_rect_dsc>

            lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_OBJ_PART_MAIN);
 800847e:	2100      	movs	r1, #0
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7fc f82d 	bl	80044e0 <lv_obj_get_style_transform_width>
 8008486:	4603      	mov	r3, r0
 8008488:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
            lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_OBJ_PART_MAIN);
 800848c:	2100      	movs	r1, #0
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7fc f837 	bl	8004502 <lv_obj_get_style_transform_height>
 8008494:	4603      	mov	r3, r0
 8008496:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
            lv_area_t coords;
            lv_area_copy(&coords, &obj->coords);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f103 0210 	add.w	r2, r3, #16
 80084a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fb fe70 	bl	800418c <lv_area_copy>
            coords.x1 -= w;
 80084ac:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	b21b      	sxth	r3, r3
 80084bc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            coords.x2 += w;
 80084c0:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084ca:	4413      	add	r3, r2
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	b21b      	sxth	r3, r3
 80084d0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            coords.y1 -= h;
 80084d4:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80084d8:	b29a      	uxth	r2, r3
 80084da:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	b21b      	sxth	r3, r3
 80084e4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            coords.y2 += h;
 80084e8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80084f2:	4413      	add	r3, r2
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	b21b      	sxth	r3, r3
 80084f8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 80084fc:	f107 0210 	add.w	r2, r7, #16
 8008500:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	4618      	mov	r0, r3
 8008508:	f00a ffae 	bl	8013468 <lv_draw_rect>
        }
    }

    return LV_DESIGN_RES_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	37b0      	adds	r7, #176	; 0xb0
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <lv_obj_get_focused_obj>:
 * Get the really focused object by taking `focus_parent` into account.
 * @param obj the start object
 * @return the object to really focus
 */
lv_obj_t * lv_obj_get_focused_obj(const lv_obj_t * obj)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <lv_obj_get_focused_obj+0x12>
 8008524:	2300      	movs	r3, #0
 8008526:	e010      	b.n	800854a <lv_obj_get_focused_obj+0x34>
    const lv_obj_t * focus_obj = obj;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	60fb      	str	r3, [r7, #12]
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 800852c:	e003      	b.n	8008536 <lv_obj_get_focused_obj+0x20>
        focus_obj = lv_obj_get_parent(focus_obj);
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7fe f9ae 	bl	8006890 <lv_obj_get_parent>
 8008534:	60f8      	str	r0, [r7, #12]
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7fe ff42 	bl	80073c0 <lv_obj_get_focus_parent>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <lv_obj_get_focused_obj+0x32>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f2      	bne.n	800852e <lv_obj_get_focused_obj+0x18>
    }

    return (lv_obj_t *)focus_obj;
 8008548:	68fb      	ldr	r3, [r7, #12]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <lv_obj_signal>:
 * @param sign signal type
 * @param param parameter for the signal (depends on signal type)
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	460b      	mov	r3, r1
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	72fb      	strb	r3, [r7, #11]
    if(sign == LV_SIGNAL_GET_STYLE) {
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	2b08      	cmp	r3, #8
 8008566:	d110      	bne.n	800858a <lv_obj_signal+0x36>
        lv_get_style_info_t * info = param;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	617b      	str	r3, [r7, #20]
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <lv_obj_signal+0x2c>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	605a      	str	r2, [r3, #4]
 800857e:	e002      	b.n	8008586 <lv_obj_signal+0x32>
        else info->result = NULL;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2200      	movs	r2, #0
 8008584:	605a      	str	r2, [r3, #4]
        return LV_RES_OK;
 8008586:	2301      	movs	r3, #1
 8008588:	e098      	b.n	80086bc <lv_obj_signal+0x168>
    }
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 800858a:	7afb      	ldrb	r3, [r7, #11]
 800858c:	2b07      	cmp	r3, #7
 800858e:	d105      	bne.n	800859c <lv_obj_signal+0x48>
 8008590:	494c      	ldr	r1, [pc, #304]	; (80086c4 <lv_obj_signal+0x170>)
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff f85a 	bl	800764c <lv_obj_handle_get_type_signal>
 8008598:	4603      	mov	r3, r0
 800859a:	e08f      	b.n	80086bc <lv_obj_signal+0x168>

    lv_res_t res = LV_RES_OK;
 800859c:	2301      	movs	r3, #1
 800859e:	77fb      	strb	r3, [r7, #31]

    if(sign == LV_SIGNAL_CHILD_CHG) {
 80085a0:	7afb      	ldrb	r3, [r7, #11]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d10a      	bne.n	80085bc <lv_obj_signal+0x68>
        /*Return 'invalid' if the child change signal is not enabled*/
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 80085a6:	2101      	movs	r1, #1
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7fe ff3d 	bl	8007428 <lv_obj_is_protected>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 8082 	beq.w	80086ba <lv_obj_signal+0x166>
 80085b6:	2300      	movs	r3, #0
 80085b8:	77fb      	strb	r3, [r7, #31]
 80085ba:	e07e      	b.n	80086ba <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80085bc:	7afb      	ldrb	r3, [r7, #11]
 80085be:	2b06      	cmp	r3, #6
 80085c0:	d111      	bne.n	80085e6 <lv_obj_signal+0x92>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
 80085c2:	2100      	movs	r1, #0
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f7ff fc38 	bl	8007e3a <lv_obj_get_draw_rect_ext_pad_size>
 80085ca:	4603      	mov	r3, r0
 80085cc:	837b      	strh	r3, [r7, #26]
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80085d4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80085d8:	4293      	cmp	r3, r2
 80085da:	bfb8      	it	lt
 80085dc:	4613      	movlt	r3, r2
 80085de:	b21a      	sxth	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	865a      	strh	r2, [r3, #50]	; 0x32
 80085e4:	e069      	b.n	80086ba <lv_obj_signal+0x166>
    }
#if LV_USE_OBJ_REALIGN
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 80085e6:	7afb      	ldrb	r3, [r7, #11]
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d10b      	bne.n	8008604 <lv_obj_signal+0xb0>
        if(obj->realign.auto_realign) {
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d05e      	beq.n	80086ba <lv_obj_signal+0x166>
            lv_obj_realign(obj);
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f7fd fc05 	bl	8005e0c <lv_obj_realign>
 8008602:	e05a      	b.n	80086ba <lv_obj_signal+0x166>
        }
    }
#endif
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	2b04      	cmp	r3, #4
 8008608:	d103      	bne.n	8008612 <lv_obj_signal+0xbe>
        lv_obj_refresh_ext_draw_pad(obj);
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7fe f8a4 	bl	8006758 <lv_obj_refresh_ext_draw_pad>
 8008610:	e053      	b.n	80086ba <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_PRESSED) {
 8008612:	7afb      	ldrb	r3, [r7, #11]
 8008614:	2b0b      	cmp	r3, #11
 8008616:	d104      	bne.n	8008622 <lv_obj_signal+0xce>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8008618:	2110      	movs	r1, #16
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f7fd ff68 	bl	80064f0 <lv_obj_add_state>
 8008620:	e04b      	b.n	80086ba <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8008622:	7afb      	ldrb	r3, [r7, #11]
 8008624:	2b0e      	cmp	r3, #14
 8008626:	d002      	beq.n	800862e <lv_obj_signal+0xda>
 8008628:	7afb      	ldrb	r3, [r7, #11]
 800862a:	2b0d      	cmp	r3, #13
 800862c:	d104      	bne.n	8008638 <lv_obj_signal+0xe4>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 800862e:	2110      	movs	r1, #16
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7fd ff8d 	bl	8006550 <lv_obj_clear_state>
 8008636:	e040      	b.n	80086ba <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_FOCUS) {
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	2b16      	cmp	r3, #22
 800863c:	d12a      	bne.n	8008694 <lv_obj_signal+0x140>
        bool editing = false;
 800863e:	2300      	movs	r3, #0
 8008640:	77bb      	strb	r3, [r7, #30]
#if LV_USE_GROUP
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f7fe ff4c 	bl	80074e0 <lv_obj_get_group>
 8008648:	4603      	mov	r3, r0
 800864a:	4618      	mov	r0, r3
 800864c:	f7f9 faae 	bl	8001bac <lv_group_get_editing>
 8008650:	4603      	mov	r3, r0
 8008652:	77bb      	strb	r3, [r7, #30]
#endif
        if(editing) {
 8008654:	7fbb      	ldrb	r3, [r7, #30]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00f      	beq.n	800867a <lv_obj_signal+0x126>
            uint8_t state = LV_STATE_FOCUSED;
 800865a:	2302      	movs	r3, #2
 800865c:	777b      	strb	r3, [r7, #29]
            state |= LV_STATE_EDITED;
 800865e:	7f7b      	ldrb	r3, [r7, #29]
 8008660:	f043 0304 	orr.w	r3, r3, #4
 8008664:	777b      	strb	r3, [r7, #29]

            /*if using focus mode, change target to parent*/
            obj = lv_obj_get_focused_obj(obj);
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff ff55 	bl	8008516 <lv_obj_get_focused_obj>
 800866c:	60f8      	str	r0, [r7, #12]

            lv_obj_add_state(obj, state);
 800866e:	7f7b      	ldrb	r3, [r7, #29]
 8008670:	4619      	mov	r1, r3
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f7fd ff3c 	bl	80064f0 <lv_obj_add_state>
 8008678:	e01f      	b.n	80086ba <lv_obj_signal+0x166>
        }
        else {

            /*if using focus mode, change target to parent*/
            obj = lv_obj_get_focused_obj(obj);
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f7ff ff4b 	bl	8008516 <lv_obj_get_focused_obj>
 8008680:	60f8      	str	r0, [r7, #12]

            lv_obj_add_state(obj, LV_STATE_FOCUSED);
 8008682:	2102      	movs	r1, #2
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7fd ff33 	bl	80064f0 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 800868a:	2104      	movs	r1, #4
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f7fd ff5f 	bl	8006550 <lv_obj_clear_state>
 8008692:	e012      	b.n	80086ba <lv_obj_signal+0x166>
        }
    }
    else if(sign == LV_SIGNAL_DEFOCUS) {
 8008694:	7afb      	ldrb	r3, [r7, #11]
 8008696:	2b17      	cmp	r3, #23
 8008698:	d108      	bne.n	80086ac <lv_obj_signal+0x158>

        /*if using focus mode, change target to parent*/
        obj = lv_obj_get_focused_obj(obj);
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f7ff ff3b 	bl	8008516 <lv_obj_get_focused_obj>
 80086a0:	60f8      	str	r0, [r7, #12]

        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 80086a2:	2106      	movs	r1, #6
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7fd ff53 	bl	8006550 <lv_obj_clear_state>
 80086aa:	e006      	b.n	80086ba <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_CLEANUP) {
 80086ac:	7afb      	ldrb	r3, [r7, #11]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d103      	bne.n	80086ba <lv_obj_signal+0x166>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 80086b2:	2100      	movs	r1, #0
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7fd fbef 	bl	8005e98 <lv_obj_clean_style_list>
    }

    return res;
 80086ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3720      	adds	r7, #32
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	0802d0c8 	.word	0x0802d0c8

080086c8 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	807b      	strh	r3, [r7, #2]
 80086d4:	4613      	mov	r3, r2
 80086d6:	803b      	strh	r3, [r7, #0]
    lv_obj_t * i;
    _LV_LL_READ(obj->child_ll, i) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3304      	adds	r3, #4
 80086dc:	4618      	mov	r0, r3
 80086de:	f013 fdff 	bl	801c2e0 <_lv_ll_get_head>
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	e036      	b.n	8008754 <refresh_children_position+0x8c>
        i->coords.x1 += x_diff;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	887b      	ldrh	r3, [r7, #2]
 80086f0:	4413      	add	r3, r2
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	b21a      	sxth	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	821a      	strh	r2, [r3, #16]
        i->coords.y1 += y_diff;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008700:	b29a      	uxth	r2, r3
 8008702:	883b      	ldrh	r3, [r7, #0]
 8008704:	4413      	add	r3, r2
 8008706:	b29b      	uxth	r3, r3
 8008708:	b21a      	sxth	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	825a      	strh	r2, [r3, #18]
        i->coords.x2 += x_diff;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008714:	b29a      	uxth	r2, r3
 8008716:	887b      	ldrh	r3, [r7, #2]
 8008718:	4413      	add	r3, r2
 800871a:	b29b      	uxth	r3, r3
 800871c:	b21a      	sxth	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	829a      	strh	r2, [r3, #20]
        i->coords.y2 += y_diff;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008728:	b29a      	uxth	r2, r3
 800872a:	883b      	ldrh	r3, [r7, #0]
 800872c:	4413      	add	r3, r2
 800872e:	b29b      	uxth	r3, r3
 8008730:	b21a      	sxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	82da      	strh	r2, [r3, #22]

        refresh_children_position(i, x_diff, y_diff);
 8008736:	f9b7 2000 	ldrsh.w	r2, [r7]
 800873a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800873e:	4619      	mov	r1, r3
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff ffc1 	bl	80086c8 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3304      	adds	r3, #4
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	4618      	mov	r0, r3
 800874e:	f013 fded 	bl	801c32c <_lv_ll_get_next>
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1c5      	bne.n	80086e6 <refresh_children_position+0x1e>
    }
}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <report_style_mod_core>:
 * Refresh the style of all children of an object. (Called recursively)
 * @param style refresh objects only with this style_list.
 * @param obj pointer to an object
 */
static void report_style_mod_core(void * style, lv_obj_t * obj)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 800876c:	2300      	movs	r3, #0
 800876e:	75fb      	strb	r3, [r7, #23]
 8008770:	e02e      	b.n	80087d0 <report_style_mod_core+0x6e>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	4619      	mov	r1, r3
 8008776:	6838      	ldr	r0, [r7, #0]
 8008778:	f7fe f9aa 	bl	8006ad0 <lv_obj_get_style_list>
 800877c:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d029      	beq.n	80087d8 <report_style_mod_core+0x76>

        uint8_t ci;
        for(ci = 0; ci < list->style_cnt; ci++) {
 8008784:	2300      	movs	r3, #0
 8008786:	75bb      	strb	r3, [r7, #22]
 8008788:	e016      	b.n	80087b8 <report_style_mod_core+0x56>
            /* changed class to _class to allow compilation as c++ */
            lv_style_t * _class = lv_style_list_get_style(list, ci);
 800878a:	7dbb      	ldrb	r3, [r7, #22]
 800878c:	4619      	mov	r1, r3
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7fb fe39 	bl	8004406 <lv_style_list_get_style>
 8008794:	60b8      	str	r0, [r7, #8]
            if(_class == style || style == NULL) {
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	429a      	cmp	r2, r3
 800879c:	d002      	beq.n	80087a4 <report_style_mod_core+0x42>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <report_style_mod_core+0x50>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	22ff      	movs	r2, #255	; 0xff
 80087a8:	4619      	mov	r1, r3
 80087aa:	6838      	ldr	r0, [r7, #0]
 80087ac:	f7fd fba6 	bl	8005efc <lv_obj_refresh_style>
                break;
 80087b0:	e00b      	b.n	80087ca <report_style_mod_core+0x68>
        for(ci = 0; ci < list->style_cnt; ci++) {
 80087b2:	7dbb      	ldrb	r3, [r7, #22]
 80087b4:	3301      	adds	r3, #1
 80087b6:	75bb      	strb	r3, [r7, #22]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	791b      	ldrb	r3, [r3, #4]
 80087bc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	7dbb      	ldrb	r3, [r7, #22]
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d3df      	bcc.n	800878a <report_style_mod_core+0x28>
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	3301      	adds	r3, #1
 80087ce:	75fb      	strb	r3, [r7, #23]
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	2b40      	cmp	r3, #64	; 0x40
 80087d4:	d1cd      	bne.n	8008772 <report_style_mod_core+0x10>
 80087d6:	e000      	b.n	80087da <report_style_mod_core+0x78>
        if(list == NULL) break;
 80087d8:	bf00      	nop
            }
        }
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 80087da:	2100      	movs	r1, #0
 80087dc:	6838      	ldr	r0, [r7, #0]
 80087de:	f7fe f875 	bl	80068cc <lv_obj_get_child>
 80087e2:	6138      	str	r0, [r7, #16]
    while(child) {
 80087e4:	e008      	b.n	80087f8 <report_style_mod_core+0x96>
        report_style_mod_core(style, child);
 80087e6:	6939      	ldr	r1, [r7, #16]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff ffba 	bl	8008762 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
 80087ee:	6939      	ldr	r1, [r7, #16]
 80087f0:	6838      	ldr	r0, [r7, #0]
 80087f2:	f7fe f86b 	bl	80068cc <lv_obj_get_child>
 80087f6:	6138      	str	r0, [r7, #16]
    while(child) {
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1f3      	bne.n	80087e6 <report_style_mod_core+0x84>
    }

}
 80087fe:	bf00      	nop
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 800880e:	2100      	movs	r1, #0
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7fe f85b 	bl	80068cc <lv_obj_get_child>
 8008816:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 8008818:	e013      	b.n	8008842 <refresh_children_style+0x3c>
        lv_obj_invalidate(child);
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7fd f818 	bl	8005850 <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	2200      	movs	r2, #0
 8008826:	2104      	movs	r1, #4
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	4798      	blx	r3
        lv_obj_invalidate(child);
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f7fd f80f 	bl	8005850 <lv_obj_invalidate>

        refresh_children_style(child); /*Check children too*/
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f7ff ffe7 	bl	8008806 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
 8008838:	68f9      	ldr	r1, [r7, #12]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7fe f846 	bl	80068cc <lv_obj_get_child>
 8008840:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e8      	bne.n	800881a <refresh_children_style+0x14>
    }
}
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <obj_align_core>:
    }
}

static void obj_align_core(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, bool x_set, bool y_set,
                           lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4611      	mov	r1, r2
 800885c:	461a      	mov	r2, r3
 800885e:	460b      	mov	r3, r1
 8008860:	71fb      	strb	r3, [r7, #7]
 8008862:	4613      	mov	r3, r2
 8008864:	71bb      	strb	r3, [r7, #6]
    lv_point_t new_pos;
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f103 0010 	add.w	r0, r3, #16
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f103 0110 	add.w	r1, r3, #16
 8008872:	f107 0314 	add.w	r3, r7, #20
 8008876:	79fa      	ldrb	r2, [r7, #7]
 8008878:	f012 fda4 	bl	801b3c4 <_lv_area_align>

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7fe f807 	bl	8006890 <lv_obj_get_parent>
 8008882:	61f8      	str	r0, [r7, #28]
    lv_coord_t par_abs_x  = par->coords.x1;
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	8a1b      	ldrh	r3, [r3, #16]
 8008888:	837b      	strh	r3, [r7, #26]
    lv_coord_t par_abs_y  = par->coords.y1;
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	8a5b      	ldrh	r3, [r3, #18]
 800888e:	833b      	strh	r3, [r7, #24]
    new_pos.x += x_ofs;
 8008890:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008894:	b29a      	uxth	r2, r3
 8008896:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008898:	4413      	add	r3, r2
 800889a:	b29b      	uxth	r3, r3
 800889c:	b21b      	sxth	r3, r3
 800889e:	82bb      	strh	r3, [r7, #20]
    new_pos.y += y_ofs;
 80088a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80088a8:	4413      	add	r3, r2
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	b21b      	sxth	r3, r3
 80088ae:	82fb      	strh	r3, [r7, #22]
    new_pos.x -= par_abs_x;
 80088b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	8b7b      	ldrh	r3, [r7, #26]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	b21b      	sxth	r3, r3
 80088be:	82bb      	strh	r3, [r7, #20]
    new_pos.y -= par_abs_y;
 80088c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	8b3b      	ldrh	r3, [r7, #24]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	b21b      	sxth	r3, r3
 80088ce:	82fb      	strh	r3, [r7, #22]

    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
 80088d0:	79bb      	ldrb	r3, [r7, #6]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00c      	beq.n	80088f0 <obj_align_core+0xa0>
 80088d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d008      	beq.n	80088f0 <obj_align_core+0xa0>
 80088de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80088e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80088e6:	4619      	mov	r1, r3
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f7fd f8d5 	bl	8005a98 <lv_obj_set_pos>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
}
 80088ee:	e013      	b.n	8008918 <obj_align_core+0xc8>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
 80088f0:	79bb      	ldrb	r3, [r7, #6]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d006      	beq.n	8008904 <obj_align_core+0xb4>
 80088f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80088fa:	4619      	mov	r1, r3
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f7fd f971 	bl	8005be4 <lv_obj_set_x>
}
 8008902:	e009      	b.n	8008918 <obj_align_core+0xc8>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
 8008904:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <obj_align_core+0xc8>
 800890c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008910:	4619      	mov	r1, r3
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7fd f990 	bl	8005c38 <lv_obj_set_y>
}
 8008918:	bf00      	nop
 800891a:	3720      	adds	r7, #32
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <obj_align_mid_core>:

static void obj_align_mid_core(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align,  bool x_set, bool y_set,
                               lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08a      	sub	sp, #40	; 0x28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4611      	mov	r1, r2
 800892c:	461a      	mov	r2, r3
 800892e:	460b      	mov	r3, r1
 8008930:	71fb      	strb	r3, [r7, #7]
 8008932:	4613      	mov	r3, r2
 8008934:	71bb      	strb	r3, [r7, #6]
    lv_coord_t new_x = lv_obj_get_x(obj);
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f7fe f81e 	bl	8006978 <lv_obj_get_x>
 800893c:	4603      	mov	r3, r0
 800893e:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t new_y = lv_obj_get_y(obj);
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f7fe f84d 	bl	80069e0 <lv_obj_get_y>
 8008946:	4603      	mov	r3, r0
 8008948:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f7fe f87c 	bl	8006a48 <lv_obj_get_width>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	da00      	bge.n	8008958 <obj_align_mid_core+0x38>
 8008956:	3301      	adds	r3, #1
 8008958:	105b      	asrs	r3, r3, #1
 800895a:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f7fe f895 	bl	8006a8c <lv_obj_get_height>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	da00      	bge.n	800896a <obj_align_mid_core+0x4a>
 8008968:	3301      	adds	r3, #1
 800896a:	105b      	asrs	r3, r3, #1
 800896c:	843b      	strh	r3, [r7, #32]

    switch(align) {
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	2b14      	cmp	r3, #20
 8008972:	f200 819e 	bhi.w	8008cb2 <obj_align_mid_core+0x392>
 8008976:	a201      	add	r2, pc, #4	; (adr r2, 800897c <obj_align_mid_core+0x5c>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	080089d1 	.word	0x080089d1
 8008980:	08008a0b 	.word	0x08008a0b
 8008984:	08008a1d 	.word	0x08008a1d
 8008988:	08008a43 	.word	0x08008a43
 800898c:	08008a5f 	.word	0x08008a5f
 8008990:	08008a7b 	.word	0x08008a7b
 8008994:	08008aab 	.word	0x08008aab
 8008998:	08008ad1 	.word	0x08008ad1
 800899c:	08008af7 	.word	0x08008af7
 80089a0:	08008b27 	.word	0x08008b27
 80089a4:	08008b39 	.word	0x08008b39
 80089a8:	08008b5f 	.word	0x08008b5f
 80089ac:	08008b7b 	.word	0x08008b7b
 80089b0:	08008b97 	.word	0x08008b97
 80089b4:	08008bc7 	.word	0x08008bc7
 80089b8:	08008bed 	.word	0x08008bed
 80089bc:	08008bff 	.word	0x08008bff
 80089c0:	08008c25 	.word	0x08008c25
 80089c4:	08008c41 	.word	0x08008c41
 80089c8:	08008c5d 	.word	0x08008c5d
 80089cc:	08008c8d 	.word	0x08008c8d
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80089d0:	68b8      	ldr	r0, [r7, #8]
 80089d2:	f7fe f839 	bl	8006a48 <lv_obj_get_width>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	da00      	bge.n	80089de <obj_align_mid_core+0xbe>
 80089dc:	3301      	adds	r3, #1
 80089de:	105b      	asrs	r3, r3, #1
 80089e0:	b21b      	sxth	r3, r3
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80089ec:	68b8      	ldr	r0, [r7, #8]
 80089ee:	f7fe f84d 	bl	8006a8c <lv_obj_get_height>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da00      	bge.n	80089fa <obj_align_mid_core+0xda>
 80089f8:	3301      	adds	r3, #1
 80089fa:	105b      	asrs	r3, r3, #1
 80089fc:	b21b      	sxth	r3, r3
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	8c3b      	ldrh	r3, [r7, #32]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008a08:	e153      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = -obj_w_half;
 8008a0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a0c:	425b      	negs	r3, r3
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008a12:	8c3b      	ldrh	r3, [r7, #32]
 8008a14:	425b      	negs	r3, r3
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008a1a:	e14a      	b.n	8008cb2 <obj_align_mid_core+0x392>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008a1c:	68b8      	ldr	r0, [r7, #8]
 8008a1e:	f7fe f813 	bl	8006a48 <lv_obj_get_width>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	da00      	bge.n	8008a2a <obj_align_mid_core+0x10a>
 8008a28:	3301      	adds	r3, #1
 8008a2a:	105b      	asrs	r3, r3, #1
 8008a2c:	b21b      	sxth	r3, r3
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008a38:	8c3b      	ldrh	r3, [r7, #32]
 8008a3a:	425b      	negs	r3, r3
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008a40:	e137      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008a42:	68b8      	ldr	r0, [r7, #8]
 8008a44:	f7fe f800 	bl	8006a48 <lv_obj_get_width>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008a54:	8c3b      	ldrh	r3, [r7, #32]
 8008a56:	425b      	negs	r3, r3
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008a5c:	e129      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = -obj_w_half;
 8008a5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a60:	425b      	negs	r3, r3
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008a66:	68b8      	ldr	r0, [r7, #8]
 8008a68:	f7fe f810 	bl	8006a8c <lv_obj_get_height>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	8c3b      	ldrh	r3, [r7, #32]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008a78:	e11b      	b.n	8008cb2 <obj_align_mid_core+0x392>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f7fd ffe4 	bl	8006a48 <lv_obj_get_width>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	da00      	bge.n	8008a88 <obj_align_mid_core+0x168>
 8008a86:	3301      	adds	r3, #1
 8008a88:	105b      	asrs	r3, r3, #1
 8008a8a:	b21b      	sxth	r3, r3
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008a96:	68b8      	ldr	r0, [r7, #8]
 8008a98:	f7fd fff8 	bl	8006a8c <lv_obj_get_height>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	8c3b      	ldrh	r3, [r7, #32]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008aa8:	e103      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008aaa:	68b8      	ldr	r0, [r7, #8]
 8008aac:	f7fd ffcc 	bl	8006a48 <lv_obj_get_width>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008abc:	68b8      	ldr	r0, [r7, #8]
 8008abe:	f7fd ffe5 	bl	8006a8c <lv_obj_get_height>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	8c3b      	ldrh	r3, [r7, #32]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008ace:	e0f0      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = -obj_w_half;
 8008ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ad2:	425b      	negs	r3, r3
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008ad8:	68b8      	ldr	r0, [r7, #8]
 8008ada:	f7fd ffd7 	bl	8006a8c <lv_obj_get_height>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	da00      	bge.n	8008ae6 <obj_align_mid_core+0x1c6>
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	105b      	asrs	r3, r3, #1
 8008ae8:	b21b      	sxth	r3, r3
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	8c3b      	ldrh	r3, [r7, #32]
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008af4:	e0dd      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008af6:	68b8      	ldr	r0, [r7, #8]
 8008af8:	f7fd ffa6 	bl	8006a48 <lv_obj_get_width>
 8008afc:	4603      	mov	r3, r0
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008b08:	68b8      	ldr	r0, [r7, #8]
 8008b0a:	f7fd ffbf 	bl	8006a8c <lv_obj_get_height>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	da00      	bge.n	8008b16 <obj_align_mid_core+0x1f6>
 8008b14:	3301      	adds	r3, #1
 8008b16:	105b      	asrs	r3, r3, #1
 8008b18:	b21b      	sxth	r3, r3
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	8c3b      	ldrh	r3, [r7, #32]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008b24:	e0c5      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = -obj_w_half;
 8008b26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b28:	425b      	negs	r3, r3
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008b2e:	8c3b      	ldrh	r3, [r7, #32]
 8008b30:	425b      	negs	r3, r3
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008b36:	e0bc      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008b38:	68b8      	ldr	r0, [r7, #8]
 8008b3a:	f7fd ff85 	bl	8006a48 <lv_obj_get_width>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da00      	bge.n	8008b46 <obj_align_mid_core+0x226>
 8008b44:	3301      	adds	r3, #1
 8008b46:	105b      	asrs	r3, r3, #1
 8008b48:	b21b      	sxth	r3, r3
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008b54:	8c3b      	ldrh	r3, [r7, #32]
 8008b56:	425b      	negs	r3, r3
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008b5c:	e0a9      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008b5e:	68b8      	ldr	r0, [r7, #8]
 8008b60:	f7fd ff72 	bl	8006a48 <lv_obj_get_width>
 8008b64:	4603      	mov	r3, r0
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008b70:	8c3b      	ldrh	r3, [r7, #32]
 8008b72:	425b      	negs	r3, r3
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008b78:	e09b      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = -obj_w_half;
 8008b7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b7c:	425b      	negs	r3, r3
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008b82:	68b8      	ldr	r0, [r7, #8]
 8008b84:	f7fd ff82 	bl	8006a8c <lv_obj_get_height>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	8c3b      	ldrh	r3, [r7, #32]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008b94:	e08d      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008b96:	68b8      	ldr	r0, [r7, #8]
 8008b98:	f7fd ff56 	bl	8006a48 <lv_obj_get_width>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	da00      	bge.n	8008ba4 <obj_align_mid_core+0x284>
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	105b      	asrs	r3, r3, #1
 8008ba6:	b21b      	sxth	r3, r3
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008bb2:	68b8      	ldr	r0, [r7, #8]
 8008bb4:	f7fd ff6a 	bl	8006a8c <lv_obj_get_height>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	8c3b      	ldrh	r3, [r7, #32]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008bc4:	e075      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008bc6:	68b8      	ldr	r0, [r7, #8]
 8008bc8:	f7fd ff3e 	bl	8006a48 <lv_obj_get_width>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008bd8:	68b8      	ldr	r0, [r7, #8]
 8008bda:	f7fd ff57 	bl	8006a8c <lv_obj_get_height>
 8008bde:	4603      	mov	r3, r0
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	8c3b      	ldrh	r3, [r7, #32]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008bea:	e062      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -obj_w_half;
 8008bec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bee:	425b      	negs	r3, r3
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008bf4:	8c3b      	ldrh	r3, [r7, #32]
 8008bf6:	425b      	negs	r3, r3
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008bfc:	e059      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -obj_w_half;
 8008bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c00:	425b      	negs	r3, r3
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008c06:	68b8      	ldr	r0, [r7, #8]
 8008c08:	f7fd ff40 	bl	8006a8c <lv_obj_get_height>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	da00      	bge.n	8008c14 <obj_align_mid_core+0x2f4>
 8008c12:	3301      	adds	r3, #1
 8008c14:	105b      	asrs	r3, r3, #1
 8008c16:	b21b      	sxth	r3, r3
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	8c3b      	ldrh	r3, [r7, #32]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008c22:	e046      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -obj_w_half;
 8008c24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c26:	425b      	negs	r3, r3
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f7fd ff2d 	bl	8006a8c <lv_obj_get_height>
 8008c32:	4603      	mov	r3, r0
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	8c3b      	ldrh	r3, [r7, #32]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008c3e:	e038      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008c40:	68b8      	ldr	r0, [r7, #8]
 8008c42:	f7fd ff01 	bl	8006a48 <lv_obj_get_width>
 8008c46:	4603      	mov	r3, r0
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008c52:	8c3b      	ldrh	r3, [r7, #32]
 8008c54:	425b      	negs	r3, r3
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008c5a:	e02a      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008c5c:	68b8      	ldr	r0, [r7, #8]
 8008c5e:	f7fd fef3 	bl	8006a48 <lv_obj_get_width>
 8008c62:	4603      	mov	r3, r0
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008c6e:	68b8      	ldr	r0, [r7, #8]
 8008c70:	f7fd ff0c 	bl	8006a8c <lv_obj_get_height>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da00      	bge.n	8008c7c <obj_align_mid_core+0x35c>
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	105b      	asrs	r3, r3, #1
 8008c7e:	b21b      	sxth	r3, r3
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	8c3b      	ldrh	r3, [r7, #32]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008c8a:	e012      	b.n	8008cb2 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008c8c:	68b8      	ldr	r0, [r7, #8]
 8008c8e:	f7fd fedb 	bl	8006a48 <lv_obj_get_width>
 8008c92:	4603      	mov	r3, r0
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008c9e:	68b8      	ldr	r0, [r7, #8]
 8008ca0:	f7fd fef4 	bl	8006a8c <lv_obj_get_height>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	8c3b      	ldrh	r3, [r7, #32]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008cb0:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7fd fdec 	bl	8006890 <lv_obj_get_parent>
 8008cb8:	61f8      	str	r0, [r7, #28]
    lv_coord_t base_abs_x = base->coords.x1;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	8a1b      	ldrh	r3, [r3, #16]
 8008cbe:	837b      	strh	r3, [r7, #26]
    lv_coord_t base_abs_y = base->coords.y1;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	8a5b      	ldrh	r3, [r3, #18]
 8008cc4:	833b      	strh	r3, [r7, #24]
    lv_coord_t par_abs_x  = par->coords.x1;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	8a1b      	ldrh	r3, [r3, #16]
 8008cca:	82fb      	strh	r3, [r7, #22]
    lv_coord_t par_abs_y  = par->coords.y1;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	8a5b      	ldrh	r3, [r3, #18]
 8008cd0:	82bb      	strh	r3, [r7, #20]
    new_x += x_ofs + base_abs_x;
 8008cd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008cd4:	8b7b      	ldrh	r3, [r7, #26]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cdc:	4413      	add	r3, r2
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y += y_ofs + base_abs_y;
 8008ce2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8008ce4:	8b3b      	ldrh	r3, [r7, #24]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cec:	4413      	add	r3, r2
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	84bb      	strh	r3, [r7, #36]	; 0x24
    new_x -= par_abs_x;
 8008cf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008cf4:	8afb      	ldrh	r3, [r7, #22]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y -= par_abs_y;
 8008cfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008cfe:	8abb      	ldrh	r3, [r7, #20]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	84bb      	strh	r3, [r7, #36]	; 0x24
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8008d06:	79bb      	ldrb	r3, [r7, #6]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00c      	beq.n	8008d26 <obj_align_mid_core+0x406>
 8008d0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <obj_align_mid_core+0x406>
 8008d14:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8008d18:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f7fc feba 	bl	8005a98 <lv_obj_set_pos>
    else if(x_set) lv_obj_set_x(obj, new_x);
    else if(y_set) lv_obj_set_y(obj, new_y);

}
 8008d24:	e013      	b.n	8008d4e <obj_align_mid_core+0x42e>
    else if(x_set) lv_obj_set_x(obj, new_x);
 8008d26:	79bb      	ldrb	r3, [r7, #6]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <obj_align_mid_core+0x41a>
 8008d2c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008d30:	4619      	mov	r1, r3
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7fc ff56 	bl	8005be4 <lv_obj_set_x>
}
 8008d38:	e009      	b.n	8008d4e <obj_align_mid_core+0x42e>
    else if(y_set) lv_obj_set_y(obj, new_y);
 8008d3a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <obj_align_mid_core+0x42e>
 8008d42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008d46:	4619      	mov	r1, r3
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7fc ff75 	bl	8005c38 <lv_obj_set_y>
}
 8008d4e:	bf00      	nop
 8008d50:	3728      	adds	r7, #40	; 0x28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop

08008d58 <trans_create>:
 * @param new_state the new state of the object
 * @return pointer to the allocated `the transaction` variable or `NULL` if no transition created
 */
static lv_style_trans_t * trans_create(lv_obj_t * obj, lv_style_property_t prop, uint8_t part, lv_state_t prev_state,
                                       lv_state_t new_state)
{
 8008d58:	b590      	push	{r4, r7, lr}
 8008d5a:	b08d      	sub	sp, #52	; 0x34
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	4608      	mov	r0, r1
 8008d62:	4611      	mov	r1, r2
 8008d64:	461a      	mov	r2, r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	807b      	strh	r3, [r7, #2]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	707b      	strb	r3, [r7, #1]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	703b      	strb	r3, [r7, #0]
    lv_style_trans_t * tr;
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 8008d72:	787b      	ldrb	r3, [r7, #1]
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7fd feaa 	bl	8006ad0 <lv_obj_get_style_list>
 8008d7c:	6278      	str	r0, [r7, #36]	; 0x24
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
 8008d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d80:	f003 f839 	bl	800bdf6 <_lv_style_list_get_transition_style>
 8008d84:	6238      	str	r0, [r7, #32]

    bool cache_ori = style_list->ignore_cache;
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	795b      	ldrb	r3, [r3, #5]
 8008d8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bf14      	ite	ne
 8008d94:	2301      	movne	r3, #1
 8008d96:	2300      	moveq	r3, #0
 8008d98:	77fb      	strb	r3, [r7, #31]

    /*Get the previous and current values*/
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 8008d9a:	887b      	ldrh	r3, [r7, #2]
 8008d9c:	f003 030f 	and.w	r3, r3, #15
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	f300 80b1 	bgt.w	8008f08 <trans_create+0x1b0>
        style_list->skip_trans = 1;
 8008da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da8:	7953      	ldrb	r3, [r2, #5]
 8008daa:	f043 0301 	orr.w	r3, r3, #1
 8008dae:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 8008db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db2:	7953      	ldrb	r3, [r2, #5]
 8008db4:	f043 0308 	orr.w	r3, r3, #8
 8008db8:	7153      	strb	r3, [r2, #5]
        obj->state = prev_state;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	783a      	ldrb	r2, [r7, #0]
 8008dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 8008dc2:	887a      	ldrh	r2, [r7, #2]
 8008dc4:	787b      	ldrb	r3, [r7, #1]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7fd fea4 	bl	8006b16 <_lv_obj_get_style_int>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	857b      	strh	r3, [r7, #42]	; 0x2a
        obj->state = new_state;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 8008ddc:	887a      	ldrh	r2, [r7, #2]
 8008dde:	787b      	ldrb	r3, [r7, #1]
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7fd fe97 	bl	8006b16 <_lv_obj_get_style_int>
 8008de8:	4603      	mov	r3, r0
 8008dea:	853b      	strh	r3, [r7, #40]	; 0x28
        style_list->skip_trans = 0;
 8008dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dee:	7953      	ldrb	r3, [r2, #5]
 8008df0:	f36f 0300 	bfc	r3, #0, #1
 8008df4:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8008df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df8:	7953      	ldrb	r3, [r2, #5]
 8008dfa:	7ff9      	ldrb	r1, [r7, #31]
 8008dfc:	f361 03c3 	bfi	r3, r1, #3, #1
 8008e00:	7153      	strb	r3, [r2, #5]

        if(int1 == int2)  return NULL;
 8008e02:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8008e06:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d101      	bne.n	8008e12 <trans_create+0xba>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e1d6      	b.n	80091c0 <trans_create+0x468>
        obj->state = prev_state;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	783a      	ldrb	r2, [r7, #0]
 8008e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
 8008e1a:	887a      	ldrh	r2, [r7, #2]
 8008e1c:	787b      	ldrb	r3, [r7, #1]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7fd fe78 	bl	8006b16 <_lv_obj_get_style_int>
 8008e26:	4603      	mov	r3, r0
 8008e28:	857b      	strh	r3, [r7, #42]	; 0x2a
        obj->state = new_state;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
 8008e34:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8008e38:	887b      	ldrh	r3, [r7, #2]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6a38      	ldr	r0, [r7, #32]
 8008e3e:	f002 fc71 	bl	800b724 <_lv_style_set_int>

        if(prop == LV_STYLE_RADIUS) {
 8008e42:	887b      	ldrh	r3, [r7, #2]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d13d      	bne.n	8008ec4 <trans_create+0x16c>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
 8008e48:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008e4c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d005      	beq.n	8008e60 <trans_create+0x108>
 8008e54:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008e58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d131      	bne.n	8008ec4 <trans_create+0x16c>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7fd fdf1 	bl	8006a48 <lv_obj_get_width>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da00      	bge.n	8008e6e <trans_create+0x116>
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	105b      	asrs	r3, r3, #1
 8008e70:	837b      	strh	r3, [r7, #26]
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7fd fde8 	bl	8006a48 <lv_obj_get_width>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	da00      	bge.n	8008e80 <trans_create+0x128>
 8008e7e:	3301      	adds	r3, #1
 8008e80:	105b      	asrs	r3, r3, #1
 8008e82:	833b      	strh	r3, [r7, #24]
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8008e84:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008e88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d109      	bne.n	8008ea4 <trans_create+0x14c>
 8008e90:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	bfa8      	it	ge
 8008ea0:	4613      	movge	r3, r2
 8008ea2:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8008ea4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008ea8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d109      	bne.n	8008ec4 <trans_create+0x16c>
 8008eb0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	bfa8      	it	ge
 8008ec0:	4613      	movge	r3, r2
 8008ec2:	853b      	strh	r3, [r7, #40]	; 0x28
            }
        }

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8008ec4:	48b6      	ldr	r0, [pc, #728]	; (80091a0 <trans_create+0x448>)
 8008ec6:	f013 f8ae 	bl	801c026 <_lv_ll_ins_head>
 8008eca:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 8008ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ece:	f012 fe51 	bl	801bb74 <lv_debug_check_null>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f083 0301 	eor.w	r3, r3, #1
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d008      	beq.n	8008ef0 <trans_create+0x198>
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	f04f 0400 	mov.w	r4, #0
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	48ae      	ldr	r0, [pc, #696]	; (80091a4 <trans_create+0x44c>)
 8008eea:	f012 fe53 	bl	801bb94 <lv_debug_log_error>
 8008eee:	e7fe      	b.n	8008eee <trans_create+0x196>
        if(tr == NULL) return NULL;
 8008ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <trans_create+0x1a2>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e162      	b.n	80091c0 <trans_create+0x468>
        tr->start_value._int = int1;
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008efe:	811a      	strh	r2, [r3, #8]
        tr->end_value._int = int2;
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008f04:	819a      	strh	r2, [r3, #12]
 8008f06:	e15a      	b.n	80091be <trans_create+0x466>
    }
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8008f08:	887b      	ldrh	r3, [r7, #2]
 8008f0a:	f003 030f 	and.w	r3, r3, #15
 8008f0e:	2b0b      	cmp	r3, #11
 8008f10:	dc6c      	bgt.n	8008fec <trans_create+0x294>
        style_list->skip_trans = 1;
 8008f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f14:	7953      	ldrb	r3, [r2, #5]
 8008f16:	f043 0301 	orr.w	r3, r3, #1
 8008f1a:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 8008f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1e:	7953      	ldrb	r3, [r2, #5]
 8008f20:	f043 0308 	orr.w	r3, r3, #8
 8008f24:	7153      	strb	r3, [r2, #5]
        obj->state = prev_state;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	783a      	ldrb	r2, [r7, #0]
 8008f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 8008f2e:	887a      	ldrh	r2, [r7, #2]
 8008f30:	787b      	ldrb	r3, [r7, #1]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7fd ff77 	bl	8006e28 <_lv_obj_get_style_color>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	617b      	str	r3, [r7, #20]
        obj->state = new_state;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 8008f48:	887a      	ldrh	r2, [r7, #2]
 8008f4a:	787b      	ldrb	r3, [r7, #1]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7fd ff6a 	bl	8006e28 <_lv_obj_get_style_color>
 8008f54:	4603      	mov	r3, r0
 8008f56:	613b      	str	r3, [r7, #16]
        style_list->skip_trans = 0;
 8008f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f5a:	7953      	ldrb	r3, [r2, #5]
 8008f5c:	f36f 0300 	bfc	r3, #0, #1
 8008f60:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8008f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f64:	7953      	ldrb	r3, [r2, #5]
 8008f66:	7ff9      	ldrb	r1, [r7, #31]
 8008f68:	f361 03c3 	bfi	r3, r1, #3, #1
 8008f6c:	7153      	strb	r3, [r2, #5]

        if(c1.full == c2.full) return NULL;
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d101      	bne.n	8008f7a <trans_create+0x222>
 8008f76:	2300      	movs	r3, #0
 8008f78:	e122      	b.n	80091c0 <trans_create+0x468>
        obj->state = prev_state;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	783a      	ldrb	r2, [r7, #0]
 8008f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
 8008f82:	887a      	ldrh	r2, [r7, #2]
 8008f84:	787b      	ldrb	r3, [r7, #1]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7fd ff4d 	bl	8006e28 <_lv_obj_get_style_color>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	617b      	str	r3, [r7, #20]
        obj->state = new_state;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
 8008f9c:	887b      	ldrh	r3, [r7, #2]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6a38      	ldr	r0, [r7, #32]
 8008fa4:	f002 fc4c 	bl	800b840 <_lv_style_set_color>

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8008fa8:	487d      	ldr	r0, [pc, #500]	; (80091a0 <trans_create+0x448>)
 8008faa:	f013 f83c 	bl	801c026 <_lv_ll_ins_head>
 8008fae:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 8008fb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fb2:	f012 fddf 	bl	801bb74 <lv_debug_check_null>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f083 0301 	eor.w	r3, r3, #1
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d008      	beq.n	8008fd4 <trans_create+0x27c>
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc4:	f04f 0400 	mov.w	r4, #0
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4623      	mov	r3, r4
 8008fcc:	4875      	ldr	r0, [pc, #468]	; (80091a4 <trans_create+0x44c>)
 8008fce:	f012 fde1 	bl	801bb94 <lv_debug_log_error>
 8008fd2:	e7fe      	b.n	8008fd2 <trans_create+0x27a>
        if(tr == NULL) return NULL;
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <trans_create+0x286>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e0f0      	b.n	80091c0 <trans_create+0x468>
        tr->start_value._color = c1;
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	609a      	str	r2, [r3, #8]
        tr->end_value._color = c2;
 8008fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	60da      	str	r2, [r3, #12]
 8008fea:	e0e8      	b.n	80091be <trans_create+0x466>
    }
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8008fec:	887b      	ldrh	r3, [r7, #2]
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	2b0d      	cmp	r3, #13
 8008ff4:	dc6c      	bgt.n	80090d0 <trans_create+0x378>
        style_list->skip_trans = 1;
 8008ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff8:	7953      	ldrb	r3, [r2, #5]
 8008ffa:	f043 0301 	orr.w	r3, r3, #1
 8008ffe:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 8009000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009002:	7953      	ldrb	r3, [r2, #5]
 8009004:	f043 0308 	orr.w	r3, r3, #8
 8009008:	7153      	strb	r3, [r2, #5]
        obj->state = prev_state;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	783a      	ldrb	r2, [r7, #0]
 800900e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 8009012:	887a      	ldrh	r2, [r7, #2]
 8009014:	787b      	ldrb	r3, [r7, #1]
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7fd ff70 	bl	8006efe <_lv_obj_get_style_opa>
 800901e:	4603      	mov	r3, r0
 8009020:	77bb      	strb	r3, [r7, #30]
        obj->state = new_state;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 800902c:	887a      	ldrh	r2, [r7, #2]
 800902e:	787b      	ldrb	r3, [r7, #1]
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fd ff63 	bl	8006efe <_lv_obj_get_style_opa>
 8009038:	4603      	mov	r3, r0
 800903a:	777b      	strb	r3, [r7, #29]
        style_list->skip_trans = 0;
 800903c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903e:	7953      	ldrb	r3, [r2, #5]
 8009040:	f36f 0300 	bfc	r3, #0, #1
 8009044:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8009046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009048:	7953      	ldrb	r3, [r2, #5]
 800904a:	7ff9      	ldrb	r1, [r7, #31]
 800904c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009050:	7153      	strb	r3, [r2, #5]

        if(o1 == o2) return NULL;
 8009052:	7fba      	ldrb	r2, [r7, #30]
 8009054:	7f7b      	ldrb	r3, [r7, #29]
 8009056:	429a      	cmp	r2, r3
 8009058:	d101      	bne.n	800905e <trans_create+0x306>
 800905a:	2300      	movs	r3, #0
 800905c:	e0b0      	b.n	80091c0 <trans_create+0x468>

        obj->state = prev_state;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	783a      	ldrb	r2, [r7, #0]
 8009062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 8009066:	887a      	ldrh	r2, [r7, #2]
 8009068:	787b      	ldrb	r3, [r7, #1]
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7fd ff46 	bl	8006efe <_lv_obj_get_style_opa>
 8009072:	4603      	mov	r3, r0
 8009074:	77bb      	strb	r3, [r7, #30]
        obj->state = new_state;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800907c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
 8009080:	7fba      	ldrb	r2, [r7, #30]
 8009082:	887b      	ldrh	r3, [r7, #2]
 8009084:	4619      	mov	r1, r3
 8009086:	6a38      	ldr	r0, [r7, #32]
 8009088:	f002 fc68 	bl	800b95c <_lv_style_set_opa>

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800908c:	4844      	ldr	r0, [pc, #272]	; (80091a0 <trans_create+0x448>)
 800908e:	f012 ffca 	bl	801c026 <_lv_ll_ins_head>
 8009092:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 8009094:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009096:	f012 fd6d 	bl	801bb74 <lv_debug_check_null>
 800909a:	4603      	mov	r3, r0
 800909c:	f083 0301 	eor.w	r3, r3, #1
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d008      	beq.n	80090b8 <trans_create+0x360>
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	f04f 0400 	mov.w	r4, #0
 80090ac:	461a      	mov	r2, r3
 80090ae:	4623      	mov	r3, r4
 80090b0:	483c      	ldr	r0, [pc, #240]	; (80091a4 <trans_create+0x44c>)
 80090b2:	f012 fd6f 	bl	801bb94 <lv_debug_log_error>
 80090b6:	e7fe      	b.n	80090b6 <trans_create+0x35e>
        if(tr == NULL) return NULL;
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <trans_create+0x36a>
 80090be:	2300      	movs	r3, #0
 80090c0:	e07e      	b.n	80091c0 <trans_create+0x468>
        tr->start_value._opa = o1;
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	7fba      	ldrb	r2, [r7, #30]
 80090c6:	721a      	strb	r2, [r3, #8]
        tr->end_value._opa = o2;
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	7f7a      	ldrb	r2, [r7, #29]
 80090cc:	731a      	strb	r2, [r3, #12]
 80090ce:	e076      	b.n	80091be <trans_create+0x466>
    }
    else {      /*Ptr*/
        obj->state = prev_state;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	783a      	ldrb	r2, [r7, #0]
 80090d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        style_list->skip_trans = 1;
 80090d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090da:	7953      	ldrb	r3, [r2, #5]
 80090dc:	f043 0301 	orr.w	r3, r3, #1
 80090e0:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 80090e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e4:	7953      	ldrb	r3, [r2, #5]
 80090e6:	f043 0308 	orr.w	r3, r3, #8
 80090ea:	7153      	strb	r3, [r2, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 80090ec:	887a      	ldrh	r2, [r7, #2]
 80090ee:	787b      	ldrb	r3, [r7, #1]
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7fd ffc0 	bl	8007078 <_lv_obj_get_style_ptr>
 80090f8:	4603      	mov	r3, r0
 80090fa:	60fb      	str	r3, [r7, #12]
        obj->state = new_state;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8009102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 8009106:	887a      	ldrh	r2, [r7, #2]
 8009108:	787b      	ldrb	r3, [r7, #1]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7fd ffb3 	bl	8007078 <_lv_obj_get_style_ptr>
 8009112:	4603      	mov	r3, r0
 8009114:	60bb      	str	r3, [r7, #8]
        style_list->skip_trans = 0;
 8009116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009118:	7953      	ldrb	r3, [r2, #5]
 800911a:	f36f 0300 	bfc	r3, #0, #1
 800911e:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8009120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009122:	7953      	ldrb	r3, [r2, #5]
 8009124:	7ff9      	ldrb	r1, [r7, #31]
 8009126:	f361 03c3 	bfi	r3, r1, #3, #1
 800912a:	7153      	strb	r3, [r2, #5]

        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
 800912c:	f107 0108 	add.w	r1, r7, #8
 8009130:	f107 030c 	add.w	r3, r7, #12
 8009134:	2204      	movs	r2, #4
 8009136:	4618      	mov	r0, r3
 8009138:	f023 ff78 	bl	802d02c <memcmp>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <trans_create+0x3ee>
 8009142:	2300      	movs	r3, #0
 8009144:	e03c      	b.n	80091c0 <trans_create+0x468>
        obj->state = prev_state;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	783a      	ldrb	r2, [r7, #0]
 800914a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800914e:	887a      	ldrh	r2, [r7, #2]
 8009150:	787b      	ldrb	r3, [r7, #1]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7fd ff8f 	bl	8007078 <_lv_obj_get_style_ptr>
 800915a:	4603      	mov	r3, r0
 800915c:	60fb      	str	r3, [r7, #12]
        obj->state = new_state;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8009164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	887b      	ldrh	r3, [r7, #2]
 800916c:	4619      	mov	r1, r3
 800916e:	6a38      	ldr	r0, [r7, #32]
 8009170:	f002 fc82 	bl	800ba78 <_lv_style_set_ptr>

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8009174:	480a      	ldr	r0, [pc, #40]	; (80091a0 <trans_create+0x448>)
 8009176:	f012 ff56 	bl	801c026 <_lv_ll_ins_head>
 800917a:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 800917c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800917e:	f012 fcf9 	bl	801bb74 <lv_debug_check_null>
 8009182:	4603      	mov	r3, r0
 8009184:	f083 0301 	eor.w	r3, r3, #1
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00c      	beq.n	80091a8 <trans_create+0x450>
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	f04f 0400 	mov.w	r4, #0
 8009194:	461a      	mov	r2, r3
 8009196:	4623      	mov	r3, r4
 8009198:	4802      	ldr	r0, [pc, #8]	; (80091a4 <trans_create+0x44c>)
 800919a:	f012 fcfb 	bl	801bb94 <lv_debug_log_error>
 800919e:	e7fe      	b.n	800919e <trans_create+0x446>
 80091a0:	20021844 	.word	0x20021844
 80091a4:	0802d0a8 	.word	0x0802d0a8
        if(tr == NULL) return NULL;
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <trans_create+0x45a>
 80091ae:	2300      	movs	r3, #0
 80091b0:	e006      	b.n	80091c0 <trans_create+0x468>
        tr->start_value._ptr = p1;
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	609a      	str	r2, [r3, #8]
        tr->end_value._ptr = p2;
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	60da      	str	r2, [r3, #12]
    }

    return tr;
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3734      	adds	r7, #52	; 0x34
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd90      	pop	{r4, r7, pc}

080091c8 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" then this. `NULL` is not used
 */
static void trans_del(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_style_trans_t * tr_limit)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	607b      	str	r3, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	72fb      	strb	r3, [r7, #11]
 80091d6:	4613      	mov	r3, r2
 80091d8:	813b      	strh	r3, [r7, #8]
    lv_style_trans_t * tr;
    lv_style_trans_t * tr_prev;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80091da:	4826      	ldr	r0, [pc, #152]	; (8009274 <trans_del+0xac>)
 80091dc:	f013 f893 	bl	801c306 <_lv_ll_get_tail>
 80091e0:	61f8      	str	r0, [r7, #28]
    while(tr != NULL) {
 80091e2:	e03d      	b.n	8009260 <trans_del+0x98>
        if(tr == tr_limit) break;
 80091e4:	69fa      	ldr	r2, [r7, #28]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d03d      	beq.n	8009268 <trans_del+0xa0>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80091ec:	69f9      	ldr	r1, [r7, #28]
 80091ee:	4821      	ldr	r0, [pc, #132]	; (8009274 <trans_del+0xac>)
 80091f0:	f013 f8b6 	bl	801c360 <_lv_ll_get_prev>
 80091f4:	61b8      	str	r0, [r7, #24]

        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d12d      	bne.n	800925c <trans_del+0x94>
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	799b      	ldrb	r3, [r3, #6]
 8009204:	7afa      	ldrb	r2, [r7, #11]
 8009206:	429a      	cmp	r2, r3
 8009208:	d002      	beq.n	8009210 <trans_del+0x48>
 800920a:	7afb      	ldrb	r3, [r7, #11]
 800920c:	2bff      	cmp	r3, #255	; 0xff
 800920e:	d125      	bne.n	800925c <trans_del+0x94>
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	889b      	ldrh	r3, [r3, #4]
 8009214:	893a      	ldrh	r2, [r7, #8]
 8009216:	429a      	cmp	r2, r3
 8009218:	d002      	beq.n	8009220 <trans_del+0x58>
 800921a:	893b      	ldrh	r3, [r7, #8]
 800921c:	2bff      	cmp	r3, #255	; 0xff
 800921e:	d11d      	bne.n	800925c <trans_del+0x94>
            /* Remove the transitioned property from trans. style
             * to allow changing it by normal styles*/
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	799b      	ldrb	r3, [r3, #6]
 8009228:	4619      	mov	r1, r3
 800922a:	4610      	mov	r0, r2
 800922c:	f7fd fc50 	bl	8006ad0 <lv_obj_get_style_list>
 8009230:	6178      	str	r0, [r7, #20]
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 8009232:	6978      	ldr	r0, [r7, #20]
 8009234:	f002 fddf 	bl	800bdf6 <_lv_style_list_get_transition_style>
 8009238:	6138      	str	r0, [r7, #16]
            lv_style_remove_prop(style_trans, tr->prop);
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	889b      	ldrh	r3, [r3, #4]
 800923e:	4619      	mov	r1, r3
 8009240:	6938      	ldr	r0, [r7, #16]
 8009242:	f001 ff61 	bl	800b108 <lv_style_remove_prop>

            lv_anim_del(tr, NULL);
 8009246:	2100      	movs	r1, #0
 8009248:	69f8      	ldr	r0, [r7, #28]
 800924a:	f011 fbe1 	bl	801aa10 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800924e:	69f9      	ldr	r1, [r7, #28]
 8009250:	4808      	ldr	r0, [pc, #32]	; (8009274 <trans_del+0xac>)
 8009252:	f012 ff97 	bl	801c184 <_lv_ll_remove>
            lv_mem_free(tr);
 8009256:	69f8      	ldr	r0, [r7, #28]
 8009258:	f013 fa62 	bl	801c720 <lv_mem_free>
        }
        tr = tr_prev;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	61fb      	str	r3, [r7, #28]
    while(tr != NULL) {
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1be      	bne.n	80091e4 <trans_del+0x1c>
    }
}
 8009266:	e000      	b.n	800926a <trans_del+0xa2>
        if(tr == tr_limit) break;
 8009268:	bf00      	nop
}
 800926a:	bf00      	nop
 800926c:	3720      	adds	r7, #32
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20021844 	.word	0x20021844

08009278 <trans_anim_cb>:

static void trans_anim_cb(lv_style_trans_t * tr, lv_anim_value_t v)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	807b      	strh	r3, [r7, #2]
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	799b      	ldrb	r3, [r3, #6]
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fd fc1e 	bl	8006ad0 <lv_obj_get_style_list>
 8009294:	6178      	str	r0, [r7, #20]
    lv_style_t * style = _lv_style_list_get_transition_style(list);
 8009296:	6978      	ldr	r0, [r7, #20]
 8009298:	f002 fdad 	bl	800bdf6 <_lv_style_list_get_transition_style>
 800929c:	6138      	str	r0, [r7, #16]

    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	889b      	ldrh	r3, [r3, #4]
 80092a2:	f003 030f 	and.w	r3, r3, #15
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	dc2d      	bgt.n	8009306 <trans_anim_cb+0x8e>
        lv_style_int_t x;
        if(v == 0) x = tr->start_value._int;
 80092aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d103      	bne.n	80092ba <trans_anim_cb+0x42>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	891b      	ldrh	r3, [r3, #8]
 80092b6:	83fb      	strh	r3, [r7, #30]
 80092b8:	e01c      	b.n	80092f4 <trans_anim_cb+0x7c>
        else if(v == 255) x = tr->end_value._int;
 80092ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092be:	2bff      	cmp	r3, #255	; 0xff
 80092c0:	d103      	bne.n	80092ca <trans_anim_cb+0x52>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	899b      	ldrh	r3, [r3, #12]
 80092c6:	83fb      	strh	r3, [r7, #30]
 80092c8:	e014      	b.n	80092f4 <trans_anim_cb+0x7c>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80092d8:	4619      	mov	r1, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80092e0:	1acb      	subs	r3, r1, r3
 80092e2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80092e6:	fb01 f303 	mul.w	r3, r1, r3
 80092ea:	121b      	asrs	r3, r3, #8
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	4413      	add	r3, r2
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	83fb      	strh	r3, [r7, #30]
        _lv_style_set_int(style, tr->prop, x);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	889b      	ldrh	r3, [r3, #4]
 80092f8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80092fc:	4619      	mov	r1, r3
 80092fe:	6938      	ldr	r0, [r7, #16]
 8009300:	f002 fa10 	bl	800b724 <_lv_style_set_int>
 8009304:	e067      	b.n	80093d6 <trans_anim_cb+0x15e>
    }
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	889b      	ldrh	r3, [r3, #4]
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	2b0b      	cmp	r3, #11
 8009310:	dc21      	bgt.n	8009356 <trans_anim_cb+0xde>
        lv_color_t x;
        if(v <= 0) x = tr->start_value._color;
 8009312:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009316:	2b00      	cmp	r3, #0
 8009318:	dc03      	bgt.n	8009322 <trans_anim_cb+0xaa>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	e011      	b.n	8009346 <trans_anim_cb+0xce>
        else if(v >= 255) x = tr->end_value._color;
 8009322:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009326:	2bfe      	cmp	r3, #254	; 0xfe
 8009328:	dd03      	ble.n	8009332 <trans_anim_cb+0xba>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	e009      	b.n	8009346 <trans_anim_cb+0xce>
        else x = lv_color_mix(tr->end_value._color, tr->start_value._color, v);
 8009332:	887b      	ldrh	r3, [r7, #2]
 8009334:	b2da      	uxtb	r2, r3
 8009336:	6879      	ldr	r1, [r7, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6889      	ldr	r1, [r1, #8]
 800933c:	68d8      	ldr	r0, [r3, #12]
 800933e:	f7fa ff61 	bl	8004204 <lv_color_mix>
 8009342:	4603      	mov	r3, r0
 8009344:	60fb      	str	r3, [r7, #12]
        _lv_style_set_color(style, tr->prop, x);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	889b      	ldrh	r3, [r3, #4]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	4619      	mov	r1, r3
 800934e:	6938      	ldr	r0, [r7, #16]
 8009350:	f002 fa76 	bl	800b840 <_lv_style_set_color>
 8009354:	e03f      	b.n	80093d6 <trans_anim_cb+0x15e>
    }
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	889b      	ldrh	r3, [r3, #4]
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	2b0d      	cmp	r3, #13
 8009360:	dc27      	bgt.n	80093b2 <trans_anim_cb+0x13a>
        lv_opa_t x;
        if(v <= 0) x = tr->start_value._opa;
 8009362:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009366:	2b00      	cmp	r3, #0
 8009368:	dc03      	bgt.n	8009372 <trans_anim_cb+0xfa>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	7a1b      	ldrb	r3, [r3, #8]
 800936e:	777b      	strb	r3, [r7, #29]
 8009370:	e017      	b.n	80093a2 <trans_anim_cb+0x12a>
        else if(v >= 255) x = tr->end_value._opa;
 8009372:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009376:	2bfe      	cmp	r3, #254	; 0xfe
 8009378:	dd03      	ble.n	8009382 <trans_anim_cb+0x10a>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7b1b      	ldrb	r3, [r3, #12]
 800937e:	777b      	strb	r3, [r7, #29]
 8009380:	e00f      	b.n	80093a2 <trans_anim_cb+0x12a>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	7a1a      	ldrb	r2, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7b1b      	ldrb	r3, [r3, #12]
 800938a:	4619      	mov	r1, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	7a1b      	ldrb	r3, [r3, #8]
 8009390:	1acb      	subs	r3, r1, r3
 8009392:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8009396:	fb01 f303 	mul.w	r3, r1, r3
 800939a:	121b      	asrs	r3, r3, #8
 800939c:	b2db      	uxtb	r3, r3
 800939e:	4413      	add	r3, r2
 80093a0:	777b      	strb	r3, [r7, #29]
        _lv_style_set_opa(style, tr->prop, x);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	889b      	ldrh	r3, [r3, #4]
 80093a6:	7f7a      	ldrb	r2, [r7, #29]
 80093a8:	4619      	mov	r1, r3
 80093aa:	6938      	ldr	r0, [r7, #16]
 80093ac:	f002 fad6 	bl	800b95c <_lv_style_set_opa>
 80093b0:	e011      	b.n	80093d6 <trans_anim_cb+0x15e>
    }
    else {
        const void * x;
        if(v < 128) x = tr->start_value._ptr;
 80093b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80093b6:	2b7f      	cmp	r3, #127	; 0x7f
 80093b8:	dc03      	bgt.n	80093c2 <trans_anim_cb+0x14a>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	61bb      	str	r3, [r7, #24]
 80093c0:	e002      	b.n	80093c8 <trans_anim_cb+0x150>
        else x = tr->end_value._ptr;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	61bb      	str	r3, [r7, #24]
        _lv_style_set_ptr(style, tr->prop, x);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	889b      	ldrh	r3, [r3, #4]
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	4619      	mov	r1, r3
 80093d0:	6938      	ldr	r0, [r7, #16]
 80093d2:	f002 fb51 	bl	800ba78 <_lv_style_set_ptr>
    }
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6818      	ldr	r0, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	7999      	ldrb	r1, [r3, #6]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	889b      	ldrh	r3, [r3, #4]
 80093e2:	461a      	mov	r2, r3
 80093e4:	f7fc fd8a 	bl	8005efc <lv_obj_refresh_style>

}
 80093e8:	bf00      	nop
 80093ea:	3720      	adds	r7, #32
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <trans_anim_start_cb>:

static void trans_anim_start_cb(lv_anim_t * a)
{
 80093f0:	b590      	push	{r4, r7, lr}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
    lv_style_trans_t * tr = a->var;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60fb      	str	r3, [r7, #12]

    lv_style_property_t prop_tmp = tr->prop;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	889b      	ldrh	r3, [r3, #4]
 8009402:	817b      	strh	r3, [r7, #10]

    /*Start the animation from the current value*/
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 8009404:	897b      	ldrh	r3, [r7, #10]
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	2b08      	cmp	r3, #8
 800940c:	dc0c      	bgt.n	8009428 <trans_anim_start_cb+0x38>
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	799b      	ldrb	r3, [r3, #6]
 8009416:	897a      	ldrh	r2, [r7, #10]
 8009418:	4619      	mov	r1, r3
 800941a:	f7fd fb7c 	bl	8006b16 <_lv_obj_get_style_int>
 800941e:	4603      	mov	r3, r0
 8009420:	461a      	mov	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	811a      	strh	r2, [r3, #8]
 8009426:	e02c      	b.n	8009482 <trans_anim_start_cb+0x92>
    }
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8009428:	897b      	ldrh	r3, [r7, #10]
 800942a:	f003 030f 	and.w	r3, r3, #15
 800942e:	2b0b      	cmp	r3, #11
 8009430:	dc0a      	bgt.n	8009448 <trans_anim_start_cb+0x58>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6818      	ldr	r0, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	799b      	ldrb	r3, [r3, #6]
 800943a:	68fc      	ldr	r4, [r7, #12]
 800943c:	897a      	ldrh	r2, [r7, #10]
 800943e:	4619      	mov	r1, r3
 8009440:	f7fd fcf2 	bl	8006e28 <_lv_obj_get_style_color>
 8009444:	60a0      	str	r0, [r4, #8]
 8009446:	e01c      	b.n	8009482 <trans_anim_start_cb+0x92>
    }
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8009448:	897b      	ldrh	r3, [r7, #10]
 800944a:	f003 030f 	and.w	r3, r3, #15
 800944e:	2b0d      	cmp	r3, #13
 8009450:	dc0c      	bgt.n	800946c <trans_anim_start_cb+0x7c>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	799b      	ldrb	r3, [r3, #6]
 800945a:	897a      	ldrh	r2, [r7, #10]
 800945c:	4619      	mov	r1, r3
 800945e:	f7fd fd4e 	bl	8006efe <_lv_obj_get_style_opa>
 8009462:	4603      	mov	r3, r0
 8009464:	461a      	mov	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	721a      	strb	r2, [r3, #8]
 800946a:	e00a      	b.n	8009482 <trans_anim_start_cb+0x92>
    }
    else {      /*Ptr*/
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	799b      	ldrb	r3, [r3, #6]
 8009474:	897a      	ldrh	r2, [r7, #10]
 8009476:	4619      	mov	r1, r3
 8009478:	f7fd fdfe 	bl	8007078 <_lv_obj_get_style_ptr>
 800947c:	4602      	mov	r2, r0
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	609a      	str	r2, [r3, #8]
    }

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    tr->prop = 0;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	809a      	strh	r2, [r3, #4]
    /*Delete the relate transition if any*/
    trans_del(tr->obj, tr->part, prop_tmp, tr);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	7999      	ldrb	r1, [r3, #6]
 8009490:	897a      	ldrh	r2, [r7, #10]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f7ff fe98 	bl	80091c8 <trans_del>

    tr->prop = prop_tmp;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	897a      	ldrh	r2, [r7, #10]
 800949c:	809a      	strh	r2, [r3, #4]

}
 800949e:	bf00      	nop
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd90      	pop	{r4, r7, pc}
	...

080094a8 <trans_anim_ready_cb>:

static void trans_anim_ready_cb(lv_anim_t * a)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
    lv_style_trans_t * tr = a->var;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	617b      	str	r3, [r7, #20]

    /* Remove the transitioned property from trans. style
     * if there no more transitions for this property
     * It allows changing it by normal styles*/

    bool running = false;
 80094b6:	2300      	movs	r3, #0
 80094b8:	77fb      	strb	r3, [r7, #31]
    lv_style_trans_t * tr_i;
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80094ba:	4824      	ldr	r0, [pc, #144]	; (800954c <trans_anim_ready_cb+0xa4>)
 80094bc:	f012 ff10 	bl	801c2e0 <_lv_ll_get_head>
 80094c0:	61b8      	str	r0, [r7, #24]
 80094c2:	e01c      	b.n	80094fe <trans_anim_ready_cb+0x56>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d013      	beq.n	80094f4 <trans_anim_ready_cb+0x4c>
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d10d      	bne.n	80094f4 <trans_anim_ready_cb+0x4c>
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	799a      	ldrb	r2, [r3, #6]
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	799b      	ldrb	r3, [r3, #6]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d107      	bne.n	80094f4 <trans_anim_ready_cb+0x4c>
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	889a      	ldrh	r2, [r3, #4]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	889b      	ldrh	r3, [r3, #4]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d101      	bne.n	80094f4 <trans_anim_ready_cb+0x4c>
            running = true;
 80094f0:	2301      	movs	r3, #1
 80094f2:	77fb      	strb	r3, [r7, #31]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80094f4:	69b9      	ldr	r1, [r7, #24]
 80094f6:	4815      	ldr	r0, [pc, #84]	; (800954c <trans_anim_ready_cb+0xa4>)
 80094f8:	f012 ff18 	bl	801c32c <_lv_ll_get_next>
 80094fc:	61b8      	str	r0, [r7, #24]
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1df      	bne.n	80094c4 <trans_anim_ready_cb+0x1c>
        }
    }

    if(!running) {
 8009504:	7ffb      	ldrb	r3, [r7, #31]
 8009506:	f083 0301 	eor.w	r3, r3, #1
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d012      	beq.n	8009536 <trans_anim_ready_cb+0x8e>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	799b      	ldrb	r3, [r3, #6]
 8009518:	4619      	mov	r1, r3
 800951a:	4610      	mov	r0, r2
 800951c:	f7fd fad8 	bl	8006ad0 <lv_obj_get_style_list>
 8009520:	6138      	str	r0, [r7, #16]
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 8009522:	6938      	ldr	r0, [r7, #16]
 8009524:	f002 fc67 	bl	800bdf6 <_lv_style_list_get_transition_style>
 8009528:	60f8      	str	r0, [r7, #12]
        lv_style_remove_prop(style_trans, tr->prop);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	889b      	ldrh	r3, [r3, #4]
 800952e:	4619      	mov	r1, r3
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f001 fde9 	bl	800b108 <lv_style_remove_prop>
    }

    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8009536:	6979      	ldr	r1, [r7, #20]
 8009538:	4804      	ldr	r0, [pc, #16]	; (800954c <trans_anim_ready_cb+0xa4>)
 800953a:	f012 fe23 	bl	801c184 <_lv_ll_remove>
    lv_mem_free(tr);
 800953e:	6978      	ldr	r0, [r7, #20]
 8009540:	f013 f8ee 	bl	801c720 <lv_mem_free>
}
 8009544:	bf00      	nop
 8009546:	3720      	adds	r7, #32
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	20021844 	.word	0x20021844

08009550 <style_prop_is_cacheble>:

    return false;
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	80fb      	strh	r3, [r7, #6]

    switch(prop) {
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	2b50      	cmp	r3, #80	; 0x50
 800955e:	d054      	beq.n	800960a <style_prop_is_cacheble+0xba>
 8009560:	2b50      	cmp	r3, #80	; 0x50
 8009562:	dc1d      	bgt.n	80095a0 <style_prop_is_cacheble+0x50>
 8009564:	2b18      	cmp	r3, #24
 8009566:	dc0d      	bgt.n	8009584 <style_prop_is_cacheble+0x34>
 8009568:	2b15      	cmp	r3, #21
 800956a:	da4e      	bge.n	800960a <style_prop_is_cacheble+0xba>
 800956c:	2b07      	cmp	r3, #7
 800956e:	dc05      	bgt.n	800957c <style_prop_is_cacheble+0x2c>
 8009570:	2b04      	cmp	r3, #4
 8009572:	da4a      	bge.n	800960a <style_prop_is_cacheble+0xba>
 8009574:	3b01      	subs	r3, #1
 8009576:	2b01      	cmp	r3, #1
 8009578:	d849      	bhi.n	800960e <style_prop_is_cacheble+0xbe>
 800957a:	e046      	b.n	800960a <style_prop_is_cacheble+0xba>
 800957c:	3b10      	subs	r3, #16
 800957e:	2b03      	cmp	r3, #3
 8009580:	d845      	bhi.n	800960e <style_prop_is_cacheble+0xbe>
 8009582:	e042      	b.n	800960a <style_prop_is_cacheble+0xba>
 8009584:	2b33      	cmp	r3, #51	; 0x33
 8009586:	dc06      	bgt.n	8009596 <style_prop_is_cacheble+0x46>
 8009588:	2b30      	cmp	r3, #48	; 0x30
 800958a:	da3e      	bge.n	800960a <style_prop_is_cacheble+0xba>
 800958c:	2b20      	cmp	r3, #32
 800958e:	d03c      	beq.n	800960a <style_prop_is_cacheble+0xba>
 8009590:	2b2c      	cmp	r3, #44	; 0x2c
 8009592:	d03a      	beq.n	800960a <style_prop_is_cacheble+0xba>
 8009594:	e03b      	b.n	800960e <style_prop_is_cacheble+0xbe>
 8009596:	2b40      	cmp	r3, #64	; 0x40
 8009598:	d037      	beq.n	800960a <style_prop_is_cacheble+0xba>
 800959a:	2b42      	cmp	r3, #66	; 0x42
 800959c:	d035      	beq.n	800960a <style_prop_is_cacheble+0xba>
 800959e:	e036      	b.n	800960e <style_prop_is_cacheble+0xbe>
 80095a0:	2bff      	cmp	r3, #255	; 0xff
 80095a2:	d032      	beq.n	800960a <style_prop_is_cacheble+0xba>
 80095a4:	2bff      	cmp	r3, #255	; 0xff
 80095a6:	dc0f      	bgt.n	80095c8 <style_prop_is_cacheble+0x78>
 80095a8:	2b6e      	cmp	r3, #110	; 0x6e
 80095aa:	d02e      	beq.n	800960a <style_prop_is_cacheble+0xba>
 80095ac:	2b6e      	cmp	r3, #110	; 0x6e
 80095ae:	dc04      	bgt.n	80095ba <style_prop_is_cacheble+0x6a>
 80095b0:	2b54      	cmp	r3, #84	; 0x54
 80095b2:	d02a      	beq.n	800960a <style_prop_is_cacheble+0xba>
 80095b4:	2b60      	cmp	r3, #96	; 0x60
 80095b6:	d028      	beq.n	800960a <style_prop_is_cacheble+0xba>
 80095b8:	e029      	b.n	800960e <style_prop_is_cacheble+0xbe>
 80095ba:	2b7f      	cmp	r3, #127	; 0x7f
 80095bc:	d025      	beq.n	800960a <style_prop_is_cacheble+0xba>
 80095be:	2b91      	cmp	r3, #145	; 0x91
 80095c0:	d023      	beq.n	800960a <style_prop_is_cacheble+0xba>
 80095c2:	2b72      	cmp	r3, #114	; 0x72
 80095c4:	d021      	beq.n	800960a <style_prop_is_cacheble+0xba>
 80095c6:	e022      	b.n	800960e <style_prop_is_cacheble+0xbe>
 80095c8:	f248 0283 	movw	r2, #32899	; 0x8083
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d01c      	beq.n	800960a <style_prop_is_cacheble+0xba>
 80095d0:	f248 0283 	movw	r2, #32899	; 0x8083
 80095d4:	4293      	cmp	r3, r2
 80095d6:	dc0c      	bgt.n	80095f2 <style_prop_is_cacheble+0xa2>
 80095d8:	f248 020c 	movw	r2, #32780	; 0x800c
 80095dc:	4293      	cmp	r3, r2
 80095de:	d014      	beq.n	800960a <style_prop_is_cacheble+0xba>
 80095e0:	f248 020c 	movw	r2, #32780	; 0x800c
 80095e4:	4293      	cmp	r3, r2
 80095e6:	db12      	blt.n	800960e <style_prop_is_cacheble+0xbe>
 80095e8:	4a0c      	ldr	r2, [pc, #48]	; (800961c <style_prop_is_cacheble+0xcc>)
 80095ea:	441a      	add	r2, r3
 80095ec:	2a01      	cmp	r2, #1
 80095ee:	d80e      	bhi.n	800960e <style_prop_is_cacheble+0xbe>
 80095f0:	e00b      	b.n	800960a <style_prop_is_cacheble+0xba>
 80095f2:	f248 02a0 	movw	r2, #32928	; 0x80a0
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d007      	beq.n	800960a <style_prop_is_cacheble+0xba>
 80095fa:	f248 02ad 	movw	r2, #32941	; 0x80ad
 80095fe:	4293      	cmp	r3, r2
 8009600:	d003      	beq.n	800960a <style_prop_is_cacheble+0xba>
 8009602:	f248 028e 	movw	r2, #32910	; 0x808e
 8009606:	4293      	cmp	r3, r2
 8009608:	d101      	bne.n	800960e <style_prop_is_cacheble+0xbe>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
 800960a:	2301      	movs	r3, #1
 800960c:	e000      	b.n	8009610 <style_prop_is_cacheble+0xc0>
            break;
        default:
            return false;
 800960e:	2300      	movs	r3, #0
    }
}
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	ffff7f80 	.word	0xffff7f80

08009620 <update_style_cache>:
 * @param obj pointer to an object
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
 800962c:	4613      	mov	r3, r2
 800962e:	803b      	strh	r3, [r7, #0]
    if(style_prop_is_cacheble(prop) == false) return;
 8009630:	883b      	ldrh	r3, [r7, #0]
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff ff8c 	bl	8009550 <style_prop_is_cacheble>
 8009638:	4603      	mov	r3, r0
 800963a:	f083 0301 	eor.w	r3, r3, #1
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	f040 81fa 	bne.w	8009a3a <update_style_cache+0x41a>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7fd fa40 	bl	8006ad0 <lv_obj_get_style_list>
 8009650:	60f8      	str	r0, [r7, #12]

    bool ignore_cache_ori = list->ignore_cache;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	795b      	ldrb	r3, [r3, #5]
 8009656:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	bf14      	ite	ne
 8009660:	2301      	movne	r3, #1
 8009662:	2300      	moveq	r3, #0
 8009664:	72fb      	strb	r3, [r7, #11]
    list->ignore_cache = 1;
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	7953      	ldrb	r3, [r2, #5]
 800966a:	f043 0308 	orr.w	r3, r3, #8
 800966e:	7153      	strb	r3, [r2, #5]

#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7fa ff77 	bl	8004568 <lv_obj_get_style_opa_scale>
 800967a:	4603      	mov	r3, r0
 800967c:	2bff      	cmp	r3, #255	; 0xff
 800967e:	bf0c      	ite	eq
 8009680:	2301      	moveq	r3, #1
 8009682:	2300      	movne	r3, #0
 8009684:	b2d9      	uxtb	r1, r3
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	7953      	ldrb	r3, [r2, #5]
 800968a:	f361 1345 	bfi	r3, r1, #5, #1
 800968e:	7153      	strb	r3, [r2, #5]
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7fb fb02 	bl	8004c9e <lv_obj_get_style_text_decor>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	bf0c      	ite	eq
 80096a0:	2301      	moveq	r3, #1
 80096a2:	2300      	movne	r3, #0
 80096a4:	b2d9      	uxtb	r1, r3
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	79d3      	ldrb	r3, [r2, #7]
 80096aa:	f361 1386 	bfi	r3, r1, #6, #1
 80096ae:	71d3      	strb	r3, [r2, #7]
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7fb fb60 	bl	8004d7a <lv_obj_get_style_text_font>
 80096ba:	4602      	mov	r2, r0
 80096bc:	4bac      	ldr	r3, [pc, #688]	; (8009970 <update_style_cache+0x350>)
 80096be:	429a      	cmp	r2, r3
 80096c0:	bf0c      	ite	eq
 80096c2:	2301      	moveq	r3, #1
 80096c4:	2300      	movne	r3, #0
 80096c6:	b2d9      	uxtb	r1, r3
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	79d3      	ldrb	r3, [r2, #7]
 80096cc:	f361 13c7 	bfi	r3, r1, #7, #1
 80096d0:	71d3      	strb	r3, [r2, #7]

    list->text_space_zero = 1;
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	79d3      	ldrb	r3, [r2, #7]
 80096d6:	f043 0320 	orr.w	r3, r3, #32
 80096da:	71d3      	strb	r3, [r2, #7]
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80096dc:	78fb      	ldrb	r3, [r7, #3]
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7fb fab8 	bl	8004c56 <lv_obj_get_style_text_letter_space>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d107      	bne.n	80096fc <update_style_cache+0xdc>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7fb fac2 	bl	8004c7a <lv_obj_get_style_text_line_space>
 80096f6:	4603      	mov	r3, r0
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d004      	beq.n	8009706 <update_style_cache+0xe6>
        list->text_space_zero = 0;
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	79d3      	ldrb	r3, [r2, #7]
 8009700:	f36f 1345 	bfc	r3, #5, #1
 8009704:	71d3      	strb	r3, [r2, #7]
    }

    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7fb f83f 	bl	800478e <lv_obj_get_style_bg_opa>
 8009710:	4603      	mov	r3, r0
 8009712:	72bb      	strb	r3, [r7, #10]
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 8009714:	7abb      	ldrb	r3, [r7, #10]
 8009716:	2b00      	cmp	r3, #0
 8009718:	bf0c      	ite	eq
 800971a:	2301      	moveq	r3, #1
 800971c:	2300      	movne	r3, #0
 800971e:	b2d9      	uxtb	r1, r3
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	7993      	ldrb	r3, [r2, #6]
 8009724:	f361 03c3 	bfi	r3, r1, #3, #1
 8009728:	7193      	strb	r3, [r2, #6]
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
 800972a:	7abb      	ldrb	r3, [r7, #10]
 800972c:	2bff      	cmp	r3, #255	; 0xff
 800972e:	bf0c      	ite	eq
 8009730:	2301      	moveq	r3, #1
 8009732:	2300      	movne	r3, #0
 8009734:	b2d9      	uxtb	r1, r3
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	7993      	ldrb	r3, [r2, #6]
 800973a:	f361 1304 	bfi	r3, r1, #4, #1
 800973e:	7193      	strb	r3, [r2, #6]

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7fb f833 	bl	80047b0 <lv_obj_get_style_border_width>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	bf0c      	ite	eq
 8009750:	2301      	moveq	r3, #1
 8009752:	2300      	movne	r3, #0
 8009754:	b2d9      	uxtb	r1, r3
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	7993      	ldrb	r3, [r2, #6]
 800975a:	f361 1345 	bfi	r3, r1, #5, #1
 800975e:	7193      	strb	r3, [r2, #6]
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7fb f834 	bl	80047d2 <lv_obj_get_style_border_side>
 800976a:	4603      	mov	r3, r0
 800976c:	2b0f      	cmp	r3, #15
 800976e:	bf0c      	ite	eq
 8009770:	2301      	moveq	r3, #1
 8009772:	2300      	movne	r3, #0
 8009774:	b2d9      	uxtb	r1, r3
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	7993      	ldrb	r3, [r2, #6]
 800977a:	f361 1386 	bfi	r3, r1, #6, #1
 800977e:	7193      	strb	r3, [r2, #6]
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7fb f848 	bl	800481a <lv_obj_get_style_border_post>
 800978a:	4603      	mov	r3, r0
 800978c:	f083 0301 	eor.w	r3, r3, #1
 8009790:	b2d9      	uxtb	r1, r3
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	7993      	ldrb	r3, [r2, #6]
 8009796:	f361 13c7 	bfi	r3, r1, #7, #1
 800979a:	7193      	strb	r3, [r2, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 800979c:	78fb      	ldrb	r3, [r7, #3]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7fa fe76 	bl	8004492 <lv_obj_get_style_clip_corner>
 80097a6:	4603      	mov	r3, r0
 80097a8:	f083 0301 	eor.w	r3, r3, #1
 80097ac:	b2d9      	uxtb	r1, r3
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	7953      	ldrb	r3, [r2, #5]
 80097b2:	f361 1386 	bfi	r3, r1, #6, #1
 80097b6:	7153      	strb	r3, [r2, #5]
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 80097b8:	78fb      	ldrb	r3, [r7, #3]
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7fb fba2 	bl	8004f06 <lv_obj_get_style_image_recolor_opa>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	bf0c      	ite	eq
 80097c8:	2301      	moveq	r3, #1
 80097ca:	2300      	movne	r3, #0
 80097cc:	b2d9      	uxtb	r1, r3
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	79d3      	ldrb	r3, [r2, #7]
 80097d2:	f361 1304 	bfi	r3, r1, #4, #1
 80097d6:	71d3      	strb	r3, [r2, #7]
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7fb f854 	bl	800488a <lv_obj_get_style_outline_width>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	bf0c      	ite	eq
 80097e8:	2301      	moveq	r3, #1
 80097ea:	2300      	movne	r3, #0
 80097ec:	b2d9      	uxtb	r1, r3
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	79d3      	ldrb	r3, [r2, #7]
 80097f2:	f361 0300 	bfi	r3, r1, #0, #1
 80097f6:	71d3      	strb	r3, [r2, #7]
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7fb f96d 	bl	8004adc <lv_obj_get_style_pattern_image>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	bf0c      	ite	eq
 8009808:	2301      	moveq	r3, #1
 800980a:	2300      	movne	r3, #0
 800980c:	b2d9      	uxtb	r1, r3
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	79d3      	ldrb	r3, [r2, #7]
 8009812:	f361 0341 	bfi	r3, r1, #1, #1
 8009816:	71d3      	strb	r3, [r2, #7]
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	4619      	mov	r1, r3
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7fa fe27 	bl	8004470 <lv_obj_get_style_radius>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	bf0c      	ite	eq
 8009828:	2301      	moveq	r3, #1
 800982a:	2300      	movne	r3, #0
 800982c:	b2d9      	uxtb	r1, r3
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	7953      	ldrb	r3, [r2, #5]
 8009832:	f361 1304 	bfi	r3, r1, #4, #1
 8009836:	7153      	strb	r3, [r2, #5]
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7fb f87a 	bl	8004936 <lv_obj_get_style_shadow_width>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	bf0c      	ite	eq
 8009848:	2301      	moveq	r3, #1
 800984a:	2300      	movne	r3, #0
 800984c:	b2d9      	uxtb	r1, r3
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	79d3      	ldrb	r3, [r2, #7]
 8009852:	f361 0382 	bfi	r3, r1, #2, #1
 8009856:	71d3      	strb	r3, [r2, #7]
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7fb f9e9 	bl	8004c34 <lv_obj_get_style_value_str>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	bf0c      	ite	eq
 8009868:	2301      	moveq	r3, #1
 800986a:	2300      	movne	r3, #0
 800986c:	b2d9      	uxtb	r1, r3
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	79d3      	ldrb	r3, [r2, #7]
 8009872:	f361 03c3 	bfi	r3, r1, #3, #1
 8009876:	71d3      	strb	r3, [r2, #7]

    list->transform_all_zero  = 1;
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	7953      	ldrb	r3, [r2, #5]
 800987c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009880:	7153      	strb	r3, [r2, #5]
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 8009882:	78fb      	ldrb	r3, [r7, #3]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7fa fe4c 	bl	8004524 <lv_obj_get_style_transform_angle>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d118      	bne.n	80098c4 <update_style_cache+0x2a4>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7fa fe22 	bl	80044e0 <lv_obj_get_style_transform_width>
 800989c:	4603      	mov	r3, r0
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d110      	bne.n	80098c4 <update_style_cache+0x2a4>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 80098a2:	78fb      	ldrb	r3, [r7, #3]
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7fa fe2b 	bl	8004502 <lv_obj_get_style_transform_height>
 80098ac:	4603      	mov	r3, r0
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d108      	bne.n	80098c4 <update_style_cache+0x2a4>
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7fa fe45 	bl	8004546 <lv_obj_get_style_transform_zoom>
 80098bc:	4603      	mov	r3, r0
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 80098be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098c2:	d004      	beq.n	80098ce <update_style_cache+0x2ae>
        list->transform_all_zero  = 0;
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	7953      	ldrb	r3, [r2, #5]
 80098c8:	f36f 13c7 	bfc	r3, #7, #1
 80098cc:	7153      	strb	r3, [r2, #5]
    }

    list->pad_all_zero  = 1;
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	7993      	ldrb	r3, [r2, #6]
 80098d2:	f043 0301 	orr.w	r3, r3, #1
 80098d6:	7193      	strb	r3, [r2, #6]
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 80098d8:	78fb      	ldrb	r3, [r7, #3]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7fa fe55 	bl	800458c <lv_obj_get_style_pad_top>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d117      	bne.n	8009918 <update_style_cache+0x2f8>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7fa fe5e 	bl	80045ae <lv_obj_get_style_pad_bottom>
 80098f2:	4603      	mov	r3, r0
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10f      	bne.n	8009918 <update_style_cache+0x2f8>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7fa fe67 	bl	80045d0 <lv_obj_get_style_pad_left>
 8009902:	4603      	mov	r3, r0
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 8009904:	2b00      	cmp	r3, #0
 8009906:	d107      	bne.n	8009918 <update_style_cache+0x2f8>
       lv_obj_get_style_pad_right(obj, part) != 0) {
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7fa fe70 	bl	80045f2 <lv_obj_get_style_pad_right>
 8009912:	4603      	mov	r3, r0
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <update_style_cache+0x302>
        list->pad_all_zero  = 0;
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	7993      	ldrb	r3, [r2, #6]
 800991c:	f36f 0300 	bfc	r3, #0, #1
 8009920:	7193      	strb	r3, [r2, #6]
    }

    list->margin_all_zero  = 1;
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	7993      	ldrb	r3, [r2, #6]
 8009926:	f043 0302 	orr.w	r3, r3, #2
 800992a:	7193      	strb	r3, [r2, #6]
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7fa fe80 	bl	8004636 <lv_obj_get_style_margin_top>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d11b      	bne.n	8009974 <update_style_cache+0x354>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 800993c:	78fb      	ldrb	r3, [r7, #3]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7fa fe89 	bl	8004658 <lv_obj_get_style_margin_bottom>
 8009946:	4603      	mov	r3, r0
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 8009948:	2b00      	cmp	r3, #0
 800994a:	d113      	bne.n	8009974 <update_style_cache+0x354>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7fa fe92 	bl	800467a <lv_obj_get_style_margin_left>
 8009956:	4603      	mov	r3, r0
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10b      	bne.n	8009974 <update_style_cache+0x354>
       lv_obj_get_style_margin_right(obj, part) != 0) {
 800995c:	78fb      	ldrb	r3, [r7, #3]
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7fa fe9b 	bl	800469c <lv_obj_get_style_margin_right>
 8009966:	4603      	mov	r3, r0
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 8009968:	2b00      	cmp	r3, #0
 800996a:	d008      	beq.n	800997e <update_style_cache+0x35e>
 800996c:	e002      	b.n	8009974 <update_style_cache+0x354>
 800996e:	bf00      	nop
 8009970:	20000020 	.word	0x20000020
        list->margin_all_zero  = 0;
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	7993      	ldrb	r3, [r2, #6]
 8009978:	f36f 0341 	bfc	r3, #1, #1
 800997c:	7193      	strb	r3, [r2, #6]
    }

    list->blend_mode_all_normal = 1;
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	7993      	ldrb	r3, [r2, #6]
 8009982:	f043 0304 	orr.w	r3, r3, #4
 8009986:	7193      	strb	r3, [r2, #6]
#if LV_USE_BLEND_MODES
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009988:	78fb      	ldrb	r3, [r7, #3]
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7fa fe96 	bl	80046be <lv_obj_get_style_bg_blend_mode>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d13f      	bne.n	8009a18 <update_style_cache+0x3f8>
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7fa ff2a 	bl	80047f6 <lv_obj_get_style_border_blend_mode>
 80099a2:	4603      	mov	r3, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d137      	bne.n	8009a18 <update_style_cache+0x3f8>
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7fb f850 	bl	8004a52 <lv_obj_get_style_pattern_blend_mode>
 80099b2:	4603      	mov	r3, r0
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d12f      	bne.n	8009a18 <update_style_cache+0x3f8>
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7fa ff86 	bl	80048ce <lv_obj_get_style_outline_blend_mode>
 80099c2:	4603      	mov	r3, r0
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d127      	bne.n	8009a18 <update_style_cache+0x3f8>
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099c8:	78fb      	ldrb	r3, [r7, #3]
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7fb f8b8 	bl	8004b42 <lv_obj_get_style_value_blend_mode>
 80099d2:	4603      	mov	r3, r0
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d11f      	bne.n	8009a18 <update_style_cache+0x3f8>
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099d8:	78fb      	ldrb	r3, [r7, #3]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7fb f971 	bl	8004cc4 <lv_obj_get_style_text_blend_mode>
 80099e2:	4603      	mov	r3, r0
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d117      	bne.n	8009a18 <update_style_cache+0x3f8>
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099e8:	78fb      	ldrb	r3, [r7, #3]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7fb f9e7 	bl	8004dc0 <lv_obj_get_style_line_blend_mode>
 80099f2:	4603      	mov	r3, r0
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10f      	bne.n	8009a18 <update_style_cache+0x3f8>
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099f8:	78fb      	ldrb	r3, [r7, #3]
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7fb fa4b 	bl	8004e98 <lv_obj_get_style_image_blend_mode>
 8009a02:	4603      	mov	r3, r0
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d107      	bne.n	8009a18 <update_style_cache+0x3f8>
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7fa ffd6 	bl	80049be <lv_obj_get_style_shadow_blend_mode>
 8009a12:	4603      	mov	r3, r0
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d004      	beq.n	8009a22 <update_style_cache+0x402>
        list->blend_mode_all_normal = 0;
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	7993      	ldrb	r3, [r2, #6]
 8009a1c:	f36f 0382 	bfc	r3, #2, #1
 8009a20:	7193      	strb	r3, [r2, #6]
    }
#endif
    list->ignore_cache = ignore_cache_ori;
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	7953      	ldrb	r3, [r2, #5]
 8009a26:	7af9      	ldrb	r1, [r7, #11]
 8009a28:	f361 03c3 	bfi	r3, r1, #3, #1
 8009a2c:	7153      	strb	r3, [r2, #5]
    list->valid_cache = 1;
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	7953      	ldrb	r3, [r2, #5]
 8009a32:	f043 0304 	orr.w	r3, r3, #4
 8009a36:	7153      	strb	r3, [r2, #5]
 8009a38:	e000      	b.n	8009a3c <update_style_cache+0x41c>
    if(style_prop_is_cacheble(prop) == false) return;
 8009a3a:	bf00      	nop
}
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop

08009a44 <update_style_cache_children>:
 * Update the cache of style list
 * @param obj pointer to an object
 * @param part the part of the object
 */
static void update_style_cache_children(lv_obj_t * obj)
{
 8009a44:	b590      	push	{r4, r7, lr}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	75fb      	strb	r3, [r7, #23]
 8009a50:	e07d      	b.n	8009b4e <update_style_cache_children+0x10a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7fd f83a 	bl	8006ad0 <lv_obj_get_style_list>
 8009a5c:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d079      	beq.n	8009b58 <update_style_cache_children+0x114>

        bool ignore_cache_ori = list->ignore_cache;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	795b      	ldrb	r3, [r3, #5]
 8009a68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bf14      	ite	ne
 8009a72:	2301      	movne	r3, #1
 8009a74:	2300      	moveq	r3, #0
 8009a76:	72fb      	strb	r3, [r7, #11]
        list->ignore_cache = 1;
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	7953      	ldrb	r3, [r2, #5]
 8009a7c:	f043 0308 	orr.w	r3, r3, #8
 8009a80:	7153      	strb	r3, [r2, #5]

        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7fa fd6e 	bl	8004568 <lv_obj_get_style_opa_scale>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2bff      	cmp	r3, #255	; 0xff
 8009a90:	bf0c      	ite	eq
 8009a92:	2301      	moveq	r3, #1
 8009a94:	2300      	movne	r3, #0
 8009a96:	b2d9      	uxtb	r1, r3
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	7953      	ldrb	r3, [r2, #5]
 8009a9c:	f361 1345 	bfi	r3, r1, #5, #1
 8009aa0:	7153      	strb	r3, [r2, #5]
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7fb f8f9 	bl	8004c9e <lv_obj_get_style_text_decor>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bf0c      	ite	eq
 8009ab2:	2301      	moveq	r3, #1
 8009ab4:	2300      	movne	r3, #0
 8009ab6:	b2d9      	uxtb	r1, r3
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	79d3      	ldrb	r3, [r2, #7]
 8009abc:	f361 1386 	bfi	r3, r1, #6, #1
 8009ac0:	71d3      	strb	r3, [r2, #7]
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7fb f957 	bl	8004d7a <lv_obj_get_style_text_font>
 8009acc:	4604      	mov	r4, r0
 8009ace:	f014 fc83 	bl	801e3d8 <lv_theme_get_font_normal>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	bf0c      	ite	eq
 8009ad8:	2301      	moveq	r3, #1
 8009ada:	2300      	movne	r3, #0
 8009adc:	b2d9      	uxtb	r1, r3
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	79d3      	ldrb	r3, [r2, #7]
 8009ae2:	f361 13c7 	bfi	r3, r1, #7, #1
 8009ae6:	71d3      	strb	r3, [r2, #7]
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7fb fa0a 	bl	8004f06 <lv_obj_get_style_image_recolor_opa>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	bf0c      	ite	eq
 8009af8:	2301      	moveq	r3, #1
 8009afa:	2300      	movne	r3, #0
 8009afc:	b2d9      	uxtb	r1, r3
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	79d3      	ldrb	r3, [r2, #7]
 8009b02:	f361 1304 	bfi	r3, r1, #4, #1
 8009b06:	71d3      	strb	r3, [r2, #7]

        list->text_space_zero = 1;
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	79d3      	ldrb	r3, [r2, #7]
 8009b0c:	f043 0320 	orr.w	r3, r3, #32
 8009b10:	71d3      	strb	r3, [r2, #7]
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7fb f89d 	bl	8004c56 <lv_obj_get_style_text_letter_space>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d107      	bne.n	8009b32 <update_style_cache_children+0xee>
           lv_obj_get_style_text_line_space(obj, part) != 0) {
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7fb f8a7 	bl	8004c7a <lv_obj_get_style_text_line_space>
 8009b2c:	4603      	mov	r3, r0
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d004      	beq.n	8009b3c <update_style_cache_children+0xf8>
            list->text_space_zero = 0;
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	79d3      	ldrb	r3, [r2, #7]
 8009b36:	f36f 1345 	bfc	r3, #5, #1
 8009b3a:	71d3      	strb	r3, [r2, #7]
        }

        list->ignore_cache = ignore_cache_ori;
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	7953      	ldrb	r3, [r2, #5]
 8009b40:	7af9      	ldrb	r1, [r7, #11]
 8009b42:	f361 03c3 	bfi	r3, r1, #3, #1
 8009b46:	7153      	strb	r3, [r2, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8009b48:	7dfb      	ldrb	r3, [r7, #23]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	75fb      	strb	r3, [r7, #23]
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
 8009b50:	2b40      	cmp	r3, #64	; 0x40
 8009b52:	f47f af7e 	bne.w	8009a52 <update_style_cache_children+0xe>
 8009b56:	e000      	b.n	8009b5a <update_style_cache_children+0x116>
        if(list == NULL) break;
 8009b58:	bf00      	nop
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7fc feb5 	bl	80068cc <lv_obj_get_child>
 8009b62:	6138      	str	r0, [r7, #16]
    while(child) {
 8009b64:	e007      	b.n	8009b76 <update_style_cache_children+0x132>
        update_style_cache_children(child);
 8009b66:	6938      	ldr	r0, [r7, #16]
 8009b68:	f7ff ff6c 	bl	8009a44 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 8009b6c:	6939      	ldr	r1, [r7, #16]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7fc feac 	bl	80068cc <lv_obj_get_child>
 8009b74:	6138      	str	r0, [r7, #16]
    while(child) {
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1f4      	bne.n	8009b66 <update_style_cache_children+0x122>
    }

}
 8009b7c:	bf00      	nop
 8009b7e:	371c      	adds	r7, #28
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd90      	pop	{r4, r7, pc}

08009b84 <invalidate_style_cache>:
 * Mark the object and all of it's children's style lists as invalid.
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
 8009b90:	4613      	mov	r3, r2
 8009b92:	803b      	strh	r3, [r7, #0]
    if(style_prop_is_cacheble(prop) == false) return;
 8009b94:	883b      	ldrh	r3, [r7, #0]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff fcda 	bl	8009550 <style_prop_is_cacheble>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f083 0301 	eor.w	r3, r3, #1
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d143      	bne.n	8009c30 <invalidate_style_cache+0xac>

    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8009ba8:	2300      	movs	r3, #0
 8009baa:	70fb      	strb	r3, [r7, #3]
 8009bac:	e010      	b.n	8009bd0 <invalidate_style_cache+0x4c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009bae:	78fb      	ldrb	r3, [r7, #3]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7fc ff8c 	bl	8006ad0 <lv_obj_get_style_list>
 8009bb8:	6138      	str	r0, [r7, #16]
        if(list == NULL) break;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00b      	beq.n	8009bd8 <invalidate_style_cache+0x54>
        list->valid_cache = 0;
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	7953      	ldrb	r3, [r2, #5]
 8009bc4:	f36f 0382 	bfc	r3, #2, #1
 8009bc8:	7153      	strb	r3, [r2, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	70fb      	strb	r3, [r7, #3]
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	2b3f      	cmp	r3, #63	; 0x3f
 8009bd4:	d9eb      	bls.n	8009bae <invalidate_style_cache+0x2a>
 8009bd6:	e000      	b.n	8009bda <invalidate_style_cache+0x56>
        if(list == NULL) break;
 8009bd8:	bf00      	nop
    }

    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8009bda:	2340      	movs	r3, #64	; 0x40
 8009bdc:	70fb      	strb	r3, [r7, #3]
 8009bde:	e010      	b.n	8009c02 <invalidate_style_cache+0x7e>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7fc ff73 	bl	8006ad0 <lv_obj_get_style_list>
 8009bea:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <invalidate_style_cache+0x86>
        list->valid_cache = 0;
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	7953      	ldrb	r3, [r2, #5]
 8009bf6:	f36f 0382 	bfc	r3, #2, #1
 8009bfa:	7153      	strb	r3, [r2, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8009bfc:	78fb      	ldrb	r3, [r7, #3]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	70fb      	strb	r3, [r7, #3]
 8009c02:	78fb      	ldrb	r3, [r7, #3]
 8009c04:	2bff      	cmp	r3, #255	; 0xff
 8009c06:	d1eb      	bne.n	8009be0 <invalidate_style_cache+0x5c>
 8009c08:	e000      	b.n	8009c0c <invalidate_style_cache+0x88>
        if(list == NULL) break;
 8009c0a:	bf00      	nop
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7fc fe5c 	bl	80068cc <lv_obj_get_child>
 8009c14:	6178      	str	r0, [r7, #20]
    while(child) {
 8009c16:	e007      	b.n	8009c28 <invalidate_style_cache+0xa4>
        update_style_cache_children(child);
 8009c18:	6978      	ldr	r0, [r7, #20]
 8009c1a:	f7ff ff13 	bl	8009a44 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 8009c1e:	6979      	ldr	r1, [r7, #20]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7fc fe53 	bl	80068cc <lv_obj_get_child>
 8009c26:	6178      	str	r0, [r7, #20]
    while(child) {
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1f4      	bne.n	8009c18 <invalidate_style_cache+0x94>
 8009c2e:	e000      	b.n	8009c32 <invalidate_style_cache+0xae>
    if(style_prop_is_cacheble(prop) == false) return;
 8009c30:	bf00      	nop
    }
}
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <style_snapshot>:

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
 8009c38:	b590      	push	{r4, r7, lr}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	460b      	mov	r3, r1
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	72fb      	strb	r3, [r7, #11]
    _lv_obj_disable_style_caching(obj, true);
 8009c46:	2101      	movs	r1, #1
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7fc fa16 	bl	800607a <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
 8009c4e:	21e0      	movs	r1, #224	; 0xe0
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f013 fa86 	bl	801d162 <_lv_memset_00>
    lv_draw_rect_dsc_init(&shot->rect);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f009 fb81 	bl	8013360 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&shot->label);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3368      	adds	r3, #104	; 0x68
 8009c62:	4618      	mov	r0, r3
 8009c64:	f005 fa6a 	bl	800f13c <lv_draw_label_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	339c      	adds	r3, #156	; 0x9c
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f004 faaa 	bl	800e1c6 <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3390      	adds	r3, #144	; 0x90
 8009c76:	4618      	mov	r0, r3
 8009c78:	f006 fde5 	bl	8010846 <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f7fc ff25 	bl	8006ad0 <lv_obj_get_style_list>
 8009c86:	6178      	str	r0, [r7, #20]
    bool trans_ori = list->skip_trans;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	795b      	ldrb	r3, [r3, #5]
 8009c8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bf14      	ite	ne
 8009c96:	2301      	movne	r3, #1
 8009c98:	2300      	moveq	r3, #0
 8009c9a:	74fb      	strb	r3, [r7, #19]
    list->skip_trans = 1;
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	7953      	ldrb	r3, [r2, #5]
 8009ca0:	f043 0301 	orr.w	r3, r3, #1
 8009ca4:	7153      	strb	r3, [r2, #5]

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	7afb      	ldrb	r3, [r7, #11]
 8009caa:	4619      	mov	r1, r3
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7fd fcef 	bl	8007690 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009cb8:	7afb      	ldrb	r3, [r7, #11]
 8009cba:	4619      	mov	r1, r3
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f7fd ff3b 	bl	8007b38 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8009cc8:	7afb      	ldrb	r3, [r7, #11]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f7fd ffb8 	bl	8007c42 <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8009cd8:	7afb      	ldrb	r3, [r7, #11]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7fe f824 	bl	8007d2a <lv_obj_init_draw_line_dsc>

    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
 8009ce2:	7afb      	ldrb	r3, [r7, #11]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f7fa fc50 	bl	800458c <lv_obj_get_style_pad_top>
 8009cec:	4603      	mov	r3, r0
 8009cee:	461a      	mov	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
 8009cf6:	7afb      	ldrb	r3, [r7, #11]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7fa fc57 	bl	80045ae <lv_obj_get_style_pad_bottom>
 8009d00:	4603      	mov	r3, r0
 8009d02:	461a      	mov	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
 8009d0a:	7afb      	ldrb	r3, [r7, #11]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f7fa fc6f 	bl	80045f2 <lv_obj_get_style_pad_right>
 8009d14:	4603      	mov	r3, r0
 8009d16:	461a      	mov	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
 8009d1e:	7afb      	ldrb	r3, [r7, #11]
 8009d20:	4619      	mov	r1, r3
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f7fa fc54 	bl	80045d0 <lv_obj_get_style_pad_left>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
 8009d32:	7afb      	ldrb	r3, [r7, #11]
 8009d34:	4619      	mov	r1, r3
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f7fa fc6c 	bl	8004614 <lv_obj_get_style_pad_inner>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
 8009d46:	7afb      	ldrb	r3, [r7, #11]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f7fa fc73 	bl	8004636 <lv_obj_get_style_margin_top>
 8009d50:	4603      	mov	r3, r0
 8009d52:	461a      	mov	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
 8009d5a:	7afb      	ldrb	r3, [r7, #11]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7fa fc7a 	bl	8004658 <lv_obj_get_style_margin_bottom>
 8009d64:	4603      	mov	r3, r0
 8009d66:	461a      	mov	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	4619      	mov	r1, r3
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f7fa fc81 	bl	800467a <lv_obj_get_style_margin_left>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
 8009d82:	7afb      	ldrb	r3, [r7, #11]
 8009d84:	4619      	mov	r1, r3
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f7fa fc88 	bl	800469c <lv_obj_get_style_margin_right>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	461a      	mov	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    shot->size = lv_obj_get_style_size(obj, part);
 8009d96:	7afb      	ldrb	r3, [r7, #11]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f7fa fb8f 	bl	80044be <lv_obj_get_style_size>
 8009da0:	4603      	mov	r3, r0
 8009da2:	461a      	mov	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
 8009daa:	7afb      	ldrb	r3, [r7, #11]
 8009dac:	4619      	mov	r1, r3
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f7fa fb96 	bl	80044e0 <lv_obj_get_style_transform_width>
 8009db4:	4603      	mov	r3, r0
 8009db6:	461a      	mov	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
 8009dbe:	7afb      	ldrb	r3, [r7, #11]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f7fa fb9d 	bl	8004502 <lv_obj_get_style_transform_height>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	461a      	mov	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7fa fba4 	bl	8004524 <lv_obj_get_style_transform_angle>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	461a      	mov	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	4619      	mov	r1, r3
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f7fa fbab 	bl	8004546 <lv_obj_get_style_transform_zoom>
 8009df0:	4603      	mov	r3, r0
 8009df2:	461a      	mov	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
 8009dfa:	7afb      	ldrb	r3, [r7, #11]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f7fb f92c 	bl	800505c <lv_obj_get_style_scale_width>
 8009e04:	4603      	mov	r3, r0
 8009e06:	461a      	mov	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
 8009e0e:	7afb      	ldrb	r3, [r7, #11]
 8009e10:	4619      	mov	r1, r3
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f7fb f933 	bl	800507e <lv_obj_get_style_scale_border_width>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
 8009e22:	7afb      	ldrb	r3, [r7, #11]
 8009e24:	4619      	mov	r1, r3
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f7fb f93a 	bl	80050a0 <lv_obj_get_style_scale_end_border_width>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	461a      	mov	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
 8009e36:	7afb      	ldrb	r3, [r7, #11]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7fb f941 	bl	80050c2 <lv_obj_get_style_scale_end_line_width>
 8009e40:	4603      	mov	r3, r0
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
 8009e4a:	687c      	ldr	r4, [r7, #4]
 8009e4c:	7afb      	ldrb	r3, [r7, #11]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f7fb f947 	bl	80050e4 <lv_obj_get_style_scale_grad_color>
 8009e56:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
 8009e5a:	687c      	ldr	r4, [r7, #4]
 8009e5c:	7afb      	ldrb	r3, [r7, #11]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f7fb f950 	bl	8005106 <lv_obj_get_style_scale_end_color>
 8009e66:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8009e6a:	7afb      	ldrb	r3, [r7, #11]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7fa fb7a 	bl	8004568 <lv_obj_get_style_opa_scale>
 8009e74:	4603      	mov	r3, r0
 8009e76:	461a      	mov	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
 8009e7e:	7afb      	ldrb	r3, [r7, #11]
 8009e80:	4619      	mov	r1, r3
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7fa fb05 	bl	8004492 <lv_obj_get_style_clip_corner>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	f892 30dd 	ldrb.w	r3, [r2, #221]	; 0xdd
 8009e92:	f361 0300 	bfi	r3, r1, #0, #1
 8009e96:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 8009e9a:	7afb      	ldrb	r3, [r7, #11]
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f7fa fcbb 	bl	800481a <lv_obj_get_style_border_post>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	f892 30dd 	ldrb.w	r3, [r2, #221]	; 0xdd
 8009eae:	f361 0341 	bfi	r3, r1, #1, #1
 8009eb2:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd

    _lv_obj_disable_style_caching(obj, false);
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f7fc f8de 	bl	800607a <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	7953      	ldrb	r3, [r2, #5]
 8009ec2:	7cf9      	ldrb	r1, [r7, #19]
 8009ec4:	f361 0300 	bfi	r3, r1, #0, #1
 8009ec8:	7153      	strb	r3, [r2, #5]
}
 8009eca:	bf00      	nop
 8009ecc:	371c      	adds	r7, #28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd90      	pop	{r4, r7, pc}

08009ed2 <style_snapshot_compare>:

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
 8009edc:	22e0      	movs	r2, #224	; 0xe0
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f023 f8a3 	bl	802d02c <memcmp>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <style_snapshot_compare+0x1e>
 8009eec:	2300      	movs	r3, #0
 8009eee:	e0ec      	b.n	800a0ca <style_snapshot_compare+0x1f8>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f9b3 20b0 	ldrsh.w	r2, [r3, #176]	; 0xb0
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d001      	beq.n	8009f04 <style_snapshot_compare+0x32>
 8009f00:	2302      	movs	r3, #2
 8009f02:	e0e2      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d001      	beq.n	8009f18 <style_snapshot_compare+0x46>
 8009f14:	2302      	movs	r3, #2
 8009f16:	e0d8      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f9b3 20b6 	ldrsh.w	r2, [r3, #182]	; 0xb6
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d001      	beq.n	8009f2c <style_snapshot_compare+0x5a>
 8009f28:	2302      	movs	r3, #2
 8009f2a:	e0ce      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d001      	beq.n	8009f40 <style_snapshot_compare+0x6e>
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	e0c4      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f9b3 20b0 	ldrsh.w	r2, [r3, #176]	; 0xb0
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d001      	beq.n	8009f54 <style_snapshot_compare+0x82>
 8009f50:	2302      	movs	r3, #2
 8009f52:	e0ba      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f9b3 20b8 	ldrsh.w	r2, [r3, #184]	; 0xb8
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d001      	beq.n	8009f68 <style_snapshot_compare+0x96>
 8009f64:	2302      	movs	r3, #2
 8009f66:	e0b0      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f9b3 20ba 	ldrsh.w	r2, [r3, #186]	; 0xba
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d001      	beq.n	8009f7c <style_snapshot_compare+0xaa>
 8009f78:	2302      	movs	r3, #2
 8009f7a:	e0a6      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f9b3 20bc 	ldrsh.w	r2, [r3, #188]	; 0xbc
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d001      	beq.n	8009f90 <style_snapshot_compare+0xbe>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	e09c      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f9b3 20be 	ldrsh.w	r2, [r3, #190]	; 0xbe
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d001      	beq.n	8009fa4 <style_snapshot_compare+0xd2>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e092      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f9b3 20c0 	ldrsh.w	r2, [r3, #192]	; 0xc0
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d001      	beq.n	8009fb8 <style_snapshot_compare+0xe6>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e088      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f9b3 20ba 	ldrsh.w	r2, [r3, #186]	; 0xba
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d001      	beq.n	8009fcc <style_snapshot_compare+0xfa>
 8009fc8:	2302      	movs	r3, #2
 8009fca:	e07e      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f9b3 20c4 	ldrsh.w	r2, [r3, #196]	; 0xc4
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d001      	beq.n	8009fe0 <style_snapshot_compare+0x10e>
 8009fdc:	2302      	movs	r3, #2
 8009fde:	e074      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f9b3 20c6 	ldrsh.w	r2, [r3, #198]	; 0xc6
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d001      	beq.n	8009ff4 <style_snapshot_compare+0x122>
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e06a      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f9b3 20c8 	ldrsh.w	r2, [r3, #200]	; 0xc8
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 800a000:	429a      	cmp	r2, r3
 800a002:	d001      	beq.n	800a008 <style_snapshot_compare+0x136>
 800a004:	2302      	movs	r3, #2
 800a006:	e060      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	; 0xca
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800a014:	429a      	cmp	r2, r3
 800a016:	d001      	beq.n	800a01c <style_snapshot_compare+0x14a>
 800a018:	2302      	movs	r3, #2
 800a01a:	e056      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800a028:	429a      	cmp	r2, r3
 800a02a:	d001      	beq.n	800a030 <style_snapshot_compare+0x15e>
 800a02c:	2302      	movs	r3, #2
 800a02e:	e04c      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d001      	beq.n	800a044 <style_snapshot_compare+0x172>
 800a040:	2302      	movs	r3, #2
 800a042:	e042      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d001      	beq.n	800a054 <style_snapshot_compare+0x182>
 800a050:	2302      	movs	r3, #2
 800a052:	e03a      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a060:	429a      	cmp	r2, r3
 800a062:	d001      	beq.n	800a068 <style_snapshot_compare+0x196>
 800a064:	2302      	movs	r3, #2
 800a066:	e030      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a070:	429a      	cmp	r2, r3
 800a072:	d001      	beq.n	800a078 <style_snapshot_compare+0x1a6>
 800a074:	2302      	movs	r3, #2
 800a076:	e028      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800a084:	429a      	cmp	r2, r3
 800a086:	d001      	beq.n	800a08c <style_snapshot_compare+0x1ba>
 800a088:	2302      	movs	r3, #2
 800a08a:	e01e      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a098:	429a      	cmp	r2, r3
 800a09a:	d001      	beq.n	800a0a0 <style_snapshot_compare+0x1ce>
 800a09c:	2302      	movs	r3, #2
 800a09e:	e014      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d001      	beq.n	800a0b4 <style_snapshot_compare+0x1e2>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e00a      	b.n	800a0ca <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d001      	beq.n	800a0c8 <style_snapshot_compare+0x1f6>
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	e000      	b.n	800a0ca <style_snapshot_compare+0x1f8>

    /*If not returned earlier its just a visual difference, a simple redraw is enough*/
    return STYLE_COMPARE_VISUAL_DIFF;
 800a0c8:	2301      	movs	r3, #1
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <_lv_memcpy_small>:
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b087      	sub	sp, #28
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	613b      	str	r3, [r7, #16]
    while(len) {
 800a0e6:	e00c      	b.n	800a102 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	701a      	strb	r2, [r3, #0]
        d8++;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	617b      	str	r3, [r7, #20]
        s8++;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	613b      	str	r3, [r7, #16]
        len--;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	607b      	str	r3, [r7, #4]
    while(len) {
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1ef      	bne.n	800a0e8 <_lv_memcpy_small+0x16>
    return dst;
 800a108:	68fb      	ldr	r3, [r7, #12]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	371c      	adds	r7, #28
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <lv_area_copy>:
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 800a120:	2208      	movs	r2, #8
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff ffd4 	bl	800a0d2 <_lv_memcpy_small>
}
 800a12a:	bf00      	nop
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <lv_area_get_width>:
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a140:	b29a      	uxth	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a148:	b29b      	uxth	r3, r3
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	3301      	adds	r3, #1
 800a150:	b29b      	uxth	r3, r3
 800a152:	b21b      	sxth	r3, r3
}
 800a154:	4618      	mov	r0, r3
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <lv_area_get_height>:
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a16e:	b29a      	uxth	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a176:	b29b      	uxth	r3, r3
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	3301      	adds	r3, #1
 800a17e:	b29b      	uxth	r3, r3
 800a180:	b21b      	sxth	r3, r3
}
 800a182:	4618      	mov	r0, r3
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <lv_obj_get_style_opa_scale>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
 800a19a:	78fb      	ldrb	r3, [r7, #3]
 800a19c:	f248 020c 	movw	r2, #32780	; 0x800c
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7fc feab 	bl	8006efe <_lv_obj_get_style_opa>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	af00      	add	r7, sp, #0
    /*Nothing to do*/
}
 800a1b6:	bf00      	nop
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d102      	bne.n	800a1d6 <_lv_inv_area+0x16>
 800a1d0:	f010 f8d2 	bl	801a378 <lv_disp_get_default>
 800a1d4:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 80a2 	beq.w	800a322 <_lv_inv_area+0x162>

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d107      	bne.n	800a1f4 <_lv_inv_area+0x34>
        disp->inv_p = 0;
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a1ea:	f36f 0309 	bfc	r3, #0, #10
 800a1ee:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
        return;
 800a1f2:	e099      	b.n	800a328 <_lv_inv_area+0x168>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f010 f8c7 	bl	801a390 <lv_disp_get_hor_res>
 800a202:	4603      	mov	r3, r0
 800a204:	b29b      	uxth	r3, r3
 800a206:	3b01      	subs	r3, #1
 800a208:	b29b      	uxth	r3, r3
 800a20a:	b21b      	sxth	r3, r3
 800a20c:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f010 f8e0 	bl	801a3d4 <lv_disp_get_ver_res>
 800a214:	4603      	mov	r3, r0
 800a216:	b29b      	uxth	r3, r3
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	b21b      	sxth	r3, r3
 800a21e:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800a220:	f107 0214 	add.w	r2, r7, #20
 800a224:	f107 030c 	add.w	r3, r7, #12
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f010 fe48 	bl	801aec0 <_lv_area_intersect>
 800a230:	4603      	mov	r3, r0
 800a232:	777b      	strb	r3, [r7, #29]

    /*The area is truncated to the screen*/
    if(suc != false) {
 800a234:	7f7b      	ldrb	r3, [r7, #29]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d076      	beq.n	800a328 <_lv_inv_area+0x168>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d006      	beq.n	800a250 <_lv_inv_area+0x90>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	f107 010c 	add.w	r1, r7, #12
 800a24c:	4610      	mov	r0, r2
 800a24e:	4798      	blx	r3

        /*Save only if this area is not in one of the saved areas*/
        uint16_t i;
        for(i = 0; i < disp->inv_p; i++) {
 800a250:	2300      	movs	r3, #0
 800a252:	83fb      	strh	r3, [r7, #30]
 800a254:	e011      	b.n	800a27a <_lv_inv_area+0xba>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800a256:	8bfb      	ldrh	r3, [r7, #30]
 800a258:	330c      	adds	r3, #12
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	4413      	add	r3, r2
 800a260:	1d99      	adds	r1, r3, #6
 800a262:	f107 030c 	add.w	r3, r7, #12
 800a266:	2200      	movs	r2, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f011 f80d 	bl	801b288 <_lv_area_is_in>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d158      	bne.n	800a326 <_lv_inv_area+0x166>
        for(i = 0; i < disp->inv_p; i++) {
 800a274:	8bfb      	ldrh	r3, [r7, #30]
 800a276:	3301      	adds	r3, #1
 800a278:	83fb      	strh	r3, [r7, #30]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a284:	b29b      	uxth	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	8bfb      	ldrh	r3, [r7, #30]
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d3e3      	bcc.n	800a256 <_lv_inv_area+0x96>
        }

        /*Save the area*/
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a298:	b29b      	uxth	r3, r3
 800a29a:	2b1f      	cmp	r3, #31
 800a29c:	d811      	bhi.n	800a2c2 <_lv_inv_area+0x102>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a2a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	330c      	adds	r3, #12
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	3306      	adds	r3, #6
 800a2b4:	f107 020c 	add.w	r2, r7, #12
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff ff2b 	bl	800a116 <lv_area_copy>
 800a2c0:	e017      	b.n	800a2f2 <_lv_inv_area+0x132>
        }
        else {   /*If no place for the area add the screen*/
            disp->inv_p = 0;
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a2c8:	f36f 0309 	bfc	r3, #0, #10
 800a2cc:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a2d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	330c      	adds	r3, #12
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	3306      	adds	r3, #6
 800a2e6:	f107 0214 	add.w	r2, r7, #20
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff ff12 	bl	800a116 <lv_area_copy>
        }
        disp->inv_p++;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a2f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	3301      	adds	r3, #1
 800a300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a304:	b299      	uxth	r1, r3
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a30c:	f361 0309 	bfi	r3, r1, #0, #10
 800a310:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a318:	2103      	movs	r1, #3
 800a31a:	4618      	mov	r0, r3
 800a31c:	f013 fad2 	bl	801d8c4 <lv_task_set_prio>
 800a320:	e002      	b.n	800a328 <_lv_inv_area+0x168>
    if(!disp) return;
 800a322:	bf00      	nop
 800a324:	e000      	b.n	800a328 <_lv_inv_area+0x168>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800a326:	bf00      	nop
    }
}
 800a328:	3720      	adds	r7, #32
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
	...

0800a330 <_lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * _lv_refr_get_disp_refreshing(void)
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
    return disp_refr;
 800a334:	4b03      	ldr	r3, [pc, #12]	; (800a344 <_lv_refr_get_disp_refreshing+0x14>)
 800a336:	681b      	ldr	r3, [r3, #0]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	200177b4 	.word	0x200177b4

0800a348 <_lv_disp_refr_task>:
/**
 * Called periodically to handle the refreshing
 * @param task pointer to the task itself
 */
void _lv_disp_refr_task(lv_task_t * task)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08e      	sub	sp, #56	; 0x38
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("lv_refr_task: started");

    uint32_t start = lv_tick_get();
 800a350:	f010 fa50 	bl	801a7f4 <lv_tick_get>
 800a354:	62b8      	str	r0, [r7, #40]	; 0x28
    uint32_t elaps = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	627b      	str	r3, [r7, #36]	; 0x24

    disp_refr = task->user_data;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	4a82      	ldr	r2, [pc, #520]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a360:	6013      	str	r3, [r2, #0]

#if LV_USE_PERF_MONITOR == 0
    /* Ensure the task does not run again automatically.
     * This is done before refreshing in case refreshing invalidates something else.
     */
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 800a362:	2100      	movs	r1, #0
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f013 faad 	bl	801d8c4 <lv_task_set_prio>
#endif

    /*Do nothing if there is no active screen*/
    if(disp_refr->act_scr == NULL) {
 800a36a:	4b7f      	ldr	r3, [pc, #508]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a370:	2b00      	cmp	r3, #0
 800a372:	d108      	bne.n	800a386 <_lv_disp_refr_task+0x3e>
        disp_refr->inv_p = 0;
 800a374:	4b7c      	ldr	r3, [pc, #496]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a37c:	f36f 0309 	bfc	r3, #0, #10
 800a380:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
        return;
 800a384:	e0ed      	b.n	800a562 <_lv_disp_refr_task+0x21a>
    }

    lv_refr_join_area();
 800a386:	f000 f8f3 	bl	800a570 <lv_refr_join_area>

    lv_refr_areas();
 800a38a:	f000 f995 	bl	800a6b8 <lv_refr_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 800a38e:	4b76      	ldr	r3, [pc, #472]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80dc 	beq.w	800a55a <_lv_disp_refr_task+0x212>
        /* In true double buffered mode copy the refreshed areas to the new VDB to keep it up to date.
         * With set_px_cb we don't know anything about the buffer (even it's size) so skip copying.*/
        if(lv_disp_is_true_double_buf(disp_refr)) {
 800a3a2:	4b71      	ldr	r3, [pc, #452]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f010 f917 	bl	801a5da <lv_disp_is_true_double_buf>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 80a8 	beq.w	800a504 <_lv_disp_refr_task+0x1bc>
            if(disp_refr->driver.set_px_cb) {
 800a3b4:	4b6c      	ldr	r3, [pc, #432]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f040 80a2 	bne.w	800a504 <_lv_disp_refr_task+0x1bc>
                LV_LOG_WARN("Can't handle 2 screen sized buffers with set_px_cb. Display is not refreshed.");
            }
            else {
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a3c0:	4b69      	ldr	r3, [pc, #420]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f010 f8a3 	bl	801a510 <lv_disp_get_buf>
 800a3ca:	6238      	str	r0, [r7, #32]

                /*Flush the content of the VDB*/
                lv_refr_vdb_flush();
 800a3cc:	f000 fd9e 	bl	800af0c <lv_refr_vdb_flush>

                /* With true double buffering the flushing should be only the address change of the
                 * current frame buffer. Wait until the address change is ready and copy the changed
                 * content to the other frame buffer (new active VDB) to keep the buffers synchronized*/
                while(vdb->flushing);
 800a3d0:	bf00      	nop
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1fb      	bne.n	800a3d2 <_lv_disp_refr_task+0x8a>

                lv_color_t * copy_buf = NULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61fb      	str	r3, [r7, #28]
#if LV_USE_GPU_STM32_DMA2D
                LV_UNUSED(copy_buf);
#else
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 800a3de:	4b62      	ldr	r3, [pc, #392]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f012 fab1 	bl	801c950 <_lv_mem_buf_get>
 800a3ee:	61f8      	str	r0, [r7, #28]
#endif

                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	61bb      	str	r3, [r7, #24]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d102      	bne.n	800a408 <_lv_disp_refr_task+0xc0>
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	e001      	b.n	800a40c <_lv_disp_refr_task+0xc4>
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	617b      	str	r3, [r7, #20]

                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800a40e:	4b56      	ldr	r3, [pc, #344]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4618      	mov	r0, r3
 800a414:	f00f ffbc 	bl	801a390 <lv_disp_get_hor_res>
 800a418:	4603      	mov	r3, r0
 800a41a:	827b      	strh	r3, [r7, #18]
                uint16_t a;
                for(a = 0; a < disp_refr->inv_p; a++) {
 800a41c:	2300      	movs	r3, #0
 800a41e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a420:	e05f      	b.n	800a4e2 <_lv_disp_refr_task+0x19a>
                    if(disp_refr->inv_area_joined[a] == 0) {
 800a422:	4b51      	ldr	r3, [pc, #324]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a428:	4413      	add	r3, r2
 800a42a:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d154      	bne.n	800a4dc <_lv_disp_refr_task+0x194>
                        uint32_t start_offs =
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800a432:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a436:	4b4c      	ldr	r3, [pc, #304]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a438:	6819      	ldr	r1, [r3, #0]
 800a43a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a43c:	330c      	adds	r3, #12
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	440b      	add	r3, r1
 800a442:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a446:	fb03 f202 	mul.w	r2, r3, r2
 800a44a:	4b47      	ldr	r3, [pc, #284]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a44c:	6819      	ldr	r1, [r3, #0]
 800a44e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a450:	330c      	adds	r3, #12
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	440b      	add	r3, r1
 800a456:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a45a:	4413      	add	r3, r2
                        uint32_t start_offs =
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	633b      	str	r3, [r7, #48]	; 0x30
                                                lv_area_get_width(&disp_refr->inv_areas[a]),
                                                lv_area_get_height(&disp_refr->inv_areas[a]));
#else

                        lv_coord_t y;
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800a460:	4b41      	ldr	r3, [pc, #260]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a466:	330c      	adds	r3, #12
 800a468:	00db      	lsls	r3, r3, #3
 800a46a:	4413      	add	r3, r2
 800a46c:	3306      	adds	r3, #6
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff fe5f 	bl	800a132 <lv_area_get_width>
 800a474:	4603      	mov	r3, r0
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	60fb      	str	r3, [r7, #12]

                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800a47a:	4b3b      	ldr	r3, [pc, #236]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a480:	330c      	adds	r3, #12
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	4413      	add	r3, r2
 800a486:	891b      	ldrh	r3, [r3, #8]
 800a488:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a48a:	e01b      	b.n	800a4c4 <_lv_disp_refr_task+0x17c>
                            /* The frame buffer is probably in an external RAM where sequential access is much faster.
                             * So first copy a line into a buffer and write it back the ext. RAM */
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	4413      	add	r3, r2
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4619      	mov	r1, r3
 800a496:	69f8      	ldr	r0, [r7, #28]
 800a498:	f012 fbbe 	bl	801cc18 <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
 800a49c:	69ba      	ldr	r2, [r7, #24]
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	4413      	add	r3, r2
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	69f9      	ldr	r1, [r7, #28]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f012 fbb6 	bl	801cc18 <_lv_memcpy>
                            start_offs += hres * sizeof(lv_color_t);
 800a4ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b4:	4413      	add	r3, r2
 800a4b6:	633b      	str	r3, [r7, #48]	; 0x30
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800a4b8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	3301      	adds	r3, #1
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a4c4:	4b28      	ldr	r3, [pc, #160]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4ca:	330c      	adds	r3, #12
 800a4cc:	00db      	lsls	r3, r3, #3
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a4d4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	ddd7      	ble.n	800a48c <_lv_disp_refr_task+0x144>
                for(a = 0; a < disp_refr->inv_p; a++) {
 800a4dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4de:	3301      	adds	r3, #1
 800a4e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a4e2:	4b21      	ldr	r3, [pc, #132]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a4ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d394      	bcc.n	800a422 <_lv_disp_refr_task+0xda>
                        }
#endif
                    }
                }

                if(copy_buf) _lv_mem_buf_release(copy_buf);
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <_lv_disp_refr_task+0x1bc>
 800a4fe:	69f8      	ldr	r0, [r7, #28]
 800a500:	f012 fb04 	bl	801cb0c <_lv_mem_buf_release>
            }
        } /*End of true double buffer handling*/

        /*Clean up*/
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800a504:	4b18      	ldr	r3, [pc, #96]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3366      	adds	r3, #102	; 0x66
 800a50a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a50e:	4618      	mov	r0, r3
 800a510:	f012 fe27 	bl	801d162 <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800a514:	4b14      	ldr	r3, [pc, #80]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a51c:	2120      	movs	r1, #32
 800a51e:	4618      	mov	r0, r3
 800a520:	f012 fe1f 	bl	801d162 <_lv_memset_00>
        disp_refr->inv_p = 0;
 800a524:	4b10      	ldr	r3, [pc, #64]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a52c:	f36f 0309 	bfc	r3, #0, #10
 800a530:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186

        elaps = lv_tick_elaps(start);
 800a534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a536:	f010 f977 	bl	801a828 <lv_tick_elaps>
 800a53a:	6278      	str	r0, [r7, #36]	; 0x24
        /*Call monitor cb if present*/
        if(disp_refr->driver.monitor_cb) {
 800a53c:	4b0a      	ldr	r3, [pc, #40]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d009      	beq.n	800a55a <_lv_disp_refr_task+0x212>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
 800a546:	4b08      	ldr	r3, [pc, #32]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	4a06      	ldr	r2, [pc, #24]	; (800a568 <_lv_disp_refr_task+0x220>)
 800a54e:	6812      	ldr	r2, [r2, #0]
 800a550:	4610      	mov	r0, r2
 800a552:	4a06      	ldr	r2, [pc, #24]	; (800a56c <_lv_disp_refr_task+0x224>)
 800a554:	6812      	ldr	r2, [r2, #0]
 800a556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a558:	4798      	blx	r3
        }
    }

    _lv_mem_buf_free_all();
 800a55a:	f012 fb17 	bl	801cb8c <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800a55e:	f00f f8a9 	bl	80196b4 <_lv_font_clean_up_fmt_txt>
        lv_obj_align(perf_label, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, 0, 0);
    }
#endif

    LV_LOG_TRACE("lv_refr_task: ready");
}
 800a562:	3738      	adds	r7, #56	; 0x38
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	200177b4 	.word	0x200177b4
 800a56c:	200177b0 	.word	0x200177b0

0800a570 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 800a570:	b5b0      	push	{r4, r5, r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800a576:	2300      	movs	r3, #0
 800a578:	60bb      	str	r3, [r7, #8]
 800a57a:	e08a      	b.n	800a692 <lv_refr_join_area+0x122>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800a57c:	4b4d      	ldr	r3, [pc, #308]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	4413      	add	r3, r2
 800a584:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d17d      	bne.n	800a68a <lv_refr_join_area+0x11a>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800a58e:	2300      	movs	r3, #0
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	e06e      	b.n	800a672 <lv_refr_join_area+0x102>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800a594:	4b47      	ldr	r3, [pc, #284]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	4413      	add	r3, r2
 800a59c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d15f      	bne.n	800a666 <lv_refr_join_area+0xf6>
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d05b      	beq.n	800a666 <lv_refr_join_area+0xf6>
                continue;
            }

            /*Check if the areas are on each other*/
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800a5ae:	4b41      	ldr	r3, [pc, #260]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	330c      	adds	r3, #12
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	4413      	add	r3, r2
 800a5ba:	1d98      	adds	r0, r3, #6
 800a5bc:	4b3d      	ldr	r3, [pc, #244]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	330c      	adds	r3, #12
 800a5c4:	00db      	lsls	r3, r3, #3
 800a5c6:	4413      	add	r3, r2
 800a5c8:	3306      	adds	r3, #6
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	f010 fe2e 	bl	801b22c <_lv_area_is_on>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f083 0301 	eor.w	r3, r3, #1
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d146      	bne.n	800a66a <lv_refr_join_area+0xfa>
                continue;
            }

            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800a5dc:	4b35      	ldr	r3, [pc, #212]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	330c      	adds	r3, #12
 800a5e4:	00db      	lsls	r3, r3, #3
 800a5e6:	4413      	add	r3, r2
 800a5e8:	1d99      	adds	r1, r3, #6
 800a5ea:	4b32      	ldr	r3, [pc, #200]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	330c      	adds	r3, #12
 800a5f2:	00db      	lsls	r3, r3, #3
 800a5f4:	4413      	add	r3, r2
 800a5f6:	1d9a      	adds	r2, r3, #6
 800a5f8:	463b      	mov	r3, r7
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f010 fcb1 	bl	801af62 <_lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800a600:	463b      	mov	r3, r7
 800a602:	4618      	mov	r0, r3
 800a604:	f010 fc3b 	bl	801ae7e <lv_area_get_size>
 800a608:	4604      	mov	r4, r0
 800a60a:	4b2a      	ldr	r3, [pc, #168]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	330c      	adds	r3, #12
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	4413      	add	r3, r2
 800a616:	3306      	adds	r3, #6
 800a618:	4618      	mov	r0, r3
 800a61a:	f010 fc30 	bl	801ae7e <lv_area_get_size>
 800a61e:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800a620:	4b24      	ldr	r3, [pc, #144]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	330c      	adds	r3, #12
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	4413      	add	r3, r2
 800a62c:	3306      	adds	r3, #6
 800a62e:	4618      	mov	r0, r3
 800a630:	f010 fc25 	bl	801ae7e <lv_area_get_size>
 800a634:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800a636:	442b      	add	r3, r5
 800a638:	429c      	cmp	r4, r3
 800a63a:	d217      	bcs.n	800a66c <lv_refr_join_area+0xfc>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800a63c:	4b1d      	ldr	r3, [pc, #116]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	330c      	adds	r3, #12
 800a644:	00db      	lsls	r3, r3, #3
 800a646:	4413      	add	r3, r2
 800a648:	3306      	adds	r3, #6
 800a64a:	463a      	mov	r2, r7
 800a64c:	4611      	mov	r1, r2
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff fd61 	bl	800a116 <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 800a654:	4b17      	ldr	r3, [pc, #92]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a660:	2201      	movs	r2, #1
 800a662:	701a      	strb	r2, [r3, #0]
 800a664:	e002      	b.n	800a66c <lv_refr_join_area+0xfc>
                continue;
 800a666:	bf00      	nop
 800a668:	e000      	b.n	800a66c <lv_refr_join_area+0xfc>
                continue;
 800a66a:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3301      	adds	r3, #1
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a67a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a67e:	b29b      	uxth	r3, r3
 800a680:	461a      	mov	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4293      	cmp	r3, r2
 800a686:	d385      	bcc.n	800a594 <lv_refr_join_area+0x24>
 800a688:	e000      	b.n	800a68c <lv_refr_join_area+0x11c>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800a68a:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	3301      	adds	r3, #1
 800a690:	60bb      	str	r3, [r7, #8]
 800a692:	4b08      	ldr	r3, [pc, #32]	; (800a6b4 <lv_refr_join_area+0x144>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a69a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	f4ff af69 	bcc.w	800a57c <lv_refr_join_area+0xc>
            }
        }
    }
}
 800a6aa:	bf00      	nop
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	200177b4 	.word	0x200177b4

0800a6b8 <lv_refr_areas>:

/**
 * Refresh the joined areas
 */
static void lv_refr_areas(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
    px_num = 0;
 800a6be:	4b45      	ldr	r3, [pc, #276]	; (800a7d4 <lv_refr_areas+0x11c>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]

    if(disp_refr->inv_p == 0) return;
 800a6c4:	4b44      	ldr	r3, [pc, #272]	; (800a7d8 <lv_refr_areas+0x120>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a6cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d07a      	beq.n	800a7cc <lv_refr_areas+0x114>

    /*Find the last area which will be drawn*/
    int32_t i;
    int32_t last_i = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	603b      	str	r3, [r7, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800a6da:	4b3f      	ldr	r3, [pc, #252]	; (800a7d8 <lv_refr_areas+0x120>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a6e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	607b      	str	r3, [r7, #4]
 800a6ec:	e00e      	b.n	800a70c <lv_refr_areas+0x54>
        if(disp_refr->inv_area_joined[i] == 0) {
 800a6ee:	4b3a      	ldr	r3, [pc, #232]	; (800a7d8 <lv_refr_areas+0x120>)
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d102      	bne.n	800a706 <lv_refr_areas+0x4e>
            last_i = i;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	603b      	str	r3, [r7, #0]
            break;
 800a704:	e005      	b.n	800a712 <lv_refr_areas+0x5a>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	3b01      	subs	r3, #1
 800a70a:	607b      	str	r3, [r7, #4]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	daed      	bge.n	800a6ee <lv_refr_areas+0x36>
        }
    }

    disp_refr->driver.buffer->last_area = 0;
 800a712:	4b31      	ldr	r3, [pc, #196]	; (800a7d8 <lv_refr_areas+0x120>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a71c:	f36f 0300 	bfc	r3, #0, #1
 800a720:	f882 3020 	strb.w	r3, [r2, #32]
    disp_refr->driver.buffer->last_part = 0;
 800a724:	4b2c      	ldr	r3, [pc, #176]	; (800a7d8 <lv_refr_areas+0x120>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685a      	ldr	r2, [r3, #4]
 800a72a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a72e:	f36f 0341 	bfc	r3, #1, #1
 800a732:	f882 3020 	strb.w	r3, [r2, #32]

    for(i = 0; i < disp_refr->inv_p; i++) {
 800a736:	2300      	movs	r3, #0
 800a738:	607b      	str	r3, [r7, #4]
 800a73a:	e03b      	b.n	800a7b4 <lv_refr_areas+0xfc>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 800a73c:	4b26      	ldr	r3, [pc, #152]	; (800a7d8 <lv_refr_areas+0x120>)
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4413      	add	r3, r2
 800a744:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d12f      	bne.n	800a7ae <lv_refr_areas+0xf6>

            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	429a      	cmp	r2, r3
 800a754:	d108      	bne.n	800a768 <lv_refr_areas+0xb0>
 800a756:	4b20      	ldr	r3, [pc, #128]	; (800a7d8 <lv_refr_areas+0x120>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a760:	f043 0301 	orr.w	r3, r3, #1
 800a764:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
 800a768:	4b1b      	ldr	r3, [pc, #108]	; (800a7d8 <lv_refr_areas+0x120>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a772:	f36f 0341 	bfc	r3, #1, #1
 800a776:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800a77a:	4b17      	ldr	r3, [pc, #92]	; (800a7d8 <lv_refr_areas+0x120>)
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	330c      	adds	r3, #12
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	4413      	add	r3, r2
 800a786:	3306      	adds	r3, #6
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 f827 	bl	800a7dc <lv_refr_area>

            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800a78e:	4b12      	ldr	r3, [pc, #72]	; (800a7d8 <lv_refr_areas+0x120>)
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	330c      	adds	r3, #12
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	4413      	add	r3, r2
 800a79a:	3306      	adds	r3, #6
 800a79c:	4618      	mov	r0, r3
 800a79e:	f010 fb6e 	bl	801ae7e <lv_area_get_size>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	4b0b      	ldr	r3, [pc, #44]	; (800a7d4 <lv_refr_areas+0x11c>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	4a0a      	ldr	r2, [pc, #40]	; (800a7d4 <lv_refr_areas+0x11c>)
 800a7ac:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	607b      	str	r3, [r7, #4]
 800a7b4:	4b08      	ldr	r3, [pc, #32]	; (800a7d8 <lv_refr_areas+0x120>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a7bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	dbb8      	blt.n	800a73c <lv_refr_areas+0x84>
 800a7ca:	e000      	b.n	800a7ce <lv_refr_areas+0x116>
    if(disp_refr->inv_p == 0) return;
 800a7cc:	bf00      	nop
        }
    }
}
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	200177b0 	.word	0x200177b0
 800a7d8:	200177b4 	.word	0x200177b4

0800a7dc <lv_refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area(const lv_area_t * area_p)
{
 800a7dc:	b590      	push	{r4, r7, lr}
 800a7de:	b08d      	sub	sp, #52	; 0x34
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
    /*True double buffering: there are two screen sized buffers. Just redraw directly into a
     * buffer*/
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800a7e4:	4b8e      	ldr	r3, [pc, #568]	; (800aa20 <lv_refr_area+0x244>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f00f fef6 	bl	801a5da <lv_disp_is_true_double_buf>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d030      	beq.n	800a856 <lv_refr_area+0x7a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a7f4:	4b8a      	ldr	r3, [pc, #552]	; (800aa20 <lv_refr_area+0x244>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f00f fe89 	bl	801a510 <lv_disp_get_buf>
 800a7fe:	6178      	str	r0, [r7, #20]
        vdb->area.x1        = 0;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	2200      	movs	r2, #0
 800a804:	821a      	strh	r2, [r3, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800a806:	4b86      	ldr	r3, [pc, #536]	; (800aa20 <lv_refr_area+0x244>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f00f fdc0 	bl	801a390 <lv_disp_get_hor_res>
 800a810:	4603      	mov	r3, r0
 800a812:	b29b      	uxth	r3, r3
 800a814:	3b01      	subs	r3, #1
 800a816:	b29b      	uxth	r3, r3
 800a818:	b21a      	sxth	r2, r3
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	829a      	strh	r2, [r3, #20]
        vdb->area.y1        = 0;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2200      	movs	r2, #0
 800a822:	825a      	strh	r2, [r3, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800a824:	4b7e      	ldr	r3, [pc, #504]	; (800aa20 <lv_refr_area+0x244>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4618      	mov	r0, r3
 800a82a:	f00f fdd3 	bl	801a3d4 <lv_disp_get_ver_res>
 800a82e:	4603      	mov	r3, r0
 800a830:	b29b      	uxth	r3, r3
 800a832:	3b01      	subs	r3, #1
 800a834:	b29b      	uxth	r3, r3
 800a836:	b21a      	sxth	r2, r3
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	82da      	strh	r2, [r3, #22]
        disp_refr->driver.buffer->last_part = 1;
 800a83c:	4b78      	ldr	r3, [pc, #480]	; (800aa20 <lv_refr_area+0x244>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a846:	f043 0302 	orr.w	r3, r3, #2
 800a84a:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f8e8 	bl	800aa24 <lv_refr_area_part>
 800a854:	e0e1      	b.n	800aa1a <lv_refr_area+0x23e>
    }
    /*The buffer is smaller: refresh the area in parts*/
    else {
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a856:	4b72      	ldr	r3, [pc, #456]	; (800aa20 <lv_refr_area+0x244>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f00f fe58 	bl	801a510 <lv_disp_get_buf>
 800a860:	6238      	str	r0, [r7, #32]
        /*Calculate the max row num*/
        lv_coord_t w = lv_area_get_width(area_p);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7ff fc65 	bl	800a132 <lv_area_get_width>
 800a868:	4603      	mov	r3, r0
 800a86a:	83fb      	strh	r3, [r7, #30]
        lv_coord_t h = lv_area_get_height(area_p);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff fc77 	bl	800a160 <lv_area_get_height>
 800a872:	4603      	mov	r3, r0
 800a874:	83bb      	strh	r3, [r7, #28]
        lv_coord_t y2 =
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800a87c:	4b68      	ldr	r3, [pc, #416]	; (800aa20 <lv_refr_area+0x244>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4618      	mov	r0, r3
 800a882:	f00f fda7 	bl	801a3d4 <lv_disp_get_ver_res>
 800a886:	4603      	mov	r3, r0
        lv_coord_t y2 =
 800a888:	429c      	cmp	r4, r3
 800a88a:	db0a      	blt.n	800a8a2 <lv_refr_area+0xc6>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800a88c:	4b64      	ldr	r3, [pc, #400]	; (800aa20 <lv_refr_area+0x244>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4618      	mov	r0, r3
 800a892:	f00f fd9f 	bl	801a3d4 <lv_disp_get_ver_res>
 800a896:	4603      	mov	r3, r0
 800a898:	b29b      	uxth	r3, r3
 800a89a:	3b01      	subs	r3, #1
 800a89c:	b29b      	uxth	r3, r3
        lv_coord_t y2 =
 800a89e:	b21b      	sxth	r3, r3
 800a8a0:	e002      	b.n	800a8a8 <lv_refr_area+0xcc>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a8a8:	837b      	strh	r3, [r7, #26]

        int32_t max_row = (uint32_t)vdb->size / w;
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b6:	62fb      	str	r3, [r7, #44]	; 0x2c

        if(max_row > h) max_row = h;
 800a8b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a8bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	dd02      	ble.n	800a8c8 <lv_refr_area+0xec>
 800a8c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*Round down the lines of VDB if rounding is added*/
        if(disp_refr->driver.rounder_cb) {
 800a8c8:	4b55      	ldr	r3, [pc, #340]	; (800aa20 <lv_refr_area+0x244>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d034      	beq.n	800a93c <lv_refr_area+0x160>
            lv_area_t tmp;
            tmp.x1 = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	81bb      	strh	r3, [r7, #12]
            tmp.x2 = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	823b      	strh	r3, [r7, #16]
            tmp.y1 = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	81fb      	strh	r3, [r7, #14]

            lv_coord_t h_tmp = max_row;
 800a8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e0:	857b      	strh	r3, [r7, #42]	; 0x2a
            do {
                tmp.y2 = h_tmp - 1;
 800a8e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	b21b      	sxth	r3, r3
 800a8ea:	827b      	strh	r3, [r7, #18]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800a8ec:	4b4c      	ldr	r3, [pc, #304]	; (800aa20 <lv_refr_area+0x244>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	4a4b      	ldr	r2, [pc, #300]	; (800aa20 <lv_refr_area+0x244>)
 800a8f4:	6812      	ldr	r2, [r2, #0]
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	f107 020c 	add.w	r2, r7, #12
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4798      	blx	r3

                /*If this height fits into `max_row` then fine*/
                if(lv_area_get_height(&tmp) <= max_row) break;
 800a900:	f107 030c 	add.w	r3, r7, #12
 800a904:	4618      	mov	r0, r3
 800a906:	f7ff fc2b 	bl	800a160 <lv_area_get_height>
 800a90a:	4603      	mov	r3, r0
 800a90c:	461a      	mov	r2, r3
 800a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a910:	4293      	cmp	r3, r2
 800a912:	da0a      	bge.n	800a92a <lv_refr_area+0x14e>

                /*Decrement the height of the area until it fits into `max_row` after rounding*/
                h_tmp--;
 800a914:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a918:	b29b      	uxth	r3, r3
 800a91a:	3b01      	subs	r3, #1
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	857b      	strh	r3, [r7, #42]	; 0x2a
            } while(h_tmp > 0);
 800a920:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a924:	2b00      	cmp	r3, #0
 800a926:	dcdc      	bgt.n	800a8e2 <lv_refr_area+0x106>
 800a928:	e000      	b.n	800a92c <lv_refr_area+0x150>
                if(lv_area_get_height(&tmp) <= max_row) break;
 800a92a:	bf00      	nop

            if(h_tmp <= 0) {
 800a92c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a930:	2b00      	cmp	r3, #0
 800a932:	dd71      	ble.n	800aa18 <lv_refr_area+0x23c>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
                            "small VDB)");
                return;
            }
            else {
                max_row = tmp.y2 + 1;
 800a934:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a938:	3301      	adds	r3, #1
 800a93a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        /*Always use the full row*/
        lv_coord_t row;
        lv_coord_t row_last = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	885b      	ldrh	r3, [r3, #2]
 800a944:	853b      	strh	r3, [r7, #40]	; 0x28
 800a946:	e03b      	b.n	800a9c0 <lv_refr_area+0x1e4>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a960:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = row + max_row - 1;
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	b29a      	uxth	r2, r3
 800a966:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a968:	4413      	add	r3, r2
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	3b01      	subs	r3, #1
 800a96e:	b29b      	uxth	r3, r3
 800a970:	b21a      	sxth	r2, r3
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	82da      	strh	r2, [r3, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a97c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a980:	429a      	cmp	r2, r3
 800a982:	da02      	bge.n	800a98a <lv_refr_area+0x1ae>
 800a984:	6a3b      	ldr	r3, [r7, #32]
 800a986:	8b7a      	ldrh	r2, [r7, #26]
 800a988:	82da      	strh	r2, [r3, #22]
            row_last = vdb->area.y2;
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	8adb      	ldrh	r3, [r3, #22]
 800a98e:	84fb      	strh	r3, [r7, #38]	; 0x26
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 800a990:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a994:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a998:	429a      	cmp	r2, r3
 800a99a:	d108      	bne.n	800a9ae <lv_refr_area+0x1d2>
 800a99c:	4b20      	ldr	r3, [pc, #128]	; (800aa20 <lv_refr_area+0x244>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a9a6:	f043 0302 	orr.w	r3, r3, #2
 800a9aa:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f838 	bl	800aa24 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9ba:	4413      	add	r3, r2
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	853b      	strh	r3, [r7, #40]	; 0x28
 800a9c0:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	4413      	add	r3, r2
 800a9c8:	1e5a      	subs	r2, r3, #1
 800a9ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	ddba      	ble.n	800a948 <lv_refr_area+0x16c>
        }

        /*If the last y coordinates are not handled yet ...*/
        if(y2 != row_last) {
 800a9d2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a9d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d01d      	beq.n	800aa1a <lv_refr_area+0x23e>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800a9ee:	6a3b      	ldr	r3, [r7, #32]
 800a9f0:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a9f6:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = y2;
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	8b7a      	ldrh	r2, [r7, #26]
 800a9fc:	82da      	strh	r2, [r3, #22]

            disp_refr->driver.buffer->last_part = 1;
 800a9fe:	4b08      	ldr	r3, [pc, #32]	; (800aa20 <lv_refr_area+0x244>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	f892 3020 	ldrb.w	r3, [r2, #32]
 800aa08:	f043 0302 	orr.w	r3, r3, #2
 800aa0c:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f807 	bl	800aa24 <lv_refr_area_part>
 800aa16:	e000      	b.n	800aa1a <lv_refr_area+0x23e>
                return;
 800aa18:	bf00      	nop
        }
    }
}
 800aa1a:	3734      	adds	r7, #52	; 0x34
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd90      	pop	{r4, r7, pc}
 800aa20:	200177b4 	.word	0x200177b4

0800aa24 <lv_refr_area_part>:
/**
 * Refresh a part of an area which is on the actual Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area_part(const lv_area_t * area_p)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b0ac      	sub	sp, #176	; 0xb0
 800aa28:	af02      	add	r7, sp, #8
 800aa2a:	6078      	str	r0, [r7, #4]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800aa2c:	4b80      	ldr	r3, [pc, #512]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f00f fd6d 	bl	801a510 <lv_disp_get_buf>
 800aa36:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /*In non double buffered mode, before rendering the next part wait until the previous image is
     * flushed*/
    if(lv_disp_is_double_buf(disp_refr) == false) {
 800aa3a:	4b7d      	ldr	r3, [pc, #500]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f00f fdb4 	bl	801a5ac <lv_disp_is_double_buf>
 800aa44:	4603      	mov	r3, r0
 800aa46:	f083 0301 	eor.w	r3, r3, #1
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d011      	beq.n	800aa74 <lv_refr_area_part+0x50>
        while(vdb->flushing) {
 800aa50:	e00b      	b.n	800aa6a <lv_refr_area_part+0x46>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 800aa52:	4b77      	ldr	r3, [pc, #476]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d006      	beq.n	800aa6a <lv_refr_area_part+0x46>
 800aa5c:	4b74      	ldr	r3, [pc, #464]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	4a73      	ldr	r2, [pc, #460]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aa64:	6812      	ldr	r2, [r2, #0]
 800aa66:	4610      	mov	r0, r2
 800aa68:	4798      	blx	r3
        while(vdb->flushing) {
 800aa6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1ee      	bne.n	800aa52 <lv_refr_area_part+0x2e>
        }
    }

    lv_obj_t * top_act_scr = NULL;
 800aa74:	2300      	movs	r3, #0
 800aa76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    lv_obj_t * top_prev_scr = NULL;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /*Get the new mask from the original area and the act. VDB
     It will be a part of 'area_p'*/
    lv_area_t start_mask;
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
 800aa80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa84:	f103 0210 	add.w	r2, r3, #16
 800aa88:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800aa8c:	6879      	ldr	r1, [r7, #4]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f010 fa16 	bl	801aec0 <_lv_area_intersect>

    /*Get the most top object which is not covered by others*/
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800aa94:	4b66      	ldr	r3, [pc, #408]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7f6 fe7e 	bl	800179a <lv_disp_get_scr_act>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 f8c4 	bl	800ac34 <lv_refr_get_top_obj>
 800aaac:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if(disp_refr->prev_scr) {
 800aab0:	4b5f      	ldr	r3, [pc, #380]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <lv_refr_area_part+0xac>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
 800aaba:	4b5d      	ldr	r3, [pc, #372]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aac0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800aac4:	4611      	mov	r1, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 f8b4 	bl	800ac34 <lv_refr_get_top_obj>
 800aacc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    }

    /*Draw a display background if there is no top object*/
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800aad0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d15d      	bne.n	800ab94 <lv_refr_area_part+0x170>
 800aad8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d159      	bne.n	800ab94 <lv_refr_area_part+0x170>
        if(disp_refr->bg_img) {
 800aae0:	4b53      	ldr	r3, [pc, #332]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d03d      	beq.n	800ab66 <lv_refr_area_part+0x142>
            lv_draw_img_dsc_t dsc;
            lv_draw_img_dsc_init(&dsc);
 800aaea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f003 fb69 	bl	800e1c6 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 800aaf4:	4b4e      	ldr	r3, [pc, #312]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800aafc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
            lv_img_header_t header;
            lv_res_t res;
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800ab00:	4b4b      	ldr	r3, [pc, #300]	; (800ac30 <lv_refr_area_part+0x20c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab06:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f00d fc4b 	bl	80183a8 <lv_img_decoder_get_info>
 800ab12:	4603      	mov	r3, r0
 800ab14:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            if(res == LV_RES_OK) {
 800ab18:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d139      	bne.n	800ab94 <lv_refr_area_part+0x170>
                lv_area_t a;
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 800ab20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab22:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	b21a      	sxth	r2, r3
 800ab2e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ab32:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	b21b      	sxth	r3, r3
 800ab3e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	4613      	mov	r3, r2
 800ab46:	2200      	movs	r2, #0
 800ab48:	2100      	movs	r1, #0
 800ab4a:	f010 f961 	bl	801ae10 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 800ab4e:	4b38      	ldr	r3, [pc, #224]	; (800ac30 <lv_refr_area_part+0x20c>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ab54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ab58:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800ab5c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800ab60:	f003 fb56 	bl	800e210 <lv_draw_img>
 800ab64:	e016      	b.n	800ab94 <lv_refr_area_part+0x170>
                LV_LOG_WARN("Can't draw the background image")
            }
        }
        else {
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800ab66:	f107 0308 	add.w	r3, r7, #8
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f008 fbf8 	bl	8013360 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800ab70:	4b2f      	ldr	r3, [pc, #188]	; (800ac30 <lv_refr_area_part+0x20c>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab76:	60fb      	str	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800ab78:	4b2d      	ldr	r3, [pc, #180]	; (800ac30 <lv_refr_area_part+0x20c>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800ab80:	76bb      	strb	r3, [r7, #26]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800ab82:	f107 0208 	add.w	r2, r7, #8
 800ab86:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800ab8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f008 fc6a 	bl	8013468 <lv_draw_rect>

        }
    }
    /*Refresh the previous screen if any*/
    if(disp_refr->prev_scr) {
 800ab94:	4b26      	ldr	r3, [pc, #152]	; (800ac30 <lv_refr_area_part+0x20c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00f      	beq.n	800abbe <lv_refr_area_part+0x19a>
        /*Get the most top object which is not covered by others*/
        if(top_prev_scr == NULL) {
 800ab9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d104      	bne.n	800abb0 <lv_refr_area_part+0x18c>
            top_prev_scr = disp_refr->prev_scr;
 800aba6:	4b22      	ldr	r3, [pc, #136]	; (800ac30 <lv_refr_area_part+0x20c>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        }
        /*Do the refreshing from the top object*/
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 800abb0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800abb4:	4619      	mov	r1, r3
 800abb6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800abba:	f000 f895 	bl	800ace8 <lv_refr_obj_and_children>

    }

    if(top_act_scr == NULL) {
 800abbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d104      	bne.n	800abd0 <lv_refr_area_part+0x1ac>
        top_act_scr = disp_refr->act_scr;
 800abc6:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <lv_refr_area_part+0x20c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }
    /*Do the refreshing from the top object*/
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 800abd0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800abd4:	4619      	mov	r1, r3
 800abd6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800abda:	f000 f885 	bl	800ace8 <lv_refr_obj_and_children>

    /*Also refresh top and sys layer unconditionally*/
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 800abde:	4b14      	ldr	r3, [pc, #80]	; (800ac30 <lv_refr_area_part+0x20c>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7f6 fe03 	bl	80017ee <lv_disp_get_layer_top>
 800abe8:	4602      	mov	r2, r0
 800abea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800abee:	4619      	mov	r1, r3
 800abf0:	4610      	mov	r0, r2
 800abf2:	f000 f879 	bl	800ace8 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 800abf6:	4b0e      	ldr	r3, [pc, #56]	; (800ac30 <lv_refr_area_part+0x20c>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7f6 fe0c 	bl	8001818 <lv_disp_get_layer_sys>
 800ac00:	4602      	mov	r2, r0
 800ac02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ac06:	4619      	mov	r1, r3
 800ac08:	4610      	mov	r0, r2
 800ac0a:	f000 f86d 	bl	800ace8 <lv_refr_obj_and_children>

    /* In true double buffered mode flush only once when all areas were rendered.
     * In normal mode flush after every area */
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 800ac0e:	4b08      	ldr	r3, [pc, #32]	; (800ac30 <lv_refr_area_part+0x20c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f00f fce1 	bl	801a5da <lv_disp_is_true_double_buf>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	f083 0301 	eor.w	r3, r3, #1
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <lv_refr_area_part+0x204>
        lv_refr_vdb_flush();
 800ac24:	f000 f972 	bl	800af0c <lv_refr_vdb_flush>
    }
}
 800ac28:	bf00      	nop
 800ac2a:	37a8      	adds	r7, #168	; 0xa8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	200177b4 	.word	0x200177b4

0800ac34 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	617b      	str	r3, [r7, #20]

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	3310      	adds	r3, #16
 800ac46:	2200      	movs	r2, #0
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f010 fb1c 	bl	801b288 <_lv_area_is_in>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d043      	beq.n	800acde <lv_refr_get_top_obj+0xaa>
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac5c:	f003 0310 	and.w	r3, r3, #16
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d13b      	bne.n	800acde <lv_refr_get_top_obj+0xaa>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	6879      	ldr	r1, [r7, #4]
 800ac6e:	6838      	ldr	r0, [r7, #0]
 800ac70:	4798      	blx	r3
 800ac72:	4603      	mov	r3, r0
 800ac74:	74fb      	strb	r3, [r7, #19]
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 800ac76:	7cfb      	ldrb	r3, [r7, #19]
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d101      	bne.n	800ac80 <lv_refr_get_top_obj+0x4c>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e02f      	b.n	800ace0 <lv_refr_get_top_obj+0xac>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
 800ac80:	7cfb      	ldrb	r3, [r7, #19]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d108      	bne.n	800ac98 <lv_refr_get_top_obj+0x64>
 800ac86:	2100      	movs	r1, #0
 800ac88:	6838      	ldr	r0, [r7, #0]
 800ac8a:	f7ff fa80 	bl	800a18e <lv_obj_get_style_opa_scale>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2bff      	cmp	r3, #255	; 0xff
 800ac92:	d001      	beq.n	800ac98 <lv_refr_get_top_obj+0x64>
            design_res = LV_DESIGN_RES_NOT_COVER;
 800ac94:	2302      	movs	r3, #2
 800ac96:	74fb      	strb	r3, [r7, #19]
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f011 fb1f 	bl	801c2e0 <_lv_ll_get_head>
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	e00e      	b.n	800acc4 <lv_refr_get_top_obj+0x90>
            found_p = lv_refr_get_top_obj(area_p, i);
 800aca6:	68f9      	ldr	r1, [r7, #12]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff ffc3 	bl	800ac34 <lv_refr_get_top_obj>
 800acae:	6178      	str	r0, [r7, #20]

            /*If a children is ok then break*/
            if(found_p != NULL) {
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10a      	bne.n	800accc <lv_refr_get_top_obj+0x98>
        _LV_LL_READ(obj->child_ll, i) {
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	3304      	adds	r3, #4
 800acba:	68f9      	ldr	r1, [r7, #12]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f011 fb35 	bl	801c32c <_lv_ll_get_next>
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1ed      	bne.n	800aca6 <lv_refr_get_top_obj+0x72>
 800acca:	e000      	b.n	800acce <lv_refr_get_top_obj+0x9a>
                break;
 800accc:	bf00      	nop
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d104      	bne.n	800acde <lv_refr_get_top_obj+0xaa>
            if(design_res == LV_DESIGN_RES_COVER) {
 800acd4:	7cfb      	ldrb	r3, [r7, #19]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d101      	bne.n	800acde <lv_refr_get_top_obj+0xaa>
                found_p = obj;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 800acde:	697b      	ldr	r3, [r7, #20]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <lv_refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj_and_children(lv_obj_t * top_p, const lv_area_t * mask_p)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
    /* Normally always will be a top_obj (at least the screen)
     * but in special cases (e.g. if the screen has alpha) it won't.
     * In this case use the screen directly */
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d105      	bne.n	800ad04 <lv_refr_obj_and_children+0x1c>
 800acf8:	4b20      	ldr	r3, [pc, #128]	; (800ad7c <lv_refr_obj_and_children+0x94>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7f6 fd4c 	bl	800179a <lv_disp_get_scr_act>
 800ad02:	6078      	str	r0, [r7, #4]
    if(top_p == NULL) return;  /*Shouldn't happen*/
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d034      	beq.n	800ad74 <lv_refr_obj_and_children+0x8c>

    /*Refresh the top object and its children*/
    lv_refr_obj(top_p, mask_p);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f837 	bl	800ad80 <lv_refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj */
    lv_obj_t * par;
    lv_obj_t * border_p = top_p;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	613b      	str	r3, [r7, #16]

    par = lv_obj_get_parent(top_p);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7fb fdba 	bl	8006890 <lv_obj_get_parent>
 800ad1c:	6178      	str	r0, [r7, #20]

    /*Do until not reach the screen*/
    while(par != NULL) {
 800ad1e:	e025      	b.n	800ad6c <lv_refr_obj_and_children+0x84>
        /*object before border_p has to be redrawn*/
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	3304      	adds	r3, #4
 800ad24:	6939      	ldr	r1, [r7, #16]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f011 fb1a 	bl	801c360 <_lv_ll_get_prev>
 800ad2c:	60f8      	str	r0, [r7, #12]

        while(i != NULL) {
 800ad2e:	e00a      	b.n	800ad46 <lv_refr_obj_and_children+0x5e>
            /*Refresh the objects*/
            lv_refr_obj(i, mask_p);
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f000 f824 	bl	800ad80 <lv_refr_obj>
            i = _lv_ll_get_prev(&(par->child_ll), i);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	68f9      	ldr	r1, [r7, #12]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f011 fb0e 	bl	801c360 <_lv_ll_get_prev>
 800ad44:	60f8      	str	r0, [r7, #12]
        while(i != NULL) {
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1f1      	bne.n	800ad30 <lv_refr_obj_and_children+0x48>
        }

        /*Call the post draw design function of the parents of the to object*/
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d005      	beq.n	800ad60 <lv_refr_obj_and_children+0x78>
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6978      	ldr	r0, [r7, #20]
 800ad5e:	4798      	blx	r3

        /*The new border will be there last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = par;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	613b      	str	r3, [r7, #16]
        /*Go a level deeper*/
        par = lv_obj_get_parent(par);
 800ad64:	6978      	ldr	r0, [r7, #20]
 800ad66:	f7fb fd93 	bl	8006890 <lv_obj_get_parent>
 800ad6a:	6178      	str	r0, [r7, #20]
    while(par != NULL) {
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1d6      	bne.n	800ad20 <lv_refr_obj_and_children+0x38>
 800ad72:	e000      	b.n	800ad76 <lv_refr_obj_and_children+0x8e>
    if(top_p == NULL) return;  /*Shouldn't happen*/
 800ad74:	bf00      	nop
    }
}
 800ad76:	3718      	adds	r7, #24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	200177b4 	.word	0x200177b4

0800ad80 <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08e      	sub	sp, #56	; 0x38
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad90:	f003 0310 	and.w	r3, r3, #16
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f040 80b4 	bne.w	800af04 <lv_refr_obj+0x184>
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ada0:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
 800ada2:	f107 0318 	add.w	r3, r7, #24
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7fb fdc1 	bl	8006930 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800adae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	b29b      	uxth	r3, r3
 800adba:	b21b      	sxth	r3, r3
 800adbc:	833b      	strh	r3, [r7, #24]
    obj_area.y1 -= ext_size;
 800adbe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	b29b      	uxth	r3, r3
 800adca:	b21b      	sxth	r3, r3
 800adcc:	837b      	strh	r3, [r7, #26]
    obj_area.x2 += ext_size;
 800adce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800add2:	b29a      	uxth	r2, r3
 800add4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800add6:	4413      	add	r3, r2
 800add8:	b29b      	uxth	r3, r3
 800adda:	b21b      	sxth	r3, r3
 800addc:	83bb      	strh	r3, [r7, #28]
    obj_area.y2 += ext_size;
 800adde:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ade6:	4413      	add	r3, r2
 800ade8:	b29b      	uxth	r3, r3
 800adea:	b21b      	sxth	r3, r3
 800adec:	83fb      	strh	r3, [r7, #30]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800adee:	f107 0218 	add.w	r2, r7, #24
 800adf2:	f107 0320 	add.w	r3, r7, #32
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f010 f861 	bl	801aec0 <_lv_area_intersect>
 800adfe:	4603      	mov	r3, r0
 800ae00:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 800ae04:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d07c      	beq.n	800af06 <lv_refr_obj+0x186>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d006      	beq.n	800ae22 <lv_refr_obj+0xa2>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	f107 0120 	add.w	r1, r7, #32
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 800ae22:	f107 0318 	add.w	r3, r7, #24
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7fb fd81 	bl	8006930 <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800ae2e:	f107 0218 	add.w	r2, r7, #24
 800ae32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f010 f841 	bl	801aec0 <_lv_area_intersect>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if(union_ok != false) {
 800ae44:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d04f      	beq.n	800aeec <lv_refr_obj+0x16c>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3304      	adds	r3, #4
 800ae50:	4618      	mov	r0, r3
 800ae52:	f011 fa58 	bl	801c306 <_lv_ll_get_tail>
 800ae56:	6378      	str	r0, [r7, #52]	; 0x34
 800ae58:	e045      	b.n	800aee6 <lv_refr_obj+0x166>
                lv_obj_get_coords(child_p, &child_area);
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae62:	f7fb fd65 	bl	8006930 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
 800ae66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae6a:	867b      	strh	r3, [r7, #50]	; 0x32
                child_area.x1 -= ext_size;
 800ae6c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	b21b      	sxth	r3, r3
 800ae7a:	813b      	strh	r3, [r7, #8]
                child_area.y1 -= ext_size;
 800ae7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	b21b      	sxth	r3, r3
 800ae8a:	817b      	strh	r3, [r7, #10]
                child_area.x2 += ext_size;
 800ae8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae94:	4413      	add	r3, r2
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	b21b      	sxth	r3, r3
 800ae9a:	81bb      	strh	r3, [r7, #12]
                child_area.y2 += ext_size;
 800ae9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aea4:	4413      	add	r3, r2
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	b21b      	sxth	r3, r3
 800aeaa:	81fb      	strh	r3, [r7, #14]
                /* Get the union (common parts) of original mask (from obj)
                 * and its child */
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800aeac:	f107 0208 	add.w	r2, r7, #8
 800aeb0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aeb4:	f107 0310 	add.w	r3, r7, #16
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f010 f801 	bl	801aec0 <_lv_area_intersect>
 800aebe:	4603      	mov	r3, r0
 800aec0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                /*If the parent and the child has common area then refresh the child */
                if(union_ok) {
 800aec4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d005      	beq.n	800aed8 <lv_refr_obj+0x158>
                    /*Refresh the next children*/
                    lv_refr_obj(child_p, &mask_child);
 800aecc:	f107 0310 	add.w	r3, r7, #16
 800aed0:	4619      	mov	r1, r3
 800aed2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aed4:	f7ff ff54 	bl	800ad80 <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	3304      	adds	r3, #4
 800aedc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aede:	4618      	mov	r0, r3
 800aee0:	f011 fa3e 	bl	801c360 <_lv_ll_get_prev>
 800aee4:	6378      	str	r0, [r7, #52]	; 0x34
 800aee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1b6      	bne.n	800ae5a <lv_refr_obj+0xda>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d008      	beq.n	800af06 <lv_refr_obj+0x186>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	f107 0120 	add.w	r1, r7, #32
 800aefc:	2201      	movs	r2, #1
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	4798      	blx	r3
 800af02:	e000      	b.n	800af06 <lv_refr_obj+0x186>
    if(obj->hidden != 0) return;
 800af04:	bf00      	nop
    }
}
 800af06:	3738      	adds	r7, #56	; 0x38
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800af12:	4b37      	ldr	r3, [pc, #220]	; (800aff0 <lv_refr_vdb_flush+0xe4>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4618      	mov	r0, r3
 800af18:	f00f fafa 	bl	801a510 <lv_disp_get_buf>
 800af1c:	6078      	str	r0, [r7, #4]

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 800af1e:	4b34      	ldr	r3, [pc, #208]	; (800aff0 <lv_refr_vdb_flush+0xe4>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4618      	mov	r0, r3
 800af24:	f00f fb42 	bl	801a5ac <lv_disp_is_double_buf>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d010      	beq.n	800af50 <lv_refr_vdb_flush+0x44>
        while(vdb->flushing) {
 800af2e:	e00b      	b.n	800af48 <lv_refr_vdb_flush+0x3c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 800af30:	4b2f      	ldr	r3, [pc, #188]	; (800aff0 <lv_refr_vdb_flush+0xe4>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	69db      	ldr	r3, [r3, #28]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d006      	beq.n	800af48 <lv_refr_vdb_flush+0x3c>
 800af3a:	4b2d      	ldr	r3, [pc, #180]	; (800aff0 <lv_refr_vdb_flush+0xe4>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	69db      	ldr	r3, [r3, #28]
 800af40:	4a2b      	ldr	r2, [pc, #172]	; (800aff0 <lv_refr_vdb_flush+0xe4>)
 800af42:	6812      	ldr	r2, [r2, #0]
 800af44:	4610      	mov	r0, r2
 800af46:	4798      	blx	r3
        while(vdb->flushing) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1ef      	bne.n	800af30 <lv_refr_vdb_flush+0x24>
        }
    }

    vdb->flushing = 1;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	619a      	str	r2, [r3, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 800af56:	4b26      	ldr	r3, [pc, #152]	; (800aff0 <lv_refr_vdb_flush+0xe4>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00c      	beq.n	800af82 <lv_refr_vdb_flush+0x76>
 800af68:	4b21      	ldr	r3, [pc, #132]	; (800aff0 <lv_refr_vdb_flush+0xe4>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	6a1b      	ldr	r3, [r3, #32]
 800af70:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d003      	beq.n	800af82 <lv_refr_vdb_flush+0x76>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	61da      	str	r2, [r3, #28]
 800af80:	e002      	b.n	800af88 <lv_refr_vdb_flush+0x7c>
    else vdb->flushing_last = 0;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	61da      	str	r2, [r3, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800af88:	f7ff f9d2 	bl	800a330 <_lv_refr_get_disp_refreshing>
 800af8c:	6038      	str	r0, [r7, #0]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af92:	2b00      	cmp	r3, #0
 800af94:	d004      	beq.n	800afa0 <lv_refr_vdb_flush+0x94>
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	4610      	mov	r0, r2
 800af9e:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d008      	beq.n	800afba <lv_refr_vdb_flush+0xae>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	6838      	ldr	r0, [r7, #0]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	f102 0110 	add.w	r1, r2, #16
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	6892      	ldr	r2, [r2, #8]
 800afb8:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d012      	beq.n	800afe8 <lv_refr_vdb_flush+0xdc>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00e      	beq.n	800afe8 <lv_refr_vdb_flush+0xdc>
        if(vdb->buf_act == vdb->buf1)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	689a      	ldr	r2, [r3, #8]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d104      	bne.n	800afe0 <lv_refr_vdb_flush+0xd4>
            vdb->buf_act = vdb->buf2;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	609a      	str	r2, [r3, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 800afde:	e003      	b.n	800afe8 <lv_refr_vdb_flush+0xdc>
            vdb->buf_act = vdb->buf1;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	609a      	str	r2, [r3, #8]
}
 800afe8:	bf00      	nop
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	200177b4 	.word	0x200177b4

0800aff4 <_lv_memcpy_small>:
{
 800aff4:	b480      	push	{r7}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	613b      	str	r3, [r7, #16]
    while(len) {
 800b008:	e00c      	b.n	800b024 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	781a      	ldrb	r2, [r3, #0]
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	701a      	strb	r2, [r3, #0]
        d8++;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	3301      	adds	r3, #1
 800b016:	617b      	str	r3, [r7, #20]
        s8++;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	3301      	adds	r3, #1
 800b01c:	613b      	str	r3, [r7, #16]
        len--;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	3b01      	subs	r3, #1
 800b022:	607b      	str	r3, [r7, #4]
    while(len) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1ef      	bne.n	800b00a <_lv_memcpy_small+0x16>
    return dst;
 800b02a:	68fb      	ldr	r3, [r7, #12]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	371c      	adds	r7, #28
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <lv_style_list_get_style>:
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
    if(list->has_trans && list->skip_trans) id++;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	791b      	ldrb	r3, [r3, #4]
 800b048:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d009      	beq.n	800b066 <lv_style_list_get_style+0x2e>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	795b      	ldrb	r3, [r3, #5]
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <lv_style_list_get_style+0x2e>
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	3301      	adds	r3, #1
 800b064:	70fb      	strb	r3, [r7, #3]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	791b      	ldrb	r3, [r3, #4]
 800b06a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b00      	cmp	r3, #0
 800b072:	d008      	beq.n	800b086 <lv_style_list_get_style+0x4e>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	791b      	ldrb	r3, [r3, #4]
 800b078:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	461a      	mov	r2, r3
 800b080:	78fb      	ldrb	r3, [r7, #3]
 800b082:	4293      	cmp	r3, r2
 800b084:	d301      	bcc.n	800b08a <lv_style_list_get_style+0x52>
 800b086:	2300      	movs	r3, #0
 800b088:	e005      	b.n	800b096 <lv_style_list_get_style+0x5e>
    return list->style_list[id];
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	78fb      	ldrb	r3, [r7, #3]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	681b      	ldr	r3, [r3, #0]
}
 800b096:	4618      	mov	r0, r3
 800b098:	370c      	adds	r7, #12
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b082      	sub	sp, #8
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
    _lv_memset_00(style, sizeof(lv_style_t));
 800b0aa:	2104      	movs	r1, #4
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f012 f858 	bl	801d162 <_lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_DEBUG_STYLE_SENTINEL_VALUE;
#endif
}
 800b0b2:	bf00      	nop
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <lv_style_copy>:
 * Copy a style with all its properties
 * @param style_dest pointer to the destination style. (Should be initialized with `lv_style_init()`)
 * @param style_src pointer to the source (to copy )style
 */
void lv_style_copy(lv_style_t * style_dest, const lv_style_t * style_src)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	6039      	str	r1, [r7, #0]
    if(style_src == NULL) return;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d018      	beq.n	800b0fc <lv_style_copy+0x42>

    LV_ASSERT_STYLE(style_dest);
    LV_ASSERT_STYLE(style_src);

    if(style_src->map == NULL) return;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d016      	beq.n	800b100 <lv_style_copy+0x46>

    uint16_t size = _lv_style_get_mem_size(style_src);
 800b0d2:	6838      	ldr	r0, [r7, #0]
 800b0d4:	f000 fb01 	bl	800b6da <_lv_style_get_mem_size>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	81fb      	strh	r3, [r7, #14]
    style_dest->map = lv_mem_alloc(size);
 800b0dc:	89fb      	ldrh	r3, [r7, #14]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f011 fad4 	bl	801c68c <lv_mem_alloc>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	601a      	str	r2, [r3, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	89fa      	ldrh	r2, [r7, #14]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f011 fd8f 	bl	801cc18 <_lv_memcpy>
 800b0fa:	e002      	b.n	800b102 <lv_style_copy+0x48>
    if(style_src == NULL) return;
 800b0fc:	bf00      	nop
 800b0fe:	e000      	b.n	800b102 <lv_style_copy+0x48>
    if(style_src->map == NULL) return;
 800b100:	bf00      	nop
}
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <lv_style_remove_prop>:
 * @param prop a style property ORed with a state.
 * E.g. `LV_STYLE_BORDER_WIDTH | (LV_STATE_PRESSED << LV_STYLE_STATE_POS)`
 * @return true: the property was found and removed; false: the property wasn't found
 */
bool lv_style_remove_prop(lv_style_t * style, lv_style_property_t prop)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	807b      	strh	r3, [r7, #2]
    if(style == NULL) return false;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d101      	bne.n	800b11e <lv_style_remove_prop+0x16>
 800b11a:	2300      	movs	r3, #0
 800b11c:	e049      	b.n	800b1b2 <lv_style_remove_prop+0xaa>
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b11e:	887b      	ldrh	r3, [r7, #2]
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f001 f8c3 	bl	800c2ae <get_property_index>
 800b128:	61b8      	str	r0, [r7, #24]
    /*The property exists but not sure it's state is the same*/
    if(id >= 0) {
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	db3f      	blt.n	800b1b0 <lv_style_remove_prop+0xa8>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f001 f99b 	bl	800c470 <get_style_prop_attr>
 800b13a:	4603      	mov	r3, r0
 800b13c:	75fb      	strb	r3, [r7, #23]
        attr_goal = (prop >> 8) & 0xFFU;
 800b13e:	887b      	ldrh	r3, [r7, #2]
 800b140:	0a1b      	lsrs	r3, r3, #8
 800b142:	b29b      	uxth	r3, r3
 800b144:	75bb      	strb	r3, [r7, #22]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b146:	7dfa      	ldrb	r2, [r7, #23]
 800b148:	7dbb      	ldrb	r3, [r7, #22]
 800b14a:	4053      	eors	r3, r2
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b152:	2b00      	cmp	r3, #0
 800b154:	d12c      	bne.n	800b1b0 <lv_style_remove_prop+0xa8>
            uint32_t map_size = _lv_style_get_mem_size(style);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fabf 	bl	800b6da <_lv_style_get_mem_size>
 800b15c:	4603      	mov	r3, r0
 800b15e:	613b      	str	r3, [r7, #16]
            uint8_t prop_size = get_prop_size(prop);
 800b160:	887b      	ldrh	r3, [r7, #2]
 800b162:	b2db      	uxtb	r3, r3
 800b164:	4618      	mov	r0, r3
 800b166:	f001 f994 	bl	800c492 <get_prop_size>
 800b16a:	4603      	mov	r3, r0
 800b16c:	73fb      	strb	r3, [r7, #15]

            /*Move the props to fill the space of the property to delete*/
            uint32_t i;
            for(i = id; i < map_size - prop_size; i++) {
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	61fb      	str	r3, [r7, #28]
 800b172:	e00e      	b.n	800b192 <lv_style_remove_prop+0x8a>
                style->map[i] = style->map[i + prop_size];
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	7bf9      	ldrb	r1, [r7, #15]
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	440b      	add	r3, r1
 800b17e:	441a      	add	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	440b      	add	r3, r1
 800b188:	7812      	ldrb	r2, [r2, #0]
 800b18a:	701a      	strb	r2, [r3, #0]
            for(i = id; i < map_size - prop_size; i++) {
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	3301      	adds	r3, #1
 800b190:	61fb      	str	r3, [r7, #28]
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	69fa      	ldr	r2, [r7, #28]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d3ea      	bcc.n	800b174 <lv_style_remove_prop+0x6c>
            }

            style_resize(style, map_size - prop_size);
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f001 f922 	bl	800c3f0 <style_resize>

            return true;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e000      	b.n	800b1b2 <lv_style_remove_prop+0xaa>
        }
    }

    return false;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3720      	adds	r7, #32
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b082      	sub	sp, #8
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
    _lv_memset_00(list, sizeof(lv_style_list_t));
 800b1c2:	2108      	movs	r1, #8
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f011 ffcc 	bl	801d162 <_lv_memset_00>
#if LV_USE_ASSERT_STYLE
    list->sentinel = LV_DEBUG_STYLE_LIST_SENTINEL_VALUE;
#endif
}
 800b1ca:	bf00      	nop
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <lv_style_list_copy>:
 * Copy a style list with all its styles and local style properties
 * @param list_dest pointer to the destination style list. (should be initialized with `lv_style_list_init()`)
 * @param list_src pointer to the source (to copy) style list.
 */
void lv_style_list_copy(lv_style_list_t * list_dest, const lv_style_list_t * list_src)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	6039      	str	r1, [r7, #0]
    LV_ASSERT_STYLE_LIST(list_dest);
    LV_ASSERT_STYLE_LIST(list_src);

    _lv_style_list_reset(list_dest);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fa15 	bl	800b60c <_lv_style_list_reset>

    if(list_src->style_list == NULL) return;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f000 80ca 	beq.w	800b380 <lv_style_list_copy+0x1ae>

    /*Copy the styles but skip the transitions*/
    if(list_src->has_local == 0) {
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	791b      	ldrb	r3, [r3, #4]
 800b1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d156      	bne.n	800b2a8 <lv_style_list_copy+0xd6>
        if(list_src->has_trans) {
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	791b      	ldrb	r3, [r3, #4]
 800b1fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b202:	b2db      	uxtb	r3, r3
 800b204:	2b00      	cmp	r3, #0
 800b206:	d02b      	beq.n	800b260 <lv_style_list_copy+0x8e>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	791b      	ldrb	r3, [r3, #4]
 800b20c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b210:	b2db      	uxtb	r3, r3
 800b212:	3b01      	subs	r3, #1
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4618      	mov	r0, r3
 800b218:	f011 fa38 	bl	801c68c <lv_mem_alloc>
 800b21c:	4602      	mov	r2, r0
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6818      	ldr	r0, [r3, #0]
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	1d19      	adds	r1, r3, #4
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	791b      	ldrb	r3, [r3, #4]
 800b230:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b234:	b2db      	uxtb	r3, r3
 800b236:	3b01      	subs	r3, #1
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	461a      	mov	r2, r3
 800b23c:	f011 fcec 	bl	801cc18 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	791b      	ldrb	r3, [r3, #4]
 800b244:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	3b01      	subs	r3, #1
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b252:	b2d9      	uxtb	r1, r3
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	7913      	ldrb	r3, [r2, #4]
 800b258:	f361 0305 	bfi	r3, r1, #0, #6
 800b25c:	7113      	strb	r3, [r2, #4]
 800b25e:	e090      	b.n	800b382 <lv_style_list_copy+0x1b0>
        }
        else {
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	791b      	ldrb	r3, [r3, #4]
 800b264:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4618      	mov	r0, r3
 800b26e:	f011 fa0d 	bl	801c68c <lv_mem_alloc>
 800b272:	4602      	mov	r2, r0
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6818      	ldr	r0, [r3, #0]
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	6819      	ldr	r1, [r3, #0]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	791b      	ldrb	r3, [r3, #4]
 800b284:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	461a      	mov	r2, r3
 800b28e:	f011 fcc3 	bl	801cc18 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	791b      	ldrb	r3, [r3, #4]
 800b296:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b29a:	b2d9      	uxtb	r1, r3
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	7913      	ldrb	r3, [r2, #4]
 800b2a0:	f361 0305 	bfi	r3, r1, #0, #6
 800b2a4:	7113      	strb	r3, [r2, #4]
 800b2a6:	e06c      	b.n	800b382 <lv_style_list_copy+0x1b0>
        }
    }
    else {
        if(list_src->has_trans) {
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	791b      	ldrb	r3, [r3, #4]
 800b2ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d02c      	beq.n	800b310 <lv_style_list_copy+0x13e>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	791b      	ldrb	r3, [r3, #4]
 800b2ba:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	3b02      	subs	r3, #2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f011 f9e1 	bl	801c68c <lv_mem_alloc>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6818      	ldr	r0, [r3, #0]
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f103 0108 	add.w	r1, r3, #8
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	791b      	ldrb	r3, [r3, #4]
 800b2e0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	3b02      	subs	r3, #2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	f011 fc94 	bl	801cc18 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	791b      	ldrb	r3, [r3, #4]
 800b2f4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	3b02      	subs	r3, #2
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b302:	b2d9      	uxtb	r1, r3
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	7913      	ldrb	r3, [r2, #4]
 800b308:	f361 0305 	bfi	r3, r1, #0, #6
 800b30c:	7113      	strb	r3, [r2, #4]
 800b30e:	e02a      	b.n	800b366 <lv_style_list_copy+0x194>
        }
        else {
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	791b      	ldrb	r3, [r3, #4]
 800b314:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	3b01      	subs	r3, #1
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4618      	mov	r0, r3
 800b320:	f011 f9b4 	bl	801c68c <lv_mem_alloc>
 800b324:	4602      	mov	r2, r0
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	1d19      	adds	r1, r3, #4
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	791b      	ldrb	r3, [r3, #4]
 800b338:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	3b01      	subs	r3, #1
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	461a      	mov	r2, r3
 800b344:	f011 fc68 	bl	801cc18 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	791b      	ldrb	r3, [r3, #4]
 800b34c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b350:	b2db      	uxtb	r3, r3
 800b352:	3b01      	subs	r3, #1
 800b354:	b2db      	uxtb	r3, r3
 800b356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b35a:	b2d9      	uxtb	r1, r3
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	7913      	ldrb	r3, [r2, #4]
 800b360:	f361 0305 	bfi	r3, r1, #0, #6
 800b364:	7113      	strb	r3, [r2, #4]
        }

        lv_style_t * local_style = get_alloc_local_style(list_dest);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fffe 	bl	800c368 <get_alloc_local_style>
 800b36c:	60f8      	str	r0, [r7, #12]
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 800b36e:	6838      	ldr	r0, [r7, #0]
 800b370:	f000 fffa 	bl	800c368 <get_alloc_local_style>
 800b374:	4603      	mov	r3, r0
 800b376:	4619      	mov	r1, r3
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7ff fe9e 	bl	800b0ba <lv_style_copy>
 800b37e:	e000      	b.n	800b382 <lv_style_list_copy+0x1b0>
    if(list_src->style_list == NULL) return;
 800b380:	bf00      	nop
    }
}
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <_lv_style_list_add_style>:
 * (It should be static, global or dynamically allocated)
 * @param list pointer to a style list
 * @param style pointer to a style to add
 */
void _lv_style_list_add_style(lv_style_list_t * list, lv_style_t * style)
{
 800b388:	b590      	push	{r4, r7, lr}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list == NULL) return;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d07b      	beq.n	800b490 <_lv_style_list_add_style+0x108>

    /*Remove the style first if already exists*/
    _lv_style_list_remove_style(list, style);
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f880 	bl	800b4a0 <_lv_style_list_remove_style>

    lv_style_t ** new_classes;
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	791b      	ldrb	r3, [r3, #4]
 800b3a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d104      	bne.n	800b3b8 <_lv_style_list_add_style+0x30>
 800b3ae:	2004      	movs	r0, #4
 800b3b0:	f011 f96c 	bl	801c68c <lv_mem_alloc>
 800b3b4:	60f8      	str	r0, [r7, #12]
 800b3b6:	e00d      	b.n	800b3d4 <_lv_style_list_add_style+0x4c>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	791b      	ldrb	r3, [r3, #4]
 800b3c0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	f011 f9fd 	bl	801c7cc <lv_mem_realloc>
 800b3d2:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(new_classes);
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f010 fbcd 	bl	801bb74 <lv_debug_check_null>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	f083 0301 	eor.w	r3, r3, #1
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d008      	beq.n	800b3f8 <_lv_style_list_add_style+0x70>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f04f 0400 	mov.w	r4, #0
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	4623      	mov	r3, r4
 800b3f0:	482a      	ldr	r0, [pc, #168]	; (800b49c <_lv_style_list_add_style+0x114>)
 800b3f2:	f010 fbcf 	bl	801bb94 <lv_debug_log_error>
 800b3f6:	e7fe      	b.n	800b3f6 <_lv_style_list_add_style+0x6e>
    if(new_classes == NULL) {
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d04a      	beq.n	800b494 <_lv_style_list_add_style+0x10c>
        return;
    }

    /*Make space for the new style at the beginning. Leave local and trans style if exists*/
    uint8_t i;
    uint8_t first_style = 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	72bb      	strb	r3, [r7, #10]
    if(list->has_trans) first_style++;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	791b      	ldrb	r3, [r3, #4]
 800b406:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <_lv_style_list_add_style+0x8e>
 800b410:	7abb      	ldrb	r3, [r7, #10]
 800b412:	3301      	adds	r3, #1
 800b414:	72bb      	strb	r3, [r7, #10]
    if(list->has_local) first_style++;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	791b      	ldrb	r3, [r3, #4]
 800b41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <_lv_style_list_add_style+0xa2>
 800b424:	7abb      	ldrb	r3, [r7, #10]
 800b426:	3301      	adds	r3, #1
 800b428:	72bb      	strb	r3, [r7, #10]
    for(i = list->style_cnt; i > first_style; i--) {
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	791b      	ldrb	r3, [r3, #4]
 800b42e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b432:	b2db      	uxtb	r3, r3
 800b434:	72fb      	strb	r3, [r7, #11]
 800b436:	e00f      	b.n	800b458 <_lv_style_list_add_style+0xd0>
        new_classes[i] = new_classes[i - 1];
 800b438:	7afa      	ldrb	r2, [r7, #11]
 800b43a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b43e:	4413      	add	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	441a      	add	r2, r3
 800b446:	7afb      	ldrb	r3, [r7, #11]
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	68f9      	ldr	r1, [r7, #12]
 800b44c:	440b      	add	r3, r1
 800b44e:	6812      	ldr	r2, [r2, #0]
 800b450:	601a      	str	r2, [r3, #0]
    for(i = list->style_cnt; i > first_style; i--) {
 800b452:	7afb      	ldrb	r3, [r7, #11]
 800b454:	3b01      	subs	r3, #1
 800b456:	72fb      	strb	r3, [r7, #11]
 800b458:	7afa      	ldrb	r2, [r7, #11]
 800b45a:	7abb      	ldrb	r3, [r7, #10]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d8eb      	bhi.n	800b438 <_lv_style_list_add_style+0xb0>
    }

    new_classes[first_style] = style;
 800b460:	7abb      	ldrb	r3, [r7, #10]
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	4413      	add	r3, r2
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	601a      	str	r2, [r3, #0]
    list->style_cnt++;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	791b      	ldrb	r3, [r3, #4]
 800b470:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b474:	b2db      	uxtb	r3, r3
 800b476:	3301      	adds	r3, #1
 800b478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b47c:	b2d9      	uxtb	r1, r3
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	7913      	ldrb	r3, [r2, #4]
 800b482:	f361 0305 	bfi	r3, r1, #0, #6
 800b486:	7113      	strb	r3, [r2, #4]
    list->style_list = new_classes;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	601a      	str	r2, [r3, #0]
 800b48e:	e002      	b.n	800b496 <_lv_style_list_add_style+0x10e>
    if(list == NULL) return;
 800b490:	bf00      	nop
 800b492:	e000      	b.n	800b496 <_lv_style_list_add_style+0x10e>
        return;
 800b494:	bf00      	nop
}
 800b496:	3714      	adds	r7, #20
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd90      	pop	{r4, r7, pc}
 800b49c:	0802d0d0 	.word	0x0802d0d0

0800b4a0 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
 800b4a0:	b590      	push	{r4, r7, lr}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	791b      	ldrb	r3, [r3, #4]
 800b4ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 809e 	beq.w	800b5f6 <_lv_style_list_remove_style+0x156>

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < list->style_cnt; i++) {
 800b4be:	2300      	movs	r3, #0
 800b4c0:	73fb      	strb	r3, [r7, #15]
 800b4c2:	e00e      	b.n	800b4e2 <_lv_style_list_remove_style+0x42>
        if(list->style_list[i] == style) {
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d102      	bne.n	800b4dc <_lv_style_list_remove_style+0x3c>
            found = true;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	73bb      	strb	r3, [r7, #14]
            break;
 800b4da:	e00b      	b.n	800b4f4 <_lv_style_list_remove_style+0x54>
    for(i = 0; i < list->style_cnt; i++) {
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	73fb      	strb	r3, [r7, #15]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	791b      	ldrb	r3, [r3, #4]
 800b4e6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d3e7      	bcc.n	800b4c4 <_lv_style_list_remove_style+0x24>
        }
    }
    if(found == false) return;
 800b4f4:	7bbb      	ldrb	r3, [r7, #14]
 800b4f6:	f083 0301 	eor.w	r3, r3, #1
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d17c      	bne.n	800b5fa <_lv_style_list_remove_style+0x15a>

    if(list->style_cnt == 1) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	791b      	ldrb	r3, [r3, #4]
 800b504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d112      	bne.n	800b534 <_lv_style_list_remove_style+0x94>
        lv_mem_free(list->style_list);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4618      	mov	r0, r3
 800b514:	f011 f904 	bl	801c720 <lv_mem_free>
        list->style_list = NULL;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	601a      	str	r2, [r3, #0]
        list->style_cnt = 0;
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	7913      	ldrb	r3, [r2, #4]
 800b522:	f36f 0305 	bfc	r3, #0, #6
 800b526:	7113      	strb	r3, [r2, #4]
        list->has_local = 0;
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	7913      	ldrb	r3, [r2, #4]
 800b52c:	f36f 1386 	bfc	r3, #6, #1
 800b530:	7113      	strb	r3, [r2, #4]
        return;
 800b532:	e065      	b.n	800b600 <_lv_style_list_remove_style+0x160>
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	791b      	ldrb	r3, [r3, #4]
 800b538:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	3b01      	subs	r3, #1
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4618      	mov	r0, r3
 800b544:	f011 f8a2 	bl	801c68c <lv_mem_alloc>
 800b548:	60b8      	str	r0, [r7, #8]
    LV_ASSERT_MEM(new_classes);
 800b54a:	68b8      	ldr	r0, [r7, #8]
 800b54c:	f010 fb12 	bl	801bb74 <lv_debug_check_null>
 800b550:	4603      	mov	r3, r0
 800b552:	f083 0301 	eor.w	r3, r3, #1
 800b556:	b2db      	uxtb	r3, r3
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d008      	beq.n	800b56e <_lv_style_list_remove_style+0xce>
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	f04f 0400 	mov.w	r4, #0
 800b562:	461a      	mov	r2, r3
 800b564:	4623      	mov	r3, r4
 800b566:	4828      	ldr	r0, [pc, #160]	; (800b608 <_lv_style_list_remove_style+0x168>)
 800b568:	f010 fb14 	bl	801bb94 <lv_debug_log_error>
 800b56c:	e7fe      	b.n	800b56c <_lv_style_list_remove_style+0xcc>
    if(new_classes == NULL) {
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d044      	beq.n	800b5fe <_lv_style_list_remove_style+0x15e>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]
 800b578:	2300      	movs	r3, #0
 800b57a:	737b      	strb	r3, [r7, #13]
 800b57c:	e01b      	b.n	800b5b6 <_lv_style_list_remove_style+0x116>
        if(list->style_list[i] == style) continue;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	7bfb      	ldrb	r3, [r7, #15]
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d00e      	beq.n	800b5ae <_lv_style_list_remove_style+0x10e>
        new_classes[j] = list->style_list[i];
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	7bfb      	ldrb	r3, [r7, #15]
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	441a      	add	r2, r3
 800b59a:	7b7b      	ldrb	r3, [r7, #13]
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	68b9      	ldr	r1, [r7, #8]
 800b5a0:	440b      	add	r3, r1
 800b5a2:	6812      	ldr	r2, [r2, #0]
 800b5a4:	601a      	str	r2, [r3, #0]
        j++;
 800b5a6:	7b7b      	ldrb	r3, [r7, #13]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	737b      	strb	r3, [r7, #13]
 800b5ac:	e000      	b.n	800b5b0 <_lv_style_list_remove_style+0x110>
        if(list->style_list[i] == style) continue;
 800b5ae:	bf00      	nop
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	73fb      	strb	r3, [r7, #15]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	791b      	ldrb	r3, [r3, #4]
 800b5ba:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d3da      	bcc.n	800b57e <_lv_style_list_remove_style+0xde>

    }

    lv_mem_free(list->style_list);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f011 f8a7 	bl	801c720 <lv_mem_free>

    list->style_cnt--;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	791b      	ldrb	r3, [r3, #4]
 800b5d6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	333f      	adds	r3, #63	; 0x3f
 800b5de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5e2:	b2d9      	uxtb	r1, r3
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	7913      	ldrb	r3, [r2, #4]
 800b5e8:	f361 0305 	bfi	r3, r1, #0, #6
 800b5ec:	7113      	strb	r3, [r2, #4]
    list->style_list = new_classes;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	e004      	b.n	800b600 <_lv_style_list_remove_style+0x160>
    if(list->style_cnt == 0) return;
 800b5f6:	bf00      	nop
 800b5f8:	e002      	b.n	800b600 <_lv_style_list_remove_style+0x160>
    if(found == false) return;
 800b5fa:	bf00      	nop
 800b5fc:	e000      	b.n	800b600 <_lv_style_list_remove_style+0x160>
        return;
 800b5fe:	bf00      	nop
}
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	bd90      	pop	{r4, r7, pc}
 800b606:	bf00      	nop
 800b608:	0802d0d0 	.word	0x0802d0d0

0800b60c <_lv_style_list_reset>:
 * Remove all styles added from style list, clear the local style, transition style and free all allocated memories.
 * Leave `ignore_trans` flag as it is.
 * @param list pointer to a style list.
 */
void _lv_style_list_reset(lv_style_list_t * list)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d04b      	beq.n	800b6b2 <_lv_style_list_reset+0xa6>

    if(list->has_local) {
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	791b      	ldrb	r3, [r3, #4]
 800b61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00c      	beq.n	800b642 <_lv_style_list_reset+0x36>
        lv_style_t * local = lv_style_list_get_local_style(list);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fbc3 	bl	800bdb4 <lv_style_list_get_local_style>
 800b62e:	60f8      	str	r0, [r7, #12]
        if(local) {
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d005      	beq.n	800b642 <_lv_style_list_reset+0x36>
            lv_style_reset(local);
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 f83f 	bl	800b6ba <lv_style_reset>
            lv_mem_free(local);
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f011 f86f 	bl	801c720 <lv_mem_free>
        }
    }

    if(list->has_trans) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	791b      	ldrb	r3, [r3, #4]
 800b646:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00c      	beq.n	800b66a <_lv_style_list_reset+0x5e>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fbd0 	bl	800bdf6 <_lv_style_list_get_transition_style>
 800b656:	60b8      	str	r0, [r7, #8]
        if(trans) {
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d005      	beq.n	800b66a <_lv_style_list_reset+0x5e>
            lv_style_reset(trans);
 800b65e:	68b8      	ldr	r0, [r7, #8]
 800b660:	f000 f82b 	bl	800b6ba <lv_style_reset>
            lv_mem_free(trans);
 800b664:	68b8      	ldr	r0, [r7, #8]
 800b666:	f011 f85b 	bl	801c720 <lv_mem_free>
        }
    }

    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	791b      	ldrb	r3, [r3, #4]
 800b66e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d004      	beq.n	800b682 <_lv_style_list_reset+0x76>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f011 f84f 	bl	801c720 <lv_mem_free>
    list->style_list = NULL;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]
    list->style_cnt = 0;
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	7913      	ldrb	r3, [r2, #4]
 800b68c:	f36f 0305 	bfc	r3, #0, #6
 800b690:	7113      	strb	r3, [r2, #4]
    list->has_local = 0;
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	7913      	ldrb	r3, [r2, #4]
 800b696:	f36f 1386 	bfc	r3, #6, #1
 800b69a:	7113      	strb	r3, [r2, #4]
    list->has_trans = 0;
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	7913      	ldrb	r3, [r2, #4]
 800b6a0:	f36f 13c7 	bfc	r3, #7, #1
 800b6a4:	7113      	strb	r3, [r2, #4]
    list->skip_trans = 0;
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	7953      	ldrb	r3, [r2, #5]
 800b6aa:	f36f 0300 	bfc	r3, #0, #1
 800b6ae:	7153      	strb	r3, [r2, #5]
 800b6b0:	e000      	b.n	800b6b4 <_lv_style_list_reset+0xa8>
    if(list == NULL) return;
 800b6b2:	bf00      	nop

    /* Intentionally leave `ignore_trans` as it is,
     * because it's independent from the styles in the list*/
}
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <lv_style_reset>:
/**
 * Clear all properties from a style and all allocated memories.
 * @param style pointer to a style
 */
void lv_style_reset(lv_style_t * style)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b082      	sub	sp, #8
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);

    lv_mem_free(style->map);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f011 f82a 	bl	801c720 <lv_mem_free>
    style->map = NULL;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <_lv_style_get_mem_size>:
 * Get the size of the properties in a style in bytes
 * @param style pointer to a style
 * @return size of the properties in bytes
 */
uint16_t _lv_style_get_mem_size(const lv_style_t * style)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b084      	sub	sp, #16
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);

    if(style->map == NULL) return 0;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <_lv_style_get_mem_size+0x14>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e015      	b.n	800b71a <_lv_style_get_mem_size+0x40>

    size_t i = 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60fb      	str	r3, [r7, #12]
    uint8_t prop_id;
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800b6f2:	e005      	b.n	800b700 <_lv_style_get_mem_size+0x26>
        i = get_next_prop_index(prop_id, i);
 800b6f4:	7afb      	ldrb	r3, [r7, #11]
 800b6f6:	68f9      	ldr	r1, [r7, #12]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 fef4 	bl	800c4e6 <get_next_prop_index>
 800b6fe:	60f8      	str	r0, [r7, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800b700:	68f9      	ldr	r1, [r7, #12]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fea5 	bl	800c452 <get_style_prop_id>
 800b708:	4603      	mov	r3, r0
 800b70a:	72fb      	strb	r3, [r7, #11]
 800b70c:	7afb      	ldrb	r3, [r7, #11]
 800b70e:	2bff      	cmp	r3, #255	; 0xff
 800b710:	d1f0      	bne.n	800b6f4 <_lv_style_get_mem_size+0x1a>
    }

    return i + sizeof(lv_style_property_t);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	b29b      	uxth	r3, r3
 800b716:	3302      	adds	r3, #2
 800b718:	b29b      	uxth	r3, r3
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
	...

0800b724 <_lv_style_set_int>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_width()`
 * @note for performance reasons it's not checked if the property really has integer type
 */
void _lv_style_set_int(lv_style_t * style, lv_style_property_t prop, lv_style_int_t value)
{
 800b724:	b590      	push	{r4, r7, lr}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	460b      	mov	r3, r1
 800b72e:	807b      	strh	r3, [r7, #2]
 800b730:	4613      	mov	r3, r2
 800b732:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b734:	887b      	ldrh	r3, [r7, #2]
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fdb8 	bl	800c2ae <get_property_index>
 800b73e:	6138      	str	r0, [r7, #16]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	2b00      	cmp	r3, #0
 800b744:	db1d      	blt.n	800b782 <_lv_style_set_int+0x5e>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fe90 	bl	800c470 <get_style_prop_attr>
 800b750:	4603      	mov	r3, r0
 800b752:	73fb      	strb	r3, [r7, #15]
        attr_goal = (prop >> 8) & 0xFFU;
 800b754:	887b      	ldrh	r3, [r7, #2]
 800b756:	0a1b      	lsrs	r3, r3, #8
 800b758:	b29b      	uxth	r3, r3
 800b75a:	73bb      	strb	r3, [r7, #14]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b75c:	7bfa      	ldrb	r2, [r7, #15]
 800b75e:	7bbb      	ldrb	r3, [r7, #14]
 800b760:	4053      	eors	r3, r2
 800b762:	b2db      	uxtb	r3, r3
 800b764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10a      	bne.n	800b782 <_lv_style_set_int+0x5e>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	3302      	adds	r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	4639      	mov	r1, r7
 800b778:	2202      	movs	r2, #2
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7ff fc3a 	bl	800aff4 <_lv_memcpy_small>
            return;
 800b780:	e059      	b.n	800b836 <_lv_style_set_int+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(lv_style_int_t));
 800b782:	2304      	movs	r3, #4
 800b784:	737b      	strb	r3, [r7, #13]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b786:	23ff      	movs	r3, #255	; 0xff
 800b788:	817b      	strh	r3, [r7, #10]
    uint8_t end_mark_size = sizeof(end_mark);
 800b78a:	2302      	movs	r3, #2
 800b78c:	733b      	strb	r3, [r7, #12]

    uint16_t size = _lv_style_get_mem_size(style);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7ff ffa3 	bl	800b6da <_lv_style_get_mem_size>
 800b794:	4603      	mov	r3, r0
 800b796:	82fb      	strh	r3, [r7, #22]
    if(size == 0) size += end_mark_size;
 800b798:	8afb      	ldrh	r3, [r7, #22]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d104      	bne.n	800b7a8 <_lv_style_set_int+0x84>
 800b79e:	7b3b      	ldrb	r3, [r7, #12]
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	8afb      	ldrh	r3, [r7, #22]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	82fb      	strh	r3, [r7, #22]
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
 800b7a8:	8afb      	ldrh	r3, [r7, #22]
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	82fb      	strh	r3, [r7, #22]
    style_resize(style, size);
 800b7ae:	8afb      	ldrh	r3, [r7, #22]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fe1c 	bl	800c3f0 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f010 f9d9 	bl	801bb74 <lv_debug_check_null>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	f083 0301 	eor.w	r3, r3, #1
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d009      	beq.n	800b7e2 <_lv_style_set_int+0xbe>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f04f 0400 	mov.w	r4, #0
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	4623      	mov	r3, r4
 800b7da:	4818      	ldr	r0, [pc, #96]	; (800b83c <_lv_style_set_int+0x118>)
 800b7dc:	f010 f9da 	bl	801bb94 <lv_debug_log_error>
 800b7e0:	e7fe      	b.n	800b7e0 <_lv_style_set_int+0xbc>
    if(style == NULL) return;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d025      	beq.n	800b834 <_lv_style_set_int+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	8af9      	ldrh	r1, [r7, #22]
 800b7ee:	7b7b      	ldrb	r3, [r7, #13]
 800b7f0:	1ac9      	subs	r1, r1, r3
 800b7f2:	7b3b      	ldrb	r3, [r7, #12]
 800b7f4:	1acb      	subs	r3, r1, r3
 800b7f6:	4413      	add	r3, r2
 800b7f8:	1cb9      	adds	r1, r7, #2
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff fbf9 	bl	800aff4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	8af9      	ldrh	r1, [r7, #22]
 800b808:	7b3b      	ldrb	r3, [r7, #12]
 800b80a:	1acb      	subs	r3, r1, r3
 800b80c:	3b02      	subs	r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	4639      	mov	r1, r7
 800b812:	2202      	movs	r2, #2
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff fbed 	bl	800aff4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	8af9      	ldrh	r1, [r7, #22]
 800b820:	7b3b      	ldrb	r3, [r7, #12]
 800b822:	1acb      	subs	r3, r1, r3
 800b824:	4413      	add	r3, r2
 800b826:	f107 010a 	add.w	r1, r7, #10
 800b82a:	2202      	movs	r2, #2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7ff fbe1 	bl	800aff4 <_lv_memcpy_small>
 800b832:	e000      	b.n	800b836 <_lv_style_set_int+0x112>
    if(style == NULL) return;
 800b834:	bf00      	nop
}
 800b836:	371c      	adds	r7, #28
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd90      	pop	{r4, r7, pc}
 800b83c:	0802d0d0 	.word	0x0802d0d0

0800b840 <_lv_style_set_color>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_color()`
 * @note for performance reasons it's not checked if the property really has color type
 */
void _lv_style_set_color(lv_style_t * style, lv_style_property_t prop, lv_color_t color)
{
 800b840:	b590      	push	{r4, r7, lr}
 800b842:	b089      	sub	sp, #36	; 0x24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	460b      	mov	r3, r1
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b84e:	897b      	ldrh	r3, [r7, #10]
 800b850:	4619      	mov	r1, r3
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 fd2b 	bl	800c2ae <get_property_index>
 800b858:	61b8      	str	r0, [r7, #24]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	db1d      	blt.n	800b89c <_lv_style_set_color+0x5c>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	4619      	mov	r1, r3
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 fe03 	bl	800c470 <get_style_prop_attr>
 800b86a:	4603      	mov	r3, r0
 800b86c:	75fb      	strb	r3, [r7, #23]
        attr_goal = (prop >> 8) & 0xFFU;
 800b86e:	897b      	ldrh	r3, [r7, #10]
 800b870:	0a1b      	lsrs	r3, r3, #8
 800b872:	b29b      	uxth	r3, r3
 800b874:	75bb      	strb	r3, [r7, #22]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b876:	7dfa      	ldrb	r2, [r7, #23]
 800b878:	7dbb      	ldrb	r3, [r7, #22]
 800b87a:	4053      	eors	r3, r2
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10a      	bne.n	800b89c <_lv_style_set_color+0x5c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	3302      	adds	r3, #2
 800b88e:	4413      	add	r3, r2
 800b890:	1d39      	adds	r1, r7, #4
 800b892:	2204      	movs	r2, #4
 800b894:	4618      	mov	r0, r3
 800b896:	f7ff fbad 	bl	800aff4 <_lv_memcpy_small>
            return;
 800b89a:	e05a      	b.n	800b952 <_lv_style_set_color+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(lv_color_t));
 800b89c:	2306      	movs	r3, #6
 800b89e:	757b      	strb	r3, [r7, #21]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b8a0:	23ff      	movs	r3, #255	; 0xff
 800b8a2:	827b      	strh	r3, [r7, #18]
    uint8_t end_mark_size = sizeof(end_mark);
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	753b      	strb	r3, [r7, #20]

    uint16_t size = _lv_style_get_mem_size(style);
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f7ff ff16 	bl	800b6da <_lv_style_get_mem_size>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	83fb      	strh	r3, [r7, #30]
    if(size == 0) size += end_mark_size;
 800b8b2:	8bfb      	ldrh	r3, [r7, #30]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d104      	bne.n	800b8c2 <_lv_style_set_color+0x82>
 800b8b8:	7d3b      	ldrb	r3, [r7, #20]
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	8bfb      	ldrh	r3, [r7, #30]
 800b8be:	4413      	add	r3, r2
 800b8c0:	83fb      	strh	r3, [r7, #30]

    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
 800b8c2:	8bfb      	ldrh	r3, [r7, #30]
 800b8c4:	3306      	adds	r3, #6
 800b8c6:	83fb      	strh	r3, [r7, #30]
    style_resize(style, size);
 800b8c8:	8bfb      	ldrh	r3, [r7, #30]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f000 fd8f 	bl	800c3f0 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f010 f94c 	bl	801bb74 <lv_debug_check_null>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	f083 0301 	eor.w	r3, r3, #1
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d009      	beq.n	800b8fc <_lv_style_set_color+0xbc>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f04f 0400 	mov.w	r4, #0
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4623      	mov	r3, r4
 800b8f4:	4818      	ldr	r0, [pc, #96]	; (800b958 <_lv_style_set_color+0x118>)
 800b8f6:	f010 f94d 	bl	801bb94 <lv_debug_log_error>
 800b8fa:	e7fe      	b.n	800b8fa <_lv_style_set_color+0xba>
    if(style == NULL) return;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d026      	beq.n	800b950 <_lv_style_set_color+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	8bf9      	ldrh	r1, [r7, #30]
 800b908:	7d7b      	ldrb	r3, [r7, #21]
 800b90a:	1ac9      	subs	r1, r1, r3
 800b90c:	7d3b      	ldrb	r3, [r7, #20]
 800b90e:	1acb      	subs	r3, r1, r3
 800b910:	4413      	add	r3, r2
 800b912:	f107 010a 	add.w	r1, r7, #10
 800b916:	2202      	movs	r2, #2
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff fb6b 	bl	800aff4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	8bf9      	ldrh	r1, [r7, #30]
 800b924:	7d3b      	ldrb	r3, [r7, #20]
 800b926:	1acb      	subs	r3, r1, r3
 800b928:	3b04      	subs	r3, #4
 800b92a:	4413      	add	r3, r2
 800b92c:	1d39      	adds	r1, r7, #4
 800b92e:	2204      	movs	r2, #4
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff fb5f 	bl	800aff4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	8bf9      	ldrh	r1, [r7, #30]
 800b93c:	7d3b      	ldrb	r3, [r7, #20]
 800b93e:	1acb      	subs	r3, r1, r3
 800b940:	4413      	add	r3, r2
 800b942:	f107 0112 	add.w	r1, r7, #18
 800b946:	2202      	movs	r2, #2
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff fb53 	bl	800aff4 <_lv_memcpy_small>
 800b94e:	e000      	b.n	800b952 <_lv_style_set_color+0x112>
    if(style == NULL) return;
 800b950:	bf00      	nop
}
 800b952:	3724      	adds	r7, #36	; 0x24
 800b954:	46bd      	mov	sp, r7
 800b956:	bd90      	pop	{r4, r7, pc}
 800b958:	0802d0d0 	.word	0x0802d0d0

0800b95c <_lv_style_set_opa>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_opa()`
 * @note for performance reasons it's not checked if the property really has opacity type
 */
void _lv_style_set_opa(lv_style_t * style, lv_style_property_t prop, lv_opa_t opa)
{
 800b95c:	b590      	push	{r4, r7, lr}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	807b      	strh	r3, [r7, #2]
 800b968:	4613      	mov	r3, r2
 800b96a:	707b      	strb	r3, [r7, #1]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b96c:	887b      	ldrh	r3, [r7, #2]
 800b96e:	4619      	mov	r1, r3
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fc9c 	bl	800c2ae <get_property_index>
 800b976:	6138      	str	r0, [r7, #16]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	db1d      	blt.n	800b9ba <_lv_style_set_opa+0x5e>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	4619      	mov	r1, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fd74 	bl	800c470 <get_style_prop_attr>
 800b988:	4603      	mov	r3, r0
 800b98a:	73fb      	strb	r3, [r7, #15]
        attr_goal = (prop >> 8) & 0xFFU;
 800b98c:	887b      	ldrh	r3, [r7, #2]
 800b98e:	0a1b      	lsrs	r3, r3, #8
 800b990:	b29b      	uxth	r3, r3
 800b992:	73bb      	strb	r3, [r7, #14]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b994:	7bfa      	ldrb	r2, [r7, #15]
 800b996:	7bbb      	ldrb	r3, [r7, #14]
 800b998:	4053      	eors	r3, r2
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10a      	bne.n	800b9ba <_lv_style_set_opa+0x5e>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	3302      	adds	r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	1c79      	adds	r1, r7, #1
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7ff fb1e 	bl	800aff4 <_lv_memcpy_small>
            return;
 800b9b8:	e059      	b.n	800ba6e <_lv_style_set_opa+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(lv_opa_t));
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	737b      	strb	r3, [r7, #13]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b9be:	23ff      	movs	r3, #255	; 0xff
 800b9c0:	817b      	strh	r3, [r7, #10]
    uint8_t end_mark_size = sizeof(end_mark);
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	733b      	strb	r3, [r7, #12]

    uint16_t size = _lv_style_get_mem_size(style);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff fe87 	bl	800b6da <_lv_style_get_mem_size>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	82fb      	strh	r3, [r7, #22]
    if(size == 0) size += end_mark_size;
 800b9d0:	8afb      	ldrh	r3, [r7, #22]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d104      	bne.n	800b9e0 <_lv_style_set_opa+0x84>
 800b9d6:	7b3b      	ldrb	r3, [r7, #12]
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	8afb      	ldrh	r3, [r7, #22]
 800b9dc:	4413      	add	r3, r2
 800b9de:	82fb      	strh	r3, [r7, #22]

    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
 800b9e0:	8afb      	ldrh	r3, [r7, #22]
 800b9e2:	3303      	adds	r3, #3
 800b9e4:	82fb      	strh	r3, [r7, #22]
    style_resize(style, size);
 800b9e6:	8afb      	ldrh	r3, [r7, #22]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fd00 	bl	800c3f0 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f010 f8bd 	bl	801bb74 <lv_debug_check_null>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	f083 0301 	eor.w	r3, r3, #1
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d009      	beq.n	800ba1a <_lv_style_set_opa+0xbe>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f04f 0400 	mov.w	r4, #0
 800ba0e:	461a      	mov	r2, r3
 800ba10:	4623      	mov	r3, r4
 800ba12:	4818      	ldr	r0, [pc, #96]	; (800ba74 <_lv_style_set_opa+0x118>)
 800ba14:	f010 f8be 	bl	801bb94 <lv_debug_log_error>
 800ba18:	e7fe      	b.n	800ba18 <_lv_style_set_opa+0xbc>
    if(style == NULL) return;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d025      	beq.n	800ba6c <_lv_style_set_opa+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	8af9      	ldrh	r1, [r7, #22]
 800ba26:	7b7b      	ldrb	r3, [r7, #13]
 800ba28:	1ac9      	subs	r1, r1, r3
 800ba2a:	7b3b      	ldrb	r3, [r7, #12]
 800ba2c:	1acb      	subs	r3, r1, r3
 800ba2e:	4413      	add	r3, r2
 800ba30:	1cb9      	adds	r1, r7, #2
 800ba32:	2202      	movs	r2, #2
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7ff fadd 	bl	800aff4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	8af9      	ldrh	r1, [r7, #22]
 800ba40:	7b3b      	ldrb	r3, [r7, #12]
 800ba42:	1acb      	subs	r3, r1, r3
 800ba44:	3b01      	subs	r3, #1
 800ba46:	4413      	add	r3, r2
 800ba48:	1c79      	adds	r1, r7, #1
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7ff fad1 	bl	800aff4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	8af9      	ldrh	r1, [r7, #22]
 800ba58:	7b3b      	ldrb	r3, [r7, #12]
 800ba5a:	1acb      	subs	r3, r1, r3
 800ba5c:	4413      	add	r3, r2
 800ba5e:	f107 010a 	add.w	r1, r7, #10
 800ba62:	2202      	movs	r2, #2
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fac5 	bl	800aff4 <_lv_memcpy_small>
 800ba6a:	e000      	b.n	800ba6e <_lv_style_set_opa+0x112>
    if(style == NULL) return;
 800ba6c:	bf00      	nop
}
 800ba6e:	371c      	adds	r7, #28
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd90      	pop	{r4, r7, pc}
 800ba74:	0802d0d0 	.word	0x0802d0d0

0800ba78 <_lv_style_set_ptr>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_width()`
 * @note for performance reasons it's not checked if the property is really has pointer type
 */
void _lv_style_set_ptr(lv_style_t * style, lv_style_property_t prop, const void * p)
{
 800ba78:	b590      	push	{r4, r7, lr}
 800ba7a:	b089      	sub	sp, #36	; 0x24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	460b      	mov	r3, r1
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800ba86:	897b      	ldrh	r3, [r7, #10]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f000 fc0f 	bl	800c2ae <get_property_index>
 800ba90:	61b8      	str	r0, [r7, #24]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	db1d      	blt.n	800bad4 <_lv_style_set_ptr+0x5c>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f000 fce7 	bl	800c470 <get_style_prop_attr>
 800baa2:	4603      	mov	r3, r0
 800baa4:	75fb      	strb	r3, [r7, #23]
        attr_goal = (prop >> 8) & 0xFFU;
 800baa6:	897b      	ldrh	r3, [r7, #10]
 800baa8:	0a1b      	lsrs	r3, r3, #8
 800baaa:	b29b      	uxth	r3, r3
 800baac:	75bb      	strb	r3, [r7, #22]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800baae:	7dfa      	ldrb	r2, [r7, #23]
 800bab0:	7dbb      	ldrb	r3, [r7, #22]
 800bab2:	4053      	eors	r3, r2
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10a      	bne.n	800bad4 <_lv_style_set_ptr+0x5c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	3302      	adds	r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	1d39      	adds	r1, r7, #4
 800baca:	2204      	movs	r2, #4
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff fa91 	bl	800aff4 <_lv_memcpy_small>
            return;
 800bad2:	e05a      	b.n	800bb8a <_lv_style_set_ptr+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(const void *));
 800bad4:	2306      	movs	r3, #6
 800bad6:	757b      	strb	r3, [r7, #21]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800bad8:	23ff      	movs	r3, #255	; 0xff
 800bada:	827b      	strh	r3, [r7, #18]
    uint8_t end_mark_size = sizeof(end_mark);
 800badc:	2302      	movs	r3, #2
 800bade:	753b      	strb	r3, [r7, #20]

    uint16_t size = _lv_style_get_mem_size(style);
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f7ff fdfa 	bl	800b6da <_lv_style_get_mem_size>
 800bae6:	4603      	mov	r3, r0
 800bae8:	83fb      	strh	r3, [r7, #30]
    if(size == 0) size += end_mark_size;
 800baea:	8bfb      	ldrh	r3, [r7, #30]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d104      	bne.n	800bafa <_lv_style_set_ptr+0x82>
 800baf0:	7d3b      	ldrb	r3, [r7, #20]
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	8bfb      	ldrh	r3, [r7, #30]
 800baf6:	4413      	add	r3, r2
 800baf8:	83fb      	strh	r3, [r7, #30]

    size += sizeof(lv_style_property_t) + sizeof(const void *);
 800bafa:	8bfb      	ldrh	r3, [r7, #30]
 800bafc:	3306      	adds	r3, #6
 800bafe:	83fb      	strh	r3, [r7, #30]
    style_resize(style, size);
 800bb00:	8bfb      	ldrh	r3, [r7, #30]
 800bb02:	4619      	mov	r1, r3
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 fc73 	bl	800c3f0 <style_resize>
    LV_ASSERT_MEM(style->map);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f010 f830 	bl	801bb74 <lv_debug_check_null>
 800bb14:	4603      	mov	r3, r0
 800bb16:	f083 0301 	eor.w	r3, r3, #1
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d009      	beq.n	800bb34 <_lv_style_set_ptr+0xbc>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f04f 0400 	mov.w	r4, #0
 800bb28:	461a      	mov	r2, r3
 800bb2a:	4623      	mov	r3, r4
 800bb2c:	4818      	ldr	r0, [pc, #96]	; (800bb90 <_lv_style_set_ptr+0x118>)
 800bb2e:	f010 f831 	bl	801bb94 <lv_debug_log_error>
 800bb32:	e7fe      	b.n	800bb32 <_lv_style_set_ptr+0xba>
    if(style == NULL) return;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d026      	beq.n	800bb88 <_lv_style_set_ptr+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	8bf9      	ldrh	r1, [r7, #30]
 800bb40:	7d7b      	ldrb	r3, [r7, #21]
 800bb42:	1ac9      	subs	r1, r1, r3
 800bb44:	7d3b      	ldrb	r3, [r7, #20]
 800bb46:	1acb      	subs	r3, r1, r3
 800bb48:	4413      	add	r3, r2
 800bb4a:	f107 010a 	add.w	r1, r7, #10
 800bb4e:	2202      	movs	r2, #2
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff fa4f 	bl	800aff4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	8bf9      	ldrh	r1, [r7, #30]
 800bb5c:	7d3b      	ldrb	r3, [r7, #20]
 800bb5e:	1acb      	subs	r3, r1, r3
 800bb60:	3b04      	subs	r3, #4
 800bb62:	4413      	add	r3, r2
 800bb64:	1d39      	adds	r1, r7, #4
 800bb66:	2204      	movs	r2, #4
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7ff fa43 	bl	800aff4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	8bf9      	ldrh	r1, [r7, #30]
 800bb74:	7d3b      	ldrb	r3, [r7, #20]
 800bb76:	1acb      	subs	r3, r1, r3
 800bb78:	4413      	add	r3, r2
 800bb7a:	f107 0112 	add.w	r1, r7, #18
 800bb7e:	2202      	movs	r2, #2
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7ff fa37 	bl	800aff4 <_lv_memcpy_small>
 800bb86:	e000      	b.n	800bb8a <_lv_style_set_ptr+0x112>
    if(style == NULL) return;
 800bb88:	bf00      	nop
}
 800bb8a:	3724      	adds	r7, #36	; 0x24
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd90      	pop	{r4, r7, pc}
 800bb90:	0802d0d0 	.word	0x0802d0d0

0800bb94 <_lv_style_get_int>:
 * @return the weight of the found property (how well it fits to the style state).
 *         Higher number is means better fit
 *         -1 if the not found (`res` will be undefined)
 */
int16_t _lv_style_get_int(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b088      	sub	sp, #32
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	607a      	str	r2, [r7, #4]
 800bba0:	817b      	strh	r3, [r7, #10]
    lv_style_int_t * res = (lv_style_int_t *)v_res;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	61fb      	str	r3, [r7, #28]
    LV_ASSERT_STYLE(style);

    if(style == NULL) return -1;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d102      	bne.n	800bbb2 <_lv_style_get_int+0x1e>
 800bbac:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb0:	e030      	b.n	800bc14 <_lv_style_get_int+0x80>
    if(style->map == NULL) return -1;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d102      	bne.n	800bbc0 <_lv_style_get_int+0x2c>
 800bbba:	f04f 33ff 	mov.w	r3, #4294967295
 800bbbe:	e029      	b.n	800bc14 <_lv_style_get_int+0x80>

    int32_t id = get_property_index(style, prop);
 800bbc0:	897b      	ldrh	r3, [r7, #10]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f000 fb72 	bl	800c2ae <get_property_index>
 800bbca:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	da02      	bge.n	800bbd8 <_lv_style_get_int+0x44>
        return -1;
 800bbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd6:	e01d      	b.n	800bc14 <_lv_style_get_int+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	3302      	adds	r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	69f8      	ldr	r0, [r7, #28]
 800bbe8:	f7ff fa04 	bl	800aff4 <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f000 fc3d 	bl	800c470 <get_style_prop_attr>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800bbfa:	897b      	ldrh	r3, [r7, #10]
 800bbfc:	0a1b      	lsrs	r3, r3, #8
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
 800bc04:	b21b      	sxth	r3, r3
 800bc06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc0a:	b21a      	sxth	r2, r3
 800bc0c:	7dbb      	ldrb	r3, [r7, #22]
 800bc0e:	b21b      	sxth	r3, r3
 800bc10:	4013      	ands	r3, r2
 800bc12:	b21b      	sxth	r3, r3
    }
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <_lv_style_get_opa>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_style_get_border_opa()`
 * @note for performance reasons it's not checked if the property really has opacity type
 */
int16_t _lv_style_get_opa(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b088      	sub	sp, #32
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	460b      	mov	r3, r1
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	817b      	strh	r3, [r7, #10]
    lv_opa_t * res = (lv_opa_t *)v_res;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	61fb      	str	r3, [r7, #28]
    LV_ASSERT_STYLE(style);

    if(style == NULL) return -1;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d102      	bne.n	800bc3a <_lv_style_get_opa+0x1e>
 800bc34:	f04f 33ff 	mov.w	r3, #4294967295
 800bc38:	e030      	b.n	800bc9c <_lv_style_get_opa+0x80>
    if(style->map == NULL) return -1;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <_lv_style_get_opa+0x2c>
 800bc42:	f04f 33ff 	mov.w	r3, #4294967295
 800bc46:	e029      	b.n	800bc9c <_lv_style_get_opa+0x80>

    int32_t id = get_property_index(style, prop);
 800bc48:	897b      	ldrh	r3, [r7, #10]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 fb2e 	bl	800c2ae <get_property_index>
 800bc52:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	da02      	bge.n	800bc60 <_lv_style_get_opa+0x44>
        return -1;
 800bc5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc5e:	e01d      	b.n	800bc9c <_lv_style_get_opa+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	3302      	adds	r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	69f8      	ldr	r0, [r7, #28]
 800bc70:	f7ff f9c0 	bl	800aff4 <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	4619      	mov	r1, r3
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f000 fbf9 	bl	800c470 <get_style_prop_attr>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800bc82:	897b      	ldrh	r3, [r7, #10]
 800bc84:	0a1b      	lsrs	r3, r3, #8
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
 800bc8c:	b21b      	sxth	r3, r3
 800bc8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc92:	b21a      	sxth	r2, r3
 800bc94:	7dbb      	ldrb	r3, [r7, #22]
 800bc96:	b21b      	sxth	r3, r3
 800bc98:	4013      	ands	r3, r2
 800bc9a:	b21b      	sxth	r3, r3
    }
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3720      	adds	r7, #32
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <_lv_style_get_color>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_style_get_border_color()`
 * @note for performance reasons it's not checked if the property really has color type
 */
int16_t _lv_style_get_color(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b088      	sub	sp, #32
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	460b      	mov	r3, r1
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	817b      	strh	r3, [r7, #10]
    lv_color_t * res = (lv_color_t *)v_res;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	61fb      	str	r3, [r7, #28]
    if(style == NULL) return -1;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <_lv_style_get_color+0x1e>
 800bcbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc0:	e030      	b.n	800bd24 <_lv_style_get_color+0x80>
    if(style->map == NULL) return -1;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d102      	bne.n	800bcd0 <_lv_style_get_color+0x2c>
 800bcca:	f04f 33ff 	mov.w	r3, #4294967295
 800bcce:	e029      	b.n	800bd24 <_lv_style_get_color+0x80>
    int32_t id = get_property_index(style, prop);
 800bcd0:	897b      	ldrh	r3, [r7, #10]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f000 faea 	bl	800c2ae <get_property_index>
 800bcda:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	da02      	bge.n	800bce8 <_lv_style_get_color+0x44>
        return -1;
 800bce2:	f04f 33ff 	mov.w	r3, #4294967295
 800bce6:	e01d      	b.n	800bd24 <_lv_style_get_color+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	3302      	adds	r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	2204      	movs	r2, #4
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	69f8      	ldr	r0, [r7, #28]
 800bcf8:	f7ff f97c 	bl	800aff4 <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f000 fbb5 	bl	800c470 <get_style_prop_attr>
 800bd06:	4603      	mov	r3, r0
 800bd08:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800bd0a:	897b      	ldrh	r3, [r7, #10]
 800bd0c:	0a1b      	lsrs	r3, r3, #8
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
 800bd14:	b21b      	sxth	r3, r3
 800bd16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd1a:	b21a      	sxth	r2, r3
 800bd1c:	7dbb      	ldrb	r3, [r7, #22]
 800bd1e:	b21b      	sxth	r3, r3
 800bd20:	4013      	ands	r3, r2
 800bd22:	b21b      	sxth	r3, r3
    }
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3720      	adds	r7, #32
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <_lv_style_get_ptr>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_style_get_text_font()`
 * @note for performance reasons it's not checked if the property really has pointer type
 */
int16_t _lv_style_get_ptr(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b088      	sub	sp, #32
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	460b      	mov	r3, r1
 800bd36:	607a      	str	r2, [r7, #4]
 800bd38:	817b      	strh	r3, [r7, #10]
    const void ** res = (const void **)v_res;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	61fb      	str	r3, [r7, #28]
    if(style == NULL) return -1;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d102      	bne.n	800bd4a <_lv_style_get_ptr+0x1e>
 800bd44:	f04f 33ff 	mov.w	r3, #4294967295
 800bd48:	e030      	b.n	800bdac <_lv_style_get_ptr+0x80>
    if(style->map == NULL) return -1;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d102      	bne.n	800bd58 <_lv_style_get_ptr+0x2c>
 800bd52:	f04f 33ff 	mov.w	r3, #4294967295
 800bd56:	e029      	b.n	800bdac <_lv_style_get_ptr+0x80>

    int32_t id = get_property_index(style, prop);
 800bd58:	897b      	ldrh	r3, [r7, #10]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f000 faa6 	bl	800c2ae <get_property_index>
 800bd62:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	da02      	bge.n	800bd70 <_lv_style_get_ptr+0x44>
        return -1;
 800bd6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd6e:	e01d      	b.n	800bdac <_lv_style_get_ptr+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	3302      	adds	r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	2204      	movs	r2, #4
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	69f8      	ldr	r0, [r7, #28]
 800bd80:	f7ff f938 	bl	800aff4 <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	4619      	mov	r1, r3
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f000 fb71 	bl	800c470 <get_style_prop_attr>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800bd92:	897b      	ldrh	r3, [r7, #10]
 800bd94:	0a1b      	lsrs	r3, r3, #8
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800bd9a:	7dfb      	ldrb	r3, [r7, #23]
 800bd9c:	b21b      	sxth	r3, r3
 800bd9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda2:	b21a      	sxth	r2, r3
 800bda4:	7dbb      	ldrb	r3, [r7, #22]
 800bda6:	b21b      	sxth	r3, r3
 800bda8:	4013      	ands	r3, r2
 800bdaa:	b21b      	sxth	r3, r3
    }
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3720      	adds	r7, #32
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <lv_style_list_get_local_style>:
 * Get the local style of a style list
 * @param list pointer to a style list where the local property should be set
 * @return pointer to the local style if exists else `NULL`.
 */
lv_style_t * lv_style_list_get_local_style(lv_style_list_t * list)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(!list->has_local) return NULL;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	791b      	ldrb	r3, [r3, #4]
 800bdc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d101      	bne.n	800bdce <lv_style_list_get_local_style+0x1a>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e00d      	b.n	800bdea <lv_style_list_get_local_style+0x36>
    if(list->has_trans) return list->style_list[1];
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	791b      	ldrb	r3, [r3, #4]
 800bdd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d003      	beq.n	800bde4 <lv_style_list_get_local_style+0x30>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	e002      	b.n	800bdea <lv_style_list_get_local_style+0x36>
    else return list->style_list[0];
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <_lv_style_list_get_transition_style>:
 * Get the transition style of a style list
 * @param list pointer to a style list where the local property should be set
 * @return pointer to the transition style if exists else `NULL`.
 */
lv_style_t * _lv_style_list_get_transition_style(lv_style_list_t * list)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(!list->has_trans) return NULL;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	791b      	ldrb	r3, [r3, #4]
 800be02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be06:	b2db      	uxtb	r3, r3
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <_lv_style_list_get_transition_style+0x1a>
 800be0c:	2300      	movs	r3, #0
 800be0e:	e002      	b.n	800be16 <_lv_style_list_get_transition_style+0x20>
    return list->style_list[0];
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
}
 800be16:	4618      	mov	r0, r3
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
	...

0800be24 <_lv_style_list_add_trans_style>:
 * Allocate the transition style in a style list. If already exists simply return it.
 * @param list pointer to a style list
 * @return the transition style of a style list
 */
lv_style_t * _lv_style_list_add_trans_style(lv_style_list_t * list)
{
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	791b      	ldrb	r3, [r3, #4]
 800be30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d004      	beq.n	800be44 <_lv_style_list_add_trans_style+0x20>
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7ff ffdb 	bl	800bdf6 <_lv_style_list_get_transition_style>
 800be40:	4603      	mov	r3, r0
 800be42:	e03d      	b.n	800bec0 <_lv_style_list_add_trans_style+0x9c>

    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
 800be44:	2004      	movs	r0, #4
 800be46:	f010 fc21 	bl	801c68c <lv_mem_alloc>
 800be4a:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(trans_style);
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f00f fe91 	bl	801bb74 <lv_debug_check_null>
 800be52:	4603      	mov	r3, r0
 800be54:	f083 0301 	eor.w	r3, r3, #1
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d008      	beq.n	800be70 <_lv_style_list_add_trans_style+0x4c>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f04f 0400 	mov.w	r4, #0
 800be64:	461a      	mov	r2, r3
 800be66:	4623      	mov	r3, r4
 800be68:	4817      	ldr	r0, [pc, #92]	; (800bec8 <_lv_style_list_add_trans_style+0xa4>)
 800be6a:	f00f fe93 	bl	801bb94 <lv_debug_log_error>
 800be6e:	e7fe      	b.n	800be6e <_lv_style_list_add_trans_style+0x4a>
    if(trans_style == NULL) {
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <_lv_style_list_add_trans_style+0x56>
        LV_LOG_WARN("lv_style_list_add_trans_style: couldn't create transition style");
        return NULL;
 800be76:	2300      	movs	r3, #0
 800be78:	e022      	b.n	800bec0 <_lv_style_list_add_trans_style+0x9c>
    }

    lv_style_init(trans_style);
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f7ff f911 	bl	800b0a2 <lv_style_init>

    _lv_style_list_add_style(list, trans_style);
 800be80:	68f9      	ldr	r1, [r7, #12]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7ff fa80 	bl	800b388 <_lv_style_list_add_style>
    list->has_trans = 1;
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	7913      	ldrb	r3, [r2, #4]
 800be8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be90:	7113      	strb	r3, [r2, #4]

    /*If the list has local style trans was added after it. But trans should be the first so swap them*/
    if(list->has_local) {
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	791b      	ldrb	r3, [r3, #4]
 800be96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00e      	beq.n	800bebe <_lv_style_list_add_trans_style+0x9a>
        lv_style_t * tmp = list->style_list[0];
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	60bb      	str	r3, [r7, #8]
        list->style_list[0] = list->style_list[1];
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6852      	ldr	r2, [r2, #4]
 800beb2:	601a      	str	r2, [r3, #0]
        list->style_list[1] = tmp;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	3304      	adds	r3, #4
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	601a      	str	r2, [r3, #0]
    }
    return trans_style;
 800bebe:	68fb      	ldr	r3, [r7, #12]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd90      	pop	{r4, r7, pc}
 800bec8:	0802d0d0 	.word	0x0802d0d0

0800becc <_lv_style_list_get_int>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has integer type
 */
lv_res_t _lv_style_list_get_int(lv_style_list_t * list, lv_style_property_t prop, lv_style_int_t * res)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	460b      	mov	r3, r1
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <_lv_style_list_get_int+0x18>
 800bee0:	2300      	movs	r3, #0
 800bee2:	e06d      	b.n	800bfc0 <_lv_style_list_get_int+0xf4>
    if(list->style_list == NULL) return LV_RES_INV;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <_lv_style_list_get_int+0x24>
 800beec:	2300      	movs	r3, #0
 800beee:	e067      	b.n	800bfc0 <_lv_style_list_get_int+0xf4>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800bef0:	897b      	ldrh	r3, [r7, #10]
 800bef2:	0a1b      	lsrs	r3, r3, #8
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	76fb      	strb	r3, [r7, #27]
    int16_t weight_goal = attr;
 800bef8:	7efb      	ldrb	r3, [r7, #27]
 800befa:	833b      	strh	r3, [r7, #24]

    int16_t weight = -1;
 800befc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf00:	83fb      	strh	r3, [r7, #30]

    lv_style_int_t value_act = 0;
 800bf02:	2300      	movs	r3, #0
 800bf04:	823b      	strh	r3, [r7, #16]

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bf06:	2300      	movs	r3, #0
 800bf08:	83bb      	strh	r3, [r7, #28]
 800bf0a:	e049      	b.n	800bfa0 <_lv_style_list_get_int+0xd4>
        /* changed class to _class to allow compilation as c++ */
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800bf0c:	8bbb      	ldrh	r3, [r7, #28]
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	4619      	mov	r1, r3
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7ff f890 	bl	800b038 <lv_style_list_get_style>
 800bf18:	6178      	str	r0, [r7, #20]
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
 800bf1a:	f107 0210 	add.w	r2, r7, #16
 800bf1e:	897b      	ldrh	r3, [r7, #10]
 800bf20:	4619      	mov	r1, r3
 800bf22:	6978      	ldr	r0, [r7, #20]
 800bf24:	f7ff fe36 	bl	800bb94 <_lv_style_get_int>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	827b      	strh	r3, [r7, #18]

        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800bf2c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800bf30:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d105      	bne.n	800bf44 <_lv_style_list_get_int+0x78>
            *res = value_act;
 800bf38:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	801a      	strh	r2, [r3, #0]
            return LV_RES_OK;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e03d      	b.n	800bfc0 <_lv_style_list_get_int+0xf4>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	791b      	ldrb	r3, [r3, #4]
 800bf48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d014      	beq.n	800bf7c <_lv_style_list_get_int+0xb0>
 800bf52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	db10      	blt.n	800bf7c <_lv_style_list_get_int+0xb0>
 800bf5a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10c      	bne.n	800bf7c <_lv_style_list_get_int+0xb0>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	795b      	ldrb	r3, [r3, #5]
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d105      	bne.n	800bf7c <_lv_style_list_get_int+0xb0>
            *res = value_act;
 800bf70:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	801a      	strh	r2, [r3, #0]
            return LV_RES_OK;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e021      	b.n	800bfc0 <_lv_style_list_get_int+0xf4>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800bf7c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800bf80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	dd05      	ble.n	800bf94 <_lv_style_list_get_int+0xc8>
            weight =  weight_act;
 800bf88:	8a7b      	ldrh	r3, [r7, #18]
 800bf8a:	83fb      	strh	r3, [r7, #30]
            *res = value_act;
 800bf8c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	801a      	strh	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bf94:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	83bb      	strh	r3, [r7, #28]
 800bfa0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	7912      	ldrb	r2, [r2, #4]
 800bfa8:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800bfac:	b2d2      	uxtb	r2, r2
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	dbac      	blt.n	800bf0c <_lv_style_list_get_int+0x40>
        }
    }

    if(weight >= 0) return LV_RES_OK;
 800bfb2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	db01      	blt.n	800bfbe <_lv_style_list_get_int+0xf2>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e000      	b.n	800bfc0 <_lv_style_list_get_int+0xf4>
    else return LV_RES_INV;
 800bfbe:	2300      	movs	r3, #0

}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3720      	adds	r7, #32
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <_lv_style_list_get_color>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has color type
 */
lv_res_t _lv_style_list_get_color(lv_style_list_t * list, lv_style_property_t prop, lv_color_t * res)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b08a      	sub	sp, #40	; 0x28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	607a      	str	r2, [r7, #4]
 800bfd4:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d101      	bne.n	800bfe0 <_lv_style_list_get_color+0x18>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	e06c      	b.n	800c0ba <_lv_style_list_get_color+0xf2>
    if(list->style_list == NULL) return LV_RES_INV;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d101      	bne.n	800bfec <_lv_style_list_get_color+0x24>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e066      	b.n	800c0ba <_lv_style_list_get_color+0xf2>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800bfec:	897b      	ldrh	r3, [r7, #10]
 800bfee:	0a1b      	lsrs	r3, r3, #8
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int16_t weight_goal = attr;
 800bff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bffa:	843b      	strh	r3, [r7, #32]

    int16_t weight = -1;
 800bffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c000:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_color_t value_act;
    value_act.full = 0;
 800c002:	2300      	movs	r3, #0
 800c004:	617b      	str	r3, [r7, #20]

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c006:	2300      	movs	r3, #0
 800c008:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c00a:	e046      	b.n	800c09a <_lv_style_list_get_color+0xd2>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800c00c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	4619      	mov	r1, r3
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f7ff f810 	bl	800b038 <lv_style_list_get_style>
 800c018:	61f8      	str	r0, [r7, #28]
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
 800c01a:	f107 0214 	add.w	r2, r7, #20
 800c01e:	897b      	ldrh	r3, [r7, #10]
 800c020:	4619      	mov	r1, r3
 800c022:	69f8      	ldr	r0, [r7, #28]
 800c024:	f7ff fe3e 	bl	800bca4 <_lv_style_get_color>
 800c028:	4603      	mov	r3, r0
 800c02a:	837b      	strh	r3, [r7, #26]
        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800c02c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c030:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c034:	429a      	cmp	r2, r3
 800c036:	d104      	bne.n	800c042 <_lv_style_list_get_color+0x7a>
            *res = value_act;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	697a      	ldr	r2, [r7, #20]
 800c03c:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800c03e:	2301      	movs	r3, #1
 800c040:	e03b      	b.n	800c0ba <_lv_style_list_get_color+0xf2>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	791b      	ldrb	r3, [r3, #4]
 800c046:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d013      	beq.n	800c078 <_lv_style_list_get_color+0xb0>
 800c050:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c054:	2b00      	cmp	r3, #0
 800c056:	db0f      	blt.n	800c078 <_lv_style_list_get_color+0xb0>
 800c058:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10b      	bne.n	800c078 <_lv_style_list_get_color+0xb0>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	795b      	ldrb	r3, [r3, #5]
 800c064:	f003 0301 	and.w	r3, r3, #1
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d104      	bne.n	800c078 <_lv_style_list_get_color+0xb0>
            *res = value_act;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800c074:	2301      	movs	r3, #1
 800c076:	e020      	b.n	800c0ba <_lv_style_list_get_color+0xf2>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800c078:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c07c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c080:	429a      	cmp	r2, r3
 800c082:	dd04      	ble.n	800c08e <_lv_style_list_get_color+0xc6>
            weight =  weight_act;
 800c084:	8b7b      	ldrh	r3, [r7, #26]
 800c086:	84fb      	strh	r3, [r7, #38]	; 0x26
            *res = value_act;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	601a      	str	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c08e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c092:	b29b      	uxth	r3, r3
 800c094:	3301      	adds	r3, #1
 800c096:	b29b      	uxth	r3, r3
 800c098:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c09a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	7912      	ldrb	r2, [r2, #4]
 800c0a2:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800c0a6:	b2d2      	uxtb	r2, r2
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	dbaf      	blt.n	800c00c <_lv_style_list_get_color+0x44>
        }
    }

    if(weight >= 0)  return LV_RES_OK;
 800c0ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	db01      	blt.n	800c0b8 <_lv_style_list_get_color+0xf0>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e000      	b.n	800c0ba <_lv_style_list_get_color+0xf2>
    else return LV_RES_INV;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3728      	adds	r7, #40	; 0x28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <_lv_style_list_get_opa>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has opacity type
 */
lv_res_t _lv_style_list_get_opa(lv_style_list_t * list, lv_style_property_t prop, lv_opa_t * res)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b088      	sub	sp, #32
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	60f8      	str	r0, [r7, #12]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	607a      	str	r2, [r7, #4]
 800c0ce:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d101      	bne.n	800c0da <_lv_style_list_get_opa+0x18>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	e06a      	b.n	800c1b0 <_lv_style_list_get_opa+0xee>
    if(list->style_list == NULL) return LV_RES_INV;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d101      	bne.n	800c0e6 <_lv_style_list_get_opa+0x24>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e064      	b.n	800c1b0 <_lv_style_list_get_opa+0xee>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800c0e6:	897b      	ldrh	r3, [r7, #10]
 800c0e8:	0a1b      	lsrs	r3, r3, #8
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	76fb      	strb	r3, [r7, #27]
    int16_t weight_goal = attr;
 800c0ee:	7efb      	ldrb	r3, [r7, #27]
 800c0f0:	833b      	strh	r3, [r7, #24]

    int16_t weight = -1;
 800c0f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0f6:	83fb      	strh	r3, [r7, #30]

    lv_opa_t value_act = LV_OPA_TRANSP;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	747b      	strb	r3, [r7, #17]

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	83bb      	strh	r3, [r7, #28]
 800c100:	e046      	b.n	800c190 <_lv_style_list_get_opa+0xce>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800c102:	8bbb      	ldrh	r3, [r7, #28]
 800c104:	b2db      	uxtb	r3, r3
 800c106:	4619      	mov	r1, r3
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f7fe ff95 	bl	800b038 <lv_style_list_get_style>
 800c10e:	6178      	str	r0, [r7, #20]
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
 800c110:	f107 0211 	add.w	r2, r7, #17
 800c114:	897b      	ldrh	r3, [r7, #10]
 800c116:	4619      	mov	r1, r3
 800c118:	6978      	ldr	r0, [r7, #20]
 800c11a:	f7ff fd7f 	bl	800bc1c <_lv_style_get_opa>
 800c11e:	4603      	mov	r3, r0
 800c120:	827b      	strh	r3, [r7, #18]
        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800c122:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c126:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d104      	bne.n	800c138 <_lv_style_list_get_opa+0x76>
            *res = value_act;
 800c12e:	7c7a      	ldrb	r2, [r7, #17]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	701a      	strb	r2, [r3, #0]
            return LV_RES_OK;
 800c134:	2301      	movs	r3, #1
 800c136:	e03b      	b.n	800c1b0 <_lv_style_list_get_opa+0xee>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	791b      	ldrb	r3, [r3, #4]
 800c13c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c140:	b2db      	uxtb	r3, r3
 800c142:	2b00      	cmp	r3, #0
 800c144:	d013      	beq.n	800c16e <_lv_style_list_get_opa+0xac>
 800c146:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	db0f      	blt.n	800c16e <_lv_style_list_get_opa+0xac>
 800c14e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10b      	bne.n	800c16e <_lv_style_list_get_opa+0xac>
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	795b      	ldrb	r3, [r3, #5]
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	d104      	bne.n	800c16e <_lv_style_list_get_opa+0xac>
            *res = value_act;
 800c164:	7c7a      	ldrb	r2, [r7, #17]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	701a      	strb	r2, [r3, #0]
            return LV_RES_OK;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e020      	b.n	800c1b0 <_lv_style_list_get_opa+0xee>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800c16e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c172:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c176:	429a      	cmp	r2, r3
 800c178:	dd04      	ble.n	800c184 <_lv_style_list_get_opa+0xc2>
            weight =  weight_act;
 800c17a:	8a7b      	ldrh	r3, [r7, #18]
 800c17c:	83fb      	strh	r3, [r7, #30]
            *res = value_act;
 800c17e:	7c7a      	ldrb	r2, [r7, #17]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	701a      	strb	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c184:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c188:	b29b      	uxth	r3, r3
 800c18a:	3301      	adds	r3, #1
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	83bb      	strh	r3, [r7, #28]
 800c190:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	7912      	ldrb	r2, [r2, #4]
 800c198:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800c19c:	b2d2      	uxtb	r2, r2
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	dbaf      	blt.n	800c102 <_lv_style_list_get_opa+0x40>
        }
    }

    if(weight >= 0)  return LV_RES_OK;
 800c1a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	db01      	blt.n	800c1ae <_lv_style_list_get_opa+0xec>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e000      	b.n	800c1b0 <_lv_style_list_get_opa+0xee>
    else return LV_RES_INV;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3720      	adds	r7, #32
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <_lv_style_list_get_ptr>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has pointer type
 */
lv_res_t _lv_style_list_get_ptr(lv_style_list_t * list, lv_style_property_t prop, const void ** res)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08a      	sub	sp, #40	; 0x28
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	607a      	str	r2, [r7, #4]
 800c1c4:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <_lv_style_list_get_ptr+0x18>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	e06a      	b.n	800c2a6 <_lv_style_list_get_ptr+0xee>
    if(list->style_list == NULL) return LV_RES_INV;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <_lv_style_list_get_ptr+0x24>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	e064      	b.n	800c2a6 <_lv_style_list_get_ptr+0xee>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800c1dc:	897b      	ldrh	r3, [r7, #10]
 800c1de:	0a1b      	lsrs	r3, r3, #8
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int16_t weight_goal = attr;
 800c1e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1ea:	843b      	strh	r3, [r7, #32]

    int16_t weight = -1;
 800c1ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1f0:	84fb      	strh	r3, [r7, #38]	; 0x26

    const void * value_act;

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c1f6:	e046      	b.n	800c286 <_lv_style_list_get_ptr+0xce>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800c1f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f7fe ff1a 	bl	800b038 <lv_style_list_get_style>
 800c204:	61f8      	str	r0, [r7, #28]
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
 800c206:	f107 0214 	add.w	r2, r7, #20
 800c20a:	897b      	ldrh	r3, [r7, #10]
 800c20c:	4619      	mov	r1, r3
 800c20e:	69f8      	ldr	r0, [r7, #28]
 800c210:	f7ff fd8c 	bl	800bd2c <_lv_style_get_ptr>
 800c214:	4603      	mov	r3, r0
 800c216:	837b      	strh	r3, [r7, #26]
        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800c218:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c21c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c220:	429a      	cmp	r2, r3
 800c222:	d104      	bne.n	800c22e <_lv_style_list_get_ptr+0x76>
            *res = value_act;
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e03b      	b.n	800c2a6 <_lv_style_list_get_ptr+0xee>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	791b      	ldrb	r3, [r3, #4]
 800c232:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c236:	b2db      	uxtb	r3, r3
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d013      	beq.n	800c264 <_lv_style_list_get_ptr+0xac>
 800c23c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c240:	2b00      	cmp	r3, #0
 800c242:	db0f      	blt.n	800c264 <_lv_style_list_get_ptr+0xac>
 800c244:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10b      	bne.n	800c264 <_lv_style_list_get_ptr+0xac>
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	795b      	ldrb	r3, [r3, #5]
 800c250:	f003 0301 	and.w	r3, r3, #1
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b00      	cmp	r3, #0
 800c258:	d104      	bne.n	800c264 <_lv_style_list_get_ptr+0xac>
            *res = value_act;
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800c260:	2301      	movs	r3, #1
 800c262:	e020      	b.n	800c2a6 <_lv_style_list_get_ptr+0xee>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800c264:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c268:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c26c:	429a      	cmp	r2, r3
 800c26e:	dd04      	ble.n	800c27a <_lv_style_list_get_ptr+0xc2>
            weight =  weight_act;
 800c270:	8b7b      	ldrh	r3, [r7, #26]
 800c272:	84fb      	strh	r3, [r7, #38]	; 0x26
            *res = value_act;
 800c274:	697a      	ldr	r2, [r7, #20]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	601a      	str	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c27a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c27e:	b29b      	uxth	r3, r3
 800c280:	3301      	adds	r3, #1
 800c282:	b29b      	uxth	r3, r3
 800c284:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c286:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	7912      	ldrb	r2, [r2, #4]
 800c28e:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800c292:	b2d2      	uxtb	r2, r2
 800c294:	4293      	cmp	r3, r2
 800c296:	dbaf      	blt.n	800c1f8 <_lv_style_list_get_ptr+0x40>
        }
    }

    if(weight >= 0)  return LV_RES_OK;
 800c298:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	db01      	blt.n	800c2a4 <_lv_style_list_get_ptr+0xec>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <_lv_style_list_get_ptr+0xee>
    else return LV_RES_INV;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3728      	adds	r7, #40	; 0x28
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <get_property_index>:
 * @param prop a style property ORed with a state.
 * E.g. `LV_STYLE_TEXT_FONT | (LV_STATE_PRESSED << LV_STYLE_STATE_POS)`
 * @return
 */
LV_ATTRIBUTE_FAST_MEM static inline int32_t get_property_index(const lv_style_t * style, lv_style_property_t prop)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b086      	sub	sp, #24
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_STYLE(style);

    if(style->map == NULL) return -1;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d102      	bne.n	800c2c8 <get_property_index+0x1a>
 800c2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c6:	e04b      	b.n	800c360 <get_property_index+0xb2>

    uint8_t id_to_find = prop & 0xFF;
 800c2c8:	887b      	ldrh	r3, [r7, #2]
 800c2ca:	73fb      	strb	r3, [r7, #15]
    lv_style_attr_t attr;
    attr = (prop >> 8) & 0xFF;
 800c2cc:	887b      	ldrh	r3, [r7, #2]
 800c2ce:	0a1b      	lsrs	r3, r3, #8
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	73bb      	strb	r3, [r7, #14]

    int16_t weight = -1;
 800c2d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2d8:	82fb      	strh	r3, [r7, #22]
    int16_t id_guess = -1;
 800c2da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2de:	82bb      	strh	r3, [r7, #20]

    size_t i = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	613b      	str	r3, [r7, #16]

    uint8_t prop_id;
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800c2e4:	e031      	b.n	800c34a <get_property_index+0x9c>
        if(prop_id == id_to_find) {
 800c2e6:	7b7a      	ldrb	r2, [r7, #13]
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d127      	bne.n	800c33e <get_property_index+0x90>
            lv_style_attr_t attr_i;
            attr_i = get_style_prop_attr(style, i);
 800c2ee:	6939      	ldr	r1, [r7, #16]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f8bd 	bl	800c470 <get_style_prop_attr>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	733b      	strb	r3, [r7, #12]

            /*If the state perfectly matches return this property*/
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 800c2fa:	7b3a      	ldrb	r2, [r7, #12]
 800c2fc:	7bbb      	ldrb	r3, [r7, #14]
 800c2fe:	4053      	eors	r3, r2
 800c300:	b2db      	uxtb	r3, r3
 800c302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <get_property_index+0x60>
                return i;
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	e028      	b.n	800c360 <get_property_index+0xb2>
            }
            /* Be sure the property not specifies other state than the requested.
             * E.g. For HOVER+PRESS, HOVER only is OK, but HOVER+FOCUS not*/
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800c30e:	7b3b      	ldrb	r3, [r7, #12]
 800c310:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c314:	7bbb      	ldrb	r3, [r7, #14]
 800c316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c31a:	43db      	mvns	r3, r3
 800c31c:	4013      	ands	r3, r2
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10d      	bne.n	800c33e <get_property_index+0x90>
                /* Use this property if it describes better the requested state than the current candidate.
                 * E.g. for HOVER+FOCUS+PRESS prefer HOVER+FOCUS over FOCUS*/
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 800c322:	7b3b      	ldrb	r3, [r7, #12]
 800c324:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	dd06      	ble.n	800c33e <get_property_index+0x90>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 800c330:	7b3b      	ldrb	r3, [r7, #12]
 800c332:	b21b      	sxth	r3, r3
 800c334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c338:	82fb      	strh	r3, [r7, #22]
                    id_guess = i;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	82bb      	strh	r3, [r7, #20]
                }
            }
        }

        i = get_next_prop_index(prop_id, i);
 800c33e:	7b7b      	ldrb	r3, [r7, #13]
 800c340:	6939      	ldr	r1, [r7, #16]
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f8cf 	bl	800c4e6 <get_next_prop_index>
 800c348:	6138      	str	r0, [r7, #16]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800c34a:	6939      	ldr	r1, [r7, #16]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f880 	bl	800c452 <get_style_prop_id>
 800c352:	4603      	mov	r3, r0
 800c354:	737b      	strb	r3, [r7, #13]
 800c356:	7b7b      	ldrb	r3, [r7, #13]
 800c358:	2bff      	cmp	r3, #255	; 0xff
 800c35a:	d1c4      	bne.n	800c2e6 <get_property_index+0x38>
    }

    return id_guess;
 800c35c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3718      	adds	r7, #24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	791b      	ldrb	r3, [r3, #4]
 800c374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d009      	beq.n	800c392 <get_alloc_local_style+0x2a>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	791b      	ldrb	r3, [r3, #4]
 800c382:	09db      	lsrs	r3, r3, #7
 800c384:	b2db      	uxtb	r3, r3
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7fe fe55 	bl	800b038 <lv_style_list_get_style>
 800c38e:	4603      	mov	r3, r0
 800c390:	e027      	b.n	800c3e2 <get_alloc_local_style+0x7a>

    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
 800c392:	2004      	movs	r0, #4
 800c394:	f010 f97a 	bl	801c68c <lv_mem_alloc>
 800c398:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(local_style);
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f00f fbea 	bl	801bb74 <lv_debug_check_null>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f083 0301 	eor.w	r3, r3, #1
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d008      	beq.n	800c3be <get_alloc_local_style+0x56>
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f04f 0400 	mov.w	r4, #0
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	4623      	mov	r3, r4
 800c3b6:	480d      	ldr	r0, [pc, #52]	; (800c3ec <get_alloc_local_style+0x84>)
 800c3b8:	f00f fbec 	bl	801bb94 <lv_debug_log_error>
 800c3bc:	e7fe      	b.n	800c3bc <get_alloc_local_style+0x54>
    if(local_style == NULL) {
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d101      	bne.n	800c3c8 <get_alloc_local_style+0x60>
        LV_LOG_WARN("get_local_style: couldn't create local style");
        return NULL;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	e00c      	b.n	800c3e2 <get_alloc_local_style+0x7a>
    }
    lv_style_init(local_style);
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f7fe fe6a 	bl	800b0a2 <lv_style_init>

    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
 800c3ce:	68f9      	ldr	r1, [r7, #12]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7fe ffd9 	bl	800b388 <_lv_style_list_add_style>
    list->has_local = 1;
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	7913      	ldrb	r3, [r2, #4]
 800c3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3de:	7113      	strb	r3, [r2, #4]

    return local_style;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd90      	pop	{r4, r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	0802d0d0 	.word	0x0802d0d0

0800c3f0 <style_resize>:
 * Resizes a style map. Useful entry point for debugging.
 * @param style pointer to the style to be resized.
 * @param size new size
 */
static inline void style_resize(lv_style_t * style, size_t sz)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
    style->map = lv_mem_realloc(style->map, sz);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	4618      	mov	r0, r3
 800c402:	f010 f9e3 	bl	801c7cc <lv_mem_realloc>
 800c406:	4602      	mov	r2, r0
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	601a      	str	r2, [r3, #0]
}
 800c40c:	bf00      	nop
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <get_style_prop>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return property in style->map + idx
 */
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
    lv_style_property_t prop;
    uint8_t * prop_p = (uint8_t *)&prop;
 800c41e:	f107 030a 	add.w	r3, r7, #10
 800c422:	60fb      	str	r3, [r7, #12]
    prop_p[0] = style->map[idx];
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	4413      	add	r3, r2
 800c42c:	781a      	ldrb	r2, [r3, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	701a      	strb	r2, [r3, #0]
    prop_p[1] = style->map[idx + 1];
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	3301      	adds	r3, #1
 800c43a:	441a      	add	r2, r3
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3301      	adds	r3, #1
 800c440:	7812      	ldrb	r2, [r2, #0]
 800c442:	701a      	strb	r2, [r3, #0]
    return prop;
 800c444:	897b      	ldrh	r3, [r7, #10]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3714      	adds	r7, #20
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <get_style_prop_id>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return id of property in style->map + idx
 */
static inline uint8_t get_style_prop_id(const lv_style_t * style, size_t idx)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b082      	sub	sp, #8
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	6039      	str	r1, [r7, #0]
    return get_style_prop(style, idx) & 0xFF;
 800c45c:	6839      	ldr	r1, [r7, #0]
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7ff ffd8 	bl	800c414 <get_style_prop>
 800c464:	4603      	mov	r3, r0
 800c466:	b2db      	uxtb	r3, r3
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <get_style_prop_attr>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline uint8_t get_style_prop_attr(const lv_style_t * style, size_t idx)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f7ff ffc9 	bl	800c414 <get_style_prop>
 800c482:	4603      	mov	r3, r0
 800c484:	0a1b      	lsrs	r3, r3, #8
 800c486:	b29b      	uxth	r3, r3
 800c488:	b2db      	uxtb	r3, r3
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <get_prop_size>:
 * @param prop_id property id.
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
 800c492:	b480      	push	{r7}
 800c494:	b085      	sub	sp, #20
 800c496:	af00      	add	r7, sp, #0
 800c498:	4603      	mov	r3, r0
 800c49a:	71fb      	strb	r3, [r7, #7]
    prop_id &= 0xF;
 800c49c:	79fb      	ldrb	r3, [r7, #7]
 800c49e:	f003 030f 	and.w	r3, r3, #15
 800c4a2:	71fb      	strb	r3, [r7, #7]
    size_t size = sizeof(lv_style_property_t);
 800c4a4:	2302      	movs	r3, #2
 800c4a6:	60fb      	str	r3, [r7, #12]
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	2b08      	cmp	r3, #8
 800c4ac:	d803      	bhi.n	800c4b6 <get_prop_size+0x24>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3302      	adds	r3, #2
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	e010      	b.n	800c4d8 <get_prop_size+0x46>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	2b0b      	cmp	r3, #11
 800c4ba:	d803      	bhi.n	800c4c4 <get_prop_size+0x32>
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3304      	adds	r3, #4
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	e009      	b.n	800c4d8 <get_prop_size+0x46>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 800c4c4:	79fb      	ldrb	r3, [r7, #7]
 800c4c6:	2b0d      	cmp	r3, #13
 800c4c8:	d803      	bhi.n	800c4d2 <get_prop_size+0x40>
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	60fb      	str	r3, [r7, #12]
 800c4d0:	e002      	b.n	800c4d8 <get_prop_size+0x46>
    else size += sizeof(const void *);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	60fb      	str	r3, [r7, #12]
    return size;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <get_next_prop_index>:
 * @param prop_id property id.
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	6039      	str	r1, [r7, #0]
 800c4f0:	71fb      	strb	r3, [r7, #7]
    return idx + get_prop_size(prop_id);
 800c4f2:	79fb      	ldrb	r3, [r7, #7]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7ff ffcc 	bl	800c492 <get_prop_size>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	4413      	add	r3, r2
}
 800c500:	4618      	mov	r0, r3
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800c508:	b480      	push	{r7}
 800c50a:	b087      	sub	sp, #28
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	4613      	mov	r3, r2
 800c514:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	461a      	mov	r2, r3
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	fb03 f202 	mul.w	r2, r3, r2
 800c520:	7abb      	ldrb	r3, [r7, #10]
 800c522:	4619      	mov	r1, r3
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c52a:	fb03 f301 	mul.w	r3, r3, r1
 800c52e:	4413      	add	r3, r2
 800c530:	461a      	mov	r2, r3
 800c532:	4613      	mov	r3, r2
 800c534:	021b      	lsls	r3, r3, #8
 800c536:	4413      	add	r3, r2
 800c538:	01db      	lsls	r3, r3, #7
 800c53a:	4413      	add	r3, r2
 800c53c:	0ddb      	lsrs	r3, r3, #23
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c542:	7b7b      	ldrb	r3, [r7, #13]
 800c544:	461a      	mov	r2, r3
 800c546:	79fb      	ldrb	r3, [r7, #7]
 800c548:	fb03 f202 	mul.w	r2, r3, r2
 800c54c:	7a7b      	ldrb	r3, [r7, #9]
 800c54e:	4619      	mov	r1, r3
 800c550:	79fb      	ldrb	r3, [r7, #7]
 800c552:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c556:	fb03 f301 	mul.w	r3, r3, r1
 800c55a:	4413      	add	r3, r2
 800c55c:	461a      	mov	r2, r3
 800c55e:	4613      	mov	r3, r2
 800c560:	021b      	lsls	r3, r3, #8
 800c562:	4413      	add	r3, r2
 800c564:	01db      	lsls	r3, r3, #7
 800c566:	4413      	add	r3, r2
 800c568:	0ddb      	lsrs	r3, r3, #23
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c56e:	7b3b      	ldrb	r3, [r7, #12]
 800c570:	461a      	mov	r2, r3
 800c572:	79fb      	ldrb	r3, [r7, #7]
 800c574:	fb03 f202 	mul.w	r2, r3, r2
 800c578:	7a3b      	ldrb	r3, [r7, #8]
 800c57a:	4619      	mov	r1, r3
 800c57c:	79fb      	ldrb	r3, [r7, #7]
 800c57e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c582:	fb03 f301 	mul.w	r3, r3, r1
 800c586:	4413      	add	r3, r2
 800c588:	461a      	mov	r2, r3
 800c58a:	4613      	mov	r3, r2
 800c58c:	021b      	lsls	r3, r3, #8
 800c58e:	4413      	add	r3, r2
 800c590:	01db      	lsls	r3, r3, #7
 800c592:	4413      	add	r3, r2
 800c594:	0ddb      	lsrs	r3, r3, #23
 800c596:	b2db      	uxtb	r3, r3
 800c598:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 800c59a:	23ff      	movs	r3, #255	; 0xff
 800c59c:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800c59e:	697b      	ldr	r3, [r7, #20]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	371c      	adds	r7, #28
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <lv_color_premult>:

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	72fb      	strb	r3, [r7, #11]
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800c5ba:	7bbb      	ldrb	r3, [r7, #14]
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	7afb      	ldrb	r3, [r7, #11]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	fb12 f303 	smulbb	r3, r2, r3
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	801a      	strh	r2, [r3, #0]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800c5cc:	7b7b      	ldrb	r3, [r7, #13]
 800c5ce:	b299      	uxth	r1, r3
 800c5d0:	7afb      	ldrb	r3, [r7, #11]
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3302      	adds	r3, #2
 800c5d8:	fb11 f202 	smulbb	r2, r1, r2
 800c5dc:	b292      	uxth	r2, r2
 800c5de:	801a      	strh	r2, [r3, #0]
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800c5e0:	7b3b      	ldrb	r3, [r7, #12]
 800c5e2:	b299      	uxth	r1, r3
 800c5e4:	7afb      	ldrb	r3, [r7, #11]
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	fb11 f202 	smulbb	r2, r1, r2
 800c5f0:	b292      	uxth	r2, r2
 800c5f2:	801a      	strh	r2, [r3, #0]
    out[0] = LV_COLOR_GET_R(c);
    out[1] = LV_COLOR_GET_G(c);
    out[2] = LV_COLOR_GET_B(c);
#endif

}
 800c5f4:	bf00      	nop
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <lv_color_mix_premult>:
 *            Should be modified like mix = `255 - mix`
 * @return the mixed color
 * @note 255 won't give clearly `c1`.
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
 800c600:	b480      	push	{r7}
 800c602:	b087      	sub	sp, #28
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	4613      	mov	r3, r2
 800c60c:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	461a      	mov	r2, r3
 800c614:	7abb      	ldrb	r3, [r7, #10]
 800c616:	4619      	mov	r1, r3
 800c618:	79fb      	ldrb	r3, [r7, #7]
 800c61a:	fb03 f301 	mul.w	r3, r3, r1
 800c61e:	4413      	add	r3, r2
 800c620:	461a      	mov	r2, r3
 800c622:	4613      	mov	r3, r2
 800c624:	021b      	lsls	r3, r3, #8
 800c626:	4413      	add	r3, r2
 800c628:	01db      	lsls	r3, r3, #7
 800c62a:	4413      	add	r3, r2
 800c62c:	0ddb      	lsrs	r3, r3, #23
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3302      	adds	r3, #2
 800c636:	881b      	ldrh	r3, [r3, #0]
 800c638:	461a      	mov	r2, r3
 800c63a:	7a7b      	ldrb	r3, [r7, #9]
 800c63c:	4619      	mov	r1, r3
 800c63e:	79fb      	ldrb	r3, [r7, #7]
 800c640:	fb03 f301 	mul.w	r3, r3, r1
 800c644:	4413      	add	r3, r2
 800c646:	461a      	mov	r2, r3
 800c648:	4613      	mov	r3, r2
 800c64a:	021b      	lsls	r3, r3, #8
 800c64c:	4413      	add	r3, r2
 800c64e:	01db      	lsls	r3, r3, #7
 800c650:	4413      	add	r3, r2
 800c652:	0ddb      	lsrs	r3, r3, #23
 800c654:	b2db      	uxtb	r3, r3
 800c656:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	3304      	adds	r3, #4
 800c65c:	881b      	ldrh	r3, [r3, #0]
 800c65e:	461a      	mov	r2, r3
 800c660:	7a3b      	ldrb	r3, [r7, #8]
 800c662:	4619      	mov	r1, r3
 800c664:	79fb      	ldrb	r3, [r7, #7]
 800c666:	fb03 f301 	mul.w	r3, r3, r1
 800c66a:	4413      	add	r3, r2
 800c66c:	461a      	mov	r2, r3
 800c66e:	4613      	mov	r3, r2
 800c670:	021b      	lsls	r3, r3, #8
 800c672:	4413      	add	r3, r2
 800c674:	01db      	lsls	r3, r3, #7
 800c676:	4413      	add	r3, r2
 800c678:	0ddb      	lsrs	r3, r3, #23
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 800c67e:	23ff      	movs	r3, #255	; 0xff
 800c680:	75fb      	strb	r3, [r7, #23]
    LV_COLOR_SET_G(c1, premult_c1[1]);
    LV_COLOR_SET_B(c1, premult_c1[2]);
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
#endif

    return ret;
 800c682:	697b      	ldr	r3, [r7, #20]
}
 800c684:	4618      	mov	r0, r3
 800c686:	371c      	adds	r7, #28
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	b21b      	sxth	r3, r3
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b083      	sub	sp, #12
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	3301      	adds	r3, #1
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	b21b      	sxth	r3, r3
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <_lv_blend_fill>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,
                                          lv_color_t color, lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_opa_t opa,
                                          lv_blend_mode_t mode)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b092      	sub	sp, #72	; 0x48
 800c6f0:	af04      	add	r7, sp, #16
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
 800c6f8:	603b      	str	r3, [r7, #0]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
 800c6fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	f240 80bd 	bls.w	800c87e <_lv_blend_fill+0x192>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c704:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 80ba 	beq.w	800c882 <_lv_blend_fill+0x196>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c70e:	f7fd fe0f 	bl	800a330 <_lv_refr_get_disp_refreshing>
 800c712:	6338      	str	r0, [r7, #48]	; 0x30
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c716:	f00d fefb 	bl	801a510 <lv_disp_get_buf>
 800c71a:	62f8      	str	r0, [r7, #44]	; 0x2c
    const lv_area_t * disp_area = &vdb->area;
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	3310      	adds	r3, #16
 800c720:	62bb      	str	r3, [r7, #40]	; 0x28
    lv_color_t * disp_buf = vdb->buf_act;
 800c722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	627b      	str	r3, [r7, #36]	; 0x24

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800c728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d004      	beq.n	800c73a <_lv_blend_fill+0x4e>
 800c730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c736:	4610      	mov	r0, r2
 800c738:	4798      	blx	r3

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 800c73a:	f107 0314 	add.w	r3, r7, #20
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	68f9      	ldr	r1, [r7, #12]
 800c742:	4618      	mov	r0, r3
 800c744:	f00e fbbc 	bl	801aec0 <_lv_area_intersect>
 800c748:	4603      	mov	r3, r0
 800c74a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(!is_common) return;
 800c74e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c752:	f083 0301 	eor.w	r3, r3, #1
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f040 8094 	bne.w	800c886 <_lv_blend_fill+0x19a>

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800c75e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c762:	b29a      	uxth	r2, r3
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	b29b      	uxth	r3, r3
 800c770:	b21b      	sxth	r3, r3
 800c772:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 -= disp_area->y1;
 800c774:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c778:	b29a      	uxth	r2, r3
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c780:	b29b      	uxth	r3, r3
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	b29b      	uxth	r3, r3
 800c786:	b21b      	sxth	r3, r3
 800c788:	82fb      	strh	r3, [r7, #22]
    draw_area.x2 -= disp_area->x1;
 800c78a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c78e:	b29a      	uxth	r2, r3
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c796:	b29b      	uxth	r3, r3
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	b21b      	sxth	r3, r3
 800c79e:	833b      	strh	r3, [r7, #24]
    draw_area.y2 -= disp_area->y1;
 800c7a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	b21b      	sxth	r3, r3
 800c7b4:	837b      	strh	r3, [r7, #26]

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d025      	beq.n	800c808 <_lv_blend_fill+0x11c>
 800c7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7be:	7a1b      	ldrb	r3, [r3, #8]
 800c7c0:	f003 0301 	and.w	r3, r3, #1
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d11e      	bne.n	800c808 <_lv_blend_fill+0x11c>
#else
    if(mask)
#endif
    {
        int32_t mask_w = lv_area_get_width(&draw_area);
 800c7ca:	f107 0314 	add.w	r3, r7, #20
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7ff ff5e 	bl	800c690 <lv_area_get_width>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	61fb      	str	r3, [r7, #28]
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	637b      	str	r3, [r7, #52]	; 0x34
 800c7dc:	e010      	b.n	800c800 <_lv_blend_fill+0x114>
 800c7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b80      	cmp	r3, #128	; 0x80
 800c7e8:	d901      	bls.n	800c7ee <_lv_blend_fill+0x102>
 800c7ea:	21ff      	movs	r1, #255	; 0xff
 800c7ec:	e000      	b.n	800c7f0 <_lv_blend_fill+0x104>
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	460a      	mov	r2, r1
 800c7f8:	701a      	strb	r2, [r3, #0]
 800c7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	637b      	str	r3, [r7, #52]	; 0x34
 800c800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	429a      	cmp	r2, r3
 800c806:	dbea      	blt.n	800c7de <_lv_blend_fill+0xf2>
    }

    if(disp->driver.set_px_cb) {
 800c808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00f      	beq.n	800c830 <_lv_blend_fill+0x144>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
 800c810:	f107 0214 	add.w	r2, r7, #20
 800c814:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c818:	9302      	str	r3, [sp, #8]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	9301      	str	r3, [sp, #4]
 800c81e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c82a:	f000 f907 	bl	800ca3c <fill_set_px>
 800c82e:	e02b      	b.n	800c888 <_lv_blend_fill+0x19c>
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
 800c830:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10f      	bne.n	800c858 <_lv_blend_fill+0x16c>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
 800c838:	f107 0214 	add.w	r2, r7, #20
 800c83c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c840:	9302      	str	r3, [sp, #8]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	9301      	str	r3, [sp, #4]
 800c846:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c852:	f000 f98d 	bl	800cb70 <fill_normal>
 800c856:	e017      	b.n	800c888 <_lv_blend_fill+0x19c>
    }
#if LV_USE_BLEND_MODES
    else {
        fill_blended(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res, mode);
 800c858:	f107 0214 	add.w	r2, r7, #20
 800c85c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c860:	9303      	str	r3, [sp, #12]
 800c862:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c866:	9302      	str	r3, [sp, #8]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	9301      	str	r3, [sp, #4]
 800c86c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c878:	f000 fc3c 	bl	800d0f4 <fill_blended>
 800c87c:	e004      	b.n	800c888 <_lv_blend_fill+0x19c>
    if(opa < LV_OPA_MIN) return;
 800c87e:	bf00      	nop
 800c880:	e002      	b.n	800c888 <_lv_blend_fill+0x19c>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c882:	bf00      	nop
 800c884:	e000      	b.n	800c888 <_lv_blend_fill+0x19c>
    if(!is_common) return;
 800c886:	bf00      	nop
    }
#endif
}
 800c888:	3738      	adds	r7, #56	; 0x38
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <_lv_blend_map>:
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_map(const lv_area_t * clip_area, const lv_area_t * map_area,
                                         const lv_color_t * map_buf,
                                         lv_opa_t * mask, lv_draw_mask_res_t mask_res,
                                         lv_opa_t opa, lv_blend_mode_t mode)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b094      	sub	sp, #80	; 0x50
 800c892:	af06      	add	r7, sp, #24
 800c894:	60f8      	str	r0, [r7, #12]
 800c896:	60b9      	str	r1, [r7, #8]
 800c898:	607a      	str	r2, [r7, #4]
 800c89a:	603b      	str	r3, [r7, #0]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
 800c89c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	f240 80c3 	bls.w	800ca2c <_lv_blend_map+0x19e>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c8a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f000 80c0 	beq.w	800ca30 <_lv_blend_map+0x1a2>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 800c8b0:	f107 0314 	add.w	r3, r7, #20
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	68f9      	ldr	r1, [r7, #12]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f00e fb01 	bl	801aec0 <_lv_area_intersect>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(!is_common) return;
 800c8c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c8c8:	f083 0301 	eor.w	r3, r3, #1
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f040 80b0 	bne.w	800ca34 <_lv_blend_map+0x1a6>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c8d4:	f7fd fd2c 	bl	800a330 <_lv_refr_get_disp_refreshing>
 800c8d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c8da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8dc:	f00d fe18 	bl	801a510 <lv_disp_get_buf>
 800c8e0:	62b8      	str	r0, [r7, #40]	; 0x28
    const lv_area_t * disp_area = &vdb->area;
 800c8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e4:	3310      	adds	r3, #16
 800c8e6:	627b      	str	r3, [r7, #36]	; 0x24
    lv_color_t * disp_buf = vdb->buf_act;
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	623b      	str	r3, [r7, #32]

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d004      	beq.n	800c900 <_lv_blend_map+0x72>
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4798      	blx	r3

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800c900:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c904:	b29a      	uxth	r2, r3
 800c906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	1ad3      	subs	r3, r2, r3
 800c910:	b29b      	uxth	r3, r3
 800c912:	b21b      	sxth	r3, r3
 800c914:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 -= disp_area->y1;
 800c916:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c922:	b29b      	uxth	r3, r3
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	b29b      	uxth	r3, r3
 800c928:	b21b      	sxth	r3, r3
 800c92a:	82fb      	strh	r3, [r7, #22]
    draw_area.x2 -= disp_area->x1;
 800c92c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c930:	b29a      	uxth	r2, r3
 800c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c934:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	1ad3      	subs	r3, r2, r3
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	b21b      	sxth	r3, r3
 800c940:	833b      	strh	r3, [r7, #24]
    draw_area.y2 -= disp_area->y1;
 800c942:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c946:	b29a      	uxth	r2, r3
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c94e:	b29b      	uxth	r3, r3
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	b29b      	uxth	r3, r3
 800c954:	b21b      	sxth	r3, r3
 800c956:	837b      	strh	r3, [r7, #26]

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d025      	beq.n	800c9aa <_lv_blend_map+0x11c>
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	7a1b      	ldrb	r3, [r3, #8]
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d11e      	bne.n	800c9aa <_lv_blend_map+0x11c>
#else
    if(mask)
#endif
    {
        int32_t mask_w = lv_area_get_width(&draw_area);
 800c96c:	f107 0314 	add.w	r3, r7, #20
 800c970:	4618      	mov	r0, r3
 800c972:	f7ff fe8d 	bl	800c690 <lv_area_get_width>
 800c976:	4603      	mov	r3, r0
 800c978:	61fb      	str	r3, [r7, #28]
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800c97a:	2300      	movs	r3, #0
 800c97c:	637b      	str	r3, [r7, #52]	; 0x34
 800c97e:	e010      	b.n	800c9a2 <_lv_blend_map+0x114>
 800c980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	4413      	add	r3, r2
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b80      	cmp	r3, #128	; 0x80
 800c98a:	d901      	bls.n	800c990 <_lv_blend_map+0x102>
 800c98c:	21ff      	movs	r1, #255	; 0xff
 800c98e:	e000      	b.n	800c992 <_lv_blend_map+0x104>
 800c990:	2100      	movs	r1, #0
 800c992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c994:	683a      	ldr	r2, [r7, #0]
 800c996:	4413      	add	r3, r2
 800c998:	460a      	mov	r2, r1
 800c99a:	701a      	strb	r2, [r3, #0]
 800c99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c99e:	3301      	adds	r3, #1
 800c9a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c9a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	dbea      	blt.n	800c980 <_lv_blend_map+0xf2>
    }
    if(disp->driver.set_px_cb) {
 800c9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ac:	695b      	ldr	r3, [r3, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d011      	beq.n	800c9d6 <_lv_blend_map+0x148>
        map_set_px(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
 800c9b2:	f107 0214 	add.w	r2, r7, #20
 800c9b6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9ba:	9303      	str	r3, [sp, #12]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	9302      	str	r3, [sp, #8]
 800c9c0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	6a39      	ldr	r1, [r7, #32]
 800c9ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9d0:	f000 fca0 	bl	800d314 <map_set_px>
 800c9d4:	e02f      	b.n	800ca36 <_lv_blend_map+0x1a8>
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
 800c9d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d111      	bne.n	800ca02 <_lv_blend_map+0x174>
        map_normal(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
 800c9de:	f107 0214 	add.w	r2, r7, #20
 800c9e2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9e6:	9303      	str	r3, [sp, #12]
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	9302      	str	r3, [sp, #8]
 800c9ec:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	6a39      	ldr	r1, [r7, #32]
 800c9fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9fc:	f000 fd69 	bl	800d4d2 <map_normal>
 800ca00:	e019      	b.n	800ca36 <_lv_blend_map+0x1a8>
    }
#if LV_USE_BLEND_MODES
    else {
        map_blended(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res, mode);
 800ca02:	f107 0214 	add.w	r2, r7, #20
 800ca06:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ca0a:	9304      	str	r3, [sp, #16]
 800ca0c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca10:	9303      	str	r3, [sp, #12]
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	9302      	str	r3, [sp, #8]
 800ca16:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ca1a:	9301      	str	r3, [sp, #4]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	6a39      	ldr	r1, [r7, #32]
 800ca24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca26:	f001 f817 	bl	800da58 <map_blended>
 800ca2a:	e004      	b.n	800ca36 <_lv_blend_map+0x1a8>
    if(opa < LV_OPA_MIN) return;
 800ca2c:	bf00      	nop
 800ca2e:	e002      	b.n	800ca36 <_lv_blend_map+0x1a8>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800ca30:	bf00      	nop
 800ca32:	e000      	b.n	800ca36 <_lv_blend_map+0x1a8>
    if(!is_common) return;
 800ca34:	bf00      	nop
    }
#endif
}
 800ca36:	3738      	adds	r7, #56	; 0x38
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <fill_set_px>:
 **********************/

static void fill_set_px(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        lv_color_t color, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res)
{
 800ca3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca3e:	b08f      	sub	sp, #60	; 0x3c
 800ca40:	af04      	add	r7, sp, #16
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
 800ca48:	603b      	str	r3, [r7, #0]

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800ca4a:	f7fd fc71 	bl	800a330 <_lv_refr_get_disp_refreshing>
 800ca4e:	61b8      	str	r0, [r7, #24]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f7ff fe1d 	bl	800c690 <lv_area_get_width>
 800ca56:	4603      	mov	r3, r0
 800ca58:	617b      	str	r3, [r7, #20]

    int32_t x;
    int32_t y;

    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800ca5a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d131      	bne.n	800cac6 <fill_set_px+0x8a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ca68:	623b      	str	r3, [r7, #32]
 800ca6a:	e024      	b.n	800cab6 <fill_set_px+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca72:	627b      	str	r3, [r7, #36]	; 0x24
 800ca74:	e015      	b.n	800caa2 <fill_set_px+0x66>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	695c      	ldr	r4, [r3, #20]
 800ca7a:	69b8      	ldr	r0, [r7, #24]
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	b219      	sxth	r1, r3
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	b21d      	sxth	r5, r3
 800ca84:	6a3b      	ldr	r3, [r7, #32]
 800ca86:	b21b      	sxth	r3, r3
 800ca88:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800ca8c:	9202      	str	r2, [sp, #8]
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	9201      	str	r2, [sp, #4]
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	462b      	mov	r3, r5
 800ca96:	460a      	mov	r2, r1
 800ca98:	68b9      	ldr	r1, [r7, #8]
 800ca9a:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9e:	3301      	adds	r3, #1
 800caa0:	627b      	str	r3, [r7, #36]	; 0x24
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800caa8:	461a      	mov	r2, r3
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	4293      	cmp	r3, r2
 800caae:	dde2      	ble.n	800ca76 <fill_set_px+0x3a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	3301      	adds	r3, #1
 800cab4:	623b      	str	r3, [r7, #32]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cabc:	461a      	mov	r2, r3
 800cabe:	6a3b      	ldr	r3, [r7, #32]
 800cac0:	4293      	cmp	r3, r2
 800cac2:	ddd3      	ble.n	800ca6c <fill_set_px+0x30>
                }
            }
            mask_tmp += draw_area_w;
        }
    }
}
 800cac4:	e050      	b.n	800cb68 <fill_set_px+0x12c>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cacc:	425b      	negs	r3, r3
 800cace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cad0:	4413      	add	r3, r2
 800cad2:	61fb      	str	r3, [r7, #28]
        int32_t draw_area_w = lv_area_get_width(draw_area);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f7ff fddb 	bl	800c690 <lv_area_get_width>
 800cada:	4603      	mov	r3, r0
 800cadc:	613b      	str	r3, [r7, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cae4:	623b      	str	r3, [r7, #32]
 800cae6:	e038      	b.n	800cb5a <fill_set_px+0x11e>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800caee:	627b      	str	r3, [r7, #36]	; 0x24
 800caf0:	e025      	b.n	800cb3e <fill_set_px+0x102>
                if(mask_tmp[x]) {
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	69fa      	ldr	r2, [r7, #28]
 800caf6:	4413      	add	r3, r2
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d01c      	beq.n	800cb38 <fill_set_px+0xfc>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	695c      	ldr	r4, [r3, #20]
 800cb02:	69bd      	ldr	r5, [r7, #24]
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	b21e      	sxth	r6, r3
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	fa0f fc83 	sxth.w	ip, r3
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	b21b      	sxth	r3, r3
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800cb12:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800cb16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb18:	69f8      	ldr	r0, [r7, #28]
 800cb1a:	4401      	add	r1, r0
 800cb1c:	7809      	ldrb	r1, [r1, #0]
 800cb1e:	fb01 f202 	mul.w	r2, r1, r2
 800cb22:	0a12      	lsrs	r2, r2, #8
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800cb24:	b2d2      	uxtb	r2, r2
 800cb26:	9202      	str	r2, [sp, #8]
 800cb28:	683a      	ldr	r2, [r7, #0]
 800cb2a:	9201      	str	r2, [sp, #4]
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	4663      	mov	r3, ip
 800cb30:	4632      	mov	r2, r6
 800cb32:	68b9      	ldr	r1, [r7, #8]
 800cb34:	4628      	mov	r0, r5
 800cb36:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb44:	461a      	mov	r2, r3
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	ddd2      	ble.n	800caf2 <fill_set_px+0xb6>
            mask_tmp += draw_area_w;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	69fa      	ldr	r2, [r7, #28]
 800cb50:	4413      	add	r3, r2
 800cb52:	61fb      	str	r3, [r7, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	3301      	adds	r3, #1
 800cb58:	623b      	str	r3, [r7, #32]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cb60:	461a      	mov	r2, r3
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	4293      	cmp	r3, r2
 800cb66:	ddbf      	ble.n	800cae8 <fill_set_px+0xac>
}
 800cb68:	bf00      	nop
 800cb6a:	372c      	adds	r7, #44	; 0x2c
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb70 <fill_normal>:
 */
LV_ATTRIBUTE_FAST_MEM static void fill_normal(const lv_area_t * disp_area, lv_color_t * disp_buf,
                                              const lv_area_t * draw_area,
                                              lv_color_t color, lv_opa_t opa,
                                              const lv_opa_t * mask, lv_draw_mask_res_t mask_res)
{
 800cb70:	b590      	push	{r4, r7, lr}
 800cb72:	b09b      	sub	sp, #108	; 0x6c
 800cb74:	af02      	add	r7, sp, #8
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
 800cb7c:	603b      	str	r3, [r7, #0]

#if LV_USE_GPU || LV_COLOR_SCREEN_TRANSP
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800cb7e:	f7fd fbd7 	bl	800a330 <_lv_refr_get_disp_refreshing>
 800cb82:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f7ff fd83 	bl	800c690 <lv_area_get_width>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	63bb      	str	r3, [r7, #56]	; 0x38

    int32_t draw_area_w = lv_area_get_width(draw_area);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7ff fd7e 	bl	800c690 <lv_area_get_width>
 800cb94:	4603      	mov	r3, r0
 800cb96:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7ff fd90 	bl	800c6be <lv_area_get_height>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	633b      	str	r3, [r7, #48]	; 0x30

    /*Create a temp. disp_buf which always point to the first pixel of the destination area*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cba8:	461a      	mov	r2, r3
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbac:	fb03 f302 	mul.w	r3, r3, r2
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbb8:	4413      	add	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	65fb      	str	r3, [r7, #92]	; 0x5c

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800cbc2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	f040 80c5 	bne.w	800cd56 <fill_normal+0x1e6>
        if(opa > LV_OPA_MAX) {
 800cbcc:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800cbd0:	2bfd      	cmp	r3, #253	; 0xfd
 800cbd2:	d92a      	bls.n	800cc2a <fill_normal+0xba>
            if(lv_area_get_size(draw_area) >= 240) {
                lv_gpu_stm32_dma2d_fill(disp_buf_first, disp_w, color, draw_area_w, draw_area_h);
                return;
            }
#elif LV_USE_GPU
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 800cbd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d010      	beq.n	800cbfe <fill_normal+0x8e>
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f00e f94e 	bl	801ae7e <lv_area_get_size>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2bf0      	cmp	r3, #240	; 0xf0
 800cbe6:	d90a      	bls.n	800cbfe <fill_normal+0x8e>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
 800cbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800cbec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	b21a      	sxth	r2, r3
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68b9      	ldr	r1, [r7, #8]
 800cbfa:	47a0      	blx	r4
                return;
 800cbfc:	e277      	b.n	800d0ee <fill_normal+0x57e>
            }
#endif
            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
 800cbfe:	2300      	movs	r3, #0
 800cc00:	657b      	str	r3, [r7, #84]	; 0x54
 800cc02:	e00d      	b.n	800cc20 <fill_normal+0xb0>
                lv_color_fill(disp_buf_first, color, draw_area_w);
 800cc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc06:	461a      	mov	r2, r3
 800cc08:	6839      	ldr	r1, [r7, #0]
 800cc0a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cc0c:	f00e ff02 	bl	801ba14 <lv_color_fill>
                disp_buf_first += disp_w;
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc16:	4413      	add	r3, r2
 800cc18:	65fb      	str	r3, [r7, #92]	; 0x5c
            for(y = 0; y < draw_area_h; y++) {
 800cc1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	657b      	str	r3, [r7, #84]	; 0x54
 800cc20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc24:	429a      	cmp	r2, r3
 800cc26:	dbed      	blt.n	800cc04 <fill_normal+0x94>
 800cc28:	e261      	b.n	800d0ee <fill_normal+0x57e>
                    return;
                }
                /* Fall down to SW render in case of error */
            }
#elif LV_USE_GPU
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 800cc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d034      	beq.n	800cc9c <fill_normal+0x12c>
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f00e f923 	bl	801ae7e <lv_area_get_size>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2bf0      	cmp	r3, #240	; 0xf0
 800cc3c:	d92e      	bls.n	800cc9c <fill_normal+0x12c>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc42:	e007      	b.n	800cc54 <fill_normal+0xe4>
 800cc44:	683a      	ldr	r2, [r7, #0]
 800cc46:	4997      	ldr	r1, [pc, #604]	; (800cea4 <fill_normal+0x334>)
 800cc48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cc4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc50:	3301      	adds	r3, #1
 800cc52:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	dbf3      	blt.n	800cc44 <fill_normal+0xd4>

                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc62:	657b      	str	r3, [r7, #84]	; 0x54
 800cc64:	e012      	b.n	800cc8c <fill_normal+0x11c>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
 800cc66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc68:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800cc6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cc6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc6e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	4613      	mov	r3, r2
 800cc76:	4a8b      	ldr	r2, [pc, #556]	; (800cea4 <fill_normal+0x334>)
 800cc78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cc7a:	47a0      	blx	r4
                    disp_buf_first += disp_w;
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc82:	4413      	add	r3, r2
 800cc84:	65fb      	str	r3, [r7, #92]	; 0x5c
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cc86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc88:	3301      	adds	r3, #1
 800cc8a:	657b      	str	r3, [r7, #84]	; 0x54
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc92:	461a      	mov	r2, r3
 800cc94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc96:	4293      	cmp	r3, r2
 800cc98:	dde5      	ble.n	800cc66 <fill_normal+0xf6>
                }
                return;
 800cc9a:	e228      	b.n	800d0ee <fill_normal+0x57e>
                }

                return;
            }
#endif
            lv_color_t last_dest_color = LV_COLOR_BLACK;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800cca2:	2300      	movs	r3, #0
 800cca4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ccae:	23ff      	movs	r3, #255	; 0xff
 800ccb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800ccb4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800ccb8:	461a      	mov	r2, r3
 800ccba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccbc:	6838      	ldr	r0, [r7, #0]
 800ccbe:	f7ff fc23 	bl	800c508 <lv_color_mix>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	623b      	str	r3, [r7, #32]

            uint16_t color_premult[3];
            lv_color_premult(color, opa, color_premult);
 800ccc6:	f107 0218 	add.w	r2, r7, #24
 800ccca:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800ccce:	4619      	mov	r1, r3
 800ccd0:	6838      	ldr	r0, [r7, #0]
 800ccd2:	f7ff fc6b 	bl	800c5ac <lv_color_premult>
            lv_opa_t opa_inv = 255 - opa;
 800ccd6:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800ccda:	43db      	mvns	r3, r3
 800ccdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            for(y = 0; y < draw_area_h; y++) {
 800cce0:	2300      	movs	r3, #0
 800cce2:	657b      	str	r3, [r7, #84]	; 0x54
 800cce4:	e032      	b.n	800cd4c <fill_normal+0x1dc>
                for(x = 0; x < draw_area_w; x++) {
 800cce6:	2300      	movs	r3, #0
 800cce8:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccea:	e023      	b.n	800cd34 <fill_normal+0x1c4>
                    if(last_dest_color.full != disp_buf_first[x].full) {
 800ccec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ccf4:	440b      	add	r3, r1
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d012      	beq.n	800cd22 <fill_normal+0x1b2>
                        last_dest_color = disp_buf_first[x];
 800ccfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd02:	4413      	add	r3, r2
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	627b      	str	r3, [r7, #36]	; 0x24
                                                    &last_res_color.ch.alpha);
                        }
                        else
#endif
                        {
                            last_res_color = lv_color_mix_premult(color_premult, disp_buf_first[x], opa_inv);
 800cd08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd0e:	4413      	add	r3, r2
 800cd10:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800cd14:	f107 0018 	add.w	r0, r7, #24
 800cd18:	6819      	ldr	r1, [r3, #0]
 800cd1a:	f7ff fc71 	bl	800c600 <lv_color_mix_premult>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	623b      	str	r3, [r7, #32]
                        }
                    }
                    disp_buf_first[x] = last_res_color;
 800cd22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd28:	4413      	add	r3, r2
 800cd2a:	6a3a      	ldr	r2, [r7, #32]
 800cd2c:	601a      	str	r2, [r3, #0]
                for(x = 0; x < draw_area_w; x++) {
 800cd2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd30:	3301      	adds	r3, #1
 800cd32:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	dbd7      	blt.n	800ccec <fill_normal+0x17c>
                }
                disp_buf_first += disp_w;
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd42:	4413      	add	r3, r2
 800cd44:	65fb      	str	r3, [r7, #92]	; 0x5c
            for(y = 0; y < draw_area_h; y++) {
 800cd46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd48:	3301      	adds	r3, #1
 800cd4a:	657b      	str	r3, [r7, #84]	; 0x54
 800cd4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd50:	429a      	cmp	r2, r3
 800cd52:	dbc8      	blt.n	800cce6 <fill_normal+0x176>
 800cd54:	e1cb      	b.n	800d0ee <fill_normal+0x57e>
#endif

        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800cd56:	2300      	movs	r3, #0
 800cd58:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        last_dest_color.full = disp_buf_first[0].full;
 800cd5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	617b      	str	r3, [r7, #20]
        last_res_color.full = disp_buf_first[0].full;
 800cd62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	613b      	str	r3, [r7, #16]

        int32_t x_end4 = draw_area_w - 4;
 800cd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6a:	3b04      	subs	r3, #4
 800cd6c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 800cd6e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800cd72:	2bfd      	cmp	r3, #253	; 0xfd
 800cd74:	f240 8144 	bls.w	800d000 <fill_normal+0x490>
            for(y = 0; y < draw_area_h; y++) {
 800cd78:	2300      	movs	r3, #0
 800cd7a:	657b      	str	r3, [r7, #84]	; 0x54
 800cd7c:	e13a      	b.n	800cff4 <fill_normal+0x484>
                const lv_opa_t * mask_tmp_x = mask;
 800cd7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd80:	64fb      	str	r3, [r7, #76]	; 0x4c
#else
                    FILL_NORMAL_MASK_PX(x, color)
#endif
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800cd82:	2300      	movs	r3, #0
 800cd84:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd86:	e025      	b.n	800cdd4 <fill_normal+0x264>
#if LV_COLOR_SCREEN_TRANSP
                    FILL_NORMAL_MASK_PX_SCR_TRANSP(x, color)
#else
                    FILL_NORMAL_MASK_PX(x, color)
 800cd88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d01b      	beq.n	800cdc8 <fill_normal+0x258>
 800cd90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2bff      	cmp	r3, #255	; 0xff
 800cd96:	d106      	bne.n	800cda6 <fill_normal+0x236>
 800cd98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd9e:	4413      	add	r3, r2
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	601a      	str	r2, [r3, #0]
 800cda4:	e010      	b.n	800cdc8 <fill_normal+0x258>
 800cda6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cdac:	4413      	add	r3, r2
 800cdae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cdb0:	7810      	ldrb	r0, [r2, #0]
 800cdb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdb4:	0092      	lsls	r2, r2, #2
 800cdb6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cdb8:	188c      	adds	r4, r1, r2
 800cdba:	4602      	mov	r2, r0
 800cdbc:	6819      	ldr	r1, [r3, #0]
 800cdbe:	6838      	ldr	r0, [r7, #0]
 800cdc0:	f7ff fba2 	bl	800c508 <lv_color_mix>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	6023      	str	r3, [r4, #0]
 800cdc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdca:	3301      	adds	r3, #1
 800cdcc:	64fb      	str	r3, [r7, #76]	; 0x4c
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800cdce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	da04      	bge.n	800cde6 <fill_normal+0x276>
 800cddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdde:	f003 0303 	and.w	r3, r3, #3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1d0      	bne.n	800cd88 <fill_normal+0x218>
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
 800cde6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cde8:	64bb      	str	r3, [r7, #72]	; 0x48
                for(; x <= x_end4; x += 4) {
 800cdea:	e0c5      	b.n	800cf78 <fill_normal+0x408>
                    if(*mask32) {
 800cdec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 80bb 	beq.w	800cf6c <fill_normal+0x3fc>
                        if((*mask32) == 0xFFFFFFFF) {
 800cdf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdfe:	d11b      	bne.n	800ce38 <fill_normal+0x2c8>
                            disp_buf_first[x] = color;
 800ce00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce06:	4413      	add	r3, r2
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 1] = color;
 800ce0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce0e:	3301      	adds	r3, #1
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce14:	4413      	add	r3, r2
 800ce16:	683a      	ldr	r2, [r7, #0]
 800ce18:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 2] = color;
 800ce1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce1c:	3302      	adds	r3, #2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce22:	4413      	add	r3, r2
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 3] = color;
 800ce28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce2a:	3303      	adds	r3, #3
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce30:	4413      	add	r3, r2
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	601a      	str	r2, [r3, #0]
 800ce36:	e099      	b.n	800cf6c <fill_normal+0x3fc>
                        }
                        else {
                            mask_tmp_x = (const lv_opa_t *)mask32;
 800ce38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce3a:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x, color)
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x + 1, color)
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x + 2, color)
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x + 3, color)
#else
                            FILL_NORMAL_MASK_PX(x, color)
 800ce3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d01b      	beq.n	800ce7c <fill_normal+0x30c>
 800ce44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	2bff      	cmp	r3, #255	; 0xff
 800ce4a:	d106      	bne.n	800ce5a <fill_normal+0x2ea>
 800ce4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce52:	4413      	add	r3, r2
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	601a      	str	r2, [r3, #0]
 800ce58:	e010      	b.n	800ce7c <fill_normal+0x30c>
 800ce5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce60:	4413      	add	r3, r2
 800ce62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ce64:	7810      	ldrb	r0, [r2, #0]
 800ce66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce68:	0092      	lsls	r2, r2, #2
 800ce6a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ce6c:	188c      	adds	r4, r1, r2
 800ce6e:	4602      	mov	r2, r0
 800ce70:	6819      	ldr	r1, [r3, #0]
 800ce72:	6838      	ldr	r0, [r7, #0]
 800ce74:	f7ff fb48 	bl	800c508 <lv_color_mix>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce7e:	3301      	adds	r3, #1
 800ce80:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX(x + 1, color)
 800ce82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d021      	beq.n	800cece <fill_normal+0x35e>
 800ce8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2bff      	cmp	r3, #255	; 0xff
 800ce90:	d10a      	bne.n	800cea8 <fill_normal+0x338>
 800ce92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce94:	3301      	adds	r3, #1
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce9a:	4413      	add	r3, r2
 800ce9c:	683a      	ldr	r2, [r7, #0]
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	e015      	b.n	800cece <fill_normal+0x35e>
 800cea2:	bf00      	nop
 800cea4:	200177b8 	.word	0x200177b8
 800cea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ceaa:	3301      	adds	r3, #1
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ceb0:	4413      	add	r3, r2
 800ceb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ceb4:	7810      	ldrb	r0, [r2, #0]
 800ceb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ceb8:	3201      	adds	r2, #1
 800ceba:	0092      	lsls	r2, r2, #2
 800cebc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cebe:	188c      	adds	r4, r1, r2
 800cec0:	4602      	mov	r2, r0
 800cec2:	6819      	ldr	r1, [r3, #0]
 800cec4:	6838      	ldr	r0, [r7, #0]
 800cec6:	f7ff fb1f 	bl	800c508 <lv_color_mix>
 800ceca:	4603      	mov	r3, r0
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ced0:	3301      	adds	r3, #1
 800ced2:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800ced4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d01e      	beq.n	800cf1a <fill_normal+0x3aa>
 800cedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	2bff      	cmp	r3, #255	; 0xff
 800cee2:	d107      	bne.n	800cef4 <fill_normal+0x384>
 800cee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cee6:	3302      	adds	r3, #2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ceec:	4413      	add	r3, r2
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	e012      	b.n	800cf1a <fill_normal+0x3aa>
 800cef4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cef6:	3302      	adds	r3, #2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cefc:	4413      	add	r3, r2
 800cefe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf00:	7810      	ldrb	r0, [r2, #0]
 800cf02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf04:	3202      	adds	r2, #2
 800cf06:	0092      	lsls	r2, r2, #2
 800cf08:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf0a:	188c      	adds	r4, r1, r2
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	6819      	ldr	r1, [r3, #0]
 800cf10:	6838      	ldr	r0, [r7, #0]
 800cf12:	f7ff faf9 	bl	800c508 <lv_color_mix>
 800cf16:	4603      	mov	r3, r0
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800cf20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d01e      	beq.n	800cf66 <fill_normal+0x3f6>
 800cf28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2bff      	cmp	r3, #255	; 0xff
 800cf2e:	d107      	bne.n	800cf40 <fill_normal+0x3d0>
 800cf30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf32:	3303      	adds	r3, #3
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf38:	4413      	add	r3, r2
 800cf3a:	683a      	ldr	r2, [r7, #0]
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	e012      	b.n	800cf66 <fill_normal+0x3f6>
 800cf40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf42:	3303      	adds	r3, #3
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf48:	4413      	add	r3, r2
 800cf4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf4c:	7810      	ldrb	r0, [r2, #0]
 800cf4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf50:	3203      	adds	r2, #3
 800cf52:	0092      	lsls	r2, r2, #2
 800cf54:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf56:	188c      	adds	r4, r1, r2
 800cf58:	4602      	mov	r2, r0
 800cf5a:	6819      	ldr	r1, [r3, #0]
 800cf5c:	6838      	ldr	r0, [r7, #0]
 800cf5e:	f7ff fad3 	bl	800c508 <lv_color_mix>
 800cf62:	4603      	mov	r3, r0
 800cf64:	6023      	str	r3, [r4, #0]
 800cf66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf68:	3301      	adds	r3, #1
 800cf6a:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
                        }
                    }
                    mask32++;
 800cf6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf6e:	3304      	adds	r3, #4
 800cf70:	64bb      	str	r3, [r7, #72]	; 0x48
                for(; x <= x_end4; x += 4) {
 800cf72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf74:	3304      	adds	r3, #4
 800cf76:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	f77f af35 	ble.w	800cdec <fill_normal+0x27c>
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
 800cf82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf84:	64fb      	str	r3, [r7, #76]	; 0x4c
                for(; x < draw_area_w ; x++) {
 800cf86:	e025      	b.n	800cfd4 <fill_normal+0x464>
#if LV_COLOR_SCREEN_TRANSP
                    FILL_NORMAL_MASK_PX_SCR_TRANSP(x, color)
#else
                    FILL_NORMAL_MASK_PX(x, color)
 800cf88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d01b      	beq.n	800cfc8 <fill_normal+0x458>
 800cf90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2bff      	cmp	r3, #255	; 0xff
 800cf96:	d106      	bne.n	800cfa6 <fill_normal+0x436>
 800cf98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf9e:	4413      	add	r3, r2
 800cfa0:	683a      	ldr	r2, [r7, #0]
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	e010      	b.n	800cfc8 <fill_normal+0x458>
 800cfa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfac:	4413      	add	r3, r2
 800cfae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfb0:	7810      	ldrb	r0, [r2, #0]
 800cfb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfb4:	0092      	lsls	r2, r2, #2
 800cfb6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cfb8:	188c      	adds	r4, r1, r2
 800cfba:	4602      	mov	r2, r0
 800cfbc:	6819      	ldr	r1, [r3, #0]
 800cfbe:	6838      	ldr	r0, [r7, #0]
 800cfc0:	f7ff faa2 	bl	800c508 <lv_color_mix>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	6023      	str	r3, [r4, #0]
 800cfc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfca:	3301      	adds	r3, #1
 800cfcc:	64fb      	str	r3, [r7, #76]	; 0x4c
                for(; x < draw_area_w ; x++) {
 800cfce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	dbd5      	blt.n	800cf88 <fill_normal+0x418>
#endif
                }
#endif
                disp_buf_first += disp_w;
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfe2:	4413      	add	r3, r2
 800cfe4:	65fb      	str	r3, [r7, #92]	; 0x5c
                mask += draw_area_w;
 800cfe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cfea:	4413      	add	r3, r2
 800cfec:	677b      	str	r3, [r7, #116]	; 0x74
            for(y = 0; y < draw_area_h; y++) {
 800cfee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cff0:	3301      	adds	r3, #1
 800cff2:	657b      	str	r3, [r7, #84]	; 0x54
 800cff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff8:	429a      	cmp	r2, r3
 800cffa:	f6ff aec0 	blt.w	800cd7e <fill_normal+0x20e>
 800cffe:	e076      	b.n	800d0ee <fill_normal+0x57e>
            }
        }
        /*Handle opa and mask values too*/
        else {
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 800d000:	2300      	movs	r3, #0
 800d002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d00c:	657b      	str	r3, [r7, #84]	; 0x54
 800d00e:	e067      	b.n	800d0e0 <fill_normal+0x570>
                const lv_opa_t * mask_tmp_x = mask;
 800d010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d012:	643b      	str	r3, [r7, #64]	; 0x40
                for(x = 0; x < draw_area_w; x++) {
 800d014:	2300      	movs	r3, #0
 800d016:	65bb      	str	r3, [r7, #88]	; 0x58
 800d018:	e052      	b.n	800d0c0 <fill_normal+0x550>
                    if(*mask_tmp_x) {
 800d01a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d048      	beq.n	800d0b4 <fill_normal+0x544>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800d022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d011      	beq.n	800d052 <fill_normal+0x4e2>
 800d02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	2bff      	cmp	r3, #255	; 0xff
 800d034:	d009      	beq.n	800d04a <fill_normal+0x4da>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 800d036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	461a      	mov	r2, r3
 800d03c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800d040:	fb03 f302 	mul.w	r3, r3, r2
 800d044:	0a1b      	lsrs	r3, r3, #8
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800d046:	b2db      	uxtb	r3, r3
 800d048:	e001      	b.n	800d04e <fill_normal+0x4de>
 800d04a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800d04e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 800d052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d107      	bne.n	800d06e <fill_normal+0x4fe>
 800d05e:	697a      	ldr	r2, [r7, #20]
 800d060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d066:	440b      	add	r3, r1
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d01c      	beq.n	800d0a8 <fill_normal+0x538>
                                                        &last_res_color.ch.alpha);
                            }
                            else
#endif
                            {
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 800d06e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d072:	2bff      	cmp	r3, #255	; 0xff
 800d074:	d102      	bne.n	800d07c <fill_normal+0x50c>
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	613b      	str	r3, [r7, #16]
 800d07a:	e00b      	b.n	800d094 <fill_normal+0x524>
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 800d07c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d082:	4413      	add	r3, r2
 800d084:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800d088:	6819      	ldr	r1, [r3, #0]
 800d08a:	6838      	ldr	r0, [r7, #0]
 800d08c:	f7ff fa3c 	bl	800c508 <lv_color_mix>
 800d090:	4603      	mov	r3, r0
 800d092:	613b      	str	r3, [r7, #16]
                            }
                            last_mask = *mask_tmp_x;
 800d094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                            last_dest_color.full = disp_buf_first[x].full;
 800d09c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0a2:	4413      	add	r3, r2
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	617b      	str	r3, [r7, #20]
                        }
                        disp_buf_first[x] = last_res_color;
 800d0a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0ae:	4413      	add	r3, r2
 800d0b0:	693a      	ldr	r2, [r7, #16]
 800d0b2:	601a      	str	r2, [r3, #0]
                    }
                    mask_tmp_x++;
 800d0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	643b      	str	r3, [r7, #64]	; 0x40
                for(x = 0; x < draw_area_w; x++) {
 800d0ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0bc:	3301      	adds	r3, #1
 800d0be:	65bb      	str	r3, [r7, #88]	; 0x58
 800d0c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	dba8      	blt.n	800d01a <fill_normal+0x4aa>
                }
                disp_buf_first += disp_w;
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0ce:	4413      	add	r3, r2
 800d0d0:	65fb      	str	r3, [r7, #92]	; 0x5c
                mask += draw_area_w;
 800d0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d0d6:	4413      	add	r3, r2
 800d0d8:	677b      	str	r3, [r7, #116]	; 0x74
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d0da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0dc:	3301      	adds	r3, #1
 800d0de:	657b      	str	r3, [r7, #84]	; 0x54
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	dd90      	ble.n	800d010 <fill_normal+0x4a0>
            }
        }
    }
}
 800d0ee:	3764      	adds	r7, #100	; 0x64
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd90      	pop	{r4, r7, pc}

0800d0f4 <fill_blended>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
static void fill_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                         lv_color_t color, lv_opa_t opa,
                         const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b092      	sub	sp, #72	; 0x48
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
 800d100:	603b      	str	r3, [r7, #0]
    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f7ff fac4 	bl	800c690 <lv_area_get_width>
 800d108:	4603      	mov	r3, r0
 800d10a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d112:	461a      	mov	r2, r3
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	fb03 f302 	mul.w	r3, r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	4413      	add	r3, r2
 800d120:	647b      	str	r3, [r7, #68]	; 0x44

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
 800d122:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d126:	2b01      	cmp	r3, #1
 800d128:	d002      	beq.n	800d130 <fill_blended+0x3c>
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d003      	beq.n	800d136 <fill_blended+0x42>
        case LV_BLEND_MODE_SUBTRACTIVE:
            blend_fp = color_blend_true_color_subtractive;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 800d12e:	e0ea      	b.n	800d306 <fill_blended+0x212>
            blend_fp = color_blend_true_color_additive;
 800d130:	4b76      	ldr	r3, [pc, #472]	; (800d30c <fill_blended+0x218>)
 800d132:	643b      	str	r3, [r7, #64]	; 0x40
            break;
 800d134:	e002      	b.n	800d13c <fill_blended+0x48>
            blend_fp = color_blend_true_color_subtractive;
 800d136:	4b76      	ldr	r3, [pc, #472]	; (800d310 <fill_blended+0x21c>)
 800d138:	643b      	str	r3, [r7, #64]	; 0x40
            break;
 800d13a:	bf00      	nop

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800d13c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800d140:	2b01      	cmp	r3, #1
 800d142:	d158      	bne.n	800d1f6 <fill_blended+0x102>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
 800d144:	2300      	movs	r3, #0
 800d146:	f887 3020 	strb.w	r3, [r7, #32]
 800d14a:	2300      	movs	r3, #0
 800d14c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800d150:	2300      	movs	r3, #0
 800d152:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d156:	23ff      	movs	r3, #255	; 0xff
 800d158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800d15c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d160:	461a      	mov	r2, r3
 800d162:	6a39      	ldr	r1, [r7, #32]
 800d164:	6838      	ldr	r0, [r7, #0]
 800d166:	f7ff f9cf 	bl	800c508 <lv_color_mix>
 800d16a:	4603      	mov	r3, r0
 800d16c:	61fb      	str	r3, [r7, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d174:	63bb      	str	r3, [r7, #56]	; 0x38
 800d176:	e036      	b.n	800d1e6 <fill_blended+0xf2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d17e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d180:	e022      	b.n	800d1c8 <fill_blended+0xd4>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 800d182:	6a3a      	ldr	r2, [r7, #32]
 800d184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d18a:	440b      	add	r3, r1
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d011      	beq.n	800d1b6 <fill_blended+0xc2>
                    last_dest_color = disp_buf_tmp[x];
 800d192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d198:	4413      	add	r3, r2
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	623b      	str	r3, [r7, #32]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800d19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1a4:	18d1      	adds	r1, r2, r3
 800d1a6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ac:	6809      	ldr	r1, [r1, #0]
 800d1ae:	6838      	ldr	r0, [r7, #0]
 800d1b0:	4798      	blx	r3
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	61fb      	str	r3, [r7, #28]
                }
                disp_buf_tmp[x] = last_res_color;
 800d1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1bc:	4413      	add	r3, r2
 800d1be:	69fa      	ldr	r2, [r7, #28]
 800d1c0:	601a      	str	r2, [r3, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	ddd5      	ble.n	800d182 <fill_blended+0x8e>
            }
            disp_buf_tmp += disp_w;
 800d1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1dc:	4413      	add	r3, r2
 800d1de:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	ddc1      	ble.n	800d178 <fill_blended+0x84>
 800d1f4:	e087      	b.n	800d306 <fill_blended+0x212>
        }
    }
    /*Masked*/
    else {
        /*Get the width of the `draw_area` it will be used to go to the next line of the mask*/
        int32_t draw_area_w = lv_area_get_width(draw_area);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7ff fa4a 	bl	800c690 <lv_area_get_width>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The mask is relative to the clipped area.
         * In the cycles below mask will be indexed from `draw_area.x1`
         * but it corresponds to zero index. So prepare `mask_tmp` accordingly. */
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d206:	425b      	negs	r3, r3
 800d208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d20a:	4413      	add	r3, r2
 800d20c:	637b      	str	r3, [r7, #52]	; 0x34

        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800d20e:	2300      	movs	r3, #0
 800d210:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        last_dest_color.full = disp_buf_tmp[0].full;
 800d214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	61bb      	str	r3, [r7, #24]
        last_res_color.full = disp_buf_tmp[0].full;
 800d21a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	617b      	str	r3, [r7, #20]

        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d226:	63bb      	str	r3, [r7, #56]	; 0x38
 800d228:	e066      	b.n	800d2f8 <fill_blended+0x204>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d230:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d232:	e04e      	b.n	800d2d2 <fill_blended+0x1de>
                if(mask_tmp[x] == 0) continue;
 800d234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d238:	4413      	add	r3, r2
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d044      	beq.n	800d2ca <fill_blended+0x1d6>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
 800d240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d244:	4413      	add	r3, r2
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d107      	bne.n	800d260 <fill_blended+0x16c>
 800d250:	69ba      	ldr	r2, [r7, #24]
 800d252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d258:	440b      	add	r3, r1
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d02d      	beq.n	800d2bc <fill_blended+0x1c8>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 800d260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d264:	4413      	add	r3, r2
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2bfc      	cmp	r3, #252	; 0xfc
 800d26a:	d80b      	bhi.n	800d284 <fill_blended+0x190>
 800d26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d26e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d270:	4413      	add	r3, r2
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	461a      	mov	r2, r3
 800d276:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d27a:	fb03 f302 	mul.w	r3, r3, r2
 800d27e:	0a1b      	lsrs	r3, r3, #8
 800d280:	b2db      	uxtb	r3, r3
 800d282:	e001      	b.n	800d288 <fill_blended+0x194>
 800d284:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 800d28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d292:	18d1      	adds	r1, r2, r3
 800d294:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d29a:	6809      	ldr	r1, [r1, #0]
 800d29c:	6838      	ldr	r0, [r7, #0]
 800d29e:	4798      	blx	r3
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	617b      	str	r3, [r7, #20]
                    last_mask = mask_tmp[x];
 800d2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2a8:	4413      	add	r3, r2
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    last_dest_color.full = disp_buf_tmp[x].full;
 800d2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2b6:	4413      	add	r3, r2
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	61bb      	str	r3, [r7, #24]
                }
                disp_buf_tmp[x] = last_res_color;
 800d2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2c2:	4413      	add	r3, r2
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	601a      	str	r2, [r3, #0]
 800d2c8:	e000      	b.n	800d2cc <fill_blended+0x1d8>
                if(mask_tmp[x] == 0) continue;
 800d2ca:	bf00      	nop
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d2d8:	461a      	mov	r2, r3
 800d2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	dda9      	ble.n	800d234 <fill_blended+0x140>
            }
            disp_buf_tmp += disp_w;
 800d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2e6:	4413      	add	r3, r2
 800d2e8:	647b      	str	r3, [r7, #68]	; 0x44
            mask_tmp += draw_area_w;
 800d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2ee:	4413      	add	r3, r2
 800d2f0:	637b      	str	r3, [r7, #52]	; 0x34
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2fe:	461a      	mov	r2, r3
 800d300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d302:	4293      	cmp	r3, r2
 800d304:	dd91      	ble.n	800d22a <fill_blended+0x136>
        }
    }
}
 800d306:	3748      	adds	r7, #72	; 0x48
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	0800dc75 	.word	0x0800dc75
 800d310:	0800dce5 	.word	0x0800dce5

0800d314 <map_set_px>:

static void map_set_px(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                       const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                       const lv_opa_t * mask, lv_draw_mask_res_t mask_res)

{
 800d314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d316:	b091      	sub	sp, #68	; 0x44
 800d318:	af04      	add	r7, sp, #16
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	603b      	str	r3, [r7, #0]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800d322:	f7fd f805 	bl	800a330 <_lv_refr_get_disp_refreshing>
 800d326:	61f8      	str	r0, [r7, #28]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f7ff f9b1 	bl	800c690 <lv_area_get_width>
 800d32e:	4603      	mov	r3, r0
 800d330:	61bb      	str	r3, [r7, #24]

    /*Get the width of the `draw_area` it will be used to go to the next line of the mask*/
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff f9ac 	bl	800c690 <lv_area_get_width>
 800d338:	4603      	mov	r3, r0
 800d33a:	617b      	str	r3, [r7, #20]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 800d33c:	6838      	ldr	r0, [r7, #0]
 800d33e:	f7ff f9a7 	bl	800c690 <lv_area_get_width>
 800d342:	4603      	mov	r3, r0
 800d344:	613b      	str	r3, [r7, #16]

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d34c:	461a      	mov	r2, r3
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d354:	4619      	mov	r1, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d35c:	1acb      	subs	r3, r1, r3
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	693a      	ldr	r2, [r7, #16]
 800d362:	fb02 f303 	mul.w	r3, r2, r3
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d36a:	4413      	add	r3, r2
 800d36c:	62fb      	str	r3, [r7, #44]	; 0x2c

    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d374:	461a      	mov	r2, r3
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d37c:	4619      	mov	r1, r3
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d384:	1acb      	subs	r3, r1, r3
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d38c:	4413      	add	r3, r2
 800d38e:	62fb      	str	r3, [r7, #44]	; 0x2c
    map_buf_tmp -= draw_area->x1;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	425b      	negs	r3, r3
 800d39a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d39c:	4413      	add	r3, r2
 800d39e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t x;
    int32_t y;

    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800d3a0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d13a      	bne.n	800d41e <map_set_px+0x10a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800d3b0:	e02d      	b.n	800d40e <map_set_px+0xfa>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3ba:	e019      	b.n	800d3f0 <map_set_px+0xdc>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	695c      	ldr	r4, [r3, #20]
 800d3c0:	69f8      	ldr	r0, [r7, #28]
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	b21d      	sxth	r5, r3
 800d3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c8:	b21e      	sxth	r6, r3
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3cc:	b21b      	sxth	r3, r3
 800d3ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3d0:	0092      	lsls	r2, r2, #2
 800d3d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3d4:	440a      	add	r2, r1
 800d3d6:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800d3da:	9102      	str	r1, [sp, #8]
 800d3dc:	6812      	ldr	r2, [r2, #0]
 800d3de:	9201      	str	r2, [sp, #4]
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	4633      	mov	r3, r6
 800d3e4:	462a      	mov	r2, r5
 800d3e6:	68b9      	ldr	r1, [r7, #8]
 800d3e8:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	ddde      	ble.n	800d3bc <map_set_px+0xa8>
            }
            map_buf_tmp += map_w;
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d404:	4413      	add	r3, r2
 800d406:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40a:	3301      	adds	r3, #1
 800d40c:	627b      	str	r3, [r7, #36]	; 0x24
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d414:	461a      	mov	r2, r3
 800d416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d418:	4293      	cmp	r3, r2
 800d41a:	ddca      	ble.n	800d3b2 <map_set_px+0x9e>
            }
            mask_tmp += draw_area_w;
            map_buf_tmp += map_w;
        }
    }
}
 800d41c:	e055      	b.n	800d4ca <map_set_px+0x1b6>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d424:	425b      	negs	r3, r3
 800d426:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d428:	4413      	add	r3, r2
 800d42a:	623b      	str	r3, [r7, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d432:	627b      	str	r3, [r7, #36]	; 0x24
 800d434:	e042      	b.n	800d4bc <map_set_px+0x1a8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d43c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d43e:	e02a      	b.n	800d496 <map_set_px+0x182>
                if(mask_tmp[x]) {
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	6a3a      	ldr	r2, [r7, #32]
 800d444:	4413      	add	r3, r2
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d021      	beq.n	800d490 <map_set_px+0x17c>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	695c      	ldr	r4, [r3, #20]
 800d450:	69fe      	ldr	r6, [r7, #28]
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	fa0f fc83 	sxth.w	ip, r3
 800d458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45a:	fa0f fe83 	sxth.w	lr, r3
 800d45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d460:	b21b      	sxth	r3, r3
 800d462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d464:	0092      	lsls	r2, r2, #2
 800d466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d468:	440a      	add	r2, r1
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800d46a:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800d46e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d470:	6a3d      	ldr	r5, [r7, #32]
 800d472:	4428      	add	r0, r5
 800d474:	7800      	ldrb	r0, [r0, #0]
 800d476:	fb00 f101 	mul.w	r1, r0, r1
 800d47a:	0a09      	lsrs	r1, r1, #8
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800d47c:	b2c9      	uxtb	r1, r1
 800d47e:	9102      	str	r1, [sp, #8]
 800d480:	6812      	ldr	r2, [r2, #0]
 800d482:	9201      	str	r2, [sp, #4]
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	4673      	mov	r3, lr
 800d488:	4662      	mov	r2, ip
 800d48a:	68b9      	ldr	r1, [r7, #8]
 800d48c:	4630      	mov	r0, r6
 800d48e:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d492:	3301      	adds	r3, #1
 800d494:	62bb      	str	r3, [r7, #40]	; 0x28
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d49c:	461a      	mov	r2, r3
 800d49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	ddcd      	ble.n	800d440 <map_set_px+0x12c>
            mask_tmp += draw_area_w;
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	6a3a      	ldr	r2, [r7, #32]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	623b      	str	r3, [r7, #32]
            map_buf_tmp += map_w;
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4b2:	4413      	add	r3, r2
 800d4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	627b      	str	r3, [r7, #36]	; 0x24
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	ddb5      	ble.n	800d436 <map_set_px+0x122>
}
 800d4ca:	bf00      	nop
 800d4cc:	3734      	adds	r7, #52	; 0x34
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4d2 <map_normal>:
 */
LV_ATTRIBUTE_FAST_MEM static void map_normal(const lv_area_t * disp_area, lv_color_t * disp_buf,
                                             const lv_area_t * draw_area,
                                             const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                                             const lv_opa_t * mask, lv_draw_mask_res_t mask_res)
{
 800d4d2:	b5b0      	push	{r4, r5, r7, lr}
 800d4d4:	b094      	sub	sp, #80	; 0x50
 800d4d6:	af02      	add	r7, sp, #8
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	607a      	str	r2, [r7, #4]
 800d4de:	603b      	str	r3, [r7, #0]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f7ff f8d5 	bl	800c690 <lv_area_get_width>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t draw_area_w = lv_area_get_width(draw_area);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7ff f8d0 	bl	800c690 <lv_area_get_width>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff f8e2 	bl	800c6be <lv_area_get_height>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	627b      	str	r3, [r7, #36]	; 0x24

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 800d4fe:	6838      	ldr	r0, [r7, #0]
 800d500:	f7ff f8c6 	bl	800c690 <lv_area_get_width>
 800d504:	4603      	mov	r3, r0
 800d506:	623b      	str	r3, [r7, #32]

    /*Create a temp. disp_buf which always point to first pixel to draw*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d50e:	461a      	mov	r2, r3
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	fb03 f302 	mul.w	r3, r3, r2
 800d516:	461a      	mov	r2, r3
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d51e:	4413      	add	r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	4413      	add	r3, r2
 800d526:	647b      	str	r3, [r7, #68]	; 0x44

    /*Create a temp. map_buf which always point to first pixel to draw from the map*/
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d52e:	461a      	mov	r2, r3
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d536:	4619      	mov	r1, r3
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d53e:	1acb      	subs	r3, r1, r3
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	6a3a      	ldr	r2, [r7, #32]
 800d544:	fb02 f303 	mul.w	r3, r2, r3
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d54c:	4413      	add	r3, r2
 800d54e:	643b      	str	r3, [r7, #64]	; 0x40
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d556:	461a      	mov	r2, r3
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d55e:	4619      	mov	r1, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d566:	1acb      	subs	r3, r1, r3
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d56e:	4413      	add	r3, r2
 800d570:	643b      	str	r3, [r7, #64]	; 0x40

#if LV_COLOR_SCREEN_TRANSP || LV_USE_GPU
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800d572:	f7fc fedd 	bl	800a330 <_lv_refr_get_disp_refreshing>
 800d576:	61f8      	str	r0, [r7, #28]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800d578:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	f040 8082 	bne.w	800d686 <map_normal+0x1b4>
#if LV_USE_GPU
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d586:	2b00      	cmp	r3, #0
 800d588:	d02a      	beq.n	800d5e0 <map_normal+0x10e>
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f00d fc77 	bl	801ae7e <lv_area_get_size>
 800d590:	4603      	mov	r3, r0
 800d592:	2bf0      	cmp	r3, #240	; 0xf0
 800d594:	d924      	bls.n	800d5e0 <map_normal+0x10e>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d59c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d59e:	e017      	b.n	800d5d0 <map_normal+0xfe>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d5a4:	69f8      	ldr	r0, [r7, #28]
 800d5a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5b4:	47a0      	blx	r4
                disp_buf_first += disp_w;
 800d5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5bc:	4413      	add	r3, r2
 800d5be:	647b      	str	r3, [r7, #68]	; 0x44
                map_buf_first += map_w;
 800d5c0:	6a3b      	ldr	r3, [r7, #32]
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5c6:	4413      	add	r3, r2
 800d5c8:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	dde0      	ble.n	800d5a0 <map_normal+0xce>
            }
            return;
 800d5de:	e238      	b.n	800da52 <map_normal+0x580>
        }
#endif

        if(opa > LV_OPA_MAX) {
 800d5e0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d5e4:	2bfd      	cmp	r3, #253	; 0xfd
 800d5e6:	d91b      	bls.n	800d620 <map_normal+0x14e>
                return;
            }
#endif

            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5ec:	e013      	b.n	800d616 <map_normal+0x144>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800d5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d5f8:	f00f fb0e 	bl	801cc18 <_lv_memcpy>
                disp_buf_first += disp_w;
 800d5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d602:	4413      	add	r3, r2
 800d604:	647b      	str	r3, [r7, #68]	; 0x44
                map_buf_first += map_w;
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d60c:	4413      	add	r3, r2
 800d60e:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800d610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d612:	3301      	adds	r3, #1
 800d614:	63bb      	str	r3, [r7, #56]	; 0x38
 800d616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	429a      	cmp	r2, r3
 800d61c:	dbe7      	blt.n	800d5ee <map_normal+0x11c>
 800d61e:	e218      	b.n	800da52 <map_normal+0x580>
            }
#endif

            /*Software rendering*/

            for(y = 0; y < draw_area_h; y++) {
 800d620:	2300      	movs	r3, #0
 800d622:	63bb      	str	r3, [r7, #56]	; 0x38
 800d624:	e02a      	b.n	800d67c <map_normal+0x1aa>
                for(x = 0; x < draw_area_w; x++) {
 800d626:	2300      	movs	r3, #0
 800d628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d62a:	e016      	b.n	800d65a <map_normal+0x188>
                                                &disp_buf_first[x].ch.alpha);
                    }
                    else
#endif
                    {
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 800d62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d632:	4413      	add	r3, r2
 800d634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d636:	0092      	lsls	r2, r2, #2
 800d638:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d63a:	4411      	add	r1, r2
 800d63c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d63e:	0092      	lsls	r2, r2, #2
 800d640:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d642:	1884      	adds	r4, r0, r2
 800d644:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800d648:	6809      	ldr	r1, [r1, #0]
 800d64a:	6818      	ldr	r0, [r3, #0]
 800d64c:	f7fe ff5c 	bl	800c508 <lv_color_mix>
 800d650:	4603      	mov	r3, r0
 800d652:	6023      	str	r3, [r4, #0]
                for(x = 0; x < draw_area_w; x++) {
 800d654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d656:	3301      	adds	r3, #1
 800d658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d65a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65e:	429a      	cmp	r2, r3
 800d660:	dbe4      	blt.n	800d62c <map_normal+0x15a>
                    }
                }
                disp_buf_first += disp_w;
 800d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d668:	4413      	add	r3, r2
 800d66a:	647b      	str	r3, [r7, #68]	; 0x44
                map_buf_first += map_w;
 800d66c:	6a3b      	ldr	r3, [r7, #32]
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d672:	4413      	add	r3, r2
 800d674:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800d676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d678:	3301      	adds	r3, #1
 800d67a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d680:	429a      	cmp	r2, r3
 800d682:	dbd0      	blt.n	800d626 <map_normal+0x154>
 800d684:	e1e5      	b.n	800da52 <map_normal+0x580>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 800d686:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d68a:	2bfd      	cmp	r3, #253	; 0xfd
 800d68c:	f240 8192 	bls.w	800d9b4 <map_normal+0x4e2>
            /*Go to the first pixel of the row */

            int32_t x_end4 = draw_area_w - 4;
 800d690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d692:	3b04      	subs	r3, #4
 800d694:	617b      	str	r3, [r7, #20]

            for(y = 0; y < draw_area_h; y++) {
 800d696:	2300      	movs	r3, #0
 800d698:	63bb      	str	r3, [r7, #56]	; 0x38
 800d69a:	e185      	b.n	800d9a8 <map_normal+0x4d6>
                const lv_opa_t * mask_tmp_x = mask;
 800d69c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d69e:	637b      	str	r3, [r7, #52]	; 0x34
#if 0
                for(x = 0; x < draw_area_w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6a4:	e02d      	b.n	800d702 <map_normal+0x230>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
 800d6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d023      	beq.n	800d6f6 <map_normal+0x224>
 800d6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	2bff      	cmp	r3, #255	; 0xff
 800d6b4:	d10a      	bne.n	800d6cc <map_normal+0x1fa>
 800d6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6bc:	441a      	add	r2, r3
 800d6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6c4:	440b      	add	r3, r1
 800d6c6:	6812      	ldr	r2, [r2, #0]
 800d6c8:	601a      	str	r2, [r3, #0]
 800d6ca:	e014      	b.n	800d6f6 <map_normal+0x224>
 800d6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6d2:	4413      	add	r3, r2
 800d6d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6d6:	0092      	lsls	r2, r2, #2
 800d6d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6da:	4411      	add	r1, r2
 800d6dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6de:	7815      	ldrb	r5, [r2, #0]
 800d6e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6e2:	0092      	lsls	r2, r2, #2
 800d6e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d6e6:	1884      	adds	r4, r0, r2
 800d6e8:	462a      	mov	r2, r5
 800d6ea:	6809      	ldr	r1, [r1, #0]
 800d6ec:	6818      	ldr	r0, [r3, #0]
 800d6ee:	f7fe ff0b 	bl	800c508 <lv_color_mix>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	6023      	str	r3, [r4, #0]
 800d6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	637b      	str	r3, [r7, #52]	; 0x34
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800d6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6fe:	3301      	adds	r3, #1
 800d700:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d706:	429a      	cmp	r2, r3
 800d708:	da04      	bge.n	800d714 <map_normal+0x242>
 800d70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d70c:	f003 0303 	and.w	r3, r3, #3
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1c8      	bne.n	800d6a6 <map_normal+0x1d4>
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
 800d714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d716:	633b      	str	r3, [r7, #48]	; 0x30
                for(; x < x_end4; x += 4) {
 800d718:	e0fb      	b.n	800d912 <map_normal+0x440>
                    if(*mask32) {
 800d71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f000 80f1 	beq.w	800d906 <map_normal+0x434>
                        if((*mask32) == 0xFFFFFFFF) {
 800d724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72c:	d12e      	bne.n	800d78c <map_normal+0x2ba>
                            disp_buf_first[x] = map_buf_first[x];
 800d72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d734:	441a      	add	r2, r3
 800d736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d73c:	440b      	add	r3, r1
 800d73e:	6812      	ldr	r2, [r2, #0]
 800d740:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 800d742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d744:	3301      	adds	r3, #1
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d74a:	441a      	add	r2, r3
 800d74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d74e:	3301      	adds	r3, #1
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d754:	440b      	add	r3, r1
 800d756:	6812      	ldr	r2, [r2, #0]
 800d758:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 800d75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d75c:	3302      	adds	r3, #2
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d762:	441a      	add	r2, r3
 800d764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d766:	3302      	adds	r3, #2
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d76c:	440b      	add	r3, r1
 800d76e:	6812      	ldr	r2, [r2, #0]
 800d770:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
 800d772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d774:	3303      	adds	r3, #3
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d77a:	441a      	add	r2, r3
 800d77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d77e:	3303      	adds	r3, #3
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d784:	440b      	add	r3, r1
 800d786:	6812      	ldr	r2, [r2, #0]
 800d788:	601a      	str	r2, [r3, #0]
 800d78a:	e0bc      	b.n	800d906 <map_normal+0x434>
                        }
                        else {
                            mask_tmp_x = (const lv_opa_t *)mask32;
 800d78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78e:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x + 1)
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x + 2)
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x + 3)
#else
                            MAP_NORMAL_MASK_PX(x)
 800d790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d023      	beq.n	800d7e0 <map_normal+0x30e>
 800d798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	2bff      	cmp	r3, #255	; 0xff
 800d79e:	d10a      	bne.n	800d7b6 <map_normal+0x2e4>
 800d7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7a6:	441a      	add	r2, r3
 800d7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d7ae:	440b      	add	r3, r1
 800d7b0:	6812      	ldr	r2, [r2, #0]
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	e014      	b.n	800d7e0 <map_normal+0x30e>
 800d7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7bc:	4413      	add	r3, r2
 800d7be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7c0:	0092      	lsls	r2, r2, #2
 800d7c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d7c4:	4411      	add	r1, r2
 800d7c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7c8:	7815      	ldrb	r5, [r2, #0]
 800d7ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7cc:	0092      	lsls	r2, r2, #2
 800d7ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d7d0:	1884      	adds	r4, r0, r2
 800d7d2:	462a      	mov	r2, r5
 800d7d4:	6809      	ldr	r1, [r1, #0]
 800d7d6:	6818      	ldr	r0, [r3, #0]
 800d7d8:	f7fe fe96 	bl	800c508 <lv_color_mix>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	6023      	str	r3, [r4, #0]
 800d7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX(x + 1)
 800d7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d028      	beq.n	800d840 <map_normal+0x36e>
 800d7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	2bff      	cmp	r3, #255	; 0xff
 800d7f4:	d10c      	bne.n	800d810 <map_normal+0x33e>
 800d7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7fe:	441a      	add	r2, r3
 800d800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d802:	3301      	adds	r3, #1
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d808:	440b      	add	r3, r1
 800d80a:	6812      	ldr	r2, [r2, #0]
 800d80c:	601a      	str	r2, [r3, #0]
 800d80e:	e017      	b.n	800d840 <map_normal+0x36e>
 800d810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d812:	3301      	adds	r3, #1
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d818:	4413      	add	r3, r2
 800d81a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d81c:	3201      	adds	r2, #1
 800d81e:	0092      	lsls	r2, r2, #2
 800d820:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d822:	4411      	add	r1, r2
 800d824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d826:	7815      	ldrb	r5, [r2, #0]
 800d828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d82a:	3201      	adds	r2, #1
 800d82c:	0092      	lsls	r2, r2, #2
 800d82e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d830:	1884      	adds	r4, r0, r2
 800d832:	462a      	mov	r2, r5
 800d834:	6809      	ldr	r1, [r1, #0]
 800d836:	6818      	ldr	r0, [r3, #0]
 800d838:	f7fe fe66 	bl	800c508 <lv_color_mix>
 800d83c:	4603      	mov	r3, r0
 800d83e:	6023      	str	r3, [r4, #0]
 800d840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d842:	3301      	adds	r3, #1
 800d844:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX(x + 2)
 800d846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d028      	beq.n	800d8a0 <map_normal+0x3ce>
 800d84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	2bff      	cmp	r3, #255	; 0xff
 800d854:	d10c      	bne.n	800d870 <map_normal+0x39e>
 800d856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d858:	3302      	adds	r3, #2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d85e:	441a      	add	r2, r3
 800d860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d862:	3302      	adds	r3, #2
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d868:	440b      	add	r3, r1
 800d86a:	6812      	ldr	r2, [r2, #0]
 800d86c:	601a      	str	r2, [r3, #0]
 800d86e:	e017      	b.n	800d8a0 <map_normal+0x3ce>
 800d870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d872:	3302      	adds	r3, #2
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d878:	4413      	add	r3, r2
 800d87a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d87c:	3202      	adds	r2, #2
 800d87e:	0092      	lsls	r2, r2, #2
 800d880:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d882:	4411      	add	r1, r2
 800d884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d886:	7815      	ldrb	r5, [r2, #0]
 800d888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d88a:	3202      	adds	r2, #2
 800d88c:	0092      	lsls	r2, r2, #2
 800d88e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d890:	1884      	adds	r4, r0, r2
 800d892:	462a      	mov	r2, r5
 800d894:	6809      	ldr	r1, [r1, #0]
 800d896:	6818      	ldr	r0, [r3, #0]
 800d898:	f7fe fe36 	bl	800c508 <lv_color_mix>
 800d89c:	4603      	mov	r3, r0
 800d89e:	6023      	str	r3, [r4, #0]
 800d8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX(x + 3)
 800d8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d028      	beq.n	800d900 <map_normal+0x42e>
 800d8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	2bff      	cmp	r3, #255	; 0xff
 800d8b4:	d10c      	bne.n	800d8d0 <map_normal+0x3fe>
 800d8b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b8:	3303      	adds	r3, #3
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8be:	441a      	add	r2, r3
 800d8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c2:	3303      	adds	r3, #3
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8c8:	440b      	add	r3, r1
 800d8ca:	6812      	ldr	r2, [r2, #0]
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	e017      	b.n	800d900 <map_normal+0x42e>
 800d8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d2:	3303      	adds	r3, #3
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8d8:	4413      	add	r3, r2
 800d8da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8dc:	3203      	adds	r2, #3
 800d8de:	0092      	lsls	r2, r2, #2
 800d8e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8e2:	4411      	add	r1, r2
 800d8e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8e6:	7815      	ldrb	r5, [r2, #0]
 800d8e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8ea:	3203      	adds	r2, #3
 800d8ec:	0092      	lsls	r2, r2, #2
 800d8ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d8f0:	1884      	adds	r4, r0, r2
 800d8f2:	462a      	mov	r2, r5
 800d8f4:	6809      	ldr	r1, [r1, #0]
 800d8f6:	6818      	ldr	r0, [r3, #0]
 800d8f8:	f7fe fe06 	bl	800c508 <lv_color_mix>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d902:	3301      	adds	r3, #1
 800d904:	637b      	str	r3, [r7, #52]	; 0x34
#endif
                        }
                    }
                    mask32++;
 800d906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d908:	3304      	adds	r3, #4
 800d90a:	633b      	str	r3, [r7, #48]	; 0x30
                for(; x < x_end4; x += 4) {
 800d90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d90e:	3304      	adds	r3, #4
 800d910:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	429a      	cmp	r2, r3
 800d918:	f6ff aeff 	blt.w	800d71a <map_normal+0x248>
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	637b      	str	r3, [r7, #52]	; 0x34
                for(; x < draw_area_w ; x++) {
 800d920:	e02d      	b.n	800d97e <map_normal+0x4ac>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
 800d922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d023      	beq.n	800d972 <map_normal+0x4a0>
 800d92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	2bff      	cmp	r3, #255	; 0xff
 800d930:	d10a      	bne.n	800d948 <map_normal+0x476>
 800d932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d938:	441a      	add	r2, r3
 800d93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d940:	440b      	add	r3, r1
 800d942:	6812      	ldr	r2, [r2, #0]
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	e014      	b.n	800d972 <map_normal+0x4a0>
 800d948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d94e:	4413      	add	r3, r2
 800d950:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d952:	0092      	lsls	r2, r2, #2
 800d954:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d956:	4411      	add	r1, r2
 800d958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d95a:	7815      	ldrb	r5, [r2, #0]
 800d95c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d95e:	0092      	lsls	r2, r2, #2
 800d960:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d962:	1884      	adds	r4, r0, r2
 800d964:	462a      	mov	r2, r5
 800d966:	6809      	ldr	r1, [r1, #0]
 800d968:	6818      	ldr	r0, [r3, #0]
 800d96a:	f7fe fdcd 	bl	800c508 <lv_color_mix>
 800d96e:	4603      	mov	r3, r0
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d974:	3301      	adds	r3, #1
 800d976:	637b      	str	r3, [r7, #52]	; 0x34
                for(; x < draw_area_w ; x++) {
 800d978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d97a:	3301      	adds	r3, #1
 800d97c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d97e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d982:	429a      	cmp	r2, r3
 800d984:	dbcd      	blt.n	800d922 <map_normal+0x450>
#endif
                }
#endif
                disp_buf_first += disp_w;
 800d986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d98c:	4413      	add	r3, r2
 800d98e:	647b      	str	r3, [r7, #68]	; 0x44
                mask += draw_area_w;
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d994:	4413      	add	r3, r2
 800d996:	663b      	str	r3, [r7, #96]	; 0x60
                map_buf_first += map_w;
 800d998:	6a3b      	ldr	r3, [r7, #32]
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d99e:	4413      	add	r3, r2
 800d9a0:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	f6ff ae75 	blt.w	800d69c <map_normal+0x1ca>
 800d9b2:	e04e      	b.n	800da52 <map_normal+0x580>
            }
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < draw_area_h; y++) {
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9b8:	e047      	b.n	800da4a <map_normal+0x578>
                for(x = 0; x < draw_area_w; x++) {
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9be:	e02f      	b.n	800da20 <map_normal+0x54e>
                    if(mask[x]) {
 800d9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9c4:	4413      	add	r3, r2
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d026      	beq.n	800da1a <map_normal+0x548>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800d9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9d0:	4413      	add	r3, r2
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	2bfc      	cmp	r3, #252	; 0xfc
 800d9d6:	d80a      	bhi.n	800d9ee <map_normal+0x51c>
 800d9d8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d9dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d9e0:	440a      	add	r2, r1
 800d9e2:	7812      	ldrb	r2, [r2, #0]
 800d9e4:	fb02 f303 	mul.w	r3, r2, r3
 800d9e8:	121b      	asrs	r3, r3, #8
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	e001      	b.n	800d9f2 <map_normal+0x520>
 800d9ee:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d9f2:	76fb      	strb	r3, [r7, #27]
                                                    &disp_buf_first[x].ch.alpha);
                        }
                        else
#endif
                        {
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 800d9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d9fa:	4413      	add	r3, r2
 800d9fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9fe:	0092      	lsls	r2, r2, #2
 800da00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da02:	4411      	add	r1, r2
 800da04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da06:	0092      	lsls	r2, r2, #2
 800da08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800da0a:	1884      	adds	r4, r0, r2
 800da0c:	7efa      	ldrb	r2, [r7, #27]
 800da0e:	6809      	ldr	r1, [r1, #0]
 800da10:	6818      	ldr	r0, [r3, #0]
 800da12:	f7fe fd79 	bl	800c508 <lv_color_mix>
 800da16:	4603      	mov	r3, r0
 800da18:	6023      	str	r3, [r4, #0]
                for(x = 0; x < draw_area_w; x++) {
 800da1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da1c:	3301      	adds	r3, #1
 800da1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	429a      	cmp	r2, r3
 800da26:	dbcb      	blt.n	800d9c0 <map_normal+0x4ee>
                        }
                    }
                }
                disp_buf_first += disp_w;
 800da28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da2e:	4413      	add	r3, r2
 800da30:	647b      	str	r3, [r7, #68]	; 0x44
                mask += draw_area_w;
 800da32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da36:	4413      	add	r3, r2
 800da38:	663b      	str	r3, [r7, #96]	; 0x60
                map_buf_first += map_w;
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da40:	4413      	add	r3, r2
 800da42:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800da44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da46:	3301      	adds	r3, #1
 800da48:	63bb      	str	r3, [r7, #56]	; 0x38
 800da4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	429a      	cmp	r2, r3
 800da50:	dbb3      	blt.n	800d9ba <map_normal+0x4e8>
            }
        }
    }
}
 800da52:	3748      	adds	r7, #72	; 0x48
 800da54:	46bd      	mov	sp, r7
 800da56:	bdb0      	pop	{r4, r5, r7, pc}

0800da58 <map_blended>:
#if LV_USE_BLEND_MODES
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
 800da58:	b590      	push	{r4, r7, lr}
 800da5a:	b08f      	sub	sp, #60	; 0x3c
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
 800da64:	603b      	str	r3, [r7, #0]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7fe fe12 	bl	800c690 <lv_area_get_width>
 800da6c:	4603      	mov	r3, r0
 800da6e:	61fb      	str	r3, [r7, #28]

    /*Get the width of the `draw_area` it will be used to go to the next line of the mask*/
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f7fe fe0d 	bl	800c690 <lv_area_get_width>
 800da76:	4603      	mov	r3, r0
 800da78:	61bb      	str	r3, [r7, #24]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 800da7a:	6838      	ldr	r0, [r7, #0]
 800da7c:	f7fe fe08 	bl	800c690 <lv_area_get_width>
 800da80:	4603      	mov	r3, r0
 800da82:	617b      	str	r3, [r7, #20]

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da8a:	461a      	mov	r2, r3
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	fb03 f302 	mul.w	r3, r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	68ba      	ldr	r2, [r7, #8]
 800da96:	4413      	add	r3, r2
 800da98:	637b      	str	r3, [r7, #52]	; 0x34

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800daa0:	461a      	mov	r2, r3
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800daa8:	4619      	mov	r1, r3
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dab0:	1acb      	subs	r3, r1, r3
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	697a      	ldr	r2, [r7, #20]
 800dab6:	fb02 f303 	mul.w	r3, r2, r3
 800daba:	009b      	lsls	r3, r3, #2
 800dabc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dabe:	4413      	add	r3, r2
 800dac0:	633b      	str	r3, [r7, #48]	; 0x30

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
 800dac2:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d002      	beq.n	800dad0 <map_blended+0x78>
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d003      	beq.n	800dad6 <map_blended+0x7e>
        case LV_BLEND_MODE_SUBTRACTIVE:
            blend_fp = color_blend_true_color_subtractive;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 800dace:	e0c9      	b.n	800dc64 <map_blended+0x20c>
            blend_fp = color_blend_true_color_additive;
 800dad0:	4b66      	ldr	r3, [pc, #408]	; (800dc6c <map_blended+0x214>)
 800dad2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800dad4:	e002      	b.n	800dadc <map_blended+0x84>
            blend_fp = color_blend_true_color_subtractive;
 800dad6:	4b66      	ldr	r3, [pc, #408]	; (800dc70 <map_blended+0x218>)
 800dad8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800dada:	bf00      	nop

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800dadc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d155      	bne.n	800db90 <map_blended+0x138>
        /*Go to the first px of the row*/
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daea:	461a      	mov	r2, r3
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daf2:	4619      	mov	r1, r3
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dafa:	1acb      	subs	r3, r1, r3
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db02:	4413      	add	r3, r2
 800db04:	633b      	str	r3, [r7, #48]	; 0x30

        /*The map will be indexed from `draw_area->x1` so compensate it.*/
        map_buf_tmp -= draw_area->x1;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	425b      	negs	r3, r3
 800db10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db12:	4413      	add	r3, r2
 800db14:	633b      	str	r3, [r7, #48]	; 0x30

        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800db1c:	627b      	str	r3, [r7, #36]	; 0x24
 800db1e:	e02f      	b.n	800db80 <map_blended+0x128>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db26:	62bb      	str	r3, [r7, #40]	; 0x28
 800db28:	e016      	b.n	800db58 <map_blended+0x100>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 800db2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db30:	18d0      	adds	r0, r2, r3
 800db32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db38:	18d1      	adds	r1, r2, r3
 800db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db40:	18d4      	adds	r4, r2, r3
 800db42:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800db46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db48:	6809      	ldr	r1, [r1, #0]
 800db4a:	6800      	ldr	r0, [r0, #0]
 800db4c:	4798      	blx	r3
 800db4e:	4603      	mov	r3, r0
 800db50:	6023      	str	r3, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800db52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db54:	3301      	adds	r3, #1
 800db56:	62bb      	str	r3, [r7, #40]	; 0x28
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800db5e:	461a      	mov	r2, r3
 800db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db62:	4293      	cmp	r3, r2
 800db64:	dde1      	ble.n	800db2a <map_blended+0xd2>
            }
            disp_buf_tmp += disp_w;
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	009b      	lsls	r3, r3, #2
 800db6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db6c:	4413      	add	r3, r2
 800db6e:	637b      	str	r3, [r7, #52]	; 0x34
            map_buf_tmp += map_w;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db76:	4413      	add	r3, r2
 800db78:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	3301      	adds	r3, #1
 800db7e:	627b      	str	r3, [r7, #36]	; 0x24
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800db86:	461a      	mov	r2, r3
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	4293      	cmp	r3, r2
 800db8c:	ddc8      	ble.n	800db20 <map_blended+0xc8>
 800db8e:	e069      	b.n	800dc64 <map_blended+0x20c>
    /*Masked*/
    else {
        /* The mask is relative to the clipped area.
         * In the cycles below mask will be indexed from `draw_area.x1`
         * but it corresponds to zero index. So prepare `mask_tmp` accordingly. */
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db96:	425b      	negs	r3, r3
 800db98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db9a:	4413      	add	r3, r2
 800db9c:	623b      	str	r3, [r7, #32]

        map_buf_tmp -= draw_area->x1;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	425b      	negs	r3, r3
 800dba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbaa:	4413      	add	r3, r2
 800dbac:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dbb4:	627b      	str	r3, [r7, #36]	; 0x24
 800dbb6:	e04e      	b.n	800dc56 <map_blended+0x1fe>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbc0:	e031      	b.n	800dc26 <map_blended+0x1ce>
                if(mask_tmp[x] == 0) continue;
 800dbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc4:	6a3a      	ldr	r2, [r7, #32]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d027      	beq.n	800dc1e <map_blended+0x1c6>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 800dbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd0:	6a3a      	ldr	r2, [r7, #32]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	2bfc      	cmp	r3, #252	; 0xfc
 800dbd8:	d80a      	bhi.n	800dbf0 <map_blended+0x198>
 800dbda:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800dbde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbe0:	6a39      	ldr	r1, [r7, #32]
 800dbe2:	440a      	add	r2, r1
 800dbe4:	7812      	ldrb	r2, [r2, #0]
 800dbe6:	fb02 f303 	mul.w	r3, r2, r3
 800dbea:	121b      	asrs	r3, r3, #8
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	e001      	b.n	800dbf4 <map_blended+0x19c>
 800dbf0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800dbf4:	74fb      	strb	r3, [r7, #19]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbfc:	18d0      	adds	r0, r2, r3
 800dbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc04:	18d1      	adds	r1, r2, r3
 800dc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc0c:	18d4      	adds	r4, r2, r3
 800dc0e:	7cfa      	ldrb	r2, [r7, #19]
 800dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc12:	6809      	ldr	r1, [r1, #0]
 800dc14:	6800      	ldr	r0, [r0, #0]
 800dc16:	4798      	blx	r3
 800dc18:	4603      	mov	r3, r0
 800dc1a:	6023      	str	r3, [r4, #0]
 800dc1c:	e000      	b.n	800dc20 <map_blended+0x1c8>
                if(mask_tmp[x] == 0) continue;
 800dc1e:	bf00      	nop
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800dc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc22:	3301      	adds	r3, #1
 800dc24:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc30:	4293      	cmp	r3, r2
 800dc32:	ddc6      	ble.n	800dbc2 <map_blended+0x16a>
            }
            disp_buf_tmp += disp_w;
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc3a:	4413      	add	r3, r2
 800dc3c:	637b      	str	r3, [r7, #52]	; 0x34
            mask_tmp += draw_area_w;
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	6a3a      	ldr	r2, [r7, #32]
 800dc42:	4413      	add	r3, r2
 800dc44:	623b      	str	r3, [r7, #32]
            map_buf_tmp += map_w;
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc4c:	4413      	add	r3, r2
 800dc4e:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	3301      	adds	r3, #1
 800dc54:	627b      	str	r3, [r7, #36]	; 0x24
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc60:	4293      	cmp	r3, r2
 800dc62:	dda9      	ble.n	800dbb8 <map_blended+0x160>
        }
    }
}
 800dc64:	373c      	adds	r7, #60	; 0x3c
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd90      	pop	{r4, r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	0800dc75 	.word	0x0800dc75
 800dc70:	0800dce5 	.word	0x0800dce5

0800dc74 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b086      	sub	sp, #24
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	71fb      	strb	r3, [r7, #7]

    if(opa <= LV_OPA_MIN) return bg;
 800dc82:	79fb      	ldrb	r3, [r7, #7]
 800dc84:	2b02      	cmp	r3, #2
 800dc86:	d801      	bhi.n	800dc8c <color_blend_true_color_additive+0x18>
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	e027      	b.n	800dcdc <color_blend_true_color_additive+0x68>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
 800dc8c:	7abb      	ldrb	r3, [r7, #10]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	7bbb      	ldrb	r3, [r7, #14]
 800dc92:	4413      	add	r3, r2
 800dc94:	617b      	str	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
#elif LV_COLOR_DEPTH == 32
    fg.ch.red = LV_MATH_MIN(tmp, 255);
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	2bff      	cmp	r3, #255	; 0xff
 800dc9a:	bf28      	it	cs
 800dc9c:	23ff      	movcs	r3, #255	; 0xff
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	73bb      	strb	r3, [r7, #14]
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	2bff      	cmp	r3, #255	; 0xff
 800dca6:	bf28      	it	cs
 800dca8:	23ff      	movcs	r3, #255	; 0xff
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	737b      	strb	r3, [r7, #13]
#endif

    tmp = bg.ch.blue + fg.ch.blue;
 800dcae:	7a3b      	ldrb	r3, [r7, #8]
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	7b3b      	ldrb	r3, [r7, #12]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	617b      	str	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	2bff      	cmp	r3, #255	; 0xff
 800dcbc:	bf28      	it	cs
 800dcbe:	23ff      	movcs	r3, #255	; 0xff
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	733b      	strb	r3, [r7, #12]
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 800dcc4:	79fb      	ldrb	r3, [r7, #7]
 800dcc6:	2bff      	cmp	r3, #255	; 0xff
 800dcc8:	d101      	bne.n	800dcce <color_blend_true_color_additive+0x5a>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	e006      	b.n	800dcdc <color_blend_true_color_additive+0x68>

    return lv_color_mix(fg, bg, opa);
 800dcce:	79fb      	ldrb	r3, [r7, #7]
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	68b9      	ldr	r1, [r7, #8]
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f7fe fc17 	bl	800c508 <lv_color_mix>
 800dcda:	4603      	mov	r3, r0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3718      	adds	r7, #24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	71fb      	strb	r3, [r7, #7]

    if(opa <= LV_OPA_MIN) return bg;
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
 800dcf4:	2b02      	cmp	r3, #2
 800dcf6:	d801      	bhi.n	800dcfc <color_blend_true_color_subtractive+0x18>
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	e029      	b.n	800dd50 <color_blend_true_color_subtractive+0x6c>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 800dcfc:	7abb      	ldrb	r3, [r7, #10]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	7bbb      	ldrb	r3, [r7, #14]
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	617b      	str	r3, [r7, #20]
    fg.ch.red = LV_MATH_MAX(tmp, 0);
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	73bb      	strb	r3, [r7, #14]

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 800dd10:	7a7b      	ldrb	r3, [r7, #9]
 800dd12:	461a      	mov	r2, r3
 800dd14:	7b7b      	ldrb	r3, [r7, #13]
 800dd16:	1ad3      	subs	r3, r2, r3
 800dd18:	617b      	str	r3, [r7, #20]
    fg.ch.green = LV_MATH_MAX(tmp, 0);
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	737b      	strb	r3, [r7, #13]
    tmp = LV_MATH_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 800dd24:	7a3b      	ldrb	r3, [r7, #8]
 800dd26:	461a      	mov	r2, r3
 800dd28:	7b3b      	ldrb	r3, [r7, #12]
 800dd2a:	1ad3      	subs	r3, r2, r3
 800dd2c:	617b      	str	r3, [r7, #20]
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	733b      	strb	r3, [r7, #12]

    if(opa == LV_OPA_COVER) return fg;
 800dd38:	79fb      	ldrb	r3, [r7, #7]
 800dd3a:	2bff      	cmp	r3, #255	; 0xff
 800dd3c:	d101      	bne.n	800dd42 <color_blend_true_color_subtractive+0x5e>
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	e006      	b.n	800dd50 <color_blend_true_color_subtractive+0x6c>

    return lv_color_mix(fg, bg, opa);
 800dd42:	79fb      	ldrb	r3, [r7, #7]
 800dd44:	461a      	mov	r2, r3
 800dd46:	68b9      	ldr	r1, [r7, #8]
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f7fe fbdd 	bl	800c508 <lv_color_mix>
 800dd4e:	4603      	mov	r3, r0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <lv_color_premult>:
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	460b      	mov	r3, r1
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	72fb      	strb	r3, [r7, #11]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800dd66:	7bbb      	ldrb	r3, [r7, #14]
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	7afb      	ldrb	r3, [r7, #11]
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	fb12 f303 	smulbb	r3, r2, r3
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	801a      	strh	r2, [r3, #0]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800dd78:	7b7b      	ldrb	r3, [r7, #13]
 800dd7a:	b299      	uxth	r1, r3
 800dd7c:	7afb      	ldrb	r3, [r7, #11]
 800dd7e:	b29a      	uxth	r2, r3
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	3302      	adds	r3, #2
 800dd84:	fb11 f202 	smulbb	r2, r1, r2
 800dd88:	b292      	uxth	r2, r2
 800dd8a:	801a      	strh	r2, [r3, #0]
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800dd8c:	7b3b      	ldrb	r3, [r7, #12]
 800dd8e:	b299      	uxth	r1, r3
 800dd90:	7afb      	ldrb	r3, [r7, #11]
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	3304      	adds	r3, #4
 800dd98:	fb11 f202 	smulbb	r2, r1, r2
 800dd9c:	b292      	uxth	r2, r2
 800dd9e:	801a      	strh	r2, [r3, #0]
}
 800dda0:	bf00      	nop
 800dda2:	3714      	adds	r7, #20
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <lv_color_mix_premult>:
{
 800ddac:	b480      	push	{r7}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	71fb      	strb	r3, [r7, #7]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	7abb      	ldrb	r3, [r7, #10]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	79fb      	ldrb	r3, [r7, #7]
 800ddc6:	fb03 f301 	mul.w	r3, r3, r1
 800ddca:	4413      	add	r3, r2
 800ddcc:	461a      	mov	r2, r3
 800ddce:	4613      	mov	r3, r2
 800ddd0:	021b      	lsls	r3, r3, #8
 800ddd2:	4413      	add	r3, r2
 800ddd4:	01db      	lsls	r3, r3, #7
 800ddd6:	4413      	add	r3, r2
 800ddd8:	0ddb      	lsrs	r3, r3, #23
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	3302      	adds	r3, #2
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	461a      	mov	r2, r3
 800dde6:	7a7b      	ldrb	r3, [r7, #9]
 800dde8:	4619      	mov	r1, r3
 800ddea:	79fb      	ldrb	r3, [r7, #7]
 800ddec:	fb03 f301 	mul.w	r3, r3, r1
 800ddf0:	4413      	add	r3, r2
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	021b      	lsls	r3, r3, #8
 800ddf8:	4413      	add	r3, r2
 800ddfa:	01db      	lsls	r3, r3, #7
 800ddfc:	4413      	add	r3, r2
 800ddfe:	0ddb      	lsrs	r3, r3, #23
 800de00:	b2db      	uxtb	r3, r3
 800de02:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	3304      	adds	r3, #4
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	461a      	mov	r2, r3
 800de0c:	7a3b      	ldrb	r3, [r7, #8]
 800de0e:	4619      	mov	r1, r3
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	fb03 f301 	mul.w	r3, r3, r1
 800de16:	4413      	add	r3, r2
 800de18:	461a      	mov	r2, r3
 800de1a:	4613      	mov	r3, r2
 800de1c:	021b      	lsls	r3, r3, #8
 800de1e:	4413      	add	r3, r2
 800de20:	01db      	lsls	r3, r3, #7
 800de22:	4413      	add	r3, r2
 800de24:	0ddb      	lsrs	r3, r3, #23
 800de26:	b2db      	uxtb	r3, r3
 800de28:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 800de2a:	23ff      	movs	r3, #255	; 0xff
 800de2c:	75fb      	strb	r3, [r7, #23]
    return ret;
 800de2e:	697b      	ldr	r3, [r7, #20]
}
 800de30:	4618      	mov	r0, r3
 800de32:	371c      	adds	r7, #28
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b087      	sub	sp, #28
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	613b      	str	r3, [r7, #16]

    while(len) {
 800de50:	e00c      	b.n	800de6c <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	781a      	ldrb	r2, [r3, #0]
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	701a      	strb	r2, [r3, #0]
        d8++;
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	3301      	adds	r3, #1
 800de5e:	617b      	str	r3, [r7, #20]
        s8++;
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	3301      	adds	r3, #1
 800de64:	613b      	str	r3, [r7, #16]
        len--;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	3b01      	subs	r3, #1
 800de6a:	607b      	str	r3, [r7, #4]
    while(len) {
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d1ef      	bne.n	800de52 <_lv_memcpy_small+0x16>
    }

    return dst;
 800de72:	68fb      	ldr	r3, [r7, #12]
}
 800de74:	4618      	mov	r0, r3
 800de76:	371c      	adds	r7, #28
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <lv_area_copy>:
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 800de8a:	2208      	movs	r2, #8
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7ff ffd4 	bl	800de3c <_lv_memcpy_small>
}
 800de94:	bf00      	nop
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <lv_area_get_width>:
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800deaa:	b29a      	uxth	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	3301      	adds	r3, #1
 800deba:	b29b      	uxth	r3, r3
 800debc:	b21b      	sxth	r3, r3
}
 800debe:	4618      	mov	r0, r3
 800dec0:	370c      	adds	r7, #12
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr

0800deca <lv_area_get_height>:
{
 800deca:	b480      	push	{r7}
 800decc:	b083      	sub	sp, #12
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ded8:	b29a      	uxth	r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	3301      	adds	r3, #1
 800dee8:	b29b      	uxth	r3, r3
 800deea:	b21b      	sxth	r3, r3
}
 800deec:	4618      	mov	r0, r3
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <_lv_img_buf_transform>:
 * @param y the coordinate which color and opa should be get
 * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of the image
 * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 */
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 800def8:	b590      	push	{r4, r7, lr}
 800defa:	b08f      	sub	sp, #60	; 0x3c
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	460b      	mov	r3, r1
 800df02:	807b      	strh	r3, [r7, #2]
 800df04:	4613      	mov	r3, r2
 800df06:	803b      	strh	r3, [r7, #0]
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	627b      	str	r3, [r7, #36]	; 0x24

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
 800df0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800df18:	1a9b      	subs	r3, r3, r2
 800df1a:	623b      	str	r3, [r7, #32]
    int32_t yt = y - dsc->cfg.pivot_y;
 800df1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800df26:	1a9b      	subs	r3, r3, r2
 800df28:	61fb      	str	r3, [r7, #28]

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	89db      	ldrh	r3, [r3, #14]
 800df2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df32:	d120      	bne.n	800df76 <_lv_img_buf_transform+0x7e>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df38:	6a3a      	ldr	r2, [r7, #32]
 800df3a:	fb02 f203 	mul.w	r2, r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df42:	69f9      	ldr	r1, [r7, #28]
 800df44:	fb01 f303 	mul.w	r3, r1, r3
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	109a      	asrs	r2, r3, #2
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df50:	4413      	add	r3, r2
 800df52:	637b      	str	r3, [r7, #52]	; 0x34
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df58:	6a3a      	ldr	r2, [r7, #32]
 800df5a:	fb02 f203 	mul.w	r2, r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df62:	69f9      	ldr	r1, [r7, #28]
 800df64:	fb01 f303 	mul.w	r3, r1, r3
 800df68:	4413      	add	r3, r2
 800df6a:	109a      	asrs	r2, r3, #2
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df70:	4413      	add	r3, r2
 800df72:	633b      	str	r3, [r7, #48]	; 0x30
 800df74:	e04b      	b.n	800e00e <_lv_img_buf_transform+0x116>
    }
    else if(dsc->cfg.angle == 0) {
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d118      	bne.n	800dfb2 <_lv_img_buf_transform+0xba>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df84:	6a3a      	ldr	r2, [r7, #32]
 800df86:	fb02 f303 	mul.w	r3, r2, r3
 800df8a:	115b      	asrs	r3, r3, #5
 800df8c:	623b      	str	r3, [r7, #32]
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df92:	69fa      	ldr	r2, [r7, #28]
 800df94:	fb02 f303 	mul.w	r3, r2, r3
 800df98:	115b      	asrs	r3, r3, #5
 800df9a:	61fb      	str	r3, [r7, #28]
        xs = xt + dsc->tmp.pivot_x_256;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa0:	6a3a      	ldr	r2, [r7, #32]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	637b      	str	r3, [r7, #52]	; 0x34
        ys = yt + dsc->tmp.pivot_y_256;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfaa:	69fa      	ldr	r2, [r7, #28]
 800dfac:	4413      	add	r3, r2
 800dfae:	633b      	str	r3, [r7, #48]	; 0x30
 800dfb0:	e02d      	b.n	800e00e <_lv_img_buf_transform+0x116>
    }
    else {
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfb6:	6a3a      	ldr	r2, [r7, #32]
 800dfb8:	fb02 f303 	mul.w	r3, r2, r3
 800dfbc:	115b      	asrs	r3, r3, #5
 800dfbe:	623b      	str	r3, [r7, #32]
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfc4:	69fa      	ldr	r2, [r7, #28]
 800dfc6:	fb02 f303 	mul.w	r3, r2, r3
 800dfca:	115b      	asrs	r3, r3, #5
 800dfcc:	61fb      	str	r3, [r7, #28]
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd2:	6a3a      	ldr	r2, [r7, #32]
 800dfd4:	fb02 f203 	mul.w	r2, r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfdc:	69f9      	ldr	r1, [r7, #28]
 800dfde:	fb01 f303 	mul.w	r3, r1, r3
 800dfe2:	1ad3      	subs	r3, r2, r3
 800dfe4:	129a      	asrs	r2, r3, #10
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfea:	4413      	add	r3, r2
 800dfec:	637b      	str	r3, [r7, #52]	; 0x34
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff2:	6a3a      	ldr	r2, [r7, #32]
 800dff4:	fb02 f203 	mul.w	r2, r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffc:	69f9      	ldr	r1, [r7, #28]
 800dffe:	fb01 f303 	mul.w	r3, r1, r3
 800e002:	4413      	add	r3, r2
 800e004:	129a      	asrs	r2, r3, #10
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e00a:	4413      	add	r3, r2
 800e00c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
 800e00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e010:	121b      	asrs	r3, r3, #8
 800e012:	61bb      	str	r3, [r7, #24]
    int32_t ys_int = ys >> 8;
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	121b      	asrs	r3, r3, #8
 800e018:	617b      	str	r3, [r7, #20]

    if(xs_int >= dsc->cfg.src_w) return false;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e020:	461a      	mov	r2, r3
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	4293      	cmp	r3, r2
 800e026:	db01      	blt.n	800e02c <_lv_img_buf_transform+0x134>
 800e028:	2300      	movs	r3, #0
 800e02a:	e0c8      	b.n	800e1be <_lv_img_buf_transform+0x2c6>
    else if(xs_int < 0) return false;
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	da01      	bge.n	800e036 <_lv_img_buf_transform+0x13e>
 800e032:	2300      	movs	r3, #0
 800e034:	e0c3      	b.n	800e1be <_lv_img_buf_transform+0x2c6>

    if(ys_int >= dsc->cfg.src_h) return false;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e03c:	461a      	mov	r2, r3
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	4293      	cmp	r3, r2
 800e042:	db01      	blt.n	800e048 <_lv_img_buf_transform+0x150>
 800e044:	2300      	movs	r3, #0
 800e046:	e0ba      	b.n	800e1be <_lv_img_buf_transform+0x2c6>
    else if(ys_int < 0) return false;
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	da01      	bge.n	800e052 <_lv_img_buf_transform+0x15a>
 800e04e:	2300      	movs	r3, #0
 800e050:	e0b5      	b.n	800e1be <_lv_img_buf_transform+0x2c6>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e058:	f003 0304 	and.w	r3, r3, #4
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d04c      	beq.n	800e0fc <_lv_img_buf_transform+0x204>
        if(dsc->tmp.has_alpha == 0) {
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e068:	f003 0302 	and.w	r3, r3, #2
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d11c      	bne.n	800e0ac <_lv_img_buf_transform+0x1b4>
            px_size = LV_COLOR_SIZE >> 3;
 800e072:	2304      	movs	r3, #4
 800e074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e07e:	461a      	mov	r2, r3
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	fb03 f202 	mul.w	r2, r3, r2
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	4413      	add	r3, r2
 800e08a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e08e:	fb02 f303 	mul.w	r3, r2, r3
 800e092:	62bb      	str	r3, [r7, #40]	; 0x28
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f103 0018 	add.w	r0, r3, #24
 800e09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09e:	4413      	add	r3, r2
 800e0a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	f7ff fec9 	bl	800de3c <_lv_memcpy_small>
 800e0aa:	e046      	b.n	800e13a <_lv_img_buf_transform+0x242>
        }
        else {
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 800e0ac:	2304      	movs	r3, #4
 800e0ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	fb03 f202 	mul.w	r2, r3, r2
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e0c8:	fb02 f303 	mul.w	r3, r2, r3
 800e0cc:	62bb      	str	r3, [r7, #40]	; 0x28
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f103 0018 	add.w	r0, r3, #24
 800e0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d8:	18d1      	adds	r1, r2, r3
 800e0da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	f7ff feab 	bl	800de3c <_lv_memcpy_small>
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800e0e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ec:	4413      	add	r3, r2
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0f2:	4413      	add	r3, r2
 800e0f4:	781a      	ldrb	r2, [r3, #0]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	771a      	strb	r2, [r3, #28]
 800e0fa:	e01e      	b.n	800e13a <_lv_img_buf_transform+0x242>
        }
    }
    else {
        pxi = 0; /*unused*/
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	62bb      	str	r3, [r7, #40]	; 0x28
        px_size = 0;    /*unused*/
 800e100:	2300      	movs	r3, #0
 800e102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f103 0020 	add.w	r0, r3, #32
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	b219      	sxth	r1, r3
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	b21a      	sxth	r2, r3
 800e114:	687c      	ldr	r4, [r7, #4]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	691b      	ldr	r3, [r3, #16]
 800e11a:	f008 fed5 	bl	8016ec8 <lv_img_buf_get_px_color>
 800e11e:	61a0      	str	r0, [r4, #24]
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	3320      	adds	r3, #32
 800e124:	69ba      	ldr	r2, [r7, #24]
 800e126:	b211      	sxth	r1, r2
 800e128:	697a      	ldr	r2, [r7, #20]
 800e12a:	b212      	sxth	r2, r2
 800e12c:	4618      	mov	r0, r3
 800e12e:	f009 f80d 	bl	801714c <lv_img_buf_get_px_alpha>
 800e132:	4603      	mov	r3, r0
 800e134:	461a      	mov	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	771a      	strb	r2, [r3, #28]
    }

    if(dsc->tmp.chroma_keyed) {
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e140:	f003 0301 	and.w	r3, r3, #1
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00e      	beq.n	800e168 <_lv_img_buf_transform+0x270>
        lv_color_t ct = LV_COLOR_TRANSP;
 800e14a:	2300      	movs	r3, #0
 800e14c:	733b      	strb	r3, [r7, #12]
 800e14e:	23ff      	movs	r3, #255	; 0xff
 800e150:	737b      	strb	r3, [r7, #13]
 800e152:	2300      	movs	r3, #0
 800e154:	73bb      	strb	r3, [r7, #14]
 800e156:	23ff      	movs	r3, #255	; 0xff
 800e158:	73fb      	strb	r3, [r7, #15]
        if(dsc->res.color.full == ct.full) return false;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	699a      	ldr	r2, [r3, #24]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	429a      	cmp	r2, r3
 800e162:	d101      	bne.n	800e168 <_lv_img_buf_transform+0x270>
 800e164:	2300      	movs	r3, #0
 800e166:	e02a      	b.n	800e1be <_lv_img_buf_transform+0x2c6>
    }

    if(dsc->cfg.antialias == false) return true;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	7d5b      	ldrb	r3, [r3, #21]
 800e16c:	f083 0301 	eor.w	r3, r3, #1
 800e170:	b2db      	uxtb	r3, r3
 800e172:	2b00      	cmp	r3, #0
 800e174:	d001      	beq.n	800e17a <_lv_img_buf_transform+0x282>
 800e176:	2301      	movs	r3, #1
 800e178:	e021      	b.n	800e1be <_lv_img_buf_transform+0x2c6>

    dsc->tmp.xs = xs;
 800e17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e17c:	b21a      	sxth	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    dsc->tmp.ys = ys;
 800e184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e186:	b21a      	sxth	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    dsc->tmp.xs_int = xs_int;
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	b21a      	sxth	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    dsc->tmp.ys_int = ys_int;
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	b21a      	sxth	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    dsc->tmp.pxi = pxi;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1a6:	64da      	str	r2, [r3, #76]	; 0x4c
    dsc->tmp.px_size = px_size;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e1ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f009 fc02 	bl	80179bc <_lv_img_buf_transform_anti_alias>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	74fb      	strb	r3, [r7, #19]

    return ret;
 800e1bc:	7cfb      	ldrb	r3, [r7, #19]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	373c      	adds	r7, #60	; 0x3c
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd90      	pop	{r4, r7, pc}

0800e1c6 <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b082      	sub	sp, #8
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800e1ce:	2114      	movs	r1, #20
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f00e ffc6 	bl	801d162 <_lv_memset_00>
    dsc->recolor = LV_COLOR_BLACK;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	731a      	strb	r2, [r3, #12]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	735a      	strb	r2, [r3, #13]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	739a      	strb	r2, [r3, #14]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	22ff      	movs	r2, #255	; 0xff
 800e1ec:	73da      	strb	r2, [r3, #15]
    dsc->opa = LV_OPA_COVER;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	22ff      	movs	r2, #255	; 0xff
 800e1f2:	701a      	strb	r2, [r3, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1fa:	811a      	strh	r2, [r3, #8]
    dsc->antialias = LV_ANTIALIAS;
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	7c53      	ldrb	r3, [r2, #17]
 800e200:	f043 0301 	orr.w	r3, r3, #1
 800e204:	7453      	strb	r3, [r2, #17]

}
 800e206:	bf00      	nop
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
	...

0800e210 <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(const lv_area_t * coords, const lv_area_t * mask, const void * src, const lv_draw_img_dsc_t * dsc)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
 800e21c:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d105      	bne.n	800e230 <lv_draw_img+0x20>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(coords, mask, "No\ndata");
 800e224:	4a0f      	ldr	r2, [pc, #60]	; (800e264 <lv_draw_img+0x54>)
 800e226:	68b9      	ldr	r1, [r7, #8]
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f000 feeb 	bl	800f004 <show_error>
        return;
 800e22e:	e016      	b.n	800e25e <lv_draw_img+0x4e>
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	2b02      	cmp	r3, #2
 800e236:	d911      	bls.n	800e25c <lv_draw_img+0x4c>

    lv_res_t res;
    res = lv_img_draw_core(coords, mask, src, dsc);
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	68b9      	ldr	r1, [r7, #8]
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f000 f8da 	bl	800e3f8 <lv_img_draw_core>
 800e244:	4603      	mov	r3, r0
 800e246:	75fb      	strb	r3, [r7, #23]

    if(res == LV_RES_INV) {
 800e248:	7dfb      	ldrb	r3, [r7, #23]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d107      	bne.n	800e25e <lv_draw_img+0x4e>
        LV_LOG_WARN("Image draw error");
        show_error(coords, mask, "No\ndata");
 800e24e:	4a05      	ldr	r2, [pc, #20]	; (800e264 <lv_draw_img+0x54>)
 800e250:	68b9      	ldr	r1, [r7, #8]
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f000 fed6 	bl	800f004 <show_error>
        return;
 800e258:	bf00      	nop
 800e25a:	e000      	b.n	800e25e <lv_draw_img+0x4e>
    if(dsc->opa <= LV_OPA_MIN) return;
 800e25c:	bf00      	nop
    }
}
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	0802d0e0 	.word	0x0802d0e0

0800e268 <lv_img_cf_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 800e272:	2300      	movs	r3, #0
 800e274:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800e276:	79fb      	ldrb	r3, [r7, #7]
 800e278:	2b0e      	cmp	r3, #14
 800e27a:	d836      	bhi.n	800e2ea <lv_img_cf_get_px_size+0x82>
 800e27c:	a201      	add	r2, pc, #4	; (adr r2, 800e284 <lv_img_cf_get_px_size+0x1c>)
 800e27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e282:	bf00      	nop
 800e284:	0800e2c1 	.word	0x0800e2c1
 800e288:	0800e2c1 	.word	0x0800e2c1
 800e28c:	0800e2eb 	.word	0x0800e2eb
 800e290:	0800e2eb 	.word	0x0800e2eb
 800e294:	0800e2c7 	.word	0x0800e2c7
 800e298:	0800e2cd 	.word	0x0800e2cd
 800e29c:	0800e2c7 	.word	0x0800e2c7
 800e2a0:	0800e2d3 	.word	0x0800e2d3
 800e2a4:	0800e2d9 	.word	0x0800e2d9
 800e2a8:	0800e2df 	.word	0x0800e2df
 800e2ac:	0800e2e5 	.word	0x0800e2e5
 800e2b0:	0800e2d3 	.word	0x0800e2d3
 800e2b4:	0800e2d9 	.word	0x0800e2d9
 800e2b8:	0800e2df 	.word	0x0800e2df
 800e2bc:	0800e2e5 	.word	0x0800e2e5
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW:
            px_size = 0;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	73fb      	strb	r3, [r7, #15]
            break;
 800e2c4:	e014      	b.n	800e2f0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
            px_size = LV_COLOR_SIZE;
 800e2c6:	2320      	movs	r3, #32
 800e2c8:	73fb      	strb	r3, [r7, #15]
            break;
 800e2ca:	e011      	b.n	800e2f0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 800e2cc:	2320      	movs	r3, #32
 800e2ce:	73fb      	strb	r3, [r7, #15]
            break;
 800e2d0:	e00e      	b.n	800e2f0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT:
            px_size = 1;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	73fb      	strb	r3, [r7, #15]
            break;
 800e2d6:	e00b      	b.n	800e2f0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT:
            px_size = 2;
 800e2d8:	2302      	movs	r3, #2
 800e2da:	73fb      	strb	r3, [r7, #15]
            break;
 800e2dc:	e008      	b.n	800e2f0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT:
            px_size = 4;
 800e2de:	2304      	movs	r3, #4
 800e2e0:	73fb      	strb	r3, [r7, #15]
            break;
 800e2e2:	e005      	b.n	800e2f0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            px_size = 8;
 800e2e4:	2308      	movs	r3, #8
 800e2e6:	73fb      	strb	r3, [r7, #15]
            break;
 800e2e8:	e002      	b.n	800e2f0 <lv_img_cf_get_px_size+0x88>
        default:
            px_size = 0;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	73fb      	strb	r3, [r7, #15]
            break;
 800e2ee:	bf00      	nop
    }

    return px_size;
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3714      	adds	r7, #20
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop

0800e300 <lv_img_cf_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	4603      	mov	r3, r0
 800e308:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 800e30a:	2300      	movs	r3, #0
 800e30c:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800e30e:	79fb      	ldrb	r3, [r7, #7]
 800e310:	2b03      	cmp	r3, #3
 800e312:	d004      	beq.n	800e31e <lv_img_cf_is_chroma_keyed+0x1e>
 800e314:	2b03      	cmp	r3, #3
 800e316:	db05      	blt.n	800e324 <lv_img_cf_is_chroma_keyed+0x24>
 800e318:	3b06      	subs	r3, #6
 800e31a:	2b04      	cmp	r3, #4
 800e31c:	d802      	bhi.n	800e324 <lv_img_cf_is_chroma_keyed+0x24>
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT:
            is_chroma_keyed = true;
 800e31e:	2301      	movs	r3, #1
 800e320:	73fb      	strb	r3, [r7, #15]
            break;
 800e322:	e002      	b.n	800e32a <lv_img_cf_is_chroma_keyed+0x2a>

        default:
            is_chroma_keyed = false;
 800e324:	2300      	movs	r3, #0
 800e326:	73fb      	strb	r3, [r7, #15]
            break;
 800e328:	bf00      	nop
    }

    return is_chroma_keyed;
 800e32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3714      	adds	r7, #20
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <lv_img_cf_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_cf_has_alpha(lv_img_cf_t cf)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 800e342:	2300      	movs	r3, #0
 800e344:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800e346:	79fb      	ldrb	r3, [r7, #7]
 800e348:	3b02      	subs	r3, #2
 800e34a:	2b0c      	cmp	r3, #12
 800e34c:	d81f      	bhi.n	800e38e <lv_img_cf_has_alpha+0x56>
 800e34e:	a201      	add	r2, pc, #4	; (adr r2, 800e354 <lv_img_cf_has_alpha+0x1c>)
 800e350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e354:	0800e389 	.word	0x0800e389
 800e358:	0800e38f 	.word	0x0800e38f
 800e35c:	0800e38f 	.word	0x0800e38f
 800e360:	0800e389 	.word	0x0800e389
 800e364:	0800e38f 	.word	0x0800e38f
 800e368:	0800e389 	.word	0x0800e389
 800e36c:	0800e389 	.word	0x0800e389
 800e370:	0800e389 	.word	0x0800e389
 800e374:	0800e389 	.word	0x0800e389
 800e378:	0800e389 	.word	0x0800e389
 800e37c:	0800e389 	.word	0x0800e389
 800e380:	0800e389 	.word	0x0800e389
 800e384:	0800e389 	.word	0x0800e389
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            has_alpha = true;
 800e388:	2301      	movs	r3, #1
 800e38a:	73fb      	strb	r3, [r7, #15]
            break;
 800e38c:	e002      	b.n	800e394 <lv_img_cf_has_alpha+0x5c>
        default:
            has_alpha = false;
 800e38e:	2300      	movs	r3, #0
 800e390:	73fb      	strb	r3, [r7, #15]
            break;
 800e392:	bf00      	nop
    }

    return has_alpha;
 800e394:	7bfb      	ldrb	r3, [r7, #15]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3714      	adds	r7, #20
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop

0800e3a4 <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 800e3ac:	2303      	movs	r3, #3
 800e3ae:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d101      	bne.n	800e3ba <lv_img_src_get_type+0x16>
 800e3b6:	7bfb      	ldrb	r3, [r7, #15]
 800e3b8:	e018      	b.n	800e3ec <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	2b1f      	cmp	r3, #31
 800e3c4:	d907      	bls.n	800e3d6 <lv_img_src_get_type+0x32>
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	781b      	ldrb	r3, [r3, #0]
 800e3ca:	b25b      	sxtb	r3, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	db02      	blt.n	800e3d6 <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	73fb      	strb	r3, [r7, #15]
 800e3d4:	e009      	b.n	800e3ea <lv_img_src_get_type+0x46>
    }
    else if(u8_p[0] >= 0x80) {
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	b25b      	sxtb	r3, r3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	da02      	bge.n	800e3e6 <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 800e3e0:	2302      	movs	r3, #2
 800e3e2:	73fb      	strb	r3, [r7, #15]
 800e3e4:	e001      	b.n	800e3ea <lv_img_src_get_type+0x46>
    }
    else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 800e3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3714      	adds	r7, #20
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <lv_img_draw_core>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_res_t lv_img_draw_core(const lv_area_t * coords, const lv_area_t * clip_area,
                                                       const void * src,
                                                       const lv_draw_img_dsc_t * draw_dsc)
{
 800e3f8:	b5b0      	push	{r4, r5, r7, lr}
 800e3fa:	b09c      	sub	sp, #112	; 0x70
 800e3fc:	af02      	add	r7, sp, #8
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
 800e404:	603b      	str	r3, [r7, #0]
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d801      	bhi.n	800e412 <lv_img_draw_core+0x1a>
 800e40e:	2301      	movs	r3, #1
 800e410:	e15a      	b.n	800e6c8 <lv_img_draw_core+0x2d0>

    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	68d9      	ldr	r1, [r3, #12]
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f009 fd6c 	bl	8017ef4 <_lv_img_cache_open>
 800e41c:	65f8      	str	r0, [r7, #92]	; 0x5c

    if(cdsc == NULL) return LV_RES_INV;
 800e41e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e420:	2b00      	cmp	r3, #0
 800e422:	d101      	bne.n	800e428 <lv_img_draw_core+0x30>
 800e424:	2300      	movs	r3, #0
 800e426:	e14f      	b.n	800e6c8 <lv_img_draw_core+0x2d0>

    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800e428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e42a:	7c1b      	ldrb	r3, [r3, #16]
 800e42c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e430:	b2db      	uxtb	r3, r3
 800e432:	4618      	mov	r0, r3
 800e434:	f7ff ff64 	bl	800e300 <lv_img_cf_is_chroma_keyed>
 800e438:	4603      	mov	r3, r0
 800e43a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 800e43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e440:	7c1b      	ldrb	r3, [r3, #16]
 800e442:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e446:	b2db      	uxtb	r3, r3
 800e448:	4618      	mov	r0, r3
 800e44a:	f7ff ff75 	bl	800e338 <lv_img_cf_has_alpha>
 800e44e:	4603      	mov	r3, r0
 800e450:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

    if(cdsc->dec_dsc.error_msg != NULL) {
 800e454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e456:	69db      	ldr	r3, [r3, #28]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d007      	beq.n	800e46c <lv_img_draw_core+0x74>
        LV_LOG_WARN("Image draw error");

        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 800e45c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	461a      	mov	r2, r3
 800e462:	68b9      	ldr	r1, [r7, #8]
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f000 fdcd 	bl	800f004 <show_error>
 800e46a:	e129      	b.n	800e6c0 <lv_img_draw_core+0x2c8>
    }
    /* The decoder could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 800e46c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e46e:	695b      	ldr	r3, [r3, #20]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d07d      	beq.n	800e570 <lv_img_draw_core+0x178>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
 800e474:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e478:	68f9      	ldr	r1, [r7, #12]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7ff fd00 	bl	800de80 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	885b      	ldrh	r3, [r3, #2]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d104      	bne.n	800e492 <lv_img_draw_core+0x9a>
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	891b      	ldrh	r3, [r3, #8]
 800e48c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e490:	d048      	beq.n	800e524 <lv_img_draw_core+0x12c>
            int32_t w = lv_area_get_width(coords);
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	f7ff fd02 	bl	800de9c <lv_area_get_width>
 800e498:	4603      	mov	r3, r0
 800e49a:	647b      	str	r3, [r7, #68]	; 0x44
            int32_t h = lv_area_get_height(coords);
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f7ff fd14 	bl	800deca <lv_area_get_height>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	643b      	str	r3, [r7, #64]	; 0x40

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800e4a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4a8:	b219      	sxth	r1, r3
 800e4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4ac:	b21c      	sxth	r4, r3
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	885b      	ldrh	r3, [r3, #2]
 800e4b2:	b21d      	sxth	r5, r3
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	891b      	ldrh	r3, [r3, #8]
 800e4b8:	683a      	ldr	r2, [r7, #0]
 800e4ba:	3204      	adds	r2, #4
 800e4bc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800e4c0:	9201      	str	r2, [sp, #4]
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	462b      	mov	r3, r5
 800e4c6:	4622      	mov	r2, r4
 800e4c8:	f009 f854 	bl	8017574 <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
 800e4cc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	4413      	add	r3, r2
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	b21b      	sxth	r3, r3
 800e4e0:	86bb      	strh	r3, [r7, #52]	; 0x34
            map_area_rot.y1 += coords->y1;
 800e4e2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	4413      	add	r3, r2
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	b21b      	sxth	r3, r3
 800e4f6:	86fb      	strh	r3, [r7, #54]	; 0x36
            map_area_rot.x2 += coords->x1;
 800e4f8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800e4fc:	b29a      	uxth	r2, r3
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e504:	b29b      	uxth	r3, r3
 800e506:	4413      	add	r3, r2
 800e508:	b29b      	uxth	r3, r3
 800e50a:	b21b      	sxth	r3, r3
 800e50c:	873b      	strh	r3, [r7, #56]	; 0x38
            map_area_rot.y2 += coords->y1;
 800e50e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800e512:	b29a      	uxth	r2, r3
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	4413      	add	r3, r2
 800e51e:	b29b      	uxth	r3, r3
 800e520:	b21b      	sxth	r3, r3
 800e522:	877b      	strh	r3, [r7, #58]	; 0x3a
        }

        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 800e524:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e52c:	68b9      	ldr	r1, [r7, #8]
 800e52e:	4618      	mov	r0, r3
 800e530:	f00c fcc6 	bl	801aec0 <_lv_area_intersect>
 800e534:	4603      	mov	r3, r0
 800e536:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 800e53a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e53e:	f083 0301 	eor.w	r3, r3, #1
 800e542:	b2db      	uxtb	r3, r3
 800e544:	2b00      	cmp	r3, #0
 800e546:	d004      	beq.n	800e552 <lv_img_draw_core+0x15a>
            draw_cleanup(cdsc);
 800e548:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e54a:	f000 fd8b 	bl	800f064 <draw_cleanup>
            return LV_RES_OK;
 800e54e:	2301      	movs	r3, #1
 800e550:	e0ba      	b.n	800e6c8 <lv_img_draw_core+0x2d0>
        }

        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 800e552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e554:	695a      	ldr	r2, [r3, #20]
 800e556:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e55a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f000 f8b1 	bl	800e6d0 <lv_draw_map>
 800e56e:	e0a7      	b.n	800e6c0 <lv_img_draw_core+0x2c8>
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 800e570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	68b9      	ldr	r1, [r7, #8]
 800e578:	4618      	mov	r0, r3
 800e57a:	f00c fca1 	bl	801aec0 <_lv_area_intersect>
 800e57e:	4603      	mov	r3, r0
 800e580:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 800e584:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800e588:	f083 0301 	eor.w	r3, r3, #1
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d004      	beq.n	800e59c <lv_img_draw_core+0x1a4>
            draw_cleanup(cdsc);
 800e592:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e594:	f000 fd66 	bl	800f064 <draw_cleanup>
            return LV_RES_OK;
 800e598:	2301      	movs	r3, #1
 800e59a:	e095      	b.n	800e6c8 <lv_img_draw_core+0x2d0>
        }

        int32_t width = lv_area_get_width(&mask_com);
 800e59c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7ff fc7b 	bl	800de9c <lv_area_get_width>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	657b      	str	r3, [r7, #84]	; 0x54

        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800e5aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7ff fc74 	bl	800de9c <lv_area_get_width>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f00e f9c9 	bl	801c950 <_lv_mem_buf_get>
 800e5be:	6538      	str	r0, [r7, #80]	; 0x50
                                         LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 800e5c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e5c4:	f107 031c 	add.w	r3, r7, #28
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7ff fc58 	bl	800de80 <lv_area_copy>
        lv_area_set_height(&line, 1);
 800e5d0:	f107 031c 	add.w	r3, r7, #28
 800e5d4:	2101      	movs	r1, #1
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f00c fc39 	bl	801ae4e <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800e5dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	64fb      	str	r3, [r7, #76]	; 0x4c
        int32_t y = mask_com.y1 - coords->y1;
 800e5ec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	667b      	str	r3, [r7, #100]	; 0x64
        int32_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800e5fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e600:	663b      	str	r3, [r7, #96]	; 0x60
 800e602:	e054      	b.n	800e6ae <lv_img_draw_core+0x2b6>
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 800e604:	f107 021c 	add.w	r2, r7, #28
 800e608:	f107 0314 	add.w	r3, r7, #20
 800e60c:	68b9      	ldr	r1, [r7, #8]
 800e60e:	4618      	mov	r0, r3
 800e610:	f00c fc56 	bl	801aec0 <_lv_area_intersect>
 800e614:	4603      	mov	r3, r0
 800e616:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if(union_ok == false) continue;
 800e61a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800e61e:	f083 0301 	eor.w	r3, r3, #1
 800e622:	b2db      	uxtb	r3, r3
 800e624:	2b00      	cmp	r3, #0
 800e626:	d13e      	bne.n	800e6a6 <lv_img_draw_core+0x2ae>

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800e628:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e62c:	b219      	sxth	r1, r3
 800e62e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e630:	b21a      	sxth	r2, r3
 800e632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e634:	b21c      	sxth	r4, r3
 800e636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	4623      	mov	r3, r4
 800e63c:	f009 ff66 	bl	801850c <lv_img_decoder_read_line>
 800e640:	4603      	mov	r3, r0
 800e642:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(read_res != LV_RES_OK) {
 800e646:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d00b      	beq.n	800e666 <lv_img_draw_core+0x26e>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800e64e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e650:	4618      	mov	r0, r3
 800e652:	f009 ff87 	bl	8018564 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                _lv_mem_buf_release(buf);
 800e656:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e658:	f00e fa58 	bl	801cb0c <_lv_mem_buf_release>
                draw_cleanup(cdsc);
 800e65c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e65e:	f000 fd01 	bl	800f064 <draw_cleanup>
                return LV_RES_INV;
 800e662:	2300      	movs	r3, #0
            return LV_RES_OK;
 800e664:	e030      	b.n	800e6c8 <lv_img_draw_core+0x2d0>
            }

            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800e666:	f107 0114 	add.w	r1, r7, #20
 800e66a:	f107 001c 	add.w	r0, r7, #28
 800e66e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e672:	9301      	str	r3, [sp, #4]
 800e674:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e67e:	f000 f827 	bl	800e6d0 <lv_draw_map>
            line.y1++;
 800e682:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e686:	b29b      	uxth	r3, r3
 800e688:	3301      	adds	r3, #1
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	b21b      	sxth	r3, r3
 800e68e:	83fb      	strh	r3, [r7, #30]
            line.y2++;
 800e690:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e694:	b29b      	uxth	r3, r3
 800e696:	3301      	adds	r3, #1
 800e698:	b29b      	uxth	r3, r3
 800e69a:	b21b      	sxth	r3, r3
 800e69c:	847b      	strh	r3, [r7, #34]	; 0x22
            y++;
 800e69e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	667b      	str	r3, [r7, #100]	; 0x64
 800e6a4:	e000      	b.n	800e6a8 <lv_img_draw_core+0x2b0>
            if(union_ok == false) continue;
 800e6a6:	bf00      	nop
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800e6a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	663b      	str	r3, [r7, #96]	; 0x60
 800e6ae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	dda4      	ble.n	800e604 <lv_img_draw_core+0x20c>
        }
        _lv_mem_buf_release(buf);
 800e6ba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e6bc:	f00e fa26 	bl	801cb0c <_lv_mem_buf_release>
    }

    draw_cleanup(cdsc);
 800e6c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e6c2:	f000 fccf 	bl	800f064 <draw_cleanup>
    return LV_RES_OK;
 800e6c6:	2301      	movs	r3, #1
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3768      	adds	r7, #104	; 0x68
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bdb0      	pop	{r4, r5, r7, pc}

0800e6d0 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
 800e6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6d2:	b0c3      	sub	sp, #268	; 0x10c
 800e6d4:	af04      	add	r7, sp, #16
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
 800e6dc:	603b      	str	r3, [r7, #0]
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);
 800e6de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e6e2:	68b9      	ldr	r1, [r7, #8]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7ff fbcb 	bl	800de80 <lv_area_copy>

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800e6ea:	f7fb fe21 	bl	800a330 <_lv_refr_get_disp_refreshing>
 800e6ee:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800e6f2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800e6f6:	f00b ff0b 	bl	801a510 <lv_disp_get_buf>
 800e6fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    const lv_area_t * disp_area = &vdb->area;
 800e6fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e702:	3310      	adds	r3, #16
 800e704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800e708:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e712:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e716:	b29b      	uxth	r3, r3
 800e718:	1ad3      	subs	r3, r2, r3
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	b21b      	sxth	r3, r3
 800e71e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    draw_area.y1 -= disp_area->y1;
 800e722:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e726:	b29a      	uxth	r2, r3
 800e728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e72c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e730:	b29b      	uxth	r3, r3
 800e732:	1ad3      	subs	r3, r2, r3
 800e734:	b29b      	uxth	r3, r3
 800e736:	b21b      	sxth	r3, r3
 800e738:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    draw_area.x2 -= disp_area->x1;
 800e73c:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 800e740:	b29a      	uxth	r2, r3
 800e742:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	b29b      	uxth	r3, r3
 800e750:	b21b      	sxth	r3, r3
 800e752:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    draw_area.y2 -= disp_area->y1;
 800e756:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800e75a:	b29a      	uxth	r2, r3
 800e75c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e760:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e764:	b29b      	uxth	r3, r3
 800e766:	1ad3      	subs	r3, r2, r3
 800e768:	b29b      	uxth	r3, r3
 800e76a:	b21b      	sxth	r3, r3
 800e76c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800e770:	f003 fa86 	bl	8011c80 <lv_draw_mask_get_cnt>
 800e774:	4603      	mov	r3, r0
 800e776:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 800e77a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d12a      	bne.n	800e7d8 <lv_draw_map+0x108>
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	885b      	ldrh	r3, [r3, #2]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d126      	bne.n	800e7d8 <lv_draw_map+0x108>
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	891b      	ldrh	r3, [r3, #8]
 800e78e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e792:	d121      	bne.n	800e7d8 <lv_draw_map+0x108>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800e794:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800e798:	f083 0301 	eor.w	r3, r3, #1
 800e79c:	b2db      	uxtb	r3, r3
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d01a      	beq.n	800e7d8 <lv_draw_map+0x108>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800e7a2:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800e7a6:	f083 0301 	eor.w	r3, r3, #1
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d013      	beq.n	800e7d8 <lv_draw_map+0x108>
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	7a9b      	ldrb	r3, [r3, #10]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10f      	bne.n	800e7d8 <lv_draw_map+0x108>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	683a      	ldr	r2, [r7, #0]
 800e7be:	7c12      	ldrb	r2, [r2, #16]
 800e7c0:	9202      	str	r2, [sp, #8]
 800e7c2:	9301      	str	r3, [sp, #4]
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	68f9      	ldr	r1, [r7, #12]
 800e7ce:	68b8      	ldr	r0, [r7, #8]
 800e7d0:	f7fe f85d 	bl	800c88e <_lv_blend_map>
 800e7d4:	f000 bc12 	b.w	800effc <lv_draw_map+0x92c>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800e7d8:	2304      	movs	r3, #4
 800e7da:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
 800e7de:	68f8      	ldr	r0, [r7, #12]
 800e7e0:	f7ff fb5c 	bl	800de9c <lv_area_get_width>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        const uint8_t * map_buf_tmp = map_p;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800e7f0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e802:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e806:	1acb      	subs	r3, r1, r3
 800e808:	1ad3      	subs	r3, r2, r3
 800e80a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e80e:	fb02 f303 	mul.w	r3, r2, r3
 800e812:	f897 20ca 	ldrb.w	r2, [r7, #202]	; 0xca
 800e816:	fb02 f303 	mul.w	r3, r2, r3
 800e81a:	461a      	mov	r2, r3
 800e81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e820:	4413      	add	r3, r2
 800e822:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800e826:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800e82a:	461a      	mov	r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e832:	4619      	mov	r1, r3
 800e834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e83c:	1acb      	subs	r3, r1, r3
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	f897 20ca 	ldrb.w	r2, [r7, #202]	; 0xca
 800e844:	fb02 f303 	mul.w	r3, r2, r3
 800e848:	461a      	mov	r2, r3
 800e84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e84e:	4413      	add	r3, r2
 800e850:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        lv_color_t c;
        lv_color_t chroma_keyed_color = LV_COLOR_TRANSP;
 800e854:	2300      	movs	r3, #0
 800e856:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 800e85a:	23ff      	movs	r3, #255	; 0xff
 800e85c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 800e860:	2300      	movs	r3, #0
 800e862:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800e866:	23ff      	movs	r3, #255	; 0xff
 800e868:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        uint32_t px_i = 0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 800e872:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800e876:	b29a      	uxth	r2, r3
 800e878:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e87c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e880:	b29b      	uxth	r3, r3
 800e882:	4413      	add	r3, r2
 800e884:	b29b      	uxth	r3, r3
 800e886:	b21b      	sxth	r3, r3
 800e888:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800e88c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e890:	b29c      	uxth	r4, r3
 800e892:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e896:	4618      	mov	r0, r3
 800e898:	f7ff fb00 	bl	800de9c <lv_area_get_width>
 800e89c:	4603      	mov	r3, r0
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	4423      	add	r3, r4
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	b21b      	sxth	r3, r3
 800e8aa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 800e8ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e8b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	4413      	add	r3, r2
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	b21b      	sxth	r3, r3
 800e8c4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        blend_area.y2 = blend_area.y1;
 800e8c8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e8cc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
 800e8d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7ff faf8 	bl	800deca <lv_area_get_height>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);
 800e8e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7ff fad9 	bl	800de9c <lv_area_get_width>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	885b      	ldrh	r3, [r3, #2]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d104      	bne.n	800e902 <lv_draw_map+0x232>
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	891b      	ldrh	r3, [r3, #8]
 800e8fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e900:	d001      	beq.n	800e906 <lv_draw_map+0x236>
 800e902:	2301      	movs	r3, #1
 800e904:	e000      	b.n	800e908 <lv_draw_map+0x238>
 800e906:	2300      	movs	r3, #0
 800e908:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800e90c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800e910:	f003 0301 	and.w	r3, r3, #1
 800e914:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 800e918:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f040 8101 	bne.w	800eb24 <lv_draw_map+0x454>
 800e922:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800e926:	f083 0301 	eor.w	r3, r3, #1
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	f000 80f9 	beq.w	800eb24 <lv_draw_map+0x454>
 800e932:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800e936:	f083 0301 	eor.w	r3, r3, #1
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 80f1 	beq.w	800eb24 <lv_draw_map+0x454>
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	7a9b      	ldrb	r3, [r3, #10]
 800e946:	2b00      	cmp	r3, #0
 800e948:	f040 80ec 	bne.w	800eb24 <lv_draw_map+0x454>
 800e94c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800e950:	2b00      	cmp	r3, #0
 800e952:	f000 80e7 	beq.w	800eb24 <lv_draw_map+0x454>
                lv_gpu_stm32_dma2d_blend(disp_buf_first, disp_w, (const lv_color_t *)map_buf_tmp, draw_dsc->opa, map_w, draw_area_w,
                                         draw_area_h);
                return;
            }
#endif
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800e956:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800e95a:	f00b fd19 	bl	801a390 <lv_disp_get_hor_res>
 800e95e:	4603      	mov	r3, r0
 800e960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 800e964:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e968:	4618      	mov	r0, r3
 800e96a:	f00c fa88 	bl	801ae7e <lv_area_get_size>
 800e96e:	4602      	mov	r2, r0
 800e970:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e974:	4293      	cmp	r3, r2
 800e976:	d306      	bcc.n	800e986 <lv_draw_map+0x2b6>
 800e978:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e97c:	4618      	mov	r0, r3
 800e97e:	f00c fa7e 	bl	801ae7e <lv_area_get_size>
 800e982:	4603      	mov	r3, r0
 800e984:	e001      	b.n	800e98a <lv_draw_map+0x2ba>
 800e986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e98a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800e98e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	4618      	mov	r0, r3
 800e996:	f00d ffdb 	bl	801c950 <_lv_mem_buf_get>
 800e99a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800e99e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800e9a2:	f00d ffd5 	bl	801c950 <_lv_mem_buf_get>
 800e9a6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

            int32_t x;
            int32_t y;
            for(y = 0; y < draw_area_h; y++) {
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e9b0:	e089      	b.n	800eac6 <lv_draw_map+0x3f6>
                map_px = map_buf_tmp;
 800e9b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e9c0:	e033      	b.n	800ea2a <lv_draw_map+0x35a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800e9c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e9c6:	78db      	ldrb	r3, [r3, #3]
 800e9c8:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
                    mask_buf[px_i] = px_opa;
 800e9cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e9d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e9d4:	4413      	add	r3, r2
 800e9d6:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800e9da:	701a      	strb	r2, [r3, #0]
                    if(px_opa) {
 800e9dc:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d009      	beq.n	800e9f8 <lv_draw_map+0x328>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                        map2[px_i].full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
#elif LV_COLOR_DEPTH == 32
                        map2[px_i].full =  *((uint32_t *)map_px);
 800e9e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e9ee:	4413      	add	r3, r2
 800e9f0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e9f4:	6812      	ldr	r2, [r2, #0]
 800e9f6:	601a      	str	r2, [r3, #0]
#endif
                    }
#if LV_COLOR_DEPTH == 32
                    map2[px_i].ch.alpha = 0xFF;
 800e9f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ea02:	4413      	add	r3, r2
 800ea04:	22ff      	movs	r2, #255	; 0xff
 800ea06:	70da      	strb	r2, [r3, #3]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800ea08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ea12:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800ea16:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ea1a:	4413      	add	r3, r2
 800ea1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ea20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea24:	3301      	adds	r3, #1
 800ea26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ea2a:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800ea2e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ea32:	429a      	cmp	r2, r3
 800ea34:	dbc5      	blt.n	800e9c2 <lv_draw_map+0x2f2>
#endif
                }

                map_buf_tmp += map_w * px_size_byte;
 800ea36:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800ea3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea3e:	fb02 f303 	mul.w	r3, r2, r3
 800ea42:	461a      	mov	r2, r3
 800ea44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea48:	4413      	add	r3, r2
 800ea4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800ea4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7ff fa22 	bl	800de9c <lv_area_get_width>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea60:	4413      	add	r3, r2
 800ea62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d908      	bls.n	800ea7c <lv_draw_map+0x3ac>
                    blend_area.y2 ++;
 800ea6a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	3301      	adds	r3, #1
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	b21b      	sxth	r3, r3
 800ea76:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800ea7a:	e01f      	b.n	800eabc <lv_draw_map+0x3ec>
                }
                else {
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	683a      	ldr	r2, [r7, #0]
 800ea82:	7c12      	ldrb	r2, [r2, #16]
 800ea84:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800ea88:	9202      	str	r2, [sp, #8]
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ea98:	68b8      	ldr	r0, [r7, #8]
 800ea9a:	f7fd fef8 	bl	800c88e <_lv_blend_map>

                    blend_area.y1 = blend_area.y2 + 1;
 800ea9e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	b21b      	sxth	r3, r3
 800eaaa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    blend_area.y2 = blend_area.y1;
 800eaae:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800eab2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

                    px_i = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            for(y = 0; y < draw_area_h; y++) {
 800eabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eac0:	3301      	adds	r3, #1
 800eac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eac6:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800eaca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800eace:	429a      	cmp	r2, r3
 800ead0:	f6ff af6f 	blt.w	800e9b2 <lv_draw_map+0x2e2>
                }
            }
            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
 800ead4:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800ead8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800eadc:	429a      	cmp	r2, r3
 800eade:	d018      	beq.n	800eb12 <lv_draw_map+0x442>
                blend_area.y2--;
 800eae0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	3b01      	subs	r3, #1
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	b21b      	sxth	r3, r3
 800eaec:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	683a      	ldr	r2, [r7, #0]
 800eaf6:	7c12      	ldrb	r2, [r2, #16]
 800eaf8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800eafc:	9202      	str	r2, [sp, #8]
 800eafe:	9301      	str	r3, [sp, #4]
 800eb00:	2302      	movs	r3, #2
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eb08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eb0c:	68b8      	ldr	r0, [r7, #8]
 800eb0e:	f7fd febe 	bl	800c88e <_lv_blend_map>
            }

            _lv_mem_buf_release(mask_buf);
 800eb12:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800eb16:	f00d fff9 	bl	801cb0c <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 800eb1a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800eb1e:	f00d fff5 	bl	801cb0c <_lv_mem_buf_release>
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 800eb22:	e26b      	b.n	800effc <lv_draw_map+0x92c>
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800eb24:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800eb28:	f00b fc32 	bl	801a390 <lv_disp_get_hor_res>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800eb32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eb36:	4618      	mov	r0, r3
 800eb38:	f00c f9a1 	bl	801ae7e <lv_area_get_size>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d306      	bcc.n	800eb54 <lv_draw_map+0x484>
 800eb46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f00c f997 	bl	801ae7e <lv_area_get_size>
 800eb50:	4603      	mov	r3, r0
 800eb52:	e001      	b.n	800eb58 <lv_draw_map+0x488>
 800eb54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eb58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800eb5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	4618      	mov	r0, r3
 800eb64:	f00d fef4 	bl	801c950 <_lv_mem_buf_get>
 800eb68:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800eb6c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800eb70:	f00d feee 	bl	801c950 <_lv_mem_buf_get>
 800eb74:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800eb78:	f107 0310 	add.w	r3, r7, #16
 800eb7c:	2154      	movs	r1, #84	; 0x54
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f00e faef 	bl	801d162 <_lv_memset_00>
            if(transform) {
 800eb84:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d043      	beq.n	800ec14 <lv_draw_map+0x544>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
 800eb8c:	2304      	movs	r3, #4
 800eb8e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800eb92:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d003      	beq.n	800eba2 <lv_draw_map+0x4d2>
 800eb9a:	2305      	movs	r3, #5
 800eb9c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 800eba0:	e006      	b.n	800ebb0 <lv_draw_map+0x4e0>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800eba2:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d002      	beq.n	800ebb0 <lv_draw_map+0x4e0>
 800ebaa:	2306      	movs	r3, #6
 800ebac:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3

                trans_dsc.cfg.angle = draw_dsc->angle;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	885b      	ldrh	r3, [r3, #2]
 800ebb4:	b21b      	sxth	r3, r3
 800ebb6:	83bb      	strh	r3, [r7, #28]
                trans_dsc.cfg.zoom = draw_dsc->zoom;
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	891b      	ldrh	r3, [r3, #8]
 800ebbc:	83fb      	strh	r3, [r7, #30]
                trans_dsc.cfg.src = map_p;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	613b      	str	r3, [r7, #16]
                trans_dsc.cfg.src_w = map_w;
 800ebc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ebc6:	b21b      	sxth	r3, r3
 800ebc8:	82bb      	strh	r3, [r7, #20]
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f7ff f97d 	bl	800deca <lv_area_get_height>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	82fb      	strh	r3, [r7, #22]
                trans_dsc.cfg.cf = cf;
 800ebd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ebd8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ebe2:	833b      	strh	r3, [r7, #24]
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ebea:	837b      	strh	r3, [r7, #26]
                trans_dsc.cfg.color = draw_dsc->recolor;
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	623b      	str	r3, [r7, #32]
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	7c5b      	ldrb	r3, [r3, #17]
 800ebf6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	bf14      	ite	ne
 800ec00:	2301      	movne	r3, #1
 800ec02:	2300      	moveq	r3, #0
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

                _lv_img_buf_transform_init(&trans_dsc);
 800ec0a:	f107 0310 	add.w	r3, r7, #16
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f008 fbae 	bl	8017370 <_lv_img_buf_transform_init>
            }
#endif
            uint16_t recolor_premult[3] = {0};
 800ec14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	809a      	strh	r2, [r3, #4]
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	7a9b      	ldrb	r3, [r3, #10]
 800ec22:	43db      	mvns	r3, r3
 800ec24:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
            if(draw_dsc->recolor_opa != 0) {
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	7a9b      	ldrb	r3, [r3, #10]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d007      	beq.n	800ec40 <lv_draw_map+0x570>
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	7a99      	ldrb	r1, [r3, #10]
 800ec34:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	68d8      	ldr	r0, [r3, #12]
 800ec3c:	f7ff f88c 	bl	800dd58 <lv_color_premult>
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ec40:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d10c      	bne.n	800ec62 <lv_draw_map+0x592>
 800ec48:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d108      	bne.n	800ec62 <lv_draw_map+0x592>
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	885b      	ldrh	r3, [r3, #2]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d104      	bne.n	800ec62 <lv_draw_map+0x592>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	891b      	ldrh	r3, [r3, #8]
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ec5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec60:	d001      	beq.n	800ec66 <lv_draw_map+0x596>
 800ec62:	2302      	movs	r3, #2
 800ec64:	e000      	b.n	800ec68 <lv_draw_map+0x598>
 800ec66:	2301      	movs	r3, #1
 800ec68:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
 800ec6c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d005      	beq.n	800ec80 <lv_draw_map+0x5b0>
                _lv_memset_ff(mask_buf, mask_buf_size);
 800ec74:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ec78:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ec7c:	f00e faf1 	bl	801d262 <_lv_memset_ff>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
 800ec80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ec84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ec88:	461a      	mov	r2, r3
 800ec8a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800ec8e:	4413      	add	r3, r2
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ec96:	1a9b      	subs	r3, r3, r2
 800ec98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#endif
            for(y = 0; y < draw_area_h; y++) {
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eca2:	e17c      	b.n	800ef9e <lv_draw_map+0x8ce>
                map_px = map_buf_tmp;
 800eca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eca8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                uint32_t px_i_start = px_i;
 800ecac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ecb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

#if LV_USE_IMG_TRANSFORM
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 800ecb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ecb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800ecc2:	4413      	add	r3, r2
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ecca:	1a9b      	subs	r3, r3, r2
 800eccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ecd6:	e0a2      	b.n	800ee1e <lv_draw_map+0x74e>

#if LV_USE_IMG_TRANSFORM
                    if(transform) {
 800ecd8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d033      	beq.n	800ed48 <lv_draw_map+0x678>

                        /*Transform*/
                        bool ret;
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 800ece0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	4413      	add	r3, r2
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	b219      	sxth	r1, r3
 800ecf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	4413      	add	r3, r2
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	b21a      	sxth	r2, r3
 800ed04:	f107 0310 	add.w	r3, r7, #16
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7ff f8f5 	bl	800def8 <_lv_img_buf_transform>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                        if(ret == false) {
 800ed14:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800ed18:	f083 0301 	eor.w	r3, r3, #1
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d007      	beq.n	800ed32 <lv_draw_map+0x662>
                            mask_buf[px_i] = LV_OPA_TRANSP;
 800ed22:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ed26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed2a:	4413      	add	r3, r2
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	701a      	strb	r2, [r3, #0]
                            continue;
 800ed30:	e064      	b.n	800edfc <lv_draw_map+0x72c>
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
 800ed32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ed36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed3a:	4413      	add	r3, r2
 800ed3c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ed40:	701a      	strb	r2, [r3, #0]
                            c.full = trans_dsc.res.color.full;
 800ed42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed44:	67bb      	str	r3, [r7, #120]	; 0x78
 800ed46:	e043      	b.n	800edd0 <lv_draw_map+0x700>
                    }
                    /*No transform*/
                    else
#endif
                    {
                        if(alpha_byte) {
 800ed48:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d019      	beq.n	800ed84 <lv_draw_map+0x6b4>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800ed50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ed54:	78db      	ldrb	r3, [r3, #3]
 800ed56:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                            mask_buf[px_i] = px_opa;
 800ed5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ed5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed62:	4413      	add	r3, r2
 800ed64:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800ed68:	701a      	strb	r2, [r3, #0]
                            if(px_opa == 0) {
 800ed6a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10f      	bne.n	800ed92 <lv_draw_map+0x6c2>
#if LV_COLOR_DEPTH == 32
                                map2[px_i].full = 0;
 800ed72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ed7c:	4413      	add	r3, r2
 800ed7e:	2200      	movs	r2, #0
 800ed80:	601a      	str	r2, [r3, #0]
#endif
                                continue;
 800ed82:	e03b      	b.n	800edfc <lv_draw_map+0x72c>
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
 800ed84:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ed88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed8c:	4413      	add	r3, r2
 800ed8e:	22ff      	movs	r2, #255	; 0xff
 800ed90:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
 800ed92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	67bb      	str	r3, [r7, #120]	; 0x78
                        c.ch.alpha = 0xFF;
 800ed9a:	23ff      	movs	r3, #255	; 0xff
 800ed9c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
#endif
                        if(chroma_key) {
 800eda0:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d013      	beq.n	800edd0 <lv_draw_map+0x700>
                            if(c.full == chroma_keyed_color.full) {
 800eda8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800edaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edac:	429a      	cmp	r2, r3
 800edae:	d10f      	bne.n	800edd0 <lv_draw_map+0x700>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 800edb0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800edb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800edb8:	4413      	add	r3, r2
 800edba:	2200      	movs	r2, #0
 800edbc:	701a      	strb	r2, [r3, #0]
#if LV_COLOR_DEPTH == 32
                                map2[px_i].full = 0;
 800edbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800edc8:	4413      	add	r3, r2
 800edca:	2200      	movs	r2, #0
 800edcc:	601a      	str	r2, [r3, #0]
#endif
                                continue;
 800edce:	e015      	b.n	800edfc <lv_draw_map+0x72c>
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	7a9b      	ldrb	r3, [r3, #10]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d009      	beq.n	800edec <lv_draw_map+0x71c>
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
 800edd8:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800eddc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ede0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7fe ffe2 	bl	800ddac <lv_color_mix_premult>
 800ede8:	4603      	mov	r3, r0
 800edea:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    map2[px_i].full = c.full;
 800edec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800edf6:	4413      	add	r3, r2
 800edf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800edfa:	601a      	str	r2, [r3, #0]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800edfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee00:	3301      	adds	r3, #1
 800ee02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ee06:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800ee0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ee0e:	4413      	add	r3, r2
 800ee10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ee14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ee18:	3301      	adds	r3, #1
 800ee1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ee1e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800ee22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ee26:	429a      	cmp	r2, r3
 800ee28:	f6ff af56 	blt.w	800ecd8 <lv_draw_map+0x608>
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
 800ee2c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d04b      	beq.n	800eecc <lv_draw_map+0x7fc>
                    lv_draw_mask_res_t mask_res_sub;
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
 800ee34:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ee38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee3c:	18d4      	adds	r4, r2, r3
 800ee3e:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ee48:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	4413      	add	r3, r2
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	b21d      	sxth	r5, r3
 800ee54:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800ee58:	b29a      	uxth	r2, r3
 800ee5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	4413      	add	r3, r2
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ee68:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	4413      	add	r3, r2
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	b21e      	sxth	r6, r3
 800ee74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7ff f80f 	bl	800de9c <lv_area_get_width>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	4632      	mov	r2, r6
 800ee82:	4629      	mov	r1, r5
 800ee84:	4620      	mov	r0, r4
 800ee86:	f002 fe5f 	bl	8011b48 <lv_draw_mask_apply>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                                                      lv_area_get_width(&draw_area));
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 800ee90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d112      	bne.n	800eebe <lv_draw_map+0x7ee>
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 800ee98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ee9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eea0:	18d4      	adds	r4, r2, r3
 800eea2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fe fff8 	bl	800de9c <lv_area_get_width>
 800eeac:	4603      	mov	r3, r0
 800eeae:	4619      	mov	r1, r3
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f00e f956 	bl	801d162 <_lv_memset_00>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800eeb6:	2302      	movs	r3, #2
 800eeb8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800eebc:	e006      	b.n	800eecc <lv_draw_map+0x7fc>
                    }
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
 800eebe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800eec2:	2b02      	cmp	r3, #2
 800eec4:	d102      	bne.n	800eecc <lv_draw_map+0x7fc>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800eec6:	2302      	movs	r3, #2
 800eec8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
 800eecc:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800eed0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800eed4:	fb02 f303 	mul.w	r3, r2, r3
 800eed8:	461a      	mov	r2, r3
 800eeda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eede:	4413      	add	r3, r2
 800eee0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800eee4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fe ffd7 	bl	800de9c <lv_area_get_width>
 800eeee:	4603      	mov	r3, r0
 800eef0:	461a      	mov	r2, r3
 800eef2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800eef6:	4413      	add	r3, r2
 800eef8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d908      	bls.n	800ef12 <lv_draw_map+0x842>
                    blend_area.y2 ++;
 800ef00:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	3301      	adds	r3, #1
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	b21b      	sxth	r3, r3
 800ef0c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800ef10:	e040      	b.n	800ef94 <lv_draw_map+0x8c4>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	7c12      	ldrb	r2, [r2, #16]
 800ef1a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800ef1e:	9202      	str	r2, [sp, #8]
 800ef20:	9301      	str	r3, [sp, #4]
 800ef22:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef2c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ef30:	68b8      	ldr	r0, [r7, #8]
 800ef32:	f7fd fcac 	bl	800c88e <_lv_blend_map>

                    blend_area.y1 = blend_area.y2 + 1;
 800ef36:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	b21b      	sxth	r3, r3
 800ef42:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    blend_area.y2 = blend_area.y1;
 800ef46:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ef4a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

                    px_i = 0;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ef54:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10c      	bne.n	800ef76 <lv_draw_map+0x8a6>
 800ef5c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d108      	bne.n	800ef76 <lv_draw_map+0x8a6>
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	885b      	ldrh	r3, [r3, #2]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d104      	bne.n	800ef76 <lv_draw_map+0x8a6>
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	891b      	ldrh	r3, [r3, #8]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ef70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef74:	d001      	beq.n	800ef7a <lv_draw_map+0x8aa>
 800ef76:	2302      	movs	r3, #2
 800ef78:	e000      	b.n	800ef7c <lv_draw_map+0x8ac>
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
 800ef80:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d005      	beq.n	800ef94 <lv_draw_map+0x8c4>
                        _lv_memset_ff(mask_buf, mask_buf_size);
 800ef88:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ef8c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ef90:	f00e f967 	bl	801d262 <_lv_memset_ff>
            for(y = 0; y < draw_area_h; y++) {
 800ef94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef98:	3301      	adds	r3, #1
 800ef9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ef9e:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800efa2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800efa6:	429a      	cmp	r2, r3
 800efa8:	f6ff ae7c 	blt.w	800eca4 <lv_draw_map+0x5d4>
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
 800efac:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800efb0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d019      	beq.n	800efec <lv_draw_map+0x91c>
                blend_area.y2--;
 800efb8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	3b01      	subs	r3, #1
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	b21b      	sxth	r3, r3
 800efc4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	683a      	ldr	r2, [r7, #0]
 800efce:	7c12      	ldrb	r2, [r2, #16]
 800efd0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800efd4:	9202      	str	r2, [sp, #8]
 800efd6:	9301      	str	r3, [sp, #4]
 800efd8:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800efe2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800efe6:	68b8      	ldr	r0, [r7, #8]
 800efe8:	f7fd fc51 	bl	800c88e <_lv_blend_map>
            }

            _lv_mem_buf_release(mask_buf);
 800efec:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800eff0:	f00d fd8c 	bl	801cb0c <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 800eff4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800eff8:	f00d fd88 	bl	801cb0c <_lv_mem_buf_release>
        }
    }
}
 800effc:	bf00      	nop
 800effe:	37fc      	adds	r7, #252	; 0xfc
 800f000:	46bd      	mov	sp, r7
 800f002:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f004 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b0aa      	sub	sp, #168	; 0xa8
 800f008:	af02      	add	r7, sp, #8
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800f010:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f014:	4618      	mov	r0, r3
 800f016:	f004 f9a3 	bl	8013360 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800f01a:	23ff      	movs	r3, #255	; 0xff
 800f01c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800f020:	23ff      	movs	r3, #255	; 0xff
 800f022:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800f026:	23ff      	movs	r3, #255	; 0xff
 800f028:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800f02c:	23ff      	movs	r3, #255	; 0xff
 800f02e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800f032:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f036:	461a      	mov	r2, r3
 800f038:	68b9      	ldr	r1, [r7, #8]
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f004 fa14 	bl	8013468 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800f040:	f107 0310 	add.w	r3, r7, #16
 800f044:	4618      	mov	r0, r3
 800f046:	f000 f879 	bl	800f13c <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 800f04a:	f107 0210 	add.w	r2, r7, #16
 800f04e:	2300      	movs	r3, #0
 800f050:	9300      	str	r3, [sp, #0]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	68b9      	ldr	r1, [r7, #8]
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f000 f8b4 	bl	800f1c4 <lv_draw_label>
}
 800f05c:	bf00      	nop
 800f05e:	37a0      	adds	r7, #160	; 0xa0
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <draw_cleanup>:

static void draw_cleanup(lv_img_cache_entry_t * cache)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
#else
    LV_UNUSED(cache);
#endif
}
 800f06c:	bf00      	nop
 800f06e:	370c      	adds	r7, #12
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr

0800f078 <_lv_memcpy_small>:
{
 800f078:	b480      	push	{r7}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	613b      	str	r3, [r7, #16]
    while(len) {
 800f08c:	e00c      	b.n	800f0a8 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	781a      	ldrb	r2, [r3, #0]
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	701a      	strb	r2, [r3, #0]
        d8++;
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	3301      	adds	r3, #1
 800f09a:	617b      	str	r3, [r7, #20]
        s8++;
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	613b      	str	r3, [r7, #16]
        len--;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	3b01      	subs	r3, #1
 800f0a6:	607b      	str	r3, [r7, #4]
    while(len) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d1ef      	bne.n	800f08e <_lv_memcpy_small+0x16>
    return dst;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	371c      	adds	r7, #28
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <lv_area_get_width>:
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	1ad3      	subs	r3, r2, r3
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	3301      	adds	r3, #1
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	b21b      	sxth	r3, r3
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	370c      	adds	r7, #12
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e8:	4770      	bx	lr

0800f0ea <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 800f0ea:	b480      	push	{r7}
 800f0ec:	b083      	sub	sp, #12
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr

0800f104 <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 800f104:	b490      	push	{r4, r7}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	4604      	mov	r4, r0
 800f10c:	4608      	mov	r0, r1
 800f10e:	4611      	mov	r1, r2
 800f110:	4622      	mov	r2, r4
 800f112:	71fa      	strb	r2, [r7, #7]
 800f114:	4602      	mov	r2, r0
 800f116:	71ba      	strb	r2, [r7, #6]
 800f118:	460a      	mov	r2, r1
 800f11a:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 800f11c:	797a      	ldrb	r2, [r7, #5]
 800f11e:	f362 0307 	bfi	r3, r2, #0, #8
 800f122:	79ba      	ldrb	r2, [r7, #6]
 800f124:	f362 230f 	bfi	r3, r2, #8, #8
 800f128:	79fa      	ldrb	r2, [r7, #7]
 800f12a:	f362 4317 	bfi	r3, r2, #16, #8
 800f12e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 800f132:	4618      	mov	r0, r3
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bc90      	pop	{r4, r7}
 800f13a:	4770      	bx	lr

0800f13c <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800f144:	2128      	movs	r1, #40	; 0x28
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f00e f80b 	bl	801d162 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	22ff      	movs	r2, #255	; 0xff
 800f150:	741a      	strb	r2, [r3, #16]
    dsc->color = LV_COLOR_BLACK;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2200      	movs	r2, #0
 800f156:	701a      	strb	r2, [r3, #0]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	705a      	strb	r2, [r3, #1]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2200      	movs	r2, #0
 800f162:	709a      	strb	r2, [r3, #2]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	22ff      	movs	r2, #255	; 0xff
 800f168:	70da      	strb	r2, [r3, #3]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	4a14      	ldr	r2, [pc, #80]	; (800f1c0 <lv_draw_label_dsc_init+0x84>)
 800f16e:	60da      	str	r2, [r3, #12]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f176:	619a      	str	r2, [r3, #24]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f17e:	61da      	str	r2, [r3, #28]
    dsc->sel_color = LV_COLOR_BLACK;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2200      	movs	r2, #0
 800f184:	711a      	strb	r2, [r3, #4]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	715a      	strb	r2, [r3, #5]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	719a      	strb	r2, [r3, #6]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	22ff      	movs	r2, #255	; 0xff
 800f196:	71da      	strb	r2, [r3, #7]
    dsc->sel_bg_color = LV_COLOR_BLUE;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	22ff      	movs	r2, #255	; 0xff
 800f19c:	721a      	strb	r2, [r3, #8]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	725a      	strb	r2, [r3, #9]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	729a      	strb	r2, [r3, #10]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	22ff      	movs	r2, #255	; 0xff
 800f1ae:	72da      	strb	r2, [r3, #11]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800f1b8:	bf00      	nop
 800f1ba:	3708      	adds	r7, #8
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	20000020 	.word	0x20000020

0800f1c4 <lv_draw_label>:
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask,
                                         const lv_draw_label_dsc_t * dsc,
                                         const char * txt,
                                         lv_draw_label_hint_t * hint)
{
 800f1c4:	b5b0      	push	{r4, r5, r7, lr}
 800f1c6:	b0ce      	sub	sp, #312	; 0x138
 800f1c8:	af04      	add	r7, sp, #16
 800f1ca:	f107 040c 	add.w	r4, r7, #12
 800f1ce:	6020      	str	r0, [r4, #0]
 800f1d0:	f107 0008 	add.w	r0, r7, #8
 800f1d4:	6001      	str	r1, [r0, #0]
 800f1d6:	1d39      	adds	r1, r7, #4
 800f1d8:	600a      	str	r2, [r1, #0]
 800f1da:	463a      	mov	r2, r7
 800f1dc:	6013      	str	r3, [r2, #0]

    if(dsc->opa <= LV_OPA_MIN) return;
 800f1de:	1d3b      	adds	r3, r7, #4
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	7c1b      	ldrb	r3, [r3, #16]
 800f1e4:	2b02      	cmp	r3, #2
 800f1e6:	f240 8507 	bls.w	800fbf8 <lv_draw_label+0xa34>
    const lv_font_t * font = dsc->font;
 800f1ea:	1d3b      	adds	r3, r7, #4
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt[0] == '\0')  return;
 800f1f4:	463b      	mov	r3, r7
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f000 84fe 	beq.w	800fbfc <lv_draw_label+0xa38>

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 800f200:	f107 0208 	add.w	r2, r7, #8
 800f204:	f107 030c 	add.w	r3, r7, #12
 800f208:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800f20c:	6812      	ldr	r2, [r2, #0]
 800f20e:	6819      	ldr	r1, [r3, #0]
 800f210:	f00b fe56 	bl	801aec0 <_lv_area_intersect>
 800f214:	4603      	mov	r3, r0
 800f216:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
    if(!clip_ok) return;
 800f21a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800f21e:	f083 0301 	eor.w	r3, r3, #1
 800f222:	b2db      	uxtb	r3, r3
 800f224:	2b00      	cmp	r3, #0
 800f226:	f040 84eb 	bne.w	800fc00 <lv_draw_label+0xa3c>

    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
 800f22a:	1d3b      	adds	r3, r7, #4
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f232:	f003 0302 	and.w	r3, r3, #2
 800f236:	2b00      	cmp	r3, #0
 800f238:	d108      	bne.n	800f24c <lv_draw_label+0x88>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 800f23a:	f107 030c 	add.w	r3, r7, #12
 800f23e:	6818      	ldr	r0, [r3, #0]
 800f240:	f7ff ff3c 	bl	800f0bc <lv_area_get_width>
 800f244:	4603      	mov	r3, r0
 800f246:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800f24a:	e01f      	b.n	800f28c <lv_draw_label+0xc8>
    }
    else {
        /*If EXAPND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800f24c:	1d3b      	adds	r3, r7, #4
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68dc      	ldr	r4, [r3, #12]
 800f252:	1d3b      	adds	r3, r7, #4
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f9b3 5014 	ldrsh.w	r5, [r3, #20]
 800f25a:	1d3b      	adds	r3, r7, #4
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f262:	1d3a      	adds	r2, r7, #4
 800f264:	6812      	ldr	r2, [r2, #0]
 800f266:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800f26a:	4639      	mov	r1, r7
 800f26c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f270:	9202      	str	r2, [sp, #8]
 800f272:	f647 4218 	movw	r2, #31768	; 0x7c18
 800f276:	9201      	str	r2, [sp, #4]
 800f278:	9300      	str	r3, [sp, #0]
 800f27a:	462b      	mov	r3, r5
 800f27c:	4622      	mov	r2, r4
 800f27e:	6809      	ldr	r1, [r1, #0]
 800f280:	f00e fbf0 	bl	801da64 <_lv_txt_get_size>
                         dsc->flag);
        w = p.x;
 800f284:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f288:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 800f28c:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800f290:	f7ff ff2b 	bl	800f0ea <lv_font_get_line_height>
 800f294:	4603      	mov	r3, r0
 800f296:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    int32_t line_height = line_height_font + dsc->line_space;
 800f29a:	1d3b      	adds	r3, r7, #4
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2a8:	4413      	add	r3, r2
 800f2aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /*Init variables for the first line*/
    int32_t line_width = 0;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    lv_point_t pos;
    pos.x = coords->x1;
 800f2b4:	f107 030c 	add.w	r3, r7, #12
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2be:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    pos.y = coords->y1;
 800f2c2:	f107 030c 	add.w	r3, r7, #12
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f2cc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

    int32_t x_ofs = 0;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int32_t y_ofs = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    x_ofs = dsc->ofs_x;
 800f2dc:	1d3b      	adds	r3, r7, #4
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800f2e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    y_ofs = dsc->ofs_y;
 800f2e8:	1d3b      	adds	r3, r7, #4
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f2f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    pos.y += y_ofs;
 800f2f4:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	4413      	add	r3, r2
 800f302:	b29b      	uxth	r3, r3
 800f304:	b21b      	sxth	r3, r3
 800f306:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

    uint32_t line_start     = 0;
 800f30a:	2300      	movs	r3, #0
 800f30c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    int32_t last_line_start = -1;
 800f310:	f04f 33ff 	mov.w	r3, #4294967295
 800f314:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800f318:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d028      	beq.n	800f372 <lv_draw_label+0x1ae>
 800f320:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f324:	2b00      	cmp	r3, #0
 800f326:	d124      	bne.n	800f372 <lv_draw_label+0x1ae>
 800f328:	f107 030c 	add.w	r3, r7, #12
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f332:	2b00      	cmp	r3, #0
 800f334:	da1d      	bge.n	800f372 <lv_draw_label+0x1ae>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800f336:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	f107 020c 	add.w	r2, r7, #12
 800f340:	6812      	ldr	r2, [r2, #0]
 800f342:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f346:	1a9b      	subs	r3, r3, r2
 800f348:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800f34c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800f350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f354:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f358:	005b      	lsls	r3, r3, #1
 800f35a:	429a      	cmp	r2, r3
 800f35c:	dd04      	ble.n	800f368 <lv_draw_label+0x1a4>
            hint->line_start = -1;
 800f35e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f362:	f04f 32ff 	mov.w	r2, #4294967295
 800f366:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 800f368:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 800f372:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f376:	2b00      	cmp	r3, #0
 800f378:	d013      	beq.n	800f3a2 <lv_draw_label+0x1de>
 800f37a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f37e:	2b00      	cmp	r3, #0
 800f380:	db0f      	blt.n	800f3a2 <lv_draw_label+0x1de>
        line_start = last_line_start;
 800f382:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f386:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        pos.y += hint->y;
 800f38a:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f38e:	b29a      	uxth	r2, r3
 800f390:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	b29b      	uxth	r3, r3
 800f398:	4413      	add	r3, r2
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	b21b      	sxth	r3, r3
 800f39e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800f3a2:	463b      	mov	r3, r7
 800f3a4:	681a      	ldr	r2, [r3, #0]
 800f3a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f3aa:	18d0      	adds	r0, r2, r3
 800f3ac:	1d3b      	adds	r3, r7, #4
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f3b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f3b8:	b219      	sxth	r1, r3
 800f3ba:	1d3b      	adds	r3, r7, #4
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800f3ca:	f00e fce5 	bl	801dd98 <_lv_txt_get_next_line>
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f3d4:	4413      	add	r3, r2
 800f3d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /*Go the first visible line*/
    while(pos.y + line_height_font < mask->y1) {
 800f3da:	e05b      	b.n	800f494 <lv_draw_label+0x2d0>
        /*Go to next line*/
        line_start = line_end;
 800f3dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f3e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800f3e4:	463b      	mov	r3, r7
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f3ec:	18d0      	adds	r0, r2, r3
 800f3ee:	1d3b      	adds	r3, r7, #4
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f3f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f3fa:	b219      	sxth	r1, r3
 800f3fc:	1d3b      	adds	r3, r7, #4
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	460b      	mov	r3, r1
 800f408:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800f40c:	f00e fcc4 	bl	801dd98 <_lv_txt_get_next_line>
 800f410:	4602      	mov	r2, r0
 800f412:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f416:	4413      	add	r3, r2
 800f418:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        pos.y += line_height;
 800f41c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f420:	b29a      	uxth	r2, r3
 800f422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f426:	b29b      	uxth	r3, r3
 800f428:	4413      	add	r3, r2
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	b21b      	sxth	r3, r3
 800f42e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800f432:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f436:	2b00      	cmp	r3, #0
 800f438:	d023      	beq.n	800f482 <lv_draw_label+0x2be>
 800f43a:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f43e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800f442:	db1e      	blt.n	800f482 <lv_draw_label+0x2be>
 800f444:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	da19      	bge.n	800f482 <lv_draw_label+0x2be>
            hint->line_start = line_start;
 800f44e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800f452:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f456:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 800f458:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f45c:	461a      	mov	r2, r3
 800f45e:	f107 030c 	add.w	r3, r7, #12
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f468:	1ad2      	subs	r2, r2, r3
 800f46a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f46e:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 800f470:	f107 030c 	add.w	r3, r7, #12
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f47a:	461a      	mov	r2, r3
 800f47c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f480:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 800f482:	463b      	mov	r3, r7
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f48a:	4413      	add	r3, r2
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f000 83b8 	beq.w	800fc04 <lv_draw_label+0xa40>
    while(pos.y + line_height_font < mask->y1) {
 800f494:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f498:	461a      	mov	r2, r3
 800f49a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f49e:	4413      	add	r3, r2
 800f4a0:	f107 0208 	add.w	r2, r7, #8
 800f4a4:	6812      	ldr	r2, [r2, #0]
 800f4a6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	db96      	blt.n	800f3dc <lv_draw_label+0x218>
    }

    /*Align to middle*/
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800f4ae:	1d3b      	adds	r3, r7, #4
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f4b6:	f003 0304 	and.w	r3, r3, #4
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d033      	beq.n	800f526 <lv_draw_label+0x362>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f4be:	463b      	mov	r3, r7
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f4c6:	18d0      	adds	r0, r2, r3
 800f4c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f4cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f4d0:	1ad1      	subs	r1, r2, r3
 800f4d2:	1d3b      	adds	r3, r7, #4
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f4da:	1d3b      	adds	r3, r7, #4
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f4e2:	9300      	str	r3, [sp, #0]
 800f4e4:	4613      	mov	r3, r2
 800f4e6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f4ea:	f00e fd13 	bl	801df14 <_lv_txt_get_width>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800f4f4:	f107 030c 	add.w	r3, r7, #12
 800f4f8:	6818      	ldr	r0, [r3, #0]
 800f4fa:	f7ff fddf 	bl	800f0bc <lv_area_get_width>
 800f4fe:	4603      	mov	r3, r0
 800f500:	461a      	mov	r2, r3
 800f502:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f506:	1ad3      	subs	r3, r2, r3
 800f508:	2b00      	cmp	r3, #0
 800f50a:	da00      	bge.n	800f50e <lv_draw_label+0x34a>
 800f50c:	3301      	adds	r3, #1
 800f50e:	105b      	asrs	r3, r3, #1
 800f510:	4619      	mov	r1, r3
 800f512:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f516:	b29a      	uxth	r2, r3
 800f518:	b28b      	uxth	r3, r1
 800f51a:	4413      	add	r3, r2
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	b21b      	sxth	r3, r3
 800f520:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f524:	e035      	b.n	800f592 <lv_draw_label+0x3ce>

    }
    /*Align to the right*/
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800f526:	1d3b      	adds	r3, r7, #4
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f52e:	f003 0308 	and.w	r3, r3, #8
 800f532:	2b00      	cmp	r3, #0
 800f534:	d02d      	beq.n	800f592 <lv_draw_label+0x3ce>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f536:	463b      	mov	r3, r7
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f53e:	18d0      	adds	r0, r2, r3
 800f540:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f544:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f548:	1ad1      	subs	r1, r2, r3
 800f54a:	1d3b      	adds	r3, r7, #4
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f552:	1d3b      	adds	r3, r7, #4
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	4613      	mov	r3, r2
 800f55e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f562:	f00e fcd7 	bl	801df14 <_lv_txt_get_width>
 800f566:	4603      	mov	r3, r0
 800f568:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        pos.x += lv_area_get_width(coords) - line_width;
 800f56c:	f107 030c 	add.w	r3, r7, #12
 800f570:	6818      	ldr	r0, [r3, #0]
 800f572:	f7ff fda3 	bl	800f0bc <lv_area_get_width>
 800f576:	4603      	mov	r3, r0
 800f578:	461a      	mov	r2, r3
 800f57a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f57e:	1ad3      	subs	r3, r2, r3
 800f580:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f584:	b292      	uxth	r2, r2
 800f586:	b29b      	uxth	r3, r3
 800f588:	4413      	add	r3, r2
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	b21b      	sxth	r3, r3
 800f58e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    }

    lv_opa_t opa = dsc->opa;
 800f592:	1d3b      	adds	r3, r7, #4
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	7c1b      	ldrb	r3, [r3, #16]
 800f598:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

    uint32_t sel_start = dsc->sel_start;
 800f59c:	1d3b      	adds	r3, r7, #4
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	699b      	ldr	r3, [r3, #24]
 800f5a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    uint32_t sel_end = dsc->sel_end;
 800f5a6:	1d3b      	adds	r3, r7, #4
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	69db      	ldr	r3, [r3, #28]
 800f5ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if(sel_start > sel_end) {
 800f5b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f5b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d90b      	bls.n	800f5d4 <lv_draw_label+0x410>
        uint32_t tmp = sel_start;
 800f5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        sel_start = sel_end;
 800f5c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f5c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        sel_end = tmp;
 800f5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800f5d4:	1d3b      	adds	r3, r7, #4
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f5dc:	f003 0301 	and.w	r3, r3, #1
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d107      	bne.n	800f5f4 <lv_draw_label+0x430>
 800f5e4:	1d3b      	adds	r3, r7, #4
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f5ec:	f003 0302 	and.w	r3, r3, #2
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d02a      	beq.n	800f64a <lv_draw_label+0x486>
        lv_draw_line_dsc_init(&line_dsc);
 800f5f4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f001 f924 	bl	8010846 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800f5fe:	1d3b      	adds	r3, r7, #4
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800f608:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f60c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d005      	beq.n	800f620 <lv_draw_label+0x45c>
 800f614:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f618:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800f61c:	b21b      	sxth	r3, r3
 800f61e:	e000      	b.n	800f622 <lv_draw_label+0x45e>
 800f620:	2301      	movs	r3, #1
 800f622:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        line_dsc.opa = dsc->opa;
 800f626:	1d3b      	adds	r3, r7, #4
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	7c1b      	ldrb	r3, [r3, #16]
 800f62c:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
        line_dsc.blend_mode = dsc->blend_mode;
 800f630:	1d3b      	adds	r3, r7, #4
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f638:	f003 0303 	and.w	r3, r3, #3
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800f642:	f362 0301 	bfi	r3, r2, #0, #2
 800f646:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    }

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 800f64a:	2300      	movs	r3, #0
 800f64c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    uint32_t i;
    uint32_t par_start = 0;
 800f650:	2300      	movs	r3, #0
 800f652:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    lv_color_t recolor;
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800f656:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f65a:	4618      	mov	r0, r3
 800f65c:	f003 fe80 	bl	8013360 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800f660:	1d3b      	adds	r3, r7, #4
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t pos_x_start = pos.x;
 800f668:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f66c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 800f670:	e2b8      	b.n	800fbe4 <lv_draw_label+0xa20>
        pos.x += x_ofs;
 800f672:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f676:	b29a      	uxth	r2, r3
 800f678:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	4413      	add	r3, r2
 800f680:	b29b      	uxth	r3, r3
 800f682:	b21b      	sxth	r3, r3
 800f684:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 800f688:	2300      	movs	r3, #0
 800f68a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
        i         = 0;
 800f68e:	2300      	movs	r3, #0
 800f690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
#if LV_USE_BIDI
        char * bidi_txt = _lv_mem_buf_get(line_end - line_start + 1);
        _lv_bidi_process_paragraph(txt + line_start, bidi_txt, line_end - line_start, dsc->bidi_dir, NULL, 0);
#else
        const char * bidi_txt = txt + line_start;
 800f694:	463b      	mov	r3, r7
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f69c:	4413      	add	r3, r2
 800f69e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
#endif

        while(i < line_end - line_start) {
 800f6a2:	e162      	b.n	800f96a <lv_draw_label+0x7a6>
            uint32_t logical_char_pos = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d011      	beq.n	800f6da <lv_draw_label+0x516>
 800f6b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f6ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d00b      	beq.n	800f6da <lv_draw_label+0x516>
#if LV_USE_BIDI
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start);
                uint32_t t = _lv_txt_encoded_get_char_id(bidi_txt, i);
                logical_char_pos += _lv_bidi_get_logical_pos(bidi_txt, NULL, line_end - line_start, dsc->bidi_dir, t, NULL);
#else
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800f6c2:	4ba7      	ldr	r3, [pc, #668]	; (800f960 <lv_draw_label+0x79c>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f6ca:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800f6ce:	4411      	add	r1, r2
 800f6d0:	463a      	mov	r2, r7
 800f6d2:	6810      	ldr	r0, [r2, #0]
 800f6d4:	4798      	blx	r3
 800f6d6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
#endif
            }

            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 800f6da:	4ba2      	ldr	r3, [pc, #648]	; (800f964 <lv_draw_label+0x7a0>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800f6e2:	4611      	mov	r1, r2
 800f6e4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800f6e8:	4798      	blx	r3
 800f6ea:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800f6ee:	4b9d      	ldr	r3, [pc, #628]	; (800f964 <lv_draw_label+0x7a0>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f6f6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800f6fa:	440a      	add	r2, r1
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	4610      	mov	r0, r2
 800f700:	4798      	blx	r3
 800f702:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

            /*Handle the re-color command*/
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800f706:	1d3b      	adds	r3, r7, #4
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f70e:	f003 0301 	and.w	r3, r3, #1
 800f712:	2b00      	cmp	r3, #0
 800f714:	f000 8090 	beq.w	800f838 <lv_draw_label+0x674>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800f718:	2323      	movs	r3, #35	; 0x23
 800f71a:	461a      	mov	r2, r3
 800f71c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f720:	4293      	cmp	r3, r2
 800f722:	d11b      	bne.n	800f75c <lv_draw_label+0x598>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800f724:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d107      	bne.n	800f73c <lv_draw_label+0x578>
                        par_start = i;
 800f72c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f730:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                        cmd_state = CMD_STATE_PAR;
 800f734:	2301      	movs	r3, #1
 800f736:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                        continue;
 800f73a:	e116      	b.n	800f96a <lv_draw_label+0x7a6>
                    }
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
 800f73c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f740:	2b01      	cmp	r3, #1
 800f742:	d103      	bne.n	800f74c <lv_draw_label+0x588>
                        cmd_state = CMD_STATE_WAIT;
 800f744:	2300      	movs	r3, #0
 800f746:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800f74a:	e007      	b.n	800f75c <lv_draw_label+0x598>
                    }
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
 800f74c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f750:	2b02      	cmp	r3, #2
 800f752:	d103      	bne.n	800f75c <lv_draw_label+0x598>
                        cmd_state = CMD_STATE_WAIT;
 800f754:	2300      	movs	r3, #0
 800f756:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                        continue;
 800f75a:	e106      	b.n	800f96a <lv_draw_label+0x7a6>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 800f75c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f760:	2b01      	cmp	r3, #1
 800f762:	d169      	bne.n	800f838 <lv_draw_label+0x674>
                    if(letter == ' ') {
 800f764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f768:	2b20      	cmp	r3, #32
 800f76a:	f040 80fd 	bne.w	800f968 <lv_draw_label+0x7a4>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800f76e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f772:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	2b07      	cmp	r3, #7
 800f77a:	d154      	bne.n	800f826 <lv_draw_label+0x662>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800f77c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f780:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f784:	18d1      	adds	r1, r2, r3
 800f786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f78a:	2206      	movs	r2, #6
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7ff fc73 	bl	800f078 <_lv_memcpy_small>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 800f792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f796:	2200      	movs	r2, #0
 800f798:	719a      	strb	r2, [r3, #6]
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800f79a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f000 fff3 	bl	801078c <hex_char_to_num>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	011c      	lsls	r4, r3, #4
 800f7aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7ae:	785b      	ldrb	r3, [r3, #1]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f000 ffeb 	bl	801078c <hex_char_to_num>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	4423      	add	r3, r4
 800f7ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800f7be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7c2:	789b      	ldrb	r3, [r3, #2]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f000 ffe1 	bl	801078c <hex_char_to_num>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	011c      	lsls	r4, r3, #4
 800f7ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7d2:	78db      	ldrb	r3, [r3, #3]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f000 ffd9 	bl	801078c <hex_char_to_num>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	4423      	add	r3, r4
 800f7de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800f7e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7e6:	791b      	ldrb	r3, [r3, #4]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f000 ffcf 	bl	801078c <hex_char_to_num>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	011c      	lsls	r4, r3, #4
 800f7f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7f6:	795b      	ldrb	r3, [r3, #5]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f000 ffc7 	bl	801078c <hex_char_to_num>
 800f7fe:	4603      	mov	r3, r0
 800f800:	4423      	add	r3, r4
 800f802:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                            recolor = lv_color_make(r, g, b);
 800f806:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f810:	b2d1      	uxtb	r1, r2
 800f812:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f816:	b2d2      	uxtb	r2, r2
 800f818:	4618      	mov	r0, r3
 800f81a:	f7ff fc73 	bl	800f104 <lv_color_make>
 800f81e:	4603      	mov	r3, r0
 800f820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f824:	e004      	b.n	800f830 <lv_draw_label+0x66c>
                        }
                        else {
                            recolor.full = dsc->color.full;
 800f826:	1d3b      	adds	r3, r7, #4
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800f830:	2302      	movs	r3, #2
 800f832:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                    }
                    continue;
 800f836:	e097      	b.n	800f968 <lv_draw_label+0x7a4>
                }
            }

            lv_color_t color = dsc->color;
 800f838:	1d3b      	adds	r3, r7, #4
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	633b      	str	r3, [r7, #48]	; 0x30

            if(cmd_state == CMD_STATE_IN) color = recolor;
 800f840:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f844:	2b02      	cmp	r3, #2
 800f846:	d102      	bne.n	800f84e <lv_draw_label+0x68a>
 800f848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f84c:	633b      	str	r3, [r7, #48]	; 0x30

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800f84e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f852:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800f856:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800f85a:	f009 fdcb 	bl	80193f4 <lv_font_get_glyph_width>
 800f85e:	4603      	mov	r3, r0
 800f860:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d04b      	beq.n	800f908 <lv_draw_label+0x744>
 800f870:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f878:	4293      	cmp	r3, r2
 800f87a:	d045      	beq.n	800f908 <lv_draw_label+0x744>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800f87c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f884:	429a      	cmp	r2, r3
 800f886:	d33f      	bcc.n	800f908 <lv_draw_label+0x744>
 800f888:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f88c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f890:	429a      	cmp	r2, r3
 800f892:	d239      	bcs.n	800f908 <lv_draw_label+0x744>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 800f894:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f898:	f107 0320 	add.w	r3, r7, #32
 800f89c:	801a      	strh	r2, [r3, #0]
                    sel_coords.y1 = pos.y;
 800f89e:	f9b7 20b6 	ldrsh.w	r2, [r7, #182]	; 0xb6
 800f8a2:	f107 0320 	add.w	r3, r7, #32
 800f8a6:	805a      	strh	r2, [r3, #2]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800f8a8:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f8ac:	b29a      	uxth	r2, r3
 800f8ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	4413      	add	r3, r2
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	1d3b      	adds	r3, r7, #4
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	4413      	add	r3, r2
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	3b01      	subs	r3, #1
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	b21a      	sxth	r2, r3
 800f8cc:	f107 0320 	add.w	r3, r7, #32
 800f8d0:	809a      	strh	r2, [r3, #4]
                    sel_coords.y2 = pos.y + line_height - 1;
 800f8d2:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	4413      	add	r3, r2
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	b21a      	sxth	r2, r3
 800f8e8:	f107 0320 	add.w	r3, r7, #32
 800f8ec:	80da      	strh	r2, [r3, #6]
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800f8ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f8f2:	f107 0308 	add.w	r3, r7, #8
 800f8f6:	f107 0020 	add.w	r0, r7, #32
 800f8fa:	6819      	ldr	r1, [r3, #0]
 800f8fc:	f003 fdb4 	bl	8013468 <lv_draw_rect>
                    color = dsc->sel_color;
 800f900:	1d3b      	adds	r3, r7, #4
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800f908:	1d3b      	adds	r3, r7, #4
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f910:	f107 0108 	add.w	r1, r7, #8
 800f914:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 800f918:	9302      	str	r3, [sp, #8]
 800f91a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800f91e:	9301      	str	r3, [sp, #4]
 800f920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f922:	9300      	str	r3, [sp, #0]
 800f924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f928:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f92c:	6809      	ldr	r1, [r1, #0]
 800f92e:	f000 f971 	bl	800fc14 <lv_draw_letter>

            if(letter_w > 0) {
 800f932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f936:	2b00      	cmp	r3, #0
 800f938:	dd17      	ble.n	800f96a <lv_draw_label+0x7a6>
                pos.x += letter_w + dsc->letter_space;
 800f93a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f93e:	b29a      	uxth	r2, r3
 800f940:	1d3b      	adds	r3, r7, #4
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f948:	b299      	uxth	r1, r3
 800f94a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f94e:	b29b      	uxth	r3, r3
 800f950:	440b      	add	r3, r1
 800f952:	b29b      	uxth	r3, r3
 800f954:	4413      	add	r3, r2
 800f956:	b29b      	uxth	r3, r3
 800f958:	b21b      	sxth	r3, r3
 800f95a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f95e:	e004      	b.n	800f96a <lv_draw_label+0x7a6>
 800f960:	20000048 	.word	0x20000048
 800f964:	20000044 	.word	0x20000044
                    continue;
 800f968:	bf00      	nop
        while(i < line_end - line_start) {
 800f96a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f96e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f972:	1ad2      	subs	r2, r2, r3
 800f974:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f978:	429a      	cmp	r2, r3
 800f97a:	f63f ae93 	bhi.w	800f6a4 <lv_draw_label+0x4e0>
            }
        }

        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800f97e:	1d3b      	adds	r3, r7, #4
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f986:	f003 0302 	and.w	r3, r3, #2
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d03a      	beq.n	800fa04 <lv_draw_label+0x840>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 800f98e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f992:	b21a      	sxth	r2, r3
 800f994:	f107 031c 	add.w	r3, r7, #28
 800f998:	801a      	strh	r2, [r3, #0]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800f99a:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f99e:	b29a      	uxth	r2, r3
 800f9a0:	1d3b      	adds	r3, r7, #4
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	da00      	bge.n	800f9b0 <lv_draw_label+0x7ec>
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	105b      	asrs	r3, r3, #1
 800f9b2:	b21b      	sxth	r3, r3
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	4413      	add	r3, r2
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	da00      	bge.n	800f9c4 <lv_draw_label+0x800>
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	105b      	asrs	r3, r3, #1
 800f9c6:	b21b      	sxth	r3, r3
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	4413      	add	r3, r2
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	b21a      	sxth	r2, r3
 800f9d0:	f107 031c 	add.w	r3, r7, #28
 800f9d4:	805a      	strh	r2, [r3, #2]
            p2.x = pos.x;
 800f9d6:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f9da:	f107 0318 	add.w	r3, r7, #24
 800f9de:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 800f9e0:	f107 031c 	add.w	r3, r7, #28
 800f9e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f9e8:	f107 0318 	add.w	r3, r7, #24
 800f9ec:	805a      	strh	r2, [r3, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800f9ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800f9f2:	f107 0208 	add.w	r2, r7, #8
 800f9f6:	f107 0118 	add.w	r1, r7, #24
 800f9fa:	f107 001c 	add.w	r0, r7, #28
 800f9fe:	6812      	ldr	r2, [r2, #0]
 800fa00:	f000 ff3f 	bl	8010882 <lv_draw_line>
        }

        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800fa04:	1d3b      	adds	r3, r7, #4
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fa0c:	f003 0301 	and.w	r3, r3, #1
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d03a      	beq.n	800fa8a <lv_draw_label+0x8c6>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 800fa14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa18:	b21a      	sxth	r2, r3
 800fa1a:	f107 0314 	add.w	r3, r7, #20
 800fa1e:	801a      	strh	r2, [r3, #0]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800fa20:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	1d3b      	adds	r3, r7, #4
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	4413      	add	r3, r2
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	1d3b      	adds	r3, r7, #4
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	b29a      	uxth	r2, r3
 800fa46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fa4a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	b21a      	sxth	r2, r3
 800fa56:	f107 0314 	add.w	r3, r7, #20
 800fa5a:	805a      	strh	r2, [r3, #2]
            p2.x = pos.x;
 800fa5c:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800fa60:	f107 0310 	add.w	r3, r7, #16
 800fa64:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 800fa66:	f107 0314 	add.w	r3, r7, #20
 800fa6a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800fa6e:	f107 0310 	add.w	r3, r7, #16
 800fa72:	805a      	strh	r2, [r3, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800fa74:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fa78:	f107 0208 	add.w	r2, r7, #8
 800fa7c:	f107 0110 	add.w	r1, r7, #16
 800fa80:	f107 0014 	add.w	r0, r7, #20
 800fa84:	6812      	ldr	r2, [r2, #0]
 800fa86:	f000 fefc 	bl	8010882 <lv_draw_line>
#if LV_USE_BIDI
        _lv_mem_buf_release(bidi_txt);
        bidi_txt = NULL;
#endif
        /*Go to next line*/
        line_start = line_end;
 800fa8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fa8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800fa92:	463b      	mov	r3, r7
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fa9a:	18d0      	adds	r0, r2, r3
 800fa9c:	1d3b      	adds	r3, r7, #4
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800faa4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800faa8:	b219      	sxth	r1, r3
 800faaa:	1d3b      	adds	r3, r7, #4
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	460b      	mov	r3, r1
 800fab6:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800faba:	f00e f96d 	bl	801dd98 <_lv_txt_get_next_line>
 800fabe:	4602      	mov	r2, r0
 800fac0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fac4:	4413      	add	r3, r2
 800fac6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

        pos.x = coords->x1;
 800faca:	f107 030c 	add.w	r3, r7, #12
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fad4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        /*Align to middle*/
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800fad8:	1d3b      	adds	r3, r7, #4
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fae0:	f003 0304 	and.w	r3, r3, #4
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d033      	beq.n	800fb50 <lv_draw_label+0x98c>
            line_width =
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800fae8:	463b      	mov	r3, r7
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800faf0:	18d0      	adds	r0, r2, r3
 800faf2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800faf6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fafa:	1ad1      	subs	r1, r2, r3
 800fafc:	1d3b      	adds	r3, r7, #4
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800fb04:	1d3b      	adds	r3, r7, #4
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	4613      	mov	r3, r2
 800fb10:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800fb14:	f00e f9fe 	bl	801df14 <_lv_txt_get_width>
 800fb18:	4603      	mov	r3, r0
            line_width =
 800fb1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800fb1e:	f107 030c 	add.w	r3, r7, #12
 800fb22:	6818      	ldr	r0, [r3, #0]
 800fb24:	f7ff faca 	bl	800f0bc <lv_area_get_width>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fb30:	1ad3      	subs	r3, r2, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	da00      	bge.n	800fb38 <lv_draw_label+0x974>
 800fb36:	3301      	adds	r3, #1
 800fb38:	105b      	asrs	r3, r3, #1
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	b28b      	uxth	r3, r1
 800fb44:	4413      	add	r3, r2
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	b21b      	sxth	r3, r3
 800fb4a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800fb4e:	e035      	b.n	800fbbc <lv_draw_label+0x9f8>

        }
        /*Align to the right*/
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800fb50:	1d3b      	adds	r3, r7, #4
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fb58:	f003 0308 	and.w	r3, r3, #8
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d02d      	beq.n	800fbbc <lv_draw_label+0x9f8>
            line_width =
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800fb60:	463b      	mov	r3, r7
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fb68:	18d0      	adds	r0, r2, r3
 800fb6a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fb6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fb72:	1ad1      	subs	r1, r2, r3
 800fb74:	1d3b      	adds	r3, r7, #4
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800fb7c:	1d3b      	adds	r3, r7, #4
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fb84:	9300      	str	r3, [sp, #0]
 800fb86:	4613      	mov	r3, r2
 800fb88:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800fb8c:	f00e f9c2 	bl	801df14 <_lv_txt_get_width>
 800fb90:	4603      	mov	r3, r0
            line_width =
 800fb92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            pos.x += lv_area_get_width(coords) - line_width;
 800fb96:	f107 030c 	add.w	r3, r7, #12
 800fb9a:	6818      	ldr	r0, [r3, #0]
 800fb9c:	f7ff fa8e 	bl	800f0bc <lv_area_get_width>
 800fba0:	4603      	mov	r3, r0
 800fba2:	461a      	mov	r2, r3
 800fba4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fba8:	1ad3      	subs	r3, r2, r3
 800fbaa:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800fbae:	b292      	uxth	r2, r2
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	4413      	add	r3, r2
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	b21b      	sxth	r3, r3
 800fbb8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        }

        /*Go the next line position*/
        pos.y += line_height;
 800fbbc:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	4413      	add	r3, r2
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	b21b      	sxth	r3, r3
 800fbce:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

        if(pos.y > mask->y2) return;
 800fbd2:	f9b7 20b6 	ldrsh.w	r2, [r7, #182]	; 0xb6
 800fbd6:	f107 0308 	add.w	r3, r7, #8
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	dc11      	bgt.n	800fc08 <lv_draw_label+0xa44>
    while(txt[line_start] != '\0') {
 800fbe4:	463b      	mov	r3, r7
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fbec:	4413      	add	r3, r2
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f47f ad3e 	bne.w	800f672 <lv_draw_label+0x4ae>
 800fbf6:	e008      	b.n	800fc0a <lv_draw_label+0xa46>
    if(dsc->opa <= LV_OPA_MIN) return;
 800fbf8:	bf00      	nop
 800fbfa:	e006      	b.n	800fc0a <lv_draw_label+0xa46>
    if(txt[0] == '\0')  return;
 800fbfc:	bf00      	nop
 800fbfe:	e004      	b.n	800fc0a <lv_draw_label+0xa46>
    if(!clip_ok) return;
 800fc00:	bf00      	nop
 800fc02:	e002      	b.n	800fc0a <lv_draw_label+0xa46>
        if(txt[line_start] == '\0') return;
 800fc04:	bf00      	nop
 800fc06:	e000      	b.n	800fc0a <lv_draw_label+0xa46>
        if(pos.y > mask->y2) return;
 800fc08:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 800fc0a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bdb0      	pop	{r4, r5, r7, pc}
 800fc12:	bf00      	nop

0800fc14 <lv_draw_letter>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * clip_area,
                                                 const lv_font_t * font_p,
                                                 uint32_t letter,
                                                 lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b090      	sub	sp, #64	; 0x40
 800fc18:	af04      	add	r7, sp, #16
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	607a      	str	r2, [r7, #4]
 800fc20:	603b      	str	r3, [r7, #0]
    if(opa < LV_OPA_MIN) return;
 800fc22:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	f240 8094 	bls.w	800fd54 <lv_draw_letter+0x140>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800fc2c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fc30:	2bfd      	cmp	r3, #253	; 0xfd
 800fc32:	d902      	bls.n	800fc3a <lv_draw_letter+0x26>
 800fc34:	23ff      	movs	r3, #255	; 0xff
 800fc36:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    if(font_p == NULL) {
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f000 808b 	beq.w	800fd58 <lv_draw_letter+0x144>
        LV_LOG_WARN("lv_draw_letter: font is NULL");
        return;
    }

    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800fc42:	f107 0114 	add.w	r1, r7, #20
 800fc46:	2300      	movs	r3, #0
 800fc48:	683a      	ldr	r2, [r7, #0]
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f009 fbbf 	bl	80193ce <lv_font_get_glyph_dsc>
 800fc50:	4603      	mov	r3, r0
 800fc52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(g_ret == false)  {
 800fc56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc5a:	f083 0301 	eor.w	r3, r3, #1
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d17b      	bne.n	800fd5c <lv_draw_letter+0x148>
        }
        return;
    }

    /* Don't draw anything if the character is empty. E.g. space */
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800fc64:	8b3b      	ldrh	r3, [r7, #24]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d07a      	beq.n	800fd60 <lv_draw_letter+0x14c>
 800fc6a:	8afb      	ldrh	r3, [r7, #22]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d077      	beq.n	800fd60 <lv_draw_letter+0x14c>

    int32_t pos_x = pos_p->x + g.ofs_x;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc76:	461a      	mov	r2, r3
 800fc78:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fc86:	461a      	mov	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fc8e:	4619      	mov	r1, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fc96:	1acb      	subs	r3, r1, r3
 800fc98:	4413      	add	r3, r2
 800fc9a:	8b3a      	ldrh	r2, [r7, #24]
 800fc9c:	1a9b      	subs	r3, r3, r2
 800fc9e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800fca2:	1a9b      	subs	r3, r3, r2
 800fca4:	627b      	str	r3, [r7, #36]	; 0x24

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < clip_area->x1 ||
 800fca6:	8afb      	ldrh	r3, [r7, #22]
 800fca8:	461a      	mov	r2, r3
 800fcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcac:	4413      	add	r3, r2
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	db55      	blt.n	800fd64 <lv_draw_letter+0x150>
       pos_x > clip_area->x2 ||
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fcbe:	461a      	mov	r2, r3
    if(pos_x + g.box_w < clip_area->x1 ||
 800fcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	dc4e      	bgt.n	800fd64 <lv_draw_letter+0x150>
       pos_y + g.box_h < clip_area->y1 ||
 800fcc6:	8b3b      	ldrh	r3, [r7, #24]
 800fcc8:	461a      	mov	r2, r3
 800fcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fccc:	4413      	add	r3, r2
 800fcce:	68ba      	ldr	r2, [r7, #8]
 800fcd0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
       pos_x > clip_area->x2 ||
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	db45      	blt.n	800fd64 <lv_draw_letter+0x150>
       pos_y > clip_area->y2)  {
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fcde:	461a      	mov	r2, r3
       pos_y + g.box_h < clip_area->y1 ||
 800fce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce2:	4293      	cmp	r3, r2
 800fce4:	dc3e      	bgt.n	800fd64 <lv_draw_letter+0x150>
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800fce6:	6839      	ldr	r1, [r7, #0]
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f009 fb61 	bl	80193b0 <lv_font_get_glyph_bitmap>
 800fcee:	6238      	str	r0, [r7, #32]
    if(map_p == NULL) {
 800fcf0:	6a3b      	ldr	r3, [r7, #32]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d038      	beq.n	800fd68 <lv_draw_letter+0x154>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(font_p->subpx) {
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	7b1b      	ldrb	r3, [r3, #12]
 800fcfa:	f003 0303 	and.w	r3, r3, #3
 800fcfe:	b2db      	uxtb	r3, r3
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d013      	beq.n	800fd2c <lv_draw_letter+0x118>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800fd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd06:	b218      	sxth	r0, r3
 800fd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0a:	b219      	sxth	r1, r3
 800fd0c:	f107 0214 	add.w	r2, r7, #20
 800fd10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fd14:	9303      	str	r3, [sp, #12]
 800fd16:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fd1a:	9302      	str	r3, [sp, #8]
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1e:	9301      	str	r3, [sp, #4]
 800fd20:	6a3b      	ldr	r3, [r7, #32]
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	f000 fa3f 	bl	80101a8 <draw_letter_subpx>
 800fd2a:	e01e      	b.n	800fd6a <lv_draw_letter+0x156>
    }
    else {
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800fd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2e:	b218      	sxth	r0, r3
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	b219      	sxth	r1, r3
 800fd34:	f107 0214 	add.w	r2, r7, #20
 800fd38:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fd3c:	9303      	str	r3, [sp, #12]
 800fd3e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fd42:	9302      	str	r3, [sp, #8]
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	9301      	str	r3, [sp, #4]
 800fd48:	6a3b      	ldr	r3, [r7, #32]
 800fd4a:	9300      	str	r3, [sp, #0]
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	f000 f80f 	bl	800fd70 <draw_letter_normal>
 800fd52:	e00a      	b.n	800fd6a <lv_draw_letter+0x156>
    if(opa < LV_OPA_MIN) return;
 800fd54:	bf00      	nop
 800fd56:	e008      	b.n	800fd6a <lv_draw_letter+0x156>
        return;
 800fd58:	bf00      	nop
 800fd5a:	e006      	b.n	800fd6a <lv_draw_letter+0x156>
        return;
 800fd5c:	bf00      	nop
 800fd5e:	e004      	b.n	800fd6a <lv_draw_letter+0x156>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800fd60:	bf00      	nop
 800fd62:	e002      	b.n	800fd6a <lv_draw_letter+0x156>
        return;
 800fd64:	bf00      	nop
 800fd66:	e000      	b.n	800fd6a <lv_draw_letter+0x156>
        return;
 800fd68:	bf00      	nop
    }
}
 800fd6a:	3730      	adds	r7, #48	; 0x30
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <draw_letter_normal>:

LV_ATTRIBUTE_FAST_MEM static void draw_letter_normal(lv_coord_t pos_x, lv_coord_t pos_y, lv_font_glyph_dsc_t * g,
                                                     const lv_area_t * clip_area,
                                                     const uint8_t * map_p, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800fd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd72:	b0a5      	sub	sp, #148	; 0x94
 800fd74:	af04      	add	r7, sp, #16
 800fd76:	60ba      	str	r2, [r7, #8]
 800fd78:	607b      	str	r3, [r7, #4]
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	81fb      	strh	r3, [r7, #14]
 800fd7e:	460b      	mov	r3, r1
 800fd80:	81bb      	strh	r3, [r7, #12]
    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	7a9b      	ldrb	r3, [r3, #10]
 800fd86:	673b      	str	r3, [r7, #112]	; 0x70
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 800fd88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd8a:	2b03      	cmp	r3, #3
 800fd8c:	d101      	bne.n	800fd92 <draw_letter_normal+0x22>
 800fd8e:	2304      	movs	r3, #4
 800fd90:	673b      	str	r3, [r7, #112]	; 0x70

    switch(bpp) {
 800fd92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd94:	3b01      	subs	r3, #1
 800fd96:	2b07      	cmp	r3, #7
 800fd98:	f200 8202 	bhi.w	80101a0 <draw_letter_normal+0x430>
 800fd9c:	a201      	add	r2, pc, #4	; (adr r2, 800fda4 <draw_letter_normal+0x34>)
 800fd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fda2:	bf00      	nop
 800fda4:	0800fdc5 	.word	0x0800fdc5
 800fda8:	0800fdd3 	.word	0x0800fdd3
 800fdac:	080101a1 	.word	0x080101a1
 800fdb0:	0800fde1 	.word	0x0800fde1
 800fdb4:	080101a1 	.word	0x080101a1
 800fdb8:	080101a1 	.word	0x080101a1
 800fdbc:	080101a1 	.word	0x080101a1
 800fdc0:	0800fdef 	.word	0x0800fdef
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
 800fdc4:	4b9f      	ldr	r3, [pc, #636]	; (8010044 <draw_letter_normal+0x2d4>)
 800fdc6:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0x80;
 800fdc8:	2380      	movs	r3, #128	; 0x80
 800fdca:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 2;
 800fdcc:	2302      	movs	r3, #2
 800fdce:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800fdd0:	e015      	b.n	800fdfe <draw_letter_normal+0x8e>
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800fdd2:	4b9d      	ldr	r3, [pc, #628]	; (8010048 <draw_letter_normal+0x2d8>)
 800fdd4:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0xC0;
 800fdd6:	23c0      	movs	r3, #192	; 0xc0
 800fdd8:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 4;
 800fdda:	2304      	movs	r3, #4
 800fddc:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800fdde:	e00e      	b.n	800fdfe <draw_letter_normal+0x8e>
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800fde0:	4b9a      	ldr	r3, [pc, #616]	; (801004c <draw_letter_normal+0x2dc>)
 800fde2:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0xF0;
 800fde4:	23f0      	movs	r3, #240	; 0xf0
 800fde6:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 16;
 800fde8:	2310      	movs	r3, #16
 800fdea:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800fdec:	e007      	b.n	800fdfe <draw_letter_normal+0x8e>
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800fdee:	4b98      	ldr	r3, [pc, #608]	; (8010050 <draw_letter_normal+0x2e0>)
 800fdf0:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0xFF;
 800fdf2:	23ff      	movs	r3, #255	; 0xff
 800fdf4:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 256;
 800fdf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fdfa:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;       /*No opa table, pixel value will be used directly*/
 800fdfc:	bf00      	nop
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 800fdfe:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fe02:	2bfc      	cmp	r3, #252	; 0xfc
 800fe04:	d835      	bhi.n	800fe72 <draw_letter_normal+0x102>
        if(prev_opa != opa || prev_bpp != bpp) {
 800fe06:	4b93      	ldr	r3, [pc, #588]	; (8010054 <draw_letter_normal+0x2e4>)
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d104      	bne.n	800fe1c <draw_letter_normal+0xac>
 800fe12:	4b91      	ldr	r3, [pc, #580]	; (8010058 <draw_letter_normal+0x2e8>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d021      	beq.n	800fe60 <draw_letter_normal+0xf0>
            uint32_t i;
            for(i = 0; i < shades; i++) {
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe20:	e01a      	b.n	800fe58 <draw_letter_normal+0xe8>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800fe22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe26:	4413      	add	r3, r2
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	2bff      	cmp	r3, #255	; 0xff
 800fe2c:	d00b      	beq.n	800fe46 <draw_letter_normal+0xd6>
 800fe2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe32:	4413      	add	r3, r2
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	461a      	mov	r2, r3
 800fe38:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fe3c:	fb03 f302 	mul.w	r3, r3, r2
 800fe40:	121b      	asrs	r3, r3, #8
 800fe42:	b2db      	uxtb	r3, r3
 800fe44:	e001      	b.n	800fe4a <draw_letter_normal+0xda>
 800fe46:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fe4a:	4984      	ldr	r1, [pc, #528]	; (801005c <draw_letter_normal+0x2ec>)
 800fe4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe4e:	440a      	add	r2, r1
 800fe50:	7013      	strb	r3, [r2, #0]
            for(i = 0; i < shades; i++) {
 800fe52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe54:	3301      	adds	r3, #1
 800fe56:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d3e0      	bcc.n	800fe22 <draw_letter_normal+0xb2>
            }
        }
        bpp_opa_table_p = opa_table;
 800fe60:	4b7e      	ldr	r3, [pc, #504]	; (801005c <draw_letter_normal+0x2ec>)
 800fe62:	67fb      	str	r3, [r7, #124]	; 0x7c
        prev_opa = opa;
 800fe64:	4a7b      	ldr	r2, [pc, #492]	; (8010054 <draw_letter_normal+0x2e4>)
 800fe66:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fe6a:	7013      	strb	r3, [r2, #0]
        prev_bpp = bpp;
 800fe6c:	4a7a      	ldr	r2, [pc, #488]	; (8010058 <draw_letter_normal+0x2e8>)
 800fe6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe70:	6013      	str	r3, [r2, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	885b      	ldrh	r3, [r3, #2]
 800fe76:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t box_h = g->box_h;
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	889b      	ldrh	r3, [r3, #4]
 800fe7c:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800fe7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fe82:	fb02 f303 	mul.w	r3, r2, r3
 800fe86:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Calculate the col/row start/end on the map*/
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe8e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	da07      	bge.n	800fea6 <draw_letter_normal+0x136>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fea2:	1ad3      	subs	r3, r2, r3
 800fea4:	e000      	b.n	800fea8 <draw_letter_normal+0x138>
 800fea6:	2300      	movs	r3, #0
 800fea8:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800feaa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800feae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feb0:	4413      	add	r3, r2
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800feb8:	4293      	cmp	r3, r2
 800feba:	dd08      	ble.n	800fece <draw_letter_normal+0x15e>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fec2:	461a      	mov	r2, r3
 800fec4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	3301      	adds	r3, #1
 800fecc:	e000      	b.n	800fed0 <draw_letter_normal+0x160>
 800fece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fed0:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fed8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fedc:	429a      	cmp	r2, r3
 800fede:	da07      	bge.n	800fef0 <draw_letter_normal+0x180>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fee6:	461a      	mov	r2, r3
 800fee8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800feec:	1ad3      	subs	r3, r2, r3
 800feee:	e000      	b.n	800fef2 <draw_letter_normal+0x182>
 800fef0:	2300      	movs	r3, #0
 800fef2:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800fef4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fefa:	4413      	add	r3, r2
 800fefc:	687a      	ldr	r2, [r7, #4]
 800fefe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ff02:	4293      	cmp	r3, r2
 800ff04:	dd08      	ble.n	800ff18 <draw_letter_normal+0x1a8>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ff12:	1ad3      	subs	r3, r2, r3
 800ff14:	3301      	adds	r3, #1
 800ff16:	e000      	b.n	800ff1a <draw_letter_normal+0x1aa>
 800ff18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff1a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800ff1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff20:	fb02 f303 	mul.w	r3, r2, r3
 800ff24:	4619      	mov	r1, r3
 800ff26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ff2a:	fb02 f303 	mul.w	r3, r2, r3
 800ff2e:	440b      	add	r3, r1
 800ff30:	63bb      	str	r3, [r7, #56]	; 0x38
    map_p += bit_ofs >> 3;
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	08db      	lsrs	r3, r3, #3
 800ff36:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ff3a:	4413      	add	r3, r2
 800ff3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800ff40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff42:	f003 0307 	and.w	r3, r3, #7
 800ff46:	65fb      	str	r3, [r7, #92]	; 0x5c

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800ff48:	f7fa f9f2 	bl	800a330 <_lv_refr_get_disp_refreshing>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f00a fa1e 	bl	801a390 <lv_disp_get_hor_res>
 800ff54:	4603      	mov	r3, r0
 800ff56:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800ff58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff5c:	fb02 f203 	mul.w	r2, r2, r3
 800ff60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff64:	4293      	cmp	r3, r2
 800ff66:	bfa8      	it	ge
 800ff68:	4613      	movge	r3, r2
 800ff6a:	633b      	str	r3, [r7, #48]	; 0x30
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800ff6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff6e:	f00c fcef 	bl	801c950 <_lv_mem_buf_get>
 800ff72:	62f8      	str	r0, [r7, #44]	; 0x2c
    int32_t mask_p = 0;
 800ff74:	2300      	movs	r3, #0
 800ff76:	65bb      	str	r3, [r7, #88]	; 0x58

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos_x;
 800ff78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	89fb      	ldrh	r3, [r7, #14]
 800ff7e:	4413      	add	r3, r2
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	b21b      	sxth	r3, r3
 800ff84:	823b      	strh	r3, [r7, #16]
    fill_area.x2 = col_end  + pos_x - 1;
 800ff86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	89fb      	ldrh	r3, [r7, #14]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	3b01      	subs	r3, #1
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	b21b      	sxth	r3, r3
 800ff96:	82bb      	strh	r3, [r7, #20]
    fill_area.y1 = row_start + pos_y;
 800ff98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff9a:	b29a      	uxth	r2, r3
 800ff9c:	89bb      	ldrh	r3, [r7, #12]
 800ff9e:	4413      	add	r3, r2
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	b21b      	sxth	r3, r3
 800ffa4:	827b      	strh	r3, [r7, #18]
    fill_area.y2 = fill_area.y1;
 800ffa6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ffaa:	82fb      	strh	r3, [r7, #22]

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800ffac:	f001 fe68 	bl	8011c80 <lv_draw_mask_get_cnt>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    uint32_t col_bit_max = 8 - bpp;
 800ffb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ffb8:	f1c3 0308 	rsb	r3, r3, #8
 800ffbc:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800ffbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ffc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffc2:	441a      	add	r2, r3
 800ffc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffc6:	1ad3      	subs	r3, r2, r3
 800ffc8:	461a      	mov	r2, r3
 800ffca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ffcc:	fb02 f303 	mul.w	r3, r2, r3
 800ffd0:	623b      	str	r3, [r7, #32]

    for(row = row_start ; row < row_end; row++) {
 800ffd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffd4:	663b      	str	r3, [r7, #96]	; 0x60
 800ffd6:	e0bc      	b.n	8010152 <draw_letter_normal+0x3e2>
        int32_t mask_p_start = mask_p;
 800ffd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffda:	61fb      	str	r3, [r7, #28]

        bitmask = bitmask_init >> col_bit;
 800ffdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ffde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffe0:	fa22 f303 	lsr.w	r3, r2, r3
 800ffe4:	677b      	str	r3, [r7, #116]	; 0x74
        for(col = col_start; col < col_end; col++) {
 800ffe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffe8:	667b      	str	r3, [r7, #100]	; 0x64
 800ffea:	e048      	b.n	801007e <draw_letter_normal+0x30e>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800ffec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	461a      	mov	r2, r3
 800fff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fff6:	401a      	ands	r2, r3
 800fff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fffc:	1acb      	subs	r3, r1, r3
 800fffe:	fa22 f303 	lsr.w	r3, r2, r3
 8010002:	76bb      	strb	r3, [r7, #26]
            if(letter_px) {
 8010004:	7ebb      	ldrb	r3, [r7, #26]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d008      	beq.n	801001c <draw_letter_normal+0x2ac>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 801000a:	7ebb      	ldrb	r3, [r7, #26]
 801000c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801000e:	441a      	add	r2, r3
 8010010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010014:	440b      	add	r3, r1
 8010016:	7812      	ldrb	r2, [r2, #0]
 8010018:	701a      	strb	r2, [r3, #0]
 801001a:	e004      	b.n	8010026 <draw_letter_normal+0x2b6>
            }
            else {
                mask_buf[mask_p] = 0;
 801001c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801001e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010020:	4413      	add	r3, r2
 8010022:	2200      	movs	r2, #0
 8010024:	701a      	strb	r2, [r3, #0]
            }

            /*Go to the next column*/
            if(col_bit < col_bit_max) {
 8010026:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002a:	429a      	cmp	r2, r3
 801002c:	d218      	bcs.n	8010060 <draw_letter_normal+0x2f0>
                col_bit += bpp;
 801002e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010032:	4413      	add	r3, r2
 8010034:	65fb      	str	r3, [r7, #92]	; 0x5c
                bitmask = bitmask >> bpp;
 8010036:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801003a:	fa22 f303 	lsr.w	r3, r2, r3
 801003e:	677b      	str	r3, [r7, #116]	; 0x74
 8010040:	e017      	b.n	8010072 <draw_letter_normal+0x302>
 8010042:	bf00      	nop
 8010044:	0802d298 	.word	0x0802d298
 8010048:	0802d29c 	.word	0x0802d29c
 801004c:	0802d2a0 	.word	0x0802d2a0
 8010050:	0802d2b0 	.word	0x0802d2b0
 8010054:	20017f38 	.word	0x20017f38
 8010058:	20017f3c 	.word	0x20017f3c
 801005c:	20017f40 	.word	0x20017f40
            }
            else {
                col_bit = 0;
 8010060:	2300      	movs	r3, #0
 8010062:	65fb      	str	r3, [r7, #92]	; 0x5c
                bitmask = bitmask_init;
 8010064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010066:	677b      	str	r3, [r7, #116]	; 0x74
                map_p++;
 8010068:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801006c:	3301      	adds	r3, #1
 801006e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            }

            /*Next mask byte*/
            mask_p++;
 8010072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010074:	3301      	adds	r3, #1
 8010076:	65bb      	str	r3, [r7, #88]	; 0x58
        for(col = col_start; col < col_end; col++) {
 8010078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801007a:	3301      	adds	r3, #1
 801007c:	667b      	str	r3, [r7, #100]	; 0x64
 801007e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010082:	429a      	cmp	r2, r3
 8010084:	dbb2      	blt.n	800ffec <draw_letter_normal+0x27c>
        }

        /*Apply masks if any*/
        if(other_mask_cnt) {
 8010086:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801008a:	2b00      	cmp	r3, #0
 801008c:	d023      	beq.n	80100d6 <draw_letter_normal+0x366>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010092:	18d4      	adds	r4, r2, r3
 8010094:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 8010098:	f9b7 6016 	ldrsh.w	r6, [r7, #22]
 801009c:	f107 0310 	add.w	r3, r7, #16
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7ff f80b 	bl	800f0bc <lv_area_get_width>
 80100a6:	4603      	mov	r3, r0
 80100a8:	4632      	mov	r2, r6
 80100aa:	4629      	mov	r1, r5
 80100ac:	4620      	mov	r0, r4
 80100ae:	f001 fd4b 	bl	8011b48 <lv_draw_mask_apply>
 80100b2:	4603      	mov	r3, r0
 80100b4:	76fb      	strb	r3, [r7, #27]
                                                             lv_area_get_width(&fill_area));
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 80100b6:	7efb      	ldrb	r3, [r7, #27]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d10c      	bne.n	80100d6 <draw_letter_normal+0x366>
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100c0:	18d4      	adds	r4, r2, r3
 80100c2:	f107 0310 	add.w	r3, r7, #16
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fe fff8 	bl	800f0bc <lv_area_get_width>
 80100cc:	4603      	mov	r3, r0
 80100ce:	4619      	mov	r1, r3
 80100d0:	4620      	mov	r0, r4
 80100d2:	f00d f846 	bl	801d162 <_lv_memset_00>
            }
        }

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 80100d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100da:	1ad3      	subs	r3, r2, r3
 80100dc:	461a      	mov	r2, r3
 80100de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100e0:	4413      	add	r3, r2
 80100e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d907      	bls.n	80100f8 <draw_letter_normal+0x388>
            fill_area.y2 ++;
 80100e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	3301      	adds	r3, #1
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	b21b      	sxth	r3, r3
 80100f4:	82fb      	strh	r3, [r7, #22]
 80100f6:	e01a      	b.n	801012e <draw_letter_normal+0x3be>
        }
        else {
            _lv_blend_fill(clip_area, &fill_area,
 80100f8:	f107 0110 	add.w	r1, r7, #16
 80100fc:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8010100:	9302      	str	r3, [sp, #8]
 8010102:	23ff      	movs	r3, #255	; 0xff
 8010104:	9301      	str	r3, [sp, #4]
 8010106:	2302      	movs	r3, #2
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7fc faeb 	bl	800c6ec <_lv_blend_fill>
                           color, mask_buf, LV_DRAW_MASK_RES_CHANGED, LV_OPA_COVER,
                           blend_mode);

            fill_area.y1 = fill_area.y2 + 1;
 8010116:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801011a:	b29b      	uxth	r3, r3
 801011c:	3301      	adds	r3, #1
 801011e:	b29b      	uxth	r3, r3
 8010120:	b21b      	sxth	r3, r3
 8010122:	827b      	strh	r3, [r7, #18]
            fill_area.y2 = fill_area.y1;
 8010124:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010128:	82fb      	strh	r3, [r7, #22]
            mask_p = 0;
 801012a:	2300      	movs	r3, #0
 801012c:	65bb      	str	r3, [r7, #88]	; 0x58
        }

        col_bit += col_bit_row_ofs;
 801012e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010130:	6a3b      	ldr	r3, [r7, #32]
 8010132:	4413      	add	r3, r2
 8010134:	65fb      	str	r3, [r7, #92]	; 0x5c
        map_p += (col_bit >> 3);
 8010136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010138:	08db      	lsrs	r3, r3, #3
 801013a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801013e:	4413      	add	r3, r2
 8010140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        col_bit = col_bit & 0x7;
 8010144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010146:	f003 0307 	and.w	r3, r3, #7
 801014a:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(row = row_start ; row < row_end; row++) {
 801014c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801014e:	3301      	adds	r3, #1
 8010150:	663b      	str	r3, [r7, #96]	; 0x60
 8010152:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010156:	429a      	cmp	r2, r3
 8010158:	f6ff af3e 	blt.w	800ffd8 <draw_letter_normal+0x268>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 801015c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8010160:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010164:	429a      	cmp	r2, r3
 8010166:	d017      	beq.n	8010198 <draw_letter_normal+0x428>
        fill_area.y2--;
 8010168:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801016c:	b29b      	uxth	r3, r3
 801016e:	3b01      	subs	r3, #1
 8010170:	b29b      	uxth	r3, r3
 8010172:	b21b      	sxth	r3, r3
 8010174:	82fb      	strh	r3, [r7, #22]
        _lv_blend_fill(clip_area, &fill_area,
 8010176:	f107 0110 	add.w	r1, r7, #16
 801017a:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801017e:	9302      	str	r3, [sp, #8]
 8010180:	23ff      	movs	r3, #255	; 0xff
 8010182:	9301      	str	r3, [sp, #4]
 8010184:	2302      	movs	r3, #2
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f7fc faac 	bl	800c6ec <_lv_blend_fill>
                       color, mask_buf, LV_DRAW_MASK_RES_CHANGED, LV_OPA_COVER,
                       blend_mode);
        mask_p = 0;
 8010194:	2300      	movs	r3, #0
 8010196:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    _lv_mem_buf_release(mask_buf);
 8010198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801019a:	f00c fcb7 	bl	801cb0c <_lv_mem_buf_release>
 801019e:	e000      	b.n	80101a2 <draw_letter_normal+0x432>
            return; /*Invalid bpp. Can't render the letter*/
 80101a0:	bf00      	nop
}
 80101a2:	3784      	adds	r7, #132	; 0x84
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101a8 <draw_letter_subpx>:

static void draw_letter_subpx(lv_coord_t pos_x, lv_coord_t pos_y, lv_font_glyph_dsc_t * g, const lv_area_t * clip_area,
                              const uint8_t * map_p, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 80101a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101aa:	b0ab      	sub	sp, #172	; 0xac
 80101ac:	af04      	add	r7, sp, #16
 80101ae:	60ba      	str	r2, [r7, #8]
 80101b0:	607b      	str	r3, [r7, #4]
 80101b2:	4603      	mov	r3, r0
 80101b4:	81fb      	strh	r3, [r7, #14]
 80101b6:	460b      	mov	r3, r1
 80101b8:	81bb      	strh	r3, [r7, #12]
#if LV_USE_FONT_SUBPX
    const uint8_t * bpp_opa_table;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	7a9b      	ldrb	r3, [r3, #10]
 80101be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if(bpp == 3) bpp = 4;
 80101c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80101c6:	2b03      	cmp	r3, #3
 80101c8:	d102      	bne.n	80101d0 <draw_letter_subpx+0x28>
 80101ca:	2304      	movs	r3, #4
 80101cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    switch(bpp) {
 80101d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80101d4:	3b01      	subs	r3, #1
 80101d6:	2b07      	cmp	r3, #7
 80101d8:	f200 82d2 	bhi.w	8010780 <draw_letter_subpx+0x5d8>
 80101dc:	a201      	add	r2, pc, #4	; (adr r2, 80101e4 <draw_letter_subpx+0x3c>)
 80101de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e2:	bf00      	nop
 80101e4:	08010205 	.word	0x08010205
 80101e8:	08010213 	.word	0x08010213
 80101ec:	08010781 	.word	0x08010781
 80101f0:	08010221 	.word	0x08010221
 80101f4:	08010781 	.word	0x08010781
 80101f8:	08010781 	.word	0x08010781
 80101fc:	08010781 	.word	0x08010781
 8010200:	0801022f 	.word	0x0801022f
        case 1:
            bpp_opa_table = _lv_bpp1_opa_table;
 8010204:	4bb9      	ldr	r3, [pc, #740]	; (80104ec <draw_letter_subpx+0x344>)
 8010206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0x80;
 801020a:	2380      	movs	r3, #128	; 0x80
 801020c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;
 8010210:	e014      	b.n	801023c <draw_letter_subpx+0x94>
        case 2:
            bpp_opa_table = _lv_bpp2_opa_table;
 8010212:	4bb7      	ldr	r3, [pc, #732]	; (80104f0 <draw_letter_subpx+0x348>)
 8010214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0xC0;
 8010218:	23c0      	movs	r3, #192	; 0xc0
 801021a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;
 801021e:	e00d      	b.n	801023c <draw_letter_subpx+0x94>
        case 4:
            bpp_opa_table = _lv_bpp4_opa_table;
 8010220:	4bb4      	ldr	r3, [pc, #720]	; (80104f4 <draw_letter_subpx+0x34c>)
 8010222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0xF0;
 8010226:	23f0      	movs	r3, #240	; 0xf0
 8010228:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;
 801022c:	e006      	b.n	801023c <draw_letter_subpx+0x94>
        case 8:
            bpp_opa_table = _lv_bpp8_opa_table;
 801022e:	4bb2      	ldr	r3, [pc, #712]	; (80104f8 <draw_letter_subpx+0x350>)
 8010230:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0xFF;
 8010234:	23ff      	movs	r3, #255	; 0xff
 8010236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;       /*No opa table, pixel value will be used directly*/
 801023a:	bf00      	nop
            return; /*Invalid bpp. Can't render the letter*/
    }

    int32_t col, row;

    int32_t box_w = g->box_w;
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	885b      	ldrh	r3, [r3, #2]
 8010240:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t box_h = g->box_h;
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	889b      	ldrh	r3, [r3, #4]
 8010246:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8010248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801024a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801024e:	fb02 f303 	mul.w	r3, r2, r3
 8010252:	663b      	str	r3, [r7, #96]	; 0x60

    /* Calculate the col/row start/end on the map*/
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f9b3 3000 	ldrsh.w	r3, [r3]
 801025a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801025e:	429a      	cmp	r2, r3
 8010260:	da0a      	bge.n	8010278 <draw_letter_subpx+0xd0>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010268:	461a      	mov	r2, r3
 801026a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801026e:	1ad2      	subs	r2, r2, r3
 8010270:	4613      	mov	r3, r2
 8010272:	005b      	lsls	r3, r3, #1
 8010274:	4413      	add	r3, r2
 8010276:	e000      	b.n	801027a <draw_letter_subpx+0xd2>
 8010278:	2300      	movs	r3, #0
 801027a:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 801027c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010282:	499e      	ldr	r1, [pc, #632]	; (80104fc <draw_letter_subpx+0x354>)
 8010284:	fb81 0103 	smull	r0, r1, r1, r3
 8010288:	17db      	asrs	r3, r3, #31
 801028a:	1acb      	subs	r3, r1, r3
 801028c:	4413      	add	r3, r2
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010294:	4293      	cmp	r3, r2
 8010296:	dd0b      	ble.n	80102b0 <draw_letter_subpx+0x108>
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801029e:	461a      	mov	r2, r3
 80102a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80102a4:	1ad3      	subs	r3, r2, r3
 80102a6:	1c5a      	adds	r2, r3, #1
 80102a8:	4613      	mov	r3, r2
 80102aa:	005b      	lsls	r3, r3, #1
 80102ac:	4413      	add	r3, r2
 80102ae:	e000      	b.n	80102b2 <draw_letter_subpx+0x10a>
 80102b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102b2:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80102ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80102be:	429a      	cmp	r2, r3
 80102c0:	da07      	bge.n	80102d2 <draw_letter_subpx+0x12a>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80102c8:	461a      	mov	r2, r3
 80102ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	e000      	b.n	80102d4 <draw_letter_subpx+0x12c>
 80102d2:	2300      	movs	r3, #0
 80102d4:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 80102d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80102da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102dc:	4413      	add	r3, r2
 80102de:	687a      	ldr	r2, [r7, #4]
 80102e0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80102e4:	4293      	cmp	r3, r2
 80102e6:	dd08      	ble.n	80102fa <draw_letter_subpx+0x152>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80102ee:	461a      	mov	r2, r3
 80102f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	3301      	adds	r3, #1
 80102f8:	e000      	b.n	80102fc <draw_letter_subpx+0x154>
 80102fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102fc:	653b      	str	r3, [r7, #80]	; 0x50

    /*Move on the map too*/
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 80102fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010300:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010302:	fb02 f303 	mul.w	r3, r2, r3
 8010306:	4619      	mov	r1, r3
 8010308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801030a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801030e:	fb02 f303 	mul.w	r3, r2, r3
 8010312:	440b      	add	r3, r1
 8010314:	64fb      	str	r3, [r7, #76]	; 0x4c
    map_p += bit_ofs >> 3;
 8010316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010318:	10db      	asrs	r3, r3, #3
 801031a:	461a      	mov	r2, r3
 801031c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010320:	4413      	add	r3, r2
 8010322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    uint8_t letter_px;
    lv_opa_t px_opa;
    int32_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8010326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010328:	f003 0307 	and.w	r3, r3, #7
 801032c:	67bb      	str	r3, [r7, #120]	; 0x78

    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 801032e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010330:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010332:	fb02 f303 	mul.w	r3, r2, r3
 8010336:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801033a:	dc07      	bgt.n	801034c <draw_letter_subpx+0x1a4>
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	885b      	ldrh	r3, [r3, #2]
 8010340:	461a      	mov	r2, r3
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	889b      	ldrh	r3, [r3, #4]
 8010346:	fb03 f302 	mul.w	r3, r3, r2
 801034a:	e001      	b.n	8010350 <draw_letter_subpx+0x1a8>
 801034c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010350:	64bb      	str	r3, [r7, #72]	; 0x48
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8010352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010354:	4618      	mov	r0, r3
 8010356:	f00c fafb 	bl	801c950 <_lv_mem_buf_get>
 801035a:	6478      	str	r0, [r7, #68]	; 0x44
    int32_t mask_p = 0;
 801035c:	2300      	movs	r3, #0
 801035e:	677b      	str	r3, [r7, #116]	; 0x74

    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8010360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010362:	009b      	lsls	r3, r3, #2
 8010364:	4618      	mov	r0, r3
 8010366:	f00c faf3 	bl	801c950 <_lv_mem_buf_get>
 801036a:	6438      	str	r0, [r7, #64]	; 0x40

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 801036c:	f7f9 ffe0 	bl	800a330 <_lv_refr_get_disp_refreshing>
 8010370:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010372:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010374:	f00a f8cc 	bl	801a510 <lv_disp_get_buf>
 8010378:	63b8      	str	r0, [r7, #56]	; 0x38

    int32_t vdb_width     = lv_area_get_width(&vdb->area);
 801037a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037c:	3310      	adds	r3, #16
 801037e:	4618      	mov	r0, r3
 8010380:	f7fe fe9c 	bl	800f0bc <lv_area_get_width>
 8010384:	4603      	mov	r3, r0
 8010386:	637b      	str	r3, [r7, #52]	; 0x34
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8010388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038a:	689b      	ldr	r3, [r3, #8]
 801038c:	673b      	str	r3, [r7, #112]	; 0x70

    /*Set a pointer on VDB to the first pixel of the letter*/
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 801038e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010394:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8010398:	1a9b      	subs	r3, r3, r2
 801039a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801039c:	fb02 f203 	mul.w	r2, r2, r3
 80103a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80103a4:	4413      	add	r3, r2
 80103a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103a8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80103ac:	1a9b      	subs	r3, r3, r2
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80103b2:	4413      	add	r3, r2
 80103b4:	673b      	str	r3, [r7, #112]	; 0x70

    /*If the letter is partially out of mask the move there on VDB*/
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 80103b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103ba:	fb02 f203 	mul.w	r2, r2, r3
 80103be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103c0:	494e      	ldr	r1, [pc, #312]	; (80104fc <draw_letter_subpx+0x354>)
 80103c2:	fb81 0103 	smull	r0, r1, r1, r3
 80103c6:	17db      	asrs	r3, r3, #31
 80103c8:	1acb      	subs	r3, r1, r3
 80103ca:	4413      	add	r3, r2
 80103cc:	009b      	lsls	r3, r3, #2
 80103ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80103d0:	4413      	add	r3, r2
 80103d2:	673b      	str	r3, [r7, #112]	; 0x70

    lv_area_t map_area;
    map_area.x1 = col_start / 3 + pos_x;
 80103d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103d6:	4a49      	ldr	r2, [pc, #292]	; (80104fc <draw_letter_subpx+0x354>)
 80103d8:	fb82 1203 	smull	r1, r2, r2, r3
 80103dc:	17db      	asrs	r3, r3, #31
 80103de:	1ad3      	subs	r3, r2, r3
 80103e0:	b29a      	uxth	r2, r3
 80103e2:	89fb      	ldrh	r3, [r7, #14]
 80103e4:	4413      	add	r3, r2
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	b21b      	sxth	r3, r3
 80103ea:	843b      	strh	r3, [r7, #32]
    map_area.x2 = col_end / 3  + pos_x - 1;
 80103ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103ee:	4a43      	ldr	r2, [pc, #268]	; (80104fc <draw_letter_subpx+0x354>)
 80103f0:	fb82 1203 	smull	r1, r2, r2, r3
 80103f4:	17db      	asrs	r3, r3, #31
 80103f6:	1ad3      	subs	r3, r2, r3
 80103f8:	b29a      	uxth	r2, r3
 80103fa:	89fb      	ldrh	r3, [r7, #14]
 80103fc:	4413      	add	r3, r2
 80103fe:	b29b      	uxth	r3, r3
 8010400:	3b01      	subs	r3, #1
 8010402:	b29b      	uxth	r3, r3
 8010404:	b21b      	sxth	r3, r3
 8010406:	84bb      	strh	r3, [r7, #36]	; 0x24
    map_area.y1 = row_start + pos_y;
 8010408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801040a:	b29a      	uxth	r2, r3
 801040c:	89bb      	ldrh	r3, [r7, #12]
 801040e:	4413      	add	r3, r2
 8010410:	b29b      	uxth	r3, r3
 8010412:	b21b      	sxth	r3, r3
 8010414:	847b      	strh	r3, [r7, #34]	; 0x22
    map_area.y2 = map_area.y1;
 8010416:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801041a:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 801041c:	f001 fc30 	bl	8011c80 <lv_draw_mask_get_cnt>
 8010420:	4603      	mov	r3, r0
 8010422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    uint8_t font_rgb[3];

#if LV_COLOR_16_SWAP == 0
    uint8_t txt_rgb[3] = {color.ch.red, color.ch.green, color.ch.blue};
 8010426:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 801042a:	763b      	strb	r3, [r7, #24]
 801042c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8010430:	767b      	strb	r3, [r7, #25]
 8010432:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010436:	76bb      	strb	r3, [r7, #26]
#else
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
#endif

    for(row = row_start ; row < row_end; row++) {
 8010438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801043a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801043e:	e176      	b.n	801072e <draw_letter_subpx+0x586>
        uint32_t subpx_cnt = 0;
 8010440:	2300      	movs	r3, #0
 8010442:	66fb      	str	r3, [r7, #108]	; 0x6c
        bitmask = bitmask_init >> col_bit;
 8010444:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801044a:	fa22 f303 	lsr.w	r3, r2, r3
 801044e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int32_t mask_p_start = mask_p;
 8010452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010454:	62fb      	str	r3, [r7, #44]	; 0x2c

        for(col = col_start; col < col_end; col++) {
 8010456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801045c:	e0e0      	b.n	8010620 <draw_letter_subpx+0x478>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
 801045e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	461a      	mov	r2, r3
 8010466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801046a:	401a      	ands	r2, r3
 801046c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801046e:	4259      	negs	r1, r3
 8010470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010474:	1acb      	subs	r3, r1, r3
 8010476:	3308      	adds	r3, #8
 8010478:	fa22 f303 	lsr.w	r3, r2, r3
 801047c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if(letter_px != 0) {
 8010480:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8010484:	2b00      	cmp	r3, #0
 8010486:	d03b      	beq.n	8010500 <draw_letter_subpx+0x358>
                if(opa == LV_OPA_COVER) {
 8010488:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 801048c:	2bff      	cmp	r3, #255	; 0xff
 801048e:	d10f      	bne.n	80104b0 <draw_letter_subpx+0x308>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 8010490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010494:	2b08      	cmp	r3, #8
 8010496:	d006      	beq.n	80104a6 <draw_letter_subpx+0x2fe>
 8010498:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801049c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80104a0:	4413      	add	r3, r2
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	e001      	b.n	80104aa <draw_letter_subpx+0x302>
 80104a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80104aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80104ae:	e02a      	b.n	8010506 <draw_letter_subpx+0x35e>
                }
                else {
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 80104b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80104b4:	2b08      	cmp	r3, #8
 80104b6:	d108      	bne.n	80104ca <draw_letter_subpx+0x322>
 80104b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80104bc:	f897 20b8 	ldrb.w	r2, [r7, #184]	; 0xb8
 80104c0:	fb02 f303 	mul.w	r3, r2, r3
 80104c4:	0a1b      	lsrs	r3, r3, #8
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	e00c      	b.n	80104e4 <draw_letter_subpx+0x33c>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
 80104ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80104ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80104d2:	4413      	add	r3, r2
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	461a      	mov	r2, r3
 80104d8:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80104dc:	fb03 f302 	mul.w	r3, r3, r2
 80104e0:	0a1b      	lsrs	r3, r3, #8
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80104e8:	e00d      	b.n	8010506 <draw_letter_subpx+0x35e>
 80104ea:	bf00      	nop
 80104ec:	0802d298 	.word	0x0802d298
 80104f0:	0802d29c 	.word	0x0802d29c
 80104f4:	0802d2a0 	.word	0x0802d2a0
 80104f8:	0802d2b0 	.word	0x0802d2b0
 80104fc:	55555556 	.word	0x55555556
                }
            }
            else {
                px_opa = 0;
 8010500:	2300      	movs	r3, #0
 8010502:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }

            font_rgb[subpx_cnt] = px_opa;
 8010506:	f107 021c 	add.w	r2, r7, #28
 801050a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801050c:	4413      	add	r3, r2
 801050e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8010512:	701a      	strb	r2, [r3, #0]

            subpx_cnt ++;
 8010514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010516:	3301      	adds	r3, #1
 8010518:	66fb      	str	r3, [r7, #108]	; 0x6c
            if(subpx_cnt == 3) {
 801051a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801051c:	2b03      	cmp	r3, #3
 801051e:	d159      	bne.n	80105d4 <draw_letter_subpx+0x42c>
                subpx_cnt = 0;
 8010520:	2300      	movs	r3, #0
 8010522:	66fb      	str	r3, [r7, #108]	; 0x6c

                lv_color_t res_color;
#if LV_COLOR_16_SWAP == 0
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 8010524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010526:	789b      	ldrb	r3, [r3, #2]
 8010528:	743b      	strb	r3, [r7, #16]
 801052a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801052c:	785b      	ldrb	r3, [r3, #1]
 801052e:	747b      	strb	r3, [r7, #17]
 8010530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	74bb      	strb	r3, [r7, #18]

#if LV_FONT_SUBPX_BGR
                res_color.ch.blue = (uint32_t)((uint32_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
                res_color.ch.red = (uint32_t)((uint32_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
#else
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 8010536:	7e3b      	ldrb	r3, [r7, #24]
 8010538:	7f3a      	ldrb	r2, [r7, #28]
 801053a:	fb02 f203 	mul.w	r2, r2, r3
 801053e:	7c3b      	ldrb	r3, [r7, #16]
 8010540:	4619      	mov	r1, r3
 8010542:	7f3b      	ldrb	r3, [r7, #28]
 8010544:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010548:	fb03 f301 	mul.w	r3, r3, r1
 801054c:	4413      	add	r3, r2
 801054e:	0a1b      	lsrs	r3, r3, #8
 8010550:	b2db      	uxtb	r3, r3
 8010552:	75bb      	strb	r3, [r7, #22]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 8010554:	7ebb      	ldrb	r3, [r7, #26]
 8010556:	7fba      	ldrb	r2, [r7, #30]
 8010558:	fb02 f203 	mul.w	r2, r2, r3
 801055c:	7cbb      	ldrb	r3, [r7, #18]
 801055e:	4619      	mov	r1, r3
 8010560:	7fbb      	ldrb	r3, [r7, #30]
 8010562:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010566:	fb03 f301 	mul.w	r3, r3, r1
 801056a:	4413      	add	r3, r2
 801056c:	0a1b      	lsrs	r3, r3, #8
 801056e:	b2db      	uxtb	r3, r3
 8010570:	753b      	strb	r3, [r7, #20]
#endif

#if LV_COLOR_16_SWAP == 0
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 8010572:	7e7b      	ldrb	r3, [r7, #25]
 8010574:	7f7a      	ldrb	r2, [r7, #29]
 8010576:	fb02 f303 	mul.w	r3, r2, r3
 801057a:	7c7a      	ldrb	r2, [r7, #17]
 801057c:	4611      	mov	r1, r2
 801057e:	7f7a      	ldrb	r2, [r7, #29]
 8010580:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8010584:	fb02 f201 	mul.w	r2, r2, r1
 8010588:	4413      	add	r3, r2
 801058a:	0a1b      	lsrs	r3, r3, #8
 801058c:	b2db      	uxtb	r3, r3
 801058e:	757b      	strb	r3, [r7, #21]
                res_color.ch.green_h = green >> 3;
                res_color.ch.green_l = green & 0x7;
#endif

#if LV_COLOR_DEPTH == 32
                res_color.ch.alpha =  0xff;
 8010590:	23ff      	movs	r3, #255	; 0xff
 8010592:	75fb      	strb	r3, [r7, #23]
#endif

                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 8010594:	7f3b      	ldrb	r3, [r7, #28]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d10b      	bne.n	80105b2 <draw_letter_subpx+0x40a>
 801059a:	7f7b      	ldrb	r3, [r7, #29]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d108      	bne.n	80105b2 <draw_letter_subpx+0x40a>
 80105a0:	7fbb      	ldrb	r3, [r7, #30]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d105      	bne.n	80105b2 <draw_letter_subpx+0x40a>
 80105a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105aa:	4413      	add	r3, r2
 80105ac:	2200      	movs	r2, #0
 80105ae:	701a      	strb	r2, [r3, #0]
 80105b0:	e004      	b.n	80105bc <draw_letter_subpx+0x414>
                else mask_buf[mask_p] = LV_OPA_COVER;
 80105b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105b6:	4413      	add	r3, r2
 80105b8:	22ff      	movs	r2, #255	; 0xff
 80105ba:	701a      	strb	r2, [r3, #0]
                color_buf[mask_p] = res_color;
 80105bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105be:	009b      	lsls	r3, r3, #2
 80105c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105c2:	4413      	add	r3, r2
 80105c4:	697a      	ldr	r2, [r7, #20]
 80105c6:	601a      	str	r2, [r3, #0]

                /*Next mask byte*/
                mask_p++;
 80105c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105ca:	3301      	adds	r3, #1
 80105cc:	677b      	str	r3, [r7, #116]	; 0x74
                vdb_buf_tmp++;
 80105ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105d0:	3304      	adds	r3, #4
 80105d2:	673b      	str	r3, [r7, #112]	; 0x70
            }

            /*Go to the next column*/
            if(col_bit < (int32_t)(8 - bpp)) {
 80105d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105d8:	f1c3 0308 	rsb	r3, r3, #8
 80105dc:	461a      	mov	r2, r3
 80105de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105e0:	4293      	cmp	r3, r2
 80105e2:	da0d      	bge.n	8010600 <draw_letter_subpx+0x458>
                col_bit += bpp;
 80105e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80105e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105ea:	4413      	add	r3, r2
 80105ec:	67bb      	str	r3, [r7, #120]	; 0x78
                bitmask = bitmask >> bpp;
 80105ee:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80105f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105f6:	fa22 f303 	lsr.w	r3, r2, r3
 80105fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80105fe:	e00a      	b.n	8010616 <draw_letter_subpx+0x46e>
            }
            else {
                col_bit = 0;
 8010600:	2300      	movs	r3, #0
 8010602:	67bb      	str	r3, [r7, #120]	; 0x78
                bitmask = bitmask_init;
 8010604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                map_p++;
 801060c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010610:	3301      	adds	r3, #1
 8010612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        for(col = col_start; col < col_end; col++) {
 8010616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801061a:	3301      	adds	r3, #1
 801061c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010620:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010626:	429a      	cmp	r2, r3
 8010628:	f6ff af19 	blt.w	801045e <draw_letter_subpx+0x2b6>
            }
        }

        /*Apply masks if any*/
        if(other_mask_cnt) {
 801062c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010630:	2b00      	cmp	r3, #0
 8010632:	d025      	beq.n	8010680 <draw_letter_subpx+0x4d8>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
 8010634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010638:	18d4      	adds	r4, r2, r3
 801063a:	f9b7 5020 	ldrsh.w	r5, [r7, #32]
 801063e:	f9b7 6026 	ldrsh.w	r6, [r7, #38]	; 0x26
 8010642:	f107 0320 	add.w	r3, r7, #32
 8010646:	4618      	mov	r0, r3
 8010648:	f7fe fd38 	bl	800f0bc <lv_area_get_width>
 801064c:	4603      	mov	r3, r0
 801064e:	4632      	mov	r2, r6
 8010650:	4629      	mov	r1, r5
 8010652:	4620      	mov	r0, r4
 8010654:	f001 fa78 	bl	8011b48 <lv_draw_mask_apply>
 8010658:	4603      	mov	r3, r0
 801065a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                                             lv_area_get_width(&map_area));
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801065e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010662:	2b00      	cmp	r3, #0
 8010664:	d10c      	bne.n	8010680 <draw_letter_subpx+0x4d8>
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
 8010666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801066a:	18d4      	adds	r4, r2, r3
 801066c:	f107 0320 	add.w	r3, r7, #32
 8010670:	4618      	mov	r0, r3
 8010672:	f7fe fd23 	bl	800f0bc <lv_area_get_width>
 8010676:	4603      	mov	r3, r0
 8010678:	4619      	mov	r1, r3
 801067a:	4620      	mov	r0, r4
 801067c:	f00c fd71 	bl	801d162 <_lv_memset_00>
            }
        }

        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8010680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010684:	1ad2      	subs	r2, r2, r3
 8010686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010688:	4413      	add	r3, r2
 801068a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801068c:	429a      	cmp	r2, r3
 801068e:	dd07      	ble.n	80106a0 <draw_letter_subpx+0x4f8>
            map_area.y2 ++;
 8010690:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010694:	b29b      	uxth	r3, r3
 8010696:	3301      	adds	r3, #1
 8010698:	b29b      	uxth	r3, r3
 801069a:	b21b      	sxth	r3, r3
 801069c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801069e:	e01a      	b.n	80106d6 <draw_letter_subpx+0x52e>
        }
        else {
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 80106a0:	f107 0120 	add.w	r1, r7, #32
 80106a4:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80106a8:	9302      	str	r3, [sp, #8]
 80106aa:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80106ae:	9301      	str	r3, [sp, #4]
 80106b0:	2302      	movs	r3, #2
 80106b2:	9300      	str	r3, [sp, #0]
 80106b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7fc f8e8 	bl	800c88e <_lv_blend_map>

            map_area.y1 = map_area.y2 + 1;
 80106be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	3301      	adds	r3, #1
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	b21b      	sxth	r3, r3
 80106ca:	847b      	strh	r3, [r7, #34]	; 0x22
            map_area.y2 = map_area.y1;
 80106cc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80106d0:	84fb      	strh	r3, [r7, #38]	; 0x26
            mask_p = 0;
 80106d2:	2300      	movs	r3, #0
 80106d4:	677b      	str	r3, [r7, #116]	; 0x74
        }

        col_bit += ((box_w - col_end) + col_start) * bpp;
 80106d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106da:	1ad2      	subs	r2, r2, r3
 80106dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106de:	4413      	add	r3, r2
 80106e0:	461a      	mov	r2, r3
 80106e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80106e6:	fb03 f202 	mul.w	r2, r3, r2
 80106ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106ec:	4413      	add	r3, r2
 80106ee:	67bb      	str	r3, [r7, #120]	; 0x78

        map_p += (col_bit >> 3);
 80106f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106f2:	10db      	asrs	r3, r3, #3
 80106f4:	461a      	mov	r2, r3
 80106f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80106fa:	4413      	add	r3, r2
 80106fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        col_bit = col_bit & 0x7;
 8010700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010702:	f003 0307 	and.w	r3, r3, #7
 8010706:	67bb      	str	r3, [r7, #120]	; 0x78

        /*Next row in VDB*/
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 8010708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801070a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	4a1e      	ldr	r2, [pc, #120]	; (8010788 <draw_letter_subpx+0x5e0>)
 8010710:	fb82 1203 	smull	r1, r2, r2, r3
 8010714:	17db      	asrs	r3, r3, #31
 8010716:	1a9a      	subs	r2, r3, r2
 8010718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071a:	4413      	add	r3, r2
 801071c:	009b      	lsls	r3, r3, #2
 801071e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010720:	4413      	add	r3, r2
 8010722:	673b      	str	r3, [r7, #112]	; 0x70
    for(row = row_start ; row < row_end; row++) {
 8010724:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010728:	3301      	adds	r3, #1
 801072a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801072e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010734:	429a      	cmp	r2, r3
 8010736:	f6ff ae83 	blt.w	8010440 <draw_letter_subpx+0x298>
    }

    /*Flush the last part*/
    if(map_area.y1 != map_area.y2) {
 801073a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801073e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010742:	429a      	cmp	r2, r3
 8010744:	d015      	beq.n	8010772 <draw_letter_subpx+0x5ca>
        map_area.y2--;
 8010746:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801074a:	b29b      	uxth	r3, r3
 801074c:	3b01      	subs	r3, #1
 801074e:	b29b      	uxth	r3, r3
 8010750:	b21b      	sxth	r3, r3
 8010752:	84fb      	strh	r3, [r7, #38]	; 0x26
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 8010754:	f107 0120 	add.w	r1, r7, #32
 8010758:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 801075c:	9302      	str	r3, [sp, #8]
 801075e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8010762:	9301      	str	r3, [sp, #4]
 8010764:	2302      	movs	r3, #2
 8010766:	9300      	str	r3, [sp, #0]
 8010768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801076a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f7fc f88e 	bl	800c88e <_lv_blend_map>
    }

    _lv_mem_buf_release(mask_buf);
 8010772:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010774:	f00c f9ca 	bl	801cb0c <_lv_mem_buf_release>
    _lv_mem_buf_release(color_buf);
 8010778:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801077a:	f00c f9c7 	bl	801cb0c <_lv_mem_buf_release>
 801077e:	e000      	b.n	8010782 <draw_letter_subpx+0x5da>
            return; /*Invalid bpp. Can't render the letter*/
 8010780:	bf00      	nop
#else
    LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
#endif
}
 8010782:	379c      	adds	r7, #156	; 0x9c
 8010784:	46bd      	mov	sp, r7
 8010786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010788:	55555556 	.word	0x55555556

0801078c <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 801078c:	b480      	push	{r7}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
 8010792:	4603      	mov	r3, r0
 8010794:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 801079a:	79fb      	ldrb	r3, [r7, #7]
 801079c:	2b2f      	cmp	r3, #47	; 0x2f
 801079e:	d906      	bls.n	80107ae <hex_char_to_num+0x22>
 80107a0:	79fb      	ldrb	r3, [r7, #7]
 80107a2:	2b39      	cmp	r3, #57	; 0x39
 80107a4:	d803      	bhi.n	80107ae <hex_char_to_num+0x22>
        result = hex - '0';
 80107a6:	79fb      	ldrb	r3, [r7, #7]
 80107a8:	3b30      	subs	r3, #48	; 0x30
 80107aa:	73fb      	strb	r3, [r7, #15]
 80107ac:	e02d      	b.n	801080a <hex_char_to_num+0x7e>
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 80107ae:	79fb      	ldrb	r3, [r7, #7]
 80107b0:	2b60      	cmp	r3, #96	; 0x60
 80107b2:	d902      	bls.n	80107ba <hex_char_to_num+0x2e>
 80107b4:	79fb      	ldrb	r3, [r7, #7]
 80107b6:	3b20      	subs	r3, #32
 80107b8:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 80107ba:	79fb      	ldrb	r3, [r7, #7]
 80107bc:	3b41      	subs	r3, #65	; 0x41
 80107be:	2b05      	cmp	r3, #5
 80107c0:	d820      	bhi.n	8010804 <hex_char_to_num+0x78>
 80107c2:	a201      	add	r2, pc, #4	; (adr r2, 80107c8 <hex_char_to_num+0x3c>)
 80107c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c8:	080107e1 	.word	0x080107e1
 80107cc:	080107e7 	.word	0x080107e7
 80107d0:	080107ed 	.word	0x080107ed
 80107d4:	080107f3 	.word	0x080107f3
 80107d8:	080107f9 	.word	0x080107f9
 80107dc:	080107ff 	.word	0x080107ff
            case 'A':
                result = 10;
 80107e0:	230a      	movs	r3, #10
 80107e2:	73fb      	strb	r3, [r7, #15]
                break;
 80107e4:	e011      	b.n	801080a <hex_char_to_num+0x7e>
            case 'B':
                result = 11;
 80107e6:	230b      	movs	r3, #11
 80107e8:	73fb      	strb	r3, [r7, #15]
                break;
 80107ea:	e00e      	b.n	801080a <hex_char_to_num+0x7e>
            case 'C':
                result = 12;
 80107ec:	230c      	movs	r3, #12
 80107ee:	73fb      	strb	r3, [r7, #15]
                break;
 80107f0:	e00b      	b.n	801080a <hex_char_to_num+0x7e>
            case 'D':
                result = 13;
 80107f2:	230d      	movs	r3, #13
 80107f4:	73fb      	strb	r3, [r7, #15]
                break;
 80107f6:	e008      	b.n	801080a <hex_char_to_num+0x7e>
            case 'E':
                result = 14;
 80107f8:	230e      	movs	r3, #14
 80107fa:	73fb      	strb	r3, [r7, #15]
                break;
 80107fc:	e005      	b.n	801080a <hex_char_to_num+0x7e>
            case 'F':
                result = 15;
 80107fe:	230f      	movs	r3, #15
 8010800:	73fb      	strb	r3, [r7, #15]
                break;
 8010802:	e002      	b.n	801080a <hex_char_to_num+0x7e>
            default:
                result = 0;
 8010804:	2300      	movs	r3, #0
 8010806:	73fb      	strb	r3, [r7, #15]
                break;
 8010808:	bf00      	nop
        }
    }

    return result;
 801080a:	7bfb      	ldrb	r3, [r7, #15]
}
 801080c:	4618      	mov	r0, r3
 801080e:	3714      	adds	r7, #20
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <lv_area_get_width>:
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010826:	b29a      	uxth	r2, r3
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801082e:	b29b      	uxth	r3, r3
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	b29b      	uxth	r3, r3
 8010834:	3301      	adds	r3, #1
 8010836:	b29b      	uxth	r3, r3
 8010838:	b21b      	sxth	r3, r3
}
 801083a:	4618      	mov	r0, r3
 801083c:	370c      	adds	r7, #12
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr

08010846 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 8010846:	b580      	push	{r7, lr}
 8010848:	b082      	sub	sp, #8
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 801084e:	210c      	movs	r1, #12
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f00c fc86 	bl	801d162 <_lv_memset_00>
    dsc->width = 1;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2201      	movs	r2, #1
 801085a:	809a      	strh	r2, [r3, #4]
    dsc->opa = LV_OPA_COVER;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	22ff      	movs	r2, #255	; 0xff
 8010860:	729a      	strb	r2, [r3, #10]
    dsc->color = LV_COLOR_BLACK;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2200      	movs	r2, #0
 8010866:	701a      	strb	r2, [r3, #0]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	705a      	strb	r2, [r3, #1]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2200      	movs	r2, #0
 8010872:	709a      	strb	r2, [r3, #2]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	22ff      	movs	r2, #255	; 0xff
 8010878:	70da      	strb	r2, [r3, #3]
}
 801087a:	bf00      	nop
 801087c:	3708      	adds	r7, #8
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}

08010882 <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 8010882:	b580      	push	{r7, lr}
 8010884:	b0a6      	sub	sp, #152	; 0x98
 8010886:	af00      	add	r7, sp, #0
 8010888:	60f8      	str	r0, [r7, #12]
 801088a:	60b9      	str	r1, [r7, #8]
 801088c:	607a      	str	r2, [r7, #4]
 801088e:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010896:	2b00      	cmp	r3, #0
 8010898:	f000 8179 	beq.w	8010b8e <lv_draw_line+0x30c>
    if(dsc->opa <= LV_OPA_MIN) return;
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	7a9b      	ldrb	r3, [r3, #10]
 80108a0:	2b02      	cmp	r3, #2
 80108a2:	f240 8176 	bls.w	8010b92 <lv_draw_line+0x310>

    if(point1->x == point2->x && point1->y == point2->y) return;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d108      	bne.n	80108c8 <lv_draw_line+0x46>
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	f000 8167 	beq.w	8010b96 <lv_draw_line+0x314>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108d4:	4293      	cmp	r3, r2
 80108d6:	bfa8      	it	ge
 80108d8:	4613      	movge	r3, r2
 80108da:	b21b      	sxth	r3, r3
 80108dc:	b29a      	uxth	r2, r3
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	da00      	bge.n	80108ea <lv_draw_line+0x68>
 80108e8:	3301      	adds	r3, #1
 80108ea:	105b      	asrs	r3, r3, #1
 80108ec:	b21b      	sxth	r3, r3
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	1ad3      	subs	r3, r2, r3
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	b21b      	sxth	r3, r3
 80108f6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010906:	4293      	cmp	r3, r2
 8010908:	bfb8      	it	lt
 801090a:	4613      	movlt	r3, r2
 801090c:	b21b      	sxth	r3, r3
 801090e:	b29a      	uxth	r2, r3
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	da00      	bge.n	801091c <lv_draw_line+0x9a>
 801091a:	3301      	adds	r3, #1
 801091c:	105b      	asrs	r3, r3, #1
 801091e:	b21b      	sxth	r3, r3
 8010920:	b29b      	uxth	r3, r3
 8010922:	4413      	add	r3, r2
 8010924:	b29b      	uxth	r3, r3
 8010926:	b21b      	sxth	r3, r3
 8010928:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010938:	4293      	cmp	r3, r2
 801093a:	bfa8      	it	ge
 801093c:	4613      	movge	r3, r2
 801093e:	b21b      	sxth	r3, r3
 8010940:	b29a      	uxth	r2, r3
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010948:	2b00      	cmp	r3, #0
 801094a:	da00      	bge.n	801094e <lv_draw_line+0xcc>
 801094c:	3301      	adds	r3, #1
 801094e:	105b      	asrs	r3, r3, #1
 8010950:	b21b      	sxth	r3, r3
 8010952:	b29b      	uxth	r3, r3
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	b29b      	uxth	r3, r3
 8010958:	b21b      	sxth	r3, r3
 801095a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801096a:	4293      	cmp	r3, r2
 801096c:	bfb8      	it	lt
 801096e:	4613      	movlt	r3, r2
 8010970:	b21b      	sxth	r3, r3
 8010972:	b29a      	uxth	r2, r3
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801097a:	2b00      	cmp	r3, #0
 801097c:	da00      	bge.n	8010980 <lv_draw_line+0xfe>
 801097e:	3301      	adds	r3, #1
 8010980:	105b      	asrs	r3, r3, #1
 8010982:	b21b      	sxth	r3, r3
 8010984:	b29b      	uxth	r3, r3
 8010986:	4413      	add	r3, r2
 8010988:	b29b      	uxth	r3, r3
 801098a:	b21b      	sxth	r3, r3
 801098c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 8010990:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8010994:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	4618      	mov	r0, r3
 801099c:	f00a fa90 	bl	801aec0 <_lv_area_intersect>
 80109a0:	4603      	mov	r3, r0
 80109a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if(!is_common) return;
 80109a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80109aa:	f083 0301 	eor.w	r3, r3, #1
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f040 80f2 	bne.w	8010b9a <lv_draw_line+0x318>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d107      	bne.n	80109d6 <lv_draw_line+0x154>
 80109c6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	68b9      	ldr	r1, [r7, #8]
 80109ce:	68f8      	ldr	r0, [r7, #12]
 80109d0:	f000 f8e7 	bl	8010ba2 <draw_line_hor>
 80109d4:	e016      	b.n	8010a04 <lv_draw_line+0x182>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d107      	bne.n	80109f6 <lv_draw_line+0x174>
 80109e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	68b9      	ldr	r1, [r7, #8]
 80109ee:	68f8      	ldr	r0, [r7, #12]
 80109f0:	f000 faa6 	bl	8010f40 <draw_line_ver>
 80109f4:	e006      	b.n	8010a04 <lv_draw_line+0x182>
    else draw_line_skew(point1, point2, &clip_line, dsc);
 80109f6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	68b9      	ldr	r1, [r7, #8]
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f000 fc3a 	bl	8011278 <draw_line_skew>

    if(dsc->round_end || dsc->round_start) {
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	7adb      	ldrb	r3, [r3, #11]
 8010a08:	f003 0308 	and.w	r3, r3, #8
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d107      	bne.n	8010a22 <lv_draw_line+0x1a0>
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	7adb      	ldrb	r3, [r3, #11]
 8010a16:	f003 0304 	and.w	r3, r3, #4
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f000 80bd 	beq.w	8010b9c <lv_draw_line+0x31a>
        lv_draw_rect_dsc_t cir_dsc;
        lv_draw_rect_dsc_init(&cir_dsc);
 8010a22:	f107 0314 	add.w	r3, r7, #20
 8010a26:	4618      	mov	r0, r3
 8010a28:	f002 fc9a 	bl	8013360 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	61bb      	str	r3, [r7, #24]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8010a32:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010a36:	82bb      	strh	r3, [r7, #20]
        cir_dsc.bg_opa = dsc->opa;
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	7a9b      	ldrb	r3, [r3, #10]
 8010a3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        int32_t r = (dsc->width >> 1);
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010a46:	105b      	asrs	r3, r3, #1
 8010a48:	b21b      	sxth	r3, r3
 8010a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	f003 0301 	and.w	r3, r3, #1
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	bf0c      	ite	eq
 8010a5e:	2301      	moveq	r3, #1
 8010a60:	2300      	movne	r3, #0
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        lv_area_t cir_area;

        if(dsc->round_start) {
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	7adb      	ldrb	r3, [r3, #11]
 8010a6c:	f003 0304 	and.w	r3, r3, #4
 8010a70:	b2db      	uxtb	r3, r3
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d041      	beq.n	8010afa <lv_draw_line+0x278>
            cir_area.x1 = point1->x - r;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	b21b      	sxth	r3, r3
 8010a8a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            cir_area.y1 = point1->y - r;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a94:	b29a      	uxth	r2, r3
 8010a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	b21b      	sxth	r3, r3
 8010aa2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            cir_area.x2 = point1->x + r - r_corr;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	4413      	add	r3, r2
 8010ab6:	b29a      	uxth	r2, r3
 8010ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	1ad3      	subs	r3, r2, r3
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	b21b      	sxth	r3, r3
 8010ac4:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
            cir_area.y2 = point1->y + r - r_corr ;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010ace:	b29a      	uxth	r2, r3
 8010ad0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	4413      	add	r3, r2
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	1ad3      	subs	r3, r2, r3
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	b21b      	sxth	r3, r3
 8010ae6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8010aea:	f107 0214 	add.w	r2, r7, #20
 8010aee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010af2:	6879      	ldr	r1, [r7, #4]
 8010af4:	4618      	mov	r0, r3
 8010af6:	f002 fcb7 	bl	8013468 <lv_draw_rect>
        }

        if(dsc->round_end) {
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	7adb      	ldrb	r3, [r3, #11]
 8010afe:	f003 0308 	and.w	r3, r3, #8
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d049      	beq.n	8010b9c <lv_draw_line+0x31a>
            cir_area.x1 = point2->x - r;
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	b21b      	sxth	r3, r3
 8010b1c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            cir_area.y1 = point2->y - r;
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b26:	b29a      	uxth	r2, r3
 8010b28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	b21b      	sxth	r3, r3
 8010b34:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            cir_area.x2 = point2->x + r - r_corr;
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b3e:	b29a      	uxth	r2, r3
 8010b40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	4413      	add	r3, r2
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	b21b      	sxth	r3, r3
 8010b56:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
            cir_area.y2 = point2->y + r - r_corr ;
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b60:	b29a      	uxth	r2, r3
 8010b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	4413      	add	r3, r2
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	1ad3      	subs	r3, r2, r3
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	b21b      	sxth	r3, r3
 8010b78:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8010b7c:	f107 0214 	add.w	r2, r7, #20
 8010b80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010b84:	6879      	ldr	r1, [r7, #4]
 8010b86:	4618      	mov	r0, r3
 8010b88:	f002 fc6e 	bl	8013468 <lv_draw_rect>
 8010b8c:	e006      	b.n	8010b9c <lv_draw_line+0x31a>
    if(dsc->width == 0) return;
 8010b8e:	bf00      	nop
 8010b90:	e004      	b.n	8010b9c <lv_draw_line+0x31a>
    if(dsc->opa <= LV_OPA_MIN) return;
 8010b92:	bf00      	nop
 8010b94:	e002      	b.n	8010b9c <lv_draw_line+0x31a>
    if(point1->x == point2->x && point1->y == point2->y) return;
 8010b96:	bf00      	nop
 8010b98:	e000      	b.n	8010b9c <lv_draw_line+0x31a>
    if(!is_common) return;
 8010b9a:	bf00      	nop
        }
    }
}
 8010b9c:	3798      	adds	r7, #152	; 0x98
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <draw_line_hor>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
 8010ba2:	b580      	push	{r7, lr}
 8010ba4:	b09a      	sub	sp, #104	; 0x68
 8010ba6:	af04      	add	r7, sp, #16
 8010ba8:	60f8      	str	r0, [r7, #12]
 8010baa:	60b9      	str	r1, [r7, #8]
 8010bac:	607a      	str	r2, [r7, #4]
 8010bae:	603b      	str	r3, [r7, #0]
    lv_opa_t opa = dsc->opa;
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	7a9b      	ldrb	r3, [r3, #10]
 8010bb4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8010bb8:	f7f9 fbba 	bl	800a330 <_lv_refr_get_disp_refreshing>
 8010bbc:	6478      	str	r0, [r7, #68]	; 0x44
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010bbe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010bc0:	f009 fca6 	bl	801a510 <lv_disp_get_buf>
 8010bc4:	6438      	str	r0, [r7, #64]	; 0x40

    const lv_area_t * disp_area = &vdb->area;
 8010bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bc8:	3310      	adds	r3, #16
 8010bca:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t w = dsc->width - 1;
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t w_half0 = w >> 1;
 8010bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd8:	105b      	asrs	r3, r3, #1
 8010bda:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8010bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bde:	f003 0301 	and.w	r3, r3, #1
 8010be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010be4:	4413      	add	r3, r2
 8010be6:	633b      	str	r3, [r7, #48]	; 0x30

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d006      	beq.n	8010c00 <draw_line_hor+0x5e>
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d001      	beq.n	8010c00 <draw_line_hor+0x5e>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	e000      	b.n	8010c02 <draw_line_hor+0x60>
 8010c00:	2300      	movs	r3, #0
 8010c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c0a:	f003 0301 	and.w	r3, r3, #1
 8010c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    bool simple_mode = true;
 8010c12:	2301      	movs	r3, #1
 8010c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 8010c18:	f001 f832 	bl	8011c80 <lv_draw_mask_get_cnt>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d003      	beq.n	8010c2a <draw_line_hor+0x88>
 8010c22:	2300      	movs	r3, #0
 8010c24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010c28:	e006      	b.n	8010c38 <draw_line_hor+0x96>
    else if(dashed) simple_mode = false;
 8010c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d002      	beq.n	8010c38 <draw_line_hor+0x96>
 8010c32:	2300      	movs	r3, #0
 8010c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c44:	4293      	cmp	r3, r2
 8010c46:	bfa8      	it	ge
 8010c48:	4613      	movge	r3, r2
 8010c4a:	b21b      	sxth	r3, r3
 8010c4c:	833b      	strh	r3, [r7, #24]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	bfb8      	it	lt
 8010c5e:	4613      	movlt	r3, r2
 8010c60:	b21b      	sxth	r3, r3
 8010c62:	b29b      	uxth	r3, r3
 8010c64:	3b01      	subs	r3, #1
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	b21b      	sxth	r3, r3
 8010c6a:	83bb      	strh	r3, [r7, #28]
    draw_area.y1 = point1->y - w_half1;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c76:	b29b      	uxth	r3, r3
 8010c78:	1ad3      	subs	r3, r2, r3
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	b21b      	sxth	r3, r3
 8010c7e:	837b      	strh	r3, [r7, #26]
    draw_area.y2 = point1->y + w_half0;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	4413      	add	r3, r2
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	b21b      	sxth	r3, r3
 8010c92:	83fb      	strh	r3, [r7, #30]

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 8010c94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d013      	beq.n	8010cc4 <draw_line_hor+0x122>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	7adb      	ldrb	r3, [r3, #11]
 8010ca0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010ca4:	b2db      	uxtb	r3, r3
        _lv_blend_fill(clip, &draw_area,
 8010ca6:	683a      	ldr	r2, [r7, #0]
 8010ca8:	f107 0118 	add.w	r1, r7, #24
 8010cac:	9302      	str	r3, [sp, #8]
 8010cae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8010cb2:	9301      	str	r3, [sp, #4]
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	9300      	str	r3, [sp, #0]
 8010cb8:	2300      	movs	r3, #0
 8010cba:	6812      	ldr	r2, [r2, #0]
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7fb fd15 	bl	800c6ec <_lv_blend_fill>
 8010cc2:	e13a      	b.n	8010f3a <draw_line_hor+0x398>
    /*If there other mask apply it*/
    else {
        /* Get clipped fill area which is the real draw area.
         * It is always the same or inside `fill_area` */
        bool is_common;
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 8010cc4:	f107 0218 	add.w	r2, r7, #24
 8010cc8:	f107 0318 	add.w	r3, r7, #24
 8010ccc:	6879      	ldr	r1, [r7, #4]
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f00a f8f6 	bl	801aec0 <_lv_area_intersect>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if(!is_common) return;
 8010cda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010cde:	f083 0301 	eor.w	r3, r3, #1
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f040 8128 	bne.w	8010f3a <draw_line_hor+0x398>

        /* Now `draw_area` has absolute coordinates.
         * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
        draw_area.x1 -= disp_area->x1;
 8010cea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	1ad3      	subs	r3, r2, r3
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	b21b      	sxth	r3, r3
 8010cfe:	833b      	strh	r3, [r7, #24]
        draw_area.y1 -= disp_area->y1;
 8010d00:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	1ad3      	subs	r3, r2, r3
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	b21b      	sxth	r3, r3
 8010d14:	837b      	strh	r3, [r7, #26]
        draw_area.x2 -= disp_area->x1;
 8010d16:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	1ad3      	subs	r3, r2, r3
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	b21b      	sxth	r3, r3
 8010d2a:	83bb      	strh	r3, [r7, #28]
        draw_area.y2 -= disp_area->y1;
 8010d2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010d30:	b29a      	uxth	r2, r3
 8010d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	1ad3      	subs	r3, r2, r3
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	b21b      	sxth	r3, r3
 8010d40:	83fb      	strh	r3, [r7, #30]

        int32_t draw_area_w = lv_area_get_width(&draw_area);
 8010d42:	f107 0318 	add.w	r3, r7, #24
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7ff fd66 	bl	8010818 <lv_area_get_width>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_area_t fill_area;
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 8010d50:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010d54:	b29a      	uxth	r2, r3
 8010d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	4413      	add	r3, r2
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	b21b      	sxth	r3, r3
 8010d64:	823b      	strh	r3, [r7, #16]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 8010d66:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010d6a:	b29a      	uxth	r2, r3
 8010d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d72:	b29b      	uxth	r3, r3
 8010d74:	4413      	add	r3, r2
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	b21b      	sxth	r3, r3
 8010d7a:	82bb      	strh	r3, [r7, #20]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 8010d7c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010d80:	b29a      	uxth	r2, r3
 8010d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	4413      	add	r3, r2
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	b21b      	sxth	r3, r3
 8010d90:	827b      	strh	r3, [r7, #18]
        fill_area.y2 = fill_area.y1;
 8010d92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d96:	82fb      	strh	r3, [r7, #22]

        lv_style_int_t dash_start = 0;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        if(dashed) {
 8010d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d015      	beq.n	8010dd2 <draw_line_hor+0x230>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 8010da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010da8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010dac:	461a      	mov	r2, r3
 8010dae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010db2:	4413      	add	r3, r2
 8010db4:	683a      	ldr	r2, [r7, #0]
 8010db6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8010dba:	4611      	mov	r1, r2
 8010dbc:	683a      	ldr	r2, [r7, #0]
 8010dbe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010dc2:	440a      	add	r2, r1
 8010dc4:	fb93 f1f2 	sdiv	r1, r3, r2
 8010dc8:	fb02 f201 	mul.w	r2, r2, r1
 8010dcc:	1a9b      	subs	r3, r3, r2
 8010dce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }

        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8010dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f00b fdbb 	bl	801c950 <_lv_mem_buf_get>
 8010dda:	6278      	str	r0, [r7, #36]	; 0x24
        int32_t h;
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010ddc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010de0:	653b      	str	r3, [r7, #80]	; 0x50
 8010de2:	e0a0      	b.n	8010f26 <draw_line_hor+0x384>
            _lv_memset_ff(mask_buf, draw_area_w);
 8010de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de6:	4619      	mov	r1, r3
 8010de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dea:	f00c fa3a 	bl	801d262 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8010dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010df0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	4413      	add	r3, r2
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	b219      	sxth	r1, r3
 8010e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	4413      	add	r3, r2
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	b21a      	sxth	r2, r3
 8010e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e16:	b21b      	sxth	r3, r3
 8010e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e1a:	f000 fe95 	bl	8011b48 <lv_draw_mask_apply>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            if(dashed) {
 8010e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d056      	beq.n	8010eda <draw_line_hor+0x338>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8010e2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d052      	beq.n	8010eda <draw_line_hor+0x338>
                    lv_style_int_t dash_cnt = dash_start;
 8010e34:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010e38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                    lv_coord_t i;
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010e42:	e042      	b.n	8010eca <draw_line_hor+0x328>
                        if(dash_cnt <= dsc->dash_width) {
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010e4a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	dc17      	bgt.n	8010e82 <draw_line_hor+0x2e0>
                            int16_t diff = dsc->dash_width - dash_cnt;
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010e5e:	1ad3      	subs	r3, r2, r3
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	847b      	strh	r3, [r7, #34]	; 0x22
                            i += diff;
 8010e64:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8010e68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e6a:	4413      	add	r3, r2
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                            dash_cnt += diff;
 8010e72:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8010e76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e78:	4413      	add	r3, r2
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010e80:	e015      	b.n	8010eae <draw_line_hor+0x30c>
                        }
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8010e82:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010e94:	440b      	add	r3, r1
 8010e96:	429a      	cmp	r2, r3
 8010e98:	db03      	blt.n	8010ea2 <draw_line_hor+0x300>
                            dash_cnt = 0;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010ea0:	e005      	b.n	8010eae <draw_line_hor+0x30c>
                        }
                        else {
                            mask_buf[i] = 0x00;
 8010ea2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8010ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ea8:	4413      	add	r3, r2
 8010eaa:	2200      	movs	r2, #0
 8010eac:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 8010eae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010ebc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010eca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8010ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	dcb7      	bgt.n	8010e44 <draw_line_hor+0x2a2>
                        }
                    }

                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010ed4:	2302      	movs	r3, #2
 8010ed6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                }
            }

            _lv_blend_fill(clip, &fill_area,
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	7a9b      	ldrb	r3, [r3, #10]
                           dsc->color, mask_buf, mask_res, dsc->opa,
                           dsc->blend_mode);
 8010ede:	683a      	ldr	r2, [r7, #0]
 8010ee0:	7ad2      	ldrb	r2, [r2, #11]
 8010ee2:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8010ee6:	b2d2      	uxtb	r2, r2
            _lv_blend_fill(clip, &fill_area,
 8010ee8:	4610      	mov	r0, r2
 8010eea:	683a      	ldr	r2, [r7, #0]
 8010eec:	f107 0110 	add.w	r1, r7, #16
 8010ef0:	9002      	str	r0, [sp, #8]
 8010ef2:	9301      	str	r3, [sp, #4]
 8010ef4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010ef8:	9300      	str	r3, [sp, #0]
 8010efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efc:	6812      	ldr	r2, [r2, #0]
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f7fb fbf4 	bl	800c6ec <_lv_blend_fill>

            fill_area.y1++;
 8010f04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	b21b      	sxth	r3, r3
 8010f10:	827b      	strh	r3, [r7, #18]
            fill_area.y2++;
 8010f12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	3301      	adds	r3, #1
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	b21b      	sxth	r3, r3
 8010f1e:	82fb      	strh	r3, [r7, #22]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f22:	3301      	adds	r3, #1
 8010f24:	653b      	str	r3, [r7, #80]	; 0x50
 8010f26:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	f77f af58 	ble.w	8010de4 <draw_line_hor+0x242>
        }
        _lv_mem_buf_release(mask_buf);
 8010f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f36:	f00b fde9 	bl	801cb0c <_lv_mem_buf_release>
    }
}
 8010f3a:	3758      	adds	r7, #88	; 0x58
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b09a      	sub	sp, #104	; 0x68
 8010f44:	af04      	add	r7, sp, #16
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
 8010f4c:	603b      	str	r3, [r7, #0]
    lv_opa_t opa = dsc->opa;
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	7a9b      	ldrb	r3, [r3, #10]
 8010f52:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8010f56:	f7f9 f9eb 	bl	800a330 <_lv_refr_get_disp_refreshing>
 8010f5a:	6478      	str	r0, [r7, #68]	; 0x44
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010f5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f5e:	f009 fad7 	bl	801a510 <lv_disp_get_buf>
 8010f62:	6438      	str	r0, [r7, #64]	; 0x40

    const lv_area_t * disp_area = &vdb->area;
 8010f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f66:	3310      	adds	r3, #16
 8010f68:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t w = dsc->width - 1;
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010f70:	3b01      	subs	r3, #1
 8010f72:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t w_half0 = w >> 1;
 8010f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f76:	105b      	asrs	r3, r3, #1
 8010f78:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8010f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f7c:	f003 0301 	and.w	r3, r3, #1
 8010f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f82:	4413      	add	r3, r2
 8010f84:	633b      	str	r3, [r7, #48]	; 0x30

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d006      	beq.n	8010f9e <draw_line_ver+0x5e>
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d001      	beq.n	8010f9e <draw_line_ver+0x5e>
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e000      	b.n	8010fa0 <draw_line_ver+0x60>
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fa8:	f003 0301 	and.w	r3, r3, #1
 8010fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    bool simple_mode = true;
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 8010fb6:	f000 fe63 	bl	8011c80 <lv_draw_mask_get_cnt>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d003      	beq.n	8010fc8 <draw_line_ver+0x88>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010fc6:	e006      	b.n	8010fd6 <draw_line_ver+0x96>
    else if(dashed) simple_mode = false;
 8010fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d002      	beq.n	8010fd6 <draw_line_ver+0x96>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    lv_area_t draw_area;
    draw_area.x1 = point1->x - w_half1;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	1ad3      	subs	r3, r2, r3
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	b21b      	sxth	r3, r3
 8010fe8:	83bb      	strh	r3, [r7, #28]
    draw_area.x2 = point1->x + w_half0;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ff0:	b29a      	uxth	r2, r3
 8010ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	4413      	add	r3, r2
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	b21b      	sxth	r3, r3
 8010ffc:	843b      	strh	r3, [r7, #32]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801100a:	4293      	cmp	r3, r2
 801100c:	bfa8      	it	ge
 801100e:	4613      	movge	r3, r2
 8011010:	b21b      	sxth	r3, r3
 8011012:	83fb      	strh	r3, [r7, #30]
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011020:	4293      	cmp	r3, r2
 8011022:	bfb8      	it	lt
 8011024:	4613      	movlt	r3, r2
 8011026:	b21b      	sxth	r3, r3
 8011028:	b29b      	uxth	r3, r3
 801102a:	3b01      	subs	r3, #1
 801102c:	b29b      	uxth	r3, r3
 801102e:	b21b      	sxth	r3, r3
 8011030:	847b      	strh	r3, [r7, #34]	; 0x22

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 8011032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011036:	2b00      	cmp	r3, #0
 8011038:	d013      	beq.n	8011062 <draw_line_ver+0x122>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	7adb      	ldrb	r3, [r3, #11]
 801103e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8011042:	b2db      	uxtb	r3, r3
        _lv_blend_fill(clip, &draw_area,
 8011044:	683a      	ldr	r2, [r7, #0]
 8011046:	f107 011c 	add.w	r1, r7, #28
 801104a:	9302      	str	r3, [sp, #8]
 801104c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8011050:	9301      	str	r3, [sp, #4]
 8011052:	2301      	movs	r3, #1
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	2300      	movs	r3, #0
 8011058:	6812      	ldr	r2, [r2, #0]
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f7fb fb46 	bl	800c6ec <_lv_blend_fill>
 8011060:	e106      	b.n	8011270 <draw_line_ver+0x330>
    /*If there other mask apply it*/
    else {
        /* Get clipped fill area which is the real draw area.
         * It is always the same or inside `fill_area` */
        bool is_common;
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 8011062:	f107 021c 	add.w	r2, r7, #28
 8011066:	f107 031c 	add.w	r3, r7, #28
 801106a:	6879      	ldr	r1, [r7, #4]
 801106c:	4618      	mov	r0, r3
 801106e:	f009 ff27 	bl	801aec0 <_lv_area_intersect>
 8011072:	4603      	mov	r3, r0
 8011074:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if(!is_common) return;
 8011078:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801107c:	f083 0301 	eor.w	r3, r3, #1
 8011080:	b2db      	uxtb	r3, r3
 8011082:	2b00      	cmp	r3, #0
 8011084:	f040 80f4 	bne.w	8011270 <draw_line_ver+0x330>

        /* Now `draw_area` has absolute coordinates.
         * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
        draw_area.x1 -= vdb->area.x1;
 8011088:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801108c:	b29a      	uxth	r2, r3
 801108e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011090:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011094:	b29b      	uxth	r3, r3
 8011096:	1ad3      	subs	r3, r2, r3
 8011098:	b29b      	uxth	r3, r3
 801109a:	b21b      	sxth	r3, r3
 801109c:	83bb      	strh	r3, [r7, #28]
        draw_area.y1 -= vdb->area.y1;
 801109e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	1ad3      	subs	r3, r2, r3
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	b21b      	sxth	r3, r3
 80110b2:	83fb      	strh	r3, [r7, #30]
        draw_area.x2 -= vdb->area.x1;
 80110b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	b21b      	sxth	r3, r3
 80110c8:	843b      	strh	r3, [r7, #32]
        draw_area.y2 -= vdb->area.y1;
 80110ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80110ce:	b29a      	uxth	r2, r3
 80110d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	1ad3      	subs	r3, r2, r3
 80110da:	b29b      	uxth	r3, r3
 80110dc:	b21b      	sxth	r3, r3
 80110de:	847b      	strh	r3, [r7, #34]	; 0x22

        int32_t draw_area_w = lv_area_get_width(&draw_area);
 80110e0:	f107 031c 	add.w	r3, r7, #28
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7ff fb97 	bl	8010818 <lv_area_get_width>
 80110ea:	4603      	mov	r3, r0
 80110ec:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_area_t fill_area;
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 80110ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	4413      	add	r3, r2
 80110fe:	b29b      	uxth	r3, r3
 8011100:	b21b      	sxth	r3, r3
 8011102:	82bb      	strh	r3, [r7, #20]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 8011104:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011108:	b29a      	uxth	r2, r3
 801110a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801110c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011110:	b29b      	uxth	r3, r3
 8011112:	4413      	add	r3, r2
 8011114:	b29b      	uxth	r3, r3
 8011116:	b21b      	sxth	r3, r3
 8011118:	833b      	strh	r3, [r7, #24]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 801111a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801111e:	b29a      	uxth	r2, r3
 8011120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011122:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011126:	b29b      	uxth	r3, r3
 8011128:	4413      	add	r3, r2
 801112a:	b29b      	uxth	r3, r3
 801112c:	b21b      	sxth	r3, r3
 801112e:	82fb      	strh	r3, [r7, #22]
        fill_area.y2 = fill_area.y1;
 8011130:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011134:	837b      	strh	r3, [r7, #26]

        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8011136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011138:	4618      	mov	r0, r3
 801113a:	f00b fc09 	bl	801c950 <_lv_mem_buf_get>
 801113e:	6278      	str	r0, [r7, #36]	; 0x24

        lv_style_int_t dash_start = 0;
 8011140:	2300      	movs	r3, #0
 8011142:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        if(dashed) {
 8011146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801114a:	2b00      	cmp	r3, #0
 801114c:	d015      	beq.n	801117a <draw_line_ver+0x23a>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 801114e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011150:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011154:	461a      	mov	r2, r3
 8011156:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801115a:	4413      	add	r3, r2
 801115c:	683a      	ldr	r2, [r7, #0]
 801115e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8011162:	4611      	mov	r1, r2
 8011164:	683a      	ldr	r2, [r7, #0]
 8011166:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801116a:	440a      	add	r2, r1
 801116c:	fb93 f1f2 	sdiv	r1, r3, r2
 8011170:	fb02 f201 	mul.w	r2, r2, r1
 8011174:	1a9b      	subs	r3, r3, r2
 8011176:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }

        lv_style_int_t dash_cnt = dash_start;
 801117a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801117e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        int32_t h;
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8011182:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011188:	e069      	b.n	801125e <draw_line_ver+0x31e>
            _lv_memset_ff(mask_buf, draw_area_w);
 801118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118c:	4619      	mov	r1, r3
 801118e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011190:	f00c f867 	bl	801d262 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8011194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011196:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801119a:	b29a      	uxth	r2, r3
 801119c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	4413      	add	r3, r2
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	b219      	sxth	r1, r3
 80111a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111aa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80111ae:	b29a      	uxth	r2, r3
 80111b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	4413      	add	r3, r2
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	b21a      	sxth	r2, r3
 80111ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111bc:	b21b      	sxth	r3, r3
 80111be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111c0:	f000 fcc2 	bl	8011b48 <lv_draw_mask_apply>
 80111c4:	4603      	mov	r3, r0
 80111c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            if(dashed) {
 80111ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d023      	beq.n	801121a <draw_line_ver+0x2da>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 80111d2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d018      	beq.n	801120c <draw_line_ver+0x2cc>
                    if(dash_cnt > dsc->dash_width) {
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80111e0:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 80111e4:	429a      	cmp	r2, r3
 80111e6:	dd02      	ble.n	80111ee <draw_line_ver+0x2ae>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 80111e8:	2300      	movs	r3, #0
 80111ea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    }

                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 80111ee:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80111f8:	4619      	mov	r1, r3
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011200:	440b      	add	r3, r1
 8011202:	429a      	cmp	r2, r3
 8011204:	db02      	blt.n	801120c <draw_line_ver+0x2cc>
                        dash_cnt = 0;
 8011206:	2300      	movs	r3, #0
 8011208:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                    }
                }
                dash_cnt ++;
 801120c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8011210:	b29b      	uxth	r3, r3
 8011212:	3301      	adds	r3, #1
 8011214:	b29b      	uxth	r3, r3
 8011216:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            _lv_blend_fill(clip, &fill_area,
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	7a9b      	ldrb	r3, [r3, #10]
 801121e:	683a      	ldr	r2, [r7, #0]
 8011220:	f107 0014 	add.w	r0, r7, #20
 8011224:	2100      	movs	r1, #0
 8011226:	9102      	str	r1, [sp, #8]
 8011228:	9301      	str	r3, [sp, #4]
 801122a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011232:	6812      	ldr	r2, [r2, #0]
 8011234:	4601      	mov	r1, r0
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7fb fa58 	bl	800c6ec <_lv_blend_fill>
                           dsc->color, mask_buf, mask_res, dsc->opa,
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
 801123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011240:	b29b      	uxth	r3, r3
 8011242:	3301      	adds	r3, #1
 8011244:	b29b      	uxth	r3, r3
 8011246:	b21b      	sxth	r3, r3
 8011248:	82fb      	strh	r3, [r7, #22]
            fill_area.y2++;
 801124a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801124e:	b29b      	uxth	r3, r3
 8011250:	3301      	adds	r3, #1
 8011252:	b29b      	uxth	r3, r3
 8011254:	b21b      	sxth	r3, r3
 8011256:	837b      	strh	r3, [r7, #26]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8011258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801125a:	3301      	adds	r3, #1
 801125c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801125e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011262:	461a      	mov	r2, r3
 8011264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011266:	4293      	cmp	r3, r2
 8011268:	dd8f      	ble.n	801118a <draw_line_ver+0x24a>
        }
        _lv_mem_buf_release(mask_buf);
 801126a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801126c:	f00b fc4e 	bl	801cb0c <_lv_mem_buf_release>
    }
}
 8011270:	3758      	adds	r7, #88	; 0x58
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
	...

08011278 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,
                                                 const lv_area_t * clip,
                                                 const lv_draw_line_dsc_t * dsc)
{
 8011278:	b5b0      	push	{r4, r5, r7, lr}
 801127a:	b0d0      	sub	sp, #320	; 0x140
 801127c:	af04      	add	r7, sp, #16
 801127e:	f107 040c 	add.w	r4, r7, #12
 8011282:	6020      	str	r0, [r4, #0]
 8011284:	f107 0008 	add.w	r0, r7, #8
 8011288:	6001      	str	r1, [r0, #0]
 801128a:	1d39      	adds	r1, r7, #4
 801128c:	600a      	str	r2, [r1, #0]
 801128e:	463a      	mov	r2, r7
 8011290:	6013      	str	r3, [r2, #0]
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 8011292:	f107 030c 	add.w	r3, r7, #12
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801129c:	f107 0308 	add.w	r3, r7, #8
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112a6:	429a      	cmp	r2, r3
 80112a8:	da1c      	bge.n	80112e4 <draw_line_skew+0x6c>
        p1.y = point1->y;
 80112aa:	f107 030c 	add.w	r3, r7, #12
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112b4:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
        p2.y = point2->y;
 80112b8:	f107 0308 	add.w	r3, r7, #8
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112c2:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        p1.x = point1->x;
 80112c6:	f107 030c 	add.w	r3, r7, #12
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112d0:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
        p2.x = point2->x;
 80112d4:	f107 0308 	add.w	r3, r7, #8
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112de:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 80112e2:	e01b      	b.n	801131c <draw_line_skew+0xa4>
    }
    else {
        p1.y = point2->y;
 80112e4:	f107 0308 	add.w	r3, r7, #8
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112ee:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
        p2.y = point1->y;
 80112f2:	f107 030c 	add.w	r3, r7, #12
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112fc:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        p1.x = point2->x;
 8011300:	f107 0308 	add.w	r3, r7, #8
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f9b3 3000 	ldrsh.w	r3, [r3]
 801130a:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
        p2.x = point1->x;
 801130e:	f107 030c 	add.w	r3, r7, #12
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011318:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    }

    int32_t xdiff = p2.x - p1.x;
 801131c:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8011320:	461a      	mov	r2, r3
 8011322:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8011326:	1ad3      	subs	r3, r2, r3
 8011328:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    int32_t ydiff = p2.y - p1.y;
 801132c:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011330:	461a      	mov	r2, r3
 8011332:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 801133c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011340:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011344:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011348:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801134c:	2b00      	cmp	r3, #0
 801134e:	bfb8      	it	lt
 8011350:	425b      	neglt	r3, r3
 8011352:	429a      	cmp	r2, r3
 8011354:	bfcc      	ite	gt
 8011356:	2301      	movgt	r3, #1
 8011358:	2300      	movle	r3, #0
 801135a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 801135e:	463b      	mov	r3, r7
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011366:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t wcorr_i = 0;
 801136a:	2300      	movs	r3, #0
 801136c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 8011370:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011374:	2b00      	cmp	r3, #0
 8011376:	d00f      	beq.n	8011398 <draw_line_skew+0x120>
 8011378:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801137c:	2b00      	cmp	r3, #0
 801137e:	bfb8      	it	lt
 8011380:	425b      	neglt	r3, r3
 8011382:	015a      	lsls	r2, r3, #5
 8011384:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011388:	2b00      	cmp	r3, #0
 801138a:	bfb8      	it	lt
 801138c:	425b      	neglt	r3, r3
 801138e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011396:	e00e      	b.n	80113b6 <draw_line_skew+0x13e>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 8011398:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801139c:	2b00      	cmp	r3, #0
 801139e:	bfb8      	it	lt
 80113a0:	425b      	neglt	r3, r3
 80113a2:	015a      	lsls	r2, r3, #5
 80113a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	bfb8      	it	lt
 80113ac:	425b      	neglt	r3, r3
 80113ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80113b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 80113b6:	4a7d      	ldr	r2, [pc, #500]	; (80115ac <draw_line_skew+0x334>)
 80113b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80113bc:	4413      	add	r3, r2
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	461a      	mov	r2, r3
 80113c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80113c6:	fb03 f302 	mul.w	r3, r3, r2
 80113ca:	333f      	adds	r3, #63	; 0x3f
 80113cc:	11db      	asrs	r3, r3, #7
 80113ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t w_half0 = w >> 1;
 80113d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80113d6:	105b      	asrs	r3, r3, #1
 80113d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80113dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80113e0:	f003 0301 	and.w	r3, r3, #1
 80113e4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80113e8:	4413      	add	r3, r2
 80113ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 80113ee:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80113f2:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80113f6:	4293      	cmp	r3, r2
 80113f8:	bfa8      	it	ge
 80113fa:	4613      	movge	r3, r2
 80113fc:	b21b      	sxth	r3, r3
 80113fe:	b29a      	uxth	r2, r3
 8011400:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011404:	b29b      	uxth	r3, r3
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	b29b      	uxth	r3, r3
 801140a:	b21b      	sxth	r3, r3
 801140c:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 8011410:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8011414:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8011418:	4293      	cmp	r3, r2
 801141a:	bfb8      	it	lt
 801141c:	4613      	movlt	r3, r2
 801141e:	b21b      	sxth	r3, r3
 8011420:	b29a      	uxth	r2, r3
 8011422:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011426:	b29b      	uxth	r3, r3
 8011428:	4413      	add	r3, r2
 801142a:	b29b      	uxth	r3, r3
 801142c:	b21b      	sxth	r3, r3
 801142e:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 8011432:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8011436:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 801143a:	4293      	cmp	r3, r2
 801143c:	bfa8      	it	ge
 801143e:	4613      	movge	r3, r2
 8011440:	b21b      	sxth	r3, r3
 8011442:	b29a      	uxth	r2, r3
 8011444:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011448:	b29b      	uxth	r3, r3
 801144a:	1ad3      	subs	r3, r2, r3
 801144c:	b29b      	uxth	r3, r3
 801144e:	b21b      	sxth	r3, r3
 8011450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 8011454:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8011458:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 801145c:	4293      	cmp	r3, r2
 801145e:	bfb8      	it	lt
 8011460:	4613      	movlt	r3, r2
 8011462:	b21b      	sxth	r3, r3
 8011464:	b29a      	uxth	r2, r3
 8011466:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801146a:	b29b      	uxth	r3, r3
 801146c:	4413      	add	r3, r2
 801146e:	b29b      	uxth	r3, r3
 8011470:	b21b      	sxth	r3, r3
 8011472:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 8011476:	1d3b      	adds	r3, r7, #4
 8011478:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 801147c:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	f009 fd1d 	bl	801aec0 <_lv_area_intersect>
 8011486:	4603      	mov	r3, r0
 8011488:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    if(is_common == false) return;
 801148c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8011490:	f083 0301 	eor.w	r3, r3, #1
 8011494:	b2db      	uxtb	r3, r3
 8011496:	2b00      	cmp	r3, #0
 8011498:	f040 82c1 	bne.w	8011a1e <draw_line_skew+0x7a6>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 801149c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	f000 8085 	beq.w	80115b0 <draw_line_skew+0x338>
        if(xdiff > 0) {
 80114a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	dd3e      	ble.n	801152c <draw_line_skew+0x2b4>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 80114ae:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 80114b2:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80114b6:	b29a      	uxth	r2, r3
 80114b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80114bc:	b29b      	uxth	r3, r3
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	b21c      	sxth	r4, r3
 80114c4:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 80114c8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80114cc:	b29a      	uxth	r2, r3
 80114ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	1ad3      	subs	r3, r2, r3
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	b21b      	sxth	r3, r3
 80114da:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80114de:	2200      	movs	r2, #0
 80114e0:	9201      	str	r2, [sp, #4]
 80114e2:	9300      	str	r3, [sp, #0]
 80114e4:	462b      	mov	r3, r5
 80114e6:	4622      	mov	r2, r4
 80114e8:	f000 fbea 	bl	8011cc0 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 80114ec:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 80114f0:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	4413      	add	r3, r2
 80114fe:	b29b      	uxth	r3, r3
 8011500:	b21c      	sxth	r4, r3
 8011502:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 8011506:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 801150a:	b29a      	uxth	r2, r3
 801150c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011510:	b29b      	uxth	r3, r3
 8011512:	4413      	add	r3, r2
 8011514:	b29b      	uxth	r3, r3
 8011516:	b21b      	sxth	r3, r3
 8011518:	f107 0074 	add.w	r0, r7, #116	; 0x74
 801151c:	2201      	movs	r2, #1
 801151e:	9201      	str	r2, [sp, #4]
 8011520:	9300      	str	r3, [sp, #0]
 8011522:	462b      	mov	r3, r5
 8011524:	4622      	mov	r2, r4
 8011526:	f000 fbcb 	bl	8011cc0 <lv_draw_mask_line_points_init>
 801152a:	e07f      	b.n	801162c <draw_line_skew+0x3b4>
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801152c:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 8011530:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8011534:	b29a      	uxth	r2, r3
 8011536:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801153a:	b29b      	uxth	r3, r3
 801153c:	4413      	add	r3, r2
 801153e:	b29b      	uxth	r3, r3
 8011540:	b21c      	sxth	r4, r3
 8011542:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 8011546:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 801154a:	b29a      	uxth	r2, r3
 801154c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011550:	b29b      	uxth	r3, r3
 8011552:	4413      	add	r3, r2
 8011554:	b29b      	uxth	r3, r3
 8011556:	b21b      	sxth	r3, r3
 8011558:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 801155c:	2200      	movs	r2, #0
 801155e:	9201      	str	r2, [sp, #4]
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	462b      	mov	r3, r5
 8011564:	4622      	mov	r2, r4
 8011566:	f000 fbab 	bl	8011cc0 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801156a:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 801156e:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8011572:	b29a      	uxth	r2, r3
 8011574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011578:	b29b      	uxth	r3, r3
 801157a:	1ad3      	subs	r3, r2, r3
 801157c:	b29b      	uxth	r3, r3
 801157e:	b21c      	sxth	r4, r3
 8011580:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 8011584:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011588:	b29a      	uxth	r2, r3
 801158a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801158e:	b29b      	uxth	r3, r3
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	b29b      	uxth	r3, r3
 8011594:	b21b      	sxth	r3, r3
 8011596:	f107 0074 	add.w	r0, r7, #116	; 0x74
 801159a:	2201      	movs	r2, #1
 801159c:	9201      	str	r2, [sp, #4]
 801159e:	9300      	str	r3, [sp, #0]
 80115a0:	462b      	mov	r3, r5
 80115a2:	4622      	mov	r2, r4
 80115a4:	f000 fb8c 	bl	8011cc0 <lv_draw_mask_line_points_init>
 80115a8:	e040      	b.n	801162c <draw_line_skew+0x3b4>
 80115aa:	bf00      	nop
 80115ac:	0802d3b0 	.word	0x0802d3b0
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 80115b0:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	4413      	add	r3, r2
 80115be:	b29b      	uxth	r3, r3
 80115c0:	b219      	sxth	r1, r3
 80115c2:	f9b7 40da 	ldrsh.w	r4, [r7, #218]	; 0xda
 80115c6:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	4413      	add	r3, r2
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	b21d      	sxth	r5, r3
 80115d8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80115dc:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80115e0:	2200      	movs	r2, #0
 80115e2:	9201      	str	r2, [sp, #4]
 80115e4:	9300      	str	r3, [sp, #0]
 80115e6:	462b      	mov	r3, r5
 80115e8:	4622      	mov	r2, r4
 80115ea:	f000 fb69 	bl	8011cc0 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 80115ee:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	1ad3      	subs	r3, r2, r3
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	b219      	sxth	r1, r3
 8011600:	f9b7 40da 	ldrsh.w	r4, [r7, #218]	; 0xda
 8011604:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8011608:	b29a      	uxth	r2, r3
 801160a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801160e:	b29b      	uxth	r3, r3
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	b29b      	uxth	r3, r3
 8011614:	b21d      	sxth	r5, r3
 8011616:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 801161a:	f107 0074 	add.w	r0, r7, #116	; 0x74
 801161e:	2201      	movs	r2, #1
 8011620:	9201      	str	r2, [sp, #4]
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	462b      	mov	r3, r5
 8011626:	4622      	mov	r2, r4
 8011628:	f000 fb4a 	bl	8011cc0 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 801162c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011630:	2100      	movs	r1, #0
 8011632:	4618      	mov	r0, r3
 8011634:	f000 fa56 	bl	8011ae4 <lv_draw_mask_add>
 8011638:	4603      	mov	r3, r0
 801163a:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 801163e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011642:	2100      	movs	r1, #0
 8011644:	4618      	mov	r0, r3
 8011646:	f000 fa4d 	bl	8011ae4 <lv_draw_mask_add>
 801164a:	4603      	mov	r3, r0
 801164c:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    int16_t mask_top_id = LV_MASK_ID_INV;
 8011650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011654:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 8011658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801165c:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

    if(!dsc->raw_end) {
 8011660:	463b      	mov	r3, r7
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	7adb      	ldrb	r3, [r3, #11]
 8011666:	f003 0310 	and.w	r3, r3, #16
 801166a:	b2db      	uxtb	r3, r3
 801166c:	2b00      	cmp	r3, #0
 801166e:	d14f      	bne.n	8011710 <draw_line_skew+0x498>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 8011670:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 8011674:	f9b7 40da 	ldrsh.w	r4, [r7, #218]	; 0xda
 8011678:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 801167c:	b29a      	uxth	r2, r3
 801167e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011682:	b29b      	uxth	r3, r3
 8011684:	1ad3      	subs	r3, r2, r3
 8011686:	b29b      	uxth	r3, r3
 8011688:	b21d      	sxth	r5, r3
 801168a:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 801168e:	b29a      	uxth	r2, r3
 8011690:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011694:	b29b      	uxth	r3, r3
 8011696:	4413      	add	r3, r2
 8011698:	b29b      	uxth	r3, r3
 801169a:	b21b      	sxth	r3, r3
 801169c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80116a0:	2203      	movs	r2, #3
 80116a2:	9201      	str	r2, [sp, #4]
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	462b      	mov	r3, r5
 80116a8:	4622      	mov	r2, r4
 80116aa:	f000 fb09 	bl	8011cc0 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 80116ae:	f9b7 10d4 	ldrsh.w	r1, [r7, #212]	; 0xd4
 80116b2:	f9b7 40d6 	ldrsh.w	r4, [r7, #214]	; 0xd6
 80116b6:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	1ad3      	subs	r3, r2, r3
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	b21d      	sxth	r5, r3
 80116c8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80116cc:	b29a      	uxth	r2, r3
 80116ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	4413      	add	r3, r2
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	b21b      	sxth	r3, r3
 80116da:	f107 001c 	add.w	r0, r7, #28
 80116de:	2202      	movs	r2, #2
 80116e0:	9201      	str	r2, [sp, #4]
 80116e2:	9300      	str	r3, [sp, #0]
 80116e4:	462b      	mov	r3, r5
 80116e6:	4622      	mov	r2, r4
 80116e8:	f000 faea 	bl	8011cc0 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 80116ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116f0:	2100      	movs	r1, #0
 80116f2:	4618      	mov	r0, r3
 80116f4:	f000 f9f6 	bl	8011ae4 <lv_draw_mask_add>
 80116f8:	4603      	mov	r3, r0
 80116fa:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 80116fe:	f107 031c 	add.w	r3, r7, #28
 8011702:	2100      	movs	r1, #0
 8011704:	4618      	mov	r0, r3
 8011706:	f000 f9ed 	bl	8011ae4 <lv_draw_mask_add>
 801170a:	4603      	mov	r3, r0
 801170c:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8011710:	f7f8 fe0e 	bl	800a330 <_lv_refr_get_disp_refreshing>
 8011714:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8011718:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 801171c:	f008 fef8 	bl	801a510 <lv_disp_get_buf>
 8011720:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8

    const lv_area_t * disp_area = &vdb->area;
 8011724:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011728:	3310      	adds	r3, #16
 801172a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
 801172e:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 8011732:	b29a      	uxth	r2, r3
 8011734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011738:	f9b3 3000 	ldrsh.w	r3, [r3]
 801173c:	b29b      	uxth	r3, r3
 801173e:	1ad3      	subs	r3, r2, r3
 8011740:	b29b      	uxth	r3, r3
 8011742:	b21b      	sxth	r3, r3
 8011744:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    draw_area.y1 -= disp_area->y1;
 8011748:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 801174c:	b29a      	uxth	r2, r3
 801174e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011752:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011756:	b29b      	uxth	r3, r3
 8011758:	1ad3      	subs	r3, r2, r3
 801175a:	b29b      	uxth	r3, r3
 801175c:	b21b      	sxth	r3, r3
 801175e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    draw_area.x2 -= disp_area->x1;
 8011762:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8011766:	b29a      	uxth	r2, r3
 8011768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011770:	b29b      	uxth	r3, r3
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	b29b      	uxth	r3, r3
 8011776:	b21b      	sxth	r3, r3
 8011778:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    draw_area.y2 -= disp_area->y1;
 801177c:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8011780:	b29a      	uxth	r2, r3
 8011782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011786:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801178a:	b29b      	uxth	r3, r3
 801178c:	1ad3      	subs	r3, r2, r3
 801178e:	b29b      	uxth	r3, r3
 8011790:	b21b      	sxth	r3, r3
 8011792:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

    /* The real draw area is around the line.
     * It's easy to calculate with steep lines, but the area can be very wide with very flat lines.
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);
 8011796:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801179a:	4618      	mov	r0, r3
 801179c:	f7ff f83c 	bl	8010818 <lv_area_get_width>
 80117a0:	4603      	mov	r3, r0
 80117a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 80117a6:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80117aa:	f008 fdf1 	bl	801a390 <lv_disp_get_hor_res>
 80117ae:	4603      	mov	r3, r0
 80117b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
 80117b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80117b8:	4618      	mov	r0, r3
 80117ba:	f009 fb60 	bl	801ae7e <lv_area_get_size>
 80117be:	4602      	mov	r2, r0
 80117c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117c4:	4293      	cmp	r3, r2
 80117c6:	d906      	bls.n	80117d6 <draw_line_skew+0x55e>
 80117c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80117cc:	4618      	mov	r0, r3
 80117ce:	f009 fb56 	bl	801ae7e <lv_area_get_size>
 80117d2:	4603      	mov	r3, r0
 80117d4:	e001      	b.n	80117da <draw_line_skew+0x562>
 80117d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 80117de:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80117e2:	f00b f8b5 	bl	801c950 <_lv_mem_buf_get>
 80117e6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 80117ea:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 80117ee:	b29a      	uxth	r2, r3
 80117f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	4413      	add	r3, r2
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	b21a      	sxth	r2, r3
 8011800:	f107 0314 	add.w	r3, r7, #20
 8011804:	801a      	strh	r2, [r3, #0]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 8011806:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 801180a:	b29a      	uxth	r2, r3
 801180c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011814:	b29b      	uxth	r3, r3
 8011816:	4413      	add	r3, r2
 8011818:	b29b      	uxth	r3, r3
 801181a:	b21a      	sxth	r2, r3
 801181c:	f107 0314 	add.w	r3, r7, #20
 8011820:	809a      	strh	r2, [r3, #4]
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 8011822:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8011826:	b29a      	uxth	r2, r3
 8011828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801182c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011830:	b29b      	uxth	r3, r3
 8011832:	4413      	add	r3, r2
 8011834:	b29b      	uxth	r3, r3
 8011836:	b21a      	sxth	r2, r3
 8011838:	f107 0314 	add.w	r3, r7, #20
 801183c:	805a      	strh	r2, [r3, #2]
    fill_area.y2 = fill_area.y1;
 801183e:	f107 0314 	add.w	r3, r7, #20
 8011842:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011846:	f107 0314 	add.w	r3, r7, #20
 801184a:	80da      	strh	r2, [r3, #6]

    int32_t x = vdb->area.x1 + draw_area.x1;
 801184c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011850:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011854:	461a      	mov	r2, r3
 8011856:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 801185a:	4413      	add	r3, r2
 801185c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    uint32_t mask_p = 0;
 8011860:	2300      	movs	r3, #0
 8011862:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    _lv_memset_ff(mask_buf, mask_buf_size);
 8011866:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801186a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 801186e:	f00b fcf8 	bl	801d262 <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 8011872:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8011876:	461a      	mov	r2, r3
 8011878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801187c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011880:	4413      	add	r3, r2
 8011882:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8011886:	e076      	b.n	8011976 <draw_line_skew+0x6fe>

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 8011888:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801188c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011890:	18d0      	adds	r0, r2, r3
 8011892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011896:	b219      	sxth	r1, r3
 8011898:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801189c:	b21a      	sxth	r2, r3
 801189e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80118a2:	b21b      	sxth	r3, r3
 80118a4:	f000 f950 	bl	8011b48 <lv_draw_mask_apply>
 80118a8:	4603      	mov	r3, r0
 80118aa:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 80118ae:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d10a      	bne.n	80118cc <draw_line_skew+0x654>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
 80118b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80118ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80118be:	4413      	add	r3, r2
 80118c0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80118c4:	4611      	mov	r1, r2
 80118c6:	4618      	mov	r0, r3
 80118c8:	f00b fc4b 	bl	801d162 <_lv_memset_00>
        }

        mask_p += draw_area_w;
 80118cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80118d0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80118d4:	4413      	add	r3, r2
 80118d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 80118da:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80118de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80118e2:	4413      	add	r3, r2
 80118e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d90b      	bls.n	8011904 <draw_line_skew+0x68c>
            fill_area.y2 ++;
 80118ec:	f107 0314 	add.w	r3, r7, #20
 80118f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	3301      	adds	r3, #1
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	b21a      	sxth	r2, r3
 80118fc:	f107 0314 	add.w	r3, r7, #20
 8011900:	80da      	strh	r2, [r3, #6]
 8011902:	e033      	b.n	801196c <draw_line_skew+0x6f4>
        }
        else {
            _lv_blend_fill(&fill_area, clip,
 8011904:	463b      	mov	r3, r7
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	7a9b      	ldrb	r3, [r3, #10]
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
 801190a:	463a      	mov	r2, r7
 801190c:	6812      	ldr	r2, [r2, #0]
 801190e:	7ad2      	ldrb	r2, [r2, #11]
 8011910:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8011914:	b2d2      	uxtb	r2, r2
            _lv_blend_fill(&fill_area, clip,
 8011916:	4614      	mov	r4, r2
 8011918:	463a      	mov	r2, r7
 801191a:	6812      	ldr	r2, [r2, #0]
 801191c:	1d39      	adds	r1, r7, #4
 801191e:	f107 0014 	add.w	r0, r7, #20
 8011922:	9402      	str	r4, [sp, #8]
 8011924:	9301      	str	r3, [sp, #4]
 8011926:	2302      	movs	r3, #2
 8011928:	9300      	str	r3, [sp, #0]
 801192a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801192e:	6812      	ldr	r2, [r2, #0]
 8011930:	6809      	ldr	r1, [r1, #0]
 8011932:	f7fa fedb 	bl	800c6ec <_lv_blend_fill>

            fill_area.y1 = fill_area.y2 + 1;
 8011936:	f107 0314 	add.w	r3, r7, #20
 801193a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801193e:	b29b      	uxth	r3, r3
 8011940:	3301      	adds	r3, #1
 8011942:	b29b      	uxth	r3, r3
 8011944:	b21a      	sxth	r2, r3
 8011946:	f107 0314 	add.w	r3, r7, #20
 801194a:	805a      	strh	r2, [r3, #2]
            fill_area.y2 = fill_area.y1;
 801194c:	f107 0314 	add.w	r3, r7, #20
 8011950:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011954:	f107 0314 	add.w	r3, r7, #20
 8011958:	80da      	strh	r2, [r3, #6]
            mask_p = 0;
 801195a:	2300      	movs	r3, #0
 801195c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            _lv_memset_ff(mask_buf, mask_buf_size);
 8011960:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011964:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8011968:	f00b fc7b 	bl	801d262 <_lv_memset_ff>
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 801196c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011970:	3301      	adds	r3, #1
 8011972:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8011976:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801197a:	461a      	mov	r2, r3
 801197c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011980:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011984:	4413      	add	r3, r2
 8011986:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801198a:	429a      	cmp	r2, r3
 801198c:	f77f af7c 	ble.w	8011888 <draw_line_skew+0x610>
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8011990:	f107 0314 	add.w	r3, r7, #20
 8011994:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011998:	f107 0314 	add.w	r3, r7, #20
 801199c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d023      	beq.n	80119ec <draw_line_skew+0x774>
        fill_area.y2--;
 80119a4:	f107 0314 	add.w	r3, r7, #20
 80119a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	3b01      	subs	r3, #1
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	b21a      	sxth	r2, r3
 80119b4:	f107 0314 	add.w	r3, r7, #20
 80119b8:	80da      	strh	r2, [r3, #6]
        _lv_blend_fill(&fill_area, clip,
 80119ba:	463b      	mov	r3, r7
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	7a9b      	ldrb	r3, [r3, #10]
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 80119c0:	463a      	mov	r2, r7
 80119c2:	6812      	ldr	r2, [r2, #0]
 80119c4:	7ad2      	ldrb	r2, [r2, #11]
 80119c6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80119ca:	b2d2      	uxtb	r2, r2
        _lv_blend_fill(&fill_area, clip,
 80119cc:	4614      	mov	r4, r2
 80119ce:	463a      	mov	r2, r7
 80119d0:	6812      	ldr	r2, [r2, #0]
 80119d2:	1d39      	adds	r1, r7, #4
 80119d4:	f107 0014 	add.w	r0, r7, #20
 80119d8:	9402      	str	r4, [sp, #8]
 80119da:	9301      	str	r3, [sp, #4]
 80119dc:	2302      	movs	r3, #2
 80119de:	9300      	str	r3, [sp, #0]
 80119e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119e4:	6812      	ldr	r2, [r2, #0]
 80119e6:	6809      	ldr	r1, [r1, #0]
 80119e8:	f7fa fe80 	bl	800c6ec <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
 80119ec:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80119f0:	f00b f88c 	bl	801cb0c <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 80119f4:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 80119f8:	4618      	mov	r0, r3
 80119fa:	f000 f8e9 	bl	8011bd0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 80119fe:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 8011a02:	4618      	mov	r0, r3
 8011a04:	f000 f8e4 	bl	8011bd0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 8011a08:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f000 f8df 	bl	8011bd0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 8011a12:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 8011a16:	4618      	mov	r0, r3
 8011a18:	f000 f8da 	bl	8011bd0 <lv_draw_mask_remove_id>
 8011a1c:	e000      	b.n	8011a20 <draw_line_skew+0x7a8>
    if(is_common == false) return;
 8011a1e:	bf00      	nop
}
 8011a20:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bdb0      	pop	{r4, r5, r7, pc}

08011a28 <_lv_memcpy_small>:
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b087      	sub	sp, #28
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	613b      	str	r3, [r7, #16]
    while(len) {
 8011a3c:	e00c      	b.n	8011a58 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	781a      	ldrb	r2, [r3, #0]
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	701a      	strb	r2, [r3, #0]
        d8++;
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	617b      	str	r3, [r7, #20]
        s8++;
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	613b      	str	r3, [r7, #16]
        len--;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	3b01      	subs	r3, #1
 8011a56:	607b      	str	r3, [r7, #4]
    while(len) {
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d1ef      	bne.n	8011a3e <_lv_memcpy_small+0x16>
    return dst;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	371c      	adds	r7, #28
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <lv_area_copy>:
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b082      	sub	sp, #8
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8011a76:	2208      	movs	r2, #8
 8011a78:	6839      	ldr	r1, [r7, #0]
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f7ff ffd4 	bl	8011a28 <_lv_memcpy_small>
}
 8011a80:	bf00      	nop
 8011a82:	3708      	adds	r7, #8
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}

08011a88 <lv_area_get_width>:
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	1ad3      	subs	r3, r2, r3
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	b21b      	sxth	r3, r3
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	370c      	adds	r7, #12
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr

08011ab6 <lv_area_get_height>:
{
 8011ab6:	b480      	push	{r7}
 8011ab8:	b083      	sub	sp, #12
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	1ad3      	subs	r3, r2, r3
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	b21b      	sxth	r3, r3
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	370c      	adds	r7, #12
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr

08011ae4 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b085      	sub	sp, #20
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011aee:	2300      	movs	r3, #0
 8011af0:	73fb      	strb	r3, [r7, #15]
 8011af2:	e008      	b.n	8011b06 <lv_draw_mask_add+0x22>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8011af4:	7bfb      	ldrb	r3, [r7, #15]
 8011af6:	4a13      	ldr	r2, [pc, #76]	; (8011b44 <lv_draw_mask_add+0x60>)
 8011af8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d006      	beq.n	8011b0e <lv_draw_mask_add+0x2a>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011b00:	7bfb      	ldrb	r3, [r7, #15]
 8011b02:	3301      	adds	r3, #1
 8011b04:	73fb      	strb	r3, [r7, #15]
 8011b06:	7bfb      	ldrb	r3, [r7, #15]
 8011b08:	2b0f      	cmp	r3, #15
 8011b0a:	d9f3      	bls.n	8011af4 <lv_draw_mask_add+0x10>
 8011b0c:	e000      	b.n	8011b10 <lv_draw_mask_add+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8011b0e:	bf00      	nop
    }

    if(i >= _LV_MASK_MAX_NUM) {
 8011b10:	7bfb      	ldrb	r3, [r7, #15]
 8011b12:	2b0f      	cmp	r3, #15
 8011b14:	d902      	bls.n	8011b1c <lv_draw_mask_add+0x38>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 8011b16:	f04f 33ff 	mov.w	r3, #4294967295
 8011b1a:	e00c      	b.n	8011b36 <lv_draw_mask_add+0x52>
    }

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 8011b1c:	7bfb      	ldrb	r3, [r7, #15]
 8011b1e:	4909      	ldr	r1, [pc, #36]	; (8011b44 <lv_draw_mask_add+0x60>)
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 8011b26:	7bfb      	ldrb	r3, [r7, #15]
 8011b28:	4a06      	ldr	r2, [pc, #24]	; (8011b44 <lv_draw_mask_add+0x60>)
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	4413      	add	r3, r2
 8011b2e:	683a      	ldr	r2, [r7, #0]
 8011b30:	605a      	str	r2, [r3, #4]

    return i;
 8011b32:	7bfb      	ldrb	r3, [r7, #15]
 8011b34:	b21b      	sxth	r3, r3
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3714      	adds	r7, #20
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b40:	4770      	bx	lr
 8011b42:	bf00      	nop
 8011b44:	20021874 	.word	0x20021874

08011b48 <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 8011b48:	b590      	push	{r4, r7, lr}
 8011b4a:	b08b      	sub	sp, #44	; 0x2c
 8011b4c:	af02      	add	r7, sp, #8
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	4608      	mov	r0, r1
 8011b52:	4611      	mov	r1, r2
 8011b54:	461a      	mov	r2, r3
 8011b56:	4603      	mov	r3, r0
 8011b58:	817b      	strh	r3, [r7, #10]
 8011b5a:	460b      	mov	r3, r1
 8011b5c:	813b      	strh	r3, [r7, #8]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	80fb      	strh	r3, [r7, #6]
    bool changed = false;
 8011b62:	2300      	movs	r3, #0
 8011b64:	77fb      	strb	r3, [r7, #31]
    lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 8011b66:	4b19      	ldr	r3, [pc, #100]	; (8011bcc <lv_draw_mask_apply+0x84>)
 8011b68:	61bb      	str	r3, [r7, #24]

    while(m->param) {
 8011b6a:	e021      	b.n	8011bb0 <lv_draw_mask_apply+0x68>
        dsc = m->param;
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	617b      	str	r3, [r7, #20]
        lv_draw_mask_res_t res = LV_DRAW_MASK_RES_FULL_COVER;
 8011b72:	2301      	movs	r3, #1
 8011b74:	74fb      	strb	r3, [r7, #19]
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	681c      	ldr	r4, [r3, #0]
 8011b7a:	69bb      	ldr	r3, [r7, #24]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011b82:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011b86:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011b8a:	9300      	str	r3, [sp, #0]
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	68f8      	ldr	r0, [r7, #12]
 8011b90:	47a0      	blx	r4
 8011b92:	4603      	mov	r3, r0
 8011b94:	74fb      	strb	r3, [r7, #19]
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8011b96:	7cfb      	ldrb	r3, [r7, #19]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d101      	bne.n	8011ba0 <lv_draw_mask_apply+0x58>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	e011      	b.n	8011bc4 <lv_draw_mask_apply+0x7c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8011ba0:	7cfb      	ldrb	r3, [r7, #19]
 8011ba2:	2b02      	cmp	r3, #2
 8011ba4:	d101      	bne.n	8011baa <lv_draw_mask_apply+0x62>
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	77fb      	strb	r3, [r7, #31]

        m++;
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	3308      	adds	r3, #8
 8011bae:	61bb      	str	r3, [r7, #24]
    while(m->param) {
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d1d9      	bne.n	8011b6c <lv_draw_mask_apply+0x24>
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 8011bb8:	7ffb      	ldrb	r3, [r7, #31]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d001      	beq.n	8011bc2 <lv_draw_mask_apply+0x7a>
 8011bbe:	2302      	movs	r3, #2
 8011bc0:	e000      	b.n	8011bc4 <lv_draw_mask_apply+0x7c>
 8011bc2:	2301      	movs	r3, #1
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3724      	adds	r7, #36	; 0x24
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd90      	pop	{r4, r7, pc}
 8011bcc:	20021874 	.word	0x20021874

08011bd0 <lv_draw_mask_remove_id>:
 * @param id the ID of the mask.  Returned by `lv_draw_mask_add`
 * @return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_id(int16_t id)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b085      	sub	sp, #20
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	80fb      	strh	r3, [r7, #6]
    void * p = NULL;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	60fb      	str	r3, [r7, #12]

    if(id != LV_MASK_ID_INV) {
 8011bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011be6:	d012      	beq.n	8011c0e <lv_draw_mask_remove_id+0x3e>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 8011be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bec:	4a0b      	ldr	r2, [pc, #44]	; (8011c1c <lv_draw_mask_remove_id+0x4c>)
 8011bee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011bf2:	60fb      	str	r3, [r7, #12]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 8011bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bf8:	4a08      	ldr	r2, [pc, #32]	; (8011c1c <lv_draw_mask_remove_id+0x4c>)
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 8011c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c04:	4a05      	ldr	r2, [pc, #20]	; (8011c1c <lv_draw_mask_remove_id+0x4c>)
 8011c06:	00db      	lsls	r3, r3, #3
 8011c08:	4413      	add	r3, r2
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	605a      	str	r2, [r3, #4]
    }

    return p;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3714      	adds	r7, #20
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr
 8011c1c:	20021874 	.word	0x20021874

08011c20 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 8011c20:	b480      	push	{r7}
 8011c22:	b085      	sub	sp, #20
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
    void * p = NULL;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	72fb      	strb	r3, [r7, #11]
 8011c30:	e01a      	b.n	8011c68 <lv_draw_mask_remove_custom+0x48>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 8011c32:	7afb      	ldrb	r3, [r7, #11]
 8011c34:	4a11      	ldr	r2, [pc, #68]	; (8011c7c <lv_draw_mask_remove_custom+0x5c>)
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	4413      	add	r3, r2
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	687a      	ldr	r2, [r7, #4]
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d10f      	bne.n	8011c62 <lv_draw_mask_remove_custom+0x42>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011c42:	7afb      	ldrb	r3, [r7, #11]
 8011c44:	4a0d      	ldr	r2, [pc, #52]	; (8011c7c <lv_draw_mask_remove_custom+0x5c>)
 8011c46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011c4a:	60fb      	str	r3, [r7, #12]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 8011c4c:	7afb      	ldrb	r3, [r7, #11]
 8011c4e:	4a0b      	ldr	r2, [pc, #44]	; (8011c7c <lv_draw_mask_remove_custom+0x5c>)
 8011c50:	2100      	movs	r1, #0
 8011c52:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
 8011c56:	7afb      	ldrb	r3, [r7, #11]
 8011c58:	4a08      	ldr	r2, [pc, #32]	; (8011c7c <lv_draw_mask_remove_custom+0x5c>)
 8011c5a:	00db      	lsls	r3, r3, #3
 8011c5c:	4413      	add	r3, r2
 8011c5e:	2200      	movs	r2, #0
 8011c60:	605a      	str	r2, [r3, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011c62:	7afb      	ldrb	r3, [r7, #11]
 8011c64:	3301      	adds	r3, #1
 8011c66:	72fb      	strb	r3, [r7, #11]
 8011c68:	7afb      	ldrb	r3, [r7, #11]
 8011c6a:	2b0f      	cmp	r3, #15
 8011c6c:	d9e1      	bls.n	8011c32 <lv_draw_mask_remove_custom+0x12>
        }
    }
    return p;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3714      	adds	r7, #20
 8011c74:	46bd      	mov	sp, r7
 8011c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7a:	4770      	bx	lr
 8011c7c:	20021874 	.word	0x20021874

08011c80 <lv_draw_mask_get_cnt>:
/**
 * Count the currently added masks
 * @return number of active masks
 */
LV_ATTRIBUTE_FAST_MEM uint8_t lv_draw_mask_get_cnt(void)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b083      	sub	sp, #12
 8011c84:	af00      	add	r7, sp, #0
    uint8_t cnt = 0;
 8011c86:	2300      	movs	r3, #0
 8011c88:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	71bb      	strb	r3, [r7, #6]
 8011c8e:	e00b      	b.n	8011ca8 <lv_draw_mask_get_cnt+0x28>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 8011c90:	79bb      	ldrb	r3, [r7, #6]
 8011c92:	4a0a      	ldr	r2, [pc, #40]	; (8011cbc <lv_draw_mask_get_cnt+0x3c>)
 8011c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d002      	beq.n	8011ca2 <lv_draw_mask_get_cnt+0x22>
 8011c9c:	79fb      	ldrb	r3, [r7, #7]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	71fb      	strb	r3, [r7, #7]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011ca2:	79bb      	ldrb	r3, [r7, #6]
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	71bb      	strb	r3, [r7, #6]
 8011ca8:	79bb      	ldrb	r3, [r7, #6]
 8011caa:	2b0f      	cmp	r3, #15
 8011cac:	d9f0      	bls.n	8011c90 <lv_draw_mask_get_cnt+0x10>
    }
    return cnt;
 8011cae:	79fb      	ldrb	r3, [r7, #7]
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr
 8011cbc:	20021874 	.word	0x20021874

08011cc0 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b08a      	sub	sp, #40	; 0x28
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	4608      	mov	r0, r1
 8011cca:	4611      	mov	r1, r2
 8011ccc:	461a      	mov	r2, r3
 8011cce:	4603      	mov	r3, r0
 8011cd0:	817b      	strh	r3, [r7, #10]
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	813b      	strh	r3, [r7, #8]
 8011cd6:	4613      	mov	r3, r2
 8011cd8:	80fb      	strh	r3, [r7, #6]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8011cda:	212c      	movs	r1, #44	; 0x2c
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f00b fa40 	bl	801d162 <_lv_memset_00>

    if(p1y > p2y) {
 8011ce2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011ce6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011cea:	429a      	cmp	r2, r3
 8011cec:	dd0b      	ble.n	8011d06 <lv_draw_mask_line_points_init+0x46>
        lv_coord_t t;
        t = p2x;
 8011cee:	88fb      	ldrh	r3, [r7, #6]
 8011cf0:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2x = p1x;
 8011cf2:	897b      	ldrh	r3, [r7, #10]
 8011cf4:	80fb      	strh	r3, [r7, #6]
        p1x = t;
 8011cf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cf8:	817b      	strh	r3, [r7, #10]

        t = p2y;
 8011cfa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011cfc:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2y = p1y;
 8011cfe:	893b      	ldrh	r3, [r7, #8]
 8011d00:	863b      	strh	r3, [r7, #48]	; 0x30
        p1y = t;
 8011d02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011d04:	813b      	strh	r3, [r7, #8]
    }

    param->cfg.p1.x = p1x;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	897a      	ldrh	r2, [r7, #10]
 8011d0a:	811a      	strh	r2, [r3, #8]
    param->cfg.p1.y = p1y;
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	893a      	ldrh	r2, [r7, #8]
 8011d10:	815a      	strh	r2, [r3, #10]
    param->cfg.p2.x = p2x;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	88fa      	ldrh	r2, [r7, #6]
 8011d16:	819a      	strh	r2, [r3, #12]
    param->cfg.p2.y = p2y;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011d1c:	81da      	strh	r2, [r3, #14]
    param->cfg.side = side;
 8011d1e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011d22:	f003 0303 	and.w	r3, r3, #3
 8011d26:	b2d9      	uxtb	r1, r3
 8011d28:	68fa      	ldr	r2, [r7, #12]
 8011d2a:	7c13      	ldrb	r3, [r2, #16]
 8011d2c:	f361 0301 	bfi	r3, r1, #0, #2
 8011d30:	7413      	strb	r3, [r2, #16]

    param->origo.x = p1x;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	897a      	ldrh	r2, [r7, #10]
 8011d36:	825a      	strh	r2, [r3, #18]
    param->origo.y = p1y;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	893a      	ldrh	r2, [r7, #8]
 8011d3c:	829a      	strh	r2, [r3, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8011d3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011d42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d46:	1ad3      	subs	r3, r2, r3
 8011d48:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011d4c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011d50:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8011d54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011d58:	1acb      	subs	r3, r1, r3
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	bfb8      	it	lt
 8011d5e:	425b      	neglt	r3, r3
 8011d60:	429a      	cmp	r2, r3
 8011d62:	bfcc      	ite	gt
 8011d64:	2301      	movgt	r3, #1
 8011d66:	2300      	movle	r3, #0
 8011d68:	b2d9      	uxtb	r1, r3
 8011d6a:	68fa      	ldr	r2, [r7, #12]
 8011d6c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011d70:	f361 0300 	bfi	r3, r1, #0, #1
 8011d74:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    param->yx_steep = 0;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	61da      	str	r2, [r3, #28]
    param->xy_steep = 0;
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	2200      	movs	r2, #0
 8011d82:	619a      	str	r2, [r3, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	4a63      	ldr	r2, [pc, #396]	; (8011f14 <lv_draw_mask_line_points_init+0x254>)
 8011d88:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	711a      	strb	r2, [r3, #4]

    int32_t dx = p2x - p1x;
 8011d90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011d94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d98:	1ad3      	subs	r3, r2, r3
 8011d9a:	623b      	str	r3, [r7, #32]
    int32_t dy = p2y - p1y;
 8011d9c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8011da0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011da4:	1ad3      	subs	r3, r2, r3
 8011da6:	61fb      	str	r3, [r7, #28]

    if(param->flat) {
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011dae:	f003 0301 	and.w	r3, r3, #1
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d024      	beq.n	8011e02 <lv_draw_mask_line_points_init+0x142>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 8011db8:	6a3b      	ldr	r3, [r7, #32]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d00c      	beq.n	8011dd8 <lv_draw_mask_line_points_init+0x118>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8011dbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011dc2:	6a3b      	ldr	r3, [r7, #32]
 8011dc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8011dc8:	617b      	str	r3, [r7, #20]
            param->yx_steep = (m * dy) >> 10;
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	69fa      	ldr	r2, [r7, #28]
 8011dce:	fb02 f303 	mul.w	r3, r2, r3
 8011dd2:	129a      	asrs	r2, r3, #10
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	61da      	str	r2, [r3, #28]
        }

        if(dy) {
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d00c      	beq.n	8011df8 <lv_draw_mask_line_points_init+0x138>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011dde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	fb92 f3f3 	sdiv	r3, r2, r3
 8011de8:	617b      	str	r3, [r7, #20]
            param->xy_steep = (m * dx) >> 10;
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	6a3a      	ldr	r2, [r7, #32]
 8011dee:	fb02 f303 	mul.w	r3, r2, r3
 8011df2:	129a      	asrs	r2, r3, #10
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	619a      	str	r2, [r3, #24]
        }
        param->steep = param->yx_steep;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	69da      	ldr	r2, [r3, #28]
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	621a      	str	r2, [r3, #32]
 8011e00:	e023      	b.n	8011e4a <lv_draw_mask_line_points_init+0x18a>
    }
    else {
        /*Normalize the steep. Delta y should be relative to delta x = 1024*/
        int32_t m;

        if(dy) {
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d00c      	beq.n	8011e22 <lv_draw_mask_line_points_init+0x162>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011e08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011e12:	61bb      	str	r3, [r7, #24]
            param->xy_steep = (m * dx) >> 10;
 8011e14:	69bb      	ldr	r3, [r7, #24]
 8011e16:	6a3a      	ldr	r2, [r7, #32]
 8011e18:	fb02 f303 	mul.w	r3, r2, r3
 8011e1c:	129a      	asrs	r2, r3, #10
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	619a      	str	r2, [r3, #24]
        }

        if(dx) {
 8011e22:	6a3b      	ldr	r3, [r7, #32]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d00c      	beq.n	8011e42 <lv_draw_mask_line_points_init+0x182>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011e28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011e2c:	6a3b      	ldr	r3, [r7, #32]
 8011e2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011e32:	61bb      	str	r3, [r7, #24]
            param->yx_steep = (m * dy) >> 10;
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	69fa      	ldr	r2, [r7, #28]
 8011e38:	fb02 f303 	mul.w	r3, r2, r3
 8011e3c:	129a      	asrs	r2, r3, #10
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	61da      	str	r2, [r3, #28]
        }
        param->steep = param->xy_steep;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	699a      	ldr	r2, [r3, #24]
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	621a      	str	r2, [r3, #32]
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	7c1b      	ldrb	r3, [r3, #16]
 8011e4e:	f003 0303 	and.w	r3, r3, #3
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d107      	bne.n	8011e68 <lv_draw_mask_line_points_init+0x1a8>
 8011e58:	68fa      	ldr	r2, [r7, #12]
 8011e5a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011e5e:	f36f 0341 	bfc	r3, #1, #1
 8011e62:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011e66:	e043      	b.n	8011ef0 <lv_draw_mask_line_points_init+0x230>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	7c1b      	ldrb	r3, [r3, #16]
 8011e6c:	f003 0303 	and.w	r3, r3, #3
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d107      	bne.n	8011e86 <lv_draw_mask_line_points_init+0x1c6>
 8011e76:	68fa      	ldr	r2, [r7, #12]
 8011e78:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011e7c:	f043 0302 	orr.w	r3, r3, #2
 8011e80:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011e84:	e034      	b.n	8011ef0 <lv_draw_mask_line_points_init+0x230>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	7c1b      	ldrb	r3, [r3, #16]
 8011e8a:	f003 0303 	and.w	r3, r3, #3
 8011e8e:	b2db      	uxtb	r3, r3
 8011e90:	2b02      	cmp	r3, #2
 8011e92:	d113      	bne.n	8011ebc <lv_draw_mask_line_points_init+0x1fc>
        if(param->steep > 0) param->inv = 1;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	6a1b      	ldr	r3, [r3, #32]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	dd07      	ble.n	8011eac <lv_draw_mask_line_points_init+0x1ec>
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011ea2:	f043 0302 	orr.w	r3, r3, #2
 8011ea6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011eaa:	e021      	b.n	8011ef0 <lv_draw_mask_line_points_init+0x230>
        else param->inv = 0;
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011eb2:	f36f 0341 	bfc	r3, #1, #1
 8011eb6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011eba:	e019      	b.n	8011ef0 <lv_draw_mask_line_points_init+0x230>
    }
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	7c1b      	ldrb	r3, [r3, #16]
 8011ec0:	f003 0303 	and.w	r3, r3, #3
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	2b03      	cmp	r3, #3
 8011ec8:	d112      	bne.n	8011ef0 <lv_draw_mask_line_points_init+0x230>
        if(param->steep > 0) param->inv = 0;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	6a1b      	ldr	r3, [r3, #32]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	dd07      	ble.n	8011ee2 <lv_draw_mask_line_points_init+0x222>
 8011ed2:	68fa      	ldr	r2, [r7, #12]
 8011ed4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011ed8:	f36f 0341 	bfc	r3, #1, #1
 8011edc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011ee0:	e006      	b.n	8011ef0 <lv_draw_mask_line_points_init+0x230>
        else param->inv = 1;
 8011ee2:	68fa      	ldr	r2, [r7, #12]
 8011ee4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011ee8:	f043 0302 	orr.w	r3, r3, #2
 8011eec:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }

    param->spx = param->steep >> 2;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	6a1b      	ldr	r3, [r3, #32]
 8011ef4:	109a      	asrs	r2, r3, #2
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	625a      	str	r2, [r3, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	6a1b      	ldr	r3, [r3, #32]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	da04      	bge.n	8011f0c <lv_draw_mask_line_points_init+0x24c>
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f06:	425a      	negs	r2, r3
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011f0c:	bf00      	nop
 8011f0e:	3728      	adds	r7, #40	; 0x28
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}
 8011f14:	08011fb1 	.word	0x08011fb1

08011f18 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv: true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b086      	sub	sp, #24
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	4611      	mov	r1, r2
 8011f24:	461a      	mov	r2, r3
 8011f26:	460b      	mov	r3, r1
 8011f28:	80fb      	strh	r3, [r7, #6]
 8011f2a:	4613      	mov	r3, r2
 8011f2c:	717b      	strb	r3, [r7, #5]
    lv_coord_t w = lv_area_get_width(rect);
 8011f2e:	68b8      	ldr	r0, [r7, #8]
 8011f30:	f7ff fdaa 	bl	8011a88 <lv_area_get_width>
 8011f34:	4603      	mov	r3, r0
 8011f36:	82fb      	strh	r3, [r7, #22]
    lv_coord_t h = lv_area_get_height(rect);
 8011f38:	68b8      	ldr	r0, [r7, #8]
 8011f3a:	f7ff fdbc 	bl	8011ab6 <lv_area_get_height>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	82bb      	strh	r3, [r7, #20]
    int32_t short_side = LV_MATH_MIN(w, h);
 8011f42:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8011f46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	bfa8      	it	ge
 8011f4e:	4613      	movge	r3, r2
 8011f50:	b21b      	sxth	r3, r3
 8011f52:	613b      	str	r3, [r7, #16]
    if(radius > short_side >> 1) radius = short_side >> 1;
 8011f54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	105b      	asrs	r3, r3, #1
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	dd02      	ble.n	8011f66 <lv_draw_mask_radius_init+0x4e>
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	105b      	asrs	r3, r3, #1
 8011f64:	80fb      	strh	r3, [r7, #6]

    lv_area_copy(&param->cfg.rect, rect);
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	3308      	adds	r3, #8
 8011f6a:	68b9      	ldr	r1, [r7, #8]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7ff fd7d 	bl	8011a6c <lv_area_copy>
    param->cfg.radius = radius;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	88fa      	ldrh	r2, [r7, #6]
 8011f76:	821a      	strh	r2, [r3, #16]
    param->cfg.outer = inv ? 1 : 0;
 8011f78:	7979      	ldrb	r1, [r7, #5]
 8011f7a:	68fa      	ldr	r2, [r7, #12]
 8011f7c:	7c93      	ldrb	r3, [r2, #18]
 8011f7e:	f361 0300 	bfi	r3, r1, #0, #1
 8011f82:	7493      	strb	r3, [r2, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	4a09      	ldr	r2, [pc, #36]	; (8011fac <lv_draw_mask_radius_init+0x94>)
 8011f88:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	2202      	movs	r2, #2
 8011f8e:	711a      	strb	r2, [r3, #4]
    param->y_prev = INT32_MIN;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011f96:	615a      	str	r2, [r3, #20]
    param->y_prev_x.f = 0;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	835a      	strh	r2, [r3, #26]
    param->y_prev_x.i = 0;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	831a      	strh	r2, [r3, #24]
}
 8011fa4:	bf00      	nop
 8011fa6:	3718      	adds	r7, #24
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	08012931 	.word	0x08012931

08011fb0 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b08a      	sub	sp, #40	; 0x28
 8011fb4:	af02      	add	r7, sp, #8
 8011fb6:	60f8      	str	r0, [r7, #12]
 8011fb8:	4608      	mov	r0, r1
 8011fba:	4611      	mov	r1, r2
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	817b      	strh	r3, [r7, #10]
 8011fc2:	460b      	mov	r3, r1
 8011fc4:	813b      	strh	r3, [r7, #8]
 8011fc6:	4613      	mov	r3, r2
 8011fc8:	80fb      	strh	r3, [r7, #6]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 8011fca:	893a      	ldrh	r2, [r7, #8]
 8011fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	813b      	strh	r3, [r7, #8]
    abs_x -= p->origo.x;
 8011fda:	897a      	ldrh	r2, [r7, #10]
 8011fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fde:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	1ad3      	subs	r3, r2, r3
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	817b      	strh	r3, [r7, #10]

    /*Handle special cases*/
    if(p->steep == 0) {
 8011fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fec:	6a1b      	ldr	r3, [r3, #32]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f040 80a7 	bne.w	8012142 <lv_draw_mask_line+0x192>
        /*Horizontal*/
        if(p->flat) {
 8011ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ffa:	f003 0301 	and.w	r3, r3, #1
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	2b00      	cmp	r3, #0
 8012002:	d02c      	beq.n	801205e <lv_draw_mask_line+0xae>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8012004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012006:	7c1b      	ldrb	r3, [r3, #16]
 8012008:	f003 0303 	and.w	r3, r3, #3
 801200c:	b2db      	uxtb	r3, r3
 801200e:	2b00      	cmp	r3, #0
 8012010:	d006      	beq.n	8012020 <lv_draw_mask_line+0x70>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8012012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012014:	7c1b      	ldrb	r3, [r3, #16]
 8012016:	f003 0303 	and.w	r3, r3, #3
 801201a:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 801201c:	2b01      	cmp	r3, #1
 801201e:	d101      	bne.n	8012024 <lv_draw_mask_line+0x74>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8012020:	2301      	movs	r3, #1
 8012022:	e0b4      	b.n	801218e <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8012024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012026:	7c1b      	ldrb	r3, [r3, #16]
 8012028:	f003 0303 	and.w	r3, r3, #3
 801202c:	b2db      	uxtb	r3, r3
 801202e:	2b02      	cmp	r3, #2
 8012030:	d106      	bne.n	8012040 <lv_draw_mask_line+0x90>
 8012032:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012036:	3301      	adds	r3, #1
 8012038:	2b00      	cmp	r3, #0
 801203a:	da01      	bge.n	8012040 <lv_draw_mask_line+0x90>
 801203c:	2301      	movs	r3, #1
 801203e:	e0a6      	b.n	801218e <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8012040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012042:	7c1b      	ldrb	r3, [r3, #16]
 8012044:	f003 0303 	and.w	r3, r3, #3
 8012048:	b2db      	uxtb	r3, r3
 801204a:	2b03      	cmp	r3, #3
 801204c:	d105      	bne.n	801205a <lv_draw_mask_line+0xaa>
 801204e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012052:	2b00      	cmp	r3, #0
 8012054:	dd01      	ble.n	801205a <lv_draw_mask_line+0xaa>
 8012056:	2301      	movs	r3, #1
 8012058:	e099      	b.n	801218e <lv_draw_mask_line+0x1de>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 801205a:	2300      	movs	r3, #0
 801205c:	e097      	b.n	801218e <lv_draw_mask_line+0x1de>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 801205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012060:	7c1b      	ldrb	r3, [r3, #16]
 8012062:	f003 0303 	and.w	r3, r3, #3
 8012066:	b2db      	uxtb	r3, r3
 8012068:	2b02      	cmp	r3, #2
 801206a:	d006      	beq.n	801207a <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 801206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206e:	7c1b      	ldrb	r3, [r3, #16]
 8012070:	f003 0303 	and.w	r3, r3, #3
 8012074:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8012076:	2b03      	cmp	r3, #3
 8012078:	d101      	bne.n	801207e <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 801207a:	2301      	movs	r3, #1
 801207c:	e087      	b.n	801218e <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012080:	7c1b      	ldrb	r3, [r3, #16]
 8012082:	f003 0303 	and.w	r3, r3, #3
 8012086:	b2db      	uxtb	r3, r3
 8012088:	2b01      	cmp	r3, #1
 801208a:	d105      	bne.n	8012098 <lv_draw_mask_line+0xe8>
 801208c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012090:	2b00      	cmp	r3, #0
 8012092:	dd01      	ble.n	8012098 <lv_draw_mask_line+0xe8>
 8012094:	2301      	movs	r3, #1
 8012096:	e07a      	b.n	801218e <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 8012098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209a:	7c1b      	ldrb	r3, [r3, #16]
 801209c:	f003 0303 	and.w	r3, r3, #3
 80120a0:	b2db      	uxtb	r3, r3
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d125      	bne.n	80120f2 <lv_draw_mask_line+0x142>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80120a6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80120aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120ae:	4413      	add	r3, r2
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	da01      	bge.n	80120b8 <lv_draw_mask_line+0x108>
 80120b4:	2301      	movs	r3, #1
 80120b6:	e06a      	b.n	801218e <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 80120b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80120bc:	425b      	negs	r3, r3
 80120be:	617b      	str	r3, [r7, #20]
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	da01      	bge.n	80120ca <lv_draw_mask_line+0x11a>
 80120c6:	2300      	movs	r3, #0
 80120c8:	e061      	b.n	801218e <lv_draw_mask_line+0x1de>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	db0e      	blt.n	80120ee <lv_draw_mask_line+0x13e>
 80120d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120d4:	697a      	ldr	r2, [r7, #20]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	da09      	bge.n	80120ee <lv_draw_mask_line+0x13e>
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	68fa      	ldr	r2, [r7, #12]
 80120de:	18d0      	adds	r0, r2, r3
 80120e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	1ad3      	subs	r3, r2, r3
 80120e8:	4619      	mov	r1, r3
 80120ea:	f00b f83a 	bl	801d162 <_lv_memset_00>
                    return LV_DRAW_MASK_RES_CHANGED;
 80120ee:	2302      	movs	r3, #2
 80120f0:	e04d      	b.n	801218e <lv_draw_mask_line+0x1de>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 80120f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80120f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120fa:	4413      	add	r3, r2
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	da01      	bge.n	8012104 <lv_draw_mask_line+0x154>
 8012100:	2300      	movs	r3, #0
 8012102:	e044      	b.n	801218e <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 8012104:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012108:	425b      	negs	r3, r3
 801210a:	61fb      	str	r3, [r7, #28]
                    if(k < 0) k = 0;
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	2b00      	cmp	r3, #0
 8012110:	da01      	bge.n	8012116 <lv_draw_mask_line+0x166>
 8012112:	2300      	movs	r3, #0
 8012114:	61fb      	str	r3, [r7, #28]
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 8012116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801211a:	69fa      	ldr	r2, [r7, #28]
 801211c:	429a      	cmp	r2, r3
 801211e:	db01      	blt.n	8012124 <lv_draw_mask_line+0x174>
 8012120:	2300      	movs	r3, #0
 8012122:	e034      	b.n	801218e <lv_draw_mask_line+0x1de>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
 8012124:	69fb      	ldr	r3, [r7, #28]
 8012126:	2b00      	cmp	r3, #0
 8012128:	db09      	blt.n	801213e <lv_draw_mask_line+0x18e>
 801212a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801212e:	69fa      	ldr	r2, [r7, #28]
 8012130:	429a      	cmp	r2, r3
 8012132:	da04      	bge.n	801213e <lv_draw_mask_line+0x18e>
 8012134:	69fb      	ldr	r3, [r7, #28]
 8012136:	4619      	mov	r1, r3
 8012138:	68f8      	ldr	r0, [r7, #12]
 801213a:	f00b f812 	bl	801d162 <_lv_memset_00>
                    return LV_DRAW_MASK_RES_CHANGED;
 801213e:	2302      	movs	r3, #2
 8012140:	e025      	b.n	801218e <lv_draw_mask_line+0x1de>
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
 8012142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012148:	f003 0301 	and.w	r3, r3, #1
 801214c:	b2db      	uxtb	r3, r3
 801214e:	2b00      	cmp	r3, #0
 8012150:	d00e      	beq.n	8012170 <lv_draw_mask_line+0x1c0>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 8012152:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012156:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801215a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012160:	9300      	str	r3, [sp, #0]
 8012162:	4603      	mov	r3, r0
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	f000 f816 	bl	8012196 <line_mask_flat>
 801216a:	4603      	mov	r3, r0
 801216c:	76fb      	strb	r3, [r7, #27]
 801216e:	e00d      	b.n	801218c <lv_draw_mask_line+0x1dc>
    }
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 8012170:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012174:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012178:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217e:	9300      	str	r3, [sp, #0]
 8012180:	4603      	mov	r3, r0
 8012182:	68f8      	ldr	r0, [r7, #12]
 8012184:	f000 f991 	bl	80124aa <line_mask_steep>
 8012188:	4603      	mov	r3, r0
 801218a:	76fb      	strb	r3, [r7, #27]
    }

    return res;
 801218c:	7efb      	ldrb	r3, [r7, #27]
}
 801218e:	4618      	mov	r0, r3
 8012190:	3720      	adds	r7, #32
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}

08012196 <line_mask_flat>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
 8012196:	b590      	push	{r4, r7, lr}
 8012198:	b08d      	sub	sp, #52	; 0x34
 801219a:	af00      	add	r7, sp, #0
 801219c:	60f8      	str	r0, [r7, #12]
 801219e:	4608      	mov	r0, r1
 80121a0:	4611      	mov	r1, r2
 80121a2:	461a      	mov	r2, r3
 80121a4:	4603      	mov	r3, r0
 80121a6:	817b      	strh	r3, [r7, #10]
 80121a8:	460b      	mov	r3, r1
 80121aa:	813b      	strh	r3, [r7, #8]
 80121ac:	4613      	mov	r3, r2
 80121ae:	80fb      	strh	r3, [r7, #6]
    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 80121b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121b2:	69db      	ldr	r3, [r3, #28]
 80121b4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80121b8:	fb02 f303 	mul.w	r3, r2, r3
 80121bc:	129b      	asrs	r3, r3, #10
 80121be:	61fb      	str	r3, [r7, #28]

    if(p->yx_steep > 0) {
 80121c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121c2:	69db      	ldr	r3, [r3, #28]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	dd10      	ble.n	80121ea <line_mask_flat+0x54>
        if(y_at_x > abs_y) {
 80121c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80121cc:	69fa      	ldr	r2, [r7, #28]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	dd1c      	ble.n	801220c <line_mask_flat+0x76>
            if(p->inv) {
 80121d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121d8:	f003 0302 	and.w	r3, r3, #2
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d001      	beq.n	80121e6 <line_mask_flat+0x50>
                return LV_DRAW_MASK_RES_FULL_COVER;
 80121e2:	2301      	movs	r3, #1
 80121e4:	e15d      	b.n	80124a2 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 80121e6:	2300      	movs	r3, #0
 80121e8:	e15b      	b.n	80124a2 <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
 80121ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80121ee:	69fa      	ldr	r2, [r7, #28]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	da0b      	bge.n	801220c <line_mask_flat+0x76>
            if(p->inv) {
 80121f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121fa:	f003 0302 	and.w	r3, r3, #2
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	2b00      	cmp	r3, #0
 8012202:	d001      	beq.n	8012208 <line_mask_flat+0x72>
                return LV_DRAW_MASK_RES_FULL_COVER;
 8012204:	2301      	movs	r3, #1
 8012206:	e14c      	b.n	80124a2 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8012208:	2300      	movs	r3, #0
 801220a:	e14a      	b.n	80124a2 <line_mask_flat+0x30c>
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 801220c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801220e:	69db      	ldr	r3, [r3, #28]
 8012210:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012214:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012218:	440a      	add	r2, r1
 801221a:	fb02 f303 	mul.w	r3, r2, r3
 801221e:	129b      	asrs	r3, r3, #10
 8012220:	61fb      	str	r3, [r7, #28]
    if(p->yx_steep > 0) {
 8012222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012224:	69db      	ldr	r3, [r3, #28]
 8012226:	2b00      	cmp	r3, #0
 8012228:	dd10      	ble.n	801224c <line_mask_flat+0xb6>
        if(y_at_x < abs_y) {
 801222a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801222e:	69fa      	ldr	r2, [r7, #28]
 8012230:	429a      	cmp	r2, r3
 8012232:	da1c      	bge.n	801226e <line_mask_flat+0xd8>
            if(p->inv) {
 8012234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801223a:	f003 0302 	and.w	r3, r3, #2
 801223e:	b2db      	uxtb	r3, r3
 8012240:	2b00      	cmp	r3, #0
 8012242:	d001      	beq.n	8012248 <line_mask_flat+0xb2>
                return LV_DRAW_MASK_RES_TRANSP;
 8012244:	2300      	movs	r3, #0
 8012246:	e12c      	b.n	80124a2 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8012248:	2301      	movs	r3, #1
 801224a:	e12a      	b.n	80124a2 <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
 801224c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012250:	69fa      	ldr	r2, [r7, #28]
 8012252:	429a      	cmp	r2, r3
 8012254:	dd0b      	ble.n	801226e <line_mask_flat+0xd8>
            if(p->inv) {
 8012256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801225c:	f003 0302 	and.w	r3, r3, #2
 8012260:	b2db      	uxtb	r3, r3
 8012262:	2b00      	cmp	r3, #0
 8012264:	d001      	beq.n	801226a <line_mask_flat+0xd4>
                return LV_DRAW_MASK_RES_TRANSP;
 8012266:	2300      	movs	r3, #0
 8012268:	e11b      	b.n	80124a2 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 801226a:	2301      	movs	r3, #1
 801226c:	e119      	b.n	80124a2 <line_mask_flat+0x30c>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
 801226e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012270:	69db      	ldr	r3, [r3, #28]
 8012272:	2b00      	cmp	r3, #0
 8012274:	dd09      	ble.n	801228a <line_mask_flat+0xf4>
 8012276:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801227a:	021b      	lsls	r3, r3, #8
 801227c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801227e:	6992      	ldr	r2, [r2, #24]
 8012280:	fb02 f303 	mul.w	r3, r2, r3
 8012284:	129b      	asrs	r3, r3, #10
 8012286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012288:	e009      	b.n	801229e <line_mask_flat+0x108>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 801228a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801228e:	3301      	adds	r3, #1
 8012290:	021b      	lsls	r3, r3, #8
 8012292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012294:	6992      	ldr	r2, [r2, #24]
 8012296:	fb02 f303 	mul.w	r3, r2, r3
 801229a:	129b      	asrs	r3, r3, #10
 801229c:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t xei = xe >> 8;
 801229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a0:	121b      	asrs	r3, r3, #8
 80122a2:	61bb      	str	r3, [r7, #24]
    int32_t xef = xe & 0xFF;
 80122a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a6:	b2db      	uxtb	r3, r3
 80122a8:	617b      	str	r3, [r7, #20]

    int32_t px_h;
    if(xef == 0) px_h = 255;
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d102      	bne.n	80122b6 <line_mask_flat+0x120>
 80122b0:	23ff      	movs	r3, #255	; 0xff
 80122b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80122b4:	e00a      	b.n	80122cc <line_mask_flat+0x136>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80122bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80122c0:	fb02 f303 	mul.w	r3, r2, r3
 80122c4:	121b      	asrs	r3, r3, #8
 80122c6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80122ca:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t k = xei - abs_x;
 80122cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80122d0:	69ba      	ldr	r2, [r7, #24]
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	627b      	str	r3, [r7, #36]	; 0x24
    lv_opa_t m;

    if(xef) {
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d06c      	beq.n	80123b6 <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 80122dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122de:	2b00      	cmp	r3, #0
 80122e0:	db2c      	blt.n	801233c <line_mask_flat+0x1a6>
 80122e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122e8:	429a      	cmp	r2, r3
 80122ea:	da27      	bge.n	801233c <line_mask_flat+0x1a6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80122f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122f4:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80122f8:	fb02 f303 	mul.w	r3, r2, r3
 80122fc:	125b      	asrs	r3, r3, #9
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	43db      	mvns	r3, r3
 8012302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 8012306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801230c:	f003 0302 	and.w	r3, r3, #2
 8012310:	b2db      	uxtb	r3, r3
 8012312:	2b00      	cmp	r3, #0
 8012314:	d004      	beq.n	8012320 <line_mask_flat+0x18a>
 8012316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801231a:	43db      	mvns	r3, r3
 801231c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012322:	68fa      	ldr	r2, [r7, #12]
 8012324:	4413      	add	r3, r2
 8012326:	7818      	ldrb	r0, [r3, #0]
 8012328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232a:	68fa      	ldr	r2, [r7, #12]
 801232c:	18d4      	adds	r4, r2, r3
 801232e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012332:	4619      	mov	r1, r3
 8012334:	f000 ff09 	bl	801314a <mask_mix>
 8012338:	4603      	mov	r3, r0
 801233a:	7023      	strb	r3, [r4, #0]
        }
        k++;
 801233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233e:	3301      	adds	r3, #1
 8012340:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while(px_h > p->spx) {
 8012342:	e038      	b.n	80123b6 <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 8012344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012346:	2b00      	cmp	r3, #0
 8012348:	db28      	blt.n	801239c <line_mask_flat+0x206>
 801234a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801234e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012350:	429a      	cmp	r2, r3
 8012352:	da23      	bge.n	801239c <line_mask_flat+0x206>
            m = px_h - (p->spx >> 1);
 8012354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012356:	b2da      	uxtb	r2, r3
 8012358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801235c:	105b      	asrs	r3, r3, #1
 801235e:	b2db      	uxtb	r3, r3
 8012360:	1ad3      	subs	r3, r2, r3
 8012362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 8012366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801236c:	f003 0302 	and.w	r3, r3, #2
 8012370:	b2db      	uxtb	r3, r3
 8012372:	2b00      	cmp	r3, #0
 8012374:	d004      	beq.n	8012380 <line_mask_flat+0x1ea>
 8012376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801237a:	43db      	mvns	r3, r3
 801237c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012382:	68fa      	ldr	r2, [r7, #12]
 8012384:	4413      	add	r3, r2
 8012386:	7818      	ldrb	r0, [r3, #0]
 8012388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238a:	68fa      	ldr	r2, [r7, #12]
 801238c:	18d4      	adds	r4, r2, r3
 801238e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012392:	4619      	mov	r1, r3
 8012394:	f000 fed9 	bl	801314a <mask_mix>
 8012398:	4603      	mov	r3, r0
 801239a:	7023      	strb	r3, [r4, #0]
        }
        px_h -= p->spx;
 801239c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123a2:	1ad3      	subs	r3, r2, r3
 80123a4:	62bb      	str	r3, [r7, #40]	; 0x28
        k++;
 80123a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a8:	3301      	adds	r3, #1
 80123aa:	627b      	str	r3, [r7, #36]	; 0x24
        if(k >= len) break;
 80123ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123b2:	429a      	cmp	r2, r3
 80123b4:	da05      	bge.n	80123c2 <line_mask_flat+0x22c>
    while(px_h > p->spx) {
 80123b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123bc:	429a      	cmp	r2, r3
 80123be:	dcc1      	bgt.n	8012344 <line_mask_flat+0x1ae>
 80123c0:	e000      	b.n	80123c4 <line_mask_flat+0x22e>
        if(k >= len) break;
 80123c2:	bf00      	nop
    }

    if(k < len && k >= 0) {
 80123c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123ca:	429a      	cmp	r2, r3
 80123cc:	da34      	bge.n	8012438 <line_mask_flat+0x2a2>
 80123ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	db31      	blt.n	8012438 <line_mask_flat+0x2a2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 80123d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123d6:	699b      	ldr	r3, [r3, #24]
 80123d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123da:	fb02 f303 	mul.w	r3, r2, r3
 80123de:	129b      	asrs	r3, r3, #10
 80123e0:	613b      	str	r3, [r7, #16]
        m = (x_inters * px_h) >> 9;
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123e6:	fb02 f303 	mul.w	r3, r2, r3
 80123ea:	125b      	asrs	r3, r3, #9
 80123ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->yx_steep < 0) m = 255 - m;
 80123f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123f2:	69db      	ldr	r3, [r3, #28]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	da04      	bge.n	8012402 <line_mask_flat+0x26c>
 80123f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80123fc:	43db      	mvns	r3, r3
 80123fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->inv) m = 255 - m;
 8012402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012408:	f003 0302 	and.w	r3, r3, #2
 801240c:	b2db      	uxtb	r3, r3
 801240e:	2b00      	cmp	r3, #0
 8012410:	d004      	beq.n	801241c <line_mask_flat+0x286>
 8012412:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012416:	43db      	mvns	r3, r3
 8012418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        mask_buf[k] = mask_mix(mask_buf[k], m);
 801241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241e:	68fa      	ldr	r2, [r7, #12]
 8012420:	4413      	add	r3, r2
 8012422:	7818      	ldrb	r0, [r3, #0]
 8012424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	18d4      	adds	r4, r2, r3
 801242a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801242e:	4619      	mov	r1, r3
 8012430:	f000 fe8b 	bl	801314a <mask_mix>
 8012434:	4603      	mov	r3, r0
 8012436:	7023      	strb	r3, [r4, #0]
    }

    if(p->inv) {
 8012438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801243a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801243e:	f003 0302 	and.w	r3, r3, #2
 8012442:	b2db      	uxtb	r3, r3
 8012444:	2b00      	cmp	r3, #0
 8012446:	d014      	beq.n	8012472 <line_mask_flat+0x2dc>
        k = xei - abs_x;
 8012448:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801244c:	69ba      	ldr	r2, [r7, #24]
 801244e:	1ad3      	subs	r3, r2, r3
 8012450:	627b      	str	r3, [r7, #36]	; 0x24
        if(k > len) {
 8012452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012458:	429a      	cmp	r2, r3
 801245a:	dd01      	ble.n	8012460 <line_mask_flat+0x2ca>
            return LV_DRAW_MASK_RES_TRANSP;
 801245c:	2300      	movs	r3, #0
 801245e:	e020      	b.n	80124a2 <line_mask_flat+0x30c>
        }
        if(k >= 0) {
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	2b00      	cmp	r3, #0
 8012464:	db1c      	blt.n	80124a0 <line_mask_flat+0x30a>
            _lv_memset_00(&mask_buf[0], k);
 8012466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012468:	4619      	mov	r1, r3
 801246a:	68f8      	ldr	r0, [r7, #12]
 801246c:	f00a fe79 	bl	801d162 <_lv_memset_00>
 8012470:	e016      	b.n	80124a0 <line_mask_flat+0x30a>
        }
    }
    else {
        k++;
 8012472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012474:	3301      	adds	r3, #1
 8012476:	627b      	str	r3, [r7, #36]	; 0x24
        if(k < 0) {
 8012478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247a:	2b00      	cmp	r3, #0
 801247c:	da01      	bge.n	8012482 <line_mask_flat+0x2ec>
            return LV_DRAW_MASK_RES_TRANSP;
 801247e:	2300      	movs	r3, #0
 8012480:	e00f      	b.n	80124a2 <line_mask_flat+0x30c>
        }
        if(k <= len) {
 8012482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012488:	429a      	cmp	r2, r3
 801248a:	dc09      	bgt.n	80124a0 <line_mask_flat+0x30a>
            _lv_memset_00(&mask_buf[k], len - k);
 801248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248e:	68fa      	ldr	r2, [r7, #12]
 8012490:	18d0      	adds	r0, r2, r3
 8012492:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012498:	1ad3      	subs	r3, r2, r3
 801249a:	4619      	mov	r1, r3
 801249c:	f00a fe61 	bl	801d162 <_lv_memset_00>
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 80124a0:	2302      	movs	r3, #2
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3734      	adds	r7, #52	; 0x34
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd90      	pop	{r4, r7, pc}

080124aa <line_mask_steep>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_steep(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                                lv_coord_t len,
                                                                lv_draw_mask_line_param_t * p)
{
 80124aa:	b590      	push	{r4, r7, lr}
 80124ac:	b091      	sub	sp, #68	; 0x44
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	60f8      	str	r0, [r7, #12]
 80124b2:	4608      	mov	r0, r1
 80124b4:	4611      	mov	r1, r2
 80124b6:	461a      	mov	r2, r3
 80124b8:	4603      	mov	r3, r0
 80124ba:	817b      	strh	r3, [r7, #10]
 80124bc:	460b      	mov	r3, r1
 80124be:	813b      	strh	r3, [r7, #8]
 80124c0:	4613      	mov	r3, r2
 80124c2:	80fb      	strh	r3, [r7, #6]
    int32_t k;
    int32_t x_at_y;
    /* At the beginning of the mask if the limit line is greater then the mask's y.
     * Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 80124c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124c6:	699b      	ldr	r3, [r3, #24]
 80124c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80124cc:	fb02 f303 	mul.w	r3, r2, r3
 80124d0:	129b      	asrs	r3, r3, #10
 80124d2:	63bb      	str	r3, [r7, #56]	; 0x38
    if(p->xy_steep > 0) x_at_y++;
 80124d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124d6:	699b      	ldr	r3, [r3, #24]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	dd02      	ble.n	80124e2 <line_mask_steep+0x38>
 80124dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124de:	3301      	adds	r3, #1
 80124e0:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y < abs_x) {
 80124e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80124e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124e8:	429a      	cmp	r2, r3
 80124ea:	da0b      	bge.n	8012504 <line_mask_steep+0x5a>
        if(p->inv) {
 80124ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124f2:	f003 0302 	and.w	r3, r3, #2
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d001      	beq.n	8012500 <line_mask_steep+0x56>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80124fc:	2301      	movs	r3, #1
 80124fe:	e213      	b.n	8012928 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_TRANSP;
 8012500:	2300      	movs	r3, #0
 8012502:	e211      	b.n	8012928 <line_mask_steep+0x47e>
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * (abs_y)) >> 10;
 8012504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012506:	699b      	ldr	r3, [r3, #24]
 8012508:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801250c:	fb02 f303 	mul.w	r3, r2, r3
 8012510:	129b      	asrs	r3, r3, #10
 8012512:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y > abs_x + len) {
 8012514:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801251c:	4413      	add	r3, r2
 801251e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012520:	429a      	cmp	r2, r3
 8012522:	dd0b      	ble.n	801253c <line_mask_steep+0x92>
        if(p->inv) {
 8012524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801252a:	f003 0302 	and.w	r3, r3, #2
 801252e:	b2db      	uxtb	r3, r3
 8012530:	2b00      	cmp	r3, #0
 8012532:	d001      	beq.n	8012538 <line_mask_steep+0x8e>
            return LV_DRAW_MASK_RES_TRANSP;
 8012534:	2300      	movs	r3, #0
 8012536:	e1f7      	b.n	8012928 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012538:	2301      	movs	r3, #1
 801253a:	e1f5      	b.n	8012928 <line_mask_steep+0x47e>
        }
    }

    /*X start*/
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 801253c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012540:	021b      	lsls	r3, r3, #8
 8012542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012544:	6992      	ldr	r2, [r2, #24]
 8012546:	fb02 f303 	mul.w	r3, r2, r3
 801254a:	129b      	asrs	r3, r3, #10
 801254c:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xsi = xs >> 8;
 801254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012550:	121b      	asrs	r3, r3, #8
 8012552:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t xsf = xs & 0xFF;
 8012554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012556:	b2db      	uxtb	r3, r3
 8012558:	633b      	str	r3, [r7, #48]	; 0x30

    /*X end*/
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 801255a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801255e:	3301      	adds	r3, #1
 8012560:	021b      	lsls	r3, r3, #8
 8012562:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012564:	6992      	ldr	r2, [r2, #24]
 8012566:	fb02 f303 	mul.w	r3, r2, r3
 801256a:	129b      	asrs	r3, r3, #10
 801256c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t xei = xe >> 8;
 801256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012570:	121b      	asrs	r3, r3, #8
 8012572:	623b      	str	r3, [r7, #32]
    int32_t xef = xe & 0xFF;
 8012574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012576:	b2db      	uxtb	r3, r3
 8012578:	61fb      	str	r3, [r7, #28]

    lv_opa_t m;

    k = xsi - abs_x;
 801257a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801257e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012580:	1ad3      	subs	r3, r2, r3
 8012582:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 8012584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012586:	6a3b      	ldr	r3, [r7, #32]
 8012588:	429a      	cmp	r2, r3
 801258a:	d00d      	beq.n	80125a8 <line_mask_steep+0xfe>
 801258c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801258e:	699b      	ldr	r3, [r3, #24]
 8012590:	2b00      	cmp	r3, #0
 8012592:	da09      	bge.n	80125a8 <line_mask_steep+0xfe>
 8012594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012596:	2b00      	cmp	r3, #0
 8012598:	d106      	bne.n	80125a8 <line_mask_steep+0xfe>
        xsf = 0xFF;
 801259a:	23ff      	movs	r3, #255	; 0xff
 801259c:	633b      	str	r3, [r7, #48]	; 0x30
        xsi = xei;
 801259e:	6a3b      	ldr	r3, [r7, #32]
 80125a0:	637b      	str	r3, [r7, #52]	; 0x34
        k--;
 80125a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125a4:	3b01      	subs	r3, #1
 80125a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if(xsi == xei) {
 80125a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125aa:	6a3b      	ldr	r3, [r7, #32]
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d165      	bne.n	801267c <line_mask_steep+0x1d2>
        if(k >= 0 && k < len) {
 80125b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	db25      	blt.n	8012602 <line_mask_steep+0x158>
 80125b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125bc:	429a      	cmp	r2, r3
 80125be:	da20      	bge.n	8012602 <line_mask_steep+0x158>
            m = (xsf + xef) >> 1;
 80125c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	4413      	add	r3, r2
 80125c6:	105b      	asrs	r3, r3, #1
 80125c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(p->inv) m = 255 - m;
 80125cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125d2:	f003 0302 	and.w	r3, r3, #2
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d004      	beq.n	80125e6 <line_mask_steep+0x13c>
 80125dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125e0:	43db      	mvns	r3, r3
 80125e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80125e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125e8:	68fa      	ldr	r2, [r7, #12]
 80125ea:	4413      	add	r3, r2
 80125ec:	7818      	ldrb	r0, [r3, #0]
 80125ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125f0:	68fa      	ldr	r2, [r7, #12]
 80125f2:	18d4      	adds	r4, r2, r3
 80125f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125f8:	4619      	mov	r1, r3
 80125fa:	f000 fda6 	bl	801314a <mask_mix>
 80125fe:	4603      	mov	r3, r0
 8012600:	7023      	strb	r3, [r4, #0]
        }
        k++;
 8012602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012604:	3301      	adds	r3, #1
 8012606:	63fb      	str	r3, [r7, #60]	; 0x3c

        if(p->inv) {
 8012608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801260a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801260e:	f003 0302 	and.w	r3, r3, #2
 8012612:	b2db      	uxtb	r3, r3
 8012614:	2b00      	cmp	r3, #0
 8012616:	d015      	beq.n	8012644 <line_mask_steep+0x19a>
            k = xsi - abs_x;
 8012618:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801261c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801261e:	1ad3      	subs	r3, r2, r3
 8012620:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k >= len) {
 8012622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012628:	429a      	cmp	r2, r3
 801262a:	db01      	blt.n	8012630 <line_mask_steep+0x186>
                return LV_DRAW_MASK_RES_TRANSP;
 801262c:	2300      	movs	r3, #0
 801262e:	e17b      	b.n	8012928 <line_mask_steep+0x47e>
            }
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
 8012630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012632:	2b00      	cmp	r3, #0
 8012634:	f2c0 8177 	blt.w	8012926 <line_mask_steep+0x47c>
 8012638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801263a:	4619      	mov	r1, r3
 801263c:	68f8      	ldr	r0, [r7, #12]
 801263e:	f00a fd90 	bl	801d162 <_lv_memset_00>
 8012642:	e170      	b.n	8012926 <line_mask_steep+0x47c>

        }
        else {
            if(k > len) k = len;
 8012644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012648:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801264a:	429a      	cmp	r2, r3
 801264c:	dd02      	ble.n	8012654 <line_mask_steep+0x1aa>
 801264e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012652:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8012654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <line_mask_steep+0x1b4>
 801265a:	2300      	movs	r3, #0
 801265c:	e164      	b.n	8012928 <line_mask_steep+0x47e>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 801265e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012660:	2b00      	cmp	r3, #0
 8012662:	f340 8160 	ble.w	8012926 <line_mask_steep+0x47c>
 8012666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012668:	68fa      	ldr	r2, [r7, #12]
 801266a:	18d0      	adds	r0, r2, r3
 801266c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012672:	1ad3      	subs	r3, r2, r3
 8012674:	4619      	mov	r1, r3
 8012676:	f00a fd74 	bl	801d162 <_lv_memset_00>
 801267a:	e154      	b.n	8012926 <line_mask_steep+0x47c>
        }

    }
    else {
        int32_t y_inters;
        if(p->xy_steep < 0) {
 801267c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801267e:	699b      	ldr	r3, [r3, #24]
 8012680:	2b00      	cmp	r3, #0
 8012682:	f280 80a7 	bge.w	80127d4 <line_mask_steep+0x32a>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 8012686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012688:	69db      	ldr	r3, [r3, #28]
 801268a:	425b      	negs	r3, r3
 801268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801268e:	fb02 f303 	mul.w	r3, r2, r3
 8012692:	129b      	asrs	r3, r3, #10
 8012694:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8012696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012698:	2b00      	cmp	r3, #0
 801269a:	db26      	blt.n	80126ea <line_mask_steep+0x240>
 801269c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126a2:	429a      	cmp	r2, r3
 80126a4:	da21      	bge.n	80126ea <line_mask_steep+0x240>
                m = (y_inters * xsf) >> 9;
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126aa:	fb02 f303 	mul.w	r3, r2, r3
 80126ae:	125b      	asrs	r3, r3, #9
 80126b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 80126b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126ba:	f003 0302 	and.w	r3, r3, #2
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d004      	beq.n	80126ce <line_mask_steep+0x224>
 80126c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126c8:	43db      	mvns	r3, r3
 80126ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80126ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d0:	68fa      	ldr	r2, [r7, #12]
 80126d2:	4413      	add	r3, r2
 80126d4:	7818      	ldrb	r0, [r3, #0]
 80126d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d8:	68fa      	ldr	r2, [r7, #12]
 80126da:	18d4      	adds	r4, r2, r3
 80126dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126e0:	4619      	mov	r1, r3
 80126e2:	f000 fd32 	bl	801314a <mask_mix>
 80126e6:	4603      	mov	r3, r0
 80126e8:	7023      	strb	r3, [r4, #0]
            }
            k--;
 80126ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ec:	3b01      	subs	r3, #1
 80126ee:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80126f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80126f8:	6992      	ldr	r2, [r2, #24]
 80126fa:	4252      	negs	r2, r2
 80126fc:	fb02 f303 	mul.w	r3, r2, r3
 8012700:	129b      	asrs	r3, r3, #10
 8012702:	613b      	str	r3, [r7, #16]

            if(k >= 0 && k < len) {
 8012704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012706:	2b00      	cmp	r3, #0
 8012708:	db2a      	blt.n	8012760 <line_mask_steep+0x2b6>
 801270a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801270e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012710:	429a      	cmp	r2, r3
 8012712:	da25      	bge.n	8012760 <line_mask_steep+0x2b6>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801271a:	693a      	ldr	r2, [r7, #16]
 801271c:	fb02 f303 	mul.w	r3, r2, r3
 8012720:	125b      	asrs	r3, r3, #9
 8012722:	b2db      	uxtb	r3, r3
 8012724:	43db      	mvns	r3, r3
 8012726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 801272a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801272c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012730:	f003 0302 	and.w	r3, r3, #2
 8012734:	b2db      	uxtb	r3, r3
 8012736:	2b00      	cmp	r3, #0
 8012738:	d004      	beq.n	8012744 <line_mask_steep+0x29a>
 801273a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801273e:	43db      	mvns	r3, r3
 8012740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012746:	68fa      	ldr	r2, [r7, #12]
 8012748:	4413      	add	r3, r2
 801274a:	7818      	ldrb	r0, [r3, #0]
 801274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801274e:	68fa      	ldr	r2, [r7, #12]
 8012750:	18d4      	adds	r4, r2, r3
 8012752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012756:	4619      	mov	r1, r3
 8012758:	f000 fcf7 	bl	801314a <mask_mix>
 801275c:	4603      	mov	r3, r0
 801275e:	7023      	strb	r3, [r4, #0]
            }

            k += 2;
 8012760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012762:	3302      	adds	r3, #2
 8012764:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8012766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801276c:	f003 0302 	and.w	r3, r3, #2
 8012770:	b2db      	uxtb	r3, r3
 8012772:	2b00      	cmp	r3, #0
 8012774:	d018      	beq.n	80127a8 <line_mask_steep+0x2fe>
                k = xsi - abs_x - 1;
 8012776:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801277a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801277c:	1ad3      	subs	r3, r2, r3
 801277e:	3b01      	subs	r3, #1
 8012780:	63fb      	str	r3, [r7, #60]	; 0x3c

                if(k > len) k = len;
 8012782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012788:	429a      	cmp	r2, r3
 801278a:	dd03      	ble.n	8012794 <line_mask_steep+0x2ea>
 801278c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012792:	e0c8      	b.n	8012926 <line_mask_steep+0x47c>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 8012794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012796:	2b00      	cmp	r3, #0
 8012798:	f340 80c5 	ble.w	8012926 <line_mask_steep+0x47c>
 801279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801279e:	4619      	mov	r1, r3
 80127a0:	68f8      	ldr	r0, [r7, #12]
 80127a2:	f00a fcde 	bl	801d162 <_lv_memset_00>
 80127a6:	e0be      	b.n	8012926 <line_mask_steep+0x47c>

            }
            else {
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 80127a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127ae:	429a      	cmp	r2, r3
 80127b0:	dd01      	ble.n	80127b6 <line_mask_steep+0x30c>
 80127b2:	2301      	movs	r3, #1
 80127b4:	e0b8      	b.n	8012928 <line_mask_steep+0x47e>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
 80127b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	f2c0 80b4 	blt.w	8012926 <line_mask_steep+0x47c>
 80127be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127c0:	68fa      	ldr	r2, [r7, #12]
 80127c2:	18d0      	adds	r0, r2, r3
 80127c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80127c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127ca:	1ad3      	subs	r3, r2, r3
 80127cc:	4619      	mov	r1, r3
 80127ce:	f00a fcc8 	bl	801d162 <_lv_memset_00>
 80127d2:	e0a8      	b.n	8012926 <line_mask_steep+0x47c>
            }

        }
        else {
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 80127d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80127da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127dc:	69d2      	ldr	r2, [r2, #28]
 80127de:	fb02 f303 	mul.w	r3, r2, r3
 80127e2:	129b      	asrs	r3, r3, #10
 80127e4:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 80127e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	db2a      	blt.n	8012842 <line_mask_steep+0x398>
 80127ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127f2:	429a      	cmp	r2, r3
 80127f4:	da25      	bge.n	8012842 <line_mask_steep+0x398>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 80127f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80127fc:	69ba      	ldr	r2, [r7, #24]
 80127fe:	fb02 f303 	mul.w	r3, r2, r3
 8012802:	125b      	asrs	r3, r3, #9
 8012804:	b2db      	uxtb	r3, r3
 8012806:	43db      	mvns	r3, r3
 8012808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 801280c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801280e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012812:	f003 0302 	and.w	r3, r3, #2
 8012816:	b2db      	uxtb	r3, r3
 8012818:	2b00      	cmp	r3, #0
 801281a:	d004      	beq.n	8012826 <line_mask_steep+0x37c>
 801281c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012820:	43db      	mvns	r3, r3
 8012822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012828:	68fa      	ldr	r2, [r7, #12]
 801282a:	4413      	add	r3, r2
 801282c:	7818      	ldrb	r0, [r3, #0]
 801282e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	18d4      	adds	r4, r2, r3
 8012834:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012838:	4619      	mov	r1, r3
 801283a:	f000 fc86 	bl	801314a <mask_mix>
 801283e:	4603      	mov	r3, r0
 8012840:	7023      	strb	r3, [r4, #0]
            }

            k++;
 8012842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012844:	3301      	adds	r3, #1
 8012846:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8012848:	69bb      	ldr	r3, [r7, #24]
 801284a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801284e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012850:	6992      	ldr	r2, [r2, #24]
 8012852:	fb02 f303 	mul.w	r3, r2, r3
 8012856:	129b      	asrs	r3, r3, #10
 8012858:	617b      	str	r3, [r7, #20]
            if(k >= 0 && k < len) {
 801285a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801285c:	2b00      	cmp	r3, #0
 801285e:	db28      	blt.n	80128b2 <line_mask_steep+0x408>
 8012860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012866:	429a      	cmp	r2, r3
 8012868:	da23      	bge.n	80128b2 <line_mask_steep+0x408>
                m = ((255 - y_inters) * x_inters) >> 9;
 801286a:	69bb      	ldr	r3, [r7, #24]
 801286c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012870:	697a      	ldr	r2, [r7, #20]
 8012872:	fb02 f303 	mul.w	r3, r2, r3
 8012876:	125b      	asrs	r3, r3, #9
 8012878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 801287c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801287e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012882:	f003 0302 	and.w	r3, r3, #2
 8012886:	b2db      	uxtb	r3, r3
 8012888:	2b00      	cmp	r3, #0
 801288a:	d004      	beq.n	8012896 <line_mask_steep+0x3ec>
 801288c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012890:	43db      	mvns	r3, r3
 8012892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012898:	68fa      	ldr	r2, [r7, #12]
 801289a:	4413      	add	r3, r2
 801289c:	7818      	ldrb	r0, [r3, #0]
 801289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128a0:	68fa      	ldr	r2, [r7, #12]
 80128a2:	18d4      	adds	r4, r2, r3
 80128a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128a8:	4619      	mov	r1, r3
 80128aa:	f000 fc4e 	bl	801314a <mask_mix>
 80128ae:	4603      	mov	r3, r0
 80128b0:	7023      	strb	r3, [r4, #0]
            }
            k++;
 80128b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128b4:	3301      	adds	r3, #1
 80128b6:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 80128b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128be:	f003 0302 	and.w	r3, r3, #2
 80128c2:	b2db      	uxtb	r3, r3
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d014      	beq.n	80128f2 <line_mask_steep+0x448>
                k = xsi - abs_x;
 80128c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80128cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80128ce:	1ad3      	subs	r3, r2, r3
 80128d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 80128d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128d8:	429a      	cmp	r2, r3
 80128da:	dd01      	ble.n	80128e0 <line_mask_steep+0x436>
 80128dc:	2300      	movs	r3, #0
 80128de:	e023      	b.n	8012928 <line_mask_steep+0x47e>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 80128e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	db1f      	blt.n	8012926 <line_mask_steep+0x47c>
 80128e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e8:	4619      	mov	r1, r3
 80128ea:	68f8      	ldr	r0, [r7, #12]
 80128ec:	f00a fc39 	bl	801d162 <_lv_memset_00>
 80128f0:	e019      	b.n	8012926 <line_mask_steep+0x47c>

            }
            else {
                if(k > len) k = len;
 80128f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128f8:	429a      	cmp	r2, r3
 80128fa:	dd02      	ble.n	8012902 <line_mask_steep+0x458>
 80128fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012900:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8012902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012904:	2b00      	cmp	r3, #0
 8012906:	d101      	bne.n	801290c <line_mask_steep+0x462>
 8012908:	2300      	movs	r3, #0
 801290a:	e00d      	b.n	8012928 <line_mask_steep+0x47e>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 801290c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801290e:	2b00      	cmp	r3, #0
 8012910:	dd09      	ble.n	8012926 <line_mask_steep+0x47c>
 8012912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012914:	68fa      	ldr	r2, [r7, #12]
 8012916:	18d0      	adds	r0, r2, r3
 8012918:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801291c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801291e:	1ad3      	subs	r3, r2, r3
 8012920:	4619      	mov	r1, r3
 8012922:	f00a fc1e 	bl	801d162 <_lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8012926:	2302      	movs	r3, #2
}
 8012928:	4618      	mov	r0, r3
 801292a:	3744      	adds	r7, #68	; 0x44
 801292c:	46bd      	mov	sp, r7
 801292e:	bd90      	pop	{r4, r7, pc}

08012930 <lv_draw_mask_radius>:
}

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                    lv_coord_t abs_y, lv_coord_t len,
                                                                    lv_draw_mask_radius_param_t * p)
{
 8012930:	b590      	push	{r4, r7, lr}
 8012932:	b0a3      	sub	sp, #140	; 0x8c
 8012934:	af00      	add	r7, sp, #0
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	4608      	mov	r0, r1
 801293a:	4611      	mov	r1, r2
 801293c:	461a      	mov	r2, r3
 801293e:	4603      	mov	r3, r0
 8012940:	817b      	strh	r3, [r7, #10]
 8012942:	460b      	mov	r3, r1
 8012944:	813b      	strh	r3, [r7, #8]
 8012946:	4613      	mov	r3, r2
 8012948:	80fb      	strh	r3, [r7, #6]
    bool outer = p->cfg.outer;
 801294a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801294e:	7c9b      	ldrb	r3, [r3, #18]
 8012950:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8012954:	b2db      	uxtb	r3, r3
 8012956:	2b00      	cmp	r3, #0
 8012958:	bf14      	ite	ne
 801295a:	2301      	movne	r3, #1
 801295c:	2300      	moveq	r3, #0
 801295e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    int32_t radius = p->cfg.radius;
 8012962:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012966:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801296a:	653b      	str	r3, [r7, #80]	; 0x50
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);
 801296c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012970:	f103 0208 	add.w	r2, r3, #8
 8012974:	f107 0320 	add.w	r3, r7, #32
 8012978:	4611      	mov	r1, r2
 801297a:	4618      	mov	r0, r3
 801297c:	f7ff f876 	bl	8011a6c <lv_area_copy>

    if(outer == false) {
 8012980:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012984:	f083 0301 	eor.w	r3, r3, #1
 8012988:	b2db      	uxtb	r3, r3
 801298a:	2b00      	cmp	r3, #0
 801298c:	d00d      	beq.n	80129aa <lv_draw_mask_radius+0x7a>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 801298e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012992:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012996:	429a      	cmp	r2, r3
 8012998:	db05      	blt.n	80129a6 <lv_draw_mask_radius+0x76>
 801299a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801299e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	dd0f      	ble.n	80129c6 <lv_draw_mask_radius+0x96>
            return LV_DRAW_MASK_RES_TRANSP;
 80129a6:	2300      	movs	r3, #0
 80129a8:	e3cb      	b.n	8013142 <lv_draw_mask_radius+0x812>
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 80129aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80129ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	db05      	blt.n	80129c2 <lv_draw_mask_radius+0x92>
 80129b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80129ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80129be:	429a      	cmp	r2, r3
 80129c0:	dd01      	ble.n	80129c6 <lv_draw_mask_radius+0x96>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80129c2:	2301      	movs	r3, #1
 80129c4:	e3bd      	b.n	8013142 <lv_draw_mask_radius+0x812>
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80129c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80129ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80129ce:	4619      	mov	r1, r3
 80129d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129d2:	440b      	add	r3, r1
 80129d4:	429a      	cmp	r2, r3
 80129d6:	db0b      	blt.n	80129f0 <lv_draw_mask_radius+0xc0>
 80129d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80129dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129e0:	441a      	add	r2, r3
 80129e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80129e6:	4619      	mov	r1, r3
 80129e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ea:	1acb      	subs	r3, r1, r3
 80129ec:	429a      	cmp	r2, r3
 80129ee:	dd13      	ble.n	8012a18 <lv_draw_mask_radius+0xe8>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80129f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80129f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80129f8:	4619      	mov	r1, r3
 80129fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129fc:	440b      	add	r3, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80129fe:	429a      	cmp	r2, r3
 8012a00:	f2c0 8090 	blt.w	8012b24 <lv_draw_mask_radius+0x1f4>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8012a04:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012a08:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a10:	1acb      	subs	r3, r1, r3
 8012a12:	429a      	cmp	r2, r3
 8012a14:	f300 8086 	bgt.w	8012b24 <lv_draw_mask_radius+0x1f4>
        if(outer == false) {
 8012a18:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012a1c:	f083 0301 	eor.w	r3, r3, #1
 8012a20:	b2db      	uxtb	r3, r3
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d03d      	beq.n	8012aa2 <lv_draw_mask_radius+0x172>
            /*Remove the edges*/
            int32_t last =  rect.x1 - abs_x;
 8012a26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012a30:	1ad3      	subs	r3, r2, r3
 8012a32:	62fb      	str	r3, [r7, #44]	; 0x2c
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8012a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	dd01      	ble.n	8012a42 <lv_draw_mask_radius+0x112>
 8012a3e:	2300      	movs	r3, #0
 8012a40:	e37f      	b.n	8013142 <lv_draw_mask_radius+0x812>
            if(last >= 0) {
 8012a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	db04      	blt.n	8012a52 <lv_draw_mask_radius+0x122>
                _lv_memset_00(&mask_buf[0], last);
 8012a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	68f8      	ldr	r0, [r7, #12]
 8012a4e:	f00a fb88 	bl	801d162 <_lv_memset_00>
            }

            int32_t first = rect.x2 - abs_x + 1;
 8012a52:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012a56:	461a      	mov	r2, r3
 8012a58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012a5c:	1ad3      	subs	r3, r2, r3
 8012a5e:	3301      	adds	r3, #1
 8012a60:	62bb      	str	r3, [r7, #40]	; 0x28
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8012a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	dc01      	bgt.n	8012a6c <lv_draw_mask_radius+0x13c>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	e36a      	b.n	8013142 <lv_draw_mask_radius+0x812>
            else if(first < len) {
 8012a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a72:	429a      	cmp	r2, r3
 8012a74:	da09      	bge.n	8012a8a <lv_draw_mask_radius+0x15a>
                _lv_memset_00(&mask_buf[first], len - first);
 8012a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a78:	68fa      	ldr	r2, [r7, #12]
 8012a7a:	18d0      	adds	r0, r2, r3
 8012a7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a82:	1ad3      	subs	r3, r2, r3
 8012a84:	4619      	mov	r1, r3
 8012a86:	f00a fb6c 	bl	801d162 <_lv_memset_00>
            }
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 8012a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d106      	bne.n	8012a9e <lv_draw_mask_radius+0x16e>
 8012a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d101      	bne.n	8012a9e <lv_draw_mask_radius+0x16e>
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	e351      	b.n	8013142 <lv_draw_mask_radius+0x812>
            else return LV_DRAW_MASK_RES_CHANGED;
 8012a9e:	2302      	movs	r3, #2
 8012aa0:	e34f      	b.n	8013142 <lv_draw_mask_radius+0x812>
        }
        else {
            int32_t first = rect.x1 - abs_x;
 8012aa2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012aac:	1ad3      	subs	r3, r2, r3
 8012aae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            if(first < 0) first = 0;
 8012ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	da02      	bge.n	8012ac0 <lv_draw_mask_radius+0x190>
 8012aba:	2300      	movs	r3, #0
 8012abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            if(first <= len) {
 8012ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ac4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	dc29      	bgt.n	8012b20 <lv_draw_mask_radius+0x1f0>
                int32_t last =  rect.x2 - abs_x - first + 1;
 8012acc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012ad0:	461a      	mov	r2, r3
 8012ad2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012ad6:	1ad2      	subs	r2, r2, r3
 8012ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012adc:	1ad3      	subs	r3, r2, r3
 8012ade:	3301      	adds	r3, #1
 8012ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                if(first + last > len) last = len - first;
 8012ae4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012aec:	441a      	add	r2, r3
 8012aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	dd06      	ble.n	8012b04 <lv_draw_mask_radius+0x1d4>
 8012af6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012afe:	1ad3      	subs	r3, r2, r3
 8012b00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                if(last >= 0) {
 8012b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	db09      	blt.n	8012b20 <lv_draw_mask_radius+0x1f0>
                    _lv_memset_00(&mask_buf[first], last);
 8012b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b10:	68fa      	ldr	r2, [r7, #12]
 8012b12:	4413      	add	r3, r2
 8012b14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012b18:	4611      	mov	r1, r2
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f00a fb21 	bl	801d162 <_lv_memset_00>
                }
            }
        }
        return LV_DRAW_MASK_RES_CHANGED;
 8012b20:	2302      	movs	r3, #2
 8012b22:	e30e      	b.n	8013142 <lv_draw_mask_radius+0x812>
    }

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 8012b24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b28:	461a      	mov	r2, r3
 8012b2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b2e:	1ad3      	subs	r3, r2, r3
 8012b30:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w = lv_area_get_width(&rect);
 8012b32:	f107 0320 	add.w	r3, r7, #32
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7fe ffa6 	bl	8011a88 <lv_area_get_width>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t h = lv_area_get_height(&rect);
 8012b40:	f107 0320 	add.w	r3, r7, #32
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7fe ffb6 	bl	8011ab6 <lv_area_get_height>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	647b      	str	r3, [r7, #68]	; 0x44
    abs_x -= rect.x1;
 8012b4e:	897a      	ldrh	r2, [r7, #10]
 8012b50:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	1ad3      	subs	r3, r2, r3
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	817b      	strh	r3, [r7, #10]
    abs_y -= rect.y1;
 8012b5c:	893a      	ldrh	r2, [r7, #8]
 8012b5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	1ad3      	subs	r3, r2, r3
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	813b      	strh	r3, [r7, #8]

    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 8012b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b6e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012b72:	461a      	mov	r2, r3
 8012b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b78:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012b7c:	fb03 f302 	mul.w	r3, r3, r2
 8012b80:	643b      	str	r3, [r7, #64]	; 0x40

    /*Handle corner areas*/
    if(abs_y < radius || abs_y > h - radius - 1) {
 8012b82:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012b86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	dc08      	bgt.n	8012b9e <lv_draw_mask_radius+0x26e>
 8012b8c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012b90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b94:	1acb      	subs	r3, r1, r3
 8012b96:	3b01      	subs	r3, #1
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	f340 82d1 	ble.w	8013140 <lv_draw_mask_radius+0x810>

        uint32_t sqrt_mask;
        if(radius <= 32) sqrt_mask = 0x200;
 8012b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba0:	2b20      	cmp	r3, #32
 8012ba2:	dc02      	bgt.n	8012baa <lv_draw_mask_radius+0x27a>
 8012ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ba8:	67fb      	str	r3, [r7, #124]	; 0x7c
        if(radius <= 256) sqrt_mask = 0x800;
 8012baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bb0:	dc03      	bgt.n	8012bba <lv_draw_mask_radius+0x28a>
 8012bb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012bb8:	e002      	b.n	8012bc0 <lv_draw_mask_radius+0x290>
        else sqrt_mask = 0x8000;
 8012bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012bbe:	67fb      	str	r3, [r7, #124]	; 0x7c

        lv_sqrt_res_t x0;
        lv_sqrt_res_t x1;
        /* y = 0 should mean the top of the circle */
        int32_t y;
        if(abs_y < radius) {
 8012bc0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012bc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	dd3d      	ble.n	8012c46 <lv_draw_mask_radius+0x316>
            y = radius - abs_y;
 8012bca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012bce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012bd0:	1ad3      	subs	r3, r2, r3
 8012bd2:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Get the x intersection points for `abs_y` and `abs_y-1`
             * Use the circle's equation x = sqrt(r^2 - y^2)
             * Try to use the values from the previous run*/
            if(y == p->y_prev) {
 8012bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012bd8:	695b      	ldr	r3, [r3, #20]
 8012bda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d108      	bne.n	8012bf2 <lv_draw_mask_radius+0x2c2>
                x0.f = p->y_prev_x.f;
 8012be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012be4:	8b5b      	ldrh	r3, [r3, #26]
 8012be6:	83fb      	strh	r3, [r7, #30]
                x0.i = p->y_prev_x.i;
 8012be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012bec:	8b1b      	ldrh	r3, [r3, #24]
 8012bee:	83bb      	strh	r3, [r7, #28]
 8012bf0:	e00c      	b.n	8012c0c <lv_draw_mask_radius+0x2dc>
            }
            else {
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 8012bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012bf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012bf6:	fb02 f303 	mul.w	r3, r2, r3
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bfe:	1a9b      	subs	r3, r3, r2
 8012c00:	f107 011c 	add.w	r1, r7, #28
 8012c04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012c06:	4618      	mov	r0, r3
 8012c08:	f009 fcee 	bl	801c5e8 <_lv_sqrt>
            }
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 8012c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c0e:	3b01      	subs	r3, #1
 8012c10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c12:	3a01      	subs	r2, #1
 8012c14:	fb02 f303 	mul.w	r3, r2, r3
 8012c18:	461a      	mov	r2, r3
 8012c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c1c:	1a9b      	subs	r3, r3, r2
 8012c1e:	f107 0118 	add.w	r1, r7, #24
 8012c22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012c24:	4618      	mov	r0, r3
 8012c26:	f009 fcdf 	bl	801c5e8 <_lv_sqrt>
            p->y_prev = y - 1;
 8012c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c2c:	1e5a      	subs	r2, r3, #1
 8012c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c32:	615a      	str	r2, [r3, #20]
            p->y_prev_x.f = x1.f;
 8012c34:	8b7a      	ldrh	r2, [r7, #26]
 8012c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c3a:	835a      	strh	r2, [r3, #26]
            p->y_prev_x.i = x1.i;
 8012c3c:	8b3a      	ldrh	r2, [r7, #24]
 8012c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c42:	831a      	strh	r2, [r3, #24]
 8012c44:	e03f      	b.n	8012cc6 <lv_draw_mask_radius+0x396>
        }
        else {
            y = radius - (h - abs_y) + 1;
 8012c46:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c4c:	1ad3      	subs	r3, r2, r3
 8012c4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c50:	1ad3      	subs	r3, r2, r3
 8012c52:	3301      	adds	r3, #1
 8012c54:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Get the x intersection points for `abs_y` and `abs_y-1`
             * Use the circle's equation x = sqrt(r^2 - y^2)
             * Try to use the values from the previous run*/
            if((y - 1) == p->y_prev) {
 8012c56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c58:	1e5a      	subs	r2, r3, #1
 8012c5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c5e:	695b      	ldr	r3, [r3, #20]
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d108      	bne.n	8012c76 <lv_draw_mask_radius+0x346>
                x1.f = p->y_prev_x.f;
 8012c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c68:	8b5b      	ldrh	r3, [r3, #26]
 8012c6a:	837b      	strh	r3, [r7, #26]
                x1.i = p->y_prev_x.i;
 8012c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c70:	8b1b      	ldrh	r3, [r3, #24]
 8012c72:	833b      	strh	r3, [r7, #24]
 8012c74:	e00e      	b.n	8012c94 <lv_draw_mask_radius+0x364>
            }
            else {
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 8012c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c78:	3b01      	subs	r3, #1
 8012c7a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c7c:	3a01      	subs	r2, #1
 8012c7e:	fb02 f303 	mul.w	r3, r2, r3
 8012c82:	461a      	mov	r2, r3
 8012c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c86:	1a9b      	subs	r3, r3, r2
 8012c88:	f107 0118 	add.w	r1, r7, #24
 8012c8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f009 fcaa 	bl	801c5e8 <_lv_sqrt>
            }

            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 8012c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c96:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c98:	fb02 f303 	mul.w	r3, r2, r3
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ca0:	1a9b      	subs	r3, r3, r2
 8012ca2:	f107 011c 	add.w	r1, r7, #28
 8012ca6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f009 fc9d 	bl	801c5e8 <_lv_sqrt>
            p->y_prev = y;
 8012cae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cb2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012cb4:	615a      	str	r2, [r3, #20]
            p->y_prev_x.f = x0.f;
 8012cb6:	8bfa      	ldrh	r2, [r7, #30]
 8012cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cbc:	835a      	strh	r2, [r3, #26]
            p->y_prev_x.i = x0.i;
 8012cbe:	8bba      	ldrh	r2, [r7, #28]
 8012cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cc4:	831a      	strh	r2, [r3, #24]
        }

        /* If x1 is on the next round coordinate (e.g. x0: 3.5, x1:4.0)
         * then treat x1 as x1: 3.99 to handle them as they were on the same pixel*/
        if(x0.i == x1.i - 1 && x1.f == 0) {
 8012cc6:	8bbb      	ldrh	r3, [r7, #28]
 8012cc8:	461a      	mov	r2, r3
 8012cca:	8b3b      	ldrh	r3, [r7, #24]
 8012ccc:	3b01      	subs	r3, #1
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	d108      	bne.n	8012ce4 <lv_draw_mask_radius+0x3b4>
 8012cd2:	8b7b      	ldrh	r3, [r7, #26]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d105      	bne.n	8012ce4 <lv_draw_mask_radius+0x3b4>
            x1.i--;
 8012cd8:	8b3b      	ldrh	r3, [r7, #24]
 8012cda:	3b01      	subs	r3, #1
 8012cdc:	b29b      	uxth	r3, r3
 8012cde:	833b      	strh	r3, [r7, #24]
            x1.f = 0xFF;
 8012ce0:	23ff      	movs	r3, #255	; 0xff
 8012ce2:	837b      	strh	r3, [r7, #26]
        }

        /*If the two x intersections are on the same x then just get average of the fractions*/
        if(x0.i == x1.i) {
 8012ce4:	8bba      	ldrh	r2, [r7, #28]
 8012ce6:	8b3b      	ldrh	r3, [r7, #24]
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	f040 80a9 	bne.w	8012e40 <lv_draw_mask_radius+0x510>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 8012cee:	8bfb      	ldrh	r3, [r7, #30]
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	8b7b      	ldrh	r3, [r7, #26]
 8012cf4:	4413      	add	r3, r2
 8012cf6:	105b      	asrs	r3, r3, #1
 8012cf8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            if(outer) m = 255 - m;
 8012cfc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d004      	beq.n	8012d0e <lv_draw_mask_radius+0x3de>
 8012d04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d08:	43db      	mvns	r3, r3
 8012d0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            int32_t ofs = radius - x0.i - 1;
 8012d0e:	8bbb      	ldrh	r3, [r7, #28]
 8012d10:	461a      	mov	r2, r3
 8012d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d14:	1a9b      	subs	r3, r3, r2
 8012d16:	3b01      	subs	r3, #1
 8012d18:	63bb      	str	r3, [r7, #56]	; 0x38

            /*Left corner*/
            int32_t kl = k + ofs;
 8012d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	4413      	add	r3, r2
 8012d20:	637b      	str	r3, [r7, #52]	; 0x34

            if(kl >= 0 && kl < len) {
 8012d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	db12      	blt.n	8012d4e <lv_draw_mask_radius+0x41e>
 8012d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	da0d      	bge.n	8012d4e <lv_draw_mask_radius+0x41e>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8012d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d34:	68fa      	ldr	r2, [r7, #12]
 8012d36:	4413      	add	r3, r2
 8012d38:	7818      	ldrb	r0, [r3, #0]
 8012d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d3c:	68fa      	ldr	r2, [r7, #12]
 8012d3e:	18d4      	adds	r4, r2, r3
 8012d40:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d44:	4619      	mov	r1, r3
 8012d46:	f000 fa00 	bl	801314a <mask_mix>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	7023      	strb	r3, [r4, #0]
            }

            /*Right corner*/
            int32_t kr = k + (w - ofs - 1);
 8012d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d52:	1ad3      	subs	r3, r2, r3
 8012d54:	3b01      	subs	r3, #1
 8012d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d58:	4413      	add	r3, r2
 8012d5a:	633b      	str	r3, [r7, #48]	; 0x30
            if(kr >= 0 && kr < len) {
 8012d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	db12      	blt.n	8012d88 <lv_draw_mask_radius+0x458>
 8012d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	da0d      	bge.n	8012d88 <lv_draw_mask_radius+0x458>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8012d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	4413      	add	r3, r2
 8012d72:	7818      	ldrb	r0, [r3, #0]
 8012d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d76:	68fa      	ldr	r2, [r7, #12]
 8012d78:	18d4      	adds	r4, r2, r3
 8012d7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d7e:	4619      	mov	r1, r3
 8012d80:	f000 f9e3 	bl	801314a <mask_mix>
 8012d84:	4603      	mov	r3, r0
 8012d86:	7023      	strb	r3, [r4, #0]
            }

            /*Clear the unused parts*/
            if(outer == false) {
 8012d88:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012d8c:	f083 0301 	eor.w	r3, r3, #1
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d027      	beq.n	8012de6 <lv_draw_mask_radius+0x4b6>
                kr++;
 8012d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d98:	3301      	adds	r3, #1
 8012d9a:	633b      	str	r3, [r7, #48]	; 0x30
                if(kl > len)  {
 8012d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012da2:	429a      	cmp	r2, r3
 8012da4:	dd01      	ble.n	8012daa <lv_draw_mask_radius+0x47a>
                    return LV_DRAW_MASK_RES_TRANSP;
 8012da6:	2300      	movs	r3, #0
 8012da8:	e1cb      	b.n	8013142 <lv_draw_mask_radius+0x812>
                }
                if(kl >= 0) {
 8012daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	db04      	blt.n	8012dba <lv_draw_mask_radius+0x48a>
                    _lv_memset_00(&mask_buf[0], kl);
 8012db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012db2:	4619      	mov	r1, r3
 8012db4:	68f8      	ldr	r0, [r7, #12]
 8012db6:	f00a f9d4 	bl	801d162 <_lv_memset_00>
                }
                if(kr < 0) {
 8012dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	da01      	bge.n	8012dc4 <lv_draw_mask_radius+0x494>
                    return LV_DRAW_MASK_RES_TRANSP;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	e1be      	b.n	8013142 <lv_draw_mask_radius+0x812>
                }
                if(kr <= len) {
 8012dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	f300 81b8 	bgt.w	8013140 <lv_draw_mask_radius+0x810>
                    _lv_memset_00(&mask_buf[kr], len - kr);
 8012dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd2:	68fa      	ldr	r2, [r7, #12]
 8012dd4:	18d0      	adds	r0, r2, r3
 8012dd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ddc:	1ad3      	subs	r3, r2, r3
 8012dde:	4619      	mov	r1, r3
 8012de0:	f00a f9bf 	bl	801d162 <_lv_memset_00>
 8012de4:	e1ac      	b.n	8013140 <lv_draw_mask_radius+0x810>
                }
            }
            else {
                kl++;
 8012de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012de8:	3301      	adds	r3, #1
 8012dea:	637b      	str	r3, [r7, #52]	; 0x34
                int32_t first = kl;
 8012dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dee:	673b      	str	r3, [r7, #112]	; 0x70
                if(first < 0) first = 0;
 8012df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	da01      	bge.n	8012dfa <lv_draw_mask_radius+0x4ca>
 8012df6:	2300      	movs	r3, #0
 8012df8:	673b      	str	r3, [r7, #112]	; 0x70

                int32_t len_tmp = kr - first;
 8012dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dfe:	1ad3      	subs	r3, r2, r3
 8012e00:	66fb      	str	r3, [r7, #108]	; 0x6c
                if(len_tmp + first > len) len_tmp = len - first;
 8012e02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e06:	441a      	add	r2, r3
 8012e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	dd04      	ble.n	8012e1a <lv_draw_mask_radius+0x4ea>
 8012e10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e16:	1ad3      	subs	r3, r2, r3
 8012e18:	66fb      	str	r3, [r7, #108]	; 0x6c
                if(first < len && len_tmp >= 0) {
 8012e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012e20:	429a      	cmp	r2, r3
 8012e22:	f280 818d 	bge.w	8013140 <lv_draw_mask_radius+0x810>
 8012e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	f2c0 8189 	blt.w	8013140 <lv_draw_mask_radius+0x810>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 8012e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e30:	68fa      	ldr	r2, [r7, #12]
 8012e32:	4413      	add	r3, r2
 8012e34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012e36:	4611      	mov	r1, r2
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f00a f992 	bl	801d162 <_lv_memset_00>
 8012e3e:	e17f      	b.n	8013140 <lv_draw_mask_radius+0x810>
                }
            }
        }
        /*Multiple pixels are affected. Get y intersection of the pixels*/
        else {
            int32_t ofs = radius - (x0.i + 1);
 8012e40:	8bbb      	ldrh	r3, [r7, #28]
 8012e42:	3301      	adds	r3, #1
 8012e44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	63fb      	str	r3, [r7, #60]	; 0x3c
            int32_t kl = k + ofs;
 8012e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e4e:	4413      	add	r3, r2
 8012e50:	66bb      	str	r3, [r7, #104]	; 0x68
            int32_t kr = k + (w - ofs - 1);
 8012e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e56:	1ad3      	subs	r3, r2, r3
 8012e58:	3b01      	subs	r3, #1
 8012e5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e5c:	4413      	add	r3, r2
 8012e5e:	667b      	str	r3, [r7, #100]	; 0x64

            if(outer) {
 8012e60:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d027      	beq.n	8012eb8 <lv_draw_mask_radius+0x588>
                int32_t first = kl + 1;
 8012e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	663b      	str	r3, [r7, #96]	; 0x60
                if(first < 0) first = 0;
 8012e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	da01      	bge.n	8012e78 <lv_draw_mask_radius+0x548>
 8012e74:	2300      	movs	r3, #0
 8012e76:	663b      	str	r3, [r7, #96]	; 0x60

                int32_t len_tmp = kr - first;
 8012e78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
                if(len_tmp + first > len) len_tmp = len - first;
 8012e80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e84:	441a      	add	r2, r3
 8012e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	dd04      	ble.n	8012e98 <lv_draw_mask_radius+0x568>
 8012e8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e94:	1ad3      	subs	r3, r2, r3
 8012e96:	65fb      	str	r3, [r7, #92]	; 0x5c
                if(first < len && len_tmp >= 0) {
 8012e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	da0a      	bge.n	8012eb8 <lv_draw_mask_radius+0x588>
 8012ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	db07      	blt.n	8012eb8 <lv_draw_mask_radius+0x588>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 8012ea8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012eaa:	68fa      	ldr	r2, [r7, #12]
 8012eac:	4413      	add	r3, r2
 8012eae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012eb0:	4611      	mov	r1, r2
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f00a f955 	bl	801d162 <_lv_memset_00>
                }
            }

            uint32_t i = x0.i + 1;
 8012eb8:	8bbb      	ldrh	r3, [r7, #28]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	65bb      	str	r3, [r7, #88]	; 0x58
            lv_opa_t m;
            lv_sqrt_res_t y_prev;
            lv_sqrt_res_t y_next;

            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 8012ebe:	8bbb      	ldrh	r3, [r7, #28]
 8012ec0:	8bba      	ldrh	r2, [r7, #28]
 8012ec2:	fb02 f303 	mul.w	r3, r2, r3
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eca:	1a9b      	subs	r3, r3, r2
 8012ecc:	f107 0114 	add.w	r1, r7, #20
 8012ed0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f009 fb88 	bl	801c5e8 <_lv_sqrt>

            if(y_prev.f == 0) {
 8012ed8:	8afb      	ldrh	r3, [r7, #22]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d105      	bne.n	8012eea <lv_draw_mask_radius+0x5ba>
                y_prev.i--;
 8012ede:	8abb      	ldrh	r3, [r7, #20]
 8012ee0:	3b01      	subs	r3, #1
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	82bb      	strh	r3, [r7, #20]
                y_prev.f = 0xFF;
 8012ee6:	23ff      	movs	r3, #255	; 0xff
 8012ee8:	82fb      	strh	r3, [r7, #22]
            }

            /*The first y intersection is special as it might be in the previous line*/
            if(y_prev.i >= y) {
 8012eea:	8abb      	ldrh	r3, [r7, #20]
 8012eec:	461a      	mov	r2, r3
 8012eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	f300 80ae 	bgt.w	8013052 <lv_draw_mask_radius+0x722>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 8012ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012efa:	fb02 f303 	mul.w	r3, r2, r3
 8012efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f00:	1ad3      	subs	r3, r2, r3
 8012f02:	f107 0110 	add.w	r1, r7, #16
 8012f06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f009 fb6d 	bl	801c5e8 <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 8012f0e:	8bfb      	ldrh	r3, [r7, #30]
 8012f10:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012f14:	8a7a      	ldrh	r2, [r7, #18]
 8012f16:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8012f1a:	fb02 f303 	mul.w	r3, r2, r3
 8012f1e:	125b      	asrs	r3, r3, #9
 8012f20:	b2db      	uxtb	r3, r3
 8012f22:	43db      	mvns	r3, r3
 8012f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(outer) m = 255 - m;
 8012f28:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d004      	beq.n	8012f3a <lv_draw_mask_radius+0x60a>
 8012f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f34:	43db      	mvns	r3, r3
 8012f36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8012f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	db12      	blt.n	8012f66 <lv_draw_mask_radius+0x636>
 8012f40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012f46:	429a      	cmp	r2, r3
 8012f48:	da0d      	bge.n	8012f66 <lv_draw_mask_radius+0x636>
 8012f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f4c:	68fa      	ldr	r2, [r7, #12]
 8012f4e:	4413      	add	r3, r2
 8012f50:	7818      	ldrb	r0, [r3, #0]
 8012f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f54:	68fa      	ldr	r2, [r7, #12]
 8012f56:	18d4      	adds	r4, r2, r3
 8012f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	f000 f8f4 	bl	801314a <mask_mix>
 8012f62:	4603      	mov	r3, r0
 8012f64:	7023      	strb	r3, [r4, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8012f66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	db12      	blt.n	8012f92 <lv_draw_mask_radius+0x662>
 8012f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012f72:	429a      	cmp	r2, r3
 8012f74:	da0d      	bge.n	8012f92 <lv_draw_mask_radius+0x662>
 8012f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f78:	68fa      	ldr	r2, [r7, #12]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	7818      	ldrb	r0, [r3, #0]
 8012f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f80:	68fa      	ldr	r2, [r7, #12]
 8012f82:	18d4      	adds	r4, r2, r3
 8012f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f88:	4619      	mov	r1, r3
 8012f8a:	f000 f8de 	bl	801314a <mask_mix>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	7023      	strb	r3, [r4, #0]
                kl--;
 8012f92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f94:	3b01      	subs	r3, #1
 8012f96:	66bb      	str	r3, [r7, #104]	; 0x68
                kr++;
 8012f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f9a:	3301      	adds	r3, #1
 8012f9c:	667b      	str	r3, [r7, #100]	; 0x64
                y_prev.f = y_next.f;
 8012f9e:	8a7b      	ldrh	r3, [r7, #18]
 8012fa0:	82fb      	strh	r3, [r7, #22]
                i++;
 8012fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /*Set all points which are crossed by the circle*/
            for(; i <= x1.i; i++) {
 8012fa8:	e053      	b.n	8013052 <lv_draw_mask_radius+0x722>
                /* These values are very close to each other. It's enough to approximate sqrt
                 * The non-approximated version is lv_sqrt(r2 - (i * i), &y_next, sqrt_mask); */
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 8012faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012fae:	fb02 f303 	mul.w	r3, r2, r3
 8012fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012fb4:	1ad2      	subs	r2, r2, r3
 8012fb6:	f107 0114 	add.w	r1, r7, #20
 8012fba:	f107 0310 	add.w	r3, r7, #16
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f000 f8e7 	bl	8013192 <sqrt_approx>

                m = (y_prev.f + y_next.f) >> 1;
 8012fc4:	8afb      	ldrh	r3, [r7, #22]
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	8a7b      	ldrh	r3, [r7, #18]
 8012fca:	4413      	add	r3, r2
 8012fcc:	105b      	asrs	r3, r3, #1
 8012fce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(outer) m = 255 - m;
 8012fd2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d004      	beq.n	8012fe4 <lv_draw_mask_radius+0x6b4>
 8012fda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fde:	43db      	mvns	r3, r3
 8012fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8012fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	db12      	blt.n	8013010 <lv_draw_mask_radius+0x6e0>
 8012fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	da0d      	bge.n	8013010 <lv_draw_mask_radius+0x6e0>
 8012ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012ff6:	68fa      	ldr	r2, [r7, #12]
 8012ff8:	4413      	add	r3, r2
 8012ffa:	7818      	ldrb	r0, [r3, #0]
 8012ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012ffe:	68fa      	ldr	r2, [r7, #12]
 8013000:	18d4      	adds	r4, r2, r3
 8013002:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013006:	4619      	mov	r1, r3
 8013008:	f000 f89f 	bl	801314a <mask_mix>
 801300c:	4603      	mov	r3, r0
 801300e:	7023      	strb	r3, [r4, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8013010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013012:	2b00      	cmp	r3, #0
 8013014:	db12      	blt.n	801303c <lv_draw_mask_radius+0x70c>
 8013016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801301a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801301c:	429a      	cmp	r2, r3
 801301e:	da0d      	bge.n	801303c <lv_draw_mask_radius+0x70c>
 8013020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013022:	68fa      	ldr	r2, [r7, #12]
 8013024:	4413      	add	r3, r2
 8013026:	7818      	ldrb	r0, [r3, #0]
 8013028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801302a:	68fa      	ldr	r2, [r7, #12]
 801302c:	18d4      	adds	r4, r2, r3
 801302e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013032:	4619      	mov	r1, r3
 8013034:	f000 f889 	bl	801314a <mask_mix>
 8013038:	4603      	mov	r3, r0
 801303a:	7023      	strb	r3, [r4, #0]
                kl--;
 801303c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801303e:	3b01      	subs	r3, #1
 8013040:	66bb      	str	r3, [r7, #104]	; 0x68
                kr++;
 8013042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013044:	3301      	adds	r3, #1
 8013046:	667b      	str	r3, [r7, #100]	; 0x64
                y_prev.f = y_next.f;
 8013048:	8a7b      	ldrh	r3, [r7, #18]
 801304a:	82fb      	strh	r3, [r7, #22]
            for(; i <= x1.i; i++) {
 801304c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801304e:	3301      	adds	r3, #1
 8013050:	65bb      	str	r3, [r7, #88]	; 0x58
 8013052:	8b3b      	ldrh	r3, [r7, #24]
 8013054:	461a      	mov	r2, r3
 8013056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013058:	4293      	cmp	r3, r2
 801305a:	d9a6      	bls.n	8012faa <lv_draw_mask_radius+0x67a>
            }

            /*If the last pixel was left in its middle therefore
             * the circle still has parts on the next one*/
            if(y_prev.f) {
 801305c:	8afb      	ldrh	r3, [r7, #22]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d041      	beq.n	80130e6 <lv_draw_mask_radius+0x7b6>
                m = (y_prev.f * x1.f) >> 9;
 8013062:	8afb      	ldrh	r3, [r7, #22]
 8013064:	8b7a      	ldrh	r2, [r7, #26]
 8013066:	fb02 f303 	mul.w	r3, r2, r3
 801306a:	125b      	asrs	r3, r3, #9
 801306c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(outer) m = 255 - m;
 8013070:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8013074:	2b00      	cmp	r3, #0
 8013076:	d004      	beq.n	8013082 <lv_draw_mask_radius+0x752>
 8013078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801307c:	43db      	mvns	r3, r3
 801307e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8013082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013084:	2b00      	cmp	r3, #0
 8013086:	db12      	blt.n	80130ae <lv_draw_mask_radius+0x77e>
 8013088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801308c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801308e:	429a      	cmp	r2, r3
 8013090:	da0d      	bge.n	80130ae <lv_draw_mask_radius+0x77e>
 8013092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013094:	68fa      	ldr	r2, [r7, #12]
 8013096:	4413      	add	r3, r2
 8013098:	7818      	ldrb	r0, [r3, #0]
 801309a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801309c:	68fa      	ldr	r2, [r7, #12]
 801309e:	18d4      	adds	r4, r2, r3
 80130a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130a4:	4619      	mov	r1, r3
 80130a6:	f000 f850 	bl	801314a <mask_mix>
 80130aa:	4603      	mov	r3, r0
 80130ac:	7023      	strb	r3, [r4, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 80130ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	db12      	blt.n	80130da <lv_draw_mask_radius+0x7aa>
 80130b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80130ba:	429a      	cmp	r2, r3
 80130bc:	da0d      	bge.n	80130da <lv_draw_mask_radius+0x7aa>
 80130be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130c0:	68fa      	ldr	r2, [r7, #12]
 80130c2:	4413      	add	r3, r2
 80130c4:	7818      	ldrb	r0, [r3, #0]
 80130c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	18d4      	adds	r4, r2, r3
 80130cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130d0:	4619      	mov	r1, r3
 80130d2:	f000 f83a 	bl	801314a <mask_mix>
 80130d6:	4603      	mov	r3, r0
 80130d8:	7023      	strb	r3, [r4, #0]
                kl--;
 80130da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130dc:	3b01      	subs	r3, #1
 80130de:	66bb      	str	r3, [r7, #104]	; 0x68
                kr++;
 80130e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130e2:	3301      	adds	r3, #1
 80130e4:	667b      	str	r3, [r7, #100]	; 0x64
            }

            if(outer == 0) {
 80130e6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80130ea:	f083 0301 	eor.w	r3, r3, #1
 80130ee:	b2db      	uxtb	r3, r3
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d025      	beq.n	8013140 <lv_draw_mask_radius+0x810>
                kl++;
 80130f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130f6:	3301      	adds	r3, #1
 80130f8:	66bb      	str	r3, [r7, #104]	; 0x68
                if(kl > len) {
 80130fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013100:	429a      	cmp	r2, r3
 8013102:	dd01      	ble.n	8013108 <lv_draw_mask_radius+0x7d8>
                    return LV_DRAW_MASK_RES_TRANSP;
 8013104:	2300      	movs	r3, #0
 8013106:	e01c      	b.n	8013142 <lv_draw_mask_radius+0x812>
                }
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
 8013108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801310a:	2b00      	cmp	r3, #0
 801310c:	db04      	blt.n	8013118 <lv_draw_mask_radius+0x7e8>
 801310e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013110:	4619      	mov	r1, r3
 8013112:	68f8      	ldr	r0, [r7, #12]
 8013114:	f00a f825 	bl	801d162 <_lv_memset_00>

                if(kr < 0) {
 8013118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801311a:	2b00      	cmp	r3, #0
 801311c:	da01      	bge.n	8013122 <lv_draw_mask_radius+0x7f2>
                    return LV_DRAW_MASK_RES_TRANSP;
 801311e:	2300      	movs	r3, #0
                    return LV_DRAW_MASK_RES_TRANSP;
 8013120:	e00f      	b.n	8013142 <lv_draw_mask_radius+0x812>
                }
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 8013122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013126:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013128:	429a      	cmp	r2, r3
 801312a:	da09      	bge.n	8013140 <lv_draw_mask_radius+0x810>
 801312c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801312e:	68fa      	ldr	r2, [r7, #12]
 8013130:	18d0      	adds	r0, r2, r3
 8013132:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013138:	1ad3      	subs	r3, r2, r3
 801313a:	4619      	mov	r1, r3
 801313c:	f00a f811 	bl	801d162 <_lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8013140:	2302      	movs	r3, #2
}
 8013142:	4618      	mov	r0, r3
 8013144:	378c      	adds	r7, #140	; 0x8c
 8013146:	46bd      	mov	sp, r7
 8013148:	bd90      	pop	{r4, r7, pc}

0801314a <mask_mix>:

    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
 801314a:	b480      	push	{r7}
 801314c:	b083      	sub	sp, #12
 801314e:	af00      	add	r7, sp, #0
 8013150:	4603      	mov	r3, r0
 8013152:	460a      	mov	r2, r1
 8013154:	71fb      	strb	r3, [r7, #7]
 8013156:	4613      	mov	r3, r2
 8013158:	71bb      	strb	r3, [r7, #6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 801315a:	79bb      	ldrb	r3, [r7, #6]
 801315c:	2bfc      	cmp	r3, #252	; 0xfc
 801315e:	d901      	bls.n	8013164 <mask_mix+0x1a>
 8013160:	79fb      	ldrb	r3, [r7, #7]
 8013162:	e010      	b.n	8013186 <mask_mix+0x3c>
    if(mask_new <= LV_OPA_MIN) return 0;
 8013164:	79bb      	ldrb	r3, [r7, #6]
 8013166:	2b02      	cmp	r3, #2
 8013168:	d801      	bhi.n	801316e <mask_mix+0x24>
 801316a:	2300      	movs	r3, #0
 801316c:	e00b      	b.n	8013186 <mask_mix+0x3c>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 801316e:	79fb      	ldrb	r3, [r7, #7]
 8013170:	79ba      	ldrb	r2, [r7, #6]
 8013172:	fb02 f303 	mul.w	r3, r2, r3
 8013176:	461a      	mov	r2, r3
 8013178:	4613      	mov	r3, r2
 801317a:	021b      	lsls	r3, r3, #8
 801317c:	4413      	add	r3, r2
 801317e:	01db      	lsls	r3, r3, #7
 8013180:	4413      	add	r3, r2
 8013182:	0ddb      	lsrs	r3, r3, #23
 8013184:	b2db      	uxtb	r3, r3
}
 8013186:	4618      	mov	r0, r3
 8013188:	370c      	adds	r7, #12
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr

08013192 <sqrt_approx>:
 * @param q store the result here
 * @param ref the reference point (already calculated sqrt)
 * @param x the value which sqrt should be approximated
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
 8013192:	b480      	push	{r7}
 8013194:	b089      	sub	sp, #36	; 0x24
 8013196:	af00      	add	r7, sp, #0
 8013198:	60f8      	str	r0, [r7, #12]
 801319a:	60b9      	str	r1, [r7, #8]
 801319c:	607a      	str	r2, [r7, #4]
    x = x << 8; /*Upscale for extra precision*/
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	021b      	lsls	r3, r3, #8
 80131a2:	607b      	str	r3, [r7, #4]

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	881b      	ldrh	r3, [r3, #0]
 80131a8:	011b      	lsls	r3, r3, #4
 80131aa:	68ba      	ldr	r2, [r7, #8]
 80131ac:	8852      	ldrh	r2, [r2, #2]
 80131ae:	0912      	lsrs	r2, r2, #4
 80131b0:	b292      	uxth	r2, r2
 80131b2:	4413      	add	r3, r2
 80131b4:	61fb      	str	r3, [r7, #28]
    uint32_t raw2 = raw * raw;
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	69fa      	ldr	r2, [r7, #28]
 80131ba:	fb02 f303 	mul.w	r3, r2, r3
 80131be:	61bb      	str	r3, [r7, #24]

    int32_t d = x - raw2;
 80131c0:	687a      	ldr	r2, [r7, #4]
 80131c2:	69bb      	ldr	r3, [r7, #24]
 80131c4:	1ad3      	subs	r3, r2, r3
 80131c6:	617b      	str	r3, [r7, #20]
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 80131c8:	69fb      	ldr	r3, [r7, #28]
 80131ca:	005b      	lsls	r3, r3, #1
 80131cc:	461a      	mov	r2, r3
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80131d4:	461a      	mov	r2, r3
 80131d6:	69fb      	ldr	r3, [r7, #28]
 80131d8:	4413      	add	r3, r2
 80131da:	617b      	str	r3, [r7, #20]

    q->i = d >> 4;
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	111b      	asrs	r3, r3, #4
 80131e0:	b29a      	uxth	r2, r3
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	801a      	strh	r2, [r3, #0]
    q->f = (d & 0xF) << 4;
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	011b      	lsls	r3, r3, #4
 80131ea:	b29b      	uxth	r3, r3
 80131ec:	b2db      	uxtb	r3, r3
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	805a      	strh	r2, [r3, #2]
}
 80131f4:	bf00      	nop
 80131f6:	3724      	adds	r7, #36	; 0x24
 80131f8:	46bd      	mov	sp, r7
 80131fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fe:	4770      	bx	lr

08013200 <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 8013200:	b480      	push	{r7}
 8013202:	b087      	sub	sp, #28
 8013204:	af00      	add	r7, sp, #0
 8013206:	60f8      	str	r0, [r7, #12]
 8013208:	60b9      	str	r1, [r7, #8]
 801320a:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	613b      	str	r3, [r7, #16]

    while(len) {
 8013214:	e00c      	b.n	8013230 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	781a      	ldrb	r2, [r3, #0]
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	701a      	strb	r2, [r3, #0]
        d8++;
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	3301      	adds	r3, #1
 8013222:	617b      	str	r3, [r7, #20]
        s8++;
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	3301      	adds	r3, #1
 8013228:	613b      	str	r3, [r7, #16]
        len--;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	3b01      	subs	r3, #1
 801322e:	607b      	str	r3, [r7, #4]
    while(len) {
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d1ef      	bne.n	8013216 <_lv_memcpy_small+0x16>
    }

    return dst;
 8013236:	68fb      	ldr	r3, [r7, #12]
}
 8013238:	4618      	mov	r0, r3
 801323a:	371c      	adds	r7, #28
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr

08013244 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 801324e:	2208      	movs	r2, #8
 8013250:	6839      	ldr	r1, [r7, #0]
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f7ff ffd4 	bl	8013200 <_lv_memcpy_small>
}
 8013258:	bf00      	nop
 801325a:	3708      	adds	r7, #8
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}

08013260 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8013260:	b480      	push	{r7}
 8013262:	b083      	sub	sp, #12
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801326e:	b29a      	uxth	r2, r3
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013276:	b29b      	uxth	r3, r3
 8013278:	1ad3      	subs	r3, r2, r3
 801327a:	b29b      	uxth	r3, r3
 801327c:	3301      	adds	r3, #1
 801327e:	b29b      	uxth	r3, r3
 8013280:	b21b      	sxth	r3, r3
}
 8013282:	4618      	mov	r0, r3
 8013284:	370c      	adds	r7, #12
 8013286:	46bd      	mov	sp, r7
 8013288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328c:	4770      	bx	lr

0801328e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801328e:	b480      	push	{r7}
 8013290:	b083      	sub	sp, #12
 8013292:	af00      	add	r7, sp, #0
 8013294:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801329c:	b29a      	uxth	r2, r3
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80132a4:	b29b      	uxth	r3, r3
 80132a6:	1ad3      	subs	r3, r2, r3
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	3301      	adds	r3, #1
 80132ac:	b29b      	uxth	r3, r3
 80132ae:	b21b      	sxth	r3, r3
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	370c      	adds	r7, #12
 80132b4:	46bd      	mov	sp, r7
 80132b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ba:	4770      	bx	lr

080132bc <lv_color_mix>:
{
 80132bc:	b480      	push	{r7}
 80132be:	b087      	sub	sp, #28
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	4613      	mov	r3, r2
 80132c8:	71fb      	strb	r3, [r7, #7]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80132ca:	7bbb      	ldrb	r3, [r7, #14]
 80132cc:	461a      	mov	r2, r3
 80132ce:	79fb      	ldrb	r3, [r7, #7]
 80132d0:	fb03 f202 	mul.w	r2, r3, r2
 80132d4:	7abb      	ldrb	r3, [r7, #10]
 80132d6:	4619      	mov	r1, r3
 80132d8:	79fb      	ldrb	r3, [r7, #7]
 80132da:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80132de:	fb03 f301 	mul.w	r3, r3, r1
 80132e2:	4413      	add	r3, r2
 80132e4:	461a      	mov	r2, r3
 80132e6:	4613      	mov	r3, r2
 80132e8:	021b      	lsls	r3, r3, #8
 80132ea:	4413      	add	r3, r2
 80132ec:	01db      	lsls	r3, r3, #7
 80132ee:	4413      	add	r3, r2
 80132f0:	0ddb      	lsrs	r3, r3, #23
 80132f2:	b2db      	uxtb	r3, r3
 80132f4:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80132f6:	7b7b      	ldrb	r3, [r7, #13]
 80132f8:	461a      	mov	r2, r3
 80132fa:	79fb      	ldrb	r3, [r7, #7]
 80132fc:	fb03 f202 	mul.w	r2, r3, r2
 8013300:	7a7b      	ldrb	r3, [r7, #9]
 8013302:	4619      	mov	r1, r3
 8013304:	79fb      	ldrb	r3, [r7, #7]
 8013306:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801330a:	fb03 f301 	mul.w	r3, r3, r1
 801330e:	4413      	add	r3, r2
 8013310:	461a      	mov	r2, r3
 8013312:	4613      	mov	r3, r2
 8013314:	021b      	lsls	r3, r3, #8
 8013316:	4413      	add	r3, r2
 8013318:	01db      	lsls	r3, r3, #7
 801331a:	4413      	add	r3, r2
 801331c:	0ddb      	lsrs	r3, r3, #23
 801331e:	b2db      	uxtb	r3, r3
 8013320:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8013322:	7b3b      	ldrb	r3, [r7, #12]
 8013324:	461a      	mov	r2, r3
 8013326:	79fb      	ldrb	r3, [r7, #7]
 8013328:	fb03 f202 	mul.w	r2, r3, r2
 801332c:	7a3b      	ldrb	r3, [r7, #8]
 801332e:	4619      	mov	r1, r3
 8013330:	79fb      	ldrb	r3, [r7, #7]
 8013332:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8013336:	fb03 f301 	mul.w	r3, r3, r1
 801333a:	4413      	add	r3, r2
 801333c:	461a      	mov	r2, r3
 801333e:	4613      	mov	r3, r2
 8013340:	021b      	lsls	r3, r3, #8
 8013342:	4413      	add	r3, r2
 8013344:	01db      	lsls	r3, r3, #7
 8013346:	4413      	add	r3, r2
 8013348:	0ddb      	lsrs	r3, r3, #23
 801334a:	b2db      	uxtb	r3, r3
 801334c:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 801334e:	23ff      	movs	r3, #255	; 0xff
 8013350:	75fb      	strb	r3, [r7, #23]
    return ret;
 8013352:	697b      	ldr	r3, [r7, #20]
}
 8013354:	4618      	mov	r0, r3
 8013356:	371c      	adds	r7, #28
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr

08013360 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b082      	sub	sp, #8
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8013368:	2168      	movs	r1, #104	; 0x68
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f009 fef9 	bl	801d162 <_lv_memset_00>
    dsc->bg_color = LV_COLOR_WHITE;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	22ff      	movs	r2, #255	; 0xff
 8013374:	711a      	strb	r2, [r3, #4]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	22ff      	movs	r2, #255	; 0xff
 801337a:	715a      	strb	r2, [r3, #5]
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	22ff      	movs	r2, #255	; 0xff
 8013380:	719a      	strb	r2, [r3, #6]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	22ff      	movs	r2, #255	; 0xff
 8013386:	71da      	strb	r2, [r3, #7]
    dsc->bg_grad_color = LV_COLOR_BLACK;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2200      	movs	r2, #0
 801338c:	721a      	strb	r2, [r3, #8]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2200      	movs	r2, #0
 8013392:	725a      	strb	r2, [r3, #9]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2200      	movs	r2, #0
 8013398:	729a      	strb	r2, [r3, #10]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	22ff      	movs	r2, #255	; 0xff
 801339e:	72da      	strb	r2, [r3, #11]
    dsc->border_color = LV_COLOR_BLACK;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2200      	movs	r2, #0
 80133a4:	751a      	strb	r2, [r3, #20]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2200      	movs	r2, #0
 80133aa:	755a      	strb	r2, [r3, #21]
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2200      	movs	r2, #0
 80133b0:	759a      	strb	r2, [r3, #22]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	22ff      	movs	r2, #255	; 0xff
 80133b6:	75da      	strb	r2, [r3, #23]
    dsc->pattern_recolor = LV_COLOR_BLACK;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2200      	movs	r2, #0
 80133bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2200      	movs	r2, #0
 80133c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2200      	movs	r2, #0
 80133cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	22ff      	movs	r2, #255	; 0xff
 80133d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    dsc->value_color = LV_COLOR_BLACK;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2200      	movs	r2, #0
 80133dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2200      	movs	r2, #0
 80133e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2200      	movs	r2, #0
 80133ec:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	22ff      	movs	r2, #255	; 0xff
 80133f4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    dsc->shadow_color = LV_COLOR_BLACK;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2200      	movs	r2, #0
 80133fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2200      	movs	r2, #0
 8013404:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2200      	movs	r2, #0
 801340c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	22ff      	movs	r2, #255	; 0xff
 8013414:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    dsc->bg_grad_color_stop = 0xFF;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	22ff      	movs	r2, #255	; 0xff
 801341c:	821a      	strh	r2, [r3, #16]
    dsc->bg_opa = LV_OPA_COVER;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	22ff      	movs	r2, #255	; 0xff
 8013422:	749a      	strb	r2, [r3, #18]
    dsc->outline_opa = LV_OPA_COVER;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	22ff      	movs	r2, #255	; 0xff
 8013428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dsc->border_opa = LV_OPA_COVER;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	22ff      	movs	r2, #255	; 0xff
 8013430:	771a      	strb	r2, [r3, #28]
    dsc->pattern_opa = LV_OPA_COVER;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	22ff      	movs	r2, #255	; 0xff
 8013436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4a09      	ldr	r2, [pc, #36]	; (8013464 <lv_draw_rect_dsc_init+0x104>)
 801343e:	641a      	str	r2, [r3, #64]	; 0x40
    dsc->value_opa = LV_OPA_COVER;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	22ff      	movs	r2, #255	; 0xff
 8013444:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	4a06      	ldr	r2, [pc, #24]	; (8013464 <lv_draw_rect_dsc_init+0x104>)
 801344c:	651a      	str	r2, [r3, #80]	; 0x50
    dsc->shadow_opa = LV_OPA_COVER;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	22ff      	movs	r2, #255	; 0xff
 8013452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    dsc->border_side = LV_BORDER_SIDE_FULL;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	220f      	movs	r2, #15
 801345a:	835a      	strh	r2, [r3, #26]

}
 801345c:	bf00      	nop
 801345e:	3708      	adds	r7, #8
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}
 8013464:	20000020 	.word	0x20000020

08013468 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b084      	sub	sp, #16
 801346c:	af00      	add	r7, sp, #0
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	60b9      	str	r1, [r7, #8]
 8013472:	607a      	str	r2, [r7, #4]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	f7ff ff0a 	bl	801328e <lv_area_get_height>
 801347a:	4603      	mov	r3, r0
 801347c:	2b00      	cmp	r3, #0
 801347e:	dd24      	ble.n	80134ca <lv_draw_rect+0x62>
 8013480:	68f8      	ldr	r0, [r7, #12]
 8013482:	f7ff feed 	bl	8013260 <lv_area_get_width>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	dd1e      	ble.n	80134ca <lv_draw_rect+0x62>
#if LV_USE_SHADOW
    draw_shadow(coords, clip, dsc);
 801348c:	687a      	ldr	r2, [r7, #4]
 801348e:	68b9      	ldr	r1, [r7, #8]
 8013490:	68f8      	ldr	r0, [r7, #12]
 8013492:	f000 ff08 	bl	80142a6 <draw_shadow>
#endif

    draw_bg(coords, clip, dsc);
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	68b9      	ldr	r1, [r7, #8]
 801349a:	68f8      	ldr	r0, [r7, #12]
 801349c:	f000 f819 	bl	80134d2 <draw_bg>

#if LV_USE_PATTERN
    draw_pattern(coords, clip, dsc);
 80134a0:	687a      	ldr	r2, [r7, #4]
 80134a2:	68b9      	ldr	r1, [r7, #8]
 80134a4:	68f8      	ldr	r0, [r7, #12]
 80134a6:	f002 fdd5 	bl	8016054 <draw_pattern>
#endif
    draw_border(coords, clip, dsc);
 80134aa:	687a      	ldr	r2, [r7, #4]
 80134ac:	68b9      	ldr	r1, [r7, #8]
 80134ae:	68f8      	ldr	r0, [r7, #12]
 80134b0:	f000 fbf6 	bl	8013ca0 <draw_border>

#if LV_USE_VALUE_STR
    draw_value_str(coords, clip, dsc);
 80134b4:	687a      	ldr	r2, [r7, #4]
 80134b6:	68b9      	ldr	r1, [r7, #8]
 80134b8:	68f8      	ldr	r0, [r7, #12]
 80134ba:	f002 ffe5 	bl	8016488 <draw_value_str>
#endif

#if LV_USE_OUTLINE
    draw_outline(coords, clip, dsc);
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	68b9      	ldr	r1, [r7, #8]
 80134c2:	68f8      	ldr	r0, [r7, #12]
 80134c4:	f002 fd23 	bl	8015f0e <draw_outline>
 80134c8:	e000      	b.n	80134cc <lv_draw_rect+0x64>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 80134ca:	bf00      	nop
#endif

    LV_ASSERT_MEM_INTEGRITY();
}
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}

080134d2 <draw_bg>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_bg(const lv_area_t * coords, const lv_area_t * clip,
                                          const lv_draw_rect_dsc_t * dsc)
{
 80134d2:	b590      	push	{r4, r7, lr}
 80134d4:	b0ad      	sub	sp, #180	; 0xb4
 80134d6:	af04      	add	r7, sp, #16
 80134d8:	60f8      	str	r0, [r7, #12]
 80134da:	60b9      	str	r1, [r7, #8]
 80134dc:	607a      	str	r2, [r7, #4]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	7c9b      	ldrb	r3, [r3, #18]
 80134e2:	2b02      	cmp	r3, #2
 80134e4:	f240 83d6 	bls.w	8013c94 <draw_bg+0x7c2>

    lv_area_t coords_bg;
    lv_area_copy(&coords_bg, coords);
 80134e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134ec:	68f9      	ldr	r1, [r7, #12]
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7ff fea8 	bl	8013244 <lv_area_copy>

    /*If the border fully covers make the bg area 1px smaller to avoid artifacts on the corners*/
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80134fa:	2b01      	cmp	r3, #1
 80134fc:	dd4a      	ble.n	8013594 <draw_bg+0xc2>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	7f1b      	ldrb	r3, [r3, #28]
 8013502:	2bfc      	cmp	r3, #252	; 0xfc
 8013504:	d946      	bls.n	8013594 <draw_bg+0xc2>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f9b3 3000 	ldrsh.w	r3, [r3]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d041      	beq.n	8013594 <draw_bg+0xc2>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 8013510:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8013514:	b29a      	uxth	r2, r3
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801351c:	b29b      	uxth	r3, r3
 801351e:	109b      	asrs	r3, r3, #2
 8013520:	b29b      	uxth	r3, r3
 8013522:	f003 0301 	and.w	r3, r3, #1
 8013526:	b29b      	uxth	r3, r3
 8013528:	4413      	add	r3, r2
 801352a:	b29b      	uxth	r3, r3
 801352c:	b21b      	sxth	r3, r3
 801352e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8013532:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013536:	b29a      	uxth	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801353e:	b29b      	uxth	r3, r3
 8013540:	105b      	asrs	r3, r3, #1
 8013542:	b29b      	uxth	r3, r3
 8013544:	f003 0301 	and.w	r3, r3, #1
 8013548:	b29b      	uxth	r3, r3
 801354a:	4413      	add	r3, r2
 801354c:	b29b      	uxth	r3, r3
 801354e:	b21b      	sxth	r3, r3
 8013550:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8013554:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013558:	b29a      	uxth	r2, r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013560:	b29b      	uxth	r3, r3
 8013562:	10db      	asrs	r3, r3, #3
 8013564:	b29b      	uxth	r3, r3
 8013566:	f003 0301 	and.w	r3, r3, #1
 801356a:	b29b      	uxth	r3, r3
 801356c:	1ad3      	subs	r3, r2, r3
 801356e:	b29b      	uxth	r3, r3
 8013570:	b21b      	sxth	r3, r3
 8013572:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8013576:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801357a:	b29a      	uxth	r2, r3
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013582:	b29b      	uxth	r3, r3
 8013584:	f003 0301 	and.w	r3, r3, #1
 8013588:	b29b      	uxth	r3, r3
 801358a:	1ad3      	subs	r3, r2, r3
 801358c:	b29b      	uxth	r3, r3
 801358e:	b21b      	sxth	r3, r3
 8013590:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    lv_opa_t opa = dsc->bg_opa;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	7c9b      	ldrb	r3, [r3, #18]
 8013598:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801359c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80135a0:	2bfd      	cmp	r3, #253	; 0xfd
 80135a2:	d902      	bls.n	80135aa <draw_bg+0xd8>
 80135a4:	23ff      	movs	r3, #255	; 0xff
 80135a6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 80135aa:	f7f6 fec1 	bl	800a330 <_lv_refr_get_disp_refreshing>
 80135ae:	67b8      	str	r0, [r7, #120]	; 0x78
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80135b0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80135b2:	f006 ffad 	bl	801a510 <lv_disp_get_buf>
 80135b6:	6778      	str	r0, [r7, #116]	; 0x74

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 80135b8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80135bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80135c0:	68ba      	ldr	r2, [r7, #8]
 80135c2:	4618      	mov	r0, r3
 80135c4:	f007 fc7c 	bl	801aec0 <_lv_area_intersect>
 80135c8:	4603      	mov	r3, r0
 80135ca:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(is_common == false) return;
 80135ce:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80135d2:	f083 0301 	eor.w	r3, r3, #1
 80135d6:	b2db      	uxtb	r3, r3
 80135d8:	2b00      	cmp	r3, #0
 80135da:	f040 835d 	bne.w	8013c98 <draw_bg+0x7c6>

    const lv_area_t * disp_area = &vdb->area;
 80135de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80135e0:	3310      	adds	r3, #16
 80135e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 80135e4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80135e8:	b29a      	uxth	r2, r3
 80135ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80135ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80135f0:	b29b      	uxth	r3, r3
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	b21b      	sxth	r3, r3
 80135f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    draw_area.y1 -= disp_area->y1;
 80135fc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8013600:	b29a      	uxth	r2, r3
 8013602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013604:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013608:	b29b      	uxth	r3, r3
 801360a:	1ad3      	subs	r3, r2, r3
 801360c:	b29b      	uxth	r3, r3
 801360e:	b21b      	sxth	r3, r3
 8013610:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    draw_area.x2 -= disp_area->x1;
 8013614:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8013618:	b29a      	uxth	r2, r3
 801361a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801361c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013620:	b29b      	uxth	r3, r3
 8013622:	1ad3      	subs	r3, r2, r3
 8013624:	b29b      	uxth	r3, r3
 8013626:	b21b      	sxth	r3, r3
 8013628:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    draw_area.y2 -= disp_area->y1;
 801362c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013630:	b29a      	uxth	r2, r3
 8013632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013634:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013638:	b29b      	uxth	r3, r3
 801363a:	1ad3      	subs	r3, r2, r3
 801363c:	b29b      	uxth	r3, r3
 801363e:	b21b      	sxth	r3, r3
 8013640:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    int32_t draw_area_w = lv_area_get_width(&draw_area);
 8013644:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013648:	4618      	mov	r0, r3
 801364a:	f7ff fe09 	bl	8013260 <lv_area_get_width>
 801364e:	4603      	mov	r3, r0
 8013650:	66bb      	str	r3, [r7, #104]	; 0x68

    /*Create a mask if there is a radius*/
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8013652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013654:	4618      	mov	r0, r3
 8013656:	f009 f97b 	bl	801c950 <_lv_mem_buf_get>
 801365a:	6678      	str	r0, [r7, #100]	; 0x64

    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	7b1b      	ldrb	r3, [r3, #12]
 8013660:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	685a      	ldr	r2, [r3, #4]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	689b      	ldr	r3, [r3, #8]
 801366c:	429a      	cmp	r2, r3
 801366e:	d102      	bne.n	8013676 <draw_bg+0x1a4>
 8013670:	2300      	movs	r3, #0
 8013672:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 8013676:	f7fe fb03 	bl	8011c80 <lv_draw_mask_get_cnt>
 801367a:	4603      	mov	r3, r0
 801367c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    bool simple_mode = true;
 8013680:	2301      	movs	r3, #1
 8013682:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
    if(other_mask_cnt) simple_mode = false;
 8013686:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801368a:	2b00      	cmp	r3, #0
 801368c:	d003      	beq.n	8013696 <draw_bg+0x1c4>
 801368e:	2300      	movs	r3, #0
 8013690:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8013694:	e006      	b.n	80136a4 <draw_bg+0x1d2>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 8013696:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 801369a:	2b02      	cmp	r3, #2
 801369c:	d102      	bne.n	80136a4 <draw_bg+0x1d2>
 801369e:	2300      	movs	r3, #0
 80136a0:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    int16_t mask_rout_id = LV_MASK_ID_INV;
 80136a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136a8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

    int32_t coords_w = lv_area_get_width(&coords_bg);
 80136ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7ff fdd5 	bl	8013260 <lv_area_get_width>
 80136b6:	4603      	mov	r3, r0
 80136b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t coords_h = lv_area_get_height(&coords_bg);
 80136ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136be:	4618      	mov	r0, r3
 80136c0:	f7ff fde5 	bl	801328e <lv_area_get_height>
 80136c4:	4603      	mov	r3, r0
 80136c6:	65bb      	str	r3, [r7, #88]	; 0x58

    /*Get the real radius*/
    int32_t rout = dsc->radius;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80136ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 80136d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80136d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80136d6:	4293      	cmp	r3, r2
 80136d8:	bfa8      	it	ge
 80136da:	4613      	movge	r3, r2
 80136dc:	657b      	str	r3, [r7, #84]	; 0x54
    if(rout > short_side >> 1) rout = short_side >> 1;
 80136de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136e0:	105b      	asrs	r3, r3, #1
 80136e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80136e6:	429a      	cmp	r2, r3
 80136e8:	dd03      	ble.n	80136f2 <draw_bg+0x220>
 80136ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136ec:	105b      	asrs	r3, r3, #1
 80136ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /*Most simple case: just a plain rectangle*/
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 80136f2:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d018      	beq.n	801372c <draw_bg+0x25a>
 80136fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d114      	bne.n	801372c <draw_bg+0x25a>
 8013702:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013706:	2b00      	cmp	r3, #0
 8013708:	d110      	bne.n	801372c <draw_bg+0x25a>
        _lv_blend_fill(clip, &coords_bg,
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	7cdb      	ldrb	r3, [r3, #19]
 801370e:	687a      	ldr	r2, [r7, #4]
 8013710:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8013714:	9302      	str	r3, [sp, #8]
 8013716:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801371a:	9301      	str	r3, [sp, #4]
 801371c:	2301      	movs	r3, #1
 801371e:	9300      	str	r3, [sp, #0]
 8013720:	2300      	movs	r3, #0
 8013722:	6852      	ldr	r2, [r2, #4]
 8013724:	68b8      	ldr	r0, [r7, #8]
 8013726:	f7f8 ffe1 	bl	800c6ec <_lv_blend_fill>
 801372a:	e2aa      	b.n	8013c82 <draw_bg+0x7b0>
                       dsc->bg_blend_mode);
    }
    /*More complex case: there is a radius, gradient or other mask.*/
    else {
        lv_draw_mask_radius_param_t mask_rout_param;
        if(rout > 0) {
 801372c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013730:	2b00      	cmp	r3, #0
 8013732:	dd12      	ble.n	801375a <draw_bg+0x288>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 8013734:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013738:	b21a      	sxth	r2, r3
 801373a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801373e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013742:	2300      	movs	r3, #0
 8013744:	f7fe fbe8 	bl	8011f18 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8013748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801374c:	2100      	movs	r1, #0
 801374e:	4618      	mov	r0, r3
 8013750:	f7fe f9c8 	bl	8011ae4 <lv_draw_mask_add>
 8013754:	4603      	mov	r3, r0
 8013756:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        }

        /*Draw the background line by line*/
        int32_t h;
        lv_draw_mask_res_t mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801375a:	2301      	movs	r3, #1
 801375c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        lv_color_t grad_color = dsc->bg_color;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	623b      	str	r3, [r7, #32]

        lv_color_t * grad_map = NULL;
 8013766:	2300      	movs	r3, #0
 8013768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /*In case of horizontal gradient pre-compute a line with a gradient*/
        if(grad_dir == LV_GRAD_DIR_HOR) {
 801376c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013770:	2b02      	cmp	r3, #2
 8013772:	d125      	bne.n	80137c0 <draw_bg+0x2ee>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 8013774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	4618      	mov	r0, r3
 801377a:	f009 f8e9 	bl	801c950 <_lv_mem_buf_get>
 801377e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

            int32_t i;
            for(i = 0; i < coords_w; i++) {
 8013782:	2300      	movs	r3, #0
 8013784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013788:	e015      	b.n	80137b6 <draw_bg+0x2e4>
                grad_map[i] = grad_get(dsc, coords_w, i);
 801378a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801378c:	b219      	sxth	r1, r3
 801378e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013792:	b218      	sxth	r0, r3
 8013794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013798:	009b      	lsls	r3, r3, #2
 801379a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801379e:	18d4      	adds	r4, r2, r3
 80137a0:	4602      	mov	r2, r0
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	f000 fd28 	bl	80141f8 <grad_get>
 80137a8:	4603      	mov	r3, r0
 80137aa:	6023      	str	r3, [r4, #0]
            for(i = 0; i < coords_w; i++) {
 80137ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80137b0:	3301      	adds	r3, #1
 80137b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80137b6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80137ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137bc:	429a      	cmp	r2, r3
 80137be:	dbe4      	blt.n	801378a <draw_bg+0x2b8>
            }
        }

        bool split = false;
 80137c0:	2300      	movs	r3, #0
 80137c2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 80137c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7ff fd48 	bl	8013260 <lv_area_get_width>
 80137d0:	4603      	mov	r3, r0
 80137d2:	461a      	mov	r2, r3
 80137d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80137d8:	005b      	lsls	r3, r3, #1
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	2b32      	cmp	r3, #50	; 0x32
 80137de:	dd02      	ble.n	80137e6 <draw_bg+0x314>
 80137e0:	2301      	movs	r3, #1
 80137e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

        lv_opa_t opa2;

        lv_area_t fill_area;
        fill_area.x1 = coords_bg.x1;
 80137e6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80137ea:	833b      	strh	r3, [r7, #24]
        fill_area.x2 = coords_bg.x2;
 80137ec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80137f0:	83bb      	strh	r3, [r7, #28]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 80137f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80137f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80137f8:	b29a      	uxth	r2, r3
 80137fa:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80137fe:	b29b      	uxth	r3, r3
 8013800:	4413      	add	r3, r2
 8013802:	b29b      	uxth	r3, r3
 8013804:	b21b      	sxth	r3, r3
 8013806:	837b      	strh	r3, [r7, #26]
        fill_area.y2 = fill_area.y1;
 8013808:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801380c:	83fb      	strh	r3, [r7, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801380e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8013812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013816:	e18c      	b.n	8013b32 <draw_bg+0x660>
            int32_t y = h + vdb->area.y1;
 8013818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801381a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801381e:	461a      	mov	r2, r3
 8013820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013824:	4413      	add	r3, r2
 8013826:	653b      	str	r3, [r7, #80]	; 0x50

            opa2 = opa;
 8013828:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801382c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

            /*In not corner areas apply the mask only if required*/
            if(y > coords_bg.y1 + rout + 1 &&
 8013830:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013834:	461a      	mov	r2, r3
 8013836:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801383a:	4413      	add	r3, r2
 801383c:	3301      	adds	r3, #1
 801383e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013840:	429a      	cmp	r2, r3
 8013842:	dd37      	ble.n	80138b4 <draw_bg+0x3e2>
               y < coords_bg.y2 - rout - 1) {
 8013844:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013848:	461a      	mov	r2, r3
 801384a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801384e:	1ad3      	subs	r3, r2, r3
 8013850:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 8013852:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013854:	429a      	cmp	r2, r3
 8013856:	da2d      	bge.n	80138b4 <draw_bg+0x3e2>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8013858:	2301      	movs	r3, #1
 801385a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                if(simple_mode == false) {
 801385e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8013862:	f083 0301 	eor.w	r3, r3, #1
 8013866:	b2db      	uxtb	r3, r3
 8013868:	2b00      	cmp	r3, #0
 801386a:	d046      	beq.n	80138fa <draw_bg+0x428>
                    _lv_memset(mask_buf, opa, draw_area_w);
 801386c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801386e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013872:	4619      	mov	r1, r3
 8013874:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8013876:	f009 fbe7 	bl	801d048 <_lv_memset>
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 801387a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801387c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013880:	b29a      	uxth	r2, r3
 8013882:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8013886:	b29b      	uxth	r3, r3
 8013888:	4413      	add	r3, r2
 801388a:	b29b      	uxth	r3, r3
 801388c:	b219      	sxth	r1, r3
 801388e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013890:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013894:	b29a      	uxth	r2, r3
 8013896:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801389a:	b29b      	uxth	r3, r3
 801389c:	4413      	add	r3, r2
 801389e:	b29b      	uxth	r3, r3
 80138a0:	b21a      	sxth	r2, r3
 80138a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80138a4:	b21b      	sxth	r3, r3
 80138a6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80138a8:	f7fe f94e 	bl	8011b48 <lv_draw_mask_apply>
 80138ac:	4603      	mov	r3, r0
 80138ae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                if(simple_mode == false) {
 80138b2:	e022      	b.n	80138fa <draw_bg+0x428>
                }
            }
            /*In corner areas apply the mask anyway*/
            else {
                _lv_memset(mask_buf, opa, draw_area_w);
 80138b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80138b6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80138ba:	4619      	mov	r1, r3
 80138bc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80138be:	f009 fbc3 	bl	801d048 <_lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 80138c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80138c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80138c8:	b29a      	uxth	r2, r3
 80138ca:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80138ce:	b29b      	uxth	r3, r3
 80138d0:	4413      	add	r3, r2
 80138d2:	b29b      	uxth	r3, r3
 80138d4:	b219      	sxth	r1, r3
 80138d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80138d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80138dc:	b29a      	uxth	r2, r3
 80138de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	4413      	add	r3, r2
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	b21a      	sxth	r2, r3
 80138ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80138ec:	b21b      	sxth	r3, r3
 80138ee:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80138f0:	f7fe f92a 	bl	8011b48 <lv_draw_mask_apply>
 80138f4:	4603      	mov	r3, r0
 80138f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }

            /*If mask will taken into account its base opacity was already set by memset above*/
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
 80138fa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80138fe:	2b02      	cmp	r3, #2
 8013900:	d102      	bne.n	8013908 <draw_bg+0x436>
                opa2 = LV_OPA_COVER;
 8013902:	23ff      	movs	r3, #255	; 0xff
 8013904:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
            }

            /*Get the current line color*/
            if(grad_dir == LV_GRAD_DIR_VER) {
 8013908:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 801390c:	2b01      	cmp	r3, #1
 801390e:	d114      	bne.n	801393a <draw_bg+0x468>
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 8013910:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013914:	4618      	mov	r0, r3
 8013916:	f7ff fcba 	bl	801328e <lv_area_get_height>
 801391a:	4603      	mov	r3, r0
 801391c:	4619      	mov	r1, r3
 801391e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013920:	b29a      	uxth	r2, r3
 8013922:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013926:	b29b      	uxth	r3, r3
 8013928:	1ad3      	subs	r3, r2, r3
 801392a:	b29b      	uxth	r3, r3
 801392c:	b21b      	sxth	r3, r3
 801392e:	461a      	mov	r2, r3
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f000 fc61 	bl	80141f8 <grad_get>
 8013936:	4603      	mov	r3, r0
 8013938:	623b      	str	r3, [r7, #32]
            }

            /* If there is not other mask and drawing the corner area split the drawing to corner and middle areas
             * because it the middle mask shouldn't be taken into account (therefore its faster)*/
            if(simple_mode && split &&
 801393a:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 801393e:	2b00      	cmp	r3, #0
 8013940:	f000 809e 	beq.w	8013a80 <draw_bg+0x5ae>
 8013944:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013948:	2b00      	cmp	r3, #0
 801394a:	f000 8099 	beq.w	8013a80 <draw_bg+0x5ae>
               (y < coords_bg.y1 + rout + 1 ||
 801394e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013952:	461a      	mov	r2, r3
 8013954:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013958:	4413      	add	r3, r2
 801395a:	3301      	adds	r3, #1
            if(simple_mode && split &&
 801395c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801395e:	429a      	cmp	r2, r3
 8013960:	db0a      	blt.n	8013978 <draw_bg+0x4a6>
                y > coords_bg.y2 - rout - 1)) {
 8013962:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013966:	461a      	mov	r2, r3
 8013968:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801396c:	1ad3      	subs	r3, r2, r3
 801396e:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
 8013970:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013972:	429a      	cmp	r2, r3
 8013974:	f340 8084 	ble.w	8013a80 <draw_bg+0x5ae>

                /*Left part*/
                lv_area_t fill_area2;
                fill_area2.x1 = coords_bg.x1;
 8013978:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801397c:	823b      	strh	r3, [r7, #16]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 801397e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8013982:	b29a      	uxth	r2, r3
 8013984:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013988:	b29b      	uxth	r3, r3
 801398a:	4413      	add	r3, r2
 801398c:	b29b      	uxth	r3, r3
 801398e:	3b01      	subs	r3, #1
 8013990:	b29b      	uxth	r3, r3
 8013992:	b21b      	sxth	r3, r3
 8013994:	82bb      	strh	r3, [r7, #20]
                fill_area2.y1 = fill_area.y1;
 8013996:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801399a:	827b      	strh	r3, [r7, #18]
                fill_area2.y2 = fill_area.y2;
 801399c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80139a0:	82fb      	strh	r3, [r7, #22]

                _lv_blend_fill(clip, &fill_area2,
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	7cdb      	ldrb	r3, [r3, #19]
 80139a6:	f107 0110 	add.w	r1, r7, #16
 80139aa:	9302      	str	r3, [sp, #8]
 80139ac:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80139b0:	9301      	str	r3, [sp, #4]
 80139b2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80139b6:	9300      	str	r3, [sp, #0]
 80139b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80139ba:	6a3a      	ldr	r2, [r7, #32]
 80139bc:	68b8      	ldr	r0, [r7, #8]
 80139be:	f7f8 fe95 	bl	800c6ec <_lv_blend_fill>
                               grad_color, mask_buf, mask_res, opa2, dsc->bg_blend_mode);

                /*Center part*/
                if(grad_dir == LV_GRAD_DIR_VER) {
 80139c2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d122      	bne.n	8013a10 <draw_bg+0x53e>
                    fill_area2.x1 = coords_bg.x1 + rout;
 80139ca:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80139ce:	b29a      	uxth	r2, r3
 80139d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80139d4:	b29b      	uxth	r3, r3
 80139d6:	4413      	add	r3, r2
 80139d8:	b29b      	uxth	r3, r3
 80139da:	b21b      	sxth	r3, r3
 80139dc:	823b      	strh	r3, [r7, #16]
                    fill_area2.x2 = coords_bg.x2 - rout;
 80139de:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80139e2:	b29a      	uxth	r2, r3
 80139e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	1ad3      	subs	r3, r2, r3
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	b21b      	sxth	r3, r3
 80139f0:	82bb      	strh	r3, [r7, #20]
                    _lv_blend_fill(clip, &fill_area2,
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	7cdb      	ldrb	r3, [r3, #19]
 80139f6:	f107 0110 	add.w	r1, r7, #16
 80139fa:	9302      	str	r3, [sp, #8]
 80139fc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013a00:	9301      	str	r3, [sp, #4]
 8013a02:	2301      	movs	r3, #1
 8013a04:	9300      	str	r3, [sp, #0]
 8013a06:	2300      	movs	r3, #0
 8013a08:	6a3a      	ldr	r2, [r7, #32]
 8013a0a:	68b8      	ldr	r0, [r7, #8]
 8013a0c:	f7f8 fe6e 	bl	800c6ec <_lv_blend_fill>
                                   grad_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);
                }

                /*Right part*/
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 8013a10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013a1a:	b29b      	uxth	r3, r3
 8013a1c:	1ad3      	subs	r3, r2, r3
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	3301      	adds	r3, #1
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	b21b      	sxth	r3, r3
 8013a26:	823b      	strh	r3, [r7, #16]
                fill_area2.x2 = coords_bg.x2;
 8013a28:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013a2c:	82bb      	strh	r3, [r7, #20]

                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8013a2e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013a32:	461a      	mov	r2, r3
 8013a34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013a38:	1ad3      	subs	r3, r2, r3
 8013a3a:	1c5a      	adds	r2, r3, #1
 8013a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013a3e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013a42:	4619      	mov	r1, r3
 8013a44:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8013a48:	440b      	add	r3, r1
 8013a4a:	1ad3      	subs	r3, r2, r3
 8013a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
                if(mask_ofs < 0) mask_ofs = 0;
 8013a4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	da01      	bge.n	8013a58 <draw_bg+0x586>
 8013a54:	2300      	movs	r3, #0
 8013a56:	67fb      	str	r3, [r7, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2,
 8013a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013a5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013a5c:	441a      	add	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	7cdb      	ldrb	r3, [r3, #19]
 8013a62:	f107 0110 	add.w	r1, r7, #16
 8013a66:	9302      	str	r3, [sp, #8]
 8013a68:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013a6c:	9301      	str	r3, [sp, #4]
 8013a6e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013a72:	9300      	str	r3, [sp, #0]
 8013a74:	4613      	mov	r3, r2
 8013a76:	6a3a      	ldr	r2, [r7, #32]
 8013a78:	68b8      	ldr	r0, [r7, #8]
 8013a7a:	f7f8 fe37 	bl	800c6ec <_lv_blend_fill>
                y > coords_bg.y2 - rout - 1)) {
 8013a7e:	e045      	b.n	8013b0c <draw_bg+0x63a>
                               grad_color, mask_buf + mask_ofs, mask_res, opa2, dsc->bg_blend_mode);

            }
            else {
                if(grad_dir == LV_GRAD_DIR_HOR) {
 8013a80:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013a84:	2b02      	cmp	r3, #2
 8013a86:	d111      	bne.n	8013aac <draw_bg+0x5da>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	7cdb      	ldrb	r3, [r3, #19]
 8013a8c:	f107 0118 	add.w	r1, r7, #24
 8013a90:	9302      	str	r3, [sp, #8]
 8013a92:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013a96:	9301      	str	r3, [sp, #4]
 8013a98:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013a9c:	9300      	str	r3, [sp, #0]
 8013a9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013aa0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013aa4:	68b8      	ldr	r0, [r7, #8]
 8013aa6:	f7f8 fef2 	bl	800c88e <_lv_blend_map>
 8013aaa:	e02f      	b.n	8013b0c <draw_bg+0x63a>
                }
                else if(grad_dir == LV_GRAD_DIR_VER) {
 8013aac:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d110      	bne.n	8013ad6 <draw_bg+0x604>
                    _lv_blend_fill(clip, &fill_area,
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	7cdb      	ldrb	r3, [r3, #19]
 8013ab8:	f107 0118 	add.w	r1, r7, #24
 8013abc:	9302      	str	r3, [sp, #8]
 8013abe:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013ac2:	9301      	str	r3, [sp, #4]
 8013ac4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013ac8:	9300      	str	r3, [sp, #0]
 8013aca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013acc:	6a3a      	ldr	r2, [r7, #32]
 8013ace:	68b8      	ldr	r0, [r7, #8]
 8013ad0:	f7f8 fe0c 	bl	800c6ec <_lv_blend_fill>
 8013ad4:	e01a      	b.n	8013b0c <draw_bg+0x63a>
                                   grad_color, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
                }
                else if(other_mask_cnt != 0 || !split) {
 8013ad6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d106      	bne.n	8013aec <draw_bg+0x61a>
 8013ade:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013ae2:	f083 0301 	eor.w	r3, r3, #1
 8013ae6:	b2db      	uxtb	r3, r3
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d00f      	beq.n	8013b0c <draw_bg+0x63a>
                    _lv_blend_fill(clip, &fill_area,
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	7cdb      	ldrb	r3, [r3, #19]
 8013af0:	f107 0118 	add.w	r1, r7, #24
 8013af4:	9302      	str	r3, [sp, #8]
 8013af6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013afa:	9301      	str	r3, [sp, #4]
 8013afc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013b00:	9300      	str	r3, [sp, #0]
 8013b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b04:	6a3a      	ldr	r2, [r7, #32]
 8013b06:	68b8      	ldr	r0, [r7, #8]
 8013b08:	f7f8 fdf0 	bl	800c6ec <_lv_blend_fill>
                                   grad_color, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
                }
            }
            fill_area.y1++;
 8013b0c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	3301      	adds	r3, #1
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	b21b      	sxth	r3, r3
 8013b18:	837b      	strh	r3, [r7, #26]
            fill_area.y2++;
 8013b1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	3301      	adds	r3, #1
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	b21b      	sxth	r3, r3
 8013b26:	83fb      	strh	r3, [r7, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8013b28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b2c:	3301      	adds	r3, #1
 8013b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013b32:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013b36:	461a      	mov	r2, r3
 8013b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b3c:	4293      	cmp	r3, r2
 8013b3e:	f77f ae6b 	ble.w	8013818 <draw_bg+0x346>
        }

        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 8013b42:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	f040 8093 	bne.w	8013c72 <draw_bg+0x7a0>
 8013b4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f040 808e 	bne.w	8013c72 <draw_bg+0x7a0>
 8013b56:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	f000 8089 	beq.w	8013c72 <draw_bg+0x7a0>
            /*Central part*/
            fill_area.x1 = coords_bg.x1 + rout;
 8013b60:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8013b64:	b29a      	uxth	r2, r3
 8013b66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013b6a:	b29b      	uxth	r3, r3
 8013b6c:	4413      	add	r3, r2
 8013b6e:	b29b      	uxth	r3, r3
 8013b70:	b21b      	sxth	r3, r3
 8013b72:	833b      	strh	r3, [r7, #24]
            fill_area.x2 = coords_bg.x2 - rout;
 8013b74:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013b78:	b29a      	uxth	r2, r3
 8013b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013b7e:	b29b      	uxth	r3, r3
 8013b80:	1ad3      	subs	r3, r2, r3
 8013b82:	b29b      	uxth	r3, r3
 8013b84:	b21b      	sxth	r3, r3
 8013b86:	83bb      	strh	r3, [r7, #28]
            fill_area.y1 = coords_bg.y1;
 8013b88:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013b8c:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = coords_bg.y1 + rout;
 8013b8e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013b92:	b29a      	uxth	r2, r3
 8013b94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	4413      	add	r3, r2
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	b21b      	sxth	r3, r3
 8013ba0:	83fb      	strh	r3, [r7, #30]

            _lv_blend_fill(clip, &fill_area,
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	7cdb      	ldrb	r3, [r3, #19]
 8013ba6:	687a      	ldr	r2, [r7, #4]
 8013ba8:	f107 0118 	add.w	r1, r7, #24
 8013bac:	9302      	str	r3, [sp, #8]
 8013bae:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013bb2:	9301      	str	r3, [sp, #4]
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	9300      	str	r3, [sp, #0]
 8013bb8:	2300      	movs	r3, #0
 8013bba:	6852      	ldr	r2, [r2, #4]
 8013bbc:	68b8      	ldr	r0, [r7, #8]
 8013bbe:	f7f8 fd95 	bl	800c6ec <_lv_blend_fill>
                           dsc->bg_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);

            fill_area.y1 = coords_bg.y2 - rout;
 8013bc2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bc6:	b29a      	uxth	r2, r3
 8013bc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	1ad3      	subs	r3, r2, r3
 8013bd0:	b29b      	uxth	r3, r3
 8013bd2:	b21b      	sxth	r3, r3
 8013bd4:	837b      	strh	r3, [r7, #26]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 8013bd6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013bda:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013bde:	429a      	cmp	r2, r3
 8013be0:	dc06      	bgt.n	8013bf0 <draw_bg+0x71e>
 8013be2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013be6:	b29b      	uxth	r3, r3
 8013be8:	3301      	adds	r3, #1
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	b21b      	sxth	r3, r3
 8013bee:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = coords_bg.y2;
 8013bf0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bf4:	83fb      	strh	r3, [r7, #30]

            _lv_blend_fill(clip, &fill_area,
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	7cdb      	ldrb	r3, [r3, #19]
 8013bfa:	687a      	ldr	r2, [r7, #4]
 8013bfc:	f107 0118 	add.w	r1, r7, #24
 8013c00:	9302      	str	r3, [sp, #8]
 8013c02:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013c06:	9301      	str	r3, [sp, #4]
 8013c08:	2301      	movs	r3, #1
 8013c0a:	9300      	str	r3, [sp, #0]
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	6852      	ldr	r2, [r2, #4]
 8013c10:	68b8      	ldr	r0, [r7, #8]
 8013c12:	f7f8 fd6b 	bl	800c6ec <_lv_blend_fill>
                           dsc->bg_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);

            fill_area.x1 = coords_bg.x1;
 8013c16:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8013c1a:	833b      	strh	r3, [r7, #24]
            fill_area.x2 = coords_bg.x2;
 8013c1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013c20:	83bb      	strh	r3, [r7, #28]
            fill_area.y1 = coords_bg.y1 + rout + 1;
 8013c22:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	4413      	add	r3, r2
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	3301      	adds	r3, #1
 8013c34:	b29b      	uxth	r3, r3
 8013c36:	b21b      	sxth	r3, r3
 8013c38:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = coords_bg.y2 - rout - 1;
 8013c3a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c3e:	b29a      	uxth	r2, r3
 8013c40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c44:	b29b      	uxth	r3, r3
 8013c46:	1ad3      	subs	r3, r2, r3
 8013c48:	b29b      	uxth	r3, r3
 8013c4a:	3b01      	subs	r3, #1
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	b21b      	sxth	r3, r3
 8013c50:	83fb      	strh	r3, [r7, #30]

            _lv_blend_fill(clip, &fill_area,
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	7cdb      	ldrb	r3, [r3, #19]
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	f107 0118 	add.w	r1, r7, #24
 8013c5c:	9302      	str	r3, [sp, #8]
 8013c5e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013c62:	9301      	str	r3, [sp, #4]
 8013c64:	2301      	movs	r3, #1
 8013c66:	9300      	str	r3, [sp, #0]
 8013c68:	2300      	movs	r3, #0
 8013c6a:	6852      	ldr	r2, [r2, #4]
 8013c6c:	68b8      	ldr	r0, [r7, #8]
 8013c6e:	f7f8 fd3d 	bl	800c6ec <_lv_blend_fill>
                           dsc->bg_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);

        }

        if(grad_map) _lv_mem_buf_release(grad_map);
 8013c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d003      	beq.n	8013c82 <draw_bg+0x7b0>
 8013c7a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8013c7e:	f008 ff45 	bl	801cb0c <_lv_mem_buf_release>
    }

    lv_draw_mask_remove_id(mask_rout_id);
 8013c82:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7fd ffa2 	bl	8011bd0 <lv_draw_mask_remove_id>

    _lv_mem_buf_release(mask_buf);
 8013c8c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8013c8e:	f008 ff3d 	bl	801cb0c <_lv_mem_buf_release>
 8013c92:	e002      	b.n	8013c9a <draw_bg+0x7c8>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8013c94:	bf00      	nop
 8013c96:	e000      	b.n	8013c9a <draw_bg+0x7c8>
    if(is_common == false) return;
 8013c98:	bf00      	nop

}
 8013c9a:	37a4      	adds	r7, #164	; 0xa4
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd90      	pop	{r4, r7, pc}

08013ca0 <draw_border>:

LV_ATTRIBUTE_FAST_MEM static void draw_border(const lv_area_t * coords, const lv_area_t * clip,
                                              const lv_draw_rect_dsc_t * dsc)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b0b0      	sub	sp, #192	; 0xc0
 8013ca4:	af04      	add	r7, sp, #16
 8013ca6:	60f8      	str	r0, [r7, #12]
 8013ca8:	60b9      	str	r1, [r7, #8]
 8013caa:	607a      	str	r2, [r7, #4]
    if(dsc->border_opa <= LV_OPA_MIN) return;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	7f1b      	ldrb	r3, [r3, #28]
 8013cb0:	2b02      	cmp	r3, #2
 8013cb2:	f240 8295 	bls.w	80141e0 <draw_border+0x540>
    if(dsc->border_width == 0) return;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	f000 8291 	beq.w	80141e4 <draw_border+0x544>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	f000 828d 	beq.w	80141e8 <draw_border+0x548>
    if(dsc->border_post) return;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	7f9b      	ldrb	r3, [r3, #30]
 8013cd2:	f003 0301 	and.w	r3, r3, #1
 8013cd6:	b2db      	uxtb	r3, r3
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	f040 8287 	bne.w	80141ec <draw_border+0x54c>

    int32_t coords_w = lv_area_get_width(coords);
 8013cde:	68f8      	ldr	r0, [r7, #12]
 8013ce0:	f7ff fabe 	bl	8013260 <lv_area_get_width>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int32_t coords_h = lv_area_get_height(coords);
 8013cea:	68f8      	ldr	r0, [r7, #12]
 8013cec:	f7ff facf 	bl	801328e <lv_area_get_height>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /*Get the real radius*/
    int32_t rout = dsc->radius;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 8013d00:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013d08:	4293      	cmp	r3, r2
 8013d0a:	bfa8      	it	ge
 8013d0c:	4613      	movge	r3, r2
 8013d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if(rout > short_side >> 1) rout = short_side >> 1;
 8013d12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013d16:	105b      	asrs	r3, r3, #1
 8013d18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	dd04      	ble.n	8013d2a <draw_border+0x8a>
 8013d20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013d24:	105b      	asrs	r3, r3, #1
 8013d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /*Get the inner area*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 8013d2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013d2e:	68f9      	ldr	r1, [r7, #12]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7ff fa87 	bl	8013244 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 8013d36:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8013d3a:	b29a      	uxth	r2, r3
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	f003 0304 	and.w	r3, r3, #4
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d004      	beq.n	8013d56 <draw_border+0xb6>
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	e00a      	b.n	8013d6c <draw_border+0xcc>
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013d5c:	b299      	uxth	r1, r3
 8013d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	440b      	add	r3, r1
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	425b      	negs	r3, r3
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	4413      	add	r3, r2
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	b21b      	sxth	r3, r3
 8013d72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8013d76:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 8013d7a:	b29a      	uxth	r2, r3
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	f003 0308 	and.w	r3, r3, #8
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d004      	beq.n	8013d96 <draw_border+0xf6>
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	e00a      	b.n	8013dac <draw_border+0x10c>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013d9c:	b299      	uxth	r1, r3
 8013d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	440b      	add	r3, r1
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	425b      	negs	r3, r3
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	1ad3      	subs	r3, r2, r3
 8013dae:	b29b      	uxth	r3, r3
 8013db0:	b21b      	sxth	r3, r3
 8013db2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8013db6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8013dba:	b29a      	uxth	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	f003 0302 	and.w	r3, r3, #2
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d004      	beq.n	8013dd6 <draw_border+0x136>
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013dd2:	b29b      	uxth	r3, r3
 8013dd4:	e00a      	b.n	8013dec <draw_border+0x14c>
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013ddc:	b299      	uxth	r1, r3
 8013dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	440b      	add	r3, r1
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	425b      	negs	r3, r3
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	4413      	add	r3, r2
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	b21b      	sxth	r3, r3
 8013df2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8013df6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	f003 0301 	and.w	r3, r3, #1
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d004      	beq.n	8013e16 <draw_border+0x176>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	e00a      	b.n	8013e2c <draw_border+0x18c>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013e1c:	b299      	uxth	r1, r3
 8013e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	440b      	add	r3, r1
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	425b      	negs	r3, r3
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	1ad3      	subs	r3, r2, r3
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	b21b      	sxth	r3, r3
 8013e32:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013e3c:	2b0f      	cmp	r3, #15
 8013e3e:	d115      	bne.n	8013e6c <draw_border+0x1cc>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	7f1b      	ldrb	r3, [r3, #28]
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	7f52      	ldrb	r2, [r2, #29]
 8013e4e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8013e52:	9203      	str	r2, [sp, #12]
 8013e54:	9302      	str	r3, [sp, #8]
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	695b      	ldr	r3, [r3, #20]
 8013e5a:	9301      	str	r3, [sp, #4]
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	460b      	mov	r3, r1
 8013e62:	68ba      	ldr	r2, [r7, #8]
 8013e64:	68f9      	ldr	r1, [r7, #12]
 8013e66:	f002 fbc5 	bl	80165f4 <draw_full_border>
 8013e6a:	e1c2      	b.n	80141f2 <draw_border+0x552>
                         dsc->border_blend_mode);
    }
    else {
        lv_opa_t opa = dsc->border_opa;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	7f1b      	ldrb	r3, [r3, #28]
 8013e70:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8013e74:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8013e78:	2bfd      	cmp	r3, #253	; 0xfd
 8013e7a:	d902      	bls.n	8013e82 <draw_border+0x1e2>
 8013e7c:	23ff      	movs	r3, #255	; 0xff
 8013e7e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8013e82:	f7f6 fa55 	bl	800a330 <_lv_refr_get_disp_refreshing>
 8013e86:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8013e8a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8013e8e:	f006 fb3f 	bl	801a510 <lv_disp_get_buf>
 8013e92:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

        /* Get clipped fill area which is the real draw area.
         * It is always the same or inside `fill_area` */
        lv_area_t draw_area;
        bool is_common;
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 8013e96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013e9a:	68ba      	ldr	r2, [r7, #8]
 8013e9c:	68f9      	ldr	r1, [r7, #12]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f007 f80e 	bl	801aec0 <_lv_area_intersect>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
        if(is_common == false) return;
 8013eaa:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8013eae:	f083 0301 	eor.w	r3, r3, #1
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	f040 819b 	bne.w	80141f0 <draw_border+0x550>

        const lv_area_t * disp_area = &vdb->area;
 8013eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013ebe:	3310      	adds	r3, #16
 8013ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        /* Now `draw_area` has absolute coordinates.
         * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
        draw_area.x1 -= disp_area->x1;
 8013ec4:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8013ec8:	b29a      	uxth	r2, r3
 8013eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	1ad3      	subs	r3, r2, r3
 8013ed6:	b29b      	uxth	r3, r3
 8013ed8:	b21b      	sxth	r3, r3
 8013eda:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        draw_area.y1 -= disp_area->y1;
 8013ede:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013ee2:	b29a      	uxth	r2, r3
 8013ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ee8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	1ad3      	subs	r3, r2, r3
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	b21b      	sxth	r3, r3
 8013ef4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        draw_area.x2 -= disp_area->x1;
 8013ef8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f06:	b29b      	uxth	r3, r3
 8013f08:	1ad3      	subs	r3, r2, r3
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	b21b      	sxth	r3, r3
 8013f0e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        draw_area.y2 -= disp_area->y1;
 8013f12:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8013f16:	b29a      	uxth	r2, r3
 8013f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013f1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013f20:	b29b      	uxth	r3, r3
 8013f22:	1ad3      	subs	r3, r2, r3
 8013f24:	b29b      	uxth	r3, r3
 8013f26:	b21b      	sxth	r3, r3
 8013f28:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        int32_t draw_area_w = lv_area_get_width(&draw_area);
 8013f2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7ff f995 	bl	8013260 <lv_area_get_width>
 8013f36:	4603      	mov	r3, r0
 8013f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /*Create a mask if there is a radius*/
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8013f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013f40:	4618      	mov	r0, r3
 8013f42:	f008 fd05 	bl	801c950 <_lv_mem_buf_get>
 8013f46:	67f8      	str	r0, [r7, #124]	; 0x7c

        /*Create mask for the outer area*/
        int16_t mask_rout_id = LV_MASK_ID_INV;
 8013f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f4c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        lv_draw_mask_radius_param_t mask_rout_param;
        if(rout > 0) {
 8013f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	dd11      	ble.n	8013f7c <draw_border+0x2dc>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 8013f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f5c:	b21a      	sxth	r2, r3
 8013f5e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8013f62:	2300      	movs	r3, #0
 8013f64:	68f9      	ldr	r1, [r7, #12]
 8013f66:	f7fd ffd7 	bl	8011f18 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8013f6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013f6e:	2100      	movs	r1, #0
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7fd fdb7 	bl	8011ae4 <lv_draw_mask_add>
 8013f76:	4603      	mov	r3, r0
 8013f78:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        }

        /*Create mask for the inner mask*/
        int32_t rin = rout - dsc->border_width;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013f82:	461a      	mov	r2, r3
 8013f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f88:	1a9b      	subs	r3, r3, r2
 8013f8a:	67bb      	str	r3, [r7, #120]	; 0x78
        if(rin < 0) rin = 0;
 8013f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	da01      	bge.n	8013f96 <draw_border+0x2f6>
 8013f92:	2300      	movs	r3, #0
 8013f94:	67bb      	str	r3, [r7, #120]	; 0x78
        lv_draw_mask_radius_param_t mask_rin_param;
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 8013f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f9a:	b29a      	uxth	r2, r3
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	1ad3      	subs	r3, r2, r3
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	b21a      	sxth	r2, r3
 8013faa:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8013fae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	f7fd ffb0 	bl	8011f18 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8013fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013fbc:	2100      	movs	r1, #0
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7fd fd90 	bl	8011ae4 <lv_draw_mask_add>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013fd0:	3b01      	subs	r3, #1
 8013fd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	bfb8      	it	lt
 8013fda:	4613      	movlt	r3, r2
 8013fdc:	673b      	str	r3, [r7, #112]	; 0x70

        int32_t h;
        lv_draw_mask_res_t mask_res;
        lv_area_t fill_area;

        lv_color_t color = dsc->border_color;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	695b      	ldr	r3, [r3, #20]
 8013fe2:	61bb      	str	r3, [r7, #24]
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	7f5b      	ldrb	r3, [r3, #29]
 8013fe8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        fill_area.x1 = coords->x1;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ff2:	83bb      	strh	r3, [r7, #28]
        fill_area.x2 = coords->x2;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013ffa:	843b      	strh	r3, [r7, #32]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8013ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014000:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014004:	b29a      	uxth	r2, r3
 8014006:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801400a:	b29b      	uxth	r3, r3
 801400c:	4413      	add	r3, r2
 801400e:	b29b      	uxth	r3, r3
 8014010:	b21b      	sxth	r3, r3
 8014012:	83fb      	strh	r3, [r7, #30]
        fill_area.y2 = fill_area.y1;
 8014014:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014018:	847b      	strh	r3, [r7, #34]	; 0x22

        uint32_t buf_ofs = 0;
 801401a:	2300      	movs	r3, #0
 801401c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8014026:	2b04      	cmp	r3, #4
 8014028:	d10a      	bne.n	8014040 <draw_border+0x3a0>
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014030:	b29a      	uxth	r2, r3
 8014032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014034:	b29b      	uxth	r3, r3
 8014036:	4413      	add	r3, r2
 8014038:	b29b      	uxth	r3, r3
 801403a:	b21b      	sxth	r3, r3
 801403c:	843b      	strh	r3, [r7, #32]
 801403e:	e017      	b.n	8014070 <draw_border+0x3d0>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8014046:	2b08      	cmp	r3, #8
 8014048:	d112      	bne.n	8014070 <draw_border+0x3d0>
            fill_area.x1 = coords->x2 - corner_size;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014050:	b29a      	uxth	r2, r3
 8014052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014054:	b29b      	uxth	r3, r3
 8014056:	1ad3      	subs	r3, r2, r3
 8014058:	b29b      	uxth	r3, r3
 801405a:	b21b      	sxth	r3, r3
 801405c:	83bb      	strh	r3, [r7, #28]
            buf_ofs = fill_area.x1 - coords->x1;
 801405e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8014062:	461a      	mov	r2, r3
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	f9b3 3000 	ldrsh.w	r3, [r3]
 801406a:	1ad3      	subs	r3, r2, r3
 801406c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        }

        volatile bool top_only = false;
 8014070:	2300      	movs	r3, #0
 8014072:	75fb      	strb	r3, [r7, #23]
        volatile bool bottom_only = false;
 8014074:	2300      	movs	r3, #0
 8014076:	75bb      	strb	r3, [r7, #22]
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801407e:	2b02      	cmp	r3, #2
 8014080:	d101      	bne.n	8014086 <draw_border+0x3e6>
 8014082:	2301      	movs	r3, #1
 8014084:	75fb      	strb	r3, [r7, #23]
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801408c:	2b01      	cmp	r3, #1
 801408e:	d101      	bne.n	8014094 <draw_border+0x3f4>
 8014090:	2301      	movs	r3, #1
 8014092:	75bb      	strb	r3, [r7, #22]
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801409a:	2b03      	cmp	r3, #3
 801409c:	d103      	bne.n	80140a6 <draw_border+0x406>
            top_only = true;
 801409e:	2301      	movs	r3, #1
 80140a0:	75fb      	strb	r3, [r7, #23]
            bottom_only = true;
 80140a2:	2301      	movs	r3, #1
 80140a4:	75bb      	strb	r3, [r7, #22]
        }

        volatile bool normal = !top_only && !bottom_only ? true : false;
 80140a6:	7dfb      	ldrb	r3, [r7, #23]
 80140a8:	b2db      	uxtb	r3, r3
 80140aa:	f083 0301 	eor.w	r3, r3, #1
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d008      	beq.n	80140c6 <draw_border+0x426>
 80140b4:	7dbb      	ldrb	r3, [r7, #22]
 80140b6:	b2db      	uxtb	r3, r3
 80140b8:	f083 0301 	eor.w	r3, r3, #1
 80140bc:	b2db      	uxtb	r3, r3
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d001      	beq.n	80140c6 <draw_border+0x426>
 80140c2:	2301      	movs	r3, #1
 80140c4:	e000      	b.n	80140c8 <draw_border+0x428>
 80140c6:	2300      	movs	r3, #0
 80140c8:	f003 0301 	and.w	r3, r3, #1
 80140cc:	b2db      	uxtb	r3, r3
 80140ce:	757b      	strb	r3, [r7, #21]

        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80140d0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80140d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80140d8:	e06d      	b.n	80141b6 <draw_border+0x516>
            if(normal ||
 80140da:	7d7b      	ldrb	r3, [r7, #21]
 80140dc:	b2db      	uxtb	r3, r3
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d11d      	bne.n	801411e <draw_border+0x47e>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 80140e2:	7dfb      	ldrb	r3, [r7, #23]
 80140e4:	b2db      	uxtb	r3, r3
            if(normal ||
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d00a      	beq.n	8014100 <draw_border+0x460>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 80140ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80140ee:	461a      	mov	r2, r3
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80140f6:	4619      	mov	r1, r3
 80140f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80140fa:	440b      	add	r3, r1
 80140fc:	429a      	cmp	r2, r3
 80140fe:	dd0e      	ble.n	801411e <draw_border+0x47e>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 8014100:	7dbb      	ldrb	r3, [r7, #22]
 8014102:	b2db      	uxtb	r3, r3
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 8014104:	2b00      	cmp	r3, #0
 8014106:	d043      	beq.n	8014190 <draw_border+0x4f0>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 8014108:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801410c:	461a      	mov	r2, r3
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014114:	4619      	mov	r1, r3
 8014116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014118:	1acb      	subs	r3, r1, r3
 801411a:	429a      	cmp	r2, r3
 801411c:	db38      	blt.n	8014190 <draw_border+0x4f0>
                _lv_memset_ff(mask_buf, draw_area_w);
 801411e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014122:	4619      	mov	r1, r3
 8014124:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8014126:	f009 f89c 	bl	801d262 <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 801412a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801412e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014132:	b29a      	uxth	r2, r3
 8014134:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8014138:	b29b      	uxth	r3, r3
 801413a:	4413      	add	r3, r2
 801413c:	b29b      	uxth	r3, r3
 801413e:	b219      	sxth	r1, r3
 8014140:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014144:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8014148:	b29a      	uxth	r2, r3
 801414a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801414e:	b29b      	uxth	r3, r3
 8014150:	4413      	add	r3, r2
 8014152:	b29b      	uxth	r3, r3
 8014154:	b21a      	sxth	r2, r3
 8014156:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801415a:	b21b      	sxth	r3, r3
 801415c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801415e:	f7fd fcf3 	bl	8011b48 <lv_draw_mask_apply>
 8014162:	4603      	mov	r3, r0
 8014164:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 8014168:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801416a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801416e:	441a      	add	r2, r3
 8014170:	f107 011c 	add.w	r1, r7, #28
 8014174:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014178:	9302      	str	r3, [sp, #8]
 801417a:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 801417e:	9301      	str	r3, [sp, #4]
 8014180:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8014184:	9300      	str	r3, [sp, #0]
 8014186:	4613      	mov	r3, r2
 8014188:	69ba      	ldr	r2, [r7, #24]
 801418a:	68b8      	ldr	r0, [r7, #8]
 801418c:	f7f8 faae 	bl	800c6ec <_lv_blend_fill>
            }
            fill_area.y1++;
 8014190:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014194:	b29b      	uxth	r3, r3
 8014196:	3301      	adds	r3, #1
 8014198:	b29b      	uxth	r3, r3
 801419a:	b21b      	sxth	r3, r3
 801419c:	83fb      	strh	r3, [r7, #30]
            fill_area.y2++;
 801419e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	3301      	adds	r3, #1
 80141a6:	b29b      	uxth	r3, r3
 80141a8:	b21b      	sxth	r3, r3
 80141aa:	847b      	strh	r3, [r7, #34]	; 0x22
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80141ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80141b0:	3301      	adds	r3, #1
 80141b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80141b6:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80141ba:	461a      	mov	r2, r3
 80141bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80141c0:	4293      	cmp	r3, r2
 80141c2:	dd8a      	ble.n	80140da <draw_border+0x43a>

        }
        lv_draw_mask_remove_id(mask_rin_id);
 80141c4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7fd fd01 	bl	8011bd0 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 80141ce:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7fd fcfc 	bl	8011bd0 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
 80141d8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80141da:	f008 fc97 	bl	801cb0c <_lv_mem_buf_release>
 80141de:	e008      	b.n	80141f2 <draw_border+0x552>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 80141e0:	bf00      	nop
 80141e2:	e006      	b.n	80141f2 <draw_border+0x552>
    if(dsc->border_width == 0) return;
 80141e4:	bf00      	nop
 80141e6:	e004      	b.n	80141f2 <draw_border+0x552>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 80141e8:	bf00      	nop
 80141ea:	e002      	b.n	80141f2 <draw_border+0x552>
    if(dsc->border_post) return;
 80141ec:	bf00      	nop
 80141ee:	e000      	b.n	80141f2 <draw_border+0x552>
        if(is_common == false) return;
 80141f0:	bf00      	nop
    }
}
 80141f2:	37b0      	adds	r7, #176	; 0xb0
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <grad_get>:

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b086      	sub	sp, #24
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	460b      	mov	r3, r1
 8014202:	807b      	strh	r3, [r7, #2]
 8014204:	4613      	mov	r3, r2
 8014206:	803b      	strh	r3, [r7, #0]
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801420e:	461a      	mov	r2, r3
 8014210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014214:	fb03 f302 	mul.w	r3, r3, r2
 8014218:	121b      	asrs	r3, r3, #8
 801421a:	617b      	str	r3, [r7, #20]
    if(i <= min) return dsc->bg_color;
 801421c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8014220:	697a      	ldr	r2, [r7, #20]
 8014222:	429a      	cmp	r2, r3
 8014224:	db02      	blt.n	801422c <grad_get+0x34>
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	e038      	b.n	801429e <grad_get+0xa6>

    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014232:	461a      	mov	r2, r3
 8014234:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014238:	fb03 f302 	mul.w	r3, r3, r2
 801423c:	121b      	asrs	r3, r3, #8
 801423e:	613b      	str	r3, [r7, #16]
    if(i >= max) return dsc->bg_grad_color;
 8014240:	f9b7 3000 	ldrsh.w	r3, [r7]
 8014244:	693a      	ldr	r2, [r7, #16]
 8014246:	429a      	cmp	r2, r3
 8014248:	dc02      	bgt.n	8014250 <grad_get+0x58>
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	689b      	ldr	r3, [r3, #8]
 801424e:	e026      	b.n	801429e <grad_get+0xa6>

    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014256:	461a      	mov	r2, r3
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801425e:	1ad3      	subs	r3, r2, r3
 8014260:	60fb      	str	r3, [r7, #12]
    d = (s * d) >> 8;
 8014262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014266:	68fa      	ldr	r2, [r7, #12]
 8014268:	fb02 f303 	mul.w	r3, r2, r3
 801426c:	121b      	asrs	r3, r3, #8
 801426e:	60fb      	str	r3, [r7, #12]
    i -= min;
 8014270:	883a      	ldrh	r2, [r7, #0]
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	b29b      	uxth	r3, r3
 8014276:	1ad3      	subs	r3, r2, r3
 8014278:	b29b      	uxth	r3, r3
 801427a:	803b      	strh	r3, [r7, #0]
    lv_opa_t mix = (i * 255) / d;
 801427c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8014280:	4613      	mov	r3, r2
 8014282:	021b      	lsls	r3, r3, #8
 8014284:	1a9a      	subs	r2, r3, r2
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	fb92 f3f3 	sdiv	r3, r2, r3
 801428c:	72fb      	strb	r3, [r7, #11]
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
 801428e:	7afa      	ldrb	r2, [r7, #11]
 8014290:	6879      	ldr	r1, [r7, #4]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	6849      	ldr	r1, [r1, #4]
 8014296:	6898      	ldr	r0, [r3, #8]
 8014298:	f7ff f810 	bl	80132bc <lv_color_mix>
 801429c:	4603      	mov	r3, r0
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3718      	adds	r7, #24
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}

080142a6 <draw_shadow>:

#if LV_USE_SHADOW
LV_ATTRIBUTE_FAST_MEM static void draw_shadow(const lv_area_t * coords, const lv_area_t * clip,
                                              const lv_draw_rect_dsc_t * dsc)
{
 80142a6:	b590      	push	{r4, r7, lr}
 80142a8:	b0cb      	sub	sp, #300	; 0x12c
 80142aa:	af04      	add	r7, sp, #16
 80142ac:	f107 030c 	add.w	r3, r7, #12
 80142b0:	6018      	str	r0, [r3, #0]
 80142b2:	f107 0308 	add.w	r3, r7, #8
 80142b6:	6019      	str	r1, [r3, #0]
 80142b8:	1d3b      	adds	r3, r7, #4
 80142ba:	601a      	str	r2, [r3, #0]
    /*Check whether the shadow is visible*/
    if(dsc->shadow_width == 0) return;
 80142bc:	1d3b      	adds	r3, r7, #4
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	f001 832a 	beq.w	801591e <draw_shadow+0x1678>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 80142ca:	1d3b      	adds	r3, r7, #4
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80142d2:	2b02      	cmp	r3, #2
 80142d4:	f241 8325 	bls.w	8015922 <draw_shadow+0x167c>

    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 80142d8:	1d3b      	adds	r3, r7, #4
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	d112      	bne.n	801430a <draw_shadow+0x64>
 80142e4:	1d3b      	adds	r3, r7, #4
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d10c      	bne.n	801430a <draw_shadow+0x64>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 80142f0:	1d3b      	adds	r3, r7, #4
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d106      	bne.n	801430a <draw_shadow+0x64>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 80142fc:	1d3b      	adds	r3, r7, #4
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014304:	2b00      	cmp	r3, #0
 8014306:	f341 830e 	ble.w	8015926 <draw_shadow+0x1680>
        return;
    }

    int32_t sw = dsc->shadow_width;
 801430a:	1d3b      	adds	r3, r7, #4
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014312:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    lv_area_t sh_rect_area;
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 8014316:	f107 030c 	add.w	r3, r7, #12
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014320:	b29a      	uxth	r2, r3
 8014322:	1d3b      	adds	r3, r7, #4
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 801432a:	b29b      	uxth	r3, r3
 801432c:	4413      	add	r3, r2
 801432e:	b29a      	uxth	r2, r3
 8014330:	1d3b      	adds	r3, r7, #4
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014338:	b29b      	uxth	r3, r3
 801433a:	1ad3      	subs	r3, r2, r3
 801433c:	b29b      	uxth	r3, r3
 801433e:	b21b      	sxth	r3, r3
 8014340:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 8014344:	f107 030c 	add.w	r3, r7, #12
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801434e:	b29a      	uxth	r2, r3
 8014350:	1d3b      	adds	r3, r7, #4
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8014358:	b29b      	uxth	r3, r3
 801435a:	4413      	add	r3, r2
 801435c:	b29a      	uxth	r2, r3
 801435e:	1d3b      	adds	r3, r7, #4
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014366:	b29b      	uxth	r3, r3
 8014368:	4413      	add	r3, r2
 801436a:	b29b      	uxth	r3, r3
 801436c:	b21b      	sxth	r3, r3
 801436e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8014372:	f107 030c 	add.w	r3, r7, #12
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801437c:	b29a      	uxth	r2, r3
 801437e:	1d3b      	adds	r3, r7, #4
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8014386:	b29b      	uxth	r3, r3
 8014388:	4413      	add	r3, r2
 801438a:	b29a      	uxth	r2, r3
 801438c:	1d3b      	adds	r3, r7, #4
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014394:	b29b      	uxth	r3, r3
 8014396:	1ad3      	subs	r3, r2, r3
 8014398:	b29b      	uxth	r3, r3
 801439a:	b21b      	sxth	r3, r3
 801439c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 80143a0:	f107 030c 	add.w	r3, r7, #12
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80143aa:	b29a      	uxth	r2, r3
 80143ac:	1d3b      	adds	r3, r7, #4
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80143b4:	b29b      	uxth	r3, r3
 80143b6:	4413      	add	r3, r2
 80143b8:	b29a      	uxth	r2, r3
 80143ba:	1d3b      	adds	r3, r7, #4
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	4413      	add	r3, r2
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	b21b      	sxth	r3, r3
 80143ca:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

    lv_area_t sh_area;
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 80143ce:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 80143d2:	b29a      	uxth	r2, r3
 80143d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80143d8:	2b00      	cmp	r3, #0
 80143da:	da00      	bge.n	80143de <draw_shadow+0x138>
 80143dc:	3301      	adds	r3, #1
 80143de:	105b      	asrs	r3, r3, #1
 80143e0:	425b      	negs	r3, r3
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	4413      	add	r3, r2
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	3b01      	subs	r3, #1
 80143ea:	b29b      	uxth	r3, r3
 80143ec:	b21b      	sxth	r3, r3
 80143ee:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 80143f2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80143f6:	b29a      	uxth	r2, r3
 80143f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	da00      	bge.n	8014402 <draw_shadow+0x15c>
 8014400:	3301      	adds	r3, #1
 8014402:	105b      	asrs	r3, r3, #1
 8014404:	b29b      	uxth	r3, r3
 8014406:	4413      	add	r3, r2
 8014408:	b29b      	uxth	r3, r3
 801440a:	3301      	adds	r3, #1
 801440c:	b29b      	uxth	r3, r3
 801440e:	b21b      	sxth	r3, r3
 8014410:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 8014414:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8014418:	b29a      	uxth	r2, r3
 801441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801441e:	2b00      	cmp	r3, #0
 8014420:	da00      	bge.n	8014424 <draw_shadow+0x17e>
 8014422:	3301      	adds	r3, #1
 8014424:	105b      	asrs	r3, r3, #1
 8014426:	425b      	negs	r3, r3
 8014428:	b29b      	uxth	r3, r3
 801442a:	4413      	add	r3, r2
 801442c:	b29b      	uxth	r3, r3
 801442e:	3b01      	subs	r3, #1
 8014430:	b29b      	uxth	r3, r3
 8014432:	b21b      	sxth	r3, r3
 8014434:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 8014438:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801443c:	b29a      	uxth	r2, r3
 801443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014442:	2b00      	cmp	r3, #0
 8014444:	da00      	bge.n	8014448 <draw_shadow+0x1a2>
 8014446:	3301      	adds	r3, #1
 8014448:	105b      	asrs	r3, r3, #1
 801444a:	b29b      	uxth	r3, r3
 801444c:	4413      	add	r3, r2
 801444e:	b29b      	uxth	r3, r3
 8014450:	3301      	adds	r3, #1
 8014452:	b29b      	uxth	r3, r3
 8014454:	b21b      	sxth	r3, r3
 8014456:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

    lv_opa_t opa = dsc->shadow_opa;
 801445a:	1d3b      	adds	r3, r7, #4
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014462:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8014466:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801446a:	2bfd      	cmp	r3, #253	; 0xfd
 801446c:	d902      	bls.n	8014474 <draw_shadow+0x1ce>
 801446e:	23ff      	movs	r3, #255	; 0xff
 8014470:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8014474:	f7f5 ff5c 	bl	800a330 <_lv_refr_get_disp_refreshing>
 8014478:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 801447c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8014480:	f006 f846 	bl	801a510 <lv_disp_get_buf>
 8014484:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 8014488:	f107 0308 	add.w	r3, r7, #8
 801448c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8014490:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8014494:	681a      	ldr	r2, [r3, #0]
 8014496:	f006 fd13 	bl	801aec0 <_lv_area_intersect>
 801449a:	4603      	mov	r3, r0
 801449c:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
    if(is_common == false) return;
 80144a0:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80144a4:	f083 0301 	eor.w	r3, r3, #1
 80144a8:	b2db      	uxtb	r3, r3
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	f041 823d 	bne.w	801592a <draw_shadow+0x1684>

    const lv_area_t * disp_area = &vdb->area;
 80144b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144b4:	3310      	adds	r3, #16
 80144b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 80144ba:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 80144be:	b29a      	uxth	r2, r3
 80144c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80144c8:	b29b      	uxth	r3, r3
 80144ca:	1ad3      	subs	r3, r2, r3
 80144cc:	b29b      	uxth	r3, r3
 80144ce:	b21b      	sxth	r3, r3
 80144d0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    draw_area.y1 -= disp_area->y1;
 80144d4:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 80144d8:	b29a      	uxth	r2, r3
 80144da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80144e2:	b29b      	uxth	r3, r3
 80144e4:	1ad3      	subs	r3, r2, r3
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	b21b      	sxth	r3, r3
 80144ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    draw_area.x2 -= disp_area->x1;
 80144ee:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80144f2:	b29a      	uxth	r2, r3
 80144f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80144fc:	b29b      	uxth	r3, r3
 80144fe:	1ad3      	subs	r3, r2, r3
 8014500:	b29b      	uxth	r3, r3
 8014502:	b21b      	sxth	r3, r3
 8014504:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    draw_area.y2 -= disp_area->y1;
 8014508:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 801450c:	b29a      	uxth	r2, r3
 801450e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014512:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014516:	b29b      	uxth	r3, r3
 8014518:	1ad3      	subs	r3, r2, r3
 801451a:	b29b      	uxth	r3, r3
 801451c:	b21b      	sxth	r3, r3
 801451e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

    /*Consider 1 px smaller bg to be sure the edge will be covered by the shadow*/
    lv_area_t bg_coords;
    lv_area_copy(&bg_coords, coords);
 8014522:	f107 030c 	add.w	r3, r7, #12
 8014526:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801452a:	6819      	ldr	r1, [r3, #0]
 801452c:	4610      	mov	r0, r2
 801452e:	f7fe fe89 	bl	8013244 <lv_area_copy>
    bg_coords.x1 += 1;
 8014532:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8014536:	b29b      	uxth	r3, r3
 8014538:	3301      	adds	r3, #1
 801453a:	b29b      	uxth	r3, r3
 801453c:	b21b      	sxth	r3, r3
 801453e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    bg_coords.y1 += 1;
 8014542:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8014546:	b29b      	uxth	r3, r3
 8014548:	3301      	adds	r3, #1
 801454a:	b29b      	uxth	r3, r3
 801454c:	b21b      	sxth	r3, r3
 801454e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    bg_coords.x2 -= 1;
 8014552:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8014556:	b29b      	uxth	r3, r3
 8014558:	3b01      	subs	r3, #1
 801455a:	b29b      	uxth	r3, r3
 801455c:	b21b      	sxth	r3, r3
 801455e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    bg_coords.y2 -= 1;
 8014562:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8014566:	b29b      	uxth	r3, r3
 8014568:	3b01      	subs	r3, #1
 801456a:	b29b      	uxth	r3, r3
 801456c:	b21b      	sxth	r3, r3
 801456e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

    /*Get the real radius*/
    int32_t r_bg = dsc->radius;
 8014572:	1d3b      	adds	r3, r7, #4
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	f9b3 3000 	ldrsh.w	r3, [r3]
 801457a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 801457e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014582:	4618      	mov	r0, r3
 8014584:	f7fe fe6c 	bl	8013260 <lv_area_get_width>
 8014588:	4603      	mov	r3, r0
 801458a:	461c      	mov	r4, r3
 801458c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014590:	4618      	mov	r0, r3
 8014592:	f7fe fe7c 	bl	801328e <lv_area_get_height>
 8014596:	4603      	mov	r3, r0
 8014598:	429c      	cmp	r4, r3
 801459a:	da06      	bge.n	80145aa <draw_shadow+0x304>
 801459c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7fe fe5d 	bl	8013260 <lv_area_get_width>
 80145a6:	4603      	mov	r3, r0
 80145a8:	e005      	b.n	80145b6 <draw_shadow+0x310>
 80145aa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80145ae:	4618      	mov	r0, r3
 80145b0:	f7fe fe6d 	bl	801328e <lv_area_get_height>
 80145b4:	4603      	mov	r3, r0
 80145b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 80145ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80145be:	105b      	asrs	r3, r3, #1
 80145c0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80145c4:	429a      	cmp	r2, r3
 80145c6:	dd04      	ble.n	80145d2 <draw_shadow+0x32c>
 80145c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80145cc:	105b      	asrs	r3, r3, #1
 80145ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    int32_t r_sh = dsc->radius;
 80145d2:	1d3b      	adds	r3, r7, #4
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
 80145de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fe fe3c 	bl	8013260 <lv_area_get_width>
 80145e8:	4603      	mov	r3, r0
 80145ea:	461c      	mov	r4, r3
 80145ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7fe fe4c 	bl	801328e <lv_area_get_height>
 80145f6:	4603      	mov	r3, r0
 80145f8:	429c      	cmp	r4, r3
 80145fa:	da06      	bge.n	801460a <draw_shadow+0x364>
 80145fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014600:	4618      	mov	r0, r3
 8014602:	f7fe fe2d 	bl	8013260 <lv_area_get_width>
 8014606:	4603      	mov	r3, r0
 8014608:	e005      	b.n	8014616 <draw_shadow+0x370>
 801460a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801460e:	4618      	mov	r0, r3
 8014610:	f7fe fe3d 	bl	801328e <lv_area_get_height>
 8014614:	4603      	mov	r3, r0
 8014616:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 801461a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801461e:	105b      	asrs	r3, r3, #1
 8014620:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8014624:	429a      	cmp	r2, r3
 8014626:	dd04      	ble.n	8014632 <draw_shadow+0x38c>
 8014628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801462c:	105b      	asrs	r3, r3, #1
 801462e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    int32_t corner_size = sw  + r_sh;
 8014632:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8014636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801463a:	4413      	add	r3, r2
 801463c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            sh_cache_size = corner_size;
            sh_cache_r = r_sh;
        }
    }
#else
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 8014640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014644:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014648:	fb02 f303 	mul.w	r3, r2, r3
 801464c:	005b      	lsls	r3, r3, #1
 801464e:	4618      	mov	r0, r3
 8014650:	f008 f97e 	bl	801c950 <_lv_mem_buf_get>
 8014654:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 8014658:	1d3b      	adds	r3, r7, #4
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8014660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014664:	b21b      	sxth	r3, r3
 8014666:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 801466a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801466e:	f001 f961 	bl	8015934 <shadow_draw_corner_buf>
#endif

    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 8014672:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8014676:	b29c      	uxth	r4, r3
 8014678:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801467c:	4618      	mov	r0, r3
 801467e:	f7fe fe06 	bl	801328e <lv_area_get_height>
 8014682:	4603      	mov	r3, r0
 8014684:	2b00      	cmp	r3, #0
 8014686:	da00      	bge.n	801468a <draw_shadow+0x3e4>
 8014688:	3301      	adds	r3, #1
 801468a:	105b      	asrs	r3, r3, #1
 801468c:	b21b      	sxth	r3, r3
 801468e:	b29b      	uxth	r3, r3
 8014690:	4423      	add	r3, r4
 8014692:	b29b      	uxth	r3, r3
 8014694:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 8014698:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801469c:	b29c      	uxth	r4, r3
 801469e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7fe fddc 	bl	8013260 <lv_area_get_width>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	da00      	bge.n	80146b0 <draw_shadow+0x40a>
 80146ae:	3301      	adds	r3, #1
 80146b0:	105b      	asrs	r3, r3, #1
 80146b2:	b21b      	sxth	r3, r3
 80146b4:	b29b      	uxth	r3, r3
 80146b6:	4423      	add	r3, r4
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

    bool simple_mode = true;
 80146be:	2301      	movs	r3, #1
 80146c0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 80146c4:	f7fd fadc 	bl	8011c80 <lv_draw_mask_get_cnt>
 80146c8:	4603      	mov	r3, r0
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d003      	beq.n	80146d6 <draw_shadow+0x430>
 80146ce:	2300      	movs	r3, #0
 80146d0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 80146d4:	e018      	b.n	8014708 <draw_shadow+0x462>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
 80146d6:	1d3b      	adds	r3, r7, #4
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d105      	bne.n	80146ee <draw_shadow+0x448>
 80146e2:	1d3b      	adds	r3, r7, #4
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d003      	beq.n	80146f6 <draw_shadow+0x450>
 80146ee:	2300      	movs	r3, #0
 80146f0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 80146f4:	e008      	b.n	8014708 <draw_shadow+0x462>
    else if(dsc->shadow_spread != 0) simple_mode = false;
 80146f6:	1d3b      	adds	r3, r7, #4
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d002      	beq.n	8014708 <draw_shadow+0x462>
 8014702:	2300      	movs	r3, #0
 8014704:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

    /*Create a mask*/
    lv_draw_mask_res_t mask_res;
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
 8014708:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801470c:	4618      	mov	r0, r3
 801470e:	f7fe fda7 	bl	8013260 <lv_area_get_width>
 8014712:	4603      	mov	r3, r0
 8014714:	4618      	mov	r0, r3
 8014716:	f008 f91b 	bl	801c950 <_lv_mem_buf_get>
 801471a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 801471e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014722:	b21a      	sxth	r2, r3
 8014724:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014728:	f107 0068 	add.w	r0, r7, #104	; 0x68
 801472c:	2301      	movs	r3, #1
 801472e:	f7fd fbf3 	bl	8011f18 <lv_draw_mask_radius_init>

    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8014732:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014736:	2100      	movs	r1, #0
 8014738:	4618      	mov	r0, r3
 801473a:	f7fd f9d3 	bl	8011ae4 <lv_draw_mask_add>
 801473e:	4603      	mov	r3, r0
 8014740:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    lv_area_t a;

    /*Draw the top right corner*/
    int32_t y;
    lv_opa_t * sh_buf_tmp;
    a.x2 = sh_area.x2;
 8014744:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8014748:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 801474c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8014750:	b29a      	uxth	r2, r3
 8014752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014756:	b29b      	uxth	r3, r3
 8014758:	1ad3      	subs	r3, r2, r3
 801475a:	b29b      	uxth	r3, r3
 801475c:	3301      	adds	r3, #1
 801475e:	b29b      	uxth	r3, r3
 8014760:	b21b      	sxth	r3, r3
 8014762:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.y1 = sh_area.y1;
 8014766:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801476a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = a.y1 + corner_size - 1;
 801476e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8014772:	b29a      	uxth	r2, r3
 8014774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014778:	b29b      	uxth	r3, r3
 801477a:	4413      	add	r3, r2
 801477c:	b29b      	uxth	r3, r3
 801477e:	3b01      	subs	r3, #1
 8014780:	b29b      	uxth	r3, r3
 8014782:	b21b      	sxth	r3, r3
 8014784:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    lv_area_t ca;
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 8014788:	f107 0308 	add.w	r3, r7, #8
 801478c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014790:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014794:	681a      	ldr	r2, [r3, #0]
 8014796:	f006 fb93 	bl	801aec0 <_lv_area_intersect>
 801479a:	4603      	mov	r3, r0
 801479c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80147a0:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	f000 80bf 	beq.w	8014928 <draw_shadow+0x682>
 80147aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80147ae:	b21a      	sxth	r2, r3
 80147b0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80147b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80147b8:	4618      	mov	r0, r3
 80147ba:	f006 fd65 	bl	801b288 <_lv_area_is_in>
 80147be:	4603      	mov	r3, r0
 80147c0:	f083 0301 	eor.w	r3, r3, #1
 80147c4:	b2db      	uxtb	r3, r3
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	f000 80ae 	beq.w	8014928 <draw_shadow+0x682>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y2 > h_half) ca.y2 = h_half;
 80147cc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80147d0:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 80147d4:	429a      	cmp	r2, r3
 80147d6:	da03      	bge.n	80147e0 <draw_shadow+0x53a>
 80147d8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80147dc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 80147e0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80147e4:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80147e8:	429a      	cmp	r2, r3
 80147ea:	db06      	blt.n	80147fa <draw_shadow+0x554>
 80147ec:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80147f0:	3301      	adds	r3, #1
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	b21b      	sxth	r3, r3
 80147f6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        lv_coord_t h = lv_area_get_height(&ca);
 80147fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80147fe:	4618      	mov	r0, r3
 8014800:	f7fe fd45 	bl	801328e <lv_area_get_height>
 8014804:	4603      	mov	r3, r0
 8014806:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
        lv_coord_t w = lv_area_get_width(&ca);
 801480a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801480e:	4618      	mov	r0, r3
 8014810:	f7fe fd26 	bl	8013260 <lv_area_get_width>
 8014814:	4603      	mov	r3, r0
 8014816:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        if(w > 0) {
 801481a:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 801481e:	2b00      	cmp	r3, #0
 8014820:	f340 8082 	ble.w	8014928 <draw_shadow+0x682>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8014824:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014828:	461a      	mov	r2, r3
 801482a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801482e:	1ad3      	subs	r3, r2, r3
 8014830:	461a      	mov	r2, r3
 8014832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014836:	4413      	add	r3, r2
 8014838:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 801483c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8014840:	461a      	mov	r2, r3
 8014842:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8014846:	1ad3      	subs	r3, r2, r3
 8014848:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801484c:	fb02 f303 	mul.w	r3, r2, r3
 8014850:	461a      	mov	r2, r3
 8014852:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014856:	4413      	add	r3, r2
 8014858:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 801485c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014860:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014864:	4611      	mov	r1, r2
 8014866:	4618      	mov	r0, r3
 8014868:	f7fe fcec 	bl	8013244 <lv_area_copy>
            fa.y2 = fa.y1;
 801486c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8014870:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            for(y = 0; y < h; y++) {
 8014874:	2300      	movs	r3, #0
 8014876:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801487a:	e04f      	b.n	801491c <draw_shadow+0x676>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 801487c:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8014880:	461a      	mov	r2, r3
 8014882:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014886:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801488a:	f008 f9c5 	bl	801cc18 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 801488e:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	; 0x50
 8014892:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8014896:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 801489a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801489e:	f7fd f953 	bl	8011b48 <lv_draw_mask_apply>
 80148a2:	4603      	mov	r3, r0
 80148a4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80148a8:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80148ac:	2b01      	cmp	r3, #1
 80148ae:	d102      	bne.n	80148b6 <draw_shadow+0x610>
 80148b0:	2302      	movs	r3, #2
 80148b2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80148b6:	1d3b      	adds	r3, r7, #4
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80148be:	1d3a      	adds	r2, r7, #4
 80148c0:	6812      	ldr	r2, [r2, #0]
 80148c2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80148c6:	f107 0008 	add.w	r0, r7, #8
 80148ca:	9302      	str	r3, [sp, #8]
 80148cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80148d0:	9301      	str	r3, [sp, #4]
 80148d2:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80148d6:	9300      	str	r3, [sp, #0]
 80148d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80148dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80148de:	6800      	ldr	r0, [r0, #0]
 80148e0:	f7f7 ff04 	bl	800c6ec <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1++;
 80148e4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	3301      	adds	r3, #1
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	b21b      	sxth	r3, r3
 80148f0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                fa.y2++;
 80148f4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	3301      	adds	r3, #1
 80148fc:	b29b      	uxth	r3, r3
 80148fe:	b21b      	sxth	r3, r3
 8014900:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                sh_buf_tmp += corner_size;
 8014904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014908:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801490c:	4413      	add	r3, r2
 801490e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 8014912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014916:	3301      	adds	r3, #1
 8014918:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801491c:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	; 0xca
 8014920:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014924:	429a      	cmp	r2, r3
 8014926:	dba9      	blt.n	801487c <draw_shadow+0x5d6>
            }
        }
    }

    /*Draw the bottom right corner*/
    a.x2 = sh_area.x2;
 8014928:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 801492c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 8014930:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8014934:	b29a      	uxth	r2, r3
 8014936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801493a:	b29b      	uxth	r3, r3
 801493c:	1ad3      	subs	r3, r2, r3
 801493e:	b29b      	uxth	r3, r3
 8014940:	3301      	adds	r3, #1
 8014942:	b29b      	uxth	r3, r3
 8014944:	b21b      	sxth	r3, r3
 8014946:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.y1 = sh_area.y2 - corner_size + 1;
 801494a:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 801494e:	b29a      	uxth	r2, r3
 8014950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014954:	b29b      	uxth	r3, r3
 8014956:	1ad3      	subs	r3, r2, r3
 8014958:	b29b      	uxth	r3, r3
 801495a:	3301      	adds	r3, #1
 801495c:	b29b      	uxth	r3, r3
 801495e:	b21b      	sxth	r3, r3
 8014960:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2;
 8014964:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014968:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 801496c:	f107 0308 	add.w	r3, r7, #8
 8014970:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014974:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	f006 faa1 	bl	801aec0 <_lv_area_intersect>
 801497e:	4603      	mov	r3, r0
 8014980:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014984:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014988:	2b00      	cmp	r3, #0
 801498a:	f000 80c2 	beq.w	8014b12 <draw_shadow+0x86c>
 801498e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014992:	b21a      	sxth	r2, r3
 8014994:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014998:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801499c:	4618      	mov	r0, r3
 801499e:	f006 fc73 	bl	801b288 <_lv_area_is_in>
 80149a2:	4603      	mov	r3, r0
 80149a4:	f083 0301 	eor.w	r3, r3, #1
 80149a8:	b2db      	uxtb	r3, r3
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	f000 80b1 	beq.w	8014b12 <draw_shadow+0x86c>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 80149b0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80149b4:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 80149b8:	429a      	cmp	r2, r3
 80149ba:	db06      	blt.n	80149ca <draw_shadow+0x724>
 80149bc:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80149c0:	3301      	adds	r3, #1
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	b21b      	sxth	r3, r3
 80149c6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 80149ca:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80149ce:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80149d2:	429a      	cmp	r2, r3
 80149d4:	db06      	blt.n	80149e4 <draw_shadow+0x73e>
 80149d6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80149da:	3301      	adds	r3, #1
 80149dc:	b29b      	uxth	r3, r3
 80149de:	b21b      	sxth	r3, r3
 80149e0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        lv_coord_t h = lv_area_get_height(&ca);
 80149e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7fe fc50 	bl	801328e <lv_area_get_height>
 80149ee:	4603      	mov	r3, r0
 80149f0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        lv_coord_t w = lv_area_get_width(&ca);
 80149f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7fe fc31 	bl	8013260 <lv_area_get_width>
 80149fe:	4603      	mov	r3, r0
 8014a00:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

        if(w > 0) {
 8014a04:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	f340 8082 	ble.w	8014b12 <draw_shadow+0x86c>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8014a0e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014a12:	461a      	mov	r2, r3
 8014a14:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014a18:	1ad3      	subs	r3, r2, r3
 8014a1a:	461a      	mov	r2, r3
 8014a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014a20:	4413      	add	r3, r2
 8014a22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8014a26:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8014a2a:	461a      	mov	r2, r3
 8014a2c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014a30:	1ad3      	subs	r3, r2, r3
 8014a32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014a36:	fb02 f303 	mul.w	r3, r2, r3
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014a40:	4413      	add	r3, r2
 8014a42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014a46:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014a4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014a4e:	4611      	mov	r1, r2
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7fe fbf7 	bl	8013244 <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 8014a56:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014a5a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

            for(y = 0; y < h; y++) {
 8014a5e:	2300      	movs	r3, #0
 8014a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014a64:	e04f      	b.n	8014b06 <draw_shadow+0x860>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014a66:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8014a6a:	461a      	mov	r2, r3
 8014a6c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014a70:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014a74:	f008 f8d0 	bl	801cc18 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014a78:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
 8014a7c:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8014a80:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8014a84:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014a88:	f7fd f85e 	bl	8011b48 <lv_draw_mask_apply>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014a92:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014a96:	2b01      	cmp	r3, #1
 8014a98:	d102      	bne.n	8014aa0 <draw_shadow+0x7fa>
 8014a9a:	2302      	movs	r3, #2
 8014a9c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8014aa0:	1d3b      	adds	r3, r7, #4
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014aa8:	1d3a      	adds	r2, r7, #4
 8014aaa:	6812      	ldr	r2, [r2, #0]
 8014aac:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8014ab0:	f107 0008 	add.w	r0, r7, #8
 8014ab4:	9302      	str	r3, [sp, #8]
 8014ab6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014aba:	9301      	str	r3, [sp, #4]
 8014abc:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014ac0:	9300      	str	r3, [sp, #0]
 8014ac2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014ac6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014ac8:	6800      	ldr	r0, [r0, #0]
 8014aca:	f7f7 fe0f 	bl	800c6ec <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1--;
 8014ace:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014ad2:	b29b      	uxth	r3, r3
 8014ad4:	3b01      	subs	r3, #1
 8014ad6:	b29b      	uxth	r3, r3
 8014ad8:	b21b      	sxth	r3, r3
 8014ada:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fa.y2--;
 8014ade:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014ae2:	b29b      	uxth	r3, r3
 8014ae4:	3b01      	subs	r3, #1
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	b21b      	sxth	r3, r3
 8014aea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                sh_buf_tmp += corner_size;
 8014aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014af2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014af6:	4413      	add	r3, r2
 8014af8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 8014afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014b00:	3301      	adds	r3, #1
 8014b02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014b06:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8014b0a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	dba9      	blt.n	8014a66 <draw_shadow+0x7c0>
            }
        }
    }

    /*Fill the right side*/
    a.x2 = sh_area.x2;
 8014b12:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8014b16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 8014b1a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8014b1e:	b29a      	uxth	r2, r3
 8014b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b24:	b29b      	uxth	r3, r3
 8014b26:	1ad3      	subs	r3, r2, r3
 8014b28:	b29b      	uxth	r3, r3
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	b29b      	uxth	r3, r3
 8014b2e:	b21b      	sxth	r3, r3
 8014b30:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.y1 = sh_area.y1 + corner_size;
 8014b34:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8014b38:	b29a      	uxth	r2, r3
 8014b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b3e:	b29b      	uxth	r3, r3
 8014b40:	4413      	add	r3, r2
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	b21b      	sxth	r3, r3
 8014b46:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2 - corner_size;
 8014b4a:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014b4e:	b29a      	uxth	r2, r3
 8014b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	1ad3      	subs	r3, r2, r3
 8014b58:	b29b      	uxth	r3, r3
 8014b5a:	b21b      	sxth	r3, r3
 8014b5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014b60:	f107 0308 	add.w	r3, r7, #8
 8014b64:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014b68:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014b6c:	681a      	ldr	r2, [r3, #0]
 8014b6e:	f006 f9a7 	bl	801aec0 <_lv_area_intersect>
 8014b72:	4603      	mov	r3, r0
 8014b74:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014b78:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	f000 80bd 	beq.w	8014cfc <draw_shadow+0xa56>
 8014b82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014b86:	b21a      	sxth	r2, r3
 8014b88:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014b8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014b90:	4618      	mov	r0, r3
 8014b92:	f006 fb79 	bl	801b288 <_lv_area_is_in>
 8014b96:	4603      	mov	r3, r0
 8014b98:	f083 0301 	eor.w	r3, r3, #1
 8014b9c:	b2db      	uxtb	r3, r3
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f000 80ac 	beq.w	8014cfc <draw_shadow+0xa56>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
 8014ba4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d00c      	beq.n	8014bc6 <draw_shadow+0x920>
 8014bac:	f107 030c 	add.w	r3, r7, #12
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014bb6:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014bba:	4293      	cmp	r3, r2
 8014bbc:	bfb8      	it	lt
 8014bbe:	4613      	movlt	r3, r2
 8014bc0:	b21b      	sxth	r3, r3
 8014bc2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 8014bc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7fe fb48 	bl	8013260 <lv_area_get_width>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        if(w > 0) {
 8014bd6:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	f340 808e 	ble.w	8014cfc <draw_shadow+0xa56>
            lv_coord_t h = lv_area_get_height(&ca);
 8014be0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7fe fb52 	bl	801328e <lv_area_get_height>
 8014bea:	4603      	mov	r3, r0
 8014bec:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

            /*The last line of the shadow is repeated on the side*/
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 8014bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014bf4:	3b01      	subs	r3, #1
 8014bf6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014bfa:	fb02 f303 	mul.w	r3, r2, r3
 8014bfe:	461a      	mov	r2, r3
 8014c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014c04:	4413      	add	r3, r2
 8014c06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += ca.x1 - a.x1;
 8014c0a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014c0e:	461a      	mov	r2, r3
 8014c10:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014c14:	1ad3      	subs	r3, r2, r3
 8014c16:	461a      	mov	r2, r3
 8014c18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014c1c:	4413      	add	r3, r2
 8014c1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014c22:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014c26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014c2a:	4611      	mov	r1, r2
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7fe fb09 	bl	8013244 <lv_area_copy>
            fa.y2 = fa.y1;
 8014c32:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8014c36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            for(y = 0; y < h; y++) {
 8014c40:	2300      	movs	r3, #0
 8014c42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014c46:	e053      	b.n	8014cf0 <draw_shadow+0xa4a>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014c48:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8014c4c:	461a      	mov	r2, r3
 8014c4e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014c52:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014c56:	f007 ffdf 	bl	801cc18 <_lv_memcpy>

                if(simple_mode) {
 8014c5a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d003      	beq.n	8014c6a <draw_shadow+0x9c4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014c62:	2302      	movs	r3, #2
 8014c64:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8014c68:	e013      	b.n	8014c92 <draw_shadow+0x9ec>
                }
                else {
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014c6a:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	; 0x40
 8014c6e:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8014c72:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8014c76:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014c7a:	f7fc ff65 	bl	8011b48 <lv_draw_mask_apply>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014c84:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014c88:	2b01      	cmp	r3, #1
 8014c8a:	d102      	bne.n	8014c92 <draw_shadow+0x9ec>
 8014c8c:	2302      	movs	r3, #2
 8014c8e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                }

                _lv_blend_fill(clip, &fa,
 8014c92:	1d3b      	adds	r3, r7, #4
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014c9a:	1d3a      	adds	r2, r7, #4
 8014c9c:	6812      	ldr	r2, [r2, #0]
 8014c9e:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8014ca2:	1d3a      	adds	r2, r7, #4
 8014ca4:	6812      	ldr	r2, [r2, #0]
 8014ca6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8014caa:	f107 0008 	add.w	r0, r7, #8
 8014cae:	9102      	str	r1, [sp, #8]
 8014cb0:	9301      	str	r3, [sp, #4]
 8014cb2:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014cb6:	9300      	str	r3, [sp, #0]
 8014cb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014cbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014cbe:	4621      	mov	r1, r4
 8014cc0:	6800      	ldr	r0, [r0, #0]
 8014cc2:	f7f7 fd13 	bl	800c6ec <_lv_blend_fill>
                               dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->shadow_blend_mode);
                fa.y1++;
 8014cc6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8014cca:	b29b      	uxth	r3, r3
 8014ccc:	3301      	adds	r3, #1
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	b21b      	sxth	r3, r3
 8014cd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                fa.y2++;
 8014cd6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8014cda:	b29b      	uxth	r3, r3
 8014cdc:	3301      	adds	r3, #1
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	b21b      	sxth	r3, r3
 8014ce2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for(y = 0; y < h; y++) {
 8014ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014cea:	3301      	adds	r3, #1
 8014cec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014cf0:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8014cf4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	dba5      	blt.n	8014c48 <draw_shadow+0x9a2>
            }
        }
    }

    /*Invert the shadow corner buffer and draw the corners on the left*/
    sh_buf_tmp = sh_buf ;
 8014cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014d00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    for(y = 0; y < corner_size; y++) {
 8014d04:	2300      	movs	r3, #0
 8014d06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014d0a:	e043      	b.n	8014d94 <draw_shadow+0xaee>
        int32_t x;
        for(x = 0; x < corner_size / 2; x++) {
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014d12:	e028      	b.n	8014d66 <draw_shadow+0xac0>
            lv_opa_t tmp = sh_buf_tmp[x];
 8014d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d18:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014d1c:	4413      	add	r3, r2
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
 8014d24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d2c:	1ad3      	subs	r3, r2, r3
 8014d2e:	3b01      	subs	r3, #1
 8014d30:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014d34:	441a      	add	r2, r3
 8014d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d3a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014d3e:	440b      	add	r3, r1
 8014d40:	7812      	ldrb	r2, [r2, #0]
 8014d42:	701a      	strb	r2, [r3, #0]
            sh_buf_tmp[corner_size - x - 1] = tmp;
 8014d44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d4c:	1ad3      	subs	r3, r2, r3
 8014d4e:	3b01      	subs	r3, #1
 8014d50:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014d54:	4413      	add	r3, r2
 8014d56:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8014d5a:	701a      	strb	r2, [r3, #0]
        for(x = 0; x < corner_size / 2; x++) {
 8014d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d60:	3301      	adds	r3, #1
 8014d62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	da00      	bge.n	8014d70 <draw_shadow+0xaca>
 8014d6e:	3301      	adds	r3, #1
 8014d70:	105b      	asrs	r3, r3, #1
 8014d72:	461a      	mov	r2, r3
 8014d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	dbcb      	blt.n	8014d14 <draw_shadow+0xa6e>
        }
        sh_buf_tmp += corner_size;
 8014d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d80:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014d84:	4413      	add	r3, r2
 8014d86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    for(y = 0; y < corner_size; y++) {
 8014d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d8e:	3301      	adds	r3, #1
 8014d90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014d94:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	dbb5      	blt.n	8014d0c <draw_shadow+0xa66>
    }

    /*Draw the top left corner*/
    a.x1 = sh_area.x1;
 8014da0:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8014da4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = a.x1 + corner_size - 1;
 8014da8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014dac:	b29a      	uxth	r2, r3
 8014dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014db2:	b29b      	uxth	r3, r3
 8014db4:	4413      	add	r3, r2
 8014db6:	b29b      	uxth	r3, r3
 8014db8:	3b01      	subs	r3, #1
 8014dba:	b29b      	uxth	r3, r3
 8014dbc:	b21b      	sxth	r3, r3
 8014dbe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1;
 8014dc2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8014dc6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = a.y1 + corner_size - 1;
 8014dca:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8014dce:	b29a      	uxth	r2, r3
 8014dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	4413      	add	r3, r2
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	3b01      	subs	r3, #1
 8014ddc:	b29b      	uxth	r3, r3
 8014dde:	b21b      	sxth	r3, r3
 8014de0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014de4:	f107 0308 	add.w	r3, r7, #8
 8014de8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014dec:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014df0:	681a      	ldr	r2, [r3, #0]
 8014df2:	f006 f865 	bl	801aec0 <_lv_area_intersect>
 8014df6:	4603      	mov	r3, r0
 8014df8:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014dfc:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	f000 80b8 	beq.w	8014f76 <draw_shadow+0xcd0>
 8014e06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014e0a:	b21a      	sxth	r2, r3
 8014e0c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014e10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014e14:	4618      	mov	r0, r3
 8014e16:	f006 fa37 	bl	801b288 <_lv_area_is_in>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	f083 0301 	eor.w	r3, r3, #1
 8014e20:	b2db      	uxtb	r3, r3
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	f000 80a7 	beq.w	8014f76 <draw_shadow+0xcd0>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y2 > h_half) ca.y2 = h_half;
 8014e28:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014e2c:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8014e30:	429a      	cmp	r2, r3
 8014e32:	da03      	bge.n	8014e3c <draw_shadow+0xb96>
 8014e34:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8014e38:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        if(ca.x2 > w_half) ca.x2 = w_half;
 8014e3c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8014e40:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8014e44:	429a      	cmp	r2, r3
 8014e46:	da03      	bge.n	8014e50 <draw_shadow+0xbaa>
 8014e48:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8014e4c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

        lv_coord_t h = lv_area_get_height(&ca);
 8014e50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7fe fa1a 	bl	801328e <lv_area_get_height>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        lv_coord_t w = lv_area_get_width(&ca);
 8014e60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7fe f9fb 	bl	8013260 <lv_area_get_width>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        if(w > 0) {
 8014e70:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	dd7e      	ble.n	8014f76 <draw_shadow+0xcd0>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8014e78:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014e82:	1ad3      	subs	r3, r2, r3
 8014e84:	461a      	mov	r2, r3
 8014e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014e8a:	4413      	add	r3, r2
 8014e8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8014e90:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8014e94:	461a      	mov	r2, r3
 8014e96:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8014e9a:	1ad3      	subs	r3, r2, r3
 8014e9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014ea0:	fb02 f303 	mul.w	r3, r2, r3
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014eaa:	4413      	add	r3, r2
 8014eac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014eb0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014eb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014eb8:	4611      	mov	r1, r2
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7fe f9c2 	bl	8013244 <lv_area_copy>
            fa.y2 = fa.y1;
 8014ec0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8014ec4:	87fb      	strh	r3, [r7, #62]	; 0x3e

            for(y = 0; y < h; y++) {
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014ecc:	e04d      	b.n	8014f6a <draw_shadow+0xcc4>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014ece:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014ed8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014edc:	f007 fe9c 	bl	801cc18 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014ee0:	f9b7 1038 	ldrsh.w	r1, [r7, #56]	; 0x38
 8014ee4:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8014ee8:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8014eec:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014ef0:	f7fc fe2a 	bl	8011b48 <lv_draw_mask_apply>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014efa:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014efe:	2b01      	cmp	r3, #1
 8014f00:	d102      	bne.n	8014f08 <draw_shadow+0xc62>
 8014f02:	2302      	movs	r3, #2
 8014f04:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8014f08:	1d3b      	adds	r3, r7, #4
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014f10:	1d3a      	adds	r2, r7, #4
 8014f12:	6812      	ldr	r2, [r2, #0]
 8014f14:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8014f18:	f107 0008 	add.w	r0, r7, #8
 8014f1c:	9302      	str	r3, [sp, #8]
 8014f1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014f22:	9301      	str	r3, [sp, #4]
 8014f24:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014f28:	9300      	str	r3, [sp, #0]
 8014f2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014f2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014f30:	6800      	ldr	r0, [r0, #0]
 8014f32:	f7f7 fbdb 	bl	800c6ec <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1++;
 8014f36:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	3301      	adds	r3, #1
 8014f3e:	b29b      	uxth	r3, r3
 8014f40:	b21b      	sxth	r3, r3
 8014f42:	877b      	strh	r3, [r7, #58]	; 0x3a
                fa.y2++;
 8014f44:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8014f48:	b29b      	uxth	r3, r3
 8014f4a:	3301      	adds	r3, #1
 8014f4c:	b29b      	uxth	r3, r3
 8014f4e:	b21b      	sxth	r3, r3
 8014f50:	87fb      	strh	r3, [r7, #62]	; 0x3e
                sh_buf_tmp += corner_size;
 8014f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014f56:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014f5a:	4413      	add	r3, r2
 8014f5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 8014f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014f64:	3301      	adds	r3, #1
 8014f66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014f6a:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8014f6e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014f72:	429a      	cmp	r2, r3
 8014f74:	dbab      	blt.n	8014ece <draw_shadow+0xc28>
            }
        }
    }

    /*Draw the bottom left corner*/
    a.x1 = sh_area.x1;
 8014f76:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8014f7a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = a.x1 + corner_size - 1;
 8014f7e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014f82:	b29a      	uxth	r2, r3
 8014f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	4413      	add	r3, r2
 8014f8c:	b29b      	uxth	r3, r3
 8014f8e:	3b01      	subs	r3, #1
 8014f90:	b29b      	uxth	r3, r3
 8014f92:	b21b      	sxth	r3, r3
 8014f94:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 8014f98:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014f9c:	b29a      	uxth	r2, r3
 8014f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014fa2:	b29b      	uxth	r3, r3
 8014fa4:	1ad3      	subs	r3, r2, r3
 8014fa6:	b29b      	uxth	r3, r3
 8014fa8:	3301      	adds	r3, #1
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	b21b      	sxth	r3, r3
 8014fae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2;
 8014fb2:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014fb6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014fba:	f107 0308 	add.w	r3, r7, #8
 8014fbe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014fc2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014fc6:	681a      	ldr	r2, [r3, #0]
 8014fc8:	f005 ff7a 	bl	801aec0 <_lv_area_intersect>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014fd2:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	f000 80bb 	beq.w	8015152 <draw_shadow+0xeac>
 8014fdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014fe0:	b21a      	sxth	r2, r3
 8014fe2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014fe6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014fea:	4618      	mov	r0, r3
 8014fec:	f006 f94c 	bl	801b288 <_lv_area_is_in>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	f083 0301 	eor.w	r3, r3, #1
 8014ff6:	b2db      	uxtb	r3, r3
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	f000 80aa 	beq.w	8015152 <draw_shadow+0xeac>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 8014ffe:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8015002:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8015006:	429a      	cmp	r2, r3
 8015008:	db06      	blt.n	8015018 <draw_shadow+0xd72>
 801500a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 801500e:	3301      	adds	r3, #1
 8015010:	b29b      	uxth	r3, r3
 8015012:	b21b      	sxth	r3, r3
 8015014:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        if(ca.x2 > w_half) ca.x2 = w_half;
 8015018:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801501c:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8015020:	429a      	cmp	r2, r3
 8015022:	da03      	bge.n	801502c <draw_shadow+0xd86>
 8015024:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8015028:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        lv_coord_t h = lv_area_get_height(&ca);
 801502c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015030:	4618      	mov	r0, r3
 8015032:	f7fe f92c 	bl	801328e <lv_area_get_height>
 8015036:	4603      	mov	r3, r0
 8015038:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        lv_coord_t w = lv_area_get_width(&ca);
 801503c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015040:	4618      	mov	r0, r3
 8015042:	f7fe f90d 	bl	8013260 <lv_area_get_width>
 8015046:	4603      	mov	r3, r0
 8015048:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8

        if(w > 0) {
 801504c:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 8015050:	2b00      	cmp	r3, #0
 8015052:	dd7e      	ble.n	8015152 <draw_shadow+0xeac>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8015054:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8015058:	461a      	mov	r2, r3
 801505a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801505e:	1ad3      	subs	r3, r2, r3
 8015060:	461a      	mov	r2, r3
 8015062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015066:	4413      	add	r3, r2
 8015068:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 801506c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8015070:	461a      	mov	r2, r3
 8015072:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8015076:	1ad3      	subs	r3, r2, r3
 8015078:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801507c:	fb02 f303 	mul.w	r3, r2, r3
 8015080:	461a      	mov	r2, r3
 8015082:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015086:	4413      	add	r3, r2
 8015088:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 801508c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015094:	4611      	mov	r1, r2
 8015096:	4618      	mov	r0, r3
 8015098:	f7fe f8d4 	bl	8013244 <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 801509c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80150a0:	867b      	strh	r3, [r7, #50]	; 0x32

            for(y = 0; y < h; y++) {
 80150a2:	2300      	movs	r3, #0
 80150a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80150a8:	e04d      	b.n	8015146 <draw_shadow+0xea0>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 80150aa:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 80150ae:	461a      	mov	r2, r3
 80150b0:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80150b4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80150b8:	f007 fdae 	bl	801cc18 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80150bc:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 80150c0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80150c4:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 80150c8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80150cc:	f7fc fd3c 	bl	8011b48 <lv_draw_mask_apply>
 80150d0:	4603      	mov	r3, r0
 80150d2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80150d6:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80150da:	2b01      	cmp	r3, #1
 80150dc:	d102      	bne.n	80150e4 <draw_shadow+0xe3e>
 80150de:	2302      	movs	r3, #2
 80150e0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80150e4:	1d3b      	adds	r3, r7, #4
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80150ec:	1d3a      	adds	r2, r7, #4
 80150ee:	6812      	ldr	r2, [r2, #0]
 80150f0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80150f4:	f107 0008 	add.w	r0, r7, #8
 80150f8:	9302      	str	r3, [sp, #8]
 80150fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80150fe:	9301      	str	r3, [sp, #4]
 8015100:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8015104:	9300      	str	r3, [sp, #0]
 8015106:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801510a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801510c:	6800      	ldr	r0, [r0, #0]
 801510e:	f7f7 faed 	bl	800c6ec <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1--;
 8015112:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015116:	b29b      	uxth	r3, r3
 8015118:	3b01      	subs	r3, #1
 801511a:	b29b      	uxth	r3, r3
 801511c:	b21b      	sxth	r3, r3
 801511e:	867b      	strh	r3, [r7, #50]	; 0x32
                fa.y2--;
 8015120:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015124:	b29b      	uxth	r3, r3
 8015126:	3b01      	subs	r3, #1
 8015128:	b29b      	uxth	r3, r3
 801512a:	b21b      	sxth	r3, r3
 801512c:	86fb      	strh	r3, [r7, #54]	; 0x36
                sh_buf_tmp += corner_size;
 801512e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015132:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8015136:	4413      	add	r3, r2
 8015138:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 801513c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015140:	3301      	adds	r3, #1
 8015142:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015146:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	; 0xba
 801514a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801514e:	429a      	cmp	r2, r3
 8015150:	dbab      	blt.n	80150aa <draw_shadow+0xe04>
            }
        }
    }

    /*Fill the left side*/
    a.x1 = sh_area.x1;
 8015152:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8015156:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = a.x1 + corner_size - 1;
 801515a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801515e:	b29a      	uxth	r2, r3
 8015160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015164:	b29b      	uxth	r3, r3
 8015166:	4413      	add	r3, r2
 8015168:	b29b      	uxth	r3, r3
 801516a:	3b01      	subs	r3, #1
 801516c:	b29b      	uxth	r3, r3
 801516e:	b21b      	sxth	r3, r3
 8015170:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1 + corner_size;
 8015174:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8015178:	b29a      	uxth	r2, r3
 801517a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801517e:	b29b      	uxth	r3, r3
 8015180:	4413      	add	r3, r2
 8015182:	b29b      	uxth	r3, r3
 8015184:	b21b      	sxth	r3, r3
 8015186:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2 - corner_size;
 801518a:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 801518e:	b29a      	uxth	r2, r3
 8015190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015194:	b29b      	uxth	r3, r3
 8015196:	1ad3      	subs	r3, r2, r3
 8015198:	b29b      	uxth	r3, r3
 801519a:	b21b      	sxth	r3, r3
 801519c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 80151a0:	f107 0308 	add.w	r3, r7, #8
 80151a4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80151a8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80151ac:	681a      	ldr	r2, [r3, #0]
 80151ae:	f005 fe87 	bl	801aec0 <_lv_area_intersect>
 80151b2:	4603      	mov	r3, r0
 80151b4:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80151b8:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80151bc:	2b00      	cmp	r3, #0
 80151be:	f000 80b7 	beq.w	8015330 <draw_shadow+0x108a>
 80151c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80151c6:	b21a      	sxth	r2, r3
 80151c8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80151cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80151d0:	4618      	mov	r0, r3
 80151d2:	f006 f859 	bl	801b288 <_lv_area_is_in>
 80151d6:	4603      	mov	r3, r0
 80151d8:	f083 0301 	eor.w	r3, r3, #1
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	2b00      	cmp	r3, #0
 80151e0:	f000 80a6 	beq.w	8015330 <draw_shadow+0x108a>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
 80151e4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d00c      	beq.n	8015206 <draw_shadow+0xf60>
 80151ec:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 80151f0:	f107 030c 	add.w	r3, r7, #12
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151fa:	4293      	cmp	r3, r2
 80151fc:	bfa8      	it	ge
 80151fe:	4613      	movge	r3, r2
 8015200:	b21b      	sxth	r3, r3
 8015202:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        /*Draw vertical lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 8015206:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801520a:	4618      	mov	r0, r3
 801520c:	f7fe f828 	bl	8013260 <lv_area_get_width>
 8015210:	4603      	mov	r3, r0
 8015212:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        if(w > 0) {
 8015216:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 801521a:	2b00      	cmp	r3, #0
 801521c:	f340 8088 	ble.w	8015330 <draw_shadow+0x108a>
            lv_coord_t h = lv_area_get_height(&ca);
 8015220:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015224:	4618      	mov	r0, r3
 8015226:	f7fe f832 	bl	801328e <lv_area_get_height>
 801522a:	4603      	mov	r3, r0
 801522c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
            /*The last line of the shadow is repeated on the side*/
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 8015230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015234:	3b01      	subs	r3, #1
 8015236:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801523a:	fb02 f303 	mul.w	r3, r2, r3
 801523e:	461a      	mov	r2, r3
 8015240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015244:	4413      	add	r3, r2
 8015246:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += ca.x1 - a.x1;
 801524a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801524e:	461a      	mov	r2, r3
 8015250:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8015254:	1ad3      	subs	r3, r2, r3
 8015256:	461a      	mov	r2, r3
 8015258:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801525c:	4413      	add	r3, r2
 801525e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8015262:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801526a:	4611      	mov	r1, r2
 801526c:	4618      	mov	r0, r3
 801526e:	f7fd ffe9 	bl	8013244 <lv_area_copy>
            fa.y2 = fa.y1;
 8015272:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015276:	85fb      	strh	r3, [r7, #46]	; 0x2e
            for(y = 0; y < h; y++) {
 8015278:	2300      	movs	r3, #0
 801527a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801527e:	e051      	b.n	8015324 <draw_shadow+0x107e>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8015280:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8015284:	461a      	mov	r2, r3
 8015286:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801528a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801528e:	f007 fcc3 	bl	801cc18 <_lv_memcpy>
                if(simple_mode) {
 8015292:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8015296:	2b00      	cmp	r3, #0
 8015298:	d003      	beq.n	80152a2 <draw_shadow+0xffc>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 801529a:	2302      	movs	r3, #2
 801529c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 80152a0:	e013      	b.n	80152ca <draw_shadow+0x1024>
                }
                else {
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80152a2:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80152a6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80152aa:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80152ae:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80152b2:	f7fc fc49 	bl	8011b48 <lv_draw_mask_apply>
 80152b6:	4603      	mov	r3, r0
 80152b8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80152bc:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80152c0:	2b01      	cmp	r3, #1
 80152c2:	d102      	bne.n	80152ca <draw_shadow+0x1024>
 80152c4:	2302      	movs	r3, #2
 80152c6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                }

                _lv_blend_fill(clip, &fa,
 80152ca:	1d3b      	adds	r3, r7, #4
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80152d2:	1d3a      	adds	r2, r7, #4
 80152d4:	6812      	ldr	r2, [r2, #0]
 80152d6:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 80152da:	1d3a      	adds	r2, r7, #4
 80152dc:	6812      	ldr	r2, [r2, #0]
 80152de:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80152e2:	f107 0008 	add.w	r0, r7, #8
 80152e6:	9102      	str	r1, [sp, #8]
 80152e8:	9301      	str	r3, [sp, #4]
 80152ea:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80152ee:	9300      	str	r3, [sp, #0]
 80152f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80152f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80152f6:	4621      	mov	r1, r4
 80152f8:	6800      	ldr	r0, [r0, #0]
 80152fa:	f7f7 f9f7 	bl	800c6ec <_lv_blend_fill>
                               dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->shadow_blend_mode);
                fa.y1++;
 80152fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015302:	b29b      	uxth	r3, r3
 8015304:	3301      	adds	r3, #1
 8015306:	b29b      	uxth	r3, r3
 8015308:	b21b      	sxth	r3, r3
 801530a:	857b      	strh	r3, [r7, #42]	; 0x2a
                fa.y2++;
 801530c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8015310:	b29b      	uxth	r3, r3
 8015312:	3301      	adds	r3, #1
 8015314:	b29b      	uxth	r3, r3
 8015316:	b21b      	sxth	r3, r3
 8015318:	85fb      	strh	r3, [r7, #46]	; 0x2e
            for(y = 0; y < h; y++) {
 801531a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801531e:	3301      	adds	r3, #1
 8015320:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015324:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 8015328:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801532c:	429a      	cmp	r2, r3
 801532e:	dba7      	blt.n	8015280 <draw_shadow+0xfda>
            }
        }
    }

    /*Fill the top side*/
    a.x1 = sh_area.x1 + corner_size;
 8015330:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8015334:	b29a      	uxth	r2, r3
 8015336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801533a:	b29b      	uxth	r3, r3
 801533c:	4413      	add	r3, r2
 801533e:	b29b      	uxth	r3, r3
 8015340:	b21b      	sxth	r3, r3
 8015342:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = sh_area.x2 - corner_size;
 8015346:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 801534a:	b29a      	uxth	r2, r3
 801534c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015350:	b29b      	uxth	r3, r3
 8015352:	1ad3      	subs	r3, r2, r3
 8015354:	b29b      	uxth	r3, r3
 8015356:	b21b      	sxth	r3, r3
 8015358:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1;
 801535c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8015360:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y1 + corner_size - 1;
 8015364:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8015368:	b29a      	uxth	r2, r3
 801536a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801536e:	b29b      	uxth	r3, r3
 8015370:	4413      	add	r3, r2
 8015372:	b29b      	uxth	r3, r3
 8015374:	3b01      	subs	r3, #1
 8015376:	b29b      	uxth	r3, r3
 8015378:	b21b      	sxth	r3, r3
 801537a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 801537e:	f107 0308 	add.w	r3, r7, #8
 8015382:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8015386:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801538a:	681a      	ldr	r2, [r3, #0]
 801538c:	f005 fd98 	bl	801aec0 <_lv_area_intersect>
 8015390:	4603      	mov	r3, r0
 8015392:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8015396:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 801539a:	2b00      	cmp	r3, #0
 801539c:	f000 80cd 	beq.w	801553a <draw_shadow+0x1294>
 80153a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80153a4:	b21a      	sxth	r2, r3
 80153a6:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80153aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80153ae:	4618      	mov	r0, r3
 80153b0:	f005 ff6a 	bl	801b288 <_lv_area_is_in>
 80153b4:	4603      	mov	r3, r0
 80153b6:	f083 0301 	eor.w	r3, r3, #1
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	2b00      	cmp	r3, #0
 80153be:	f000 80bc 	beq.w	801553a <draw_shadow+0x1294>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
 80153c2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d00c      	beq.n	80153e4 <draw_shadow+0x113e>
 80153ca:	f107 030c 	add.w	r3, r7, #12
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80153d4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80153d8:	4293      	cmp	r3, r2
 80153da:	bfa8      	it	ge
 80153dc:	4613      	movge	r3, r2
 80153de:	b21b      	sxth	r3, r3
 80153e0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 80153e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80153e8:	4618      	mov	r0, r3
 80153ea:	f7fd ff39 	bl	8013260 <lv_area_get_width>
 80153ee:	4603      	mov	r3, r0
 80153f0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
        lv_coord_t h = lv_area_get_height(&ca);
 80153f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7fd ff48 	bl	801328e <lv_area_get_height>
 80153fe:	4603      	mov	r3, r0
 8015400:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        sh_buf_tmp = sh_buf + corner_size - 1;
 8015404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015408:	3b01      	subs	r3, #1
 801540a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801540e:	4413      	add	r3, r2
 8015410:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8015414:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8015418:	461a      	mov	r2, r3
 801541a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801541e:	1ad3      	subs	r3, r2, r3
 8015420:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015424:	fb02 f303 	mul.w	r3, r2, r3
 8015428:	461a      	mov	r2, r3
 801542a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801542e:	4413      	add	r3, r2
 8015430:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        lv_area_t fa;
        lv_area_copy(&fa, &ca);
 8015434:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015438:	f107 0320 	add.w	r3, r7, #32
 801543c:	4611      	mov	r1, r2
 801543e:	4618      	mov	r0, r3
 8015440:	f7fd ff00 	bl	8013244 <lv_area_copy>
        fa.y2 = fa.y1;
 8015444:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015448:	84fb      	strh	r3, [r7, #38]	; 0x26
        mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801544a:	2301      	movs	r3, #1
 801544c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
        for(y = 0; y < h; y++) {
 8015450:	2300      	movs	r3, #0
 8015452:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015456:	e06a      	b.n	801552e <draw_shadow+0x1288>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 8015458:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 8015462:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8015466:	2bff      	cmp	r3, #255	; 0xff
 8015468:	d103      	bne.n	8015472 <draw_shadow+0x11cc>
 801546a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801546e:	2bff      	cmp	r3, #255	; 0xff
 8015470:	d008      	beq.n	8015484 <draw_shadow+0x11de>
 8015472:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015476:	f897 20fb 	ldrb.w	r2, [r7, #251]	; 0xfb
 801547a:	fb02 f303 	mul.w	r3, r2, r3
 801547e:	121b      	asrs	r3, r3, #8
 8015480:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

            _lv_memset(mask_buf, opa_tmp, w);
 8015484:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 8015488:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 801548c:	4619      	mov	r1, r3
 801548e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015492:	f007 fdd9 	bl	801d048 <_lv_memset>

            if(simple_mode) {
 8015496:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 801549a:	2b00      	cmp	r3, #0
 801549c:	d003      	beq.n	80154a6 <draw_shadow+0x1200>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
 801549e:	2302      	movs	r3, #2
 80154a0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 80154a4:	e013      	b.n	80154ce <draw_shadow+0x1228>
            }
            else {
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80154a6:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80154aa:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80154ae:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 80154b2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80154b6:	f7fc fb47 	bl	8011b48 <lv_draw_mask_apply>
 80154ba:	4603      	mov	r3, r0
 80154bc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80154c0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80154c4:	2b01      	cmp	r3, #1
 80154c6:	d102      	bne.n	80154ce <draw_shadow+0x1228>
 80154c8:	2302      	movs	r3, #2
 80154ca:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            }

            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80154ce:	1d3b      	adds	r3, r7, #4
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80154d6:	1d3a      	adds	r2, r7, #4
 80154d8:	6812      	ldr	r2, [r2, #0]
 80154da:	f107 0120 	add.w	r1, r7, #32
 80154de:	f107 0008 	add.w	r0, r7, #8
 80154e2:	9302      	str	r3, [sp, #8]
 80154e4:	23ff      	movs	r3, #255	; 0xff
 80154e6:	9301      	str	r3, [sp, #4]
 80154e8:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80154ec:	9300      	str	r3, [sp, #0]
 80154ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80154f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80154f4:	6800      	ldr	r0, [r0, #0]
 80154f6:	f7f7 f8f9 	bl	800c6ec <_lv_blend_fill>
                           mask_res, LV_OPA_COVER, dsc->shadow_blend_mode);
            fa.y1++;
 80154fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80154fe:	b29b      	uxth	r3, r3
 8015500:	3301      	adds	r3, #1
 8015502:	b29b      	uxth	r3, r3
 8015504:	b21b      	sxth	r3, r3
 8015506:	847b      	strh	r3, [r7, #34]	; 0x22
            fa.y2++;
 8015508:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801550c:	b29b      	uxth	r3, r3
 801550e:	3301      	adds	r3, #1
 8015510:	b29b      	uxth	r3, r3
 8015512:	b21b      	sxth	r3, r3
 8015514:	84fb      	strh	r3, [r7, #38]	; 0x26
            sh_buf_tmp += corner_size;
 8015516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801551a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801551e:	4413      	add	r3, r2
 8015520:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        for(y = 0; y < h; y++) {
 8015524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015528:	3301      	adds	r3, #1
 801552a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801552e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8015532:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8015536:	429a      	cmp	r2, r3
 8015538:	db8e      	blt.n	8015458 <draw_shadow+0x11b2>
        }
    }

    /*Fill the bottom side*/
    a.x1 = sh_area.x1 + corner_size;
 801553a:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801553e:	b29a      	uxth	r2, r3
 8015540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015544:	b29b      	uxth	r3, r3
 8015546:	4413      	add	r3, r2
 8015548:	b29b      	uxth	r3, r3
 801554a:	b21b      	sxth	r3, r3
 801554c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = sh_area.x2 - corner_size;
 8015550:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8015554:	b29a      	uxth	r2, r3
 8015556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801555a:	b29b      	uxth	r3, r3
 801555c:	1ad3      	subs	r3, r2, r3
 801555e:	b29b      	uxth	r3, r3
 8015560:	b21b      	sxth	r3, r3
 8015562:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 8015566:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 801556a:	b29a      	uxth	r2, r3
 801556c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015570:	b29b      	uxth	r3, r3
 8015572:	1ad3      	subs	r3, r2, r3
 8015574:	b29b      	uxth	r3, r3
 8015576:	3301      	adds	r3, #1
 8015578:	b29b      	uxth	r3, r3
 801557a:	b21b      	sxth	r3, r3
 801557c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2;
 8015580:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8015584:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8015588:	f107 0308 	add.w	r3, r7, #8
 801558c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8015590:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8015594:	681a      	ldr	r2, [r3, #0]
 8015596:	f005 fc93 	bl	801aec0 <_lv_area_intersect>
 801559a:	4603      	mov	r3, r0
 801559c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80155a0:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	f000 80da 	beq.w	801575e <draw_shadow+0x14b8>
 80155aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80155ae:	b21a      	sxth	r2, r3
 80155b0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80155b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80155b8:	4618      	mov	r0, r3
 80155ba:	f005 fe65 	bl	801b288 <_lv_area_is_in>
 80155be:	4603      	mov	r3, r0
 80155c0:	f083 0301 	eor.w	r3, r3, #1
 80155c4:	b2db      	uxtb	r3, r3
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	f000 80c9 	beq.w	801575e <draw_shadow+0x14b8>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
 80155cc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d00c      	beq.n	80155ee <draw_shadow+0x1348>
 80155d4:	f107 030c 	add.w	r3, r7, #12
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80155de:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80155e2:	4293      	cmp	r3, r2
 80155e4:	bfb8      	it	lt
 80155e6:	4613      	movlt	r3, r2
 80155e8:	b21b      	sxth	r3, r3
 80155ea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 80155ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80155f2:	4618      	mov	r0, r3
 80155f4:	f7fd fe34 	bl	8013260 <lv_area_get_width>
 80155f8:	4603      	mov	r3, r0
 80155fa:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        lv_coord_t h = lv_area_get_height(&ca);
 80155fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015602:	4618      	mov	r0, r3
 8015604:	f7fd fe43 	bl	801328e <lv_area_get_height>
 8015608:	4603      	mov	r3, r0
 801560a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        sh_buf_tmp = sh_buf + corner_size - 1;
 801560e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015612:	3b01      	subs	r3, #1
 8015614:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8015618:	4413      	add	r3, r2
 801561a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 801561e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8015622:	461a      	mov	r2, r3
 8015624:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8015628:	1ad3      	subs	r3, r2, r3
 801562a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801562e:	fb02 f303 	mul.w	r3, r2, r3
 8015632:	461a      	mov	r2, r3
 8015634:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015638:	4413      	add	r3, r2
 801563a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        lv_area_t fa;
        lv_area_copy(&fa, &ca);
 801563e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015642:	f107 0318 	add.w	r3, r7, #24
 8015646:	4611      	mov	r1, r2
 8015648:	4618      	mov	r0, r3
 801564a:	f7fd fdfb 	bl	8013244 <lv_area_copy>
        fa.y1 = fa.y2;
 801564e:	f107 0318 	add.w	r3, r7, #24
 8015652:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015656:	f107 0318 	add.w	r3, r7, #24
 801565a:	805a      	strh	r2, [r3, #2]
        for(y = 0; y < h; y++) {
 801565c:	2300      	movs	r3, #0
 801565e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015662:	e076      	b.n	8015752 <draw_shadow+0x14ac>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 8015664:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015668:	781b      	ldrb	r3, [r3, #0]
 801566a:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 801566e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8015672:	2bff      	cmp	r3, #255	; 0xff
 8015674:	d103      	bne.n	801567e <draw_shadow+0x13d8>
 8015676:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801567a:	2bff      	cmp	r3, #255	; 0xff
 801567c:	d008      	beq.n	8015690 <draw_shadow+0x13ea>
 801567e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015682:	f897 20fa 	ldrb.w	r2, [r7, #250]	; 0xfa
 8015686:	fb02 f303 	mul.w	r3, r2, r3
 801568a:	121b      	asrs	r3, r3, #8
 801568c:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa

            _lv_memset(mask_buf, opa_tmp, w);
 8015690:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8015694:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8015698:	4619      	mov	r1, r3
 801569a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801569e:	f007 fcd3 	bl	801d048 <_lv_memset>
            if(simple_mode) {
 80156a2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d003      	beq.n	80156b2 <draw_shadow+0x140c>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
 80156aa:	2302      	movs	r3, #2
 80156ac:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 80156b0:	e017      	b.n	80156e2 <draw_shadow+0x143c>
            }
            else {
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80156b2:	f107 0318 	add.w	r3, r7, #24
 80156b6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80156ba:	f107 0318 	add.w	r3, r7, #24
 80156be:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80156c2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80156c6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80156ca:	f7fc fa3d 	bl	8011b48 <lv_draw_mask_apply>
 80156ce:	4603      	mov	r3, r0
 80156d0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80156d4:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80156d8:	2b01      	cmp	r3, #1
 80156da:	d102      	bne.n	80156e2 <draw_shadow+0x143c>
 80156dc:	2302      	movs	r3, #2
 80156de:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            }

            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80156e2:	1d3b      	adds	r3, r7, #4
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80156ea:	1d3a      	adds	r2, r7, #4
 80156ec:	6812      	ldr	r2, [r2, #0]
 80156ee:	f107 0118 	add.w	r1, r7, #24
 80156f2:	f107 0008 	add.w	r0, r7, #8
 80156f6:	9302      	str	r3, [sp, #8]
 80156f8:	23ff      	movs	r3, #255	; 0xff
 80156fa:	9301      	str	r3, [sp, #4]
 80156fc:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8015700:	9300      	str	r3, [sp, #0]
 8015702:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015706:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015708:	6800      	ldr	r0, [r0, #0]
 801570a:	f7f6 ffef 	bl	800c6ec <_lv_blend_fill>
                           mask_res, LV_OPA_COVER, dsc->shadow_blend_mode);
            fa.y1--;
 801570e:	f107 0318 	add.w	r3, r7, #24
 8015712:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015716:	b29b      	uxth	r3, r3
 8015718:	3b01      	subs	r3, #1
 801571a:	b29b      	uxth	r3, r3
 801571c:	b21a      	sxth	r2, r3
 801571e:	f107 0318 	add.w	r3, r7, #24
 8015722:	805a      	strh	r2, [r3, #2]
            fa.y2--;
 8015724:	f107 0318 	add.w	r3, r7, #24
 8015728:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801572c:	b29b      	uxth	r3, r3
 801572e:	3b01      	subs	r3, #1
 8015730:	b29b      	uxth	r3, r3
 8015732:	b21a      	sxth	r2, r3
 8015734:	f107 0318 	add.w	r3, r7, #24
 8015738:	80da      	strh	r2, [r3, #6]
            sh_buf_tmp += corner_size;
 801573a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801573e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8015742:	4413      	add	r3, r2
 8015744:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        for(y = 0; y < h; y++) {
 8015748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801574c:	3301      	adds	r3, #1
 801574e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015752:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8015756:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801575a:	429a      	cmp	r2, r3
 801575c:	db82      	blt.n	8015664 <draw_shadow+0x13be>
        }
    }

    /*Draw the middle area*/
    a.x1 = sh_area.x1 + corner_size;
 801575e:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8015762:	b29a      	uxth	r2, r3
 8015764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015768:	b29b      	uxth	r3, r3
 801576a:	4413      	add	r3, r2
 801576c:	b29b      	uxth	r3, r3
 801576e:	b21b      	sxth	r3, r3
 8015770:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = sh_area.x2 - corner_size;
 8015774:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8015778:	b29a      	uxth	r2, r3
 801577a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801577e:	b29b      	uxth	r3, r3
 8015780:	1ad3      	subs	r3, r2, r3
 8015782:	b29b      	uxth	r3, r3
 8015784:	b21b      	sxth	r3, r3
 8015786:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1 + corner_size;
 801578a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801578e:	b29a      	uxth	r2, r3
 8015790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015794:	b29b      	uxth	r3, r3
 8015796:	4413      	add	r3, r2
 8015798:	b29b      	uxth	r3, r3
 801579a:	b21b      	sxth	r3, r3
 801579c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2 - corner_size;
 80157a0:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80157a4:	b29a      	uxth	r2, r3
 80157a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80157aa:	b29b      	uxth	r3, r3
 80157ac:	1ad3      	subs	r3, r2, r3
 80157ae:	b29b      	uxth	r3, r3
 80157b0:	b21b      	sxth	r3, r3
 80157b2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 80157b6:	f107 0308 	add.w	r3, r7, #8
 80157ba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80157be:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80157c2:	681a      	ldr	r2, [r3, #0]
 80157c4:	f005 fb7c 	bl	801aec0 <_lv_area_intersect>
 80157c8:	4603      	mov	r3, r0
 80157ca:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80157ce:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	f000 8095 	beq.w	8015902 <draw_shadow+0x165c>
 80157d8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80157dc:	f083 0301 	eor.w	r3, r3, #1
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	f000 808d 	beq.w	8015902 <draw_shadow+0x165c>
 80157e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80157ec:	b21a      	sxth	r2, r3
 80157ee:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80157f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80157f6:	4618      	mov	r0, r3
 80157f8:	f005 fd46 	bl	801b288 <_lv_area_is_in>
 80157fc:	4603      	mov	r3, r0
 80157fe:	f083 0301 	eor.w	r3, r3, #1
 8015802:	b2db      	uxtb	r3, r3
 8015804:	2b00      	cmp	r3, #0
 8015806:	d07c      	beq.n	8015902 <draw_shadow+0x165c>
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 8015808:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801580c:	4618      	mov	r0, r3
 801580e:	f7fd fd27 	bl	8013260 <lv_area_get_width>
 8015812:	4603      	mov	r3, r0
 8015814:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        lv_coord_t h = lv_area_get_height(&ca);
 8015818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801581c:	4618      	mov	r0, r3
 801581e:	f7fd fd36 	bl	801328e <lv_area_get_height>
 8015822:	4603      	mov	r3, r0
 8015824:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8

        lv_area_t fa;
        lv_area_copy(&fa, &ca);
 8015828:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801582c:	f107 0310 	add.w	r3, r7, #16
 8015830:	4611      	mov	r1, r2
 8015832:	4618      	mov	r0, r3
 8015834:	f7fd fd06 	bl	8013244 <lv_area_copy>
        fa.y2 = fa.y1;
 8015838:	f107 0310 	add.w	r3, r7, #16
 801583c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015840:	f107 0310 	add.w	r3, r7, #16
 8015844:	80da      	strh	r2, [r3, #6]
        for(y = 0; y < h; y++) {
 8015846:	2300      	movs	r3, #0
 8015848:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801584c:	e053      	b.n	80158f6 <draw_shadow+0x1650>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
 801584e:	1d3b      	adds	r3, r7, #4
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015856:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801585a:	4619      	mov	r1, r3
 801585c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015860:	f007 fbf2 	bl	801d048 <_lv_memset>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8015864:	f107 0310 	add.w	r3, r7, #16
 8015868:	f9b3 1000 	ldrsh.w	r1, [r3]
 801586c:	f107 0310 	add.w	r3, r7, #16
 8015870:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015874:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8015878:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801587c:	f7fc f964 	bl	8011b48 <lv_draw_mask_apply>
 8015880:	4603      	mov	r3, r0
 8015882:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8015886:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 801588a:	2b01      	cmp	r3, #1
 801588c:	d102      	bne.n	8015894 <draw_shadow+0x15ee>
 801588e:	2302      	movs	r3, #2
 8015890:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8015894:	1d3b      	adds	r3, r7, #4
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801589c:	1d3a      	adds	r2, r7, #4
 801589e:	6812      	ldr	r2, [r2, #0]
 80158a0:	f107 0110 	add.w	r1, r7, #16
 80158a4:	f107 0008 	add.w	r0, r7, #8
 80158a8:	9302      	str	r3, [sp, #8]
 80158aa:	23ff      	movs	r3, #255	; 0xff
 80158ac:	9301      	str	r3, [sp, #4]
 80158ae:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80158b2:	9300      	str	r3, [sp, #0]
 80158b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80158b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80158ba:	6800      	ldr	r0, [r0, #0]
 80158bc:	f7f6 ff16 	bl	800c6ec <_lv_blend_fill>
                           mask_res, LV_OPA_COVER, dsc->shadow_blend_mode);
            fa.y1++;
 80158c0:	f107 0310 	add.w	r3, r7, #16
 80158c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80158c8:	b29b      	uxth	r3, r3
 80158ca:	3301      	adds	r3, #1
 80158cc:	b29b      	uxth	r3, r3
 80158ce:	b21a      	sxth	r2, r3
 80158d0:	f107 0310 	add.w	r3, r7, #16
 80158d4:	805a      	strh	r2, [r3, #2]
            fa.y2++;
 80158d6:	f107 0310 	add.w	r3, r7, #16
 80158da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80158de:	b29b      	uxth	r3, r3
 80158e0:	3301      	adds	r3, #1
 80158e2:	b29b      	uxth	r3, r3
 80158e4:	b21a      	sxth	r2, r3
 80158e6:	f107 0310 	add.w	r3, r7, #16
 80158ea:	80da      	strh	r2, [r3, #6]
        for(y = 0; y < h; y++) {
 80158ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80158f0:	3301      	adds	r3, #1
 80158f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80158f6:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 80158fa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80158fe:	429a      	cmp	r2, r3
 8015900:	dba5      	blt.n	801584e <draw_shadow+0x15a8>
        }
    }

    lv_draw_mask_remove_id(mask_rout_id);
 8015902:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8015906:	4618      	mov	r0, r3
 8015908:	f7fc f962 	bl	8011bd0 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 801590c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015910:	f007 f8fc 	bl	801cb0c <_lv_mem_buf_release>
    _lv_mem_buf_release(sh_buf);
 8015914:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8015918:	f007 f8f8 	bl	801cb0c <_lv_mem_buf_release>
 801591c:	e006      	b.n	801592c <draw_shadow+0x1686>
    if(dsc->shadow_width == 0) return;
 801591e:	bf00      	nop
 8015920:	e004      	b.n	801592c <draw_shadow+0x1686>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 8015922:	bf00      	nop
 8015924:	e002      	b.n	801592c <draw_shadow+0x1686>
        return;
 8015926:	bf00      	nop
 8015928:	e000      	b.n	801592c <draw_shadow+0x1686>
    if(is_common == false) return;
 801592a:	bf00      	nop
}
 801592c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8015930:	46bd      	mov	sp, r7
 8015932:	bd90      	pop	{r4, r7, pc}

08015934 <shadow_draw_corner_buf>:
 * @param sw shadow width
 * @param r radius
 */
LV_ATTRIBUTE_FAST_MEM static void shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, lv_coord_t sw,
                                                         lv_coord_t r)
{
 8015934:	b590      	push	{r4, r7, lr}
 8015936:	b09d      	sub	sp, #116	; 0x74
 8015938:	af02      	add	r7, sp, #8
 801593a:	60f8      	str	r0, [r7, #12]
 801593c:	60b9      	str	r1, [r7, #8]
 801593e:	4611      	mov	r1, r2
 8015940:	461a      	mov	r2, r3
 8015942:	460b      	mov	r3, r1
 8015944:	80fb      	strh	r3, [r7, #6]
 8015946:	4613      	mov	r3, r2
 8015948:	80bb      	strh	r3, [r7, #4]
    int32_t sw_ori = sw;
 801594a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801594e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t size = sw_ori  + r;
 8015950:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015956:	4413      	add	r3, r2
 8015958:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t sh_area;
    lv_area_copy(&sh_area, coords);
 801595a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801595e:	68f9      	ldr	r1, [r7, #12]
 8015960:	4618      	mov	r0, r3
 8015962:	f7fd fc6f 	bl	8013244 <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8015966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801596a:	2b00      	cmp	r3, #0
 801596c:	da00      	bge.n	8015970 <shadow_draw_corner_buf+0x3c>
 801596e:	3301      	adds	r3, #1
 8015970:	105b      	asrs	r3, r3, #1
 8015972:	b21b      	sxth	r3, r3
 8015974:	b29a      	uxth	r2, r3
 8015976:	88bb      	ldrh	r3, [r7, #4]
 8015978:	4413      	add	r3, r2
 801597a:	b29a      	uxth	r2, r3
 801597c:	88fb      	ldrh	r3, [r7, #6]
 801597e:	f003 0301 	and.w	r3, r3, #1
 8015982:	2b00      	cmp	r3, #0
 8015984:	bf0c      	ite	eq
 8015986:	2301      	moveq	r3, #1
 8015988:	2300      	movne	r3, #0
 801598a:	b2db      	uxtb	r3, r3
 801598c:	b29b      	uxth	r3, r3
 801598e:	1ad3      	subs	r3, r2, r3
 8015990:	b29b      	uxth	r3, r3
 8015992:	3b01      	subs	r3, #1
 8015994:	b29b      	uxth	r3, r3
 8015996:	b21b      	sxth	r3, r3
 8015998:	86bb      	strh	r3, [r7, #52]	; 0x34
    sh_area.y1 = sw / 2 + 1;
 801599a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	da00      	bge.n	80159a4 <shadow_draw_corner_buf+0x70>
 80159a2:	3301      	adds	r3, #1
 80159a4:	105b      	asrs	r3, r3, #1
 80159a6:	b21b      	sxth	r3, r3
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	3301      	adds	r3, #1
 80159ac:	b29b      	uxth	r3, r3
 80159ae:	b21b      	sxth	r3, r3
 80159b0:	867b      	strh	r3, [r7, #50]	; 0x32

    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 80159b2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80159b6:	b29c      	uxth	r4, r3
 80159b8:	68f8      	ldr	r0, [r7, #12]
 80159ba:	f7fd fc51 	bl	8013260 <lv_area_get_width>
 80159be:	4603      	mov	r3, r0
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	1ae3      	subs	r3, r4, r3
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	b21b      	sxth	r3, r3
 80159c8:	863b      	strh	r3, [r7, #48]	; 0x30
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 80159ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80159ce:	b29c      	uxth	r4, r3
 80159d0:	68f8      	ldr	r0, [r7, #12]
 80159d2:	f7fd fc5c 	bl	801328e <lv_area_get_height>
 80159d6:	4603      	mov	r3, r0
 80159d8:	b29b      	uxth	r3, r3
 80159da:	4423      	add	r3, r4
 80159dc:	b29b      	uxth	r3, r3
 80159de:	b21b      	sxth	r3, r3
 80159e0:	86fb      	strh	r3, [r7, #54]	; 0x36

    lv_draw_mask_radius_param_t mask_param;
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 80159e2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80159e6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80159ea:	f107 0014 	add.w	r0, r7, #20
 80159ee:	2300      	movs	r3, #0
 80159f0:	f7fc fa92 	bl	8011f18 <lv_draw_mask_radius_init>

#if SHADOW_ENHANCE
    /*Set half shadow width width because blur will be repeated*/
    if(sw_ori == 1) sw = 1;
 80159f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159f6:	2b01      	cmp	r3, #1
 80159f8:	d102      	bne.n	8015a00 <shadow_draw_corner_buf+0xcc>
 80159fa:	2301      	movs	r3, #1
 80159fc:	80fb      	strh	r3, [r7, #6]
 80159fe:	e002      	b.n	8015a06 <shadow_draw_corner_buf+0xd2>
    else sw = sw_ori >> 1;
 8015a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a02:	105b      	asrs	r3, r3, #1
 8015a04:	80fb      	strh	r3, [r7, #6]
#endif

    int32_t y;
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 8015a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f006 ffa1 	bl	801c950 <_lv_mem_buf_get>
 8015a0e:	6478      	str	r0, [r7, #68]	; 0x44
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 8015a14:	2300      	movs	r3, #0
 8015a16:	667b      	str	r3, [r7, #100]	; 0x64
 8015a18:	e062      	b.n	8015ae0 <shadow_draw_corner_buf+0x1ac>
        _lv_memset_ff(mask_line, size);
 8015a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a1c:	4619      	mov	r1, r3
 8015a1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a20:	f007 fc1f 	bl	801d262 <_lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 8015a24:	697c      	ldr	r4, [r7, #20]
 8015a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a28:	b21a      	sxth	r2, r3
 8015a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a2c:	b219      	sxth	r1, r3
 8015a2e:	f107 0314 	add.w	r3, r7, #20
 8015a32:	9300      	str	r3, [sp, #0]
 8015a34:	460b      	mov	r3, r1
 8015a36:	2100      	movs	r1, #0
 8015a38:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a3a:	47a0      	blx	r4
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8015a42:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d106      	bne.n	8015a58 <shadow_draw_corner_buf+0x124>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 8015a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a4c:	005b      	lsls	r3, r3, #1
 8015a4e:	4619      	mov	r1, r3
 8015a50:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8015a52:	f007 fb86 	bl	801d162 <_lv_memset_00>
 8015a56:	e03b      	b.n	8015ad0 <shadow_draw_corner_buf+0x19c>
        }
        else {
            int32_t i;
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 8015a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	019a      	lsls	r2, r3, #6
 8015a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a62:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a66:	b29a      	uxth	r2, r3
 8015a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015a6a:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 8015a6c:	2301      	movs	r3, #1
 8015a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015a70:	e02a      	b.n	8015ac8 <shadow_draw_corner_buf+0x194>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 8015a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015a76:	4413      	add	r3, r2
 8015a78:	781a      	ldrb	r2, [r3, #0]
 8015a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a7c:	3b01      	subs	r3, #1
 8015a7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015a80:	440b      	add	r3, r1
 8015a82:	781b      	ldrb	r3, [r3, #0]
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d10d      	bne.n	8015aa4 <shadow_draw_corner_buf+0x170>
 8015a88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015a8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015a8e:	4413      	add	r3, r2
 8015a90:	005b      	lsls	r3, r3, #1
 8015a92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015a94:	441a      	add	r2, r3
 8015a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a98:	005b      	lsls	r3, r3, #1
 8015a9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015a9c:	440b      	add	r3, r1
 8015a9e:	8812      	ldrh	r2, [r2, #0]
 8015aa0:	801a      	strh	r2, [r3, #0]
 8015aa2:	e00e      	b.n	8015ac2 <shadow_draw_corner_buf+0x18e>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8015aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015aa8:	4413      	add	r3, r2
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	019a      	lsls	r2, r3, #6
 8015aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ab2:	fb92 f1f3 	sdiv	r1, r2, r3
 8015ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ab8:	005b      	lsls	r3, r3, #1
 8015aba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015abc:	4413      	add	r3, r2
 8015abe:	b28a      	uxth	r2, r1
 8015ac0:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 8015ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ac4:	3301      	adds	r3, #1
 8015ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015ac8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015acc:	429a      	cmp	r2, r3
 8015ace:	dbd0      	blt.n	8015a72 <shadow_draw_corner_buf+0x13e>
            }
        }

        sh_ups_tmp_buf += size;
 8015ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ad2:	005b      	lsls	r3, r3, #1
 8015ad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015ad6:	4413      	add	r3, r2
 8015ad8:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 8015ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015adc:	3301      	adds	r3, #1
 8015ade:	667b      	str	r3, [r7, #100]	; 0x64
 8015ae0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	db98      	blt.n	8015a1a <shadow_draw_corner_buf+0xe6>
    }
    _lv_mem_buf_release(mask_line);
 8015ae8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015aea:	f007 f80f 	bl	801cb0c <_lv_mem_buf_release>

    if(sw == 1) {
 8015aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d11b      	bne.n	8015b2e <shadow_draw_corner_buf+0x1fa>
        int32_t i;
        lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(i = 0; i < size * size; i++) {
 8015afa:	2300      	movs	r3, #0
 8015afc:	65bb      	str	r3, [r7, #88]	; 0x58
 8015afe:	e00e      	b.n	8015b1e <shadow_draw_corner_buf+0x1ea>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 8015b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b02:	005b      	lsls	r3, r3, #1
 8015b04:	68ba      	ldr	r2, [r7, #8]
 8015b06:	4413      	add	r3, r2
 8015b08:	881b      	ldrh	r3, [r3, #0]
 8015b0a:	099b      	lsrs	r3, r3, #6
 8015b0c:	b299      	uxth	r1, r3
 8015b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015b12:	4413      	add	r3, r2
 8015b14:	b2ca      	uxtb	r2, r1
 8015b16:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < size * size; i++) {
 8015b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b1a:	3301      	adds	r3, #1
 8015b1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8015b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015b22:	fb02 f303 	mul.w	r3, r2, r3
 8015b26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	dbe9      	blt.n	8015b00 <shadow_draw_corner_buf+0x1cc>
        }
        return;
 8015b2c:	e079      	b.n	8015c22 <shadow_draw_corner_buf+0x2ee>
    }

    shadow_blur_corner(size, sw, sh_buf);
 8015b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b30:	b21b      	sxth	r3, r3
 8015b32:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8015b36:	68ba      	ldr	r2, [r7, #8]
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f000 f875 	bl	8015c28 <shadow_blur_corner>
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
    for(x = 0; x < size * size; x++) {
        res_buf[x] = sh_buf[x];
    }
#else
    sw += sw_ori & 1;
 8015b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b40:	b29b      	uxth	r3, r3
 8015b42:	f003 0301 	and.w	r3, r3, #1
 8015b46:	b29a      	uxth	r2, r3
 8015b48:	88fb      	ldrh	r3, [r7, #6]
 8015b4a:	4413      	add	r3, r2
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	80fb      	strh	r3, [r7, #6]
    if(sw > 1) {
 8015b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b54:	2b01      	cmp	r3, #1
 8015b56:	dd4b      	ble.n	8015bf0 <shadow_draw_corner_buf+0x2bc>
        uint32_t i;
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	881b      	ldrh	r3, [r3, #0]
 8015b5c:	019a      	lsls	r2, r3, #6
 8015b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b62:	fb92 f3f3 	sdiv	r3, r2, r3
 8015b66:	b29a      	uxth	r2, r3
 8015b68:	68bb      	ldr	r3, [r7, #8]
 8015b6a:	801a      	strh	r2, [r3, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8015b70:	e02f      	b.n	8015bd2 <shadow_draw_corner_buf+0x29e>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 8015b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b74:	005b      	lsls	r3, r3, #1
 8015b76:	68ba      	ldr	r2, [r7, #8]
 8015b78:	4413      	add	r3, r2
 8015b7a:	881a      	ldrh	r2, [r3, #0]
 8015b7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015b7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015b82:	440b      	add	r3, r1
 8015b84:	005b      	lsls	r3, r3, #1
 8015b86:	68b9      	ldr	r1, [r7, #8]
 8015b88:	440b      	add	r3, r1
 8015b8a:	881b      	ldrh	r3, [r3, #0]
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d10d      	bne.n	8015bac <shadow_draw_corner_buf+0x278>
 8015b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015b92:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015b96:	4413      	add	r3, r2
 8015b98:	005b      	lsls	r3, r3, #1
 8015b9a:	68ba      	ldr	r2, [r7, #8]
 8015b9c:	441a      	add	r2, r3
 8015b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ba0:	005b      	lsls	r3, r3, #1
 8015ba2:	68b9      	ldr	r1, [r7, #8]
 8015ba4:	440b      	add	r3, r1
 8015ba6:	8812      	ldrh	r2, [r2, #0]
 8015ba8:	801a      	strh	r2, [r3, #0]
 8015baa:	e00f      	b.n	8015bcc <shadow_draw_corner_buf+0x298>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8015bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bae:	005b      	lsls	r3, r3, #1
 8015bb0:	68ba      	ldr	r2, [r7, #8]
 8015bb2:	4413      	add	r3, r2
 8015bb4:	881b      	ldrh	r3, [r3, #0]
 8015bb6:	019a      	lsls	r2, r3, #6
 8015bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015bbc:	fb92 f1f3 	sdiv	r1, r2, r3
 8015bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bc2:	005b      	lsls	r3, r3, #1
 8015bc4:	68ba      	ldr	r2, [r7, #8]
 8015bc6:	4413      	add	r3, r2
 8015bc8:	b28a      	uxth	r2, r1
 8015bca:	801a      	strh	r2, [r3, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 8015bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bce:	3301      	adds	r3, #1
 8015bd0:	657b      	str	r3, [r7, #84]	; 0x54
 8015bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015bd6:	fb02 f303 	mul.w	r3, r2, r3
 8015bda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d3c8      	bcc.n	8015b72 <shadow_draw_corner_buf+0x23e>
        }

        shadow_blur_corner(size, sw, sh_buf);
 8015be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015be2:	b21b      	sxth	r3, r3
 8015be4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8015be8:	68ba      	ldr	r2, [r7, #8]
 8015bea:	4618      	mov	r0, r3
 8015bec:	f000 f81c 	bl	8015c28 <shadow_blur_corner>
    }
    int32_t x;
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	643b      	str	r3, [r7, #64]	; 0x40
    for(x = 0; x < size * size; x++) {
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	653b      	str	r3, [r7, #80]	; 0x50
 8015bf8:	e00c      	b.n	8015c14 <shadow_draw_corner_buf+0x2e0>
        res_buf[x] = sh_buf[x];
 8015bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bfc:	005b      	lsls	r3, r3, #1
 8015bfe:	68ba      	ldr	r2, [r7, #8]
 8015c00:	4413      	add	r3, r2
 8015c02:	8819      	ldrh	r1, [r3, #0]
 8015c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c08:	4413      	add	r3, r2
 8015c0a:	b2ca      	uxtb	r2, r1
 8015c0c:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < size * size; x++) {
 8015c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c10:	3301      	adds	r3, #1
 8015c12:	653b      	str	r3, [r7, #80]	; 0x50
 8015c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c18:	fb02 f303 	mul.w	r3, r2, r3
 8015c1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	dbeb      	blt.n	8015bfa <shadow_draw_corner_buf+0x2c6>
    }
#endif

}
 8015c22:	376c      	adds	r7, #108	; 0x6c
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd90      	pop	{r4, r7, pc}

08015c28 <shadow_blur_corner>:

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b090      	sub	sp, #64	; 0x40
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	4603      	mov	r3, r0
 8015c30:	603a      	str	r2, [r7, #0]
 8015c32:	80fb      	strh	r3, [r7, #6]
 8015c34:	460b      	mov	r3, r1
 8015c36:	80bb      	strh	r3, [r7, #4]
    int32_t s_left = sw >> 1;
 8015c38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015c3c:	105b      	asrs	r3, r3, #1
 8015c3e:	b21b      	sxth	r3, r3
 8015c40:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t s_right = (sw >> 1);
 8015c42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015c46:	105b      	asrs	r3, r3, #1
 8015c48:	b21b      	sxth	r3, r3
 8015c4a:	613b      	str	r3, [r7, #16]
    if((sw & 1) == 0) s_left--;
 8015c4c:	88bb      	ldrh	r3, [r7, #4]
 8015c4e:	f003 0301 	and.w	r3, r3, #1
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d102      	bne.n	8015c5c <shadow_blur_corner+0x34>
 8015c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c58:	3b01      	subs	r3, #1
 8015c5a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
 8015c5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c60:	005b      	lsls	r3, r3, #1
 8015c62:	4618      	mov	r0, r3
 8015c64:	f006 fe74 	bl	801c950 <_lv_mem_buf_get>
 8015c68:	60f8      	str	r0, [r7, #12]

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 8015c6a:	683b      	ldr	r3, [r7, #0]
 8015c6c:	633b      	str	r3, [r7, #48]	; 0x30

    for(y = 0; y < size; y++) {
 8015c6e:	2300      	movs	r3, #0
 8015c70:	637b      	str	r3, [r7, #52]	; 0x34
 8015c72:	e060      	b.n	8015d36 <shadow_blur_corner+0x10e>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8015c74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015c78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015c7c:	4413      	add	r3, r2
 8015c7e:	005b      	lsls	r3, r3, #1
 8015c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c82:	4413      	add	r3, r2
 8015c84:	881b      	ldrh	r3, [r3, #0]
 8015c86:	461a      	mov	r2, r3
 8015c88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015c8c:	fb03 f302 	mul.w	r3, r3, r2
 8015c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(x = size - 1; x >= 0; x--) {
 8015c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c96:	3b01      	subs	r3, #1
 8015c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8015c9a:	e038      	b.n	8015d0e <shadow_blur_corner+0xe6>
            sh_ups_blur_buf[x] = v;
 8015c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c9e:	005b      	lsls	r3, r3, #1
 8015ca0:	68fa      	ldr	r2, [r7, #12]
 8015ca2:	4413      	add	r3, r2
 8015ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ca6:	b292      	uxth	r2, r2
 8015ca8:	801a      	strh	r2, [r3, #0]

            /*Forget the right pixel*/
            uint32_t right_val = 0;
 8015caa:	2300      	movs	r3, #0
 8015cac:	62bb      	str	r3, [r7, #40]	; 0x28
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 8015cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cb0:	693b      	ldr	r3, [r7, #16]
 8015cb2:	441a      	add	r2, r3
 8015cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	da07      	bge.n	8015ccc <shadow_blur_corner+0xa4>
 8015cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	4413      	add	r3, r2
 8015cc2:	005b      	lsls	r3, r3, #1
 8015cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cc6:	4413      	add	r3, r2
 8015cc8:	881b      	ldrh	r3, [r3, #0]
 8015cca:	62bb      	str	r3, [r7, #40]	; 0x28
            v -= right_val;
 8015ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd0:	1ad3      	subs	r3, r2, r3
 8015cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 8015cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cd8:	1ad3      	subs	r3, r2, r3
 8015cda:	3b01      	subs	r3, #1
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	da03      	bge.n	8015ce8 <shadow_blur_corner+0xc0>
 8015ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce2:	881b      	ldrh	r3, [r3, #0]
 8015ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8015ce6:	e00b      	b.n	8015d00 <shadow_blur_corner+0xd8>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 8015ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cec:	1ad3      	subs	r3, r2, r3
 8015cee:	461a      	mov	r2, r3
 8015cf0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015cf4:	4413      	add	r3, r2
 8015cf6:	005b      	lsls	r3, r3, #1
 8015cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cfa:	4413      	add	r3, r2
 8015cfc:	881b      	ldrh	r3, [r3, #0]
 8015cfe:	627b      	str	r3, [r7, #36]	; 0x24
            v += left_val;
 8015d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d04:	4413      	add	r3, r2
 8015d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(x = size - 1; x >= 0; x--) {
 8015d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d0a:	3b01      	subs	r3, #1
 8015d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8015d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	dac3      	bge.n	8015c9c <shadow_blur_corner+0x74>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 8015d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d18:	005b      	lsls	r3, r3, #1
 8015d1a:	461a      	mov	r2, r3
 8015d1c:	68f9      	ldr	r1, [r7, #12]
 8015d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d20:	f006 ff7a 	bl	801cc18 <_lv_memcpy>
        sh_ups_tmp_buf += size;
 8015d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d28:	005b      	lsls	r3, r3, #1
 8015d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d2c:	4413      	add	r3, r2
 8015d2e:	633b      	str	r3, [r7, #48]	; 0x30
    for(y = 0; y < size; y++) {
 8015d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d32:	3301      	adds	r3, #1
 8015d34:	637b      	str	r3, [r7, #52]	; 0x34
 8015d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	db99      	blt.n	8015c74 <shadow_blur_corner+0x4c>
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	881b      	ldrh	r3, [r3, #0]
 8015d44:	461a      	mov	r2, r3
 8015d46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015d4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8015d4e:	b29a      	uxth	r2, r3
 8015d50:	683b      	ldr	r3, [r7, #0]
 8015d52:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 8015d54:	2301      	movs	r3, #1
 8015d56:	623b      	str	r3, [r7, #32]
 8015d58:	e02f      	b.n	8015dba <shadow_blur_corner+0x192>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 8015d5a:	6a3b      	ldr	r3, [r7, #32]
 8015d5c:	005b      	lsls	r3, r3, #1
 8015d5e:	683a      	ldr	r2, [r7, #0]
 8015d60:	4413      	add	r3, r2
 8015d62:	881a      	ldrh	r2, [r3, #0]
 8015d64:	6a39      	ldr	r1, [r7, #32]
 8015d66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015d6a:	440b      	add	r3, r1
 8015d6c:	005b      	lsls	r3, r3, #1
 8015d6e:	6839      	ldr	r1, [r7, #0]
 8015d70:	440b      	add	r3, r1
 8015d72:	881b      	ldrh	r3, [r3, #0]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d10d      	bne.n	8015d94 <shadow_blur_corner+0x16c>
 8015d78:	6a3a      	ldr	r2, [r7, #32]
 8015d7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015d7e:	4413      	add	r3, r2
 8015d80:	005b      	lsls	r3, r3, #1
 8015d82:	683a      	ldr	r2, [r7, #0]
 8015d84:	441a      	add	r2, r3
 8015d86:	6a3b      	ldr	r3, [r7, #32]
 8015d88:	005b      	lsls	r3, r3, #1
 8015d8a:	6839      	ldr	r1, [r7, #0]
 8015d8c:	440b      	add	r3, r1
 8015d8e:	8812      	ldrh	r2, [r2, #0]
 8015d90:	801a      	strh	r2, [r3, #0]
 8015d92:	e00f      	b.n	8015db4 <shadow_blur_corner+0x18c>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 8015d94:	6a3b      	ldr	r3, [r7, #32]
 8015d96:	005b      	lsls	r3, r3, #1
 8015d98:	683a      	ldr	r2, [r7, #0]
 8015d9a:	4413      	add	r3, r2
 8015d9c:	881b      	ldrh	r3, [r3, #0]
 8015d9e:	461a      	mov	r2, r3
 8015da0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015da4:	fb92 f1f3 	sdiv	r1, r2, r3
 8015da8:	6a3b      	ldr	r3, [r7, #32]
 8015daa:	005b      	lsls	r3, r3, #1
 8015dac:	683a      	ldr	r2, [r7, #0]
 8015dae:	4413      	add	r3, r2
 8015db0:	b28a      	uxth	r2, r1
 8015db2:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 8015db4:	6a3b      	ldr	r3, [r7, #32]
 8015db6:	3301      	adds	r3, #1
 8015db8:	623b      	str	r3, [r7, #32]
 8015dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015dbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015dc2:	fb02 f303 	mul.w	r3, r2, r3
 8015dc6:	6a3a      	ldr	r2, [r7, #32]
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d3c6      	bcc.n	8015d5a <shadow_blur_corner+0x132>
    }

    for(x = 0; x < size; x++) {
 8015dcc:	2300      	movs	r3, #0
 8015dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8015dd0:	e090      	b.n	8015ef4 <shadow_blur_corner+0x2cc>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8015dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dd4:	005b      	lsls	r3, r3, #1
 8015dd6:	683a      	ldr	r2, [r7, #0]
 8015dd8:	4413      	add	r3, r2
 8015dda:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8015ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dde:	881b      	ldrh	r3, [r3, #0]
 8015de0:	461a      	mov	r2, r3
 8015de2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015de6:	fb03 f302 	mul.w	r3, r3, r2
 8015dea:	61fb      	str	r3, [r7, #28]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8015dec:	2300      	movs	r3, #0
 8015dee:	637b      	str	r3, [r7, #52]	; 0x34
 8015df0:	e05b      	b.n	8015eaa <shadow_blur_corner+0x282>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 8015df2:	69fb      	ldr	r3, [r7, #28]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	db03      	blt.n	8015e00 <shadow_blur_corner+0x1d8>
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	119b      	asrs	r3, r3, #6
 8015dfc:	b299      	uxth	r1, r3
 8015dfe:	e000      	b.n	8015e02 <shadow_blur_corner+0x1da>
 8015e00:	2100      	movs	r1, #0
 8015e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e04:	005b      	lsls	r3, r3, #1
 8015e06:	68fa      	ldr	r2, [r7, #12]
 8015e08:	4413      	add	r3, r2
 8015e0a:	460a      	mov	r2, r1
 8015e0c:	801a      	strh	r2, [r3, #0]

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 8015e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e10:	693b      	ldr	r3, [r7, #16]
 8015e12:	1ad3      	subs	r3, r2, r3
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	dc03      	bgt.n	8015e20 <shadow_blur_corner+0x1f8>
 8015e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e1a:	881b      	ldrh	r3, [r3, #0]
 8015e1c:	61bb      	str	r3, [r7, #24]
 8015e1e:	e00d      	b.n	8015e3c <shadow_blur_corner+0x214>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 8015e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	1ad3      	subs	r3, r2, r3
 8015e26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015e2a:	fb02 f203 	mul.w	r2, r2, r3
 8015e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e30:	4413      	add	r3, r2
 8015e32:	005b      	lsls	r3, r3, #1
 8015e34:	683a      	ldr	r2, [r7, #0]
 8015e36:	4413      	add	r3, r2
 8015e38:	881b      	ldrh	r3, [r3, #0]
 8015e3a:	61bb      	str	r3, [r7, #24]
            v -= top_val;
 8015e3c:	69fa      	ldr	r2, [r7, #28]
 8015e3e:	69bb      	ldr	r3, [r7, #24]
 8015e40:	1ad3      	subs	r3, r2, r3
 8015e42:	61fb      	str	r3, [r7, #28]

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8015e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e48:	4413      	add	r3, r2
 8015e4a:	1c5a      	adds	r2, r3, #1
 8015e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015e50:	429a      	cmp	r2, r3
 8015e52:	da0f      	bge.n	8015e74 <shadow_blur_corner+0x24c>
 8015e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e58:	4413      	add	r3, r2
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015e60:	fb02 f203 	mul.w	r2, r2, r3
 8015e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e66:	4413      	add	r3, r2
 8015e68:	005b      	lsls	r3, r3, #1
 8015e6a:	683a      	ldr	r2, [r7, #0]
 8015e6c:	4413      	add	r3, r2
 8015e6e:	881b      	ldrh	r3, [r3, #0]
 8015e70:	617b      	str	r3, [r7, #20]
 8015e72:	e00d      	b.n	8015e90 <shadow_blur_corner+0x268>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8015e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015e78:	3b01      	subs	r3, #1
 8015e7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015e7e:	fb02 f203 	mul.w	r2, r2, r3
 8015e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e84:	4413      	add	r3, r2
 8015e86:	005b      	lsls	r3, r3, #1
 8015e88:	683a      	ldr	r2, [r7, #0]
 8015e8a:	4413      	add	r3, r2
 8015e8c:	881b      	ldrh	r3, [r3, #0]
 8015e8e:	617b      	str	r3, [r7, #20]
            v += bottom_val;
 8015e90:	69fa      	ldr	r2, [r7, #28]
 8015e92:	697b      	ldr	r3, [r7, #20]
 8015e94:	4413      	add	r3, r2
 8015e96:	61fb      	str	r3, [r7, #28]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8015e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e9a:	3301      	adds	r3, #1
 8015e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8015e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ea2:	005b      	lsls	r3, r3, #1
 8015ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ea6:	4413      	add	r3, r2
 8015ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8015eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015eb0:	429a      	cmp	r2, r3
 8015eb2:	db9e      	blt.n	8015df2 <shadow_blur_corner+0x1ca>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8015eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eb6:	005b      	lsls	r3, r3, #1
 8015eb8:	683a      	ldr	r2, [r7, #0]
 8015eba:	4413      	add	r3, r2
 8015ebc:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8015ec2:	e00f      	b.n	8015ee4 <shadow_blur_corner+0x2bc>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 8015ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ec6:	005b      	lsls	r3, r3, #1
 8015ec8:	68fa      	ldr	r2, [r7, #12]
 8015eca:	4413      	add	r3, r2
 8015ecc:	881a      	ldrh	r2, [r3, #0]
 8015ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed0:	801a      	strh	r2, [r3, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8015ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ed4:	3301      	adds	r3, #1
 8015ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8015ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015edc:	005b      	lsls	r3, r3, #1
 8015ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ee0:	4413      	add	r3, r2
 8015ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8015ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015eea:	429a      	cmp	r2, r3
 8015eec:	dbea      	blt.n	8015ec4 <shadow_blur_corner+0x29c>
    for(x = 0; x < size; x++) {
 8015eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015efa:	429a      	cmp	r2, r3
 8015efc:	f6ff af69 	blt.w	8015dd2 <shadow_blur_corner+0x1aa>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
 8015f00:	68f8      	ldr	r0, [r7, #12]
 8015f02:	f006 fe03 	bl	801cb0c <_lv_mem_buf_release>
}
 8015f06:	bf00      	nop
 8015f08:	3740      	adds	r7, #64	; 0x40
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}

08015f0e <draw_outline>:

#endif

#if LV_USE_OUTLINE
static void draw_outline(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8015f0e:	b590      	push	{r4, r7, lr}
 8015f10:	b08f      	sub	sp, #60	; 0x3c
 8015f12:	af04      	add	r7, sp, #16
 8015f14:	60f8      	str	r0, [r7, #12]
 8015f16:	60b9      	str	r1, [r7, #8]
 8015f18:	607a      	str	r2, [r7, #4]
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f20:	2b02      	cmp	r3, #2
 8015f22:	f240 8091 	bls.w	8016048 <draw_outline+0x13a>
    if(dsc->outline_width == 0) return;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	f000 808d 	beq.w	801604c <draw_outline+0x13e>

    lv_opa_t opa = dsc->outline_opa;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8015f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f40:	2bfd      	cmp	r3, #253	; 0xfd
 8015f42:	d902      	bls.n	8015f4a <draw_outline+0x3c>
 8015f44:	23ff      	movs	r3, #255	; 0xff
 8015f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /*Get the inner radius*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 8015f4a:	f107 031c 	add.w	r3, r7, #28
 8015f4e:	68f9      	ldr	r1, [r7, #12]
 8015f50:	4618      	mov	r0, r3
 8015f52:	f7fd f977 	bl	8013244 <lv_area_copy>
    area_inner.x1 -= dsc->outline_pad;
 8015f56:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8015f5a:	b29a      	uxth	r2, r3
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015f62:	b29b      	uxth	r3, r3
 8015f64:	1ad3      	subs	r3, r2, r3
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	b21b      	sxth	r3, r3
 8015f6a:	83bb      	strh	r3, [r7, #28]
    area_inner.y1 -= dsc->outline_pad;
 8015f6c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015f70:	b29a      	uxth	r2, r3
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015f78:	b29b      	uxth	r3, r3
 8015f7a:	1ad3      	subs	r3, r2, r3
 8015f7c:	b29b      	uxth	r3, r3
 8015f7e:	b21b      	sxth	r3, r3
 8015f80:	83fb      	strh	r3, [r7, #30]
    area_inner.x2 += dsc->outline_pad;
 8015f82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015f86:	b29a      	uxth	r2, r3
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015f8e:	b29b      	uxth	r3, r3
 8015f90:	4413      	add	r3, r2
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	b21b      	sxth	r3, r3
 8015f96:	843b      	strh	r3, [r7, #32]
    area_inner.y2 += dsc->outline_pad;
 8015f98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015f9c:	b29a      	uxth	r2, r3
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015fa4:	b29b      	uxth	r3, r3
 8015fa6:	4413      	add	r3, r2
 8015fa8:	b29b      	uxth	r3, r3
 8015faa:	b21b      	sxth	r3, r3
 8015fac:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_area_t area_outer;
    lv_area_copy(&area_outer, &area_inner);
 8015fae:	f107 021c 	add.w	r2, r7, #28
 8015fb2:	f107 0314 	add.w	r3, r7, #20
 8015fb6:	4611      	mov	r1, r2
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7fd f943 	bl	8013244 <lv_area_copy>

    area_outer.x1 -= dsc->outline_width;
 8015fbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015fc2:	b29a      	uxth	r2, r3
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015fca:	b29b      	uxth	r3, r3
 8015fcc:	1ad3      	subs	r3, r2, r3
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	b21b      	sxth	r3, r3
 8015fd2:	82bb      	strh	r3, [r7, #20]
    area_outer.x2 += dsc->outline_width;
 8015fd4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8015fd8:	b29a      	uxth	r2, r3
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015fe0:	b29b      	uxth	r3, r3
 8015fe2:	4413      	add	r3, r2
 8015fe4:	b29b      	uxth	r3, r3
 8015fe6:	b21b      	sxth	r3, r3
 8015fe8:	833b      	strh	r3, [r7, #24]
    area_outer.y1 -= dsc->outline_width;
 8015fea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015fee:	b29a      	uxth	r2, r3
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015ff6:	b29b      	uxth	r3, r3
 8015ff8:	1ad3      	subs	r3, r2, r3
 8015ffa:	b29b      	uxth	r3, r3
 8015ffc:	b21b      	sxth	r3, r3
 8015ffe:	82fb      	strh	r3, [r7, #22]
    area_outer.y2 += dsc->outline_width;
 8016000:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016004:	b29a      	uxth	r2, r3
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801600c:	b29b      	uxth	r3, r3
 801600e:	4413      	add	r3, r2
 8016010:	b29b      	uxth	r3, r3
 8016012:	b21b      	sxth	r3, r3
 8016014:	837b      	strh	r3, [r7, #26]

    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f9b3 4000 	ldrsh.w	r4, [r3]
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8016028:	f107 0114 	add.w	r1, r7, #20
 801602c:	f107 001c 	add.w	r0, r7, #28
 8016030:	9203      	str	r2, [sp, #12]
 8016032:	9302      	str	r3, [sp, #8]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6a1b      	ldr	r3, [r3, #32]
 8016038:	9301      	str	r3, [sp, #4]
 801603a:	2301      	movs	r3, #1
 801603c:	9300      	str	r3, [sp, #0]
 801603e:	4623      	mov	r3, r4
 8016040:	68ba      	ldr	r2, [r7, #8]
 8016042:	f000 fad7 	bl	80165f4 <draw_full_border>
 8016046:	e002      	b.n	801604e <draw_outline+0x140>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 8016048:	bf00      	nop
 801604a:	e000      	b.n	801604e <draw_outline+0x140>
    if(dsc->outline_width == 0) return;
 801604c:	bf00      	nop
                     dsc->outline_blend_mode);
}
 801604e:	372c      	adds	r7, #44	; 0x2c
 8016050:	46bd      	mov	sp, r7
 8016052:	bd90      	pop	{r4, r7, pc}

08016054 <draw_pattern>:
#endif

#if LV_USE_PATTERN
static void draw_pattern(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8016054:	b5b0      	push	{r4, r5, r7, lr}
 8016056:	b0ac      	sub	sp, #176	; 0xb0
 8016058:	af04      	add	r7, sp, #16
 801605a:	60f8      	str	r0, [r7, #12]
 801605c:	60b9      	str	r1, [r7, #8]
 801605e:	607a      	str	r2, [r7, #4]
    if(dsc->pattern_image == NULL) return;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016064:	2b00      	cmp	r3, #0
 8016066:	f000 8205 	beq.w	8016474 <draw_pattern+0x420>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016070:	2b02      	cmp	r3, #2
 8016072:	f240 8201 	bls.w	8016478 <draw_pattern+0x424>

    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801607a:	4618      	mov	r0, r3
 801607c:	f7f8 f992 	bl	800e3a4 <lv_img_src_get_type>
 8016080:	4603      	mov	r3, r0
 8016082:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    lv_draw_img_dsc_t img_dsc;
    lv_draw_label_dsc_t label_dsc;
    int32_t img_w;
    int32_t img_h;

    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 8016086:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801608a:	2b01      	cmp	r3, #1
 801608c:	d003      	beq.n	8016096 <draw_pattern+0x42>
 801608e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8016092:	2b00      	cmp	r3, #0
 8016094:	d12e      	bne.n	80160f4 <draw_pattern+0xa0>
        lv_img_header_t header;
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801609a:	f107 0218 	add.w	r2, r7, #24
 801609e:	4611      	mov	r1, r2
 80160a0:	4618      	mov	r0, r3
 80160a2:	f002 f981 	bl	80183a8 <lv_img_decoder_get_info>
 80160a6:	4603      	mov	r3, r0
 80160a8:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        if(res != LV_RES_OK) {
 80160ac:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80160b0:	2b01      	cmp	r3, #1
 80160b2:	f040 81e3 	bne.w	801647c <draw_pattern+0x428>
            LV_LOG_WARN("draw_img: can't get image info");
            return;
        }

        img_w = header.w;
 80160b6:	69bb      	ldr	r3, [r7, #24]
 80160b8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80160bc:	b29b      	uxth	r3, r3
 80160be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        img_h = header.h;
 80160c2:	8b7b      	ldrh	r3, [r7, #26]
 80160c4:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80160c8:	b29b      	uxth	r3, r3
 80160ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        lv_draw_img_dsc_init(&img_dsc);
 80160ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7f8 f877 	bl	800e1c6 <lv_draw_img_dsc_init>
        img_dsc.opa = dsc->pattern_opa;
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80160de:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80160e8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        img_dsc.recolor = dsc->pattern_recolor;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160f0:	677b      	str	r3, [r7, #116]	; 0x74
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 80160f2:	e036      	b.n	8016162 <draw_pattern+0x10e>
    }
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 80160f4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80160f8:	2b02      	cmp	r3, #2
 80160fa:	d12b      	bne.n	8016154 <draw_pattern+0x100>
        lv_draw_label_dsc_init(&label_dsc);
 80160fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016100:	4618      	mov	r0, r3
 8016102:	f7f9 f81b 	bl	800f13c <lv_draw_label_dsc_init>
        label_dsc.color = dsc->pattern_recolor;
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801610a:	643b      	str	r3, [r7, #64]	; 0x40
        label_dsc.font = dsc->pattern_font;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016110:	64fb      	str	r3, [r7, #76]	; 0x4c
        label_dsc.opa = dsc->pattern_opa;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016118:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        lv_point_t s;
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016120:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8016122:	f9b7 5054 	ldrsh.w	r5, [r7, #84]	; 0x54
 8016126:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801612a:	f107 0014 	add.w	r0, r7, #20
 801612e:	2200      	movs	r2, #0
 8016130:	9202      	str	r2, [sp, #8]
 8016132:	f647 4218 	movw	r2, #31768	; 0x7c18
 8016136:	9201      	str	r2, [sp, #4]
 8016138:	9300      	str	r3, [sp, #0]
 801613a:	462b      	mov	r3, r5
 801613c:	4622      	mov	r2, r4
 801613e:	f007 fc91 	bl	801da64 <_lv_txt_get_size>
                         LV_TXT_FLAG_NONE);
        img_w = s.x;
 8016142:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        img_h = s.y;
 801614a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801614e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016152:	e006      	b.n	8016162 <draw_pattern+0x10e>

    }
    else {
        /*Trigger the error handler of image drawer*/
        LV_LOG_WARN("lv_img_design: image source type is unknown");
        lv_draw_img(coords, clip, NULL, NULL);
 8016154:	2300      	movs	r3, #0
 8016156:	2200      	movs	r2, #0
 8016158:	68b9      	ldr	r1, [r7, #8]
 801615a:	68f8      	ldr	r0, [r7, #12]
 801615c:	f7f8 f858 	bl	800e210 <lv_draw_img>
        return;
 8016160:	e18f      	b.n	8016482 <draw_pattern+0x42e>
    }

    /*Can't draw zero sized images*/
    if(img_w == 0 || img_h == 0) return;
 8016162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016166:	2b00      	cmp	r3, #0
 8016168:	f000 818a 	beq.w	8016480 <draw_pattern+0x42c>
 801616c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016170:	2b00      	cmp	r3, #0
 8016172:	f000 8185 	beq.w	8016480 <draw_pattern+0x42c>

    lv_area_t coords_tmp;
    lv_draw_mask_radius_param_t radius_mask_param;

    if(dsc->pattern_repeat) {
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801617c:	f003 0301 	and.w	r3, r3, #1
 8016180:	b2db      	uxtb	r3, r3
 8016182:	2b00      	cmp	r3, #0
 8016184:	f000 80c8 	beq.w	8016318 <draw_pattern+0x2c4>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801618e:	f107 001c 	add.w	r0, r7, #28
 8016192:	2300      	movs	r3, #0
 8016194:	68f9      	ldr	r1, [r7, #12]
 8016196:	f7fb febf 	bl	8011f18 <lv_draw_mask_radius_init>
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 801619a:	f107 031c 	add.w	r3, r7, #28
 801619e:	2100      	movs	r1, #0
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7fb fc9f 	bl	8011ae4 <lv_draw_mask_add>
 80161a6:	4603      	mov	r3, r0
 80161a8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Align the pattern to the middle*/
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
 80161ac:	68f8      	ldr	r0, [r7, #12]
 80161ae:	f7fd f857 	bl	8013260 <lv_area_get_width>
 80161b2:	4603      	mov	r3, r0
 80161b4:	461c      	mov	r4, r3
 80161b6:	68f8      	ldr	r0, [r7, #12]
 80161b8:	f7fd f852 	bl	8013260 <lv_area_get_width>
 80161bc:	4603      	mov	r3, r0
 80161be:	461a      	mov	r2, r3
 80161c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80161c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80161c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80161cc:	fb02 f303 	mul.w	r3, r2, r3
 80161d0:	1ae3      	subs	r3, r4, r3
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	da00      	bge.n	80161d8 <draw_pattern+0x184>
 80161d6:	3301      	adds	r3, #1
 80161d8:	105b      	asrs	r3, r3, #1
 80161da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
 80161de:	68f8      	ldr	r0, [r7, #12]
 80161e0:	f7fd f855 	bl	801328e <lv_area_get_height>
 80161e4:	4603      	mov	r3, r0
 80161e6:	461c      	mov	r4, r3
 80161e8:	68f8      	ldr	r0, [r7, #12]
 80161ea:	f7fd f850 	bl	801328e <lv_area_get_height>
 80161ee:	4603      	mov	r3, r0
 80161f0:	461a      	mov	r2, r3
 80161f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80161f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80161fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80161fe:	fb02 f303 	mul.w	r3, r2, r3
 8016202:	1ae3      	subs	r3, r4, r3
 8016204:	2b00      	cmp	r3, #0
 8016206:	da00      	bge.n	801620a <draw_pattern+0x1b6>
 8016208:	3301      	adds	r3, #1
 801620a:	105b      	asrs	r3, r3, #1
 801620c:	67fb      	str	r3, [r7, #124]	; 0x7c

        coords_tmp.y1 = coords->y1 - ofs_y;
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016214:	b29a      	uxth	r2, r3
 8016216:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016218:	b29b      	uxth	r3, r3
 801621a:	1ad3      	subs	r3, r2, r3
 801621c:	b29b      	uxth	r3, r3
 801621e:	b21b      	sxth	r3, r3
 8016220:	877b      	strh	r3, [r7, #58]	; 0x3a
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 8016222:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8016226:	b29a      	uxth	r2, r3
 8016228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801622c:	b29b      	uxth	r3, r3
 801622e:	4413      	add	r3, r2
 8016230:	b29b      	uxth	r3, r3
 8016232:	3b01      	subs	r3, #1
 8016234:	b29b      	uxth	r3, r3
 8016236:	b21b      	sxth	r3, r3
 8016238:	87fb      	strh	r3, [r7, #62]	; 0x3e
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 801623a:	e060      	b.n	80162fe <draw_pattern+0x2aa>
            coords_tmp.x1 = coords->x1 - ofs_x;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016242:	b29a      	uxth	r2, r3
 8016244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016248:	b29b      	uxth	r3, r3
 801624a:	1ad3      	subs	r3, r2, r3
 801624c:	b29b      	uxth	r3, r3
 801624e:	b21b      	sxth	r3, r3
 8016250:	873b      	strh	r3, [r7, #56]	; 0x38
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8016252:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8016256:	b29a      	uxth	r2, r3
 8016258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801625c:	b29b      	uxth	r3, r3
 801625e:	4413      	add	r3, r2
 8016260:	b29b      	uxth	r3, r3
 8016262:	3b01      	subs	r3, #1
 8016264:	b29b      	uxth	r3, r3
 8016266:	b21b      	sxth	r3, r3
 8016268:	87bb      	strh	r3, [r7, #60]	; 0x3c
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 801626a:	e02d      	b.n	80162c8 <draw_pattern+0x274>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 801626c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8016270:	2b02      	cmp	r3, #2
 8016272:	d10c      	bne.n	801628e <draw_pattern+0x23a>
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016278:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801627c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016280:	2300      	movs	r3, #0
 8016282:	9300      	str	r3, [sp, #0]
 8016284:	460b      	mov	r3, r1
 8016286:	68b9      	ldr	r1, [r7, #8]
 8016288:	f7f8 ff9c 	bl	800f1c4 <lv_draw_label>
 801628c:	e008      	b.n	80162a0 <draw_pattern+0x24c>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016292:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016296:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801629a:	68b9      	ldr	r1, [r7, #8]
 801629c:	f7f7 ffb8 	bl	800e210 <lv_draw_img>
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 80162a0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80162a4:	b29a      	uxth	r2, r3
 80162a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	4413      	add	r3, r2
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	b21b      	sxth	r3, r3
 80162b2:	873b      	strh	r3, [r7, #56]	; 0x38
 80162b4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80162b8:	b29a      	uxth	r2, r3
 80162ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80162be:	b29b      	uxth	r3, r3
 80162c0:	4413      	add	r3, r2
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	b21b      	sxth	r3, r3
 80162c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80162c8:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80162d2:	429a      	cmp	r2, r3
 80162d4:	ddca      	ble.n	801626c <draw_pattern+0x218>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 80162d6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80162da:	b29a      	uxth	r2, r3
 80162dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80162e0:	b29b      	uxth	r3, r3
 80162e2:	4413      	add	r3, r2
 80162e4:	b29b      	uxth	r3, r3
 80162e6:	b21b      	sxth	r3, r3
 80162e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80162ea:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80162ee:	b29a      	uxth	r2, r3
 80162f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	4413      	add	r3, r2
 80162f8:	b29b      	uxth	r3, r3
 80162fa:	b21b      	sxth	r3, r3
 80162fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80162fe:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016308:	429a      	cmp	r2, r3
 801630a:	dd97      	ble.n	801623c <draw_pattern+0x1e8>
            }
        }
        lv_draw_mask_remove_id(radius_mask_id);
 801630c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8016310:	4618      	mov	r0, r3
 8016312:	f7fb fc5d 	bl	8011bd0 <lv_draw_mask_remove_id>
 8016316:	e0b4      	b.n	8016482 <draw_pattern+0x42e>
    }
    else {
        int32_t obj_w = lv_area_get_width(coords);
 8016318:	68f8      	ldr	r0, [r7, #12]
 801631a:	f7fc ffa1 	bl	8013260 <lv_area_get_width>
 801631e:	4603      	mov	r3, r0
 8016320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        int32_t obj_h = lv_area_get_height(coords);
 8016324:	68f8      	ldr	r0, [r7, #12]
 8016326:	f7fc ffb2 	bl	801328e <lv_area_get_height>
 801632a:	4603      	mov	r3, r0
 801632c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016336:	b29a      	uxth	r2, r3
 8016338:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801633c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016340:	1acb      	subs	r3, r1, r3
 8016342:	2b00      	cmp	r3, #0
 8016344:	da00      	bge.n	8016348 <draw_pattern+0x2f4>
 8016346:	3301      	adds	r3, #1
 8016348:	105b      	asrs	r3, r3, #1
 801634a:	b29b      	uxth	r3, r3
 801634c:	4413      	add	r3, r2
 801634e:	b29b      	uxth	r3, r3
 8016350:	b21b      	sxth	r3, r3
 8016352:	873b      	strh	r3, [r7, #56]	; 0x38
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801635a:	b29a      	uxth	r2, r3
 801635c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8016360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016364:	1acb      	subs	r3, r1, r3
 8016366:	2b00      	cmp	r3, #0
 8016368:	da00      	bge.n	801636c <draw_pattern+0x318>
 801636a:	3301      	adds	r3, #1
 801636c:	105b      	asrs	r3, r3, #1
 801636e:	b29b      	uxth	r3, r3
 8016370:	4413      	add	r3, r2
 8016372:	b29b      	uxth	r3, r3
 8016374:	b21b      	sxth	r3, r3
 8016376:	877b      	strh	r3, [r7, #58]	; 0x3a
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8016378:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801637c:	b29a      	uxth	r2, r3
 801637e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016382:	b29b      	uxth	r3, r3
 8016384:	4413      	add	r3, r2
 8016386:	b29b      	uxth	r3, r3
 8016388:	3b01      	subs	r3, #1
 801638a:	b29b      	uxth	r3, r3
 801638c:	b21b      	sxth	r3, r3
 801638e:	87bb      	strh	r3, [r7, #60]	; 0x3c
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 8016390:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8016394:	b29a      	uxth	r2, r3
 8016396:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801639a:	b29b      	uxth	r3, r3
 801639c:	4413      	add	r3, r2
 801639e:	b29b      	uxth	r3, r3
 80163a0:	3b01      	subs	r3, #1
 80163a2:	b29b      	uxth	r3, r3
 80163a4:	b21b      	sxth	r3, r3
 80163a6:	87fb      	strh	r3, [r7, #62]	; 0x3e

        /* If the (obj_h - img_h) is odd there is a rounding error when divided by 2.
         * It's better round up in case of symbols because probably there is some extra space in the bottom
         * due to the base line of font*/
        if(src_type == LV_IMG_SRC_SYMBOL) {
 80163a8:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80163ac:	2b02      	cmp	r3, #2
 80163ae:	d11c      	bne.n	80163ea <draw_pattern+0x396>
            int32_t y_corr = (obj_h - img_h) & 0x1;
 80163b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80163b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80163b8:	1ad3      	subs	r3, r2, r3
 80163ba:	f003 0301 	and.w	r3, r3, #1
 80163be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            coords_tmp.y1 += y_corr;
 80163c2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80163c6:	b29a      	uxth	r2, r3
 80163c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80163cc:	b29b      	uxth	r3, r3
 80163ce:	4413      	add	r3, r2
 80163d0:	b29b      	uxth	r3, r3
 80163d2:	b21b      	sxth	r3, r3
 80163d4:	877b      	strh	r3, [r7, #58]	; 0x3a
            coords_tmp.y2 += y_corr;
 80163d6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80163da:	b29a      	uxth	r2, r3
 80163dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80163e0:	b29b      	uxth	r3, r3
 80163e2:	4413      	add	r3, r2
 80163e4:	b29b      	uxth	r3, r3
 80163e6:	b21b      	sxth	r3, r3
 80163e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }

        int16_t radius_mask_id = LV_MASK_ID_INV;
 80163ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80163f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80163fc:	68f9      	ldr	r1, [r7, #12]
 80163fe:	4618      	mov	r0, r3
 8016400:	f004 ff42 	bl	801b288 <_lv_area_is_in>
 8016404:	4603      	mov	r3, r0
 8016406:	f083 0301 	eor.w	r3, r3, #1
 801640a:	b2db      	uxtb	r3, r3
 801640c:	2b00      	cmp	r3, #0
 801640e:	d011      	beq.n	8016434 <draw_pattern+0x3e0>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016416:	f107 001c 	add.w	r0, r7, #28
 801641a:	2300      	movs	r3, #0
 801641c:	68f9      	ldr	r1, [r7, #12]
 801641e:	f7fb fd7b 	bl	8011f18 <lv_draw_mask_radius_init>
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 8016422:	f107 031c 	add.w	r3, r7, #28
 8016426:	2100      	movs	r1, #0
 8016428:	4618      	mov	r0, r3
 801642a:	f7fb fb5b 	bl	8011ae4 <lv_draw_mask_add>
 801642e:	4603      	mov	r3, r0
 8016430:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        }

        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 8016434:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8016438:	2b02      	cmp	r3, #2
 801643a:	d10c      	bne.n	8016456 <draw_pattern+0x402>
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016440:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016444:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016448:	2300      	movs	r3, #0
 801644a:	9300      	str	r3, [sp, #0]
 801644c:	460b      	mov	r3, r1
 801644e:	68b9      	ldr	r1, [r7, #8]
 8016450:	f7f8 feb8 	bl	800f1c4 <lv_draw_label>
 8016454:	e008      	b.n	8016468 <draw_pattern+0x414>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801645a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801645e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016462:	68b9      	ldr	r1, [r7, #8]
 8016464:	f7f7 fed4 	bl	800e210 <lv_draw_img>

        lv_draw_mask_remove_id(radius_mask_id);
 8016468:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801646c:	4618      	mov	r0, r3
 801646e:	f7fb fbaf 	bl	8011bd0 <lv_draw_mask_remove_id>
 8016472:	e006      	b.n	8016482 <draw_pattern+0x42e>
    if(dsc->pattern_image == NULL) return;
 8016474:	bf00      	nop
 8016476:	e004      	b.n	8016482 <draw_pattern+0x42e>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
 8016478:	bf00      	nop
 801647a:	e002      	b.n	8016482 <draw_pattern+0x42e>
            return;
 801647c:	bf00      	nop
 801647e:	e000      	b.n	8016482 <draw_pattern+0x42e>
    if(img_w == 0 || img_h == 0) return;
 8016480:	bf00      	nop
    }
}
 8016482:	37a0      	adds	r7, #160	; 0xa0
 8016484:	46bd      	mov	sp, r7
 8016486:	bdb0      	pop	{r4, r5, r7, pc}

08016488 <draw_value_str>:
#endif

#if LV_USE_VALUE_STR
static void draw_value_str(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8016488:	b590      	push	{r4, r7, lr}
 801648a:	b099      	sub	sp, #100	; 0x64
 801648c:	af04      	add	r7, sp, #16
 801648e:	60f8      	str	r0, [r7, #12]
 8016490:	60b9      	str	r1, [r7, #8]
 8016492:	607a      	str	r2, [r7, #4]
    if(dsc->value_str == NULL) return;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016498:	2b00      	cmp	r3, #0
 801649a:	f000 80a5 	beq.w	80165e8 <draw_value_str+0x160>
    if(dsc->value_opa <= LV_OPA_MIN) return;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80164a4:	2b02      	cmp	r3, #2
 80164a6:	f240 80a1 	bls.w	80165ec <draw_value_str+0x164>

#if LV_USE_ARABIC_PERSIAN_CHARS == 0
    const char * str = dsc->value_str;
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80164ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    char * str = _lv_mem_buf_get(str_len + 1);
    _lv_txt_ap_proc(dsc->value_str, str);
#endif

    lv_point_t s;
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	f9b3 4060 	ldrsh.w	r4, [r3, #96]	; 0x60
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 80164c0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80164c4:	2200      	movs	r2, #0
 80164c6:	9202      	str	r2, [sp, #8]
 80164c8:	f647 4218 	movw	r2, #31768	; 0x7c18
 80164cc:	9201      	str	r2, [sp, #4]
 80164ce:	9300      	str	r3, [sp, #0]
 80164d0:	4623      	mov	r3, r4
 80164d2:	460a      	mov	r2, r1
 80164d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80164d6:	f007 fac5 	bl	801da64 <_lv_txt_get_size>
                     LV_TXT_FLAG_NONE);

    lv_area_t value_area;
    value_area.x1 = 0;
 80164da:	2300      	movs	r3, #0
 80164dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    value_area.y1 = 0;
 80164e0:	2300      	movs	r3, #0
 80164e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    value_area.x2 = s.x - 1;
 80164e6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80164ea:	b29b      	uxth	r3, r3
 80164ec:	3b01      	subs	r3, #1
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	b21b      	sxth	r3, r3
 80164f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    value_area.y2 = s.y - 1;
 80164f6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80164fa:	b29b      	uxth	r3, r3
 80164fc:	3b01      	subs	r3, #1
 80164fe:	b29b      	uxth	r3, r3
 8016500:	b21b      	sxth	r3, r3
 8016502:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_point_t p_align;
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 801650c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016510:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8016514:	68f8      	ldr	r0, [r7, #12]
 8016516:	f004 ff55 	bl	801b3c4 <_lv_area_align>

    value_area.x1 += p_align.x + dsc->value_ofs_x;
 801651a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801651e:	b29a      	uxth	r2, r3
 8016520:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8016524:	b299      	uxth	r1, r3
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 801652c:	b29b      	uxth	r3, r3
 801652e:	440b      	add	r3, r1
 8016530:	b29b      	uxth	r3, r3
 8016532:	4413      	add	r3, r2
 8016534:	b29b      	uxth	r3, r3
 8016536:	b21b      	sxth	r3, r3
 8016538:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 801653c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8016540:	b29a      	uxth	r2, r3
 8016542:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8016546:	b299      	uxth	r1, r3
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 801654e:	b29b      	uxth	r3, r3
 8016550:	440b      	add	r3, r1
 8016552:	b29b      	uxth	r3, r3
 8016554:	4413      	add	r3, r2
 8016556:	b29b      	uxth	r3, r3
 8016558:	b21b      	sxth	r3, r3
 801655a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    value_area.x2 += p_align.x + dsc->value_ofs_x;
 801655e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8016562:	b29a      	uxth	r2, r3
 8016564:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8016568:	b299      	uxth	r1, r3
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8016570:	b29b      	uxth	r3, r3
 8016572:	440b      	add	r3, r1
 8016574:	b29b      	uxth	r3, r3
 8016576:	4413      	add	r3, r2
 8016578:	b29b      	uxth	r3, r3
 801657a:	b21b      	sxth	r3, r3
 801657c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    value_area.y2 += p_align.y + dsc->value_ofs_y;
 8016580:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8016584:	b29a      	uxth	r2, r3
 8016586:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801658a:	b299      	uxth	r1, r3
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8016592:	b29b      	uxth	r3, r3
 8016594:	440b      	add	r3, r1
 8016596:	b29b      	uxth	r3, r3
 8016598:	4413      	add	r3, r2
 801659a:	b29b      	uxth	r3, r3
 801659c:	b21b      	sxth	r3, r3
 801659e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 80165a2:	f107 0314 	add.w	r3, r7, #20
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7f8 fdc8 	bl	800f13c <lv_draw_label_dsc_init>
    label_dsc.font = dsc->value_font;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80165b0:	623b      	str	r3, [r7, #32]
    label_dsc.letter_space = dsc->value_letter_space;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 80165b8:	853b      	strh	r3, [r7, #40]	; 0x28
    label_dsc.line_space = dsc->value_line_space;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 80165c0:	84fb      	strh	r3, [r7, #38]	; 0x26
    label_dsc.color = dsc->value_color;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165c6:	617b      	str	r3, [r7, #20]
    label_dsc.opa = dsc->value_opa;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80165ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 80165d2:	f107 0214 	add.w	r2, r7, #20
 80165d6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80165da:	2300      	movs	r3, #0
 80165dc:	9300      	str	r3, [sp, #0]
 80165de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165e0:	68b9      	ldr	r1, [r7, #8]
 80165e2:	f7f8 fdef 	bl	800f1c4 <lv_draw_label>
 80165e6:	e002      	b.n	80165ee <draw_value_str+0x166>
    if(dsc->value_str == NULL) return;
 80165e8:	bf00      	nop
 80165ea:	e000      	b.n	80165ee <draw_value_str+0x166>
    if(dsc->value_opa <= LV_OPA_MIN) return;
 80165ec:	bf00      	nop

#if LV_USE_ARABIC_PERSIAN_CHARS
    _lv_mem_buf_release(str);
#endif
}
 80165ee:	3754      	adds	r7, #84	; 0x54
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd90      	pop	{r4, r7, pc}

080165f4 <draw_full_border>:
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b0b8      	sub	sp, #224	; 0xe0
 80165f8:	af04      	add	r7, sp, #16
 80165fa:	60f8      	str	r0, [r7, #12]
 80165fc:	60b9      	str	r1, [r7, #8]
 80165fe:	607a      	str	r2, [r7, #4]
 8016600:	807b      	strh	r3, [r7, #2]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8016602:	f7fb fb3d 	bl	8011c80 <lv_draw_mask_get_cnt>
 8016606:	4603      	mov	r3, r0
 8016608:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    bool simple_mode = true;
 801660c:	2301      	movs	r3, #1
 801660e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    if(other_mask_cnt) simple_mode = false;
 8016612:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8016616:	2b00      	cmp	r3, #0
 8016618:	d002      	beq.n	8016620 <draw_full_border+0x2c>
 801661a:	2300      	movs	r3, #0
 801661c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

    int32_t inner_w = lv_area_get_width(area_inner);
 8016620:	68f8      	ldr	r0, [r7, #12]
 8016622:	f7fc fe1d 	bl	8013260 <lv_area_get_width>
 8016626:	4603      	mov	r3, r0
 8016628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    int32_t inner_h = lv_area_get_height(area_inner);
 801662c:	68f8      	ldr	r0, [r7, #12]
 801662e:	f7fc fe2e 	bl	801328e <lv_area_get_height>
 8016632:	4603      	mov	r3, r0
 8016634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801663e:	b29a      	uxth	r2, r3
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016646:	b29b      	uxth	r3, r3
 8016648:	1ad3      	subs	r3, r2, r3
 801664a:	b29b      	uxth	r3, r3
 801664c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

    int32_t coords_out_w = lv_area_get_width(area_outer);
 8016650:	68b8      	ldr	r0, [r7, #8]
 8016652:	f7fc fe05 	bl	8013260 <lv_area_get_width>
 8016656:	4603      	mov	r3, r0
 8016658:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    int32_t coords_out_h = lv_area_get_height(area_outer);
 801665c:	68b8      	ldr	r0, [r7, #8]
 801665e:	f7fc fe16 	bl	801328e <lv_area_get_height>
 8016662:	4603      	mov	r3, r0
 8016664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
 8016668:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 801666c:	2b00      	cmp	r3, #0
 801666e:	d020      	beq.n	80166b2 <draw_full_border+0xbe>
        rin = radius;
 8016670:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
 8016678:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801667c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016680:	4293      	cmp	r3, r2
 8016682:	bfa8      	it	ge
 8016684:	4613      	movge	r3, r2
 8016686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        if(rin > short_side >> 1) rin = short_side >> 1;
 801668a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801668e:	105b      	asrs	r3, r3, #1
 8016690:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8016694:	429a      	cmp	r2, r3
 8016696:	dd04      	ble.n	80166a2 <draw_full_border+0xae>
 8016698:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801669c:	105b      	asrs	r3, r3, #1
 801669e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

        /*Get the outer area*/
        rout = rin + border_width;
 80166a2:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80166a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80166aa:	4413      	add	r3, r2
 80166ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80166b0:	e026      	b.n	8016700 <draw_full_border+0x10c>
    }
    else {
        rout = radius;
 80166b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80166b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
 80166ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80166be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166c2:	4293      	cmp	r3, r2
 80166c4:	bfa8      	it	ge
 80166c6:	4613      	movge	r3, r2
 80166c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        if(rout > short_side >> 1) rout = short_side >> 1;
 80166cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80166d0:	105b      	asrs	r3, r3, #1
 80166d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80166d6:	429a      	cmp	r2, r3
 80166d8:	dd04      	ble.n	80166e4 <draw_full_border+0xf0>
 80166da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80166de:	105b      	asrs	r3, r3, #1
 80166e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        /*Get the outer area*/
        rin = rout - border_width;
 80166e4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80166e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80166ec:	1ad3      	subs	r3, r2, r3
 80166ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        if(rin < 0) rin = 0;
 80166f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	da02      	bge.n	8016700 <draw_full_border+0x10c>
 80166fa:	2300      	movs	r3, #0
 80166fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8016700:	f7f3 fe16 	bl	800a330 <_lv_refr_get_disp_refreshing>
 8016704:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8016708:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801670c:	f003 ff00 	bl	801a510 <lv_disp_get_buf>
 8016710:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 8016714:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016718:	687a      	ldr	r2, [r7, #4]
 801671a:	68b9      	ldr	r1, [r7, #8]
 801671c:	4618      	mov	r0, r3
 801671e:	f004 fbcf 	bl	801aec0 <_lv_area_intersect>
 8016722:	4603      	mov	r3, r0
 8016724:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    if(is_common == false) return;
 8016728:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801672c:	f083 0301 	eor.w	r3, r3, #1
 8016730:	b2db      	uxtb	r3, r3
 8016732:	2b00      	cmp	r3, #0
 8016734:	f040 8350 	bne.w	8016dd8 <draw_full_border+0x7e4>

    const lv_area_t * disp_area = &vdb->area;
 8016738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801673c:	3310      	adds	r3, #16
 801673e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 8016742:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016746:	b29a      	uxth	r2, r3
 8016748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801674c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016750:	b29b      	uxth	r3, r3
 8016752:	1ad3      	subs	r3, r2, r3
 8016754:	b29b      	uxth	r3, r3
 8016756:	b21b      	sxth	r3, r3
 8016758:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    draw_area.y1 -= disp_area->y1;
 801675c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016760:	b29a      	uxth	r2, r3
 8016762:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016766:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801676a:	b29b      	uxth	r3, r3
 801676c:	1ad3      	subs	r3, r2, r3
 801676e:	b29b      	uxth	r3, r3
 8016770:	b21b      	sxth	r3, r3
 8016772:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    draw_area.x2 -= disp_area->x1;
 8016776:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801677a:	b29a      	uxth	r2, r3
 801677c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016784:	b29b      	uxth	r3, r3
 8016786:	1ad3      	subs	r3, r2, r3
 8016788:	b29b      	uxth	r3, r3
 801678a:	b21b      	sxth	r3, r3
 801678c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    draw_area.y2 -= disp_area->y1;
 8016790:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8016794:	b29a      	uxth	r2, r3
 8016796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801679a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801679e:	b29b      	uxth	r3, r3
 80167a0:	1ad3      	subs	r3, r2, r3
 80167a2:	b29b      	uxth	r3, r3
 80167a4:	b21b      	sxth	r3, r3
 80167a6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    int32_t draw_area_w = lv_area_get_width(&draw_area);
 80167aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80167ae:	4618      	mov	r0, r3
 80167b0:	f7fc fd56 	bl	8013260 <lv_area_get_width>
 80167b4:	4603      	mov	r3, r0
 80167b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 80167ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80167be:	b21a      	sxth	r2, r3
 80167c0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80167c4:	2301      	movs	r3, #1
 80167c6:	68f9      	ldr	r1, [r7, #12]
 80167c8:	f7fb fba6 	bl	8011f18 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 80167cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80167d0:	2100      	movs	r1, #0
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7fb f986 	bl	8011ae4 <lv_draw_mask_add>
 80167d8:	4603      	mov	r3, r0
 80167da:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 80167de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80167e2:	b21a      	sxth	r2, r3
 80167e4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80167e8:	2300      	movs	r3, #0
 80167ea:	68b9      	ldr	r1, [r7, #8]
 80167ec:	f7fb fb94 	bl	8011f18 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 80167f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80167f4:	2100      	movs	r1, #0
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7fb f974 	bl	8011ae4 <lv_draw_mask_add>
 80167fc:	4603      	mov	r3, r0
 80167fe:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8016802:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016806:	4618      	mov	r0, r3
 8016808:	f006 f8a2 	bl	801c950 <_lv_mem_buf_get>
 801680c:	67b8      	str	r0, [r7, #120]	; 0x78

    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 801680e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8016812:	3b01      	subs	r3, #1
 8016814:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016818:	4293      	cmp	r3, r2
 801681a:	bfb8      	it	lt
 801681c:	4613      	movlt	r3, r2
 801681e:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
 8016820:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8016824:	2b00      	cmp	r3, #0
 8016826:	f000 825d 	beq.w	8016ce4 <draw_full_border+0x6f0>
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016830:	461a      	mov	r2, r3
 8016832:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016836:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801683a:	1ad3      	subs	r3, r2, r3
 801683c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801683e:	4413      	add	r3, r2
 8016840:	66fb      	str	r3, [r7, #108]	; 0x6c

        fill_area.x1 = area_outer->x1;
 8016842:	68bb      	ldr	r3, [r7, #8]
 8016844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016848:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x2;
 801684a:	68bb      	ldr	r3, [r7, #8]
 801684c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016850:	853b      	strh	r3, [r7, #40]	; 0x28
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8016852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016856:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801685a:	b29a      	uxth	r2, r3
 801685c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016860:	b29b      	uxth	r3, r3
 8016862:	4413      	add	r3, r2
 8016864:	b29b      	uxth	r3, r3
 8016866:	b21b      	sxth	r3, r3
 8016868:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = fill_area.y1;
 801686a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801686e:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 8016870:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016878:	e0d1      	b.n	8016a1e <draw_full_border+0x42a>
            _lv_memset_ff(mask_buf, draw_area_w);
 801687a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801687e:	4619      	mov	r1, r3
 8016880:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016882:	f006 fcee 	bl	801d262 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8016886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801688a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801688e:	b29a      	uxth	r2, r3
 8016890:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016894:	b29b      	uxth	r3, r3
 8016896:	4413      	add	r3, r2
 8016898:	b29b      	uxth	r3, r3
 801689a:	b219      	sxth	r1, r3
 801689c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80168a0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80168a4:	b29a      	uxth	r2, r3
 80168a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	4413      	add	r3, r2
 80168ae:	b29b      	uxth	r3, r3
 80168b0:	b21a      	sxth	r2, r3
 80168b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80168b6:	b21b      	sxth	r3, r3
 80168b8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80168ba:	f7fb f945 	bl	8011b48 <lv_draw_mask_apply>
 80168be:	4603      	mov	r3, r0
 80168c0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            lv_area_t fill_area2;
            fill_area2.y1 = fill_area.y1;
 80168c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80168c8:	83fb      	strh	r3, [r7, #30]
            fill_area2.y2 = fill_area.y2;
 80168ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80168ce:	847b      	strh	r3, [r7, #34]	; 0x22

            fill_area2.x1 = area_outer->x1;
 80168d0:	68bb      	ldr	r3, [r7, #8]
 80168d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168d6:	83bb      	strh	r3, [r7, #28]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 80168d8:	68bb      	ldr	r3, [r7, #8]
 80168da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168de:	b29a      	uxth	r2, r3
 80168e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80168e4:	b29b      	uxth	r3, r3
 80168e6:	4413      	add	r3, r2
 80168e8:	b29b      	uxth	r3, r3
 80168ea:	3b01      	subs	r3, #1
 80168ec:	b29b      	uxth	r3, r3
 80168ee:	b21b      	sxth	r3, r3
 80168f0:	843b      	strh	r3, [r7, #32]

            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 80168f2:	f107 011c 	add.w	r1, r7, #28
 80168f6:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80168fa:	9302      	str	r3, [sp, #8]
 80168fc:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016900:	9301      	str	r3, [sp, #4]
 8016902:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016906:	9300      	str	r3, [sp, #0]
 8016908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801690a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	f7f5 feec 	bl	800c6ec <_lv_blend_fill>

            /*Draw the top horizontal line*/
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 8016914:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016918:	461a      	mov	r2, r3
 801691a:	68bb      	ldr	r3, [r7, #8]
 801691c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016920:	4619      	mov	r1, r3
 8016922:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8016926:	440b      	add	r3, r1
 8016928:	429a      	cmp	r2, r3
 801692a:	da25      	bge.n	8016978 <draw_full_border+0x384>
                fill_area2.x1 = area_outer->x1 + rout;
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016932:	b29a      	uxth	r2, r3
 8016934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016938:	b29b      	uxth	r3, r3
 801693a:	4413      	add	r3, r2
 801693c:	b29b      	uxth	r3, r3
 801693e:	b21b      	sxth	r3, r3
 8016940:	83bb      	strh	r3, [r7, #28]
                fill_area2.x2 = area_outer->x2 - rout;
 8016942:	68bb      	ldr	r3, [r7, #8]
 8016944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016948:	b29a      	uxth	r2, r3
 801694a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801694e:	b29b      	uxth	r3, r3
 8016950:	1ad3      	subs	r3, r2, r3
 8016952:	b29b      	uxth	r3, r3
 8016954:	b21b      	sxth	r3, r3
 8016956:	843b      	strh	r3, [r7, #32]

                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 8016958:	f107 011c 	add.w	r1, r7, #28
 801695c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016960:	9302      	str	r3, [sp, #8]
 8016962:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016966:	9301      	str	r3, [sp, #4]
 8016968:	2301      	movs	r3, #1
 801696a:	9300      	str	r3, [sp, #0]
 801696c:	2300      	movs	r3, #0
 801696e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f7f5 feba 	bl	800c6ec <_lv_blend_fill>
            }

            fill_area2.x1 = area_outer->x2 - rout + 1;
 8016978:	68bb      	ldr	r3, [r7, #8]
 801697a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801697e:	b29a      	uxth	r2, r3
 8016980:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016984:	b29b      	uxth	r3, r3
 8016986:	1ad3      	subs	r3, r2, r3
 8016988:	b29b      	uxth	r3, r3
 801698a:	3301      	adds	r3, #1
 801698c:	b29b      	uxth	r3, r3
 801698e:	b21b      	sxth	r3, r3
 8016990:	83bb      	strh	r3, [r7, #28]
            fill_area2.x2 = area_outer->x2;
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016998:	843b      	strh	r3, [r7, #32]

            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169a0:	461a      	mov	r2, r3
 80169a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80169a6:	1ad3      	subs	r3, r2, r3
 80169a8:	1c5a      	adds	r2, r3, #1
 80169aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80169ae:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80169b2:	4619      	mov	r1, r3
 80169b4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80169b8:	440b      	add	r3, r1
 80169ba:	1ad3      	subs	r3, r2, r3
 80169bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if(mask_ofs < 0) mask_ofs = 0;
 80169c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	da02      	bge.n	80169ce <draw_full_border+0x3da>
 80169c8:	2300      	movs	r3, #0
 80169ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 80169ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80169d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80169d4:	441a      	add	r2, r3
 80169d6:	f107 011c 	add.w	r1, r7, #28
 80169da:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80169de:	9302      	str	r3, [sp, #8]
 80169e0:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80169e4:	9301      	str	r3, [sp, #4]
 80169e6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	4613      	mov	r3, r2
 80169ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f7f5 fe7a 	bl	800c6ec <_lv_blend_fill>

            fill_area.y1++;
 80169f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80169fc:	b29b      	uxth	r3, r3
 80169fe:	3301      	adds	r3, #1
 8016a00:	b29b      	uxth	r3, r3
 8016a02:	b21b      	sxth	r3, r3
 8016a04:	84fb      	strh	r3, [r7, #38]	; 0x26
            fill_area.y2++;
 8016a06:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8016a0a:	b29b      	uxth	r3, r3
 8016a0c:	3301      	adds	r3, #1
 8016a0e:	b29b      	uxth	r3, r3
 8016a10:	b21b      	sxth	r3, r3
 8016a12:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 8016a14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016a18:	3301      	adds	r3, #1
 8016a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016a1e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a24:	429a      	cmp	r2, r3
 8016a26:	f77f af28 	ble.w	801687a <draw_full_border+0x286>
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 8016a2a:	68bb      	ldr	r3, [r7, #8]
 8016a2c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016a30:	461a      	mov	r2, r3
 8016a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016a36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a3a:	1ad2      	subs	r2, r2, r3
 8016a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a3e:	1ad3      	subs	r3, r2, r3
 8016a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 8016a44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	dc03      	bgt.n	8016a56 <draw_full_border+0x462>
 8016a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a50:	3301      	adds	r3, #1
 8016a52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 8016a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016a5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a5e:	b29a      	uxth	r2, r3
 8016a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016a64:	b29b      	uxth	r3, r3
 8016a66:	4413      	add	r3, r2
 8016a68:	b29b      	uxth	r3, r3
 8016a6a:	b21b      	sxth	r3, r3
 8016a6c:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = fill_area.y1;
 8016a6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016a72:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 8016a74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016a7c:	e0d1      	b.n	8016c22 <draw_full_border+0x62e>
            _lv_memset_ff(mask_buf, draw_area_w);
 8016a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016a82:	4619      	mov	r1, r3
 8016a84:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016a86:	f006 fbec 	bl	801d262 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8016a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a8e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016a92:	b29a      	uxth	r2, r3
 8016a94:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016a98:	b29b      	uxth	r3, r3
 8016a9a:	4413      	add	r3, r2
 8016a9c:	b29b      	uxth	r3, r3
 8016a9e:	b219      	sxth	r1, r3
 8016aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016aa4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016aa8:	b29a      	uxth	r2, r3
 8016aaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	4413      	add	r3, r2
 8016ab2:	b29b      	uxth	r3, r3
 8016ab4:	b21a      	sxth	r2, r3
 8016ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016aba:	b21b      	sxth	r3, r3
 8016abc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016abe:	f7fb f843 	bl	8011b48 <lv_draw_mask_apply>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            lv_area_t fill_area2;
            fill_area2.x1 = area_outer->x1;
 8016ac8:	68bb      	ldr	r3, [r7, #8]
 8016aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ace:	82bb      	strh	r3, [r7, #20]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 8016ad0:	68bb      	ldr	r3, [r7, #8]
 8016ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ad6:	b29a      	uxth	r2, r3
 8016ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016adc:	b29b      	uxth	r3, r3
 8016ade:	4413      	add	r3, r2
 8016ae0:	b29b      	uxth	r3, r3
 8016ae2:	3b01      	subs	r3, #1
 8016ae4:	b29b      	uxth	r3, r3
 8016ae6:	b21b      	sxth	r3, r3
 8016ae8:	833b      	strh	r3, [r7, #24]
            fill_area2.y1 = fill_area.y1;
 8016aea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016aee:	82fb      	strh	r3, [r7, #22]
            fill_area2.y2 = fill_area.y2;
 8016af0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8016af4:	837b      	strh	r3, [r7, #26]

            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 8016af6:	f107 0114 	add.w	r1, r7, #20
 8016afa:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016afe:	9302      	str	r3, [sp, #8]
 8016b00:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016b04:	9301      	str	r3, [sp, #4]
 8016b06:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016b0a:	9300      	str	r3, [sp, #0]
 8016b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016b12:	6878      	ldr	r0, [r7, #4]
 8016b14:	f7f5 fdea 	bl	800c6ec <_lv_blend_fill>

            /*Draw the bottom horizontal line*/
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 8016b18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	68bb      	ldr	r3, [r7, #8]
 8016b20:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016b24:	4619      	mov	r1, r3
 8016b26:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8016b2a:	1acb      	subs	r3, r1, r3
 8016b2c:	429a      	cmp	r2, r3
 8016b2e:	dd25      	ble.n	8016b7c <draw_full_border+0x588>
                fill_area2.x1 = area_outer->x1 + rout;
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b36:	b29a      	uxth	r2, r3
 8016b38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016b3c:	b29b      	uxth	r3, r3
 8016b3e:	4413      	add	r3, r2
 8016b40:	b29b      	uxth	r3, r3
 8016b42:	b21b      	sxth	r3, r3
 8016b44:	82bb      	strh	r3, [r7, #20]
                fill_area2.x2 = area_outer->x2 - rout;
 8016b46:	68bb      	ldr	r3, [r7, #8]
 8016b48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b4c:	b29a      	uxth	r2, r3
 8016b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016b52:	b29b      	uxth	r3, r3
 8016b54:	1ad3      	subs	r3, r2, r3
 8016b56:	b29b      	uxth	r3, r3
 8016b58:	b21b      	sxth	r3, r3
 8016b5a:	833b      	strh	r3, [r7, #24]

                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 8016b5c:	f107 0114 	add.w	r1, r7, #20
 8016b60:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016b64:	9302      	str	r3, [sp, #8]
 8016b66:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016b6a:	9301      	str	r3, [sp, #4]
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	9300      	str	r3, [sp, #0]
 8016b70:	2300      	movs	r3, #0
 8016b72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016b76:	6878      	ldr	r0, [r7, #4]
 8016b78:	f7f5 fdb8 	bl	800c6ec <_lv_blend_fill>
            }
            fill_area2.x1 = area_outer->x2 - rout + 1;
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b82:	b29a      	uxth	r2, r3
 8016b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016b88:	b29b      	uxth	r3, r3
 8016b8a:	1ad3      	subs	r3, r2, r3
 8016b8c:	b29b      	uxth	r3, r3
 8016b8e:	3301      	adds	r3, #1
 8016b90:	b29b      	uxth	r3, r3
 8016b92:	b21b      	sxth	r3, r3
 8016b94:	82bb      	strh	r3, [r7, #20]
            fill_area2.x2 = area_outer->x2;
 8016b96:	68bb      	ldr	r3, [r7, #8]
 8016b98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b9c:	833b      	strh	r3, [r7, #24]

            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016ba4:	461a      	mov	r2, r3
 8016ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016baa:	1ad3      	subs	r3, r2, r3
 8016bac:	1c5a      	adds	r2, r3, #1
 8016bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016bb2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016bb6:	4619      	mov	r1, r3
 8016bb8:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016bbc:	440b      	add	r3, r1
 8016bbe:	1ad3      	subs	r3, r2, r3
 8016bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            if(mask_ofs < 0) mask_ofs = 0;
 8016bc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	da02      	bge.n	8016bd2 <draw_full_border+0x5de>
 8016bcc:	2300      	movs	r3, #0
 8016bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 8016bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016bd6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016bd8:	441a      	add	r2, r3
 8016bda:	f107 0114 	add.w	r1, r7, #20
 8016bde:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016be2:	9302      	str	r3, [sp, #8]
 8016be4:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016be8:	9301      	str	r3, [sp, #4]
 8016bea:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016bee:	9300      	str	r3, [sp, #0]
 8016bf0:	4613      	mov	r3, r2
 8016bf2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f7f5 fd78 	bl	800c6ec <_lv_blend_fill>

            fill_area.y1++;
 8016bfc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016c00:	b29b      	uxth	r3, r3
 8016c02:	3301      	adds	r3, #1
 8016c04:	b29b      	uxth	r3, r3
 8016c06:	b21b      	sxth	r3, r3
 8016c08:	84fb      	strh	r3, [r7, #38]	; 0x26
            fill_area.y2++;
 8016c0a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8016c0e:	b29b      	uxth	r3, r3
 8016c10:	3301      	adds	r3, #1
 8016c12:	b29b      	uxth	r3, r3
 8016c14:	b21b      	sxth	r3, r3
 8016c16:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 8016c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016c1c:	3301      	adds	r3, #1
 8016c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016c22:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8016c26:	461a      	mov	r2, r3
 8016c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016c2c:	4293      	cmp	r3, r2
 8016c2e:	f77f af26 	ble.w	8016a7e <draw_full_border+0x48a>
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c38:	b29a      	uxth	r2, r3
 8016c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c3c:	b29b      	uxth	r3, r3
 8016c3e:	4413      	add	r3, r2
 8016c40:	b29b      	uxth	r3, r3
 8016c42:	3301      	adds	r3, #1
 8016c44:	b29b      	uxth	r3, r3
 8016c46:	b21b      	sxth	r3, r3
 8016c48:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 8016c4a:	68bb      	ldr	r3, [r7, #8]
 8016c4c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016c50:	b29a      	uxth	r2, r3
 8016c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c54:	b29b      	uxth	r3, r3
 8016c56:	1ad3      	subs	r3, r2, r3
 8016c58:	b29b      	uxth	r3, r3
 8016c5a:	3b01      	subs	r3, #1
 8016c5c:	b29b      	uxth	r3, r3
 8016c5e:	b21b      	sxth	r3, r3
 8016c60:	857b      	strh	r3, [r7, #42]	; 0x2a

        fill_area.x1 = area_outer->x1;
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c68:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x1 + border_width - 1;
 8016c6a:	68bb      	ldr	r3, [r7, #8]
 8016c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c70:	b29a      	uxth	r2, r3
 8016c72:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016c76:	4413      	add	r3, r2
 8016c78:	b29b      	uxth	r3, r3
 8016c7a:	3b01      	subs	r3, #1
 8016c7c:	b29b      	uxth	r3, r3
 8016c7e:	b21b      	sxth	r3, r3
 8016c80:	853b      	strh	r3, [r7, #40]	; 0x28
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 8016c82:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8016c86:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016c8a:	9302      	str	r3, [sp, #8]
 8016c8c:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016c90:	9301      	str	r3, [sp, #4]
 8016c92:	2301      	movs	r3, #1
 8016c94:	9300      	str	r3, [sp, #0]
 8016c96:	2300      	movs	r3, #0
 8016c98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016c9c:	6878      	ldr	r0, [r7, #4]
 8016c9e:	f7f5 fd25 	bl	800c6ec <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
 8016ca2:	68bb      	ldr	r3, [r7, #8]
 8016ca4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016ca8:	b29a      	uxth	r2, r3
 8016caa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016cae:	1ad3      	subs	r3, r2, r3
 8016cb0:	b29b      	uxth	r3, r3
 8016cb2:	3301      	adds	r3, #1
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	b21b      	sxth	r3, r3
 8016cb8:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x2;
 8016cba:	68bb      	ldr	r3, [r7, #8]
 8016cbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016cc0:	853b      	strh	r3, [r7, #40]	; 0x28

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 8016cc2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8016cc6:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016cca:	9302      	str	r3, [sp, #8]
 8016ccc:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016cd0:	9301      	str	r3, [sp, #4]
 8016cd2:	2301      	movs	r3, #1
 8016cd4:	9300      	str	r3, [sp, #0]
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016cdc:	6878      	ldr	r0, [r7, #4]
 8016cde:	f7f5 fd05 	bl	800c6ec <_lv_blend_fill>
 8016ce2:	e06b      	b.n	8016dbc <draw_full_border+0x7c8>
    }
    /*Process line by line if there is other mask too*/
    else {
        fill_area.x1 = area_outer->x1;
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cea:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x2;
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016cf2:	853b      	strh	r3, [r7, #40]	; 0x28
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8016cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016cf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016cfc:	b29a      	uxth	r2, r3
 8016cfe:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	4413      	add	r3, r2
 8016d06:	b29b      	uxth	r3, r3
 8016d08:	b21b      	sxth	r3, r3
 8016d0a:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = fill_area.y1;
 8016d0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016d10:	857b      	strh	r3, [r7, #42]	; 0x2a

        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8016d12:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016d16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016d1a:	e048      	b.n	8016dae <draw_full_border+0x7ba>
            _lv_memset_ff(mask_buf, draw_area_w);
 8016d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016d20:	4619      	mov	r1, r3
 8016d22:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016d24:	f006 fa9d 	bl	801d262 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8016d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016d2c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016d30:	b29a      	uxth	r2, r3
 8016d32:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016d36:	b29b      	uxth	r3, r3
 8016d38:	4413      	add	r3, r2
 8016d3a:	b29b      	uxth	r3, r3
 8016d3c:	b219      	sxth	r1, r3
 8016d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016d42:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016d46:	b29a      	uxth	r2, r3
 8016d48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016d4c:	b29b      	uxth	r3, r3
 8016d4e:	4413      	add	r3, r2
 8016d50:	b29b      	uxth	r3, r3
 8016d52:	b21a      	sxth	r2, r3
 8016d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016d58:	b21b      	sxth	r3, r3
 8016d5a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016d5c:	f7fa fef4 	bl	8011b48 <lv_draw_mask_apply>
 8016d60:	4603      	mov	r3, r0
 8016d62:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 8016d66:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8016d6a:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016d6e:	9302      	str	r3, [sp, #8]
 8016d70:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016d74:	9301      	str	r3, [sp, #4]
 8016d76:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016d7a:	9300      	str	r3, [sp, #0]
 8016d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016d7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	f7f5 fcb2 	bl	800c6ec <_lv_blend_fill>
            fill_area.y1++;
 8016d88:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	3301      	adds	r3, #1
 8016d90:	b29b      	uxth	r3, r3
 8016d92:	b21b      	sxth	r3, r3
 8016d94:	84fb      	strh	r3, [r7, #38]	; 0x26
            fill_area.y2++;
 8016d96:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8016d9a:	b29b      	uxth	r3, r3
 8016d9c:	3301      	adds	r3, #1
 8016d9e:	b29b      	uxth	r3, r3
 8016da0:	b21b      	sxth	r3, r3
 8016da2:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8016da4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016da8:	3301      	adds	r3, #1
 8016daa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016dae:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8016db2:	461a      	mov	r2, r3
 8016db4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016db8:	4293      	cmp	r3, r2
 8016dba:	ddaf      	ble.n	8016d1c <draw_full_border+0x728>

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
 8016dbc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f7fa ff05 	bl	8011bd0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 8016dc6:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f7fa ff00 	bl	8011bd0 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 8016dd0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016dd2:	f005 fe9b 	bl	801cb0c <_lv_mem_buf_release>
 8016dd6:	e000      	b.n	8016dda <draw_full_border+0x7e6>
    if(is_common == false) return;
 8016dd8:	bf00      	nop
}
 8016dda:	37d0      	adds	r7, #208	; 0xd0
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	bd80      	pop	{r7, pc}

08016de0 <lv_color_mix>:
{
 8016de0:	b480      	push	{r7}
 8016de2:	b087      	sub	sp, #28
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	60f8      	str	r0, [r7, #12]
 8016de8:	60b9      	str	r1, [r7, #8]
 8016dea:	4613      	mov	r3, r2
 8016dec:	71fb      	strb	r3, [r7, #7]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016dee:	7bbb      	ldrb	r3, [r7, #14]
 8016df0:	461a      	mov	r2, r3
 8016df2:	79fb      	ldrb	r3, [r7, #7]
 8016df4:	fb03 f202 	mul.w	r2, r3, r2
 8016df8:	7abb      	ldrb	r3, [r7, #10]
 8016dfa:	4619      	mov	r1, r3
 8016dfc:	79fb      	ldrb	r3, [r7, #7]
 8016dfe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016e02:	fb03 f301 	mul.w	r3, r3, r1
 8016e06:	4413      	add	r3, r2
 8016e08:	461a      	mov	r2, r3
 8016e0a:	4613      	mov	r3, r2
 8016e0c:	021b      	lsls	r3, r3, #8
 8016e0e:	4413      	add	r3, r2
 8016e10:	01db      	lsls	r3, r3, #7
 8016e12:	4413      	add	r3, r2
 8016e14:	0ddb      	lsrs	r3, r3, #23
 8016e16:	b2db      	uxtb	r3, r3
 8016e18:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8016e1a:	7b7b      	ldrb	r3, [r7, #13]
 8016e1c:	461a      	mov	r2, r3
 8016e1e:	79fb      	ldrb	r3, [r7, #7]
 8016e20:	fb03 f202 	mul.w	r2, r3, r2
 8016e24:	7a7b      	ldrb	r3, [r7, #9]
 8016e26:	4619      	mov	r1, r3
 8016e28:	79fb      	ldrb	r3, [r7, #7]
 8016e2a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016e2e:	fb03 f301 	mul.w	r3, r3, r1
 8016e32:	4413      	add	r3, r2
 8016e34:	461a      	mov	r2, r3
 8016e36:	4613      	mov	r3, r2
 8016e38:	021b      	lsls	r3, r3, #8
 8016e3a:	4413      	add	r3, r2
 8016e3c:	01db      	lsls	r3, r3, #7
 8016e3e:	4413      	add	r3, r2
 8016e40:	0ddb      	lsrs	r3, r3, #23
 8016e42:	b2db      	uxtb	r3, r3
 8016e44:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8016e46:	7b3b      	ldrb	r3, [r7, #12]
 8016e48:	461a      	mov	r2, r3
 8016e4a:	79fb      	ldrb	r3, [r7, #7]
 8016e4c:	fb03 f202 	mul.w	r2, r3, r2
 8016e50:	7a3b      	ldrb	r3, [r7, #8]
 8016e52:	4619      	mov	r1, r3
 8016e54:	79fb      	ldrb	r3, [r7, #7]
 8016e56:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016e5a:	fb03 f301 	mul.w	r3, r3, r1
 8016e5e:	4413      	add	r3, r2
 8016e60:	461a      	mov	r2, r3
 8016e62:	4613      	mov	r3, r2
 8016e64:	021b      	lsls	r3, r3, #8
 8016e66:	4413      	add	r3, r2
 8016e68:	01db      	lsls	r3, r3, #7
 8016e6a:	4413      	add	r3, r2
 8016e6c:	0ddb      	lsrs	r3, r3, #23
 8016e6e:	b2db      	uxtb	r3, r3
 8016e70:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 8016e72:	23ff      	movs	r3, #255	; 0xff
 8016e74:	75fb      	strb	r3, [r7, #23]
    return ret;
 8016e76:	697b      	ldr	r3, [r7, #20]
}
 8016e78:	4618      	mov	r0, r3
 8016e7a:	371c      	adds	r7, #28
 8016e7c:	46bd      	mov	sp, r7
 8016e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e82:	4770      	bx	lr

08016e84 <_lv_memcpy_small>:
{
 8016e84:	b480      	push	{r7}
 8016e86:	b087      	sub	sp, #28
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	60f8      	str	r0, [r7, #12]
 8016e8c:	60b9      	str	r1, [r7, #8]
 8016e8e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	613b      	str	r3, [r7, #16]
    while(len) {
 8016e98:	e00c      	b.n	8016eb4 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8016e9a:	693b      	ldr	r3, [r7, #16]
 8016e9c:	781a      	ldrb	r2, [r3, #0]
 8016e9e:	697b      	ldr	r3, [r7, #20]
 8016ea0:	701a      	strb	r2, [r3, #0]
        d8++;
 8016ea2:	697b      	ldr	r3, [r7, #20]
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	617b      	str	r3, [r7, #20]
        s8++;
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	3301      	adds	r3, #1
 8016eac:	613b      	str	r3, [r7, #16]
        len--;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	3b01      	subs	r3, #1
 8016eb2:	607b      	str	r3, [r7, #4]
    while(len) {
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d1ef      	bne.n	8016e9a <_lv_memcpy_small+0x16>
    return dst;
 8016eba:	68fb      	ldr	r3, [r7, #12]
}
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	371c      	adds	r7, #28
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec6:	4770      	bx	lr

08016ec8 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b090      	sub	sp, #64	; 0x40
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	60f8      	str	r0, [r7, #12]
 8016ed0:	607b      	str	r3, [r7, #4]
 8016ed2:	460b      	mov	r3, r1
 8016ed4:	817b      	strh	r3, [r7, #10]
 8016ed6:	4613      	mov	r3, r2
 8016ed8:	813b      	strh	r3, [r7, #8]
    lv_color_t p_color = LV_COLOR_BLACK;
 8016eda:	2300      	movs	r3, #0
 8016edc:	753b      	strb	r3, [r7, #20]
 8016ede:	2300      	movs	r3, #0
 8016ee0:	757b      	strb	r3, [r7, #21]
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	75bb      	strb	r3, [r7, #22]
 8016ee6:	23ff      	movs	r3, #255	; 0xff
 8016ee8:	75fb      	strb	r3, [r7, #23]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	689b      	ldr	r3, [r3, #8]
 8016eee:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	781b      	ldrb	r3, [r3, #0]
 8016ef4:	f003 031f 	and.w	r3, r3, #31
 8016ef8:	b2db      	uxtb	r3, r3
 8016efa:	2b04      	cmp	r3, #4
 8016efc:	d00d      	beq.n	8016f1a <lv_img_buf_get_px_color+0x52>
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	781b      	ldrb	r3, [r3, #0]
 8016f02:	f003 031f 	and.w	r3, r3, #31
 8016f06:	b2db      	uxtb	r3, r3
 8016f08:	2b06      	cmp	r3, #6
 8016f0a:	d006      	beq.n	8016f1a <lv_img_buf_get_px_color+0x52>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	781b      	ldrb	r3, [r3, #0]
 8016f10:	f003 031f 	and.w	r3, r3, #31
 8016f14:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8016f16:	2b05      	cmp	r3, #5
 8016f18:	d127      	bne.n	8016f6a <lv_img_buf_get_px_color+0xa2>
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	781b      	ldrb	r3, [r3, #0]
 8016f1e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8016f22:	b2db      	uxtb	r3, r3
 8016f24:	4618      	mov	r0, r3
 8016f26:	f7f7 f99f 	bl	800e268 <lv_img_cf_get_px_size>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	08db      	lsrs	r3, r3, #3
 8016f2e:	77fb      	strb	r3, [r7, #31]
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016f38:	b29b      	uxth	r3, r3
 8016f3a:	461a      	mov	r2, r3
 8016f3c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8016f40:	fb03 f202 	mul.w	r2, r3, r2
 8016f44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016f48:	4413      	add	r3, r2
 8016f4a:	7ffa      	ldrb	r2, [r7, #31]
 8016f4c:	fb02 f303 	mul.w	r3, r2, r3
 8016f50:	61bb      	str	r3, [r7, #24]
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 8016f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016f54:	69bb      	ldr	r3, [r7, #24]
 8016f56:	18d1      	adds	r1, r2, r3
 8016f58:	f107 0314 	add.w	r3, r7, #20
 8016f5c:	2204      	movs	r2, #4
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f7ff ff90 	bl	8016e84 <_lv_memcpy_small>
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
 8016f64:	23ff      	movs	r3, #255	; 0xff
 8016f66:	75fb      	strb	r3, [r7, #23]
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8016f68:	e0eb      	b.n	8017142 <lv_img_buf_get_px_color+0x27a>
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	781b      	ldrb	r3, [r3, #0]
 8016f6e:	f003 031f 	and.w	r3, r3, #31
 8016f72:	b2db      	uxtb	r3, r3
 8016f74:	2b07      	cmp	r3, #7
 8016f76:	d131      	bne.n	8016fdc <lv_img_buf_get_px_color+0x114>
        buf_u8 += 4 * 2;
 8016f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f7a:	3308      	adds	r3, #8
 8016f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t bit = x & 0x7;
 8016f7e:	897b      	ldrh	r3, [r7, #10]
 8016f80:	b2db      	uxtb	r3, r3
 8016f82:	f003 0307 	and.w	r3, r3, #7
 8016f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        x           = x >> 3;
 8016f8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016f8e:	10db      	asrs	r3, r3, #3
 8016f90:	817b      	strh	r3, [r7, #10]

        /* Get the current pixel.
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016f9a:	b29b      	uxth	r3, r3
 8016f9c:	3307      	adds	r3, #7
 8016f9e:	10db      	asrs	r3, r3, #3
 8016fa0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016fa4:	fb02 f203 	mul.w	r2, r2, r3
 8016fa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016fac:	4413      	add	r3, r2
 8016fae:	623b      	str	r3, [r7, #32]
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8016fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016fb2:	6a3b      	ldr	r3, [r7, #32]
 8016fb4:	4413      	add	r3, r2
 8016fb6:	781b      	ldrb	r3, [r3, #0]
 8016fb8:	4619      	mov	r1, r3
 8016fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fbe:	f1c3 0307 	rsb	r3, r3, #7
 8016fc2:	2201      	movs	r2, #1
 8016fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8016fc8:	ea01 0203 	and.w	r2, r1, r3
 8016fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fd0:	f1c3 0307 	rsb	r3, r3, #7
 8016fd4:	fa42 f303 	asr.w	r3, r2, r3
 8016fd8:	617b      	str	r3, [r7, #20]
 8016fda:	e0b2      	b.n	8017142 <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	781b      	ldrb	r3, [r3, #0]
 8016fe0:	f003 031f 	and.w	r3, r3, #31
 8016fe4:	b2db      	uxtb	r3, r3
 8016fe6:	2b08      	cmp	r3, #8
 8016fe8:	d133      	bne.n	8017052 <lv_img_buf_get_px_color+0x18a>
        buf_u8 += 4 * 4;
 8016fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fec:	3310      	adds	r3, #16
 8016fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t bit = (x & 0x3) * 2;
 8016ff0:	897b      	ldrh	r3, [r7, #10]
 8016ff2:	b2db      	uxtb	r3, r3
 8016ff4:	f003 0303 	and.w	r3, r3, #3
 8016ff8:	b2db      	uxtb	r3, r3
 8016ffa:	005b      	lsls	r3, r3, #1
 8016ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        x           = x >> 2;
 8017000:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017004:	109b      	asrs	r3, r3, #2
 8017006:	817b      	strh	r3, [r7, #10]

        /* Get the current pixel.
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8017010:	b29b      	uxth	r3, r3
 8017012:	3303      	adds	r3, #3
 8017014:	109b      	asrs	r3, r3, #2
 8017016:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801701a:	fb02 f203 	mul.w	r2, r2, r3
 801701e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017022:	4413      	add	r3, r2
 8017024:	62bb      	str	r3, [r7, #40]	; 0x28
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 8017026:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801702a:	4413      	add	r3, r2
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	4619      	mov	r1, r3
 8017030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017034:	f1c3 0306 	rsb	r3, r3, #6
 8017038:	2203      	movs	r2, #3
 801703a:	fa02 f303 	lsl.w	r3, r2, r3
 801703e:	ea01 0203 	and.w	r2, r1, r3
 8017042:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017046:	f1c3 0306 	rsb	r3, r3, #6
 801704a:	fa42 f303 	asr.w	r3, r2, r3
 801704e:	617b      	str	r3, [r7, #20]
 8017050:	e077      	b.n	8017142 <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	781b      	ldrb	r3, [r3, #0]
 8017056:	f003 031f 	and.w	r3, r3, #31
 801705a:	b2db      	uxtb	r3, r3
 801705c:	2b09      	cmp	r3, #9
 801705e:	d133      	bne.n	80170c8 <lv_img_buf_get_px_color+0x200>
        buf_u8 += 4 * 16;
 8017060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017062:	3340      	adds	r3, #64	; 0x40
 8017064:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t bit = (x & 0x1) * 4;
 8017066:	897b      	ldrh	r3, [r7, #10]
 8017068:	b2db      	uxtb	r3, r3
 801706a:	f003 0301 	and.w	r3, r3, #1
 801706e:	b2db      	uxtb	r3, r3
 8017070:	009b      	lsls	r3, r3, #2
 8017072:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        x           = x >> 1;
 8017076:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801707a:	105b      	asrs	r3, r3, #1
 801707c:	817b      	strh	r3, [r7, #10]

        /* Get the current pixel.
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8017086:	b29b      	uxth	r3, r3
 8017088:	3301      	adds	r3, #1
 801708a:	105b      	asrs	r3, r3, #1
 801708c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8017090:	fb02 f203 	mul.w	r2, r2, r3
 8017094:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017098:	4413      	add	r3, r2
 801709a:	633b      	str	r3, [r7, #48]	; 0x30
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 801709c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a0:	4413      	add	r3, r2
 80170a2:	781b      	ldrb	r3, [r3, #0]
 80170a4:	4619      	mov	r1, r3
 80170a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80170aa:	f1c3 0304 	rsb	r3, r3, #4
 80170ae:	220f      	movs	r2, #15
 80170b0:	fa02 f303 	lsl.w	r3, r2, r3
 80170b4:	ea01 0203 	and.w	r2, r1, r3
 80170b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80170bc:	f1c3 0304 	rsb	r3, r3, #4
 80170c0:	fa42 f303 	asr.w	r3, r2, r3
 80170c4:	617b      	str	r3, [r7, #20]
 80170c6:	e03c      	b.n	8017142 <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	781b      	ldrb	r3, [r3, #0]
 80170cc:	f003 031f 	and.w	r3, r3, #31
 80170d0:	b2db      	uxtb	r3, r3
 80170d2:	2b0a      	cmp	r3, #10
 80170d4:	d117      	bne.n	8017106 <lv_img_buf_get_px_color+0x23e>
        buf_u8 += 4 * 256;
 80170d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80170dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint32_t px  = dsc->header.w * y + x;
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	461a      	mov	r2, r3
 80170ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80170ee:	fb03 f202 	mul.w	r2, r3, r2
 80170f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80170f6:	4413      	add	r3, r2
 80170f8:	63bb      	str	r3, [r7, #56]	; 0x38
        p_color.full = buf_u8[px];
 80170fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80170fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170fe:	4413      	add	r3, r2
 8017100:	781b      	ldrb	r3, [r3, #0]
 8017102:	617b      	str	r3, [r7, #20]
 8017104:	e01d      	b.n	8017142 <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	781b      	ldrb	r3, [r3, #0]
 801710a:	f003 031f 	and.w	r3, r3, #31
 801710e:	b2db      	uxtb	r3, r3
 8017110:	2b0b      	cmp	r3, #11
 8017112:	d014      	beq.n	801713e <lv_img_buf_get_px_color+0x276>
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	f003 031f 	and.w	r3, r3, #31
 801711c:	b2db      	uxtb	r3, r3
 801711e:	2b0c      	cmp	r3, #12
 8017120:	d00d      	beq.n	801713e <lv_img_buf_get_px_color+0x276>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	781b      	ldrb	r3, [r3, #0]
 8017126:	f003 031f 	and.w	r3, r3, #31
 801712a:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 801712c:	2b0d      	cmp	r3, #13
 801712e:	d006      	beq.n	801713e <lv_img_buf_get_px_color+0x276>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	781b      	ldrb	r3, [r3, #0]
 8017134:	f003 031f 	and.w	r3, r3, #31
 8017138:	b2db      	uxtb	r3, r3
 801713a:	2b0e      	cmp	r3, #14
 801713c:	d101      	bne.n	8017142 <lv_img_buf_get_px_color+0x27a>
        p_color = color;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	617b      	str	r3, [r7, #20]
    }
    return p_color;
 8017142:	697b      	ldr	r3, [r7, #20]
}
 8017144:	4618      	mov	r0, r3
 8017146:	3740      	adds	r7, #64	; 0x40
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}

0801714c <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 801714c:	b490      	push	{r4, r7}
 801714e:	b092      	sub	sp, #72	; 0x48
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
 8017154:	460b      	mov	r3, r1
 8017156:	807b      	strh	r3, [r7, #2]
 8017158:	4613      	mov	r3, r2
 801715a:	803b      	strh	r3, [r7, #0]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	689b      	ldr	r3, [r3, #8]
 8017160:	647b      	str	r3, [r7, #68]	; 0x44

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	f003 031f 	and.w	r3, r3, #31
 801716a:	b2db      	uxtb	r3, r3
 801716c:	2b05      	cmp	r3, #5
 801716e:	d114      	bne.n	801719a <lv_img_buf_get_px_alpha+0x4e>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8017178:	b29b      	uxth	r3, r3
 801717a:	461a      	mov	r2, r3
 801717c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017180:	fb03 f202 	mul.w	r2, r3, r2
 8017184:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017188:	4413      	add	r3, r2
 801718a:	009b      	lsls	r3, r3, #2
 801718c:	623b      	str	r3, [r7, #32]
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801718e:	6a3b      	ldr	r3, [r7, #32]
 8017190:	3303      	adds	r3, #3
 8017192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017194:	4413      	add	r3, r2
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	e0e1      	b.n	801735e <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	781b      	ldrb	r3, [r3, #0]
 801719e:	f003 031f 	and.w	r3, r3, #31
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	2b0b      	cmp	r3, #11
 80171a6:	d136      	bne.n	8017216 <lv_img_buf_get_px_alpha+0xca>
        uint8_t bit = x & 0x7;
 80171a8:	887b      	ldrh	r3, [r7, #2]
 80171aa:	b2db      	uxtb	r3, r3
 80171ac:	f003 0307 	and.w	r3, r3, #7
 80171b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        x           = x >> 3;
 80171b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80171b8:	10db      	asrs	r3, r3, #3
 80171ba:	807b      	strh	r3, [r7, #2]

        /* Get the current pixel.
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80171c4:	b29b      	uxth	r3, r3
 80171c6:	3307      	adds	r3, #7
 80171c8:	10db      	asrs	r3, r3, #3
 80171ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80171ce:	fb02 f203 	mul.w	r2, r2, r3
 80171d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80171d6:	4413      	add	r3, r2
 80171d8:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 80171da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80171dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171de:	4413      	add	r3, r2
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	4619      	mov	r1, r3
 80171e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80171e8:	f1c3 0307 	rsb	r3, r3, #7
 80171ec:	2201      	movs	r2, #1
 80171ee:	fa02 f303 	lsl.w	r3, r2, r3
 80171f2:	ea01 0203 	and.w	r2, r1, r3
 80171f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80171fa:	f1c3 0307 	rsb	r3, r3, #7
 80171fe:	fa42 f303 	asr.w	r3, r2, r3
 8017202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 8017206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801720a:	2b00      	cmp	r3, #0
 801720c:	d001      	beq.n	8017212 <lv_img_buf_get_px_alpha+0xc6>
 801720e:	2300      	movs	r3, #0
 8017210:	e0a5      	b.n	801735e <lv_img_buf_get_px_alpha+0x212>
 8017212:	23ff      	movs	r3, #255	; 0xff
 8017214:	e0a3      	b.n	801735e <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	f003 031f 	and.w	r3, r3, #31
 801721e:	b2db      	uxtb	r3, r3
 8017220:	2b0c      	cmp	r3, #12
 8017222:	d13b      	bne.n	801729c <lv_img_buf_get_px_alpha+0x150>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8017224:	4b50      	ldr	r3, [pc, #320]	; (8017368 <lv_img_buf_get_px_alpha+0x21c>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	61fb      	str	r3, [r7, #28]

        uint8_t bit = (x & 0x3) * 2;
 801722a:	887b      	ldrh	r3, [r7, #2]
 801722c:	b2db      	uxtb	r3, r3
 801722e:	f003 0303 	and.w	r3, r3, #3
 8017232:	b2db      	uxtb	r3, r3
 8017234:	005b      	lsls	r3, r3, #1
 8017236:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        x           = x >> 2;
 801723a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801723e:	109b      	asrs	r3, r3, #2
 8017240:	807b      	strh	r3, [r7, #2]

        /* Get the current pixel.
         * dsc->header.w + 4 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801724a:	b29b      	uxth	r3, r3
 801724c:	3303      	adds	r3, #3
 801724e:	109b      	asrs	r3, r3, #2
 8017250:	f9b7 2000 	ldrsh.w	r2, [r7]
 8017254:	fb02 f203 	mul.w	r2, r2, r3
 8017258:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801725c:	4413      	add	r3, r2
 801725e:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 8017260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017264:	4413      	add	r3, r2
 8017266:	781b      	ldrb	r3, [r3, #0]
 8017268:	4619      	mov	r1, r3
 801726a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801726e:	f1c3 0306 	rsb	r3, r3, #6
 8017272:	2203      	movs	r2, #3
 8017274:	fa02 f303 	lsl.w	r3, r2, r3
 8017278:	ea01 0203 	and.w	r2, r1, r3
 801727c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017280:	f1c3 0306 	rsb	r3, r3, #6
 8017284:	fa42 f303 	asr.w	r3, r2, r3
 8017288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        return opa_table[px_opa];
 801728c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017290:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017294:	4413      	add	r3, r2
 8017296:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 801729a:	e060      	b.n	801735e <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	781b      	ldrb	r3, [r3, #0]
 80172a0:	f003 031f 	and.w	r3, r3, #31
 80172a4:	b2db      	uxtb	r3, r3
 80172a6:	2b0d      	cmp	r3, #13
 80172a8:	d13e      	bne.n	8017328 <lv_img_buf_get_px_alpha+0x1dc>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 80172aa:	4b30      	ldr	r3, [pc, #192]	; (801736c <lv_img_buf_get_px_alpha+0x220>)
 80172ac:	f107 040c 	add.w	r4, r7, #12
 80172b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80172b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                       68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                      };

        uint8_t bit = (x & 0x1) * 4;
 80172b6:	887b      	ldrh	r3, [r7, #2]
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	f003 0301 	and.w	r3, r3, #1
 80172be:	b2db      	uxtb	r3, r3
 80172c0:	009b      	lsls	r3, r3, #2
 80172c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        x           = x >> 1;
 80172c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80172ca:	105b      	asrs	r3, r3, #1
 80172cc:	807b      	strh	r3, [r7, #2]

        /* Get the current pixel.
         * dsc->header.w + 1 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80172d6:	b29b      	uxth	r3, r3
 80172d8:	3301      	adds	r3, #1
 80172da:	105b      	asrs	r3, r3, #1
 80172dc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80172e0:	fb02 f203 	mul.w	r2, r2, r3
 80172e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80172e8:	4413      	add	r3, r2
 80172ea:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 80172ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80172ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f0:	4413      	add	r3, r2
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	4619      	mov	r1, r3
 80172f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80172fa:	f1c3 0304 	rsb	r3, r3, #4
 80172fe:	220f      	movs	r2, #15
 8017300:	fa02 f303 	lsl.w	r3, r2, r3
 8017304:	ea01 0203 	and.w	r2, r1, r3
 8017308:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801730c:	f1c3 0304 	rsb	r3, r3, #4
 8017310:	fa42 f303 	asr.w	r3, r2, r3
 8017314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        return opa_table[px_opa];
 8017318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801731c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017320:	4413      	add	r3, r2
 8017322:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8017326:	e01a      	b.n	801735e <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	781b      	ldrb	r3, [r3, #0]
 801732c:	f003 031f 	and.w	r3, r3, #31
 8017330:	b2db      	uxtb	r3, r3
 8017332:	2b0e      	cmp	r3, #14
 8017334:	d112      	bne.n	801735c <lv_img_buf_get_px_alpha+0x210>
        uint32_t px = dsc->header.w * y + x;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801733e:	b29b      	uxth	r3, r3
 8017340:	461a      	mov	r2, r3
 8017342:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017346:	fb03 f202 	mul.w	r2, r3, r2
 801734a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801734e:	4413      	add	r3, r2
 8017350:	643b      	str	r3, [r7, #64]	; 0x40
        return buf_u8[px];
 8017352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017356:	4413      	add	r3, r2
 8017358:	781b      	ldrb	r3, [r3, #0]
 801735a:	e000      	b.n	801735e <lv_img_buf_get_px_alpha+0x212>
    }

    return LV_OPA_COVER;
 801735c:	23ff      	movs	r3, #255	; 0xff
}
 801735e:	4618      	mov	r0, r3
 8017360:	3748      	adds	r7, #72	; 0x48
 8017362:	46bd      	mov	sp, r7
 8017364:	bc90      	pop	{r4, r7}
 8017366:	4770      	bx	lr
 8017368:	0802d0e8 	.word	0x0802d0e8
 801736c:	0802d0ec 	.word	0x0802d0ec

08017370 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b08a      	sub	sp, #40	; 0x28
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801737e:	021a      	lsls	r2, r3, #8
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	62da      	str	r2, [r3, #44]	; 0x2c
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801738a:	021a      	lsls	r2, r3, #8
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	631a      	str	r2, [r3, #48]	; 0x30

    int32_t angle_low = dsc->cfg.angle / 10;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8017396:	4a76      	ldr	r2, [pc, #472]	; (8017570 <_lv_img_buf_transform_init+0x200>)
 8017398:	fb82 1203 	smull	r1, r2, r2, r3
 801739c:	1092      	asrs	r2, r2, #2
 801739e:	17db      	asrs	r3, r3, #31
 80173a0:	1ad3      	subs	r3, r2, r3
 80173a2:	b21b      	sxth	r3, r3
 80173a4:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t angle_high = angle_low + 1;
 80173a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a8:	3301      	adds	r3, #1
 80173aa:	623b      	str	r3, [r7, #32]
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80173b2:	4619      	mov	r1, r3
 80173b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b6:	f06f 0209 	mvn.w	r2, #9
 80173ba:	fb02 f303 	mul.w	r3, r2, r3
 80173be:	440b      	add	r3, r1
 80173c0:	61fb      	str	r3, [r7, #28]

    int32_t s1 = _lv_trigo_sin(-angle_low);
 80173c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	425b      	negs	r3, r3
 80173c8:	b29b      	uxth	r3, r3
 80173ca:	b21b      	sxth	r3, r3
 80173cc:	4618      	mov	r0, r3
 80173ce:	f005 f89b 	bl	801c508 <_lv_trigo_sin>
 80173d2:	4603      	mov	r3, r0
 80173d4:	61bb      	str	r3, [r7, #24]
    int32_t s2 = _lv_trigo_sin(-angle_high);
 80173d6:	6a3b      	ldr	r3, [r7, #32]
 80173d8:	b29b      	uxth	r3, r3
 80173da:	425b      	negs	r3, r3
 80173dc:	b29b      	uxth	r3, r3
 80173de:	b21b      	sxth	r3, r3
 80173e0:	4618      	mov	r0, r3
 80173e2:	f005 f891 	bl	801c508 <_lv_trigo_sin>
 80173e6:	4603      	mov	r3, r0
 80173e8:	617b      	str	r3, [r7, #20]

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
 80173ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ec:	b29b      	uxth	r3, r3
 80173ee:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	b21b      	sxth	r3, r3
 80173f6:	4618      	mov	r0, r3
 80173f8:	f005 f886 	bl	801c508 <_lv_trigo_sin>
 80173fc:	4603      	mov	r3, r0
 80173fe:	613b      	str	r3, [r7, #16]
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
 8017400:	6a3b      	ldr	r3, [r7, #32]
 8017402:	b29b      	uxth	r3, r3
 8017404:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8017408:	b29b      	uxth	r3, r3
 801740a:	b21b      	sxth	r3, r3
 801740c:	4618      	mov	r0, r3
 801740e:	f005 f87b 	bl	801c508 <_lv_trigo_sin>
 8017412:	4603      	mov	r3, r0
 8017414:	60fb      	str	r3, [r7, #12]

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8017416:	69fb      	ldr	r3, [r7, #28]
 8017418:	f1c3 030a 	rsb	r3, r3, #10
 801741c:	69ba      	ldr	r2, [r7, #24]
 801741e:	fb02 f203 	mul.w	r2, r2, r3
 8017422:	697b      	ldr	r3, [r7, #20]
 8017424:	69f9      	ldr	r1, [r7, #28]
 8017426:	fb01 f303 	mul.w	r3, r1, r3
 801742a:	4413      	add	r3, r2
 801742c:	4a50      	ldr	r2, [pc, #320]	; (8017570 <_lv_img_buf_transform_init+0x200>)
 801742e:	fb82 1203 	smull	r1, r2, r2, r3
 8017432:	1092      	asrs	r2, r2, #2
 8017434:	17db      	asrs	r3, r3, #31
 8017436:	1ad2      	subs	r2, r2, r3
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	635a      	str	r2, [r3, #52]	; 0x34
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801743c:	69fb      	ldr	r3, [r7, #28]
 801743e:	f1c3 030a 	rsb	r3, r3, #10
 8017442:	693a      	ldr	r2, [r7, #16]
 8017444:	fb02 f203 	mul.w	r2, r2, r3
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	69f9      	ldr	r1, [r7, #28]
 801744c:	fb01 f303 	mul.w	r3, r1, r3
 8017450:	4413      	add	r3, r2
 8017452:	4a47      	ldr	r2, [pc, #284]	; (8017570 <_lv_img_buf_transform_init+0x200>)
 8017454:	fb82 1203 	smull	r1, r2, r2, r3
 8017458:	1092      	asrs	r2, r2, #2
 801745a:	17db      	asrs	r3, r3, #31
 801745c:	1ad2      	subs	r2, r2, r3
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	639a      	str	r2, [r3, #56]	; 0x38

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017466:	115a      	asrs	r2, r3, #5
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	635a      	str	r2, [r3, #52]	; 0x34
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017470:	115a      	asrs	r2, r3, #5
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	639a      	str	r2, [r3, #56]	; 0x38

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	7d1b      	ldrb	r3, [r3, #20]
 801747a:	4618      	mov	r0, r3
 801747c:	f7f6 ff40 	bl	800e300 <lv_img_cf_is_chroma_keyed>
 8017480:	4603      	mov	r3, r0
 8017482:	4619      	mov	r1, r3
 8017484:	687a      	ldr	r2, [r7, #4]
 8017486:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 801748a:	f361 0300 	bfi	r3, r1, #0, #1
 801748e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	7d1b      	ldrb	r3, [r3, #20]
 8017496:	4618      	mov	r0, r3
 8017498:	f7f6 ff4e 	bl	800e338 <lv_img_cf_has_alpha>
 801749c:	4603      	mov	r3, r0
 801749e:	4619      	mov	r1, r3
 80174a0:	687a      	ldr	r2, [r7, #4]
 80174a2:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80174a6:	f361 0341 	bfi	r3, r1, #1, #1
 80174aa:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	7d1b      	ldrb	r3, [r3, #20]
 80174b2:	2b04      	cmp	r3, #4
 80174b4:	d007      	beq.n	80174c6 <_lv_img_buf_transform_init+0x156>
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	7d1b      	ldrb	r3, [r3, #20]
 80174ba:	2b05      	cmp	r3, #5
 80174bc:	d003      	beq.n	80174c6 <_lv_img_buf_transform_init+0x156>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	7d1b      	ldrb	r3, [r3, #20]
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80174c2:	2b06      	cmp	r3, #6
 80174c4:	d107      	bne.n	80174d6 <_lv_img_buf_transform_init+0x166>
        dsc->tmp.native_color = 1;
 80174c6:	687a      	ldr	r2, [r7, #4]
 80174c8:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80174cc:	f043 0304 	orr.w	r3, r3, #4
 80174d0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 80174d4:	e006      	b.n	80174e4 <_lv_img_buf_transform_init+0x174>
    }
    else {
        dsc->tmp.native_color = 0;
 80174d6:	687a      	ldr	r2, [r7, #4]
 80174d8:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80174dc:	f36f 0382 	bfc	r3, #2, #1
 80174e0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681a      	ldr	r2, [r3, #0]
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	629a      	str	r2, [r3, #40]	; 0x28
    dsc->tmp.img_dsc.header.always_zero = 0;
 80174ec:	687a      	ldr	r2, [r7, #4]
 80174ee:	f892 3020 	ldrb.w	r3, [r2, #32]
 80174f2:	f36f 1347 	bfc	r3, #5, #3
 80174f6:	f882 3020 	strb.w	r3, [r2, #32]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	7d1b      	ldrb	r3, [r3, #20]
 80174fe:	f003 031f 	and.w	r3, r3, #31
 8017502:	b2d9      	uxtb	r1, r3
 8017504:	687a      	ldr	r2, [r7, #4]
 8017506:	f892 3020 	ldrb.w	r3, [r2, #32]
 801750a:	f361 0304 	bfi	r3, r1, #0, #5
 801750e:	f882 3020 	strb.w	r3, [r2, #32]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801751c:	b299      	uxth	r1, r3
 801751e:	687a      	ldr	r2, [r7, #4]
 8017520:	6a13      	ldr	r3, [r2, #32]
 8017522:	f361 2394 	bfi	r3, r1, #10, #11
 8017526:	6213      	str	r3, [r2, #32]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801752e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017532:	b299      	uxth	r1, r3
 8017534:	687a      	ldr	r2, [r7, #4]
 8017536:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8017538:	f361 134f 	bfi	r3, r1, #5, #11
 801753c:	8453      	strh	r3, [r2, #34]	; 0x22

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	89db      	ldrh	r3, [r3, #14]
 8017542:	085b      	lsrs	r3, r3, #1
 8017544:	b29b      	uxth	r3, r3
 8017546:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801754a:	687a      	ldr	r2, [r7, #4]
 801754c:	89d2      	ldrh	r2, [r2, #14]
 801754e:	fb93 f3f2 	sdiv	r3, r3, r2
 8017552:	461a      	mov	r2, r3
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	641a      	str	r2, [r3, #64]	; 0x40

    dsc->res.opa = LV_OPA_COVER;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	22ff      	movs	r2, #255	; 0xff
 801755c:	771a      	strb	r2, [r3, #28]
    dsc->res.color = dsc->cfg.color;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	687a      	ldr	r2, [r7, #4]
 8017562:	6912      	ldr	r2, [r2, #16]
 8017564:	619a      	str	r2, [r3, #24]
}
 8017566:	bf00      	nop
 8017568:	3728      	adds	r7, #40	; 0x28
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}
 801756e:	bf00      	nop
 8017570:	66666667 	.word	0x66666667

08017574 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b092      	sub	sp, #72	; 0x48
 8017578:	af00      	add	r7, sp, #0
 801757a:	60f8      	str	r0, [r7, #12]
 801757c:	4608      	mov	r0, r1
 801757e:	4611      	mov	r1, r2
 8017580:	461a      	mov	r2, r3
 8017582:	4603      	mov	r3, r0
 8017584:	817b      	strh	r3, [r7, #10]
 8017586:	460b      	mov	r3, r1
 8017588:	813b      	strh	r3, [r7, #8]
 801758a:	4613      	mov	r3, r2
 801758c:	80fb      	strh	r3, [r7, #6]
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 801758e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d117      	bne.n	80175c6 <_lv_img_buf_get_transformed_area+0x52>
 8017596:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801759a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801759e:	d112      	bne.n	80175c6 <_lv_img_buf_get_transformed_area+0x52>
        res->x1 = 0;
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	2200      	movs	r2, #0
 80175a4:	801a      	strh	r2, [r3, #0]
        res->y1 = 0;
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	2200      	movs	r2, #0
 80175aa:	805a      	strh	r2, [r3, #2]
        res->x2 = w - 1;
 80175ac:	897b      	ldrh	r3, [r7, #10]
 80175ae:	3b01      	subs	r3, #1
 80175b0:	b29b      	uxth	r3, r3
 80175b2:	b21a      	sxth	r2, r3
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	809a      	strh	r2, [r3, #4]
        res->y2 = h - 1;
 80175b8:	893b      	ldrh	r3, [r7, #8]
 80175ba:	3b01      	subs	r3, #1
 80175bc:	b29b      	uxth	r3, r3
 80175be:	b21a      	sxth	r2, r3
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	80da      	strh	r2, [r3, #6]
        return;
 80175c4:	e1f6      	b.n	80179b4 <_lv_img_buf_get_transformed_area+0x440>
    }

    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 80175c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175cc:	425b      	negs	r3, r3
 80175ce:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80175d2:	fb02 f303 	mul.w	r3, r2, r3
 80175d6:	121b      	asrs	r3, r3, #8
 80175d8:	b29b      	uxth	r3, r3
 80175da:	3b01      	subs	r3, #1
 80175dc:	b29b      	uxth	r3, r3
 80175de:	b21a      	sxth	r2, r3
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	801a      	strh	r2, [r3, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 80175e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80175ea:	425b      	negs	r3, r3
 80175ec:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80175f0:	fb02 f303 	mul.w	r3, r2, r3
 80175f4:	121b      	asrs	r3, r3, #8
 80175f6:	b29b      	uxth	r3, r3
 80175f8:	3b01      	subs	r3, #1
 80175fa:	b29b      	uxth	r3, r3
 80175fc:	b21a      	sxth	r2, r3
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	805a      	strh	r2, [r3, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 8017602:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017606:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017608:	f9b2 2000 	ldrsh.w	r2, [r2]
 801760c:	1a9b      	subs	r3, r3, r2
 801760e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8017612:	fb02 f303 	mul.w	r3, r2, r3
 8017616:	121b      	asrs	r3, r3, #8
 8017618:	b29b      	uxth	r3, r3
 801761a:	3302      	adds	r3, #2
 801761c:	b29b      	uxth	r3, r3
 801761e:	b21a      	sxth	r2, r3
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	809a      	strh	r2, [r3, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 8017624:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801762a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801762e:	1a9b      	subs	r3, r3, r2
 8017630:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8017634:	fb02 f303 	mul.w	r3, r2, r3
 8017638:	121b      	asrs	r3, r3, #8
 801763a:	b29b      	uxth	r3, r3
 801763c:	3302      	adds	r3, #2
 801763e:	b29b      	uxth	r3, r3
 8017640:	b21a      	sxth	r2, r3
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	80da      	strh	r2, [r3, #6]

    if(angle == 0) {
 8017646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d134      	bne.n	80176b8 <_lv_img_buf_get_transformed_area+0x144>
        res->x1 += pivot->x;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017654:	b29a      	uxth	r2, r3
 8017656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017658:	f9b3 3000 	ldrsh.w	r3, [r3]
 801765c:	b29b      	uxth	r3, r3
 801765e:	4413      	add	r3, r2
 8017660:	b29b      	uxth	r3, r3
 8017662:	b21a      	sxth	r2, r3
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	801a      	strh	r2, [r3, #0]
        res->y1 += pivot->y;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801766e:	b29a      	uxth	r2, r3
 8017670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017672:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017676:	b29b      	uxth	r3, r3
 8017678:	4413      	add	r3, r2
 801767a:	b29b      	uxth	r3, r3
 801767c:	b21a      	sxth	r2, r3
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	805a      	strh	r2, [r3, #2]
        res->x2 += pivot->x;
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017688:	b29a      	uxth	r2, r3
 801768a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801768c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017690:	b29b      	uxth	r3, r3
 8017692:	4413      	add	r3, r2
 8017694:	b29b      	uxth	r3, r3
 8017696:	b21a      	sxth	r2, r3
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	809a      	strh	r2, [r3, #4]
        res->y2 += pivot->y;
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80176a2:	b29a      	uxth	r2, r3
 80176a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80176aa:	b29b      	uxth	r3, r3
 80176ac:	4413      	add	r3, r2
 80176ae:	b29b      	uxth	r3, r3
 80176b0:	b21a      	sxth	r2, r3
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	80da      	strh	r2, [r3, #6]
        return;
 80176b6:	e17d      	b.n	80179b4 <_lv_img_buf_get_transformed_area+0x440>
    }

    int32_t angle_low = angle / 10;
 80176b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80176bc:	4ab6      	ldr	r2, [pc, #728]	; (8017998 <_lv_img_buf_get_transformed_area+0x424>)
 80176be:	fb82 1203 	smull	r1, r2, r2, r3
 80176c2:	1092      	asrs	r2, r2, #2
 80176c4:	17db      	asrs	r3, r3, #31
 80176c6:	1ad3      	subs	r3, r2, r3
 80176c8:	b21b      	sxth	r3, r3
 80176ca:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t angle_high = angle_low + 1;
 80176cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176ce:	3301      	adds	r3, #1
 80176d0:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t angle_rem = angle  - (angle_low * 10);
 80176d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80176d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176d8:	f06f 0109 	mvn.w	r1, #9
 80176dc:	fb01 f303 	mul.w	r3, r1, r3
 80176e0:	4413      	add	r3, r2
 80176e2:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t s1 = _lv_trigo_sin(angle_low);
 80176e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176e6:	b21b      	sxth	r3, r3
 80176e8:	4618      	mov	r0, r3
 80176ea:	f004 ff0d 	bl	801c508 <_lv_trigo_sin>
 80176ee:	4603      	mov	r3, r0
 80176f0:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t s2 = _lv_trigo_sin(angle_high);
 80176f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80176f4:	b21b      	sxth	r3, r3
 80176f6:	4618      	mov	r0, r3
 80176f8:	f004 ff06 	bl	801c508 <_lv_trigo_sin>
 80176fc:	4603      	mov	r3, r0
 80176fe:	637b      	str	r3, [r7, #52]	; 0x34

    int32_t c1 = _lv_trigo_sin(angle_low + 90);
 8017700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017702:	b29b      	uxth	r3, r3
 8017704:	335a      	adds	r3, #90	; 0x5a
 8017706:	b29b      	uxth	r3, r3
 8017708:	b21b      	sxth	r3, r3
 801770a:	4618      	mov	r0, r3
 801770c:	f004 fefc 	bl	801c508 <_lv_trigo_sin>
 8017710:	4603      	mov	r3, r0
 8017712:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
 8017714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017716:	b29b      	uxth	r3, r3
 8017718:	335a      	adds	r3, #90	; 0x5a
 801771a:	b29b      	uxth	r3, r3
 801771c:	b21b      	sxth	r3, r3
 801771e:	4618      	mov	r0, r3
 8017720:	f004 fef2 	bl	801c508 <_lv_trigo_sin>
 8017724:	4603      	mov	r3, r0
 8017726:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8017728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801772a:	f1c3 030a 	rsb	r3, r3, #10
 801772e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017730:	fb02 f203 	mul.w	r2, r2, r3
 8017734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017736:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017738:	fb01 f303 	mul.w	r3, r1, r3
 801773c:	4413      	add	r3, r2
 801773e:	4a96      	ldr	r2, [pc, #600]	; (8017998 <_lv_img_buf_get_transformed_area+0x424>)
 8017740:	fb82 1203 	smull	r1, r2, r2, r3
 8017744:	1092      	asrs	r2, r2, #2
 8017746:	17db      	asrs	r3, r3, #31
 8017748:	1ad3      	subs	r3, r2, r3
 801774a:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801774c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801774e:	f1c3 030a 	rsb	r3, r3, #10
 8017752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017754:	fb02 f203 	mul.w	r2, r2, r3
 8017758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801775a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801775c:	fb01 f303 	mul.w	r3, r1, r3
 8017760:	4413      	add	r3, r2
 8017762:	4a8d      	ldr	r2, [pc, #564]	; (8017998 <_lv_img_buf_get_transformed_area+0x424>)
 8017764:	fb82 1203 	smull	r1, r2, r2, r3
 8017768:	1092      	asrs	r2, r2, #2
 801776a:	17db      	asrs	r3, r3, #31
 801776c:	1ad3      	subs	r3, r2, r3
 801776e:	627b      	str	r3, [r7, #36]	; 0x24

    /*Use smaller value to avoid overflow*/
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8017770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017772:	115b      	asrs	r3, r3, #5
 8017774:	62bb      	str	r3, [r7, #40]	; 0x28
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8017776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017778:	115b      	asrs	r3, r3, #5
 801777a:	627b      	str	r3, [r7, #36]	; 0x24
    lv_point_t rb;

    lv_coord_t xt;
    lv_coord_t yt;

    xt = res->x1;
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	881b      	ldrh	r3, [r3, #0]
 8017780:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y1;
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	885b      	ldrh	r3, [r3, #2]
 8017786:	843b      	strh	r3, [r7, #32]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8017788:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801778c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801778e:	fb02 f203 	mul.w	r2, r2, r3
 8017792:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017798:	fb01 f303 	mul.w	r3, r1, r3
 801779c:	1ad3      	subs	r3, r2, r3
 801779e:	129b      	asrs	r3, r3, #10
 80177a0:	b29a      	uxth	r2, r3
 80177a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177a8:	b29b      	uxth	r3, r3
 80177aa:	4413      	add	r3, r2
 80177ac:	b29b      	uxth	r3, r3
 80177ae:	b21b      	sxth	r3, r3
 80177b0:	83bb      	strh	r3, [r7, #28]
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80177b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80177b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177b8:	fb02 f203 	mul.w	r2, r2, r3
 80177bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80177c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80177c2:	fb01 f303 	mul.w	r3, r1, r3
 80177c6:	4413      	add	r3, r2
 80177c8:	129b      	asrs	r3, r3, #10
 80177ca:	b29a      	uxth	r2, r3
 80177cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80177d2:	b29b      	uxth	r3, r3
 80177d4:	4413      	add	r3, r2
 80177d6:	b29b      	uxth	r3, r3
 80177d8:	b21b      	sxth	r3, r3
 80177da:	83fb      	strh	r3, [r7, #30]

    xt = res->x2;
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	889b      	ldrh	r3, [r3, #4]
 80177e0:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y1;
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	885b      	ldrh	r3, [r3, #2]
 80177e6:	843b      	strh	r3, [r7, #32]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80177e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80177ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177ee:	fb02 f203 	mul.w	r2, r2, r3
 80177f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80177f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80177f8:	fb01 f303 	mul.w	r3, r1, r3
 80177fc:	1ad3      	subs	r3, r2, r3
 80177fe:	129b      	asrs	r3, r3, #10
 8017800:	b29a      	uxth	r2, r3
 8017802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017808:	b29b      	uxth	r3, r3
 801780a:	4413      	add	r3, r2
 801780c:	b29b      	uxth	r3, r3
 801780e:	b21b      	sxth	r3, r3
 8017810:	833b      	strh	r3, [r7, #24]
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8017812:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017818:	fb02 f203 	mul.w	r2, r2, r3
 801781c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017822:	fb01 f303 	mul.w	r3, r1, r3
 8017826:	4413      	add	r3, r2
 8017828:	129b      	asrs	r3, r3, #10
 801782a:	b29a      	uxth	r2, r3
 801782c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801782e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017832:	b29b      	uxth	r3, r3
 8017834:	4413      	add	r3, r2
 8017836:	b29b      	uxth	r3, r3
 8017838:	b21b      	sxth	r3, r3
 801783a:	837b      	strh	r3, [r7, #26]

    xt = res->x1;
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	881b      	ldrh	r3, [r3, #0]
 8017840:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y2;
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	88db      	ldrh	r3, [r3, #6]
 8017846:	843b      	strh	r3, [r7, #32]
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8017848:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801784c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801784e:	fb02 f203 	mul.w	r2, r2, r3
 8017852:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017858:	fb01 f303 	mul.w	r3, r1, r3
 801785c:	1ad3      	subs	r3, r2, r3
 801785e:	129b      	asrs	r3, r3, #10
 8017860:	b29a      	uxth	r2, r3
 8017862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017868:	b29b      	uxth	r3, r3
 801786a:	4413      	add	r3, r2
 801786c:	b29b      	uxth	r3, r3
 801786e:	b21b      	sxth	r3, r3
 8017870:	82bb      	strh	r3, [r7, #20]
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8017872:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017878:	fb02 f203 	mul.w	r2, r2, r3
 801787c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017882:	fb01 f303 	mul.w	r3, r1, r3
 8017886:	4413      	add	r3, r2
 8017888:	129b      	asrs	r3, r3, #10
 801788a:	b29a      	uxth	r2, r3
 801788c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801788e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017892:	b29b      	uxth	r3, r3
 8017894:	4413      	add	r3, r2
 8017896:	b29b      	uxth	r3, r3
 8017898:	b21b      	sxth	r3, r3
 801789a:	82fb      	strh	r3, [r7, #22]

    xt = res->x2;
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	889b      	ldrh	r3, [r3, #4]
 80178a0:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y2;
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	88db      	ldrh	r3, [r3, #6]
 80178a6:	843b      	strh	r3, [r7, #32]
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80178a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80178ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178ae:	fb02 f203 	mul.w	r2, r2, r3
 80178b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80178b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80178b8:	fb01 f303 	mul.w	r3, r1, r3
 80178bc:	1ad3      	subs	r3, r2, r3
 80178be:	129b      	asrs	r3, r3, #10
 80178c0:	b29a      	uxth	r2, r3
 80178c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80178c8:	b29b      	uxth	r3, r3
 80178ca:	4413      	add	r3, r2
 80178cc:	b29b      	uxth	r3, r3
 80178ce:	b21b      	sxth	r3, r3
 80178d0:	823b      	strh	r3, [r7, #16]
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80178d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80178d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80178d8:	fb02 f203 	mul.w	r2, r2, r3
 80178dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80178e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80178e2:	fb01 f303 	mul.w	r3, r1, r3
 80178e6:	4413      	add	r3, r2
 80178e8:	129b      	asrs	r3, r3, #10
 80178ea:	b29a      	uxth	r2, r3
 80178ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80178f2:	b29b      	uxth	r3, r3
 80178f4:	4413      	add	r3, r2
 80178f6:	b29b      	uxth	r3, r3
 80178f8:	b21b      	sxth	r3, r3
 80178fa:	827b      	strh	r3, [r7, #18]

    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 80178fc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8017900:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017904:	4293      	cmp	r3, r2
 8017906:	bfa8      	it	ge
 8017908:	4613      	movge	r3, r2
 801790a:	b21a      	sxth	r2, r3
 801790c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8017910:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017914:	428b      	cmp	r3, r1
 8017916:	bfa8      	it	ge
 8017918:	460b      	movge	r3, r1
 801791a:	b21b      	sxth	r3, r3
 801791c:	4293      	cmp	r3, r2
 801791e:	bfa8      	it	ge
 8017920:	4613      	movge	r3, r2
 8017922:	b21a      	sxth	r2, r3
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	801a      	strh	r2, [r3, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 8017928:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801792c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017930:	4293      	cmp	r3, r2
 8017932:	bfb8      	it	lt
 8017934:	4613      	movlt	r3, r2
 8017936:	b21a      	sxth	r2, r3
 8017938:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801793c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017940:	428b      	cmp	r3, r1
 8017942:	bfb8      	it	lt
 8017944:	460b      	movlt	r3, r1
 8017946:	b21b      	sxth	r3, r3
 8017948:	4293      	cmp	r3, r2
 801794a:	bfb8      	it	lt
 801794c:	4613      	movlt	r3, r2
 801794e:	b21a      	sxth	r2, r3
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	809a      	strh	r2, [r3, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 8017954:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8017958:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801795c:	4293      	cmp	r3, r2
 801795e:	bfa8      	it	ge
 8017960:	4613      	movge	r3, r2
 8017962:	b21a      	sxth	r2, r3
 8017964:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8017968:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801796c:	428b      	cmp	r3, r1
 801796e:	bfa8      	it	ge
 8017970:	460b      	movge	r3, r1
 8017972:	b21b      	sxth	r3, r3
 8017974:	4293      	cmp	r3, r2
 8017976:	bfa8      	it	ge
 8017978:	4613      	movge	r3, r2
 801797a:	b21a      	sxth	r2, r3
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	805a      	strh	r2, [r3, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 8017980:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8017984:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017988:	4293      	cmp	r3, r2
 801798a:	bfb8      	it	lt
 801798c:	4613      	movlt	r3, r2
 801798e:	b21a      	sxth	r2, r3
 8017990:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8017994:	e002      	b.n	801799c <_lv_img_buf_get_transformed_area+0x428>
 8017996:	bf00      	nop
 8017998:	66666667 	.word	0x66666667
 801799c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80179a0:	428b      	cmp	r3, r1
 80179a2:	bfb8      	it	lt
 80179a4:	460b      	movlt	r3, r1
 80179a6:	b21b      	sxth	r3, r3
 80179a8:	4293      	cmp	r3, r2
 80179aa:	bfb8      	it	lt
 80179ac:	4613      	movlt	r3, r2
 80179ae:	b21a      	sxth	r2, r3
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	80da      	strh	r2, [r3, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 80179b4:	3748      	adds	r7, #72	; 0x48
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}
 80179ba:	bf00      	nop

080179bc <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
 80179bc:	b590      	push	{r4, r7, lr}
 80179be:	b093      	sub	sp, #76	; 0x4c
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
    const uint8_t * src_u8 = dsc->cfg.src;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	633b      	str	r3, [r7, #48]	; 0x30

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80179d0:	b29b      	uxth	r3, r3
 80179d2:	b2db      	uxtb	r3, r3
 80179d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    int ys_fract = dsc->tmp.ys & 0xff;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80179dc:	b29b      	uxth	r3, r3
 80179de:	b2db      	uxtb	r3, r3
 80179e0:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
 80179e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e4:	2b6f      	cmp	r3, #111	; 0x6f
 80179e6:	dc12      	bgt.n	8017a0e <_lv_img_buf_transform_anti_alias+0x52>
        xn = - 1;
 80179e8:	f04f 33ff 	mov.w	r3, #4294967295
 80179ec:	647b      	str	r3, [r7, #68]	; 0x44
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80179f4:	461a      	mov	r2, r3
 80179f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80179f8:	4413      	add	r3, r2
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	da01      	bge.n	8017a02 <_lv_img_buf_transform_anti_alias+0x46>
 80179fe:	2300      	movs	r3, #0
 8017a00:	647b      	str	r3, [r7, #68]	; 0x44
        xr = xs_fract + 0x80;
 8017a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a04:	b2db      	uxtb	r3, r3
 8017a06:	3b80      	subs	r3, #128	; 0x80
 8017a08:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017a0c:	e01d      	b.n	8017a4a <_lv_img_buf_transform_anti_alias+0x8e>
    }
    else if(xs_fract > 0x90) {
 8017a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a10:	2b90      	cmp	r3, #144	; 0x90
 8017a12:	dd15      	ble.n	8017a40 <_lv_img_buf_transform_anti_alias+0x84>
        xn =  1;
 8017a14:	2301      	movs	r3, #1
 8017a16:	647b      	str	r3, [r7, #68]	; 0x44
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017a1e:	461a      	mov	r2, r3
 8017a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a22:	4413      	add	r3, r2
 8017a24:	687a      	ldr	r2, [r7, #4]
 8017a26:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8017a2a:	4293      	cmp	r3, r2
 8017a2c:	db01      	blt.n	8017a32 <_lv_img_buf_transform_anti_alias+0x76>
 8017a2e:	2300      	movs	r3, #0
 8017a30:	647b      	str	r3, [r7, #68]	; 0x44
        xr = (0xFF - xs_fract) + 0x80;
 8017a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a34:	b2db      	uxtb	r3, r3
 8017a36:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8017a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017a3e:	e004      	b.n	8017a4a <_lv_img_buf_transform_anti_alias+0x8e>
    }
    else {
        xn = 0;
 8017a40:	2300      	movs	r3, #0
 8017a42:	647b      	str	r3, [r7, #68]	; 0x44
        xr = 0xFF;
 8017a44:	23ff      	movs	r3, #255	; 0xff
 8017a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
 8017a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a4c:	2b6f      	cmp	r3, #111	; 0x6f
 8017a4e:	dc12      	bgt.n	8017a76 <_lv_img_buf_transform_anti_alias+0xba>
        yn = - 1;
 8017a50:	f04f 33ff 	mov.w	r3, #4294967295
 8017a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017a5c:	461a      	mov	r2, r3
 8017a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a60:	4413      	add	r3, r2
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	da01      	bge.n	8017a6a <_lv_img_buf_transform_anti_alias+0xae>
 8017a66:	2300      	movs	r3, #0
 8017a68:	63fb      	str	r3, [r7, #60]	; 0x3c

        yr = ys_fract + 0x80;
 8017a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a6c:	b2db      	uxtb	r3, r3
 8017a6e:	3b80      	subs	r3, #128	; 0x80
 8017a70:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8017a74:	e01d      	b.n	8017ab2 <_lv_img_buf_transform_anti_alias+0xf6>
    }
    else if(ys_fract > 0x90) {
 8017a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a78:	2b90      	cmp	r3, #144	; 0x90
 8017a7a:	dd15      	ble.n	8017aa8 <_lv_img_buf_transform_anti_alias+0xec>
        yn =  1;
 8017a7c:	2301      	movs	r3, #1
 8017a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017a86:	461a      	mov	r2, r3
 8017a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a8a:	4413      	add	r3, r2
 8017a8c:	687a      	ldr	r2, [r7, #4]
 8017a8e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8017a92:	4293      	cmp	r3, r2
 8017a94:	db01      	blt.n	8017a9a <_lv_img_buf_transform_anti_alias+0xde>
 8017a96:	2300      	movs	r3, #0
 8017a98:	63fb      	str	r3, [r7, #60]	; 0x3c

        yr = (0xFF - ys_fract) + 0x80;
 8017a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a9c:	b2db      	uxtb	r3, r3
 8017a9e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8017aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8017aa6:	e004      	b.n	8017ab2 <_lv_img_buf_transform_anti_alias+0xf6>
    }
    else {
        yn = 0;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        yr = 0xFF;
 8017aac:	23ff      	movs	r3, #255	; 0xff
 8017aae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }

    lv_color_t c00 = dsc->res.color;
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	699b      	ldr	r3, [r3, #24]
 8017ab6:	623b      	str	r3, [r7, #32]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	7f1b      	ldrb	r3, [r3, #28]
 8017abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    lv_opa_t a10 = 0;
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    lv_opa_t a01 = 0;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    lv_opa_t a11 = 0;
 8017acc:	2300      	movs	r3, #0
 8017ace:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

    if(dsc->tmp.native_color) {
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017ad8:	f003 0304 	and.w	r3, r3, #4
 8017adc:	b2db      	uxtb	r3, r3
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	f000 80a2 	beq.w	8017c28 <_lv_img_buf_transform_anti_alias+0x26c>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ae8:	687a      	ldr	r2, [r7, #4]
 8017aea:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017aee:	4611      	mov	r1, r2
 8017af0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017af2:	fb02 f201 	mul.w	r2, r2, r1
 8017af6:	4413      	add	r3, r2
 8017af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017afa:	18d1      	adds	r1, r2, r3
 8017afc:	f107 031c 	add.w	r3, r7, #28
 8017b00:	2204      	movs	r2, #4
 8017b02:	4618      	mov	r0, r3
 8017b04:	f7ff f9be 	bl	8016e84 <_lv_memcpy_small>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b0c:	687a      	ldr	r2, [r7, #4]
 8017b0e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8017b12:	4611      	mov	r1, r2
 8017b14:	687a      	ldr	r2, [r7, #4]
 8017b16:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017b1a:	fb02 f201 	mul.w	r2, r2, r1
 8017b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017b20:	fb01 f202 	mul.w	r2, r1, r2
 8017b24:	4413      	add	r3, r2
 8017b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b28:	18d1      	adds	r1, r2, r3
 8017b2a:	f107 0318 	add.w	r3, r7, #24
 8017b2e:	2204      	movs	r2, #4
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7ff f9a7 	bl	8016e84 <_lv_memcpy_small>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017b40:	4619      	mov	r1, r3
 8017b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b44:	fb03 f301 	mul.w	r3, r3, r1
 8017b48:	4618      	mov	r0, r3
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017b50:	4619      	mov	r1, r3
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017b58:	fb03 f301 	mul.w	r3, r3, r1
 8017b5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017b5e:	fb01 f303 	mul.w	r3, r1, r3
 8017b62:	4403      	add	r3, r0
 8017b64:	4413      	add	r3, r2
 8017b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b68:	18d1      	adds	r1, r2, r3
 8017b6a:	f107 0314 	add.w	r3, r7, #20
 8017b6e:	2204      	movs	r2, #4
 8017b70:	4618      	mov	r0, r3
 8017b72:	f7ff f987 	bl	8016e84 <_lv_memcpy_small>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017b7c:	f003 0302 	and.w	r3, r3, #2
 8017b80:	b2db      	uxtb	r3, r3
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	f000 80e2 	beq.w	8017d4c <_lv_img_buf_transform_anti_alias+0x390>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b8c:	687a      	ldr	r2, [r7, #4]
 8017b8e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017b92:	4611      	mov	r1, r2
 8017b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017b96:	fb02 f201 	mul.w	r2, r2, r1
 8017b9a:	4413      	add	r3, r2
 8017b9c:	687a      	ldr	r2, [r7, #4]
 8017b9e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017ba2:	4413      	add	r3, r2
 8017ba4:	3b01      	subs	r3, #1
 8017ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ba8:	4413      	add	r3, r2
 8017baa:	781b      	ldrb	r3, [r3, #0]
 8017bac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017bb4:	687a      	ldr	r2, [r7, #4]
 8017bb6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8017bba:	4611      	mov	r1, r2
 8017bbc:	687a      	ldr	r2, [r7, #4]
 8017bbe:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017bc2:	fb02 f201 	mul.w	r2, r2, r1
 8017bc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017bc8:	fb01 f202 	mul.w	r2, r1, r2
 8017bcc:	4413      	add	r3, r2
 8017bce:	687a      	ldr	r2, [r7, #4]
 8017bd0:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017bd4:	4413      	add	r3, r2
 8017bd6:	3b01      	subs	r3, #1
 8017bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bda:	4413      	add	r3, r2
 8017bdc:	781b      	ldrb	r3, [r3, #0]
 8017bde:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017bec:	4619      	mov	r1, r3
 8017bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017bf0:	fb03 f301 	mul.w	r3, r3, r1
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017bfc:	4619      	mov	r1, r3
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017c04:	fb03 f301 	mul.w	r3, r3, r1
 8017c08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017c0a:	fb01 f303 	mul.w	r3, r1, r3
 8017c0e:	4403      	add	r3, r0
 8017c10:	4413      	add	r3, r2
 8017c12:	687a      	ldr	r2, [r7, #4]
 8017c14:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017c18:	4413      	add	r3, r2
 8017c1a:	3b01      	subs	r3, #1
 8017c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c1e:	4413      	add	r3, r2
 8017c20:	781b      	ldrb	r3, [r3, #0]
 8017c22:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8017c26:	e091      	b.n	8017d4c <_lv_img_buf_transform_anti_alias+0x390>
        }
    }
    else {
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	f103 0020 	add.w	r0, r3, #32
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017c34:	b29a      	uxth	r2, r3
 8017c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c38:	b29b      	uxth	r3, r3
 8017c3a:	4413      	add	r3, r2
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	b219      	sxth	r1, r3
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	691b      	ldr	r3, [r3, #16]
 8017c4a:	f7ff f93d 	bl	8016ec8 <lv_img_buf_get_px_color>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	61fb      	str	r3, [r7, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	f103 0020 	add.w	r0, r3, #32
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	; 0x48
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017c64:	b29a      	uxth	r2, r3
 8017c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c68:	b29b      	uxth	r3, r3
 8017c6a:	4413      	add	r3, r2
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	b21a      	sxth	r2, r3
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	691b      	ldr	r3, [r3, #16]
 8017c74:	f7ff f928 	bl	8016ec8 <lv_img_buf_get_px_color>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	61bb      	str	r3, [r7, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	f103 0020 	add.w	r0, r3, #32
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017c88:	b29a      	uxth	r2, r3
 8017c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	4413      	add	r3, r2
 8017c90:	b29b      	uxth	r3, r3
 8017c92:	b219      	sxth	r1, r3
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017c9a:	b29a      	uxth	r2, r3
 8017c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c9e:	b29b      	uxth	r3, r3
 8017ca0:	4413      	add	r3, r2
 8017ca2:	b29b      	uxth	r3, r3
 8017ca4:	b21a      	sxth	r2, r3
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	691b      	ldr	r3, [r3, #16]
 8017caa:	f7ff f90d 	bl	8016ec8 <lv_img_buf_get_px_color>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	617b      	str	r3, [r7, #20]

        if(dsc->tmp.has_alpha) {
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017cb8:	f003 0302 	and.w	r3, r3, #2
 8017cbc:	b2db      	uxtb	r3, r3
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d044      	beq.n	8017d4c <_lv_img_buf_transform_anti_alias+0x390>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	f103 0020 	add.w	r0, r3, #32
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017cce:	b29a      	uxth	r2, r3
 8017cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017cd2:	b29b      	uxth	r3, r3
 8017cd4:	4413      	add	r3, r2
 8017cd6:	b29b      	uxth	r3, r3
 8017cd8:	b219      	sxth	r1, r3
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017ce0:	461a      	mov	r2, r3
 8017ce2:	f7ff fa33 	bl	801714c <lv_img_buf_get_px_alpha>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	f103 0020 	add.w	r0, r3, #32
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	; 0x48
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017cfe:	b29a      	uxth	r2, r3
 8017d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d02:	b29b      	uxth	r3, r3
 8017d04:	4413      	add	r3, r2
 8017d06:	b29b      	uxth	r3, r3
 8017d08:	b21b      	sxth	r3, r3
 8017d0a:	461a      	mov	r2, r3
 8017d0c:	f7ff fa1e 	bl	801714c <lv_img_buf_get_px_alpha>
 8017d10:	4603      	mov	r3, r0
 8017d12:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	f103 0020 	add.w	r0, r3, #32
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017d22:	b29a      	uxth	r2, r3
 8017d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d26:	b29b      	uxth	r3, r3
 8017d28:	4413      	add	r3, r2
 8017d2a:	b29b      	uxth	r3, r3
 8017d2c:	b219      	sxth	r1, r3
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017d34:	b29a      	uxth	r2, r3
 8017d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d38:	b29b      	uxth	r3, r3
 8017d3a:	4413      	add	r3, r2
 8017d3c:	b29b      	uxth	r3, r3
 8017d3e:	b21b      	sxth	r3, r3
 8017d40:	461a      	mov	r2, r3
 8017d42:	f7ff fa03 	bl	801714c <lv_img_buf_get_px_alpha>
 8017d46:	4603      	mov	r3, r0
 8017d48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        }
    }

    lv_opa_t xr0 = xr;
 8017d4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017d50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    lv_opa_t xr1 = xr;
 8017d54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017d58:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if(dsc->tmp.has_alpha) {
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017d62:	f003 0302 	and.w	r3, r3, #2
 8017d66:	b2db      	uxtb	r3, r3
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d06b      	beq.n	8017e44 <_lv_img_buf_transform_anti_alias+0x488>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 8017d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d70:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8017d74:	fb02 f203 	mul.w	r2, r2, r3
 8017d78:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8017d7c:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8017d80:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8017d84:	fb01 f303 	mul.w	r3, r1, r3
 8017d88:	4413      	add	r3, r2
 8017d8a:	121b      	asrs	r3, r3, #8
 8017d8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 8017d90:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017d94:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8017d98:	fb02 f203 	mul.w	r2, r2, r3
 8017d9c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017da0:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8017da4:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8017da8:	fb01 f303 	mul.w	r3, r1, r3
 8017dac:	4413      	add	r3, r2
 8017dae:	121b      	asrs	r3, r3, #8
 8017db0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 8017db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017db8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8017dbc:	fb02 f203 	mul.w	r2, r2, r3
 8017dc0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017dc4:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8017dc8:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8017dcc:	fb01 f303 	mul.w	r3, r1, r3
 8017dd0:	4413      	add	r3, r2
 8017dd2:	121b      	asrs	r3, r3, #8
 8017dd4:	b2da      	uxtb	r2, r3
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	771a      	strb	r2, [r3, #28]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 8017dda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017dde:	2b02      	cmp	r3, #2
 8017de0:	d805      	bhi.n	8017dee <_lv_img_buf_transform_anti_alias+0x432>
 8017de2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017de6:	2b02      	cmp	r3, #2
 8017de8:	d801      	bhi.n	8017dee <_lv_img_buf_transform_anti_alias+0x432>
 8017dea:	2300      	movs	r3, #0
 8017dec:	e07d      	b.n	8017eea <_lv_img_buf_transform_anti_alias+0x52e>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 8017dee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017df2:	2b02      	cmp	r3, #2
 8017df4:	d802      	bhi.n	8017dfc <_lv_img_buf_transform_anti_alias+0x440>
 8017df6:	2300      	movs	r3, #0
 8017df8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 8017dfc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017e00:	2b02      	cmp	r3, #2
 8017e02:	d802      	bhi.n	8017e0a <_lv_img_buf_transform_anti_alias+0x44e>
 8017e04:	23ff      	movs	r3, #255	; 0xff
 8017e06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
 8017e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e0e:	2b02      	cmp	r3, #2
 8017e10:	d802      	bhi.n	8017e18 <_lv_img_buf_transform_anti_alias+0x45c>
 8017e12:	2300      	movs	r3, #0
 8017e14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 8017e18:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8017e1c:	2b02      	cmp	r3, #2
 8017e1e:	d802      	bhi.n	8017e26 <_lv_img_buf_transform_anti_alias+0x46a>
 8017e20:	23ff      	movs	r3, #255	; 0xff
 8017e22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 8017e26:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017e2a:	2b02      	cmp	r3, #2
 8017e2c:	d802      	bhi.n	8017e34 <_lv_img_buf_transform_anti_alias+0x478>
 8017e2e:	2300      	movs	r3, #0
 8017e30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 8017e34:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017e38:	2b02      	cmp	r3, #2
 8017e3a:	d80e      	bhi.n	8017e5a <_lv_img_buf_transform_anti_alias+0x49e>
 8017e3c:	23ff      	movs	r3, #255	; 0xff
 8017e3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8017e42:	e00a      	b.n	8017e5a <_lv_img_buf_transform_anti_alias+0x49e>
    }
    else {
        xr0 = xr;
 8017e44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017e48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        xr1 = xr;
 8017e4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017e50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        dsc->res.opa = LV_OPA_COVER;
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	22ff      	movs	r2, #255	; 0xff
 8017e58:	771a      	strb	r2, [r3, #28]
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 8017e5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d102      	bne.n	8017e68 <_lv_img_buf_transform_anti_alias+0x4ac>
 8017e62:	69fb      	ldr	r3, [r7, #28]
 8017e64:	613b      	str	r3, [r7, #16]
 8017e66:	e00f      	b.n	8017e88 <_lv_img_buf_transform_anti_alias+0x4cc>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 8017e68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017e6c:	2bff      	cmp	r3, #255	; 0xff
 8017e6e:	d102      	bne.n	8017e76 <_lv_img_buf_transform_anti_alias+0x4ba>
 8017e70:	6a3b      	ldr	r3, [r7, #32]
 8017e72:	613b      	str	r3, [r7, #16]
 8017e74:	e008      	b.n	8017e88 <_lv_img_buf_transform_anti_alias+0x4cc>
    else c0 = lv_color_mix(c00, c01, xr0);
 8017e76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017e7a:	461a      	mov	r2, r3
 8017e7c:	69f9      	ldr	r1, [r7, #28]
 8017e7e:	6a38      	ldr	r0, [r7, #32]
 8017e80:	f7fe ffae 	bl	8016de0 <lv_color_mix>
 8017e84:	4603      	mov	r3, r0
 8017e86:	613b      	str	r3, [r7, #16]

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 8017e88:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d102      	bne.n	8017e96 <_lv_img_buf_transform_anti_alias+0x4da>
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	60fb      	str	r3, [r7, #12]
 8017e94:	e00f      	b.n	8017eb6 <_lv_img_buf_transform_anti_alias+0x4fa>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 8017e96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017e9a:	2bff      	cmp	r3, #255	; 0xff
 8017e9c:	d102      	bne.n	8017ea4 <_lv_img_buf_transform_anti_alias+0x4e8>
 8017e9e:	69bb      	ldr	r3, [r7, #24]
 8017ea0:	60fb      	str	r3, [r7, #12]
 8017ea2:	e008      	b.n	8017eb6 <_lv_img_buf_transform_anti_alias+0x4fa>
    else c1 = lv_color_mix(c10, c11, xr1);
 8017ea4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017ea8:	461a      	mov	r2, r3
 8017eaa:	6979      	ldr	r1, [r7, #20]
 8017eac:	69b8      	ldr	r0, [r7, #24]
 8017eae:	f7fe ff97 	bl	8016de0 <lv_color_mix>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	60fb      	str	r3, [r7, #12]

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 8017eb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d103      	bne.n	8017ec6 <_lv_img_buf_transform_anti_alias+0x50a>
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	68fa      	ldr	r2, [r7, #12]
 8017ec2:	619a      	str	r2, [r3, #24]
 8017ec4:	e010      	b.n	8017ee8 <_lv_img_buf_transform_anti_alias+0x52c>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 8017ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017eca:	2bff      	cmp	r3, #255	; 0xff
 8017ecc:	d103      	bne.n	8017ed6 <_lv_img_buf_transform_anti_alias+0x51a>
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	693a      	ldr	r2, [r7, #16]
 8017ed2:	619a      	str	r2, [r3, #24]
 8017ed4:	e008      	b.n	8017ee8 <_lv_img_buf_transform_anti_alias+0x52c>
    else dsc->res.color = lv_color_mix(c0, c1, yr);
 8017ed6:	687c      	ldr	r4, [r7, #4]
 8017ed8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017edc:	461a      	mov	r2, r3
 8017ede:	68f9      	ldr	r1, [r7, #12]
 8017ee0:	6938      	ldr	r0, [r7, #16]
 8017ee2:	f7fe ff7d 	bl	8016de0 <lv_color_mix>
 8017ee6:	61a0      	str	r0, [r4, #24]

    return true;
 8017ee8:	2301      	movs	r3, #1
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	374c      	adds	r7, #76	; 0x4c
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd90      	pop	{r4, r7, pc}
	...

08017ef4 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b088      	sub	sp, #32
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	6078      	str	r0, [r7, #4]
 8017efc:	6039      	str	r1, [r7, #0]
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
 8017efe:	2300      	movs	r3, #0
 8017f00:	61fb      	str	r3, [r7, #28]

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
 8017f02:	4b87      	ldr	r3, [pc, #540]	; (8018120 <_lv_img_cache_open+0x22c>)
 8017f04:	881b      	ldrh	r3, [r3, #0]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d101      	bne.n	8017f0e <_lv_img_cache_open+0x1a>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	e104      	b.n	8018118 <_lv_img_cache_open+0x224>
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8017f0e:	4b85      	ldr	r3, [pc, #532]	; (8018124 <_lv_img_cache_open+0x230>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	617b      	str	r3, [r7, #20]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8017f14:	2300      	movs	r3, #0
 8017f16:	837b      	strh	r3, [r7, #26]
 8017f18:	e021      	b.n	8017f5e <_lv_img_cache_open+0x6a>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8017f1a:	8b7a      	ldrh	r2, [r7, #26]
 8017f1c:	4613      	mov	r3, r2
 8017f1e:	009b      	lsls	r3, r3, #2
 8017f20:	4413      	add	r3, r2
 8017f22:	00db      	lsls	r3, r3, #3
 8017f24:	461a      	mov	r2, r3
 8017f26:	697b      	ldr	r3, [r7, #20]
 8017f28:	4413      	add	r3, r2
 8017f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f2c:	4a7e      	ldr	r2, [pc, #504]	; (8018128 <_lv_img_cache_open+0x234>)
 8017f2e:	4293      	cmp	r3, r2
 8017f30:	db12      	blt.n	8017f58 <_lv_img_cache_open+0x64>
            cache[i].life -= LV_IMG_CACHE_AGING;
 8017f32:	8b7a      	ldrh	r2, [r7, #26]
 8017f34:	4613      	mov	r3, r2
 8017f36:	009b      	lsls	r3, r3, #2
 8017f38:	4413      	add	r3, r2
 8017f3a:	00db      	lsls	r3, r3, #3
 8017f3c:	461a      	mov	r2, r3
 8017f3e:	697b      	ldr	r3, [r7, #20]
 8017f40:	4413      	add	r3, r2
 8017f42:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017f44:	8b7a      	ldrh	r2, [r7, #26]
 8017f46:	4613      	mov	r3, r2
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	4413      	add	r3, r2
 8017f4c:	00db      	lsls	r3, r3, #3
 8017f4e:	461a      	mov	r2, r3
 8017f50:	697b      	ldr	r3, [r7, #20]
 8017f52:	4413      	add	r3, r2
 8017f54:	1e4a      	subs	r2, r1, #1
 8017f56:	625a      	str	r2, [r3, #36]	; 0x24
    for(i = 0; i < entry_cnt; i++) {
 8017f58:	8b7b      	ldrh	r3, [r7, #26]
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	837b      	strh	r3, [r7, #26]
 8017f5e:	4b70      	ldr	r3, [pc, #448]	; (8018120 <_lv_img_cache_open+0x22c>)
 8017f60:	881b      	ldrh	r3, [r3, #0]
 8017f62:	8b7a      	ldrh	r2, [r7, #26]
 8017f64:	429a      	cmp	r2, r3
 8017f66:	d3d8      	bcc.n	8017f1a <_lv_img_cache_open+0x26>
        }
    }

    for(i = 0; i < entry_cnt; i++) {
 8017f68:	2300      	movs	r3, #0
 8017f6a:	837b      	strh	r3, [r7, #26]
 8017f6c:	e064      	b.n	8018038 <_lv_img_cache_open+0x144>
        bool match = false;
 8017f6e:	2300      	movs	r3, #0
 8017f70:	767b      	strb	r3, [r7, #25]
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
 8017f72:	8b7a      	ldrh	r2, [r7, #26]
 8017f74:	4613      	mov	r3, r2
 8017f76:	009b      	lsls	r3, r3, #2
 8017f78:	4413      	add	r3, r2
 8017f7a:	00db      	lsls	r3, r3, #3
 8017f7c:	461a      	mov	r2, r3
 8017f7e:	697b      	ldr	r3, [r7, #20]
 8017f80:	4413      	add	r3, r2
 8017f82:	685b      	ldr	r3, [r3, #4]
 8017f84:	4618      	mov	r0, r3
 8017f86:	f7f6 fa0d 	bl	800e3a4 <lv_img_src_get_type>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	74fb      	strb	r3, [r7, #19]
        if(src_type == LV_IMG_SRC_VARIABLE) {
 8017f8e:	7cfb      	ldrb	r3, [r7, #19]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d11a      	bne.n	8017fca <_lv_img_cache_open+0xd6>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
 8017f94:	8b7a      	ldrh	r2, [r7, #26]
 8017f96:	4613      	mov	r3, r2
 8017f98:	009b      	lsls	r3, r3, #2
 8017f9a:	4413      	add	r3, r2
 8017f9c:	00db      	lsls	r3, r3, #3
 8017f9e:	461a      	mov	r2, r3
 8017fa0:	697b      	ldr	r3, [r7, #20]
 8017fa2:	4413      	add	r3, r2
 8017fa4:	685b      	ldr	r3, [r3, #4]
 8017fa6:	687a      	ldr	r2, [r7, #4]
 8017fa8:	429a      	cmp	r2, r3
 8017faa:	d123      	bne.n	8017ff4 <_lv_img_cache_open+0x100>
 8017fac:	8b7a      	ldrh	r2, [r7, #26]
 8017fae:	4613      	mov	r3, r2
 8017fb0:	009b      	lsls	r3, r3, #2
 8017fb2:	4413      	add	r3, r2
 8017fb4:	00db      	lsls	r3, r3, #3
 8017fb6:	461a      	mov	r2, r3
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	4413      	add	r3, r2
 8017fbc:	689a      	ldr	r2, [r3, #8]
 8017fbe:	683b      	ldr	r3, [r7, #0]
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	d117      	bne.n	8017ff4 <_lv_img_cache_open+0x100>
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	767b      	strb	r3, [r7, #25]
 8017fc8:	e014      	b.n	8017ff4 <_lv_img_cache_open+0x100>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
 8017fca:	7cfb      	ldrb	r3, [r7, #19]
 8017fcc:	2b01      	cmp	r3, #1
 8017fce:	d111      	bne.n	8017ff4 <_lv_img_cache_open+0x100>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
 8017fd0:	8b7a      	ldrh	r2, [r7, #26]
 8017fd2:	4613      	mov	r3, r2
 8017fd4:	009b      	lsls	r3, r3, #2
 8017fd6:	4413      	add	r3, r2
 8017fd8:	00db      	lsls	r3, r3, #3
 8017fda:	461a      	mov	r2, r3
 8017fdc:	697b      	ldr	r3, [r7, #20]
 8017fde:	4413      	add	r3, r2
 8017fe0:	685b      	ldr	r3, [r3, #4]
 8017fe2:	6879      	ldr	r1, [r7, #4]
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7e8 f90f 	bl	8000208 <strcmp>
 8017fea:	4603      	mov	r3, r0
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d101      	bne.n	8017ff4 <_lv_img_cache_open+0x100>
 8017ff0:	2301      	movs	r3, #1
 8017ff2:	767b      	strb	r3, [r7, #25]
        }

        if(match) {
 8017ff4:	7e7b      	ldrb	r3, [r7, #25]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d01b      	beq.n	8018032 <_lv_img_cache_open+0x13e>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
 8017ffa:	8b7a      	ldrh	r2, [r7, #26]
 8017ffc:	4613      	mov	r3, r2
 8017ffe:	009b      	lsls	r3, r3, #2
 8018000:	4413      	add	r3, r2
 8018002:	00db      	lsls	r3, r3, #3
 8018004:	461a      	mov	r2, r3
 8018006:	697b      	ldr	r3, [r7, #20]
 8018008:	4413      	add	r3, r2
 801800a:	61fb      	str	r3, [r7, #28]
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 801800c:	69fb      	ldr	r3, [r7, #28]
 801800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018010:	461a      	mov	r2, r3
 8018012:	69fb      	ldr	r3, [r7, #28]
 8018014:	699b      	ldr	r3, [r3, #24]
 8018016:	4413      	add	r3, r2
 8018018:	461a      	mov	r2, r3
 801801a:	69fb      	ldr	r3, [r7, #28]
 801801c:	625a      	str	r2, [r3, #36]	; 0x24
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 801801e:	69fb      	ldr	r3, [r7, #28]
 8018020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018026:	dd0d      	ble.n	8018044 <_lv_img_cache_open+0x150>
 8018028:	69fb      	ldr	r3, [r7, #28]
 801802a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801802e:	625a      	str	r2, [r3, #36]	; 0x24
            LV_LOG_TRACE("image draw: image found in the cache");
            break;
 8018030:	e008      	b.n	8018044 <_lv_img_cache_open+0x150>
    for(i = 0; i < entry_cnt; i++) {
 8018032:	8b7b      	ldrh	r3, [r7, #26]
 8018034:	3301      	adds	r3, #1
 8018036:	837b      	strh	r3, [r7, #26]
 8018038:	4b39      	ldr	r3, [pc, #228]	; (8018120 <_lv_img_cache_open+0x22c>)
 801803a:	881b      	ldrh	r3, [r3, #0]
 801803c:	8b7a      	ldrh	r2, [r7, #26]
 801803e:	429a      	cmp	r2, r3
 8018040:	d395      	bcc.n	8017f6e <_lv_img_cache_open+0x7a>
 8018042:	e000      	b.n	8018046 <_lv_img_cache_open+0x152>
            break;
 8018044:	bf00      	nop
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
 8018046:	69fb      	ldr	r3, [r7, #28]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d001      	beq.n	8018050 <_lv_img_cache_open+0x15c>
 801804c:	69fb      	ldr	r3, [r7, #28]
 801804e:	e063      	b.n	8018118 <_lv_img_cache_open+0x224>

    /*Find an entry to reuse. Select the entry with the least life*/
    cached_src = &cache[0];
 8018050:	697b      	ldr	r3, [r7, #20]
 8018052:	61fb      	str	r3, [r7, #28]
    for(i = 1; i < entry_cnt; i++) {
 8018054:	2301      	movs	r3, #1
 8018056:	837b      	strh	r3, [r7, #26]
 8018058:	e018      	b.n	801808c <_lv_img_cache_open+0x198>
        if(cache[i].life < cached_src->life) {
 801805a:	8b7a      	ldrh	r2, [r7, #26]
 801805c:	4613      	mov	r3, r2
 801805e:	009b      	lsls	r3, r3, #2
 8018060:	4413      	add	r3, r2
 8018062:	00db      	lsls	r3, r3, #3
 8018064:	461a      	mov	r2, r3
 8018066:	697b      	ldr	r3, [r7, #20]
 8018068:	4413      	add	r3, r2
 801806a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801806c:	69fb      	ldr	r3, [r7, #28]
 801806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018070:	429a      	cmp	r2, r3
 8018072:	da08      	bge.n	8018086 <_lv_img_cache_open+0x192>
            cached_src = &cache[i];
 8018074:	8b7a      	ldrh	r2, [r7, #26]
 8018076:	4613      	mov	r3, r2
 8018078:	009b      	lsls	r3, r3, #2
 801807a:	4413      	add	r3, r2
 801807c:	00db      	lsls	r3, r3, #3
 801807e:	461a      	mov	r2, r3
 8018080:	697b      	ldr	r3, [r7, #20]
 8018082:	4413      	add	r3, r2
 8018084:	61fb      	str	r3, [r7, #28]
    for(i = 1; i < entry_cnt; i++) {
 8018086:	8b7b      	ldrh	r3, [r7, #26]
 8018088:	3301      	adds	r3, #1
 801808a:	837b      	strh	r3, [r7, #26]
 801808c:	4b24      	ldr	r3, [pc, #144]	; (8018120 <_lv_img_cache_open+0x22c>)
 801808e:	881b      	ldrh	r3, [r3, #0]
 8018090:	8b7a      	ldrh	r2, [r7, #26]
 8018092:	429a      	cmp	r2, r3
 8018094:	d3e1      	bcc.n	801805a <_lv_img_cache_open+0x166>
        }
    }

    /*Close the decoder to reuse if it was opened (has a valid source)*/
    if(cached_src->dec_dsc.src) {
 8018096:	69fb      	ldr	r3, [r7, #28]
 8018098:	685b      	ldr	r3, [r3, #4]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d003      	beq.n	80180a6 <_lv_img_cache_open+0x1b2>
        lv_img_decoder_close(&cached_src->dec_dsc);
 801809e:	69fb      	ldr	r3, [r7, #28]
 80180a0:	4618      	mov	r0, r3
 80180a2:	f000 fa5f 	bl	8018564 <lv_img_decoder_close>
#else
    cached_src = &cache_temp;
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start;
    t_start                          = lv_tick_get();
 80180a6:	f002 fba5 	bl	801a7f4 <lv_tick_get>
 80180aa:	60f8      	str	r0, [r7, #12]
    cached_src->dec_dsc.time_to_open = 0;
 80180ac:	69fb      	ldr	r3, [r7, #28]
 80180ae:	2200      	movs	r2, #0
 80180b0:	619a      	str	r2, [r3, #24]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 80180b2:	69fb      	ldr	r3, [r7, #28]
 80180b4:	683a      	ldr	r2, [r7, #0]
 80180b6:	6879      	ldr	r1, [r7, #4]
 80180b8:	4618      	mov	r0, r3
 80180ba:	f000 f9b7 	bl	801842c <lv_img_decoder_open>
 80180be:	4603      	mov	r3, r0
 80180c0:	72fb      	strb	r3, [r7, #11]
    if(open_res == LV_RES_INV) {
 80180c2:	7afb      	ldrb	r3, [r7, #11]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d112      	bne.n	80180ee <_lv_img_cache_open+0x1fa>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_img_decoder_close(&cached_src->dec_dsc);
 80180c8:	69fb      	ldr	r3, [r7, #28]
 80180ca:	4618      	mov	r0, r3
 80180cc:	f000 fa4a 	bl	8018564 <lv_img_decoder_close>
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
 80180d0:	69fb      	ldr	r3, [r7, #28]
 80180d2:	2124      	movs	r1, #36	; 0x24
 80180d4:	4618      	mov	r0, r3
 80180d6:	f005 f844 	bl	801d162 <_lv_memset_00>
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
 80180da:	2128      	movs	r1, #40	; 0x28
 80180dc:	69f8      	ldr	r0, [r7, #28]
 80180de:	f005 f840 	bl	801d162 <_lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 80180e2:	69fb      	ldr	r3, [r7, #28]
 80180e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80180e8:	625a      	str	r2, [r3, #36]	; 0x24
        return NULL;
 80180ea:	2300      	movs	r3, #0
 80180ec:	e014      	b.n	8018118 <_lv_img_cache_open+0x224>
    }

    cached_src->life = 0;
 80180ee:	69fb      	ldr	r3, [r7, #28]
 80180f0:	2200      	movs	r2, #0
 80180f2:	625a      	str	r2, [r3, #36]	; 0x24

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 80180f4:	69fb      	ldr	r3, [r7, #28]
 80180f6:	699b      	ldr	r3, [r3, #24]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d105      	bne.n	8018108 <_lv_img_cache_open+0x214>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 80180fc:	68f8      	ldr	r0, [r7, #12]
 80180fe:	f002 fb93 	bl	801a828 <lv_tick_elaps>
 8018102:	4602      	mov	r2, r0
 8018104:	69fb      	ldr	r3, [r7, #28]
 8018106:	619a      	str	r2, [r3, #24]
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8018108:	69fb      	ldr	r3, [r7, #28]
 801810a:	699b      	ldr	r3, [r3, #24]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d102      	bne.n	8018116 <_lv_img_cache_open+0x222>
 8018110:	69fb      	ldr	r3, [r7, #28]
 8018112:	2201      	movs	r2, #1
 8018114:	619a      	str	r2, [r3, #24]

    return cached_src;
 8018116:	69fb      	ldr	r3, [r7, #28]
}
 8018118:	4618      	mov	r0, r3
 801811a:	3720      	adds	r7, #32
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}
 8018120:	20018040 	.word	0x20018040
 8018124:	20021860 	.word	0x20021860
 8018128:	80000002 	.word	0x80000002

0801812c <lv_img_cache_set_size>:
 * More cached images mean more opened image at same time which might mean more memory usage.
 * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 * @param new_entry_cnt number of image to cache
 */
void lv_img_cache_set_size(uint16_t new_entry_cnt)
{
 801812c:	b590      	push	{r4, r7, lr}
 801812e:	b085      	sub	sp, #20
 8018130:	af00      	add	r7, sp, #0
 8018132:	4603      	mov	r3, r0
 8018134:	80fb      	strh	r3, [r7, #6]
#if LV_IMG_CACHE_DEF_SIZE == 0
    LV_UNUSED(new_entry_cnt);
    LV_LOG_WARN("Can't change cache size because it's disabled by LV_IMG_CACHE_DEF_SIZE = 0");
#else
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8018136:	4b2e      	ldr	r3, [pc, #184]	; (80181f0 <lv_img_cache_set_size+0xc4>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d007      	beq.n	801814e <lv_img_cache_set_size+0x22>
        /*Clean the cache before free it*/
        lv_img_cache_invalidate_src(NULL);
 801813e:	2000      	movs	r0, #0
 8018140:	f000 f85c 	bl	80181fc <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8018144:	4b2a      	ldr	r3, [pc, #168]	; (80181f0 <lv_img_cache_set_size+0xc4>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	4618      	mov	r0, r3
 801814a:	f004 fae9 	bl	801c720 <lv_mem_free>
    }

    /*Reallocate the cache*/
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 801814e:	88fa      	ldrh	r2, [r7, #6]
 8018150:	4613      	mov	r3, r2
 8018152:	009b      	lsls	r3, r3, #2
 8018154:	4413      	add	r3, r2
 8018156:	00db      	lsls	r3, r3, #3
 8018158:	4618      	mov	r0, r3
 801815a:	f004 fa97 	bl	801c68c <lv_mem_alloc>
 801815e:	4602      	mov	r2, r0
 8018160:	4b23      	ldr	r3, [pc, #140]	; (80181f0 <lv_img_cache_set_size+0xc4>)
 8018162:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
 8018164:	4b22      	ldr	r3, [pc, #136]	; (80181f0 <lv_img_cache_set_size+0xc4>)
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	4618      	mov	r0, r3
 801816a:	f003 fd03 	bl	801bb74 <lv_debug_check_null>
 801816e:	4603      	mov	r3, r0
 8018170:	f083 0301 	eor.w	r3, r3, #1
 8018174:	b2db      	uxtb	r3, r3
 8018176:	2b00      	cmp	r3, #0
 8018178:	d009      	beq.n	801818e <lv_img_cache_set_size+0x62>
 801817a:	4b1d      	ldr	r3, [pc, #116]	; (80181f0 <lv_img_cache_set_size+0xc4>)
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	f04f 0400 	mov.w	r4, #0
 8018182:	461a      	mov	r2, r3
 8018184:	4623      	mov	r3, r4
 8018186:	481b      	ldr	r0, [pc, #108]	; (80181f4 <lv_img_cache_set_size+0xc8>)
 8018188:	f003 fd04 	bl	801bb94 <lv_debug_log_error>
 801818c:	e7fe      	b.n	801818c <lv_img_cache_set_size+0x60>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 801818e:	4b18      	ldr	r3, [pc, #96]	; (80181f0 <lv_img_cache_set_size+0xc4>)
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d103      	bne.n	801819e <lv_img_cache_set_size+0x72>
        entry_cnt = 0;
 8018196:	4b18      	ldr	r3, [pc, #96]	; (80181f8 <lv_img_cache_set_size+0xcc>)
 8018198:	2200      	movs	r2, #0
 801819a:	801a      	strh	r2, [r3, #0]
        return;
 801819c:	e025      	b.n	80181ea <lv_img_cache_set_size+0xbe>
    }
    entry_cnt = new_entry_cnt;
 801819e:	4a16      	ldr	r2, [pc, #88]	; (80181f8 <lv_img_cache_set_size+0xcc>)
 80181a0:	88fb      	ldrh	r3, [r7, #6]
 80181a2:	8013      	strh	r3, [r2, #0]

    /*Clean the cache*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 80181a4:	2300      	movs	r3, #0
 80181a6:	81fb      	strh	r3, [r7, #14]
 80181a8:	e01a      	b.n	80181e0 <lv_img_cache_set_size+0xb4>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 80181aa:	4b11      	ldr	r3, [pc, #68]	; (80181f0 <lv_img_cache_set_size+0xc4>)
 80181ac:	6819      	ldr	r1, [r3, #0]
 80181ae:	89fa      	ldrh	r2, [r7, #14]
 80181b0:	4613      	mov	r3, r2
 80181b2:	009b      	lsls	r3, r3, #2
 80181b4:	4413      	add	r3, r2
 80181b6:	00db      	lsls	r3, r3, #3
 80181b8:	440b      	add	r3, r1
 80181ba:	2124      	movs	r1, #36	; 0x24
 80181bc:	4618      	mov	r0, r3
 80181be:	f004 ffd0 	bl	801d162 <_lv_memset_00>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
 80181c2:	4b0b      	ldr	r3, [pc, #44]	; (80181f0 <lv_img_cache_set_size+0xc4>)
 80181c4:	6819      	ldr	r1, [r3, #0]
 80181c6:	89fa      	ldrh	r2, [r7, #14]
 80181c8:	4613      	mov	r3, r2
 80181ca:	009b      	lsls	r3, r3, #2
 80181cc:	4413      	add	r3, r2
 80181ce:	00db      	lsls	r3, r3, #3
 80181d0:	440b      	add	r3, r1
 80181d2:	2128      	movs	r1, #40	; 0x28
 80181d4:	4618      	mov	r0, r3
 80181d6:	f004 ffc4 	bl	801d162 <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
 80181da:	89fb      	ldrh	r3, [r7, #14]
 80181dc:	3301      	adds	r3, #1
 80181de:	81fb      	strh	r3, [r7, #14]
 80181e0:	4b05      	ldr	r3, [pc, #20]	; (80181f8 <lv_img_cache_set_size+0xcc>)
 80181e2:	881b      	ldrh	r3, [r3, #0]
 80181e4:	89fa      	ldrh	r2, [r7, #14]
 80181e6:	429a      	cmp	r2, r3
 80181e8:	d3df      	bcc.n	80181aa <lv_img_cache_set_size+0x7e>
    }
#endif
}
 80181ea:	3714      	adds	r7, #20
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd90      	pop	{r4, r7, pc}
 80181f0:	20021860 	.word	0x20021860
 80181f4:	0802d0fc 	.word	0x0802d0fc
 80181f8:	20018040 	.word	0x20018040

080181fc <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 80181fc:	b580      	push	{r7, lr}
 80181fe:	b084      	sub	sp, #16
 8018200:	af00      	add	r7, sp, #0
 8018202:	6078      	str	r0, [r7, #4]
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8018204:	4b27      	ldr	r3, [pc, #156]	; (80182a4 <lv_img_cache_invalidate_src+0xa8>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	60bb      	str	r3, [r7, #8]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 801820a:	2300      	movs	r3, #0
 801820c:	81fb      	strh	r3, [r7, #14]
 801820e:	e03f      	b.n	8018290 <lv_img_cache_invalidate_src+0x94>
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8018210:	89fa      	ldrh	r2, [r7, #14]
 8018212:	4613      	mov	r3, r2
 8018214:	009b      	lsls	r3, r3, #2
 8018216:	4413      	add	r3, r2
 8018218:	00db      	lsls	r3, r3, #3
 801821a:	461a      	mov	r2, r3
 801821c:	68bb      	ldr	r3, [r7, #8]
 801821e:	4413      	add	r3, r2
 8018220:	685b      	ldr	r3, [r3, #4]
 8018222:	687a      	ldr	r2, [r7, #4]
 8018224:	429a      	cmp	r2, r3
 8018226:	d002      	beq.n	801822e <lv_img_cache_invalidate_src+0x32>
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d12d      	bne.n	801828a <lv_img_cache_invalidate_src+0x8e>
            if(cache[i].dec_dsc.src != NULL) {
 801822e:	89fa      	ldrh	r2, [r7, #14]
 8018230:	4613      	mov	r3, r2
 8018232:	009b      	lsls	r3, r3, #2
 8018234:	4413      	add	r3, r2
 8018236:	00db      	lsls	r3, r3, #3
 8018238:	461a      	mov	r2, r3
 801823a:	68bb      	ldr	r3, [r7, #8]
 801823c:	4413      	add	r3, r2
 801823e:	685b      	ldr	r3, [r3, #4]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d00a      	beq.n	801825a <lv_img_cache_invalidate_src+0x5e>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8018244:	89fa      	ldrh	r2, [r7, #14]
 8018246:	4613      	mov	r3, r2
 8018248:	009b      	lsls	r3, r3, #2
 801824a:	4413      	add	r3, r2
 801824c:	00db      	lsls	r3, r3, #3
 801824e:	461a      	mov	r2, r3
 8018250:	68bb      	ldr	r3, [r7, #8]
 8018252:	4413      	add	r3, r2
 8018254:	4618      	mov	r0, r3
 8018256:	f000 f985 	bl	8018564 <lv_img_decoder_close>
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 801825a:	89fa      	ldrh	r2, [r7, #14]
 801825c:	4613      	mov	r3, r2
 801825e:	009b      	lsls	r3, r3, #2
 8018260:	4413      	add	r3, r2
 8018262:	00db      	lsls	r3, r3, #3
 8018264:	461a      	mov	r2, r3
 8018266:	68bb      	ldr	r3, [r7, #8]
 8018268:	4413      	add	r3, r2
 801826a:	2124      	movs	r1, #36	; 0x24
 801826c:	4618      	mov	r0, r3
 801826e:	f004 ff78 	bl	801d162 <_lv_memset_00>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
 8018272:	89fa      	ldrh	r2, [r7, #14]
 8018274:	4613      	mov	r3, r2
 8018276:	009b      	lsls	r3, r3, #2
 8018278:	4413      	add	r3, r2
 801827a:	00db      	lsls	r3, r3, #3
 801827c:	461a      	mov	r2, r3
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	4413      	add	r3, r2
 8018282:	2128      	movs	r1, #40	; 0x28
 8018284:	4618      	mov	r0, r3
 8018286:	f004 ff6c 	bl	801d162 <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
 801828a:	89fb      	ldrh	r3, [r7, #14]
 801828c:	3301      	adds	r3, #1
 801828e:	81fb      	strh	r3, [r7, #14]
 8018290:	4b05      	ldr	r3, [pc, #20]	; (80182a8 <lv_img_cache_invalidate_src+0xac>)
 8018292:	881b      	ldrh	r3, [r3, #0]
 8018294:	89fa      	ldrh	r2, [r7, #14]
 8018296:	429a      	cmp	r2, r3
 8018298:	d3ba      	bcc.n	8018210 <lv_img_cache_invalidate_src+0x14>
        }
    }
#endif
}
 801829a:	bf00      	nop
 801829c:	3710      	adds	r7, #16
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}
 80182a2:	bf00      	nop
 80182a4:	20021860 	.word	0x20021860
 80182a8:	20018040 	.word	0x20018040

080182ac <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 80182ac:	b490      	push	{r4, r7}
 80182ae:	b082      	sub	sp, #8
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	4604      	mov	r4, r0
 80182b4:	4608      	mov	r0, r1
 80182b6:	4611      	mov	r1, r2
 80182b8:	4622      	mov	r2, r4
 80182ba:	71fa      	strb	r2, [r7, #7]
 80182bc:	4602      	mov	r2, r0
 80182be:	71ba      	strb	r2, [r7, #6]
 80182c0:	460a      	mov	r2, r1
 80182c2:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 80182c4:	797a      	ldrb	r2, [r7, #5]
 80182c6:	f362 0307 	bfi	r3, r2, #0, #8
 80182ca:	79ba      	ldrb	r2, [r7, #6]
 80182cc:	f362 230f 	bfi	r3, r2, #8, #8
 80182d0:	79fa      	ldrb	r2, [r7, #7]
 80182d2:	f362 4317 	bfi	r3, r2, #16, #8
 80182d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 80182da:	4618      	mov	r0, r3
 80182dc:	3708      	adds	r7, #8
 80182de:	46bd      	mov	sp, r7
 80182e0:	bc90      	pop	{r4, r7}
 80182e2:	4770      	bx	lr

080182e4 <_lv_memcpy_small>:
{
 80182e4:	b480      	push	{r7}
 80182e6:	b087      	sub	sp, #28
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	60f8      	str	r0, [r7, #12]
 80182ec:	60b9      	str	r1, [r7, #8]
 80182ee:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 80182f4:	68bb      	ldr	r3, [r7, #8]
 80182f6:	613b      	str	r3, [r7, #16]
    while(len) {
 80182f8:	e00c      	b.n	8018314 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 80182fa:	693b      	ldr	r3, [r7, #16]
 80182fc:	781a      	ldrb	r2, [r3, #0]
 80182fe:	697b      	ldr	r3, [r7, #20]
 8018300:	701a      	strb	r2, [r3, #0]
        d8++;
 8018302:	697b      	ldr	r3, [r7, #20]
 8018304:	3301      	adds	r3, #1
 8018306:	617b      	str	r3, [r7, #20]
        s8++;
 8018308:	693b      	ldr	r3, [r7, #16]
 801830a:	3301      	adds	r3, #1
 801830c:	613b      	str	r3, [r7, #16]
        len--;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	3b01      	subs	r3, #1
 8018312:	607b      	str	r3, [r7, #4]
    while(len) {
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	2b00      	cmp	r3, #0
 8018318:	d1ef      	bne.n	80182fa <_lv_memcpy_small+0x16>
    return dst;
 801831a:	68fb      	ldr	r3, [r7, #12]
}
 801831c:	4618      	mov	r0, r3
 801831e:	371c      	adds	r7, #28
 8018320:	46bd      	mov	sp, r7
 8018322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018326:	4770      	bx	lr

08018328 <_lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 * */
void _lv_img_decoder_init(void)
{
 8018328:	b590      	push	{r4, r7, lr}
 801832a:	b083      	sub	sp, #12
 801832c:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 801832e:	2110      	movs	r1, #16
 8018330:	4817      	ldr	r0, [pc, #92]	; (8018390 <_lv_img_decoder_init+0x68>)
 8018332:	f003 fe5f 	bl	801bff4 <_lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 8018336:	f000 f93b 	bl	80185b0 <lv_img_decoder_create>
 801833a:	6078      	str	r0, [r7, #4]
    if(decoder == NULL) {
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d111      	bne.n	8018366 <_lv_img_decoder_init+0x3e>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        LV_ASSERT_MEM(decoder);
 8018342:	6878      	ldr	r0, [r7, #4]
 8018344:	f003 fc16 	bl	801bb74 <lv_debug_check_null>
 8018348:	4603      	mov	r3, r0
 801834a:	f083 0301 	eor.w	r3, r3, #1
 801834e:	b2db      	uxtb	r3, r3
 8018350:	2b00      	cmp	r3, #0
 8018352:	d019      	beq.n	8018388 <_lv_img_decoder_init+0x60>
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	f04f 0400 	mov.w	r4, #0
 801835a:	461a      	mov	r2, r3
 801835c:	4623      	mov	r3, r4
 801835e:	480d      	ldr	r0, [pc, #52]	; (8018394 <_lv_img_decoder_init+0x6c>)
 8018360:	f003 fc18 	bl	801bb94 <lv_debug_log_error>
 8018364:	e7fe      	b.n	8018364 <_lv_img_decoder_init+0x3c>
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8018366:	490c      	ldr	r1, [pc, #48]	; (8018398 <_lv_img_decoder_init+0x70>)
 8018368:	6878      	ldr	r0, [r7, #4]
 801836a:	f000 f94d 	bl	8018608 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 801836e:	490b      	ldr	r1, [pc, #44]	; (801839c <_lv_img_decoder_init+0x74>)
 8018370:	6878      	ldr	r0, [r7, #4]
 8018372:	f000 f957 	bl	8018624 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8018376:	490a      	ldr	r1, [pc, #40]	; (80183a0 <_lv_img_decoder_init+0x78>)
 8018378:	6878      	ldr	r0, [r7, #4]
 801837a:	f000 f961 	bl	8018640 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 801837e:	4909      	ldr	r1, [pc, #36]	; (80183a4 <_lv_img_decoder_init+0x7c>)
 8018380:	6878      	ldr	r0, [r7, #4]
 8018382:	f000 f96b 	bl	801865c <lv_img_decoder_set_close_cb>
 8018386:	e000      	b.n	801838a <_lv_img_decoder_init+0x62>
        return;
 8018388:	bf00      	nop
}
 801838a:	370c      	adds	r7, #12
 801838c:	46bd      	mov	sp, r7
 801838e:	bd90      	pop	{r4, r7, pc}
 8018390:	200217ac 	.word	0x200217ac
 8018394:	0802d10c 	.word	0x0802d10c
 8018398:	08018679 	.word	0x08018679
 801839c:	08018795 	.word	0x08018795
 80183a0:	08018b3d 	.word	0x08018b3d
 80183a4:	08018c61 	.word	0x08018c61

080183a8 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const char * src, lv_img_header_t * header)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b084      	sub	sp, #16
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]
 80183b0:	6039      	str	r1, [r7, #0]
    header->always_zero = 0;
 80183b2:	683a      	ldr	r2, [r7, #0]
 80183b4:	7813      	ldrb	r3, [r2, #0]
 80183b6:	f36f 1347 	bfc	r3, #5, #3
 80183ba:	7013      	strb	r3, [r2, #0]
    header->h = 0;
 80183bc:	683a      	ldr	r2, [r7, #0]
 80183be:	8853      	ldrh	r3, [r2, #2]
 80183c0:	f36f 134f 	bfc	r3, #5, #11
 80183c4:	8053      	strh	r3, [r2, #2]
    header->w = 0;
 80183c6:	683a      	ldr	r2, [r7, #0]
 80183c8:	6813      	ldr	r3, [r2, #0]
 80183ca:	f36f 2394 	bfc	r3, #10, #11
 80183ce:	6013      	str	r3, [r2, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
 80183d0:	683a      	ldr	r2, [r7, #0]
 80183d2:	7813      	ldrb	r3, [r2, #0]
 80183d4:	f36f 0304 	bfc	r3, #0, #5
 80183d8:	7013      	strb	r3, [r2, #0]

    lv_res_t res = LV_RES_INV;
 80183da:	2300      	movs	r3, #0
 80183dc:	73fb      	strb	r3, [r7, #15]
    lv_img_decoder_t * d;
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80183de:	4812      	ldr	r0, [pc, #72]	; (8018428 <lv_img_decoder_get_info+0x80>)
 80183e0:	f003 ff7e 	bl	801c2e0 <_lv_ll_get_head>
 80183e4:	60b8      	str	r0, [r7, #8]
 80183e6:	e015      	b.n	8018414 <lv_img_decoder_get_info+0x6c>
        res = LV_RES_INV;
 80183e8:	2300      	movs	r3, #0
 80183ea:	73fb      	strb	r3, [r7, #15]
        if(d->info_cb) {
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d00a      	beq.n	801840a <lv_img_decoder_get_info+0x62>
            res = d->info_cb(d, src, header);
 80183f4:	68bb      	ldr	r3, [r7, #8]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	683a      	ldr	r2, [r7, #0]
 80183fa:	6879      	ldr	r1, [r7, #4]
 80183fc:	68b8      	ldr	r0, [r7, #8]
 80183fe:	4798      	blx	r3
 8018400:	4603      	mov	r3, r0
 8018402:	73fb      	strb	r3, [r7, #15]
            if(res == LV_RES_OK) break;
 8018404:	7bfb      	ldrb	r3, [r7, #15]
 8018406:	2b01      	cmp	r3, #1
 8018408:	d008      	beq.n	801841c <lv_img_decoder_get_info+0x74>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 801840a:	68b9      	ldr	r1, [r7, #8]
 801840c:	4806      	ldr	r0, [pc, #24]	; (8018428 <lv_img_decoder_get_info+0x80>)
 801840e:	f003 ff8d 	bl	801c32c <_lv_ll_get_next>
 8018412:	60b8      	str	r0, [r7, #8]
 8018414:	68bb      	ldr	r3, [r7, #8]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d1e6      	bne.n	80183e8 <lv_img_decoder_get_info+0x40>
 801841a:	e000      	b.n	801841e <lv_img_decoder_get_info+0x76>
            if(res == LV_RES_OK) break;
 801841c:	bf00      	nop
        }
    }

    return res;
 801841e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018420:	4618      	mov	r0, r3
 8018422:	3710      	adds	r7, #16
 8018424:	46bd      	mov	sp, r7
 8018426:	bd80      	pop	{r7, pc}
 8018428:	200217ac 	.word	0x200217ac

0801842c <lv_img_decoder_open>:
 * @param color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return LV_RES_OK: opened the image. `dsc->img_data` and `dsc->header` are set.
 *         LV_RES_INV: none of the registered image decoders were able to open the image.
 */
lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, lv_color_t color)
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b088      	sub	sp, #32
 8018430:	af00      	add	r7, sp, #0
 8018432:	60f8      	str	r0, [r7, #12]
 8018434:	60b9      	str	r1, [r7, #8]
 8018436:	607a      	str	r2, [r7, #4]
    dsc->color     = color;
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	687a      	ldr	r2, [r7, #4]
 801843c:	609a      	str	r2, [r3, #8]
    dsc->src_type  = lv_img_src_get_type(src);
 801843e:	68b8      	ldr	r0, [r7, #8]
 8018440:	f7f5 ffb0 	bl	800e3a4 <lv_img_src_get_type>
 8018444:	4603      	mov	r3, r0
 8018446:	461a      	mov	r2, r3
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	731a      	strb	r2, [r3, #12]
    dsc->user_data = NULL;
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	2200      	movs	r2, #0
 8018450:	621a      	str	r2, [r3, #32]

    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	7b1b      	ldrb	r3, [r3, #12]
 8018456:	2b01      	cmp	r3, #1
 8018458:	d112      	bne.n	8018480 <lv_img_decoder_open+0x54>
        size_t fnlen = strlen(src);
 801845a:	68b8      	ldr	r0, [r7, #8]
 801845c:	f7e7 fede 	bl	800021c <strlen>
 8018460:	6178      	str	r0, [r7, #20]
        dsc->src = lv_mem_alloc(fnlen + 1);
 8018462:	697b      	ldr	r3, [r7, #20]
 8018464:	3301      	adds	r3, #1
 8018466:	4618      	mov	r0, r3
 8018468:	f004 f910 	bl	801c68c <lv_mem_alloc>
 801846c:	4602      	mov	r2, r0
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	605a      	str	r2, [r3, #4]
        strcpy((char *)dsc->src, src);
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	685b      	ldr	r3, [r3, #4]
 8018476:	68b9      	ldr	r1, [r7, #8]
 8018478:	4618      	mov	r0, r3
 801847a:	f014 fdee 	bl	802d05a <strcpy>
 801847e:	e002      	b.n	8018486 <lv_img_decoder_open+0x5a>
    }
    else {
        dsc->src       = src;
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	68ba      	ldr	r2, [r7, #8]
 8018484:	605a      	str	r2, [r3, #4]
    }

    lv_res_t res = LV_RES_INV;
 8018486:	2300      	movs	r3, #0
 8018488:	77fb      	strb	r3, [r7, #31]

    lv_img_decoder_t * d;
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 801848a:	481f      	ldr	r0, [pc, #124]	; (8018508 <lv_img_decoder_open+0xdc>)
 801848c:	f003 ff28 	bl	801c2e0 <_lv_ll_get_head>
 8018490:	61b8      	str	r0, [r7, #24]
 8018492:	e02f      	b.n	80184f4 <lv_img_decoder_open+0xc8>
        /*Info an Open callbacks are required*/
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8018494:	69bb      	ldr	r3, [r7, #24]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d023      	beq.n	80184e4 <lv_img_decoder_open+0xb8>
 801849c:	69bb      	ldr	r3, [r7, #24]
 801849e:	685b      	ldr	r3, [r3, #4]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d01f      	beq.n	80184e4 <lv_img_decoder_open+0xb8>

        res = d->info_cb(d, src, &dsc->header);
 80184a4:	69bb      	ldr	r3, [r7, #24]
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	68fa      	ldr	r2, [r7, #12]
 80184aa:	3210      	adds	r2, #16
 80184ac:	68b9      	ldr	r1, [r7, #8]
 80184ae:	69b8      	ldr	r0, [r7, #24]
 80184b0:	4798      	blx	r3
 80184b2:	4603      	mov	r3, r0
 80184b4:	77fb      	strb	r3, [r7, #31]
        if(res != LV_RES_OK) continue;
 80184b6:	7ffb      	ldrb	r3, [r7, #31]
 80184b8:	2b01      	cmp	r3, #1
 80184ba:	d115      	bne.n	80184e8 <lv_img_decoder_open+0xbc>

        dsc->error_msg = NULL;
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	2200      	movs	r2, #0
 80184c0:	61da      	str	r2, [r3, #28]
        dsc->img_data  = NULL;
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	2200      	movs	r2, #0
 80184c6:	615a      	str	r2, [r3, #20]
        dsc->decoder   = d;
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	69ba      	ldr	r2, [r7, #24]
 80184cc:	601a      	str	r2, [r3, #0]

        res = d->open_cb(d, dsc);
 80184ce:	69bb      	ldr	r3, [r7, #24]
 80184d0:	685b      	ldr	r3, [r3, #4]
 80184d2:	68f9      	ldr	r1, [r7, #12]
 80184d4:	69b8      	ldr	r0, [r7, #24]
 80184d6:	4798      	blx	r3
 80184d8:	4603      	mov	r3, r0
 80184da:	77fb      	strb	r3, [r7, #31]

        /*Opened successfully. It is a good decoder to for this image source*/
        if(res == LV_RES_OK) break;
 80184dc:	7ffb      	ldrb	r3, [r7, #31]
 80184de:	2b01      	cmp	r3, #1
 80184e0:	d00c      	beq.n	80184fc <lv_img_decoder_open+0xd0>
 80184e2:	e002      	b.n	80184ea <lv_img_decoder_open+0xbe>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 80184e4:	bf00      	nop
 80184e6:	e000      	b.n	80184ea <lv_img_decoder_open+0xbe>
        if(res != LV_RES_OK) continue;
 80184e8:	bf00      	nop
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80184ea:	69b9      	ldr	r1, [r7, #24]
 80184ec:	4806      	ldr	r0, [pc, #24]	; (8018508 <lv_img_decoder_open+0xdc>)
 80184ee:	f003 ff1d 	bl	801c32c <_lv_ll_get_next>
 80184f2:	61b8      	str	r0, [r7, #24]
 80184f4:	69bb      	ldr	r3, [r7, #24]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d1cc      	bne.n	8018494 <lv_img_decoder_open+0x68>
 80184fa:	e000      	b.n	80184fe <lv_img_decoder_open+0xd2>
        if(res == LV_RES_OK) break;
 80184fc:	bf00      	nop
    }

    return res;
 80184fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8018500:	4618      	mov	r0, r3
 8018502:	3720      	adds	r7, #32
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}
 8018508:	200217ac 	.word	0x200217ac

0801850c <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 801850c:	b590      	push	{r4, r7, lr}
 801850e:	b089      	sub	sp, #36	; 0x24
 8018510:	af02      	add	r7, sp, #8
 8018512:	60f8      	str	r0, [r7, #12]
 8018514:	4608      	mov	r0, r1
 8018516:	4611      	mov	r1, r2
 8018518:	461a      	mov	r2, r3
 801851a:	4603      	mov	r3, r0
 801851c:	817b      	strh	r3, [r7, #10]
 801851e:	460b      	mov	r3, r1
 8018520:	813b      	strh	r3, [r7, #8]
 8018522:	4613      	mov	r3, r2
 8018524:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 8018526:	2300      	movs	r3, #0
 8018528:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	689b      	ldr	r3, [r3, #8]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d012      	beq.n	801855a <lv_img_decoder_read_line+0x4e>
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	689c      	ldr	r4, [r3, #8]
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	6818      	ldr	r0, [r3, #0]
 801853e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8018542:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018548:	9301      	str	r3, [sp, #4]
 801854a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801854e:	9300      	str	r3, [sp, #0]
 8018550:	460b      	mov	r3, r1
 8018552:	68f9      	ldr	r1, [r7, #12]
 8018554:	47a0      	blx	r4
 8018556:	4603      	mov	r3, r0
 8018558:	75fb      	strb	r3, [r7, #23]

    return res;
 801855a:	7dfb      	ldrb	r3, [r7, #23]
}
 801855c:	4618      	mov	r0, r3
 801855e:	371c      	adds	r7, #28
 8018560:	46bd      	mov	sp, r7
 8018562:	bd90      	pop	{r4, r7, pc}

08018564 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b082      	sub	sp, #8
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d018      	beq.n	80185a6 <lv_img_decoder_close+0x42>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	68db      	ldr	r3, [r3, #12]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d007      	beq.n	801858e <lv_img_decoder_close+0x2a>
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	68db      	ldr	r3, [r3, #12]
 8018584:	687a      	ldr	r2, [r7, #4]
 8018586:	6812      	ldr	r2, [r2, #0]
 8018588:	6879      	ldr	r1, [r7, #4]
 801858a:	4610      	mov	r0, r2
 801858c:	4798      	blx	r3

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	7b1b      	ldrb	r3, [r3, #12]
 8018592:	2b01      	cmp	r3, #1
 8018594:	d107      	bne.n	80185a6 <lv_img_decoder_close+0x42>
            lv_mem_free(dsc->src);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	685b      	ldr	r3, [r3, #4]
 801859a:	4618      	mov	r0, r3
 801859c:	f004 f8c0 	bl	801c720 <lv_mem_free>
            dsc->src = NULL;
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	2200      	movs	r2, #0
 80185a4:	605a      	str	r2, [r3, #4]
        }
    }
}
 80185a6:	bf00      	nop
 80185a8:	3708      	adds	r7, #8
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}
	...

080185b0 <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 80185b0:	b590      	push	{r4, r7, lr}
 80185b2:	b083      	sub	sp, #12
 80185b4:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 80185b6:	4812      	ldr	r0, [pc, #72]	; (8018600 <lv_img_decoder_create+0x50>)
 80185b8:	f003 fd35 	bl	801c026 <_lv_ll_ins_head>
 80185bc:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MEM(decoder);
 80185be:	6878      	ldr	r0, [r7, #4]
 80185c0:	f003 fad8 	bl	801bb74 <lv_debug_check_null>
 80185c4:	4603      	mov	r3, r0
 80185c6:	f083 0301 	eor.w	r3, r3, #1
 80185ca:	b2db      	uxtb	r3, r3
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d008      	beq.n	80185e2 <lv_img_decoder_create+0x32>
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	f04f 0400 	mov.w	r4, #0
 80185d6:	461a      	mov	r2, r3
 80185d8:	4623      	mov	r3, r4
 80185da:	480a      	ldr	r0, [pc, #40]	; (8018604 <lv_img_decoder_create+0x54>)
 80185dc:	f003 fada 	bl	801bb94 <lv_debug_log_error>
 80185e0:	e7fe      	b.n	80185e0 <lv_img_decoder_create+0x30>
    if(decoder == NULL) return NULL;
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d101      	bne.n	80185ec <lv_img_decoder_create+0x3c>
 80185e8:	2300      	movs	r3, #0
 80185ea:	e004      	b.n	80185f6 <lv_img_decoder_create+0x46>

    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 80185ec:	2110      	movs	r1, #16
 80185ee:	6878      	ldr	r0, [r7, #4]
 80185f0:	f004 fdb7 	bl	801d162 <_lv_memset_00>

    return decoder;
 80185f4:	687b      	ldr	r3, [r7, #4]
}
 80185f6:	4618      	mov	r0, r3
 80185f8:	370c      	adds	r7, #12
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bd90      	pop	{r4, r7, pc}
 80185fe:	bf00      	nop
 8018600:	200217ac 	.word	0x200217ac
 8018604:	0802d10c 	.word	0x0802d10c

08018608 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 8018608:	b480      	push	{r7}
 801860a:	b083      	sub	sp, #12
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
 8018610:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	683a      	ldr	r2, [r7, #0]
 8018616:	601a      	str	r2, [r3, #0]
}
 8018618:	bf00      	nop
 801861a:	370c      	adds	r7, #12
 801861c:	46bd      	mov	sp, r7
 801861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018622:	4770      	bx	lr

08018624 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8018624:	b480      	push	{r7}
 8018626:	b083      	sub	sp, #12
 8018628:	af00      	add	r7, sp, #0
 801862a:	6078      	str	r0, [r7, #4]
 801862c:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	683a      	ldr	r2, [r7, #0]
 8018632:	605a      	str	r2, [r3, #4]
}
 8018634:	bf00      	nop
 8018636:	370c      	adds	r7, #12
 8018638:	46bd      	mov	sp, r7
 801863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863e:	4770      	bx	lr

08018640 <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 8018640:	b480      	push	{r7}
 8018642:	b083      	sub	sp, #12
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
 8018648:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	683a      	ldr	r2, [r7, #0]
 801864e:	609a      	str	r2, [r3, #8]
}
 8018650:	bf00      	nop
 8018652:	370c      	adds	r7, #12
 8018654:	46bd      	mov	sp, r7
 8018656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865a:	4770      	bx	lr

0801865c <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 801865c:	b480      	push	{r7}
 801865e:	b083      	sub	sp, #12
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
 8018664:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	683a      	ldr	r2, [r7, #0]
 801866a:	60da      	str	r2, [r3, #12]
}
 801866c:	bf00      	nop
 801866e:	370c      	adds	r7, #12
 8018670:	46bd      	mov	sp, r7
 8018672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018676:	4770      	bx	lr

08018678 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b088      	sub	sp, #32
 801867c:	af00      	add	r7, sp, #0
 801867e:	60f8      	str	r0, [r7, #12]
 8018680:	60b9      	str	r1, [r7, #8]
 8018682:	607a      	str	r2, [r7, #4]
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8018684:	68b8      	ldr	r0, [r7, #8]
 8018686:	f7f5 fe8d 	bl	800e3a4 <lv_img_src_get_type>
 801868a:	4603      	mov	r3, r0
 801868c:	77fb      	strb	r3, [r7, #31]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801868e:	7ffb      	ldrb	r3, [r7, #31]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d12c      	bne.n	80186ee <lv_img_decoder_built_in_info+0x76>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8018694:	68bb      	ldr	r3, [r7, #8]
 8018696:	781b      	ldrb	r3, [r3, #0]
 8018698:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801869c:	b2db      	uxtb	r3, r3
 801869e:	777b      	strb	r3, [r7, #29]
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80186a0:	7f7b      	ldrb	r3, [r7, #29]
 80186a2:	2b03      	cmp	r3, #3
 80186a4:	d902      	bls.n	80186ac <lv_img_decoder_built_in_info+0x34>
 80186a6:	7f7b      	ldrb	r3, [r7, #29]
 80186a8:	2b0e      	cmp	r3, #14
 80186aa:	d901      	bls.n	80186b0 <lv_img_decoder_built_in_info+0x38>
 80186ac:	2300      	movs	r3, #0
 80186ae:	e06d      	b.n	801878c <lv_img_decoder_built_in_info+0x114>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80186b0:	68bb      	ldr	r3, [r7, #8]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80186b8:	b299      	uxth	r1, r3
 80186ba:	687a      	ldr	r2, [r7, #4]
 80186bc:	6813      	ldr	r3, [r2, #0]
 80186be:	f361 2394 	bfi	r3, r1, #10, #11
 80186c2:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80186c4:	68bb      	ldr	r3, [r7, #8]
 80186c6:	885b      	ldrh	r3, [r3, #2]
 80186c8:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80186cc:	b299      	uxth	r1, r3
 80186ce:	687a      	ldr	r2, [r7, #4]
 80186d0:	8853      	ldrh	r3, [r2, #2]
 80186d2:	f361 134f 	bfi	r3, r1, #5, #11
 80186d6:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80186d8:	68bb      	ldr	r3, [r7, #8]
 80186da:	781b      	ldrb	r3, [r3, #0]
 80186dc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80186e0:	b2d9      	uxtb	r1, r3
 80186e2:	687a      	ldr	r2, [r7, #4]
 80186e4:	7813      	ldrb	r3, [r2, #0]
 80186e6:	f361 0304 	bfi	r3, r1, #0, #5
 80186ea:	7013      	strb	r3, [r2, #0]
 80186ec:	e04d      	b.n	801878a <lv_img_decoder_built_in_info+0x112>
    }
#if LV_USE_FILESYSTEM
    else if(src_type == LV_IMG_SRC_FILE) {
 80186ee:	7ffb      	ldrb	r3, [r7, #31]
 80186f0:	2b01      	cmp	r3, #1
 80186f2:	d132      	bne.n	801875a <lv_img_decoder_built_in_info+0xe2>
        lv_fs_file_t file;
        lv_fs_res_t res;
        uint32_t rn;
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 80186f4:	f107 0314 	add.w	r3, r7, #20
 80186f8:	2202      	movs	r2, #2
 80186fa:	68b9      	ldr	r1, [r7, #8]
 80186fc:	4618      	mov	r0, r3
 80186fe:	f003 fae3 	bl	801bcc8 <lv_fs_open>
 8018702:	4603      	mov	r3, r0
 8018704:	77bb      	strb	r3, [r7, #30]
        if(res == LV_FS_RES_OK) {
 8018706:	7fbb      	ldrb	r3, [r7, #30]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d116      	bne.n	801873a <lv_img_decoder_built_in_info+0xc2>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 801870c:	f107 0310 	add.w	r3, r7, #16
 8018710:	f107 0014 	add.w	r0, r7, #20
 8018714:	2204      	movs	r2, #4
 8018716:	6879      	ldr	r1, [r7, #4]
 8018718:	f003 fba2 	bl	801be60 <lv_fs_read>
 801871c:	4603      	mov	r3, r0
 801871e:	77bb      	strb	r3, [r7, #30]
            lv_fs_close(&file);
 8018720:	f107 0314 	add.w	r3, r7, #20
 8018724:	4618      	mov	r0, r3
 8018726:	f003 fb6f 	bl	801be08 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 801872a:	7fbb      	ldrb	r3, [r7, #30]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d102      	bne.n	8018736 <lv_img_decoder_built_in_info+0xbe>
 8018730:	693b      	ldr	r3, [r7, #16]
 8018732:	2b04      	cmp	r3, #4
 8018734:	d001      	beq.n	801873a <lv_img_decoder_built_in_info+0xc2>
                LV_LOG_WARN("Image get info get read file header");
                return LV_RES_INV;
 8018736:	2300      	movs	r3, #0
 8018738:	e028      	b.n	801878c <lv_img_decoder_built_in_info+0x114>
            }
        }

        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	781b      	ldrb	r3, [r3, #0]
 801873e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018742:	b2db      	uxtb	r3, r3
 8018744:	2b03      	cmp	r3, #3
 8018746:	d906      	bls.n	8018756 <lv_img_decoder_built_in_info+0xde>
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	781b      	ldrb	r3, [r3, #0]
 801874c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018750:	b2db      	uxtb	r3, r3
 8018752:	2b0e      	cmp	r3, #14
 8018754:	d919      	bls.n	801878a <lv_img_decoder_built_in_info+0x112>
 8018756:	2300      	movs	r3, #0
 8018758:	e018      	b.n	801878c <lv_img_decoder_built_in_info+0x114>

    }
#endif
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 801875a:	7ffb      	ldrb	r3, [r7, #31]
 801875c:	2b02      	cmp	r3, #2
 801875e:	d112      	bne.n	8018786 <lv_img_decoder_built_in_info+0x10e>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         * function*/
        header->w = 1;
 8018760:	687a      	ldr	r2, [r7, #4]
 8018762:	6813      	ldr	r3, [r2, #0]
 8018764:	2101      	movs	r1, #1
 8018766:	f361 2394 	bfi	r3, r1, #10, #11
 801876a:	6013      	str	r3, [r2, #0]
        header->h = 1;
 801876c:	687a      	ldr	r2, [r7, #4]
 801876e:	8853      	ldrh	r3, [r2, #2]
 8018770:	2101      	movs	r1, #1
 8018772:	f361 134f 	bfi	r3, r1, #5, #11
 8018776:	8053      	strh	r3, [r2, #2]
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8018778:	687a      	ldr	r2, [r7, #4]
 801877a:	7813      	ldrb	r3, [r2, #0]
 801877c:	210b      	movs	r1, #11
 801877e:	f361 0304 	bfi	r3, r1, #0, #5
 8018782:	7013      	strb	r3, [r2, #0]
 8018784:	e001      	b.n	801878a <lv_img_decoder_built_in_info+0x112>
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 8018786:	2300      	movs	r3, #0
 8018788:	e000      	b.n	801878c <lv_img_decoder_built_in_info+0x114>
    }
    return LV_RES_OK;
 801878a:	2301      	movs	r3, #1
}
 801878c:	4618      	mov	r0, r3
 801878e:	3720      	adds	r7, #32
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}

08018794 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `style` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8018794:	b5b0      	push	{r4, r5, r7, lr}
 8018796:	b08e      	sub	sp, #56	; 0x38
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
 801879c:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	7b1b      	ldrb	r3, [r3, #12]
 80187a2:	2b01      	cmp	r3, #1
 80187a4:	d17b      	bne.n	801889e <lv_img_decoder_built_in_open+0x10a>
#if LV_USE_FILESYSTEM

        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 80187a6:	683b      	ldr	r3, [r7, #0]
 80187a8:	685b      	ldr	r3, [r3, #4]
 80187aa:	4618      	mov	r0, r3
 80187ac:	f003 fbd0 	bl	801bf50 <lv_fs_get_ext>
 80187b0:	4603      	mov	r3, r0
 80187b2:	49a4      	ldr	r1, [pc, #656]	; (8018a44 <lv_img_decoder_built_in_open+0x2b0>)
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7e7 fd27 	bl	8000208 <strcmp>
 80187ba:	4603      	mov	r3, r0
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d001      	beq.n	80187c4 <lv_img_decoder_built_in_open+0x30>
 80187c0:	2300      	movs	r3, #0
 80187c2:	e1b6      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 80187c4:	683b      	ldr	r3, [r7, #0]
 80187c6:	6859      	ldr	r1, [r3, #4]
 80187c8:	f107 0310 	add.w	r3, r7, #16
 80187cc:	2202      	movs	r2, #2
 80187ce:	4618      	mov	r0, r3
 80187d0:	f003 fa7a 	bl	801bcc8 <lv_fs_open>
 80187d4:	4603      	mov	r3, r0
 80187d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(res != LV_FS_RES_OK) {
 80187da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d001      	beq.n	80187e6 <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 80187e2:	2300      	movs	r3, #0
 80187e4:	e1a5      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 80187e6:	683b      	ldr	r3, [r7, #0]
 80187e8:	6a1b      	ldr	r3, [r3, #32]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d126      	bne.n	801883c <lv_img_decoder_built_in_open+0xa8>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80187ee:	200c      	movs	r0, #12
 80187f0:	f003 ff4c 	bl	801c68c <lv_mem_alloc>
 80187f4:	4602      	mov	r2, r0
 80187f6:	683b      	ldr	r3, [r7, #0]
 80187f8:	621a      	str	r2, [r3, #32]
            LV_ASSERT_MEM(dsc->user_data);
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	6a1b      	ldr	r3, [r3, #32]
 80187fe:	4618      	mov	r0, r3
 8018800:	f003 f9b8 	bl	801bb74 <lv_debug_check_null>
 8018804:	4603      	mov	r3, r0
 8018806:	f083 0301 	eor.w	r3, r3, #1
 801880a:	b2db      	uxtb	r3, r3
 801880c:	2b00      	cmp	r3, #0
 801880e:	d009      	beq.n	8018824 <lv_img_decoder_built_in_open+0x90>
 8018810:	683b      	ldr	r3, [r7, #0]
 8018812:	6a1b      	ldr	r3, [r3, #32]
 8018814:	f04f 0400 	mov.w	r4, #0
 8018818:	461a      	mov	r2, r3
 801881a:	4623      	mov	r3, r4
 801881c:	488a      	ldr	r0, [pc, #552]	; (8018a48 <lv_img_decoder_built_in_open+0x2b4>)
 801881e:	f003 f9b9 	bl	801bb94 <lv_debug_log_error>
 8018822:	e7fe      	b.n	8018822 <lv_img_decoder_built_in_open+0x8e>
            if(dsc->user_data == NULL) {
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	6a1b      	ldr	r3, [r3, #32]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d101      	bne.n	8018830 <lv_img_decoder_built_in_open+0x9c>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                return LV_RES_INV;
 801882c:	2300      	movs	r3, #0
 801882e:	e180      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>
            }
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8018830:	683b      	ldr	r3, [r7, #0]
 8018832:	6a1b      	ldr	r3, [r3, #32]
 8018834:	210c      	movs	r1, #12
 8018836:	4618      	mov	r0, r3
 8018838:	f004 fc93 	bl	801d162 <_lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	6a1b      	ldr	r3, [r3, #32]
 8018840:	62bb      	str	r3, [r7, #40]	; 0x28
        user_data->f = lv_mem_alloc(sizeof(f));
 8018842:	2008      	movs	r0, #8
 8018844:	f003 ff22 	bl	801c68c <lv_mem_alloc>
 8018848:	4602      	mov	r2, r0
 801884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801884c:	601a      	str	r2, [r3, #0]
        LV_ASSERT_MEM(user_data->f);
 801884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	4618      	mov	r0, r3
 8018854:	f003 f98e 	bl	801bb74 <lv_debug_check_null>
 8018858:	4603      	mov	r3, r0
 801885a:	f083 0301 	eor.w	r3, r3, #1
 801885e:	b2db      	uxtb	r3, r3
 8018860:	2b00      	cmp	r3, #0
 8018862:	d009      	beq.n	8018878 <lv_img_decoder_built_in_open+0xe4>
 8018864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	f04f 0400 	mov.w	r4, #0
 801886c:	461a      	mov	r2, r3
 801886e:	4623      	mov	r3, r4
 8018870:	4875      	ldr	r0, [pc, #468]	; (8018a48 <lv_img_decoder_built_in_open+0x2b4>)
 8018872:	f003 f98f 	bl	801bb94 <lv_debug_log_error>
 8018876:	e7fe      	b.n	8018876 <lv_img_decoder_built_in_open+0xe2>
        if(user_data->f == NULL) {
 8018878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d105      	bne.n	801888c <lv_img_decoder_built_in_open+0xf8>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8018880:	6839      	ldr	r1, [r7, #0]
 8018882:	6878      	ldr	r0, [r7, #4]
 8018884:	f000 f9ec 	bl	8018c60 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8018888:	2300      	movs	r3, #0
 801888a:	e152      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>
        }

        _lv_memcpy_small(user_data->f, &f, sizeof(f));
 801888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	f107 0110 	add.w	r1, r7, #16
 8018894:	2208      	movs	r2, #8
 8018896:	4618      	mov	r0, r3
 8018898:	f7ff fd24 	bl	80182e4 <_lv_memcpy_small>
 801889c:	e00a      	b.n	80188b4 <lv_img_decoder_built_in_open+0x120>
#else
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
        return LV_RES_INV;
#endif
    }
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	7b1b      	ldrb	r3, [r3, #12]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d106      	bne.n	80188b4 <lv_img_decoder_built_in_open+0x120>
        /*The variables should have valid data*/
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 80188a6:	683b      	ldr	r3, [r7, #0]
 80188a8:	685b      	ldr	r3, [r3, #4]
 80188aa:	689b      	ldr	r3, [r3, #8]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d101      	bne.n	80188b4 <lv_img_decoder_built_in_open+0x120>
            return LV_RES_INV;
 80188b0:	2300      	movs	r3, #0
 80188b2:	e13e      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>
        }
    }

    lv_img_cf_t cf = dsc->header.cf;
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	7c1b      	ldrb	r3, [r3, #16]
 80188b8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80188bc:	b2db      	uxtb	r3, r3
 80188be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80188c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188c6:	2b04      	cmp	r3, #4
 80188c8:	d007      	beq.n	80188da <lv_img_decoder_built_in_open+0x146>
 80188ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188ce:	2b05      	cmp	r3, #5
 80188d0:	d003      	beq.n	80188da <lv_img_decoder_built_in_open+0x146>
 80188d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188d6:	2b06      	cmp	r3, #6
 80188d8:	d10f      	bne.n	80188fa <lv_img_decoder_built_in_open+0x166>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	7b1b      	ldrb	r3, [r3, #12]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d106      	bne.n	80188f0 <lv_img_decoder_built_in_open+0x15c>
            /* In case of uncompressed formats the image stored in the ROM/RAM.
             * So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	685b      	ldr	r3, [r3, #4]
 80188e6:	689a      	ldr	r2, [r3, #8]
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 80188ec:	2301      	movs	r3, #1
 80188ee:	e120      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>
        }
        else {
            /*If it's a file it need to be read line by line later*/
            dsc->img_data = NULL;
 80188f0:	683b      	ldr	r3, [r7, #0]
 80188f2:	2200      	movs	r2, #0
 80188f4:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 80188f6:	2301      	movs	r3, #1
 80188f8:	e11b      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 80188fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188fe:	2b07      	cmp	r3, #7
 8018900:	d00c      	beq.n	801891c <lv_img_decoder_built_in_open+0x188>
 8018902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018906:	2b08      	cmp	r3, #8
 8018908:	d008      	beq.n	801891c <lv_img_decoder_built_in_open+0x188>
 801890a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801890e:	2b09      	cmp	r3, #9
 8018910:	d004      	beq.n	801891c <lv_img_decoder_built_in_open+0x188>
 8018912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018916:	2b0a      	cmp	r3, #10
 8018918:	f040 80f1 	bne.w	8018afe <lv_img_decoder_built_in_open+0x36a>
            cf == LV_IMG_CF_INDEXED_8BIT) {

#if LV_IMG_CF_INDEXED
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 801891c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018920:	4618      	mov	r0, r3
 8018922:	f7f5 fca1 	bl	800e268 <lv_img_cf_get_px_size>
 8018926:	4603      	mov	r3, r0
 8018928:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t palette_size = 1 << px_size;
 801892c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018930:	2201      	movs	r2, #1
 8018932:	fa02 f303 	lsl.w	r3, r2, r3
 8018936:	623b      	str	r3, [r7, #32]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 8018938:	683b      	ldr	r3, [r7, #0]
 801893a:	6a1b      	ldr	r3, [r3, #32]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d12a      	bne.n	8018996 <lv_img_decoder_built_in_open+0x202>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8018940:	200c      	movs	r0, #12
 8018942:	f003 fea3 	bl	801c68c <lv_mem_alloc>
 8018946:	4602      	mov	r2, r0
 8018948:	683b      	ldr	r3, [r7, #0]
 801894a:	621a      	str	r2, [r3, #32]
            LV_ASSERT_MEM(dsc->user_data);
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	6a1b      	ldr	r3, [r3, #32]
 8018950:	4618      	mov	r0, r3
 8018952:	f003 f90f 	bl	801bb74 <lv_debug_check_null>
 8018956:	4603      	mov	r3, r0
 8018958:	f083 0301 	eor.w	r3, r3, #1
 801895c:	b2db      	uxtb	r3, r3
 801895e:	2b00      	cmp	r3, #0
 8018960:	d009      	beq.n	8018976 <lv_img_decoder_built_in_open+0x1e2>
 8018962:	683b      	ldr	r3, [r7, #0]
 8018964:	6a1b      	ldr	r3, [r3, #32]
 8018966:	f04f 0400 	mov.w	r4, #0
 801896a:	461a      	mov	r2, r3
 801896c:	4623      	mov	r3, r4
 801896e:	4836      	ldr	r0, [pc, #216]	; (8018a48 <lv_img_decoder_built_in_open+0x2b4>)
 8018970:	f003 f910 	bl	801bb94 <lv_debug_log_error>
 8018974:	e7fe      	b.n	8018974 <lv_img_decoder_built_in_open+0x1e0>
            if(dsc->user_data == NULL) {
 8018976:	683b      	ldr	r3, [r7, #0]
 8018978:	6a1b      	ldr	r3, [r3, #32]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d105      	bne.n	801898a <lv_img_decoder_built_in_open+0x1f6>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_img_decoder_built_in_close(decoder, dsc);
 801897e:	6839      	ldr	r1, [r7, #0]
 8018980:	6878      	ldr	r0, [r7, #4]
 8018982:	f000 f96d 	bl	8018c60 <lv_img_decoder_built_in_close>
                return LV_RES_INV;
 8018986:	2300      	movs	r3, #0
 8018988:	e0d3      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>
            }
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 801898a:	683b      	ldr	r3, [r7, #0]
 801898c:	6a1b      	ldr	r3, [r3, #32]
 801898e:	210c      	movs	r1, #12
 8018990:	4618      	mov	r0, r3
 8018992:	f004 fbe6 	bl	801d162 <_lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018996:	683b      	ldr	r3, [r7, #0]
 8018998:	6a1b      	ldr	r3, [r3, #32]
 801899a:	61fb      	str	r3, [r7, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 801899c:	6a3b      	ldr	r3, [r7, #32]
 801899e:	009b      	lsls	r3, r3, #2
 80189a0:	4618      	mov	r0, r3
 80189a2:	f003 fe73 	bl	801c68c <lv_mem_alloc>
 80189a6:	4602      	mov	r2, r0
 80189a8:	69fb      	ldr	r3, [r7, #28]
 80189aa:	605a      	str	r2, [r3, #4]
        LV_ASSERT_MEM(user_data->palette);
 80189ac:	69fb      	ldr	r3, [r7, #28]
 80189ae:	685b      	ldr	r3, [r3, #4]
 80189b0:	4618      	mov	r0, r3
 80189b2:	f003 f8df 	bl	801bb74 <lv_debug_check_null>
 80189b6:	4603      	mov	r3, r0
 80189b8:	f083 0301 	eor.w	r3, r3, #1
 80189bc:	b2db      	uxtb	r3, r3
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d009      	beq.n	80189d6 <lv_img_decoder_built_in_open+0x242>
 80189c2:	69fb      	ldr	r3, [r7, #28]
 80189c4:	685b      	ldr	r3, [r3, #4]
 80189c6:	f04f 0400 	mov.w	r4, #0
 80189ca:	461a      	mov	r2, r3
 80189cc:	4623      	mov	r3, r4
 80189ce:	481e      	ldr	r0, [pc, #120]	; (8018a48 <lv_img_decoder_built_in_open+0x2b4>)
 80189d0:	f003 f8e0 	bl	801bb94 <lv_debug_log_error>
 80189d4:	e7fe      	b.n	80189d4 <lv_img_decoder_built_in_open+0x240>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 80189d6:	6a38      	ldr	r0, [r7, #32]
 80189d8:	f003 fe58 	bl	801c68c <lv_mem_alloc>
 80189dc:	4602      	mov	r2, r0
 80189de:	69fb      	ldr	r3, [r7, #28]
 80189e0:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MEM(user_data->opa);
 80189e2:	69fb      	ldr	r3, [r7, #28]
 80189e4:	689b      	ldr	r3, [r3, #8]
 80189e6:	4618      	mov	r0, r3
 80189e8:	f003 f8c4 	bl	801bb74 <lv_debug_check_null>
 80189ec:	4603      	mov	r3, r0
 80189ee:	f083 0301 	eor.w	r3, r3, #1
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d009      	beq.n	8018a0c <lv_img_decoder_built_in_open+0x278>
 80189f8:	69fb      	ldr	r3, [r7, #28]
 80189fa:	689b      	ldr	r3, [r3, #8]
 80189fc:	f04f 0400 	mov.w	r4, #0
 8018a00:	461a      	mov	r2, r3
 8018a02:	4623      	mov	r3, r4
 8018a04:	4810      	ldr	r0, [pc, #64]	; (8018a48 <lv_img_decoder_built_in_open+0x2b4>)
 8018a06:	f003 f8c5 	bl	801bb94 <lv_debug_log_error>
 8018a0a:	e7fe      	b.n	8018a0a <lv_img_decoder_built_in_open+0x276>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8018a0c:	69fb      	ldr	r3, [r7, #28]
 8018a0e:	685b      	ldr	r3, [r3, #4]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d003      	beq.n	8018a1c <lv_img_decoder_built_in_open+0x288>
 8018a14:	69fb      	ldr	r3, [r7, #28]
 8018a16:	689b      	ldr	r3, [r3, #8]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d105      	bne.n	8018a28 <lv_img_decoder_built_in_open+0x294>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8018a1c:	6839      	ldr	r1, [r7, #0]
 8018a1e:	6878      	ldr	r0, [r7, #4]
 8018a20:	f000 f91e 	bl	8018c60 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8018a24:	2300      	movs	r3, #0
 8018a26:	e084      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018a28:	683b      	ldr	r3, [r7, #0]
 8018a2a:	7b1b      	ldrb	r3, [r3, #12]
 8018a2c:	2b01      	cmp	r3, #1
 8018a2e:	d130      	bne.n	8018a92 <lv_img_decoder_built_in_open+0x2fe>
            /*Read the palette from file*/
#if LV_USE_FILESYSTEM
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 8018a30:	69fb      	ldr	r3, [r7, #28]
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	2104      	movs	r1, #4
 8018a36:	4618      	mov	r0, r3
 8018a38:	f003 fa48 	bl	801becc <lv_fs_seek>
            lv_color32_t cur_color;
            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8018a40:	e022      	b.n	8018a88 <lv_img_decoder_built_in_open+0x2f4>
 8018a42:	bf00      	nop
 8018a44:	0802d11c 	.word	0x0802d11c
 8018a48:	0802d10c 	.word	0x0802d10c
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8018a4c:	69fb      	ldr	r3, [r7, #28]
 8018a4e:	6818      	ldr	r0, [r3, #0]
 8018a50:	f107 010c 	add.w	r1, r7, #12
 8018a54:	2300      	movs	r3, #0
 8018a56:	2204      	movs	r2, #4
 8018a58:	f003 fa02 	bl	801be60 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8018a5c:	7bb8      	ldrb	r0, [r7, #14]
 8018a5e:	7b79      	ldrb	r1, [r7, #13]
 8018a60:	7b3d      	ldrb	r5, [r7, #12]
 8018a62:	69fb      	ldr	r3, [r7, #28]
 8018a64:	685a      	ldr	r2, [r3, #4]
 8018a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a68:	009b      	lsls	r3, r3, #2
 8018a6a:	18d4      	adds	r4, r2, r3
 8018a6c:	462a      	mov	r2, r5
 8018a6e:	f7ff fc1d 	bl	80182ac <lv_color_make>
 8018a72:	4603      	mov	r3, r0
 8018a74:	6023      	str	r3, [r4, #0]
                user_data->opa[i]     = cur_color.ch.alpha;
 8018a76:	69fb      	ldr	r3, [r7, #28]
 8018a78:	689a      	ldr	r2, [r3, #8]
 8018a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a7c:	4413      	add	r3, r2
 8018a7e:	7bfa      	ldrb	r2, [r7, #15]
 8018a80:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8018a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a84:	3301      	adds	r3, #1
 8018a86:	637b      	str	r3, [r7, #52]	; 0x34
 8018a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018a8a:	6a3b      	ldr	r3, [r7, #32]
 8018a8c:	429a      	cmp	r2, r3
 8018a8e:	d3dd      	bcc.n	8018a4c <lv_img_decoder_built_in_open+0x2b8>
 8018a90:	e030      	b.n	8018af4 <lv_img_decoder_built_in_open+0x360>
            return LV_RES_INV;
#endif
        }
        else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8018a92:	683b      	ldr	r3, [r7, #0]
 8018a94:	685b      	ldr	r3, [r3, #4]
 8018a96:	689b      	ldr	r3, [r3, #8]
 8018a98:	61bb      	str	r3, [r7, #24]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8018a9e:	e025      	b.n	8018aec <lv_img_decoder_built_in_open+0x358>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8018aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa2:	009b      	lsls	r3, r3, #2
 8018aa4:	69ba      	ldr	r2, [r7, #24]
 8018aa6:	4413      	add	r3, r2
 8018aa8:	7898      	ldrb	r0, [r3, #2]
 8018aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aac:	009b      	lsls	r3, r3, #2
 8018aae:	69ba      	ldr	r2, [r7, #24]
 8018ab0:	4413      	add	r3, r2
 8018ab2:	7859      	ldrb	r1, [r3, #1]
 8018ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ab6:	009b      	lsls	r3, r3, #2
 8018ab8:	69ba      	ldr	r2, [r7, #24]
 8018aba:	4413      	add	r3, r2
 8018abc:	781d      	ldrb	r5, [r3, #0]
 8018abe:	69fb      	ldr	r3, [r7, #28]
 8018ac0:	685a      	ldr	r2, [r3, #4]
 8018ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ac4:	009b      	lsls	r3, r3, #2
 8018ac6:	18d4      	adds	r4, r2, r3
 8018ac8:	462a      	mov	r2, r5
 8018aca:	f7ff fbef 	bl	80182ac <lv_color_make>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	6023      	str	r3, [r4, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8018ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad4:	009b      	lsls	r3, r3, #2
 8018ad6:	69ba      	ldr	r2, [r7, #24]
 8018ad8:	441a      	add	r2, r3
 8018ada:	69fb      	ldr	r3, [r7, #28]
 8018adc:	6899      	ldr	r1, [r3, #8]
 8018ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae0:	440b      	add	r3, r1
 8018ae2:	78d2      	ldrb	r2, [r2, #3]
 8018ae4:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8018ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae8:	3301      	adds	r3, #1
 8018aea:	633b      	str	r3, [r7, #48]	; 0x30
 8018aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018aee:	6a3b      	ldr	r3, [r7, #32]
 8018af0:	429a      	cmp	r2, r3
 8018af2:	d3d5      	bcc.n	8018aa0 <lv_img_decoder_built_in_open+0x30c>
            }
        }

        dsc->img_data = NULL;
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	2200      	movs	r2, #0
 8018af8:	615a      	str	r2, [r3, #20]
        return LV_RES_OK;
 8018afa:	2301      	movs	r3, #1
 8018afc:	e019      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>
        LV_LOG_WARN("Indexed (palette) images are not enabled in lv_conf.h. See LV_IMG_CF_INDEXED");
        return LV_RES_INV;
#endif
    }
    /*Alpha indexed images. */
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 8018afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b02:	2b0b      	cmp	r3, #11
 8018b04:	d00b      	beq.n	8018b1e <lv_img_decoder_built_in_open+0x38a>
 8018b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b0a:	2b0c      	cmp	r3, #12
 8018b0c:	d007      	beq.n	8018b1e <lv_img_decoder_built_in_open+0x38a>
 8018b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b12:	2b0d      	cmp	r3, #13
 8018b14:	d003      	beq.n	8018b1e <lv_img_decoder_built_in_open+0x38a>
 8018b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b1a:	2b0e      	cmp	r3, #14
 8018b1c:	d104      	bne.n	8018b28 <lv_img_decoder_built_in_open+0x394>
            cf == LV_IMG_CF_ALPHA_8BIT) {
#if LV_IMG_CF_ALPHA
        dsc->img_data = NULL;
 8018b1e:	683b      	ldr	r3, [r7, #0]
 8018b20:	2200      	movs	r2, #0
 8018b22:	615a      	str	r2, [r3, #20]
        return LV_RES_OK; /*Nothing to process*/
 8018b24:	2301      	movs	r3, #1
 8018b26:	e004      	b.n	8018b32 <lv_img_decoder_built_in_open+0x39e>
#endif
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 8018b28:	6839      	ldr	r1, [r7, #0]
 8018b2a:	6878      	ldr	r0, [r7, #4]
 8018b2c:	f000 f898 	bl	8018c60 <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format")
        return LV_RES_INV;
 8018b30:	2300      	movs	r3, #0
    }
}
 8018b32:	4618      	mov	r0, r3
 8018b34:	3738      	adds	r7, #56	; 0x38
 8018b36:	46bd      	mov	sp, r7
 8018b38:	bdb0      	pop	{r4, r5, r7, pc}
 8018b3a:	bf00      	nop

08018b3c <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b088      	sub	sp, #32
 8018b40:	af02      	add	r7, sp, #8
 8018b42:	60f8      	str	r0, [r7, #12]
 8018b44:	60b9      	str	r1, [r7, #8]
 8018b46:	4611      	mov	r1, r2
 8018b48:	461a      	mov	r2, r3
 8018b4a:	460b      	mov	r3, r1
 8018b4c:	80fb      	strh	r3, [r7, #6]
 8018b4e:	4613      	mov	r3, r2
 8018b50:	80bb      	strh	r3, [r7, #4]
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;
 8018b52:	2300      	movs	r3, #0
 8018b54:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8018b56:	68bb      	ldr	r3, [r7, #8]
 8018b58:	7c1b      	ldrb	r3, [r3, #16]
 8018b5a:	f003 031f 	and.w	r3, r3, #31
 8018b5e:	b2db      	uxtb	r3, r3
 8018b60:	2b04      	cmp	r3, #4
 8018b62:	d00d      	beq.n	8018b80 <lv_img_decoder_built_in_read_line+0x44>
 8018b64:	68bb      	ldr	r3, [r7, #8]
 8018b66:	7c1b      	ldrb	r3, [r3, #16]
 8018b68:	f003 031f 	and.w	r3, r3, #31
 8018b6c:	b2db      	uxtb	r3, r3
 8018b6e:	2b05      	cmp	r3, #5
 8018b70:	d006      	beq.n	8018b80 <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8018b72:	68bb      	ldr	r3, [r7, #8]
 8018b74:	7c1b      	ldrb	r3, [r3, #16]
 8018b76:	f003 031f 	and.w	r3, r3, #31
 8018b7a:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8018b7c:	2b06      	cmp	r3, #6
 8018b7e:	d112      	bne.n	8018ba6 <lv_img_decoder_built_in_read_line+0x6a>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018b80:	68bb      	ldr	r3, [r7, #8]
 8018b82:	7b1b      	ldrb	r3, [r3, #12]
 8018b84:	2b01      	cmp	r3, #1
 8018b86:	d166      	bne.n	8018c56 <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8018b88:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8018b8c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8018b90:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b96:	9300      	str	r3, [sp, #0]
 8018b98:	4603      	mov	r3, r0
 8018b9a:	68b8      	ldr	r0, [r7, #8]
 8018b9c:	f000 f895 	bl	8018cca <lv_img_decoder_built_in_line_true_color>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018ba4:	e057      	b.n	8018c56 <lv_img_decoder_built_in_read_line+0x11a>
        }
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	7c1b      	ldrb	r3, [r3, #16]
 8018baa:	f003 031f 	and.w	r3, r3, #31
 8018bae:	b2db      	uxtb	r3, r3
 8018bb0:	2b0b      	cmp	r3, #11
 8018bb2:	d014      	beq.n	8018bde <lv_img_decoder_built_in_read_line+0xa2>
 8018bb4:	68bb      	ldr	r3, [r7, #8]
 8018bb6:	7c1b      	ldrb	r3, [r3, #16]
 8018bb8:	f003 031f 	and.w	r3, r3, #31
 8018bbc:	b2db      	uxtb	r3, r3
 8018bbe:	2b0c      	cmp	r3, #12
 8018bc0:	d00d      	beq.n	8018bde <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8018bc2:	68bb      	ldr	r3, [r7, #8]
 8018bc4:	7c1b      	ldrb	r3, [r3, #16]
 8018bc6:	f003 031f 	and.w	r3, r3, #31
 8018bca:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8018bcc:	2b0d      	cmp	r3, #13
 8018bce:	d006      	beq.n	8018bde <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8018bd0:	68bb      	ldr	r3, [r7, #8]
 8018bd2:	7c1b      	ldrb	r3, [r3, #16]
 8018bd4:	f003 031f 	and.w	r3, r3, #31
 8018bd8:	b2db      	uxtb	r3, r3
 8018bda:	2b0e      	cmp	r3, #14
 8018bdc:	d10e      	bne.n	8018bfc <lv_img_decoder_built_in_read_line+0xc0>

        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8018bde:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8018be2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8018be6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bec:	9300      	str	r3, [sp, #0]
 8018bee:	4603      	mov	r3, r0
 8018bf0:	68b8      	ldr	r0, [r7, #8]
 8018bf2:	f000 f8cb 	bl	8018d8c <lv_img_decoder_built_in_line_alpha>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	75fb      	strb	r3, [r7, #23]
 8018bfa:	e02c      	b.n	8018c56 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8018bfc:	68bb      	ldr	r3, [r7, #8]
 8018bfe:	7c1b      	ldrb	r3, [r3, #16]
 8018c00:	f003 031f 	and.w	r3, r3, #31
 8018c04:	b2db      	uxtb	r3, r3
 8018c06:	2b07      	cmp	r3, #7
 8018c08:	d014      	beq.n	8018c34 <lv_img_decoder_built_in_read_line+0xf8>
 8018c0a:	68bb      	ldr	r3, [r7, #8]
 8018c0c:	7c1b      	ldrb	r3, [r3, #16]
 8018c0e:	f003 031f 	and.w	r3, r3, #31
 8018c12:	b2db      	uxtb	r3, r3
 8018c14:	2b08      	cmp	r3, #8
 8018c16:	d00d      	beq.n	8018c34 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8018c18:	68bb      	ldr	r3, [r7, #8]
 8018c1a:	7c1b      	ldrb	r3, [r3, #16]
 8018c1c:	f003 031f 	and.w	r3, r3, #31
 8018c20:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8018c22:	2b09      	cmp	r3, #9
 8018c24:	d006      	beq.n	8018c34 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8018c26:	68bb      	ldr	r3, [r7, #8]
 8018c28:	7c1b      	ldrb	r3, [r3, #16]
 8018c2a:	f003 031f 	and.w	r3, r3, #31
 8018c2e:	b2db      	uxtb	r3, r3
 8018c30:	2b0a      	cmp	r3, #10
 8018c32:	d10e      	bne.n	8018c52 <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8018c34:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8018c38:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8018c3c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c42:	9300      	str	r3, [sp, #0]
 8018c44:	4603      	mov	r3, r0
 8018c46:	68b8      	ldr	r0, [r7, #8]
 8018c48:	f000 fa42 	bl	80190d0 <lv_img_decoder_built_in_line_indexed>
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	75fb      	strb	r3, [r7, #23]
 8018c50:	e001      	b.n	8018c56 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 8018c52:	2300      	movs	r3, #0
 8018c54:	e000      	b.n	8018c58 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 8018c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3718      	adds	r7, #24
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}

08018c60 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b084      	sub	sp, #16
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	6039      	str	r1, [r7, #0]
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018c6a:	683b      	ldr	r3, [r7, #0]
 8018c6c:	6a1b      	ldr	r3, [r3, #32]
 8018c6e:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d025      	beq.n	8018cc2 <lv_img_decoder_built_in_close+0x62>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d009      	beq.n	8018c92 <lv_img_decoder_built_in_close+0x32>
            lv_fs_close(user_data->f);
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	4618      	mov	r0, r3
 8018c84:	f003 f8c0 	bl	801be08 <lv_fs_close>
            lv_mem_free(user_data->f);
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f003 fd47 	bl	801c720 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	685b      	ldr	r3, [r3, #4]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d004      	beq.n	8018ca4 <lv_img_decoder_built_in_close+0x44>
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	685b      	ldr	r3, [r3, #4]
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	f003 fd3e 	bl	801c720 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	689b      	ldr	r3, [r3, #8]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d004      	beq.n	8018cb6 <lv_img_decoder_built_in_close+0x56>
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	689b      	ldr	r3, [r3, #8]
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	f003 fd35 	bl	801c720 <lv_mem_free>

        lv_mem_free(user_data);
 8018cb6:	68f8      	ldr	r0, [r7, #12]
 8018cb8:	f003 fd32 	bl	801c720 <lv_mem_free>

        dsc->user_data = NULL;
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	621a      	str	r2, [r3, #32]
    }
}
 8018cc2:	bf00      	nop
 8018cc4:	3710      	adds	r7, #16
 8018cc6:	46bd      	mov	sp, r7
 8018cc8:	bd80      	pop	{r7, pc}

08018cca <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 8018cca:	b580      	push	{r7, lr}
 8018ccc:	b08a      	sub	sp, #40	; 0x28
 8018cce:	af00      	add	r7, sp, #0
 8018cd0:	60f8      	str	r0, [r7, #12]
 8018cd2:	4608      	mov	r0, r1
 8018cd4:	4611      	mov	r1, r2
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	4603      	mov	r3, r0
 8018cda:	817b      	strh	r3, [r7, #10]
 8018cdc:	460b      	mov	r3, r1
 8018cde:	813b      	strh	r3, [r7, #8]
 8018ce0:	4613      	mov	r3, r2
 8018ce2:	80fb      	strh	r3, [r7, #6]
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	6a1b      	ldr	r3, [r3, #32]
 8018ce8:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	7c1b      	ldrb	r3, [r3, #16]
 8018cee:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018cf2:	b2db      	uxtb	r3, r3
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f7f5 fab7 	bl	800e268 <lv_img_cf_get_px_size>
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8018d00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8018d04:	68fa      	ldr	r2, [r7, #12]
 8018d06:	6912      	ldr	r2, [r2, #16]
 8018d08:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8018d0c:	b292      	uxth	r2, r2
 8018d0e:	fb02 f203 	mul.w	r2, r2, r3
 8018d12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018d16:	4413      	add	r3, r2
 8018d18:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8018d1c:	fb02 f303 	mul.w	r3, r2, r3
 8018d20:	10db      	asrs	r3, r3, #3
 8018d22:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8018d24:	69fb      	ldr	r3, [r7, #28]
 8018d26:	3304      	adds	r3, #4
 8018d28:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(user_data->f, pos);
 8018d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	69f9      	ldr	r1, [r7, #28]
 8018d30:	4618      	mov	r0, r3
 8018d32:	f003 f8cb 	bl	801becc <lv_fs_seek>
 8018d36:	4603      	mov	r3, r0
 8018d38:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8018d3a:	7efb      	ldrb	r3, [r7, #27]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d001      	beq.n	8018d44 <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8018d40:	2300      	movs	r3, #0
 8018d42:	e01e      	b.n	8018d82 <lv_img_decoder_built_in_line_true_color+0xb8>
    }
    uint32_t btr = len * (px_size >> 3);
 8018d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018d48:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8018d4c:	08d2      	lsrs	r2, r2, #3
 8018d4e:	b2d2      	uxtb	r2, r2
 8018d50:	fb02 f303 	mul.w	r3, r2, r3
 8018d54:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 8018d56:	2300      	movs	r3, #0
 8018d58:	613b      	str	r3, [r7, #16]
    res = lv_fs_read(user_data->f, buf, btr, &br);
 8018d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d5c:	6818      	ldr	r0, [r3, #0]
 8018d5e:	f107 0310 	add.w	r3, r7, #16
 8018d62:	697a      	ldr	r2, [r7, #20]
 8018d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018d66:	f003 f87b 	bl	801be60 <lv_fs_read>
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK || btr != br) {
 8018d6e:	7efb      	ldrb	r3, [r7, #27]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d103      	bne.n	8018d7c <lv_img_decoder_built_in_line_true_color+0xb2>
 8018d74:	693b      	ldr	r3, [r7, #16]
 8018d76:	697a      	ldr	r2, [r7, #20]
 8018d78:	429a      	cmp	r2, r3
 8018d7a:	d001      	beq.n	8018d80 <lv_img_decoder_built_in_line_true_color+0xb6>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	e000      	b.n	8018d82 <lv_img_decoder_built_in_line_true_color+0xb8>
    }

    return LV_RES_OK;
 8018d80:	2301      	movs	r3, #1
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
 8018d82:	4618      	mov	r0, r3
 8018d84:	3728      	adds	r7, #40	; 0x28
 8018d86:	46bd      	mov	sp, r7
 8018d88:	bd80      	pop	{r7, pc}
	...

08018d8c <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8018d8c:	b590      	push	{r4, r7, lr}
 8018d8e:	b097      	sub	sp, #92	; 0x5c
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	60f8      	str	r0, [r7, #12]
 8018d94:	4608      	mov	r0, r1
 8018d96:	4611      	mov	r1, r2
 8018d98:	461a      	mov	r2, r3
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	817b      	strh	r3, [r7, #10]
 8018d9e:	460b      	mov	r3, r1
 8018da0:	813b      	strh	r3, [r7, #8]
 8018da2:	4613      	mov	r3, r2
 8018da4:	80fb      	strh	r3, [r7, #6]

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8018da6:	2300      	movs	r3, #0
 8018da8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8018dac:	23ff      	movs	r3, #255	; 0xff
 8018dae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8018db2:	4bab      	ldr	r3, [pc, #684]	; (8019060 <lv_img_decoder_built_in_line_alpha+0x2d4>)
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	62bb      	str	r3, [r7, #40]	; 0x28
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8018db8:	4baa      	ldr	r3, [pc, #680]	; (8019064 <lv_img_decoder_built_in_line_alpha+0x2d8>)
 8018dba:	f107 0418 	add.w	r4, r7, #24
 8018dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	689b      	ldr	r3, [r3, #8]
 8018dc8:	617b      	str	r3, [r7, #20]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8018dca:	2300      	movs	r3, #0
 8018dcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018dd0:	e00e      	b.n	8018df0 <lv_img_decoder_built_in_line_alpha+0x64>
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 8018dd2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8018dd6:	009b      	lsls	r3, r3, #2
 8018dd8:	461a      	mov	r2, r3
 8018dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018ddc:	4413      	add	r3, r2
 8018dde:	697a      	ldr	r2, [r7, #20]
 8018de0:	601a      	str	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8018de2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8018de6:	b29b      	uxth	r3, r3
 8018de8:	3301      	adds	r3, #1
 8018dea:	b29b      	uxth	r3, r3
 8018dec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018df0:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8018df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018df8:	429a      	cmp	r2, r3
 8018dfa:	dbea      	blt.n	8018dd2 <lv_img_decoder_built_in_line_alpha+0x46>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 8018dfc:	2300      	movs	r3, #0
 8018dfe:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	7c1b      	ldrb	r3, [r3, #16]
 8018e04:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018e08:	b2db      	uxtb	r3, r3
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	f7f5 fa2c 	bl	800e268 <lv_img_cf_get_px_size>
 8018e10:	4603      	mov	r3, r0
 8018e12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8018e16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018e1a:	2201      	movs	r2, #1
 8018e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8018e20:	b29b      	uxth	r3, r3
 8018e22:	3b01      	subs	r3, #1
 8018e24:	87bb      	strh	r3, [r7, #60]	; 0x3c

    lv_coord_t w = 0;
 8018e26:	2300      	movs	r3, #0
 8018e28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint32_t ofs = 0;
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	64bb      	str	r3, [r7, #72]	; 0x48
    int8_t pos   = 0;
 8018e30:	2300      	movs	r3, #0
 8018e32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    switch(dsc->header.cf) {
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	7c1b      	ldrb	r3, [r3, #16]
 8018e3a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018e3e:	b2db      	uxtb	r3, r3
 8018e40:	3b0b      	subs	r3, #11
 8018e42:	2b03      	cmp	r3, #3
 8018e44:	f200 80c1 	bhi.w	8018fca <lv_img_decoder_built_in_line_alpha+0x23e>
 8018e48:	a201      	add	r2, pc, #4	; (adr r2, 8018e50 <lv_img_decoder_built_in_line_alpha+0xc4>)
 8018e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e4e:	bf00      	nop
 8018e50:	08018e61 	.word	0x08018e61
 8018e54:	08018ec7 	.word	0x08018ec7
 8018e58:	08018f31 	.word	0x08018f31
 8018e5c:	08018f9b 	.word	0x08018f9b
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	691b      	ldr	r3, [r3, #16]
 8018e64:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018e68:	b29b      	uxth	r3, r3
 8018e6a:	10db      	asrs	r3, r3, #3
 8018e6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(dsc->header.w & 0x7) w++;
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	691b      	ldr	r3, [r3, #16]
 8018e74:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	f003 0307 	and.w	r3, r3, #7
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d006      	beq.n	8018e90 <lv_img_decoder_built_in_line_alpha+0x104>
 8018e82:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018e86:	b29b      	uxth	r3, r3
 8018e88:	3301      	adds	r3, #1
 8018e8a:	b29b      	uxth	r3, r3
 8018e8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 3); /*First pixel*/
 8018e90:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018e94:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018e98:	fb02 f303 	mul.w	r3, r2, r3
 8018e9c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018ea0:	10d2      	asrs	r2, r2, #3
 8018ea2:	b212      	sxth	r2, r2
 8018ea4:	4413      	add	r3, r2
 8018ea6:	461a      	mov	r2, r3
 8018ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018eaa:	4413      	add	r3, r2
 8018eac:	64bb      	str	r3, [r7, #72]	; 0x48
            pos       = 7 - (x & 0x7);
 8018eae:	897b      	ldrh	r3, [r7, #10]
 8018eb0:	b25b      	sxtb	r3, r3
 8018eb2:	43db      	mvns	r3, r3
 8018eb4:	b25b      	sxtb	r3, r3
 8018eb6:	f003 0307 	and.w	r3, r3, #7
 8018eba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha1_opa_table;
 8018ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018ec2:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8018ec4:	e081      	b.n	8018fca <lv_img_decoder_built_in_line_alpha+0x23e>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	691b      	ldr	r3, [r3, #16]
 8018eca:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018ece:	b29b      	uxth	r3, r3
 8018ed0:	109b      	asrs	r3, r3, #2
 8018ed2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(dsc->header.w & 0x3) w++;
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	691b      	ldr	r3, [r3, #16]
 8018eda:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018ede:	b29b      	uxth	r3, r3
 8018ee0:	f003 0303 	and.w	r3, r3, #3
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d006      	beq.n	8018ef6 <lv_img_decoder_built_in_line_alpha+0x16a>
 8018ee8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018eec:	b29b      	uxth	r3, r3
 8018eee:	3301      	adds	r3, #1
 8018ef0:	b29b      	uxth	r3, r3
 8018ef2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 2); /*First pixel*/
 8018ef6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018efa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018efe:	fb02 f303 	mul.w	r3, r2, r3
 8018f02:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018f06:	1092      	asrs	r2, r2, #2
 8018f08:	b212      	sxth	r2, r2
 8018f0a:	4413      	add	r3, r2
 8018f0c:	461a      	mov	r2, r3
 8018f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018f10:	4413      	add	r3, r2
 8018f12:	64bb      	str	r3, [r7, #72]	; 0x48
            pos       = 6 - ((x & 0x3) * 2);
 8018f14:	897b      	ldrh	r3, [r7, #10]
 8018f16:	43db      	mvns	r3, r3
 8018f18:	b2db      	uxtb	r3, r3
 8018f1a:	f003 0303 	and.w	r3, r3, #3
 8018f1e:	b2db      	uxtb	r3, r3
 8018f20:	005b      	lsls	r3, r3, #1
 8018f22:	b2db      	uxtb	r3, r3
 8018f24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha2_opa_table;
 8018f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018f2c:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8018f2e:	e04c      	b.n	8018fca <lv_img_decoder_built_in_line_alpha+0x23e>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	691b      	ldr	r3, [r3, #16]
 8018f34:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	105b      	asrs	r3, r3, #1
 8018f3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(dsc->header.w & 0x1) w++;
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	691b      	ldr	r3, [r3, #16]
 8018f44:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018f48:	b29b      	uxth	r3, r3
 8018f4a:	f003 0301 	and.w	r3, r3, #1
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d006      	beq.n	8018f60 <lv_img_decoder_built_in_line_alpha+0x1d4>
 8018f52:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018f56:	b29b      	uxth	r3, r3
 8018f58:	3301      	adds	r3, #1
 8018f5a:	b29b      	uxth	r3, r3
 8018f5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 1); /*First pixel*/
 8018f60:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018f64:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018f68:	fb02 f303 	mul.w	r3, r2, r3
 8018f6c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018f70:	1052      	asrs	r2, r2, #1
 8018f72:	b212      	sxth	r2, r2
 8018f74:	4413      	add	r3, r2
 8018f76:	461a      	mov	r2, r3
 8018f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018f7a:	4413      	add	r3, r2
 8018f7c:	64bb      	str	r3, [r7, #72]	; 0x48
            pos       = 4 - ((x & 0x1) * 4);
 8018f7e:	897b      	ldrh	r3, [r7, #10]
 8018f80:	f003 0301 	and.w	r3, r3, #1
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d101      	bne.n	8018f8c <lv_img_decoder_built_in_line_alpha+0x200>
 8018f88:	2304      	movs	r3, #4
 8018f8a:	e000      	b.n	8018f8e <lv_img_decoder_built_in_line_alpha+0x202>
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha4_opa_table;
 8018f92:	f107 0318 	add.w	r3, r7, #24
 8018f96:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8018f98:	e017      	b.n	8018fca <lv_img_decoder_built_in_line_alpha+0x23e>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	691b      	ldr	r3, [r3, #16]
 8018f9e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018fa2:	b29b      	uxth	r3, r3
 8018fa4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + x;  /*First pixel*/
 8018fa8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018fac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018fb0:	fb02 f203 	mul.w	r2, r2, r3
 8018fb4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018fb8:	4413      	add	r3, r2
 8018fba:	461a      	mov	r2, r3
 8018fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018fbe:	4413      	add	r3, r2
 8018fc0:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 0;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8018fc8:	bf00      	nop
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	6a1b      	ldr	r3, [r3, #32]
 8018fce:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 8018fd0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	f003 fcbb 	bl	801c950 <_lv_mem_buf_get>
 8018fda:	6378      	str	r0, [r7, #52]	; 0x34
#endif

    const uint8_t * data_tmp = NULL;
 8018fdc:	2300      	movs	r3, #0
 8018fde:	643b      	str	r3, [r7, #64]	; 0x40
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	7b1b      	ldrb	r3, [r3, #12]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d108      	bne.n	8018ffa <lv_img_decoder_built_in_line_alpha+0x26e>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	633b      	str	r3, [r7, #48]	; 0x30

        data_tmp = img_dsc->data + ofs;
 8018fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ff0:	689a      	ldr	r2, [r3, #8]
 8018ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ff4:	4413      	add	r3, r2
 8018ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8018ff8:	e011      	b.n	801901e <lv_img_decoder_built_in_line_alpha+0x292>
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8018ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ffc:	681a      	ldr	r2, [r3, #0]
 8018ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019000:	3304      	adds	r3, #4
 8019002:	4619      	mov	r1, r3
 8019004:	4610      	mov	r0, r2
 8019006:	f002 ff61 	bl	801becc <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 801900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801900c:	6818      	ldr	r0, [r3, #0]
 801900e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8019012:	2300      	movs	r3, #0
 8019014:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019016:	f002 ff23 	bl	801be60 <lv_fs_read>
        data_tmp = fs_buf;
 801901a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801901c:	643b      	str	r3, [r7, #64]	; 0x40
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    for(i = 0; i < len; i++) {
 801901e:	2300      	movs	r3, #0
 8019020:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8019024:	e046      	b.n	80190b4 <lv_img_decoder_built_in_line_alpha+0x328>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8019026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019028:	781b      	ldrb	r3, [r3, #0]
 801902a:	4619      	mov	r1, r3
 801902c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801902e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8019032:	fa02 f303 	lsl.w	r3, r2, r3
 8019036:	ea01 0203 	and.w	r2, r1, r3
 801903a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801903e:	fa42 f303 	asr.w	r3, r2, r3
 8019042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	7c1b      	ldrb	r3, [r3, #16]
 801904a:	f003 031f 	and.w	r3, r3, #31
 801904e:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8019050:	2b0e      	cmp	r3, #14
 8019052:	d009      	beq.n	8019068 <lv_img_decoder_built_in_line_alpha+0x2dc>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8019054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019058:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801905a:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 801905c:	781b      	ldrb	r3, [r3, #0]
 801905e:	e005      	b.n	801906c <lv_img_decoder_built_in_line_alpha+0x2e0>
 8019060:	0802d120 	.word	0x0802d120
 8019064:	0802d124 	.word	0x0802d124
 8019068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801906c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8019070:	0092      	lsls	r2, r2, #2
 8019072:	3203      	adds	r2, #3
 8019074:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8019076:	440a      	add	r2, r1
 8019078:	7013      	strb	r3, [r2, #0]

        pos -= px_size;
 801907a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801907e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019082:	1ad3      	subs	r3, r2, r3
 8019084:	b2db      	uxtb	r3, r3
 8019086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(pos < 0) {
 801908a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801908e:	2b00      	cmp	r3, #0
 8019090:	da09      	bge.n	80190a6 <lv_img_decoder_built_in_line_alpha+0x31a>
            pos = 8 - px_size;
 8019092:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019096:	f1c3 0308 	rsb	r3, r3, #8
 801909a:	b2db      	uxtb	r3, r3
 801909c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            data_tmp++;
 80190a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190a2:	3301      	adds	r3, #1
 80190a4:	643b      	str	r3, [r7, #64]	; 0x40
    for(i = 0; i < len; i++) {
 80190a6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80190aa:	b29b      	uxth	r3, r3
 80190ac:	3301      	adds	r3, #1
 80190ae:	b29b      	uxth	r3, r3
 80190b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80190b4:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80190b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80190bc:	429a      	cmp	r2, r3
 80190be:	dbb2      	blt.n	8019026 <lv_img_decoder_built_in_line_alpha+0x29a>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 80190c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80190c2:	f003 fd23 	bl	801cb0c <_lv_mem_buf_release>
#endif
    return LV_RES_OK;
 80190c6:	2301      	movs	r3, #1

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 80190c8:	4618      	mov	r0, r3
 80190ca:	375c      	adds	r7, #92	; 0x5c
 80190cc:	46bd      	mov	sp, r7
 80190ce:	bd90      	pop	{r4, r7, pc}

080190d0 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b08e      	sub	sp, #56	; 0x38
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	60f8      	str	r0, [r7, #12]
 80190d8:	4608      	mov	r0, r1
 80190da:	4611      	mov	r1, r2
 80190dc:	461a      	mov	r2, r3
 80190de:	4603      	mov	r3, r0
 80190e0:	817b      	strh	r3, [r7, #10]
 80190e2:	460b      	mov	r3, r1
 80190e4:	813b      	strh	r3, [r7, #8]
 80190e6:	4613      	mov	r3, r2
 80190e8:	80fb      	strh	r3, [r7, #6]

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	7c1b      	ldrb	r3, [r3, #16]
 80190ee:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80190f2:	b2db      	uxtb	r3, r3
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7f5 f8b7 	bl	800e268 <lv_img_cf_get_px_size>
 80190fa:	4603      	mov	r3, r0
 80190fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8019100:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8019104:	2201      	movs	r2, #1
 8019106:	fa02 f303 	lsl.w	r3, r2, r3
 801910a:	b29b      	uxth	r3, r3
 801910c:	3b01      	subs	r3, #1
 801910e:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t w = 0;
 8019110:	2300      	movs	r3, #0
 8019112:	86fb      	strh	r3, [r7, #54]	; 0x36
    int8_t pos   = 0;
 8019114:	2300      	movs	r3, #0
 8019116:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint32_t ofs = 0;
 801911a:	2300      	movs	r3, #0
 801911c:	633b      	str	r3, [r7, #48]	; 0x30
    switch(dsc->header.cf) {
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	7c1b      	ldrb	r3, [r3, #16]
 8019122:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8019126:	b2db      	uxtb	r3, r3
 8019128:	3b07      	subs	r3, #7
 801912a:	2b03      	cmp	r3, #3
 801912c:	f200 80be 	bhi.w	80192ac <lv_img_decoder_built_in_line_indexed+0x1dc>
 8019130:	a201      	add	r2, pc, #4	; (adr r2, 8019138 <lv_img_decoder_built_in_line_indexed+0x68>)
 8019132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019136:	bf00      	nop
 8019138:	08019149 	.word	0x08019149
 801913c:	080191ab 	.word	0x080191ab
 8019140:	08019211 	.word	0x08019211
 8019144:	08019277 	.word	0x08019277
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	691b      	ldr	r3, [r3, #16]
 801914c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8019150:	b29b      	uxth	r3, r3
 8019152:	10db      	asrs	r3, r3, #3
 8019154:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(dsc->header.w & 0x7) w++;
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	691b      	ldr	r3, [r3, #16]
 801915a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801915e:	b29b      	uxth	r3, r3
 8019160:	f003 0307 	and.w	r3, r3, #7
 8019164:	2b00      	cmp	r3, #0
 8019166:	d005      	beq.n	8019174 <lv_img_decoder_built_in_line_indexed+0xa4>
 8019168:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801916c:	b29b      	uxth	r3, r3
 801916e:	3301      	adds	r3, #1
 8019170:	b29b      	uxth	r3, r3
 8019172:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 3); /*First pixel*/
 8019174:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019178:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801917c:	fb02 f303 	mul.w	r3, r2, r3
 8019180:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8019184:	10d2      	asrs	r2, r2, #3
 8019186:	b212      	sxth	r2, r2
 8019188:	4413      	add	r3, r2
 801918a:	461a      	mov	r2, r3
 801918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801918e:	4413      	add	r3, r2
 8019190:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 8;                /*Skip the palette*/
 8019192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019194:	3308      	adds	r3, #8
 8019196:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 7 - (x & 0x7);
 8019198:	897b      	ldrh	r3, [r7, #10]
 801919a:	b25b      	sxtb	r3, r3
 801919c:	43db      	mvns	r3, r3
 801919e:	b25b      	sxtb	r3, r3
 80191a0:	f003 0307 	and.w	r3, r3, #7
 80191a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80191a8:	e080      	b.n	80192ac <lv_img_decoder_built_in_line_indexed+0x1dc>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	691b      	ldr	r3, [r3, #16]
 80191ae:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80191b2:	b29b      	uxth	r3, r3
 80191b4:	109b      	asrs	r3, r3, #2
 80191b6:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(dsc->header.w & 0x3) w++;
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	691b      	ldr	r3, [r3, #16]
 80191bc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80191c0:	b29b      	uxth	r3, r3
 80191c2:	f003 0303 	and.w	r3, r3, #3
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d005      	beq.n	80191d6 <lv_img_decoder_built_in_line_indexed+0x106>
 80191ca:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80191ce:	b29b      	uxth	r3, r3
 80191d0:	3301      	adds	r3, #1
 80191d2:	b29b      	uxth	r3, r3
 80191d4:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 2); /*First pixel*/
 80191d6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80191da:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80191de:	fb02 f303 	mul.w	r3, r2, r3
 80191e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80191e6:	1092      	asrs	r2, r2, #2
 80191e8:	b212      	sxth	r2, r2
 80191ea:	4413      	add	r3, r2
 80191ec:	461a      	mov	r2, r3
 80191ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191f0:	4413      	add	r3, r2
 80191f2:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 16;               /*Skip the palette*/
 80191f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191f6:	3310      	adds	r3, #16
 80191f8:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 6 - ((x & 0x3) * 2);
 80191fa:	897b      	ldrh	r3, [r7, #10]
 80191fc:	43db      	mvns	r3, r3
 80191fe:	b2db      	uxtb	r3, r3
 8019200:	f003 0303 	and.w	r3, r3, #3
 8019204:	b2db      	uxtb	r3, r3
 8019206:	005b      	lsls	r3, r3, #1
 8019208:	b2db      	uxtb	r3, r3
 801920a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801920e:	e04d      	b.n	80192ac <lv_img_decoder_built_in_line_indexed+0x1dc>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	691b      	ldr	r3, [r3, #16]
 8019214:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8019218:	b29b      	uxth	r3, r3
 801921a:	105b      	asrs	r3, r3, #1
 801921c:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(dsc->header.w & 0x1) w++;
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	691b      	ldr	r3, [r3, #16]
 8019222:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8019226:	b29b      	uxth	r3, r3
 8019228:	f003 0301 	and.w	r3, r3, #1
 801922c:	2b00      	cmp	r3, #0
 801922e:	d005      	beq.n	801923c <lv_img_decoder_built_in_line_indexed+0x16c>
 8019230:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019234:	b29b      	uxth	r3, r3
 8019236:	3301      	adds	r3, #1
 8019238:	b29b      	uxth	r3, r3
 801923a:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 1); /*First pixel*/
 801923c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019240:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8019244:	fb02 f303 	mul.w	r3, r2, r3
 8019248:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801924c:	1052      	asrs	r2, r2, #1
 801924e:	b212      	sxth	r2, r2
 8019250:	4413      	add	r3, r2
 8019252:	461a      	mov	r2, r3
 8019254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019256:	4413      	add	r3, r2
 8019258:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 64;               /*Skip the palette*/
 801925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801925c:	3340      	adds	r3, #64	; 0x40
 801925e:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 4 - ((x & 0x1) * 4);
 8019260:	897b      	ldrh	r3, [r7, #10]
 8019262:	f003 0301 	and.w	r3, r3, #1
 8019266:	2b00      	cmp	r3, #0
 8019268:	d101      	bne.n	801926e <lv_img_decoder_built_in_line_indexed+0x19e>
 801926a:	2304      	movs	r3, #4
 801926c:	e000      	b.n	8019270 <lv_img_decoder_built_in_line_indexed+0x1a0>
 801926e:	2300      	movs	r3, #0
 8019270:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8019274:	e01a      	b.n	80192ac <lv_img_decoder_built_in_line_indexed+0x1dc>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	691b      	ldr	r3, [r3, #16]
 801927a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801927e:	b29b      	uxth	r3, r3
 8019280:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + x;  /*First pixel*/
 8019282:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019286:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801928a:	fb02 f203 	mul.w	r2, r2, r3
 801928e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019292:	4413      	add	r3, r2
 8019294:	461a      	mov	r2, r3
 8019296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019298:	4413      	add	r3, r2
 801929a:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 1024;       /*Skip the palette*/
 801929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801929e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80192a2:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 0;
 80192a4:	2300      	movs	r3, #0
 80192a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80192aa:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	6a1b      	ldr	r3, [r3, #32]
 80192b0:	623b      	str	r3, [r7, #32]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 80192b2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80192b6:	4618      	mov	r0, r3
 80192b8:	f003 fb4a 	bl	801c950 <_lv_mem_buf_get>
 80192bc:	61f8      	str	r0, [r7, #28]
#endif
    const uint8_t * data_tmp = NULL;
 80192be:	2300      	movs	r3, #0
 80192c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	7b1b      	ldrb	r3, [r3, #12]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d108      	bne.n	80192dc <lv_img_decoder_built_in_line_indexed+0x20c>
        const lv_img_dsc_t * img_dsc = dsc->src;
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	685b      	ldr	r3, [r3, #4]
 80192ce:	61bb      	str	r3, [r7, #24]
        data_tmp                     = img_dsc->data + ofs;
 80192d0:	69bb      	ldr	r3, [r7, #24]
 80192d2:	689a      	ldr	r2, [r3, #8]
 80192d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192d6:	4413      	add	r3, r2
 80192d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80192da:	e011      	b.n	8019300 <lv_img_decoder_built_in_line_indexed+0x230>
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 80192dc:	6a3b      	ldr	r3, [r7, #32]
 80192de:	681a      	ldr	r2, [r3, #0]
 80192e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192e2:	3304      	adds	r3, #4
 80192e4:	4619      	mov	r1, r3
 80192e6:	4610      	mov	r0, r2
 80192e8:	f002 fdf0 	bl	801becc <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 80192ec:	6a3b      	ldr	r3, [r7, #32]
 80192ee:	6818      	ldr	r0, [r3, #0]
 80192f0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80192f4:	2300      	movs	r3, #0
 80192f6:	69f9      	ldr	r1, [r7, #28]
 80192f8:	f002 fdb2 	bl	801be60 <lv_fs_read>
        data_tmp = fs_buf;
 80192fc:	69fb      	ldr	r3, [r7, #28]
 80192fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8019300:	2300      	movs	r3, #0
 8019302:	857b      	strh	r3, [r7, #42]	; 0x2a
 8019304:	e045      	b.n	8019392 <lv_img_decoder_built_in_line_indexed+0x2c2>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8019306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019308:	781b      	ldrb	r3, [r3, #0]
 801930a:	4619      	mov	r1, r3
 801930c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801930e:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8019312:	fa02 f303 	lsl.w	r3, r2, r3
 8019316:	ea01 0203 	and.w	r2, r1, r3
 801931a:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 801931e:	fa42 f303 	asr.w	r3, r2, r3
 8019322:	75fb      	strb	r3, [r7, #23]

        lv_color_t color = user_data->palette[val_act];
 8019324:	6a3b      	ldr	r3, [r7, #32]
 8019326:	685a      	ldr	r2, [r3, #4]
 8019328:	7dfb      	ldrb	r3, [r7, #23]
 801932a:	009b      	lsls	r3, r3, #2
 801932c:	4413      	add	r3, r2
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	613b      	str	r3, [r7, #16]
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
 8019332:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019336:	009b      	lsls	r3, r3, #2
 8019338:	461a      	mov	r2, r3
 801933a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801933c:	4413      	add	r3, r2
 801933e:	693a      	ldr	r2, [r7, #16]
 8019340:	601a      	str	r2, [r3, #0]
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8019342:	6a3b      	ldr	r3, [r7, #32]
 8019344:	689a      	ldr	r2, [r3, #8]
 8019346:	7dfb      	ldrb	r3, [r7, #23]
 8019348:	441a      	add	r2, r3
 801934a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801934e:	009b      	lsls	r3, r3, #2
 8019350:	3303      	adds	r3, #3
 8019352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019354:	440b      	add	r3, r1
 8019356:	7812      	ldrb	r2, [r2, #0]
 8019358:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 801935a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801935e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8019362:	1ad3      	subs	r3, r2, r3
 8019364:	b2db      	uxtb	r3, r3
 8019366:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(pos < 0) {
 801936a:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 801936e:	2b00      	cmp	r3, #0
 8019370:	da09      	bge.n	8019386 <lv_img_decoder_built_in_line_indexed+0x2b6>
            pos = 8 - px_size;
 8019372:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8019376:	f1c3 0308 	rsb	r3, r3, #8
 801937a:	b2db      	uxtb	r3, r3
 801937c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            data_tmp++;
 8019380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019382:	3301      	adds	r3, #1
 8019384:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(i = 0; i < len; i++) {
 8019386:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801938a:	b29b      	uxth	r3, r3
 801938c:	3301      	adds	r3, #1
 801938e:	b29b      	uxth	r3, r3
 8019390:	857b      	strh	r3, [r7, #42]	; 0x2a
 8019392:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8019396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801939a:	429a      	cmp	r2, r3
 801939c:	dbb3      	blt.n	8019306 <lv_img_decoder_built_in_line_indexed+0x236>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 801939e:	69f8      	ldr	r0, [r7, #28]
 80193a0:	f003 fbb4 	bl	801cb0c <_lv_mem_buf_release>
#endif
    return LV_RES_OK;
 80193a4:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 80193a6:	4618      	mov	r0, r3
 80193a8:	3738      	adds	r7, #56	; 0x38
 80193aa:	46bd      	mov	sp, r7
 80193ac:	bd80      	pop	{r7, pc}
 80193ae:	bf00      	nop

080193b0 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b082      	sub	sp, #8
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
 80193b8:	6039      	str	r1, [r7, #0]
    return font_p->get_glyph_bitmap(font_p, letter);
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	685b      	ldr	r3, [r3, #4]
 80193be:	6839      	ldr	r1, [r7, #0]
 80193c0:	6878      	ldr	r0, [r7, #4]
 80193c2:	4798      	blx	r3
 80193c4:	4603      	mov	r3, r0
}
 80193c6:	4618      	mov	r0, r3
 80193c8:	3708      	adds	r7, #8
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd80      	pop	{r7, pc}

080193ce <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 80193ce:	b590      	push	{r4, r7, lr}
 80193d0:	b085      	sub	sp, #20
 80193d2:	af00      	add	r7, sp, #0
 80193d4:	60f8      	str	r0, [r7, #12]
 80193d6:	60b9      	str	r1, [r7, #8]
 80193d8:	607a      	str	r2, [r7, #4]
 80193da:	603b      	str	r3, [r7, #0]
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	681c      	ldr	r4, [r3, #0]
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	687a      	ldr	r2, [r7, #4]
 80193e4:	68b9      	ldr	r1, [r7, #8]
 80193e6:	68f8      	ldr	r0, [r7, #12]
 80193e8:	47a0      	blx	r4
 80193ea:	4603      	mov	r3, r0
}
 80193ec:	4618      	mov	r0, r3
 80193ee:	3714      	adds	r7, #20
 80193f0:	46bd      	mov	sp, r7
 80193f2:	bd90      	pop	{r4, r7, pc}

080193f4 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b088      	sub	sp, #32
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	60f8      	str	r0, [r7, #12]
 80193fc:	60b9      	str	r1, [r7, #8]
 80193fe:	607a      	str	r2, [r7, #4]
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8019400:	f107 0110 	add.w	r1, r7, #16
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	68ba      	ldr	r2, [r7, #8]
 8019408:	68f8      	ldr	r0, [r7, #12]
 801940a:	f7ff ffe0 	bl	80193ce <lv_font_get_glyph_dsc>
 801940e:	4603      	mov	r3, r0
 8019410:	77fb      	strb	r3, [r7, #31]
    if(ret) return g.adv_w;
 8019412:	7ffb      	ldrb	r3, [r7, #31]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d001      	beq.n	801941c <lv_font_get_glyph_width+0x28>
 8019418:	8a3b      	ldrh	r3, [r7, #16]
 801941a:	e000      	b.n	801941e <lv_font_get_glyph_width+0x2a>
    else return 0;
 801941c:	2300      	movs	r3, #0
}
 801941e:	4618      	mov	r0, r3
 8019420:	3720      	adds	r7, #32
 8019422:	46bd      	mov	sp, r7
 8019424:	bd80      	pop	{r7, pc}
	...

08019428 <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter an unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 8019428:	b5b0      	push	{r4, r5, r7, lr}
 801942a:	b08c      	sub	sp, #48	; 0x30
 801942c:	af02      	add	r7, sp, #8
 801942e:	6078      	str	r0, [r7, #4]
 8019430:	6039      	str	r1, [r7, #0]
    if(unicode_letter == '\t') unicode_letter = ' ';
 8019432:	683b      	ldr	r3, [r7, #0]
 8019434:	2b09      	cmp	r3, #9
 8019436:	d101      	bne.n	801943c <lv_font_get_bitmap_fmt_txt+0x14>
 8019438:	2320      	movs	r3, #32
 801943a:	603b      	str	r3, [r7, #0]

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	691b      	ldr	r3, [r3, #16]
 8019440:	623b      	str	r3, [r7, #32]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8019442:	6839      	ldr	r1, [r7, #0]
 8019444:	6878      	ldr	r0, [r7, #4]
 8019446:	f000 f947 	bl	80196d8 <get_glyph_dsc_id>
 801944a:	61f8      	str	r0, [r7, #28]
    if(!gid) return NULL;
 801944c:	69fb      	ldr	r3, [r7, #28]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d101      	bne.n	8019456 <lv_font_get_bitmap_fmt_txt+0x2e>
 8019452:	2300      	movs	r3, #0
 8019454:	e09b      	b.n	801958e <lv_font_get_bitmap_fmt_txt+0x166>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8019456:	6a3b      	ldr	r3, [r7, #32]
 8019458:	685a      	ldr	r2, [r3, #4]
 801945a:	69fb      	ldr	r3, [r7, #28]
 801945c:	00db      	lsls	r3, r3, #3
 801945e:	4413      	add	r3, r2
 8019460:	61bb      	str	r3, [r7, #24]

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 8019462:	6a3b      	ldr	r3, [r7, #32]
 8019464:	7cdb      	ldrb	r3, [r3, #19]
 8019466:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801946a:	b2db      	uxtb	r3, r3
 801946c:	2b00      	cmp	r3, #0
 801946e:	d107      	bne.n	8019480 <lv_font_get_bitmap_fmt_txt+0x58>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8019470:	6a3b      	ldr	r3, [r7, #32]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	69ba      	ldr	r2, [r7, #24]
 8019476:	6812      	ldr	r2, [r2, #0]
 8019478:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801947c:	4413      	add	r3, r2
 801947e:	e086      	b.n	801958e <lv_font_get_bitmap_fmt_txt+0x166>
    }
    /*Handle compressed bitmap*/
    else {
#if LV_USE_FONT_COMPRESSED
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
 8019480:	69bb      	ldr	r3, [r7, #24]
 8019482:	791b      	ldrb	r3, [r3, #4]
 8019484:	461a      	mov	r2, r3
 8019486:	69bb      	ldr	r3, [r7, #24]
 8019488:	795b      	ldrb	r3, [r3, #5]
 801948a:	fb03 f302 	mul.w	r3, r3, r2
 801948e:	617b      	str	r3, [r7, #20]
        if(gsize == 0) return NULL;
 8019490:	697b      	ldr	r3, [r7, #20]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d101      	bne.n	801949a <lv_font_get_bitmap_fmt_txt+0x72>
 8019496:	2300      	movs	r3, #0
 8019498:	e079      	b.n	801958e <lv_font_get_bitmap_fmt_txt+0x166>

        uint32_t buf_size = gsize;
 801949a:	697b      	ldr	r3, [r7, #20]
 801949c:	627b      	str	r3, [r7, #36]	; 0x24
        /*Compute memory size needed to hold decompressed glyph, rounding up*/
        switch(fdsc->bpp) {
 801949e:	6a3b      	ldr	r3, [r7, #32]
 80194a0:	7cdb      	ldrb	r3, [r3, #19]
 80194a2:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80194a6:	b2db      	uxtb	r3, r3
 80194a8:	3b01      	subs	r3, #1
 80194aa:	2b03      	cmp	r3, #3
 80194ac:	d81e      	bhi.n	80194ec <lv_font_get_bitmap_fmt_txt+0xc4>
 80194ae:	a201      	add	r2, pc, #4	; (adr r2, 80194b4 <lv_font_get_bitmap_fmt_txt+0x8c>)
 80194b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194b4:	080194c5 	.word	0x080194c5
 80194b8:	080194cf 	.word	0x080194cf
 80194bc:	080194d9 	.word	0x080194d9
 80194c0:	080194e3 	.word	0x080194e3
            case 1:
                buf_size = (gsize + 7) >> 3;
 80194c4:	697b      	ldr	r3, [r7, #20]
 80194c6:	3307      	adds	r3, #7
 80194c8:	08db      	lsrs	r3, r3, #3
 80194ca:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80194cc:	e00e      	b.n	80194ec <lv_font_get_bitmap_fmt_txt+0xc4>
            case 2:
                buf_size = (gsize + 3) >> 2;
 80194ce:	697b      	ldr	r3, [r7, #20]
 80194d0:	3303      	adds	r3, #3
 80194d2:	089b      	lsrs	r3, r3, #2
 80194d4:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80194d6:	e009      	b.n	80194ec <lv_font_get_bitmap_fmt_txt+0xc4>
            case 3:
                buf_size = (gsize + 1) >> 1;
 80194d8:	697b      	ldr	r3, [r7, #20]
 80194da:	3301      	adds	r3, #1
 80194dc:	085b      	lsrs	r3, r3, #1
 80194de:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80194e0:	e004      	b.n	80194ec <lv_font_get_bitmap_fmt_txt+0xc4>
            case 4:
                buf_size = (gsize + 1) >> 1;
 80194e2:	697b      	ldr	r3, [r7, #20]
 80194e4:	3301      	adds	r3, #1
 80194e6:	085b      	lsrs	r3, r3, #1
 80194e8:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80194ea:	bf00      	nop
        }

        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
 80194ec:	4b2a      	ldr	r3, [pc, #168]	; (8019598 <lv_font_get_bitmap_fmt_txt+0x170>)
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	4618      	mov	r0, r3
 80194f2:	f003 fa0f 	bl	801c914 <_lv_mem_get_size>
 80194f6:	4602      	mov	r2, r0
 80194f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194fa:	4293      	cmp	r3, r2
 80194fc:	d920      	bls.n	8019540 <lv_font_get_bitmap_fmt_txt+0x118>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
 80194fe:	4b26      	ldr	r3, [pc, #152]	; (8019598 <lv_font_get_bitmap_fmt_txt+0x170>)
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019504:	4618      	mov	r0, r3
 8019506:	f003 f961 	bl	801c7cc <lv_mem_realloc>
 801950a:	6138      	str	r0, [r7, #16]
            LV_ASSERT_MEM(tmp);
 801950c:	6938      	ldr	r0, [r7, #16]
 801950e:	f002 fb31 	bl	801bb74 <lv_debug_check_null>
 8019512:	4603      	mov	r3, r0
 8019514:	f083 0301 	eor.w	r3, r3, #1
 8019518:	b2db      	uxtb	r3, r3
 801951a:	2b00      	cmp	r3, #0
 801951c:	d008      	beq.n	8019530 <lv_font_get_bitmap_fmt_txt+0x108>
 801951e:	693b      	ldr	r3, [r7, #16]
 8019520:	f04f 0400 	mov.w	r4, #0
 8019524:	461a      	mov	r2, r3
 8019526:	4623      	mov	r3, r4
 8019528:	481c      	ldr	r0, [pc, #112]	; (801959c <lv_font_get_bitmap_fmt_txt+0x174>)
 801952a:	f002 fb33 	bl	801bb94 <lv_debug_log_error>
 801952e:	e7fe      	b.n	801952e <lv_font_get_bitmap_fmt_txt+0x106>
            if(tmp == NULL) return NULL;
 8019530:	693b      	ldr	r3, [r7, #16]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d101      	bne.n	801953a <lv_font_get_bitmap_fmt_txt+0x112>
 8019536:	2300      	movs	r3, #0
 8019538:	e029      	b.n	801958e <lv_font_get_bitmap_fmt_txt+0x166>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
 801953a:	4a17      	ldr	r2, [pc, #92]	; (8019598 <lv_font_get_bitmap_fmt_txt+0x170>)
 801953c:	693b      	ldr	r3, [r7, #16]
 801953e:	6013      	str	r3, [r2, #0]
        }

        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 8019540:	6a3b      	ldr	r3, [r7, #32]
 8019542:	7cdb      	ldrb	r3, [r3, #19]
 8019544:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019548:	b2db      	uxtb	r3, r3
 801954a:	2b40      	cmp	r3, #64	; 0x40
 801954c:	bf0c      	ite	eq
 801954e:	2301      	moveq	r3, #1
 8019550:	2300      	movne	r3, #0
 8019552:	73fb      	strb	r3, [r7, #15]
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8019554:	6a3b      	ldr	r3, [r7, #32]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	69ba      	ldr	r2, [r7, #24]
 801955a:	6812      	ldr	r2, [r2, #0]
 801955c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019560:	1898      	adds	r0, r3, r2
 8019562:	4b0d      	ldr	r3, [pc, #52]	; (8019598 <lv_font_get_bitmap_fmt_txt+0x170>)
 8019564:	6819      	ldr	r1, [r3, #0]
 8019566:	69bb      	ldr	r3, [r7, #24]
 8019568:	791b      	ldrb	r3, [r3, #4]
 801956a:	b21a      	sxth	r2, r3
 801956c:	69bb      	ldr	r3, [r7, #24]
 801956e:	795b      	ldrb	r3, [r3, #5]
 8019570:	b21c      	sxth	r4, r3
                   (uint8_t)fdsc->bpp, prefilter);
 8019572:	6a3b      	ldr	r3, [r7, #32]
 8019574:	7cdb      	ldrb	r3, [r3, #19]
 8019576:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801957a:	b2db      	uxtb	r3, r3
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 801957c:	461d      	mov	r5, r3
 801957e:	7bfb      	ldrb	r3, [r7, #15]
 8019580:	9301      	str	r3, [sp, #4]
 8019582:	9500      	str	r5, [sp, #0]
 8019584:	4623      	mov	r3, r4
 8019586:	f000 fac9 	bl	8019b1c <decompress>
        return LV_GC_ROOT(_lv_font_decompr_buf);
 801958a:	4b03      	ldr	r3, [pc, #12]	; (8019598 <lv_font_get_bitmap_fmt_txt+0x170>)
 801958c:	681b      	ldr	r3, [r3, #0]
#endif
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
 801958e:	4618      	mov	r0, r3
 8019590:	3728      	adds	r7, #40	; 0x28
 8019592:	46bd      	mov	sp, r7
 8019594:	bdb0      	pop	{r4, r5, r7, pc}
 8019596:	bf00      	nop
 8019598:	20021790 	.word	0x20021790
 801959c:	0802d134 	.word	0x0802d134

080195a0 <lv_font_get_glyph_dsc_fmt_txt>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                   uint32_t unicode_letter_next)
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b08c      	sub	sp, #48	; 0x30
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	60f8      	str	r0, [r7, #12]
 80195a8:	60b9      	str	r1, [r7, #8]
 80195aa:	607a      	str	r2, [r7, #4]
 80195ac:	603b      	str	r3, [r7, #0]
    bool is_tab = false;
 80195ae:	2300      	movs	r3, #0
 80195b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(unicode_letter == '\t') {
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	2b09      	cmp	r3, #9
 80195b8:	d104      	bne.n	80195c4 <lv_font_get_glyph_dsc_fmt_txt+0x24>
        unicode_letter = ' ';
 80195ba:	2320      	movs	r3, #32
 80195bc:	607b      	str	r3, [r7, #4]
        is_tab = true;
 80195be:	2301      	movs	r3, #1
 80195c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	691b      	ldr	r3, [r3, #16]
 80195c8:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80195ca:	6879      	ldr	r1, [r7, #4]
 80195cc:	68f8      	ldr	r0, [r7, #12]
 80195ce:	f000 f883 	bl	80196d8 <get_glyph_dsc_id>
 80195d2:	6238      	str	r0, [r7, #32]
    if(!gid) return false;
 80195d4:	6a3b      	ldr	r3, [r7, #32]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d101      	bne.n	80195de <lv_font_get_glyph_dsc_fmt_txt+0x3e>
 80195da:	2300      	movs	r3, #0
 80195dc:	e066      	b.n	80196ac <lv_font_get_glyph_dsc_fmt_txt+0x10c>

    int8_t kvalue = 0;
 80195de:	2300      	movs	r3, #0
 80195e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(fdsc->kern_dsc) {
 80195e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e6:	68db      	ldr	r3, [r3, #12]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d00f      	beq.n	801960c <lv_font_get_glyph_dsc_fmt_txt+0x6c>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 80195ec:	6839      	ldr	r1, [r7, #0]
 80195ee:	68f8      	ldr	r0, [r7, #12]
 80195f0:	f000 f872 	bl	80196d8 <get_glyph_dsc_id>
 80195f4:	61f8      	str	r0, [r7, #28]
        if(gid_next) {
 80195f6:	69fb      	ldr	r3, [r7, #28]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d007      	beq.n	801960c <lv_font_get_glyph_dsc_fmt_txt+0x6c>
            kvalue = get_kern_value(font, gid, gid_next);
 80195fc:	69fa      	ldr	r2, [r7, #28]
 80195fe:	6a39      	ldr	r1, [r7, #32]
 8019600:	68f8      	ldr	r0, [r7, #12]
 8019602:	f000 f99b 	bl	801993c <get_kern_value>
 8019606:	4603      	mov	r3, r0
 8019608:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801960e:	685a      	ldr	r2, [r3, #4]
 8019610:	6a3b      	ldr	r3, [r7, #32]
 8019612:	00db      	lsls	r3, r3, #3
 8019614:	4413      	add	r3, r2
 8019616:	61bb      	str	r3, [r7, #24]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8019618:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801961c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801961e:	8a12      	ldrh	r2, [r2, #16]
 8019620:	fb02 f303 	mul.w	r3, r2, r3
 8019624:	111b      	asrs	r3, r3, #4
 8019626:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w;
 8019628:	69bb      	ldr	r3, [r7, #24]
 801962a:	885b      	ldrh	r3, [r3, #2]
 801962c:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8019630:	b29b      	uxth	r3, r3
 8019632:	62bb      	str	r3, [r7, #40]	; 0x28
    if(is_tab) adv_w *= 2;
 8019634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019638:	2b00      	cmp	r3, #0
 801963a:	d002      	beq.n	8019642 <lv_font_get_glyph_dsc_fmt_txt+0xa2>
 801963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801963e:	005b      	lsls	r3, r3, #1
 8019640:	62bb      	str	r3, [r7, #40]	; 0x28

    adv_w += kv;
 8019642:	697b      	ldr	r3, [r7, #20]
 8019644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019646:	4413      	add	r3, r2
 8019648:	62bb      	str	r3, [r7, #40]	; 0x28
    adv_w  = (adv_w + (1 << 3)) >> 4;
 801964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801964c:	3308      	adds	r3, #8
 801964e:	091b      	lsrs	r3, r3, #4
 8019650:	62bb      	str	r3, [r7, #40]	; 0x28

    dsc_out->adv_w = adv_w;
 8019652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019654:	b29a      	uxth	r2, r3
 8019656:	68bb      	ldr	r3, [r7, #8]
 8019658:	801a      	strh	r2, [r3, #0]
    dsc_out->box_h = gdsc->box_h;
 801965a:	69bb      	ldr	r3, [r7, #24]
 801965c:	795b      	ldrb	r3, [r3, #5]
 801965e:	b29a      	uxth	r2, r3
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	809a      	strh	r2, [r3, #4]
    dsc_out->box_w = gdsc->box_w;
 8019664:	69bb      	ldr	r3, [r7, #24]
 8019666:	791b      	ldrb	r3, [r3, #4]
 8019668:	b29a      	uxth	r2, r3
 801966a:	68bb      	ldr	r3, [r7, #8]
 801966c:	805a      	strh	r2, [r3, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 801966e:	69bb      	ldr	r3, [r7, #24]
 8019670:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8019674:	b21a      	sxth	r2, r3
 8019676:	68bb      	ldr	r3, [r7, #8]
 8019678:	80da      	strh	r2, [r3, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 801967a:	69bb      	ldr	r3, [r7, #24]
 801967c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8019680:	b21a      	sxth	r2, r3
 8019682:	68bb      	ldr	r3, [r7, #8]
 8019684:	811a      	strh	r2, [r3, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8019686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019688:	7cdb      	ldrb	r3, [r3, #19]
 801968a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801968e:	b2db      	uxtb	r3, r3
 8019690:	461a      	mov	r2, r3
 8019692:	68bb      	ldr	r3, [r7, #8]
 8019694:	729a      	strb	r2, [r3, #10]

    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8019696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801969a:	2b00      	cmp	r3, #0
 801969c:	d005      	beq.n	80196aa <lv_font_get_glyph_dsc_fmt_txt+0x10a>
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	885b      	ldrh	r3, [r3, #2]
 80196a2:	005b      	lsls	r3, r3, #1
 80196a4:	b29a      	uxth	r2, r3
 80196a6:	68bb      	ldr	r3, [r7, #8]
 80196a8:	805a      	strh	r2, [r3, #2]

    return true;
 80196aa:	2301      	movs	r3, #1
}
 80196ac:	4618      	mov	r0, r3
 80196ae:	3730      	adds	r7, #48	; 0x30
 80196b0:	46bd      	mov	sp, r7
 80196b2:	bd80      	pop	{r7, pc}

080196b4 <_lv_font_clean_up_fmt_txt>:

/**
 * Free the allocated memories.
 */
void _lv_font_clean_up_fmt_txt(void)
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
 80196b8:	4b06      	ldr	r3, [pc, #24]	; (80196d4 <_lv_font_clean_up_fmt_txt+0x20>)
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d007      	beq.n	80196d0 <_lv_font_clean_up_fmt_txt+0x1c>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
 80196c0:	4b04      	ldr	r3, [pc, #16]	; (80196d4 <_lv_font_clean_up_fmt_txt+0x20>)
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	4618      	mov	r0, r3
 80196c6:	f003 f82b 	bl	801c720 <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
 80196ca:	4b02      	ldr	r3, [pc, #8]	; (80196d4 <_lv_font_clean_up_fmt_txt+0x20>)
 80196cc:	2200      	movs	r2, #0
 80196ce:	601a      	str	r2, [r3, #0]
    }
}
 80196d0:	bf00      	nop
 80196d2:	bd80      	pop	{r7, pc}
 80196d4:	20021790 	.word	0x20021790

080196d8 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 80196d8:	b590      	push	{r4, r7, lr}
 80196da:	b091      	sub	sp, #68	; 0x44
 80196dc:	af02      	add	r7, sp, #8
 80196de:	6078      	str	r0, [r7, #4]
 80196e0:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d101      	bne.n	80196ec <get_glyph_dsc_id+0x14>
 80196e8:	2300      	movs	r3, #0
 80196ea:	e121      	b.n	8019930 <get_glyph_dsc_id+0x258>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	691b      	ldr	r3, [r3, #16]
 80196f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Check the cache first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 80196f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196f4:	695b      	ldr	r3, [r3, #20]
 80196f6:	683a      	ldr	r2, [r7, #0]
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d102      	bne.n	8019702 <get_glyph_dsc_id+0x2a>
 80196fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196fe:	699b      	ldr	r3, [r3, #24]
 8019700:	e116      	b.n	8019930 <get_glyph_dsc_id+0x258>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 8019702:	2300      	movs	r3, #0
 8019704:	86fb      	strh	r3, [r7, #54]	; 0x36
 8019706:	e102      	b.n	801990e <get_glyph_dsc_id+0x236>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8019708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801970a:	6899      	ldr	r1, [r3, #8]
 801970c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801970e:	4613      	mov	r3, r2
 8019710:	009b      	lsls	r3, r3, #2
 8019712:	4413      	add	r3, r2
 8019714:	009b      	lsls	r3, r3, #2
 8019716:	440b      	add	r3, r1
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	683a      	ldr	r2, [r7, #0]
 801971c:	1ad3      	subs	r3, r2, r3
 801971e:	62bb      	str	r3, [r7, #40]	; 0x28
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8019720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019722:	6899      	ldr	r1, [r3, #8]
 8019724:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019726:	4613      	mov	r3, r2
 8019728:	009b      	lsls	r3, r3, #2
 801972a:	4413      	add	r3, r2
 801972c:	009b      	lsls	r3, r3, #2
 801972e:	440b      	add	r3, r1
 8019730:	889b      	ldrh	r3, [r3, #4]
 8019732:	461a      	mov	r2, r3
 8019734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019736:	4293      	cmp	r3, r2
 8019738:	d903      	bls.n	8019742 <get_glyph_dsc_id+0x6a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801973a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801973c:	3301      	adds	r3, #1
 801973e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8019740:	e0e5      	b.n	801990e <get_glyph_dsc_id+0x236>
        uint32_t glyph_id = 0;
 8019742:	2300      	movs	r3, #0
 8019744:	633b      	str	r3, [r7, #48]	; 0x30
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8019746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019748:	6899      	ldr	r1, [r3, #8]
 801974a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801974c:	4613      	mov	r3, r2
 801974e:	009b      	lsls	r3, r3, #2
 8019750:	4413      	add	r3, r2
 8019752:	009b      	lsls	r3, r3, #2
 8019754:	440b      	add	r3, r1
 8019756:	7c9b      	ldrb	r3, [r3, #18]
 8019758:	2b02      	cmp	r3, #2
 801975a:	d10d      	bne.n	8019778 <get_glyph_dsc_id+0xa0>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801975e:	6899      	ldr	r1, [r3, #8]
 8019760:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019762:	4613      	mov	r3, r2
 8019764:	009b      	lsls	r3, r3, #2
 8019766:	4413      	add	r3, r2
 8019768:	009b      	lsls	r3, r3, #2
 801976a:	440b      	add	r3, r1
 801976c:	88db      	ldrh	r3, [r3, #6]
 801976e:	461a      	mov	r2, r3
 8019770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019772:	4413      	add	r3, r2
 8019774:	633b      	str	r3, [r7, #48]	; 0x30
 8019776:	e0c2      	b.n	80198fe <get_glyph_dsc_id+0x226>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8019778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801977a:	6899      	ldr	r1, [r3, #8]
 801977c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801977e:	4613      	mov	r3, r2
 8019780:	009b      	lsls	r3, r3, #2
 8019782:	4413      	add	r3, r2
 8019784:	009b      	lsls	r3, r3, #2
 8019786:	440b      	add	r3, r1
 8019788:	7c9b      	ldrb	r3, [r3, #18]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d11a      	bne.n	80197c4 <get_glyph_dsc_id+0xec>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 801978e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019790:	6899      	ldr	r1, [r3, #8]
 8019792:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019794:	4613      	mov	r3, r2
 8019796:	009b      	lsls	r3, r3, #2
 8019798:	4413      	add	r3, r2
 801979a:	009b      	lsls	r3, r3, #2
 801979c:	440b      	add	r3, r1
 801979e:	68db      	ldr	r3, [r3, #12]
 80197a0:	613b      	str	r3, [r7, #16]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 80197a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197a4:	6899      	ldr	r1, [r3, #8]
 80197a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80197a8:	4613      	mov	r3, r2
 80197aa:	009b      	lsls	r3, r3, #2
 80197ac:	4413      	add	r3, r2
 80197ae:	009b      	lsls	r3, r3, #2
 80197b0:	440b      	add	r3, r1
 80197b2:	88db      	ldrh	r3, [r3, #6]
 80197b4:	4619      	mov	r1, r3
 80197b6:	693a      	ldr	r2, [r7, #16]
 80197b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197ba:	4413      	add	r3, r2
 80197bc:	781b      	ldrb	r3, [r3, #0]
 80197be:	440b      	add	r3, r1
 80197c0:	633b      	str	r3, [r7, #48]	; 0x30
 80197c2:	e09c      	b.n	80198fe <get_glyph_dsc_id+0x226>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80197c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197c6:	6899      	ldr	r1, [r3, #8]
 80197c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80197ca:	4613      	mov	r3, r2
 80197cc:	009b      	lsls	r3, r3, #2
 80197ce:	4413      	add	r3, r2
 80197d0:	009b      	lsls	r3, r3, #2
 80197d2:	440b      	add	r3, r1
 80197d4:	7c9b      	ldrb	r3, [r3, #18]
 80197d6:	2b03      	cmp	r3, #3
 80197d8:	d13c      	bne.n	8019854 <get_glyph_dsc_id+0x17c>
            uint16_t key = rcp;
 80197da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197dc:	b29b      	uxth	r3, r3
 80197de:	81fb      	strh	r3, [r7, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80197e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197e2:	6899      	ldr	r1, [r3, #8]
 80197e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80197e6:	4613      	mov	r3, r2
 80197e8:	009b      	lsls	r3, r3, #2
 80197ea:	4413      	add	r3, r2
 80197ec:	009b      	lsls	r3, r3, #2
 80197ee:	440b      	add	r3, r1
 80197f0:	689c      	ldr	r4, [r3, #8]
 80197f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197f4:	6899      	ldr	r1, [r3, #8]
 80197f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80197f8:	4613      	mov	r3, r2
 80197fa:	009b      	lsls	r3, r3, #2
 80197fc:	4413      	add	r3, r2
 80197fe:	009b      	lsls	r3, r3, #2
 8019800:	440b      	add	r3, r1
 8019802:	8a1b      	ldrh	r3, [r3, #16]
 8019804:	461a      	mov	r2, r3
 8019806:	f107 000e 	add.w	r0, r7, #14
 801980a:	4b4b      	ldr	r3, [pc, #300]	; (8019938 <get_glyph_dsc_id+0x260>)
 801980c:	9300      	str	r3, [sp, #0]
 801980e:	2302      	movs	r3, #2
 8019810:	4621      	mov	r1, r4
 8019812:	f004 fd79 	bl	801e308 <_lv_utils_bsearch>
 8019816:	61b8      	str	r0, [r7, #24]
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 8019818:	69bb      	ldr	r3, [r7, #24]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d06f      	beq.n	80198fe <get_glyph_dsc_id+0x226>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801981e:	69b9      	ldr	r1, [r7, #24]
 8019820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019822:	6898      	ldr	r0, [r3, #8]
 8019824:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019826:	4613      	mov	r3, r2
 8019828:	009b      	lsls	r3, r3, #2
 801982a:	4413      	add	r3, r2
 801982c:	009b      	lsls	r3, r3, #2
 801982e:	4403      	add	r3, r0
 8019830:	689b      	ldr	r3, [r3, #8]
 8019832:	1acb      	subs	r3, r1, r3
 8019834:	105b      	asrs	r3, r3, #1
 8019836:	617b      	str	r3, [r7, #20]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8019838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801983a:	6899      	ldr	r1, [r3, #8]
 801983c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801983e:	4613      	mov	r3, r2
 8019840:	009b      	lsls	r3, r3, #2
 8019842:	4413      	add	r3, r2
 8019844:	009b      	lsls	r3, r3, #2
 8019846:	440b      	add	r3, r1
 8019848:	88db      	ldrh	r3, [r3, #6]
 801984a:	461a      	mov	r2, r3
 801984c:	697b      	ldr	r3, [r7, #20]
 801984e:	4413      	add	r3, r2
 8019850:	633b      	str	r3, [r7, #48]	; 0x30
 8019852:	e054      	b.n	80198fe <get_glyph_dsc_id+0x226>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8019854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019856:	6899      	ldr	r1, [r3, #8]
 8019858:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801985a:	4613      	mov	r3, r2
 801985c:	009b      	lsls	r3, r3, #2
 801985e:	4413      	add	r3, r2
 8019860:	009b      	lsls	r3, r3, #2
 8019862:	440b      	add	r3, r1
 8019864:	7c9b      	ldrb	r3, [r3, #18]
 8019866:	2b01      	cmp	r3, #1
 8019868:	d149      	bne.n	80198fe <get_glyph_dsc_id+0x226>
            uint16_t key = rcp;
 801986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801986c:	b29b      	uxth	r3, r3
 801986e:	81bb      	strh	r3, [r7, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8019870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019872:	6899      	ldr	r1, [r3, #8]
 8019874:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019876:	4613      	mov	r3, r2
 8019878:	009b      	lsls	r3, r3, #2
 801987a:	4413      	add	r3, r2
 801987c:	009b      	lsls	r3, r3, #2
 801987e:	440b      	add	r3, r1
 8019880:	689c      	ldr	r4, [r3, #8]
 8019882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019884:	6899      	ldr	r1, [r3, #8]
 8019886:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019888:	4613      	mov	r3, r2
 801988a:	009b      	lsls	r3, r3, #2
 801988c:	4413      	add	r3, r2
 801988e:	009b      	lsls	r3, r3, #2
 8019890:	440b      	add	r3, r1
 8019892:	8a1b      	ldrh	r3, [r3, #16]
 8019894:	461a      	mov	r2, r3
 8019896:	f107 000c 	add.w	r0, r7, #12
 801989a:	4b27      	ldr	r3, [pc, #156]	; (8019938 <get_glyph_dsc_id+0x260>)
 801989c:	9300      	str	r3, [sp, #0]
 801989e:	2302      	movs	r3, #2
 80198a0:	4621      	mov	r1, r4
 80198a2:	f004 fd31 	bl	801e308 <_lv_utils_bsearch>
 80198a6:	6278      	str	r0, [r7, #36]	; 0x24
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 80198a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d027      	beq.n	80198fe <get_glyph_dsc_id+0x226>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80198ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80198b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b2:	6898      	ldr	r0, [r3, #8]
 80198b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80198b6:	4613      	mov	r3, r2
 80198b8:	009b      	lsls	r3, r3, #2
 80198ba:	4413      	add	r3, r2
 80198bc:	009b      	lsls	r3, r3, #2
 80198be:	4403      	add	r3, r0
 80198c0:	689b      	ldr	r3, [r3, #8]
 80198c2:	1acb      	subs	r3, r1, r3
 80198c4:	105b      	asrs	r3, r3, #1
 80198c6:	623b      	str	r3, [r7, #32]
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 80198c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198ca:	6899      	ldr	r1, [r3, #8]
 80198cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80198ce:	4613      	mov	r3, r2
 80198d0:	009b      	lsls	r3, r3, #2
 80198d2:	4413      	add	r3, r2
 80198d4:	009b      	lsls	r3, r3, #2
 80198d6:	440b      	add	r3, r1
 80198d8:	68db      	ldr	r3, [r3, #12]
 80198da:	61fb      	str	r3, [r7, #28]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80198dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198de:	6899      	ldr	r1, [r3, #8]
 80198e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80198e2:	4613      	mov	r3, r2
 80198e4:	009b      	lsls	r3, r3, #2
 80198e6:	4413      	add	r3, r2
 80198e8:	009b      	lsls	r3, r3, #2
 80198ea:	440b      	add	r3, r1
 80198ec:	88db      	ldrh	r3, [r3, #6]
 80198ee:	4619      	mov	r1, r3
 80198f0:	6a3b      	ldr	r3, [r7, #32]
 80198f2:	005b      	lsls	r3, r3, #1
 80198f4:	69fa      	ldr	r2, [r7, #28]
 80198f6:	4413      	add	r3, r2
 80198f8:	881b      	ldrh	r3, [r3, #0]
 80198fa:	440b      	add	r3, r1
 80198fc:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }

        /*Update the cache*/
        fdsc->last_letter = letter;
 80198fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019900:	683a      	ldr	r2, [r7, #0]
 8019902:	615a      	str	r2, [r3, #20]
        fdsc->last_glyph_id = glyph_id;
 8019904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019908:	619a      	str	r2, [r3, #24]
        return glyph_id;
 801990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801990c:	e010      	b.n	8019930 <get_glyph_dsc_id+0x258>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019910:	8a5b      	ldrh	r3, [r3, #18]
 8019912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019916:	b29b      	uxth	r3, r3
 8019918:	461a      	mov	r2, r3
 801991a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801991c:	4293      	cmp	r3, r2
 801991e:	f4ff aef3 	bcc.w	8019708 <get_glyph_dsc_id+0x30>
    }

    fdsc->last_letter = letter;
 8019922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019924:	683a      	ldr	r2, [r7, #0]
 8019926:	615a      	str	r2, [r3, #20]
    fdsc->last_glyph_id = 0;
 8019928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801992a:	2200      	movs	r2, #0
 801992c:	619a      	str	r2, [r3, #24]
    return 0;
 801992e:	2300      	movs	r3, #0

}
 8019930:	4618      	mov	r0, r3
 8019932:	373c      	adds	r7, #60	; 0x3c
 8019934:	46bd      	mov	sp, r7
 8019936:	bd90      	pop	{r4, r7, pc}
 8019938:	0801a0ed 	.word	0x0801a0ed

0801993c <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b094      	sub	sp, #80	; 0x50
 8019940:	af02      	add	r7, sp, #8
 8019942:	60f8      	str	r0, [r7, #12]
 8019944:	60b9      	str	r1, [r7, #8]
 8019946:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	691b      	ldr	r3, [r3, #16]
 801994c:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 801994e:	2300      	movs	r3, #0
 8019950:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 8019954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019956:	7cdb      	ldrb	r3, [r3, #19]
 8019958:	f003 0320 	and.w	r3, r3, #32
 801995c:	b2db      	uxtb	r3, r3
 801995e:	2b00      	cmp	r3, #0
 8019960:	d160      	bne.n	8019a24 <get_kern_value+0xe8>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8019962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019964:	68db      	ldr	r3, [r3, #12]
 8019966:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 8019968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801996a:	7adb      	ldrb	r3, [r3, #11]
 801996c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019970:	b2db      	uxtb	r3, r3
 8019972:	2b00      	cmp	r3, #0
 8019974:	d129      	bne.n	80199ca <get_kern_value+0x8e>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint16_t * g_ids = kdsc->glyph_ids;
 8019976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	b29b      	uxth	r3, r3
 8019980:	021b      	lsls	r3, r3, #8
 8019982:	b29a      	uxth	r2, r3
 8019984:	68bb      	ldr	r3, [r7, #8]
 8019986:	b29b      	uxth	r3, r3
 8019988:	4413      	add	r3, r2
 801998a:	b29b      	uxth	r3, r3
 801998c:	837b      	strh	r3, [r7, #26]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 801998e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019990:	689b      	ldr	r3, [r3, #8]
 8019992:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8019996:	461a      	mov	r2, r3
 8019998:	f107 001a 	add.w	r0, r7, #26
 801999c:	4b39      	ldr	r3, [pc, #228]	; (8019a84 <get_kern_value+0x148>)
 801999e:	9300      	str	r3, [sp, #0]
 80199a0:	2302      	movs	r3, #2
 80199a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80199a4:	f004 fcb0 	bl	801e308 <_lv_utils_bsearch>
 80199a8:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 80199aa:	6a3b      	ldr	r3, [r7, #32]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d063      	beq.n	8019a78 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 80199b0:	6a3a      	ldr	r2, [r7, #32]
 80199b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199b4:	1ad3      	subs	r3, r2, r3
 80199b6:	105b      	asrs	r3, r3, #1
 80199b8:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 80199ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199bc:	685a      	ldr	r2, [r3, #4]
 80199be:	69fb      	ldr	r3, [r7, #28]
 80199c0:	4413      	add	r3, r2
 80199c2:	781b      	ldrb	r3, [r3, #0]
 80199c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80199c8:	e056      	b.n	8019a78 <get_kern_value+0x13c>
            }
        }
        else if(kdsc->glyph_ids_size == 1) {
 80199ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199cc:	7adb      	ldrb	r3, [r3, #11]
 80199ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80199d2:	b2db      	uxtb	r3, r3
 80199d4:	2b40      	cmp	r3, #64	; 0x40
 80199d6:	d14f      	bne.n	8019a78 <get_kern_value+0x13c>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint32_t * g_ids = kdsc->glyph_ids;
 80199d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	041a      	lsls	r2, r3, #16
 80199e2:	68bb      	ldr	r3, [r7, #8]
 80199e4:	4413      	add	r3, r2
 80199e6:	617b      	str	r3, [r7, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 80199e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199ea:	689b      	ldr	r3, [r3, #8]
 80199ec:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80199f0:	461a      	mov	r2, r3
 80199f2:	f107 0014 	add.w	r0, r7, #20
 80199f6:	4b24      	ldr	r3, [pc, #144]	; (8019a88 <get_kern_value+0x14c>)
 80199f8:	9300      	str	r3, [sp, #0]
 80199fa:	2304      	movs	r3, #4
 80199fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80199fe:	f004 fc83 	bl	801e308 <_lv_utils_bsearch>
 8019a02:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 8019a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d036      	beq.n	8019a78 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 8019a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a0e:	1ad3      	subs	r3, r2, r3
 8019a10:	109b      	asrs	r3, r3, #2
 8019a12:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 8019a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a16:	685a      	ldr	r2, [r3, #4]
 8019a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a1a:	4413      	add	r3, r2
 8019a1c:	781b      	ldrb	r3, [r3, #0]
 8019a1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019a22:	e029      	b.n	8019a78 <get_kern_value+0x13c>
            /*Invalid value*/
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 8019a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a26:	68db      	ldr	r3, [r3, #12]
 8019a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8019a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a2c:	685a      	ldr	r2, [r3, #4]
 8019a2e:	68bb      	ldr	r3, [r7, #8]
 8019a30:	4413      	add	r3, r2
 8019a32:	781b      	ldrb	r3, [r3, #0]
 8019a34:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8019a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a3a:	689a      	ldr	r2, [r3, #8]
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	4413      	add	r3, r2
 8019a40:	781b      	ldrb	r3, [r3, #0]
 8019a42:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 8019a46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d014      	beq.n	8019a78 <get_kern_value+0x13c>
 8019a4e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d010      	beq.n	8019a78 <get_kern_value+0x13c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8019a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8019a5e:	3a01      	subs	r2, #1
 8019a60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019a62:	7b49      	ldrb	r1, [r1, #13]
 8019a64:	fb01 f102 	mul.w	r1, r1, r2
 8019a68:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8019a6c:	3a01      	subs	r2, #1
 8019a6e:	440a      	add	r2, r1
 8019a70:	4413      	add	r3, r2
 8019a72:	781b      	ldrb	r3, [r3, #0]
 8019a74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 8019a78:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	3748      	adds	r7, #72	; 0x48
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bd80      	pop	{r7, pc}
 8019a84:	08019a8d 	.word	0x08019a8d
 8019a88:	08019ad5 	.word	0x08019ad5

08019a8c <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 8019a8c:	b480      	push	{r7}
 8019a8e:	b085      	sub	sp, #20
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
 8019a94:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 8019a9a:	683b      	ldr	r3, [r7, #0]
 8019a9c:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	781a      	ldrb	r2, [r3, #0]
 8019aa2:	68bb      	ldr	r3, [r7, #8]
 8019aa4:	781b      	ldrb	r3, [r3, #0]
 8019aa6:	429a      	cmp	r2, r3
 8019aa8:	d006      	beq.n	8019ab8 <kern_pair_8_compare+0x2c>
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	781b      	ldrb	r3, [r3, #0]
 8019aae:	461a      	mov	r2, r3
 8019ab0:	68bb      	ldr	r3, [r7, #8]
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	1ad3      	subs	r3, r2, r3
 8019ab6:	e007      	b.n	8019ac8 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	3301      	adds	r3, #1
 8019abc:	781b      	ldrb	r3, [r3, #0]
 8019abe:	461a      	mov	r2, r3
 8019ac0:	68bb      	ldr	r3, [r7, #8]
 8019ac2:	3301      	adds	r3, #1
 8019ac4:	781b      	ldrb	r3, [r3, #0]
 8019ac6:	1ad3      	subs	r3, r2, r3

}
 8019ac8:	4618      	mov	r0, r3
 8019aca:	3714      	adds	r7, #20
 8019acc:	46bd      	mov	sp, r7
 8019ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad2:	4770      	bx	lr

08019ad4 <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 8019ad4:	b480      	push	{r7}
 8019ad6:	b085      	sub	sp, #20
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	881a      	ldrh	r2, [r3, #0]
 8019aea:	68bb      	ldr	r3, [r7, #8]
 8019aec:	881b      	ldrh	r3, [r3, #0]
 8019aee:	429a      	cmp	r2, r3
 8019af0:	d006      	beq.n	8019b00 <kern_pair_16_compare+0x2c>
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	881b      	ldrh	r3, [r3, #0]
 8019af6:	461a      	mov	r2, r3
 8019af8:	68bb      	ldr	r3, [r7, #8]
 8019afa:	881b      	ldrh	r3, [r3, #0]
 8019afc:	1ad3      	subs	r3, r2, r3
 8019afe:	e007      	b.n	8019b10 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	3302      	adds	r3, #2
 8019b04:	881b      	ldrh	r3, [r3, #0]
 8019b06:	461a      	mov	r2, r3
 8019b08:	68bb      	ldr	r3, [r7, #8]
 8019b0a:	3302      	adds	r3, #2
 8019b0c:	881b      	ldrh	r3, [r3, #0]
 8019b0e:	1ad3      	subs	r3, r2, r3
}
 8019b10:	4618      	mov	r0, r3
 8019b12:	3714      	adds	r7, #20
 8019b14:	46bd      	mov	sp, r7
 8019b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b1a:	4770      	bx	lr

08019b1c <decompress>:
 * @param px_num number of pixels in the glyph (width * height)
 * @param bpp bit per pixel (bpp = 3 will be converted to bpp = 4)
 * @param prefilter true: the lines are XORed
 */
static void decompress(const uint8_t * in, uint8_t * out, lv_coord_t w, lv_coord_t h, uint8_t bpp, bool prefilter)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b08a      	sub	sp, #40	; 0x28
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	60f8      	str	r0, [r7, #12]
 8019b24:	60b9      	str	r1, [r7, #8]
 8019b26:	4611      	mov	r1, r2
 8019b28:	461a      	mov	r2, r3
 8019b2a:	460b      	mov	r3, r1
 8019b2c:	80fb      	strh	r3, [r7, #6]
 8019b2e:	4613      	mov	r3, r2
 8019b30:	80bb      	strh	r3, [r7, #4]
    uint32_t wrp = 0;
 8019b32:	2300      	movs	r3, #0
 8019b34:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t wr_size = bpp;
 8019b36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(bpp == 3) wr_size = 4;
 8019b3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019b42:	2b03      	cmp	r3, #3
 8019b44:	d102      	bne.n	8019b4c <decompress+0x30>
 8019b46:	2304      	movs	r3, #4
 8019b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    rle_init(in, bpp);
 8019b4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019b50:	4619      	mov	r1, r3
 8019b52:	68f8      	ldr	r0, [r7, #12]
 8019b54:	f000 f9c4 	bl	8019ee0 <rle_init>

    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 8019b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f002 fef7 	bl	801c950 <_lv_mem_buf_get>
 8019b62:	6178      	str	r0, [r7, #20]

    uint8_t * line_buf2 = NULL;
 8019b64:	2300      	movs	r3, #0
 8019b66:	61fb      	str	r3, [r7, #28]

    if(prefilter) {
 8019b68:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d005      	beq.n	8019b7c <decompress+0x60>
        line_buf2 = _lv_mem_buf_get(w);
 8019b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b74:	4618      	mov	r0, r3
 8019b76:	f002 feeb 	bl	801c950 <_lv_mem_buf_get>
 8019b7a:	61f8      	str	r0, [r7, #28]
    }

    decompress_line(line_buf1, w);
 8019b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b80:	4619      	mov	r1, r3
 8019b82:	6978      	ldr	r0, [r7, #20]
 8019b84:	f000 f898 	bl	8019cb8 <decompress_line>

    lv_coord_t y;
    lv_coord_t x;

    for(x = 0; x < w; x++) {
 8019b88:	2300      	movs	r3, #0
 8019b8a:	833b      	strh	r3, [r7, #24]
 8019b8c:	e015      	b.n	8019bba <decompress+0x9e>
        bits_write(out, wrp, line_buf1[x], bpp);
 8019b8e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019b92:	697a      	ldr	r2, [r7, #20]
 8019b94:	4413      	add	r3, r2
 8019b96:	781a      	ldrb	r2, [r3, #0]
 8019b98:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b9e:	68b8      	ldr	r0, [r7, #8]
 8019ba0:	f000 f922 	bl	8019de8 <bits_write>
        wrp += wr_size;
 8019ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019baa:	4413      	add	r3, r2
 8019bac:	627b      	str	r3, [r7, #36]	; 0x24
    for(x = 0; x < w; x++) {
 8019bae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019bb2:	b29b      	uxth	r3, r3
 8019bb4:	3301      	adds	r3, #1
 8019bb6:	b29b      	uxth	r3, r3
 8019bb8:	833b      	strh	r3, [r7, #24]
 8019bba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8019bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	dbe3      	blt.n	8019b8e <decompress+0x72>
    }

    for(y = 1; y < h; y++) {
 8019bc6:	2301      	movs	r3, #1
 8019bc8:	837b      	strh	r3, [r7, #26]
 8019bca:	e065      	b.n	8019c98 <decompress+0x17c>
        if(prefilter) {
 8019bcc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d036      	beq.n	8019c42 <decompress+0x126>
            decompress_line(line_buf2, w);
 8019bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019bd8:	4619      	mov	r1, r3
 8019bda:	69f8      	ldr	r0, [r7, #28]
 8019bdc:	f000 f86c 	bl	8019cb8 <decompress_line>

            for(x = 0; x < w; x++) {
 8019be0:	2300      	movs	r3, #0
 8019be2:	833b      	strh	r3, [r7, #24]
 8019be4:	e026      	b.n	8019c34 <decompress+0x118>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 8019be6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019bea:	69fa      	ldr	r2, [r7, #28]
 8019bec:	4413      	add	r3, r2
 8019bee:	7819      	ldrb	r1, [r3, #0]
 8019bf0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019bf4:	697a      	ldr	r2, [r7, #20]
 8019bf6:	4413      	add	r3, r2
 8019bf8:	781a      	ldrb	r2, [r3, #0]
 8019bfa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019bfe:	6978      	ldr	r0, [r7, #20]
 8019c00:	4403      	add	r3, r0
 8019c02:	404a      	eors	r2, r1
 8019c04:	b2d2      	uxtb	r2, r2
 8019c06:	701a      	strb	r2, [r3, #0]
                bits_write(out, wrp, line_buf1[x], bpp);
 8019c08:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c0c:	697a      	ldr	r2, [r7, #20]
 8019c0e:	4413      	add	r3, r2
 8019c10:	781a      	ldrb	r2, [r3, #0]
 8019c12:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019c18:	68b8      	ldr	r0, [r7, #8]
 8019c1a:	f000 f8e5 	bl	8019de8 <bits_write>
                wrp += wr_size;
 8019c1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c24:	4413      	add	r3, r2
 8019c26:	627b      	str	r3, [r7, #36]	; 0x24
            for(x = 0; x < w; x++) {
 8019c28:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c2c:	b29b      	uxth	r3, r3
 8019c2e:	3301      	adds	r3, #1
 8019c30:	b29b      	uxth	r3, r3
 8019c32:	833b      	strh	r3, [r7, #24]
 8019c34:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8019c38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c3c:	429a      	cmp	r2, r3
 8019c3e:	dbd2      	blt.n	8019be6 <decompress+0xca>
 8019c40:	e024      	b.n	8019c8c <decompress+0x170>
            }
        }
        else {
            decompress_line(line_buf1, w);
 8019c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c46:	4619      	mov	r1, r3
 8019c48:	6978      	ldr	r0, [r7, #20]
 8019c4a:	f000 f835 	bl	8019cb8 <decompress_line>

            for(x = 0; x < w; x++) {
 8019c4e:	2300      	movs	r3, #0
 8019c50:	833b      	strh	r3, [r7, #24]
 8019c52:	e015      	b.n	8019c80 <decompress+0x164>
                bits_write(out, wrp, line_buf1[x], bpp);
 8019c54:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c58:	697a      	ldr	r2, [r7, #20]
 8019c5a:	4413      	add	r3, r2
 8019c5c:	781a      	ldrb	r2, [r3, #0]
 8019c5e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019c64:	68b8      	ldr	r0, [r7, #8]
 8019c66:	f000 f8bf 	bl	8019de8 <bits_write>
                wrp += wr_size;
 8019c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c70:	4413      	add	r3, r2
 8019c72:	627b      	str	r3, [r7, #36]	; 0x24
            for(x = 0; x < w; x++) {
 8019c74:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c78:	b29b      	uxth	r3, r3
 8019c7a:	3301      	adds	r3, #1
 8019c7c:	b29b      	uxth	r3, r3
 8019c7e:	833b      	strh	r3, [r7, #24]
 8019c80:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8019c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	dbe3      	blt.n	8019c54 <decompress+0x138>
    for(y = 1; y < h; y++) {
 8019c8c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019c90:	b29b      	uxth	r3, r3
 8019c92:	3301      	adds	r3, #1
 8019c94:	b29b      	uxth	r3, r3
 8019c96:	837b      	strh	r3, [r7, #26]
 8019c98:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8019c9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8019ca0:	429a      	cmp	r2, r3
 8019ca2:	db93      	blt.n	8019bcc <decompress+0xb0>
            }
        }
    }

    _lv_mem_buf_release(line_buf1);
 8019ca4:	6978      	ldr	r0, [r7, #20]
 8019ca6:	f002 ff31 	bl	801cb0c <_lv_mem_buf_release>
    _lv_mem_buf_release(line_buf2);
 8019caa:	69f8      	ldr	r0, [r7, #28]
 8019cac:	f002 ff2e 	bl	801cb0c <_lv_mem_buf_release>
}
 8019cb0:	bf00      	nop
 8019cb2:	3728      	adds	r7, #40	; 0x28
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	bd80      	pop	{r7, pc}

08019cb8 <decompress_line>:
 * Decompress one line. Store one pixel per byte
 * @param out output buffer
 * @param w width of the line in pixel count
 */
static inline void decompress_line(uint8_t * out, lv_coord_t w)
{
 8019cb8:	b590      	push	{r4, r7, lr}
 8019cba:	b085      	sub	sp, #20
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
 8019cc0:	460b      	mov	r3, r1
 8019cc2:	807b      	strh	r3, [r7, #2]
    lv_coord_t i;
    for(i = 0; i < w; i++) {
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	81fb      	strh	r3, [r7, #14]
 8019cc8:	e00d      	b.n	8019ce6 <decompress_line+0x2e>
        out[i] = rle_next();
 8019cca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019cce:	687a      	ldr	r2, [r7, #4]
 8019cd0:	18d4      	adds	r4, r2, r3
 8019cd2:	f000 f92f 	bl	8019f34 <rle_next>
 8019cd6:	4603      	mov	r3, r0
 8019cd8:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < w; i++) {
 8019cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019cde:	b29b      	uxth	r3, r3
 8019ce0:	3301      	adds	r3, #1
 8019ce2:	b29b      	uxth	r3, r3
 8019ce4:	81fb      	strh	r3, [r7, #14]
 8019ce6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8019cea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019cee:	429a      	cmp	r2, r3
 8019cf0:	dbeb      	blt.n	8019cca <decompress_line+0x12>
    }
}
 8019cf2:	bf00      	nop
 8019cf4:	3714      	adds	r7, #20
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bd90      	pop	{r4, r7, pc}
	...

08019cfc <get_bits>:
 * @param bit_pos index of the first bit to read.
 * @param len number of bits to read (must be <= 8).
 * @return the read bits
 */
static inline uint8_t get_bits(const uint8_t * in, uint32_t bit_pos, uint8_t len)
{
 8019cfc:	b480      	push	{r7}
 8019cfe:	b089      	sub	sp, #36	; 0x24
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	60f8      	str	r0, [r7, #12]
 8019d04:	60b9      	str	r1, [r7, #8]
 8019d06:	4613      	mov	r3, r2
 8019d08:	71fb      	strb	r3, [r7, #7]
    uint8_t bit_mask;
    switch(len) {
 8019d0a:	79fb      	ldrb	r3, [r7, #7]
 8019d0c:	3b01      	subs	r3, #1
 8019d0e:	2b07      	cmp	r3, #7
 8019d10:	d821      	bhi.n	8019d56 <get_bits+0x5a>
 8019d12:	a201      	add	r2, pc, #4	; (adr r2, 8019d18 <get_bits+0x1c>)
 8019d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d18:	08019d39 	.word	0x08019d39
 8019d1c:	08019d3f 	.word	0x08019d3f
 8019d20:	08019d45 	.word	0x08019d45
 8019d24:	08019d4b 	.word	0x08019d4b
 8019d28:	08019d57 	.word	0x08019d57
 8019d2c:	08019d57 	.word	0x08019d57
 8019d30:	08019d57 	.word	0x08019d57
 8019d34:	08019d51 	.word	0x08019d51
        case 1:
            bit_mask = 0x1;
 8019d38:	2301      	movs	r3, #1
 8019d3a:	77fb      	strb	r3, [r7, #31]
            break;
 8019d3c:	e012      	b.n	8019d64 <get_bits+0x68>
        case 2:
            bit_mask = 0x3;
 8019d3e:	2303      	movs	r3, #3
 8019d40:	77fb      	strb	r3, [r7, #31]
            break;
 8019d42:	e00f      	b.n	8019d64 <get_bits+0x68>
        case 3:
            bit_mask = 0x7;
 8019d44:	2307      	movs	r3, #7
 8019d46:	77fb      	strb	r3, [r7, #31]
            break;
 8019d48:	e00c      	b.n	8019d64 <get_bits+0x68>
        case 4:
            bit_mask = 0xF;
 8019d4a:	230f      	movs	r3, #15
 8019d4c:	77fb      	strb	r3, [r7, #31]
            break;
 8019d4e:	e009      	b.n	8019d64 <get_bits+0x68>
        case 8:
            bit_mask = 0xFF;
 8019d50:	23ff      	movs	r3, #255	; 0xff
 8019d52:	77fb      	strb	r3, [r7, #31]
            break;
 8019d54:	e006      	b.n	8019d64 <get_bits+0x68>
        default:
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8019d56:	79fb      	ldrb	r3, [r7, #7]
 8019d58:	2201      	movs	r2, #1
 8019d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8019d5e:	b2db      	uxtb	r3, r3
 8019d60:	3b01      	subs	r3, #1
 8019d62:	77fb      	strb	r3, [r7, #31]
    }

    uint32_t byte_pos = bit_pos >> 3;
 8019d64:	68bb      	ldr	r3, [r7, #8]
 8019d66:	08db      	lsrs	r3, r3, #3
 8019d68:	61bb      	str	r3, [r7, #24]
    bit_pos = bit_pos & 0x7;
 8019d6a:	68bb      	ldr	r3, [r7, #8]
 8019d6c:	f003 0307 	and.w	r3, r3, #7
 8019d70:	60bb      	str	r3, [r7, #8]

    if(bit_pos + len >= 8) {
 8019d72:	79fa      	ldrb	r2, [r7, #7]
 8019d74:	68bb      	ldr	r3, [r7, #8]
 8019d76:	4413      	add	r3, r2
 8019d78:	2b07      	cmp	r3, #7
 8019d7a:	d91d      	bls.n	8019db8 <get_bits+0xbc>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8019d7c:	68fa      	ldr	r2, [r7, #12]
 8019d7e:	69bb      	ldr	r3, [r7, #24]
 8019d80:	4413      	add	r3, r2
 8019d82:	781b      	ldrb	r3, [r3, #0]
 8019d84:	b29b      	uxth	r3, r3
 8019d86:	021b      	lsls	r3, r3, #8
 8019d88:	b29a      	uxth	r2, r3
 8019d8a:	69bb      	ldr	r3, [r7, #24]
 8019d8c:	3301      	adds	r3, #1
 8019d8e:	68f9      	ldr	r1, [r7, #12]
 8019d90:	440b      	add	r3, r1
 8019d92:	781b      	ldrb	r3, [r3, #0]
 8019d94:	b29b      	uxth	r3, r3
 8019d96:	4413      	add	r3, r2
 8019d98:	82fb      	strh	r3, [r7, #22]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8019d9a:	8afa      	ldrh	r2, [r7, #22]
 8019d9c:	79fb      	ldrb	r3, [r7, #7]
 8019d9e:	4259      	negs	r1, r3
 8019da0:	68bb      	ldr	r3, [r7, #8]
 8019da2:	1acb      	subs	r3, r1, r3
 8019da4:	3310      	adds	r3, #16
 8019da6:	fa42 f303 	asr.w	r3, r2, r3
 8019daa:	b25a      	sxtb	r2, r3
 8019dac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019db0:	4013      	ands	r3, r2
 8019db2:	b25b      	sxtb	r3, r3
 8019db4:	b2db      	uxtb	r3, r3
 8019db6:	e011      	b.n	8019ddc <get_bits+0xe0>
    }
    else {
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8019db8:	68fa      	ldr	r2, [r7, #12]
 8019dba:	69bb      	ldr	r3, [r7, #24]
 8019dbc:	4413      	add	r3, r2
 8019dbe:	781b      	ldrb	r3, [r3, #0]
 8019dc0:	4619      	mov	r1, r3
 8019dc2:	79fb      	ldrb	r3, [r7, #7]
 8019dc4:	425a      	negs	r2, r3
 8019dc6:	68bb      	ldr	r3, [r7, #8]
 8019dc8:	1ad3      	subs	r3, r2, r3
 8019dca:	3308      	adds	r3, #8
 8019dcc:	fa41 f303 	asr.w	r3, r1, r3
 8019dd0:	b25a      	sxtb	r2, r3
 8019dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019dd6:	4013      	ands	r3, r2
 8019dd8:	b25b      	sxtb	r3, r3
 8019dda:	b2db      	uxtb	r3, r3
    }
}
 8019ddc:	4618      	mov	r0, r3
 8019dde:	3724      	adds	r7, #36	; 0x24
 8019de0:	46bd      	mov	sp, r7
 8019de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de6:	4770      	bx	lr

08019de8 <bits_write>:
 * @param val value to write
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static inline void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
 8019de8:	b480      	push	{r7}
 8019dea:	b087      	sub	sp, #28
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	60f8      	str	r0, [r7, #12]
 8019df0:	60b9      	str	r1, [r7, #8]
 8019df2:	4611      	mov	r1, r2
 8019df4:	461a      	mov	r2, r3
 8019df6:	460b      	mov	r3, r1
 8019df8:	71fb      	strb	r3, [r7, #7]
 8019dfa:	4613      	mov	r3, r2
 8019dfc:	71bb      	strb	r3, [r7, #6]
    if(len == 3) {
 8019dfe:	79bb      	ldrb	r3, [r7, #6]
 8019e00:	2b03      	cmp	r3, #3
 8019e02:	d12f      	bne.n	8019e64 <bits_write+0x7c>
        len = 4;
 8019e04:	2304      	movs	r3, #4
 8019e06:	71bb      	strb	r3, [r7, #6]
        switch(val) {
 8019e08:	79fb      	ldrb	r3, [r7, #7]
 8019e0a:	2b07      	cmp	r3, #7
 8019e0c:	d82a      	bhi.n	8019e64 <bits_write+0x7c>
 8019e0e:	a201      	add	r2, pc, #4	; (adr r2, 8019e14 <bits_write+0x2c>)
 8019e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e14:	08019e35 	.word	0x08019e35
 8019e18:	08019e3b 	.word	0x08019e3b
 8019e1c:	08019e41 	.word	0x08019e41
 8019e20:	08019e47 	.word	0x08019e47
 8019e24:	08019e4d 	.word	0x08019e4d
 8019e28:	08019e53 	.word	0x08019e53
 8019e2c:	08019e59 	.word	0x08019e59
 8019e30:	08019e5f 	.word	0x08019e5f
            case 0:
                val = 0;
 8019e34:	2300      	movs	r3, #0
 8019e36:	71fb      	strb	r3, [r7, #7]
                break;
 8019e38:	e014      	b.n	8019e64 <bits_write+0x7c>
            case 1:
                val = 2;
 8019e3a:	2302      	movs	r3, #2
 8019e3c:	71fb      	strb	r3, [r7, #7]
                break;
 8019e3e:	e011      	b.n	8019e64 <bits_write+0x7c>
            case 2:
                val = 4;
 8019e40:	2304      	movs	r3, #4
 8019e42:	71fb      	strb	r3, [r7, #7]
                break;
 8019e44:	e00e      	b.n	8019e64 <bits_write+0x7c>
            case 3:
                val = 6;
 8019e46:	2306      	movs	r3, #6
 8019e48:	71fb      	strb	r3, [r7, #7]
                break;
 8019e4a:	e00b      	b.n	8019e64 <bits_write+0x7c>
            case 4:
                val = 9;
 8019e4c:	2309      	movs	r3, #9
 8019e4e:	71fb      	strb	r3, [r7, #7]
                break;
 8019e50:	e008      	b.n	8019e64 <bits_write+0x7c>
            case 5:
                val = 11;
 8019e52:	230b      	movs	r3, #11
 8019e54:	71fb      	strb	r3, [r7, #7]
                break;
 8019e56:	e005      	b.n	8019e64 <bits_write+0x7c>
            case 6:
                val = 13;
 8019e58:	230d      	movs	r3, #13
 8019e5a:	71fb      	strb	r3, [r7, #7]
                break;
 8019e5c:	e002      	b.n	8019e64 <bits_write+0x7c>
            case 7:
                val = 15;
 8019e5e:	230f      	movs	r3, #15
 8019e60:	71fb      	strb	r3, [r7, #7]
                break;
 8019e62:	bf00      	nop
        }
    }

    uint16_t byte_pos = bit_pos >> 3;
 8019e64:	68bb      	ldr	r3, [r7, #8]
 8019e66:	08db      	lsrs	r3, r3, #3
 8019e68:	82fb      	strh	r3, [r7, #22]
    bit_pos = bit_pos & 0x7;
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	f003 0307 	and.w	r3, r3, #7
 8019e70:	60bb      	str	r3, [r7, #8]
    bit_pos = 8 - bit_pos - len;
 8019e72:	79bb      	ldrb	r3, [r7, #6]
 8019e74:	425a      	negs	r2, r3
 8019e76:	68bb      	ldr	r3, [r7, #8]
 8019e78:	1ad3      	subs	r3, r2, r3
 8019e7a:	3308      	adds	r3, #8
 8019e7c:	60bb      	str	r3, [r7, #8]

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8019e7e:	79bb      	ldrb	r3, [r7, #6]
 8019e80:	2201      	movs	r2, #1
 8019e82:	fa02 f303 	lsl.w	r3, r2, r3
 8019e86:	b2db      	uxtb	r3, r3
 8019e88:	3b01      	subs	r3, #1
 8019e8a:	757b      	strb	r3, [r7, #21]
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8019e8c:	8afb      	ldrh	r3, [r7, #22]
 8019e8e:	68fa      	ldr	r2, [r7, #12]
 8019e90:	4413      	add	r3, r2
 8019e92:	781b      	ldrb	r3, [r3, #0]
 8019e94:	b25a      	sxtb	r2, r3
 8019e96:	7d7b      	ldrb	r3, [r7, #21]
 8019e98:	43d9      	mvns	r1, r3
 8019e9a:	68bb      	ldr	r3, [r7, #8]
 8019e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8019ea0:	b25b      	sxtb	r3, r3
 8019ea2:	4013      	ands	r3, r2
 8019ea4:	b259      	sxtb	r1, r3
 8019ea6:	8afb      	ldrh	r3, [r7, #22]
 8019ea8:	68fa      	ldr	r2, [r7, #12]
 8019eaa:	4413      	add	r3, r2
 8019eac:	b2ca      	uxtb	r2, r1
 8019eae:	701a      	strb	r2, [r3, #0]
    out[byte_pos] |= (val << bit_pos);
 8019eb0:	8afb      	ldrh	r3, [r7, #22]
 8019eb2:	68fa      	ldr	r2, [r7, #12]
 8019eb4:	4413      	add	r3, r2
 8019eb6:	781b      	ldrb	r3, [r3, #0]
 8019eb8:	b25a      	sxtb	r2, r3
 8019eba:	79f9      	ldrb	r1, [r7, #7]
 8019ebc:	68bb      	ldr	r3, [r7, #8]
 8019ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8019ec2:	b25b      	sxtb	r3, r3
 8019ec4:	4313      	orrs	r3, r2
 8019ec6:	b259      	sxtb	r1, r3
 8019ec8:	8afb      	ldrh	r3, [r7, #22]
 8019eca:	68fa      	ldr	r2, [r7, #12]
 8019ecc:	4413      	add	r3, r2
 8019ece:	b2ca      	uxtb	r2, r1
 8019ed0:	701a      	strb	r2, [r3, #0]
}
 8019ed2:	bf00      	nop
 8019ed4:	371c      	adds	r7, #28
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019edc:	4770      	bx	lr
 8019ede:	bf00      	nop

08019ee0 <rle_init>:

static inline void rle_init(const uint8_t * in,  uint8_t bpp)
{
 8019ee0:	b480      	push	{r7}
 8019ee2:	b083      	sub	sp, #12
 8019ee4:	af00      	add	r7, sp, #0
 8019ee6:	6078      	str	r0, [r7, #4]
 8019ee8:	460b      	mov	r3, r1
 8019eea:	70fb      	strb	r3, [r7, #3]
    rle_in = in;
 8019eec:	4a0b      	ldr	r2, [pc, #44]	; (8019f1c <rle_init+0x3c>)
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	6013      	str	r3, [r2, #0]
    rle_bpp = bpp;
 8019ef2:	4a0b      	ldr	r2, [pc, #44]	; (8019f20 <rle_init+0x40>)
 8019ef4:	78fb      	ldrb	r3, [r7, #3]
 8019ef6:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
 8019ef8:	4b0a      	ldr	r3, [pc, #40]	; (8019f24 <rle_init+0x44>)
 8019efa:	2200      	movs	r2, #0
 8019efc:	701a      	strb	r2, [r3, #0]
    rle_rdp = 0;
 8019efe:	4b0a      	ldr	r3, [pc, #40]	; (8019f28 <rle_init+0x48>)
 8019f00:	2200      	movs	r2, #0
 8019f02:	601a      	str	r2, [r3, #0]
    rle_prev_v = 0;
 8019f04:	4b09      	ldr	r3, [pc, #36]	; (8019f2c <rle_init+0x4c>)
 8019f06:	2200      	movs	r2, #0
 8019f08:	701a      	strb	r2, [r3, #0]
    rle_cnt = 0;
 8019f0a:	4b09      	ldr	r3, [pc, #36]	; (8019f30 <rle_init+0x50>)
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	701a      	strb	r2, [r3, #0]
}
 8019f10:	bf00      	nop
 8019f12:	370c      	adds	r7, #12
 8019f14:	46bd      	mov	sp, r7
 8019f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f1a:	4770      	bx	lr
 8019f1c:	20018048 	.word	0x20018048
 8019f20:	2001804c 	.word	0x2001804c
 8019f24:	2001804f 	.word	0x2001804f
 8019f28:	20018044 	.word	0x20018044
 8019f2c:	2001804d 	.word	0x2001804d
 8019f30:	2001804e 	.word	0x2001804e

08019f34 <rle_next>:

static inline uint8_t rle_next(void)
{
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b082      	sub	sp, #8
 8019f38:	af00      	add	r7, sp, #0
    uint8_t v = 0;
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	71bb      	strb	r3, [r7, #6]
    uint8_t ret = 0;
 8019f3e:	2300      	movs	r3, #0
 8019f40:	71fb      	strb	r3, [r7, #7]

    if(rle_state == RLE_STATE_SINGLE) {
 8019f42:	4b64      	ldr	r3, [pc, #400]	; (801a0d4 <rle_next+0x1a0>)
 8019f44:	781b      	ldrb	r3, [r3, #0]
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d125      	bne.n	8019f96 <rle_next+0x62>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8019f4a:	4b63      	ldr	r3, [pc, #396]	; (801a0d8 <rle_next+0x1a4>)
 8019f4c:	6818      	ldr	r0, [r3, #0]
 8019f4e:	4b63      	ldr	r3, [pc, #396]	; (801a0dc <rle_next+0x1a8>)
 8019f50:	6819      	ldr	r1, [r3, #0]
 8019f52:	4b63      	ldr	r3, [pc, #396]	; (801a0e0 <rle_next+0x1ac>)
 8019f54:	781b      	ldrb	r3, [r3, #0]
 8019f56:	461a      	mov	r2, r3
 8019f58:	f7ff fed0 	bl	8019cfc <get_bits>
 8019f5c:	4603      	mov	r3, r0
 8019f5e:	71fb      	strb	r3, [r7, #7]
        if(rle_rdp != 0 && rle_prev_v == ret) {
 8019f60:	4b5e      	ldr	r3, [pc, #376]	; (801a0dc <rle_next+0x1a8>)
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d00a      	beq.n	8019f7e <rle_next+0x4a>
 8019f68:	4b5e      	ldr	r3, [pc, #376]	; (801a0e4 <rle_next+0x1b0>)
 8019f6a:	781b      	ldrb	r3, [r3, #0]
 8019f6c:	79fa      	ldrb	r2, [r7, #7]
 8019f6e:	429a      	cmp	r2, r3
 8019f70:	d105      	bne.n	8019f7e <rle_next+0x4a>
            rle_cnt = 0;
 8019f72:	4b5d      	ldr	r3, [pc, #372]	; (801a0e8 <rle_next+0x1b4>)
 8019f74:	2200      	movs	r2, #0
 8019f76:	701a      	strb	r2, [r3, #0]
            rle_state = RLE_STATE_REPEATE;
 8019f78:	4b56      	ldr	r3, [pc, #344]	; (801a0d4 <rle_next+0x1a0>)
 8019f7a:	2201      	movs	r2, #1
 8019f7c:	701a      	strb	r2, [r3, #0]
        }

        rle_prev_v = ret;
 8019f7e:	4a59      	ldr	r2, [pc, #356]	; (801a0e4 <rle_next+0x1b0>)
 8019f80:	79fb      	ldrb	r3, [r7, #7]
 8019f82:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
 8019f84:	4b56      	ldr	r3, [pc, #344]	; (801a0e0 <rle_next+0x1ac>)
 8019f86:	781b      	ldrb	r3, [r3, #0]
 8019f88:	461a      	mov	r2, r3
 8019f8a:	4b54      	ldr	r3, [pc, #336]	; (801a0dc <rle_next+0x1a8>)
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	4413      	add	r3, r2
 8019f90:	4a52      	ldr	r2, [pc, #328]	; (801a0dc <rle_next+0x1a8>)
 8019f92:	6013      	str	r3, [r2, #0]
 8019f94:	e099      	b.n	801a0ca <rle_next+0x196>
    }
    else if(rle_state == RLE_STATE_REPEATE) {
 8019f96:	4b4f      	ldr	r3, [pc, #316]	; (801a0d4 <rle_next+0x1a0>)
 8019f98:	781b      	ldrb	r3, [r3, #0]
 8019f9a:	2b01      	cmp	r3, #1
 8019f9c:	d16b      	bne.n	801a076 <rle_next+0x142>
        v = get_bits(rle_in, rle_rdp, 1);
 8019f9e:	4b4e      	ldr	r3, [pc, #312]	; (801a0d8 <rle_next+0x1a4>)
 8019fa0:	6818      	ldr	r0, [r3, #0]
 8019fa2:	4b4e      	ldr	r3, [pc, #312]	; (801a0dc <rle_next+0x1a8>)
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	2201      	movs	r2, #1
 8019fa8:	4619      	mov	r1, r3
 8019faa:	f7ff fea7 	bl	8019cfc <get_bits>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	71bb      	strb	r3, [r7, #6]
        rle_cnt++;
 8019fb2:	4b4d      	ldr	r3, [pc, #308]	; (801a0e8 <rle_next+0x1b4>)
 8019fb4:	781b      	ldrb	r3, [r3, #0]
 8019fb6:	3301      	adds	r3, #1
 8019fb8:	b2da      	uxtb	r2, r3
 8019fba:	4b4b      	ldr	r3, [pc, #300]	; (801a0e8 <rle_next+0x1b4>)
 8019fbc:	701a      	strb	r2, [r3, #0]
        rle_rdp += 1;
 8019fbe:	4b47      	ldr	r3, [pc, #284]	; (801a0dc <rle_next+0x1a8>)
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	3301      	adds	r3, #1
 8019fc4:	4a45      	ldr	r2, [pc, #276]	; (801a0dc <rle_next+0x1a8>)
 8019fc6:	6013      	str	r3, [r2, #0]
        if(v == 1) {
 8019fc8:	79bb      	ldrb	r3, [r7, #6]
 8019fca:	2b01      	cmp	r3, #1
 8019fcc:	d139      	bne.n	801a042 <rle_next+0x10e>
            ret = rle_prev_v;
 8019fce:	4b45      	ldr	r3, [pc, #276]	; (801a0e4 <rle_next+0x1b0>)
 8019fd0:	781b      	ldrb	r3, [r3, #0]
 8019fd2:	71fb      	strb	r3, [r7, #7]
            if(rle_cnt == 11) {
 8019fd4:	4b44      	ldr	r3, [pc, #272]	; (801a0e8 <rle_next+0x1b4>)
 8019fd6:	781b      	ldrb	r3, [r3, #0]
 8019fd8:	2b0b      	cmp	r3, #11
 8019fda:	d176      	bne.n	801a0ca <rle_next+0x196>
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 8019fdc:	4b3e      	ldr	r3, [pc, #248]	; (801a0d8 <rle_next+0x1a4>)
 8019fde:	6818      	ldr	r0, [r3, #0]
 8019fe0:	4b3e      	ldr	r3, [pc, #248]	; (801a0dc <rle_next+0x1a8>)
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	2206      	movs	r2, #6
 8019fe6:	4619      	mov	r1, r3
 8019fe8:	f7ff fe88 	bl	8019cfc <get_bits>
 8019fec:	4603      	mov	r3, r0
 8019fee:	461a      	mov	r2, r3
 8019ff0:	4b3d      	ldr	r3, [pc, #244]	; (801a0e8 <rle_next+0x1b4>)
 8019ff2:	701a      	strb	r2, [r3, #0]
                rle_rdp += 6;
 8019ff4:	4b39      	ldr	r3, [pc, #228]	; (801a0dc <rle_next+0x1a8>)
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	3306      	adds	r3, #6
 8019ffa:	4a38      	ldr	r2, [pc, #224]	; (801a0dc <rle_next+0x1a8>)
 8019ffc:	6013      	str	r3, [r2, #0]
                if(rle_cnt != 0) {
 8019ffe:	4b3a      	ldr	r3, [pc, #232]	; (801a0e8 <rle_next+0x1b4>)
 801a000:	781b      	ldrb	r3, [r3, #0]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d003      	beq.n	801a00e <rle_next+0xda>
                    rle_state = RLE_STATE_COUNTER;
 801a006:	4b33      	ldr	r3, [pc, #204]	; (801a0d4 <rle_next+0x1a0>)
 801a008:	2202      	movs	r2, #2
 801a00a:	701a      	strb	r2, [r3, #0]
 801a00c:	e05d      	b.n	801a0ca <rle_next+0x196>
                }
                else {
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
 801a00e:	4b32      	ldr	r3, [pc, #200]	; (801a0d8 <rle_next+0x1a4>)
 801a010:	6818      	ldr	r0, [r3, #0]
 801a012:	4b32      	ldr	r3, [pc, #200]	; (801a0dc <rle_next+0x1a8>)
 801a014:	6819      	ldr	r1, [r3, #0]
 801a016:	4b32      	ldr	r3, [pc, #200]	; (801a0e0 <rle_next+0x1ac>)
 801a018:	781b      	ldrb	r3, [r3, #0]
 801a01a:	461a      	mov	r2, r3
 801a01c:	f7ff fe6e 	bl	8019cfc <get_bits>
 801a020:	4603      	mov	r3, r0
 801a022:	71fb      	strb	r3, [r7, #7]
                    rle_prev_v = ret;
 801a024:	4a2f      	ldr	r2, [pc, #188]	; (801a0e4 <rle_next+0x1b0>)
 801a026:	79fb      	ldrb	r3, [r7, #7]
 801a028:	7013      	strb	r3, [r2, #0]
                    rle_rdp += rle_bpp;
 801a02a:	4b2d      	ldr	r3, [pc, #180]	; (801a0e0 <rle_next+0x1ac>)
 801a02c:	781b      	ldrb	r3, [r3, #0]
 801a02e:	461a      	mov	r2, r3
 801a030:	4b2a      	ldr	r3, [pc, #168]	; (801a0dc <rle_next+0x1a8>)
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	4413      	add	r3, r2
 801a036:	4a29      	ldr	r2, [pc, #164]	; (801a0dc <rle_next+0x1a8>)
 801a038:	6013      	str	r3, [r2, #0]
                    rle_state = RLE_STATE_SINGLE;
 801a03a:	4b26      	ldr	r3, [pc, #152]	; (801a0d4 <rle_next+0x1a0>)
 801a03c:	2200      	movs	r2, #0
 801a03e:	701a      	strb	r2, [r3, #0]
 801a040:	e043      	b.n	801a0ca <rle_next+0x196>
                }
            }
        }
        else {
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 801a042:	4b25      	ldr	r3, [pc, #148]	; (801a0d8 <rle_next+0x1a4>)
 801a044:	6818      	ldr	r0, [r3, #0]
 801a046:	4b25      	ldr	r3, [pc, #148]	; (801a0dc <rle_next+0x1a8>)
 801a048:	6819      	ldr	r1, [r3, #0]
 801a04a:	4b25      	ldr	r3, [pc, #148]	; (801a0e0 <rle_next+0x1ac>)
 801a04c:	781b      	ldrb	r3, [r3, #0]
 801a04e:	461a      	mov	r2, r3
 801a050:	f7ff fe54 	bl	8019cfc <get_bits>
 801a054:	4603      	mov	r3, r0
 801a056:	71fb      	strb	r3, [r7, #7]
            rle_prev_v = ret;
 801a058:	4a22      	ldr	r2, [pc, #136]	; (801a0e4 <rle_next+0x1b0>)
 801a05a:	79fb      	ldrb	r3, [r7, #7]
 801a05c:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
 801a05e:	4b20      	ldr	r3, [pc, #128]	; (801a0e0 <rle_next+0x1ac>)
 801a060:	781b      	ldrb	r3, [r3, #0]
 801a062:	461a      	mov	r2, r3
 801a064:	4b1d      	ldr	r3, [pc, #116]	; (801a0dc <rle_next+0x1a8>)
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	4413      	add	r3, r2
 801a06a:	4a1c      	ldr	r2, [pc, #112]	; (801a0dc <rle_next+0x1a8>)
 801a06c:	6013      	str	r3, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
 801a06e:	4b19      	ldr	r3, [pc, #100]	; (801a0d4 <rle_next+0x1a0>)
 801a070:	2200      	movs	r2, #0
 801a072:	701a      	strb	r2, [r3, #0]
 801a074:	e029      	b.n	801a0ca <rle_next+0x196>
        }

    }
    else if(rle_state == RLE_STATE_COUNTER) {
 801a076:	4b17      	ldr	r3, [pc, #92]	; (801a0d4 <rle_next+0x1a0>)
 801a078:	781b      	ldrb	r3, [r3, #0]
 801a07a:	2b02      	cmp	r3, #2
 801a07c:	d125      	bne.n	801a0ca <rle_next+0x196>
        ret = rle_prev_v;
 801a07e:	4b19      	ldr	r3, [pc, #100]	; (801a0e4 <rle_next+0x1b0>)
 801a080:	781b      	ldrb	r3, [r3, #0]
 801a082:	71fb      	strb	r3, [r7, #7]
        rle_cnt--;
 801a084:	4b18      	ldr	r3, [pc, #96]	; (801a0e8 <rle_next+0x1b4>)
 801a086:	781b      	ldrb	r3, [r3, #0]
 801a088:	3b01      	subs	r3, #1
 801a08a:	b2da      	uxtb	r2, r3
 801a08c:	4b16      	ldr	r3, [pc, #88]	; (801a0e8 <rle_next+0x1b4>)
 801a08e:	701a      	strb	r2, [r3, #0]
        if(rle_cnt == 0) {
 801a090:	4b15      	ldr	r3, [pc, #84]	; (801a0e8 <rle_next+0x1b4>)
 801a092:	781b      	ldrb	r3, [r3, #0]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d118      	bne.n	801a0ca <rle_next+0x196>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 801a098:	4b0f      	ldr	r3, [pc, #60]	; (801a0d8 <rle_next+0x1a4>)
 801a09a:	6818      	ldr	r0, [r3, #0]
 801a09c:	4b0f      	ldr	r3, [pc, #60]	; (801a0dc <rle_next+0x1a8>)
 801a09e:	6819      	ldr	r1, [r3, #0]
 801a0a0:	4b0f      	ldr	r3, [pc, #60]	; (801a0e0 <rle_next+0x1ac>)
 801a0a2:	781b      	ldrb	r3, [r3, #0]
 801a0a4:	461a      	mov	r2, r3
 801a0a6:	f7ff fe29 	bl	8019cfc <get_bits>
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	71fb      	strb	r3, [r7, #7]
            rle_prev_v = ret;
 801a0ae:	4a0d      	ldr	r2, [pc, #52]	; (801a0e4 <rle_next+0x1b0>)
 801a0b0:	79fb      	ldrb	r3, [r7, #7]
 801a0b2:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
 801a0b4:	4b0a      	ldr	r3, [pc, #40]	; (801a0e0 <rle_next+0x1ac>)
 801a0b6:	781b      	ldrb	r3, [r3, #0]
 801a0b8:	461a      	mov	r2, r3
 801a0ba:	4b08      	ldr	r3, [pc, #32]	; (801a0dc <rle_next+0x1a8>)
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	4413      	add	r3, r2
 801a0c0:	4a06      	ldr	r2, [pc, #24]	; (801a0dc <rle_next+0x1a8>)
 801a0c2:	6013      	str	r3, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
 801a0c4:	4b03      	ldr	r3, [pc, #12]	; (801a0d4 <rle_next+0x1a0>)
 801a0c6:	2200      	movs	r2, #0
 801a0c8:	701a      	strb	r2, [r3, #0]
        }
    }

    return ret;
 801a0ca:	79fb      	ldrb	r3, [r7, #7]
}
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	3708      	adds	r7, #8
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	bd80      	pop	{r7, pc}
 801a0d4:	2001804f 	.word	0x2001804f
 801a0d8:	20018048 	.word	0x20018048
 801a0dc:	20018044 	.word	0x20018044
 801a0e0:	2001804c 	.word	0x2001804c
 801a0e4:	2001804d 	.word	0x2001804d
 801a0e8:	2001804e 	.word	0x2001804e

0801a0ec <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 801a0ec:	b480      	push	{r7}
 801a0ee:	b083      	sub	sp, #12
 801a0f0:	af00      	add	r7, sp, #0
 801a0f2:	6078      	str	r0, [r7, #4]
 801a0f4:	6039      	str	r1, [r7, #0]
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	881b      	ldrh	r3, [r3, #0]
 801a0fa:	461a      	mov	r2, r3
 801a0fc:	683b      	ldr	r3, [r7, #0]
 801a0fe:	881b      	ldrh	r3, [r3, #0]
 801a100:	1ad3      	subs	r3, r2, r3
}
 801a102:	4618      	mov	r0, r3
 801a104:	370c      	adds	r7, #12
 801a106:	46bd      	mov	sp, r7
 801a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10c:	4770      	bx	lr

0801a10e <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 801a10e:	b580      	push	{r7, lr}
 801a110:	b082      	sub	sp, #8
 801a112:	af00      	add	r7, sp, #0
 801a114:	6078      	str	r0, [r7, #4]
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 801a116:	2134      	movs	r1, #52	; 0x34
 801a118:	6878      	ldr	r0, [r7, #4]
 801a11a:	f003 f822 	bl	801d162 <_lv_memset_00>

    driver->flush_cb         = NULL;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2200      	movs	r2, #0
 801a122:	60da      	str	r2, [r3, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a12a:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	f44f 7288 	mov.w	r2, #272	; 0x110
 801a132:	805a      	strh	r2, [r3, #2]
    driver->buffer           = NULL;
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	2200      	movs	r2, #0
 801a138:	605a      	str	r2, [r3, #4]
    driver->rotated          = 0;
 801a13a:	687a      	ldr	r2, [r7, #4]
 801a13c:	7a13      	ldrb	r3, [r2, #8]
 801a13e:	f36f 0341 	bfc	r3, #1, #1
 801a142:	7213      	strb	r3, [r2, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	2200      	movs	r2, #0
 801a148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	22ff      	movs	r2, #255	; 0xff
 801a150:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	2200      	movs	r2, #0
 801a158:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	22ff      	movs	r2, #255	; 0xff
 801a160:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    driver->dpi = LV_DPI;
 801a164:	687a      	ldr	r2, [r7, #4]
 801a166:	8913      	ldrh	r3, [r2, #8]
 801a168:	2182      	movs	r1, #130	; 0x82
 801a16a:	f361 038b 	bfi	r3, r1, #2, #10
 801a16e:	8113      	strh	r3, [r2, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 801a170:	687a      	ldr	r2, [r7, #4]
 801a172:	7a13      	ldrb	r3, [r2, #8]
 801a174:	f043 0301 	orr.w	r3, r3, #1
 801a178:	7213      	strb	r3, [r2, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	2200      	movs	r2, #0
 801a17e:	629a      	str	r2, [r3, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	2200      	movs	r2, #0
 801a184:	62da      	str	r2, [r3, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	2200      	movs	r2, #0
 801a18a:	615a      	str	r2, [r3, #20]
}
 801a18c:	bf00      	nop
 801a18e:	3708      	adds	r7, #8
 801a190:	46bd      	mov	sp, r7
 801a192:	bd80      	pop	{r7, pc}

0801a194 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801a194:	b580      	push	{r7, lr}
 801a196:	b084      	sub	sp, #16
 801a198:	af00      	add	r7, sp, #0
 801a19a:	60f8      	str	r0, [r7, #12]
 801a19c:	60b9      	str	r1, [r7, #8]
 801a19e:	607a      	str	r2, [r7, #4]
 801a1a0:	603b      	str	r3, [r7, #0]
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
 801a1a2:	2124      	movs	r1, #36	; 0x24
 801a1a4:	68f8      	ldr	r0, [r7, #12]
 801a1a6:	f002 ffdc 	bl	801d162 <_lv_memset_00>

    disp_buf->buf1    = buf1;
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	68ba      	ldr	r2, [r7, #8]
 801a1ae:	601a      	str	r2, [r3, #0]
    disp_buf->buf2    = buf2;
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	687a      	ldr	r2, [r7, #4]
 801a1b4:	605a      	str	r2, [r3, #4]
    disp_buf->buf_act = disp_buf->buf1;
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	681a      	ldr	r2, [r3, #0]
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	609a      	str	r2, [r3, #8]
    disp_buf->size    = size_in_px_cnt;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	683a      	ldr	r2, [r7, #0]
 801a1c2:	60da      	str	r2, [r3, #12]
}
 801a1c4:	bf00      	nop
 801a1c6:	3710      	adds	r7, #16
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	bd80      	pop	{r7, pc}

0801a1cc <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 801a1cc:	b590      	push	{r4, r7, lr}
 801a1ce:	b085      	sub	sp, #20
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801a1d4:	4864      	ldr	r0, [pc, #400]	; (801a368 <lv_disp_drv_register+0x19c>)
 801a1d6:	f001 ff26 	bl	801c026 <_lv_ll_ins_head>
 801a1da:	60f8      	str	r0, [r7, #12]
    if(!disp) {
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d113      	bne.n	801a20a <lv_disp_drv_register+0x3e>
        LV_ASSERT_MEM(disp);
 801a1e2:	68f8      	ldr	r0, [r7, #12]
 801a1e4:	f001 fcc6 	bl	801bb74 <lv_debug_check_null>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	f083 0301 	eor.w	r3, r3, #1
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d008      	beq.n	801a206 <lv_disp_drv_register+0x3a>
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	f04f 0400 	mov.w	r4, #0
 801a1fa:	461a      	mov	r2, r3
 801a1fc:	4623      	mov	r3, r4
 801a1fe:	485b      	ldr	r0, [pc, #364]	; (801a36c <lv_disp_drv_register+0x1a0>)
 801a200:	f001 fcc8 	bl	801bb94 <lv_debug_log_error>
 801a204:	e7fe      	b.n	801a204 <lv_disp_drv_register+0x38>
        return NULL;
 801a206:	2300      	movs	r3, #0
 801a208:	e0aa      	b.n	801a360 <lv_disp_drv_register+0x194>
    }

    _lv_memset_00(disp, sizeof(lv_disp_t));
 801a20a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 801a20e:	68f8      	ldr	r0, [r7, #12]
 801a210:	f002 ffa7 	bl	801d162 <_lv_memset_00>
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	2234      	movs	r2, #52	; 0x34
 801a218:	6879      	ldr	r1, [r7, #4]
 801a21a:	4618      	mov	r0, r3
 801a21c:	f002 fcfc 	bl	801cc18 <_lv_memcpy>

    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	3338      	adds	r3, #56	; 0x38
 801a224:	214c      	movs	r1, #76	; 0x4c
 801a226:	4618      	mov	r0, r3
 801a228:	f001 fee4 	bl	801bff4 <_lv_ll_init>
    disp->last_activity_time = 0;
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	2200      	movs	r2, #0
 801a230:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    if(disp_def == NULL) disp_def = disp;
 801a234:	4b4e      	ldr	r3, [pc, #312]	; (801a370 <lv_disp_drv_register+0x1a4>)
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d102      	bne.n	801a242 <lv_disp_drv_register+0x76>
 801a23c:	4a4c      	ldr	r2, [pc, #304]	; (801a370 <lv_disp_drv_register+0x1a4>)
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	6013      	str	r3, [r2, #0]

    lv_disp_t * disp_def_tmp = disp_def;
 801a242:	4b4b      	ldr	r3, [pc, #300]	; (801a370 <lv_disp_drv_register+0x1a4>)
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	60bb      	str	r3, [r7, #8]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 801a248:	4a49      	ldr	r2, [pc, #292]	; (801a370 <lv_disp_drv_register+0x1a4>)
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	6013      	str	r3, [r2, #0]
                                        new display*/
    /*Create a refresh task*/
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	2203      	movs	r2, #3
 801a252:	211e      	movs	r1, #30
 801a254:	4847      	ldr	r0, [pc, #284]	; (801a374 <lv_disp_drv_register+0x1a8>)
 801a256:	f003 fa6b 	bl	801d730 <lv_task_create>
 801a25a:	4602      	mov	r2, r0
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	635a      	str	r2, [r3, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a264:	4618      	mov	r0, r3
 801a266:	f001 fc85 	bl	801bb74 <lv_debug_check_null>
 801a26a:	4603      	mov	r3, r0
 801a26c:	f083 0301 	eor.w	r3, r3, #1
 801a270:	b2db      	uxtb	r3, r3
 801a272:	2b00      	cmp	r3, #0
 801a274:	d009      	beq.n	801a28a <lv_disp_drv_register+0xbe>
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a27a:	f04f 0400 	mov.w	r4, #0
 801a27e:	461a      	mov	r2, r3
 801a280:	4623      	mov	r3, r4
 801a282:	483a      	ldr	r0, [pc, #232]	; (801a36c <lv_disp_drv_register+0x1a0>)
 801a284:	f001 fc86 	bl	801bb94 <lv_debug_log_error>
 801a288:	e7fe      	b.n	801a288 <lv_disp_drv_register+0xbc>
    if(disp->refr_task == NULL) return NULL;
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d101      	bne.n	801a296 <lv_disp_drv_register+0xca>
 801a292:	2300      	movs	r3, #0
 801a294:	e064      	b.n	801a360 <lv_disp_drv_register+0x194>

    disp->inv_p = 0;
 801a296:	68fa      	ldr	r2, [r7, #12]
 801a298:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 801a29c:	f36f 0309 	bfc	r3, #0, #10
 801a2a0:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
    disp->last_activity_time = 0;
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    disp->bg_color = LV_COLOR_WHITE;
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	22ff      	movs	r2, #255	; 0xff
 801a2b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	22ff      	movs	r2, #255	; 0xff
 801a2b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	22ff      	movs	r2, #255	; 0xff
 801a2c0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	22ff      	movs	r2, #255	; 0xff
 801a2c8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    disp->bg_img = NULL;
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	2200      	movs	r2, #0
 801a2d0:	661a      	str	r2, [r3, #96]	; 0x60
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	22ff      	movs	r2, #255	; 0xff
 801a2d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
#endif

    disp->prev_scr  = NULL;
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	2200      	movs	r2, #0
 801a2de:	649a      	str	r2, [r3, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 801a2e0:	2100      	movs	r1, #0
 801a2e2:	2000      	movs	r0, #0
 801a2e4:	f7ea ff82 	bl	80051ec <lv_obj_create>
 801a2e8:	4602      	mov	r2, r0
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	645a      	str	r2, [r3, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 801a2ee:	2100      	movs	r1, #0
 801a2f0:	2000      	movs	r0, #0
 801a2f2:	f7ea ff7b 	bl	80051ec <lv_obj_create>
 801a2f6:	4602      	mov	r2, r0
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	651a      	str	r2, [r3, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 801a2fc:	2100      	movs	r1, #0
 801a2fe:	2000      	movs	r0, #0
 801a300:	f7ea ff74 	bl	80051ec <lv_obj_create>
 801a304:	4602      	mov	r2, r0
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	655a      	str	r2, [r3, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 801a30a:	68fb      	ldr	r3, [r7, #12]
 801a30c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a30e:	2100      	movs	r1, #0
 801a310:	4618      	mov	r0, r3
 801a312:	f7eb fdde 	bl	8005ed2 <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a31a:	2100      	movs	r1, #0
 801a31c:	4618      	mov	r0, r3
 801a31e:	f7eb fdd8 	bl	8005ed2 <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a326:	2100      	movs	r1, #0
 801a328:	4618      	mov	r0, r3
 801a32a:	f7eb fee5 	bl	80060f8 <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a332:	2100      	movs	r1, #0
 801a334:	4618      	mov	r0, r3
 801a336:	f7eb fedf 	bl	80060f8 <lv_obj_set_click>

    lv_obj_invalidate(disp->act_scr);
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a33e:	4618      	mov	r0, r3
 801a340:	f7eb fa86 	bl	8005850 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 801a344:	4a0a      	ldr	r2, [pc, #40]	; (801a370 <lv_disp_drv_register+0x1a4>)
 801a346:	68bb      	ldr	r3, [r7, #8]
 801a348:	6013      	str	r3, [r2, #0]

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a34e:	4618      	mov	r0, r3
 801a350:	f003 fb06 	bl	801d960 <lv_task_ready>

    /*Can't handle this case later so add an error*/
    if(lv_disp_is_true_double_buf(disp) && disp->driver.set_px_cb) {
 801a354:	68f8      	ldr	r0, [r7, #12]
 801a356:	f000 f940 	bl	801a5da <lv_disp_is_true_double_buf>
 801a35a:	4603      	mov	r3, r0
 801a35c:	2b00      	cmp	r3, #0
        LV_LOG_ERROR("Can't handle 2 screen sized buffers with set_px_cb. Display will not be refreshed.");
    }

    return disp;
 801a35e:	68fb      	ldr	r3, [r7, #12]
}
 801a360:	4618      	mov	r0, r3
 801a362:	3714      	adds	r7, #20
 801a364:	46bd      	mov	sp, r7
 801a366:	bd90      	pop	{r4, r7, pc}
 801a368:	200217a0 	.word	0x200217a0
 801a36c:	0802d144 	.word	0x0802d144
 801a370:	20018050 	.word	0x20018050
 801a374:	0800a349 	.word	0x0800a349

0801a378 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 801a378:	b480      	push	{r7}
 801a37a:	af00      	add	r7, sp, #0
    return disp_def;
 801a37c:	4b03      	ldr	r3, [pc, #12]	; (801a38c <lv_disp_get_default+0x14>)
 801a37e:	681b      	ldr	r3, [r3, #0]
}
 801a380:	4618      	mov	r0, r3
 801a382:	46bd      	mov	sp, r7
 801a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a388:	4770      	bx	lr
 801a38a:	bf00      	nop
 801a38c:	20018050 	.word	0x20018050

0801a390 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 801a390:	b580      	push	{r7, lr}
 801a392:	b082      	sub	sp, #8
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d102      	bne.n	801a3a4 <lv_disp_get_hor_res+0x14>
 801a39e:	f7ff ffeb 	bl	801a378 <lv_disp_get_default>
 801a3a2:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d102      	bne.n	801a3b0 <lv_disp_get_hor_res+0x20>
        return LV_HOR_RES_MAX;
 801a3aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a3ae:	e00d      	b.n	801a3cc <lv_disp_get_hor_res+0x3c>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	7a1b      	ldrb	r3, [r3, #8]
 801a3b4:	f003 0302 	and.w	r3, r3, #2
 801a3b8:	b2db      	uxtb	r3, r3
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d103      	bne.n	801a3c6 <lv_disp_get_hor_res+0x36>
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3c4:	e002      	b.n	801a3cc <lv_disp_get_hor_res+0x3c>
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	3708      	adds	r7, #8
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	bd80      	pop	{r7, pc}

0801a3d4 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 801a3d4:	b580      	push	{r7, lr}
 801a3d6:	b082      	sub	sp, #8
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d102      	bne.n	801a3e8 <lv_disp_get_ver_res+0x14>
 801a3e2:	f7ff ffc9 	bl	801a378 <lv_disp_get_default>
 801a3e6:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d102      	bne.n	801a3f4 <lv_disp_get_ver_res+0x20>
        return LV_VER_RES_MAX;
 801a3ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 801a3f2:	e00d      	b.n	801a410 <lv_disp_get_ver_res+0x3c>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	7a1b      	ldrb	r3, [r3, #8]
 801a3f8:	f003 0302 	and.w	r3, r3, #2
 801a3fc:	b2db      	uxtb	r3, r3
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d103      	bne.n	801a40a <lv_disp_get_ver_res+0x36>
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a408:	e002      	b.n	801a410 <lv_disp_get_ver_res+0x3c>
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 801a410:	4618      	mov	r0, r3
 801a412:	3708      	adds	r7, #8
 801a414:	46bd      	mov	sp, r7
 801a416:	bd80      	pop	{r7, pc}

0801a418 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
 801a418:	b580      	push	{r7, lr}
 801a41a:	b082      	sub	sp, #8
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	2b00      	cmp	r3, #0
 801a424:	d102      	bne.n	801a42c <lv_disp_get_dpi+0x14>
 801a426:	f7ff ffa7 	bl	801a378 <lv_disp_get_default>
 801a42a:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d101      	bne.n	801a436 <lv_disp_get_dpi+0x1e>
 801a432:	2382      	movs	r3, #130	; 0x82
 801a434:	e005      	b.n	801a442 <lv_disp_get_dpi+0x2a>
    return disp->driver.dpi;
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	891b      	ldrh	r3, [r3, #8]
 801a43a:	f3c3 0389 	ubfx	r3, r3, #2, #10
 801a43e:	b29b      	uxth	r3, r3
 801a440:	b21b      	sxth	r3, r3
}
 801a442:	4618      	mov	r0, r3
 801a444:	3708      	adds	r7, #8
 801a446:	46bd      	mov	sp, r7
 801a448:	bd80      	pop	{r7, pc}

0801a44a <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
 801a44a:	b580      	push	{r7, lr}
 801a44c:	b084      	sub	sp, #16
 801a44e:	af00      	add	r7, sp, #0
 801a450:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d102      	bne.n	801a45e <lv_disp_get_size_category+0x14>
 801a458:	f7ff ff8e 	bl	801a378 <lv_disp_get_default>
 801a45c:	6078      	str	r0, [r7, #4]

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d103      	bne.n	801a46c <lv_disp_get_size_category+0x22>
 801a464:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a468:	60fb      	str	r3, [r7, #12]
 801a46a:	e004      	b.n	801a476 <lv_disp_get_size_category+0x2c>
    else w = lv_disp_get_hor_res(disp);
 801a46c:	6878      	ldr	r0, [r7, #4]
 801a46e:	f7ff ff8f 	bl	801a390 <lv_disp_get_hor_res>
 801a472:	4603      	mov	r3, r0
 801a474:	60fb      	str	r3, [r7, #12]

    uint32_t dpi = lv_disp_get_dpi(disp);
 801a476:	6878      	ldr	r0, [r7, #4]
 801a478:	f7ff ffce 	bl	801a418 <lv_disp_get_dpi>
 801a47c:	4603      	mov	r3, r0
 801a47e:	60bb      	str	r3, [r7, #8]

    w = w * 10 / dpi;
 801a480:	68fa      	ldr	r2, [r7, #12]
 801a482:	4613      	mov	r3, r2
 801a484:	009b      	lsls	r3, r3, #2
 801a486:	4413      	add	r3, r2
 801a488:	005b      	lsls	r3, r3, #1
 801a48a:	461a      	mov	r2, r3
 801a48c:	68bb      	ldr	r3, [r7, #8]
 801a48e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a492:	60fb      	str	r3, [r7, #12]

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	2b1d      	cmp	r3, #29
 801a498:	d801      	bhi.n	801a49e <lv_disp_get_size_category+0x54>
 801a49a:	2300      	movs	r3, #0
 801a49c:	e00a      	b.n	801a4b4 <lv_disp_get_size_category+0x6a>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
 801a49e:	68fb      	ldr	r3, [r7, #12]
 801a4a0:	2b31      	cmp	r3, #49	; 0x31
 801a4a2:	d801      	bhi.n	801a4a8 <lv_disp_get_size_category+0x5e>
 801a4a4:	2301      	movs	r3, #1
 801a4a6:	e005      	b.n	801a4b4 <lv_disp_get_size_category+0x6a>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	2b45      	cmp	r3, #69	; 0x45
 801a4ac:	d801      	bhi.n	801a4b2 <lv_disp_get_size_category+0x68>
 801a4ae:	2302      	movs	r3, #2
 801a4b0:	e000      	b.n	801a4b4 <lv_disp_get_size_category+0x6a>
    else return LV_DISP_SIZE_EXTRA_LARGE;
 801a4b2:	2303      	movs	r3, #3
}
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	3710      	adds	r7, #16
 801a4b8:	46bd      	mov	sp, r7
 801a4ba:	bd80      	pop	{r7, pc}

0801a4bc <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 801a4bc:	b480      	push	{r7}
 801a4be:	b083      	sub	sp, #12
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	6078      	str	r0, [r7, #4]
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	685b      	ldr	r3, [r3, #4]
 801a4c8:	2200      	movs	r2, #0
 801a4ca:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	685b      	ldr	r3, [r3, #4]
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	61da      	str	r2, [r3, #28]
}
 801a4d4:	bf00      	nop
 801a4d6:	370c      	adds	r7, #12
 801a4d8:	46bd      	mov	sp, r7
 801a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4de:	4770      	bx	lr

0801a4e0 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
 801a4e0:	b580      	push	{r7, lr}
 801a4e2:	b082      	sub	sp, #8
 801a4e4:	af00      	add	r7, sp, #0
 801a4e6:	6078      	str	r0, [r7, #4]
    if(disp == NULL)
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d104      	bne.n	801a4f8 <lv_disp_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 801a4ee:	4807      	ldr	r0, [pc, #28]	; (801a50c <lv_disp_get_next+0x2c>)
 801a4f0:	f001 fef6 	bl	801c2e0 <_lv_ll_get_head>
 801a4f4:	4603      	mov	r3, r0
 801a4f6:	e004      	b.n	801a502 <lv_disp_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 801a4f8:	6879      	ldr	r1, [r7, #4]
 801a4fa:	4804      	ldr	r0, [pc, #16]	; (801a50c <lv_disp_get_next+0x2c>)
 801a4fc:	f001 ff16 	bl	801c32c <_lv_ll_get_next>
 801a500:	4603      	mov	r3, r0
}
 801a502:	4618      	mov	r0, r3
 801a504:	3708      	adds	r7, #8
 801a506:	46bd      	mov	sp, r7
 801a508:	bd80      	pop	{r7, pc}
 801a50a:	bf00      	nop
 801a50c:	200217a0 	.word	0x200217a0

0801a510 <lv_disp_get_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
 801a510:	b480      	push	{r7}
 801a512:	b083      	sub	sp, #12
 801a514:	af00      	add	r7, sp, #0
 801a516:	6078      	str	r0, [r7, #4]
    return disp->driver.buffer;
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	685b      	ldr	r3, [r3, #4]
}
 801a51c:	4618      	mov	r0, r3
 801a51e:	370c      	adds	r7, #12
 801a520:	46bd      	mov	sp, r7
 801a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a526:	4770      	bx	lr

0801a528 <lv_disp_get_inv_buf_size>:
/**
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
 801a528:	b480      	push	{r7}
 801a52a:	b083      	sub	sp, #12
 801a52c:	af00      	add	r7, sp, #0
 801a52e:	6078      	str	r0, [r7, #4]
    return disp->inv_p;
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 801a536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a53a:	b29b      	uxth	r3, r3
}
 801a53c:	4618      	mov	r0, r3
 801a53e:	370c      	adds	r7, #12
 801a540:	46bd      	mov	sp, r7
 801a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a546:	4770      	bx	lr

0801a548 <_lv_disp_pop_from_inv_buf>:
/**
 * Pop (delete) the last 'num' invalidated areas from the buffer
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{
 801a548:	b480      	push	{r7}
 801a54a:	b083      	sub	sp, #12
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	6078      	str	r0, [r7, #4]
 801a550:	460b      	mov	r3, r1
 801a552:	807b      	strh	r3, [r7, #2]

    if(disp->inv_p < num)
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 801a55a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a55e:	b29b      	uxth	r3, r3
 801a560:	461a      	mov	r2, r3
 801a562:	887b      	ldrh	r3, [r7, #2]
 801a564:	429a      	cmp	r2, r3
 801a566:	da07      	bge.n	801a578 <_lv_disp_pop_from_inv_buf+0x30>
        disp->inv_p = 0;
 801a568:	687a      	ldr	r2, [r7, #4]
 801a56a:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 801a56e:	f36f 0309 	bfc	r3, #0, #10
 801a572:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
    else
        disp->inv_p -= num;
}
 801a576:	e013      	b.n	801a5a0 <_lv_disp_pop_from_inv_buf+0x58>
        disp->inv_p -= num;
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 801a57e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a582:	b29b      	uxth	r3, r3
 801a584:	461a      	mov	r2, r3
 801a586:	887b      	ldrh	r3, [r7, #2]
 801a588:	1ad3      	subs	r3, r2, r3
 801a58a:	b29b      	uxth	r3, r3
 801a58c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a590:	b299      	uxth	r1, r3
 801a592:	687a      	ldr	r2, [r7, #4]
 801a594:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 801a598:	f361 0309 	bfi	r3, r1, #0, #10
 801a59c:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
}
 801a5a0:	bf00      	nop
 801a5a2:	370c      	adds	r7, #12
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5aa:	4770      	bx	lr

0801a5ac <lv_disp_is_double_buf>:
 * Check the driver configuration if it's double buffered (both `buf1` and `buf2` are set)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
 801a5ac:	b480      	push	{r7}
 801a5ae:	b083      	sub	sp, #12
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	6078      	str	r0, [r7, #4]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	685b      	ldr	r3, [r3, #4]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d006      	beq.n	801a5cc <lv_disp_is_double_buf+0x20>
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	685b      	ldr	r3, [r3, #4]
 801a5c2:	685b      	ldr	r3, [r3, #4]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d001      	beq.n	801a5cc <lv_disp_is_double_buf+0x20>
        return true;
 801a5c8:	2301      	movs	r3, #1
 801a5ca:	e000      	b.n	801a5ce <lv_disp_is_double_buf+0x22>
    else
        return false;
 801a5cc:	2300      	movs	r3, #0
}
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	370c      	adds	r7, #12
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d8:	4770      	bx	lr

0801a5da <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 801a5da:	b580      	push	{r7, lr}
 801a5dc:	b084      	sub	sp, #16
 801a5de:	af00      	add	r7, sp, #0
 801a5e0:	6078      	str	r0, [r7, #4]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5e8:	461a      	mov	r2, r3
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a5f0:	fb03 f302 	mul.w	r3, r3, r2
 801a5f4:	60fb      	str	r3, [r7, #12]

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 801a5f6:	6878      	ldr	r0, [r7, #4]
 801a5f8:	f7ff ffd8 	bl	801a5ac <lv_disp_is_double_buf>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d007      	beq.n	801a612 <lv_disp_is_true_double_buf+0x38>
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	685b      	ldr	r3, [r3, #4]
 801a606:	68db      	ldr	r3, [r3, #12]
 801a608:	68fa      	ldr	r2, [r7, #12]
 801a60a:	429a      	cmp	r2, r3
 801a60c:	d101      	bne.n	801a612 <lv_disp_is_true_double_buf+0x38>
        return true;
 801a60e:	2301      	movs	r3, #1
 801a610:	e000      	b.n	801a614 <lv_disp_is_true_double_buf+0x3a>
    }
    else {
        return false;
 801a612:	2300      	movs	r3, #0
    }
}
 801a614:	4618      	mov	r0, r3
 801a616:	3710      	adds	r7, #16
 801a618:	46bd      	mov	sp, r7
 801a61a:	bd80      	pop	{r7, pc}

0801a61c <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 801a61c:	b580      	push	{r7, lr}
 801a61e:	b082      	sub	sp, #8
 801a620:	af00      	add	r7, sp, #0
 801a622:	6078      	str	r0, [r7, #4]
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
 801a624:	211c      	movs	r1, #28
 801a626:	6878      	ldr	r0, [r7, #4]
 801a628:	f002 fd9b 	bl	801d162 <_lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	2200      	movs	r2, #0
 801a630:	701a      	strb	r2, [r3, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	220a      	movs	r2, #10
 801a636:	751a      	strb	r2, [r3, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	220a      	movs	r2, #10
 801a63c:	755a      	strb	r2, [r3, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a644:	831a      	strh	r2, [r3, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	2264      	movs	r2, #100	; 0x64
 801a64a:	835a      	strh	r2, [r3, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	2232      	movs	r2, #50	; 0x32
 801a650:	75da      	strb	r2, [r3, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	2203      	movs	r2, #3
 801a656:	759a      	strb	r2, [r3, #22]
}
 801a658:	bf00      	nop
 801a65a:	3708      	adds	r7, #8
 801a65c:	46bd      	mov	sp, r7
 801a65e:	bd80      	pop	{r7, pc}

0801a660 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 801a660:	b590      	push	{r4, r7, lr}
 801a662:	b085      	sub	sp, #20
 801a664:	af00      	add	r7, sp, #0
 801a666:	6078      	str	r0, [r7, #4]

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	68db      	ldr	r3, [r3, #12]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d104      	bne.n	801a67a <lv_indev_drv_register+0x1a>
 801a670:	f7ff fe82 	bl	801a378 <lv_disp_get_default>
 801a674:	4602      	mov	r2, r0
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	60da      	str	r2, [r3, #12]

    if(driver->disp == NULL) {
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	68db      	ldr	r3, [r3, #12]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d101      	bne.n	801a686 <lv_indev_drv_register+0x26>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
 801a682:	2300      	movs	r3, #0
 801a684:	e03e      	b.n	801a704 <lv_indev_drv_register+0xa4>
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 801a686:	4821      	ldr	r0, [pc, #132]	; (801a70c <lv_indev_drv_register+0xac>)
 801a688:	f001 fccd 	bl	801c026 <_lv_ll_ins_head>
 801a68c:	60f8      	str	r0, [r7, #12]
    if(!indev) {
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d113      	bne.n	801a6bc <lv_indev_drv_register+0x5c>
        LV_ASSERT_MEM(indev);
 801a694:	68f8      	ldr	r0, [r7, #12]
 801a696:	f001 fa6d 	bl	801bb74 <lv_debug_check_null>
 801a69a:	4603      	mov	r3, r0
 801a69c:	f083 0301 	eor.w	r3, r3, #1
 801a6a0:	b2db      	uxtb	r3, r3
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d008      	beq.n	801a6b8 <lv_indev_drv_register+0x58>
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	f04f 0400 	mov.w	r4, #0
 801a6ac:	461a      	mov	r2, r3
 801a6ae:	4623      	mov	r3, r4
 801a6b0:	4817      	ldr	r0, [pc, #92]	; (801a710 <lv_indev_drv_register+0xb0>)
 801a6b2:	f001 fa6f 	bl	801bb94 <lv_debug_log_error>
 801a6b6:	e7fe      	b.n	801a6b6 <lv_indev_drv_register+0x56>
        return NULL;
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	e023      	b.n	801a704 <lv_indev_drv_register+0xa4>
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
 801a6bc:	2160      	movs	r1, #96	; 0x60
 801a6be:	68f8      	ldr	r0, [r7, #12]
 801a6c0:	f002 fd4f 	bl	801d162 <_lv_memset_00>
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	221c      	movs	r2, #28
 801a6c8:	6879      	ldr	r1, [r7, #4]
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	f002 faa4 	bl	801cc18 <_lv_memcpy>

    indev->proc.reset_query = 1;
 801a6d0:	68fa      	ldr	r2, [r7, #12]
 801a6d2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 801a6d6:	f043 0302 	orr.w	r3, r3, #2
 801a6da:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    indev->cursor           = NULL;
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	2200      	movs	r2, #0
 801a6e2:	655a      	str	r2, [r3, #84]	; 0x54
    indev->group            = NULL;
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	2200      	movs	r2, #0
 801a6e8:	659a      	str	r2, [r3, #88]	; 0x58
    indev->btn_points       = NULL;
 801a6ea:	68fb      	ldr	r3, [r7, #12]
 801a6ec:	2200      	movs	r2, #0
 801a6ee:	65da      	str	r2, [r3, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	2204      	movs	r2, #4
 801a6f4:	211e      	movs	r1, #30
 801a6f6:	4807      	ldr	r0, [pc, #28]	; (801a714 <lv_indev_drv_register+0xb4>)
 801a6f8:	f003 f81a 	bl	801d730 <lv_task_create>
 801a6fc:	4602      	mov	r2, r0
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	611a      	str	r2, [r3, #16]

    return indev;
 801a702:	68fb      	ldr	r3, [r7, #12]
}
 801a704:	4618      	mov	r0, r3
 801a706:	3714      	adds	r7, #20
 801a708:	46bd      	mov	sp, r7
 801a70a:	bd90      	pop	{r4, r7, pc}
 801a70c:	20021794 	.word	0x20021794
 801a710:	0802d154 	.word	0x0802d154
 801a714:	08001e41 	.word	0x08001e41

0801a718 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	b082      	sub	sp, #8
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	2b00      	cmp	r3, #0
 801a724:	d104      	bne.n	801a730 <lv_indev_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801a726:	4807      	ldr	r0, [pc, #28]	; (801a744 <lv_indev_get_next+0x2c>)
 801a728:	f001 fdda 	bl	801c2e0 <_lv_ll_get_head>
 801a72c:	4603      	mov	r3, r0
 801a72e:	e004      	b.n	801a73a <lv_indev_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801a730:	6879      	ldr	r1, [r7, #4]
 801a732:	4804      	ldr	r0, [pc, #16]	; (801a744 <lv_indev_get_next+0x2c>)
 801a734:	f001 fdfa 	bl	801c32c <_lv_ll_get_next>
 801a738:	4603      	mov	r3, r0
}
 801a73a:	4618      	mov	r0, r3
 801a73c:	3708      	adds	r7, #8
 801a73e:	46bd      	mov	sp, r7
 801a740:	bd80      	pop	{r7, pc}
 801a742:	bf00      	nop
 801a744:	20021794 	.word	0x20021794

0801a748 <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 801a748:	b580      	push	{r7, lr}
 801a74a:	b084      	sub	sp, #16
 801a74c:	af00      	add	r7, sp, #0
 801a74e:	6078      	str	r0, [r7, #4]
 801a750:	6039      	str	r1, [r7, #0]
    bool cont = false;
 801a752:	2300      	movs	r3, #0
 801a754:	73fb      	strb	r3, [r7, #15]

    _lv_memset_00(data, sizeof(lv_indev_data_t));
 801a756:	2110      	movs	r1, #16
 801a758:	6838      	ldr	r0, [r7, #0]
 801a75a:	f002 fd02 	bl	801d162 <_lv_memset_00>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	781b      	ldrb	r3, [r3, #0]
 801a762:	2b01      	cmp	r3, #1
 801a764:	d10a      	bne.n	801a77c <_lv_indev_read+0x34>
        data->point.x = indev->proc.types.pointer.act_point.x;
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 801a76c:	683b      	ldr	r3, [r7, #0]
 801a76e:	801a      	strh	r2, [r3, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 801a776:	683b      	ldr	r3, [r7, #0]
 801a778:	805a      	strh	r2, [r3, #2]
 801a77a:	e012      	b.n	801a7a2 <_lv_indev_read+0x5a>
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	781b      	ldrb	r3, [r3, #0]
 801a780:	2b02      	cmp	r3, #2
 801a782:	d104      	bne.n	801a78e <_lv_indev_read+0x46>
        data->key = indev->proc.types.keypad.last_key;
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a788:	683b      	ldr	r3, [r7, #0]
 801a78a:	605a      	str	r2, [r3, #4]
 801a78c:	e009      	b.n	801a7a2 <_lv_indev_read+0x5a>
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	781b      	ldrb	r3, [r3, #0]
 801a792:	2b04      	cmp	r3, #4
 801a794:	d105      	bne.n	801a7a2 <_lv_indev_read+0x5a>
        data->key = LV_KEY_ENTER;
 801a796:	683b      	ldr	r3, [r7, #0]
 801a798:	220a      	movs	r2, #10
 801a79a:	605a      	str	r2, [r3, #4]
        data->enc_diff = 0;
 801a79c:	683b      	ldr	r3, [r7, #0]
 801a79e:	2200      	movs	r2, #0
 801a7a0:	819a      	strh	r2, [r3, #12]
    }

    if(indev->driver.read_cb) {
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	685b      	ldr	r3, [r3, #4]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d007      	beq.n	801a7ba <_lv_indev_read+0x72>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	685b      	ldr	r3, [r3, #4]
 801a7ae:	687a      	ldr	r2, [r7, #4]
 801a7b0:	6839      	ldr	r1, [r7, #0]
 801a7b2:	4610      	mov	r0, r2
 801a7b4:	4798      	blx	r3
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	73fb      	strb	r3, [r7, #15]
    }
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
 801a7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 801a7bc:	4618      	mov	r0, r3
 801a7be:	3710      	adds	r7, #16
 801a7c0:	46bd      	mov	sp, r7
 801a7c2:	bd80      	pop	{r7, pc}

0801a7c4 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 801a7c4:	b480      	push	{r7}
 801a7c6:	b083      	sub	sp, #12
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 801a7cc:	4b07      	ldr	r3, [pc, #28]	; (801a7ec <lv_tick_inc+0x28>)
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 801a7d2:	4b07      	ldr	r3, [pc, #28]	; (801a7f0 <lv_tick_inc+0x2c>)
 801a7d4:	681a      	ldr	r2, [r3, #0]
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	4413      	add	r3, r2
 801a7da:	4a05      	ldr	r2, [pc, #20]	; (801a7f0 <lv_tick_inc+0x2c>)
 801a7dc:	6013      	str	r3, [r2, #0]
}
 801a7de:	bf00      	nop
 801a7e0:	370c      	adds	r7, #12
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e8:	4770      	bx	lr
 801a7ea:	bf00      	nop
 801a7ec:	20018058 	.word	0x20018058
 801a7f0:	20018054 	.word	0x20018054

0801a7f4 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 801a7f4:	b480      	push	{r7}
 801a7f6:	b083      	sub	sp, #12
 801a7f8:	af00      	add	r7, sp, #0
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
 801a7fa:	4b09      	ldr	r3, [pc, #36]	; (801a820 <lv_tick_get+0x2c>)
 801a7fc:	2201      	movs	r2, #1
 801a7fe:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 801a800:	4b08      	ldr	r3, [pc, #32]	; (801a824 <lv_tick_get+0x30>)
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
 801a806:	4b06      	ldr	r3, [pc, #24]	; (801a820 <lv_tick_get+0x2c>)
 801a808:	781b      	ldrb	r3, [r3, #0]
 801a80a:	b2db      	uxtb	r3, r3
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d0f4      	beq.n	801a7fa <lv_tick_get+0x6>

    return result;
 801a810:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801a812:	4618      	mov	r0, r3
 801a814:	370c      	adds	r7, #12
 801a816:	46bd      	mov	sp, r7
 801a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a81c:	4770      	bx	lr
 801a81e:	bf00      	nop
 801a820:	20018058 	.word	0x20018058
 801a824:	20018054 	.word	0x20018054

0801a828 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b084      	sub	sp, #16
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 801a830:	f7ff ffe0 	bl	801a7f4 <lv_tick_get>
 801a834:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 801a836:	68fa      	ldr	r2, [r7, #12]
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	429a      	cmp	r2, r3
 801a83c:	d304      	bcc.n	801a848 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 801a83e:	68fa      	ldr	r2, [r7, #12]
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	1ad3      	subs	r3, r2, r3
 801a844:	607b      	str	r3, [r7, #4]
 801a846:	e006      	b.n	801a856 <lv_tick_elaps+0x2e>
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	425b      	negs	r3, r3
 801a84c:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 801a84e:	687a      	ldr	r2, [r7, #4]
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	4413      	add	r3, r2
 801a854:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 801a856:	687b      	ldr	r3, [r7, #4]
}
 801a858:	4618      	mov	r0, r3
 801a85a:	3710      	adds	r7, #16
 801a85c:	46bd      	mov	sp, r7
 801a85e:	bd80      	pop	{r7, pc}

0801a860 <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 801a860:	b480      	push	{r7}
 801a862:	b087      	sub	sp, #28
 801a864:	af00      	add	r7, sp, #0
 801a866:	60f8      	str	r0, [r7, #12]
 801a868:	60b9      	str	r1, [r7, #8]
 801a86a:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	613b      	str	r3, [r7, #16]

    while(len) {
 801a874:	e00c      	b.n	801a890 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 801a876:	693b      	ldr	r3, [r7, #16]
 801a878:	781a      	ldrb	r2, [r3, #0]
 801a87a:	697b      	ldr	r3, [r7, #20]
 801a87c:	701a      	strb	r2, [r3, #0]
        d8++;
 801a87e:	697b      	ldr	r3, [r7, #20]
 801a880:	3301      	adds	r3, #1
 801a882:	617b      	str	r3, [r7, #20]
        s8++;
 801a884:	693b      	ldr	r3, [r7, #16]
 801a886:	3301      	adds	r3, #1
 801a888:	613b      	str	r3, [r7, #16]
        len--;
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	3b01      	subs	r3, #1
 801a88e:	607b      	str	r3, [r7, #4]
    while(len) {
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d1ef      	bne.n	801a876 <_lv_memcpy_small+0x16>
    }

    return dst;
 801a896:	68fb      	ldr	r3, [r7, #12]
}
 801a898:	4618      	mov	r0, r3
 801a89a:	371c      	adds	r7, #28
 801a89c:	46bd      	mov	sp, r7
 801a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a2:	4770      	bx	lr

0801a8a4 <_lv_anim_core_init>:

/**
 * Init. the animation module
 */
void _lv_anim_core_init(void)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 801a8a8:	2144      	movs	r1, #68	; 0x44
 801a8aa:	480c      	ldr	r0, [pc, #48]	; (801a8dc <_lv_anim_core_init+0x38>)
 801a8ac:	f001 fba2 	bl	801bff4 <_lv_ll_init>
    last_task_run = lv_tick_get();
 801a8b0:	f7ff ffa0 	bl	801a7f4 <lv_tick_get>
 801a8b4:	4602      	mov	r2, r0
 801a8b6:	4b0a      	ldr	r3, [pc, #40]	; (801a8e0 <_lv_anim_core_init+0x3c>)
 801a8b8:	601a      	str	r2, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	2204      	movs	r2, #4
 801a8be:	211e      	movs	r1, #30
 801a8c0:	4808      	ldr	r0, [pc, #32]	; (801a8e4 <_lv_anim_core_init+0x40>)
 801a8c2:	f002 ff35 	bl	801d730 <lv_task_create>
 801a8c6:	4602      	mov	r2, r0
 801a8c8:	4b07      	ldr	r3, [pc, #28]	; (801a8e8 <_lv_anim_core_init+0x44>)
 801a8ca:	601a      	str	r2, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
 801a8cc:	f000 fa52 	bl	801ad74 <anim_mark_list_change>
    anim_list_changed = false; /*The list has not actually changed*/
 801a8d0:	4b06      	ldr	r3, [pc, #24]	; (801a8ec <_lv_anim_core_init+0x48>)
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	701a      	strb	r2, [r3, #0]
}
 801a8d6:	bf00      	nop
 801a8d8:	bd80      	pop	{r7, pc}
 801a8da:	bf00      	nop
 801a8dc:	20021864 	.word	0x20021864
 801a8e0:	2001805c 	.word	0x2001805c
 801a8e4:	0801aadd 	.word	0x0801aadd
 801a8e8:	20018064 	.word	0x20018064
 801a8ec:	20018060 	.word	0x20018060

0801a8f0 <lv_anim_init>:
 * lv_anim_init(&a);
 * lv_anim_set_...(&a);
 * @param a pointer to an `lv_anim_t` variable to initialize
 */
void lv_anim_init(lv_anim_t * a)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b082      	sub	sp, #8
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
    _lv_memset_00(a, sizeof(lv_anim_t));
 801a8f8:	2144      	movs	r1, #68	; 0x44
 801a8fa:	6878      	ldr	r0, [r7, #4]
 801a8fc:	f002 fc31 	bl	801d162 <_lv_memset_00>
    a->time    = 500;
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801a906:	625a      	str	r2, [r3, #36]	; 0x24
    a->start   = 0;
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	2200      	movs	r2, #0
 801a90c:	619a      	str	r2, [r3, #24]
    a->end     = 100;
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	2264      	movs	r2, #100	; 0x64
 801a912:	621a      	str	r2, [r3, #32]
    _lv_memcpy_small(&a->path, &lv_anim_path_def, sizeof(lv_anim_path_cb_t));
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	3310      	adds	r3, #16
 801a918:	2204      	movs	r2, #4
 801a91a:	4909      	ldr	r1, [pc, #36]	; (801a940 <lv_anim_init+0x50>)
 801a91c:	4618      	mov	r0, r3
 801a91e:	f7ff ff9f 	bl	801a860 <_lv_memcpy_small>
    a->repeat_cnt = 1;
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	2201      	movs	r2, #1
 801a926:	871a      	strh	r2, [r3, #56]	; 0x38
    a->early_apply = 1;
 801a928:	687a      	ldr	r2, [r7, #4]
 801a92a:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 801a92e:	f043 0301 	orr.w	r3, r3, #1
 801a932:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
}
 801a936:	bf00      	nop
 801a938:	3708      	adds	r7, #8
 801a93a:	46bd      	mov	sp, r7
 801a93c:	bd80      	pop	{r7, pc}
 801a93e:	bf00      	nop
 801a940:	080307e0 	.word	0x080307e0

0801a944 <lv_anim_start>:
/**
 * Create an animation
 * @param a an initialized 'anim_t' variable. Not required after call.
 */
void lv_anim_start(lv_anim_t * a)
{
 801a944:	b590      	push	{r4, r7, lr}
 801a946:	b085      	sub	sp, #20
 801a948:	af00      	add	r7, sp, #0
 801a94a:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("animation create started")
    /* Do not let two animations for the same 'var' with the same 'fp'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	685b      	ldr	r3, [r3, #4]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d007      	beq.n	801a964 <lv_anim_start+0x20>
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	681a      	ldr	r2, [r3, #0]
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	685b      	ldr	r3, [r3, #4]
 801a95c:	4619      	mov	r1, r3
 801a95e:	4610      	mov	r0, r2
 801a960:	f000 f856 	bl	801aa10 <lv_anim_del>

    /*If the list is empty the anim task was suspended and it's last run measure is invalid*/
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 801a964:	4827      	ldr	r0, [pc, #156]	; (801aa04 <lv_anim_start+0xc0>)
 801a966:	f001 fd75 	bl	801c454 <_lv_ll_is_empty>
 801a96a:	4603      	mov	r3, r0
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d005      	beq.n	801a97c <lv_anim_start+0x38>
        last_task_run = lv_tick_get() - 1;
 801a970:	f7ff ff40 	bl	801a7f4 <lv_tick_get>
 801a974:	4603      	mov	r3, r0
 801a976:	3b01      	subs	r3, #1
 801a978:	4a23      	ldr	r2, [pc, #140]	; (801aa08 <lv_anim_start+0xc4>)
 801a97a:	6013      	str	r3, [r2, #0]
    }

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801a97c:	4821      	ldr	r0, [pc, #132]	; (801aa04 <lv_anim_start+0xc0>)
 801a97e:	f001 fb52 	bl	801c026 <_lv_ll_ins_head>
 801a982:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(new_anim);
 801a984:	68f8      	ldr	r0, [r7, #12]
 801a986:	f001 f8f5 	bl	801bb74 <lv_debug_check_null>
 801a98a:	4603      	mov	r3, r0
 801a98c:	f083 0301 	eor.w	r3, r3, #1
 801a990:	b2db      	uxtb	r3, r3
 801a992:	2b00      	cmp	r3, #0
 801a994:	d008      	beq.n	801a9a8 <lv_anim_start+0x64>
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	f04f 0400 	mov.w	r4, #0
 801a99c:	461a      	mov	r2, r3
 801a99e:	4623      	mov	r3, r4
 801a9a0:	481a      	ldr	r0, [pc, #104]	; (801aa0c <lv_anim_start+0xc8>)
 801a9a2:	f001 f8f7 	bl	801bb94 <lv_debug_log_error>
 801a9a6:	e7fe      	b.n	801a9a6 <lv_anim_start+0x62>
    if(new_anim == NULL) return;
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d025      	beq.n	801a9fa <lv_anim_start+0xb6>

    /*Initialize the animation descriptor*/
    a->time_orig = a->time;
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9b2:	461a      	mov	r2, r3
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	63da      	str	r2, [r3, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 801a9b8:	2244      	movs	r2, #68	; 0x44
 801a9ba:	6879      	ldr	r1, [r7, #4]
 801a9bc:	68f8      	ldr	r0, [r7, #12]
 801a9be:	f002 f92b 	bl	801cc18 <_lv_memcpy>

    /*Set the start value*/
    if(new_anim->early_apply) {
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801a9c8:	f003 0301 	and.w	r3, r3, #1
 801a9cc:	b2db      	uxtb	r3, r3
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d010      	beq.n	801a9f4 <lv_anim_start+0xb0>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	685b      	ldr	r3, [r3, #4]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d00c      	beq.n	801a9f4 <lv_anim_start+0xb0>
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d008      	beq.n	801a9f4 <lv_anim_start+0xb0>
 801a9e2:	68fb      	ldr	r3, [r7, #12]
 801a9e4:	685b      	ldr	r3, [r3, #4]
 801a9e6:	68fa      	ldr	r2, [r7, #12]
 801a9e8:	6810      	ldr	r0, [r2, #0]
 801a9ea:	68fa      	ldr	r2, [r7, #12]
 801a9ec:	6992      	ldr	r2, [r2, #24]
 801a9ee:	b212      	sxth	r2, r2
 801a9f0:	4611      	mov	r1, r2
 801a9f2:	4798      	blx	r3
    }

    /* Creating an animation changed the linked list.
     * It's important if it happens in a ready callback. (see `anim_task`)*/
    anim_mark_list_change();
 801a9f4:	f000 f9be 	bl	801ad74 <anim_mark_list_change>
 801a9f8:	e000      	b.n	801a9fc <lv_anim_start+0xb8>
    if(new_anim == NULL) return;
 801a9fa:	bf00      	nop

    LV_LOG_TRACE("animation created")
}
 801a9fc:	3714      	adds	r7, #20
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd90      	pop	{r4, r7, pc}
 801aa02:	bf00      	nop
 801aa04:	20021864 	.word	0x20021864
 801aa08:	2001805c 	.word	0x2001805c
 801aa0c:	0802d164 	.word	0x0802d164

0801aa10 <lv_anim_del>:
 * @param exec_cb a function pointer which is animating 'var',
 *           or NULL to delete all the animations of 'var'
 * @return true: at least 1 animation is deleted, false: no animation is deleted
 */
bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 801aa10:	b580      	push	{r7, lr}
 801aa12:	b086      	sub	sp, #24
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
 801aa18:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	74fb      	strb	r3, [r7, #19]
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801aa1e:	4816      	ldr	r0, [pc, #88]	; (801aa78 <lv_anim_del+0x68>)
 801aa20:	f001 fc5e 	bl	801c2e0 <_lv_ll_get_head>
 801aa24:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801aa26:	e01e      	b.n	801aa66 <lv_anim_del+0x56>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801aa28:	6979      	ldr	r1, [r7, #20]
 801aa2a:	4813      	ldr	r0, [pc, #76]	; (801aa78 <lv_anim_del+0x68>)
 801aa2c:	f001 fc7e 	bl	801c32c <_lv_ll_get_next>
 801aa30:	60f8      	str	r0, [r7, #12]

        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 801aa32:	697b      	ldr	r3, [r7, #20]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	687a      	ldr	r2, [r7, #4]
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	d112      	bne.n	801aa62 <lv_anim_del+0x52>
 801aa3c:	697b      	ldr	r3, [r7, #20]
 801aa3e:	685b      	ldr	r3, [r3, #4]
 801aa40:	683a      	ldr	r2, [r7, #0]
 801aa42:	429a      	cmp	r2, r3
 801aa44:	d002      	beq.n	801aa4c <lv_anim_del+0x3c>
 801aa46:	683b      	ldr	r3, [r7, #0]
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d10a      	bne.n	801aa62 <lv_anim_del+0x52>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801aa4c:	6979      	ldr	r1, [r7, #20]
 801aa4e:	480a      	ldr	r0, [pc, #40]	; (801aa78 <lv_anim_del+0x68>)
 801aa50:	f001 fb98 	bl	801c184 <_lv_ll_remove>
            lv_mem_free(a);
 801aa54:	6978      	ldr	r0, [r7, #20]
 801aa56:	f001 fe63 	bl	801c720 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
 801aa5a:	f000 f98b 	bl	801ad74 <anim_mark_list_change>
                                         the linked list*/
            del = true;
 801aa5e:	2301      	movs	r3, #1
 801aa60:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 801aa66:	697b      	ldr	r3, [r7, #20]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d1dd      	bne.n	801aa28 <lv_anim_del+0x18>
    }

    return del;
 801aa6c:	7cfb      	ldrb	r3, [r7, #19]
}
 801aa6e:	4618      	mov	r0, r3
 801aa70:	3718      	adds	r7, #24
 801aa72:	46bd      	mov	sp, r7
 801aa74:	bd80      	pop	{r7, pc}
 801aa76:	bf00      	nop
 801aa78:	20021864 	.word	0x20021864

0801aa7c <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_path_t * path, const lv_anim_t * a)
{
 801aa7c:	b480      	push	{r7}
 801aa7e:	b085      	sub	sp, #20
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	6039      	str	r1, [r7, #0]
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa8e:	429a      	cmp	r2, r3
 801aa90:	d103      	bne.n	801aa9a <lv_anim_path_linear+0x1e>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 801aa92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aa96:	60fb      	str	r3, [r7, #12]
 801aa98:	e007      	b.n	801aaaa <lv_anim_path_linear+0x2e>
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 801aa9a:	683b      	ldr	r3, [r7, #0]
 801aa9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa9e:	029a      	lsls	r2, r3, #10
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aaa4:	fb92 f3f3 	sdiv	r3, r2, r3
 801aaa8:	60fb      	str	r3, [r7, #12]
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 801aaaa:	683b      	ldr	r3, [r7, #0]
 801aaac:	6a1a      	ldr	r2, [r3, #32]
 801aaae:	683b      	ldr	r3, [r7, #0]
 801aab0:	699b      	ldr	r3, [r3, #24]
 801aab2:	1ad3      	subs	r3, r2, r3
 801aab4:	68fa      	ldr	r2, [r7, #12]
 801aab6:	fb02 f303 	mul.w	r3, r2, r3
 801aaba:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 801aabc:	68bb      	ldr	r3, [r7, #8]
 801aabe:	129b      	asrs	r3, r3, #10
 801aac0:	60bb      	str	r3, [r7, #8]
    new_value += a->start;
 801aac2:	683b      	ldr	r3, [r7, #0]
 801aac4:	699b      	ldr	r3, [r3, #24]
 801aac6:	68ba      	ldr	r2, [r7, #8]
 801aac8:	4413      	add	r3, r2
 801aaca:	60bb      	str	r3, [r7, #8]

    return (lv_anim_value_t)new_value;
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	b21b      	sxth	r3, r3
}
 801aad0:	4618      	mov	r0, r3
 801aad2:	3714      	adds	r7, #20
 801aad4:	46bd      	mov	sp, r7
 801aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aada:	4770      	bx	lr

0801aadc <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 801aadc:	b580      	push	{r7, lr}
 801aade:	b086      	sub	sp, #24
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	6078      	str	r0, [r7, #4]
    (void)param;

    lv_anim_t * a;
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 801aae4:	4854      	ldr	r0, [pc, #336]	; (801ac38 <anim_task+0x15c>)
 801aae6:	f001 fbfb 	bl	801c2e0 <_lv_ll_get_head>
 801aaea:	6178      	str	r0, [r7, #20]
 801aaec:	e00b      	b.n	801ab06 <anim_task+0x2a>
        a->has_run = 0;
 801aaee:	697a      	ldr	r2, [r7, #20]
 801aaf0:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801aaf4:	f36f 0341 	bfc	r3, #1, #1
 801aaf8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 801aafc:	6979      	ldr	r1, [r7, #20]
 801aafe:	484e      	ldr	r0, [pc, #312]	; (801ac38 <anim_task+0x15c>)
 801ab00:	f001 fc14 	bl	801c32c <_lv_ll_get_next>
 801ab04:	6178      	str	r0, [r7, #20]
 801ab06:	697b      	ldr	r3, [r7, #20]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d1f0      	bne.n	801aaee <anim_task+0x12>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 801ab0c:	4b4b      	ldr	r3, [pc, #300]	; (801ac3c <anim_task+0x160>)
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	4618      	mov	r0, r3
 801ab12:	f7ff fe89 	bl	801a828 <lv_tick_elaps>
 801ab16:	60f8      	str	r0, [r7, #12]

    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801ab18:	4847      	ldr	r0, [pc, #284]	; (801ac38 <anim_task+0x15c>)
 801ab1a:	f001 fbe1 	bl	801c2e0 <_lv_ll_get_head>
 801ab1e:	6178      	str	r0, [r7, #20]

    while(a != NULL) {
 801ab20:	e07d      	b.n	801ac1e <anim_task+0x142>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 801ab22:	4b47      	ldr	r3, [pc, #284]	; (801ac40 <anim_task+0x164>)
 801ab24:	2200      	movs	r2, #0
 801ab26:	701a      	strb	r2, [r3, #0]

        if(!a->has_run) {
 801ab28:	697b      	ldr	r3, [r7, #20]
 801ab2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ab2e:	f003 0302 	and.w	r3, r3, #2
 801ab32:	b2db      	uxtb	r3, r3
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d164      	bne.n	801ac02 <anim_task+0x126>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
 801ab38:	697a      	ldr	r2, [r7, #20]
 801ab3a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801ab3e:	f043 0302 	orr.w	r3, r3, #2
 801ab42:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

            /*The animation will run now for the first time. Call `start_cb`*/
            int32_t new_act_time = a->act_time + elaps;
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab4a:	461a      	mov	r2, r3
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	4413      	add	r3, r2
 801ab50:	60bb      	str	r3, [r7, #8]
            if(a->act_time <= 0 && new_act_time >= 0) {
 801ab52:	697b      	ldr	r3, [r7, #20]
 801ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	dc0a      	bgt.n	801ab70 <anim_task+0x94>
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	db07      	blt.n	801ab70 <anim_task+0x94>
                if(a->start_cb) a->start_cb(a);
 801ab60:	697b      	ldr	r3, [r7, #20]
 801ab62:	689b      	ldr	r3, [r3, #8]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d003      	beq.n	801ab70 <anim_task+0x94>
 801ab68:	697b      	ldr	r3, [r7, #20]
 801ab6a:	689b      	ldr	r3, [r3, #8]
 801ab6c:	6978      	ldr	r0, [r7, #20]
 801ab6e:	4798      	blx	r3
            }
            a->act_time += elaps;
 801ab70:	697b      	ldr	r3, [r7, #20]
 801ab72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab74:	461a      	mov	r2, r3
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	4413      	add	r3, r2
 801ab7a:	461a      	mov	r2, r3
 801ab7c:	697b      	ldr	r3, [r7, #20]
 801ab7e:	629a      	str	r2, [r3, #40]	; 0x28
            if(a->act_time >= 0) {
 801ab80:	697b      	ldr	r3, [r7, #20]
 801ab82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	db3c      	blt.n	801ac02 <anim_task+0x126>
                if(a->act_time > a->time) a->act_time = a->time;
 801ab88:	697b      	ldr	r3, [r7, #20]
 801ab8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ab8c:	697b      	ldr	r3, [r7, #20]
 801ab8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab90:	429a      	cmp	r2, r3
 801ab92:	dd03      	ble.n	801ab9c <anim_task+0xc0>
 801ab94:	697b      	ldr	r3, [r7, #20]
 801ab96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ab98:	697b      	ldr	r3, [r7, #20]
 801ab9a:	629a      	str	r2, [r3, #40]	; 0x28

                int32_t new_value;
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 801ab9c:	697b      	ldr	r3, [r7, #20]
 801ab9e:	691b      	ldr	r3, [r3, #16]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d009      	beq.n	801abb8 <anim_task+0xdc>
 801aba4:	697b      	ldr	r3, [r7, #20]
 801aba6:	691b      	ldr	r3, [r3, #16]
 801aba8:	697a      	ldr	r2, [r7, #20]
 801abaa:	3210      	adds	r2, #16
 801abac:	6979      	ldr	r1, [r7, #20]
 801abae:	4610      	mov	r0, r2
 801abb0:	4798      	blx	r3
 801abb2:	4603      	mov	r3, r0
 801abb4:	613b      	str	r3, [r7, #16]
 801abb6:	e007      	b.n	801abc8 <anim_task+0xec>
                else new_value = lv_anim_path_linear(&a->path, a);
 801abb8:	697b      	ldr	r3, [r7, #20]
 801abba:	3310      	adds	r3, #16
 801abbc:	6979      	ldr	r1, [r7, #20]
 801abbe:	4618      	mov	r0, r3
 801abc0:	f7ff ff5c 	bl	801aa7c <lv_anim_path_linear>
 801abc4:	4603      	mov	r3, r0
 801abc6:	613b      	str	r3, [r7, #16]

                if(new_value != a->current) {
 801abc8:	697b      	ldr	r3, [r7, #20]
 801abca:	69db      	ldr	r3, [r3, #28]
 801abcc:	693a      	ldr	r2, [r7, #16]
 801abce:	429a      	cmp	r2, r3
 801abd0:	d00e      	beq.n	801abf0 <anim_task+0x114>
                    a->current = new_value;
 801abd2:	697b      	ldr	r3, [r7, #20]
 801abd4:	693a      	ldr	r2, [r7, #16]
 801abd6:	61da      	str	r2, [r3, #28]
                    /*Apply the calculated value*/
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 801abd8:	697b      	ldr	r3, [r7, #20]
 801abda:	685b      	ldr	r3, [r3, #4]
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d007      	beq.n	801abf0 <anim_task+0x114>
 801abe0:	697b      	ldr	r3, [r7, #20]
 801abe2:	685b      	ldr	r3, [r3, #4]
 801abe4:	697a      	ldr	r2, [r7, #20]
 801abe6:	6812      	ldr	r2, [r2, #0]
 801abe8:	6939      	ldr	r1, [r7, #16]
 801abea:	b209      	sxth	r1, r1
 801abec:	4610      	mov	r0, r2
 801abee:	4798      	blx	r3
                }

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 801abf0:	697b      	ldr	r3, [r7, #20]
 801abf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801abf4:	697b      	ldr	r3, [r7, #20]
 801abf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abf8:	429a      	cmp	r2, r3
 801abfa:	db02      	blt.n	801ac02 <anim_task+0x126>
                    anim_ready_handler(a);
 801abfc:	6978      	ldr	r0, [r7, #20]
 801abfe:	f000 f821 	bl	801ac44 <anim_ready_handler>
            }
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 801ac02:	4b0f      	ldr	r3, [pc, #60]	; (801ac40 <anim_task+0x164>)
 801ac04:	781b      	ldrb	r3, [r3, #0]
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d004      	beq.n	801ac14 <anim_task+0x138>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801ac0a:	480b      	ldr	r0, [pc, #44]	; (801ac38 <anim_task+0x15c>)
 801ac0c:	f001 fb68 	bl	801c2e0 <_lv_ll_get_head>
 801ac10:	6178      	str	r0, [r7, #20]
 801ac12:	e004      	b.n	801ac1e <anim_task+0x142>
        else
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801ac14:	6979      	ldr	r1, [r7, #20]
 801ac16:	4808      	ldr	r0, [pc, #32]	; (801ac38 <anim_task+0x15c>)
 801ac18:	f001 fb88 	bl	801c32c <_lv_ll_get_next>
 801ac1c:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801ac1e:	697b      	ldr	r3, [r7, #20]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	f47f af7e 	bne.w	801ab22 <anim_task+0x46>
    }

    last_task_run = lv_tick_get();
 801ac26:	f7ff fde5 	bl	801a7f4 <lv_tick_get>
 801ac2a:	4602      	mov	r2, r0
 801ac2c:	4b03      	ldr	r3, [pc, #12]	; (801ac3c <anim_task+0x160>)
 801ac2e:	601a      	str	r2, [r3, #0]
}
 801ac30:	bf00      	nop
 801ac32:	3718      	adds	r7, #24
 801ac34:	46bd      	mov	sp, r7
 801ac36:	bd80      	pop	{r7, pc}
 801ac38:	20021864 	.word	0x20021864
 801ac3c:	2001805c 	.word	0x2001805c
 801ac40:	20018060 	.word	0x20018060

0801ac44 <anim_ready_handler>:
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 * @return true: animation delete occurred and the `LV_GC_ROOT(_lv_anim_ll)` has changed
 * */
static bool anim_ready_handler(lv_anim_t * a)
{
 801ac44:	b580      	push	{r7, lr}
 801ac46:	b094      	sub	sp, #80	; 0x50
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	6078      	str	r0, [r7, #4]
    /*In the end of a forward anim decrement repeat cnt.*/
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ac52:	f003 0301 	and.w	r3, r3, #1
 801ac56:	b2db      	uxtb	r3, r3
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d10f      	bne.n	801ac7c <anim_ready_handler+0x38>
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d00b      	beq.n	801ac7c <anim_ready_handler+0x38>
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801ac68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ac6c:	4293      	cmp	r3, r2
 801ac6e:	d005      	beq.n	801ac7c <anim_ready_handler+0x38>
        a->repeat_cnt--;
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801ac74:	3b01      	subs	r3, #1
 801ac76:	b29a      	uxth	r2, r3
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    /*Delete the animation if
     * - no repeat left and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d128      	bne.n	801acd6 <anim_ready_handler+0x92>
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d00b      	beq.n	801aca4 <anim_ready_handler+0x60>
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d020      	beq.n	801acd6 <anim_ready_handler+0x92>
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ac9a:	f003 0301 	and.w	r3, r3, #1
 801ac9e:	b2db      	uxtb	r3, r3
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d018      	beq.n	801acd6 <anim_ready_handler+0x92>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
 801aca4:	f107 0308 	add.w	r3, r7, #8
 801aca8:	2244      	movs	r2, #68	; 0x44
 801acaa:	6879      	ldr	r1, [r7, #4]
 801acac:	4618      	mov	r0, r3
 801acae:	f001 ffb3 	bl	801cc18 <_lv_memcpy>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801acb2:	6879      	ldr	r1, [r7, #4]
 801acb4:	482d      	ldr	r0, [pc, #180]	; (801ad6c <anim_ready_handler+0x128>)
 801acb6:	f001 fa65 	bl	801c184 <_lv_ll_remove>
        lv_mem_free(a);
 801acba:	6878      	ldr	r0, [r7, #4]
 801acbc:	f001 fd30 	bl	801c720 <lv_mem_free>
        /*Flag that the list has changed */
        anim_mark_list_change();
 801acc0:	f000 f858 	bl	801ad74 <anim_mark_list_change>

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 801acc4:	697b      	ldr	r3, [r7, #20]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d049      	beq.n	801ad5e <anim_ready_handler+0x11a>
 801acca:	697b      	ldr	r3, [r7, #20]
 801accc:	f107 0208 	add.w	r2, r7, #8
 801acd0:	4610      	mov	r0, r2
 801acd2:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 801acd4:	e043      	b.n	801ad5e <anim_ready_handler+0x11a>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801acda:	425a      	negs	r2, r3
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	629a      	str	r2, [r3, #40]	; 0x28
        /*Swap the start and end values in play back mode*/
        if(a->playback_time != 0) {
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d03b      	beq.n	801ad60 <anim_ready_handler+0x11c>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801acee:	f003 0301 	and.w	r3, r3, #1
 801acf2:	b2db      	uxtb	r3, r3
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d104      	bne.n	801ad02 <anim_ready_handler+0xbe>
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acfc:	425a      	negs	r2, r3
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	629a      	str	r2, [r3, #40]	; 0x28

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ad08:	f003 0301 	and.w	r3, r3, #1
 801ad0c:	b2db      	uxtb	r3, r3
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	bf0c      	ite	eq
 801ad12:	2301      	moveq	r3, #1
 801ad14:	2300      	movne	r3, #0
 801ad16:	b2d9      	uxtb	r1, r3
 801ad18:	687a      	ldr	r2, [r7, #4]
 801ad1a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801ad1e:	f361 0300 	bfi	r3, r1, #0, #1
 801ad22:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	699b      	ldr	r3, [r3, #24]
 801ad2a:	64fb      	str	r3, [r7, #76]	; 0x4c
            a->start = a->end;
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	6a1a      	ldr	r2, [r3, #32]
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	619a      	str	r2, [r3, #24]
            a->end   = tmp;
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ad38:	621a      	str	r2, [r3, #32]

            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ad40:	f003 0301 	and.w	r3, r3, #1
 801ad44:	b2db      	uxtb	r3, r3
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d103      	bne.n	801ad52 <anim_ready_handler+0x10e>
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad4e:	461a      	mov	r2, r3
 801ad50:	e002      	b.n	801ad58 <anim_ready_handler+0x114>
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad56:	461a      	mov	r2, r3
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	625a      	str	r2, [r3, #36]	; 0x24
 801ad5c:	e000      	b.n	801ad60 <anim_ready_handler+0x11c>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 801ad5e:	bf00      	nop
        }
    }

    return anim_list_changed;
 801ad60:	4b03      	ldr	r3, [pc, #12]	; (801ad70 <anim_ready_handler+0x12c>)
 801ad62:	781b      	ldrb	r3, [r3, #0]
}
 801ad64:	4618      	mov	r0, r3
 801ad66:	3750      	adds	r7, #80	; 0x50
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	bd80      	pop	{r7, pc}
 801ad6c:	20021864 	.word	0x20021864
 801ad70:	20018060 	.word	0x20018060

0801ad74 <anim_mark_list_change>:
static void anim_mark_list_change(void)
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	af00      	add	r7, sp, #0
    anim_list_changed = true;
 801ad78:	4b0b      	ldr	r3, [pc, #44]	; (801ada8 <anim_mark_list_change+0x34>)
 801ad7a:	2201      	movs	r2, #1
 801ad7c:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801ad7e:	480b      	ldr	r0, [pc, #44]	; (801adac <anim_mark_list_change+0x38>)
 801ad80:	f001 faae 	bl	801c2e0 <_lv_ll_get_head>
 801ad84:	4603      	mov	r3, r0
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d106      	bne.n	801ad98 <anim_mark_list_change+0x24>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
 801ad8a:	4b09      	ldr	r3, [pc, #36]	; (801adb0 <anim_mark_list_change+0x3c>)
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	2100      	movs	r1, #0
 801ad90:	4618      	mov	r0, r3
 801ad92:	f002 fd97 	bl	801d8c4 <lv_task_set_prio>
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
}
 801ad96:	e005      	b.n	801ada4 <anim_mark_list_change+0x30>
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 801ad98:	4b05      	ldr	r3, [pc, #20]	; (801adb0 <anim_mark_list_change+0x3c>)
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	2104      	movs	r1, #4
 801ad9e:	4618      	mov	r0, r3
 801ada0:	f002 fd90 	bl	801d8c4 <lv_task_set_prio>
}
 801ada4:	bf00      	nop
 801ada6:	bd80      	pop	{r7, pc}
 801ada8:	20018060 	.word	0x20018060
 801adac:	20021864 	.word	0x20021864
 801adb0:	20018064 	.word	0x20018064

0801adb4 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801adb4:	b480      	push	{r7}
 801adb6:	b083      	sub	sp, #12
 801adb8:	af00      	add	r7, sp, #0
 801adba:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801adc2:	b29a      	uxth	r2, r3
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801adca:	b29b      	uxth	r3, r3
 801adcc:	1ad3      	subs	r3, r2, r3
 801adce:	b29b      	uxth	r3, r3
 801add0:	3301      	adds	r3, #1
 801add2:	b29b      	uxth	r3, r3
 801add4:	b21b      	sxth	r3, r3
}
 801add6:	4618      	mov	r0, r3
 801add8:	370c      	adds	r7, #12
 801adda:	46bd      	mov	sp, r7
 801addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade0:	4770      	bx	lr

0801ade2 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801ade2:	b480      	push	{r7}
 801ade4:	b083      	sub	sp, #12
 801ade6:	af00      	add	r7, sp, #0
 801ade8:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801adf0:	b29a      	uxth	r2, r3
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801adf8:	b29b      	uxth	r3, r3
 801adfa:	1ad3      	subs	r3, r2, r3
 801adfc:	b29b      	uxth	r3, r3
 801adfe:	3301      	adds	r3, #1
 801ae00:	b29b      	uxth	r3, r3
 801ae02:	b21b      	sxth	r3, r3
}
 801ae04:	4618      	mov	r0, r3
 801ae06:	370c      	adds	r7, #12
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0e:	4770      	bx	lr

0801ae10 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 801ae10:	b480      	push	{r7}
 801ae12:	b085      	sub	sp, #20
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	60f8      	str	r0, [r7, #12]
 801ae18:	4608      	mov	r0, r1
 801ae1a:	4611      	mov	r1, r2
 801ae1c:	461a      	mov	r2, r3
 801ae1e:	4603      	mov	r3, r0
 801ae20:	817b      	strh	r3, [r7, #10]
 801ae22:	460b      	mov	r3, r1
 801ae24:	813b      	strh	r3, [r7, #8]
 801ae26:	4613      	mov	r3, r2
 801ae28:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	897a      	ldrh	r2, [r7, #10]
 801ae2e:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	893a      	ldrh	r2, [r7, #8]
 801ae34:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	88fa      	ldrh	r2, [r7, #6]
 801ae3a:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	8b3a      	ldrh	r2, [r7, #24]
 801ae40:	80da      	strh	r2, [r3, #6]
}
 801ae42:	bf00      	nop
 801ae44:	3714      	adds	r7, #20
 801ae46:	46bd      	mov	sp, r7
 801ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae4c:	4770      	bx	lr

0801ae4e <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 801ae4e:	b480      	push	{r7}
 801ae50:	b083      	sub	sp, #12
 801ae52:	af00      	add	r7, sp, #0
 801ae54:	6078      	str	r0, [r7, #4]
 801ae56:	460b      	mov	r3, r1
 801ae58:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ae60:	b29a      	uxth	r2, r3
 801ae62:	887b      	ldrh	r3, [r7, #2]
 801ae64:	4413      	add	r3, r2
 801ae66:	b29b      	uxth	r3, r3
 801ae68:	3b01      	subs	r3, #1
 801ae6a:	b29b      	uxth	r3, r3
 801ae6c:	b21a      	sxth	r2, r3
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	80da      	strh	r2, [r3, #6]
}
 801ae72:	bf00      	nop
 801ae74:	370c      	adds	r7, #12
 801ae76:	46bd      	mov	sp, r7
 801ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae7c:	4770      	bx	lr

0801ae7e <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 801ae7e:	b480      	push	{r7}
 801ae80:	b085      	sub	sp, #20
 801ae82:	af00      	add	r7, sp, #0
 801ae84:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ae8c:	461a      	mov	r2, r3
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae94:	1ad3      	subs	r3, r2, r3
 801ae96:	3301      	adds	r3, #1
 801ae98:	461a      	mov	r2, r3
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aea0:	4619      	mov	r1, r3
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aea8:	1acb      	subs	r3, r1, r3
 801aeaa:	3301      	adds	r3, #1
 801aeac:	fb03 f302 	mul.w	r3, r3, r2
 801aeb0:	60fb      	str	r3, [r7, #12]

    return size;
 801aeb2:	68fb      	ldr	r3, [r7, #12]
}
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	3714      	adds	r7, #20
 801aeb8:	46bd      	mov	sp, r7
 801aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aebe:	4770      	bx	lr

0801aec0 <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801aec0:	b480      	push	{r7}
 801aec2:	b087      	sub	sp, #28
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	60f8      	str	r0, [r7, #12]
 801aec8:	60b9      	str	r1, [r7, #8]
 801aeca:	607a      	str	r2, [r7, #4]
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aed2:	68bb      	ldr	r3, [r7, #8]
 801aed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aed8:	4293      	cmp	r3, r2
 801aeda:	bfb8      	it	lt
 801aedc:	4613      	movlt	r3, r2
 801aede:	b21a      	sxth	r2, r3
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801aeea:	68bb      	ldr	r3, [r7, #8]
 801aeec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aef0:	4293      	cmp	r3, r2
 801aef2:	bfb8      	it	lt
 801aef4:	4613      	movlt	r3, r2
 801aef6:	b21a      	sxth	r2, r3
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801af02:	68bb      	ldr	r3, [r7, #8]
 801af04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801af08:	4293      	cmp	r3, r2
 801af0a:	bfa8      	it	ge
 801af0c:	4613      	movge	r3, r2
 801af0e:	b21a      	sxth	r2, r3
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801af1a:	68bb      	ldr	r3, [r7, #8]
 801af1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801af20:	4293      	cmp	r3, r2
 801af22:	bfa8      	it	ge
 801af24:	4613      	movge	r3, r2
 801af26:	b21a      	sxth	r2, r3
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 801af2c:	2301      	movs	r3, #1
 801af2e:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801af3c:	429a      	cmp	r2, r3
 801af3e:	dc07      	bgt.n	801af50 <_lv_area_intersect+0x90>
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801af4c:	429a      	cmp	r2, r3
 801af4e:	dd01      	ble.n	801af54 <_lv_area_intersect+0x94>
        union_ok = false;
 801af50:	2300      	movs	r3, #0
 801af52:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 801af54:	7dfb      	ldrb	r3, [r7, #23]
}
 801af56:	4618      	mov	r0, r3
 801af58:	371c      	adds	r7, #28
 801af5a:	46bd      	mov	sp, r7
 801af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af60:	4770      	bx	lr

0801af62 <_lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801af62:	b480      	push	{r7}
 801af64:	b085      	sub	sp, #20
 801af66:	af00      	add	r7, sp, #0
 801af68:	60f8      	str	r0, [r7, #12]
 801af6a:	60b9      	str	r1, [r7, #8]
 801af6c:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af74:	68bb      	ldr	r3, [r7, #8]
 801af76:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af7a:	4293      	cmp	r3, r2
 801af7c:	bfa8      	it	ge
 801af7e:	4613      	movge	r3, r2
 801af80:	b21a      	sxth	r2, r3
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801af8c:	68bb      	ldr	r3, [r7, #8]
 801af8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801af92:	4293      	cmp	r3, r2
 801af94:	bfa8      	it	ge
 801af96:	4613      	movge	r3, r2
 801af98:	b21a      	sxth	r2, r3
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801afa4:	68bb      	ldr	r3, [r7, #8]
 801afa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801afaa:	4293      	cmp	r3, r2
 801afac:	bfb8      	it	lt
 801afae:	4613      	movlt	r3, r2
 801afb0:	b21a      	sxth	r2, r3
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801afbc:	68bb      	ldr	r3, [r7, #8]
 801afbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801afc2:	4293      	cmp	r3, r2
 801afc4:	bfb8      	it	lt
 801afc6:	4613      	movlt	r3, r2
 801afc8:	b21a      	sxth	r2, r3
 801afca:	68fb      	ldr	r3, [r7, #12]
 801afcc:	80da      	strh	r2, [r3, #6]
}
 801afce:	bf00      	nop
 801afd0:	3714      	adds	r7, #20
 801afd2:	46bd      	mov	sp, r7
 801afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd8:	4770      	bx	lr

0801afda <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 801afda:	b580      	push	{r7, lr}
 801afdc:	b088      	sub	sp, #32
 801afde:	af00      	add	r7, sp, #0
 801afe0:	60f8      	str	r0, [r7, #12]
 801afe2:	60b9      	str	r1, [r7, #8]
 801afe4:	4613      	mov	r3, r2
 801afe6:	80fb      	strh	r3, [r7, #6]
    /*First check the basic area*/
    bool is_on_rect = false;
 801afe8:	2300      	movs	r3, #0
 801afea:	77fb      	strb	r3, [r7, #31]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 801afec:	68bb      	ldr	r3, [r7, #8]
 801afee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aff8:	429a      	cmp	r2, r3
 801affa:	db19      	blt.n	801b030 <_lv_area_is_point_on+0x56>
 801affc:	68bb      	ldr	r3, [r7, #8]
 801affe:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b008:	429a      	cmp	r2, r3
 801b00a:	dc11      	bgt.n	801b030 <_lv_area_is_point_on+0x56>
 801b00c:	68bb      	ldr	r3, [r7, #8]
 801b00e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b018:	429a      	cmp	r2, r3
 801b01a:	db09      	blt.n	801b030 <_lv_area_is_point_on+0x56>
 801b01c:	68bb      	ldr	r3, [r7, #8]
 801b01e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b028:	429a      	cmp	r2, r3
 801b02a:	dc01      	bgt.n	801b030 <_lv_area_is_point_on+0x56>
        is_on_rect = true;
 801b02c:	2301      	movs	r3, #1
 801b02e:	77fb      	strb	r3, [r7, #31]
    }
    if(!is_on_rect)
 801b030:	7ffb      	ldrb	r3, [r7, #31]
 801b032:	f083 0301 	eor.w	r3, r3, #1
 801b036:	b2db      	uxtb	r3, r3
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d001      	beq.n	801b040 <_lv_area_is_point_on+0x66>
        return false;
 801b03c:	2300      	movs	r3, #0
 801b03e:	e0f1      	b.n	801b224 <_lv_area_is_point_on+0x24a>
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 801b040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b044:	2b00      	cmp	r3, #0
 801b046:	dc01      	bgt.n	801b04c <_lv_area_is_point_on+0x72>
        /*No radius, it is within the rectangle*/
        return true;
 801b048:	2301      	movs	r3, #1
 801b04a:	e0eb      	b.n	801b224 <_lv_area_is_point_on+0x24a>
    }
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 801b04c:	68f8      	ldr	r0, [r7, #12]
 801b04e:	f7ff feb1 	bl	801adb4 <lv_area_get_width>
 801b052:	4603      	mov	r3, r0
 801b054:	2b00      	cmp	r3, #0
 801b056:	da00      	bge.n	801b05a <_lv_area_is_point_on+0x80>
 801b058:	3301      	adds	r3, #1
 801b05a:	105b      	asrs	r3, r3, #1
 801b05c:	83bb      	strh	r3, [r7, #28]
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 801b05e:	68f8      	ldr	r0, [r7, #12]
 801b060:	f7ff febf 	bl	801ade2 <lv_area_get_height>
 801b064:	4603      	mov	r3, r0
 801b066:	2b00      	cmp	r3, #0
 801b068:	da00      	bge.n	801b06c <_lv_area_is_point_on+0x92>
 801b06a:	3301      	adds	r3, #1
 801b06c:	105b      	asrs	r3, r3, #1
 801b06e:	837b      	strh	r3, [r7, #26]
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
 801b070:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801b074:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801b078:	4293      	cmp	r3, r2
 801b07a:	bfa8      	it	ge
 801b07c:	4613      	movge	r3, r2
 801b07e:	833b      	strh	r3, [r7, #24]
    if(radius > max_radius)
 801b080:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b084:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801b088:	429a      	cmp	r2, r3
 801b08a:	dd01      	ble.n	801b090 <_lv_area_is_point_on+0xb6>
        radius = max_radius;
 801b08c:	8b3b      	ldrh	r3, [r7, #24]
 801b08e:	80fb      	strh	r3, [r7, #6]

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 801b090:	68fb      	ldr	r3, [r7, #12]
 801b092:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b096:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x1 + radius;
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b09e:	b29a      	uxth	r2, r3
 801b0a0:	88fb      	ldrh	r3, [r7, #6]
 801b0a2:	4413      	add	r3, r2
 801b0a4:	b29b      	uxth	r3, r3
 801b0a6:	b21b      	sxth	r3, r3
 801b0a8:	82bb      	strh	r3, [r7, #20]
    corner_area.y1 = a_p->y1;
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b0b0:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b0b8:	b29a      	uxth	r2, r3
 801b0ba:	88fb      	ldrh	r3, [r7, #6]
 801b0bc:	4413      	add	r3, r2
 801b0be:	b29b      	uxth	r3, r3
 801b0c0:	b21b      	sxth	r3, r3
 801b0c2:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801b0c4:	f107 0310 	add.w	r3, r7, #16
 801b0c8:	2200      	movs	r2, #0
 801b0ca:	68b9      	ldr	r1, [r7, #8]
 801b0cc:	4618      	mov	r0, r3
 801b0ce:	f7ff ff84 	bl	801afda <_lv_area_is_point_on>
 801b0d2:	4603      	mov	r3, r0
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d017      	beq.n	801b108 <_lv_area_is_point_on+0x12e>
        corner_area.x2 += radius;
 801b0d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b0dc:	b29a      	uxth	r2, r3
 801b0de:	88fb      	ldrh	r3, [r7, #6]
 801b0e0:	4413      	add	r3, r2
 801b0e2:	b29b      	uxth	r3, r3
 801b0e4:	b21b      	sxth	r3, r3
 801b0e6:	82bb      	strh	r3, [r7, #20]
        corner_area.y2 += radius;
 801b0e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b0ec:	b29a      	uxth	r2, r3
 801b0ee:	88fb      	ldrh	r3, [r7, #6]
 801b0f0:	4413      	add	r3, r2
 801b0f2:	b29b      	uxth	r3, r3
 801b0f4:	b21b      	sxth	r3, r3
 801b0f6:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 801b0f8:	f107 0310 	add.w	r3, r7, #16
 801b0fc:	68b9      	ldr	r1, [r7, #8]
 801b0fe:	4618      	mov	r0, r3
 801b100:	f000 fbe2 	bl	801b8c8 <lv_point_within_circle>
 801b104:	4603      	mov	r3, r0
 801b106:	e08d      	b.n	801b224 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom left*/
    corner_area.y1 = a_p->y2 - radius;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b10e:	b29a      	uxth	r2, r3
 801b110:	88fb      	ldrh	r3, [r7, #6]
 801b112:	1ad3      	subs	r3, r2, r3
 801b114:	b29b      	uxth	r3, r3
 801b116:	b21b      	sxth	r3, r3
 801b118:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y2;
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b120:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801b122:	f107 0310 	add.w	r3, r7, #16
 801b126:	2200      	movs	r2, #0
 801b128:	68b9      	ldr	r1, [r7, #8]
 801b12a:	4618      	mov	r0, r3
 801b12c:	f7ff ff55 	bl	801afda <_lv_area_is_point_on>
 801b130:	4603      	mov	r3, r0
 801b132:	2b00      	cmp	r3, #0
 801b134:	d017      	beq.n	801b166 <_lv_area_is_point_on+0x18c>
        corner_area.x2 += radius;
 801b136:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b13a:	b29a      	uxth	r2, r3
 801b13c:	88fb      	ldrh	r3, [r7, #6]
 801b13e:	4413      	add	r3, r2
 801b140:	b29b      	uxth	r3, r3
 801b142:	b21b      	sxth	r3, r3
 801b144:	82bb      	strh	r3, [r7, #20]
        corner_area.y1 -= radius;
 801b146:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b14a:	b29a      	uxth	r2, r3
 801b14c:	88fb      	ldrh	r3, [r7, #6]
 801b14e:	1ad3      	subs	r3, r2, r3
 801b150:	b29b      	uxth	r3, r3
 801b152:	b21b      	sxth	r3, r3
 801b154:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 801b156:	f107 0310 	add.w	r3, r7, #16
 801b15a:	68b9      	ldr	r1, [r7, #8]
 801b15c:	4618      	mov	r0, r3
 801b15e:	f000 fbb3 	bl	801b8c8 <lv_point_within_circle>
 801b162:	4603      	mov	r3, r0
 801b164:	e05e      	b.n	801b224 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom right*/
    corner_area.x1 = a_p->x2 - radius;
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b16c:	b29a      	uxth	r2, r3
 801b16e:	88fb      	ldrh	r3, [r7, #6]
 801b170:	1ad3      	subs	r3, r2, r3
 801b172:	b29b      	uxth	r3, r3
 801b174:	b21b      	sxth	r3, r3
 801b176:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x2;
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b17e:	82bb      	strh	r3, [r7, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801b180:	f107 0310 	add.w	r3, r7, #16
 801b184:	2200      	movs	r2, #0
 801b186:	68b9      	ldr	r1, [r7, #8]
 801b188:	4618      	mov	r0, r3
 801b18a:	f7ff ff26 	bl	801afda <_lv_area_is_point_on>
 801b18e:	4603      	mov	r3, r0
 801b190:	2b00      	cmp	r3, #0
 801b192:	d017      	beq.n	801b1c4 <_lv_area_is_point_on+0x1ea>
        corner_area.x1 -= radius;
 801b194:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801b198:	b29a      	uxth	r2, r3
 801b19a:	88fb      	ldrh	r3, [r7, #6]
 801b19c:	1ad3      	subs	r3, r2, r3
 801b19e:	b29b      	uxth	r3, r3
 801b1a0:	b21b      	sxth	r3, r3
 801b1a2:	823b      	strh	r3, [r7, #16]
        corner_area.y1 -= radius;
 801b1a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b1a8:	b29a      	uxth	r2, r3
 801b1aa:	88fb      	ldrh	r3, [r7, #6]
 801b1ac:	1ad3      	subs	r3, r2, r3
 801b1ae:	b29b      	uxth	r3, r3
 801b1b0:	b21b      	sxth	r3, r3
 801b1b2:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 801b1b4:	f107 0310 	add.w	r3, r7, #16
 801b1b8:	68b9      	ldr	r1, [r7, #8]
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	f000 fb84 	bl	801b8c8 <lv_point_within_circle>
 801b1c0:	4603      	mov	r3, r0
 801b1c2:	e02f      	b.n	801b224 <_lv_area_is_point_on+0x24a>
    }
    /*Top right*/
    corner_area.y1 = a_p->y1;
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b1ca:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b1d2:	b29a      	uxth	r2, r3
 801b1d4:	88fb      	ldrh	r3, [r7, #6]
 801b1d6:	4413      	add	r3, r2
 801b1d8:	b29b      	uxth	r3, r3
 801b1da:	b21b      	sxth	r3, r3
 801b1dc:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801b1de:	f107 0310 	add.w	r3, r7, #16
 801b1e2:	2200      	movs	r2, #0
 801b1e4:	68b9      	ldr	r1, [r7, #8]
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	f7ff fef7 	bl	801afda <_lv_area_is_point_on>
 801b1ec:	4603      	mov	r3, r0
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d017      	beq.n	801b222 <_lv_area_is_point_on+0x248>
        corner_area.x1 -= radius;
 801b1f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801b1f6:	b29a      	uxth	r2, r3
 801b1f8:	88fb      	ldrh	r3, [r7, #6]
 801b1fa:	1ad3      	subs	r3, r2, r3
 801b1fc:	b29b      	uxth	r3, r3
 801b1fe:	b21b      	sxth	r3, r3
 801b200:	823b      	strh	r3, [r7, #16]
        corner_area.y2 += radius;
 801b202:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b206:	b29a      	uxth	r2, r3
 801b208:	88fb      	ldrh	r3, [r7, #6]
 801b20a:	4413      	add	r3, r2
 801b20c:	b29b      	uxth	r3, r3
 801b20e:	b21b      	sxth	r3, r3
 801b210:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 801b212:	f107 0310 	add.w	r3, r7, #16
 801b216:	68b9      	ldr	r1, [r7, #8]
 801b218:	4618      	mov	r0, r3
 801b21a:	f000 fb55 	bl	801b8c8 <lv_point_within_circle>
 801b21e:	4603      	mov	r3, r0
 801b220:	e000      	b.n	801b224 <_lv_area_is_point_on+0x24a>
    }
    /*Not within corners*/
    return true;
 801b222:	2301      	movs	r3, #1
}
 801b224:	4618      	mov	r0, r3
 801b226:	3720      	adds	r7, #32
 801b228:	46bd      	mov	sp, r7
 801b22a:	bd80      	pop	{r7, pc}

0801b22c <_lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801b22c:	b480      	push	{r7}
 801b22e:	b083      	sub	sp, #12
 801b230:	af00      	add	r7, sp, #0
 801b232:	6078      	str	r0, [r7, #4]
 801b234:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b23c:	683b      	ldr	r3, [r7, #0]
 801b23e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b242:	429a      	cmp	r2, r3
 801b244:	dc19      	bgt.n	801b27a <_lv_area_is_on+0x4e>
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801b24c:	683b      	ldr	r3, [r7, #0]
 801b24e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b252:	429a      	cmp	r2, r3
 801b254:	db11      	blt.n	801b27a <_lv_area_is_on+0x4e>
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b25c:	683b      	ldr	r3, [r7, #0]
 801b25e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b262:	429a      	cmp	r2, r3
 801b264:	dc09      	bgt.n	801b27a <_lv_area_is_on+0x4e>
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b26c:	683b      	ldr	r3, [r7, #0]
 801b26e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b272:	429a      	cmp	r2, r3
 801b274:	db01      	blt.n	801b27a <_lv_area_is_on+0x4e>
        return true;
 801b276:	2301      	movs	r3, #1
 801b278:	e000      	b.n	801b27c <_lv_area_is_on+0x50>
    }
    else {
        return false;
 801b27a:	2300      	movs	r3, #0
    }
}
 801b27c:	4618      	mov	r0, r3
 801b27e:	370c      	adds	r7, #12
 801b280:	46bd      	mov	sp, r7
 801b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b286:	4770      	bx	lr

0801b288 <_lv_area_is_in>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `ain_p` is fully inside `aholder_p`
 */
bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 801b288:	b580      	push	{r7, lr}
 801b28a:	b086      	sub	sp, #24
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	60f8      	str	r0, [r7, #12]
 801b290:	60b9      	str	r1, [r7, #8]
 801b292:	4613      	mov	r3, r2
 801b294:	80fb      	strh	r3, [r7, #6]
    bool is_in = false;
 801b296:	2300      	movs	r3, #0
 801b298:	75fb      	strb	r3, [r7, #23]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b2a0:	68bb      	ldr	r3, [r7, #8]
 801b2a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b2a6:	429a      	cmp	r2, r3
 801b2a8:	db19      	blt.n	801b2de <_lv_area_is_in+0x56>
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b2b0:	68bb      	ldr	r3, [r7, #8]
 801b2b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b2b6:	429a      	cmp	r2, r3
 801b2b8:	db11      	blt.n	801b2de <_lv_area_is_in+0x56>
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801b2c0:	68bb      	ldr	r3, [r7, #8]
 801b2c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b2c6:	429a      	cmp	r2, r3
 801b2c8:	dc09      	bgt.n	801b2de <_lv_area_is_in+0x56>
       ain_p->y2 <= aholder_p->y2) {
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b2d0:	68bb      	ldr	r3, [r7, #8]
 801b2d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801b2d6:	429a      	cmp	r2, r3
 801b2d8:	dc01      	bgt.n	801b2de <_lv_area_is_in+0x56>
        is_in = true;
 801b2da:	2301      	movs	r3, #1
 801b2dc:	75fb      	strb	r3, [r7, #23]
    }

    if(!is_in) return false;
 801b2de:	7dfb      	ldrb	r3, [r7, #23]
 801b2e0:	f083 0301 	eor.w	r3, r3, #1
 801b2e4:	b2db      	uxtb	r3, r3
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d001      	beq.n	801b2ee <_lv_area_is_in+0x66>
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	e066      	b.n	801b3bc <_lv_area_is_in+0x134>
    if(radius == 0) return true;
 801b2ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d101      	bne.n	801b2fa <_lv_area_is_in+0x72>
 801b2f6:	2301      	movs	r3, #1
 801b2f8:	e060      	b.n	801b3bc <_lv_area_is_in+0x134>

    /*Check if the corner points are inside the radius or not*/
    lv_point_t p;

    p.x = ain_p->x1;
 801b2fa:	68fb      	ldr	r3, [r7, #12]
 801b2fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b300:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b308:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b30a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b30e:	f107 0310 	add.w	r3, r7, #16
 801b312:	4619      	mov	r1, r3
 801b314:	68b8      	ldr	r0, [r7, #8]
 801b316:	f7ff fe60 	bl	801afda <_lv_area_is_point_on>
 801b31a:	4603      	mov	r3, r0
 801b31c:	f083 0301 	eor.w	r3, r3, #1
 801b320:	b2db      	uxtb	r3, r3
 801b322:	2b00      	cmp	r3, #0
 801b324:	d001      	beq.n	801b32a <_lv_area_is_in+0xa2>
 801b326:	2300      	movs	r3, #0
 801b328:	e048      	b.n	801b3bc <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 801b32a:	68fb      	ldr	r3, [r7, #12]
 801b32c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b330:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b338:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b33a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b33e:	f107 0310 	add.w	r3, r7, #16
 801b342:	4619      	mov	r1, r3
 801b344:	68b8      	ldr	r0, [r7, #8]
 801b346:	f7ff fe48 	bl	801afda <_lv_area_is_point_on>
 801b34a:	4603      	mov	r3, r0
 801b34c:	f083 0301 	eor.w	r3, r3, #1
 801b350:	b2db      	uxtb	r3, r3
 801b352:	2b00      	cmp	r3, #0
 801b354:	d001      	beq.n	801b35a <_lv_area_is_in+0xd2>
 801b356:	2300      	movs	r3, #0
 801b358:	e030      	b.n	801b3bc <_lv_area_is_in+0x134>

    p.x = ain_p->x1;
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b360:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b368:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b36a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b36e:	f107 0310 	add.w	r3, r7, #16
 801b372:	4619      	mov	r1, r3
 801b374:	68b8      	ldr	r0, [r7, #8]
 801b376:	f7ff fe30 	bl	801afda <_lv_area_is_point_on>
 801b37a:	4603      	mov	r3, r0
 801b37c:	f083 0301 	eor.w	r3, r3, #1
 801b380:	b2db      	uxtb	r3, r3
 801b382:	2b00      	cmp	r3, #0
 801b384:	d001      	beq.n	801b38a <_lv_area_is_in+0x102>
 801b386:	2300      	movs	r3, #0
 801b388:	e018      	b.n	801b3bc <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b390:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b398:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b39a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b39e:	f107 0310 	add.w	r3, r7, #16
 801b3a2:	4619      	mov	r1, r3
 801b3a4:	68b8      	ldr	r0, [r7, #8]
 801b3a6:	f7ff fe18 	bl	801afda <_lv_area_is_point_on>
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	f083 0301 	eor.w	r3, r3, #1
 801b3b0:	b2db      	uxtb	r3, r3
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d001      	beq.n	801b3ba <_lv_area_is_in+0x132>
 801b3b6:	2300      	movs	r3, #0
 801b3b8:	e000      	b.n	801b3bc <_lv_area_is_in+0x134>

    return true;
 801b3ba:	2301      	movs	r3, #1
}
 801b3bc:	4618      	mov	r0, r3
 801b3be:	3718      	adds	r7, #24
 801b3c0:	46bd      	mov	sp, r7
 801b3c2:	bd80      	pop	{r7, pc}

0801b3c4 <_lv_area_align>:
 * @param to_align the area to align
 * @param align `LV_ALIGN_...`
 * @param res x/y coordinates where `to_align` align area should be placed
 */
void _lv_area_align(const lv_area_t * base, const lv_area_t * to_align, lv_align_t align, lv_point_t * res)
{
 801b3c4:	b590      	push	{r4, r7, lr}
 801b3c6:	b085      	sub	sp, #20
 801b3c8:	af00      	add	r7, sp, #0
 801b3ca:	60f8      	str	r0, [r7, #12]
 801b3cc:	60b9      	str	r1, [r7, #8]
 801b3ce:	603b      	str	r3, [r7, #0]
 801b3d0:	4613      	mov	r3, r2
 801b3d2:	71fb      	strb	r3, [r7, #7]

    switch(align) {
 801b3d4:	79fb      	ldrb	r3, [r7, #7]
 801b3d6:	2b14      	cmp	r3, #20
 801b3d8:	f200 8257 	bhi.w	801b88a <_lv_area_align+0x4c6>
 801b3dc:	a201      	add	r2, pc, #4	; (adr r2, 801b3e4 <_lv_area_align+0x20>)
 801b3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3e2:	bf00      	nop
 801b3e4:	0801b439 	.word	0x0801b439
 801b3e8:	0801b49f 	.word	0x0801b49f
 801b3ec:	0801b4ad 	.word	0x0801b4ad
 801b3f0:	0801b4e7 	.word	0x0801b4e7
 801b3f4:	0801b50d 	.word	0x0801b50d
 801b3f8:	0801b533 	.word	0x0801b533
 801b3fc:	0801b585 	.word	0x0801b585
 801b400:	0801b5c3 	.word	0x0801b5c3
 801b404:	0801b5fd 	.word	0x0801b5fd
 801b408:	0801b64f 	.word	0x0801b64f
 801b40c:	0801b66b 	.word	0x0801b66b
 801b410:	0801b6b3 	.word	0x0801b6b3
 801b414:	0801b6e7 	.word	0x0801b6e7
 801b418:	0801b6fd 	.word	0x0801b6fd
 801b41c:	0801b73f 	.word	0x0801b73f
 801b420:	0801b76d 	.word	0x0801b76d
 801b424:	0801b789 	.word	0x0801b789
 801b428:	0801b7d1 	.word	0x0801b7d1
 801b42c:	0801b805 	.word	0x0801b805
 801b430:	0801b81b 	.word	0x0801b81b
 801b434:	0801b85d 	.word	0x0801b85d
        case LV_ALIGN_CENTER:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b438:	68f8      	ldr	r0, [r7, #12]
 801b43a:	f7ff fcbb 	bl	801adb4 <lv_area_get_width>
 801b43e:	4603      	mov	r3, r0
 801b440:	2b00      	cmp	r3, #0
 801b442:	da00      	bge.n	801b446 <_lv_area_align+0x82>
 801b444:	3301      	adds	r3, #1
 801b446:	105b      	asrs	r3, r3, #1
 801b448:	b21b      	sxth	r3, r3
 801b44a:	b29c      	uxth	r4, r3
 801b44c:	68b8      	ldr	r0, [r7, #8]
 801b44e:	f7ff fcb1 	bl	801adb4 <lv_area_get_width>
 801b452:	4603      	mov	r3, r0
 801b454:	2b00      	cmp	r3, #0
 801b456:	da00      	bge.n	801b45a <_lv_area_align+0x96>
 801b458:	3301      	adds	r3, #1
 801b45a:	105b      	asrs	r3, r3, #1
 801b45c:	b21b      	sxth	r3, r3
 801b45e:	b29b      	uxth	r3, r3
 801b460:	1ae3      	subs	r3, r4, r3
 801b462:	b29b      	uxth	r3, r3
 801b464:	b21a      	sxth	r2, r3
 801b466:	683b      	ldr	r3, [r7, #0]
 801b468:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b46a:	68f8      	ldr	r0, [r7, #12]
 801b46c:	f7ff fcb9 	bl	801ade2 <lv_area_get_height>
 801b470:	4603      	mov	r3, r0
 801b472:	2b00      	cmp	r3, #0
 801b474:	da00      	bge.n	801b478 <_lv_area_align+0xb4>
 801b476:	3301      	adds	r3, #1
 801b478:	105b      	asrs	r3, r3, #1
 801b47a:	b21b      	sxth	r3, r3
 801b47c:	b29c      	uxth	r4, r3
 801b47e:	68b8      	ldr	r0, [r7, #8]
 801b480:	f7ff fcaf 	bl	801ade2 <lv_area_get_height>
 801b484:	4603      	mov	r3, r0
 801b486:	2b00      	cmp	r3, #0
 801b488:	da00      	bge.n	801b48c <_lv_area_align+0xc8>
 801b48a:	3301      	adds	r3, #1
 801b48c:	105b      	asrs	r3, r3, #1
 801b48e:	b21b      	sxth	r3, r3
 801b490:	b29b      	uxth	r3, r3
 801b492:	1ae3      	subs	r3, r4, r3
 801b494:	b29b      	uxth	r3, r3
 801b496:	b21a      	sxth	r2, r3
 801b498:	683b      	ldr	r3, [r7, #0]
 801b49a:	805a      	strh	r2, [r3, #2]
            break;
 801b49c:	e1f5      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_TOP_LEFT:
            res->x = 0;
 801b49e:	683b      	ldr	r3, [r7, #0]
 801b4a0:	2200      	movs	r2, #0
 801b4a2:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b4a4:	683b      	ldr	r3, [r7, #0]
 801b4a6:	2200      	movs	r2, #0
 801b4a8:	805a      	strh	r2, [r3, #2]
            break;
 801b4aa:	e1ee      	b.n	801b88a <_lv_area_align+0x4c6>
        case LV_ALIGN_IN_TOP_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b4ac:	68f8      	ldr	r0, [r7, #12]
 801b4ae:	f7ff fc81 	bl	801adb4 <lv_area_get_width>
 801b4b2:	4603      	mov	r3, r0
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	da00      	bge.n	801b4ba <_lv_area_align+0xf6>
 801b4b8:	3301      	adds	r3, #1
 801b4ba:	105b      	asrs	r3, r3, #1
 801b4bc:	b21b      	sxth	r3, r3
 801b4be:	b29c      	uxth	r4, r3
 801b4c0:	68b8      	ldr	r0, [r7, #8]
 801b4c2:	f7ff fc77 	bl	801adb4 <lv_area_get_width>
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	da00      	bge.n	801b4ce <_lv_area_align+0x10a>
 801b4cc:	3301      	adds	r3, #1
 801b4ce:	105b      	asrs	r3, r3, #1
 801b4d0:	b21b      	sxth	r3, r3
 801b4d2:	b29b      	uxth	r3, r3
 801b4d4:	1ae3      	subs	r3, r4, r3
 801b4d6:	b29b      	uxth	r3, r3
 801b4d8:	b21a      	sxth	r2, r3
 801b4da:	683b      	ldr	r3, [r7, #0]
 801b4dc:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b4de:	683b      	ldr	r3, [r7, #0]
 801b4e0:	2200      	movs	r2, #0
 801b4e2:	805a      	strh	r2, [r3, #2]
            break;
 801b4e4:	e1d1      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_TOP_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b4e6:	68f8      	ldr	r0, [r7, #12]
 801b4e8:	f7ff fc64 	bl	801adb4 <lv_area_get_width>
 801b4ec:	4603      	mov	r3, r0
 801b4ee:	b29c      	uxth	r4, r3
 801b4f0:	68b8      	ldr	r0, [r7, #8]
 801b4f2:	f7ff fc5f 	bl	801adb4 <lv_area_get_width>
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	b29b      	uxth	r3, r3
 801b4fa:	1ae3      	subs	r3, r4, r3
 801b4fc:	b29b      	uxth	r3, r3
 801b4fe:	b21a      	sxth	r2, r3
 801b500:	683b      	ldr	r3, [r7, #0]
 801b502:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b504:	683b      	ldr	r3, [r7, #0]
 801b506:	2200      	movs	r2, #0
 801b508:	805a      	strh	r2, [r3, #2]
            break;
 801b50a:	e1be      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            res->x = 0;
 801b50c:	683b      	ldr	r3, [r7, #0]
 801b50e:	2200      	movs	r2, #0
 801b510:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b512:	68f8      	ldr	r0, [r7, #12]
 801b514:	f7ff fc65 	bl	801ade2 <lv_area_get_height>
 801b518:	4603      	mov	r3, r0
 801b51a:	b29c      	uxth	r4, r3
 801b51c:	68b8      	ldr	r0, [r7, #8]
 801b51e:	f7ff fc60 	bl	801ade2 <lv_area_get_height>
 801b522:	4603      	mov	r3, r0
 801b524:	b29b      	uxth	r3, r3
 801b526:	1ae3      	subs	r3, r4, r3
 801b528:	b29b      	uxth	r3, r3
 801b52a:	b21a      	sxth	r2, r3
 801b52c:	683b      	ldr	r3, [r7, #0]
 801b52e:	805a      	strh	r2, [r3, #2]
            break;
 801b530:	e1ab      	b.n	801b88a <_lv_area_align+0x4c6>
        case LV_ALIGN_IN_BOTTOM_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b532:	68f8      	ldr	r0, [r7, #12]
 801b534:	f7ff fc3e 	bl	801adb4 <lv_area_get_width>
 801b538:	4603      	mov	r3, r0
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	da00      	bge.n	801b540 <_lv_area_align+0x17c>
 801b53e:	3301      	adds	r3, #1
 801b540:	105b      	asrs	r3, r3, #1
 801b542:	b21b      	sxth	r3, r3
 801b544:	b29c      	uxth	r4, r3
 801b546:	68b8      	ldr	r0, [r7, #8]
 801b548:	f7ff fc34 	bl	801adb4 <lv_area_get_width>
 801b54c:	4603      	mov	r3, r0
 801b54e:	2b00      	cmp	r3, #0
 801b550:	da00      	bge.n	801b554 <_lv_area_align+0x190>
 801b552:	3301      	adds	r3, #1
 801b554:	105b      	asrs	r3, r3, #1
 801b556:	b21b      	sxth	r3, r3
 801b558:	b29b      	uxth	r3, r3
 801b55a:	1ae3      	subs	r3, r4, r3
 801b55c:	b29b      	uxth	r3, r3
 801b55e:	b21a      	sxth	r2, r3
 801b560:	683b      	ldr	r3, [r7, #0]
 801b562:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b564:	68f8      	ldr	r0, [r7, #12]
 801b566:	f7ff fc3c 	bl	801ade2 <lv_area_get_height>
 801b56a:	4603      	mov	r3, r0
 801b56c:	b29c      	uxth	r4, r3
 801b56e:	68b8      	ldr	r0, [r7, #8]
 801b570:	f7ff fc37 	bl	801ade2 <lv_area_get_height>
 801b574:	4603      	mov	r3, r0
 801b576:	b29b      	uxth	r3, r3
 801b578:	1ae3      	subs	r3, r4, r3
 801b57a:	b29b      	uxth	r3, r3
 801b57c:	b21a      	sxth	r2, r3
 801b57e:	683b      	ldr	r3, [r7, #0]
 801b580:	805a      	strh	r2, [r3, #2]
            break;
 801b582:	e182      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b584:	68f8      	ldr	r0, [r7, #12]
 801b586:	f7ff fc15 	bl	801adb4 <lv_area_get_width>
 801b58a:	4603      	mov	r3, r0
 801b58c:	b29c      	uxth	r4, r3
 801b58e:	68b8      	ldr	r0, [r7, #8]
 801b590:	f7ff fc10 	bl	801adb4 <lv_area_get_width>
 801b594:	4603      	mov	r3, r0
 801b596:	b29b      	uxth	r3, r3
 801b598:	1ae3      	subs	r3, r4, r3
 801b59a:	b29b      	uxth	r3, r3
 801b59c:	b21a      	sxth	r2, r3
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b5a2:	68f8      	ldr	r0, [r7, #12]
 801b5a4:	f7ff fc1d 	bl	801ade2 <lv_area_get_height>
 801b5a8:	4603      	mov	r3, r0
 801b5aa:	b29c      	uxth	r4, r3
 801b5ac:	68b8      	ldr	r0, [r7, #8]
 801b5ae:	f7ff fc18 	bl	801ade2 <lv_area_get_height>
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	b29b      	uxth	r3, r3
 801b5b6:	1ae3      	subs	r3, r4, r3
 801b5b8:	b29b      	uxth	r3, r3
 801b5ba:	b21a      	sxth	r2, r3
 801b5bc:	683b      	ldr	r3, [r7, #0]
 801b5be:	805a      	strh	r2, [r3, #2]
            break;
 801b5c0:	e163      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_LEFT_MID:
            res->x = 0;
 801b5c2:	683b      	ldr	r3, [r7, #0]
 801b5c4:	2200      	movs	r2, #0
 801b5c6:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b5c8:	68f8      	ldr	r0, [r7, #12]
 801b5ca:	f7ff fc0a 	bl	801ade2 <lv_area_get_height>
 801b5ce:	4603      	mov	r3, r0
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	da00      	bge.n	801b5d6 <_lv_area_align+0x212>
 801b5d4:	3301      	adds	r3, #1
 801b5d6:	105b      	asrs	r3, r3, #1
 801b5d8:	b21b      	sxth	r3, r3
 801b5da:	b29c      	uxth	r4, r3
 801b5dc:	68b8      	ldr	r0, [r7, #8]
 801b5de:	f7ff fc00 	bl	801ade2 <lv_area_get_height>
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	da00      	bge.n	801b5ea <_lv_area_align+0x226>
 801b5e8:	3301      	adds	r3, #1
 801b5ea:	105b      	asrs	r3, r3, #1
 801b5ec:	b21b      	sxth	r3, r3
 801b5ee:	b29b      	uxth	r3, r3
 801b5f0:	1ae3      	subs	r3, r4, r3
 801b5f2:	b29b      	uxth	r3, r3
 801b5f4:	b21a      	sxth	r2, r3
 801b5f6:	683b      	ldr	r3, [r7, #0]
 801b5f8:	805a      	strh	r2, [r3, #2]
            break;
 801b5fa:	e146      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_RIGHT_MID:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b5fc:	68f8      	ldr	r0, [r7, #12]
 801b5fe:	f7ff fbd9 	bl	801adb4 <lv_area_get_width>
 801b602:	4603      	mov	r3, r0
 801b604:	b29c      	uxth	r4, r3
 801b606:	68b8      	ldr	r0, [r7, #8]
 801b608:	f7ff fbd4 	bl	801adb4 <lv_area_get_width>
 801b60c:	4603      	mov	r3, r0
 801b60e:	b29b      	uxth	r3, r3
 801b610:	1ae3      	subs	r3, r4, r3
 801b612:	b29b      	uxth	r3, r3
 801b614:	b21a      	sxth	r2, r3
 801b616:	683b      	ldr	r3, [r7, #0]
 801b618:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b61a:	68f8      	ldr	r0, [r7, #12]
 801b61c:	f7ff fbe1 	bl	801ade2 <lv_area_get_height>
 801b620:	4603      	mov	r3, r0
 801b622:	2b00      	cmp	r3, #0
 801b624:	da00      	bge.n	801b628 <_lv_area_align+0x264>
 801b626:	3301      	adds	r3, #1
 801b628:	105b      	asrs	r3, r3, #1
 801b62a:	b21b      	sxth	r3, r3
 801b62c:	b29c      	uxth	r4, r3
 801b62e:	68b8      	ldr	r0, [r7, #8]
 801b630:	f7ff fbd7 	bl	801ade2 <lv_area_get_height>
 801b634:	4603      	mov	r3, r0
 801b636:	2b00      	cmp	r3, #0
 801b638:	da00      	bge.n	801b63c <_lv_area_align+0x278>
 801b63a:	3301      	adds	r3, #1
 801b63c:	105b      	asrs	r3, r3, #1
 801b63e:	b21b      	sxth	r3, r3
 801b640:	b29b      	uxth	r3, r3
 801b642:	1ae3      	subs	r3, r4, r3
 801b644:	b29b      	uxth	r3, r3
 801b646:	b21a      	sxth	r2, r3
 801b648:	683b      	ldr	r3, [r7, #0]
 801b64a:	805a      	strh	r2, [r3, #2]
            break;
 801b64c:	e11d      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_TOP_LEFT:
            res->x = 0;
 801b64e:	683b      	ldr	r3, [r7, #0]
 801b650:	2200      	movs	r2, #0
 801b652:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 801b654:	68b8      	ldr	r0, [r7, #8]
 801b656:	f7ff fbc4 	bl	801ade2 <lv_area_get_height>
 801b65a:	4603      	mov	r3, r0
 801b65c:	b29b      	uxth	r3, r3
 801b65e:	425b      	negs	r3, r3
 801b660:	b29b      	uxth	r3, r3
 801b662:	b21a      	sxth	r2, r3
 801b664:	683b      	ldr	r3, [r7, #0]
 801b666:	805a      	strh	r2, [r3, #2]
            break;
 801b668:	e10f      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_TOP_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b66a:	68f8      	ldr	r0, [r7, #12]
 801b66c:	f7ff fba2 	bl	801adb4 <lv_area_get_width>
 801b670:	4603      	mov	r3, r0
 801b672:	2b00      	cmp	r3, #0
 801b674:	da00      	bge.n	801b678 <_lv_area_align+0x2b4>
 801b676:	3301      	adds	r3, #1
 801b678:	105b      	asrs	r3, r3, #1
 801b67a:	b21b      	sxth	r3, r3
 801b67c:	b29c      	uxth	r4, r3
 801b67e:	68b8      	ldr	r0, [r7, #8]
 801b680:	f7ff fb98 	bl	801adb4 <lv_area_get_width>
 801b684:	4603      	mov	r3, r0
 801b686:	2b00      	cmp	r3, #0
 801b688:	da00      	bge.n	801b68c <_lv_area_align+0x2c8>
 801b68a:	3301      	adds	r3, #1
 801b68c:	105b      	asrs	r3, r3, #1
 801b68e:	b21b      	sxth	r3, r3
 801b690:	b29b      	uxth	r3, r3
 801b692:	1ae3      	subs	r3, r4, r3
 801b694:	b29b      	uxth	r3, r3
 801b696:	b21a      	sxth	r2, r3
 801b698:	683b      	ldr	r3, [r7, #0]
 801b69a:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 801b69c:	68b8      	ldr	r0, [r7, #8]
 801b69e:	f7ff fba0 	bl	801ade2 <lv_area_get_height>
 801b6a2:	4603      	mov	r3, r0
 801b6a4:	b29b      	uxth	r3, r3
 801b6a6:	425b      	negs	r3, r3
 801b6a8:	b29b      	uxth	r3, r3
 801b6aa:	b21a      	sxth	r2, r3
 801b6ac:	683b      	ldr	r3, [r7, #0]
 801b6ae:	805a      	strh	r2, [r3, #2]
            break;
 801b6b0:	e0eb      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_TOP_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b6b2:	68f8      	ldr	r0, [r7, #12]
 801b6b4:	f7ff fb7e 	bl	801adb4 <lv_area_get_width>
 801b6b8:	4603      	mov	r3, r0
 801b6ba:	b29c      	uxth	r4, r3
 801b6bc:	68b8      	ldr	r0, [r7, #8]
 801b6be:	f7ff fb79 	bl	801adb4 <lv_area_get_width>
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	b29b      	uxth	r3, r3
 801b6c6:	1ae3      	subs	r3, r4, r3
 801b6c8:	b29b      	uxth	r3, r3
 801b6ca:	b21a      	sxth	r2, r3
 801b6cc:	683b      	ldr	r3, [r7, #0]
 801b6ce:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 801b6d0:	68b8      	ldr	r0, [r7, #8]
 801b6d2:	f7ff fb86 	bl	801ade2 <lv_area_get_height>
 801b6d6:	4603      	mov	r3, r0
 801b6d8:	b29b      	uxth	r3, r3
 801b6da:	425b      	negs	r3, r3
 801b6dc:	b29b      	uxth	r3, r3
 801b6de:	b21a      	sxth	r2, r3
 801b6e0:	683b      	ldr	r3, [r7, #0]
 801b6e2:	805a      	strh	r2, [r3, #2]
            break;
 801b6e4:	e0d1      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            res->x = 0;
 801b6e6:	683b      	ldr	r3, [r7, #0]
 801b6e8:	2200      	movs	r2, #0
 801b6ea:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base);
 801b6ec:	68f8      	ldr	r0, [r7, #12]
 801b6ee:	f7ff fb78 	bl	801ade2 <lv_area_get_height>
 801b6f2:	4603      	mov	r3, r0
 801b6f4:	461a      	mov	r2, r3
 801b6f6:	683b      	ldr	r3, [r7, #0]
 801b6f8:	805a      	strh	r2, [r3, #2]
            break;
 801b6fa:	e0c6      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_BOTTOM_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b6fc:	68f8      	ldr	r0, [r7, #12]
 801b6fe:	f7ff fb59 	bl	801adb4 <lv_area_get_width>
 801b702:	4603      	mov	r3, r0
 801b704:	2b00      	cmp	r3, #0
 801b706:	da00      	bge.n	801b70a <_lv_area_align+0x346>
 801b708:	3301      	adds	r3, #1
 801b70a:	105b      	asrs	r3, r3, #1
 801b70c:	b21b      	sxth	r3, r3
 801b70e:	b29c      	uxth	r4, r3
 801b710:	68b8      	ldr	r0, [r7, #8]
 801b712:	f7ff fb4f 	bl	801adb4 <lv_area_get_width>
 801b716:	4603      	mov	r3, r0
 801b718:	2b00      	cmp	r3, #0
 801b71a:	da00      	bge.n	801b71e <_lv_area_align+0x35a>
 801b71c:	3301      	adds	r3, #1
 801b71e:	105b      	asrs	r3, r3, #1
 801b720:	b21b      	sxth	r3, r3
 801b722:	b29b      	uxth	r3, r3
 801b724:	1ae3      	subs	r3, r4, r3
 801b726:	b29b      	uxth	r3, r3
 801b728:	b21a      	sxth	r2, r3
 801b72a:	683b      	ldr	r3, [r7, #0]
 801b72c:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base);
 801b72e:	68f8      	ldr	r0, [r7, #12]
 801b730:	f7ff fb57 	bl	801ade2 <lv_area_get_height>
 801b734:	4603      	mov	r3, r0
 801b736:	461a      	mov	r2, r3
 801b738:	683b      	ldr	r3, [r7, #0]
 801b73a:	805a      	strh	r2, [r3, #2]
            break;
 801b73c:	e0a5      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b73e:	68f8      	ldr	r0, [r7, #12]
 801b740:	f7ff fb38 	bl	801adb4 <lv_area_get_width>
 801b744:	4603      	mov	r3, r0
 801b746:	b29c      	uxth	r4, r3
 801b748:	68b8      	ldr	r0, [r7, #8]
 801b74a:	f7ff fb33 	bl	801adb4 <lv_area_get_width>
 801b74e:	4603      	mov	r3, r0
 801b750:	b29b      	uxth	r3, r3
 801b752:	1ae3      	subs	r3, r4, r3
 801b754:	b29b      	uxth	r3, r3
 801b756:	b21a      	sxth	r2, r3
 801b758:	683b      	ldr	r3, [r7, #0]
 801b75a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base);
 801b75c:	68f8      	ldr	r0, [r7, #12]
 801b75e:	f7ff fb40 	bl	801ade2 <lv_area_get_height>
 801b762:	4603      	mov	r3, r0
 801b764:	461a      	mov	r2, r3
 801b766:	683b      	ldr	r3, [r7, #0]
 801b768:	805a      	strh	r2, [r3, #2]
            break;
 801b76a:	e08e      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_LEFT_TOP:
            res->x = -lv_area_get_width(to_align);
 801b76c:	68b8      	ldr	r0, [r7, #8]
 801b76e:	f7ff fb21 	bl	801adb4 <lv_area_get_width>
 801b772:	4603      	mov	r3, r0
 801b774:	b29b      	uxth	r3, r3
 801b776:	425b      	negs	r3, r3
 801b778:	b29b      	uxth	r3, r3
 801b77a:	b21a      	sxth	r2, r3
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b780:	683b      	ldr	r3, [r7, #0]
 801b782:	2200      	movs	r2, #0
 801b784:	805a      	strh	r2, [r3, #2]
            break;
 801b786:	e080      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_LEFT_MID:
            res->x = -lv_area_get_width(to_align);
 801b788:	68b8      	ldr	r0, [r7, #8]
 801b78a:	f7ff fb13 	bl	801adb4 <lv_area_get_width>
 801b78e:	4603      	mov	r3, r0
 801b790:	b29b      	uxth	r3, r3
 801b792:	425b      	negs	r3, r3
 801b794:	b29b      	uxth	r3, r3
 801b796:	b21a      	sxth	r2, r3
 801b798:	683b      	ldr	r3, [r7, #0]
 801b79a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b79c:	68f8      	ldr	r0, [r7, #12]
 801b79e:	f7ff fb20 	bl	801ade2 <lv_area_get_height>
 801b7a2:	4603      	mov	r3, r0
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	da00      	bge.n	801b7aa <_lv_area_align+0x3e6>
 801b7a8:	3301      	adds	r3, #1
 801b7aa:	105b      	asrs	r3, r3, #1
 801b7ac:	b21b      	sxth	r3, r3
 801b7ae:	b29c      	uxth	r4, r3
 801b7b0:	68b8      	ldr	r0, [r7, #8]
 801b7b2:	f7ff fb16 	bl	801ade2 <lv_area_get_height>
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	da00      	bge.n	801b7be <_lv_area_align+0x3fa>
 801b7bc:	3301      	adds	r3, #1
 801b7be:	105b      	asrs	r3, r3, #1
 801b7c0:	b21b      	sxth	r3, r3
 801b7c2:	b29b      	uxth	r3, r3
 801b7c4:	1ae3      	subs	r3, r4, r3
 801b7c6:	b29b      	uxth	r3, r3
 801b7c8:	b21a      	sxth	r2, r3
 801b7ca:	683b      	ldr	r3, [r7, #0]
 801b7cc:	805a      	strh	r2, [r3, #2]
            break;
 801b7ce:	e05c      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            res->x = -lv_area_get_width(to_align);
 801b7d0:	68b8      	ldr	r0, [r7, #8]
 801b7d2:	f7ff faef 	bl	801adb4 <lv_area_get_width>
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	b29b      	uxth	r3, r3
 801b7da:	425b      	negs	r3, r3
 801b7dc:	b29b      	uxth	r3, r3
 801b7de:	b21a      	sxth	r2, r3
 801b7e0:	683b      	ldr	r3, [r7, #0]
 801b7e2:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b7e4:	68f8      	ldr	r0, [r7, #12]
 801b7e6:	f7ff fafc 	bl	801ade2 <lv_area_get_height>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	b29c      	uxth	r4, r3
 801b7ee:	68b8      	ldr	r0, [r7, #8]
 801b7f0:	f7ff faf7 	bl	801ade2 <lv_area_get_height>
 801b7f4:	4603      	mov	r3, r0
 801b7f6:	b29b      	uxth	r3, r3
 801b7f8:	1ae3      	subs	r3, r4, r3
 801b7fa:	b29b      	uxth	r3, r3
 801b7fc:	b21a      	sxth	r2, r3
 801b7fe:	683b      	ldr	r3, [r7, #0]
 801b800:	805a      	strh	r2, [r3, #2]
            break;
 801b802:	e042      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_RIGHT_TOP:
            res->x = lv_area_get_width(base);
 801b804:	68f8      	ldr	r0, [r7, #12]
 801b806:	f7ff fad5 	bl	801adb4 <lv_area_get_width>
 801b80a:	4603      	mov	r3, r0
 801b80c:	461a      	mov	r2, r3
 801b80e:	683b      	ldr	r3, [r7, #0]
 801b810:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b812:	683b      	ldr	r3, [r7, #0]
 801b814:	2200      	movs	r2, #0
 801b816:	805a      	strh	r2, [r3, #2]
            break;
 801b818:	e037      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_RIGHT_MID:
            res->x = lv_area_get_width(base);
 801b81a:	68f8      	ldr	r0, [r7, #12]
 801b81c:	f7ff faca 	bl	801adb4 <lv_area_get_width>
 801b820:	4603      	mov	r3, r0
 801b822:	461a      	mov	r2, r3
 801b824:	683b      	ldr	r3, [r7, #0]
 801b826:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b828:	68f8      	ldr	r0, [r7, #12]
 801b82a:	f7ff fada 	bl	801ade2 <lv_area_get_height>
 801b82e:	4603      	mov	r3, r0
 801b830:	2b00      	cmp	r3, #0
 801b832:	da00      	bge.n	801b836 <_lv_area_align+0x472>
 801b834:	3301      	adds	r3, #1
 801b836:	105b      	asrs	r3, r3, #1
 801b838:	b21b      	sxth	r3, r3
 801b83a:	b29c      	uxth	r4, r3
 801b83c:	68b8      	ldr	r0, [r7, #8]
 801b83e:	f7ff fad0 	bl	801ade2 <lv_area_get_height>
 801b842:	4603      	mov	r3, r0
 801b844:	2b00      	cmp	r3, #0
 801b846:	da00      	bge.n	801b84a <_lv_area_align+0x486>
 801b848:	3301      	adds	r3, #1
 801b84a:	105b      	asrs	r3, r3, #1
 801b84c:	b21b      	sxth	r3, r3
 801b84e:	b29b      	uxth	r3, r3
 801b850:	1ae3      	subs	r3, r4, r3
 801b852:	b29b      	uxth	r3, r3
 801b854:	b21a      	sxth	r2, r3
 801b856:	683b      	ldr	r3, [r7, #0]
 801b858:	805a      	strh	r2, [r3, #2]
            break;
 801b85a:	e016      	b.n	801b88a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            res->x = lv_area_get_width(base);
 801b85c:	68f8      	ldr	r0, [r7, #12]
 801b85e:	f7ff faa9 	bl	801adb4 <lv_area_get_width>
 801b862:	4603      	mov	r3, r0
 801b864:	461a      	mov	r2, r3
 801b866:	683b      	ldr	r3, [r7, #0]
 801b868:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b86a:	68f8      	ldr	r0, [r7, #12]
 801b86c:	f7ff fab9 	bl	801ade2 <lv_area_get_height>
 801b870:	4603      	mov	r3, r0
 801b872:	b29c      	uxth	r4, r3
 801b874:	68b8      	ldr	r0, [r7, #8]
 801b876:	f7ff fab4 	bl	801ade2 <lv_area_get_height>
 801b87a:	4603      	mov	r3, r0
 801b87c:	b29b      	uxth	r3, r3
 801b87e:	1ae3      	subs	r3, r4, r3
 801b880:	b29b      	uxth	r3, r3
 801b882:	b21a      	sxth	r2, r3
 801b884:	683b      	ldr	r3, [r7, #0]
 801b886:	805a      	strh	r2, [r3, #2]
            break;
 801b888:	bf00      	nop
    }

    res->x += base->x1;
 801b88a:	683b      	ldr	r3, [r7, #0]
 801b88c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b890:	b29a      	uxth	r2, r3
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b898:	b29b      	uxth	r3, r3
 801b89a:	4413      	add	r3, r2
 801b89c:	b29b      	uxth	r3, r3
 801b89e:	b21a      	sxth	r2, r3
 801b8a0:	683b      	ldr	r3, [r7, #0]
 801b8a2:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
 801b8a4:	683b      	ldr	r3, [r7, #0]
 801b8a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b8aa:	b29a      	uxth	r2, r3
 801b8ac:	68fb      	ldr	r3, [r7, #12]
 801b8ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b8b2:	b29b      	uxth	r3, r3
 801b8b4:	4413      	add	r3, r2
 801b8b6:	b29b      	uxth	r3, r3
 801b8b8:	b21a      	sxth	r2, r3
 801b8ba:	683b      	ldr	r3, [r7, #0]
 801b8bc:	805a      	strh	r2, [r3, #2]
}
 801b8be:	bf00      	nop
 801b8c0:	3714      	adds	r7, #20
 801b8c2:	46bd      	mov	sp, r7
 801b8c4:	bd90      	pop	{r4, r7, pc}
 801b8c6:	bf00      	nop

0801b8c8 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 801b8c8:	b480      	push	{r7}
 801b8ca:	b089      	sub	sp, #36	; 0x24
 801b8cc:	af00      	add	r7, sp, #0
 801b8ce:	6078      	str	r0, [r7, #4]
 801b8d0:	6039      	str	r1, [r7, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b8d8:	461a      	mov	r2, r3
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8e0:	1ad3      	subs	r3, r2, r3
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	da00      	bge.n	801b8e8 <lv_point_within_circle+0x20>
 801b8e6:	3301      	adds	r3, #1
 801b8e8:	105b      	asrs	r3, r3, #1
 801b8ea:	83fb      	strh	r3, [r7, #30]

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8f2:	b29a      	uxth	r2, r3
 801b8f4:	8bfb      	ldrh	r3, [r7, #30]
 801b8f6:	4413      	add	r3, r2
 801b8f8:	b29b      	uxth	r3, r3
 801b8fa:	83bb      	strh	r3, [r7, #28]
    lv_coord_t cy = area->y1 + r;
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b902:	b29a      	uxth	r2, r3
 801b904:	8bfb      	ldrh	r3, [r7, #30]
 801b906:	4413      	add	r3, r2
 801b908:	b29b      	uxth	r3, r3
 801b90a:	837b      	strh	r3, [r7, #26]

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
 801b90c:	683b      	ldr	r3, [r7, #0]
 801b90e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b912:	b29a      	uxth	r2, r3
 801b914:	8bbb      	ldrh	r3, [r7, #28]
 801b916:	1ad3      	subs	r3, r2, r3
 801b918:	b29b      	uxth	r3, r3
 801b91a:	833b      	strh	r3, [r7, #24]
    lv_coord_t py = p->y - cy;
 801b91c:	683b      	ldr	r3, [r7, #0]
 801b91e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b922:	b29a      	uxth	r2, r3
 801b924:	8b7b      	ldrh	r3, [r7, #26]
 801b926:	1ad3      	subs	r3, r2, r3
 801b928:	b29b      	uxth	r3, r3
 801b92a:	82fb      	strh	r3, [r7, #22]

    uint32_t r_sqrd = r * r;
 801b92c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b930:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801b934:	fb02 f303 	mul.w	r3, r2, r3
 801b938:	613b      	str	r3, [r7, #16]
    uint32_t dist = (px * px) + (py * py);
 801b93a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801b93e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801b942:	fb02 f203 	mul.w	r2, r2, r3
 801b946:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b94a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801b94e:	fb01 f303 	mul.w	r3, r1, r3
 801b952:	4413      	add	r3, r2
 801b954:	60fb      	str	r3, [r7, #12]

    if(dist <= r_sqrd)
 801b956:	68fa      	ldr	r2, [r7, #12]
 801b958:	693b      	ldr	r3, [r7, #16]
 801b95a:	429a      	cmp	r2, r3
 801b95c:	d801      	bhi.n	801b962 <lv_point_within_circle+0x9a>
        return true;
 801b95e:	2301      	movs	r3, #1
 801b960:	e000      	b.n	801b964 <lv_point_within_circle+0x9c>
    else
        return false;
 801b962:	2300      	movs	r3, #0
}
 801b964:	4618      	mov	r0, r3
 801b966:	3724      	adds	r7, #36	; 0x24
 801b968:	46bd      	mov	sp, r7
 801b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b96e:	4770      	bx	lr

0801b970 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801b970:	b480      	push	{r7}
 801b972:	b087      	sub	sp, #28
 801b974:	af00      	add	r7, sp, #0
 801b976:	60f8      	str	r0, [r7, #12]
 801b978:	60b9      	str	r1, [r7, #8]
 801b97a:	4613      	mov	r3, r2
 801b97c:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801b97e:	7bbb      	ldrb	r3, [r7, #14]
 801b980:	461a      	mov	r2, r3
 801b982:	79fb      	ldrb	r3, [r7, #7]
 801b984:	fb03 f202 	mul.w	r2, r3, r2
 801b988:	7abb      	ldrb	r3, [r7, #10]
 801b98a:	4619      	mov	r1, r3
 801b98c:	79fb      	ldrb	r3, [r7, #7]
 801b98e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801b992:	fb03 f301 	mul.w	r3, r3, r1
 801b996:	4413      	add	r3, r2
 801b998:	461a      	mov	r2, r3
 801b99a:	4613      	mov	r3, r2
 801b99c:	021b      	lsls	r3, r3, #8
 801b99e:	4413      	add	r3, r2
 801b9a0:	01db      	lsls	r3, r3, #7
 801b9a2:	4413      	add	r3, r2
 801b9a4:	0ddb      	lsrs	r3, r3, #23
 801b9a6:	b2db      	uxtb	r3, r3
 801b9a8:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801b9aa:	7b7b      	ldrb	r3, [r7, #13]
 801b9ac:	461a      	mov	r2, r3
 801b9ae:	79fb      	ldrb	r3, [r7, #7]
 801b9b0:	fb03 f202 	mul.w	r2, r3, r2
 801b9b4:	7a7b      	ldrb	r3, [r7, #9]
 801b9b6:	4619      	mov	r1, r3
 801b9b8:	79fb      	ldrb	r3, [r7, #7]
 801b9ba:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801b9be:	fb03 f301 	mul.w	r3, r3, r1
 801b9c2:	4413      	add	r3, r2
 801b9c4:	461a      	mov	r2, r3
 801b9c6:	4613      	mov	r3, r2
 801b9c8:	021b      	lsls	r3, r3, #8
 801b9ca:	4413      	add	r3, r2
 801b9cc:	01db      	lsls	r3, r3, #7
 801b9ce:	4413      	add	r3, r2
 801b9d0:	0ddb      	lsrs	r3, r3, #23
 801b9d2:	b2db      	uxtb	r3, r3
 801b9d4:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801b9d6:	7b3b      	ldrb	r3, [r7, #12]
 801b9d8:	461a      	mov	r2, r3
 801b9da:	79fb      	ldrb	r3, [r7, #7]
 801b9dc:	fb03 f202 	mul.w	r2, r3, r2
 801b9e0:	7a3b      	ldrb	r3, [r7, #8]
 801b9e2:	4619      	mov	r1, r3
 801b9e4:	79fb      	ldrb	r3, [r7, #7]
 801b9e6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801b9ea:	fb03 f301 	mul.w	r3, r3, r1
 801b9ee:	4413      	add	r3, r2
 801b9f0:	461a      	mov	r2, r3
 801b9f2:	4613      	mov	r3, r2
 801b9f4:	021b      	lsls	r3, r3, #8
 801b9f6:	4413      	add	r3, r2
 801b9f8:	01db      	lsls	r3, r3, #7
 801b9fa:	4413      	add	r3, r2
 801b9fc:	0ddb      	lsrs	r3, r3, #23
 801b9fe:	b2db      	uxtb	r3, r3
 801ba00:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 801ba02:	23ff      	movs	r3, #255	; 0xff
 801ba04:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801ba06:	697b      	ldr	r3, [r7, #20]
}
 801ba08:	4618      	mov	r0, r3
 801ba0a:	371c      	adds	r7, #28
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba12:	4770      	bx	lr

0801ba14 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 801ba14:	b480      	push	{r7}
 801ba16:	b085      	sub	sp, #20
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	60f8      	str	r0, [r7, #12]
 801ba1c:	60b9      	str	r1, [r7, #8]
 801ba1e:	607a      	str	r2, [r7, #4]
        *buf = color;
        buf++;
        px_num --;
    }
#else
    while(px_num > 16) {
 801ba20:	e062      	b.n	801bae8 <lv_color_fill+0xd4>
        *buf = color;
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	68ba      	ldr	r2, [r7, #8]
 801ba26:	601a      	str	r2, [r3, #0]
        buf++;
 801ba28:	68fb      	ldr	r3, [r7, #12]
 801ba2a:	3304      	adds	r3, #4
 801ba2c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba2e:	68fb      	ldr	r3, [r7, #12]
 801ba30:	68ba      	ldr	r2, [r7, #8]
 801ba32:	601a      	str	r2, [r3, #0]
        buf++;
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	3304      	adds	r3, #4
 801ba38:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba3a:	68fb      	ldr	r3, [r7, #12]
 801ba3c:	68ba      	ldr	r2, [r7, #8]
 801ba3e:	601a      	str	r2, [r3, #0]
        buf++;
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	3304      	adds	r3, #4
 801ba44:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	68ba      	ldr	r2, [r7, #8]
 801ba4a:	601a      	str	r2, [r3, #0]
        buf++;
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	3304      	adds	r3, #4
 801ba50:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	68ba      	ldr	r2, [r7, #8]
 801ba56:	601a      	str	r2, [r3, #0]
        buf++;
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	3304      	adds	r3, #4
 801ba5c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	68ba      	ldr	r2, [r7, #8]
 801ba62:	601a      	str	r2, [r3, #0]
        buf++;
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	3304      	adds	r3, #4
 801ba68:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	68ba      	ldr	r2, [r7, #8]
 801ba6e:	601a      	str	r2, [r3, #0]
        buf++;
 801ba70:	68fb      	ldr	r3, [r7, #12]
 801ba72:	3304      	adds	r3, #4
 801ba74:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba76:	68fb      	ldr	r3, [r7, #12]
 801ba78:	68ba      	ldr	r2, [r7, #8]
 801ba7a:	601a      	str	r2, [r3, #0]
        buf++;
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	3304      	adds	r3, #4
 801ba80:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	68ba      	ldr	r2, [r7, #8]
 801ba86:	601a      	str	r2, [r3, #0]
        buf++;
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	3304      	adds	r3, #4
 801ba8c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	68ba      	ldr	r2, [r7, #8]
 801ba92:	601a      	str	r2, [r3, #0]
        buf++;
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	3304      	adds	r3, #4
 801ba98:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	68ba      	ldr	r2, [r7, #8]
 801ba9e:	601a      	str	r2, [r3, #0]
        buf++;
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	3304      	adds	r3, #4
 801baa4:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	68ba      	ldr	r2, [r7, #8]
 801baaa:	601a      	str	r2, [r3, #0]
        buf++;
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	3304      	adds	r3, #4
 801bab0:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	68ba      	ldr	r2, [r7, #8]
 801bab6:	601a      	str	r2, [r3, #0]
        buf++;
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	3304      	adds	r3, #4
 801babc:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	68ba      	ldr	r2, [r7, #8]
 801bac2:	601a      	str	r2, [r3, #0]
        buf++;
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	3304      	adds	r3, #4
 801bac8:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	68ba      	ldr	r2, [r7, #8]
 801bace:	601a      	str	r2, [r3, #0]
        buf++;
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	3304      	adds	r3, #4
 801bad4:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	68ba      	ldr	r2, [r7, #8]
 801bada:	601a      	str	r2, [r3, #0]
        buf++;
 801badc:	68fb      	ldr	r3, [r7, #12]
 801bade:	3304      	adds	r3, #4
 801bae0:	60fb      	str	r3, [r7, #12]

        px_num -= 16;
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	3b10      	subs	r3, #16
 801bae6:	607b      	str	r3, [r7, #4]
    while(px_num > 16) {
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	2b10      	cmp	r3, #16
 801baec:	d899      	bhi.n	801ba22 <lv_color_fill+0xe>
    }
    while(px_num) {
 801baee:	e008      	b.n	801bb02 <lv_color_fill+0xee>
        *buf = color;
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	68ba      	ldr	r2, [r7, #8]
 801baf4:	601a      	str	r2, [r3, #0]
        buf++;
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	3304      	adds	r3, #4
 801bafa:	60fb      	str	r3, [r7, #12]
        px_num --;
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	3b01      	subs	r3, #1
 801bb00:	607b      	str	r3, [r7, #4]
    while(px_num) {
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d1f3      	bne.n	801baf0 <lv_color_fill+0xdc>
    }
#endif
}
 801bb08:	bf00      	nop
 801bb0a:	3714      	adds	r7, #20
 801bb0c:	46bd      	mov	sp, r7
 801bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb12:	4770      	bx	lr

0801bb14 <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
 801bb14:	b580      	push	{r7, lr}
 801bb16:	b082      	sub	sp, #8
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	6078      	str	r0, [r7, #4]
 801bb1c:	460a      	mov	r2, r1
 801bb1e:	70fa      	strb	r2, [r7, #3]
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
 801bb20:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 801bb24:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 801bb28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801bb2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801bb30:	78fa      	ldrb	r2, [r7, #3]
 801bb32:	6879      	ldr	r1, [r7, #4]
 801bb34:	4618      	mov	r0, r3
 801bb36:	f7ff ff1b 	bl	801b970 <lv_color_mix>
 801bb3a:	4603      	mov	r3, r0
}
 801bb3c:	4618      	mov	r0, r3
 801bb3e:	3708      	adds	r7, #8
 801bb40:	46bd      	mov	sp, r7
 801bb42:	bd80      	pop	{r7, pc}

0801bb44 <lv_color_darken>:

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
 801bb44:	b580      	push	{r7, lr}
 801bb46:	b082      	sub	sp, #8
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
 801bb4c:	460a      	mov	r2, r1
 801bb4e:	70fa      	strb	r2, [r7, #3]
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
 801bb50:	f36f 0307 	bfc	r3, #0, #8
 801bb54:	f36f 230f 	bfc	r3, #8, #8
 801bb58:	f36f 4317 	bfc	r3, #16, #8
 801bb5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801bb60:	78fa      	ldrb	r2, [r7, #3]
 801bb62:	6879      	ldr	r1, [r7, #4]
 801bb64:	4618      	mov	r0, r3
 801bb66:	f7ff ff03 	bl	801b970 <lv_color_mix>
 801bb6a:	4603      	mov	r3, r0
}
 801bb6c:	4618      	mov	r0, r3
 801bb6e:	3708      	adds	r7, #8
 801bb70:	46bd      	mov	sp, r7
 801bb72:	bd80      	pop	{r7, pc}

0801bb74 <lv_debug_check_null>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

bool lv_debug_check_null(const void * p)
{
 801bb74:	b480      	push	{r7}
 801bb76:	b083      	sub	sp, #12
 801bb78:	af00      	add	r7, sp, #0
 801bb7a:	6078      	str	r0, [r7, #4]
    if(p) return true;
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d001      	beq.n	801bb86 <lv_debug_check_null+0x12>
 801bb82:	2301      	movs	r3, #1
 801bb84:	e000      	b.n	801bb88 <lv_debug_check_null+0x14>

    return false;
 801bb86:	2300      	movs	r3, #0
}
 801bb88:	4618      	mov	r0, r3
 801bb8a:	370c      	adds	r7, #12
 801bb8c:	46bd      	mov	sp, r7
 801bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb92:	4770      	bx	lr

0801bb94 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
 801bb94:	b580      	push	{r7, lr}
 801bb96:	b0c8      	sub	sp, #288	; 0x120
 801bb98:	af00      	add	r7, sp, #0
 801bb9a:	f107 010c 	add.w	r1, r7, #12
 801bb9e:	6008      	str	r0, [r1, #0]
 801bba0:	4639      	mov	r1, r7
 801bba2:	e9c1 2300 	strd	r2, r3, [r1]
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
 801bba6:	f107 030c 	add.w	r3, r7, #12
 801bbaa:	6818      	ldr	r0, [r3, #0]
 801bbac:	f7e4 fb36 	bl	800021c <strlen>
 801bbb0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    uint32_t value_len = sizeof(unsigned long int);
 801bbb4:	2304      	movs	r3, #4
 801bbb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    if(msg_len < 230) {
 801bbba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bbbe:	2be5      	cmp	r3, #229	; 0xe5
 801bbc0:	d871      	bhi.n	801bca6 <lv_debug_log_error+0x112>
        char buf[255];
        char * bufp = buf;
 801bbc2:	f107 0310 	add.w	r3, r7, #16
 801bbc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        /*Add the function name*/
        _lv_memcpy(bufp, msg, msg_len);
 801bbca:	f107 030c 	add.w	r3, r7, #12
 801bbce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bbd2:	6819      	ldr	r1, [r3, #0]
 801bbd4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801bbd8:	f001 f81e 	bl	801cc18 <_lv_memcpy>
        bufp += msg_len;
 801bbdc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801bbe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bbe4:	4413      	add	r3, r2
 801bbe6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        /*Add value in hey*/
        *bufp = ' ';
 801bbea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bbee:	2220      	movs	r2, #32
 801bbf0:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801bbf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bbf6:	3301      	adds	r3, #1
 801bbf8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = '(';
 801bbfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc00:	2228      	movs	r2, #40	; 0x28
 801bc02:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801bc04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc08:	3301      	adds	r3, #1
 801bc0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = '0';
 801bc0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc12:	2230      	movs	r2, #48	; 0x30
 801bc14:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801bc16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc1a:	3301      	adds	r3, #1
 801bc1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = 'x';
 801bc20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc24:	2278      	movs	r2, #120	; 0x78
 801bc26:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801bc28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc2c:	3301      	adds	r3, #1
 801bc2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        int8_t i;
        for(i = value_len * 2 - 1; i >= 0; i--) {
 801bc32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bc36:	b2db      	uxtb	r3, r3
 801bc38:	005b      	lsls	r3, r3, #1
 801bc3a:	b2db      	uxtb	r3, r3
 801bc3c:	3b01      	subs	r3, #1
 801bc3e:	b2db      	uxtb	r3, r3
 801bc40:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 801bc44:	e01e      	b.n	801bc84 <lv_debug_log_error+0xf0>
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
 801bc46:	463b      	mov	r3, r7
 801bc48:	681a      	ldr	r2, [r3, #0]
 801bc4a:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	fa22 f303 	lsr.w	r3, r2, r3
 801bc54:	b2db      	uxtb	r3, r3
 801bc56:	f003 030f 	and.w	r3, r3, #15
 801bc5a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

            *bufp = hex[x];
 801bc5e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 801bc62:	4a13      	ldr	r2, [pc, #76]	; (801bcb0 <lv_debug_log_error+0x11c>)
 801bc64:	5cd2      	ldrb	r2, [r2, r3]
 801bc66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc6a:	701a      	strb	r2, [r3, #0]
            bufp++;
 801bc6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc70:	3301      	adds	r3, #1
 801bc72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for(i = value_len * 2 - 1; i >= 0; i--) {
 801bc76:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 801bc7a:	b2db      	uxtb	r3, r3
 801bc7c:	3b01      	subs	r3, #1
 801bc7e:	b2db      	uxtb	r3, r3
 801bc80:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 801bc84:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	dadc      	bge.n	801bc46 <lv_debug_log_error+0xb2>
        }

        *bufp = ')';
 801bc8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc90:	2229      	movs	r2, #41	; 0x29
 801bc92:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801bc94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc98:	3301      	adds	r3, #1
 801bc9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        *bufp = '\0';
 801bc9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bca2:	2200      	movs	r2, #0
 801bca4:	701a      	strb	r2, [r3, #0]
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
 801bca6:	bf00      	nop
 801bca8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 801bcac:	46bd      	mov	sp, r7
 801bcae:	bd80      	pop	{r7, pc}
 801bcb0:	080307e8 	.word	0x080307e8

0801bcb4 <_lv_fs_init>:

/**
 * Initialize the File system interface
 */
void _lv_fs_init(void)
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 801bcb8:	2144      	movs	r1, #68	; 0x44
 801bcba:	4802      	ldr	r0, [pc, #8]	; (801bcc4 <_lv_fs_init+0x10>)
 801bcbc:	f000 f99a 	bl	801bff4 <_lv_ll_init>
}
 801bcc0:	bf00      	nop
 801bcc2:	bd80      	pop	{r7, pc}
 801bcc4:	20021838 	.word	0x20021838

0801bcc8 <lv_fs_open>:
 * @param path path to the file beginning with the driver letter (e.g. S:/folder/file.txt)
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 801bcc8:	b590      	push	{r4, r7, lr}
 801bcca:	b089      	sub	sp, #36	; 0x24
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	60f8      	str	r0, [r7, #12]
 801bcd0:	60b9      	str	r1, [r7, #8]
 801bcd2:	4613      	mov	r3, r2
 801bcd4:	71fb      	strb	r3, [r7, #7]
    file_p->drv    = NULL;
 801bcd6:	68fb      	ldr	r3, [r7, #12]
 801bcd8:	2200      	movs	r2, #0
 801bcda:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 801bcdc:	68fb      	ldr	r3, [r7, #12]
 801bcde:	2200      	movs	r2, #0
 801bce0:	601a      	str	r2, [r3, #0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 801bce2:	68bb      	ldr	r3, [r7, #8]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d101      	bne.n	801bcec <lv_fs_open+0x24>
 801bce8:	230b      	movs	r3, #11
 801bcea:	e086      	b.n	801bdfa <lv_fs_open+0x132>

    char letter = path[0];
 801bcec:	68bb      	ldr	r3, [r7, #8]
 801bcee:	781b      	ldrb	r3, [r3, #0]
 801bcf0:	77fb      	strb	r3, [r7, #31]

    file_p->drv = lv_fs_get_drv(letter);
 801bcf2:	7ffb      	ldrb	r3, [r7, #31]
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	f000 f90b 	bl	801bf10 <lv_fs_get_drv>
 801bcfa:	4602      	mov	r2, r0
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	605a      	str	r2, [r3, #4]

    if(file_p->drv == NULL) {
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	685b      	ldr	r3, [r3, #4]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d101      	bne.n	801bd0c <lv_fs_open+0x44>
        return LV_FS_RES_NOT_EX;
 801bd08:	2303      	movs	r3, #3
 801bd0a:	e076      	b.n	801bdfa <lv_fs_open+0x132>
    }

    if(file_p->drv->ready_cb != NULL) {
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	685b      	ldr	r3, [r3, #4]
 801bd10:	689b      	ldr	r3, [r3, #8]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d011      	beq.n	801bd3a <lv_fs_open+0x72>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	685b      	ldr	r3, [r3, #4]
 801bd1a:	689b      	ldr	r3, [r3, #8]
 801bd1c:	68fa      	ldr	r2, [r7, #12]
 801bd1e:	6852      	ldr	r2, [r2, #4]
 801bd20:	4610      	mov	r0, r2
 801bd22:	4798      	blx	r3
 801bd24:	4603      	mov	r3, r0
 801bd26:	f083 0301 	eor.w	r3, r3, #1
 801bd2a:	b2db      	uxtb	r3, r3
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d004      	beq.n	801bd3a <lv_fs_open+0x72>
            file_p->drv = NULL;
 801bd30:	68fb      	ldr	r3, [r7, #12]
 801bd32:	2200      	movs	r2, #0
 801bd34:	605a      	str	r2, [r3, #4]
            return LV_FS_RES_HW_ERR;
 801bd36:	2301      	movs	r3, #1
 801bd38:	e05f      	b.n	801bdfa <lv_fs_open+0x132>
        }
    }

    if(file_p->drv->open_cb == NULL) {
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	685b      	ldr	r3, [r3, #4]
 801bd3e:	68db      	ldr	r3, [r3, #12]
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d104      	bne.n	801bd4e <lv_fs_open+0x86>
        file_p->drv = NULL;
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	2200      	movs	r2, #0
 801bd48:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_NOT_IMP;
 801bd4a:	2309      	movs	r3, #9
 801bd4c:	e055      	b.n	801bdfa <lv_fs_open+0x132>
    }

    const char * real_path = lv_fs_get_real_path(path);
 801bd4e:	68b8      	ldr	r0, [r7, #8]
 801bd50:	f000 f92e 	bl	801bfb0 <lv_fs_get_real_path>
 801bd54:	61b8      	str	r0, [r7, #24]

    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	685b      	ldr	r3, [r3, #4]
 801bd5a:	885b      	ldrh	r3, [r3, #2]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d10a      	bne.n	801bd76 <lv_fs_open+0xae>
        /*Pass file_d's address to open_cb, so the implementor can allocate memory byself*/
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	685b      	ldr	r3, [r3, #4]
 801bd64:	68dc      	ldr	r4, [r3, #12]
 801bd66:	68fb      	ldr	r3, [r7, #12]
 801bd68:	6858      	ldr	r0, [r3, #4]
 801bd6a:	68f9      	ldr	r1, [r7, #12]
 801bd6c:	79fb      	ldrb	r3, [r7, #7]
 801bd6e:	69ba      	ldr	r2, [r7, #24]
 801bd70:	47a0      	blx	r4
 801bd72:	4603      	mov	r3, r0
 801bd74:	e041      	b.n	801bdfa <lv_fs_open+0x132>
    }

    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	685b      	ldr	r3, [r3, #4]
 801bd7a:	885b      	ldrh	r3, [r3, #2]
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	f000 fc85 	bl	801c68c <lv_mem_alloc>
 801bd82:	4602      	mov	r2, r0
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MEM(file_p->file_d);
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	f7ff fef1 	bl	801bb74 <lv_debug_check_null>
 801bd92:	4603      	mov	r3, r0
 801bd94:	f083 0301 	eor.w	r3, r3, #1
 801bd98:	b2db      	uxtb	r3, r3
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d009      	beq.n	801bdb2 <lv_fs_open+0xea>
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	f04f 0400 	mov.w	r4, #0
 801bda6:	461a      	mov	r2, r3
 801bda8:	4623      	mov	r3, r4
 801bdaa:	4816      	ldr	r0, [pc, #88]	; (801be04 <lv_fs_open+0x13c>)
 801bdac:	f7ff fef2 	bl	801bb94 <lv_debug_log_error>
 801bdb0:	e7fe      	b.n	801bdb0 <lv_fs_open+0xe8>
    if(file_p->file_d == NULL) {
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d104      	bne.n	801bdc4 <lv_fs_open+0xfc>
        file_p->drv = NULL;
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 801bdc0:	230a      	movs	r3, #10
 801bdc2:	e01a      	b.n	801bdfa <lv_fs_open+0x132>
    }

    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	685b      	ldr	r3, [r3, #4]
 801bdc8:	68dc      	ldr	r4, [r3, #12]
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	6858      	ldr	r0, [r3, #4]
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	6819      	ldr	r1, [r3, #0]
 801bdd2:	79fb      	ldrb	r3, [r7, #7]
 801bdd4:	69ba      	ldr	r2, [r7, #24]
 801bdd6:	47a0      	blx	r4
 801bdd8:	4603      	mov	r3, r0
 801bdda:	75fb      	strb	r3, [r7, #23]

    if(res != LV_FS_RES_OK) {
 801bddc:	7dfb      	ldrb	r3, [r7, #23]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d00a      	beq.n	801bdf8 <lv_fs_open+0x130>
        lv_mem_free(file_p->file_d);
 801bde2:	68fb      	ldr	r3, [r7, #12]
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	4618      	mov	r0, r3
 801bde8:	f000 fc9a 	bl	801c720 <lv_mem_free>
        file_p->file_d = NULL;
 801bdec:	68fb      	ldr	r3, [r7, #12]
 801bdee:	2200      	movs	r2, #0
 801bdf0:	601a      	str	r2, [r3, #0]
        file_p->drv    = NULL;
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	2200      	movs	r2, #0
 801bdf6:	605a      	str	r2, [r3, #4]
    }

    return res;
 801bdf8:	7dfb      	ldrb	r3, [r7, #23]
}
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	3724      	adds	r7, #36	; 0x24
 801bdfe:	46bd      	mov	sp, r7
 801be00:	bd90      	pop	{r4, r7, pc}
 801be02:	bf00      	nop
 801be04:	0802d174 	.word	0x0802d174

0801be08 <lv_fs_close>:
 * Close an already opened file
 * @param file_p pointer to a lv_fs_file_t variable
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b084      	sub	sp, #16
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	685b      	ldr	r3, [r3, #4]
 801be14:	2b00      	cmp	r3, #0
 801be16:	d101      	bne.n	801be1c <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 801be18:	230b      	movs	r3, #11
 801be1a:	e01d      	b.n	801be58 <lv_fs_close+0x50>
    }

    if(file_p->drv->close_cb == NULL) {
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	685b      	ldr	r3, [r3, #4]
 801be20:	691b      	ldr	r3, [r3, #16]
 801be22:	2b00      	cmp	r3, #0
 801be24:	d101      	bne.n	801be2a <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 801be26:	2309      	movs	r3, #9
 801be28:	e016      	b.n	801be58 <lv_fs_close+0x50>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	685b      	ldr	r3, [r3, #4]
 801be2e:	691b      	ldr	r3, [r3, #16]
 801be30:	687a      	ldr	r2, [r7, #4]
 801be32:	6850      	ldr	r0, [r2, #4]
 801be34:	687a      	ldr	r2, [r7, #4]
 801be36:	6812      	ldr	r2, [r2, #0]
 801be38:	4611      	mov	r1, r2
 801be3a:	4798      	blx	r3
 801be3c:	4603      	mov	r3, r0
 801be3e:	73fb      	strb	r3, [r7, #15]

    lv_mem_free(file_p->file_d); /*Clean up*/
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	4618      	mov	r0, r3
 801be46:	f000 fc6b 	bl	801c720 <lv_mem_free>
    file_p->file_d = NULL;
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	2200      	movs	r2, #0
 801be4e:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	2200      	movs	r2, #0
 801be54:	605a      	str	r2, [r3, #4]

    return res;
 801be56:	7bfb      	ldrb	r3, [r7, #15]
}
 801be58:	4618      	mov	r0, r3
 801be5a:	3710      	adds	r7, #16
 801be5c:	46bd      	mov	sp, r7
 801be5e:	bd80      	pop	{r7, pc}

0801be60 <lv_fs_read>:
 * @param btr Bytes To Read
 * @param br the number of real read bytes (Bytes Read). NULL if unused.
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 801be60:	b590      	push	{r4, r7, lr}
 801be62:	b089      	sub	sp, #36	; 0x24
 801be64:	af02      	add	r7, sp, #8
 801be66:	60f8      	str	r0, [r7, #12]
 801be68:	60b9      	str	r1, [r7, #8]
 801be6a:	607a      	str	r2, [r7, #4]
 801be6c:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 801be6e:	683b      	ldr	r3, [r7, #0]
 801be70:	2b00      	cmp	r3, #0
 801be72:	d002      	beq.n	801be7a <lv_fs_read+0x1a>
 801be74:	683b      	ldr	r3, [r7, #0]
 801be76:	2200      	movs	r2, #0
 801be78:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	685b      	ldr	r3, [r3, #4]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d101      	bne.n	801be86 <lv_fs_read+0x26>
 801be82:	230b      	movs	r3, #11
 801be84:	e01e      	b.n	801bec4 <lv_fs_read+0x64>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	685b      	ldr	r3, [r3, #4]
 801be8a:	699b      	ldr	r3, [r3, #24]
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d101      	bne.n	801be94 <lv_fs_read+0x34>
 801be90:	2309      	movs	r3, #9
 801be92:	e017      	b.n	801bec4 <lv_fs_read+0x64>

    uint32_t br_tmp = 0;
 801be94:	2300      	movs	r3, #0
 801be96:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	685b      	ldr	r3, [r3, #4]
 801be9c:	699c      	ldr	r4, [r3, #24]
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	6858      	ldr	r0, [r3, #4]
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	6819      	ldr	r1, [r3, #0]
 801bea6:	f107 0310 	add.w	r3, r7, #16
 801beaa:	9300      	str	r3, [sp, #0]
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	68ba      	ldr	r2, [r7, #8]
 801beb0:	47a0      	blx	r4
 801beb2:	4603      	mov	r3, r0
 801beb4:	75fb      	strb	r3, [r7, #23]
    if(br != NULL) *br = br_tmp;
 801beb6:	683b      	ldr	r3, [r7, #0]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d002      	beq.n	801bec2 <lv_fs_read+0x62>
 801bebc:	693a      	ldr	r2, [r7, #16]
 801bebe:	683b      	ldr	r3, [r7, #0]
 801bec0:	601a      	str	r2, [r3, #0]

    return res;
 801bec2:	7dfb      	ldrb	r3, [r7, #23]
}
 801bec4:	4618      	mov	r0, r3
 801bec6:	371c      	adds	r7, #28
 801bec8:	46bd      	mov	sp, r7
 801beca:	bd90      	pop	{r4, r7, pc}

0801becc <lv_fs_seek>:
 * @param file_p pointer to a lv_fs_file_t variable
 * @param pos the new position expressed in bytes index (0: start of file)
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos)
{
 801becc:	b580      	push	{r7, lr}
 801bece:	b084      	sub	sp, #16
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	6078      	str	r0, [r7, #4]
 801bed4:	6039      	str	r1, [r7, #0]
    if(file_p->drv == NULL) {
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	685b      	ldr	r3, [r3, #4]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d101      	bne.n	801bee2 <lv_fs_seek+0x16>
        return LV_FS_RES_INV_PARAM;
 801bede:	230b      	movs	r3, #11
 801bee0:	e012      	b.n	801bf08 <lv_fs_seek+0x3c>
    }

    if(file_p->drv->seek_cb == NULL) {
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	685b      	ldr	r3, [r3, #4]
 801bee6:	6a1b      	ldr	r3, [r3, #32]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d101      	bne.n	801bef0 <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 801beec:	2309      	movs	r3, #9
 801beee:	e00b      	b.n	801bf08 <lv_fs_seek+0x3c>
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	685b      	ldr	r3, [r3, #4]
 801bef4:	6a1b      	ldr	r3, [r3, #32]
 801bef6:	687a      	ldr	r2, [r7, #4]
 801bef8:	6850      	ldr	r0, [r2, #4]
 801befa:	687a      	ldr	r2, [r7, #4]
 801befc:	6811      	ldr	r1, [r2, #0]
 801befe:	683a      	ldr	r2, [r7, #0]
 801bf00:	4798      	blx	r3
 801bf02:	4603      	mov	r3, r0
 801bf04:	73fb      	strb	r3, [r7, #15]

    return res;
 801bf06:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf08:	4618      	mov	r0, r3
 801bf0a:	3710      	adds	r7, #16
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	bd80      	pop	{r7, pc}

0801bf10 <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b084      	sub	sp, #16
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	4603      	mov	r3, r0
 801bf18:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t * drv;

    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 801bf1a:	480c      	ldr	r0, [pc, #48]	; (801bf4c <lv_fs_get_drv+0x3c>)
 801bf1c:	f000 f9e0 	bl	801c2e0 <_lv_ll_get_head>
 801bf20:	60f8      	str	r0, [r7, #12]
 801bf22:	e00b      	b.n	801bf3c <lv_fs_get_drv+0x2c>
        if(drv->letter == letter) {
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	781b      	ldrb	r3, [r3, #0]
 801bf28:	79fa      	ldrb	r2, [r7, #7]
 801bf2a:	429a      	cmp	r2, r3
 801bf2c:	d101      	bne.n	801bf32 <lv_fs_get_drv+0x22>
            return drv;
 801bf2e:	68fb      	ldr	r3, [r7, #12]
 801bf30:	e008      	b.n	801bf44 <lv_fs_get_drv+0x34>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 801bf32:	68f9      	ldr	r1, [r7, #12]
 801bf34:	4805      	ldr	r0, [pc, #20]	; (801bf4c <lv_fs_get_drv+0x3c>)
 801bf36:	f000 f9f9 	bl	801c32c <_lv_ll_get_next>
 801bf3a:	60f8      	str	r0, [r7, #12]
 801bf3c:	68fb      	ldr	r3, [r7, #12]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d1f0      	bne.n	801bf24 <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 801bf42:	2300      	movs	r3, #0
}
 801bf44:	4618      	mov	r0, r3
 801bf46:	3710      	adds	r7, #16
 801bf48:	46bd      	mov	sp, r7
 801bf4a:	bd80      	pop	{r7, pc}
 801bf4c:	20021838 	.word	0x20021838

0801bf50 <lv_fs_get_ext>:
 * Return with the extension of the filename
 * @param fn string with a filename
 * @return pointer to the beginning extension or empty string if no extension
 */
const char * lv_fs_get_ext(const char * fn)
{
 801bf50:	b580      	push	{r7, lr}
 801bf52:	b084      	sub	sp, #16
 801bf54:	af00      	add	r7, sp, #0
 801bf56:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 801bf58:	6878      	ldr	r0, [r7, #4]
 801bf5a:	f7e4 f95f 	bl	800021c <strlen>
 801bf5e:	60f8      	str	r0, [r7, #12]
 801bf60:	e01b      	b.n	801bf9a <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 801bf62:	687a      	ldr	r2, [r7, #4]
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	4413      	add	r3, r2
 801bf68:	781b      	ldrb	r3, [r3, #0]
 801bf6a:	2b2e      	cmp	r3, #46	; 0x2e
 801bf6c:	d104      	bne.n	801bf78 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 801bf6e:	68fb      	ldr	r3, [r7, #12]
 801bf70:	3301      	adds	r3, #1
 801bf72:	687a      	ldr	r2, [r7, #4]
 801bf74:	4413      	add	r3, r2
 801bf76:	e014      	b.n	801bfa2 <lv_fs_get_ext+0x52>
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
 801bf78:	687a      	ldr	r2, [r7, #4]
 801bf7a:	68fb      	ldr	r3, [r7, #12]
 801bf7c:	4413      	add	r3, r2
 801bf7e:	781b      	ldrb	r3, [r3, #0]
 801bf80:	2b2f      	cmp	r3, #47	; 0x2f
 801bf82:	d005      	beq.n	801bf90 <lv_fs_get_ext+0x40>
 801bf84:	687a      	ldr	r2, [r7, #4]
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	4413      	add	r3, r2
 801bf8a:	781b      	ldrb	r3, [r3, #0]
 801bf8c:	2b5c      	cmp	r3, #92	; 0x5c
 801bf8e:	d101      	bne.n	801bf94 <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 801bf90:	4b06      	ldr	r3, [pc, #24]	; (801bfac <lv_fs_get_ext+0x5c>)
 801bf92:	e006      	b.n	801bfa2 <lv_fs_get_ext+0x52>
    for(i = strlen(fn); i > 0; i--) {
 801bf94:	68fb      	ldr	r3, [r7, #12]
 801bf96:	3b01      	subs	r3, #1
 801bf98:	60fb      	str	r3, [r7, #12]
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d1e0      	bne.n	801bf62 <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name. */
 801bfa0:	4b02      	ldr	r3, [pc, #8]	; (801bfac <lv_fs_get_ext+0x5c>)
}
 801bfa2:	4618      	mov	r0, r3
 801bfa4:	3710      	adds	r7, #16
 801bfa6:	46bd      	mov	sp, r7
 801bfa8:	bd80      	pop	{r7, pc}
 801bfaa:	bf00      	nop
 801bfac:	0802d184 	.word	0x0802d184

0801bfb0 <lv_fs_get_real_path>:
 * Leave the driver letters and / or \ letters from beginning of the path
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 801bfb0:	b480      	push	{r7}
 801bfb2:	b083      	sub	sp, #12
 801bfb4:	af00      	add	r7, sp, #0
 801bfb6:	6078      	str	r0, [r7, #4]
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	3301      	adds	r3, #1
 801bfbc:	607b      	str	r3, [r7, #4]

    while(*path != '\0') {
 801bfbe:	e00e      	b.n	801bfde <lv_fs_get_real_path+0x2e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	781b      	ldrb	r3, [r3, #0]
 801bfc4:	2b3a      	cmp	r3, #58	; 0x3a
 801bfc6:	d007      	beq.n	801bfd8 <lv_fs_get_real_path+0x28>
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	781b      	ldrb	r3, [r3, #0]
 801bfcc:	2b5c      	cmp	r3, #92	; 0x5c
 801bfce:	d003      	beq.n	801bfd8 <lv_fs_get_real_path+0x28>
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	781b      	ldrb	r3, [r3, #0]
 801bfd4:	2b2f      	cmp	r3, #47	; 0x2f
 801bfd6:	d106      	bne.n	801bfe6 <lv_fs_get_real_path+0x36>
            path++;
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	3301      	adds	r3, #1
 801bfdc:	607b      	str	r3, [r7, #4]
    while(*path != '\0') {
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	781b      	ldrb	r3, [r3, #0]
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d1ec      	bne.n	801bfc0 <lv_fs_get_real_path+0x10>
        else {
            break;
        }
    }

    return path;
 801bfe6:	687b      	ldr	r3, [r7, #4]
}
 801bfe8:	4618      	mov	r0, r3
 801bfea:	370c      	adds	r7, #12
 801bfec:	46bd      	mov	sp, r7
 801bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bff2:	4770      	bx	lr

0801bff4 <_lv_ll_init>:
 * Initialize linked list
 * @param ll_dsc pointer to ll_dsc variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 801bff4:	b480      	push	{r7}
 801bff6:	b083      	sub	sp, #12
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	6078      	str	r0, [r7, #4]
 801bffc:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	2200      	movs	r2, #0
 801c002:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	2200      	movs	r2, #0
 801c008:	609a      	str	r2, [r3, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 801c00a:	683b      	ldr	r3, [r7, #0]
 801c00c:	3303      	adds	r3, #3
 801c00e:	f023 0303 	bic.w	r3, r3, #3
 801c012:	603b      	str	r3, [r7, #0]
#endif

    ll_p->n_size = node_size;
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	683a      	ldr	r2, [r7, #0]
 801c018:	601a      	str	r2, [r3, #0]
}
 801c01a:	bf00      	nop
 801c01c:	370c      	adds	r7, #12
 801c01e:	46bd      	mov	sp, r7
 801c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c024:	4770      	bx	lr

0801c026 <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 801c026:	b580      	push	{r7, lr}
 801c028:	b084      	sub	sp, #16
 801c02a:	af00      	add	r7, sp, #0
 801c02c:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	3308      	adds	r3, #8
 801c034:	4618      	mov	r0, r3
 801c036:	f000 fb29 	bl	801c68c <lv_mem_alloc>
 801c03a:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801c03c:	68fb      	ldr	r3, [r7, #12]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d020      	beq.n	801c084 <_lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 801c042:	2200      	movs	r2, #0
 801c044:	68f9      	ldr	r1, [r7, #12]
 801c046:	6878      	ldr	r0, [r7, #4]
 801c048:	f000 fa1e 	bl	801c488 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	685b      	ldr	r3, [r3, #4]
 801c050:	461a      	mov	r2, r3
 801c052:	68f9      	ldr	r1, [r7, #12]
 801c054:	6878      	ldr	r0, [r7, #4]
 801c056:	f000 fa36 	bl	801c4c6 <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	685b      	ldr	r3, [r3, #4]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d006      	beq.n	801c070 <_lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	685b      	ldr	r3, [r3, #4]
 801c066:	68fa      	ldr	r2, [r7, #12]
 801c068:	4619      	mov	r1, r3
 801c06a:	6878      	ldr	r0, [r7, #4]
 801c06c:	f000 fa0c 	bl	801c488 <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	68fa      	ldr	r2, [r7, #12]
 801c074:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	689b      	ldr	r3, [r3, #8]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d102      	bne.n	801c084 <_lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	68fa      	ldr	r2, [r7, #12]
 801c082:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 801c084:	68fb      	ldr	r3, [r7, #12]
}
 801c086:	4618      	mov	r0, r3
 801c088:	3710      	adds	r7, #16
 801c08a:	46bd      	mov	sp, r7
 801c08c:	bd80      	pop	{r7, pc}

0801c08e <_lv_ll_ins_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the new head
 */
void * _lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act)
{
 801c08e:	b580      	push	{r7, lr}
 801c090:	b084      	sub	sp, #16
 801c092:	af00      	add	r7, sp, #0
 801c094:	6078      	str	r0, [r7, #4]
 801c096:	6039      	str	r1, [r7, #0]
    lv_ll_node_t * n_new;

    if(NULL == ll_p || NULL == n_act) return NULL;
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d002      	beq.n	801c0a4 <_lv_ll_ins_prev+0x16>
 801c09e:	683b      	ldr	r3, [r7, #0]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d101      	bne.n	801c0a8 <_lv_ll_ins_prev+0x1a>
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	e035      	b.n	801c114 <_lv_ll_ins_prev+0x86>

    if(_lv_ll_get_head(ll_p) == n_act) {
 801c0a8:	6878      	ldr	r0, [r7, #4]
 801c0aa:	f000 f919 	bl	801c2e0 <_lv_ll_get_head>
 801c0ae:	4602      	mov	r2, r0
 801c0b0:	683b      	ldr	r3, [r7, #0]
 801c0b2:	4293      	cmp	r3, r2
 801c0b4:	d108      	bne.n	801c0c8 <_lv_ll_ins_prev+0x3a>
        n_new = _lv_ll_ins_head(ll_p);
 801c0b6:	6878      	ldr	r0, [r7, #4]
 801c0b8:	f7ff ffb5 	bl	801c026 <_lv_ll_ins_head>
 801c0bc:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d126      	bne.n	801c112 <_lv_ll_ins_prev+0x84>
 801c0c4:	2300      	movs	r3, #0
 801c0c6:	e025      	b.n	801c114 <_lv_ll_ins_prev+0x86>
    }
    else {
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	3308      	adds	r3, #8
 801c0ce:	4618      	mov	r0, r3
 801c0d0:	f000 fadc 	bl	801c68c <lv_mem_alloc>
 801c0d4:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d101      	bne.n	801c0e0 <_lv_ll_ins_prev+0x52>
 801c0dc:	2300      	movs	r3, #0
 801c0de:	e019      	b.n	801c114 <_lv_ll_ins_prev+0x86>

        lv_ll_node_t * n_prev;
        n_prev = _lv_ll_get_prev(ll_p, n_act);
 801c0e0:	6839      	ldr	r1, [r7, #0]
 801c0e2:	6878      	ldr	r0, [r7, #4]
 801c0e4:	f000 f93c 	bl	801c360 <_lv_ll_get_prev>
 801c0e8:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_new);
 801c0ea:	68fa      	ldr	r2, [r7, #12]
 801c0ec:	68b9      	ldr	r1, [r7, #8]
 801c0ee:	6878      	ldr	r0, [r7, #4]
 801c0f0:	f000 f9e9 	bl	801c4c6 <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 801c0f4:	68ba      	ldr	r2, [r7, #8]
 801c0f6:	68f9      	ldr	r1, [r7, #12]
 801c0f8:	6878      	ldr	r0, [r7, #4]
 801c0fa:	f000 f9c5 	bl	801c488 <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 801c0fe:	68fa      	ldr	r2, [r7, #12]
 801c100:	6839      	ldr	r1, [r7, #0]
 801c102:	6878      	ldr	r0, [r7, #4]
 801c104:	f000 f9c0 	bl	801c488 <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 801c108:	683a      	ldr	r2, [r7, #0]
 801c10a:	68f9      	ldr	r1, [r7, #12]
 801c10c:	6878      	ldr	r0, [r7, #4]
 801c10e:	f000 f9da 	bl	801c4c6 <node_set_next>
    }

    return n_new;
 801c112:	68fb      	ldr	r3, [r7, #12]
}
 801c114:	4618      	mov	r0, r3
 801c116:	3710      	adds	r7, #16
 801c118:	46bd      	mov	sp, r7
 801c11a:	bd80      	pop	{r7, pc}

0801c11c <_lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * _lv_ll_ins_tail(lv_ll_t * ll_p)
{
 801c11c:	b580      	push	{r7, lr}
 801c11e:	b084      	sub	sp, #16
 801c120:	af00      	add	r7, sp, #0
 801c122:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	3308      	adds	r3, #8
 801c12a:	4618      	mov	r0, r3
 801c12c:	f000 faae 	bl	801c68c <lv_mem_alloc>
 801c130:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d020      	beq.n	801c17a <_lv_ll_ins_tail+0x5e>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 801c138:	2200      	movs	r2, #0
 801c13a:	68f9      	ldr	r1, [r7, #12]
 801c13c:	6878      	ldr	r0, [r7, #4]
 801c13e:	f000 f9c2 	bl	801c4c6 <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	689b      	ldr	r3, [r3, #8]
 801c146:	461a      	mov	r2, r3
 801c148:	68f9      	ldr	r1, [r7, #12]
 801c14a:	6878      	ldr	r0, [r7, #4]
 801c14c:	f000 f99c 	bl	801c488 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	689b      	ldr	r3, [r3, #8]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d006      	beq.n	801c166 <_lv_ll_ins_tail+0x4a>
            node_set_next(ll_p, ll_p->tail, n_new);
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	689b      	ldr	r3, [r3, #8]
 801c15c:	68fa      	ldr	r2, [r7, #12]
 801c15e:	4619      	mov	r1, r3
 801c160:	6878      	ldr	r0, [r7, #4]
 801c162:	f000 f9b0 	bl	801c4c6 <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	68fa      	ldr	r2, [r7, #12]
 801c16a:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	685b      	ldr	r3, [r3, #4]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d102      	bne.n	801c17a <_lv_ll_ins_tail+0x5e>
            ll_p->head = n_new;
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	68fa      	ldr	r2, [r7, #12]
 801c178:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 801c17a:	68fb      	ldr	r3, [r7, #12]
}
 801c17c:	4618      	mov	r0, r3
 801c17e:	3710      	adds	r7, #16
 801c180:	46bd      	mov	sp, r7
 801c182:	bd80      	pop	{r7, pc}

0801c184 <_lv_ll_remove>:
 * It does not free the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)
{
 801c184:	b580      	push	{r7, lr}
 801c186:	b084      	sub	sp, #16
 801c188:	af00      	add	r7, sp, #0
 801c18a:	6078      	str	r0, [r7, #4]
 801c18c:	6039      	str	r1, [r7, #0]
    if(_lv_ll_get_head(ll_p) == node_p) {
 801c18e:	6878      	ldr	r0, [r7, #4]
 801c190:	f000 f8a6 	bl	801c2e0 <_lv_ll_get_head>
 801c194:	4602      	mov	r2, r0
 801c196:	683b      	ldr	r3, [r7, #0]
 801c198:	4293      	cmp	r3, r2
 801c19a:	d116      	bne.n	801c1ca <_lv_ll_remove+0x46>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 801c19c:	6839      	ldr	r1, [r7, #0]
 801c19e:	6878      	ldr	r0, [r7, #4]
 801c1a0:	f000 f8c4 	bl	801c32c <_lv_ll_get_next>
 801c1a4:	4602      	mov	r2, r0
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	685b      	ldr	r3, [r3, #4]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d103      	bne.n	801c1ba <_lv_ll_remove+0x36>
            ll_p->tail = NULL;
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	609a      	str	r2, [r3, #8]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);

        node_set_next(ll_p, n_prev, n_next);
        node_set_prev(ll_p, n_next, n_prev);
    }
}
 801c1b8:	e039      	b.n	801c22e <_lv_ll_remove+0xaa>
            node_set_prev(ll_p, ll_p->head, NULL);
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	685b      	ldr	r3, [r3, #4]
 801c1be:	2200      	movs	r2, #0
 801c1c0:	4619      	mov	r1, r3
 801c1c2:	6878      	ldr	r0, [r7, #4]
 801c1c4:	f000 f960 	bl	801c488 <node_set_prev>
}
 801c1c8:	e031      	b.n	801c22e <_lv_ll_remove+0xaa>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 801c1ca:	6878      	ldr	r0, [r7, #4]
 801c1cc:	f000 f89b 	bl	801c306 <_lv_ll_get_tail>
 801c1d0:	4602      	mov	r2, r0
 801c1d2:	683b      	ldr	r3, [r7, #0]
 801c1d4:	4293      	cmp	r3, r2
 801c1d6:	d116      	bne.n	801c206 <_lv_ll_remove+0x82>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 801c1d8:	6839      	ldr	r1, [r7, #0]
 801c1da:	6878      	ldr	r0, [r7, #4]
 801c1dc:	f000 f8c0 	bl	801c360 <_lv_ll_get_prev>
 801c1e0:	4602      	mov	r2, r0
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	689b      	ldr	r3, [r3, #8]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d103      	bne.n	801c1f6 <_lv_ll_remove+0x72>
            ll_p->head = NULL;
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	2200      	movs	r2, #0
 801c1f2:	605a      	str	r2, [r3, #4]
}
 801c1f4:	e01b      	b.n	801c22e <_lv_ll_remove+0xaa>
            node_set_next(ll_p, ll_p->tail, NULL);
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	689b      	ldr	r3, [r3, #8]
 801c1fa:	2200      	movs	r2, #0
 801c1fc:	4619      	mov	r1, r3
 801c1fe:	6878      	ldr	r0, [r7, #4]
 801c200:	f000 f961 	bl	801c4c6 <node_set_next>
}
 801c204:	e013      	b.n	801c22e <_lv_ll_remove+0xaa>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 801c206:	6839      	ldr	r1, [r7, #0]
 801c208:	6878      	ldr	r0, [r7, #4]
 801c20a:	f000 f8a9 	bl	801c360 <_lv_ll_get_prev>
 801c20e:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 801c210:	6839      	ldr	r1, [r7, #0]
 801c212:	6878      	ldr	r0, [r7, #4]
 801c214:	f000 f88a 	bl	801c32c <_lv_ll_get_next>
 801c218:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_next);
 801c21a:	68ba      	ldr	r2, [r7, #8]
 801c21c:	68f9      	ldr	r1, [r7, #12]
 801c21e:	6878      	ldr	r0, [r7, #4]
 801c220:	f000 f951 	bl	801c4c6 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 801c224:	68fa      	ldr	r2, [r7, #12]
 801c226:	68b9      	ldr	r1, [r7, #8]
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	f000 f92d 	bl	801c488 <node_set_prev>
}
 801c22e:	bf00      	nop
 801c230:	3710      	adds	r7, #16
 801c232:	46bd      	mov	sp, r7
 801c234:	bd80      	pop	{r7, pc}

0801c236 <_lv_ll_chg_list>:
 * @param node pointer to a node
 * @param head true: be the head in the new list
 *             false be the head in the new list
 */
void _lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, bool head)
{
 801c236:	b580      	push	{r7, lr}
 801c238:	b084      	sub	sp, #16
 801c23a:	af00      	add	r7, sp, #0
 801c23c:	60f8      	str	r0, [r7, #12]
 801c23e:	60b9      	str	r1, [r7, #8]
 801c240:	607a      	str	r2, [r7, #4]
 801c242:	70fb      	strb	r3, [r7, #3]
    _lv_ll_remove(ll_ori_p, node);
 801c244:	6879      	ldr	r1, [r7, #4]
 801c246:	68f8      	ldr	r0, [r7, #12]
 801c248:	f7ff ff9c 	bl	801c184 <_lv_ll_remove>

    if(head) {
 801c24c:	78fb      	ldrb	r3, [r7, #3]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d021      	beq.n	801c296 <_lv_ll_chg_list+0x60>
        /*Set node as head*/
        node_set_prev(ll_new_p, node, NULL);
 801c252:	2200      	movs	r2, #0
 801c254:	6879      	ldr	r1, [r7, #4]
 801c256:	68b8      	ldr	r0, [r7, #8]
 801c258:	f000 f916 	bl	801c488 <node_set_prev>
        node_set_next(ll_new_p, node, ll_new_p->head);
 801c25c:	68bb      	ldr	r3, [r7, #8]
 801c25e:	685b      	ldr	r3, [r3, #4]
 801c260:	461a      	mov	r2, r3
 801c262:	6879      	ldr	r1, [r7, #4]
 801c264:	68b8      	ldr	r0, [r7, #8]
 801c266:	f000 f92e 	bl	801c4c6 <node_set_next>

        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 801c26a:	68bb      	ldr	r3, [r7, #8]
 801c26c:	685b      	ldr	r3, [r3, #4]
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d006      	beq.n	801c280 <_lv_ll_chg_list+0x4a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 801c272:	68bb      	ldr	r3, [r7, #8]
 801c274:	685b      	ldr	r3, [r3, #4]
 801c276:	687a      	ldr	r2, [r7, #4]
 801c278:	4619      	mov	r1, r3
 801c27a:	68b8      	ldr	r0, [r7, #8]
 801c27c:	f000 f904 	bl	801c488 <node_set_prev>
        }

        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 801c280:	68bb      	ldr	r3, [r7, #8]
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	605a      	str	r2, [r3, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 801c286:	68bb      	ldr	r3, [r7, #8]
 801c288:	689b      	ldr	r3, [r3, #8]
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d124      	bne.n	801c2d8 <_lv_ll_chg_list+0xa2>
            ll_new_p->tail = node;
 801c28e:	68bb      	ldr	r3, [r7, #8]
 801c290:	687a      	ldr	r2, [r7, #4]
 801c292:	609a      	str	r2, [r3, #8]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
            ll_new_p->head = node;
        }
    }
}
 801c294:	e020      	b.n	801c2d8 <_lv_ll_chg_list+0xa2>
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 801c296:	68bb      	ldr	r3, [r7, #8]
 801c298:	689b      	ldr	r3, [r3, #8]
 801c29a:	461a      	mov	r2, r3
 801c29c:	6879      	ldr	r1, [r7, #4]
 801c29e:	68b8      	ldr	r0, [r7, #8]
 801c2a0:	f000 f8f2 	bl	801c488 <node_set_prev>
        node_set_next(ll_new_p, node, NULL);
 801c2a4:	2200      	movs	r2, #0
 801c2a6:	6879      	ldr	r1, [r7, #4]
 801c2a8:	68b8      	ldr	r0, [r7, #8]
 801c2aa:	f000 f90c 	bl	801c4c6 <node_set_next>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 801c2ae:	68bb      	ldr	r3, [r7, #8]
 801c2b0:	689b      	ldr	r3, [r3, #8]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d006      	beq.n	801c2c4 <_lv_ll_chg_list+0x8e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 801c2b6:	68bb      	ldr	r3, [r7, #8]
 801c2b8:	689b      	ldr	r3, [r3, #8]
 801c2ba:	687a      	ldr	r2, [r7, #4]
 801c2bc:	4619      	mov	r1, r3
 801c2be:	68b8      	ldr	r0, [r7, #8]
 801c2c0:	f000 f901 	bl	801c4c6 <node_set_next>
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 801c2c4:	68bb      	ldr	r3, [r7, #8]
 801c2c6:	687a      	ldr	r2, [r7, #4]
 801c2c8:	609a      	str	r2, [r3, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 801c2ca:	68bb      	ldr	r3, [r7, #8]
 801c2cc:	685b      	ldr	r3, [r3, #4]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d102      	bne.n	801c2d8 <_lv_ll_chg_list+0xa2>
            ll_new_p->head = node;
 801c2d2:	68bb      	ldr	r3, [r7, #8]
 801c2d4:	687a      	ldr	r2, [r7, #4]
 801c2d6:	605a      	str	r2, [r3, #4]
}
 801c2d8:	bf00      	nop
 801c2da:	3710      	adds	r7, #16
 801c2dc:	46bd      	mov	sp, r7
 801c2de:	bd80      	pop	{r7, pc}

0801c2e0 <_lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_head(const lv_ll_t * ll_p)
{
 801c2e0:	b480      	push	{r7}
 801c2e2:	b085      	sub	sp, #20
 801c2e4:	af00      	add	r7, sp, #0
 801c2e6:	6078      	str	r0, [r7, #4]
    void * head = NULL;
 801c2e8:	2300      	movs	r3, #0
 801c2ea:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d002      	beq.n	801c2f8 <_lv_ll_get_head+0x18>
        head = ll_p->head;
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	685b      	ldr	r3, [r3, #4]
 801c2f6:	60fb      	str	r3, [r7, #12]
    }

    return head;
 801c2f8:	68fb      	ldr	r3, [r7, #12]
}
 801c2fa:	4618      	mov	r0, r3
 801c2fc:	3714      	adds	r7, #20
 801c2fe:	46bd      	mov	sp, r7
 801c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c304:	4770      	bx	lr

0801c306 <_lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_tail(const lv_ll_t * ll_p)
{
 801c306:	b480      	push	{r7}
 801c308:	b085      	sub	sp, #20
 801c30a:	af00      	add	r7, sp, #0
 801c30c:	6078      	str	r0, [r7, #4]
    void * tail = NULL;
 801c30e:	2300      	movs	r3, #0
 801c310:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	2b00      	cmp	r3, #0
 801c316:	d002      	beq.n	801c31e <_lv_ll_get_tail+0x18>
        tail = ll_p->tail;
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	689b      	ldr	r3, [r3, #8]
 801c31c:	60fb      	str	r3, [r7, #12]
    }

    return tail;
 801c31e:	68fb      	ldr	r3, [r7, #12]
}
 801c320:	4618      	mov	r0, r3
 801c322:	3714      	adds	r7, #20
 801c324:	46bd      	mov	sp, r7
 801c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c32a:	4770      	bx	lr

0801c32c <_lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 801c32c:	b480      	push	{r7}
 801c32e:	b085      	sub	sp, #20
 801c330:	af00      	add	r7, sp, #0
 801c332:	6078      	str	r0, [r7, #4]
 801c334:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return NULL;
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	2b00      	cmp	r3, #0
 801c33a:	d101      	bne.n	801c340 <_lv_ll_get_next+0x14>
 801c33c:	2300      	movs	r3, #0
 801c33e:	e009      	b.n	801c354 <_lv_ll_get_next+0x28>

    /* Pointer to the next node is stored in the end of this node.
     * Go there and return the address found there */
    const lv_ll_node_t * n_act_d = n_act;
 801c340:	683b      	ldr	r3, [r7, #0]
 801c342:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	3304      	adds	r3, #4
 801c34a:	68fa      	ldr	r2, [r7, #12]
 801c34c:	4413      	add	r3, r2
 801c34e:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	681b      	ldr	r3, [r3, #0]
}
 801c354:	4618      	mov	r0, r3
 801c356:	3714      	adds	r7, #20
 801c358:	46bd      	mov	sp, r7
 801c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c35e:	4770      	bx	lr

0801c360 <_lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 801c360:	b480      	push	{r7}
 801c362:	b085      	sub	sp, #20
 801c364:	af00      	add	r7, sp, #0
 801c366:	6078      	str	r0, [r7, #4]
 801c368:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return NULL;
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d101      	bne.n	801c374 <_lv_ll_get_prev+0x14>
 801c370:	2300      	movs	r3, #0
 801c372:	e008      	b.n	801c386 <_lv_ll_get_prev+0x26>

    /* Pointer to the prev. node is stored in the end of this node.
     * Go there and return the address found there */
    const lv_ll_node_t * n_act_d = n_act;
 801c374:	683b      	ldr	r3, [r7, #0]
 801c376:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	68fa      	ldr	r2, [r7, #12]
 801c37e:	4413      	add	r3, r2
 801c380:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	681b      	ldr	r3, [r3, #0]
}
 801c386:	4618      	mov	r0, r3
 801c388:	3714      	adds	r7, #20
 801c38a:	46bd      	mov	sp, r7
 801c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c390:	4770      	bx	lr

0801c392 <_lv_ll_get_len>:
 * Return the length of the linked list.
 * @param ll_p pointer to linked list
 * @return length of the linked list
 */
uint32_t _lv_ll_get_len(const lv_ll_t * ll_p)
{
 801c392:	b580      	push	{r7, lr}
 801c394:	b084      	sub	sp, #16
 801c396:	af00      	add	r7, sp, #0
 801c398:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 801c39a:	2300      	movs	r3, #0
 801c39c:	60fb      	str	r3, [r7, #12]
    void * node;

    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 801c39e:	6878      	ldr	r0, [r7, #4]
 801c3a0:	f7ff ff9e 	bl	801c2e0 <_lv_ll_get_head>
 801c3a4:	60b8      	str	r0, [r7, #8]
 801c3a6:	e007      	b.n	801c3b8 <_lv_ll_get_len+0x26>
        len++;
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	3301      	adds	r3, #1
 801c3ac:	60fb      	str	r3, [r7, #12]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 801c3ae:	68b9      	ldr	r1, [r7, #8]
 801c3b0:	6878      	ldr	r0, [r7, #4]
 801c3b2:	f7ff ffbb 	bl	801c32c <_lv_ll_get_next>
 801c3b6:	60b8      	str	r0, [r7, #8]
 801c3b8:	68bb      	ldr	r3, [r7, #8]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d1f4      	bne.n	801c3a8 <_lv_ll_get_len+0x16>
    }

    return len;
 801c3be:	68fb      	ldr	r3, [r7, #12]
}
 801c3c0:	4618      	mov	r0, r3
 801c3c2:	3710      	adds	r7, #16
 801c3c4:	46bd      	mov	sp, r7
 801c3c6:	bd80      	pop	{r7, pc}

0801c3c8 <_lv_ll_move_before>:
 * @param ll_p pointer to a linked list
 * @param n_act pointer to node to move
 * @param n_after pointer to a node which should be after `n_act`
 */
void _lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after)
{
 801c3c8:	b580      	push	{r7, lr}
 801c3ca:	b086      	sub	sp, #24
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	60f8      	str	r0, [r7, #12]
 801c3d0:	60b9      	str	r1, [r7, #8]
 801c3d2:	607a      	str	r2, [r7, #4]
    if(n_act == n_after) return; /*Can't move before itself*/
 801c3d4:	68ba      	ldr	r2, [r7, #8]
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	429a      	cmp	r2, r3
 801c3da:	d035      	beq.n	801c448 <_lv_ll_move_before+0x80>

    void * n_before;
    if(n_after != NULL)
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d005      	beq.n	801c3ee <_lv_ll_move_before+0x26>
        n_before = _lv_ll_get_prev(ll_p, n_after);
 801c3e2:	6879      	ldr	r1, [r7, #4]
 801c3e4:	68f8      	ldr	r0, [r7, #12]
 801c3e6:	f7ff ffbb 	bl	801c360 <_lv_ll_get_prev>
 801c3ea:	6178      	str	r0, [r7, #20]
 801c3ec:	e003      	b.n	801c3f6 <_lv_ll_move_before+0x2e>
    else
        n_before = _lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
 801c3ee:	68f8      	ldr	r0, [r7, #12]
 801c3f0:	f7ff ff89 	bl	801c306 <_lv_ll_get_tail>
 801c3f4:	6178      	str	r0, [r7, #20]

    if(n_act == n_before) return; /*Already before `n_after`*/
 801c3f6:	68ba      	ldr	r2, [r7, #8]
 801c3f8:	697b      	ldr	r3, [r7, #20]
 801c3fa:	429a      	cmp	r2, r3
 801c3fc:	d026      	beq.n	801c44c <_lv_ll_move_before+0x84>

    /*It's much easier to remove from the list and add again*/
    _lv_ll_remove(ll_p, n_act);
 801c3fe:	68b9      	ldr	r1, [r7, #8]
 801c400:	68f8      	ldr	r0, [r7, #12]
 801c402:	f7ff febf 	bl	801c184 <_lv_ll_remove>

    /*Add again by setting the prev. and next nodes*/
    node_set_next(ll_p, n_before, n_act);
 801c406:	68ba      	ldr	r2, [r7, #8]
 801c408:	6979      	ldr	r1, [r7, #20]
 801c40a:	68f8      	ldr	r0, [r7, #12]
 801c40c:	f000 f85b 	bl	801c4c6 <node_set_next>
    node_set_prev(ll_p, n_act, n_before);
 801c410:	697a      	ldr	r2, [r7, #20]
 801c412:	68b9      	ldr	r1, [r7, #8]
 801c414:	68f8      	ldr	r0, [r7, #12]
 801c416:	f000 f837 	bl	801c488 <node_set_prev>
    node_set_prev(ll_p, n_after, n_act);
 801c41a:	68ba      	ldr	r2, [r7, #8]
 801c41c:	6879      	ldr	r1, [r7, #4]
 801c41e:	68f8      	ldr	r0, [r7, #12]
 801c420:	f000 f832 	bl	801c488 <node_set_prev>
    node_set_next(ll_p, n_act, n_after);
 801c424:	687a      	ldr	r2, [r7, #4]
 801c426:	68b9      	ldr	r1, [r7, #8]
 801c428:	68f8      	ldr	r0, [r7, #12]
 801c42a:	f000 f84c 	bl	801c4c6 <node_set_next>

    /*If `n_act` was moved before NULL then it become the new tail*/
    if(n_after == NULL) ll_p->tail = n_act;
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	2b00      	cmp	r3, #0
 801c432:	d102      	bne.n	801c43a <_lv_ll_move_before+0x72>
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	68ba      	ldr	r2, [r7, #8]
 801c438:	609a      	str	r2, [r3, #8]

    /*If `n_act` was moved before `NULL` then it's the new head*/
    if(n_before == NULL) ll_p->head = n_act;
 801c43a:	697b      	ldr	r3, [r7, #20]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d106      	bne.n	801c44e <_lv_ll_move_before+0x86>
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	68ba      	ldr	r2, [r7, #8]
 801c444:	605a      	str	r2, [r3, #4]
 801c446:	e002      	b.n	801c44e <_lv_ll_move_before+0x86>
    if(n_act == n_after) return; /*Can't move before itself*/
 801c448:	bf00      	nop
 801c44a:	e000      	b.n	801c44e <_lv_ll_move_before+0x86>
    if(n_act == n_before) return; /*Already before `n_after`*/
 801c44c:	bf00      	nop
}
 801c44e:	3718      	adds	r7, #24
 801c450:	46bd      	mov	sp, r7
 801c452:	bd80      	pop	{r7, pc}

0801c454 <_lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool _lv_ll_is_empty(lv_ll_t * ll_p)
{
 801c454:	b480      	push	{r7}
 801c456:	b083      	sub	sp, #12
 801c458:	af00      	add	r7, sp, #0
 801c45a:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d101      	bne.n	801c466 <_lv_ll_is_empty+0x12>
 801c462:	2301      	movs	r3, #1
 801c464:	e00a      	b.n	801c47c <_lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	685b      	ldr	r3, [r3, #4]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d105      	bne.n	801c47a <_lv_ll_is_empty+0x26>
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	689b      	ldr	r3, [r3, #8]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d101      	bne.n	801c47a <_lv_ll_is_empty+0x26>
 801c476:	2301      	movs	r3, #1
 801c478:	e000      	b.n	801c47c <_lv_ll_is_empty+0x28>

    return false;
 801c47a:	2300      	movs	r3, #0
}
 801c47c:	4618      	mov	r0, r3
 801c47e:	370c      	adds	r7, #12
 801c480:	46bd      	mov	sp, r7
 801c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c486:	4770      	bx	lr

0801c488 <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 801c488:	b480      	push	{r7}
 801c48a:	b089      	sub	sp, #36	; 0x24
 801c48c:	af00      	add	r7, sp, #0
 801c48e:	60f8      	str	r0, [r7, #12]
 801c490:	60b9      	str	r1, [r7, #8]
 801c492:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801c494:	68bb      	ldr	r3, [r7, #8]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d00f      	beq.n	801c4ba <node_set_prev+0x32>

    uint8_t * act8 = (uint8_t *) act;
 801c49a:	68bb      	ldr	r3, [r7, #8]
 801c49c:	61fb      	str	r3, [r7, #28]

    act8 += LL_PREV_P_OFFSET(ll_p);
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	69fa      	ldr	r2, [r7, #28]
 801c4a4:	4413      	add	r3, r2
 801c4a6:	61fb      	str	r3, [r7, #28]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 801c4a8:	69fb      	ldr	r3, [r7, #28]
 801c4aa:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;
 801c4ac:	1d3b      	adds	r3, r7, #4
 801c4ae:	617b      	str	r3, [r7, #20]

    *act_node_p = *prev_node_p;
 801c4b0:	697b      	ldr	r3, [r7, #20]
 801c4b2:	681a      	ldr	r2, [r3, #0]
 801c4b4:	69bb      	ldr	r3, [r7, #24]
 801c4b6:	601a      	str	r2, [r3, #0]
 801c4b8:	e000      	b.n	801c4bc <node_set_prev+0x34>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801c4ba:	bf00      	nop
}
 801c4bc:	3724      	adds	r7, #36	; 0x24
 801c4be:	46bd      	mov	sp, r7
 801c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4c4:	4770      	bx	lr

0801c4c6 <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 801c4c6:	b480      	push	{r7}
 801c4c8:	b089      	sub	sp, #36	; 0x24
 801c4ca:	af00      	add	r7, sp, #0
 801c4cc:	60f8      	str	r0, [r7, #12]
 801c4ce:	60b9      	str	r1, [r7, #8]
 801c4d0:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801c4d2:	68bb      	ldr	r3, [r7, #8]
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d010      	beq.n	801c4fa <node_set_next+0x34>
    uint8_t * act8 = (uint8_t *) act;
 801c4d8:	68bb      	ldr	r3, [r7, #8]
 801c4da:	61fb      	str	r3, [r7, #28]

    act8 += LL_NEXT_P_OFFSET(ll_p);
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	3304      	adds	r3, #4
 801c4e2:	69fa      	ldr	r2, [r7, #28]
 801c4e4:	4413      	add	r3, r2
 801c4e6:	61fb      	str	r3, [r7, #28]
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 801c4e8:	69fb      	ldr	r3, [r7, #28]
 801c4ea:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;
 801c4ec:	1d3b      	adds	r3, r7, #4
 801c4ee:	617b      	str	r3, [r7, #20]

    *act_node_p = *next_node_p;
 801c4f0:	697b      	ldr	r3, [r7, #20]
 801c4f2:	681a      	ldr	r2, [r3, #0]
 801c4f4:	69bb      	ldr	r3, [r7, #24]
 801c4f6:	601a      	str	r2, [r3, #0]
 801c4f8:	e000      	b.n	801c4fc <node_set_next+0x36>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801c4fa:	bf00      	nop
}
 801c4fc:	3724      	adds	r7, #36	; 0x24
 801c4fe:	46bd      	mov	sp, r7
 801c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c504:	4770      	bx	lr
	...

0801c508 <_lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
 801c508:	b480      	push	{r7}
 801c50a:	b085      	sub	sp, #20
 801c50c:	af00      	add	r7, sp, #0
 801c50e:	4603      	mov	r3, r0
 801c510:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 801c512:	2300      	movs	r3, #0
 801c514:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 801c516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c51a:	4a31      	ldr	r2, [pc, #196]	; (801c5e0 <_lv_trigo_sin+0xd8>)
 801c51c:	fb82 1203 	smull	r1, r2, r2, r3
 801c520:	441a      	add	r2, r3
 801c522:	1211      	asrs	r1, r2, #8
 801c524:	17da      	asrs	r2, r3, #31
 801c526:	1a8a      	subs	r2, r1, r2
 801c528:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801c52c:	fb01 f202 	mul.w	r2, r1, r2
 801c530:	1a9b      	subs	r3, r3, r2
 801c532:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 801c534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	da04      	bge.n	801c546 <_lv_trigo_sin+0x3e>
 801c53c:	88fb      	ldrh	r3, [r7, #6]
 801c53e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801c542:	b29b      	uxth	r3, r3
 801c544:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 801c546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c54a:	2b59      	cmp	r3, #89	; 0x59
 801c54c:	dc06      	bgt.n	801c55c <_lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 801c54e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c552:	4a24      	ldr	r2, [pc, #144]	; (801c5e4 <_lv_trigo_sin+0xdc>)
 801c554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c558:	81fb      	strh	r3, [r7, #14]
 801c55a:	e038      	b.n	801c5ce <_lv_trigo_sin+0xc6>
    }
    else if(angle >= 90 && angle < 180) {
 801c55c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c560:	2b59      	cmp	r3, #89	; 0x59
 801c562:	dd0f      	ble.n	801c584 <_lv_trigo_sin+0x7c>
 801c564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c568:	2bb3      	cmp	r3, #179	; 0xb3
 801c56a:	dc0b      	bgt.n	801c584 <_lv_trigo_sin+0x7c>
        angle = 180 - angle;
 801c56c:	88fb      	ldrh	r3, [r7, #6]
 801c56e:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 801c572:	b29b      	uxth	r3, r3
 801c574:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 801c576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c57a:	4a1a      	ldr	r2, [pc, #104]	; (801c5e4 <_lv_trigo_sin+0xdc>)
 801c57c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c580:	81fb      	strh	r3, [r7, #14]
 801c582:	e024      	b.n	801c5ce <_lv_trigo_sin+0xc6>
    }
    else if(angle >= 180 && angle < 270) {
 801c584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c588:	2bb3      	cmp	r3, #179	; 0xb3
 801c58a:	dd12      	ble.n	801c5b2 <_lv_trigo_sin+0xaa>
 801c58c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c590:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c594:	da0d      	bge.n	801c5b2 <_lv_trigo_sin+0xaa>
        angle = angle - 180;
 801c596:	88fb      	ldrh	r3, [r7, #6]
 801c598:	3bb4      	subs	r3, #180	; 0xb4
 801c59a:	b29b      	uxth	r3, r3
 801c59c:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801c59e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c5a2:	4a10      	ldr	r2, [pc, #64]	; (801c5e4 <_lv_trigo_sin+0xdc>)
 801c5a4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	425b      	negs	r3, r3
 801c5ac:	b29b      	uxth	r3, r3
 801c5ae:	81fb      	strh	r3, [r7, #14]
 801c5b0:	e00d      	b.n	801c5ce <_lv_trigo_sin+0xc6>
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 801c5b2:	88fb      	ldrh	r3, [r7, #6]
 801c5b4:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801c5b8:	b29b      	uxth	r3, r3
 801c5ba:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801c5bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c5c0:	4a08      	ldr	r2, [pc, #32]	; (801c5e4 <_lv_trigo_sin+0xdc>)
 801c5c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801c5c6:	b29b      	uxth	r3, r3
 801c5c8:	425b      	negs	r3, r3
 801c5ca:	b29b      	uxth	r3, r3
 801c5cc:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 801c5ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	3714      	adds	r7, #20
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5dc:	4770      	bx	lr
 801c5de:	bf00      	nop
 801c5e0:	b60b60b7 	.word	0xb60b60b7
 801c5e4:	080307fc 	.word	0x080307fc

0801c5e8 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
 801c5e8:	b480      	push	{r7}
 801c5ea:	b087      	sub	sp, #28
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	60f8      	str	r0, [r7, #12]
 801c5f0:	60b9      	str	r1, [r7, #8]
 801c5f2:	607a      	str	r2, [r7, #4]
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	021b      	lsls	r3, r3, #8
 801c5f8:	60fb      	str	r3, [r7, #12]

    uint32_t root = 0;
 801c5fa:	2300      	movs	r3, #0
 801c5fc:	617b      	str	r3, [r7, #20]
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 801c5fe:	697a      	ldr	r2, [r7, #20]
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	4413      	add	r3, r2
 801c604:	613b      	str	r3, [r7, #16]
        if(trial * trial <= x) root = trial;
 801c606:	693b      	ldr	r3, [r7, #16]
 801c608:	693a      	ldr	r2, [r7, #16]
 801c60a:	fb02 f303 	mul.w	r3, r2, r3
 801c60e:	68fa      	ldr	r2, [r7, #12]
 801c610:	429a      	cmp	r2, r3
 801c612:	d301      	bcc.n	801c618 <_lv_sqrt+0x30>
 801c614:	693b      	ldr	r3, [r7, #16]
 801c616:	617b      	str	r3, [r7, #20]
        mask = mask >> 1;
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	085b      	lsrs	r3, r3, #1
 801c61c:	607b      	str	r3, [r7, #4]
    } while(mask);
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	2b00      	cmp	r3, #0
 801c622:	d1ec      	bne.n	801c5fe <_lv_sqrt+0x16>

    q->i = root >> 4;
 801c624:	697b      	ldr	r3, [r7, #20]
 801c626:	091b      	lsrs	r3, r3, #4
 801c628:	b29a      	uxth	r2, r3
 801c62a:	68bb      	ldr	r3, [r7, #8]
 801c62c:	801a      	strh	r2, [r3, #0]
    q->f = (root & 0xf) << 4;
 801c62e:	697b      	ldr	r3, [r7, #20]
 801c630:	b29b      	uxth	r3, r3
 801c632:	011b      	lsls	r3, r3, #4
 801c634:	b29b      	uxth	r3, r3
 801c636:	b2db      	uxtb	r3, r3
 801c638:	b29a      	uxth	r2, r3
 801c63a:	68bb      	ldr	r3, [r7, #8]
 801c63c:	805a      	strh	r2, [r3, #2]
}
 801c63e:	bf00      	nop
 801c640:	371c      	adds	r7, #28
 801c642:	46bd      	mov	sp, r7
 801c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c648:	4770      	bx	lr
	...

0801c64c <_lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void _lv_mem_init(void)
{
 801c64c:	b480      	push	{r7}
 801c64e:	b083      	sub	sp, #12
 801c650:	af00      	add	r7, sp, #0
#if LV_MEM_CUSTOM == 0

#if LV_MEM_ADR == 0
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_MEM_ATTR MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    work_mem = (uint8_t *)work_mem_int;
 801c652:	4b0c      	ldr	r3, [pc, #48]	; (801c684 <_lv_mem_init+0x38>)
 801c654:	4a0c      	ldr	r2, [pc, #48]	; (801c688 <_lv_mem_init+0x3c>)
 801c656:	601a      	str	r2, [r3, #0]
#else
    work_mem = (uint8_t *)LV_MEM_ADR;
#endif

    lv_mem_ent_t * full = (lv_mem_ent_t *)work_mem;
 801c658:	4b0a      	ldr	r3, [pc, #40]	; (801c684 <_lv_mem_init+0x38>)
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	607b      	str	r3, [r7, #4]
    full->header.s.used = 0;
 801c65e:	687a      	ldr	r2, [r7, #4]
 801c660:	7813      	ldrb	r3, [r2, #0]
 801c662:	f36f 0300 	bfc	r3, #0, #1
 801c666:	7013      	strb	r3, [r2, #0]
    /*The total mem size reduced by the first header and the close patterns */
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 801c668:	687a      	ldr	r2, [r7, #4]
 801c66a:	6813      	ldr	r3, [r2, #0]
 801c66c:	f647 71fc 	movw	r1, #32764	; 0x7ffc
 801c670:	f361 035f 	bfi	r3, r1, #1, #31
 801c674:	6013      	str	r3, [r2, #0]
#endif
}
 801c676:	bf00      	nop
 801c678:	370c      	adds	r7, #12
 801c67a:	46bd      	mov	sp, r7
 801c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c680:	4770      	bx	lr
 801c682:	bf00      	nop
 801c684:	20018068 	.word	0x20018068
 801c688:	20018094 	.word	0x20018094

0801c68c <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 801c68c:	b580      	push	{r7, lr}
 801c68e:	b084      	sub	sp, #16
 801c690:	af00      	add	r7, sp, #0
 801c692:	6078      	str	r0, [r7, #4]
    if(size == 0) {
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	2b00      	cmp	r3, #0
 801c698:	d101      	bne.n	801c69e <lv_mem_alloc+0x12>
        return &zero_mem;
 801c69a:	4b1e      	ldr	r3, [pc, #120]	; (801c714 <lv_mem_alloc+0x88>)
 801c69c:	e035      	b.n	801c70a <lv_mem_alloc+0x7e>
    }

    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	3303      	adds	r3, #3
 801c6a2:	f023 0303 	bic.w	r3, r3, #3
 801c6a6:	607b      	str	r3, [r7, #4]
    void * alloc = NULL;
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	60fb      	str	r3, [r7, #12]

#if LV_MEM_CUSTOM == 0
    /*Use the built-in allocators*/
    lv_mem_ent_t * e = NULL;
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	60bb      	str	r3, [r7, #8]

    /* Search for a appropriate entry*/
    do {
        /* Get the next entry*/
        e = ent_get_next(e);
 801c6b0:	68b8      	ldr	r0, [r7, #8]
 801c6b2:	f000 fe5f 	bl	801d374 <ent_get_next>
 801c6b6:	60b8      	str	r0, [r7, #8]

        /*If there is next entry then try to allocate there*/
        if(e != NULL) {
 801c6b8:	68bb      	ldr	r3, [r7, #8]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d004      	beq.n	801c6c8 <lv_mem_alloc+0x3c>
            alloc = ent_alloc(e, size);
 801c6be:	6879      	ldr	r1, [r7, #4]
 801c6c0:	68b8      	ldr	r0, [r7, #8]
 801c6c2:	f000 fe83 	bl	801d3cc <ent_alloc>
 801c6c6:	60f8      	str	r0, [r7, #12]
        }
        /* End if there is not next entry OR the alloc. is successful*/
    } while(e != NULL && alloc == NULL);
 801c6c8:	68bb      	ldr	r3, [r7, #8]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d002      	beq.n	801c6d4 <lv_mem_alloc+0x48>
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d0ed      	beq.n	801c6b0 <lv_mem_alloc+0x24>

#if LV_MEM_ADD_JUNK
    if(alloc != NULL) _lv_memset(alloc, 0xaa, size);
#endif

    if(alloc == NULL) {
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d016      	beq.n	801c708 <lv_mem_alloc+0x7c>
        LV_LOG_WARN("Couldn't allocate memory");
    }
    else {
#if LV_MEM_CUSTOM == 0
        /* just a safety check, should always be true */
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	4a0e      	ldr	r2, [pc, #56]	; (801c718 <lv_mem_alloc+0x8c>)
 801c6de:	6812      	ldr	r2, [r2, #0]
 801c6e0:	4293      	cmp	r3, r2
 801c6e2:	d911      	bls.n	801c708 <lv_mem_alloc+0x7c>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	4a0c      	ldr	r2, [pc, #48]	; (801c718 <lv_mem_alloc+0x8c>)
 801c6e8:	6812      	ldr	r2, [r2, #0]
 801c6ea:	1a9a      	subs	r2, r3, r2
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	441a      	add	r2, r3
 801c6f0:	4b0a      	ldr	r3, [pc, #40]	; (801c71c <lv_mem_alloc+0x90>)
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	429a      	cmp	r2, r3
 801c6f6:	d907      	bls.n	801c708 <lv_mem_alloc+0x7c>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	4a07      	ldr	r2, [pc, #28]	; (801c718 <lv_mem_alloc+0x8c>)
 801c6fc:	6812      	ldr	r2, [r2, #0]
 801c6fe:	1a9a      	subs	r2, r3, r2
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	4413      	add	r3, r2
 801c704:	4a05      	ldr	r2, [pc, #20]	; (801c71c <lv_mem_alloc+0x90>)
 801c706:	6013      	str	r3, [r2, #0]
            }
        }
#endif
    }

    return alloc;
 801c708:	68fb      	ldr	r3, [r7, #12]
}
 801c70a:	4618      	mov	r0, r3
 801c70c:	3710      	adds	r7, #16
 801c70e:	46bd      	mov	sp, r7
 801c710:	bd80      	pop	{r7, pc}
 801c712:	bf00      	nop
 801c714:	2001806c 	.word	0x2001806c
 801c718:	20018068 	.word	0x20018068
 801c71c:	20018070 	.word	0x20018070

0801c720 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
 801c720:	b580      	push	{r7, lr}
 801c722:	b084      	sub	sp, #16
 801c724:	af00      	add	r7, sp, #0
 801c726:	6078      	str	r0, [r7, #4]
    if(data == &zero_mem) return;
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	4a26      	ldr	r2, [pc, #152]	; (801c7c4 <lv_mem_free+0xa4>)
 801c72c:	4293      	cmp	r3, r2
 801c72e:	d040      	beq.n	801c7b2 <lv_mem_free+0x92>
    if(data == NULL) return;
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	2b00      	cmp	r3, #0
 801c734:	d03f      	beq.n	801c7b6 <lv_mem_free+0x96>
    _lv_memset((void *)data, 0xbb, _lv_mem_get_size(data));
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	3b04      	subs	r3, #4
 801c73a:	60bb      	str	r3, [r7, #8]
    e->header.s.used = 0;
 801c73c:	68ba      	ldr	r2, [r7, #8]
 801c73e:	7813      	ldrb	r3, [r2, #0]
 801c740:	f36f 0300 	bfc	r3, #0, #1
 801c744:	7013      	strb	r3, [r2, #0]
#endif

#if LV_MEM_CUSTOM == 0
#if LV_MEM_AUTO_DEFRAG
    static uint16_t full_defrag_cnt = 0;
    full_defrag_cnt++;
 801c746:	4b20      	ldr	r3, [pc, #128]	; (801c7c8 <lv_mem_free+0xa8>)
 801c748:	881b      	ldrh	r3, [r3, #0]
 801c74a:	3301      	adds	r3, #1
 801c74c:	b29a      	uxth	r2, r3
 801c74e:	4b1e      	ldr	r3, [pc, #120]	; (801c7c8 <lv_mem_free+0xa8>)
 801c750:	801a      	strh	r2, [r3, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 801c752:	4b1d      	ldr	r3, [pc, #116]	; (801c7c8 <lv_mem_free+0xa8>)
 801c754:	881b      	ldrh	r3, [r3, #0]
 801c756:	2b0f      	cmp	r3, #15
 801c758:	d825      	bhi.n	801c7a6 <lv_mem_free+0x86>
        /* Make a simple defrag.
         * Join the following free entries after this*/
        lv_mem_ent_t * e_next;
        e_next = ent_get_next(e);
 801c75a:	68b8      	ldr	r0, [r7, #8]
 801c75c:	f000 fe0a 	bl	801d374 <ent_get_next>
 801c760:	60f8      	str	r0, [r7, #12]
        while(e_next != NULL) {
 801c762:	e01c      	b.n	801c79e <lv_mem_free+0x7e>
            if(e_next->header.s.used == 0) {
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	781b      	ldrb	r3, [r3, #0]
 801c768:	f003 0301 	and.w	r3, r3, #1
 801c76c:	b2db      	uxtb	r3, r3
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d123      	bne.n	801c7ba <lv_mem_free+0x9a>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 801c772:	68bb      	ldr	r3, [r7, #8]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c77a:	461a      	mov	r2, r3
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c784:	4413      	add	r3, r2
 801c786:	3304      	adds	r3, #4
 801c788:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c78c:	68ba      	ldr	r2, [r7, #8]
 801c78e:	6813      	ldr	r3, [r2, #0]
 801c790:	f361 035f 	bfi	r3, r1, #1, #31
 801c794:	6013      	str	r3, [r2, #0]
            }
            else {
                break;
            }
            e_next = ent_get_next(e_next);
 801c796:	68f8      	ldr	r0, [r7, #12]
 801c798:	f000 fdec 	bl	801d374 <ent_get_next>
 801c79c:	60f8      	str	r0, [r7, #12]
        while(e_next != NULL) {
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d1df      	bne.n	801c764 <lv_mem_free+0x44>
 801c7a4:	e00a      	b.n	801c7bc <lv_mem_free+0x9c>
        }
    }
    else {
        full_defrag_cnt = 0;
 801c7a6:	4b08      	ldr	r3, [pc, #32]	; (801c7c8 <lv_mem_free+0xa8>)
 801c7a8:	2200      	movs	r2, #0
 801c7aa:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
 801c7ac:	f000 f863 	bl	801c876 <lv_mem_defrag>
 801c7b0:	e004      	b.n	801c7bc <lv_mem_free+0x9c>
    if(data == &zero_mem) return;
 801c7b2:	bf00      	nop
 801c7b4:	e002      	b.n	801c7bc <lv_mem_free+0x9c>
    if(data == NULL) return;
 801c7b6:	bf00      	nop
 801c7b8:	e000      	b.n	801c7bc <lv_mem_free+0x9c>
                break;
 801c7ba:	bf00      	nop
    LV_MEM_CUSTOM_FREE(e);
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
 801c7bc:	3710      	adds	r7, #16
 801c7be:	46bd      	mov	sp, r7
 801c7c0:	bd80      	pop	{r7, pc}
 801c7c2:	bf00      	nop
 801c7c4:	2001806c 	.word	0x2001806c
 801c7c8:	20020094 	.word	0x20020094

0801c7cc <lv_mem_realloc>:
 */

#if LV_ENABLE_GC == 0

void * lv_mem_realloc(void * data_p, size_t new_size)
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b086      	sub	sp, #24
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
 801c7d4:	6039      	str	r1, [r7, #0]
    /*Round the size up to ALIGN_MASK*/
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 801c7d6:	683b      	ldr	r3, [r7, #0]
 801c7d8:	3303      	adds	r3, #3
 801c7da:	f023 0303 	bic.w	r3, r3, #3
 801c7de:	603b      	str	r3, [r7, #0]

    /*data_p could be previously freed pointer (in this case it is invalid)*/
    if(data_p != NULL) {
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d00b      	beq.n	801c7fe <lv_mem_realloc+0x32>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	3b04      	subs	r3, #4
 801c7ea:	617b      	str	r3, [r7, #20]
        if(e->header.s.used == 0) {
 801c7ec:	697b      	ldr	r3, [r7, #20]
 801c7ee:	781b      	ldrb	r3, [r3, #0]
 801c7f0:	f003 0301 	and.w	r3, r3, #1
 801c7f4:	b2db      	uxtb	r3, r3
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d101      	bne.n	801c7fe <lv_mem_realloc+0x32>
            data_p = NULL;
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	607b      	str	r3, [r7, #4]
        }
    }

    uint32_t old_size = _lv_mem_get_size(data_p);
 801c7fe:	6878      	ldr	r0, [r7, #4]
 801c800:	f000 f888 	bl	801c914 <_lv_mem_get_size>
 801c804:	6138      	str	r0, [r7, #16]
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 801c806:	693a      	ldr	r2, [r7, #16]
 801c808:	683b      	ldr	r3, [r7, #0]
 801c80a:	429a      	cmp	r2, r3
 801c80c:	d101      	bne.n	801c812 <lv_mem_realloc+0x46>
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	e02d      	b.n	801c86e <lv_mem_realloc+0xa2>

#if LV_MEM_CUSTOM == 0
    /* Truncate the memory if the new size is smaller. */
    if(new_size < old_size) {
 801c812:	683a      	ldr	r2, [r7, #0]
 801c814:	693b      	ldr	r3, [r7, #16]
 801c816:	429a      	cmp	r2, r3
 801c818:	d209      	bcs.n	801c82e <lv_mem_realloc+0x62>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	3b04      	subs	r3, #4
 801c81e:	60bb      	str	r3, [r7, #8]
        ent_trunc(e, new_size);
 801c820:	6839      	ldr	r1, [r7, #0]
 801c822:	68b8      	ldr	r0, [r7, #8]
 801c824:	f000 fdf9 	bl	801d41a <ent_trunc>
        return &e->first_data;
 801c828:	68bb      	ldr	r3, [r7, #8]
 801c82a:	3304      	adds	r3, #4
 801c82c:	e01f      	b.n	801c86e <lv_mem_realloc+0xa2>
    }
#endif

    void * new_p;
    new_p = lv_mem_alloc(new_size);
 801c82e:	6838      	ldr	r0, [r7, #0]
 801c830:	f7ff ff2c 	bl	801c68c <lv_mem_alloc>
 801c834:	60f8      	str	r0, [r7, #12]
    if(new_p == NULL) {
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d101      	bne.n	801c840 <lv_mem_realloc+0x74>
        LV_LOG_WARN("Couldn't allocate memory");
        return NULL;
 801c83c:	2300      	movs	r3, #0
 801c83e:	e016      	b.n	801c86e <lv_mem_realloc+0xa2>
    }

    if(data_p != NULL) {
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	2b00      	cmp	r3, #0
 801c844:	d012      	beq.n	801c86c <lv_mem_realloc+0xa0>
        /*Copy the old data to the new. Use the smaller size*/
        if(old_size != 0 && new_size != 0) {
 801c846:	693b      	ldr	r3, [r7, #16]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d00c      	beq.n	801c866 <lv_mem_realloc+0x9a>
 801c84c:	683b      	ldr	r3, [r7, #0]
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d009      	beq.n	801c866 <lv_mem_realloc+0x9a>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 801c852:	693a      	ldr	r2, [r7, #16]
 801c854:	683b      	ldr	r3, [r7, #0]
 801c856:	4293      	cmp	r3, r2
 801c858:	bf28      	it	cs
 801c85a:	4613      	movcs	r3, r2
 801c85c:	461a      	mov	r2, r3
 801c85e:	6879      	ldr	r1, [r7, #4]
 801c860:	68f8      	ldr	r0, [r7, #12]
 801c862:	f000 f9d9 	bl	801cc18 <_lv_memcpy>
        }
        lv_mem_free(data_p);
 801c866:	6878      	ldr	r0, [r7, #4]
 801c868:	f7ff ff5a 	bl	801c720 <lv_mem_free>
    }

    return new_p;
 801c86c:	68fb      	ldr	r3, [r7, #12]
}
 801c86e:	4618      	mov	r0, r3
 801c870:	3718      	adds	r7, #24
 801c872:	46bd      	mov	sp, r7
 801c874:	bd80      	pop	{r7, pc}

0801c876 <lv_mem_defrag>:

/**
 * Join the adjacent free memory blocks
 */
void lv_mem_defrag(void)
{
 801c876:	b580      	push	{r7, lr}
 801c878:	b082      	sub	sp, #8
 801c87a:	af00      	add	r7, sp, #0
#if LV_MEM_CUSTOM == 0
    lv_mem_ent_t * e_free;
    lv_mem_ent_t * e_next;
    e_free = ent_get_next(NULL);
 801c87c:	2000      	movs	r0, #0
 801c87e:	f000 fd79 	bl	801d374 <ent_get_next>
 801c882:	6078      	str	r0, [r7, #4]

    while(1) {
        /*Search the next free entry*/
        while(e_free != NULL) {
 801c884:	e00a      	b.n	801c89c <lv_mem_defrag+0x26>
            if(e_free->header.s.used != 0) {
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	781b      	ldrb	r3, [r3, #0]
 801c88a:	f003 0301 	and.w	r3, r3, #1
 801c88e:	b2db      	uxtb	r3, r3
 801c890:	2b00      	cmp	r3, #0
 801c892:	d007      	beq.n	801c8a4 <lv_mem_defrag+0x2e>
                e_free = ent_get_next(e_free);
 801c894:	6878      	ldr	r0, [r7, #4]
 801c896:	f000 fd6d 	bl	801d374 <ent_get_next>
 801c89a:	6078      	str	r0, [r7, #4]
        while(e_free != NULL) {
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d1f1      	bne.n	801c886 <lv_mem_defrag+0x10>
 801c8a2:	e000      	b.n	801c8a6 <lv_mem_defrag+0x30>
            }
            else {
                break;
 801c8a4:	bf00      	nop
            }
        }

        if(e_free == NULL) return;
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d02c      	beq.n	801c906 <lv_mem_defrag+0x90>

        /*Joint the following free entries to the free*/
        e_next = ent_get_next(e_free);
 801c8ac:	6878      	ldr	r0, [r7, #4]
 801c8ae:	f000 fd61 	bl	801d374 <ent_get_next>
 801c8b2:	6038      	str	r0, [r7, #0]
        while(e_next != NULL) {
 801c8b4:	e01c      	b.n	801c8f0 <lv_mem_defrag+0x7a>
            if(e_next->header.s.used == 0) {
 801c8b6:	683b      	ldr	r3, [r7, #0]
 801c8b8:	781b      	ldrb	r3, [r3, #0]
 801c8ba:	f003 0301 	and.w	r3, r3, #1
 801c8be:	b2db      	uxtb	r3, r3
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d119      	bne.n	801c8f8 <lv_mem_defrag+0x82>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c8cc:	461a      	mov	r2, r3
 801c8ce:	683b      	ldr	r3, [r7, #0]
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c8d6:	4413      	add	r3, r2
 801c8d8:	3304      	adds	r3, #4
 801c8da:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c8de:	687a      	ldr	r2, [r7, #4]
 801c8e0:	6813      	ldr	r3, [r2, #0]
 801c8e2:	f361 035f 	bfi	r3, r1, #1, #31
 801c8e6:	6013      	str	r3, [r2, #0]
            }
            else {
                break;
            }

            e_next = ent_get_next(e_next);
 801c8e8:	6838      	ldr	r0, [r7, #0]
 801c8ea:	f000 fd43 	bl	801d374 <ent_get_next>
 801c8ee:	6038      	str	r0, [r7, #0]
        while(e_next != NULL) {
 801c8f0:	683b      	ldr	r3, [r7, #0]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d1df      	bne.n	801c8b6 <lv_mem_defrag+0x40>
 801c8f6:	e000      	b.n	801c8fa <lv_mem_defrag+0x84>
                break;
 801c8f8:	bf00      	nop
        }

        if(e_next == NULL) return;
 801c8fa:	683b      	ldr	r3, [r7, #0]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d004      	beq.n	801c90a <lv_mem_defrag+0x94>

        /*Continue from the lastly checked entry*/
        e_free = e_next;
 801c900:	683b      	ldr	r3, [r7, #0]
 801c902:	607b      	str	r3, [r7, #4]
        while(e_free != NULL) {
 801c904:	e7ca      	b.n	801c89c <lv_mem_defrag+0x26>
        if(e_free == NULL) return;
 801c906:	bf00      	nop
 801c908:	e000      	b.n	801c90c <lv_mem_defrag+0x96>
        if(e_next == NULL) return;
 801c90a:	bf00      	nop
    }
#endif
}
 801c90c:	3708      	adds	r7, #8
 801c90e:	46bd      	mov	sp, r7
 801c910:	bd80      	pop	{r7, pc}
	...

0801c914 <_lv_mem_get_size>:
 */

#if LV_ENABLE_GC == 0

uint32_t _lv_mem_get_size(const void * data)
{
 801c914:	b480      	push	{r7}
 801c916:	b085      	sub	sp, #20
 801c918:	af00      	add	r7, sp, #0
 801c91a:	6078      	str	r0, [r7, #4]
    if(data == NULL) return 0;
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d101      	bne.n	801c926 <_lv_mem_get_size+0x12>
 801c922:	2300      	movs	r3, #0
 801c924:	e00c      	b.n	801c940 <_lv_mem_get_size+0x2c>
    if(data == &zero_mem) return 0;
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	4a08      	ldr	r2, [pc, #32]	; (801c94c <_lv_mem_get_size+0x38>)
 801c92a:	4293      	cmp	r3, r2
 801c92c:	d101      	bne.n	801c932 <_lv_mem_get_size+0x1e>
 801c92e:	2300      	movs	r3, #0
 801c930:	e006      	b.n	801c940 <_lv_mem_get_size+0x2c>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	3b04      	subs	r3, #4
 801c936:	60fb      	str	r3, [r7, #12]

    return e->header.s.d_size;
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	f3c3 035e 	ubfx	r3, r3, #1, #31
}
 801c940:	4618      	mov	r0, r3
 801c942:	3714      	adds	r7, #20
 801c944:	46bd      	mov	sp, r7
 801c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c94a:	4770      	bx	lr
 801c94c:	2001806c 	.word	0x2001806c

0801c950 <_lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * _lv_mem_buf_get(uint32_t size)
{
 801c950:	b580      	push	{r7, lr}
 801c952:	b084      	sub	sp, #16
 801c954:	af00      	add	r7, sp, #0
 801c956:	6078      	str	r0, [r7, #4]
    if(size == 0) return NULL;
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d101      	bne.n	801c962 <_lv_mem_buf_get+0x12>
 801c95e:	2300      	movs	r3, #0
 801c960:	e0c8      	b.n	801caf4 <_lv_mem_buf_get+0x1a4>

    /*Try small static buffers first*/
    uint8_t i;
    if(size <= MEM_BUF_SMALL_SIZE) {
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	2b10      	cmp	r3, #16
 801c966:	d81f      	bhi.n	801c9a8 <_lv_mem_buf_get+0x58>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801c968:	2300      	movs	r3, #0
 801c96a:	73fb      	strb	r3, [r7, #15]
 801c96c:	e019      	b.n	801c9a2 <_lv_mem_buf_get+0x52>
            if(mem_buf_small[i].used == 0) {
 801c96e:	7bfb      	ldrb	r3, [r7, #15]
 801c970:	4a62      	ldr	r2, [pc, #392]	; (801cafc <_lv_mem_buf_get+0x1ac>)
 801c972:	00db      	lsls	r3, r3, #3
 801c974:	4413      	add	r3, r2
 801c976:	799b      	ldrb	r3, [r3, #6]
 801c978:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c97c:	b2db      	uxtb	r3, r3
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d10c      	bne.n	801c99c <_lv_mem_buf_get+0x4c>
                mem_buf_small[i].used = 1;
 801c982:	7bfb      	ldrb	r3, [r7, #15]
 801c984:	4a5d      	ldr	r2, [pc, #372]	; (801cafc <_lv_mem_buf_get+0x1ac>)
 801c986:	00db      	lsls	r3, r3, #3
 801c988:	4413      	add	r3, r2
 801c98a:	799a      	ldrb	r2, [r3, #6]
 801c98c:	f042 0201 	orr.w	r2, r2, #1
 801c990:	719a      	strb	r2, [r3, #6]
                return mem_buf_small[i].p;
 801c992:	7bfb      	ldrb	r3, [r7, #15]
 801c994:	4a59      	ldr	r2, [pc, #356]	; (801cafc <_lv_mem_buf_get+0x1ac>)
 801c996:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c99a:	e0ab      	b.n	801caf4 <_lv_mem_buf_get+0x1a4>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801c99c:	7bfb      	ldrb	r3, [r7, #15]
 801c99e:	3301      	adds	r3, #1
 801c9a0:	73fb      	strb	r3, [r7, #15]
 801c9a2:	7bfb      	ldrb	r3, [r7, #15]
 801c9a4:	2b01      	cmp	r3, #1
 801c9a6:	d9e2      	bls.n	801c96e <_lv_mem_buf_get+0x1e>
            }
        }
    }

    /*Try to find a free buffer with suitable size */
    int8_t i_guess = -1;
 801c9a8:	23ff      	movs	r3, #255	; 0xff
 801c9aa:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c9ac:	2300      	movs	r3, #0
 801c9ae:	73fb      	strb	r3, [r7, #15]
 801c9b0:	e041      	b.n	801ca36 <_lv_mem_buf_get+0xe6>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 801c9b2:	7bfb      	ldrb	r3, [r7, #15]
 801c9b4:	4a52      	ldr	r2, [pc, #328]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801c9b6:	00db      	lsls	r3, r3, #3
 801c9b8:	4413      	add	r3, r2
 801c9ba:	799b      	ldrb	r3, [r3, #6]
 801c9bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c9c0:	b2db      	uxtb	r3, r3
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d134      	bne.n	801ca30 <_lv_mem_buf_get+0xe0>
 801c9c6:	7bfb      	ldrb	r3, [r7, #15]
 801c9c8:	4a4d      	ldr	r2, [pc, #308]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801c9ca:	00db      	lsls	r3, r3, #3
 801c9cc:	4413      	add	r3, r2
 801c9ce:	889b      	ldrh	r3, [r3, #4]
 801c9d0:	461a      	mov	r2, r3
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	4293      	cmp	r3, r2
 801c9d6:	d82b      	bhi.n	801ca30 <_lv_mem_buf_get+0xe0>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
 801c9d8:	7bfb      	ldrb	r3, [r7, #15]
 801c9da:	4a49      	ldr	r2, [pc, #292]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801c9dc:	00db      	lsls	r3, r3, #3
 801c9de:	4413      	add	r3, r2
 801c9e0:	889b      	ldrh	r3, [r3, #4]
 801c9e2:	461a      	mov	r2, r3
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	4293      	cmp	r3, r2
 801c9e8:	d10c      	bne.n	801ca04 <_lv_mem_buf_get+0xb4>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 801c9ea:	7bfb      	ldrb	r3, [r7, #15]
 801c9ec:	4a44      	ldr	r2, [pc, #272]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801c9ee:	00db      	lsls	r3, r3, #3
 801c9f0:	4413      	add	r3, r2
 801c9f2:	799a      	ldrb	r2, [r3, #6]
 801c9f4:	f042 0201 	orr.w	r2, r2, #1
 801c9f8:	719a      	strb	r2, [r3, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
 801c9fa:	7bfb      	ldrb	r3, [r7, #15]
 801c9fc:	4a40      	ldr	r2, [pc, #256]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801c9fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ca02:	e077      	b.n	801caf4 <_lv_mem_buf_get+0x1a4>
            }
            else if(i_guess < 0) {
 801ca04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	da02      	bge.n	801ca12 <_lv_mem_buf_get+0xc2>
                i_guess = i;
 801ca0c:	7bfb      	ldrb	r3, [r7, #15]
 801ca0e:	73bb      	strb	r3, [r7, #14]
 801ca10:	e00e      	b.n	801ca30 <_lv_mem_buf_get+0xe0>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
 801ca12:	7bfb      	ldrb	r3, [r7, #15]
 801ca14:	4a3a      	ldr	r2, [pc, #232]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801ca16:	00db      	lsls	r3, r3, #3
 801ca18:	4413      	add	r3, r2
 801ca1a:	889a      	ldrh	r2, [r3, #4]
 801ca1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca20:	4937      	ldr	r1, [pc, #220]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801ca22:	00db      	lsls	r3, r3, #3
 801ca24:	440b      	add	r3, r1
 801ca26:	889b      	ldrh	r3, [r3, #4]
 801ca28:	429a      	cmp	r2, r3
 801ca2a:	d201      	bcs.n	801ca30 <_lv_mem_buf_get+0xe0>
                i_guess = i;
 801ca2c:	7bfb      	ldrb	r3, [r7, #15]
 801ca2e:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801ca30:	7bfb      	ldrb	r3, [r7, #15]
 801ca32:	3301      	adds	r3, #1
 801ca34:	73fb      	strb	r3, [r7, #15]
 801ca36:	7bfb      	ldrb	r3, [r7, #15]
 801ca38:	2b0f      	cmp	r3, #15
 801ca3a:	d9ba      	bls.n	801c9b2 <_lv_mem_buf_get+0x62>
            }
        }
    }

    if(i_guess >= 0) {
 801ca3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	db0e      	blt.n	801ca62 <_lv_mem_buf_get+0x112>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 801ca44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca48:	4a2d      	ldr	r2, [pc, #180]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801ca4a:	00db      	lsls	r3, r3, #3
 801ca4c:	4413      	add	r3, r2
 801ca4e:	799a      	ldrb	r2, [r3, #6]
 801ca50:	f042 0201 	orr.w	r2, r2, #1
 801ca54:	719a      	strb	r2, [r3, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
 801ca56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca5a:	4a29      	ldr	r2, [pc, #164]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801ca5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ca60:	e048      	b.n	801caf4 <_lv_mem_buf_get+0x1a4>
    }

    /*Reallocate a free buffer*/
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801ca62:	2300      	movs	r3, #0
 801ca64:	73fb      	strb	r3, [r7, #15]
 801ca66:	e03a      	b.n	801cade <_lv_mem_buf_get+0x18e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 801ca68:	7bfb      	ldrb	r3, [r7, #15]
 801ca6a:	4a25      	ldr	r2, [pc, #148]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801ca6c:	00db      	lsls	r3, r3, #3
 801ca6e:	4413      	add	r3, r2
 801ca70:	799b      	ldrb	r3, [r3, #6]
 801ca72:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ca76:	b2db      	uxtb	r3, r3
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d12d      	bne.n	801cad8 <_lv_mem_buf_get+0x188>
            /*if this fails you probably need to increase your LV_MEM_SIZE/heap size*/
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
 801ca7c:	7bfb      	ldrb	r3, [r7, #15]
 801ca7e:	4a20      	ldr	r2, [pc, #128]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801ca80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ca84:	6879      	ldr	r1, [r7, #4]
 801ca86:	4618      	mov	r0, r3
 801ca88:	f7ff fea0 	bl	801c7cc <lv_mem_realloc>
 801ca8c:	60b8      	str	r0, [r7, #8]
            if(buf == NULL) {
 801ca8e:	68bb      	ldr	r3, [r7, #8]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d107      	bne.n	801caa4 <_lv_mem_buf_get+0x154>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
 801ca94:	f04f 0200 	mov.w	r2, #0
 801ca98:	f04f 0300 	mov.w	r3, #0
 801ca9c:	4819      	ldr	r0, [pc, #100]	; (801cb04 <_lv_mem_buf_get+0x1b4>)
 801ca9e:	f7ff f879 	bl	801bb94 <lv_debug_log_error>
 801caa2:	e7fe      	b.n	801caa2 <_lv_mem_buf_get+0x152>
                return NULL;
            }
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 801caa4:	7bfb      	ldrb	r3, [r7, #15]
 801caa6:	4a16      	ldr	r2, [pc, #88]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801caa8:	00db      	lsls	r3, r3, #3
 801caaa:	4413      	add	r3, r2
 801caac:	799a      	ldrb	r2, [r3, #6]
 801caae:	f042 0201 	orr.w	r2, r2, #1
 801cab2:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
 801cab4:	7bfb      	ldrb	r3, [r7, #15]
 801cab6:	687a      	ldr	r2, [r7, #4]
 801cab8:	b291      	uxth	r1, r2
 801caba:	4a11      	ldr	r2, [pc, #68]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801cabc:	00db      	lsls	r3, r3, #3
 801cabe:	4413      	add	r3, r2
 801cac0:	460a      	mov	r2, r1
 801cac2:	809a      	strh	r2, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
 801cac4:	7bfb      	ldrb	r3, [r7, #15]
 801cac6:	490e      	ldr	r1, [pc, #56]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801cac8:	68ba      	ldr	r2, [r7, #8]
 801caca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
 801cace:	7bfb      	ldrb	r3, [r7, #15]
 801cad0:	4a0b      	ldr	r2, [pc, #44]	; (801cb00 <_lv_mem_buf_get+0x1b0>)
 801cad2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cad6:	e00d      	b.n	801caf4 <_lv_mem_buf_get+0x1a4>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801cad8:	7bfb      	ldrb	r3, [r7, #15]
 801cada:	3301      	adds	r3, #1
 801cadc:	73fb      	strb	r3, [r7, #15]
 801cade:	7bfb      	ldrb	r3, [r7, #15]
 801cae0:	2b0f      	cmp	r3, #15
 801cae2:	d9c1      	bls.n	801ca68 <_lv_mem_buf_get+0x118>
        }
    }

    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
 801cae4:	f04f 0200 	mov.w	r2, #0
 801cae8:	f04f 0300 	mov.w	r3, #0
 801caec:	4806      	ldr	r0, [pc, #24]	; (801cb08 <_lv_mem_buf_get+0x1b8>)
 801caee:	f7ff f851 	bl	801bb94 <lv_debug_log_error>
 801caf2:	e7fe      	b.n	801caf2 <_lv_mem_buf_get+0x1a2>
    return NULL;
}
 801caf4:	4618      	mov	r0, r3
 801caf6:	3710      	adds	r7, #16
 801caf8:	46bd      	mov	sp, r7
 801cafa:	bd80      	pop	{r7, pc}
 801cafc:	20000034 	.word	0x20000034
 801cb00:	200217b8 	.word	0x200217b8
 801cb04:	0802d188 	.word	0x0802d188
 801cb08:	0802d1dc 	.word	0x0802d1dc

0801cb0c <_lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void _lv_mem_buf_release(void * p)
{
 801cb0c:	b480      	push	{r7}
 801cb0e:	b085      	sub	sp, #20
 801cb10:	af00      	add	r7, sp, #0
 801cb12:	6078      	str	r0, [r7, #4]
    uint8_t i;

    /*Try small static buffers first*/
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801cb14:	2300      	movs	r3, #0
 801cb16:	73fb      	strb	r3, [r7, #15]
 801cb18:	e012      	b.n	801cb40 <_lv_mem_buf_release+0x34>
        if(mem_buf_small[i].p == p) {
 801cb1a:	7bfb      	ldrb	r3, [r7, #15]
 801cb1c:	4a19      	ldr	r2, [pc, #100]	; (801cb84 <_lv_mem_buf_release+0x78>)
 801cb1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cb22:	687a      	ldr	r2, [r7, #4]
 801cb24:	429a      	cmp	r2, r3
 801cb26:	d108      	bne.n	801cb3a <_lv_mem_buf_release+0x2e>
            mem_buf_small[i].used = 0;
 801cb28:	7bfb      	ldrb	r3, [r7, #15]
 801cb2a:	4a16      	ldr	r2, [pc, #88]	; (801cb84 <_lv_mem_buf_release+0x78>)
 801cb2c:	00db      	lsls	r3, r3, #3
 801cb2e:	4413      	add	r3, r2
 801cb30:	799a      	ldrb	r2, [r3, #6]
 801cb32:	f36f 0200 	bfc	r2, #0, #1
 801cb36:	719a      	strb	r2, [r3, #6]
            return;
 801cb38:	e01e      	b.n	801cb78 <_lv_mem_buf_release+0x6c>
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801cb3a:	7bfb      	ldrb	r3, [r7, #15]
 801cb3c:	3301      	adds	r3, #1
 801cb3e:	73fb      	strb	r3, [r7, #15]
 801cb40:	7bfb      	ldrb	r3, [r7, #15]
 801cb42:	2b01      	cmp	r3, #1
 801cb44:	d9e9      	bls.n	801cb1a <_lv_mem_buf_release+0xe>
        }
    }

    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801cb46:	2300      	movs	r3, #0
 801cb48:	73fb      	strb	r3, [r7, #15]
 801cb4a:	e012      	b.n	801cb72 <_lv_mem_buf_release+0x66>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
 801cb4c:	7bfb      	ldrb	r3, [r7, #15]
 801cb4e:	4a0e      	ldr	r2, [pc, #56]	; (801cb88 <_lv_mem_buf_release+0x7c>)
 801cb50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cb54:	687a      	ldr	r2, [r7, #4]
 801cb56:	429a      	cmp	r2, r3
 801cb58:	d108      	bne.n	801cb6c <_lv_mem_buf_release+0x60>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 801cb5a:	7bfb      	ldrb	r3, [r7, #15]
 801cb5c:	4a0a      	ldr	r2, [pc, #40]	; (801cb88 <_lv_mem_buf_release+0x7c>)
 801cb5e:	00db      	lsls	r3, r3, #3
 801cb60:	4413      	add	r3, r2
 801cb62:	799a      	ldrb	r2, [r3, #6]
 801cb64:	f36f 0200 	bfc	r2, #0, #1
 801cb68:	719a      	strb	r2, [r3, #6]
            return;
 801cb6a:	e005      	b.n	801cb78 <_lv_mem_buf_release+0x6c>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801cb6c:	7bfb      	ldrb	r3, [r7, #15]
 801cb6e:	3301      	adds	r3, #1
 801cb70:	73fb      	strb	r3, [r7, #15]
 801cb72:	7bfb      	ldrb	r3, [r7, #15]
 801cb74:	2b0f      	cmp	r3, #15
 801cb76:	d9e9      	bls.n	801cb4c <_lv_mem_buf_release+0x40>
        }
    }

    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
}
 801cb78:	3714      	adds	r7, #20
 801cb7a:	46bd      	mov	sp, r7
 801cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb80:	4770      	bx	lr
 801cb82:	bf00      	nop
 801cb84:	20000034 	.word	0x20000034
 801cb88:	200217b8 	.word	0x200217b8

0801cb8c <_lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void _lv_mem_buf_free_all(void)
{
 801cb8c:	b580      	push	{r7, lr}
 801cb8e:	b082      	sub	sp, #8
 801cb90:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801cb92:	2300      	movs	r3, #0
 801cb94:	71fb      	strb	r3, [r7, #7]
 801cb96:	e00a      	b.n	801cbae <_lv_mem_buf_free_all+0x22>
        mem_buf_small[i].used = 0;
 801cb98:	79fb      	ldrb	r3, [r7, #7]
 801cb9a:	4a1d      	ldr	r2, [pc, #116]	; (801cc10 <_lv_mem_buf_free_all+0x84>)
 801cb9c:	00db      	lsls	r3, r3, #3
 801cb9e:	4413      	add	r3, r2
 801cba0:	799a      	ldrb	r2, [r3, #6]
 801cba2:	f36f 0200 	bfc	r2, #0, #1
 801cba6:	719a      	strb	r2, [r3, #6]
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801cba8:	79fb      	ldrb	r3, [r7, #7]
 801cbaa:	3301      	adds	r3, #1
 801cbac:	71fb      	strb	r3, [r7, #7]
 801cbae:	79fb      	ldrb	r3, [r7, #7]
 801cbb0:	2b01      	cmp	r3, #1
 801cbb2:	d9f1      	bls.n	801cb98 <_lv_mem_buf_free_all+0xc>
    }

    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	71fb      	strb	r3, [r7, #7]
 801cbb8:	e022      	b.n	801cc00 <_lv_mem_buf_free_all+0x74>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
 801cbba:	79fb      	ldrb	r3, [r7, #7]
 801cbbc:	4a15      	ldr	r2, [pc, #84]	; (801cc14 <_lv_mem_buf_free_all+0x88>)
 801cbbe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d019      	beq.n	801cbfa <_lv_mem_buf_free_all+0x6e>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
 801cbc6:	79fb      	ldrb	r3, [r7, #7]
 801cbc8:	4a12      	ldr	r2, [pc, #72]	; (801cc14 <_lv_mem_buf_free_all+0x88>)
 801cbca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cbce:	4618      	mov	r0, r3
 801cbd0:	f7ff fda6 	bl	801c720 <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 801cbd4:	79fb      	ldrb	r3, [r7, #7]
 801cbd6:	4a0f      	ldr	r2, [pc, #60]	; (801cc14 <_lv_mem_buf_free_all+0x88>)
 801cbd8:	2100      	movs	r1, #0
 801cbda:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 801cbde:	79fb      	ldrb	r3, [r7, #7]
 801cbe0:	4a0c      	ldr	r2, [pc, #48]	; (801cc14 <_lv_mem_buf_free_all+0x88>)
 801cbe2:	00db      	lsls	r3, r3, #3
 801cbe4:	4413      	add	r3, r2
 801cbe6:	799a      	ldrb	r2, [r3, #6]
 801cbe8:	f36f 0200 	bfc	r2, #0, #1
 801cbec:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
 801cbee:	79fb      	ldrb	r3, [r7, #7]
 801cbf0:	4a08      	ldr	r2, [pc, #32]	; (801cc14 <_lv_mem_buf_free_all+0x88>)
 801cbf2:	00db      	lsls	r3, r3, #3
 801cbf4:	4413      	add	r3, r2
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	809a      	strh	r2, [r3, #4]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801cbfa:	79fb      	ldrb	r3, [r7, #7]
 801cbfc:	3301      	adds	r3, #1
 801cbfe:	71fb      	strb	r3, [r7, #7]
 801cc00:	79fb      	ldrb	r3, [r7, #7]
 801cc02:	2b0f      	cmp	r3, #15
 801cc04:	d9d9      	bls.n	801cbba <_lv_mem_buf_free_all+0x2e>
        }
    }
}
 801cc06:	bf00      	nop
 801cc08:	3708      	adds	r7, #8
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	bd80      	pop	{r7, pc}
 801cc0e:	bf00      	nop
 801cc10:	20000034 	.word	0x20000034
 801cc14:	200217b8 	.word	0x200217b8

0801cc18 <_lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * _lv_memcpy(void * dst, const void * src, size_t len)
{
 801cc18:	b480      	push	{r7}
 801cc1a:	b08b      	sub	sp, #44	; 0x2c
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	60f8      	str	r0, [r7, #12]
 801cc20:	60b9      	str	r1, [r7, #8]
 801cc22:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = dst;
 801cc24:	68fb      	ldr	r3, [r7, #12]
 801cc26:	627b      	str	r3, [r7, #36]	; 0x24
    const uint8_t * s8 = src;
 801cc28:	68bb      	ldr	r3, [r7, #8]
 801cc2a:	623b      	str	r3, [r7, #32]

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 801cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc2e:	f003 0303 	and.w	r3, r3, #3
 801cc32:	61fb      	str	r3, [r7, #28]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 801cc34:	6a3b      	ldr	r3, [r7, #32]
 801cc36:	f003 0303 	and.w	r3, r3, #3
 801cc3a:	613b      	str	r3, [r7, #16]

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 801cc3c:	693a      	ldr	r2, [r7, #16]
 801cc3e:	69fb      	ldr	r3, [r7, #28]
 801cc40:	429a      	cmp	r2, r3
 801cc42:	f000 815b 	beq.w	801cefc <_lv_memcpy+0x2e4>
        while(len > 32) {
 801cc46:	e142      	b.n	801cece <_lv_memcpy+0x2b6>
            REPEAT8(COPY8);
 801cc48:	6a3b      	ldr	r3, [r7, #32]
 801cc4a:	781a      	ldrb	r2, [r3, #0]
 801cc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc4e:	701a      	strb	r2, [r3, #0]
 801cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc52:	3301      	adds	r3, #1
 801cc54:	627b      	str	r3, [r7, #36]	; 0x24
 801cc56:	6a3b      	ldr	r3, [r7, #32]
 801cc58:	3301      	adds	r3, #1
 801cc5a:	623b      	str	r3, [r7, #32]
 801cc5c:	6a3b      	ldr	r3, [r7, #32]
 801cc5e:	781a      	ldrb	r2, [r3, #0]
 801cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc62:	701a      	strb	r2, [r3, #0]
 801cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc66:	3301      	adds	r3, #1
 801cc68:	627b      	str	r3, [r7, #36]	; 0x24
 801cc6a:	6a3b      	ldr	r3, [r7, #32]
 801cc6c:	3301      	adds	r3, #1
 801cc6e:	623b      	str	r3, [r7, #32]
 801cc70:	6a3b      	ldr	r3, [r7, #32]
 801cc72:	781a      	ldrb	r2, [r3, #0]
 801cc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc76:	701a      	strb	r2, [r3, #0]
 801cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc7a:	3301      	adds	r3, #1
 801cc7c:	627b      	str	r3, [r7, #36]	; 0x24
 801cc7e:	6a3b      	ldr	r3, [r7, #32]
 801cc80:	3301      	adds	r3, #1
 801cc82:	623b      	str	r3, [r7, #32]
 801cc84:	6a3b      	ldr	r3, [r7, #32]
 801cc86:	781a      	ldrb	r2, [r3, #0]
 801cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc8a:	701a      	strb	r2, [r3, #0]
 801cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc8e:	3301      	adds	r3, #1
 801cc90:	627b      	str	r3, [r7, #36]	; 0x24
 801cc92:	6a3b      	ldr	r3, [r7, #32]
 801cc94:	3301      	adds	r3, #1
 801cc96:	623b      	str	r3, [r7, #32]
 801cc98:	6a3b      	ldr	r3, [r7, #32]
 801cc9a:	781a      	ldrb	r2, [r3, #0]
 801cc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc9e:	701a      	strb	r2, [r3, #0]
 801cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cca2:	3301      	adds	r3, #1
 801cca4:	627b      	str	r3, [r7, #36]	; 0x24
 801cca6:	6a3b      	ldr	r3, [r7, #32]
 801cca8:	3301      	adds	r3, #1
 801ccaa:	623b      	str	r3, [r7, #32]
 801ccac:	6a3b      	ldr	r3, [r7, #32]
 801ccae:	781a      	ldrb	r2, [r3, #0]
 801ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccb2:	701a      	strb	r2, [r3, #0]
 801ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccb6:	3301      	adds	r3, #1
 801ccb8:	627b      	str	r3, [r7, #36]	; 0x24
 801ccba:	6a3b      	ldr	r3, [r7, #32]
 801ccbc:	3301      	adds	r3, #1
 801ccbe:	623b      	str	r3, [r7, #32]
 801ccc0:	6a3b      	ldr	r3, [r7, #32]
 801ccc2:	781a      	ldrb	r2, [r3, #0]
 801ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccc6:	701a      	strb	r2, [r3, #0]
 801ccc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccca:	3301      	adds	r3, #1
 801cccc:	627b      	str	r3, [r7, #36]	; 0x24
 801ccce:	6a3b      	ldr	r3, [r7, #32]
 801ccd0:	3301      	adds	r3, #1
 801ccd2:	623b      	str	r3, [r7, #32]
 801ccd4:	6a3b      	ldr	r3, [r7, #32]
 801ccd6:	781a      	ldrb	r2, [r3, #0]
 801ccd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccda:	701a      	strb	r2, [r3, #0]
 801ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccde:	3301      	adds	r3, #1
 801cce0:	627b      	str	r3, [r7, #36]	; 0x24
 801cce2:	6a3b      	ldr	r3, [r7, #32]
 801cce4:	3301      	adds	r3, #1
 801cce6:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 801cce8:	6a3b      	ldr	r3, [r7, #32]
 801ccea:	781a      	ldrb	r2, [r3, #0]
 801ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccee:	701a      	strb	r2, [r3, #0]
 801ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccf2:	3301      	adds	r3, #1
 801ccf4:	627b      	str	r3, [r7, #36]	; 0x24
 801ccf6:	6a3b      	ldr	r3, [r7, #32]
 801ccf8:	3301      	adds	r3, #1
 801ccfa:	623b      	str	r3, [r7, #32]
 801ccfc:	6a3b      	ldr	r3, [r7, #32]
 801ccfe:	781a      	ldrb	r2, [r3, #0]
 801cd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd02:	701a      	strb	r2, [r3, #0]
 801cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd06:	3301      	adds	r3, #1
 801cd08:	627b      	str	r3, [r7, #36]	; 0x24
 801cd0a:	6a3b      	ldr	r3, [r7, #32]
 801cd0c:	3301      	adds	r3, #1
 801cd0e:	623b      	str	r3, [r7, #32]
 801cd10:	6a3b      	ldr	r3, [r7, #32]
 801cd12:	781a      	ldrb	r2, [r3, #0]
 801cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd16:	701a      	strb	r2, [r3, #0]
 801cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd1a:	3301      	adds	r3, #1
 801cd1c:	627b      	str	r3, [r7, #36]	; 0x24
 801cd1e:	6a3b      	ldr	r3, [r7, #32]
 801cd20:	3301      	adds	r3, #1
 801cd22:	623b      	str	r3, [r7, #32]
 801cd24:	6a3b      	ldr	r3, [r7, #32]
 801cd26:	781a      	ldrb	r2, [r3, #0]
 801cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd2a:	701a      	strb	r2, [r3, #0]
 801cd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd2e:	3301      	adds	r3, #1
 801cd30:	627b      	str	r3, [r7, #36]	; 0x24
 801cd32:	6a3b      	ldr	r3, [r7, #32]
 801cd34:	3301      	adds	r3, #1
 801cd36:	623b      	str	r3, [r7, #32]
 801cd38:	6a3b      	ldr	r3, [r7, #32]
 801cd3a:	781a      	ldrb	r2, [r3, #0]
 801cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd3e:	701a      	strb	r2, [r3, #0]
 801cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd42:	3301      	adds	r3, #1
 801cd44:	627b      	str	r3, [r7, #36]	; 0x24
 801cd46:	6a3b      	ldr	r3, [r7, #32]
 801cd48:	3301      	adds	r3, #1
 801cd4a:	623b      	str	r3, [r7, #32]
 801cd4c:	6a3b      	ldr	r3, [r7, #32]
 801cd4e:	781a      	ldrb	r2, [r3, #0]
 801cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd52:	701a      	strb	r2, [r3, #0]
 801cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd56:	3301      	adds	r3, #1
 801cd58:	627b      	str	r3, [r7, #36]	; 0x24
 801cd5a:	6a3b      	ldr	r3, [r7, #32]
 801cd5c:	3301      	adds	r3, #1
 801cd5e:	623b      	str	r3, [r7, #32]
 801cd60:	6a3b      	ldr	r3, [r7, #32]
 801cd62:	781a      	ldrb	r2, [r3, #0]
 801cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd66:	701a      	strb	r2, [r3, #0]
 801cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd6a:	3301      	adds	r3, #1
 801cd6c:	627b      	str	r3, [r7, #36]	; 0x24
 801cd6e:	6a3b      	ldr	r3, [r7, #32]
 801cd70:	3301      	adds	r3, #1
 801cd72:	623b      	str	r3, [r7, #32]
 801cd74:	6a3b      	ldr	r3, [r7, #32]
 801cd76:	781a      	ldrb	r2, [r3, #0]
 801cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd7a:	701a      	strb	r2, [r3, #0]
 801cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd7e:	3301      	adds	r3, #1
 801cd80:	627b      	str	r3, [r7, #36]	; 0x24
 801cd82:	6a3b      	ldr	r3, [r7, #32]
 801cd84:	3301      	adds	r3, #1
 801cd86:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 801cd88:	6a3b      	ldr	r3, [r7, #32]
 801cd8a:	781a      	ldrb	r2, [r3, #0]
 801cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd8e:	701a      	strb	r2, [r3, #0]
 801cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd92:	3301      	adds	r3, #1
 801cd94:	627b      	str	r3, [r7, #36]	; 0x24
 801cd96:	6a3b      	ldr	r3, [r7, #32]
 801cd98:	3301      	adds	r3, #1
 801cd9a:	623b      	str	r3, [r7, #32]
 801cd9c:	6a3b      	ldr	r3, [r7, #32]
 801cd9e:	781a      	ldrb	r2, [r3, #0]
 801cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cda2:	701a      	strb	r2, [r3, #0]
 801cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cda6:	3301      	adds	r3, #1
 801cda8:	627b      	str	r3, [r7, #36]	; 0x24
 801cdaa:	6a3b      	ldr	r3, [r7, #32]
 801cdac:	3301      	adds	r3, #1
 801cdae:	623b      	str	r3, [r7, #32]
 801cdb0:	6a3b      	ldr	r3, [r7, #32]
 801cdb2:	781a      	ldrb	r2, [r3, #0]
 801cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdb6:	701a      	strb	r2, [r3, #0]
 801cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdba:	3301      	adds	r3, #1
 801cdbc:	627b      	str	r3, [r7, #36]	; 0x24
 801cdbe:	6a3b      	ldr	r3, [r7, #32]
 801cdc0:	3301      	adds	r3, #1
 801cdc2:	623b      	str	r3, [r7, #32]
 801cdc4:	6a3b      	ldr	r3, [r7, #32]
 801cdc6:	781a      	ldrb	r2, [r3, #0]
 801cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdca:	701a      	strb	r2, [r3, #0]
 801cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdce:	3301      	adds	r3, #1
 801cdd0:	627b      	str	r3, [r7, #36]	; 0x24
 801cdd2:	6a3b      	ldr	r3, [r7, #32]
 801cdd4:	3301      	adds	r3, #1
 801cdd6:	623b      	str	r3, [r7, #32]
 801cdd8:	6a3b      	ldr	r3, [r7, #32]
 801cdda:	781a      	ldrb	r2, [r3, #0]
 801cddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdde:	701a      	strb	r2, [r3, #0]
 801cde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cde2:	3301      	adds	r3, #1
 801cde4:	627b      	str	r3, [r7, #36]	; 0x24
 801cde6:	6a3b      	ldr	r3, [r7, #32]
 801cde8:	3301      	adds	r3, #1
 801cdea:	623b      	str	r3, [r7, #32]
 801cdec:	6a3b      	ldr	r3, [r7, #32]
 801cdee:	781a      	ldrb	r2, [r3, #0]
 801cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdf2:	701a      	strb	r2, [r3, #0]
 801cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdf6:	3301      	adds	r3, #1
 801cdf8:	627b      	str	r3, [r7, #36]	; 0x24
 801cdfa:	6a3b      	ldr	r3, [r7, #32]
 801cdfc:	3301      	adds	r3, #1
 801cdfe:	623b      	str	r3, [r7, #32]
 801ce00:	6a3b      	ldr	r3, [r7, #32]
 801ce02:	781a      	ldrb	r2, [r3, #0]
 801ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce06:	701a      	strb	r2, [r3, #0]
 801ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce0a:	3301      	adds	r3, #1
 801ce0c:	627b      	str	r3, [r7, #36]	; 0x24
 801ce0e:	6a3b      	ldr	r3, [r7, #32]
 801ce10:	3301      	adds	r3, #1
 801ce12:	623b      	str	r3, [r7, #32]
 801ce14:	6a3b      	ldr	r3, [r7, #32]
 801ce16:	781a      	ldrb	r2, [r3, #0]
 801ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce1a:	701a      	strb	r2, [r3, #0]
 801ce1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce1e:	3301      	adds	r3, #1
 801ce20:	627b      	str	r3, [r7, #36]	; 0x24
 801ce22:	6a3b      	ldr	r3, [r7, #32]
 801ce24:	3301      	adds	r3, #1
 801ce26:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 801ce28:	6a3b      	ldr	r3, [r7, #32]
 801ce2a:	781a      	ldrb	r2, [r3, #0]
 801ce2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce2e:	701a      	strb	r2, [r3, #0]
 801ce30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce32:	3301      	adds	r3, #1
 801ce34:	627b      	str	r3, [r7, #36]	; 0x24
 801ce36:	6a3b      	ldr	r3, [r7, #32]
 801ce38:	3301      	adds	r3, #1
 801ce3a:	623b      	str	r3, [r7, #32]
 801ce3c:	6a3b      	ldr	r3, [r7, #32]
 801ce3e:	781a      	ldrb	r2, [r3, #0]
 801ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce42:	701a      	strb	r2, [r3, #0]
 801ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce46:	3301      	adds	r3, #1
 801ce48:	627b      	str	r3, [r7, #36]	; 0x24
 801ce4a:	6a3b      	ldr	r3, [r7, #32]
 801ce4c:	3301      	adds	r3, #1
 801ce4e:	623b      	str	r3, [r7, #32]
 801ce50:	6a3b      	ldr	r3, [r7, #32]
 801ce52:	781a      	ldrb	r2, [r3, #0]
 801ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce56:	701a      	strb	r2, [r3, #0]
 801ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce5a:	3301      	adds	r3, #1
 801ce5c:	627b      	str	r3, [r7, #36]	; 0x24
 801ce5e:	6a3b      	ldr	r3, [r7, #32]
 801ce60:	3301      	adds	r3, #1
 801ce62:	623b      	str	r3, [r7, #32]
 801ce64:	6a3b      	ldr	r3, [r7, #32]
 801ce66:	781a      	ldrb	r2, [r3, #0]
 801ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce6a:	701a      	strb	r2, [r3, #0]
 801ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce6e:	3301      	adds	r3, #1
 801ce70:	627b      	str	r3, [r7, #36]	; 0x24
 801ce72:	6a3b      	ldr	r3, [r7, #32]
 801ce74:	3301      	adds	r3, #1
 801ce76:	623b      	str	r3, [r7, #32]
 801ce78:	6a3b      	ldr	r3, [r7, #32]
 801ce7a:	781a      	ldrb	r2, [r3, #0]
 801ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce7e:	701a      	strb	r2, [r3, #0]
 801ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce82:	3301      	adds	r3, #1
 801ce84:	627b      	str	r3, [r7, #36]	; 0x24
 801ce86:	6a3b      	ldr	r3, [r7, #32]
 801ce88:	3301      	adds	r3, #1
 801ce8a:	623b      	str	r3, [r7, #32]
 801ce8c:	6a3b      	ldr	r3, [r7, #32]
 801ce8e:	781a      	ldrb	r2, [r3, #0]
 801ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce92:	701a      	strb	r2, [r3, #0]
 801ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce96:	3301      	adds	r3, #1
 801ce98:	627b      	str	r3, [r7, #36]	; 0x24
 801ce9a:	6a3b      	ldr	r3, [r7, #32]
 801ce9c:	3301      	adds	r3, #1
 801ce9e:	623b      	str	r3, [r7, #32]
 801cea0:	6a3b      	ldr	r3, [r7, #32]
 801cea2:	781a      	ldrb	r2, [r3, #0]
 801cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cea6:	701a      	strb	r2, [r3, #0]
 801cea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceaa:	3301      	adds	r3, #1
 801ceac:	627b      	str	r3, [r7, #36]	; 0x24
 801ceae:	6a3b      	ldr	r3, [r7, #32]
 801ceb0:	3301      	adds	r3, #1
 801ceb2:	623b      	str	r3, [r7, #32]
 801ceb4:	6a3b      	ldr	r3, [r7, #32]
 801ceb6:	781a      	ldrb	r2, [r3, #0]
 801ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceba:	701a      	strb	r2, [r3, #0]
 801cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cebe:	3301      	adds	r3, #1
 801cec0:	627b      	str	r3, [r7, #36]	; 0x24
 801cec2:	6a3b      	ldr	r3, [r7, #32]
 801cec4:	3301      	adds	r3, #1
 801cec6:	623b      	str	r3, [r7, #32]
            len -= 32;
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	3b20      	subs	r3, #32
 801cecc:	607b      	str	r3, [r7, #4]
        while(len > 32) {
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	2b20      	cmp	r3, #32
 801ced2:	f63f aeb9 	bhi.w	801cc48 <_lv_memcpy+0x30>
        }
        while(len) {
 801ced6:	e00c      	b.n	801cef2 <_lv_memcpy+0x2da>
            COPY8
 801ced8:	6a3b      	ldr	r3, [r7, #32]
 801ceda:	781a      	ldrb	r2, [r3, #0]
 801cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cede:	701a      	strb	r2, [r3, #0]
 801cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cee2:	3301      	adds	r3, #1
 801cee4:	627b      	str	r3, [r7, #36]	; 0x24
 801cee6:	6a3b      	ldr	r3, [r7, #32]
 801cee8:	3301      	adds	r3, #1
 801ceea:	623b      	str	r3, [r7, #32]
            len--;
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	3b01      	subs	r3, #1
 801cef0:	607b      	str	r3, [r7, #4]
        while(len) {
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d1ef      	bne.n	801ced8 <_lv_memcpy+0x2c0>
        }
        return dst;
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	e09f      	b.n	801d03c <_lv_memcpy+0x424>
    }

    /*Make the memories aligned*/
    if(d_align) {
 801cefc:	69fb      	ldr	r3, [r7, #28]
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d01a      	beq.n	801cf38 <_lv_memcpy+0x320>
        d_align = ALIGN_MASK + 1 - d_align;
 801cf02:	69fb      	ldr	r3, [r7, #28]
 801cf04:	f1c3 0304 	rsb	r3, r3, #4
 801cf08:	61fb      	str	r3, [r7, #28]
        while(d_align && len) {
 801cf0a:	e00f      	b.n	801cf2c <_lv_memcpy+0x314>
            COPY8;
 801cf0c:	6a3b      	ldr	r3, [r7, #32]
 801cf0e:	781a      	ldrb	r2, [r3, #0]
 801cf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf12:	701a      	strb	r2, [r3, #0]
 801cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf16:	3301      	adds	r3, #1
 801cf18:	627b      	str	r3, [r7, #36]	; 0x24
 801cf1a:	6a3b      	ldr	r3, [r7, #32]
 801cf1c:	3301      	adds	r3, #1
 801cf1e:	623b      	str	r3, [r7, #32]
            d_align--;
 801cf20:	69fb      	ldr	r3, [r7, #28]
 801cf22:	3b01      	subs	r3, #1
 801cf24:	61fb      	str	r3, [r7, #28]
            len--;
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	3b01      	subs	r3, #1
 801cf2a:	607b      	str	r3, [r7, #4]
        while(d_align && len) {
 801cf2c:	69fb      	ldr	r3, [r7, #28]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d002      	beq.n	801cf38 <_lv_memcpy+0x320>
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d1e9      	bne.n	801cf0c <_lv_memcpy+0x2f4>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 801cf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf3a:	61bb      	str	r3, [r7, #24]
    const uint32_t * s32 = (uint32_t *)s8;
 801cf3c:	6a3b      	ldr	r3, [r7, #32]
 801cf3e:	617b      	str	r3, [r7, #20]
    while(len > 32) {
 801cf40:	e052      	b.n	801cfe8 <_lv_memcpy+0x3d0>
        REPEAT8(COPY32)
 801cf42:	697b      	ldr	r3, [r7, #20]
 801cf44:	681a      	ldr	r2, [r3, #0]
 801cf46:	69bb      	ldr	r3, [r7, #24]
 801cf48:	601a      	str	r2, [r3, #0]
 801cf4a:	69bb      	ldr	r3, [r7, #24]
 801cf4c:	3304      	adds	r3, #4
 801cf4e:	61bb      	str	r3, [r7, #24]
 801cf50:	697b      	ldr	r3, [r7, #20]
 801cf52:	3304      	adds	r3, #4
 801cf54:	617b      	str	r3, [r7, #20]
 801cf56:	697b      	ldr	r3, [r7, #20]
 801cf58:	681a      	ldr	r2, [r3, #0]
 801cf5a:	69bb      	ldr	r3, [r7, #24]
 801cf5c:	601a      	str	r2, [r3, #0]
 801cf5e:	69bb      	ldr	r3, [r7, #24]
 801cf60:	3304      	adds	r3, #4
 801cf62:	61bb      	str	r3, [r7, #24]
 801cf64:	697b      	ldr	r3, [r7, #20]
 801cf66:	3304      	adds	r3, #4
 801cf68:	617b      	str	r3, [r7, #20]
 801cf6a:	697b      	ldr	r3, [r7, #20]
 801cf6c:	681a      	ldr	r2, [r3, #0]
 801cf6e:	69bb      	ldr	r3, [r7, #24]
 801cf70:	601a      	str	r2, [r3, #0]
 801cf72:	69bb      	ldr	r3, [r7, #24]
 801cf74:	3304      	adds	r3, #4
 801cf76:	61bb      	str	r3, [r7, #24]
 801cf78:	697b      	ldr	r3, [r7, #20]
 801cf7a:	3304      	adds	r3, #4
 801cf7c:	617b      	str	r3, [r7, #20]
 801cf7e:	697b      	ldr	r3, [r7, #20]
 801cf80:	681a      	ldr	r2, [r3, #0]
 801cf82:	69bb      	ldr	r3, [r7, #24]
 801cf84:	601a      	str	r2, [r3, #0]
 801cf86:	69bb      	ldr	r3, [r7, #24]
 801cf88:	3304      	adds	r3, #4
 801cf8a:	61bb      	str	r3, [r7, #24]
 801cf8c:	697b      	ldr	r3, [r7, #20]
 801cf8e:	3304      	adds	r3, #4
 801cf90:	617b      	str	r3, [r7, #20]
 801cf92:	697b      	ldr	r3, [r7, #20]
 801cf94:	681a      	ldr	r2, [r3, #0]
 801cf96:	69bb      	ldr	r3, [r7, #24]
 801cf98:	601a      	str	r2, [r3, #0]
 801cf9a:	69bb      	ldr	r3, [r7, #24]
 801cf9c:	3304      	adds	r3, #4
 801cf9e:	61bb      	str	r3, [r7, #24]
 801cfa0:	697b      	ldr	r3, [r7, #20]
 801cfa2:	3304      	adds	r3, #4
 801cfa4:	617b      	str	r3, [r7, #20]
 801cfa6:	697b      	ldr	r3, [r7, #20]
 801cfa8:	681a      	ldr	r2, [r3, #0]
 801cfaa:	69bb      	ldr	r3, [r7, #24]
 801cfac:	601a      	str	r2, [r3, #0]
 801cfae:	69bb      	ldr	r3, [r7, #24]
 801cfb0:	3304      	adds	r3, #4
 801cfb2:	61bb      	str	r3, [r7, #24]
 801cfb4:	697b      	ldr	r3, [r7, #20]
 801cfb6:	3304      	adds	r3, #4
 801cfb8:	617b      	str	r3, [r7, #20]
 801cfba:	697b      	ldr	r3, [r7, #20]
 801cfbc:	681a      	ldr	r2, [r3, #0]
 801cfbe:	69bb      	ldr	r3, [r7, #24]
 801cfc0:	601a      	str	r2, [r3, #0]
 801cfc2:	69bb      	ldr	r3, [r7, #24]
 801cfc4:	3304      	adds	r3, #4
 801cfc6:	61bb      	str	r3, [r7, #24]
 801cfc8:	697b      	ldr	r3, [r7, #20]
 801cfca:	3304      	adds	r3, #4
 801cfcc:	617b      	str	r3, [r7, #20]
 801cfce:	697b      	ldr	r3, [r7, #20]
 801cfd0:	681a      	ldr	r2, [r3, #0]
 801cfd2:	69bb      	ldr	r3, [r7, #24]
 801cfd4:	601a      	str	r2, [r3, #0]
 801cfd6:	69bb      	ldr	r3, [r7, #24]
 801cfd8:	3304      	adds	r3, #4
 801cfda:	61bb      	str	r3, [r7, #24]
 801cfdc:	697b      	ldr	r3, [r7, #20]
 801cfde:	3304      	adds	r3, #4
 801cfe0:	617b      	str	r3, [r7, #20]
        len -= 32;
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	3b20      	subs	r3, #32
 801cfe6:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	2b20      	cmp	r3, #32
 801cfec:	d8a9      	bhi.n	801cf42 <_lv_memcpy+0x32a>
    }

    while(len > 4) {
 801cfee:	e00c      	b.n	801d00a <_lv_memcpy+0x3f2>
        COPY32;
 801cff0:	697b      	ldr	r3, [r7, #20]
 801cff2:	681a      	ldr	r2, [r3, #0]
 801cff4:	69bb      	ldr	r3, [r7, #24]
 801cff6:	601a      	str	r2, [r3, #0]
 801cff8:	69bb      	ldr	r3, [r7, #24]
 801cffa:	3304      	adds	r3, #4
 801cffc:	61bb      	str	r3, [r7, #24]
 801cffe:	697b      	ldr	r3, [r7, #20]
 801d000:	3304      	adds	r3, #4
 801d002:	617b      	str	r3, [r7, #20]
        len -= 4;
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	3b04      	subs	r3, #4
 801d008:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	2b04      	cmp	r3, #4
 801d00e:	d8ef      	bhi.n	801cff0 <_lv_memcpy+0x3d8>
    }

    d8 = (uint8_t *)d32;
 801d010:	69bb      	ldr	r3, [r7, #24]
 801d012:	627b      	str	r3, [r7, #36]	; 0x24
    s8 = (const uint8_t *)s32;
 801d014:	697b      	ldr	r3, [r7, #20]
 801d016:	623b      	str	r3, [r7, #32]
    while(len) {
 801d018:	e00c      	b.n	801d034 <_lv_memcpy+0x41c>
        COPY8
 801d01a:	6a3b      	ldr	r3, [r7, #32]
 801d01c:	781a      	ldrb	r2, [r3, #0]
 801d01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d020:	701a      	strb	r2, [r3, #0]
 801d022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d024:	3301      	adds	r3, #1
 801d026:	627b      	str	r3, [r7, #36]	; 0x24
 801d028:	6a3b      	ldr	r3, [r7, #32]
 801d02a:	3301      	adds	r3, #1
 801d02c:	623b      	str	r3, [r7, #32]
        len--;
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	3b01      	subs	r3, #1
 801d032:	607b      	str	r3, [r7, #4]
    while(len) {
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	2b00      	cmp	r3, #0
 801d038:	d1ef      	bne.n	801d01a <_lv_memcpy+0x402>
    }

    return dst;
 801d03a:	68fb      	ldr	r3, [r7, #12]
}
 801d03c:	4618      	mov	r0, r3
 801d03e:	372c      	adds	r7, #44	; 0x2c
 801d040:	46bd      	mov	sp, r7
 801d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d046:	4770      	bx	lr

0801d048 <_lv_memset>:
 * @param dst pointer to the destination buffer
 * @param v value to set [0..255]
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void _lv_memset(void * dst, uint8_t v, size_t len)
{
 801d048:	b480      	push	{r7}
 801d04a:	b089      	sub	sp, #36	; 0x24
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	60f8      	str	r0, [r7, #12]
 801d050:	460b      	mov	r3, r1
 801d052:	607a      	str	r2, [r7, #4]
 801d054:	72fb      	strb	r3, [r7, #11]

    uint8_t * d8 = (uint8_t *) dst;
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	61fb      	str	r3, [r7, #28]

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801d05a:	69fb      	ldr	r3, [r7, #28]
 801d05c:	f003 0303 	and.w	r3, r3, #3
 801d060:	61bb      	str	r3, [r7, #24]

    /*Make the address aligned*/
    if(d_align) {
 801d062:	69bb      	ldr	r3, [r7, #24]
 801d064:	2b00      	cmp	r3, #0
 801d066:	d016      	beq.n	801d096 <_lv_memset+0x4e>
        d_align = ALIGN_MASK + 1 - d_align;
 801d068:	69bb      	ldr	r3, [r7, #24]
 801d06a:	f1c3 0304 	rsb	r3, r3, #4
 801d06e:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 801d070:	e00b      	b.n	801d08a <_lv_memset+0x42>
            SET8(v);
 801d072:	69fb      	ldr	r3, [r7, #28]
 801d074:	7afa      	ldrb	r2, [r7, #11]
 801d076:	701a      	strb	r2, [r3, #0]
 801d078:	69fb      	ldr	r3, [r7, #28]
 801d07a:	3301      	adds	r3, #1
 801d07c:	61fb      	str	r3, [r7, #28]
            len--;
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	3b01      	subs	r3, #1
 801d082:	607b      	str	r3, [r7, #4]
            d_align--;
 801d084:	69bb      	ldr	r3, [r7, #24]
 801d086:	3b01      	subs	r3, #1
 801d088:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 801d08a:	69bb      	ldr	r3, [r7, #24]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d002      	beq.n	801d096 <_lv_memset+0x4e>
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	2b00      	cmp	r3, #0
 801d094:	d1ed      	bne.n	801d072 <_lv_memset+0x2a>
        }
    }

    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
 801d096:	7afa      	ldrb	r2, [r7, #11]
 801d098:	7afb      	ldrb	r3, [r7, #11]
 801d09a:	021b      	lsls	r3, r3, #8
 801d09c:	441a      	add	r2, r3
 801d09e:	7afb      	ldrb	r3, [r7, #11]
 801d0a0:	041b      	lsls	r3, r3, #16
 801d0a2:	441a      	add	r2, r3
 801d0a4:	7afb      	ldrb	r3, [r7, #11]
 801d0a6:	061b      	lsls	r3, r3, #24
 801d0a8:	4413      	add	r3, r2
 801d0aa:	613b      	str	r3, [r7, #16]

    uint32_t * d32 = (uint32_t *)d8;
 801d0ac:	69fb      	ldr	r3, [r7, #28]
 801d0ae:	617b      	str	r3, [r7, #20]

    while(len > 32) {
 801d0b0:	e032      	b.n	801d118 <_lv_memset+0xd0>
        REPEAT8(SET32(v32));
 801d0b2:	697b      	ldr	r3, [r7, #20]
 801d0b4:	693a      	ldr	r2, [r7, #16]
 801d0b6:	601a      	str	r2, [r3, #0]
 801d0b8:	697b      	ldr	r3, [r7, #20]
 801d0ba:	3304      	adds	r3, #4
 801d0bc:	617b      	str	r3, [r7, #20]
 801d0be:	697b      	ldr	r3, [r7, #20]
 801d0c0:	693a      	ldr	r2, [r7, #16]
 801d0c2:	601a      	str	r2, [r3, #0]
 801d0c4:	697b      	ldr	r3, [r7, #20]
 801d0c6:	3304      	adds	r3, #4
 801d0c8:	617b      	str	r3, [r7, #20]
 801d0ca:	697b      	ldr	r3, [r7, #20]
 801d0cc:	693a      	ldr	r2, [r7, #16]
 801d0ce:	601a      	str	r2, [r3, #0]
 801d0d0:	697b      	ldr	r3, [r7, #20]
 801d0d2:	3304      	adds	r3, #4
 801d0d4:	617b      	str	r3, [r7, #20]
 801d0d6:	697b      	ldr	r3, [r7, #20]
 801d0d8:	693a      	ldr	r2, [r7, #16]
 801d0da:	601a      	str	r2, [r3, #0]
 801d0dc:	697b      	ldr	r3, [r7, #20]
 801d0de:	3304      	adds	r3, #4
 801d0e0:	617b      	str	r3, [r7, #20]
 801d0e2:	697b      	ldr	r3, [r7, #20]
 801d0e4:	693a      	ldr	r2, [r7, #16]
 801d0e6:	601a      	str	r2, [r3, #0]
 801d0e8:	697b      	ldr	r3, [r7, #20]
 801d0ea:	3304      	adds	r3, #4
 801d0ec:	617b      	str	r3, [r7, #20]
 801d0ee:	697b      	ldr	r3, [r7, #20]
 801d0f0:	693a      	ldr	r2, [r7, #16]
 801d0f2:	601a      	str	r2, [r3, #0]
 801d0f4:	697b      	ldr	r3, [r7, #20]
 801d0f6:	3304      	adds	r3, #4
 801d0f8:	617b      	str	r3, [r7, #20]
 801d0fa:	697b      	ldr	r3, [r7, #20]
 801d0fc:	693a      	ldr	r2, [r7, #16]
 801d0fe:	601a      	str	r2, [r3, #0]
 801d100:	697b      	ldr	r3, [r7, #20]
 801d102:	3304      	adds	r3, #4
 801d104:	617b      	str	r3, [r7, #20]
 801d106:	697b      	ldr	r3, [r7, #20]
 801d108:	693a      	ldr	r2, [r7, #16]
 801d10a:	601a      	str	r2, [r3, #0]
 801d10c:	697b      	ldr	r3, [r7, #20]
 801d10e:	3304      	adds	r3, #4
 801d110:	617b      	str	r3, [r7, #20]
        len -= 32;
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	3b20      	subs	r3, #32
 801d116:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	2b20      	cmp	r3, #32
 801d11c:	d8c9      	bhi.n	801d0b2 <_lv_memset+0x6a>
    }

    while(len > 4) {
 801d11e:	e008      	b.n	801d132 <_lv_memset+0xea>
        SET32(v32);
 801d120:	697b      	ldr	r3, [r7, #20]
 801d122:	693a      	ldr	r2, [r7, #16]
 801d124:	601a      	str	r2, [r3, #0]
 801d126:	697b      	ldr	r3, [r7, #20]
 801d128:	3304      	adds	r3, #4
 801d12a:	617b      	str	r3, [r7, #20]
        len -= 4;
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	3b04      	subs	r3, #4
 801d130:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	2b04      	cmp	r3, #4
 801d136:	d8f3      	bhi.n	801d120 <_lv_memset+0xd8>
    }

    d8 = (uint8_t *)d32;
 801d138:	697b      	ldr	r3, [r7, #20]
 801d13a:	61fb      	str	r3, [r7, #28]
    while(len) {
 801d13c:	e008      	b.n	801d150 <_lv_memset+0x108>
        SET8(v);
 801d13e:	69fb      	ldr	r3, [r7, #28]
 801d140:	7afa      	ldrb	r2, [r7, #11]
 801d142:	701a      	strb	r2, [r3, #0]
 801d144:	69fb      	ldr	r3, [r7, #28]
 801d146:	3301      	adds	r3, #1
 801d148:	61fb      	str	r3, [r7, #28]
        len--;
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	3b01      	subs	r3, #1
 801d14e:	607b      	str	r3, [r7, #4]
    while(len) {
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	2b00      	cmp	r3, #0
 801d154:	d1f3      	bne.n	801d13e <_lv_memset+0xf6>
    }
}
 801d156:	bf00      	nop
 801d158:	3724      	adds	r7, #36	; 0x24
 801d15a:	46bd      	mov	sp, r7
 801d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d160:	4770      	bx	lr

0801d162 <_lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void _lv_memset_00(void * dst, size_t len)
{
 801d162:	b480      	push	{r7}
 801d164:	b087      	sub	sp, #28
 801d166:	af00      	add	r7, sp, #0
 801d168:	6078      	str	r0, [r7, #4]
 801d16a:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *) dst;
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801d170:	697b      	ldr	r3, [r7, #20]
 801d172:	f003 0303 	and.w	r3, r3, #3
 801d176:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 801d178:	693b      	ldr	r3, [r7, #16]
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d016      	beq.n	801d1ac <_lv_memset_00+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 801d17e:	693b      	ldr	r3, [r7, #16]
 801d180:	f1c3 0304 	rsb	r3, r3, #4
 801d184:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801d186:	e00b      	b.n	801d1a0 <_lv_memset_00+0x3e>
            SET8(0);
 801d188:	697b      	ldr	r3, [r7, #20]
 801d18a:	2200      	movs	r2, #0
 801d18c:	701a      	strb	r2, [r3, #0]
 801d18e:	697b      	ldr	r3, [r7, #20]
 801d190:	3301      	adds	r3, #1
 801d192:	617b      	str	r3, [r7, #20]
            len--;
 801d194:	683b      	ldr	r3, [r7, #0]
 801d196:	3b01      	subs	r3, #1
 801d198:	603b      	str	r3, [r7, #0]
            d_align--;
 801d19a:	693b      	ldr	r3, [r7, #16]
 801d19c:	3b01      	subs	r3, #1
 801d19e:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801d1a0:	693b      	ldr	r3, [r7, #16]
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d002      	beq.n	801d1ac <_lv_memset_00+0x4a>
 801d1a6:	683b      	ldr	r3, [r7, #0]
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d1ed      	bne.n	801d188 <_lv_memset_00+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 801d1ac:	697b      	ldr	r3, [r7, #20]
 801d1ae:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 801d1b0:	e032      	b.n	801d218 <_lv_memset_00+0xb6>
        REPEAT8(SET32(0));
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	2200      	movs	r2, #0
 801d1b6:	601a      	str	r2, [r3, #0]
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	3304      	adds	r3, #4
 801d1bc:	60fb      	str	r3, [r7, #12]
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	2200      	movs	r2, #0
 801d1c2:	601a      	str	r2, [r3, #0]
 801d1c4:	68fb      	ldr	r3, [r7, #12]
 801d1c6:	3304      	adds	r3, #4
 801d1c8:	60fb      	str	r3, [r7, #12]
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	2200      	movs	r2, #0
 801d1ce:	601a      	str	r2, [r3, #0]
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	3304      	adds	r3, #4
 801d1d4:	60fb      	str	r3, [r7, #12]
 801d1d6:	68fb      	ldr	r3, [r7, #12]
 801d1d8:	2200      	movs	r2, #0
 801d1da:	601a      	str	r2, [r3, #0]
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	3304      	adds	r3, #4
 801d1e0:	60fb      	str	r3, [r7, #12]
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	2200      	movs	r2, #0
 801d1e6:	601a      	str	r2, [r3, #0]
 801d1e8:	68fb      	ldr	r3, [r7, #12]
 801d1ea:	3304      	adds	r3, #4
 801d1ec:	60fb      	str	r3, [r7, #12]
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	2200      	movs	r2, #0
 801d1f2:	601a      	str	r2, [r3, #0]
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	3304      	adds	r3, #4
 801d1f8:	60fb      	str	r3, [r7, #12]
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	2200      	movs	r2, #0
 801d1fe:	601a      	str	r2, [r3, #0]
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	3304      	adds	r3, #4
 801d204:	60fb      	str	r3, [r7, #12]
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	2200      	movs	r2, #0
 801d20a:	601a      	str	r2, [r3, #0]
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	3304      	adds	r3, #4
 801d210:	60fb      	str	r3, [r7, #12]
        len -= 32;
 801d212:	683b      	ldr	r3, [r7, #0]
 801d214:	3b20      	subs	r3, #32
 801d216:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 801d218:	683b      	ldr	r3, [r7, #0]
 801d21a:	2b20      	cmp	r3, #32
 801d21c:	d8c9      	bhi.n	801d1b2 <_lv_memset_00+0x50>
    }

    while(len > 4) {
 801d21e:	e008      	b.n	801d232 <_lv_memset_00+0xd0>
        SET32(0);
 801d220:	68fb      	ldr	r3, [r7, #12]
 801d222:	2200      	movs	r2, #0
 801d224:	601a      	str	r2, [r3, #0]
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	3304      	adds	r3, #4
 801d22a:	60fb      	str	r3, [r7, #12]
        len -= 4;
 801d22c:	683b      	ldr	r3, [r7, #0]
 801d22e:	3b04      	subs	r3, #4
 801d230:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 801d232:	683b      	ldr	r3, [r7, #0]
 801d234:	2b04      	cmp	r3, #4
 801d236:	d8f3      	bhi.n	801d220 <_lv_memset_00+0xbe>
    }

    d8 = (uint8_t *)d32;
 801d238:	68fb      	ldr	r3, [r7, #12]
 801d23a:	617b      	str	r3, [r7, #20]
    while(len) {
 801d23c:	e008      	b.n	801d250 <_lv_memset_00+0xee>
        SET8(0);
 801d23e:	697b      	ldr	r3, [r7, #20]
 801d240:	2200      	movs	r2, #0
 801d242:	701a      	strb	r2, [r3, #0]
 801d244:	697b      	ldr	r3, [r7, #20]
 801d246:	3301      	adds	r3, #1
 801d248:	617b      	str	r3, [r7, #20]
        len--;
 801d24a:	683b      	ldr	r3, [r7, #0]
 801d24c:	3b01      	subs	r3, #1
 801d24e:	603b      	str	r3, [r7, #0]
    while(len) {
 801d250:	683b      	ldr	r3, [r7, #0]
 801d252:	2b00      	cmp	r3, #0
 801d254:	d1f3      	bne.n	801d23e <_lv_memset_00+0xdc>
    }
}
 801d256:	bf00      	nop
 801d258:	371c      	adds	r7, #28
 801d25a:	46bd      	mov	sp, r7
 801d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d260:	4770      	bx	lr

0801d262 <_lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void _lv_memset_ff(void * dst, size_t len)
{
 801d262:	b480      	push	{r7}
 801d264:	b087      	sub	sp, #28
 801d266:	af00      	add	r7, sp, #0
 801d268:	6078      	str	r0, [r7, #4]
 801d26a:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *) dst;
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801d270:	697b      	ldr	r3, [r7, #20]
 801d272:	f003 0303 	and.w	r3, r3, #3
 801d276:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 801d278:	693b      	ldr	r3, [r7, #16]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d016      	beq.n	801d2ac <_lv_memset_ff+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 801d27e:	693b      	ldr	r3, [r7, #16]
 801d280:	f1c3 0304 	rsb	r3, r3, #4
 801d284:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801d286:	e00b      	b.n	801d2a0 <_lv_memset_ff+0x3e>
            SET8(0xFF);
 801d288:	697b      	ldr	r3, [r7, #20]
 801d28a:	22ff      	movs	r2, #255	; 0xff
 801d28c:	701a      	strb	r2, [r3, #0]
 801d28e:	697b      	ldr	r3, [r7, #20]
 801d290:	3301      	adds	r3, #1
 801d292:	617b      	str	r3, [r7, #20]
            len--;
 801d294:	683b      	ldr	r3, [r7, #0]
 801d296:	3b01      	subs	r3, #1
 801d298:	603b      	str	r3, [r7, #0]
            d_align--;
 801d29a:	693b      	ldr	r3, [r7, #16]
 801d29c:	3b01      	subs	r3, #1
 801d29e:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801d2a0:	693b      	ldr	r3, [r7, #16]
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d002      	beq.n	801d2ac <_lv_memset_ff+0x4a>
 801d2a6:	683b      	ldr	r3, [r7, #0]
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d1ed      	bne.n	801d288 <_lv_memset_ff+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 801d2ac:	697b      	ldr	r3, [r7, #20]
 801d2ae:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 801d2b0:	e03a      	b.n	801d328 <_lv_memset_ff+0xc6>
        REPEAT8(SET32(0xFFFFFFFF));
 801d2b2:	68fb      	ldr	r3, [r7, #12]
 801d2b4:	f04f 32ff 	mov.w	r2, #4294967295
 801d2b8:	601a      	str	r2, [r3, #0]
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	3304      	adds	r3, #4
 801d2be:	60fb      	str	r3, [r7, #12]
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	f04f 32ff 	mov.w	r2, #4294967295
 801d2c6:	601a      	str	r2, [r3, #0]
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	3304      	adds	r3, #4
 801d2cc:	60fb      	str	r3, [r7, #12]
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	f04f 32ff 	mov.w	r2, #4294967295
 801d2d4:	601a      	str	r2, [r3, #0]
 801d2d6:	68fb      	ldr	r3, [r7, #12]
 801d2d8:	3304      	adds	r3, #4
 801d2da:	60fb      	str	r3, [r7, #12]
 801d2dc:	68fb      	ldr	r3, [r7, #12]
 801d2de:	f04f 32ff 	mov.w	r2, #4294967295
 801d2e2:	601a      	str	r2, [r3, #0]
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	3304      	adds	r3, #4
 801d2e8:	60fb      	str	r3, [r7, #12]
 801d2ea:	68fb      	ldr	r3, [r7, #12]
 801d2ec:	f04f 32ff 	mov.w	r2, #4294967295
 801d2f0:	601a      	str	r2, [r3, #0]
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	3304      	adds	r3, #4
 801d2f6:	60fb      	str	r3, [r7, #12]
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	f04f 32ff 	mov.w	r2, #4294967295
 801d2fe:	601a      	str	r2, [r3, #0]
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	3304      	adds	r3, #4
 801d304:	60fb      	str	r3, [r7, #12]
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	f04f 32ff 	mov.w	r2, #4294967295
 801d30c:	601a      	str	r2, [r3, #0]
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	3304      	adds	r3, #4
 801d312:	60fb      	str	r3, [r7, #12]
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	f04f 32ff 	mov.w	r2, #4294967295
 801d31a:	601a      	str	r2, [r3, #0]
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	3304      	adds	r3, #4
 801d320:	60fb      	str	r3, [r7, #12]
        len -= 32;
 801d322:	683b      	ldr	r3, [r7, #0]
 801d324:	3b20      	subs	r3, #32
 801d326:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 801d328:	683b      	ldr	r3, [r7, #0]
 801d32a:	2b20      	cmp	r3, #32
 801d32c:	d8c1      	bhi.n	801d2b2 <_lv_memset_ff+0x50>
    }

    while(len > 4) {
 801d32e:	e009      	b.n	801d344 <_lv_memset_ff+0xe2>
        SET32(0xFFFFFFFF);
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	f04f 32ff 	mov.w	r2, #4294967295
 801d336:	601a      	str	r2, [r3, #0]
 801d338:	68fb      	ldr	r3, [r7, #12]
 801d33a:	3304      	adds	r3, #4
 801d33c:	60fb      	str	r3, [r7, #12]
        len -= 4;
 801d33e:	683b      	ldr	r3, [r7, #0]
 801d340:	3b04      	subs	r3, #4
 801d342:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 801d344:	683b      	ldr	r3, [r7, #0]
 801d346:	2b04      	cmp	r3, #4
 801d348:	d8f2      	bhi.n	801d330 <_lv_memset_ff+0xce>
    }

    d8 = (uint8_t *)d32;
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	617b      	str	r3, [r7, #20]
    while(len) {
 801d34e:	e008      	b.n	801d362 <_lv_memset_ff+0x100>
        SET8(0xFF);
 801d350:	697b      	ldr	r3, [r7, #20]
 801d352:	22ff      	movs	r2, #255	; 0xff
 801d354:	701a      	strb	r2, [r3, #0]
 801d356:	697b      	ldr	r3, [r7, #20]
 801d358:	3301      	adds	r3, #1
 801d35a:	617b      	str	r3, [r7, #20]
        len--;
 801d35c:	683b      	ldr	r3, [r7, #0]
 801d35e:	3b01      	subs	r3, #1
 801d360:	603b      	str	r3, [r7, #0]
    while(len) {
 801d362:	683b      	ldr	r3, [r7, #0]
 801d364:	2b00      	cmp	r3, #0
 801d366:	d1f3      	bne.n	801d350 <_lv_memset_ff+0xee>
    }
}
 801d368:	bf00      	nop
 801d36a:	371c      	adds	r7, #28
 801d36c:	46bd      	mov	sp, r7
 801d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d372:	4770      	bx	lr

0801d374 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 801d374:	b480      	push	{r7}
 801d376:	b085      	sub	sp, #20
 801d378:	af00      	add	r7, sp, #0
 801d37a:	6078      	str	r0, [r7, #4]
    lv_mem_ent_t * next_e = NULL;
 801d37c:	2300      	movs	r3, #0
 801d37e:	60fb      	str	r3, [r7, #12]

    if(act_e == NULL) { /*NULL means: get the first entry*/
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	2b00      	cmp	r3, #0
 801d384:	d103      	bne.n	801d38e <ent_get_next+0x1a>
        next_e = (lv_mem_ent_t *)work_mem;
 801d386:	4b10      	ldr	r3, [pc, #64]	; (801d3c8 <ent_get_next+0x54>)
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	60fb      	str	r3, [r7, #12]
 801d38c:	e014      	b.n	801d3b8 <ent_get_next+0x44>
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	3304      	adds	r3, #4
 801d392:	60bb      	str	r3, [r7, #8]
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d39c:	461a      	mov	r2, r3
 801d39e:	68bb      	ldr	r3, [r7, #8]
 801d3a0:	4413      	add	r3, r2
 801d3a2:	60fb      	str	r3, [r7, #12]

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 801d3a4:	68fb      	ldr	r3, [r7, #12]
 801d3a6:	1d1a      	adds	r2, r3, #4
 801d3a8:	4b07      	ldr	r3, [pc, #28]	; (801d3c8 <ent_get_next+0x54>)
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801d3b0:	429a      	cmp	r2, r3
 801d3b2:	d301      	bcc.n	801d3b8 <ent_get_next+0x44>
 801d3b4:	2300      	movs	r3, #0
 801d3b6:	60fb      	str	r3, [r7, #12]
    }

    return next_e;
 801d3b8:	68fb      	ldr	r3, [r7, #12]
}
 801d3ba:	4618      	mov	r0, r3
 801d3bc:	3714      	adds	r7, #20
 801d3be:	46bd      	mov	sp, r7
 801d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3c4:	4770      	bx	lr
 801d3c6:	bf00      	nop
 801d3c8:	20018068 	.word	0x20018068

0801d3cc <ent_alloc>:
 * @param e try to allocate to this entry
 * @param size size of the new memory in bytes
 * @return pointer to the allocated memory or NULL if not enough memory in the entry
 */
static void * ent_alloc(lv_mem_ent_t * e, size_t size)
{
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b084      	sub	sp, #16
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
 801d3d4:	6039      	str	r1, [r7, #0]
    void * alloc = NULL;
 801d3d6:	2300      	movs	r3, #0
 801d3d8:	60fb      	str	r3, [r7, #12]
    /*If the memory is free and big enough then use it */
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	781b      	ldrb	r3, [r3, #0]
 801d3de:	f003 0301 	and.w	r3, r3, #1
 801d3e2:	b2db      	uxtb	r3, r3
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d113      	bne.n	801d410 <ent_alloc+0x44>
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d3f0:	461a      	mov	r2, r3
 801d3f2:	683b      	ldr	r3, [r7, #0]
 801d3f4:	4293      	cmp	r3, r2
 801d3f6:	d80b      	bhi.n	801d410 <ent_alloc+0x44>
        /*Truncate the entry to the desired size */
        ent_trunc(e, size);
 801d3f8:	6839      	ldr	r1, [r7, #0]
 801d3fa:	6878      	ldr	r0, [r7, #4]
 801d3fc:	f000 f80d 	bl	801d41a <ent_trunc>
        e->header.s.used = 1;
 801d400:	687a      	ldr	r2, [r7, #4]
 801d402:	7813      	ldrb	r3, [r2, #0]
 801d404:	f043 0301 	orr.w	r3, r3, #1
 801d408:	7013      	strb	r3, [r2, #0]

        /*Save the allocated data*/
        alloc = &e->first_data;
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	3304      	adds	r3, #4
 801d40e:	60fb      	str	r3, [r7, #12]
    }

    return alloc;
 801d410:	68fb      	ldr	r3, [r7, #12]
}
 801d412:	4618      	mov	r0, r3
 801d414:	3710      	adds	r7, #16
 801d416:	46bd      	mov	sp, r7
 801d418:	bd80      	pop	{r7, pc}

0801d41a <ent_trunc>:
 * Truncate the data of entry to the given size
 * @param e Pointer to an entry
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
 801d41a:	b480      	push	{r7}
 801d41c:	b085      	sub	sp, #20
 801d41e:	af00      	add	r7, sp, #0
 801d420:	6078      	str	r0, [r7, #4]
 801d422:	6039      	str	r1, [r7, #0]
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 801d424:	683b      	ldr	r3, [r7, #0]
 801d426:	3303      	adds	r3, #3
 801d428:	f023 0303 	bic.w	r3, r3, #3
 801d42c:	603b      	str	r3, [r7, #0]

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d436:	461a      	mov	r2, r3
 801d438:	683b      	ldr	r3, [r7, #0]
 801d43a:	3304      	adds	r3, #4
 801d43c:	429a      	cmp	r2, r3
 801d43e:	d104      	bne.n	801d44a <ent_trunc+0x30>
        size = e->header.s.d_size;
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	681b      	ldr	r3, [r3, #0]
 801d444:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d448:	603b      	str	r3, [r7, #0]
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d452:	461a      	mov	r2, r3
 801d454:	683b      	ldr	r3, [r7, #0]
 801d456:	4293      	cmp	r3, r2
 801d458:	d022      	beq.n	801d4a0 <ent_trunc+0x86>
        uint8_t * e_data             = &e->first_data;
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	3304      	adds	r3, #4
 801d45e:	60fb      	str	r3, [r7, #12]
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 801d460:	68fa      	ldr	r2, [r7, #12]
 801d462:	683b      	ldr	r3, [r7, #0]
 801d464:	4413      	add	r3, r2
 801d466:	60bb      	str	r3, [r7, #8]
        after_new_e->header.s.used   = 0;
 801d468:	68ba      	ldr	r2, [r7, #8]
 801d46a:	7813      	ldrb	r3, [r2, #0]
 801d46c:	f36f 0300 	bfc	r3, #0, #1
 801d470:	7013      	strb	r3, [r2, #0]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	681b      	ldr	r3, [r3, #0]
 801d476:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d47a:	461a      	mov	r2, r3
 801d47c:	683b      	ldr	r3, [r7, #0]
 801d47e:	1ad3      	subs	r3, r2, r3
 801d480:	3b04      	subs	r3, #4
 801d482:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d486:	68ba      	ldr	r2, [r7, #8]
 801d488:	6813      	ldr	r3, [r2, #0]
 801d48a:	f361 035f 	bfi	r3, r1, #1, #31
 801d48e:	6013      	str	r3, [r2, #0]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
 801d490:	683b      	ldr	r3, [r7, #0]
 801d492:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d496:	687a      	ldr	r2, [r7, #4]
 801d498:	6813      	ldr	r3, [r2, #0]
 801d49a:	f361 035f 	bfi	r3, r1, #1, #31
 801d49e:	6013      	str	r3, [r2, #0]
    }
}
 801d4a0:	bf00      	nop
 801d4a2:	3714      	adds	r7, #20
 801d4a4:	46bd      	mov	sp, r7
 801d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4aa:	4770      	bx	lr

0801d4ac <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
 801d4ac:	b580      	push	{r7, lr}
 801d4ae:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 801d4b0:	2118      	movs	r1, #24
 801d4b2:	4804      	ldr	r0, [pc, #16]	; (801d4c4 <_lv_task_core_init+0x18>)
 801d4b4:	f7fe fd9e 	bl	801bff4 <_lv_ll_init>

    /*Initially enable the lv_task handling*/
    lv_task_enable(true);
 801d4b8:	2001      	movs	r0, #1
 801d4ba:	f000 fa63 	bl	801d984 <lv_task_enable>
}
 801d4be:	bf00      	nop
 801d4c0:	bd80      	pop	{r7, pc}
 801d4c2:	bf00      	nop
 801d4c4:	20021784 	.word	0x20021784

0801d4c8 <lv_task_handler>:
/**
 * Call it periodically to handle lv_tasks.
 * @return the time after which it must be called again
 */
LV_ATTRIBUTE_TASK_HANDLER uint32_t lv_task_handler(void)
{
 801d4c8:	b580      	push	{r7, lr}
 801d4ca:	b088      	sub	sp, #32
 801d4cc:	af00      	add	r7, sp, #0
    LV_LOG_TRACE("lv_task_handler started");

    /*Avoid concurrent running of the task handler*/
    static bool already_running = false;
    if(already_running) return 1;
 801d4ce:	4b8e      	ldr	r3, [pc, #568]	; (801d708 <lv_task_handler+0x240>)
 801d4d0:	781b      	ldrb	r3, [r3, #0]
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d001      	beq.n	801d4da <lv_task_handler+0x12>
 801d4d6:	2301      	movs	r3, #1
 801d4d8:	e112      	b.n	801d700 <lv_task_handler+0x238>
    already_running = true;
 801d4da:	4b8b      	ldr	r3, [pc, #556]	; (801d708 <lv_task_handler+0x240>)
 801d4dc:	2201      	movs	r2, #1
 801d4de:	701a      	strb	r2, [r3, #0]

    if(lv_task_run == false) {
 801d4e0:	4b8a      	ldr	r3, [pc, #552]	; (801d70c <lv_task_handler+0x244>)
 801d4e2:	781b      	ldrb	r3, [r3, #0]
 801d4e4:	f083 0301 	eor.w	r3, r3, #1
 801d4e8:	b2db      	uxtb	r3, r3
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d004      	beq.n	801d4f8 <lv_task_handler+0x30>
        already_running = false; /*Release mutex*/
 801d4ee:	4b86      	ldr	r3, [pc, #536]	; (801d708 <lv_task_handler+0x240>)
 801d4f0:	2200      	movs	r2, #0
 801d4f2:	701a      	strb	r2, [r3, #0]
        return 1;
 801d4f4:	2301      	movs	r3, #1
 801d4f6:	e103      	b.n	801d700 <lv_task_handler+0x238>
    }

    static uint32_t idle_period_start = 0;
    static uint32_t busy_time         = 0;

    uint32_t handler_start = lv_tick_get();
 801d4f8:	f7fd f97c 	bl	801a7f4 <lv_tick_get>
 801d4fc:	60f8      	str	r0, [r7, #12]

    /* Run all task from the highest to the lowest priority
     * If a lower priority task is executed check task again from the highest priority
     * but on the priority of executed tasks don't run tasks before the executed*/
    lv_task_t * task_interrupter = NULL;
 801d4fe:	2300      	movs	r3, #0
 801d500:	61fb      	str	r3, [r7, #28]
    lv_task_t * next;
    bool end_flag;
    do {
        end_flag                 = true;
 801d502:	2301      	movs	r3, #1
 801d504:	75fb      	strb	r3, [r7, #23]
        task_deleted             = false;
 801d506:	4b82      	ldr	r3, [pc, #520]	; (801d710 <lv_task_handler+0x248>)
 801d508:	2200      	movs	r2, #0
 801d50a:	701a      	strb	r2, [r3, #0]
        task_created             = false;
 801d50c:	4b81      	ldr	r3, [pc, #516]	; (801d714 <lv_task_handler+0x24c>)
 801d50e:	2200      	movs	r2, #0
 801d510:	701a      	strb	r2, [r3, #0]
        task_list_changed        = false;
 801d512:	4b81      	ldr	r3, [pc, #516]	; (801d718 <lv_task_handler+0x250>)
 801d514:	2200      	movs	r2, #0
 801d516:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801d518:	4880      	ldr	r0, [pc, #512]	; (801d71c <lv_task_handler+0x254>)
 801d51a:	f7fe fee1 	bl	801c2e0 <_lv_ll_get_head>
 801d51e:	4602      	mov	r2, r0
 801d520:	4b7f      	ldr	r3, [pc, #508]	; (801d720 <lv_task_handler+0x258>)
 801d522:	601a      	str	r2, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 801d524:	e086      	b.n	801d634 <lv_task_handler+0x16c>
            /* The task might be deleted if it runs only once ('once = 1')
             * So get next element until the current is surely valid*/
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 801d526:	4b7e      	ldr	r3, [pc, #504]	; (801d720 <lv_task_handler+0x258>)
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	4619      	mov	r1, r3
 801d52c:	487b      	ldr	r0, [pc, #492]	; (801d71c <lv_task_handler+0x254>)
 801d52e:	f7fe fefd 	bl	801c32c <_lv_ll_get_next>
 801d532:	61b8      	str	r0, [r7, #24]

            /*We reach priority of the turned off task. There is nothing more to do.*/
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
 801d534:	4b7a      	ldr	r3, [pc, #488]	; (801d720 <lv_task_handler+0x258>)
 801d536:	681b      	ldr	r3, [r3, #0]
 801d538:	7d1b      	ldrb	r3, [r3, #20]
 801d53a:	f003 0307 	and.w	r3, r3, #7
 801d53e:	b2db      	uxtb	r3, r3
 801d540:	2b00      	cmp	r3, #0
 801d542:	d07d      	beq.n	801d640 <lv_task_handler+0x178>
                break;
            }

            /*Here is the interrupter task. Don't execute it again.*/
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 801d544:	4b76      	ldr	r3, [pc, #472]	; (801d720 <lv_task_handler+0x258>)
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	69fa      	ldr	r2, [r7, #28]
 801d54a:	429a      	cmp	r2, r3
 801d54c:	d105      	bne.n	801d55a <lv_task_handler+0x92>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 801d54e:	2300      	movs	r3, #0
 801d550:	61fb      	str	r3, [r7, #28]
                                            the interrupter is not interesting anymore*/
                LV_GC_ROOT(_lv_task_act) = next;
 801d552:	4a73      	ldr	r2, [pc, #460]	; (801d720 <lv_task_handler+0x258>)
 801d554:	69bb      	ldr	r3, [r7, #24]
 801d556:	6013      	str	r3, [r2, #0]
                continue; /*Load the next task*/
 801d558:	e06c      	b.n	801d634 <lv_task_handler+0x16c>
            }

            /*Just try to run the tasks with highest priority.*/
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
 801d55a:	4b71      	ldr	r3, [pc, #452]	; (801d720 <lv_task_handler+0x258>)
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	7d1b      	ldrb	r3, [r3, #20]
 801d560:	f003 0307 	and.w	r3, r3, #7
 801d564:	b2db      	uxtb	r3, r3
 801d566:	2b05      	cmp	r3, #5
 801d568:	d105      	bne.n	801d576 <lv_task_handler+0xae>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 801d56a:	4b6d      	ldr	r3, [pc, #436]	; (801d720 <lv_task_handler+0x258>)
 801d56c:	681b      	ldr	r3, [r3, #0]
 801d56e:	4618      	mov	r0, r3
 801d570:	f000 fa18 	bl	801d9a4 <lv_task_exec>
 801d574:	e047      	b.n	801d606 <lv_task_handler+0x13e>
            }
            /*Tasks with higher priority than the interrupted shall be run in every case*/
            else if(task_interrupter) {
 801d576:	69fb      	ldr	r3, [r7, #28]
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d028      	beq.n	801d5ce <lv_task_handler+0x106>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
 801d57c:	4b68      	ldr	r3, [pc, #416]	; (801d720 <lv_task_handler+0x258>)
 801d57e:	681b      	ldr	r3, [r3, #0]
 801d580:	7d1b      	ldrb	r3, [r3, #20]
 801d582:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d586:	b2da      	uxtb	r2, r3
 801d588:	69fb      	ldr	r3, [r7, #28]
 801d58a:	7d1b      	ldrb	r3, [r3, #20]
 801d58c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d590:	b2db      	uxtb	r3, r3
 801d592:	429a      	cmp	r2, r3
 801d594:	d937      	bls.n	801d606 <lv_task_handler+0x13e>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 801d596:	4b62      	ldr	r3, [pc, #392]	; (801d720 <lv_task_handler+0x258>)
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	4618      	mov	r0, r3
 801d59c:	f000 fa02 	bl	801d9a4 <lv_task_exec>
 801d5a0:	4603      	mov	r3, r0
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d02f      	beq.n	801d606 <lv_task_handler+0x13e>
                        if(!task_created && !task_deleted) {
 801d5a6:	4b5b      	ldr	r3, [pc, #364]	; (801d714 <lv_task_handler+0x24c>)
 801d5a8:	781b      	ldrb	r3, [r3, #0]
 801d5aa:	f083 0301 	eor.w	r3, r3, #1
 801d5ae:	b2db      	uxtb	r3, r3
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d028      	beq.n	801d606 <lv_task_handler+0x13e>
 801d5b4:	4b56      	ldr	r3, [pc, #344]	; (801d710 <lv_task_handler+0x248>)
 801d5b6:	781b      	ldrb	r3, [r3, #0]
 801d5b8:	f083 0301 	eor.w	r3, r3, #1
 801d5bc:	b2db      	uxtb	r3, r3
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d021      	beq.n	801d606 <lv_task_handler+0x13e>
                            /*Check all tasks again from the highest priority */
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
 801d5c2:	4b57      	ldr	r3, [pc, #348]	; (801d720 <lv_task_handler+0x258>)
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	61fb      	str	r3, [r7, #28]
                            end_flag = false;
 801d5c8:	2300      	movs	r3, #0
 801d5ca:	75fb      	strb	r3, [r7, #23]
                            break;
 801d5cc:	e039      	b.n	801d642 <lv_task_handler+0x17a>
                }
            }
            /* It is no interrupter task or we already reached it earlier.
             * Just run the remaining tasks*/
            else {
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 801d5ce:	4b54      	ldr	r3, [pc, #336]	; (801d720 <lv_task_handler+0x258>)
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	4618      	mov	r0, r3
 801d5d4:	f000 f9e6 	bl	801d9a4 <lv_task_exec>
 801d5d8:	4603      	mov	r3, r0
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d013      	beq.n	801d606 <lv_task_handler+0x13e>
                    if(!task_created && !task_deleted) {
 801d5de:	4b4d      	ldr	r3, [pc, #308]	; (801d714 <lv_task_handler+0x24c>)
 801d5e0:	781b      	ldrb	r3, [r3, #0]
 801d5e2:	f083 0301 	eor.w	r3, r3, #1
 801d5e6:	b2db      	uxtb	r3, r3
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d00c      	beq.n	801d606 <lv_task_handler+0x13e>
 801d5ec:	4b48      	ldr	r3, [pc, #288]	; (801d710 <lv_task_handler+0x248>)
 801d5ee:	781b      	ldrb	r3, [r3, #0]
 801d5f0:	f083 0301 	eor.w	r3, r3, #1
 801d5f4:	b2db      	uxtb	r3, r3
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d005      	beq.n	801d606 <lv_task_handler+0x13e>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 801d5fa:	4b49      	ldr	r3, [pc, #292]	; (801d720 <lv_task_handler+0x258>)
 801d5fc:	681b      	ldr	r3, [r3, #0]
 801d5fe:	61fb      	str	r3, [r7, #28]
                        end_flag         = false;
 801d600:	2300      	movs	r3, #0
 801d602:	75fb      	strb	r3, [r7, #23]
                        break;
 801d604:	e01d      	b.n	801d642 <lv_task_handler+0x17a>
                    }
                }
            }

            /*If a task was created or deleted then this or the next item might be corrupted*/
            if(task_created || task_deleted) {
 801d606:	4b43      	ldr	r3, [pc, #268]	; (801d714 <lv_task_handler+0x24c>)
 801d608:	781b      	ldrb	r3, [r3, #0]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d103      	bne.n	801d616 <lv_task_handler+0x14e>
 801d60e:	4b40      	ldr	r3, [pc, #256]	; (801d710 <lv_task_handler+0x248>)
 801d610:	781b      	ldrb	r3, [r3, #0]
 801d612:	2b00      	cmp	r3, #0
 801d614:	d002      	beq.n	801d61c <lv_task_handler+0x154>
                task_interrupter = NULL;
 801d616:	2300      	movs	r3, #0
 801d618:	61fb      	str	r3, [r7, #28]
                break;
 801d61a:	e012      	b.n	801d642 <lv_task_handler+0x17a>
            }

            if(task_list_changed) {
 801d61c:	4b3e      	ldr	r3, [pc, #248]	; (801d718 <lv_task_handler+0x250>)
 801d61e:	781b      	ldrb	r3, [r3, #0]
 801d620:	2b00      	cmp	r3, #0
 801d622:	d004      	beq.n	801d62e <lv_task_handler+0x166>
                task_interrupter = NULL;
 801d624:	2300      	movs	r3, #0
 801d626:	61fb      	str	r3, [r7, #28]
                end_flag = false;
 801d628:	2300      	movs	r3, #0
 801d62a:	75fb      	strb	r3, [r7, #23]
                break;
 801d62c:	e009      	b.n	801d642 <lv_task_handler+0x17a>
            }

            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 801d62e:	4a3c      	ldr	r2, [pc, #240]	; (801d720 <lv_task_handler+0x258>)
 801d630:	69bb      	ldr	r3, [r7, #24]
 801d632:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 801d634:	4b3a      	ldr	r3, [pc, #232]	; (801d720 <lv_task_handler+0x258>)
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	2b00      	cmp	r3, #0
 801d63a:	f47f af74 	bne.w	801d526 <lv_task_handler+0x5e>
 801d63e:	e000      	b.n	801d642 <lv_task_handler+0x17a>
                break;
 801d640:	bf00      	nop
        }
    } while(!end_flag);
 801d642:	7dfb      	ldrb	r3, [r7, #23]
 801d644:	f083 0301 	eor.w	r3, r3, #1
 801d648:	b2db      	uxtb	r3, r3
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	f47f af59 	bne.w	801d502 <lv_task_handler+0x3a>

    uint32_t time_till_next = LV_NO_TASK_READY;
 801d650:	f04f 33ff 	mov.w	r3, #4294967295
 801d654:	613b      	str	r3, [r7, #16]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801d656:	4831      	ldr	r0, [pc, #196]	; (801d71c <lv_task_handler+0x254>)
 801d658:	f7fe fe42 	bl	801c2e0 <_lv_ll_get_head>
 801d65c:	61b8      	str	r0, [r7, #24]
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 801d65e:	e00e      	b.n	801d67e <lv_task_handler+0x1b6>
        uint32_t delay = lv_task_time_remaining(next);
 801d660:	69b8      	ldr	r0, [r7, #24]
 801d662:	f000 f9d9 	bl	801da18 <lv_task_time_remaining>
 801d666:	60b8      	str	r0, [r7, #8]
        if(delay < time_till_next)
 801d668:	68ba      	ldr	r2, [r7, #8]
 801d66a:	693b      	ldr	r3, [r7, #16]
 801d66c:	429a      	cmp	r2, r3
 801d66e:	d201      	bcs.n	801d674 <lv_task_handler+0x1ac>
            time_till_next = delay;
 801d670:	68bb      	ldr	r3, [r7, #8]
 801d672:	613b      	str	r3, [r7, #16]

        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 801d674:	69b9      	ldr	r1, [r7, #24]
 801d676:	4829      	ldr	r0, [pc, #164]	; (801d71c <lv_task_handler+0x254>)
 801d678:	f7fe fe58 	bl	801c32c <_lv_ll_get_next>
 801d67c:	61b8      	str	r0, [r7, #24]
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 801d67e:	69bb      	ldr	r3, [r7, #24]
 801d680:	2b00      	cmp	r3, #0
 801d682:	d006      	beq.n	801d692 <lv_task_handler+0x1ca>
 801d684:	69bb      	ldr	r3, [r7, #24]
 801d686:	7d1b      	ldrb	r3, [r3, #20]
 801d688:	f003 0307 	and.w	r3, r3, #7
 801d68c:	b2db      	uxtb	r3, r3
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d1e6      	bne.n	801d660 <lv_task_handler+0x198>
    }

    busy_time += lv_tick_elaps(handler_start);
 801d692:	68f8      	ldr	r0, [r7, #12]
 801d694:	f7fd f8c8 	bl	801a828 <lv_tick_elaps>
 801d698:	4602      	mov	r2, r0
 801d69a:	4b22      	ldr	r3, [pc, #136]	; (801d724 <lv_task_handler+0x25c>)
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	4413      	add	r3, r2
 801d6a0:	4a20      	ldr	r2, [pc, #128]	; (801d724 <lv_task_handler+0x25c>)
 801d6a2:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 801d6a4:	4b20      	ldr	r3, [pc, #128]	; (801d728 <lv_task_handler+0x260>)
 801d6a6:	681b      	ldr	r3, [r3, #0]
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	f7fd f8bd 	bl	801a828 <lv_tick_elaps>
 801d6ae:	6078      	str	r0, [r7, #4]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801d6b6:	d31f      	bcc.n	801d6f8 <lv_task_handler+0x230>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 801d6b8:	4b1a      	ldr	r3, [pc, #104]	; (801d724 <lv_task_handler+0x25c>)
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	2264      	movs	r2, #100	; 0x64
 801d6be:	fb02 f203 	mul.w	r2, r2, r3
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 801d6c8:	b2da      	uxtb	r2, r3
 801d6ca:	4b18      	ldr	r3, [pc, #96]	; (801d72c <lv_task_handler+0x264>)
 801d6cc:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 801d6ce:	4b17      	ldr	r3, [pc, #92]	; (801d72c <lv_task_handler+0x264>)
 801d6d0:	781b      	ldrb	r3, [r3, #0]
 801d6d2:	2b64      	cmp	r3, #100	; 0x64
 801d6d4:	d805      	bhi.n	801d6e2 <lv_task_handler+0x21a>
 801d6d6:	4b15      	ldr	r3, [pc, #84]	; (801d72c <lv_task_handler+0x264>)
 801d6d8:	781b      	ldrb	r3, [r3, #0]
 801d6da:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 801d6de:	b2db      	uxtb	r3, r3
 801d6e0:	e000      	b.n	801d6e4 <lv_task_handler+0x21c>
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	4a11      	ldr	r2, [pc, #68]	; (801d72c <lv_task_handler+0x264>)
 801d6e6:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 801d6e8:	4b0e      	ldr	r3, [pc, #56]	; (801d724 <lv_task_handler+0x25c>)
 801d6ea:	2200      	movs	r2, #0
 801d6ec:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 801d6ee:	f7fd f881 	bl	801a7f4 <lv_tick_get>
 801d6f2:	4602      	mov	r2, r0
 801d6f4:	4b0c      	ldr	r3, [pc, #48]	; (801d728 <lv_task_handler+0x260>)
 801d6f6:	601a      	str	r2, [r3, #0]
    }

    already_running = false; /*Release the mutex*/
 801d6f8:	4b03      	ldr	r3, [pc, #12]	; (801d708 <lv_task_handler+0x240>)
 801d6fa:	2200      	movs	r2, #0
 801d6fc:	701a      	strb	r2, [r3, #0]

    LV_LOG_TRACE("lv_task_handler ready");
    return time_till_next;
 801d6fe:	693b      	ldr	r3, [r7, #16]
}
 801d700:	4618      	mov	r0, r3
 801d702:	3720      	adds	r7, #32
 801d704:	46bd      	mov	sp, r7
 801d706:	bd80      	pop	{r7, pc}
 801d708:	2002009b 	.word	0x2002009b
 801d70c:	20020096 	.word	0x20020096
 801d710:	20020098 	.word	0x20020098
 801d714:	2002009a 	.word	0x2002009a
 801d718:	20020099 	.word	0x20020099
 801d71c:	20021784 	.word	0x20021784
 801d720:	20021854 	.word	0x20021854
 801d724:	2002009c 	.word	0x2002009c
 801d728:	200200a0 	.word	0x200200a0
 801d72c:	20020097 	.word	0x20020097

0801d730 <lv_task_create>:
 * @param prio priority of the task (LV_TASK_PRIO_OFF means the task is stopped)
 * @param user_data custom parameter
 * @return pointer to the new task
 */
lv_task_t * lv_task_create(lv_task_cb_t task_xcb, uint32_t period, lv_task_prio_t prio, void * user_data)
{
 801d730:	b590      	push	{r4, r7, lr}
 801d732:	b087      	sub	sp, #28
 801d734:	af00      	add	r7, sp, #0
 801d736:	60f8      	str	r0, [r7, #12]
 801d738:	60b9      	str	r1, [r7, #8]
 801d73a:	603b      	str	r3, [r7, #0]
 801d73c:	4613      	mov	r3, r2
 801d73e:	71fb      	strb	r3, [r7, #7]
    lv_task_t * new_task = NULL;
 801d740:	2300      	movs	r3, #0
 801d742:	617b      	str	r3, [r7, #20]
    lv_task_t * tmp;

    /*Create task lists in order of priority from high to low*/
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801d744:	484a      	ldr	r0, [pc, #296]	; (801d870 <lv_task_create+0x140>)
 801d746:	f7fe fdcb 	bl	801c2e0 <_lv_ll_get_head>
 801d74a:	6138      	str	r0, [r7, #16]

    /*It's the first task*/
    if(NULL == tmp) {
 801d74c:	693b      	ldr	r3, [r7, #16]
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d11a      	bne.n	801d788 <lv_task_create+0x58>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 801d752:	4847      	ldr	r0, [pc, #284]	; (801d870 <lv_task_create+0x140>)
 801d754:	f7fe fc67 	bl	801c026 <_lv_ll_ins_head>
 801d758:	6178      	str	r0, [r7, #20]
        LV_ASSERT_MEM(new_task);
 801d75a:	6978      	ldr	r0, [r7, #20]
 801d75c:	f7fe fa0a 	bl	801bb74 <lv_debug_check_null>
 801d760:	4603      	mov	r3, r0
 801d762:	f083 0301 	eor.w	r3, r3, #1
 801d766:	b2db      	uxtb	r3, r3
 801d768:	2b00      	cmp	r3, #0
 801d76a:	d008      	beq.n	801d77e <lv_task_create+0x4e>
 801d76c:	697b      	ldr	r3, [r7, #20]
 801d76e:	f04f 0400 	mov.w	r4, #0
 801d772:	461a      	mov	r2, r3
 801d774:	4623      	mov	r3, r4
 801d776:	483f      	ldr	r0, [pc, #252]	; (801d874 <lv_task_create+0x144>)
 801d778:	f7fe fa0c 	bl	801bb94 <lv_debug_log_error>
 801d77c:	e7fe      	b.n	801d77c <lv_task_create+0x4c>
        if(new_task == NULL) return NULL;
 801d77e:	697b      	ldr	r3, [r7, #20]
 801d780:	2b00      	cmp	r3, #0
 801d782:	d14e      	bne.n	801d822 <lv_task_create+0xf2>
 801d784:	2300      	movs	r3, #0
 801d786:	e06e      	b.n	801d866 <lv_task_create+0x136>
    }
    /*Insert the new task to proper place according to its priority*/
    else {
        do {
            if(tmp->prio <= prio) {
 801d788:	693b      	ldr	r3, [r7, #16]
 801d78a:	7d1b      	ldrb	r3, [r3, #20]
 801d78c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d790:	b2db      	uxtb	r3, r3
 801d792:	461a      	mov	r2, r3
 801d794:	79fb      	ldrb	r3, [r7, #7]
 801d796:	429a      	cmp	r2, r3
 801d798:	dc1b      	bgt.n	801d7d2 <lv_task_create+0xa2>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 801d79a:	6939      	ldr	r1, [r7, #16]
 801d79c:	4834      	ldr	r0, [pc, #208]	; (801d870 <lv_task_create+0x140>)
 801d79e:	f7fe fc76 	bl	801c08e <_lv_ll_ins_prev>
 801d7a2:	6178      	str	r0, [r7, #20]
                LV_ASSERT_MEM(new_task);
 801d7a4:	6978      	ldr	r0, [r7, #20]
 801d7a6:	f7fe f9e5 	bl	801bb74 <lv_debug_check_null>
 801d7aa:	4603      	mov	r3, r0
 801d7ac:	f083 0301 	eor.w	r3, r3, #1
 801d7b0:	b2db      	uxtb	r3, r3
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d008      	beq.n	801d7c8 <lv_task_create+0x98>
 801d7b6:	697b      	ldr	r3, [r7, #20]
 801d7b8:	f04f 0400 	mov.w	r4, #0
 801d7bc:	461a      	mov	r2, r3
 801d7be:	4623      	mov	r3, r4
 801d7c0:	482c      	ldr	r0, [pc, #176]	; (801d874 <lv_task_create+0x144>)
 801d7c2:	f7fe f9e7 	bl	801bb94 <lv_debug_log_error>
 801d7c6:	e7fe      	b.n	801d7c6 <lv_task_create+0x96>
                if(new_task == NULL) return NULL;
 801d7c8:	697b      	ldr	r3, [r7, #20]
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d10a      	bne.n	801d7e4 <lv_task_create+0xb4>
 801d7ce:	2300      	movs	r3, #0
 801d7d0:	e049      	b.n	801d866 <lv_task_create+0x136>
                break;
            }
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 801d7d2:	6939      	ldr	r1, [r7, #16]
 801d7d4:	4826      	ldr	r0, [pc, #152]	; (801d870 <lv_task_create+0x140>)
 801d7d6:	f7fe fda9 	bl	801c32c <_lv_ll_get_next>
 801d7da:	6138      	str	r0, [r7, #16]
        } while(tmp != NULL);
 801d7dc:	693b      	ldr	r3, [r7, #16]
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d1d2      	bne.n	801d788 <lv_task_create+0x58>
 801d7e2:	e000      	b.n	801d7e6 <lv_task_create+0xb6>
                break;
 801d7e4:	bf00      	nop

        /*Only too high priority tasks were found. Add the task to the end*/
        if(tmp == NULL) {
 801d7e6:	693b      	ldr	r3, [r7, #16]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d11a      	bne.n	801d822 <lv_task_create+0xf2>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 801d7ec:	4820      	ldr	r0, [pc, #128]	; (801d870 <lv_task_create+0x140>)
 801d7ee:	f7fe fc95 	bl	801c11c <_lv_ll_ins_tail>
 801d7f2:	6178      	str	r0, [r7, #20]
            LV_ASSERT_MEM(new_task);
 801d7f4:	6978      	ldr	r0, [r7, #20]
 801d7f6:	f7fe f9bd 	bl	801bb74 <lv_debug_check_null>
 801d7fa:	4603      	mov	r3, r0
 801d7fc:	f083 0301 	eor.w	r3, r3, #1
 801d800:	b2db      	uxtb	r3, r3
 801d802:	2b00      	cmp	r3, #0
 801d804:	d008      	beq.n	801d818 <lv_task_create+0xe8>
 801d806:	697b      	ldr	r3, [r7, #20]
 801d808:	f04f 0400 	mov.w	r4, #0
 801d80c:	461a      	mov	r2, r3
 801d80e:	4623      	mov	r3, r4
 801d810:	4818      	ldr	r0, [pc, #96]	; (801d874 <lv_task_create+0x144>)
 801d812:	f7fe f9bf 	bl	801bb94 <lv_debug_log_error>
 801d816:	e7fe      	b.n	801d816 <lv_task_create+0xe6>
            if(new_task == NULL) return NULL;
 801d818:	697b      	ldr	r3, [r7, #20]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d101      	bne.n	801d822 <lv_task_create+0xf2>
 801d81e:	2300      	movs	r3, #0
 801d820:	e021      	b.n	801d866 <lv_task_create+0x136>
        }
    }
    task_list_changed = true;
 801d822:	4b15      	ldr	r3, [pc, #84]	; (801d878 <lv_task_create+0x148>)
 801d824:	2201      	movs	r2, #1
 801d826:	701a      	strb	r2, [r3, #0]

    new_task->period  = period;
 801d828:	697b      	ldr	r3, [r7, #20]
 801d82a:	68ba      	ldr	r2, [r7, #8]
 801d82c:	601a      	str	r2, [r3, #0]
    new_task->task_cb = task_xcb;
 801d82e:	697b      	ldr	r3, [r7, #20]
 801d830:	68fa      	ldr	r2, [r7, #12]
 801d832:	609a      	str	r2, [r3, #8]
    new_task->prio    = prio;
 801d834:	79fb      	ldrb	r3, [r7, #7]
 801d836:	f003 0307 	and.w	r3, r3, #7
 801d83a:	b2d9      	uxtb	r1, r3
 801d83c:	697a      	ldr	r2, [r7, #20]
 801d83e:	7d13      	ldrb	r3, [r2, #20]
 801d840:	f361 0302 	bfi	r3, r1, #0, #3
 801d844:	7513      	strb	r3, [r2, #20]

    new_task->repeat_count = -1;
 801d846:	697b      	ldr	r3, [r7, #20]
 801d848:	f04f 32ff 	mov.w	r2, #4294967295
 801d84c:	611a      	str	r2, [r3, #16]
    new_task->last_run = lv_tick_get();
 801d84e:	f7fc ffd1 	bl	801a7f4 <lv_tick_get>
 801d852:	4602      	mov	r2, r0
 801d854:	697b      	ldr	r3, [r7, #20]
 801d856:	605a      	str	r2, [r3, #4]

    new_task->user_data = user_data;
 801d858:	697b      	ldr	r3, [r7, #20]
 801d85a:	683a      	ldr	r2, [r7, #0]
 801d85c:	60da      	str	r2, [r3, #12]

    task_created = true;
 801d85e:	4b07      	ldr	r3, [pc, #28]	; (801d87c <lv_task_create+0x14c>)
 801d860:	2201      	movs	r2, #1
 801d862:	701a      	strb	r2, [r3, #0]

    return new_task;
 801d864:	697b      	ldr	r3, [r7, #20]
}
 801d866:	4618      	mov	r0, r3
 801d868:	371c      	adds	r7, #28
 801d86a:	46bd      	mov	sp, r7
 801d86c:	bd90      	pop	{r4, r7, pc}
 801d86e:	bf00      	nop
 801d870:	20021784 	.word	0x20021784
 801d874:	0802d20c 	.word	0x0802d20c
 801d878:	20020099 	.word	0x20020099
 801d87c:	2002009a 	.word	0x2002009a

0801d880 <lv_task_del>:
/**
 * Delete a lv_task
 * @param task pointer to task created by task
 */
void lv_task_del(lv_task_t * task)
{
 801d880:	b580      	push	{r7, lr}
 801d882:	b082      	sub	sp, #8
 801d884:	af00      	add	r7, sp, #0
 801d886:	6078      	str	r0, [r7, #4]
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
 801d888:	6879      	ldr	r1, [r7, #4]
 801d88a:	480a      	ldr	r0, [pc, #40]	; (801d8b4 <lv_task_del+0x34>)
 801d88c:	f7fe fc7a 	bl	801c184 <_lv_ll_remove>
    task_list_changed = true;
 801d890:	4b09      	ldr	r3, [pc, #36]	; (801d8b8 <lv_task_del+0x38>)
 801d892:	2201      	movs	r2, #1
 801d894:	701a      	strb	r2, [r3, #0]

    lv_mem_free(task);
 801d896:	6878      	ldr	r0, [r7, #4]
 801d898:	f7fe ff42 	bl	801c720 <lv_mem_free>

    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 801d89c:	4b07      	ldr	r3, [pc, #28]	; (801d8bc <lv_task_del+0x3c>)
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	687a      	ldr	r2, [r7, #4]
 801d8a2:	429a      	cmp	r2, r3
 801d8a4:	d102      	bne.n	801d8ac <lv_task_del+0x2c>
 801d8a6:	4b06      	ldr	r3, [pc, #24]	; (801d8c0 <lv_task_del+0x40>)
 801d8a8:	2201      	movs	r2, #1
 801d8aa:	701a      	strb	r2, [r3, #0]
}
 801d8ac:	bf00      	nop
 801d8ae:	3708      	adds	r7, #8
 801d8b0:	46bd      	mov	sp, r7
 801d8b2:	bd80      	pop	{r7, pc}
 801d8b4:	20021784 	.word	0x20021784
 801d8b8:	20020099 	.word	0x20020099
 801d8bc:	20021854 	.word	0x20021854
 801d8c0:	20020098 	.word	0x20020098

0801d8c4 <lv_task_set_prio>:
 * Set new priority for a lv_task
 * @param task pointer to a lv_task
 * @param prio the new priority
 */
void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio)
{
 801d8c4:	b580      	push	{r7, lr}
 801d8c6:	b084      	sub	sp, #16
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	6078      	str	r0, [r7, #4]
 801d8cc:	460b      	mov	r3, r1
 801d8ce:	70fb      	strb	r3, [r7, #3]
    if(task->prio == prio) return;
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	7d1b      	ldrb	r3, [r3, #20]
 801d8d4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d8d8:	b2db      	uxtb	r3, r3
 801d8da:	461a      	mov	r2, r3
 801d8dc:	78fb      	ldrb	r3, [r7, #3]
 801d8de:	429a      	cmp	r2, r3
 801d8e0:	d036      	beq.n	801d950 <lv_task_set_prio+0x8c>

    /*Find the tasks with new priority*/
    lv_task_t * i;
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 801d8e2:	481d      	ldr	r0, [pc, #116]	; (801d958 <lv_task_set_prio+0x94>)
 801d8e4:	f7fe fcfc 	bl	801c2e0 <_lv_ll_get_head>
 801d8e8:	60f8      	str	r0, [r7, #12]
 801d8ea:	e017      	b.n	801d91c <lv_task_set_prio+0x58>
        if(i->prio <= prio) {
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	7d1b      	ldrb	r3, [r3, #20]
 801d8f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d8f4:	b2db      	uxtb	r3, r3
 801d8f6:	461a      	mov	r2, r3
 801d8f8:	78fb      	ldrb	r3, [r7, #3]
 801d8fa:	429a      	cmp	r2, r3
 801d8fc:	dc09      	bgt.n	801d912 <lv_task_set_prio+0x4e>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 801d8fe:	68fa      	ldr	r2, [r7, #12]
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	429a      	cmp	r2, r3
 801d904:	d00e      	beq.n	801d924 <lv_task_set_prio+0x60>
 801d906:	68fa      	ldr	r2, [r7, #12]
 801d908:	6879      	ldr	r1, [r7, #4]
 801d90a:	4813      	ldr	r0, [pc, #76]	; (801d958 <lv_task_set_prio+0x94>)
 801d90c:	f7fe fd5c 	bl	801c3c8 <_lv_ll_move_before>
            break;
 801d910:	e008      	b.n	801d924 <lv_task_set_prio+0x60>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 801d912:	68f9      	ldr	r1, [r7, #12]
 801d914:	4810      	ldr	r0, [pc, #64]	; (801d958 <lv_task_set_prio+0x94>)
 801d916:	f7fe fd09 	bl	801c32c <_lv_ll_get_next>
 801d91a:	60f8      	str	r0, [r7, #12]
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d1e4      	bne.n	801d8ec <lv_task_set_prio+0x28>
 801d922:	e000      	b.n	801d926 <lv_task_set_prio+0x62>
            break;
 801d924:	bf00      	nop
        }
    }

    /*There was no such a low priority so far then add the node to the tail*/
    if(i == NULL) {
 801d926:	68fb      	ldr	r3, [r7, #12]
 801d928:	2b00      	cmp	r3, #0
 801d92a:	d104      	bne.n	801d936 <lv_task_set_prio+0x72>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 801d92c:	2200      	movs	r2, #0
 801d92e:	6879      	ldr	r1, [r7, #4]
 801d930:	4809      	ldr	r0, [pc, #36]	; (801d958 <lv_task_set_prio+0x94>)
 801d932:	f7fe fd49 	bl	801c3c8 <_lv_ll_move_before>
    }
    task_list_changed = true;
 801d936:	4b09      	ldr	r3, [pc, #36]	; (801d95c <lv_task_set_prio+0x98>)
 801d938:	2201      	movs	r2, #1
 801d93a:	701a      	strb	r2, [r3, #0]

    task->prio = prio;
 801d93c:	78fb      	ldrb	r3, [r7, #3]
 801d93e:	f003 0307 	and.w	r3, r3, #7
 801d942:	b2d9      	uxtb	r1, r3
 801d944:	687a      	ldr	r2, [r7, #4]
 801d946:	7d13      	ldrb	r3, [r2, #20]
 801d948:	f361 0302 	bfi	r3, r1, #0, #3
 801d94c:	7513      	strb	r3, [r2, #20]
 801d94e:	e000      	b.n	801d952 <lv_task_set_prio+0x8e>
    if(task->prio == prio) return;
 801d950:	bf00      	nop
}
 801d952:	3710      	adds	r7, #16
 801d954:	46bd      	mov	sp, r7
 801d956:	bd80      	pop	{r7, pc}
 801d958:	20021784 	.word	0x20021784
 801d95c:	20020099 	.word	0x20020099

0801d960 <lv_task_ready>:
/**
 * Make a lv_task ready. It will not wait its period.
 * @param task pointer to a lv_task.
 */
void lv_task_ready(lv_task_t * task)
{
 801d960:	b580      	push	{r7, lr}
 801d962:	b082      	sub	sp, #8
 801d964:	af00      	add	r7, sp, #0
 801d966:	6078      	str	r0, [r7, #4]
    task->last_run = lv_tick_get() - task->period - 1;
 801d968:	f7fc ff44 	bl	801a7f4 <lv_tick_get>
 801d96c:	4602      	mov	r2, r0
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	1ad3      	subs	r3, r2, r3
 801d974:	1e5a      	subs	r2, r3, #1
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	605a      	str	r2, [r3, #4]
}
 801d97a:	bf00      	nop
 801d97c:	3708      	adds	r7, #8
 801d97e:	46bd      	mov	sp, r7
 801d980:	bd80      	pop	{r7, pc}
	...

0801d984 <lv_task_enable>:
/**
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
 801d984:	b480      	push	{r7}
 801d986:	b083      	sub	sp, #12
 801d988:	af00      	add	r7, sp, #0
 801d98a:	4603      	mov	r3, r0
 801d98c:	71fb      	strb	r3, [r7, #7]
    lv_task_run = en;
 801d98e:	4a04      	ldr	r2, [pc, #16]	; (801d9a0 <lv_task_enable+0x1c>)
 801d990:	79fb      	ldrb	r3, [r7, #7]
 801d992:	7013      	strb	r3, [r2, #0]
}
 801d994:	bf00      	nop
 801d996:	370c      	adds	r7, #12
 801d998:	46bd      	mov	sp, r7
 801d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d99e:	4770      	bx	lr
 801d9a0:	20020096 	.word	0x20020096

0801d9a4 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 801d9a4:	b580      	push	{r7, lr}
 801d9a6:	b084      	sub	sp, #16
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	6078      	str	r0, [r7, #4]
    bool exec = false;
 801d9ac:	2300      	movs	r3, #0
 801d9ae:	73fb      	strb	r3, [r7, #15]

    if(lv_task_time_remaining(task) == 0) {
 801d9b0:	6878      	ldr	r0, [r7, #4]
 801d9b2:	f000 f831 	bl	801da18 <lv_task_time_remaining>
 801d9b6:	4603      	mov	r3, r0
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	d125      	bne.n	801da08 <lv_task_exec+0x64>
        task->last_run = lv_tick_get();
 801d9bc:	f7fc ff1a 	bl	801a7f4 <lv_tick_get>
 801d9c0:	4602      	mov	r2, r0
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	605a      	str	r2, [r3, #4]
        if(task->task_cb) task->task_cb(task);
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	689b      	ldr	r3, [r3, #8]
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d003      	beq.n	801d9d6 <lv_task_exec+0x32>
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	689b      	ldr	r3, [r3, #8]
 801d9d2:	6878      	ldr	r0, [r7, #4]
 801d9d4:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 801d9d6:	4b0f      	ldr	r3, [pc, #60]	; (801da14 <lv_task_exec+0x70>)
 801d9d8:	781b      	ldrb	r3, [r3, #0]
 801d9da:	f083 0301 	eor.w	r3, r3, #1
 801d9de:	b2db      	uxtb	r3, r3
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d00f      	beq.n	801da04 <lv_task_exec+0x60>
            if(task->repeat_count > 0) {
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	691b      	ldr	r3, [r3, #16]
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	dd04      	ble.n	801d9f6 <lv_task_exec+0x52>
                task->repeat_count--;
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	691b      	ldr	r3, [r3, #16]
 801d9f0:	1e5a      	subs	r2, r3, #1
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	611a      	str	r2, [r3, #16]
            }
            if(task->repeat_count == 0) {
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	691b      	ldr	r3, [r3, #16]
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d102      	bne.n	801da04 <lv_task_exec+0x60>
                lv_task_del(task);
 801d9fe:	6878      	ldr	r0, [r7, #4]
 801da00:	f7ff ff3e 	bl	801d880 <lv_task_del>
            }
        }
        exec = true;
 801da04:	2301      	movs	r3, #1
 801da06:	73fb      	strb	r3, [r7, #15]
    }

    return exec;
 801da08:	7bfb      	ldrb	r3, [r7, #15]
}
 801da0a:	4618      	mov	r0, r3
 801da0c:	3710      	adds	r7, #16
 801da0e:	46bd      	mov	sp, r7
 801da10:	bd80      	pop	{r7, pc}
 801da12:	bf00      	nop
 801da14:	20020098 	.word	0x20020098

0801da18 <lv_task_time_remaining>:
 * Find out how much time remains before a task must be run.
 * @param task pointer to lv_task
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
 801da18:	b580      	push	{r7, lr}
 801da1a:	b084      	sub	sp, #16
 801da1c:	af00      	add	r7, sp, #0
 801da1e:	6078      	str	r0, [r7, #4]
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	685b      	ldr	r3, [r3, #4]
 801da24:	4618      	mov	r0, r3
 801da26:	f7fc feff 	bl	801a828 <lv_tick_elaps>
 801da2a:	60f8      	str	r0, [r7, #12]
    if(elp >= task->period)
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	681b      	ldr	r3, [r3, #0]
 801da30:	68fa      	ldr	r2, [r7, #12]
 801da32:	429a      	cmp	r2, r3
 801da34:	d301      	bcc.n	801da3a <lv_task_time_remaining+0x22>
        return 0;
 801da36:	2300      	movs	r3, #0
 801da38:	e003      	b.n	801da42 <lv_task_time_remaining+0x2a>
    return task->period - elp;
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	681a      	ldr	r2, [r3, #0]
 801da3e:	68fb      	ldr	r3, [r7, #12]
 801da40:	1ad3      	subs	r3, r2, r3
}
 801da42:	4618      	mov	r0, r3
 801da44:	3710      	adds	r7, #16
 801da46:	46bd      	mov	sp, r7
 801da48:	bd80      	pop	{r7, pc}

0801da4a <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 801da4a:	b480      	push	{r7}
 801da4c:	b083      	sub	sp, #12
 801da4e:	af00      	add	r7, sp, #0
 801da50:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 801da58:	4618      	mov	r0, r3
 801da5a:	370c      	adds	r7, #12
 801da5c:	46bd      	mov	sp, r7
 801da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da62:	4770      	bx	lr

0801da64 <_lv_txt_get_size>:
 * @param max_width max with of the text (break the lines to fit this size) Set CORD_MAX to avoid
 * line breaks
 */
void _lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                      lv_coord_t line_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 801da64:	b580      	push	{r7, lr}
 801da66:	b08a      	sub	sp, #40	; 0x28
 801da68:	af02      	add	r7, sp, #8
 801da6a:	60f8      	str	r0, [r7, #12]
 801da6c:	60b9      	str	r1, [r7, #8]
 801da6e:	607a      	str	r2, [r7, #4]
 801da70:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 801da72:	68fb      	ldr	r3, [r7, #12]
 801da74:	2200      	movs	r2, #0
 801da76:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	2200      	movs	r2, #0
 801da7c:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 801da7e:	68bb      	ldr	r3, [r7, #8]
 801da80:	2b00      	cmp	r3, #0
 801da82:	f000 80a0 	beq.w	801dbc6 <_lv_txt_get_size+0x162>
    if(font == NULL) return;
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	2b00      	cmp	r3, #0
 801da8a:	f000 809e 	beq.w	801dbca <_lv_txt_get_size+0x166>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801da8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801da92:	f003 0302 	and.w	r3, r3, #2
 801da96:	2b00      	cmp	r3, #0
 801da98:	d002      	beq.n	801daa0 <_lv_txt_get_size+0x3c>
 801da9a:	f647 4318 	movw	r3, #31768	; 0x7c18
 801da9e:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 801daa0:	2300      	movs	r3, #0
 801daa2:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 801daa4:	2300      	movs	r3, #0
 801daa6:	61bb      	str	r3, [r7, #24]
    uint16_t letter_height = lv_font_get_line_height(font);
 801daa8:	6878      	ldr	r0, [r7, #4]
 801daaa:	f7ff ffce 	bl	801da4a <lv_font_get_line_height>
 801daae:	4603      	mov	r3, r0
 801dab0:	82fb      	strh	r3, [r7, #22]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 801dab2:	e04f      	b.n	801db54 <_lv_txt_get_size+0xf0>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 801dab4:	68ba      	ldr	r2, [r7, #8]
 801dab6:	69fb      	ldr	r3, [r7, #28]
 801dab8:	18d0      	adds	r0, r2, r3
 801daba:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801dabe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801dac2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801dac6:	9300      	str	r3, [sp, #0]
 801dac8:	460b      	mov	r3, r1
 801daca:	6879      	ldr	r1, [r7, #4]
 801dacc:	f000 f964 	bl	801dd98 <_lv_txt_get_next_line>
 801dad0:	4602      	mov	r2, r0
 801dad2:	69bb      	ldr	r3, [r7, #24]
 801dad4:	4413      	add	r3, r2
 801dad6:	61bb      	str	r3, [r7, #24]

        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dade:	461a      	mov	r2, r3
 801dae0:	8afb      	ldrh	r3, [r7, #22]
 801dae2:	441a      	add	r2, r3
 801dae4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801dae8:	4413      	add	r3, r2
 801daea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801daee:	d26e      	bcs.n	801dbce <_lv_txt_get_size+0x16a>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
            return;
        }
        else {
            size_res->y += letter_height;
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801daf6:	b29a      	uxth	r2, r3
 801daf8:	8afb      	ldrh	r3, [r7, #22]
 801dafa:	4413      	add	r3, r2
 801dafc:	b29b      	uxth	r3, r3
 801dafe:	b21a      	sxth	r2, r3
 801db00:	68fb      	ldr	r3, [r7, #12]
 801db02:	805a      	strh	r2, [r3, #2]
            size_res->y += line_space;
 801db04:	68fb      	ldr	r3, [r7, #12]
 801db06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801db0a:	b29a      	uxth	r2, r3
 801db0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801db0e:	4413      	add	r3, r2
 801db10:	b29b      	uxth	r3, r3
 801db12:	b21a      	sxth	r2, r3
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	805a      	strh	r2, [r3, #2]
        }

        /*Calculate the longest line*/
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 801db18:	68ba      	ldr	r2, [r7, #8]
 801db1a:	69fb      	ldr	r3, [r7, #28]
 801db1c:	18d0      	adds	r0, r2, r3
 801db1e:	69ba      	ldr	r2, [r7, #24]
 801db20:	69fb      	ldr	r3, [r7, #28]
 801db22:	1ad1      	subs	r1, r2, r3
 801db24:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801db28:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801db2c:	9300      	str	r3, [sp, #0]
 801db2e:	4613      	mov	r3, r2
 801db30:	687a      	ldr	r2, [r7, #4]
 801db32:	f000 f9ef 	bl	801df14 <_lv_txt_get_width>
 801db36:	4603      	mov	r3, r0
 801db38:	82bb      	strh	r3, [r7, #20]
                                                       flag);

        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 801db3a:	68fb      	ldr	r3, [r7, #12]
 801db3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801db40:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801db44:	4293      	cmp	r3, r2
 801db46:	bfb8      	it	lt
 801db48:	4613      	movlt	r3, r2
 801db4a:	b21a      	sxth	r2, r3
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 801db50:	69bb      	ldr	r3, [r7, #24]
 801db52:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 801db54:	68ba      	ldr	r2, [r7, #8]
 801db56:	69fb      	ldr	r3, [r7, #28]
 801db58:	4413      	add	r3, r2
 801db5a:	781b      	ldrb	r3, [r3, #0]
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d1a9      	bne.n	801dab4 <_lv_txt_get_size+0x50>
    }

    /*Make the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 801db60:	69fb      	ldr	r3, [r7, #28]
 801db62:	2b00      	cmp	r3, #0
 801db64:	d01a      	beq.n	801db9c <_lv_txt_get_size+0x138>
 801db66:	69fb      	ldr	r3, [r7, #28]
 801db68:	3b01      	subs	r3, #1
 801db6a:	68ba      	ldr	r2, [r7, #8]
 801db6c:	4413      	add	r3, r2
 801db6e:	781b      	ldrb	r3, [r3, #0]
 801db70:	2b0a      	cmp	r3, #10
 801db72:	d006      	beq.n	801db82 <_lv_txt_get_size+0x11e>
 801db74:	69fb      	ldr	r3, [r7, #28]
 801db76:	3b01      	subs	r3, #1
 801db78:	68ba      	ldr	r2, [r7, #8]
 801db7a:	4413      	add	r3, r2
 801db7c:	781b      	ldrb	r3, [r3, #0]
 801db7e:	2b0d      	cmp	r3, #13
 801db80:	d10c      	bne.n	801db9c <_lv_txt_get_size+0x138>
        size_res->y += letter_height + line_space;
 801db82:	68fb      	ldr	r3, [r7, #12]
 801db84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801db88:	b29a      	uxth	r2, r3
 801db8a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 801db8c:	8afb      	ldrh	r3, [r7, #22]
 801db8e:	440b      	add	r3, r1
 801db90:	b29b      	uxth	r3, r3
 801db92:	4413      	add	r3, r2
 801db94:	b29b      	uxth	r3, r3
 801db96:	b21a      	sxth	r2, r3
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 801db9c:	68fb      	ldr	r3, [r7, #12]
 801db9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	d104      	bne.n	801dbb0 <_lv_txt_get_size+0x14c>
        size_res->y = letter_height;
 801dba6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dbaa:	68fb      	ldr	r3, [r7, #12]
 801dbac:	805a      	strh	r2, [r3, #2]
 801dbae:	e00f      	b.n	801dbd0 <_lv_txt_get_size+0x16c>
    else
        size_res->y -= line_space;
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dbb6:	b29a      	uxth	r2, r3
 801dbb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dbba:	1ad3      	subs	r3, r2, r3
 801dbbc:	b29b      	uxth	r3, r3
 801dbbe:	b21a      	sxth	r2, r3
 801dbc0:	68fb      	ldr	r3, [r7, #12]
 801dbc2:	805a      	strh	r2, [r3, #2]
 801dbc4:	e004      	b.n	801dbd0 <_lv_txt_get_size+0x16c>
    if(text == NULL) return;
 801dbc6:	bf00      	nop
 801dbc8:	e002      	b.n	801dbd0 <_lv_txt_get_size+0x16c>
    if(font == NULL) return;
 801dbca:	bf00      	nop
 801dbcc:	e000      	b.n	801dbd0 <_lv_txt_get_size+0x16c>
            return;
 801dbce:	bf00      	nop
}
 801dbd0:	3720      	adds	r7, #32
 801dbd2:	46bd      	mov	sp, r7
 801dbd4:	bd80      	pop	{r7, pc}
	...

0801dbd8 <lv_txt_get_next_word>:
 * @return the index of the first char of the next word (in byte index not letter index. With UTF-8 they are different)
 */
static uint32_t lv_txt_get_next_word(const char * txt, const lv_font_t * font,
                                     lv_coord_t letter_space, lv_coord_t max_width,
                                     lv_txt_flag_t flag, uint32_t * word_w_ptr, lv_txt_cmd_state_t * cmd_state, bool force)
{
 801dbd8:	b580      	push	{r7, lr}
 801dbda:	b08e      	sub	sp, #56	; 0x38
 801dbdc:	af00      	add	r7, sp, #0
 801dbde:	60f8      	str	r0, [r7, #12]
 801dbe0:	60b9      	str	r1, [r7, #8]
 801dbe2:	4611      	mov	r1, r2
 801dbe4:	461a      	mov	r2, r3
 801dbe6:	460b      	mov	r3, r1
 801dbe8:	80fb      	strh	r3, [r7, #6]
 801dbea:	4613      	mov	r3, r2
 801dbec:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL || txt[0] == '\0') return 0;
 801dbee:	68fb      	ldr	r3, [r7, #12]
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	d003      	beq.n	801dbfc <lv_txt_get_next_word+0x24>
 801dbf4:	68fb      	ldr	r3, [r7, #12]
 801dbf6:	781b      	ldrb	r3, [r3, #0]
 801dbf8:	2b00      	cmp	r3, #0
 801dbfa:	d101      	bne.n	801dc00 <lv_txt_get_next_word+0x28>
 801dbfc:	2300      	movs	r3, #0
 801dbfe:	e0c4      	b.n	801dd8a <lv_txt_get_next_word+0x1b2>
    if(font == NULL) return 0;
 801dc00:	68bb      	ldr	r3, [r7, #8]
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d101      	bne.n	801dc0a <lv_txt_get_next_word+0x32>
 801dc06:	2300      	movs	r3, #0
 801dc08:	e0bf      	b.n	801dd8a <lv_txt_get_next_word+0x1b2>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801dc0a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801dc0e:	f003 0302 	and.w	r3, r3, #2
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	d002      	beq.n	801dc1c <lv_txt_get_next_word+0x44>
 801dc16:	f647 4318 	movw	r3, #31768	; 0x7c18
 801dc1a:	80bb      	strh	r3, [r7, #4]

    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 801dc1c:	2300      	movs	r3, #0
 801dc1e:	637b      	str	r3, [r7, #52]	; 0x34
 801dc20:	2300      	movs	r3, #0
 801dc22:	617b      	str	r3, [r7, #20]
 801dc24:	2300      	movs	r3, #0
 801dc26:	613b      	str	r3, [r7, #16]
    uint32_t letter = 0;      /* Letter at i */
 801dc28:	2300      	movs	r3, #0
 801dc2a:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t letter_next = 0; /* Letter at i_next */
 801dc2c:	2300      	movs	r3, #0
 801dc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t letter_w;
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
 801dc30:	2300      	movs	r3, #0
 801dc32:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
 801dc34:	2300      	movs	r3, #0
 801dc36:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
 801dc38:	f04f 33ff 	mov.w	r3, #4294967295
 801dc3c:	623b      	str	r3, [r7, #32]
    uint32_t break_letter_count = 0; /* Number of characters up to the long word break point */
 801dc3e:	2300      	movs	r3, #0
 801dc40:	61fb      	str	r3, [r7, #28]

    letter = _lv_txt_encoded_next(txt, &i_next);
 801dc42:	4b54      	ldr	r3, [pc, #336]	; (801dd94 <lv_txt_get_next_word+0x1bc>)
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	f107 0214 	add.w	r2, r7, #20
 801dc4a:	4611      	mov	r1, r2
 801dc4c:	68f8      	ldr	r0, [r7, #12]
 801dc4e:	4798      	blx	r3
 801dc50:	6338      	str	r0, [r7, #48]	; 0x30
    i_next_next = i_next;
 801dc52:	697b      	ldr	r3, [r7, #20]
 801dc54:	613b      	str	r3, [r7, #16]

    /* Obtain the full word, regardless if it fits or not in max_width */
    while(txt[i] != '\0') {
 801dc56:	e074      	b.n	801dd42 <lv_txt_get_next_word+0x16a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 801dc58:	4b4e      	ldr	r3, [pc, #312]	; (801dd94 <lv_txt_get_next_word+0x1bc>)
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	f107 0210 	add.w	r2, r7, #16
 801dc60:	4611      	mov	r1, r2
 801dc62:	68f8      	ldr	r0, [r7, #12]
 801dc64:	4798      	blx	r3
 801dc66:	62f8      	str	r0, [r7, #44]	; 0x2c
        word_len++;
 801dc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc6a:	3301      	adds	r3, #1
 801dc6c:	627b      	str	r3, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801dc6e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801dc72:	f003 0301 	and.w	r3, r3, #1
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d00d      	beq.n	801dc96 <lv_txt_get_next_word+0xbe>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 801dc7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dc7c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dc7e:	f000 f9af 	bl	801dfe0 <_lv_txt_is_cmd>
 801dc82:	4603      	mov	r3, r0
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	d006      	beq.n	801dc96 <lv_txt_get_next_word+0xbe>
                i = i_next;
 801dc88:	697b      	ldr	r3, [r7, #20]
 801dc8a:	637b      	str	r3, [r7, #52]	; 0x34
                i_next = i_next_next;
 801dc8c:	693b      	ldr	r3, [r7, #16]
 801dc8e:	617b      	str	r3, [r7, #20]
                letter = letter_next;
 801dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc92:	633b      	str	r3, [r7, #48]	; 0x30
                continue;   /*Skip the letter is it is part of a command*/
 801dc94:	e055      	b.n	801dd42 <lv_txt_get_next_word+0x16a>
            }
        }

        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801dc96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dc9a:	68b8      	ldr	r0, [r7, #8]
 801dc9c:	f7fb fbaa 	bl	80193f4 <lv_font_get_glyph_width>
 801dca0:	4603      	mov	r3, r0
 801dca2:	837b      	strh	r3, [r7, #26]
        cur_w += letter_w;
 801dca4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801dca6:	8b7b      	ldrh	r3, [r7, #26]
 801dca8:	4413      	add	r3, r2
 801dcaa:	b29b      	uxth	r3, r3
 801dcac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if(letter_w > 0) {
 801dcae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	dd04      	ble.n	801dcc0 <lv_txt_get_next_word+0xe8>
            cur_w += letter_space;
 801dcb6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801dcb8:	88fb      	ldrh	r3, [r7, #6]
 801dcba:	4413      	add	r3, r2
 801dcbc:	b29b      	uxth	r3, r3
 801dcbe:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        /* Test if this character fits within max_width */
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 801dcc0:	6a3b      	ldr	r3, [r7, #32]
 801dcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dcc6:	d10d      	bne.n	801dce4 <lv_txt_get_next_word+0x10c>
 801dcc8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801dccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dcd0:	1ad2      	subs	r2, r2, r3
 801dcd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dcd6:	429a      	cmp	r2, r3
 801dcd8:	dd04      	ble.n	801dce4 <lv_txt_get_next_word+0x10c>
            break_index = i;
 801dcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dcdc:	623b      	str	r3, [r7, #32]
            break_letter_count = word_len - 1;
 801dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dce0:	3b01      	subs	r3, #1
 801dce2:	61fb      	str	r3, [r7, #28]
            /* break_index is now pointing at the character that doesn't fit */
        }

        /*Check for new line chars and breakchars*/
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 801dce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dce6:	2b0a      	cmp	r3, #10
 801dce8:	d008      	beq.n	801dcfc <lv_txt_get_next_word+0x124>
 801dcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcec:	2b0d      	cmp	r3, #13
 801dcee:	d005      	beq.n	801dcfc <lv_txt_get_next_word+0x124>
 801dcf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dcf2:	f000 fae5 	bl	801e2c0 <is_break_char>
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d011      	beq.n	801dd20 <lv_txt_get_next_word+0x148>
            /* Update the output width on the first character if it fits.
             * Must do this here in case first letter is a break character. */
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 801dcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d10a      	bne.n	801dd18 <lv_txt_get_next_word+0x140>
 801dd02:	6a3b      	ldr	r3, [r7, #32]
 801dd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd08:	d106      	bne.n	801dd18 <lv_txt_get_next_word+0x140>
 801dd0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d003      	beq.n	801dd18 <lv_txt_get_next_word+0x140>
 801dd10:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801dd14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd16:	601a      	str	r2, [r3, #0]
            word_len--;
 801dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd1a:	3b01      	subs	r3, #1
 801dd1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801dd1e:	e016      	b.n	801dd4e <lv_txt_get_next_word+0x176>
        }

        /* Update the output width */
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 801dd20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	d007      	beq.n	801dd36 <lv_txt_get_next_word+0x15e>
 801dd26:	6a3b      	ldr	r3, [r7, #32]
 801dd28:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd2c:	d103      	bne.n	801dd36 <lv_txt_get_next_word+0x15e>
 801dd2e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801dd32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd34:	601a      	str	r2, [r3, #0]

        i = i_next;
 801dd36:	697b      	ldr	r3, [r7, #20]
 801dd38:	637b      	str	r3, [r7, #52]	; 0x34
        i_next = i_next_next;
 801dd3a:	693b      	ldr	r3, [r7, #16]
 801dd3c:	617b      	str	r3, [r7, #20]
        letter = letter_next;
 801dd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd40:	633b      	str	r3, [r7, #48]	; 0x30
    while(txt[i] != '\0') {
 801dd42:	68fa      	ldr	r2, [r7, #12]
 801dd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd46:	4413      	add	r3, r2
 801dd48:	781b      	ldrb	r3, [r3, #0]
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d184      	bne.n	801dc58 <lv_txt_get_next_word+0x80>
    }

    /* Entire Word fits in the provided space */
    if(break_index == NO_BREAK_FOUND) {
 801dd4e:	6a3b      	ldr	r3, [r7, #32]
 801dd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd54:	d10c      	bne.n	801dd70 <lv_txt_get_next_word+0x198>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 801dd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	d005      	beq.n	801dd68 <lv_txt_get_next_word+0x190>
 801dd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd5e:	2b0d      	cmp	r3, #13
 801dd60:	d104      	bne.n	801dd6c <lv_txt_get_next_word+0x194>
 801dd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd64:	2b0a      	cmp	r3, #10
 801dd66:	d101      	bne.n	801dd6c <lv_txt_get_next_word+0x194>
 801dd68:	697b      	ldr	r3, [r7, #20]
 801dd6a:	637b      	str	r3, [r7, #52]	; 0x34
        return i;
 801dd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd6e:	e00c      	b.n	801dd8a <lv_txt_get_next_word+0x1b2>
            // However, in current usage, this doesn't impact anything.
        }
    }
    return i;
#else
    if(force) return break_index;
 801dd70:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d001      	beq.n	801dd7c <lv_txt_get_next_word+0x1a4>
 801dd78:	6a3b      	ldr	r3, [r7, #32]
 801dd7a:	e006      	b.n	801dd8a <lv_txt_get_next_word+0x1b2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
 801dd7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d002      	beq.n	801dd88 <lv_txt_get_next_word+0x1b0>
 801dd82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd84:	2200      	movs	r2, #0
 801dd86:	601a      	str	r2, [r3, #0]
    (void) break_letter_count;
    return 0;
 801dd88:	2300      	movs	r3, #0
#endif
}
 801dd8a:	4618      	mov	r0, r3
 801dd8c:	3738      	adds	r7, #56	; 0x38
 801dd8e:	46bd      	mov	sp, r7
 801dd90:	bd80      	pop	{r7, pc}
 801dd92:	bf00      	nop
 801dd94:	20000044 	.word	0x20000044

0801dd98 <_lv_txt_get_next_line>:
 * @param flags settings for the text from 'txt_flag_type' enum
 * @return the index of the first char of the new line (in byte index not letter index. With UTF-8 they are different)
 */
uint32_t _lv_txt_get_next_line(const char * txt, const lv_font_t * font,
                               lv_coord_t letter_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 801dd98:	b580      	push	{r7, lr}
 801dd9a:	b08e      	sub	sp, #56	; 0x38
 801dd9c:	af04      	add	r7, sp, #16
 801dd9e:	60f8      	str	r0, [r7, #12]
 801dda0:	60b9      	str	r1, [r7, #8]
 801dda2:	4611      	mov	r1, r2
 801dda4:	461a      	mov	r2, r3
 801dda6:	460b      	mov	r3, r1
 801dda8:	80fb      	strh	r3, [r7, #6]
 801ddaa:	4613      	mov	r3, r2
 801ddac:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL) return 0;
 801ddae:	68fb      	ldr	r3, [r7, #12]
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d101      	bne.n	801ddb8 <_lv_txt_get_next_line+0x20>
 801ddb4:	2300      	movs	r3, #0
 801ddb6:	e0a7      	b.n	801df08 <_lv_txt_get_next_line+0x170>
    if(font == NULL) return 0;
 801ddb8:	68bb      	ldr	r3, [r7, #8]
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d101      	bne.n	801ddc2 <_lv_txt_get_next_line+0x2a>
 801ddbe:	2300      	movs	r3, #0
 801ddc0:	e0a2      	b.n	801df08 <_lv_txt_get_next_line+0x170>

    /* If max_width doesn't mater simply find the new line character
     * without thinking about word wrapping*/
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
 801ddc2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801ddc6:	f003 0302 	and.w	r3, r3, #2
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	d105      	bne.n	801ddda <_lv_txt_get_next_line+0x42>
 801ddce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801ddd2:	f003 0310 	and.w	r3, r3, #16
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d022      	beq.n	801de20 <_lv_txt_get_next_line+0x88>
        uint32_t i;
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 801ddda:	2300      	movs	r3, #0
 801dddc:	627b      	str	r3, [r7, #36]	; 0x24
 801ddde:	e002      	b.n	801dde6 <_lv_txt_get_next_line+0x4e>
 801dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dde2:	3301      	adds	r3, #1
 801dde4:	627b      	str	r3, [r7, #36]	; 0x24
 801dde6:	68fa      	ldr	r2, [r7, #12]
 801dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddea:	4413      	add	r3, r2
 801ddec:	781b      	ldrb	r3, [r3, #0]
 801ddee:	2b0a      	cmp	r3, #10
 801ddf0:	d00b      	beq.n	801de0a <_lv_txt_get_next_line+0x72>
 801ddf2:	68fa      	ldr	r2, [r7, #12]
 801ddf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddf6:	4413      	add	r3, r2
 801ddf8:	781b      	ldrb	r3, [r3, #0]
 801ddfa:	2b0d      	cmp	r3, #13
 801ddfc:	d005      	beq.n	801de0a <_lv_txt_get_next_line+0x72>
 801ddfe:	68fa      	ldr	r2, [r7, #12]
 801de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de02:	4413      	add	r3, r2
 801de04:	781b      	ldrb	r3, [r3, #0]
 801de06:	2b00      	cmp	r3, #0
 801de08:	d1ea      	bne.n	801dde0 <_lv_txt_get_next_line+0x48>
            /*Just find the new line chars or string ends by incrementing `i`*/
        }
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 801de0a:	68fa      	ldr	r2, [r7, #12]
 801de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de0e:	4413      	add	r3, r2
 801de10:	781b      	ldrb	r3, [r3, #0]
 801de12:	2b00      	cmp	r3, #0
 801de14:	d002      	beq.n	801de1c <_lv_txt_get_next_line+0x84>
 801de16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de18:	3301      	adds	r3, #1
 801de1a:	627b      	str	r3, [r7, #36]	; 0x24
        return i;
 801de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de1e:	e073      	b.n	801df08 <_lv_txt_get_next_line+0x170>
    }

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801de20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801de24:	f003 0302 	and.w	r3, r3, #2
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d002      	beq.n	801de32 <_lv_txt_get_next_line+0x9a>
 801de2c:	f647 4318 	movw	r3, #31768	; 0x7c18
 801de30:	80bb      	strh	r3, [r7, #4]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801de32:	2300      	movs	r3, #0
 801de34:	77fb      	strb	r3, [r7, #31]
    uint32_t i = 0;                                        /* Iterating index into txt */
 801de36:	2300      	movs	r3, #0
 801de38:	61bb      	str	r3, [r7, #24]

    while(txt[i] != '\0' && max_width > 0) {
 801de3a:	e04e      	b.n	801deda <_lv_txt_get_next_line+0x142>
        uint32_t word_w = 0;
 801de3c:	2300      	movs	r3, #0
 801de3e:	617b      	str	r3, [r7, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 801de40:	69bb      	ldr	r3, [r7, #24]
 801de42:	68fa      	ldr	r2, [r7, #12]
 801de44:	18d0      	adds	r0, r2, r3
 801de46:	69bb      	ldr	r3, [r7, #24]
 801de48:	2b00      	cmp	r3, #0
 801de4a:	bf0c      	ite	eq
 801de4c:	2301      	moveq	r3, #1
 801de4e:	2300      	movne	r3, #0
 801de50:	b2db      	uxtb	r3, r3
 801de52:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801de56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801de5a:	9303      	str	r3, [sp, #12]
 801de5c:	f107 031f 	add.w	r3, r7, #31
 801de60:	9302      	str	r3, [sp, #8]
 801de62:	f107 0314 	add.w	r3, r7, #20
 801de66:	9301      	str	r3, [sp, #4]
 801de68:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801de6c:	9300      	str	r3, [sp, #0]
 801de6e:	460b      	mov	r3, r1
 801de70:	68b9      	ldr	r1, [r7, #8]
 801de72:	f7ff feb1 	bl	801dbd8 <lv_txt_get_next_word>
 801de76:	6238      	str	r0, [r7, #32]
        max_width -= word_w;
 801de78:	88ba      	ldrh	r2, [r7, #4]
 801de7a:	697b      	ldr	r3, [r7, #20]
 801de7c:	b29b      	uxth	r3, r3
 801de7e:	1ad3      	subs	r3, r2, r3
 801de80:	b29b      	uxth	r3, r3
 801de82:	80bb      	strh	r3, [r7, #4]

        if(advance == 0) {
 801de84:	6a3b      	ldr	r3, [r7, #32]
 801de86:	2b00      	cmp	r3, #0
 801de88:	d10a      	bne.n	801dea0 <_lv_txt_get_next_line+0x108>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 801de8a:	69bb      	ldr	r3, [r7, #24]
 801de8c:	2b00      	cmp	r3, #0
 801de8e:	d12f      	bne.n	801def0 <_lv_txt_get_next_line+0x158>
 801de90:	4b1f      	ldr	r3, [pc, #124]	; (801df10 <_lv_txt_get_next_line+0x178>)
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	f107 0218 	add.w	r2, r7, #24
 801de98:	4611      	mov	r1, r2
 801de9a:	68f8      	ldr	r0, [r7, #12]
 801de9c:	4798      	blx	r3
            break;
 801de9e:	e027      	b.n	801def0 <_lv_txt_get_next_line+0x158>
        }

        i += advance;
 801dea0:	69ba      	ldr	r2, [r7, #24]
 801dea2:	6a3b      	ldr	r3, [r7, #32]
 801dea4:	4413      	add	r3, r2
 801dea6:	61bb      	str	r3, [r7, #24]

        if(txt[0] == '\n' || txt[0] == '\r') break;
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	781b      	ldrb	r3, [r3, #0]
 801deac:	2b0a      	cmp	r3, #10
 801deae:	d01f      	beq.n	801def0 <_lv_txt_get_next_line+0x158>
 801deb0:	68fb      	ldr	r3, [r7, #12]
 801deb2:	781b      	ldrb	r3, [r3, #0]
 801deb4:	2b0d      	cmp	r3, #13
 801deb6:	d01b      	beq.n	801def0 <_lv_txt_get_next_line+0x158>

        if(txt[i] == '\n' || txt[i] == '\r') {
 801deb8:	69bb      	ldr	r3, [r7, #24]
 801deba:	68fa      	ldr	r2, [r7, #12]
 801debc:	4413      	add	r3, r2
 801debe:	781b      	ldrb	r3, [r3, #0]
 801dec0:	2b0a      	cmp	r3, #10
 801dec2:	d005      	beq.n	801ded0 <_lv_txt_get_next_line+0x138>
 801dec4:	69bb      	ldr	r3, [r7, #24]
 801dec6:	68fa      	ldr	r2, [r7, #12]
 801dec8:	4413      	add	r3, r2
 801deca:	781b      	ldrb	r3, [r3, #0]
 801decc:	2b0d      	cmp	r3, #13
 801dece:	d104      	bne.n	801deda <_lv_txt_get_next_line+0x142>
            i++;  /* Include the following newline in the current line */
 801ded0:	69bb      	ldr	r3, [r7, #24]
 801ded2:	3301      	adds	r3, #1
 801ded4:	61bb      	str	r3, [r7, #24]
            break;
 801ded6:	bf00      	nop
 801ded8:	e00b      	b.n	801def2 <_lv_txt_get_next_line+0x15a>
    while(txt[i] != '\0' && max_width > 0) {
 801deda:	69bb      	ldr	r3, [r7, #24]
 801dedc:	68fa      	ldr	r2, [r7, #12]
 801dede:	4413      	add	r3, r2
 801dee0:	781b      	ldrb	r3, [r3, #0]
 801dee2:	2b00      	cmp	r3, #0
 801dee4:	d005      	beq.n	801def2 <_lv_txt_get_next_line+0x15a>
 801dee6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801deea:	2b00      	cmp	r3, #0
 801deec:	dca6      	bgt.n	801de3c <_lv_txt_get_next_line+0xa4>
 801deee:	e000      	b.n	801def2 <_lv_txt_get_next_line+0x15a>
            break;
 801def0:	bf00      	nop
        }

    }

    /* Always step at least one to avoid infinite loops */
    if(i == 0) {
 801def2:	69bb      	ldr	r3, [r7, #24]
 801def4:	2b00      	cmp	r3, #0
 801def6:	d106      	bne.n	801df06 <_lv_txt_get_next_line+0x16e>
        _lv_txt_encoded_next(txt, &i);
 801def8:	4b05      	ldr	r3, [pc, #20]	; (801df10 <_lv_txt_get_next_line+0x178>)
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	f107 0218 	add.w	r2, r7, #24
 801df00:	4611      	mov	r1, r2
 801df02:	68f8      	ldr	r0, [r7, #12]
 801df04:	4798      	blx	r3
    }

    return i;
 801df06:	69bb      	ldr	r3, [r7, #24]
}
 801df08:	4618      	mov	r0, r3
 801df0a:	3728      	adds	r7, #40	; 0x28
 801df0c:	46bd      	mov	sp, r7
 801df0e:	bd80      	pop	{r7, pc}
 801df10:	20000044 	.word	0x20000044

0801df14 <_lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t _lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                             lv_txt_flag_t flag)
{
 801df14:	b580      	push	{r7, lr}
 801df16:	b08a      	sub	sp, #40	; 0x28
 801df18:	af00      	add	r7, sp, #0
 801df1a:	60f8      	str	r0, [r7, #12]
 801df1c:	60b9      	str	r1, [r7, #8]
 801df1e:	607a      	str	r2, [r7, #4]
 801df20:	807b      	strh	r3, [r7, #2]
    if(txt == NULL) return 0;
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	2b00      	cmp	r3, #0
 801df26:	d101      	bne.n	801df2c <_lv_txt_get_width+0x18>
 801df28:	2300      	movs	r3, #0
 801df2a:	e053      	b.n	801dfd4 <_lv_txt_get_width+0xc0>
    if(font == NULL) return 0;
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	2b00      	cmp	r3, #0
 801df30:	d101      	bne.n	801df36 <_lv_txt_get_width+0x22>
 801df32:	2300      	movs	r3, #0
 801df34:	e04e      	b.n	801dfd4 <_lv_txt_get_width+0xc0>

    uint32_t i                   = 0;
 801df36:	2300      	movs	r3, #0
 801df38:	617b      	str	r3, [r7, #20]
    lv_coord_t width             = 0;
 801df3a:	2300      	movs	r3, #0
 801df3c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801df3e:	2300      	movs	r3, #0
 801df40:	74fb      	strb	r3, [r7, #19]

    if(length != 0) {
 801df42:	68bb      	ldr	r3, [r7, #8]
 801df44:	2b00      	cmp	r3, #0
 801df46:	d043      	beq.n	801dfd0 <_lv_txt_get_width+0xbc>
        while(i < length) {
 801df48:	e035      	b.n	801dfb6 <_lv_txt_get_width+0xa2>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 801df4a:	4b24      	ldr	r3, [pc, #144]	; (801dfdc <_lv_txt_get_width+0xc8>)
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	f107 0214 	add.w	r2, r7, #20
 801df52:	4611      	mov	r1, r2
 801df54:	68f8      	ldr	r0, [r7, #12]
 801df56:	4798      	blx	r3
 801df58:	6238      	str	r0, [r7, #32]
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 801df5a:	4b20      	ldr	r3, [pc, #128]	; (801dfdc <_lv_txt_get_width+0xc8>)
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	697a      	ldr	r2, [r7, #20]
 801df60:	68f9      	ldr	r1, [r7, #12]
 801df62:	440a      	add	r2, r1
 801df64:	2100      	movs	r1, #0
 801df66:	4610      	mov	r0, r2
 801df68:	4798      	blx	r3
 801df6a:	61f8      	str	r0, [r7, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801df6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801df70:	f003 0301 	and.w	r3, r3, #1
 801df74:	2b00      	cmp	r3, #0
 801df76:	d009      	beq.n	801df8c <_lv_txt_get_width+0x78>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 801df78:	f107 0313 	add.w	r3, r7, #19
 801df7c:	6a39      	ldr	r1, [r7, #32]
 801df7e:	4618      	mov	r0, r3
 801df80:	f000 f82e 	bl	801dfe0 <_lv_txt_is_cmd>
 801df84:	4603      	mov	r3, r0
 801df86:	2b00      	cmp	r3, #0
 801df88:	d000      	beq.n	801df8c <_lv_txt_get_width+0x78>
                    continue;
 801df8a:	e014      	b.n	801dfb6 <_lv_txt_get_width+0xa2>
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 801df8c:	69fa      	ldr	r2, [r7, #28]
 801df8e:	6a39      	ldr	r1, [r7, #32]
 801df90:	6878      	ldr	r0, [r7, #4]
 801df92:	f7fb fa2f 	bl	80193f4 <lv_font_get_glyph_width>
 801df96:	4603      	mov	r3, r0
 801df98:	837b      	strh	r3, [r7, #26]
            if(char_width > 0) {
 801df9a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	dd09      	ble.n	801dfb6 <_lv_txt_get_width+0xa2>
                width += char_width;
 801dfa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dfa4:	8b7b      	ldrh	r3, [r7, #26]
 801dfa6:	4413      	add	r3, r2
 801dfa8:	b29b      	uxth	r3, r3
 801dfaa:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 801dfac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dfae:	887b      	ldrh	r3, [r7, #2]
 801dfb0:	4413      	add	r3, r2
 801dfb2:	b29b      	uxth	r3, r3
 801dfb4:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 801dfb6:	697b      	ldr	r3, [r7, #20]
 801dfb8:	68ba      	ldr	r2, [r7, #8]
 801dfba:	429a      	cmp	r2, r3
 801dfbc:	d8c5      	bhi.n	801df4a <_lv_txt_get_width+0x36>
            }
        }

        if(width > 0) {
 801dfbe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	dd04      	ble.n	801dfd0 <_lv_txt_get_width+0xbc>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 801dfc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dfc8:	887b      	ldrh	r3, [r7, #2]
 801dfca:	1ad3      	subs	r3, r2, r3
 801dfcc:	b29b      	uxth	r3, r3
 801dfce:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned */
        }
    }

    return width;
 801dfd0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	3728      	adds	r7, #40	; 0x28
 801dfd8:	46bd      	mov	sp, r7
 801dfda:	bd80      	pop	{r7, pc}
 801dfdc:	20000044 	.word	0x20000044

0801dfe0 <_lv_txt_is_cmd>:
 * @param c the current character
 * @return true: the character is part of a command and should not be written,
 *         false: the character should be written
 */
bool _lv_txt_is_cmd(lv_txt_cmd_state_t * state, uint32_t c)
{
 801dfe0:	b480      	push	{r7}
 801dfe2:	b085      	sub	sp, #20
 801dfe4:	af00      	add	r7, sp, #0
 801dfe6:	6078      	str	r0, [r7, #4]
 801dfe8:	6039      	str	r1, [r7, #0]
    bool ret = false;
 801dfea:	2300      	movs	r3, #0
 801dfec:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 801dfee:	2323      	movs	r3, #35	; 0x23
 801dff0:	461a      	mov	r2, r3
 801dff2:	683b      	ldr	r3, [r7, #0]
 801dff4:	4293      	cmp	r3, r2
 801dff6:	d11a      	bne.n	801e02e <_lv_txt_is_cmd+0x4e>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	781b      	ldrb	r3, [r3, #0]
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d105      	bne.n	801e00c <_lv_txt_is_cmd+0x2c>
            *state = LV_TXT_CMD_STATE_PAR;
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	2201      	movs	r2, #1
 801e004:	701a      	strb	r2, [r3, #0]
            ret    = true;
 801e006:	2301      	movs	r3, #1
 801e008:	73fb      	strb	r3, [r7, #15]
 801e00a:	e010      	b.n	801e02e <_lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char */
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	781b      	ldrb	r3, [r3, #0]
 801e010:	2b01      	cmp	r3, #1
 801e012:	d103      	bne.n	801e01c <_lv_txt_is_cmd+0x3c>
            *state = LV_TXT_CMD_STATE_WAIT;
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	2200      	movs	r2, #0
 801e018:	701a      	strb	r2, [r3, #0]
 801e01a:	e008      	b.n	801e02e <_lv_txt_is_cmd+0x4e>
        }
        /*Command end */
        else if(*state == LV_TXT_CMD_STATE_IN) {
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	781b      	ldrb	r3, [r3, #0]
 801e020:	2b02      	cmp	r3, #2
 801e022:	d104      	bne.n	801e02e <_lv_txt_is_cmd+0x4e>
            *state = LV_TXT_CMD_STATE_WAIT;
 801e024:	687b      	ldr	r3, [r7, #4]
 801e026:	2200      	movs	r2, #0
 801e028:	701a      	strb	r2, [r3, #0]
            ret    = true;
 801e02a:	2301      	movs	r3, #1
 801e02c:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TXT_CMD_STATE_PAR) {
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	781b      	ldrb	r3, [r3, #0]
 801e032:	2b01      	cmp	r3, #1
 801e034:	d107      	bne.n	801e046 <_lv_txt_is_cmd+0x66>
        if(c == ' ') {
 801e036:	683b      	ldr	r3, [r7, #0]
 801e038:	2b20      	cmp	r3, #32
 801e03a:	d102      	bne.n	801e042 <_lv_txt_is_cmd+0x62>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	2202      	movs	r2, #2
 801e040:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 801e042:	2301      	movs	r3, #1
 801e044:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 801e046:	7bfb      	ldrb	r3, [r7, #15]
}
 801e048:	4618      	mov	r0, r3
 801e04a:	3714      	adds	r7, #20
 801e04c:	46bd      	mov	sp, r7
 801e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e052:	4770      	bx	lr

0801e054 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 801e054:	b480      	push	{r7}
 801e056:	b085      	sub	sp, #20
 801e058:	af00      	add	r7, sp, #0
 801e05a:	6078      	str	r0, [r7, #4]
 801e05c:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     * */

    uint32_t result = 0;
 801e05e:	2300      	movs	r3, #0
 801e060:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 801e062:	2300      	movs	r3, #0
 801e064:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 801e066:	683b      	ldr	r3, [r7, #0]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d102      	bne.n	801e072 <lv_txt_utf8_next+0x1e>
 801e06c:	f107 0308 	add.w	r3, r7, #8
 801e070:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 801e072:	683b      	ldr	r3, [r7, #0]
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	687a      	ldr	r2, [r7, #4]
 801e078:	4413      	add	r3, r2
 801e07a:	781b      	ldrb	r3, [r3, #0]
 801e07c:	b25b      	sxtb	r3, r3
 801e07e:	2b00      	cmp	r3, #0
 801e080:	db0b      	blt.n	801e09a <lv_txt_utf8_next+0x46>
        result = txt[*i];
 801e082:	683b      	ldr	r3, [r7, #0]
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	687a      	ldr	r2, [r7, #4]
 801e088:	4413      	add	r3, r2
 801e08a:	781b      	ldrb	r3, [r3, #0]
 801e08c:	60fb      	str	r3, [r7, #12]
        (*i)++;
 801e08e:	683b      	ldr	r3, [r7, #0]
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	1c5a      	adds	r2, r3, #1
 801e094:	683b      	ldr	r3, [r7, #0]
 801e096:	601a      	str	r2, [r3, #0]
 801e098:	e0ea      	b.n	801e270 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if((txt[*i] & 0xE0) == 0xC0) {
 801e09a:	683b      	ldr	r3, [r7, #0]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	687a      	ldr	r2, [r7, #4]
 801e0a0:	4413      	add	r3, r2
 801e0a2:	781b      	ldrb	r3, [r3, #0]
 801e0a4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801e0a8:	2bc0      	cmp	r3, #192	; 0xc0
 801e0aa:	d128      	bne.n	801e0fe <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 801e0ac:	683b      	ldr	r3, [r7, #0]
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	687a      	ldr	r2, [r7, #4]
 801e0b2:	4413      	add	r3, r2
 801e0b4:	781b      	ldrb	r3, [r3, #0]
 801e0b6:	019b      	lsls	r3, r3, #6
 801e0b8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801e0bc:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e0be:	683b      	ldr	r3, [r7, #0]
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	1c5a      	adds	r2, r3, #1
 801e0c4:	683b      	ldr	r3, [r7, #0]
 801e0c6:	601a      	str	r2, [r3, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e0c8:	683b      	ldr	r3, [r7, #0]
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	687a      	ldr	r2, [r7, #4]
 801e0ce:	4413      	add	r3, r2
 801e0d0:	781b      	ldrb	r3, [r3, #0]
 801e0d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e0d6:	2b80      	cmp	r3, #128	; 0x80
 801e0d8:	d001      	beq.n	801e0de <lv_txt_utf8_next+0x8a>
 801e0da:	2300      	movs	r3, #0
 801e0dc:	e0c9      	b.n	801e272 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 801e0de:	683b      	ldr	r3, [r7, #0]
 801e0e0:	681b      	ldr	r3, [r3, #0]
 801e0e2:	687a      	ldr	r2, [r7, #4]
 801e0e4:	4413      	add	r3, r2
 801e0e6:	781b      	ldrb	r3, [r3, #0]
 801e0e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e0ec:	68fa      	ldr	r2, [r7, #12]
 801e0ee:	4413      	add	r3, r2
 801e0f0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e0f2:	683b      	ldr	r3, [r7, #0]
 801e0f4:	681b      	ldr	r3, [r3, #0]
 801e0f6:	1c5a      	adds	r2, r3, #1
 801e0f8:	683b      	ldr	r3, [r7, #0]
 801e0fa:	601a      	str	r2, [r3, #0]
 801e0fc:	e0b8      	b.n	801e270 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if((txt[*i] & 0xF0) == 0xE0) {
 801e0fe:	683b      	ldr	r3, [r7, #0]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	687a      	ldr	r2, [r7, #4]
 801e104:	4413      	add	r3, r2
 801e106:	781b      	ldrb	r3, [r3, #0]
 801e108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e10c:	2be0      	cmp	r3, #224	; 0xe0
 801e10e:	d142      	bne.n	801e196 <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 801e110:	683b      	ldr	r3, [r7, #0]
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	687a      	ldr	r2, [r7, #4]
 801e116:	4413      	add	r3, r2
 801e118:	781b      	ldrb	r3, [r3, #0]
 801e11a:	031b      	lsls	r3, r3, #12
 801e11c:	b29b      	uxth	r3, r3
 801e11e:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e120:	683b      	ldr	r3, [r7, #0]
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	1c5a      	adds	r2, r3, #1
 801e126:	683b      	ldr	r3, [r7, #0]
 801e128:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e12a:	683b      	ldr	r3, [r7, #0]
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	687a      	ldr	r2, [r7, #4]
 801e130:	4413      	add	r3, r2
 801e132:	781b      	ldrb	r3, [r3, #0]
 801e134:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e138:	2b80      	cmp	r3, #128	; 0x80
 801e13a:	d001      	beq.n	801e140 <lv_txt_utf8_next+0xec>
 801e13c:	2300      	movs	r3, #0
 801e13e:	e098      	b.n	801e272 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801e140:	683b      	ldr	r3, [r7, #0]
 801e142:	681b      	ldr	r3, [r3, #0]
 801e144:	687a      	ldr	r2, [r7, #4]
 801e146:	4413      	add	r3, r2
 801e148:	781b      	ldrb	r3, [r3, #0]
 801e14a:	019b      	lsls	r3, r3, #6
 801e14c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 801e150:	68fa      	ldr	r2, [r7, #12]
 801e152:	4413      	add	r3, r2
 801e154:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e156:	683b      	ldr	r3, [r7, #0]
 801e158:	681b      	ldr	r3, [r3, #0]
 801e15a:	1c5a      	adds	r2, r3, #1
 801e15c:	683b      	ldr	r3, [r7, #0]
 801e15e:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e160:	683b      	ldr	r3, [r7, #0]
 801e162:	681b      	ldr	r3, [r3, #0]
 801e164:	687a      	ldr	r2, [r7, #4]
 801e166:	4413      	add	r3, r2
 801e168:	781b      	ldrb	r3, [r3, #0]
 801e16a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e16e:	2b80      	cmp	r3, #128	; 0x80
 801e170:	d001      	beq.n	801e176 <lv_txt_utf8_next+0x122>
 801e172:	2300      	movs	r3, #0
 801e174:	e07d      	b.n	801e272 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 801e176:	683b      	ldr	r3, [r7, #0]
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	687a      	ldr	r2, [r7, #4]
 801e17c:	4413      	add	r3, r2
 801e17e:	781b      	ldrb	r3, [r3, #0]
 801e180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e184:	68fa      	ldr	r2, [r7, #12]
 801e186:	4413      	add	r3, r2
 801e188:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e18a:	683b      	ldr	r3, [r7, #0]
 801e18c:	681b      	ldr	r3, [r3, #0]
 801e18e:	1c5a      	adds	r2, r3, #1
 801e190:	683b      	ldr	r3, [r7, #0]
 801e192:	601a      	str	r2, [r3, #0]
 801e194:	e06c      	b.n	801e270 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if((txt[*i] & 0xF8) == 0xF0) {
 801e196:	683b      	ldr	r3, [r7, #0]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	687a      	ldr	r2, [r7, #4]
 801e19c:	4413      	add	r3, r2
 801e19e:	781b      	ldrb	r3, [r3, #0]
 801e1a0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e1a4:	2bf0      	cmp	r3, #240	; 0xf0
 801e1a6:	d15e      	bne.n	801e266 <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801e1a8:	683b      	ldr	r3, [r7, #0]
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	687a      	ldr	r2, [r7, #4]
 801e1ae:	4413      	add	r3, r2
 801e1b0:	781b      	ldrb	r3, [r3, #0]
 801e1b2:	049b      	lsls	r3, r3, #18
 801e1b4:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 801e1b8:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e1ba:	683b      	ldr	r3, [r7, #0]
 801e1bc:	681b      	ldr	r3, [r3, #0]
 801e1be:	1c5a      	adds	r2, r3, #1
 801e1c0:	683b      	ldr	r3, [r7, #0]
 801e1c2:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e1c4:	683b      	ldr	r3, [r7, #0]
 801e1c6:	681b      	ldr	r3, [r3, #0]
 801e1c8:	687a      	ldr	r2, [r7, #4]
 801e1ca:	4413      	add	r3, r2
 801e1cc:	781b      	ldrb	r3, [r3, #0]
 801e1ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e1d2:	2b80      	cmp	r3, #128	; 0x80
 801e1d4:	d001      	beq.n	801e1da <lv_txt_utf8_next+0x186>
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	e04b      	b.n	801e272 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 801e1da:	683b      	ldr	r3, [r7, #0]
 801e1dc:	681b      	ldr	r3, [r3, #0]
 801e1de:	687a      	ldr	r2, [r7, #4]
 801e1e0:	4413      	add	r3, r2
 801e1e2:	781b      	ldrb	r3, [r3, #0]
 801e1e4:	031b      	lsls	r3, r3, #12
 801e1e6:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 801e1ea:	68fa      	ldr	r2, [r7, #12]
 801e1ec:	4413      	add	r3, r2
 801e1ee:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e1f0:	683b      	ldr	r3, [r7, #0]
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	1c5a      	adds	r2, r3, #1
 801e1f6:	683b      	ldr	r3, [r7, #0]
 801e1f8:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e1fa:	683b      	ldr	r3, [r7, #0]
 801e1fc:	681b      	ldr	r3, [r3, #0]
 801e1fe:	687a      	ldr	r2, [r7, #4]
 801e200:	4413      	add	r3, r2
 801e202:	781b      	ldrb	r3, [r3, #0]
 801e204:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e208:	2b80      	cmp	r3, #128	; 0x80
 801e20a:	d001      	beq.n	801e210 <lv_txt_utf8_next+0x1bc>
 801e20c:	2300      	movs	r3, #0
 801e20e:	e030      	b.n	801e272 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801e210:	683b      	ldr	r3, [r7, #0]
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	687a      	ldr	r2, [r7, #4]
 801e216:	4413      	add	r3, r2
 801e218:	781b      	ldrb	r3, [r3, #0]
 801e21a:	019b      	lsls	r3, r3, #6
 801e21c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 801e220:	68fa      	ldr	r2, [r7, #12]
 801e222:	4413      	add	r3, r2
 801e224:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e226:	683b      	ldr	r3, [r7, #0]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	1c5a      	adds	r2, r3, #1
 801e22c:	683b      	ldr	r3, [r7, #0]
 801e22e:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e230:	683b      	ldr	r3, [r7, #0]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	687a      	ldr	r2, [r7, #4]
 801e236:	4413      	add	r3, r2
 801e238:	781b      	ldrb	r3, [r3, #0]
 801e23a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e23e:	2b80      	cmp	r3, #128	; 0x80
 801e240:	d001      	beq.n	801e246 <lv_txt_utf8_next+0x1f2>
 801e242:	2300      	movs	r3, #0
 801e244:	e015      	b.n	801e272 <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 801e246:	683b      	ldr	r3, [r7, #0]
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	687a      	ldr	r2, [r7, #4]
 801e24c:	4413      	add	r3, r2
 801e24e:	781b      	ldrb	r3, [r3, #0]
 801e250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e254:	68fa      	ldr	r2, [r7, #12]
 801e256:	4413      	add	r3, r2
 801e258:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e25a:	683b      	ldr	r3, [r7, #0]
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	1c5a      	adds	r2, r3, #1
 801e260:	683b      	ldr	r3, [r7, #0]
 801e262:	601a      	str	r2, [r3, #0]
 801e264:	e004      	b.n	801e270 <lv_txt_utf8_next+0x21c>
        }
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 801e266:	683b      	ldr	r3, [r7, #0]
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	1c5a      	adds	r2, r3, #1
 801e26c:	683b      	ldr	r3, [r7, #0]
 801e26e:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 801e270:	68fb      	ldr	r3, [r7, #12]
}
 801e272:	4618      	mov	r0, r3
 801e274:	3714      	adds	r7, #20
 801e276:	46bd      	mov	sp, r7
 801e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e27c:	4770      	bx	lr
	...

0801e280 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 801e280:	b580      	push	{r7, lr}
 801e282:	b084      	sub	sp, #16
 801e284:	af00      	add	r7, sp, #0
 801e286:	6078      	str	r0, [r7, #4]
 801e288:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 801e28a:	2300      	movs	r3, #0
 801e28c:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 801e28e:	2300      	movs	r3, #0
 801e290:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 801e292:	e009      	b.n	801e2a8 <lv_txt_utf8_get_char_id+0x28>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 801e294:	4b09      	ldr	r3, [pc, #36]	; (801e2bc <lv_txt_utf8_get_char_id+0x3c>)
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	f107 0208 	add.w	r2, r7, #8
 801e29c:	4611      	mov	r1, r2
 801e29e:	6878      	ldr	r0, [r7, #4]
 801e2a0:	4798      	blx	r3
        char_cnt++;
 801e2a2:	68fb      	ldr	r3, [r7, #12]
 801e2a4:	3301      	adds	r3, #1
 801e2a6:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 801e2a8:	68bb      	ldr	r3, [r7, #8]
 801e2aa:	683a      	ldr	r2, [r7, #0]
 801e2ac:	429a      	cmp	r2, r3
 801e2ae:	d8f1      	bhi.n	801e294 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 801e2b0:	68fb      	ldr	r3, [r7, #12]
}
 801e2b2:	4618      	mov	r0, r3
 801e2b4:	3710      	adds	r7, #16
 801e2b6:	46bd      	mov	sp, r7
 801e2b8:	bd80      	pop	{r7, pc}
 801e2ba:	bf00      	nop
 801e2bc:	20000044 	.word	0x20000044

0801e2c0 <is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool is_break_char(uint32_t letter)
{
 801e2c0:	b480      	push	{r7}
 801e2c2:	b085      	sub	sp, #20
 801e2c4:	af00      	add	r7, sp, #0
 801e2c6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 801e2c8:	2300      	movs	r3, #0
 801e2ca:	73bb      	strb	r3, [r7, #14]

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801e2cc:	2300      	movs	r3, #0
 801e2ce:	73fb      	strb	r3, [r7, #15]
 801e2d0:	e00c      	b.n	801e2ec <is_break_char+0x2c>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801e2d2:	7bfb      	ldrb	r3, [r7, #15]
 801e2d4:	4a0b      	ldr	r2, [pc, #44]	; (801e304 <is_break_char+0x44>)
 801e2d6:	5cd3      	ldrb	r3, [r2, r3]
 801e2d8:	461a      	mov	r2, r3
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	4293      	cmp	r3, r2
 801e2de:	d102      	bne.n	801e2e6 <is_break_char+0x26>
            ret = true; /*If match then it is break char*/
 801e2e0:	2301      	movs	r3, #1
 801e2e2:	73bb      	strb	r3, [r7, #14]
            break;
 801e2e4:	e007      	b.n	801e2f6 <is_break_char+0x36>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801e2e6:	7bfb      	ldrb	r3, [r7, #15]
 801e2e8:	3301      	adds	r3, #1
 801e2ea:	73fb      	strb	r3, [r7, #15]
 801e2ec:	7bfb      	ldrb	r3, [r7, #15]
 801e2ee:	4a05      	ldr	r2, [pc, #20]	; (801e304 <is_break_char+0x44>)
 801e2f0:	5cd3      	ldrb	r3, [r2, r3]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d1ed      	bne.n	801e2d2 <is_break_char+0x12>
        }
    }

    return ret;
 801e2f6:	7bbb      	ldrb	r3, [r7, #14]
}
 801e2f8:	4618      	mov	r0, r3
 801e2fa:	3714      	adds	r7, #20
 801e2fc:	46bd      	mov	sp, r7
 801e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e302:	4770      	bx	lr
 801e304:	0802d22c 	.word	0x0802d22c

0801e308 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 801e308:	b580      	push	{r7, lr}
 801e30a:	b086      	sub	sp, #24
 801e30c:	af00      	add	r7, sp, #0
 801e30e:	60f8      	str	r0, [r7, #12]
 801e310:	60b9      	str	r1, [r7, #8]
 801e312:	607a      	str	r2, [r7, #4]
 801e314:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 801e316:	68bb      	ldr	r3, [r7, #8]
 801e318:	617b      	str	r3, [r7, #20]
 801e31a:	e02d      	b.n	801e378 <_lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 801e31c:	687b      	ldr	r3, [r7, #4]
 801e31e:	085b      	lsrs	r3, r3, #1
 801e320:	683a      	ldr	r2, [r7, #0]
 801e322:	fb02 f303 	mul.w	r3, r2, r3
 801e326:	697a      	ldr	r2, [r7, #20]
 801e328:	4413      	add	r3, r2
 801e32a:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 801e32c:	6a3b      	ldr	r3, [r7, #32]
 801e32e:	6979      	ldr	r1, [r7, #20]
 801e330:	68f8      	ldr	r0, [r7, #12]
 801e332:	4798      	blx	r3
 801e334:	6138      	str	r0, [r7, #16]
 801e336:	693b      	ldr	r3, [r7, #16]
 801e338:	2b00      	cmp	r3, #0
 801e33a:	dd12      	ble.n	801e362 <_lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	085b      	lsrs	r3, r3, #1
 801e340:	687a      	ldr	r2, [r7, #4]
 801e342:	f002 0201 	and.w	r2, r2, #1
 801e346:	2a00      	cmp	r2, #0
 801e348:	bf0c      	ite	eq
 801e34a:	2201      	moveq	r2, #1
 801e34c:	2200      	movne	r2, #0
 801e34e:	b2d2      	uxtb	r2, r2
 801e350:	1a9b      	subs	r3, r3, r2
 801e352:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 801e354:	697a      	ldr	r2, [r7, #20]
 801e356:	683b      	ldr	r3, [r7, #0]
 801e358:	4413      	add	r3, r2
 801e35a:	617b      	str	r3, [r7, #20]
 801e35c:	697b      	ldr	r3, [r7, #20]
 801e35e:	60bb      	str	r3, [r7, #8]
 801e360:	e00a      	b.n	801e378 <_lv_utils_bsearch+0x70>
        }
        else if(c < 0) {
 801e362:	693b      	ldr	r3, [r7, #16]
 801e364:	2b00      	cmp	r3, #0
 801e366:	da05      	bge.n	801e374 <_lv_utils_bsearch+0x6c>
            n /= 2;
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	085b      	lsrs	r3, r3, #1
 801e36c:	607b      	str	r3, [r7, #4]
            middle = base;
 801e36e:	68bb      	ldr	r3, [r7, #8]
 801e370:	617b      	str	r3, [r7, #20]
 801e372:	e001      	b.n	801e378 <_lv_utils_bsearch+0x70>
        }
        else {
            return (char *)middle;
 801e374:	697b      	ldr	r3, [r7, #20]
 801e376:	e003      	b.n	801e380 <_lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	d1ce      	bne.n	801e31c <_lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 801e37e:	2300      	movs	r3, #0
}
 801e380:	4618      	mov	r0, r3
 801e382:	3718      	adds	r7, #24
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}

0801e388 <lv_theme_set_act>:
 * Set a theme for the system.
 * From now, all the created objects will use styles from this theme by default
 * @param th pointer to theme (return value of: 'lv_theme_init_xxx()')
 */
void lv_theme_set_act(lv_theme_t * th)
{
 801e388:	b480      	push	{r7}
 801e38a:	b083      	sub	sp, #12
 801e38c:	af00      	add	r7, sp, #0
 801e38e:	6078      	str	r0, [r7, #4]
    act_theme = th;
 801e390:	4a04      	ldr	r2, [pc, #16]	; (801e3a4 <lv_theme_set_act+0x1c>)
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	6013      	str	r3, [r2, #0]
}
 801e396:	bf00      	nop
 801e398:	370c      	adds	r7, #12
 801e39a:	46bd      	mov	sp, r7
 801e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3a0:	4770      	bx	lr
 801e3a2:	bf00      	nop
 801e3a4:	200200a4 	.word	0x200200a4

0801e3a8 <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
 801e3a8:	b580      	push	{r7, lr}
 801e3aa:	b082      	sub	sp, #8
 801e3ac:	af00      	add	r7, sp, #0
 801e3ae:	6078      	str	r0, [r7, #4]
 801e3b0:	460b      	mov	r3, r1
 801e3b2:	807b      	strh	r3, [r7, #2]
    /* Remove the existing styles from all part of the object. */
    clear_styles(obj, name);
 801e3b4:	887b      	ldrh	r3, [r7, #2]
 801e3b6:	4619      	mov	r1, r3
 801e3b8:	6878      	ldr	r0, [r7, #4]
 801e3ba:	f000 f847 	bl	801e44c <clear_styles>

    /*Apply the theme including the base theme(s)*/

    apply_theme(act_theme, obj, name);
 801e3be:	4b05      	ldr	r3, [pc, #20]	; (801e3d4 <lv_theme_apply+0x2c>)
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	887a      	ldrh	r2, [r7, #2]
 801e3c4:	6879      	ldr	r1, [r7, #4]
 801e3c6:	4618      	mov	r0, r3
 801e3c8:	f000 f812 	bl	801e3f0 <apply_theme>
}
 801e3cc:	bf00      	nop
 801e3ce:	3708      	adds	r7, #8
 801e3d0:	46bd      	mov	sp, r7
 801e3d2:	bd80      	pop	{r7, pc}
 801e3d4:	200200a4 	.word	0x200200a4

0801e3d8 <lv_theme_get_font_normal>:
/**
 * Get the normal font of the theme
 * @return pointer to the font
 */
const lv_font_t * lv_theme_get_font_normal(void)
{
 801e3d8:	b480      	push	{r7}
 801e3da:	af00      	add	r7, sp, #0
    return act_theme->font_normal;
 801e3dc:	4b03      	ldr	r3, [pc, #12]	; (801e3ec <lv_theme_get_font_normal+0x14>)
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	699b      	ldr	r3, [r3, #24]
}
 801e3e2:	4618      	mov	r0, r3
 801e3e4:	46bd      	mov	sp, r7
 801e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3ea:	4770      	bx	lr
 801e3ec:	200200a4 	.word	0x200200a4

0801e3f0 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 801e3f0:	b580      	push	{r7, lr}
 801e3f2:	b084      	sub	sp, #16
 801e3f4:	af00      	add	r7, sp, #0
 801e3f6:	60f8      	str	r0, [r7, #12]
 801e3f8:	60b9      	str	r1, [r7, #8]
 801e3fa:	4613      	mov	r3, r2
 801e3fc:	80fb      	strh	r3, [r7, #6]
    if(th->base) {
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	689b      	ldr	r3, [r3, #8]
 801e402:	2b00      	cmp	r3, #0
 801e404:	d006      	beq.n	801e414 <apply_theme+0x24>
        apply_theme(th->base, obj, name);
 801e406:	68fb      	ldr	r3, [r7, #12]
 801e408:	689b      	ldr	r3, [r3, #8]
 801e40a:	88fa      	ldrh	r2, [r7, #6]
 801e40c:	68b9      	ldr	r1, [r7, #8]
 801e40e:	4618      	mov	r0, r3
 801e410:	f7ff ffee 	bl	801e3f0 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
 801e414:	68fb      	ldr	r3, [r7, #12]
 801e416:	685b      	ldr	r3, [r3, #4]
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d006      	beq.n	801e42a <apply_theme+0x3a>
        th->apply_xcb(obj, name);
 801e41c:	68fb      	ldr	r3, [r7, #12]
 801e41e:	685b      	ldr	r3, [r3, #4]
 801e420:	88fa      	ldrh	r2, [r7, #6]
 801e422:	4611      	mov	r1, r2
 801e424:	68b8      	ldr	r0, [r7, #8]
 801e426:	4798      	blx	r3
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
 801e428:	e00a      	b.n	801e440 <apply_theme+0x50>
    else if(th->apply_cb) {
 801e42a:	68fb      	ldr	r3, [r7, #12]
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d006      	beq.n	801e440 <apply_theme+0x50>
        th->apply_cb(act_theme, obj, name);
 801e432:	68fb      	ldr	r3, [r7, #12]
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	4a04      	ldr	r2, [pc, #16]	; (801e448 <apply_theme+0x58>)
 801e438:	6810      	ldr	r0, [r2, #0]
 801e43a:	88fa      	ldrh	r2, [r7, #6]
 801e43c:	68b9      	ldr	r1, [r7, #8]
 801e43e:	4798      	blx	r3
}
 801e440:	bf00      	nop
 801e442:	3710      	adds	r7, #16
 801e444:	46bd      	mov	sp, r7
 801e446:	bd80      	pop	{r7, pc}
 801e448:	200200a4 	.word	0x200200a4

0801e44c <clear_styles>:

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
 801e44c:	b580      	push	{r7, lr}
 801e44e:	b082      	sub	sp, #8
 801e450:	af00      	add	r7, sp, #0
 801e452:	6078      	str	r0, [r7, #4]
 801e454:	460b      	mov	r3, r1
 801e456:	807b      	strh	r3, [r7, #2]
    switch(name) {
 801e458:	887b      	ldrh	r3, [r7, #2]
 801e45a:	2b28      	cmp	r3, #40	; 0x28
 801e45c:	f200 81d2 	bhi.w	801e804 <clear_styles+0x3b8>
 801e460:	a201      	add	r2, pc, #4	; (adr r2, 801e468 <clear_styles+0x1c>)
 801e462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e466:	bf00      	nop
 801e468:	0801e805 	.word	0x0801e805
 801e46c:	0801e50d 	.word	0x0801e50d
 801e470:	0801e517 	.word	0x0801e517
 801e474:	0801e5b7 	.word	0x0801e5b7
 801e478:	0801e559 	.word	0x0801e559
 801e47c:	0801e52b 	.word	0x0801e52b
 801e480:	0801e535 	.word	0x0801e535
 801e484:	0801e7ad 	.word	0x0801e7ad
 801e488:	0801e585 	.word	0x0801e585
 801e48c:	0801e5f5 	.word	0x0801e5f5
 801e490:	0801e6ff 	.word	0x0801e6ff
 801e494:	0801e521 	.word	0x0801e521
 801e498:	0801e7cf 	.word	0x0801e7cf
 801e49c:	0801e6dd 	.word	0x0801e6dd
 801e4a0:	0801e7eb 	.word	0x0801e7eb
 801e4a4:	0801e58f 	.word	0x0801e58f
 801e4a8:	0801e599 	.word	0x0801e599
 801e4ac:	0801e547 	.word	0x0801e547
 801e4b0:	0801e5a3 	.word	0x0801e5a3
 801e4b4:	0801e623 	.word	0x0801e623
 801e4b8:	0801e5ad 	.word	0x0801e5ad
 801e4bc:	0801e6b9 	.word	0x0801e6b9
 801e4c0:	0801e6d3 	.word	0x0801e6d3
 801e4c4:	0801e7e1 	.word	0x0801e7e1
 801e4c8:	0801e607 	.word	0x0801e607
 801e4cc:	0801e611 	.word	0x0801e611
 801e4d0:	0801e6af 	.word	0x0801e6af
 801e4d4:	0801e62d 	.word	0x0801e62d
 801e4d8:	0801e69d 	.word	0x0801e69d
 801e4dc:	0801e5db 	.word	0x0801e5db
 801e4e0:	0801e791 	.word	0x0801e791
 801e4e4:	0801e7a3 	.word	0x0801e7a3
 801e4e8:	0801e5c9 	.word	0x0801e5c9
 801e4ec:	0801e56b 	.word	0x0801e56b
 801e4f0:	0801e719 	.word	0x0801e719
 801e4f4:	0801e647 	.word	0x0801e647
 801e4f8:	0801e671 	.word	0x0801e671
 801e4fc:	0801e76f 	.word	0x0801e76f
 801e500:	0801e683 	.word	0x0801e683
 801e504:	0801e743 	.word	0x0801e743
 801e508:	0801e765 	.word	0x0801e765
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 801e50c:	2100      	movs	r1, #0
 801e50e:	6878      	ldr	r0, [r7, #4]
 801e510:	f7e7 fcc2 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e514:	e177      	b.n	801e806 <clear_styles+0x3ba>
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 801e516:	2100      	movs	r1, #0
 801e518:	6878      	ldr	r0, [r7, #4]
 801e51a:	f7e7 fcbd 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e51e:	e172      	b.n	801e806 <clear_styles+0x3ba>
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 801e520:	2100      	movs	r1, #0
 801e522:	6878      	ldr	r0, [r7, #4]
 801e524:	f7e7 fcb8 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e528:	e16d      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e52a:	2100      	movs	r1, #0
 801e52c:	6878      	ldr	r0, [r7, #4]
 801e52e:	f7e7 fcb3 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e532:	e168      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
 801e534:	2100      	movs	r1, #0
 801e536:	6878      	ldr	r0, [r7, #4]
 801e538:	f7e7 fcae 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
 801e53c:	2101      	movs	r1, #1
 801e53e:	6878      	ldr	r0, [r7, #4]
 801e540:	f7e7 fcaa 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e544:	e15f      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
 801e546:	2100      	movs	r1, #0
 801e548:	6878      	ldr	r0, [r7, #4]
 801e54a:	f7e7 fca5 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
 801e54e:	2101      	movs	r1, #1
 801e550:	6878      	ldr	r0, [r7, #4]
 801e552:	f7e7 fca1 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e556:	e156      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
 801e558:	2100      	movs	r1, #0
 801e55a:	6878      	ldr	r0, [r7, #4]
 801e55c:	f7e7 fc9c 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
 801e560:	2101      	movs	r1, #1
 801e562:	6878      	ldr	r0, [r7, #4]
 801e564:	f7e7 fc98 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e568:	e14d      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
 801e56a:	2100      	movs	r1, #0
 801e56c:	6878      	ldr	r0, [r7, #4]
 801e56e:	f7e7 fc93 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
 801e572:	2101      	movs	r1, #1
 801e574:	6878      	ldr	r0, [r7, #4]
 801e576:	f7e7 fc8f 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
 801e57a:	2102      	movs	r1, #2
 801e57c:	6878      	ldr	r0, [r7, #4]
 801e57e:	f7e7 fc8b 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e582:	e140      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
 801e584:	2100      	movs	r1, #0
 801e586:	6878      	ldr	r0, [r7, #4]
 801e588:	f7e7 fc86 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e58c:	e13b      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
 801e58e:	2100      	movs	r1, #0
 801e590:	6878      	ldr	r0, [r7, #4]
 801e592:	f7e7 fc81 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e596:	e136      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
 801e598:	2100      	movs	r1, #0
 801e59a:	6878      	ldr	r0, [r7, #4]
 801e59c:	f7e7 fc7c 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e5a0:	e131      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
 801e5a2:	2100      	movs	r1, #0
 801e5a4:	6878      	ldr	r0, [r7, #4]
 801e5a6:	f7e7 fc77 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e5aa:	e12c      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
 801e5ac:	2100      	movs	r1, #0
 801e5ae:	6878      	ldr	r0, [r7, #4]
 801e5b0:	f7e7 fc72 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e5b4:	e127      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
 801e5b6:	2100      	movs	r1, #0
 801e5b8:	6878      	ldr	r0, [r7, #4]
 801e5ba:	f7e7 fc6d 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
 801e5be:	2101      	movs	r1, #1
 801e5c0:	6878      	ldr	r0, [r7, #4]
 801e5c2:	f7e7 fc69 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e5c6:	e11e      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
 801e5c8:	2100      	movs	r1, #0
 801e5ca:	6878      	ldr	r0, [r7, #4]
 801e5cc:	f7e7 fc64 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
 801e5d0:	2101      	movs	r1, #1
 801e5d2:	6878      	ldr	r0, [r7, #4]
 801e5d4:	f7e7 fc60 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e5d8:	e115      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
 801e5da:	2100      	movs	r1, #0
 801e5dc:	6878      	ldr	r0, [r7, #4]
 801e5de:	f7e7 fc5b 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
 801e5e2:	2101      	movs	r1, #1
 801e5e4:	6878      	ldr	r0, [r7, #4]
 801e5e6:	f7e7 fc57 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
 801e5ea:	2102      	movs	r1, #2
 801e5ec:	6878      	ldr	r0, [r7, #4]
 801e5ee:	f7e7 fc53 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e5f2:	e108      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
 801e5f4:	2100      	movs	r1, #0
 801e5f6:	6878      	ldr	r0, [r7, #4]
 801e5f8:	f7e7 fc4e 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
 801e5fc:	2140      	movs	r1, #64	; 0x40
 801e5fe:	6878      	ldr	r0, [r7, #4]
 801e600:	f7e7 fc4a 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e604:	e0ff      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
 801e606:	2100      	movs	r1, #0
 801e608:	6878      	ldr	r0, [r7, #4]
 801e60a:	f7e7 fc45 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e60e:	e0fa      	b.n	801e806 <clear_styles+0x3ba>

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
 801e610:	2140      	movs	r1, #64	; 0x40
 801e612:	6878      	ldr	r0, [r7, #4]
 801e614:	f7e7 fc40 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
 801e618:	2141      	movs	r1, #65	; 0x41
 801e61a:	6878      	ldr	r0, [r7, #4]
 801e61c:	f7e7 fc3c 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e620:	e0f1      	b.n	801e806 <clear_styles+0x3ba>

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
 801e622:	2100      	movs	r1, #0
 801e624:	6878      	ldr	r0, [r7, #4]
 801e626:	f7e7 fc37 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e62a:	e0ec      	b.n	801e806 <clear_styles+0x3ba>
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
 801e62c:	2100      	movs	r1, #0
 801e62e:	6878      	ldr	r0, [r7, #4]
 801e630:	f7e7 fc32 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 801e634:	2140      	movs	r1, #64	; 0x40
 801e636:	6878      	ldr	r0, [r7, #4]
 801e638:	f7e7 fc2e 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
 801e63c:	2101      	movs	r1, #1
 801e63e:	6878      	ldr	r0, [r7, #4]
 801e640:	f7e7 fc2a 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e644:	e0df      	b.n	801e806 <clear_styles+0x3ba>
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
 801e646:	2100      	movs	r1, #0
 801e648:	6878      	ldr	r0, [r7, #4]
 801e64a:	f7e7 fc25 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
 801e64e:	2140      	movs	r1, #64	; 0x40
 801e650:	6878      	ldr	r0, [r7, #4]
 801e652:	f7e7 fc21 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
 801e656:	2141      	movs	r1, #65	; 0x41
 801e658:	6878      	ldr	r0, [r7, #4]
 801e65a:	f7e7 fc1d 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
 801e65e:	2143      	movs	r1, #67	; 0x43
 801e660:	6878      	ldr	r0, [r7, #4]
 801e662:	f7e7 fc19 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
 801e666:	2142      	movs	r1, #66	; 0x42
 801e668:	6878      	ldr	r0, [r7, #4]
 801e66a:	f7e7 fc15 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e66e:	e0ca      	b.n	801e806 <clear_styles+0x3ba>

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
 801e670:	2100      	movs	r1, #0
 801e672:	6878      	ldr	r0, [r7, #4]
 801e674:	f7e7 fc10 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 801e678:	2140      	movs	r1, #64	; 0x40
 801e67a:	6878      	ldr	r0, [r7, #4]
 801e67c:	f7e7 fc0c 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e680:	e0c1      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
 801e682:	2100      	movs	r1, #0
 801e684:	6878      	ldr	r0, [r7, #4]
 801e686:	f7e7 fc07 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
 801e68a:	2101      	movs	r1, #1
 801e68c:	6878      	ldr	r0, [r7, #4]
 801e68e:	f7e7 fc03 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
 801e692:	2102      	movs	r1, #2
 801e694:	6878      	ldr	r0, [r7, #4]
 801e696:	f7e7 fbff 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e69a:	e0b4      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
 801e69c:	2100      	movs	r1, #0
 801e69e:	6878      	ldr	r0, [r7, #4]
 801e6a0:	f7e7 fbfa 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
 801e6a4:	2103      	movs	r1, #3
 801e6a6:	6878      	ldr	r0, [r7, #4]
 801e6a8:	f7e7 fbf6 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e6ac:	e0ab      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
 801e6ae:	2100      	movs	r1, #0
 801e6b0:	6878      	ldr	r0, [r7, #4]
 801e6b2:	f7e7 fbf1 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e6b6:	e0a6      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
 801e6b8:	2100      	movs	r1, #0
 801e6ba:	6878      	ldr	r0, [r7, #4]
 801e6bc:	f7e7 fbec 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
 801e6c0:	2140      	movs	r1, #64	; 0x40
 801e6c2:	6878      	ldr	r0, [r7, #4]
 801e6c4:	f7e7 fbe8 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
 801e6c8:	2101      	movs	r1, #1
 801e6ca:	6878      	ldr	r0, [r7, #4]
 801e6cc:	f7e7 fbe4 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e6d0:	e099      	b.n	801e806 <clear_styles+0x3ba>

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e6d2:	2100      	movs	r1, #0
 801e6d4:	6878      	ldr	r0, [r7, #4]
 801e6d6:	f7e7 fbdf 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e6da:	e094      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
 801e6dc:	2100      	movs	r1, #0
 801e6de:	6878      	ldr	r0, [r7, #4]
 801e6e0:	f7e7 fbda 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
 801e6e4:	2140      	movs	r1, #64	; 0x40
 801e6e6:	6878      	ldr	r0, [r7, #4]
 801e6e8:	f7e7 fbd6 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 801e6ec:	2141      	movs	r1, #65	; 0x41
 801e6ee:	6878      	ldr	r0, [r7, #4]
 801e6f0:	f7e7 fbd2 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
 801e6f4:	2142      	movs	r1, #66	; 0x42
 801e6f6:	6878      	ldr	r0, [r7, #4]
 801e6f8:	f7e7 fbce 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e6fc:	e083      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
 801e6fe:	2100      	movs	r1, #0
 801e700:	6878      	ldr	r0, [r7, #4]
 801e702:	f7e7 fbc9 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
 801e706:	2101      	movs	r1, #1
 801e708:	6878      	ldr	r0, [r7, #4]
 801e70a:	f7e7 fbc5 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
 801e70e:	2102      	movs	r1, #2
 801e710:	6878      	ldr	r0, [r7, #4]
 801e712:	f7e7 fbc1 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e716:	e076      	b.n	801e806 <clear_styles+0x3ba>
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
 801e718:	2100      	movs	r1, #0
 801e71a:	6878      	ldr	r0, [r7, #4]
 801e71c:	f7e7 fbbc 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
 801e720:	2101      	movs	r1, #1
 801e722:	6878      	ldr	r0, [r7, #4]
 801e724:	f7e7 fbb8 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
 801e728:	2102      	movs	r1, #2
 801e72a:	6878      	ldr	r0, [r7, #4]
 801e72c:	f7e7 fbb4 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
 801e730:	2103      	movs	r1, #3
 801e732:	6878      	ldr	r0, [r7, #4]
 801e734:	f7e7 fbb0 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
 801e738:	2104      	movs	r1, #4
 801e73a:	6878      	ldr	r0, [r7, #4]
 801e73c:	f7e7 fbac 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e740:	e061      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
 801e742:	2100      	movs	r1, #0
 801e744:	6878      	ldr	r0, [r7, #4]
 801e746:	f7e7 fba7 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
 801e74a:	2142      	movs	r1, #66	; 0x42
 801e74c:	6878      	ldr	r0, [r7, #4]
 801e74e:	f7e7 fba3 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 801e752:	2141      	movs	r1, #65	; 0x41
 801e754:	6878      	ldr	r0, [r7, #4]
 801e756:	f7e7 fb9f 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
 801e75a:	2140      	movs	r1, #64	; 0x40
 801e75c:	6878      	ldr	r0, [r7, #4]
 801e75e:	f7e7 fb9b 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e762:	e050      	b.n	801e806 <clear_styles+0x3ba>

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e764:	2100      	movs	r1, #0
 801e766:	6878      	ldr	r0, [r7, #4]
 801e768:	f7e7 fb96 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e76c:	e04b      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
 801e76e:	2100      	movs	r1, #0
 801e770:	6878      	ldr	r0, [r7, #4]
 801e772:	f7e7 fb91 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
 801e776:	2104      	movs	r1, #4
 801e778:	6878      	ldr	r0, [r7, #4]
 801e77a:	f7e7 fb8d 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 801e77e:	2103      	movs	r1, #3
 801e780:	6878      	ldr	r0, [r7, #4]
 801e782:	f7e7 fb89 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
 801e786:	2101      	movs	r1, #1
 801e788:	6878      	ldr	r0, [r7, #4]
 801e78a:	f7e7 fb85 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e78e:	e03a      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
 801e790:	2100      	movs	r1, #0
 801e792:	6878      	ldr	r0, [r7, #4]
 801e794:	f7e7 fb80 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
 801e798:	2103      	movs	r1, #3
 801e79a:	6878      	ldr	r0, [r7, #4]
 801e79c:	f7e7 fb7c 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e7a0:	e031      	b.n	801e806 <clear_styles+0x3ba>

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e7a2:	2100      	movs	r1, #0
 801e7a4:	6878      	ldr	r0, [r7, #4]
 801e7a6:	f7e7 fb77 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e7aa:	e02c      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
 801e7ac:	2100      	movs	r1, #0
 801e7ae:	6878      	ldr	r0, [r7, #4]
 801e7b0:	f7e7 fb72 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
 801e7b4:	2103      	movs	r1, #3
 801e7b6:	6878      	ldr	r0, [r7, #4]
 801e7b8:	f7e7 fb6e 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
 801e7bc:	2101      	movs	r1, #1
 801e7be:	6878      	ldr	r0, [r7, #4]
 801e7c0:	f7e7 fb6a 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 801e7c4:	2102      	movs	r1, #2
 801e7c6:	6878      	ldr	r0, [r7, #4]
 801e7c8:	f7e7 fb66 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e7cc:	e01b      	b.n	801e806 <clear_styles+0x3ba>
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
 801e7ce:	2100      	movs	r1, #0
 801e7d0:	6878      	ldr	r0, [r7, #4]
 801e7d2:	f7e7 fb61 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
 801e7d6:	2101      	movs	r1, #1
 801e7d8:	6878      	ldr	r0, [r7, #4]
 801e7da:	f7e7 fb5d 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e7de:	e012      	b.n	801e806 <clear_styles+0x3ba>
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
 801e7e0:	2100      	movs	r1, #0
 801e7e2:	6878      	ldr	r0, [r7, #4]
 801e7e4:	f7e7 fb58 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e7e8:	e00d      	b.n	801e806 <clear_styles+0x3ba>
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
 801e7ea:	2100      	movs	r1, #0
 801e7ec:	6878      	ldr	r0, [r7, #4]
 801e7ee:	f7e7 fb53 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
 801e7f2:	2101      	movs	r1, #1
 801e7f4:	6878      	ldr	r0, [r7, #4]
 801e7f6:	f7e7 fb4f 	bl	8005e98 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
 801e7fa:	2102      	movs	r1, #2
 801e7fc:	6878      	ldr	r0, [r7, #4]
 801e7fe:	f7e7 fb4b 	bl	8005e98 <lv_obj_clean_style_list>
            break;
 801e802:	e000      	b.n	801e806 <clear_styles+0x3ba>
#endif
        default:
            break;
 801e804:	bf00      	nop
    }

}
 801e806:	bf00      	nop
 801e808:	3708      	adds	r7, #8
 801e80a:	46bd      	mov	sp, r7
 801e80c:	bd80      	pop	{r7, pc}
 801e80e:	bf00      	nop

0801e810 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801e810:	b480      	push	{r7}
 801e812:	b087      	sub	sp, #28
 801e814:	af00      	add	r7, sp, #0
 801e816:	60f8      	str	r0, [r7, #12]
 801e818:	60b9      	str	r1, [r7, #8]
 801e81a:	4613      	mov	r3, r2
 801e81c:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801e81e:	7bbb      	ldrb	r3, [r7, #14]
 801e820:	461a      	mov	r2, r3
 801e822:	79fb      	ldrb	r3, [r7, #7]
 801e824:	fb03 f202 	mul.w	r2, r3, r2
 801e828:	7abb      	ldrb	r3, [r7, #10]
 801e82a:	4619      	mov	r1, r3
 801e82c:	79fb      	ldrb	r3, [r7, #7]
 801e82e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e832:	fb03 f301 	mul.w	r3, r3, r1
 801e836:	4413      	add	r3, r2
 801e838:	461a      	mov	r2, r3
 801e83a:	4613      	mov	r3, r2
 801e83c:	021b      	lsls	r3, r3, #8
 801e83e:	4413      	add	r3, r2
 801e840:	01db      	lsls	r3, r3, #7
 801e842:	4413      	add	r3, r2
 801e844:	0ddb      	lsrs	r3, r3, #23
 801e846:	b2db      	uxtb	r3, r3
 801e848:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801e84a:	7b7b      	ldrb	r3, [r7, #13]
 801e84c:	461a      	mov	r2, r3
 801e84e:	79fb      	ldrb	r3, [r7, #7]
 801e850:	fb03 f202 	mul.w	r2, r3, r2
 801e854:	7a7b      	ldrb	r3, [r7, #9]
 801e856:	4619      	mov	r1, r3
 801e858:	79fb      	ldrb	r3, [r7, #7]
 801e85a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e85e:	fb03 f301 	mul.w	r3, r3, r1
 801e862:	4413      	add	r3, r2
 801e864:	461a      	mov	r2, r3
 801e866:	4613      	mov	r3, r2
 801e868:	021b      	lsls	r3, r3, #8
 801e86a:	4413      	add	r3, r2
 801e86c:	01db      	lsls	r3, r3, #7
 801e86e:	4413      	add	r3, r2
 801e870:	0ddb      	lsrs	r3, r3, #23
 801e872:	b2db      	uxtb	r3, r3
 801e874:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801e876:	7b3b      	ldrb	r3, [r7, #12]
 801e878:	461a      	mov	r2, r3
 801e87a:	79fb      	ldrb	r3, [r7, #7]
 801e87c:	fb03 f202 	mul.w	r2, r3, r2
 801e880:	7a3b      	ldrb	r3, [r7, #8]
 801e882:	4619      	mov	r1, r3
 801e884:	79fb      	ldrb	r3, [r7, #7]
 801e886:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e88a:	fb03 f301 	mul.w	r3, r3, r1
 801e88e:	4413      	add	r3, r2
 801e890:	461a      	mov	r2, r3
 801e892:	4613      	mov	r3, r2
 801e894:	021b      	lsls	r3, r3, #8
 801e896:	4413      	add	r3, r2
 801e898:	01db      	lsls	r3, r3, #7
 801e89a:	4413      	add	r3, r2
 801e89c:	0ddb      	lsrs	r3, r3, #23
 801e89e:	b2db      	uxtb	r3, r3
 801e8a0:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 801e8a2:	23ff      	movs	r3, #255	; 0xff
 801e8a4:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801e8a6:	697b      	ldr	r3, [r7, #20]
}
 801e8a8:	4618      	mov	r0, r3
 801e8aa:	371c      	adds	r7, #28
 801e8ac:	46bd      	mov	sp, r7
 801e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8b2:	4770      	bx	lr

0801e8b4 <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801e8b4:	b490      	push	{r4, r7}
 801e8b6:	b082      	sub	sp, #8
 801e8b8:	af00      	add	r7, sp, #0
 801e8ba:	4604      	mov	r4, r0
 801e8bc:	4608      	mov	r0, r1
 801e8be:	4611      	mov	r1, r2
 801e8c0:	4622      	mov	r2, r4
 801e8c2:	71fa      	strb	r2, [r7, #7]
 801e8c4:	4602      	mov	r2, r0
 801e8c6:	71ba      	strb	r2, [r7, #6]
 801e8c8:	460a      	mov	r2, r1
 801e8ca:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 801e8cc:	797a      	ldrb	r2, [r7, #5]
 801e8ce:	f362 0307 	bfi	r3, r2, #0, #8
 801e8d2:	79ba      	ldrb	r2, [r7, #6]
 801e8d4:	f362 230f 	bfi	r3, r2, #8, #8
 801e8d8:	79fa      	ldrb	r2, [r7, #7]
 801e8da:	f362 4317 	bfi	r3, r2, #16, #8
 801e8de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 801e8e2:	4618      	mov	r0, r3
 801e8e4:	3708      	adds	r7, #8
 801e8e6:	46bd      	mov	sp, r7
 801e8e8:	bc90      	pop	{r4, r7}
 801e8ea:	4770      	bx	lr

0801e8ec <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 801e8ec:	b580      	push	{r7, lr}
 801e8ee:	b082      	sub	sp, #8
 801e8f0:	af00      	add	r7, sp, #0
 801e8f2:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	0c1b      	lsrs	r3, r3, #16
 801e8f8:	b2d8      	uxtb	r0, r3
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	0a1b      	lsrs	r3, r3, #8
 801e8fe:	b2db      	uxtb	r3, r3
 801e900:	687a      	ldr	r2, [r7, #4]
 801e902:	b2d2      	uxtb	r2, r2
 801e904:	4619      	mov	r1, r3
 801e906:	f7ff ffd5 	bl	801e8b4 <lv_color_make>
 801e90a:	4603      	mov	r3, r0
}
 801e90c:	4618      	mov	r0, r3
 801e90e:	3708      	adds	r7, #8
 801e910:	46bd      	mov	sp, r7
 801e912:	bd80      	pop	{r7, pc}

0801e914 <lv_color_hex3>:

static inline lv_color_t lv_color_hex3(uint32_t c)
{
 801e914:	b580      	push	{r7, lr}
 801e916:	b082      	sub	sp, #8
 801e918:	af00      	add	r7, sp, #0
 801e91a:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	091b      	lsrs	r3, r3, #4
 801e920:	b2db      	uxtb	r3, r3
 801e922:	f023 030f 	bic.w	r3, r3, #15
 801e926:	b2da      	uxtb	r2, r3
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	0a1b      	lsrs	r3, r3, #8
 801e92c:	b2db      	uxtb	r3, r3
 801e92e:	f003 030f 	and.w	r3, r3, #15
 801e932:	b2db      	uxtb	r3, r3
 801e934:	4313      	orrs	r3, r2
 801e936:	b2d8      	uxtb	r0, r3
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	b2db      	uxtb	r3, r3
 801e93c:	f023 030f 	bic.w	r3, r3, #15
 801e940:	b2da      	uxtb	r2, r3
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	091b      	lsrs	r3, r3, #4
 801e946:	b2db      	uxtb	r3, r3
 801e948:	f003 030f 	and.w	r3, r3, #15
 801e94c:	b2db      	uxtb	r3, r3
 801e94e:	4313      	orrs	r3, r2
 801e950:	b2d9      	uxtb	r1, r3
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	b2db      	uxtb	r3, r3
 801e956:	f003 030f 	and.w	r3, r3, #15
 801e95a:	b2da      	uxtb	r2, r3
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	b2db      	uxtb	r3, r3
 801e960:	011b      	lsls	r3, r3, #4
 801e962:	b2db      	uxtb	r3, r3
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 801e964:	4313      	orrs	r3, r2
 801e966:	b2db      	uxtb	r3, r3
 801e968:	461a      	mov	r2, r3
 801e96a:	f7ff ffa3 	bl	801e8b4 <lv_color_make>
 801e96e:	4603      	mov	r3, r0
}
 801e970:	4618      	mov	r0, r3
 801e972:	3708      	adds	r7, #8
 801e974:	46bd      	mov	sp, r7
 801e976:	bd80      	pop	{r7, pc}

0801e978 <lv_style_set_radius>:
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 801e978:	b580      	push	{r7, lr}
 801e97a:	b082      	sub	sp, #8
 801e97c:	af00      	add	r7, sp, #0
 801e97e:	6078      	str	r0, [r7, #4]
 801e980:	460b      	mov	r3, r1
 801e982:	70fb      	strb	r3, [r7, #3]
 801e984:	4613      	mov	r3, r2
 801e986:	803b      	strh	r3, [r7, #0]
 801e988:	78fb      	ldrb	r3, [r7, #3]
 801e98a:	021b      	lsls	r3, r3, #8
 801e98c:	b21b      	sxth	r3, r3
 801e98e:	f043 0301 	orr.w	r3, r3, #1
 801e992:	b21b      	sxth	r3, r3
 801e994:	b29b      	uxth	r3, r3
 801e996:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e99a:	4619      	mov	r1, r3
 801e99c:	6878      	ldr	r0, [r7, #4]
 801e99e:	f7ec fec1 	bl	800b724 <_lv_style_set_int>
 801e9a2:	bf00      	nop
 801e9a4:	3708      	adds	r7, #8
 801e9a6:	46bd      	mov	sp, r7
 801e9a8:	bd80      	pop	{r7, pc}

0801e9aa <lv_style_set_clip_corner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 801e9aa:	b580      	push	{r7, lr}
 801e9ac:	b082      	sub	sp, #8
 801e9ae:	af00      	add	r7, sp, #0
 801e9b0:	6078      	str	r0, [r7, #4]
 801e9b2:	460b      	mov	r3, r1
 801e9b4:	70fb      	strb	r3, [r7, #3]
 801e9b6:	4613      	mov	r3, r2
 801e9b8:	70bb      	strb	r3, [r7, #2]
 801e9ba:	78fb      	ldrb	r3, [r7, #3]
 801e9bc:	021b      	lsls	r3, r3, #8
 801e9be:	b21b      	sxth	r3, r3
 801e9c0:	f043 0302 	orr.w	r3, r3, #2
 801e9c4:	b21b      	sxth	r3, r3
 801e9c6:	b29b      	uxth	r3, r3
 801e9c8:	78ba      	ldrb	r2, [r7, #2]
 801e9ca:	b212      	sxth	r2, r2
 801e9cc:	4619      	mov	r1, r3
 801e9ce:	6878      	ldr	r0, [r7, #4]
 801e9d0:	f7ec fea8 	bl	800b724 <_lv_style_set_int>
 801e9d4:	bf00      	nop
 801e9d6:	3708      	adds	r7, #8
 801e9d8:	46bd      	mov	sp, r7
 801e9da:	bd80      	pop	{r7, pc}

0801e9dc <lv_style_set_size>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 801e9dc:	b580      	push	{r7, lr}
 801e9de:	b082      	sub	sp, #8
 801e9e0:	af00      	add	r7, sp, #0
 801e9e2:	6078      	str	r0, [r7, #4]
 801e9e4:	460b      	mov	r3, r1
 801e9e6:	70fb      	strb	r3, [r7, #3]
 801e9e8:	4613      	mov	r3, r2
 801e9ea:	803b      	strh	r3, [r7, #0]
 801e9ec:	78fb      	ldrb	r3, [r7, #3]
 801e9ee:	021b      	lsls	r3, r3, #8
 801e9f0:	b21b      	sxth	r3, r3
 801e9f2:	f043 0303 	orr.w	r3, r3, #3
 801e9f6:	b21b      	sxth	r3, r3
 801e9f8:	b29b      	uxth	r3, r3
 801e9fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e9fe:	4619      	mov	r1, r3
 801ea00:	6878      	ldr	r0, [r7, #4]
 801ea02:	f7ec fe8f 	bl	800b724 <_lv_style_set_int>
 801ea06:	bf00      	nop
 801ea08:	3708      	adds	r7, #8
 801ea0a:	46bd      	mov	sp, r7
 801ea0c:	bd80      	pop	{r7, pc}

0801ea0e <lv_style_set_transform_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 801ea0e:	b580      	push	{r7, lr}
 801ea10:	b082      	sub	sp, #8
 801ea12:	af00      	add	r7, sp, #0
 801ea14:	6078      	str	r0, [r7, #4]
 801ea16:	460b      	mov	r3, r1
 801ea18:	70fb      	strb	r3, [r7, #3]
 801ea1a:	4613      	mov	r3, r2
 801ea1c:	803b      	strh	r3, [r7, #0]
 801ea1e:	78fb      	ldrb	r3, [r7, #3]
 801ea20:	021b      	lsls	r3, r3, #8
 801ea22:	b21b      	sxth	r3, r3
 801ea24:	f043 0304 	orr.w	r3, r3, #4
 801ea28:	b21b      	sxth	r3, r3
 801ea2a:	b29b      	uxth	r3, r3
 801ea2c:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ea30:	4619      	mov	r1, r3
 801ea32:	6878      	ldr	r0, [r7, #4]
 801ea34:	f7ec fe76 	bl	800b724 <_lv_style_set_int>
 801ea38:	bf00      	nop
 801ea3a:	3708      	adds	r7, #8
 801ea3c:	46bd      	mov	sp, r7
 801ea3e:	bd80      	pop	{r7, pc}

0801ea40 <lv_style_set_pad_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801ea40:	b580      	push	{r7, lr}
 801ea42:	b082      	sub	sp, #8
 801ea44:	af00      	add	r7, sp, #0
 801ea46:	6078      	str	r0, [r7, #4]
 801ea48:	460b      	mov	r3, r1
 801ea4a:	70fb      	strb	r3, [r7, #3]
 801ea4c:	4613      	mov	r3, r2
 801ea4e:	803b      	strh	r3, [r7, #0]
 801ea50:	78fb      	ldrb	r3, [r7, #3]
 801ea52:	021b      	lsls	r3, r3, #8
 801ea54:	b21b      	sxth	r3, r3
 801ea56:	f043 0310 	orr.w	r3, r3, #16
 801ea5a:	b21b      	sxth	r3, r3
 801ea5c:	b29b      	uxth	r3, r3
 801ea5e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ea62:	4619      	mov	r1, r3
 801ea64:	6878      	ldr	r0, [r7, #4]
 801ea66:	f7ec fe5d 	bl	800b724 <_lv_style_set_int>
 801ea6a:	bf00      	nop
 801ea6c:	3708      	adds	r7, #8
 801ea6e:	46bd      	mov	sp, r7
 801ea70:	bd80      	pop	{r7, pc}

0801ea72 <lv_style_set_pad_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801ea72:	b580      	push	{r7, lr}
 801ea74:	b082      	sub	sp, #8
 801ea76:	af00      	add	r7, sp, #0
 801ea78:	6078      	str	r0, [r7, #4]
 801ea7a:	460b      	mov	r3, r1
 801ea7c:	70fb      	strb	r3, [r7, #3]
 801ea7e:	4613      	mov	r3, r2
 801ea80:	803b      	strh	r3, [r7, #0]
 801ea82:	78fb      	ldrb	r3, [r7, #3]
 801ea84:	021b      	lsls	r3, r3, #8
 801ea86:	b21b      	sxth	r3, r3
 801ea88:	f043 0311 	orr.w	r3, r3, #17
 801ea8c:	b21b      	sxth	r3, r3
 801ea8e:	b29b      	uxth	r3, r3
 801ea90:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ea94:	4619      	mov	r1, r3
 801ea96:	6878      	ldr	r0, [r7, #4]
 801ea98:	f7ec fe44 	bl	800b724 <_lv_style_set_int>
 801ea9c:	bf00      	nop
 801ea9e:	3708      	adds	r7, #8
 801eaa0:	46bd      	mov	sp, r7
 801eaa2:	bd80      	pop	{r7, pc}

0801eaa4 <lv_style_set_pad_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801eaa4:	b580      	push	{r7, lr}
 801eaa6:	b082      	sub	sp, #8
 801eaa8:	af00      	add	r7, sp, #0
 801eaaa:	6078      	str	r0, [r7, #4]
 801eaac:	460b      	mov	r3, r1
 801eaae:	70fb      	strb	r3, [r7, #3]
 801eab0:	4613      	mov	r3, r2
 801eab2:	803b      	strh	r3, [r7, #0]
 801eab4:	78fb      	ldrb	r3, [r7, #3]
 801eab6:	021b      	lsls	r3, r3, #8
 801eab8:	b21b      	sxth	r3, r3
 801eaba:	f043 0312 	orr.w	r3, r3, #18
 801eabe:	b21b      	sxth	r3, r3
 801eac0:	b29b      	uxth	r3, r3
 801eac2:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eac6:	4619      	mov	r1, r3
 801eac8:	6878      	ldr	r0, [r7, #4]
 801eaca:	f7ec fe2b 	bl	800b724 <_lv_style_set_int>
 801eace:	bf00      	nop
 801ead0:	3708      	adds	r7, #8
 801ead2:	46bd      	mov	sp, r7
 801ead4:	bd80      	pop	{r7, pc}

0801ead6 <lv_style_set_pad_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801ead6:	b580      	push	{r7, lr}
 801ead8:	b082      	sub	sp, #8
 801eada:	af00      	add	r7, sp, #0
 801eadc:	6078      	str	r0, [r7, #4]
 801eade:	460b      	mov	r3, r1
 801eae0:	70fb      	strb	r3, [r7, #3]
 801eae2:	4613      	mov	r3, r2
 801eae4:	803b      	strh	r3, [r7, #0]
 801eae6:	78fb      	ldrb	r3, [r7, #3]
 801eae8:	021b      	lsls	r3, r3, #8
 801eaea:	b21b      	sxth	r3, r3
 801eaec:	f043 0313 	orr.w	r3, r3, #19
 801eaf0:	b21b      	sxth	r3, r3
 801eaf2:	b29b      	uxth	r3, r3
 801eaf4:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eaf8:	4619      	mov	r1, r3
 801eafa:	6878      	ldr	r0, [r7, #4]
 801eafc:	f7ec fe12 	bl	800b724 <_lv_style_set_int>
 801eb00:	bf00      	nop
 801eb02:	3708      	adds	r7, #8
 801eb04:	46bd      	mov	sp, r7
 801eb06:	bd80      	pop	{r7, pc}

0801eb08 <lv_style_set_pad_inner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801eb08:	b580      	push	{r7, lr}
 801eb0a:	b082      	sub	sp, #8
 801eb0c:	af00      	add	r7, sp, #0
 801eb0e:	6078      	str	r0, [r7, #4]
 801eb10:	460b      	mov	r3, r1
 801eb12:	70fb      	strb	r3, [r7, #3]
 801eb14:	4613      	mov	r3, r2
 801eb16:	803b      	strh	r3, [r7, #0]
 801eb18:	78fb      	ldrb	r3, [r7, #3]
 801eb1a:	021b      	lsls	r3, r3, #8
 801eb1c:	b21b      	sxth	r3, r3
 801eb1e:	f043 0314 	orr.w	r3, r3, #20
 801eb22:	b21b      	sxth	r3, r3
 801eb24:	b29b      	uxth	r3, r3
 801eb26:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eb2a:	4619      	mov	r1, r3
 801eb2c:	6878      	ldr	r0, [r7, #4]
 801eb2e:	f7ec fdf9 	bl	800b724 <_lv_style_set_int>
 801eb32:	bf00      	nop
 801eb34:	3708      	adds	r7, #8
 801eb36:	46bd      	mov	sp, r7
 801eb38:	bd80      	pop	{r7, pc}

0801eb3a <lv_style_set_margin_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801eb3a:	b580      	push	{r7, lr}
 801eb3c:	b082      	sub	sp, #8
 801eb3e:	af00      	add	r7, sp, #0
 801eb40:	6078      	str	r0, [r7, #4]
 801eb42:	460b      	mov	r3, r1
 801eb44:	70fb      	strb	r3, [r7, #3]
 801eb46:	4613      	mov	r3, r2
 801eb48:	803b      	strh	r3, [r7, #0]
 801eb4a:	78fb      	ldrb	r3, [r7, #3]
 801eb4c:	021b      	lsls	r3, r3, #8
 801eb4e:	b21b      	sxth	r3, r3
 801eb50:	f043 0315 	orr.w	r3, r3, #21
 801eb54:	b21b      	sxth	r3, r3
 801eb56:	b29b      	uxth	r3, r3
 801eb58:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eb5c:	4619      	mov	r1, r3
 801eb5e:	6878      	ldr	r0, [r7, #4]
 801eb60:	f7ec fde0 	bl	800b724 <_lv_style_set_int>
 801eb64:	bf00      	nop
 801eb66:	3708      	adds	r7, #8
 801eb68:	46bd      	mov	sp, r7
 801eb6a:	bd80      	pop	{r7, pc}

0801eb6c <lv_style_set_margin_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801eb6c:	b580      	push	{r7, lr}
 801eb6e:	b082      	sub	sp, #8
 801eb70:	af00      	add	r7, sp, #0
 801eb72:	6078      	str	r0, [r7, #4]
 801eb74:	460b      	mov	r3, r1
 801eb76:	70fb      	strb	r3, [r7, #3]
 801eb78:	4613      	mov	r3, r2
 801eb7a:	803b      	strh	r3, [r7, #0]
 801eb7c:	78fb      	ldrb	r3, [r7, #3]
 801eb7e:	021b      	lsls	r3, r3, #8
 801eb80:	b21b      	sxth	r3, r3
 801eb82:	f043 0316 	orr.w	r3, r3, #22
 801eb86:	b21b      	sxth	r3, r3
 801eb88:	b29b      	uxth	r3, r3
 801eb8a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eb8e:	4619      	mov	r1, r3
 801eb90:	6878      	ldr	r0, [r7, #4]
 801eb92:	f7ec fdc7 	bl	800b724 <_lv_style_set_int>
 801eb96:	bf00      	nop
 801eb98:	3708      	adds	r7, #8
 801eb9a:	46bd      	mov	sp, r7
 801eb9c:	bd80      	pop	{r7, pc}

0801eb9e <lv_style_set_margin_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 801eb9e:	b580      	push	{r7, lr}
 801eba0:	b082      	sub	sp, #8
 801eba2:	af00      	add	r7, sp, #0
 801eba4:	6078      	str	r0, [r7, #4]
 801eba6:	460b      	mov	r3, r1
 801eba8:	70fb      	strb	r3, [r7, #3]
 801ebaa:	4613      	mov	r3, r2
 801ebac:	803b      	strh	r3, [r7, #0]
 801ebae:	78fb      	ldrb	r3, [r7, #3]
 801ebb0:	021b      	lsls	r3, r3, #8
 801ebb2:	b21b      	sxth	r3, r3
 801ebb4:	f043 0317 	orr.w	r3, r3, #23
 801ebb8:	b21b      	sxth	r3, r3
 801ebba:	b29b      	uxth	r3, r3
 801ebbc:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ebc0:	4619      	mov	r1, r3
 801ebc2:	6878      	ldr	r0, [r7, #4]
 801ebc4:	f7ec fdae 	bl	800b724 <_lv_style_set_int>
 801ebc8:	bf00      	nop
 801ebca:	3708      	adds	r7, #8
 801ebcc:	46bd      	mov	sp, r7
 801ebce:	bd80      	pop	{r7, pc}

0801ebd0 <lv_style_set_margin_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 801ebd0:	b580      	push	{r7, lr}
 801ebd2:	b082      	sub	sp, #8
 801ebd4:	af00      	add	r7, sp, #0
 801ebd6:	6078      	str	r0, [r7, #4]
 801ebd8:	460b      	mov	r3, r1
 801ebda:	70fb      	strb	r3, [r7, #3]
 801ebdc:	4613      	mov	r3, r2
 801ebde:	803b      	strh	r3, [r7, #0]
 801ebe0:	78fb      	ldrb	r3, [r7, #3]
 801ebe2:	021b      	lsls	r3, r3, #8
 801ebe4:	b21b      	sxth	r3, r3
 801ebe6:	f043 0318 	orr.w	r3, r3, #24
 801ebea:	b21b      	sxth	r3, r3
 801ebec:	b29b      	uxth	r3, r3
 801ebee:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ebf2:	4619      	mov	r1, r3
 801ebf4:	6878      	ldr	r0, [r7, #4]
 801ebf6:	f7ec fd95 	bl	800b724 <_lv_style_set_int>
 801ebfa:	bf00      	nop
 801ebfc:	3708      	adds	r7, #8
 801ebfe:	46bd      	mov	sp, r7
 801ec00:	bd80      	pop	{r7, pc}

0801ec02 <lv_style_set_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 801ec02:	b580      	push	{r7, lr}
 801ec04:	b084      	sub	sp, #16
 801ec06:	af00      	add	r7, sp, #0
 801ec08:	60f8      	str	r0, [r7, #12]
 801ec0a:	460b      	mov	r3, r1
 801ec0c:	607a      	str	r2, [r7, #4]
 801ec0e:	72fb      	strb	r3, [r7, #11]
 801ec10:	7afb      	ldrb	r3, [r7, #11]
 801ec12:	021b      	lsls	r3, r3, #8
 801ec14:	b21b      	sxth	r3, r3
 801ec16:	f043 0329 	orr.w	r3, r3, #41	; 0x29
 801ec1a:	b21b      	sxth	r3, r3
 801ec1c:	b29b      	uxth	r3, r3
 801ec1e:	687a      	ldr	r2, [r7, #4]
 801ec20:	4619      	mov	r1, r3
 801ec22:	68f8      	ldr	r0, [r7, #12]
 801ec24:	f7ec fe0c 	bl	800b840 <_lv_style_set_color>
 801ec28:	bf00      	nop
 801ec2a:	3710      	adds	r7, #16
 801ec2c:	46bd      	mov	sp, r7
 801ec2e:	bd80      	pop	{r7, pc}

0801ec30 <lv_style_set_bg_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 801ec30:	b580      	push	{r7, lr}
 801ec32:	b082      	sub	sp, #8
 801ec34:	af00      	add	r7, sp, #0
 801ec36:	6078      	str	r0, [r7, #4]
 801ec38:	460b      	mov	r3, r1
 801ec3a:	70fb      	strb	r3, [r7, #3]
 801ec3c:	4613      	mov	r3, r2
 801ec3e:	70bb      	strb	r3, [r7, #2]
 801ec40:	78fb      	ldrb	r3, [r7, #3]
 801ec42:	021b      	lsls	r3, r3, #8
 801ec44:	b21b      	sxth	r3, r3
 801ec46:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 801ec4a:	b21b      	sxth	r3, r3
 801ec4c:	b29b      	uxth	r3, r3
 801ec4e:	78ba      	ldrb	r2, [r7, #2]
 801ec50:	4619      	mov	r1, r3
 801ec52:	6878      	ldr	r0, [r7, #4]
 801ec54:	f7ec fe82 	bl	800b95c <_lv_style_set_opa>
 801ec58:	bf00      	nop
 801ec5a:	3708      	adds	r7, #8
 801ec5c:	46bd      	mov	sp, r7
 801ec5e:	bd80      	pop	{r7, pc}

0801ec60 <lv_style_set_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 801ec60:	b580      	push	{r7, lr}
 801ec62:	b082      	sub	sp, #8
 801ec64:	af00      	add	r7, sp, #0
 801ec66:	6078      	str	r0, [r7, #4]
 801ec68:	460b      	mov	r3, r1
 801ec6a:	70fb      	strb	r3, [r7, #3]
 801ec6c:	4613      	mov	r3, r2
 801ec6e:	803b      	strh	r3, [r7, #0]
 801ec70:	78fb      	ldrb	r3, [r7, #3]
 801ec72:	021b      	lsls	r3, r3, #8
 801ec74:	b21b      	sxth	r3, r3
 801ec76:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801ec7a:	b21b      	sxth	r3, r3
 801ec7c:	b29b      	uxth	r3, r3
 801ec7e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ec82:	4619      	mov	r1, r3
 801ec84:	6878      	ldr	r0, [r7, #4]
 801ec86:	f7ec fd4d 	bl	800b724 <_lv_style_set_int>
 801ec8a:	bf00      	nop
 801ec8c:	3708      	adds	r7, #8
 801ec8e:	46bd      	mov	sp, r7
 801ec90:	bd80      	pop	{r7, pc}

0801ec92 <lv_style_set_border_side>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 801ec92:	b580      	push	{r7, lr}
 801ec94:	b082      	sub	sp, #8
 801ec96:	af00      	add	r7, sp, #0
 801ec98:	6078      	str	r0, [r7, #4]
 801ec9a:	460b      	mov	r3, r1
 801ec9c:	70fb      	strb	r3, [r7, #3]
 801ec9e:	4613      	mov	r3, r2
 801eca0:	70bb      	strb	r3, [r7, #2]
 801eca2:	78fb      	ldrb	r3, [r7, #3]
 801eca4:	021b      	lsls	r3, r3, #8
 801eca6:	b21b      	sxth	r3, r3
 801eca8:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 801ecac:	b21b      	sxth	r3, r3
 801ecae:	b29b      	uxth	r3, r3
 801ecb0:	78ba      	ldrb	r2, [r7, #2]
 801ecb2:	b212      	sxth	r2, r2
 801ecb4:	4619      	mov	r1, r3
 801ecb6:	6878      	ldr	r0, [r7, #4]
 801ecb8:	f7ec fd34 	bl	800b724 <_lv_style_set_int>
 801ecbc:	bf00      	nop
 801ecbe:	3708      	adds	r7, #8
 801ecc0:	46bd      	mov	sp, r7
 801ecc2:	bd80      	pop	{r7, pc}

0801ecc4 <lv_style_set_border_post>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 801ecc4:	b580      	push	{r7, lr}
 801ecc6:	b082      	sub	sp, #8
 801ecc8:	af00      	add	r7, sp, #0
 801ecca:	6078      	str	r0, [r7, #4]
 801eccc:	460b      	mov	r3, r1
 801ecce:	70fb      	strb	r3, [r7, #3]
 801ecd0:	4613      	mov	r3, r2
 801ecd2:	70bb      	strb	r3, [r7, #2]
 801ecd4:	78fb      	ldrb	r3, [r7, #3]
 801ecd6:	021b      	lsls	r3, r3, #8
 801ecd8:	b21b      	sxth	r3, r3
 801ecda:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 801ecde:	b21b      	sxth	r3, r3
 801ece0:	b29b      	uxth	r3, r3
 801ece2:	78ba      	ldrb	r2, [r7, #2]
 801ece4:	b212      	sxth	r2, r2
 801ece6:	4619      	mov	r1, r3
 801ece8:	6878      	ldr	r0, [r7, #4]
 801ecea:	f7ec fd1b 	bl	800b724 <_lv_style_set_int>
 801ecee:	bf00      	nop
 801ecf0:	3708      	adds	r7, #8
 801ecf2:	46bd      	mov	sp, r7
 801ecf4:	bd80      	pop	{r7, pc}

0801ecf6 <lv_style_set_border_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 801ecf6:	b580      	push	{r7, lr}
 801ecf8:	b084      	sub	sp, #16
 801ecfa:	af00      	add	r7, sp, #0
 801ecfc:	60f8      	str	r0, [r7, #12]
 801ecfe:	460b      	mov	r3, r1
 801ed00:	607a      	str	r2, [r7, #4]
 801ed02:	72fb      	strb	r3, [r7, #11]
 801ed04:	7afb      	ldrb	r3, [r7, #11]
 801ed06:	021b      	lsls	r3, r3, #8
 801ed08:	b21b      	sxth	r3, r3
 801ed0a:	f043 0339 	orr.w	r3, r3, #57	; 0x39
 801ed0e:	b21b      	sxth	r3, r3
 801ed10:	b29b      	uxth	r3, r3
 801ed12:	687a      	ldr	r2, [r7, #4]
 801ed14:	4619      	mov	r1, r3
 801ed16:	68f8      	ldr	r0, [r7, #12]
 801ed18:	f7ec fd92 	bl	800b840 <_lv_style_set_color>
 801ed1c:	bf00      	nop
 801ed1e:	3710      	adds	r7, #16
 801ed20:	46bd      	mov	sp, r7
 801ed22:	bd80      	pop	{r7, pc}

0801ed24 <lv_style_set_border_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
 801ed24:	b580      	push	{r7, lr}
 801ed26:	b082      	sub	sp, #8
 801ed28:	af00      	add	r7, sp, #0
 801ed2a:	6078      	str	r0, [r7, #4]
 801ed2c:	460b      	mov	r3, r1
 801ed2e:	70fb      	strb	r3, [r7, #3]
 801ed30:	4613      	mov	r3, r2
 801ed32:	70bb      	strb	r3, [r7, #2]
 801ed34:	78fb      	ldrb	r3, [r7, #3]
 801ed36:	021b      	lsls	r3, r3, #8
 801ed38:	b21b      	sxth	r3, r3
 801ed3a:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 801ed3e:	b21b      	sxth	r3, r3
 801ed40:	b29b      	uxth	r3, r3
 801ed42:	78ba      	ldrb	r2, [r7, #2]
 801ed44:	4619      	mov	r1, r3
 801ed46:	6878      	ldr	r0, [r7, #4]
 801ed48:	f7ec fe08 	bl	800b95c <_lv_style_set_opa>
 801ed4c:	bf00      	nop
 801ed4e:	3708      	adds	r7, #8
 801ed50:	46bd      	mov	sp, r7
 801ed52:	bd80      	pop	{r7, pc}

0801ed54 <lv_style_set_outline_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 801ed54:	b580      	push	{r7, lr}
 801ed56:	b082      	sub	sp, #8
 801ed58:	af00      	add	r7, sp, #0
 801ed5a:	6078      	str	r0, [r7, #4]
 801ed5c:	460b      	mov	r3, r1
 801ed5e:	70fb      	strb	r3, [r7, #3]
 801ed60:	4613      	mov	r3, r2
 801ed62:	803b      	strh	r3, [r7, #0]
 801ed64:	78fb      	ldrb	r3, [r7, #3]
 801ed66:	021b      	lsls	r3, r3, #8
 801ed68:	b21b      	sxth	r3, r3
 801ed6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed6e:	b21b      	sxth	r3, r3
 801ed70:	b29b      	uxth	r3, r3
 801ed72:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ed76:	4619      	mov	r1, r3
 801ed78:	6878      	ldr	r0, [r7, #4]
 801ed7a:	f7ec fcd3 	bl	800b724 <_lv_style_set_int>
 801ed7e:	bf00      	nop
 801ed80:	3708      	adds	r7, #8
 801ed82:	46bd      	mov	sp, r7
 801ed84:	bd80      	pop	{r7, pc}

0801ed86 <lv_style_set_outline_pad>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 801ed86:	b580      	push	{r7, lr}
 801ed88:	b082      	sub	sp, #8
 801ed8a:	af00      	add	r7, sp, #0
 801ed8c:	6078      	str	r0, [r7, #4]
 801ed8e:	460b      	mov	r3, r1
 801ed90:	70fb      	strb	r3, [r7, #3]
 801ed92:	4613      	mov	r3, r2
 801ed94:	803b      	strh	r3, [r7, #0]
 801ed96:	78fb      	ldrb	r3, [r7, #3]
 801ed98:	021b      	lsls	r3, r3, #8
 801ed9a:	b21b      	sxth	r3, r3
 801ed9c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 801eda0:	b21b      	sxth	r3, r3
 801eda2:	b29b      	uxth	r3, r3
 801eda4:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eda8:	4619      	mov	r1, r3
 801edaa:	6878      	ldr	r0, [r7, #4]
 801edac:	f7ec fcba 	bl	800b724 <_lv_style_set_int>
 801edb0:	bf00      	nop
 801edb2:	3708      	adds	r7, #8
 801edb4:	46bd      	mov	sp, r7
 801edb6:	bd80      	pop	{r7, pc}

0801edb8 <lv_style_set_outline_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 801edb8:	b580      	push	{r7, lr}
 801edba:	b084      	sub	sp, #16
 801edbc:	af00      	add	r7, sp, #0
 801edbe:	60f8      	str	r0, [r7, #12]
 801edc0:	460b      	mov	r3, r1
 801edc2:	607a      	str	r2, [r7, #4]
 801edc4:	72fb      	strb	r3, [r7, #11]
 801edc6:	7afb      	ldrb	r3, [r7, #11]
 801edc8:	021b      	lsls	r3, r3, #8
 801edca:	b21b      	sxth	r3, r3
 801edcc:	f043 0349 	orr.w	r3, r3, #73	; 0x49
 801edd0:	b21b      	sxth	r3, r3
 801edd2:	b29b      	uxth	r3, r3
 801edd4:	687a      	ldr	r2, [r7, #4]
 801edd6:	4619      	mov	r1, r3
 801edd8:	68f8      	ldr	r0, [r7, #12]
 801edda:	f7ec fd31 	bl	800b840 <_lv_style_set_color>
 801edde:	bf00      	nop
 801ede0:	3710      	adds	r7, #16
 801ede2:	46bd      	mov	sp, r7
 801ede4:	bd80      	pop	{r7, pc}

0801ede6 <lv_style_set_outline_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 801ede6:	b580      	push	{r7, lr}
 801ede8:	b082      	sub	sp, #8
 801edea:	af00      	add	r7, sp, #0
 801edec:	6078      	str	r0, [r7, #4]
 801edee:	460b      	mov	r3, r1
 801edf0:	70fb      	strb	r3, [r7, #3]
 801edf2:	4613      	mov	r3, r2
 801edf4:	70bb      	strb	r3, [r7, #2]
 801edf6:	78fb      	ldrb	r3, [r7, #3]
 801edf8:	021b      	lsls	r3, r3, #8
 801edfa:	b21b      	sxth	r3, r3
 801edfc:	f043 034c 	orr.w	r3, r3, #76	; 0x4c
 801ee00:	b21b      	sxth	r3, r3
 801ee02:	b29b      	uxth	r3, r3
 801ee04:	78ba      	ldrb	r2, [r7, #2]
 801ee06:	4619      	mov	r1, r3
 801ee08:	6878      	ldr	r0, [r7, #4]
 801ee0a:	f7ec fda7 	bl	800b95c <_lv_style_set_opa>
 801ee0e:	bf00      	nop
 801ee10:	3708      	adds	r7, #8
 801ee12:	46bd      	mov	sp, r7
 801ee14:	bd80      	pop	{r7, pc}

0801ee16 <lv_style_set_shadow_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 801ee16:	b580      	push	{r7, lr}
 801ee18:	b082      	sub	sp, #8
 801ee1a:	af00      	add	r7, sp, #0
 801ee1c:	6078      	str	r0, [r7, #4]
 801ee1e:	460b      	mov	r3, r1
 801ee20:	70fb      	strb	r3, [r7, #3]
 801ee22:	4613      	mov	r3, r2
 801ee24:	803b      	strh	r3, [r7, #0]
 801ee26:	78fb      	ldrb	r3, [r7, #3]
 801ee28:	021b      	lsls	r3, r3, #8
 801ee2a:	b21b      	sxth	r3, r3
 801ee2c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801ee30:	b21b      	sxth	r3, r3
 801ee32:	b29b      	uxth	r3, r3
 801ee34:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ee38:	4619      	mov	r1, r3
 801ee3a:	6878      	ldr	r0, [r7, #4]
 801ee3c:	f7ec fc72 	bl	800b724 <_lv_style_set_int>
 801ee40:	bf00      	nop
 801ee42:	3708      	adds	r7, #8
 801ee44:	46bd      	mov	sp, r7
 801ee46:	bd80      	pop	{r7, pc}

0801ee48 <lv_style_set_shadow_spread>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
 801ee48:	b580      	push	{r7, lr}
 801ee4a:	b082      	sub	sp, #8
 801ee4c:	af00      	add	r7, sp, #0
 801ee4e:	6078      	str	r0, [r7, #4]
 801ee50:	460b      	mov	r3, r1
 801ee52:	70fb      	strb	r3, [r7, #3]
 801ee54:	4613      	mov	r3, r2
 801ee56:	803b      	strh	r3, [r7, #0]
 801ee58:	78fb      	ldrb	r3, [r7, #3]
 801ee5a:	021b      	lsls	r3, r3, #8
 801ee5c:	b21b      	sxth	r3, r3
 801ee5e:	f043 0353 	orr.w	r3, r3, #83	; 0x53
 801ee62:	b21b      	sxth	r3, r3
 801ee64:	b29b      	uxth	r3, r3
 801ee66:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ee6a:	4619      	mov	r1, r3
 801ee6c:	6878      	ldr	r0, [r7, #4]
 801ee6e:	f7ec fc59 	bl	800b724 <_lv_style_set_int>
 801ee72:	bf00      	nop
 801ee74:	3708      	adds	r7, #8
 801ee76:	46bd      	mov	sp, r7
 801ee78:	bd80      	pop	{r7, pc}

0801ee7a <lv_style_set_shadow_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
 801ee7a:	b580      	push	{r7, lr}
 801ee7c:	b084      	sub	sp, #16
 801ee7e:	af00      	add	r7, sp, #0
 801ee80:	60f8      	str	r0, [r7, #12]
 801ee82:	460b      	mov	r3, r1
 801ee84:	607a      	str	r2, [r7, #4]
 801ee86:	72fb      	strb	r3, [r7, #11]
 801ee88:	7afb      	ldrb	r3, [r7, #11]
 801ee8a:	021b      	lsls	r3, r3, #8
 801ee8c:	b21b      	sxth	r3, r3
 801ee8e:	f043 0359 	orr.w	r3, r3, #89	; 0x59
 801ee92:	b21b      	sxth	r3, r3
 801ee94:	b29b      	uxth	r3, r3
 801ee96:	687a      	ldr	r2, [r7, #4]
 801ee98:	4619      	mov	r1, r3
 801ee9a:	68f8      	ldr	r0, [r7, #12]
 801ee9c:	f7ec fcd0 	bl	800b840 <_lv_style_set_color>
 801eea0:	bf00      	nop
 801eea2:	3710      	adds	r7, #16
 801eea4:	46bd      	mov	sp, r7
 801eea6:	bd80      	pop	{r7, pc}

0801eea8 <lv_style_set_pattern_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 801eea8:	b580      	push	{r7, lr}
 801eeaa:	b084      	sub	sp, #16
 801eeac:	af00      	add	r7, sp, #0
 801eeae:	60f8      	str	r0, [r7, #12]
 801eeb0:	460b      	mov	r3, r1
 801eeb2:	607a      	str	r2, [r7, #4]
 801eeb4:	72fb      	strb	r3, [r7, #11]
 801eeb6:	7afb      	ldrb	r3, [r7, #11]
 801eeb8:	021b      	lsls	r3, r3, #8
 801eeba:	b21b      	sxth	r3, r3
 801eebc:	f043 0369 	orr.w	r3, r3, #105	; 0x69
 801eec0:	b21b      	sxth	r3, r3
 801eec2:	b29b      	uxth	r3, r3
 801eec4:	687a      	ldr	r2, [r7, #4]
 801eec6:	4619      	mov	r1, r3
 801eec8:	68f8      	ldr	r0, [r7, #12]
 801eeca:	f7ec fcb9 	bl	800b840 <_lv_style_set_color>
 801eece:	bf00      	nop
 801eed0:	3710      	adds	r7, #16
 801eed2:	46bd      	mov	sp, r7
 801eed4:	bd80      	pop	{r7, pc}

0801eed6 <lv_style_set_pattern_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
 801eed6:	b580      	push	{r7, lr}
 801eed8:	b082      	sub	sp, #8
 801eeda:	af00      	add	r7, sp, #0
 801eedc:	6078      	str	r0, [r7, #4]
 801eede:	460b      	mov	r3, r1
 801eee0:	70fb      	strb	r3, [r7, #3]
 801eee2:	4613      	mov	r3, r2
 801eee4:	70bb      	strb	r3, [r7, #2]
 801eee6:	78fb      	ldrb	r3, [r7, #3]
 801eee8:	021b      	lsls	r3, r3, #8
 801eeea:	b21b      	sxth	r3, r3
 801eeec:	f043 036c 	orr.w	r3, r3, #108	; 0x6c
 801eef0:	b21b      	sxth	r3, r3
 801eef2:	b29b      	uxth	r3, r3
 801eef4:	78ba      	ldrb	r2, [r7, #2]
 801eef6:	4619      	mov	r1, r3
 801eef8:	6878      	ldr	r0, [r7, #4]
 801eefa:	f7ec fd2f 	bl	800b95c <_lv_style_set_opa>
 801eefe:	bf00      	nop
 801ef00:	3708      	adds	r7, #8
 801ef02:	46bd      	mov	sp, r7
 801ef04:	bd80      	pop	{r7, pc}

0801ef06 <lv_style_set_pattern_image>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 801ef06:	b580      	push	{r7, lr}
 801ef08:	b084      	sub	sp, #16
 801ef0a:	af00      	add	r7, sp, #0
 801ef0c:	60f8      	str	r0, [r7, #12]
 801ef0e:	460b      	mov	r3, r1
 801ef10:	607a      	str	r2, [r7, #4]
 801ef12:	72fb      	strb	r3, [r7, #11]
 801ef14:	7afb      	ldrb	r3, [r7, #11]
 801ef16:	021b      	lsls	r3, r3, #8
 801ef18:	b21b      	sxth	r3, r3
 801ef1a:	f043 036e 	orr.w	r3, r3, #110	; 0x6e
 801ef1e:	b21b      	sxth	r3, r3
 801ef20:	b29b      	uxth	r3, r3
 801ef22:	687a      	ldr	r2, [r7, #4]
 801ef24:	4619      	mov	r1, r3
 801ef26:	68f8      	ldr	r0, [r7, #12]
 801ef28:	f7ec fda6 	bl	800ba78 <_lv_style_set_ptr>
 801ef2c:	bf00      	nop
 801ef2e:	3710      	adds	r7, #16
 801ef30:	46bd      	mov	sp, r7
 801ef32:	bd80      	pop	{r7, pc}

0801ef34 <lv_style_set_value_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 801ef34:	b580      	push	{r7, lr}
 801ef36:	b084      	sub	sp, #16
 801ef38:	af00      	add	r7, sp, #0
 801ef3a:	60f8      	str	r0, [r7, #12]
 801ef3c:	460b      	mov	r3, r1
 801ef3e:	607a      	str	r2, [r7, #4]
 801ef40:	72fb      	strb	r3, [r7, #11]
 801ef42:	7afb      	ldrb	r3, [r7, #11]
 801ef44:	021b      	lsls	r3, r3, #8
 801ef46:	b21b      	sxth	r3, r3
 801ef48:	f043 0379 	orr.w	r3, r3, #121	; 0x79
 801ef4c:	b21b      	sxth	r3, r3
 801ef4e:	b29b      	uxth	r3, r3
 801ef50:	687a      	ldr	r2, [r7, #4]
 801ef52:	4619      	mov	r1, r3
 801ef54:	68f8      	ldr	r0, [r7, #12]
 801ef56:	f7ec fc73 	bl	800b840 <_lv_style_set_color>
 801ef5a:	bf00      	nop
 801ef5c:	3710      	adds	r7, #16
 801ef5e:	46bd      	mov	sp, r7
 801ef60:	bd80      	pop	{r7, pc}

0801ef62 <lv_style_set_value_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 801ef62:	b580      	push	{r7, lr}
 801ef64:	b084      	sub	sp, #16
 801ef66:	af00      	add	r7, sp, #0
 801ef68:	60f8      	str	r0, [r7, #12]
 801ef6a:	460b      	mov	r3, r1
 801ef6c:	607a      	str	r2, [r7, #4]
 801ef6e:	72fb      	strb	r3, [r7, #11]
 801ef70:	7afb      	ldrb	r3, [r7, #11]
 801ef72:	021b      	lsls	r3, r3, #8
 801ef74:	b21b      	sxth	r3, r3
 801ef76:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
 801ef7a:	b21b      	sxth	r3, r3
 801ef7c:	b29b      	uxth	r3, r3
 801ef7e:	687a      	ldr	r2, [r7, #4]
 801ef80:	4619      	mov	r1, r3
 801ef82:	68f8      	ldr	r0, [r7, #12]
 801ef84:	f7ec fd78 	bl	800ba78 <_lv_style_set_ptr>
 801ef88:	bf00      	nop
 801ef8a:	3710      	adds	r7, #16
 801ef8c:	46bd      	mov	sp, r7
 801ef8e:	bd80      	pop	{r7, pc}

0801ef90 <lv_style_set_text_line_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 801ef90:	b580      	push	{r7, lr}
 801ef92:	b082      	sub	sp, #8
 801ef94:	af00      	add	r7, sp, #0
 801ef96:	6078      	str	r0, [r7, #4]
 801ef98:	460b      	mov	r3, r1
 801ef9a:	70fb      	strb	r3, [r7, #3]
 801ef9c:	4613      	mov	r3, r2
 801ef9e:	803b      	strh	r3, [r7, #0]
 801efa0:	78fb      	ldrb	r3, [r7, #3]
 801efa2:	021b      	lsls	r3, r3, #8
 801efa4:	b21a      	sxth	r2, r3
 801efa6:	4b07      	ldr	r3, [pc, #28]	; (801efc4 <lv_style_set_text_line_space+0x34>)
 801efa8:	4313      	orrs	r3, r2
 801efaa:	b21b      	sxth	r3, r3
 801efac:	b29b      	uxth	r3, r3
 801efae:	f9b7 2000 	ldrsh.w	r2, [r7]
 801efb2:	4619      	mov	r1, r3
 801efb4:	6878      	ldr	r0, [r7, #4]
 801efb6:	f7ec fbb5 	bl	800b724 <_lv_style_set_int>
 801efba:	bf00      	nop
 801efbc:	3708      	adds	r7, #8
 801efbe:	46bd      	mov	sp, r7
 801efc0:	bd80      	pop	{r7, pc}
 801efc2:	bf00      	nop
 801efc4:	ffff8081 	.word	0xffff8081

0801efc8 <lv_style_set_text_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 801efc8:	b580      	push	{r7, lr}
 801efca:	b084      	sub	sp, #16
 801efcc:	af00      	add	r7, sp, #0
 801efce:	60f8      	str	r0, [r7, #12]
 801efd0:	460b      	mov	r3, r1
 801efd2:	607a      	str	r2, [r7, #4]
 801efd4:	72fb      	strb	r3, [r7, #11]
 801efd6:	7afb      	ldrb	r3, [r7, #11]
 801efd8:	021b      	lsls	r3, r3, #8
 801efda:	b21a      	sxth	r2, r3
 801efdc:	4b06      	ldr	r3, [pc, #24]	; (801eff8 <lv_style_set_text_color+0x30>)
 801efde:	4313      	orrs	r3, r2
 801efe0:	b21b      	sxth	r3, r3
 801efe2:	b29b      	uxth	r3, r3
 801efe4:	687a      	ldr	r2, [r7, #4]
 801efe6:	4619      	mov	r1, r3
 801efe8:	68f8      	ldr	r0, [r7, #12]
 801efea:	f7ec fc29 	bl	800b840 <_lv_style_set_color>
 801efee:	bf00      	nop
 801eff0:	3710      	adds	r7, #16
 801eff2:	46bd      	mov	sp, r7
 801eff4:	bd80      	pop	{r7, pc}
 801eff6:	bf00      	nop
 801eff8:	ffff8089 	.word	0xffff8089

0801effc <lv_style_set_text_sel_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
 801effc:	b580      	push	{r7, lr}
 801effe:	b084      	sub	sp, #16
 801f000:	af00      	add	r7, sp, #0
 801f002:	60f8      	str	r0, [r7, #12]
 801f004:	460b      	mov	r3, r1
 801f006:	607a      	str	r2, [r7, #4]
 801f008:	72fb      	strb	r3, [r7, #11]
 801f00a:	7afb      	ldrb	r3, [r7, #11]
 801f00c:	021b      	lsls	r3, r3, #8
 801f00e:	b21a      	sxth	r2, r3
 801f010:	4b06      	ldr	r3, [pc, #24]	; (801f02c <lv_style_set_text_sel_color+0x30>)
 801f012:	4313      	orrs	r3, r2
 801f014:	b21b      	sxth	r3, r3
 801f016:	b29b      	uxth	r3, r3
 801f018:	687a      	ldr	r2, [r7, #4]
 801f01a:	4619      	mov	r1, r3
 801f01c:	68f8      	ldr	r0, [r7, #12]
 801f01e:	f7ec fc0f 	bl	800b840 <_lv_style_set_color>
 801f022:	bf00      	nop
 801f024:	3710      	adds	r7, #16
 801f026:	46bd      	mov	sp, r7
 801f028:	bd80      	pop	{r7, pc}
 801f02a:	bf00      	nop
 801f02c:	ffff808a 	.word	0xffff808a

0801f030 <lv_style_set_text_sel_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
 801f030:	b580      	push	{r7, lr}
 801f032:	b084      	sub	sp, #16
 801f034:	af00      	add	r7, sp, #0
 801f036:	60f8      	str	r0, [r7, #12]
 801f038:	460b      	mov	r3, r1
 801f03a:	607a      	str	r2, [r7, #4]
 801f03c:	72fb      	strb	r3, [r7, #11]
 801f03e:	7afb      	ldrb	r3, [r7, #11]
 801f040:	021b      	lsls	r3, r3, #8
 801f042:	b21a      	sxth	r2, r3
 801f044:	4b06      	ldr	r3, [pc, #24]	; (801f060 <lv_style_set_text_sel_bg_color+0x30>)
 801f046:	4313      	orrs	r3, r2
 801f048:	b21b      	sxth	r3, r3
 801f04a:	b29b      	uxth	r3, r3
 801f04c:	687a      	ldr	r2, [r7, #4]
 801f04e:	4619      	mov	r1, r3
 801f050:	68f8      	ldr	r0, [r7, #12]
 801f052:	f7ec fbf5 	bl	800b840 <_lv_style_set_color>
 801f056:	bf00      	nop
 801f058:	3710      	adds	r7, #16
 801f05a:	46bd      	mov	sp, r7
 801f05c:	bd80      	pop	{r7, pc}
 801f05e:	bf00      	nop
 801f060:	ffff808b 	.word	0xffff808b

0801f064 <lv_style_set_text_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 801f064:	b580      	push	{r7, lr}
 801f066:	b084      	sub	sp, #16
 801f068:	af00      	add	r7, sp, #0
 801f06a:	60f8      	str	r0, [r7, #12]
 801f06c:	460b      	mov	r3, r1
 801f06e:	607a      	str	r2, [r7, #4]
 801f070:	72fb      	strb	r3, [r7, #11]
 801f072:	7afb      	ldrb	r3, [r7, #11]
 801f074:	021b      	lsls	r3, r3, #8
 801f076:	b21a      	sxth	r2, r3
 801f078:	4b06      	ldr	r3, [pc, #24]	; (801f094 <lv_style_set_text_font+0x30>)
 801f07a:	4313      	orrs	r3, r2
 801f07c:	b21b      	sxth	r3, r3
 801f07e:	b29b      	uxth	r3, r3
 801f080:	687a      	ldr	r2, [r7, #4]
 801f082:	4619      	mov	r1, r3
 801f084:	68f8      	ldr	r0, [r7, #12]
 801f086:	f7ec fcf7 	bl	800ba78 <_lv_style_set_ptr>
 801f08a:	bf00      	nop
 801f08c:	3710      	adds	r7, #16
 801f08e:	46bd      	mov	sp, r7
 801f090:	bd80      	pop	{r7, pc}
 801f092:	bf00      	nop
 801f094:	ffff808e 	.word	0xffff808e

0801f098 <lv_style_set_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 801f098:	b580      	push	{r7, lr}
 801f09a:	b082      	sub	sp, #8
 801f09c:	af00      	add	r7, sp, #0
 801f09e:	6078      	str	r0, [r7, #4]
 801f0a0:	460b      	mov	r3, r1
 801f0a2:	70fb      	strb	r3, [r7, #3]
 801f0a4:	4613      	mov	r3, r2
 801f0a6:	803b      	strh	r3, [r7, #0]
 801f0a8:	78fb      	ldrb	r3, [r7, #3]
 801f0aa:	021b      	lsls	r3, r3, #8
 801f0ac:	b21b      	sxth	r3, r3
 801f0ae:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801f0b2:	b21b      	sxth	r3, r3
 801f0b4:	b29b      	uxth	r3, r3
 801f0b6:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f0ba:	4619      	mov	r1, r3
 801f0bc:	6878      	ldr	r0, [r7, #4]
 801f0be:	f7ec fb31 	bl	800b724 <_lv_style_set_int>
 801f0c2:	bf00      	nop
 801f0c4:	3708      	adds	r7, #8
 801f0c6:	46bd      	mov	sp, r7
 801f0c8:	bd80      	pop	{r7, pc}

0801f0ca <lv_style_set_line_dash_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
 801f0ca:	b580      	push	{r7, lr}
 801f0cc:	b082      	sub	sp, #8
 801f0ce:	af00      	add	r7, sp, #0
 801f0d0:	6078      	str	r0, [r7, #4]
 801f0d2:	460b      	mov	r3, r1
 801f0d4:	70fb      	strb	r3, [r7, #3]
 801f0d6:	4613      	mov	r3, r2
 801f0d8:	803b      	strh	r3, [r7, #0]
 801f0da:	78fb      	ldrb	r3, [r7, #3]
 801f0dc:	021b      	lsls	r3, r3, #8
 801f0de:	b21b      	sxth	r3, r3
 801f0e0:	f043 0392 	orr.w	r3, r3, #146	; 0x92
 801f0e4:	b21b      	sxth	r3, r3
 801f0e6:	b29b      	uxth	r3, r3
 801f0e8:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f0ec:	4619      	mov	r1, r3
 801f0ee:	6878      	ldr	r0, [r7, #4]
 801f0f0:	f7ec fb18 	bl	800b724 <_lv_style_set_int>
 801f0f4:	bf00      	nop
 801f0f6:	3708      	adds	r7, #8
 801f0f8:	46bd      	mov	sp, r7
 801f0fa:	bd80      	pop	{r7, pc}

0801f0fc <lv_style_set_line_dash_gap>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
 801f0fc:	b580      	push	{r7, lr}
 801f0fe:	b082      	sub	sp, #8
 801f100:	af00      	add	r7, sp, #0
 801f102:	6078      	str	r0, [r7, #4]
 801f104:	460b      	mov	r3, r1
 801f106:	70fb      	strb	r3, [r7, #3]
 801f108:	4613      	mov	r3, r2
 801f10a:	803b      	strh	r3, [r7, #0]
 801f10c:	78fb      	ldrb	r3, [r7, #3]
 801f10e:	021b      	lsls	r3, r3, #8
 801f110:	b21b      	sxth	r3, r3
 801f112:	f043 0393 	orr.w	r3, r3, #147	; 0x93
 801f116:	b21b      	sxth	r3, r3
 801f118:	b29b      	uxth	r3, r3
 801f11a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f11e:	4619      	mov	r1, r3
 801f120:	6878      	ldr	r0, [r7, #4]
 801f122:	f7ec faff 	bl	800b724 <_lv_style_set_int>
 801f126:	bf00      	nop
 801f128:	3708      	adds	r7, #8
 801f12a:	46bd      	mov	sp, r7
 801f12c:	bd80      	pop	{r7, pc}

0801f12e <lv_style_set_line_rounded>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 801f12e:	b580      	push	{r7, lr}
 801f130:	b082      	sub	sp, #8
 801f132:	af00      	add	r7, sp, #0
 801f134:	6078      	str	r0, [r7, #4]
 801f136:	460b      	mov	r3, r1
 801f138:	70fb      	strb	r3, [r7, #3]
 801f13a:	4613      	mov	r3, r2
 801f13c:	70bb      	strb	r3, [r7, #2]
 801f13e:	78fb      	ldrb	r3, [r7, #3]
 801f140:	021b      	lsls	r3, r3, #8
 801f142:	b21b      	sxth	r3, r3
 801f144:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 801f148:	b21b      	sxth	r3, r3
 801f14a:	b29b      	uxth	r3, r3
 801f14c:	78ba      	ldrb	r2, [r7, #2]
 801f14e:	b212      	sxth	r2, r2
 801f150:	4619      	mov	r1, r3
 801f152:	6878      	ldr	r0, [r7, #4]
 801f154:	f7ec fae6 	bl	800b724 <_lv_style_set_int>
 801f158:	bf00      	nop
 801f15a:	3708      	adds	r7, #8
 801f15c:	46bd      	mov	sp, r7
 801f15e:	bd80      	pop	{r7, pc}

0801f160 <lv_style_set_line_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 801f160:	b580      	push	{r7, lr}
 801f162:	b084      	sub	sp, #16
 801f164:	af00      	add	r7, sp, #0
 801f166:	60f8      	str	r0, [r7, #12]
 801f168:	460b      	mov	r3, r1
 801f16a:	607a      	str	r2, [r7, #4]
 801f16c:	72fb      	strb	r3, [r7, #11]
 801f16e:	7afb      	ldrb	r3, [r7, #11]
 801f170:	021b      	lsls	r3, r3, #8
 801f172:	b21b      	sxth	r3, r3
 801f174:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 801f178:	b21b      	sxth	r3, r3
 801f17a:	b29b      	uxth	r3, r3
 801f17c:	687a      	ldr	r2, [r7, #4]
 801f17e:	4619      	mov	r1, r3
 801f180:	68f8      	ldr	r0, [r7, #12]
 801f182:	f7ec fb5d 	bl	800b840 <_lv_style_set_color>
 801f186:	bf00      	nop
 801f188:	3710      	adds	r7, #16
 801f18a:	46bd      	mov	sp, r7
 801f18c:	bd80      	pop	{r7, pc}
	...

0801f190 <lv_style_set_image_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 801f190:	b580      	push	{r7, lr}
 801f192:	b084      	sub	sp, #16
 801f194:	af00      	add	r7, sp, #0
 801f196:	60f8      	str	r0, [r7, #12]
 801f198:	460b      	mov	r3, r1
 801f19a:	607a      	str	r2, [r7, #4]
 801f19c:	72fb      	strb	r3, [r7, #11]
 801f19e:	7afb      	ldrb	r3, [r7, #11]
 801f1a0:	021b      	lsls	r3, r3, #8
 801f1a2:	b21a      	sxth	r2, r3
 801f1a4:	4b06      	ldr	r3, [pc, #24]	; (801f1c0 <lv_style_set_image_recolor+0x30>)
 801f1a6:	4313      	orrs	r3, r2
 801f1a8:	b21b      	sxth	r3, r3
 801f1aa:	b29b      	uxth	r3, r3
 801f1ac:	687a      	ldr	r2, [r7, #4]
 801f1ae:	4619      	mov	r1, r3
 801f1b0:	68f8      	ldr	r0, [r7, #12]
 801f1b2:	f7ec fb45 	bl	800b840 <_lv_style_set_color>
 801f1b6:	bf00      	nop
 801f1b8:	3710      	adds	r7, #16
 801f1ba:	46bd      	mov	sp, r7
 801f1bc:	bd80      	pop	{r7, pc}
 801f1be:	bf00      	nop
 801f1c0:	ffff80a9 	.word	0xffff80a9

0801f1c4 <lv_style_set_transition_time>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 801f1c4:	b580      	push	{r7, lr}
 801f1c6:	b082      	sub	sp, #8
 801f1c8:	af00      	add	r7, sp, #0
 801f1ca:	6078      	str	r0, [r7, #4]
 801f1cc:	460b      	mov	r3, r1
 801f1ce:	70fb      	strb	r3, [r7, #3]
 801f1d0:	4613      	mov	r3, r2
 801f1d2:	803b      	strh	r3, [r7, #0]
 801f1d4:	78fb      	ldrb	r3, [r7, #3]
 801f1d6:	021b      	lsls	r3, r3, #8
 801f1d8:	b21b      	sxth	r3, r3
 801f1da:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801f1de:	b21b      	sxth	r3, r3
 801f1e0:	b29b      	uxth	r3, r3
 801f1e2:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f1e6:	4619      	mov	r1, r3
 801f1e8:	6878      	ldr	r0, [r7, #4]
 801f1ea:	f7ec fa9b 	bl	800b724 <_lv_style_set_int>
 801f1ee:	bf00      	nop
 801f1f0:	3708      	adds	r7, #8
 801f1f2:	46bd      	mov	sp, r7
 801f1f4:	bd80      	pop	{r7, pc}

0801f1f6 <lv_style_set_transition_delay>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 801f1f6:	b580      	push	{r7, lr}
 801f1f8:	b082      	sub	sp, #8
 801f1fa:	af00      	add	r7, sp, #0
 801f1fc:	6078      	str	r0, [r7, #4]
 801f1fe:	460b      	mov	r3, r1
 801f200:	70fb      	strb	r3, [r7, #3]
 801f202:	4613      	mov	r3, r2
 801f204:	803b      	strh	r3, [r7, #0]
 801f206:	78fb      	ldrb	r3, [r7, #3]
 801f208:	021b      	lsls	r3, r3, #8
 801f20a:	b21b      	sxth	r3, r3
 801f20c:	f043 03b1 	orr.w	r3, r3, #177	; 0xb1
 801f210:	b21b      	sxth	r3, r3
 801f212:	b29b      	uxth	r3, r3
 801f214:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f218:	4619      	mov	r1, r3
 801f21a:	6878      	ldr	r0, [r7, #4]
 801f21c:	f7ec fa82 	bl	800b724 <_lv_style_set_int>
 801f220:	bf00      	nop
 801f222:	3708      	adds	r7, #8
 801f224:	46bd      	mov	sp, r7
 801f226:	bd80      	pop	{r7, pc}

0801f228 <lv_style_set_transition_prop_3>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
 801f228:	b580      	push	{r7, lr}
 801f22a:	b082      	sub	sp, #8
 801f22c:	af00      	add	r7, sp, #0
 801f22e:	6078      	str	r0, [r7, #4]
 801f230:	460b      	mov	r3, r1
 801f232:	70fb      	strb	r3, [r7, #3]
 801f234:	4613      	mov	r3, r2
 801f236:	803b      	strh	r3, [r7, #0]
 801f238:	78fb      	ldrb	r3, [r7, #3]
 801f23a:	021b      	lsls	r3, r3, #8
 801f23c:	b21b      	sxth	r3, r3
 801f23e:	f043 03b4 	orr.w	r3, r3, #180	; 0xb4
 801f242:	b21b      	sxth	r3, r3
 801f244:	b29b      	uxth	r3, r3
 801f246:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f24a:	4619      	mov	r1, r3
 801f24c:	6878      	ldr	r0, [r7, #4]
 801f24e:	f7ec fa69 	bl	800b724 <_lv_style_set_int>
 801f252:	bf00      	nop
 801f254:	3708      	adds	r7, #8
 801f256:	46bd      	mov	sp, r7
 801f258:	bd80      	pop	{r7, pc}

0801f25a <lv_style_set_transition_prop_4>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
 801f25a:	b580      	push	{r7, lr}
 801f25c:	b082      	sub	sp, #8
 801f25e:	af00      	add	r7, sp, #0
 801f260:	6078      	str	r0, [r7, #4]
 801f262:	460b      	mov	r3, r1
 801f264:	70fb      	strb	r3, [r7, #3]
 801f266:	4613      	mov	r3, r2
 801f268:	803b      	strh	r3, [r7, #0]
 801f26a:	78fb      	ldrb	r3, [r7, #3]
 801f26c:	021b      	lsls	r3, r3, #8
 801f26e:	b21b      	sxth	r3, r3
 801f270:	f043 03b5 	orr.w	r3, r3, #181	; 0xb5
 801f274:	b21b      	sxth	r3, r3
 801f276:	b29b      	uxth	r3, r3
 801f278:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f27c:	4619      	mov	r1, r3
 801f27e:	6878      	ldr	r0, [r7, #4]
 801f280:	f7ec fa50 	bl	800b724 <_lv_style_set_int>
 801f284:	bf00      	nop
 801f286:	3708      	adds	r7, #8
 801f288:	46bd      	mov	sp, r7
 801f28a:	bd80      	pop	{r7, pc}

0801f28c <lv_style_set_transition_prop_5>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 801f28c:	b580      	push	{r7, lr}
 801f28e:	b082      	sub	sp, #8
 801f290:	af00      	add	r7, sp, #0
 801f292:	6078      	str	r0, [r7, #4]
 801f294:	460b      	mov	r3, r1
 801f296:	70fb      	strb	r3, [r7, #3]
 801f298:	4613      	mov	r3, r2
 801f29a:	803b      	strh	r3, [r7, #0]
 801f29c:	78fb      	ldrb	r3, [r7, #3]
 801f29e:	021b      	lsls	r3, r3, #8
 801f2a0:	b21b      	sxth	r3, r3
 801f2a2:	f043 03b6 	orr.w	r3, r3, #182	; 0xb6
 801f2a6:	b21b      	sxth	r3, r3
 801f2a8:	b29b      	uxth	r3, r3
 801f2aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f2ae:	4619      	mov	r1, r3
 801f2b0:	6878      	ldr	r0, [r7, #4]
 801f2b2:	f7ec fa37 	bl	800b724 <_lv_style_set_int>
 801f2b6:	bf00      	nop
 801f2b8:	3708      	adds	r7, #8
 801f2ba:	46bd      	mov	sp, r7
 801f2bc:	bd80      	pop	{r7, pc}

0801f2be <lv_style_set_transition_prop_6>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 801f2be:	b580      	push	{r7, lr}
 801f2c0:	b082      	sub	sp, #8
 801f2c2:	af00      	add	r7, sp, #0
 801f2c4:	6078      	str	r0, [r7, #4]
 801f2c6:	460b      	mov	r3, r1
 801f2c8:	70fb      	strb	r3, [r7, #3]
 801f2ca:	4613      	mov	r3, r2
 801f2cc:	803b      	strh	r3, [r7, #0]
 801f2ce:	78fb      	ldrb	r3, [r7, #3]
 801f2d0:	021b      	lsls	r3, r3, #8
 801f2d2:	b21b      	sxth	r3, r3
 801f2d4:	f043 03b7 	orr.w	r3, r3, #183	; 0xb7
 801f2d8:	b21b      	sxth	r3, r3
 801f2da:	b29b      	uxth	r3, r3
 801f2dc:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f2e0:	4619      	mov	r1, r3
 801f2e2:	6878      	ldr	r0, [r7, #4]
 801f2e4:	f7ec fa1e 	bl	800b724 <_lv_style_set_int>
 801f2e8:	bf00      	nop
 801f2ea:	3708      	adds	r7, #8
 801f2ec:	46bd      	mov	sp, r7
 801f2ee:	bd80      	pop	{r7, pc}

0801f2f0 <lv_style_set_scale_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 801f2f0:	b580      	push	{r7, lr}
 801f2f2:	b082      	sub	sp, #8
 801f2f4:	af00      	add	r7, sp, #0
 801f2f6:	6078      	str	r0, [r7, #4]
 801f2f8:	460b      	mov	r3, r1
 801f2fa:	70fb      	strb	r3, [r7, #3]
 801f2fc:	4613      	mov	r3, r2
 801f2fe:	803b      	strh	r3, [r7, #0]
 801f300:	78fb      	ldrb	r3, [r7, #3]
 801f302:	021b      	lsls	r3, r3, #8
 801f304:	b21b      	sxth	r3, r3
 801f306:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801f30a:	b21b      	sxth	r3, r3
 801f30c:	b29b      	uxth	r3, r3
 801f30e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f312:	4619      	mov	r1, r3
 801f314:	6878      	ldr	r0, [r7, #4]
 801f316:	f7ec fa05 	bl	800b724 <_lv_style_set_int>
 801f31a:	bf00      	nop
 801f31c:	3708      	adds	r7, #8
 801f31e:	46bd      	mov	sp, r7
 801f320:	bd80      	pop	{r7, pc}

0801f322 <lv_style_set_scale_end_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
 801f322:	b580      	push	{r7, lr}
 801f324:	b082      	sub	sp, #8
 801f326:	af00      	add	r7, sp, #0
 801f328:	6078      	str	r0, [r7, #4]
 801f32a:	460b      	mov	r3, r1
 801f32c:	70fb      	strb	r3, [r7, #3]
 801f32e:	4613      	mov	r3, r2
 801f330:	803b      	strh	r3, [r7, #0]
 801f332:	78fb      	ldrb	r3, [r7, #3]
 801f334:	021b      	lsls	r3, r3, #8
 801f336:	b21b      	sxth	r3, r3
 801f338:	f043 03c2 	orr.w	r3, r3, #194	; 0xc2
 801f33c:	b21b      	sxth	r3, r3
 801f33e:	b29b      	uxth	r3, r3
 801f340:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f344:	4619      	mov	r1, r3
 801f346:	6878      	ldr	r0, [r7, #4]
 801f348:	f7ec f9ec 	bl	800b724 <_lv_style_set_int>
 801f34c:	bf00      	nop
 801f34e:	3708      	adds	r7, #8
 801f350:	46bd      	mov	sp, r7
 801f352:	bd80      	pop	{r7, pc}

0801f354 <lv_style_set_scale_end_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 801f354:	b580      	push	{r7, lr}
 801f356:	b082      	sub	sp, #8
 801f358:	af00      	add	r7, sp, #0
 801f35a:	6078      	str	r0, [r7, #4]
 801f35c:	460b      	mov	r3, r1
 801f35e:	70fb      	strb	r3, [r7, #3]
 801f360:	4613      	mov	r3, r2
 801f362:	803b      	strh	r3, [r7, #0]
 801f364:	78fb      	ldrb	r3, [r7, #3]
 801f366:	021b      	lsls	r3, r3, #8
 801f368:	b21b      	sxth	r3, r3
 801f36a:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
 801f36e:	b21b      	sxth	r3, r3
 801f370:	b29b      	uxth	r3, r3
 801f372:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f376:	4619      	mov	r1, r3
 801f378:	6878      	ldr	r0, [r7, #4]
 801f37a:	f7ec f9d3 	bl	800b724 <_lv_style_set_int>
 801f37e:	bf00      	nop
 801f380:	3708      	adds	r7, #8
 801f382:	46bd      	mov	sp, r7
 801f384:	bd80      	pop	{r7, pc}

0801f386 <lv_style_set_scale_grad_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 801f386:	b580      	push	{r7, lr}
 801f388:	b084      	sub	sp, #16
 801f38a:	af00      	add	r7, sp, #0
 801f38c:	60f8      	str	r0, [r7, #12]
 801f38e:	460b      	mov	r3, r1
 801f390:	607a      	str	r2, [r7, #4]
 801f392:	72fb      	strb	r3, [r7, #11]
 801f394:	7afb      	ldrb	r3, [r7, #11]
 801f396:	021b      	lsls	r3, r3, #8
 801f398:	b21b      	sxth	r3, r3
 801f39a:	f043 03c9 	orr.w	r3, r3, #201	; 0xc9
 801f39e:	b21b      	sxth	r3, r3
 801f3a0:	b29b      	uxth	r3, r3
 801f3a2:	687a      	ldr	r2, [r7, #4]
 801f3a4:	4619      	mov	r1, r3
 801f3a6:	68f8      	ldr	r0, [r7, #12]
 801f3a8:	f7ec fa4a 	bl	800b840 <_lv_style_set_color>
 801f3ac:	bf00      	nop
 801f3ae:	3710      	adds	r7, #16
 801f3b0:	46bd      	mov	sp, r7
 801f3b2:	bd80      	pop	{r7, pc}

0801f3b4 <lv_style_set_scale_end_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 801f3b4:	b580      	push	{r7, lr}
 801f3b6:	b084      	sub	sp, #16
 801f3b8:	af00      	add	r7, sp, #0
 801f3ba:	60f8      	str	r0, [r7, #12]
 801f3bc:	460b      	mov	r3, r1
 801f3be:	607a      	str	r2, [r7, #4]
 801f3c0:	72fb      	strb	r3, [r7, #11]
 801f3c2:	7afb      	ldrb	r3, [r7, #11]
 801f3c4:	021b      	lsls	r3, r3, #8
 801f3c6:	b21b      	sxth	r3, r3
 801f3c8:	f043 03ca 	orr.w	r3, r3, #202	; 0xca
 801f3cc:	b21b      	sxth	r3, r3
 801f3ce:	b29b      	uxth	r3, r3
 801f3d0:	687a      	ldr	r2, [r7, #4]
 801f3d2:	4619      	mov	r1, r3
 801f3d4:	68f8      	ldr	r0, [r7, #12]
 801f3d6:	f7ec fa33 	bl	800b840 <_lv_style_set_color>
 801f3da:	bf00      	nop
 801f3dc:	3710      	adds	r7, #16
 801f3de:	46bd      	mov	sp, r7
 801f3e0:	bd80      	pop	{r7, pc}
	...

0801f3e4 <basic_init>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void basic_init(void)
{
 801f3e4:	b5b0      	push	{r4, r5, r7, lr}
 801f3e6:	b082      	sub	sp, #8
 801f3e8:	af00      	add	r7, sp, #0
    style_init_reset(&styles->scr);
 801f3ea:	4bb9      	ldr	r3, [pc, #740]	; (801f6d0 <basic_init+0x2ec>)
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	4618      	mov	r0, r3
 801f3f0:	f006 f83a 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_STATE_DEFAULT, LV_OPA_COVER);
 801f3f4:	4bb6      	ldr	r3, [pc, #728]	; (801f6d0 <basic_init+0x2ec>)
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	22ff      	movs	r2, #255	; 0xff
 801f3fa:	2100      	movs	r1, #0
 801f3fc:	4618      	mov	r0, r3
 801f3fe:	f7ff fc17 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
 801f402:	4bb3      	ldr	r3, [pc, #716]	; (801f6d0 <basic_init+0x2ec>)
 801f404:	681b      	ldr	r3, [r3, #0]
 801f406:	461c      	mov	r4, r3
 801f408:	4bb2      	ldr	r3, [pc, #712]	; (801f6d4 <basic_init+0x2f0>)
 801f40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f40c:	f003 0302 	and.w	r3, r3, #2
 801f410:	2b00      	cmp	r3, #0
 801f412:	d004      	beq.n	801f41e <basic_init+0x3a>
 801f414:	48b0      	ldr	r0, [pc, #704]	; (801f6d8 <basic_init+0x2f4>)
 801f416:	f7ff fa69 	bl	801e8ec <lv_color_hex>
 801f41a:	4603      	mov	r3, r0
 801f41c:	e003      	b.n	801f426 <basic_init+0x42>
 801f41e:	48af      	ldr	r0, [pc, #700]	; (801f6dc <basic_init+0x2f8>)
 801f420:	f7ff fa64 	bl	801e8ec <lv_color_hex>
 801f424:	4603      	mov	r3, r0
 801f426:	461a      	mov	r2, r3
 801f428:	2100      	movs	r1, #0
 801f42a:	4620      	mov	r0, r4
 801f42c:	f7ff fbe9 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 801f430:	4ba7      	ldr	r3, [pc, #668]	; (801f6d0 <basic_init+0x2ec>)
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	461c      	mov	r4, r3
 801f436:	4ba7      	ldr	r3, [pc, #668]	; (801f6d4 <basic_init+0x2f0>)
 801f438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f43a:	f003 0302 	and.w	r3, r3, #2
 801f43e:	2b00      	cmp	r3, #0
 801f440:	d004      	beq.n	801f44c <basic_init+0x68>
 801f442:	48a7      	ldr	r0, [pc, #668]	; (801f6e0 <basic_init+0x2fc>)
 801f444:	f7ff fa52 	bl	801e8ec <lv_color_hex>
 801f448:	4603      	mov	r3, r0
 801f44a:	e003      	b.n	801f454 <basic_init+0x70>
 801f44c:	48a5      	ldr	r0, [pc, #660]	; (801f6e4 <basic_init+0x300>)
 801f44e:	f7ff fa4d 	bl	801e8ec <lv_color_hex>
 801f452:	4603      	mov	r3, r0
 801f454:	461a      	mov	r2, r3
 801f456:	2100      	movs	r1, #0
 801f458:	4620      	mov	r0, r4
 801f45a:	f7ff fdb5 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 801f45e:	4b9c      	ldr	r3, [pc, #624]	; (801f6d0 <basic_init+0x2ec>)
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	461c      	mov	r4, r3
 801f464:	4b9b      	ldr	r3, [pc, #620]	; (801f6d4 <basic_init+0x2f0>)
 801f466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f468:	f003 0302 	and.w	r3, r3, #2
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	d004      	beq.n	801f47a <basic_init+0x96>
 801f470:	489b      	ldr	r0, [pc, #620]	; (801f6e0 <basic_init+0x2fc>)
 801f472:	f7ff fa3b 	bl	801e8ec <lv_color_hex>
 801f476:	4603      	mov	r3, r0
 801f478:	e003      	b.n	801f482 <basic_init+0x9e>
 801f47a:	489a      	ldr	r0, [pc, #616]	; (801f6e4 <basic_init+0x300>)
 801f47c:	f7ff fa36 	bl	801e8ec <lv_color_hex>
 801f480:	4603      	mov	r3, r0
 801f482:	461a      	mov	r2, r3
 801f484:	2100      	movs	r1, #0
 801f486:	4620      	mov	r0, r4
 801f488:	f7ff fd54 	bl	801ef34 <lv_style_set_value_color>
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 801f48c:	4b90      	ldr	r3, [pc, #576]	; (801f6d0 <basic_init+0x2ec>)
 801f48e:	681b      	ldr	r3, [r3, #0]
 801f490:	461c      	mov	r4, r3
 801f492:	4b90      	ldr	r3, [pc, #576]	; (801f6d4 <basic_init+0x2f0>)
 801f494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f496:	f003 0302 	and.w	r3, r3, #2
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	d004      	beq.n	801f4a8 <basic_init+0xc4>
 801f49e:	4890      	ldr	r0, [pc, #576]	; (801f6e0 <basic_init+0x2fc>)
 801f4a0:	f7ff fa24 	bl	801e8ec <lv_color_hex>
 801f4a4:	4603      	mov	r3, r0
 801f4a6:	e003      	b.n	801f4b0 <basic_init+0xcc>
 801f4a8:	488e      	ldr	r0, [pc, #568]	; (801f6e4 <basic_init+0x300>)
 801f4aa:	f7ff fa1f 	bl	801e8ec <lv_color_hex>
 801f4ae:	4603      	mov	r3, r0
 801f4b0:	461a      	mov	r2, r3
 801f4b2:	2100      	movs	r1, #0
 801f4b4:	4620      	mov	r0, r4
 801f4b6:	f7ff fda1 	bl	801effc <lv_style_set_text_sel_color>
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
 801f4ba:	4b85      	ldr	r3, [pc, #532]	; (801f6d0 <basic_init+0x2ec>)
 801f4bc:	681b      	ldr	r3, [r3, #0]
 801f4be:	4618      	mov	r0, r3
 801f4c0:	4b84      	ldr	r3, [pc, #528]	; (801f6d4 <basic_init+0x2f0>)
 801f4c2:	68da      	ldr	r2, [r3, #12]
 801f4c4:	2100      	movs	r1, #0
 801f4c6:	f7ff fdb3 	bl	801f030 <lv_style_set_text_sel_bg_color>
    lv_style_set_value_font(&styles->scr, LV_STATE_DEFAULT, theme.font_normal);
 801f4ca:	4b81      	ldr	r3, [pc, #516]	; (801f6d0 <basic_init+0x2ec>)
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	4618      	mov	r0, r3
 801f4d0:	4b80      	ldr	r3, [pc, #512]	; (801f6d4 <basic_init+0x2f0>)
 801f4d2:	699b      	ldr	r3, [r3, #24]
 801f4d4:	461a      	mov	r2, r3
 801f4d6:	2100      	movs	r1, #0
 801f4d8:	f7ff fd43 	bl	801ef62 <lv_style_set_value_font>

    style_init_reset(&styles->bg);
 801f4dc:	4b7c      	ldr	r3, [pc, #496]	; (801f6d0 <basic_init+0x2ec>)
 801f4de:	681b      	ldr	r3, [r3, #0]
 801f4e0:	3304      	adds	r3, #4
 801f4e2:	4618      	mov	r0, r3
 801f4e4:	f005 ffc0 	bl	8025468 <style_init_reset>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 801f4e8:	4b79      	ldr	r3, [pc, #484]	; (801f6d0 <basic_init+0x2ec>)
 801f4ea:	681b      	ldr	r3, [r3, #0]
 801f4ec:	1d1c      	adds	r4, r3, #4
 801f4ee:	2000      	movs	r0, #0
 801f4f0:	f7fa ff92 	bl	801a418 <lv_disp_get_dpi>
 801f4f4:	4603      	mov	r3, r0
 801f4f6:	330a      	adds	r3, #10
 801f4f8:	00db      	lsls	r3, r3, #3
 801f4fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f4fe:	db0d      	blt.n	801f51c <basic_init+0x138>
 801f500:	2000      	movs	r0, #0
 801f502:	f7fa ff89 	bl	801a418 <lv_disp_get_dpi>
 801f506:	4603      	mov	r3, r0
 801f508:	330a      	adds	r3, #10
 801f50a:	00db      	lsls	r3, r3, #3
 801f50c:	4a76      	ldr	r2, [pc, #472]	; (801f6e8 <basic_init+0x304>)
 801f50e:	fb82 1203 	smull	r1, r2, r2, r3
 801f512:	1192      	asrs	r2, r2, #6
 801f514:	17db      	asrs	r3, r3, #31
 801f516:	1ad3      	subs	r3, r2, r3
 801f518:	b21b      	sxth	r3, r3
 801f51a:	e000      	b.n	801f51e <basic_init+0x13a>
 801f51c:	2301      	movs	r3, #1
 801f51e:	461a      	mov	r2, r3
 801f520:	2100      	movs	r1, #0
 801f522:	4620      	mov	r0, r4
 801f524:	f7ff fa28 	bl	801e978 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 801f528:	4b69      	ldr	r3, [pc, #420]	; (801f6d0 <basic_init+0x2ec>)
 801f52a:	681b      	ldr	r3, [r3, #0]
 801f52c:	3304      	adds	r3, #4
 801f52e:	22ff      	movs	r2, #255	; 0xff
 801f530:	2100      	movs	r1, #0
 801f532:	4618      	mov	r0, r3
 801f534:	f7ff fb7c 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
 801f538:	4b65      	ldr	r3, [pc, #404]	; (801f6d0 <basic_init+0x2ec>)
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	1d1c      	adds	r4, r3, #4
 801f53e:	4b65      	ldr	r3, [pc, #404]	; (801f6d4 <basic_init+0x2f0>)
 801f540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f542:	f003 0302 	and.w	r3, r3, #2
 801f546:	2b00      	cmp	r3, #0
 801f548:	d005      	beq.n	801f556 <basic_init+0x172>
 801f54a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f54e:	f7ff f9cd 	bl	801e8ec <lv_color_hex>
 801f552:	4603      	mov	r3, r0
 801f554:	e003      	b.n	801f55e <basic_init+0x17a>
 801f556:	4865      	ldr	r0, [pc, #404]	; (801f6ec <basic_init+0x308>)
 801f558:	f7ff f9c8 	bl	801e8ec <lv_color_hex>
 801f55c:	4603      	mov	r3, r0
 801f55e:	461a      	mov	r2, r3
 801f560:	2100      	movs	r1, #0
 801f562:	4620      	mov	r0, r4
 801f564:	f7ff fb4d 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 801f568:	4b59      	ldr	r3, [pc, #356]	; (801f6d0 <basic_init+0x2ec>)
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	1d1c      	adds	r4, r3, #4
 801f56e:	4b59      	ldr	r3, [pc, #356]	; (801f6d4 <basic_init+0x2f0>)
 801f570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f572:	f003 0302 	and.w	r3, r3, #2
 801f576:	2b00      	cmp	r3, #0
 801f578:	d004      	beq.n	801f584 <basic_init+0x1a0>
 801f57a:	485d      	ldr	r0, [pc, #372]	; (801f6f0 <basic_init+0x30c>)
 801f57c:	f7ff f9b6 	bl	801e8ec <lv_color_hex>
 801f580:	4603      	mov	r3, r0
 801f582:	e003      	b.n	801f58c <basic_init+0x1a8>
 801f584:	485b      	ldr	r0, [pc, #364]	; (801f6f4 <basic_init+0x310>)
 801f586:	f7ff f9b1 	bl	801e8ec <lv_color_hex>
 801f58a:	4603      	mov	r3, r0
 801f58c:	461a      	mov	r2, r3
 801f58e:	2100      	movs	r1, #0
 801f590:	4620      	mov	r0, r4
 801f592:	f7ff fbb0 	bl	801ecf6 <lv_style_set_border_color>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
 801f596:	4b4f      	ldr	r3, [pc, #316]	; (801f6d4 <basic_init+0x2f0>)
 801f598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f59a:	f003 0320 	and.w	r3, r3, #32
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	d107      	bne.n	801f5b2 <basic_init+0x1ce>
 801f5a2:	4b4b      	ldr	r3, [pc, #300]	; (801f6d0 <basic_init+0x2ec>)
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	1d18      	adds	r0, r3, #4
 801f5a8:	4b4a      	ldr	r3, [pc, #296]	; (801f6d4 <basic_init+0x2f0>)
 801f5aa:	68da      	ldr	r2, [r3, #12]
 801f5ac:	2102      	movs	r1, #2
 801f5ae:	f7ff fba2 	bl	801ecf6 <lv_style_set_border_color>
                                                                                          theme.color_primary);
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
 801f5b2:	4b47      	ldr	r3, [pc, #284]	; (801f6d0 <basic_init+0x2ec>)
 801f5b4:	681b      	ldr	r3, [r3, #0]
 801f5b6:	1d18      	adds	r0, r3, #4
 801f5b8:	4b46      	ldr	r3, [pc, #280]	; (801f6d4 <basic_init+0x2f0>)
 801f5ba:	691a      	ldr	r2, [r3, #16]
 801f5bc:	2104      	movs	r1, #4
 801f5be:	f7ff fb9a 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
 801f5c2:	4b43      	ldr	r3, [pc, #268]	; (801f6d0 <basic_init+0x2ec>)
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	1d1c      	adds	r4, r3, #4
 801f5c8:	2000      	movs	r0, #0
 801f5ca:	f7fa ff25 	bl	801a418 <lv_disp_get_dpi>
 801f5ce:	4603      	mov	r3, r0
 801f5d0:	3328      	adds	r3, #40	; 0x28
 801f5d2:	005b      	lsls	r3, r3, #1
 801f5d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f5d8:	db0d      	blt.n	801f5f6 <basic_init+0x212>
 801f5da:	2000      	movs	r0, #0
 801f5dc:	f7fa ff1c 	bl	801a418 <lv_disp_get_dpi>
 801f5e0:	4603      	mov	r3, r0
 801f5e2:	3328      	adds	r3, #40	; 0x28
 801f5e4:	005b      	lsls	r3, r3, #1
 801f5e6:	4a40      	ldr	r2, [pc, #256]	; (801f6e8 <basic_init+0x304>)
 801f5e8:	fb82 1203 	smull	r1, r2, r2, r3
 801f5ec:	1192      	asrs	r2, r2, #6
 801f5ee:	17db      	asrs	r3, r3, #31
 801f5f0:	1ad3      	subs	r3, r2, r3
 801f5f2:	b21b      	sxth	r3, r3
 801f5f4:	e000      	b.n	801f5f8 <basic_init+0x214>
 801f5f6:	2301      	movs	r3, #1
 801f5f8:	461a      	mov	r2, r3
 801f5fa:	2100      	movs	r1, #0
 801f5fc:	4620      	mov	r0, r4
 801f5fe:	f7ff fb2f 	bl	801ec60 <lv_style_set_border_width>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
 801f602:	4b33      	ldr	r3, [pc, #204]	; (801f6d0 <basic_init+0x2ec>)
 801f604:	681b      	ldr	r3, [r3, #0]
 801f606:	3304      	adds	r3, #4
 801f608:	2201      	movs	r2, #1
 801f60a:	2100      	movs	r1, #0
 801f60c:	4618      	mov	r0, r3
 801f60e:	f7ff fb59 	bl	801ecc4 <lv_style_set_border_post>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f612:	4b2f      	ldr	r3, [pc, #188]	; (801f6d0 <basic_init+0x2ec>)
 801f614:	681b      	ldr	r3, [r3, #0]
 801f616:	1d1c      	adds	r4, r3, #4
 801f618:	4b2e      	ldr	r3, [pc, #184]	; (801f6d4 <basic_init+0x2f0>)
 801f61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f61c:	f003 0302 	and.w	r3, r3, #2
 801f620:	2b00      	cmp	r3, #0
 801f622:	d004      	beq.n	801f62e <basic_init+0x24a>
 801f624:	482e      	ldr	r0, [pc, #184]	; (801f6e0 <basic_init+0x2fc>)
 801f626:	f7ff f961 	bl	801e8ec <lv_color_hex>
 801f62a:	4603      	mov	r3, r0
 801f62c:	e004      	b.n	801f638 <basic_init+0x254>
 801f62e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f632:	f7ff f95b 	bl	801e8ec <lv_color_hex>
 801f636:	4603      	mov	r3, r0
 801f638:	461a      	mov	r2, r3
 801f63a:	2100      	movs	r1, #0
 801f63c:	4620      	mov	r0, r4
 801f63e:	f7ff fcc3 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
 801f642:	4b23      	ldr	r3, [pc, #140]	; (801f6d0 <basic_init+0x2ec>)
 801f644:	681b      	ldr	r3, [r3, #0]
 801f646:	1d18      	adds	r0, r3, #4
 801f648:	4b22      	ldr	r3, [pc, #136]	; (801f6d4 <basic_init+0x2f0>)
 801f64a:	699b      	ldr	r3, [r3, #24]
 801f64c:	461a      	mov	r2, r3
 801f64e:	2100      	movs	r1, #0
 801f650:	f7ff fc87 	bl	801ef62 <lv_style_set_value_font>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f654:	4b1e      	ldr	r3, [pc, #120]	; (801f6d0 <basic_init+0x2ec>)
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	1d1c      	adds	r4, r3, #4
 801f65a:	4b1e      	ldr	r3, [pc, #120]	; (801f6d4 <basic_init+0x2f0>)
 801f65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f65e:	f003 0302 	and.w	r3, r3, #2
 801f662:	2b00      	cmp	r3, #0
 801f664:	d004      	beq.n	801f670 <basic_init+0x28c>
 801f666:	481e      	ldr	r0, [pc, #120]	; (801f6e0 <basic_init+0x2fc>)
 801f668:	f7ff f940 	bl	801e8ec <lv_color_hex>
 801f66c:	4603      	mov	r3, r0
 801f66e:	e004      	b.n	801f67a <basic_init+0x296>
 801f670:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f674:	f7ff f93a 	bl	801e8ec <lv_color_hex>
 801f678:	4603      	mov	r3, r0
 801f67a:	461a      	mov	r2, r3
 801f67c:	2100      	movs	r1, #0
 801f67e:	4620      	mov	r0, r4
 801f680:	f7ff fc58 	bl	801ef34 <lv_style_set_value_color>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f684:	4b12      	ldr	r3, [pc, #72]	; (801f6d0 <basic_init+0x2ec>)
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	1d1c      	adds	r4, r3, #4
 801f68a:	4b12      	ldr	r3, [pc, #72]	; (801f6d4 <basic_init+0x2f0>)
 801f68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f68e:	f003 0302 	and.w	r3, r3, #2
 801f692:	2b00      	cmp	r3, #0
 801f694:	d004      	beq.n	801f6a0 <basic_init+0x2bc>
 801f696:	4812      	ldr	r0, [pc, #72]	; (801f6e0 <basic_init+0x2fc>)
 801f698:	f7ff f928 	bl	801e8ec <lv_color_hex>
 801f69c:	4603      	mov	r3, r0
 801f69e:	e004      	b.n	801f6aa <basic_init+0x2c6>
 801f6a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f6a4:	f7ff f922 	bl	801e8ec <lv_color_hex>
 801f6a8:	4603      	mov	r3, r0
 801f6aa:	461a      	mov	r2, r3
 801f6ac:	2100      	movs	r1, #0
 801f6ae:	4620      	mov	r0, r4
 801f6b0:	f7ff fd6e 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f6b4:	4b06      	ldr	r3, [pc, #24]	; (801f6d0 <basic_init+0x2ec>)
 801f6b6:	681b      	ldr	r3, [r3, #0]
 801f6b8:	1d1c      	adds	r4, r3, #4
 801f6ba:	4b06      	ldr	r3, [pc, #24]	; (801f6d4 <basic_init+0x2f0>)
 801f6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f6be:	f003 0302 	and.w	r3, r3, #2
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d018      	beq.n	801f6f8 <basic_init+0x314>
 801f6c6:	4806      	ldr	r0, [pc, #24]	; (801f6e0 <basic_init+0x2fc>)
 801f6c8:	f7ff f910 	bl	801e8ec <lv_color_hex>
 801f6cc:	4603      	mov	r3, r0
 801f6ce:	e018      	b.n	801f702 <basic_init+0x31e>
 801f6d0:	200200d4 	.word	0x200200d4
 801f6d4:	200200a8 	.word	0x200200a8
 801f6d8:	00eaeff3 	.word	0x00eaeff3
 801f6dc:	00444b5a 	.word	0x00444b5a
 801f6e0:	003b3e42 	.word	0x003b3e42
 801f6e4:	00e7e9ec 	.word	0x00e7e9ec
 801f6e8:	66666667 	.word	0x66666667
 801f6ec:	00586273 	.word	0x00586273
 801f6f0:	00d6dde3 	.word	0x00d6dde3
 801f6f4:	00808a97 	.word	0x00808a97
 801f6f8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f6fc:	f7ff f8f6 	bl	801e8ec <lv_color_hex>
 801f700:	4603      	mov	r3, r0
 801f702:	461a      	mov	r2, r3
 801f704:	2100      	movs	r1, #0
 801f706:	4620      	mov	r0, r4
 801f708:	f7ff fd2a 	bl	801f160 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
 801f70c:	4bcf      	ldr	r3, [pc, #828]	; (801fa4c <basic_init+0x668>)
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	3304      	adds	r3, #4
 801f712:	2201      	movs	r2, #1
 801f714:	2100      	movs	r1, #0
 801f716:	4618      	mov	r0, r3
 801f718:	f7ff fcbe 	bl	801f098 <lv_style_set_line_width>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f71c:	4bcb      	ldr	r3, [pc, #812]	; (801fa4c <basic_init+0x668>)
 801f71e:	681b      	ldr	r3, [r3, #0]
 801f720:	1d1d      	adds	r5, r3, #4
 801f722:	2000      	movs	r0, #0
 801f724:	f7fa fe91 	bl	801a44a <lv_disp_get_size_category>
 801f728:	4603      	mov	r3, r0
 801f72a:	2b01      	cmp	r3, #1
 801f72c:	d81e      	bhi.n	801f76c <basic_init+0x388>
 801f72e:	2000      	movs	r0, #0
 801f730:	f7fa fe72 	bl	801a418 <lv_disp_get_dpi>
 801f734:	4603      	mov	r3, r0
 801f736:	461a      	mov	r2, r3
 801f738:	4613      	mov	r3, r2
 801f73a:	011b      	lsls	r3, r3, #4
 801f73c:	1a9b      	subs	r3, r3, r2
 801f73e:	3350      	adds	r3, #80	; 0x50
 801f740:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f744:	db10      	blt.n	801f768 <basic_init+0x384>
 801f746:	2000      	movs	r0, #0
 801f748:	f7fa fe66 	bl	801a418 <lv_disp_get_dpi>
 801f74c:	4603      	mov	r3, r0
 801f74e:	461a      	mov	r2, r3
 801f750:	4613      	mov	r3, r2
 801f752:	011b      	lsls	r3, r3, #4
 801f754:	1a9b      	subs	r3, r3, r2
 801f756:	3350      	adds	r3, #80	; 0x50
 801f758:	4abd      	ldr	r2, [pc, #756]	; (801fa50 <basic_init+0x66c>)
 801f75a:	fb82 1203 	smull	r1, r2, r2, r3
 801f75e:	1192      	asrs	r2, r2, #6
 801f760:	17db      	asrs	r3, r3, #31
 801f762:	1ad3      	subs	r3, r2, r3
 801f764:	b29c      	uxth	r4, r3
 801f766:	e021      	b.n	801f7ac <basic_init+0x3c8>
 801f768:	2401      	movs	r4, #1
 801f76a:	e01f      	b.n	801f7ac <basic_init+0x3c8>
 801f76c:	2000      	movs	r0, #0
 801f76e:	f7fa fe53 	bl	801a418 <lv_disp_get_dpi>
 801f772:	4603      	mov	r3, r0
 801f774:	461a      	mov	r2, r3
 801f776:	4613      	mov	r3, r2
 801f778:	011b      	lsls	r3, r3, #4
 801f77a:	1a9b      	subs	r3, r3, r2
 801f77c:	005b      	lsls	r3, r3, #1
 801f77e:	3350      	adds	r3, #80	; 0x50
 801f780:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f784:	db11      	blt.n	801f7aa <basic_init+0x3c6>
 801f786:	2000      	movs	r0, #0
 801f788:	f7fa fe46 	bl	801a418 <lv_disp_get_dpi>
 801f78c:	4603      	mov	r3, r0
 801f78e:	461a      	mov	r2, r3
 801f790:	4613      	mov	r3, r2
 801f792:	011b      	lsls	r3, r3, #4
 801f794:	1a9b      	subs	r3, r3, r2
 801f796:	005b      	lsls	r3, r3, #1
 801f798:	3350      	adds	r3, #80	; 0x50
 801f79a:	4aad      	ldr	r2, [pc, #692]	; (801fa50 <basic_init+0x66c>)
 801f79c:	fb82 1203 	smull	r1, r2, r2, r3
 801f7a0:	1192      	asrs	r2, r2, #6
 801f7a2:	17db      	asrs	r3, r3, #31
 801f7a4:	1ad3      	subs	r3, r2, r3
 801f7a6:	b29c      	uxth	r4, r3
 801f7a8:	e000      	b.n	801f7ac <basic_init+0x3c8>
 801f7aa:	2401      	movs	r4, #1
 801f7ac:	2000      	movs	r0, #0
 801f7ae:	f7fa fe33 	bl	801a418 <lv_disp_get_dpi>
 801f7b2:	4603      	mov	r3, r0
 801f7b4:	3328      	adds	r3, #40	; 0x28
 801f7b6:	005b      	lsls	r3, r3, #1
 801f7b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f7bc:	db0d      	blt.n	801f7da <basic_init+0x3f6>
 801f7be:	2000      	movs	r0, #0
 801f7c0:	f7fa fe2a 	bl	801a418 <lv_disp_get_dpi>
 801f7c4:	4603      	mov	r3, r0
 801f7c6:	3328      	adds	r3, #40	; 0x28
 801f7c8:	005b      	lsls	r3, r3, #1
 801f7ca:	4aa1      	ldr	r2, [pc, #644]	; (801fa50 <basic_init+0x66c>)
 801f7cc:	fb82 1203 	smull	r1, r2, r2, r3
 801f7d0:	1192      	asrs	r2, r2, #6
 801f7d2:	17db      	asrs	r3, r3, #31
 801f7d4:	1ad3      	subs	r3, r2, r3
 801f7d6:	b29b      	uxth	r3, r3
 801f7d8:	e000      	b.n	801f7dc <basic_init+0x3f8>
 801f7da:	2301      	movs	r3, #1
 801f7dc:	4423      	add	r3, r4
 801f7de:	b29b      	uxth	r3, r3
 801f7e0:	b21b      	sxth	r3, r3
 801f7e2:	461a      	mov	r2, r3
 801f7e4:	2100      	movs	r1, #0
 801f7e6:	4628      	mov	r0, r5
 801f7e8:	f7ff f95c 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f7ec:	4b97      	ldr	r3, [pc, #604]	; (801fa4c <basic_init+0x668>)
 801f7ee:	681b      	ldr	r3, [r3, #0]
 801f7f0:	1d1d      	adds	r5, r3, #4
 801f7f2:	2000      	movs	r0, #0
 801f7f4:	f7fa fe29 	bl	801a44a <lv_disp_get_size_category>
 801f7f8:	4603      	mov	r3, r0
 801f7fa:	2b01      	cmp	r3, #1
 801f7fc:	d81e      	bhi.n	801f83c <basic_init+0x458>
 801f7fe:	2000      	movs	r0, #0
 801f800:	f7fa fe0a 	bl	801a418 <lv_disp_get_dpi>
 801f804:	4603      	mov	r3, r0
 801f806:	461a      	mov	r2, r3
 801f808:	4613      	mov	r3, r2
 801f80a:	011b      	lsls	r3, r3, #4
 801f80c:	1a9b      	subs	r3, r3, r2
 801f80e:	3350      	adds	r3, #80	; 0x50
 801f810:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f814:	db10      	blt.n	801f838 <basic_init+0x454>
 801f816:	2000      	movs	r0, #0
 801f818:	f7fa fdfe 	bl	801a418 <lv_disp_get_dpi>
 801f81c:	4603      	mov	r3, r0
 801f81e:	461a      	mov	r2, r3
 801f820:	4613      	mov	r3, r2
 801f822:	011b      	lsls	r3, r3, #4
 801f824:	1a9b      	subs	r3, r3, r2
 801f826:	3350      	adds	r3, #80	; 0x50
 801f828:	4a89      	ldr	r2, [pc, #548]	; (801fa50 <basic_init+0x66c>)
 801f82a:	fb82 1203 	smull	r1, r2, r2, r3
 801f82e:	1192      	asrs	r2, r2, #6
 801f830:	17db      	asrs	r3, r3, #31
 801f832:	1ad3      	subs	r3, r2, r3
 801f834:	b29c      	uxth	r4, r3
 801f836:	e021      	b.n	801f87c <basic_init+0x498>
 801f838:	2401      	movs	r4, #1
 801f83a:	e01f      	b.n	801f87c <basic_init+0x498>
 801f83c:	2000      	movs	r0, #0
 801f83e:	f7fa fdeb 	bl	801a418 <lv_disp_get_dpi>
 801f842:	4603      	mov	r3, r0
 801f844:	461a      	mov	r2, r3
 801f846:	4613      	mov	r3, r2
 801f848:	011b      	lsls	r3, r3, #4
 801f84a:	1a9b      	subs	r3, r3, r2
 801f84c:	005b      	lsls	r3, r3, #1
 801f84e:	3350      	adds	r3, #80	; 0x50
 801f850:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f854:	db11      	blt.n	801f87a <basic_init+0x496>
 801f856:	2000      	movs	r0, #0
 801f858:	f7fa fdde 	bl	801a418 <lv_disp_get_dpi>
 801f85c:	4603      	mov	r3, r0
 801f85e:	461a      	mov	r2, r3
 801f860:	4613      	mov	r3, r2
 801f862:	011b      	lsls	r3, r3, #4
 801f864:	1a9b      	subs	r3, r3, r2
 801f866:	005b      	lsls	r3, r3, #1
 801f868:	3350      	adds	r3, #80	; 0x50
 801f86a:	4a79      	ldr	r2, [pc, #484]	; (801fa50 <basic_init+0x66c>)
 801f86c:	fb82 1203 	smull	r1, r2, r2, r3
 801f870:	1192      	asrs	r2, r2, #6
 801f872:	17db      	asrs	r3, r3, #31
 801f874:	1ad3      	subs	r3, r2, r3
 801f876:	b29c      	uxth	r4, r3
 801f878:	e000      	b.n	801f87c <basic_init+0x498>
 801f87a:	2401      	movs	r4, #1
 801f87c:	2000      	movs	r0, #0
 801f87e:	f7fa fdcb 	bl	801a418 <lv_disp_get_dpi>
 801f882:	4603      	mov	r3, r0
 801f884:	3328      	adds	r3, #40	; 0x28
 801f886:	005b      	lsls	r3, r3, #1
 801f888:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f88c:	db0d      	blt.n	801f8aa <basic_init+0x4c6>
 801f88e:	2000      	movs	r0, #0
 801f890:	f7fa fdc2 	bl	801a418 <lv_disp_get_dpi>
 801f894:	4603      	mov	r3, r0
 801f896:	3328      	adds	r3, #40	; 0x28
 801f898:	005b      	lsls	r3, r3, #1
 801f89a:	4a6d      	ldr	r2, [pc, #436]	; (801fa50 <basic_init+0x66c>)
 801f89c:	fb82 1203 	smull	r1, r2, r2, r3
 801f8a0:	1192      	asrs	r2, r2, #6
 801f8a2:	17db      	asrs	r3, r3, #31
 801f8a4:	1ad3      	subs	r3, r2, r3
 801f8a6:	b29b      	uxth	r3, r3
 801f8a8:	e000      	b.n	801f8ac <basic_init+0x4c8>
 801f8aa:	2301      	movs	r3, #1
 801f8ac:	4423      	add	r3, r4
 801f8ae:	b29b      	uxth	r3, r3
 801f8b0:	b21b      	sxth	r3, r3
 801f8b2:	461a      	mov	r2, r3
 801f8b4:	2100      	movs	r1, #0
 801f8b6:	4628      	mov	r0, r5
 801f8b8:	f7ff f90d 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f8bc:	4b63      	ldr	r3, [pc, #396]	; (801fa4c <basic_init+0x668>)
 801f8be:	681b      	ldr	r3, [r3, #0]
 801f8c0:	1d1d      	adds	r5, r3, #4
 801f8c2:	2000      	movs	r0, #0
 801f8c4:	f7fa fdc1 	bl	801a44a <lv_disp_get_size_category>
 801f8c8:	4603      	mov	r3, r0
 801f8ca:	2b01      	cmp	r3, #1
 801f8cc:	d81e      	bhi.n	801f90c <basic_init+0x528>
 801f8ce:	2000      	movs	r0, #0
 801f8d0:	f7fa fda2 	bl	801a418 <lv_disp_get_dpi>
 801f8d4:	4603      	mov	r3, r0
 801f8d6:	461a      	mov	r2, r3
 801f8d8:	4613      	mov	r3, r2
 801f8da:	011b      	lsls	r3, r3, #4
 801f8dc:	1a9b      	subs	r3, r3, r2
 801f8de:	3350      	adds	r3, #80	; 0x50
 801f8e0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f8e4:	db10      	blt.n	801f908 <basic_init+0x524>
 801f8e6:	2000      	movs	r0, #0
 801f8e8:	f7fa fd96 	bl	801a418 <lv_disp_get_dpi>
 801f8ec:	4603      	mov	r3, r0
 801f8ee:	461a      	mov	r2, r3
 801f8f0:	4613      	mov	r3, r2
 801f8f2:	011b      	lsls	r3, r3, #4
 801f8f4:	1a9b      	subs	r3, r3, r2
 801f8f6:	3350      	adds	r3, #80	; 0x50
 801f8f8:	4a55      	ldr	r2, [pc, #340]	; (801fa50 <basic_init+0x66c>)
 801f8fa:	fb82 1203 	smull	r1, r2, r2, r3
 801f8fe:	1192      	asrs	r2, r2, #6
 801f900:	17db      	asrs	r3, r3, #31
 801f902:	1ad3      	subs	r3, r2, r3
 801f904:	b29c      	uxth	r4, r3
 801f906:	e021      	b.n	801f94c <basic_init+0x568>
 801f908:	2401      	movs	r4, #1
 801f90a:	e01f      	b.n	801f94c <basic_init+0x568>
 801f90c:	2000      	movs	r0, #0
 801f90e:	f7fa fd83 	bl	801a418 <lv_disp_get_dpi>
 801f912:	4603      	mov	r3, r0
 801f914:	461a      	mov	r2, r3
 801f916:	4613      	mov	r3, r2
 801f918:	011b      	lsls	r3, r3, #4
 801f91a:	1a9b      	subs	r3, r3, r2
 801f91c:	005b      	lsls	r3, r3, #1
 801f91e:	3350      	adds	r3, #80	; 0x50
 801f920:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f924:	db11      	blt.n	801f94a <basic_init+0x566>
 801f926:	2000      	movs	r0, #0
 801f928:	f7fa fd76 	bl	801a418 <lv_disp_get_dpi>
 801f92c:	4603      	mov	r3, r0
 801f92e:	461a      	mov	r2, r3
 801f930:	4613      	mov	r3, r2
 801f932:	011b      	lsls	r3, r3, #4
 801f934:	1a9b      	subs	r3, r3, r2
 801f936:	005b      	lsls	r3, r3, #1
 801f938:	3350      	adds	r3, #80	; 0x50
 801f93a:	4a45      	ldr	r2, [pc, #276]	; (801fa50 <basic_init+0x66c>)
 801f93c:	fb82 1203 	smull	r1, r2, r2, r3
 801f940:	1192      	asrs	r2, r2, #6
 801f942:	17db      	asrs	r3, r3, #31
 801f944:	1ad3      	subs	r3, r2, r3
 801f946:	b29c      	uxth	r4, r3
 801f948:	e000      	b.n	801f94c <basic_init+0x568>
 801f94a:	2401      	movs	r4, #1
 801f94c:	2000      	movs	r0, #0
 801f94e:	f7fa fd63 	bl	801a418 <lv_disp_get_dpi>
 801f952:	4603      	mov	r3, r0
 801f954:	3328      	adds	r3, #40	; 0x28
 801f956:	005b      	lsls	r3, r3, #1
 801f958:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f95c:	db0d      	blt.n	801f97a <basic_init+0x596>
 801f95e:	2000      	movs	r0, #0
 801f960:	f7fa fd5a 	bl	801a418 <lv_disp_get_dpi>
 801f964:	4603      	mov	r3, r0
 801f966:	3328      	adds	r3, #40	; 0x28
 801f968:	005b      	lsls	r3, r3, #1
 801f96a:	4a39      	ldr	r2, [pc, #228]	; (801fa50 <basic_init+0x66c>)
 801f96c:	fb82 1203 	smull	r1, r2, r2, r3
 801f970:	1192      	asrs	r2, r2, #6
 801f972:	17db      	asrs	r3, r3, #31
 801f974:	1ad3      	subs	r3, r2, r3
 801f976:	b29b      	uxth	r3, r3
 801f978:	e000      	b.n	801f97c <basic_init+0x598>
 801f97a:	2301      	movs	r3, #1
 801f97c:	4423      	add	r3, r4
 801f97e:	b29b      	uxth	r3, r3
 801f980:	b21b      	sxth	r3, r3
 801f982:	461a      	mov	r2, r3
 801f984:	2100      	movs	r1, #0
 801f986:	4628      	mov	r0, r5
 801f988:	f7ff f85a 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f98c:	4b2f      	ldr	r3, [pc, #188]	; (801fa4c <basic_init+0x668>)
 801f98e:	681b      	ldr	r3, [r3, #0]
 801f990:	1d1d      	adds	r5, r3, #4
 801f992:	2000      	movs	r0, #0
 801f994:	f7fa fd59 	bl	801a44a <lv_disp_get_size_category>
 801f998:	4603      	mov	r3, r0
 801f99a:	2b01      	cmp	r3, #1
 801f99c:	d81e      	bhi.n	801f9dc <basic_init+0x5f8>
 801f99e:	2000      	movs	r0, #0
 801f9a0:	f7fa fd3a 	bl	801a418 <lv_disp_get_dpi>
 801f9a4:	4603      	mov	r3, r0
 801f9a6:	461a      	mov	r2, r3
 801f9a8:	4613      	mov	r3, r2
 801f9aa:	011b      	lsls	r3, r3, #4
 801f9ac:	1a9b      	subs	r3, r3, r2
 801f9ae:	3350      	adds	r3, #80	; 0x50
 801f9b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f9b4:	db10      	blt.n	801f9d8 <basic_init+0x5f4>
 801f9b6:	2000      	movs	r0, #0
 801f9b8:	f7fa fd2e 	bl	801a418 <lv_disp_get_dpi>
 801f9bc:	4603      	mov	r3, r0
 801f9be:	461a      	mov	r2, r3
 801f9c0:	4613      	mov	r3, r2
 801f9c2:	011b      	lsls	r3, r3, #4
 801f9c4:	1a9b      	subs	r3, r3, r2
 801f9c6:	3350      	adds	r3, #80	; 0x50
 801f9c8:	4a21      	ldr	r2, [pc, #132]	; (801fa50 <basic_init+0x66c>)
 801f9ca:	fb82 1203 	smull	r1, r2, r2, r3
 801f9ce:	1192      	asrs	r2, r2, #6
 801f9d0:	17db      	asrs	r3, r3, #31
 801f9d2:	1ad3      	subs	r3, r2, r3
 801f9d4:	b29c      	uxth	r4, r3
 801f9d6:	e021      	b.n	801fa1c <basic_init+0x638>
 801f9d8:	2401      	movs	r4, #1
 801f9da:	e01f      	b.n	801fa1c <basic_init+0x638>
 801f9dc:	2000      	movs	r0, #0
 801f9de:	f7fa fd1b 	bl	801a418 <lv_disp_get_dpi>
 801f9e2:	4603      	mov	r3, r0
 801f9e4:	461a      	mov	r2, r3
 801f9e6:	4613      	mov	r3, r2
 801f9e8:	011b      	lsls	r3, r3, #4
 801f9ea:	1a9b      	subs	r3, r3, r2
 801f9ec:	005b      	lsls	r3, r3, #1
 801f9ee:	3350      	adds	r3, #80	; 0x50
 801f9f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f9f4:	db11      	blt.n	801fa1a <basic_init+0x636>
 801f9f6:	2000      	movs	r0, #0
 801f9f8:	f7fa fd0e 	bl	801a418 <lv_disp_get_dpi>
 801f9fc:	4603      	mov	r3, r0
 801f9fe:	461a      	mov	r2, r3
 801fa00:	4613      	mov	r3, r2
 801fa02:	011b      	lsls	r3, r3, #4
 801fa04:	1a9b      	subs	r3, r3, r2
 801fa06:	005b      	lsls	r3, r3, #1
 801fa08:	3350      	adds	r3, #80	; 0x50
 801fa0a:	4a11      	ldr	r2, [pc, #68]	; (801fa50 <basic_init+0x66c>)
 801fa0c:	fb82 1203 	smull	r1, r2, r2, r3
 801fa10:	1192      	asrs	r2, r2, #6
 801fa12:	17db      	asrs	r3, r3, #31
 801fa14:	1ad3      	subs	r3, r2, r3
 801fa16:	b29c      	uxth	r4, r3
 801fa18:	e000      	b.n	801fa1c <basic_init+0x638>
 801fa1a:	2401      	movs	r4, #1
 801fa1c:	2000      	movs	r0, #0
 801fa1e:	f7fa fcfb 	bl	801a418 <lv_disp_get_dpi>
 801fa22:	4603      	mov	r3, r0
 801fa24:	3328      	adds	r3, #40	; 0x28
 801fa26:	005b      	lsls	r3, r3, #1
 801fa28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801fa2c:	db12      	blt.n	801fa54 <basic_init+0x670>
 801fa2e:	2000      	movs	r0, #0
 801fa30:	f7fa fcf2 	bl	801a418 <lv_disp_get_dpi>
 801fa34:	4603      	mov	r3, r0
 801fa36:	3328      	adds	r3, #40	; 0x28
 801fa38:	005b      	lsls	r3, r3, #1
 801fa3a:	4a05      	ldr	r2, [pc, #20]	; (801fa50 <basic_init+0x66c>)
 801fa3c:	fb82 1203 	smull	r1, r2, r2, r3
 801fa40:	1192      	asrs	r2, r2, #6
 801fa42:	17db      	asrs	r3, r3, #31
 801fa44:	1ad3      	subs	r3, r2, r3
 801fa46:	b29b      	uxth	r3, r3
 801fa48:	e005      	b.n	801fa56 <basic_init+0x672>
 801fa4a:	bf00      	nop
 801fa4c:	200200d4 	.word	0x200200d4
 801fa50:	66666667 	.word	0x66666667
 801fa54:	2301      	movs	r3, #1
 801fa56:	4423      	add	r3, r4
 801fa58:	b29b      	uxth	r3, r3
 801fa5a:	b21b      	sxth	r3, r3
 801fa5c:	461a      	mov	r2, r3
 801fa5e:	2100      	movs	r1, #0
 801fa60:	4628      	mov	r0, r5
 801fa62:	f7ff f806 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 801fa66:	4bba      	ldr	r3, [pc, #744]	; (801fd50 <basic_init+0x96c>)
 801fa68:	681b      	ldr	r3, [r3, #0]
 801fa6a:	1d1c      	adds	r4, r3, #4
 801fa6c:	2000      	movs	r0, #0
 801fa6e:	f7fa fcec 	bl	801a44a <lv_disp_get_size_category>
 801fa72:	4603      	mov	r3, r0
 801fa74:	2b01      	cmp	r3, #1
 801fa76:	d81e      	bhi.n	801fab6 <basic_init+0x6d2>
 801fa78:	2000      	movs	r0, #0
 801fa7a:	f7fa fccd 	bl	801a418 <lv_disp_get_dpi>
 801fa7e:	4603      	mov	r3, r0
 801fa80:	461a      	mov	r2, r3
 801fa82:	4613      	mov	r3, r2
 801fa84:	011b      	lsls	r3, r3, #4
 801fa86:	1a9b      	subs	r3, r3, r2
 801fa88:	3350      	adds	r3, #80	; 0x50
 801fa8a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801fa8e:	db10      	blt.n	801fab2 <basic_init+0x6ce>
 801fa90:	2000      	movs	r0, #0
 801fa92:	f7fa fcc1 	bl	801a418 <lv_disp_get_dpi>
 801fa96:	4603      	mov	r3, r0
 801fa98:	461a      	mov	r2, r3
 801fa9a:	4613      	mov	r3, r2
 801fa9c:	011b      	lsls	r3, r3, #4
 801fa9e:	1a9b      	subs	r3, r3, r2
 801faa0:	3350      	adds	r3, #80	; 0x50
 801faa2:	4aac      	ldr	r2, [pc, #688]	; (801fd54 <basic_init+0x970>)
 801faa4:	fb82 1203 	smull	r1, r2, r2, r3
 801faa8:	1192      	asrs	r2, r2, #6
 801faaa:	17db      	asrs	r3, r3, #31
 801faac:	1ad3      	subs	r3, r2, r3
 801faae:	b21b      	sxth	r3, r3
 801fab0:	e021      	b.n	801faf6 <basic_init+0x712>
 801fab2:	2301      	movs	r3, #1
 801fab4:	e01f      	b.n	801faf6 <basic_init+0x712>
 801fab6:	2000      	movs	r0, #0
 801fab8:	f7fa fcae 	bl	801a418 <lv_disp_get_dpi>
 801fabc:	4603      	mov	r3, r0
 801fabe:	461a      	mov	r2, r3
 801fac0:	4613      	mov	r3, r2
 801fac2:	011b      	lsls	r3, r3, #4
 801fac4:	1a9b      	subs	r3, r3, r2
 801fac6:	005b      	lsls	r3, r3, #1
 801fac8:	3350      	adds	r3, #80	; 0x50
 801faca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801face:	db11      	blt.n	801faf4 <basic_init+0x710>
 801fad0:	2000      	movs	r0, #0
 801fad2:	f7fa fca1 	bl	801a418 <lv_disp_get_dpi>
 801fad6:	4603      	mov	r3, r0
 801fad8:	461a      	mov	r2, r3
 801fada:	4613      	mov	r3, r2
 801fadc:	011b      	lsls	r3, r3, #4
 801fade:	1a9b      	subs	r3, r3, r2
 801fae0:	005b      	lsls	r3, r3, #1
 801fae2:	3350      	adds	r3, #80	; 0x50
 801fae4:	4a9b      	ldr	r2, [pc, #620]	; (801fd54 <basic_init+0x970>)
 801fae6:	fb82 1203 	smull	r1, r2, r2, r3
 801faea:	1192      	asrs	r2, r2, #6
 801faec:	17db      	asrs	r3, r3, #31
 801faee:	1ad3      	subs	r3, r2, r3
 801faf0:	b21b      	sxth	r3, r3
 801faf2:	e000      	b.n	801faf6 <basic_init+0x712>
 801faf4:	2301      	movs	r3, #1
 801faf6:	461a      	mov	r2, r3
 801faf8:	2100      	movs	r1, #0
 801fafa:	4620      	mov	r0, r4
 801fafc:	f7ff f804 	bl	801eb08 <lv_style_set_pad_inner>
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 801fb00:	4b93      	ldr	r3, [pc, #588]	; (801fd50 <basic_init+0x96c>)
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	3304      	adds	r3, #4
 801fb06:	2200      	movs	r2, #0
 801fb08:	2100      	movs	r1, #0
 801fb0a:	4618      	mov	r0, r3
 801fb0c:	f7ff fb5a 	bl	801f1c4 <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
 801fb10:	4b8f      	ldr	r3, [pc, #572]	; (801fd50 <basic_init+0x96c>)
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	3304      	adds	r3, #4
 801fb16:	2239      	movs	r2, #57	; 0x39
 801fb18:	2100      	movs	r1, #0
 801fb1a:	4618      	mov	r0, r3
 801fb1c:	f7ff fbcf 	bl	801f2be <lv_style_set_transition_prop_6>

    style_init_reset(&styles->bg_sec);
 801fb20:	4b8b      	ldr	r3, [pc, #556]	; (801fd50 <basic_init+0x96c>)
 801fb22:	681b      	ldr	r3, [r3, #0]
 801fb24:	330c      	adds	r3, #12
 801fb26:	4618      	mov	r0, r3
 801fb28:	f005 fc9e 	bl	8025468 <style_init_reset>
    lv_style_copy(&styles->bg_sec, &styles->bg);
 801fb2c:	4b88      	ldr	r3, [pc, #544]	; (801fd50 <basic_init+0x96c>)
 801fb2e:	681b      	ldr	r3, [r3, #0]
 801fb30:	f103 020c 	add.w	r2, r3, #12
 801fb34:	4b86      	ldr	r3, [pc, #536]	; (801fd50 <basic_init+0x96c>)
 801fb36:	681b      	ldr	r3, [r3, #0]
 801fb38:	3304      	adds	r3, #4
 801fb3a:	4619      	mov	r1, r3
 801fb3c:	4610      	mov	r0, r2
 801fb3e:	f7eb fabc 	bl	800b0ba <lv_style_copy>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
 801fb42:	4b83      	ldr	r3, [pc, #524]	; (801fd50 <basic_init+0x96c>)
 801fb44:	681b      	ldr	r3, [r3, #0]
 801fb46:	f103 040c 	add.w	r4, r3, #12
 801fb4a:	4b83      	ldr	r3, [pc, #524]	; (801fd58 <basic_init+0x974>)
 801fb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb4e:	f003 0302 	and.w	r3, r3, #2
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d004      	beq.n	801fb60 <basic_init+0x77c>
 801fb56:	4881      	ldr	r0, [pc, #516]	; (801fd5c <basic_init+0x978>)
 801fb58:	f7fe fec8 	bl	801e8ec <lv_color_hex>
 801fb5c:	4603      	mov	r3, r0
 801fb5e:	e003      	b.n	801fb68 <basic_init+0x784>
 801fb60:	487f      	ldr	r0, [pc, #508]	; (801fd60 <basic_init+0x97c>)
 801fb62:	f7fe fec3 	bl	801e8ec <lv_color_hex>
 801fb66:	4603      	mov	r3, r0
 801fb68:	461a      	mov	r2, r3
 801fb6a:	2100      	movs	r1, #0
 801fb6c:	4620      	mov	r0, r4
 801fb6e:	f7ff f848 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
 801fb72:	4b77      	ldr	r3, [pc, #476]	; (801fd50 <basic_init+0x96c>)
 801fb74:	681b      	ldr	r3, [r3, #0]
 801fb76:	f103 040c 	add.w	r4, r3, #12
 801fb7a:	4b77      	ldr	r3, [pc, #476]	; (801fd58 <basic_init+0x974>)
 801fb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb7e:	f003 0302 	and.w	r3, r3, #2
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	d004      	beq.n	801fb90 <basic_init+0x7ac>
 801fb86:	4877      	ldr	r0, [pc, #476]	; (801fd64 <basic_init+0x980>)
 801fb88:	f7fe feb0 	bl	801e8ec <lv_color_hex>
 801fb8c:	4603      	mov	r3, r0
 801fb8e:	e003      	b.n	801fb98 <basic_init+0x7b4>
 801fb90:	4875      	ldr	r0, [pc, #468]	; (801fd68 <basic_init+0x984>)
 801fb92:	f7fe feab 	bl	801e8ec <lv_color_hex>
 801fb96:	4603      	mov	r3, r0
 801fb98:	461a      	mov	r2, r3
 801fb9a:	2100      	movs	r1, #0
 801fb9c:	4620      	mov	r0, r4
 801fb9e:	f7ff f8aa 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801fba2:	4b6b      	ldr	r3, [pc, #428]	; (801fd50 <basic_init+0x96c>)
 801fba4:	681b      	ldr	r3, [r3, #0]
 801fba6:	f103 040c 	add.w	r4, r3, #12
 801fbaa:	4b6b      	ldr	r3, [pc, #428]	; (801fd58 <basic_init+0x974>)
 801fbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbae:	f003 0302 	and.w	r3, r3, #2
 801fbb2:	2b00      	cmp	r3, #0
 801fbb4:	d004      	beq.n	801fbc0 <basic_init+0x7dc>
 801fbb6:	486d      	ldr	r0, [pc, #436]	; (801fd6c <basic_init+0x988>)
 801fbb8:	f7fe fe98 	bl	801e8ec <lv_color_hex>
 801fbbc:	4603      	mov	r3, r0
 801fbbe:	e003      	b.n	801fbc8 <basic_init+0x7e4>
 801fbc0:	486b      	ldr	r0, [pc, #428]	; (801fd70 <basic_init+0x98c>)
 801fbc2:	f7fe fe93 	bl	801e8ec <lv_color_hex>
 801fbc6:	4603      	mov	r3, r0
 801fbc8:	461a      	mov	r2, r3
 801fbca:	2100      	movs	r1, #0
 801fbcc:	4620      	mov	r0, r4
 801fbce:	f7ff f9fb 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801fbd2:	4b5f      	ldr	r3, [pc, #380]	; (801fd50 <basic_init+0x96c>)
 801fbd4:	681b      	ldr	r3, [r3, #0]
 801fbd6:	f103 040c 	add.w	r4, r3, #12
 801fbda:	4b5f      	ldr	r3, [pc, #380]	; (801fd58 <basic_init+0x974>)
 801fbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbde:	f003 0302 	and.w	r3, r3, #2
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	d004      	beq.n	801fbf0 <basic_init+0x80c>
 801fbe6:	4861      	ldr	r0, [pc, #388]	; (801fd6c <basic_init+0x988>)
 801fbe8:	f7fe fe80 	bl	801e8ec <lv_color_hex>
 801fbec:	4603      	mov	r3, r0
 801fbee:	e003      	b.n	801fbf8 <basic_init+0x814>
 801fbf0:	485f      	ldr	r0, [pc, #380]	; (801fd70 <basic_init+0x98c>)
 801fbf2:	f7fe fe7b 	bl	801e8ec <lv_color_hex>
 801fbf6:	4603      	mov	r3, r0
 801fbf8:	461a      	mov	r2, r3
 801fbfa:	2100      	movs	r1, #0
 801fbfc:	4620      	mov	r0, r4
 801fbfe:	f7ff f999 	bl	801ef34 <lv_style_set_value_color>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801fc02:	4b53      	ldr	r3, [pc, #332]	; (801fd50 <basic_init+0x96c>)
 801fc04:	681b      	ldr	r3, [r3, #0]
 801fc06:	f103 040c 	add.w	r4, r3, #12
 801fc0a:	4b53      	ldr	r3, [pc, #332]	; (801fd58 <basic_init+0x974>)
 801fc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc0e:	f003 0302 	and.w	r3, r3, #2
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	d004      	beq.n	801fc20 <basic_init+0x83c>
 801fc16:	4855      	ldr	r0, [pc, #340]	; (801fd6c <basic_init+0x988>)
 801fc18:	f7fe fe68 	bl	801e8ec <lv_color_hex>
 801fc1c:	4603      	mov	r3, r0
 801fc1e:	e003      	b.n	801fc28 <basic_init+0x844>
 801fc20:	4853      	ldr	r0, [pc, #332]	; (801fd70 <basic_init+0x98c>)
 801fc22:	f7fe fe63 	bl	801e8ec <lv_color_hex>
 801fc26:	4603      	mov	r3, r0
 801fc28:	461a      	mov	r2, r3
 801fc2a:	2100      	movs	r1, #0
 801fc2c:	4620      	mov	r0, r4
 801fc2e:	f7ff faaf 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801fc32:	4b47      	ldr	r3, [pc, #284]	; (801fd50 <basic_init+0x96c>)
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	f103 040c 	add.w	r4, r3, #12
 801fc3a:	4b47      	ldr	r3, [pc, #284]	; (801fd58 <basic_init+0x974>)
 801fc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc3e:	f003 0302 	and.w	r3, r3, #2
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d004      	beq.n	801fc50 <basic_init+0x86c>
 801fc46:	4849      	ldr	r0, [pc, #292]	; (801fd6c <basic_init+0x988>)
 801fc48:	f7fe fe50 	bl	801e8ec <lv_color_hex>
 801fc4c:	4603      	mov	r3, r0
 801fc4e:	e003      	b.n	801fc58 <basic_init+0x874>
 801fc50:	4847      	ldr	r0, [pc, #284]	; (801fd70 <basic_init+0x98c>)
 801fc52:	f7fe fe4b 	bl	801e8ec <lv_color_hex>
 801fc56:	4603      	mov	r3, r0
 801fc58:	461a      	mov	r2, r3
 801fc5a:	2100      	movs	r1, #0
 801fc5c:	4620      	mov	r0, r4
 801fc5e:	f7ff fa7f 	bl	801f160 <lv_style_set_line_color>

    style_init_reset(&styles->bg_click);
 801fc62:	4b3b      	ldr	r3, [pc, #236]	; (801fd50 <basic_init+0x96c>)
 801fc64:	681b      	ldr	r3, [r3, #0]
 801fc66:	3308      	adds	r3, #8
 801fc68:	4618      	mov	r0, r3
 801fc6a:	f005 fbfd 	bl	8025468 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
 801fc6e:	4b38      	ldr	r3, [pc, #224]	; (801fd50 <basic_init+0x96c>)
 801fc70:	681b      	ldr	r3, [r3, #0]
 801fc72:	f103 0408 	add.w	r4, r3, #8
 801fc76:	4b38      	ldr	r3, [pc, #224]	; (801fd58 <basic_init+0x974>)
 801fc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc7a:	f003 0302 	and.w	r3, r3, #2
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d004      	beq.n	801fc8c <basic_init+0x8a8>
 801fc82:	483c      	ldr	r0, [pc, #240]	; (801fd74 <basic_init+0x990>)
 801fc84:	f7fe fe32 	bl	801e8ec <lv_color_hex>
 801fc88:	4603      	mov	r3, r0
 801fc8a:	e003      	b.n	801fc94 <basic_init+0x8b0>
 801fc8c:	483a      	ldr	r0, [pc, #232]	; (801fd78 <basic_init+0x994>)
 801fc8e:	f7fe fe2d 	bl	801e8ec <lv_color_hex>
 801fc92:	4603      	mov	r3, r0
 801fc94:	461a      	mov	r2, r3
 801fc96:	2110      	movs	r1, #16
 801fc98:	4620      	mov	r0, r4
 801fc9a:	f7fe ffb2 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
 801fc9e:	4b2c      	ldr	r3, [pc, #176]	; (801fd50 <basic_init+0x96c>)
 801fca0:	681b      	ldr	r3, [r3, #0]
 801fca2:	f103 0008 	add.w	r0, r3, #8
 801fca6:	4b2c      	ldr	r3, [pc, #176]	; (801fd58 <basic_init+0x974>)
 801fca8:	68da      	ldr	r2, [r3, #12]
 801fcaa:	2101      	movs	r1, #1
 801fcac:	f7fe ffa9 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
 801fcb0:	4b27      	ldr	r3, [pc, #156]	; (801fd50 <basic_init+0x96c>)
 801fcb2:	681b      	ldr	r3, [r3, #0]
 801fcb4:	f103 0408 	add.w	r4, r3, #8
 801fcb8:	4b27      	ldr	r3, [pc, #156]	; (801fd58 <basic_init+0x974>)
 801fcba:	2133      	movs	r1, #51	; 0x33
 801fcbc:	68d8      	ldr	r0, [r3, #12]
 801fcbe:	f7fb ff41 	bl	801bb44 <lv_color_darken>
 801fcc2:	4603      	mov	r3, r0
 801fcc4:	461a      	mov	r2, r3
 801fcc6:	2111      	movs	r1, #17
 801fcc8:	4620      	mov	r0, r4
 801fcca:	f7fe ff9a 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
 801fcce:	4b20      	ldr	r3, [pc, #128]	; (801fd50 <basic_init+0x96c>)
 801fcd0:	681b      	ldr	r3, [r3, #0]
 801fcd2:	f103 0408 	add.w	r4, r3, #8
 801fcd6:	4b20      	ldr	r3, [pc, #128]	; (801fd58 <basic_init+0x974>)
 801fcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fcda:	f003 0302 	and.w	r3, r3, #2
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d005      	beq.n	801fcee <basic_init+0x90a>
 801fce2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fce6:	f7fe fe01 	bl	801e8ec <lv_color_hex>
 801fcea:	4603      	mov	r3, r0
 801fcec:	e003      	b.n	801fcf6 <basic_init+0x912>
 801fcee:	4823      	ldr	r0, [pc, #140]	; (801fd7c <basic_init+0x998>)
 801fcf0:	f7fe fdfc 	bl	801e8ec <lv_color_hex>
 801fcf4:	4603      	mov	r3, r0
 801fcf6:	461a      	mov	r2, r3
 801fcf8:	2120      	movs	r1, #32
 801fcfa:	4620      	mov	r0, r4
 801fcfc:	f7fe ff81 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
 801fd00:	4b13      	ldr	r3, [pc, #76]	; (801fd50 <basic_init+0x96c>)
 801fd02:	681b      	ldr	r3, [r3, #0]
 801fd04:	3308      	adds	r3, #8
 801fd06:	2200      	movs	r2, #0
 801fd08:	2101      	movs	r1, #1
 801fd0a:	4618      	mov	r0, r3
 801fd0c:	f7fe ffa8 	bl	801ec60 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
 801fd10:	4b0f      	ldr	r3, [pc, #60]	; (801fd50 <basic_init+0x96c>)
 801fd12:	681b      	ldr	r3, [r3, #0]
 801fd14:	f103 0408 	add.w	r4, r3, #8
 801fd18:	4b0f      	ldr	r3, [pc, #60]	; (801fd58 <basic_init+0x974>)
 801fd1a:	2133      	movs	r1, #51	; 0x33
 801fd1c:	68d8      	ldr	r0, [r3, #12]
 801fd1e:	f7fb ff11 	bl	801bb44 <lv_color_darken>
 801fd22:	4603      	mov	r3, r0
 801fd24:	461a      	mov	r2, r3
 801fd26:	2112      	movs	r1, #18
 801fd28:	4620      	mov	r0, r4
 801fd2a:	f7fe ffe4 	bl	801ecf6 <lv_style_set_border_color>
                                                                                                      LV_OPA_20));
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
 801fd2e:	4b08      	ldr	r3, [pc, #32]	; (801fd50 <basic_init+0x96c>)
 801fd30:	681b      	ldr	r3, [r3, #0]
 801fd32:	f103 0408 	add.w	r4, r3, #8
 801fd36:	4b08      	ldr	r3, [pc, #32]	; (801fd58 <basic_init+0x974>)
 801fd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd3a:	f003 0302 	and.w	r3, r3, #2
 801fd3e:	2b00      	cmp	r3, #0
 801fd40:	d01e      	beq.n	801fd80 <basic_init+0x99c>
 801fd42:	f640 40cc 	movw	r0, #3276	; 0xccc
 801fd46:	f7fe fde5 	bl	801e914 <lv_color_hex3>
 801fd4a:	4603      	mov	r3, r0
 801fd4c:	e01c      	b.n	801fd88 <basic_init+0x9a4>
 801fd4e:	bf00      	nop
 801fd50:	200200d4 	.word	0x200200d4
 801fd54:	66666667 	.word	0x66666667
 801fd58:	200200a8 	.word	0x200200a8
 801fd5c:	00d4d7d9 	.word	0x00d4d7d9
 801fd60:	0045494d 	.word	0x0045494d
 801fd64:	00dfe7ed 	.word	0x00dfe7ed
 801fd68:	00404040 	.word	0x00404040
 801fd6c:	0031404f 	.word	0x0031404f
 801fd70:	00a5a8ad 	.word	0x00a5a8ad
 801fd74:	00eeeeee 	.word	0x00eeeeee
 801fd78:	00494f57 	.word	0x00494f57
 801fd7c:	00586273 	.word	0x00586273
 801fd80:	48c1      	ldr	r0, [pc, #772]	; (8020088 <basic_init+0xca4>)
 801fd82:	f7fe fdb3 	bl	801e8ec <lv_color_hex>
 801fd86:	4603      	mov	r3, r0
 801fd88:	461a      	mov	r2, r3
 801fd8a:	2110      	movs	r1, #16
 801fd8c:	4620      	mov	r0, r4
 801fd8e:	f7fe ffb2 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
 801fd92:	4bbe      	ldr	r3, [pc, #760]	; (802008c <basic_init+0xca8>)
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	f103 0408 	add.w	r4, r3, #8
 801fd9a:	4bbd      	ldr	r3, [pc, #756]	; (8020090 <basic_init+0xcac>)
 801fd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd9e:	f003 0302 	and.w	r3, r3, #2
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d004      	beq.n	801fdb0 <basic_init+0x9cc>
 801fda6:	48bb      	ldr	r0, [pc, #748]	; (8020094 <basic_init+0xcb0>)
 801fda8:	f7fe fda0 	bl	801e8ec <lv_color_hex>
 801fdac:	4603      	mov	r3, r0
 801fdae:	e003      	b.n	801fdb8 <basic_init+0x9d4>
 801fdb0:	48b5      	ldr	r0, [pc, #724]	; (8020088 <basic_init+0xca4>)
 801fdb2:	f7fe fd9b 	bl	801e8ec <lv_color_hex>
 801fdb6:	4603      	mov	r3, r0
 801fdb8:	461a      	mov	r2, r3
 801fdba:	2101      	movs	r1, #1
 801fdbc:	4620      	mov	r0, r4
 801fdbe:	f7fe ff9a 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
 801fdc2:	4bb2      	ldr	r3, [pc, #712]	; (802008c <basic_init+0xca8>)
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	f103 0408 	add.w	r4, r3, #8
 801fdca:	4bb1      	ldr	r3, [pc, #708]	; (8020090 <basic_init+0xcac>)
 801fdcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdce:	f003 0302 	and.w	r3, r3, #2
 801fdd2:	2b00      	cmp	r3, #0
 801fdd4:	d004      	beq.n	801fde0 <basic_init+0x9fc>
 801fdd6:	48af      	ldr	r0, [pc, #700]	; (8020094 <basic_init+0xcb0>)
 801fdd8:	f7fe fd88 	bl	801e8ec <lv_color_hex>
 801fddc:	4603      	mov	r3, r0
 801fdde:	e003      	b.n	801fde8 <basic_init+0xa04>
 801fde0:	48a9      	ldr	r0, [pc, #676]	; (8020088 <basic_init+0xca4>)
 801fde2:	f7fe fd83 	bl	801e8ec <lv_color_hex>
 801fde6:	4603      	mov	r3, r0
 801fde8:	461a      	mov	r2, r3
 801fdea:	2111      	movs	r1, #17
 801fdec:	4620      	mov	r0, r4
 801fdee:	f7fe ff82 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
 801fdf2:	4ba6      	ldr	r3, [pc, #664]	; (802008c <basic_init+0xca8>)
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	f103 0408 	add.w	r4, r3, #8
 801fdfa:	4ba5      	ldr	r3, [pc, #660]	; (8020090 <basic_init+0xcac>)
 801fdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdfe:	f003 0302 	and.w	r3, r3, #2
 801fe02:	2b00      	cmp	r3, #0
 801fe04:	d004      	beq.n	801fe10 <basic_init+0xa2c>
 801fe06:	48a4      	ldr	r0, [pc, #656]	; (8020098 <basic_init+0xcb4>)
 801fe08:	f7fe fd70 	bl	801e8ec <lv_color_hex>
 801fe0c:	4603      	mov	r3, r0
 801fe0e:	e003      	b.n	801fe18 <basic_init+0xa34>
 801fe10:	489d      	ldr	r0, [pc, #628]	; (8020088 <basic_init+0xca4>)
 801fe12:	f7fe fd6b 	bl	801e8ec <lv_color_hex>
 801fe16:	4603      	mov	r3, r0
 801fe18:	461a      	mov	r2, r3
 801fe1a:	2120      	movs	r1, #32
 801fe1c:	4620      	mov	r0, r4
 801fe1e:	f7fe ff6a 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 801fe22:	4b9a      	ldr	r3, [pc, #616]	; (802008c <basic_init+0xca8>)
 801fe24:	681b      	ldr	r3, [r3, #0]
 801fe26:	f103 0408 	add.w	r4, r3, #8
 801fe2a:	4b99      	ldr	r3, [pc, #612]	; (8020090 <basic_init+0xcac>)
 801fe2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe2e:	f003 0302 	and.w	r3, r3, #2
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d004      	beq.n	801fe40 <basic_init+0xa5c>
 801fe36:	4897      	ldr	r0, [pc, #604]	; (8020094 <basic_init+0xcb0>)
 801fe38:	f7fe fd58 	bl	801e8ec <lv_color_hex>
 801fe3c:	4603      	mov	r3, r0
 801fe3e:	e004      	b.n	801fe4a <basic_init+0xa66>
 801fe40:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fe44:	f7fe fd52 	bl	801e8ec <lv_color_hex>
 801fe48:	4603      	mov	r3, r0
 801fe4a:	461a      	mov	r2, r3
 801fe4c:	2110      	movs	r1, #16
 801fe4e:	4620      	mov	r0, r4
 801fe50:	f7ff f8ba 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 801fe54:	4b8d      	ldr	r3, [pc, #564]	; (802008c <basic_init+0xca8>)
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	f103 0408 	add.w	r4, r3, #8
 801fe5c:	4b8c      	ldr	r3, [pc, #560]	; (8020090 <basic_init+0xcac>)
 801fe5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe60:	f003 0302 	and.w	r3, r3, #2
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d005      	beq.n	801fe74 <basic_init+0xa90>
 801fe68:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fe6c:	f7fe fd3e 	bl	801e8ec <lv_color_hex>
 801fe70:	4603      	mov	r3, r0
 801fe72:	e004      	b.n	801fe7e <basic_init+0xa9a>
 801fe74:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fe78:	f7fe fd38 	bl	801e8ec <lv_color_hex>
 801fe7c:	4603      	mov	r3, r0
 801fe7e:	461a      	mov	r2, r3
 801fe80:	2101      	movs	r1, #1
 801fe82:	4620      	mov	r0, r4
 801fe84:	f7ff f8a0 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 801fe88:	4b80      	ldr	r3, [pc, #512]	; (802008c <basic_init+0xca8>)
 801fe8a:	681b      	ldr	r3, [r3, #0]
 801fe8c:	f103 0408 	add.w	r4, r3, #8
 801fe90:	4b7f      	ldr	r3, [pc, #508]	; (8020090 <basic_init+0xcac>)
 801fe92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe94:	f003 0302 	and.w	r3, r3, #2
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d005      	beq.n	801fea8 <basic_init+0xac4>
 801fe9c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fea0:	f7fe fd24 	bl	801e8ec <lv_color_hex>
 801fea4:	4603      	mov	r3, r0
 801fea6:	e004      	b.n	801feb2 <basic_init+0xace>
 801fea8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801feac:	f7fe fd1e 	bl	801e8ec <lv_color_hex>
 801feb0:	4603      	mov	r3, r0
 801feb2:	461a      	mov	r2, r3
 801feb4:	2111      	movs	r1, #17
 801feb6:	4620      	mov	r0, r4
 801feb8:	f7ff f886 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 801febc:	4b73      	ldr	r3, [pc, #460]	; (802008c <basic_init+0xca8>)
 801febe:	681b      	ldr	r3, [r3, #0]
 801fec0:	f103 0408 	add.w	r4, r3, #8
 801fec4:	4b72      	ldr	r3, [pc, #456]	; (8020090 <basic_init+0xcac>)
 801fec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fec8:	f003 0302 	and.w	r3, r3, #2
 801fecc:	2b00      	cmp	r3, #0
 801fece:	d005      	beq.n	801fedc <basic_init+0xaf8>
 801fed0:	f640 20aa 	movw	r0, #2730	; 0xaaa
 801fed4:	f7fe fd1e 	bl	801e914 <lv_color_hex3>
 801fed8:	4603      	mov	r3, r0
 801feda:	e004      	b.n	801fee6 <basic_init+0xb02>
 801fedc:	f640 1099 	movw	r0, #2457	; 0x999
 801fee0:	f7fe fd18 	bl	801e914 <lv_color_hex3>
 801fee4:	4603      	mov	r3, r0
 801fee6:	461a      	mov	r2, r3
 801fee8:	2120      	movs	r1, #32
 801feea:	4620      	mov	r0, r4
 801feec:	f7ff f86c 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 801fef0:	4b66      	ldr	r3, [pc, #408]	; (802008c <basic_init+0xca8>)
 801fef2:	681b      	ldr	r3, [r3, #0]
 801fef4:	f103 0408 	add.w	r4, r3, #8
 801fef8:	4b65      	ldr	r3, [pc, #404]	; (8020090 <basic_init+0xcac>)
 801fefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fefc:	f003 0302 	and.w	r3, r3, #2
 801ff00:	2b00      	cmp	r3, #0
 801ff02:	d004      	beq.n	801ff0e <basic_init+0xb2a>
 801ff04:	4863      	ldr	r0, [pc, #396]	; (8020094 <basic_init+0xcb0>)
 801ff06:	f7fe fcf1 	bl	801e8ec <lv_color_hex>
 801ff0a:	4603      	mov	r3, r0
 801ff0c:	e004      	b.n	801ff18 <basic_init+0xb34>
 801ff0e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff12:	f7fe fceb 	bl	801e8ec <lv_color_hex>
 801ff16:	4603      	mov	r3, r0
 801ff18:	461a      	mov	r2, r3
 801ff1a:	2110      	movs	r1, #16
 801ff1c:	4620      	mov	r0, r4
 801ff1e:	f7ff f937 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 801ff22:	4b5a      	ldr	r3, [pc, #360]	; (802008c <basic_init+0xca8>)
 801ff24:	681b      	ldr	r3, [r3, #0]
 801ff26:	f103 0408 	add.w	r4, r3, #8
 801ff2a:	4b59      	ldr	r3, [pc, #356]	; (8020090 <basic_init+0xcac>)
 801ff2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff2e:	f003 0302 	and.w	r3, r3, #2
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	d005      	beq.n	801ff42 <basic_init+0xb5e>
 801ff36:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff3a:	f7fe fcd7 	bl	801e8ec <lv_color_hex>
 801ff3e:	4603      	mov	r3, r0
 801ff40:	e004      	b.n	801ff4c <basic_init+0xb68>
 801ff42:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff46:	f7fe fcd1 	bl	801e8ec <lv_color_hex>
 801ff4a:	4603      	mov	r3, r0
 801ff4c:	461a      	mov	r2, r3
 801ff4e:	2101      	movs	r1, #1
 801ff50:	4620      	mov	r0, r4
 801ff52:	f7ff f91d 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 801ff56:	4b4d      	ldr	r3, [pc, #308]	; (802008c <basic_init+0xca8>)
 801ff58:	681b      	ldr	r3, [r3, #0]
 801ff5a:	f103 0408 	add.w	r4, r3, #8
 801ff5e:	4b4c      	ldr	r3, [pc, #304]	; (8020090 <basic_init+0xcac>)
 801ff60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff62:	f003 0302 	and.w	r3, r3, #2
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d005      	beq.n	801ff76 <basic_init+0xb92>
 801ff6a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff6e:	f7fe fcbd 	bl	801e8ec <lv_color_hex>
 801ff72:	4603      	mov	r3, r0
 801ff74:	e004      	b.n	801ff80 <basic_init+0xb9c>
 801ff76:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff7a:	f7fe fcb7 	bl	801e8ec <lv_color_hex>
 801ff7e:	4603      	mov	r3, r0
 801ff80:	461a      	mov	r2, r3
 801ff82:	2111      	movs	r1, #17
 801ff84:	4620      	mov	r0, r4
 801ff86:	f7ff f903 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 801ff8a:	4b40      	ldr	r3, [pc, #256]	; (802008c <basic_init+0xca8>)
 801ff8c:	681b      	ldr	r3, [r3, #0]
 801ff8e:	f103 0408 	add.w	r4, r3, #8
 801ff92:	4b3f      	ldr	r3, [pc, #252]	; (8020090 <basic_init+0xcac>)
 801ff94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff96:	f003 0302 	and.w	r3, r3, #2
 801ff9a:	2b00      	cmp	r3, #0
 801ff9c:	d005      	beq.n	801ffaa <basic_init+0xbc6>
 801ff9e:	f640 20aa 	movw	r0, #2730	; 0xaaa
 801ffa2:	f7fe fcb7 	bl	801e914 <lv_color_hex3>
 801ffa6:	4603      	mov	r3, r0
 801ffa8:	e004      	b.n	801ffb4 <basic_init+0xbd0>
 801ffaa:	f640 1099 	movw	r0, #2457	; 0x999
 801ffae:	f7fe fcb1 	bl	801e914 <lv_color_hex3>
 801ffb2:	4603      	mov	r3, r0
 801ffb4:	461a      	mov	r2, r3
 801ffb6:	2120      	movs	r1, #32
 801ffb8:	4620      	mov	r0, r4
 801ffba:	f7ff f8e9 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 801ffbe:	4b33      	ldr	r3, [pc, #204]	; (802008c <basic_init+0xca8>)
 801ffc0:	681b      	ldr	r3, [r3, #0]
 801ffc2:	3308      	adds	r3, #8
 801ffc4:	2229      	movs	r2, #41	; 0x29
 801ffc6:	2100      	movs	r1, #0
 801ffc8:	4618      	mov	r0, r3
 801ffca:	f7ff f95f 	bl	801f28c <lv_style_set_transition_prop_5>

    style_init_reset(&styles->btn);
 801ffce:	4b2f      	ldr	r3, [pc, #188]	; (802008c <basic_init+0xca8>)
 801ffd0:	681b      	ldr	r3, [r3, #0]
 801ffd2:	3310      	adds	r3, #16
 801ffd4:	4618      	mov	r0, r3
 801ffd6:	f005 fa47 	bl	8025468 <style_init_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 801ffda:	4b2c      	ldr	r3, [pc, #176]	; (802008c <basic_init+0xca8>)
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	3310      	adds	r3, #16
 801ffe0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ffe4:	2100      	movs	r1, #0
 801ffe6:	4618      	mov	r0, r3
 801ffe8:	f7fe fcc6 	bl	801e978 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 801ffec:	4b27      	ldr	r3, [pc, #156]	; (802008c <basic_init+0xca8>)
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	3310      	adds	r3, #16
 801fff2:	22ff      	movs	r2, #255	; 0xff
 801fff4:	2100      	movs	r1, #0
 801fff6:	4618      	mov	r0, r3
 801fff8:	f7fe fe1a 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
 801fffc:	4b23      	ldr	r3, [pc, #140]	; (802008c <basic_init+0xca8>)
 801fffe:	681b      	ldr	r3, [r3, #0]
 8020000:	f103 0410 	add.w	r4, r3, #16
 8020004:	4b22      	ldr	r3, [pc, #136]	; (8020090 <basic_init+0xcac>)
 8020006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020008:	f003 0302 	and.w	r3, r3, #2
 802000c:	2b00      	cmp	r3, #0
 802000e:	d005      	beq.n	802001c <basic_init+0xc38>
 8020010:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020014:	f7fe fc6a 	bl	801e8ec <lv_color_hex>
 8020018:	4603      	mov	r3, r0
 802001a:	e003      	b.n	8020024 <basic_init+0xc40>
 802001c:	481f      	ldr	r0, [pc, #124]	; (802009c <basic_init+0xcb8>)
 802001e:	f7fe fc65 	bl	801e8ec <lv_color_hex>
 8020022:	4603      	mov	r3, r0
 8020024:	461a      	mov	r2, r3
 8020026:	2100      	movs	r1, #0
 8020028:	4620      	mov	r0, r4
 802002a:	f7fe fdea 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
 802002e:	4b17      	ldr	r3, [pc, #92]	; (802008c <basic_init+0xca8>)
 8020030:	681b      	ldr	r3, [r3, #0]
 8020032:	f103 0410 	add.w	r4, r3, #16
 8020036:	4b16      	ldr	r3, [pc, #88]	; (8020090 <basic_init+0xcac>)
 8020038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802003a:	f003 0302 	and.w	r3, r3, #2
 802003e:	2b00      	cmp	r3, #0
 8020040:	d016      	beq.n	8020070 <basic_init+0xc8c>
 8020042:	4b13      	ldr	r3, [pc, #76]	; (8020090 <basic_init+0xcac>)
 8020044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020046:	f003 0302 	and.w	r3, r3, #2
 802004a:	2b00      	cmp	r3, #0
 802004c:	d005      	beq.n	802005a <basic_init+0xc76>
 802004e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020052:	f7fe fc4b 	bl	801e8ec <lv_color_hex>
 8020056:	4601      	mov	r1, r0
 8020058:	e003      	b.n	8020062 <basic_init+0xc7e>
 802005a:	4810      	ldr	r0, [pc, #64]	; (802009c <basic_init+0xcb8>)
 802005c:	f7fe fc46 	bl	801e8ec <lv_color_hex>
 8020060:	4601      	mov	r1, r0
 8020062:	4b0b      	ldr	r3, [pc, #44]	; (8020090 <basic_init+0xcac>)
 8020064:	2233      	movs	r2, #51	; 0x33
 8020066:	68d8      	ldr	r0, [r3, #12]
 8020068:	f7fe fbd2 	bl	801e810 <lv_color_mix>
 802006c:	4603      	mov	r3, r0
 802006e:	e021      	b.n	80200b4 <basic_init+0xcd0>
 8020070:	4b07      	ldr	r3, [pc, #28]	; (8020090 <basic_init+0xcac>)
 8020072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020074:	f003 0302 	and.w	r3, r3, #2
 8020078:	2b00      	cmp	r3, #0
 802007a:	d011      	beq.n	80200a0 <basic_init+0xcbc>
 802007c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020080:	f7fe fc34 	bl	801e8ec <lv_color_hex>
 8020084:	4601      	mov	r1, r0
 8020086:	e00f      	b.n	80200a8 <basic_init+0xcc4>
 8020088:	005f656e 	.word	0x005f656e
 802008c:	200200d4 	.word	0x200200d4
 8020090:	200200a8 	.word	0x200200a8
 8020094:	003b3e42 	.word	0x003b3e42
 8020098:	00d6dde3 	.word	0x00d6dde3
 802009c:	00586273 	.word	0x00586273
 80200a0:	48c4      	ldr	r0, [pc, #784]	; (80203b4 <basic_init+0xfd0>)
 80200a2:	f7fe fc23 	bl	801e8ec <lv_color_hex>
 80200a6:	4601      	mov	r1, r0
 80200a8:	4bc3      	ldr	r3, [pc, #780]	; (80203b8 <basic_init+0xfd4>)
 80200aa:	224c      	movs	r2, #76	; 0x4c
 80200ac:	68d8      	ldr	r0, [r3, #12]
 80200ae:	f7fe fbaf 	bl	801e810 <lv_color_mix>
 80200b2:	4603      	mov	r3, r0
 80200b4:	461a      	mov	r2, r3
 80200b6:	2110      	movs	r1, #16
 80200b8:	4620      	mov	r0, r4
 80200ba:	f7fe fda2 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
 80200be:	4bbf      	ldr	r3, [pc, #764]	; (80203bc <basic_init+0xfd8>)
 80200c0:	681b      	ldr	r3, [r3, #0]
 80200c2:	f103 0010 	add.w	r0, r3, #16
 80200c6:	4bbc      	ldr	r3, [pc, #752]	; (80203b8 <basic_init+0xfd4>)
 80200c8:	68da      	ldr	r2, [r3, #12]
 80200ca:	2101      	movs	r1, #1
 80200cc:	f7fe fd99 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
 80200d0:	4bba      	ldr	r3, [pc, #744]	; (80203bc <basic_init+0xfd8>)
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	f103 0410 	add.w	r4, r3, #16
 80200d8:	4bb7      	ldr	r3, [pc, #732]	; (80203b8 <basic_init+0xfd4>)
 80200da:	214c      	movs	r1, #76	; 0x4c
 80200dc:	68d8      	ldr	r0, [r3, #12]
 80200de:	f7fb fd31 	bl	801bb44 <lv_color_darken>
 80200e2:	4603      	mov	r3, r0
 80200e4:	461a      	mov	r2, r3
 80200e6:	2111      	movs	r1, #17
 80200e8:	4620      	mov	r0, r4
 80200ea:	f7fe fd8a 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
 80200ee:	4bb3      	ldr	r3, [pc, #716]	; (80203bc <basic_init+0xfd8>)
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	f103 0410 	add.w	r4, r3, #16
 80200f6:	4bb0      	ldr	r3, [pc, #704]	; (80203b8 <basic_init+0xfd4>)
 80200f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200fa:	f003 0302 	and.w	r3, r3, #2
 80200fe:	2b00      	cmp	r3, #0
 8020100:	d005      	beq.n	802010e <basic_init+0xd2a>
 8020102:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020106:	f7fe fbf1 	bl	801e8ec <lv_color_hex>
 802010a:	4603      	mov	r3, r0
 802010c:	e003      	b.n	8020116 <basic_init+0xd32>
 802010e:	48a9      	ldr	r0, [pc, #676]	; (80203b4 <basic_init+0xfd0>)
 8020110:	f7fe fbec 	bl	801e8ec <lv_color_hex>
 8020114:	4603      	mov	r3, r0
 8020116:	461a      	mov	r2, r3
 8020118:	2120      	movs	r1, #32
 802011a:	4620      	mov	r0, r4
 802011c:	f7fe fd71 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
 8020120:	4ba6      	ldr	r3, [pc, #664]	; (80203bc <basic_init+0xfd8>)
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	f103 0410 	add.w	r4, r3, #16
 8020128:	4ba3      	ldr	r3, [pc, #652]	; (80203b8 <basic_init+0xfd4>)
 802012a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802012c:	f003 0302 	and.w	r3, r3, #2
 8020130:	2b00      	cmp	r3, #0
 8020132:	d005      	beq.n	8020140 <basic_init+0xd5c>
 8020134:	f640 40cc 	movw	r0, #3276	; 0xccc
 8020138:	f7fe fbec 	bl	801e914 <lv_color_hex3>
 802013c:	4603      	mov	r3, r0
 802013e:	e004      	b.n	802014a <basic_init+0xd66>
 8020140:	f640 0088 	movw	r0, #2184	; 0x888
 8020144:	f7fe fbe6 	bl	801e914 <lv_color_hex3>
 8020148:	4603      	mov	r3, r0
 802014a:	461a      	mov	r2, r3
 802014c:	2121      	movs	r1, #33	; 0x21
 802014e:	4620      	mov	r0, r4
 8020150:	f7fe fd57 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
 8020154:	4b99      	ldr	r3, [pc, #612]	; (80203bc <basic_init+0xfd8>)
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	f103 0010 	add.w	r0, r3, #16
 802015c:	4b96      	ldr	r3, [pc, #600]	; (80203b8 <basic_init+0xfd4>)
 802015e:	68da      	ldr	r2, [r3, #12]
 8020160:	2100      	movs	r1, #0
 8020162:	f7fe fdc8 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
 8020166:	4b95      	ldr	r3, [pc, #596]	; (80203bc <basic_init+0xfd8>)
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	f103 0010 	add.w	r0, r3, #16
 802016e:	4b92      	ldr	r3, [pc, #584]	; (80203b8 <basic_init+0xfd4>)
 8020170:	68da      	ldr	r2, [r3, #12]
 8020172:	2110      	movs	r1, #16
 8020174:	f7fe fdbf 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
 8020178:	4b90      	ldr	r3, [pc, #576]	; (80203bc <basic_init+0xfd8>)
 802017a:	681b      	ldr	r3, [r3, #0]
 802017c:	f103 0410 	add.w	r4, r3, #16
 8020180:	4b8d      	ldr	r3, [pc, #564]	; (80203b8 <basic_init+0xfd4>)
 8020182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020184:	f003 0302 	and.w	r3, r3, #2
 8020188:	2b00      	cmp	r3, #0
 802018a:	d005      	beq.n	8020198 <basic_init+0xdb4>
 802018c:	f640 0088 	movw	r0, #2184	; 0x888
 8020190:	f7fe fbc0 	bl	801e914 <lv_color_hex3>
 8020194:	4603      	mov	r3, r0
 8020196:	e003      	b.n	80201a0 <basic_init+0xdbc>
 8020198:	4889      	ldr	r0, [pc, #548]	; (80203c0 <basic_init+0xfdc>)
 802019a:	f7fe fba7 	bl	801e8ec <lv_color_hex>
 802019e:	4603      	mov	r3, r0
 80201a0:	461a      	mov	r2, r3
 80201a2:	2120      	movs	r1, #32
 80201a4:	4620      	mov	r0, r4
 80201a6:	f7fe fda6 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
 80201aa:	4b84      	ldr	r3, [pc, #528]	; (80203bc <basic_init+0xfd8>)
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	f103 0410 	add.w	r4, r3, #16
 80201b2:	2000      	movs	r0, #0
 80201b4:	f7fa f930 	bl	801a418 <lv_disp_get_dpi>
 80201b8:	4603      	mov	r3, r0
 80201ba:	3328      	adds	r3, #40	; 0x28
 80201bc:	005b      	lsls	r3, r3, #1
 80201be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80201c2:	db0d      	blt.n	80201e0 <basic_init+0xdfc>
 80201c4:	2000      	movs	r0, #0
 80201c6:	f7fa f927 	bl	801a418 <lv_disp_get_dpi>
 80201ca:	4603      	mov	r3, r0
 80201cc:	3328      	adds	r3, #40	; 0x28
 80201ce:	005b      	lsls	r3, r3, #1
 80201d0:	4a7c      	ldr	r2, [pc, #496]	; (80203c4 <basic_init+0xfe0>)
 80201d2:	fb82 1203 	smull	r1, r2, r2, r3
 80201d6:	1192      	asrs	r2, r2, #6
 80201d8:	17db      	asrs	r3, r3, #31
 80201da:	1ad3      	subs	r3, r2, r3
 80201dc:	b21b      	sxth	r3, r3
 80201de:	e000      	b.n	80201e2 <basic_init+0xdfe>
 80201e0:	2301      	movs	r3, #1
 80201e2:	461a      	mov	r2, r3
 80201e4:	2100      	movs	r1, #0
 80201e6:	4620      	mov	r0, r4
 80201e8:	f7fe fd3a 	bl	801ec60 <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
 80201ec:	4b73      	ldr	r3, [pc, #460]	; (80203bc <basic_init+0xfd8>)
 80201ee:	681b      	ldr	r3, [r3, #0]
 80201f0:	3310      	adds	r3, #16
 80201f2:	2200      	movs	r2, #0
 80201f4:	2101      	movs	r1, #1
 80201f6:	4618      	mov	r0, r3
 80201f8:	f7fe fd94 	bl	801ed24 <lv_style_set_border_opa>

    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80201fc:	4b6f      	ldr	r3, [pc, #444]	; (80203bc <basic_init+0xfd8>)
 80201fe:	681b      	ldr	r3, [r3, #0]
 8020200:	f103 0410 	add.w	r4, r3, #16
 8020204:	4b6c      	ldr	r3, [pc, #432]	; (80203b8 <basic_init+0xfd4>)
 8020206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020208:	f003 0302 	and.w	r3, r3, #2
 802020c:	2b00      	cmp	r3, #0
 802020e:	d004      	beq.n	802021a <basic_init+0xe36>
 8020210:	486d      	ldr	r0, [pc, #436]	; (80203c8 <basic_init+0xfe4>)
 8020212:	f7fe fb6b 	bl	801e8ec <lv_color_hex>
 8020216:	4603      	mov	r3, r0
 8020218:	e004      	b.n	8020224 <basic_init+0xe40>
 802021a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802021e:	f7fe fb65 	bl	801e8ec <lv_color_hex>
 8020222:	4603      	mov	r3, r0
 8020224:	461a      	mov	r2, r3
 8020226:	2100      	movs	r1, #0
 8020228:	4620      	mov	r0, r4
 802022a:	f7fe fecd 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 802022e:	4b63      	ldr	r3, [pc, #396]	; (80203bc <basic_init+0xfd8>)
 8020230:	681b      	ldr	r3, [r3, #0]
 8020232:	f103 0410 	add.w	r4, r3, #16
 8020236:	4b60      	ldr	r3, [pc, #384]	; (80203b8 <basic_init+0xfd4>)
 8020238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802023a:	f003 0302 	and.w	r3, r3, #2
 802023e:	2b00      	cmp	r3, #0
 8020240:	d004      	beq.n	802024c <basic_init+0xe68>
 8020242:	4861      	ldr	r0, [pc, #388]	; (80203c8 <basic_init+0xfe4>)
 8020244:	f7fe fb52 	bl	801e8ec <lv_color_hex>
 8020248:	4603      	mov	r3, r0
 802024a:	e004      	b.n	8020256 <basic_init+0xe72>
 802024c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020250:	f7fe fb4c 	bl	801e8ec <lv_color_hex>
 8020254:	4603      	mov	r3, r0
 8020256:	461a      	mov	r2, r3
 8020258:	2110      	movs	r1, #16
 802025a:	4620      	mov	r0, r4
 802025c:	f7fe feb4 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 8020260:	4b56      	ldr	r3, [pc, #344]	; (80203bc <basic_init+0xfd8>)
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	f103 0410 	add.w	r4, r3, #16
 8020268:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802026c:	f7fe fb3e 	bl	801e8ec <lv_color_hex>
 8020270:	4603      	mov	r3, r0
 8020272:	461a      	mov	r2, r3
 8020274:	2101      	movs	r1, #1
 8020276:	4620      	mov	r0, r4
 8020278:	f7fe fea6 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 802027c:	4b4f      	ldr	r3, [pc, #316]	; (80203bc <basic_init+0xfd8>)
 802027e:	681b      	ldr	r3, [r3, #0]
 8020280:	f103 0410 	add.w	r4, r3, #16
 8020284:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020288:	f7fe fb30 	bl	801e8ec <lv_color_hex>
 802028c:	4603      	mov	r3, r0
 802028e:	461a      	mov	r2, r3
 8020290:	2111      	movs	r1, #17
 8020292:	4620      	mov	r0, r4
 8020294:	f7fe fe98 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 8020298:	4b48      	ldr	r3, [pc, #288]	; (80203bc <basic_init+0xfd8>)
 802029a:	681b      	ldr	r3, [r3, #0]
 802029c:	f103 0410 	add.w	r4, r3, #16
 80202a0:	4b45      	ldr	r3, [pc, #276]	; (80203b8 <basic_init+0xfd4>)
 80202a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80202a4:	f003 0302 	and.w	r3, r3, #2
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	d004      	beq.n	80202b6 <basic_init+0xed2>
 80202ac:	4847      	ldr	r0, [pc, #284]	; (80203cc <basic_init+0xfe8>)
 80202ae:	f7fe fb1d 	bl	801e8ec <lv_color_hex>
 80202b2:	4603      	mov	r3, r0
 80202b4:	e003      	b.n	80202be <basic_init+0xeda>
 80202b6:	4845      	ldr	r0, [pc, #276]	; (80203cc <basic_init+0xfe8>)
 80202b8:	f7fe fb18 	bl	801e8ec <lv_color_hex>
 80202bc:	4603      	mov	r3, r0
 80202be:	461a      	mov	r2, r3
 80202c0:	2120      	movs	r1, #32
 80202c2:	4620      	mov	r0, r4
 80202c4:	f7fe fe80 	bl	801efc8 <lv_style_set_text_color>

    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80202c8:	4b3c      	ldr	r3, [pc, #240]	; (80203bc <basic_init+0xfd8>)
 80202ca:	681b      	ldr	r3, [r3, #0]
 80202cc:	f103 0410 	add.w	r4, r3, #16
 80202d0:	4b39      	ldr	r3, [pc, #228]	; (80203b8 <basic_init+0xfd4>)
 80202d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80202d4:	f003 0302 	and.w	r3, r3, #2
 80202d8:	2b00      	cmp	r3, #0
 80202da:	d004      	beq.n	80202e6 <basic_init+0xf02>
 80202dc:	483a      	ldr	r0, [pc, #232]	; (80203c8 <basic_init+0xfe4>)
 80202de:	f7fe fb05 	bl	801e8ec <lv_color_hex>
 80202e2:	4603      	mov	r3, r0
 80202e4:	e004      	b.n	80202f0 <basic_init+0xf0c>
 80202e6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80202ea:	f7fe faff 	bl	801e8ec <lv_color_hex>
 80202ee:	4603      	mov	r3, r0
 80202f0:	461a      	mov	r2, r3
 80202f2:	2100      	movs	r1, #0
 80202f4:	4620      	mov	r0, r4
 80202f6:	f7fe ff4b 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80202fa:	4b30      	ldr	r3, [pc, #192]	; (80203bc <basic_init+0xfd8>)
 80202fc:	681b      	ldr	r3, [r3, #0]
 80202fe:	f103 0410 	add.w	r4, r3, #16
 8020302:	4b2d      	ldr	r3, [pc, #180]	; (80203b8 <basic_init+0xfd4>)
 8020304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020306:	f003 0302 	and.w	r3, r3, #2
 802030a:	2b00      	cmp	r3, #0
 802030c:	d004      	beq.n	8020318 <basic_init+0xf34>
 802030e:	482e      	ldr	r0, [pc, #184]	; (80203c8 <basic_init+0xfe4>)
 8020310:	f7fe faec 	bl	801e8ec <lv_color_hex>
 8020314:	4603      	mov	r3, r0
 8020316:	e004      	b.n	8020322 <basic_init+0xf3e>
 8020318:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802031c:	f7fe fae6 	bl	801e8ec <lv_color_hex>
 8020320:	4603      	mov	r3, r0
 8020322:	461a      	mov	r2, r3
 8020324:	2110      	movs	r1, #16
 8020326:	4620      	mov	r0, r4
 8020328:	f7fe ff32 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
 802032c:	4b23      	ldr	r3, [pc, #140]	; (80203bc <basic_init+0xfd8>)
 802032e:	681b      	ldr	r3, [r3, #0]
 8020330:	f103 0410 	add.w	r4, r3, #16
 8020334:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020338:	f7fe fad8 	bl	801e8ec <lv_color_hex>
 802033c:	4603      	mov	r3, r0
 802033e:	461a      	mov	r2, r3
 8020340:	2110      	movs	r1, #16
 8020342:	4620      	mov	r0, r4
 8020344:	f7fe ff24 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 8020348:	4b1c      	ldr	r3, [pc, #112]	; (80203bc <basic_init+0xfd8>)
 802034a:	681b      	ldr	r3, [r3, #0]
 802034c:	f103 0410 	add.w	r4, r3, #16
 8020350:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020354:	f7fe faca 	bl	801e8ec <lv_color_hex>
 8020358:	4603      	mov	r3, r0
 802035a:	461a      	mov	r2, r3
 802035c:	2111      	movs	r1, #17
 802035e:	4620      	mov	r0, r4
 8020360:	f7fe ff16 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 8020364:	4b15      	ldr	r3, [pc, #84]	; (80203bc <basic_init+0xfd8>)
 8020366:	681b      	ldr	r3, [r3, #0]
 8020368:	f103 0410 	add.w	r4, r3, #16
 802036c:	4b12      	ldr	r3, [pc, #72]	; (80203b8 <basic_init+0xfd4>)
 802036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020370:	f003 0302 	and.w	r3, r3, #2
 8020374:	2b00      	cmp	r3, #0
 8020376:	d004      	beq.n	8020382 <basic_init+0xf9e>
 8020378:	4814      	ldr	r0, [pc, #80]	; (80203cc <basic_init+0xfe8>)
 802037a:	f7fe fab7 	bl	801e8ec <lv_color_hex>
 802037e:	4603      	mov	r3, r0
 8020380:	e003      	b.n	802038a <basic_init+0xfa6>
 8020382:	4812      	ldr	r0, [pc, #72]	; (80203cc <basic_init+0xfe8>)
 8020384:	f7fe fab2 	bl	801e8ec <lv_color_hex>
 8020388:	4603      	mov	r3, r0
 802038a:	461a      	mov	r2, r3
 802038c:	2120      	movs	r1, #32
 802038e:	4620      	mov	r0, r4
 8020390:	f7fe fefe 	bl	801f190 <lv_style_set_image_recolor>

    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 8020394:	4b09      	ldr	r3, [pc, #36]	; (80203bc <basic_init+0xfd8>)
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	f103 0410 	add.w	r4, r3, #16
 802039c:	4b06      	ldr	r3, [pc, #24]	; (80203b8 <basic_init+0xfd4>)
 802039e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203a0:	f003 0302 	and.w	r3, r3, #2
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	d013      	beq.n	80203d0 <basic_init+0xfec>
 80203a8:	4807      	ldr	r0, [pc, #28]	; (80203c8 <basic_init+0xfe4>)
 80203aa:	f7fe fa9f 	bl	801e8ec <lv_color_hex>
 80203ae:	4603      	mov	r3, r0
 80203b0:	e013      	b.n	80203da <basic_init+0xff6>
 80203b2:	bf00      	nop
 80203b4:	00586273 	.word	0x00586273
 80203b8:	200200a8 	.word	0x200200a8
 80203bc:	200200d4 	.word	0x200200d4
 80203c0:	00404040 	.word	0x00404040
 80203c4:	66666667 	.word	0x66666667
 80203c8:	0031404f 	.word	0x0031404f
 80203cc:	00888888 	.word	0x00888888
 80203d0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80203d4:	f7fe fa8a 	bl	801e8ec <lv_color_hex>
 80203d8:	4603      	mov	r3, r0
 80203da:	461a      	mov	r2, r3
 80203dc:	2100      	movs	r1, #0
 80203de:	4620      	mov	r0, r4
 80203e0:	f7fe fda8 	bl	801ef34 <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80203e4:	4b9c      	ldr	r3, [pc, #624]	; (8020658 <basic_init+0x1274>)
 80203e6:	681b      	ldr	r3, [r3, #0]
 80203e8:	f103 0410 	add.w	r4, r3, #16
 80203ec:	4b9b      	ldr	r3, [pc, #620]	; (802065c <basic_init+0x1278>)
 80203ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203f0:	f003 0302 	and.w	r3, r3, #2
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	d004      	beq.n	8020402 <basic_init+0x101e>
 80203f8:	4899      	ldr	r0, [pc, #612]	; (8020660 <basic_init+0x127c>)
 80203fa:	f7fe fa77 	bl	801e8ec <lv_color_hex>
 80203fe:	4603      	mov	r3, r0
 8020400:	e004      	b.n	802040c <basic_init+0x1028>
 8020402:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020406:	f7fe fa71 	bl	801e8ec <lv_color_hex>
 802040a:	4603      	mov	r3, r0
 802040c:	461a      	mov	r2, r3
 802040e:	2110      	movs	r1, #16
 8020410:	4620      	mov	r0, r4
 8020412:	f7fe fd8f 	bl	801ef34 <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 8020416:	4b90      	ldr	r3, [pc, #576]	; (8020658 <basic_init+0x1274>)
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	f103 0410 	add.w	r4, r3, #16
 802041e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020422:	f7fe fa63 	bl	801e8ec <lv_color_hex>
 8020426:	4603      	mov	r3, r0
 8020428:	461a      	mov	r2, r3
 802042a:	2101      	movs	r1, #1
 802042c:	4620      	mov	r0, r4
 802042e:	f7fe fd81 	bl	801ef34 <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 8020432:	4b89      	ldr	r3, [pc, #548]	; (8020658 <basic_init+0x1274>)
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	f103 0410 	add.w	r4, r3, #16
 802043a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802043e:	f7fe fa55 	bl	801e8ec <lv_color_hex>
 8020442:	4603      	mov	r3, r0
 8020444:	461a      	mov	r2, r3
 8020446:	2111      	movs	r1, #17
 8020448:	4620      	mov	r0, r4
 802044a:	f7fe fd73 	bl	801ef34 <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 802044e:	4b82      	ldr	r3, [pc, #520]	; (8020658 <basic_init+0x1274>)
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	f103 0410 	add.w	r4, r3, #16
 8020456:	4b81      	ldr	r3, [pc, #516]	; (802065c <basic_init+0x1278>)
 8020458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802045a:	f003 0302 	and.w	r3, r3, #2
 802045e:	2b00      	cmp	r3, #0
 8020460:	d004      	beq.n	802046c <basic_init+0x1088>
 8020462:	4880      	ldr	r0, [pc, #512]	; (8020664 <basic_init+0x1280>)
 8020464:	f7fe fa42 	bl	801e8ec <lv_color_hex>
 8020468:	4603      	mov	r3, r0
 802046a:	e003      	b.n	8020474 <basic_init+0x1090>
 802046c:	487d      	ldr	r0, [pc, #500]	; (8020664 <basic_init+0x1280>)
 802046e:	f7fe fa3d 	bl	801e8ec <lv_color_hex>
 8020472:	4603      	mov	r3, r0
 8020474:	461a      	mov	r2, r3
 8020476:	2120      	movs	r1, #32
 8020478:	4620      	mov	r0, r4
 802047a:	f7fe fd5b 	bl	801ef34 <lv_style_set_value_color>

    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 802047e:	4b76      	ldr	r3, [pc, #472]	; (8020658 <basic_init+0x1274>)
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	f103 0410 	add.w	r4, r3, #16
 8020486:	2000      	movs	r0, #0
 8020488:	f7f9 ffc6 	bl	801a418 <lv_disp_get_dpi>
 802048c:	4603      	mov	r3, r0
 802048e:	461a      	mov	r2, r3
 8020490:	4613      	mov	r3, r2
 8020492:	009b      	lsls	r3, r3, #2
 8020494:	4413      	add	r3, r2
 8020496:	00db      	lsls	r3, r3, #3
 8020498:	3350      	adds	r3, #80	; 0x50
 802049a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802049e:	db11      	blt.n	80204c4 <basic_init+0x10e0>
 80204a0:	2000      	movs	r0, #0
 80204a2:	f7f9 ffb9 	bl	801a418 <lv_disp_get_dpi>
 80204a6:	4603      	mov	r3, r0
 80204a8:	461a      	mov	r2, r3
 80204aa:	4613      	mov	r3, r2
 80204ac:	009b      	lsls	r3, r3, #2
 80204ae:	4413      	add	r3, r2
 80204b0:	00db      	lsls	r3, r3, #3
 80204b2:	3350      	adds	r3, #80	; 0x50
 80204b4:	4a6c      	ldr	r2, [pc, #432]	; (8020668 <basic_init+0x1284>)
 80204b6:	fb82 1203 	smull	r1, r2, r2, r3
 80204ba:	1192      	asrs	r2, r2, #6
 80204bc:	17db      	asrs	r3, r3, #31
 80204be:	1ad3      	subs	r3, r2, r3
 80204c0:	b21b      	sxth	r3, r3
 80204c2:	e000      	b.n	80204c6 <basic_init+0x10e2>
 80204c4:	2301      	movs	r3, #1
 80204c6:	461a      	mov	r2, r3
 80204c8:	2100      	movs	r1, #0
 80204ca:	4620      	mov	r0, r4
 80204cc:	f7fe faea 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 80204d0:	4b61      	ldr	r3, [pc, #388]	; (8020658 <basic_init+0x1274>)
 80204d2:	681b      	ldr	r3, [r3, #0]
 80204d4:	f103 0410 	add.w	r4, r3, #16
 80204d8:	2000      	movs	r0, #0
 80204da:	f7f9 ff9d 	bl	801a418 <lv_disp_get_dpi>
 80204de:	4603      	mov	r3, r0
 80204e0:	461a      	mov	r2, r3
 80204e2:	4613      	mov	r3, r2
 80204e4:	009b      	lsls	r3, r3, #2
 80204e6:	4413      	add	r3, r2
 80204e8:	00db      	lsls	r3, r3, #3
 80204ea:	3350      	adds	r3, #80	; 0x50
 80204ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80204f0:	db11      	blt.n	8020516 <basic_init+0x1132>
 80204f2:	2000      	movs	r0, #0
 80204f4:	f7f9 ff90 	bl	801a418 <lv_disp_get_dpi>
 80204f8:	4603      	mov	r3, r0
 80204fa:	461a      	mov	r2, r3
 80204fc:	4613      	mov	r3, r2
 80204fe:	009b      	lsls	r3, r3, #2
 8020500:	4413      	add	r3, r2
 8020502:	00db      	lsls	r3, r3, #3
 8020504:	3350      	adds	r3, #80	; 0x50
 8020506:	4a58      	ldr	r2, [pc, #352]	; (8020668 <basic_init+0x1284>)
 8020508:	fb82 1203 	smull	r1, r2, r2, r3
 802050c:	1192      	asrs	r2, r2, #6
 802050e:	17db      	asrs	r3, r3, #31
 8020510:	1ad3      	subs	r3, r2, r3
 8020512:	b21b      	sxth	r3, r3
 8020514:	e000      	b.n	8020518 <basic_init+0x1134>
 8020516:	2301      	movs	r3, #1
 8020518:	461a      	mov	r2, r3
 802051a:	2100      	movs	r1, #0
 802051c:	4620      	mov	r0, r4
 802051e:	f7fe fada 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 8020522:	4b4d      	ldr	r3, [pc, #308]	; (8020658 <basic_init+0x1274>)
 8020524:	681b      	ldr	r3, [r3, #0]
 8020526:	f103 0410 	add.w	r4, r3, #16
 802052a:	2000      	movs	r0, #0
 802052c:	f7f9 ff74 	bl	801a418 <lv_disp_get_dpi>
 8020530:	4603      	mov	r3, r0
 8020532:	461a      	mov	r2, r3
 8020534:	4613      	mov	r3, r2
 8020536:	011b      	lsls	r3, r3, #4
 8020538:	1a9b      	subs	r3, r3, r2
 802053a:	3350      	adds	r3, #80	; 0x50
 802053c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020540:	db10      	blt.n	8020564 <basic_init+0x1180>
 8020542:	2000      	movs	r0, #0
 8020544:	f7f9 ff68 	bl	801a418 <lv_disp_get_dpi>
 8020548:	4603      	mov	r3, r0
 802054a:	461a      	mov	r2, r3
 802054c:	4613      	mov	r3, r2
 802054e:	011b      	lsls	r3, r3, #4
 8020550:	1a9b      	subs	r3, r3, r2
 8020552:	3350      	adds	r3, #80	; 0x50
 8020554:	4a44      	ldr	r2, [pc, #272]	; (8020668 <basic_init+0x1284>)
 8020556:	fb82 1203 	smull	r1, r2, r2, r3
 802055a:	1192      	asrs	r2, r2, #6
 802055c:	17db      	asrs	r3, r3, #31
 802055e:	1ad3      	subs	r3, r2, r3
 8020560:	b21b      	sxth	r3, r3
 8020562:	e000      	b.n	8020566 <basic_init+0x1182>
 8020564:	2301      	movs	r3, #1
 8020566:	461a      	mov	r2, r3
 8020568:	2100      	movs	r1, #0
 802056a:	4620      	mov	r0, r4
 802056c:	f7fe fa68 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 8020570:	4b39      	ldr	r3, [pc, #228]	; (8020658 <basic_init+0x1274>)
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	f103 0410 	add.w	r4, r3, #16
 8020578:	2000      	movs	r0, #0
 802057a:	f7f9 ff4d 	bl	801a418 <lv_disp_get_dpi>
 802057e:	4603      	mov	r3, r0
 8020580:	461a      	mov	r2, r3
 8020582:	4613      	mov	r3, r2
 8020584:	011b      	lsls	r3, r3, #4
 8020586:	1a9b      	subs	r3, r3, r2
 8020588:	3350      	adds	r3, #80	; 0x50
 802058a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802058e:	db10      	blt.n	80205b2 <basic_init+0x11ce>
 8020590:	2000      	movs	r0, #0
 8020592:	f7f9 ff41 	bl	801a418 <lv_disp_get_dpi>
 8020596:	4603      	mov	r3, r0
 8020598:	461a      	mov	r2, r3
 802059a:	4613      	mov	r3, r2
 802059c:	011b      	lsls	r3, r3, #4
 802059e:	1a9b      	subs	r3, r3, r2
 80205a0:	3350      	adds	r3, #80	; 0x50
 80205a2:	4a31      	ldr	r2, [pc, #196]	; (8020668 <basic_init+0x1284>)
 80205a4:	fb82 1203 	smull	r1, r2, r2, r3
 80205a8:	1192      	asrs	r2, r2, #6
 80205aa:	17db      	asrs	r3, r3, #31
 80205ac:	1ad3      	subs	r3, r2, r3
 80205ae:	b21b      	sxth	r3, r3
 80205b0:	e000      	b.n	80205b4 <basic_init+0x11d0>
 80205b2:	2301      	movs	r3, #1
 80205b4:	461a      	mov	r2, r3
 80205b6:	2100      	movs	r1, #0
 80205b8:	4620      	mov	r0, r4
 80205ba:	f7fe fa5a 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
 80205be:	4b26      	ldr	r3, [pc, #152]	; (8020658 <basic_init+0x1274>)
 80205c0:	681b      	ldr	r3, [r3, #0]
 80205c2:	f103 0410 	add.w	r4, r3, #16
 80205c6:	2000      	movs	r0, #0
 80205c8:	f7f9 ff26 	bl	801a418 <lv_disp_get_dpi>
 80205cc:	4603      	mov	r3, r0
 80205ce:	461a      	mov	r2, r3
 80205d0:	4613      	mov	r3, r2
 80205d2:	009b      	lsls	r3, r3, #2
 80205d4:	4413      	add	r3, r2
 80205d6:	009b      	lsls	r3, r3, #2
 80205d8:	3350      	adds	r3, #80	; 0x50
 80205da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80205de:	db11      	blt.n	8020604 <basic_init+0x1220>
 80205e0:	2000      	movs	r0, #0
 80205e2:	f7f9 ff19 	bl	801a418 <lv_disp_get_dpi>
 80205e6:	4603      	mov	r3, r0
 80205e8:	461a      	mov	r2, r3
 80205ea:	4613      	mov	r3, r2
 80205ec:	009b      	lsls	r3, r3, #2
 80205ee:	4413      	add	r3, r2
 80205f0:	009b      	lsls	r3, r3, #2
 80205f2:	3350      	adds	r3, #80	; 0x50
 80205f4:	4a1c      	ldr	r2, [pc, #112]	; (8020668 <basic_init+0x1284>)
 80205f6:	fb82 1203 	smull	r1, r2, r2, r3
 80205fa:	1192      	asrs	r2, r2, #6
 80205fc:	17db      	asrs	r3, r3, #31
 80205fe:	1ad3      	subs	r3, r2, r3
 8020600:	b21b      	sxth	r3, r3
 8020602:	e000      	b.n	8020606 <basic_init+0x1222>
 8020604:	2301      	movs	r3, #1
 8020606:	461a      	mov	r2, r3
 8020608:	2100      	movs	r1, #0
 802060a:	4620      	mov	r0, r4
 802060c:	f7fe fa7c 	bl	801eb08 <lv_style_set_pad_inner>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 8020610:	4b11      	ldr	r3, [pc, #68]	; (8020658 <basic_init+0x1274>)
 8020612:	681b      	ldr	r3, [r3, #0]
 8020614:	f103 0410 	add.w	r4, r3, #16
 8020618:	4b10      	ldr	r3, [pc, #64]	; (802065c <basic_init+0x1278>)
 802061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802061c:	f003 0320 	and.w	r3, r3, #32
 8020620:	2b00      	cmp	r3, #0
 8020622:	d123      	bne.n	802066c <basic_init+0x1288>
 8020624:	2000      	movs	r0, #0
 8020626:	f7f9 fef7 	bl	801a418 <lv_disp_get_dpi>
 802062a:	4603      	mov	r3, r0
 802062c:	3328      	adds	r3, #40	; 0x28
 802062e:	005b      	lsls	r3, r3, #1
 8020630:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020634:	db0d      	blt.n	8020652 <basic_init+0x126e>
 8020636:	2000      	movs	r0, #0
 8020638:	f7f9 feee 	bl	801a418 <lv_disp_get_dpi>
 802063c:	4603      	mov	r3, r0
 802063e:	3328      	adds	r3, #40	; 0x28
 8020640:	005b      	lsls	r3, r3, #1
 8020642:	4a09      	ldr	r2, [pc, #36]	; (8020668 <basic_init+0x1284>)
 8020644:	fb82 1203 	smull	r1, r2, r2, r3
 8020648:	1192      	asrs	r2, r2, #6
 802064a:	17db      	asrs	r3, r3, #31
 802064c:	1ad3      	subs	r3, r2, r3
 802064e:	b21b      	sxth	r3, r3
 8020650:	e00d      	b.n	802066e <basic_init+0x128a>
 8020652:	2301      	movs	r3, #1
 8020654:	e00b      	b.n	802066e <basic_init+0x128a>
 8020656:	bf00      	nop
 8020658:	200200d4 	.word	0x200200d4
 802065c:	200200a8 	.word	0x200200a8
 8020660:	0031404f 	.word	0x0031404f
 8020664:	00888888 	.word	0x00888888
 8020668:	66666667 	.word	0x66666667
 802066c:	2300      	movs	r3, #0
 802066e:	461a      	mov	r2, r3
 8020670:	2100      	movs	r1, #0
 8020672:	4620      	mov	r0, r4
 8020674:	f7fe fb6e 	bl	801ed54 <lv_style_set_outline_width>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
 8020678:	4b93      	ldr	r3, [pc, #588]	; (80208c8 <basic_init+0x14e4>)
 802067a:	681b      	ldr	r3, [r3, #0]
 802067c:	3310      	adds	r3, #16
 802067e:	2200      	movs	r2, #0
 8020680:	2100      	movs	r1, #0
 8020682:	4618      	mov	r0, r3
 8020684:	f7fe fbaf 	bl	801ede6 <lv_style_set_outline_opa>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
 8020688:	4b8f      	ldr	r3, [pc, #572]	; (80208c8 <basic_init+0x14e4>)
 802068a:	681b      	ldr	r3, [r3, #0]
 802068c:	3310      	adds	r3, #16
 802068e:	227f      	movs	r2, #127	; 0x7f
 8020690:	2102      	movs	r1, #2
 8020692:	4618      	mov	r0, r3
 8020694:	f7fe fba7 	bl	801ede6 <lv_style_set_outline_opa>
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
 8020698:	4b8b      	ldr	r3, [pc, #556]	; (80208c8 <basic_init+0x14e4>)
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	f103 0010 	add.w	r0, r3, #16
 80206a0:	4b8a      	ldr	r3, [pc, #552]	; (80208cc <basic_init+0x14e8>)
 80206a2:	68da      	ldr	r2, [r3, #12]
 80206a4:	2100      	movs	r1, #0
 80206a6:	f7fe fb87 	bl	801edb8 <lv_style_set_outline_color>
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
 80206aa:	4b87      	ldr	r3, [pc, #540]	; (80208c8 <basic_init+0x14e4>)
 80206ac:	681b      	ldr	r3, [r3, #0]
 80206ae:	f103 0010 	add.w	r0, r3, #16
 80206b2:	4b86      	ldr	r3, [pc, #536]	; (80208cc <basic_init+0x14e8>)
 80206b4:	691a      	ldr	r2, [r3, #16]
 80206b6:	2104      	movs	r1, #4
 80206b8:	f7fe fb7e 	bl	801edb8 <lv_style_set_outline_color>
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 80206bc:	4b82      	ldr	r3, [pc, #520]	; (80208c8 <basic_init+0x14e4>)
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	3310      	adds	r3, #16
 80206c2:	2200      	movs	r2, #0
 80206c4:	2100      	movs	r1, #0
 80206c6:	4618      	mov	r0, r3
 80206c8:	f7fe fd7c 	bl	801f1c4 <lv_style_set_transition_time>
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
 80206cc:	4b7e      	ldr	r3, [pc, #504]	; (80208c8 <basic_init+0x14e4>)
 80206ce:	681b      	ldr	r3, [r3, #0]
 80206d0:	3310      	adds	r3, #16
 80206d2:	223c      	movs	r2, #60	; 0x3c
 80206d4:	2100      	movs	r1, #0
 80206d6:	4618      	mov	r0, r3
 80206d8:	f7fe fdbf 	bl	801f25a <lv_style_set_transition_prop_4>
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 80206dc:	4b7a      	ldr	r3, [pc, #488]	; (80208c8 <basic_init+0x14e4>)
 80206de:	681b      	ldr	r3, [r3, #0]
 80206e0:	3310      	adds	r3, #16
 80206e2:	2229      	movs	r2, #41	; 0x29
 80206e4:	2100      	movs	r1, #0
 80206e6:	4618      	mov	r0, r3
 80206e8:	f7fe fdd0 	bl	801f28c <lv_style_set_transition_prop_5>
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 80206ec:	4b76      	ldr	r3, [pc, #472]	; (80208c8 <basic_init+0x14e4>)
 80206ee:	681b      	ldr	r3, [r3, #0]
 80206f0:	3310      	adds	r3, #16
 80206f2:	224c      	movs	r2, #76	; 0x4c
 80206f4:	2100      	movs	r1, #0
 80206f6:	4618      	mov	r0, r3
 80206f8:	f7fe fde1 	bl	801f2be <lv_style_set_transition_prop_6>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 80206fc:	4b72      	ldr	r3, [pc, #456]	; (80208c8 <basic_init+0x14e4>)
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	3310      	adds	r3, #16
 8020702:	2200      	movs	r2, #0
 8020704:	2100      	movs	r1, #0
 8020706:	4618      	mov	r0, r3
 8020708:	f7fe fd75 	bl	801f1f6 <lv_style_set_transition_delay>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
 802070c:	4b6e      	ldr	r3, [pc, #440]	; (80208c8 <basic_init+0x14e4>)
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	3310      	adds	r3, #16
 8020712:	2200      	movs	r2, #0
 8020714:	2110      	movs	r1, #16
 8020716:	4618      	mov	r0, r3
 8020718:	f7fe fd6d 	bl	801f1f6 <lv_style_set_transition_delay>

    style_init_reset(&styles->pad_inner);
 802071c:	4b6a      	ldr	r3, [pc, #424]	; (80208c8 <basic_init+0x14e4>)
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	3314      	adds	r3, #20
 8020722:	4618      	mov	r0, r3
 8020724:	f004 fea0 	bl	8025468 <style_init_reset>

    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020728:	4b67      	ldr	r3, [pc, #412]	; (80208c8 <basic_init+0x14e4>)
 802072a:	681b      	ldr	r3, [r3, #0]
 802072c:	f103 0414 	add.w	r4, r3, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8020730:	2000      	movs	r0, #0
 8020732:	f7f9 fe8a 	bl	801a44a <lv_disp_get_size_category>
 8020736:	4603      	mov	r3, r0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020738:	2b01      	cmp	r3, #1
 802073a:	d820      	bhi.n	802077e <basic_init+0x139a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 802073c:	2000      	movs	r0, #0
 802073e:	f7f9 fe6b 	bl	801a418 <lv_disp_get_dpi>
 8020742:	4603      	mov	r3, r0
 8020744:	461a      	mov	r2, r3
 8020746:	4613      	mov	r3, r2
 8020748:	009b      	lsls	r3, r3, #2
 802074a:	4413      	add	r3, r2
 802074c:	009b      	lsls	r3, r3, #2
 802074e:	3350      	adds	r3, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020750:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020754:	db11      	blt.n	802077a <basic_init+0x1396>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8020756:	2000      	movs	r0, #0
 8020758:	f7f9 fe5e 	bl	801a418 <lv_disp_get_dpi>
 802075c:	4603      	mov	r3, r0
 802075e:	461a      	mov	r2, r3
 8020760:	4613      	mov	r3, r2
 8020762:	009b      	lsls	r3, r3, #2
 8020764:	4413      	add	r3, r2
 8020766:	009b      	lsls	r3, r3, #2
 8020768:	3350      	adds	r3, #80	; 0x50
 802076a:	4a59      	ldr	r2, [pc, #356]	; (80208d0 <basic_init+0x14ec>)
 802076c:	fb82 1203 	smull	r1, r2, r2, r3
 8020770:	1192      	asrs	r2, r2, #6
 8020772:	17db      	asrs	r3, r3, #31
 8020774:	1ad3      	subs	r3, r2, r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020776:	b21b      	sxth	r3, r3
 8020778:	e021      	b.n	80207be <basic_init+0x13da>
 802077a:	2301      	movs	r3, #1
 802077c:	e01f      	b.n	80207be <basic_init+0x13da>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 802077e:	2000      	movs	r0, #0
 8020780:	f7f9 fe4a 	bl	801a418 <lv_disp_get_dpi>
 8020784:	4603      	mov	r3, r0
 8020786:	461a      	mov	r2, r3
 8020788:	4613      	mov	r3, r2
 802078a:	009b      	lsls	r3, r3, #2
 802078c:	4413      	add	r3, r2
 802078e:	00db      	lsls	r3, r3, #3
 8020790:	3350      	adds	r3, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020792:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020796:	db11      	blt.n	80207bc <basic_init+0x13d8>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8020798:	2000      	movs	r0, #0
 802079a:	f7f9 fe3d 	bl	801a418 <lv_disp_get_dpi>
 802079e:	4603      	mov	r3, r0
 80207a0:	461a      	mov	r2, r3
 80207a2:	4613      	mov	r3, r2
 80207a4:	009b      	lsls	r3, r3, #2
 80207a6:	4413      	add	r3, r2
 80207a8:	00db      	lsls	r3, r3, #3
 80207aa:	3350      	adds	r3, #80	; 0x50
 80207ac:	4a48      	ldr	r2, [pc, #288]	; (80208d0 <basic_init+0x14ec>)
 80207ae:	fb82 1203 	smull	r1, r2, r2, r3
 80207b2:	1192      	asrs	r2, r2, #6
 80207b4:	17db      	asrs	r3, r3, #31
 80207b6:	1ad3      	subs	r3, r2, r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 80207b8:	b21b      	sxth	r3, r3
 80207ba:	e000      	b.n	80207be <basic_init+0x13da>
 80207bc:	2301      	movs	r3, #1
 80207be:	461a      	mov	r2, r3
 80207c0:	2100      	movs	r1, #0
 80207c2:	4620      	mov	r0, r4
 80207c4:	f7fe f9a0 	bl	801eb08 <lv_style_set_pad_inner>

    style_init_reset(&styles->pad_small);
 80207c8:	4b3f      	ldr	r3, [pc, #252]	; (80208c8 <basic_init+0x14e4>)
 80207ca:	681b      	ldr	r3, [r3, #0]
 80207cc:	3318      	adds	r3, #24
 80207ce:	4618      	mov	r0, r3
 80207d0:	f004 fe4a 	bl	8025468 <style_init_reset>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 80207d4:	2000      	movs	r0, #0
 80207d6:	f7f9 fe38 	bl	801a44a <lv_disp_get_size_category>
 80207da:	4603      	mov	r3, r0
 80207dc:	2b01      	cmp	r3, #1
 80207de:	d820      	bhi.n	8020822 <basic_init+0x143e>
 80207e0:	2000      	movs	r0, #0
 80207e2:	f7f9 fe19 	bl	801a418 <lv_disp_get_dpi>
 80207e6:	4603      	mov	r3, r0
 80207e8:	461a      	mov	r2, r3
 80207ea:	4613      	mov	r3, r2
 80207ec:	009b      	lsls	r3, r3, #2
 80207ee:	4413      	add	r3, r2
 80207f0:	005b      	lsls	r3, r3, #1
 80207f2:	3350      	adds	r3, #80	; 0x50
 80207f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80207f8:	db11      	blt.n	802081e <basic_init+0x143a>
 80207fa:	2000      	movs	r0, #0
 80207fc:	f7f9 fe0c 	bl	801a418 <lv_disp_get_dpi>
 8020800:	4603      	mov	r3, r0
 8020802:	461a      	mov	r2, r3
 8020804:	4613      	mov	r3, r2
 8020806:	009b      	lsls	r3, r3, #2
 8020808:	4413      	add	r3, r2
 802080a:	005b      	lsls	r3, r3, #1
 802080c:	3350      	adds	r3, #80	; 0x50
 802080e:	4a30      	ldr	r2, [pc, #192]	; (80208d0 <basic_init+0x14ec>)
 8020810:	fb82 1203 	smull	r1, r2, r2, r3
 8020814:	1192      	asrs	r2, r2, #6
 8020816:	17db      	asrs	r3, r3, #31
 8020818:	1ad3      	subs	r3, r2, r3
 802081a:	b21b      	sxth	r3, r3
 802081c:	e021      	b.n	8020862 <basic_init+0x147e>
 802081e:	2301      	movs	r3, #1
 8020820:	e01f      	b.n	8020862 <basic_init+0x147e>
 8020822:	2000      	movs	r0, #0
 8020824:	f7f9 fdf8 	bl	801a418 <lv_disp_get_dpi>
 8020828:	4603      	mov	r3, r0
 802082a:	461a      	mov	r2, r3
 802082c:	4613      	mov	r3, r2
 802082e:	009b      	lsls	r3, r3, #2
 8020830:	4413      	add	r3, r2
 8020832:	009b      	lsls	r3, r3, #2
 8020834:	3350      	adds	r3, #80	; 0x50
 8020836:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802083a:	db11      	blt.n	8020860 <basic_init+0x147c>
 802083c:	2000      	movs	r0, #0
 802083e:	f7f9 fdeb 	bl	801a418 <lv_disp_get_dpi>
 8020842:	4603      	mov	r3, r0
 8020844:	461a      	mov	r2, r3
 8020846:	4613      	mov	r3, r2
 8020848:	009b      	lsls	r3, r3, #2
 802084a:	4413      	add	r3, r2
 802084c:	009b      	lsls	r3, r3, #2
 802084e:	3350      	adds	r3, #80	; 0x50
 8020850:	4a1f      	ldr	r2, [pc, #124]	; (80208d0 <basic_init+0x14ec>)
 8020852:	fb82 1203 	smull	r1, r2, r2, r3
 8020856:	1192      	asrs	r2, r2, #6
 8020858:	17db      	asrs	r3, r3, #31
 802085a:	1ad3      	subs	r3, r2, r3
 802085c:	b21b      	sxth	r3, r3
 802085e:	e000      	b.n	8020862 <basic_init+0x147e>
 8020860:	2301      	movs	r3, #1
 8020862:	80fb      	strh	r3, [r7, #6]
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 8020864:	4b18      	ldr	r3, [pc, #96]	; (80208c8 <basic_init+0x14e4>)
 8020866:	681b      	ldr	r3, [r3, #0]
 8020868:	3318      	adds	r3, #24
 802086a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 802086e:	2100      	movs	r1, #0
 8020870:	4618      	mov	r0, r3
 8020872:	f7fe f917 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 8020876:	4b14      	ldr	r3, [pc, #80]	; (80208c8 <basic_init+0x14e4>)
 8020878:	681b      	ldr	r3, [r3, #0]
 802087a:	3318      	adds	r3, #24
 802087c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020880:	2100      	movs	r1, #0
 8020882:	4618      	mov	r0, r3
 8020884:	f7fe f927 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 8020888:	4b0f      	ldr	r3, [pc, #60]	; (80208c8 <basic_init+0x14e4>)
 802088a:	681b      	ldr	r3, [r3, #0]
 802088c:	3318      	adds	r3, #24
 802088e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020892:	2100      	movs	r1, #0
 8020894:	4618      	mov	r0, r3
 8020896:	f7fe f8d3 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 802089a:	4b0b      	ldr	r3, [pc, #44]	; (80208c8 <basic_init+0x14e4>)
 802089c:	681b      	ldr	r3, [r3, #0]
 802089e:	3318      	adds	r3, #24
 80208a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80208a4:	2100      	movs	r1, #0
 80208a6:	4618      	mov	r0, r3
 80208a8:	f7fe f8e3 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 80208ac:	4b06      	ldr	r3, [pc, #24]	; (80208c8 <basic_init+0x14e4>)
 80208ae:	681b      	ldr	r3, [r3, #0]
 80208b0:	3318      	adds	r3, #24
 80208b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80208b6:	2100      	movs	r1, #0
 80208b8:	4618      	mov	r0, r3
 80208ba:	f7fe f925 	bl	801eb08 <lv_style_set_pad_inner>
}
 80208be:	bf00      	nop
 80208c0:	3708      	adds	r7, #8
 80208c2:	46bd      	mov	sp, r7
 80208c4:	bdb0      	pop	{r4, r5, r7, pc}
 80208c6:	bf00      	nop
 80208c8:	200200d4 	.word	0x200200d4
 80208cc:	200200a8 	.word	0x200200a8
 80208d0:	66666667 	.word	0x66666667

080208d4 <cont_init>:

static void cont_init(void)
{
 80208d4:	b480      	push	{r7}
 80208d6:	af00      	add	r7, sp, #0
#if LV_USE_CONT != 0

#endif
}
 80208d8:	bf00      	nop
 80208da:	46bd      	mov	sp, r7
 80208dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208e0:	4770      	bx	lr

080208e2 <btn_init>:

static void btn_init(void)
{
 80208e2:	b480      	push	{r7}
 80208e4:	af00      	add	r7, sp, #0
#if LV_USE_BTN != 0

#endif
}
 80208e6:	bf00      	nop
 80208e8:	46bd      	mov	sp, r7
 80208ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ee:	4770      	bx	lr

080208f0 <label_init>:

static void label_init(void)
{
 80208f0:	b480      	push	{r7}
 80208f2:	af00      	add	r7, sp, #0
#if LV_USE_LABEL != 0

#endif
}
 80208f4:	bf00      	nop
 80208f6:	46bd      	mov	sp, r7
 80208f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208fc:	4770      	bx	lr
	...

08020900 <bar_init>:

static void bar_init(void)
{
 8020900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020902:	af00      	add	r7, sp, #0
#if LV_USE_BAR
    style_init_reset(&styles->bar_bg);
 8020904:	4b7c      	ldr	r3, [pc, #496]	; (8020af8 <bar_init+0x1f8>)
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	3328      	adds	r3, #40	; 0x28
 802090a:	4618      	mov	r0, r3
 802090c:	f004 fdac 	bl	8025468 <style_init_reset>
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020910:	4b79      	ldr	r3, [pc, #484]	; (8020af8 <bar_init+0x1f8>)
 8020912:	681b      	ldr	r3, [r3, #0]
 8020914:	3328      	adds	r3, #40	; 0x28
 8020916:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802091a:	2100      	movs	r1, #0
 802091c:	4618      	mov	r0, r3
 802091e:	f7fe f82b 	bl	801e978 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020922:	4b75      	ldr	r3, [pc, #468]	; (8020af8 <bar_init+0x1f8>)
 8020924:	681b      	ldr	r3, [r3, #0]
 8020926:	3328      	adds	r3, #40	; 0x28
 8020928:	22ff      	movs	r2, #255	; 0xff
 802092a:	2100      	movs	r1, #0
 802092c:	4618      	mov	r0, r3
 802092e:	f7fe f97f 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 8020932:	4b71      	ldr	r3, [pc, #452]	; (8020af8 <bar_init+0x1f8>)
 8020934:	681b      	ldr	r3, [r3, #0]
 8020936:	f103 0628 	add.w	r6, r3, #40	; 0x28
 802093a:	4b70      	ldr	r3, [pc, #448]	; (8020afc <bar_init+0x1fc>)
 802093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802093e:	f003 0302 	and.w	r3, r3, #2
 8020942:	2b00      	cmp	r3, #0
 8020944:	d004      	beq.n	8020950 <bar_init+0x50>
 8020946:	486e      	ldr	r0, [pc, #440]	; (8020b00 <bar_init+0x200>)
 8020948:	f7fd ffd0 	bl	801e8ec <lv_color_hex>
 802094c:	4603      	mov	r3, r0
 802094e:	e003      	b.n	8020958 <bar_init+0x58>
 8020950:	486c      	ldr	r0, [pc, #432]	; (8020b04 <bar_init+0x204>)
 8020952:	f7fd ffcb 	bl	801e8ec <lv_color_hex>
 8020956:	4603      	mov	r3, r0
 8020958:	461a      	mov	r2, r3
 802095a:	2100      	movs	r1, #0
 802095c:	4630      	mov	r0, r6
 802095e:	f7fe f950 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 8020962:	4b65      	ldr	r3, [pc, #404]	; (8020af8 <bar_init+0x1f8>)
 8020964:	681b      	ldr	r3, [r3, #0]
 8020966:	f103 0628 	add.w	r6, r3, #40	; 0x28
 802096a:	4b64      	ldr	r3, [pc, #400]	; (8020afc <bar_init+0x1fc>)
 802096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802096e:	f003 0302 	and.w	r3, r3, #2
 8020972:	2b00      	cmp	r3, #0
 8020974:	d004      	beq.n	8020980 <bar_init+0x80>
 8020976:	4864      	ldr	r0, [pc, #400]	; (8020b08 <bar_init+0x208>)
 8020978:	f7fd ffb8 	bl	801e8ec <lv_color_hex>
 802097c:	4605      	mov	r5, r0
 802097e:	e00b      	b.n	8020998 <bar_init+0x98>
 8020980:	462b      	mov	r3, r5
 8020982:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 8020986:	462b      	mov	r3, r5
 8020988:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 802098c:	462b      	mov	r3, r5
 802098e:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 8020992:	462b      	mov	r3, r5
 8020994:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 8020998:	462a      	mov	r2, r5
 802099a:	2100      	movs	r1, #0
 802099c:	4630      	mov	r0, r6
 802099e:	f7fe fac9 	bl	801ef34 <lv_style_set_value_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
 80209a2:	4b55      	ldr	r3, [pc, #340]	; (8020af8 <bar_init+0x1f8>)
 80209a4:	681b      	ldr	r3, [r3, #0]
 80209a6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80209aa:	4b54      	ldr	r3, [pc, #336]	; (8020afc <bar_init+0x1fc>)
 80209ac:	68da      	ldr	r2, [r3, #12]
 80209ae:	2100      	movs	r1, #0
 80209b0:	f7fe fa02 	bl	801edb8 <lv_style_set_outline_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
 80209b4:	4b50      	ldr	r3, [pc, #320]	; (8020af8 <bar_init+0x1f8>)
 80209b6:	681b      	ldr	r3, [r3, #0]
 80209b8:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80209bc:	4b4f      	ldr	r3, [pc, #316]	; (8020afc <bar_init+0x1fc>)
 80209be:	691a      	ldr	r2, [r3, #16]
 80209c0:	2104      	movs	r1, #4
 80209c2:	f7fe f9f9 	bl	801edb8 <lv_style_set_outline_color>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 80209c6:	4b4c      	ldr	r3, [pc, #304]	; (8020af8 <bar_init+0x1f8>)
 80209c8:	681b      	ldr	r3, [r3, #0]
 80209ca:	3328      	adds	r3, #40	; 0x28
 80209cc:	2200      	movs	r2, #0
 80209ce:	2100      	movs	r1, #0
 80209d0:	4618      	mov	r0, r3
 80209d2:	f7fe fa08 	bl	801ede6 <lv_style_set_outline_opa>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
 80209d6:	4b48      	ldr	r3, [pc, #288]	; (8020af8 <bar_init+0x1f8>)
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	3328      	adds	r3, #40	; 0x28
 80209dc:	227f      	movs	r2, #127	; 0x7f
 80209de:	2102      	movs	r1, #2
 80209e0:	4618      	mov	r0, r3
 80209e2:	f7fe fa00 	bl	801ede6 <lv_style_set_outline_opa>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 80209e6:	4b44      	ldr	r3, [pc, #272]	; (8020af8 <bar_init+0x1f8>)
 80209e8:	681b      	ldr	r3, [r3, #0]
 80209ea:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80209ee:	4b43      	ldr	r3, [pc, #268]	; (8020afc <bar_init+0x1fc>)
 80209f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80209f2:	f003 0320 	and.w	r3, r3, #32
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d118      	bne.n	8020a2c <bar_init+0x12c>
 80209fa:	2000      	movs	r0, #0
 80209fc:	f7f9 fd0c 	bl	801a418 <lv_disp_get_dpi>
 8020a00:	4603      	mov	r3, r0
 8020a02:	3328      	adds	r3, #40	; 0x28
 8020a04:	005b      	lsls	r3, r3, #1
 8020a06:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020a0a:	db0d      	blt.n	8020a28 <bar_init+0x128>
 8020a0c:	2000      	movs	r0, #0
 8020a0e:	f7f9 fd03 	bl	801a418 <lv_disp_get_dpi>
 8020a12:	4603      	mov	r3, r0
 8020a14:	3328      	adds	r3, #40	; 0x28
 8020a16:	005b      	lsls	r3, r3, #1
 8020a18:	4a3c      	ldr	r2, [pc, #240]	; (8020b0c <bar_init+0x20c>)
 8020a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8020a1e:	1192      	asrs	r2, r2, #6
 8020a20:	17db      	asrs	r3, r3, #31
 8020a22:	1ad3      	subs	r3, r2, r3
 8020a24:	b21b      	sxth	r3, r3
 8020a26:	e002      	b.n	8020a2e <bar_init+0x12e>
 8020a28:	2301      	movs	r3, #1
 8020a2a:	e000      	b.n	8020a2e <bar_init+0x12e>
 8020a2c:	2300      	movs	r3, #0
 8020a2e:	461a      	mov	r2, r3
 8020a30:	2100      	movs	r1, #0
 8020a32:	4628      	mov	r0, r5
 8020a34:	f7fe f98e 	bl	801ed54 <lv_style_set_outline_width>
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8020a38:	4b2f      	ldr	r3, [pc, #188]	; (8020af8 <bar_init+0x1f8>)
 8020a3a:	681b      	ldr	r3, [r3, #0]
 8020a3c:	3328      	adds	r3, #40	; 0x28
 8020a3e:	2200      	movs	r2, #0
 8020a40:	2100      	movs	r1, #0
 8020a42:	4618      	mov	r0, r3
 8020a44:	f7fe fbbe 	bl	801f1c4 <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 8020a48:	4b2b      	ldr	r3, [pc, #172]	; (8020af8 <bar_init+0x1f8>)
 8020a4a:	681b      	ldr	r3, [r3, #0]
 8020a4c:	3328      	adds	r3, #40	; 0x28
 8020a4e:	224c      	movs	r2, #76	; 0x4c
 8020a50:	2100      	movs	r1, #0
 8020a52:	4618      	mov	r0, r3
 8020a54:	f7fe fc33 	bl	801f2be <lv_style_set_transition_prop_6>

    style_init_reset(&styles->bar_indic);
 8020a58:	4b27      	ldr	r3, [pc, #156]	; (8020af8 <bar_init+0x1f8>)
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	332c      	adds	r3, #44	; 0x2c
 8020a5e:	4618      	mov	r0, r3
 8020a60:	f004 fd02 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020a64:	4b24      	ldr	r3, [pc, #144]	; (8020af8 <bar_init+0x1f8>)
 8020a66:	681b      	ldr	r3, [r3, #0]
 8020a68:	332c      	adds	r3, #44	; 0x2c
 8020a6a:	22ff      	movs	r2, #255	; 0xff
 8020a6c:	2100      	movs	r1, #0
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f7fe f8de 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020a74:	4b20      	ldr	r3, [pc, #128]	; (8020af8 <bar_init+0x1f8>)
 8020a76:	681b      	ldr	r3, [r3, #0]
 8020a78:	332c      	adds	r3, #44	; 0x2c
 8020a7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020a7e:	2100      	movs	r1, #0
 8020a80:	4618      	mov	r0, r3
 8020a82:	f7fd ff79 	bl	801e978 <lv_style_set_radius>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
 8020a86:	4b1c      	ldr	r3, [pc, #112]	; (8020af8 <bar_init+0x1f8>)
 8020a88:	681b      	ldr	r3, [r3, #0]
 8020a8a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8020a8e:	4b1b      	ldr	r3, [pc, #108]	; (8020afc <bar_init+0x1fc>)
 8020a90:	68da      	ldr	r2, [r3, #12]
 8020a92:	2100      	movs	r1, #0
 8020a94:	f7fe f8b5 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
 8020a98:	4b17      	ldr	r3, [pc, #92]	; (8020af8 <bar_init+0x1f8>)
 8020a9a:	681b      	ldr	r3, [r3, #0]
 8020a9c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8020aa0:	f640 0088 	movw	r0, #2184	; 0x888
 8020aa4:	f7fd ff36 	bl	801e914 <lv_color_hex3>
 8020aa8:	4603      	mov	r3, r0
 8020aaa:	461a      	mov	r2, r3
 8020aac:	2120      	movs	r1, #32
 8020aae:	4628      	mov	r0, r5
 8020ab0:	f7fe f8a7 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
 8020ab4:	4b10      	ldr	r3, [pc, #64]	; (8020af8 <bar_init+0x1f8>)
 8020ab6:	681b      	ldr	r3, [r3, #0]
 8020ab8:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8020abc:	4b0f      	ldr	r3, [pc, #60]	; (8020afc <bar_init+0x1fc>)
 8020abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ac0:	f003 0302 	and.w	r3, r3, #2
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	d004      	beq.n	8020ad2 <bar_init+0x1d2>
 8020ac8:	4811      	ldr	r0, [pc, #68]	; (8020b10 <bar_init+0x210>)
 8020aca:	f7fd ff0f 	bl	801e8ec <lv_color_hex>
 8020ace:	4604      	mov	r4, r0
 8020ad0:	e00b      	b.n	8020aea <bar_init+0x1ea>
 8020ad2:	4623      	mov	r3, r4
 8020ad4:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 8020ad8:	4623      	mov	r3, r4
 8020ada:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 8020ade:	4623      	mov	r3, r4
 8020ae0:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 8020ae4:	4623      	mov	r3, r4
 8020ae6:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8020aea:	4622      	mov	r2, r4
 8020aec:	2100      	movs	r1, #0
 8020aee:	4628      	mov	r0, r5
 8020af0:	f7fe fa20 	bl	801ef34 <lv_style_set_value_color>
#endif
}
 8020af4:	bf00      	nop
 8020af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020af8:	200200d4 	.word	0x200200d4
 8020afc:	200200a8 	.word	0x200200a8
 8020b00:	00d4d7d9 	.word	0x00d4d7d9
 8020b04:	0045494d 	.word	0x0045494d
 8020b08:	0031404f 	.word	0x0031404f
 8020b0c:	66666667 	.word	0x66666667
 8020b10:	0041404f 	.word	0x0041404f

08020b14 <img_init>:

static void img_init(void)
{
 8020b14:	b480      	push	{r7}
 8020b16:	af00      	add	r7, sp, #0
#if LV_USE_IMG != 0

#endif
}
 8020b18:	bf00      	nop
 8020b1a:	46bd      	mov	sp, r7
 8020b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b20:	4770      	bx	lr

08020b22 <line_init>:

static void line_init(void)
{
 8020b22:	b480      	push	{r7}
 8020b24:	af00      	add	r7, sp, #0
#if LV_USE_LINE != 0

#endif
}
 8020b26:	bf00      	nop
 8020b28:	46bd      	mov	sp, r7
 8020b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b2e:	4770      	bx	lr

08020b30 <led_init>:

static void led_init(void)
{
 8020b30:	b598      	push	{r3, r4, r7, lr}
 8020b32:	af00      	add	r7, sp, #0
#if LV_USE_LED != 0
    style_init_reset(&styles->led);
 8020b34:	4b4b      	ldr	r3, [pc, #300]	; (8020c64 <led_init+0x134>)
 8020b36:	681b      	ldr	r3, [r3, #0]
 8020b38:	3370      	adds	r3, #112	; 0x70
 8020b3a:	4618      	mov	r0, r3
 8020b3c:	f004 fc94 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020b40:	4b48      	ldr	r3, [pc, #288]	; (8020c64 <led_init+0x134>)
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	3370      	adds	r3, #112	; 0x70
 8020b46:	22ff      	movs	r2, #255	; 0xff
 8020b48:	2100      	movs	r1, #0
 8020b4a:	4618      	mov	r0, r3
 8020b4c:	f7fe f870 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
 8020b50:	4b44      	ldr	r3, [pc, #272]	; (8020c64 <led_init+0x134>)
 8020b52:	681b      	ldr	r3, [r3, #0]
 8020b54:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8020b58:	4b43      	ldr	r3, [pc, #268]	; (8020c68 <led_init+0x138>)
 8020b5a:	68da      	ldr	r2, [r3, #12]
 8020b5c:	2100      	movs	r1, #0
 8020b5e:	f7fe f850 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
 8020b62:	4b40      	ldr	r3, [pc, #256]	; (8020c64 <led_init+0x134>)
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	3370      	adds	r3, #112	; 0x70
 8020b68:	2202      	movs	r2, #2
 8020b6a:	2100      	movs	r1, #0
 8020b6c:	4618      	mov	r0, r3
 8020b6e:	f7fe f877 	bl	801ec60 <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
 8020b72:	4b3c      	ldr	r3, [pc, #240]	; (8020c64 <led_init+0x134>)
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	3370      	adds	r3, #112	; 0x70
 8020b78:	227f      	movs	r2, #127	; 0x7f
 8020b7a:	2100      	movs	r1, #0
 8020b7c:	4618      	mov	r0, r3
 8020b7e:	f7fe f8d1 	bl	801ed24 <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
 8020b82:	4b38      	ldr	r3, [pc, #224]	; (8020c64 <led_init+0x134>)
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8020b8a:	4b37      	ldr	r3, [pc, #220]	; (8020c68 <led_init+0x138>)
 8020b8c:	214c      	movs	r1, #76	; 0x4c
 8020b8e:	68d8      	ldr	r0, [r3, #12]
 8020b90:	f7fa ffc0 	bl	801bb14 <lv_color_lighten>
 8020b94:	4603      	mov	r3, r0
 8020b96:	461a      	mov	r2, r3
 8020b98:	2100      	movs	r1, #0
 8020b9a:	4620      	mov	r0, r4
 8020b9c:	f7fe f8ab 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020ba0:	4b30      	ldr	r3, [pc, #192]	; (8020c64 <led_init+0x134>)
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	3370      	adds	r3, #112	; 0x70
 8020ba6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020baa:	2100      	movs	r1, #0
 8020bac:	4618      	mov	r0, r3
 8020bae:	f7fd fee3 	bl	801e978 <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
 8020bb2:	4b2c      	ldr	r3, [pc, #176]	; (8020c64 <led_init+0x134>)
 8020bb4:	681b      	ldr	r3, [r3, #0]
 8020bb6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8020bba:	2000      	movs	r0, #0
 8020bbc:	f7f9 fc2c 	bl	801a418 <lv_disp_get_dpi>
 8020bc0:	4603      	mov	r3, r0
 8020bc2:	461a      	mov	r2, r3
 8020bc4:	4613      	mov	r3, r2
 8020bc6:	011b      	lsls	r3, r3, #4
 8020bc8:	1a9b      	subs	r3, r3, r2
 8020bca:	3350      	adds	r3, #80	; 0x50
 8020bcc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020bd0:	db10      	blt.n	8020bf4 <led_init+0xc4>
 8020bd2:	2000      	movs	r0, #0
 8020bd4:	f7f9 fc20 	bl	801a418 <lv_disp_get_dpi>
 8020bd8:	4603      	mov	r3, r0
 8020bda:	461a      	mov	r2, r3
 8020bdc:	4613      	mov	r3, r2
 8020bde:	011b      	lsls	r3, r3, #4
 8020be0:	1a9b      	subs	r3, r3, r2
 8020be2:	3350      	adds	r3, #80	; 0x50
 8020be4:	4a21      	ldr	r2, [pc, #132]	; (8020c6c <led_init+0x13c>)
 8020be6:	fb82 1203 	smull	r1, r2, r2, r3
 8020bea:	1192      	asrs	r2, r2, #6
 8020bec:	17db      	asrs	r3, r3, #31
 8020bee:	1ad3      	subs	r3, r2, r3
 8020bf0:	b21b      	sxth	r3, r3
 8020bf2:	e000      	b.n	8020bf6 <led_init+0xc6>
 8020bf4:	2301      	movs	r3, #1
 8020bf6:	461a      	mov	r2, r3
 8020bf8:	2100      	movs	r1, #0
 8020bfa:	4620      	mov	r0, r4
 8020bfc:	f7fe f90b 	bl	801ee16 <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
 8020c00:	4b18      	ldr	r3, [pc, #96]	; (8020c64 <led_init+0x134>)
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8020c08:	4b17      	ldr	r3, [pc, #92]	; (8020c68 <led_init+0x138>)
 8020c0a:	68da      	ldr	r2, [r3, #12]
 8020c0c:	2100      	movs	r1, #0
 8020c0e:	f7fe f934 	bl	801ee7a <lv_style_set_shadow_color>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
 8020c12:	4b14      	ldr	r3, [pc, #80]	; (8020c64 <led_init+0x134>)
 8020c14:	681b      	ldr	r3, [r3, #0]
 8020c16:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8020c1a:	2000      	movs	r0, #0
 8020c1c:	f7f9 fbfc 	bl	801a418 <lv_disp_get_dpi>
 8020c20:	4603      	mov	r3, r0
 8020c22:	461a      	mov	r2, r3
 8020c24:	4613      	mov	r3, r2
 8020c26:	009b      	lsls	r3, r3, #2
 8020c28:	4413      	add	r3, r2
 8020c2a:	3350      	adds	r3, #80	; 0x50
 8020c2c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020c30:	db10      	blt.n	8020c54 <led_init+0x124>
 8020c32:	2000      	movs	r0, #0
 8020c34:	f7f9 fbf0 	bl	801a418 <lv_disp_get_dpi>
 8020c38:	4603      	mov	r3, r0
 8020c3a:	461a      	mov	r2, r3
 8020c3c:	4613      	mov	r3, r2
 8020c3e:	009b      	lsls	r3, r3, #2
 8020c40:	4413      	add	r3, r2
 8020c42:	3350      	adds	r3, #80	; 0x50
 8020c44:	4a09      	ldr	r2, [pc, #36]	; (8020c6c <led_init+0x13c>)
 8020c46:	fb82 1203 	smull	r1, r2, r2, r3
 8020c4a:	1192      	asrs	r2, r2, #6
 8020c4c:	17db      	asrs	r3, r3, #31
 8020c4e:	1ad3      	subs	r3, r2, r3
 8020c50:	b21b      	sxth	r3, r3
 8020c52:	e000      	b.n	8020c56 <led_init+0x126>
 8020c54:	2301      	movs	r3, #1
 8020c56:	461a      	mov	r2, r3
 8020c58:	2100      	movs	r1, #0
 8020c5a:	4620      	mov	r0, r4
 8020c5c:	f7fe f8f4 	bl	801ee48 <lv_style_set_shadow_spread>
#endif
}
 8020c60:	bf00      	nop
 8020c62:	bd98      	pop	{r3, r4, r7, pc}
 8020c64:	200200d4 	.word	0x200200d4
 8020c68:	200200a8 	.word	0x200200a8
 8020c6c:	66666667 	.word	0x66666667

08020c70 <slider_init>:

static void slider_init(void)
{
 8020c70:	b5b0      	push	{r4, r5, r7, lr}
 8020c72:	af00      	add	r7, sp, #0
#if LV_USE_SLIDER != 0
    style_init_reset(&styles->slider_knob);
 8020c74:	4bcd      	ldr	r3, [pc, #820]	; (8020fac <slider_init+0x33c>)
 8020c76:	681b      	ldr	r3, [r3, #0]
 8020c78:	3394      	adds	r3, #148	; 0x94
 8020c7a:	4618      	mov	r0, r3
 8020c7c:	f004 fbf4 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020c80:	4bca      	ldr	r3, [pc, #808]	; (8020fac <slider_init+0x33c>)
 8020c82:	681b      	ldr	r3, [r3, #0]
 8020c84:	3394      	adds	r3, #148	; 0x94
 8020c86:	22ff      	movs	r2, #255	; 0xff
 8020c88:	2100      	movs	r1, #0
 8020c8a:	4618      	mov	r0, r3
 8020c8c:	f7fd ffd0 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
 8020c90:	4bc6      	ldr	r3, [pc, #792]	; (8020fac <slider_init+0x33c>)
 8020c92:	681b      	ldr	r3, [r3, #0]
 8020c94:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8020c98:	4bc5      	ldr	r3, [pc, #788]	; (8020fb0 <slider_init+0x340>)
 8020c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c9c:	f003 0302 	and.w	r3, r3, #2
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d002      	beq.n	8020caa <slider_init+0x3a>
 8020ca4:	4bc2      	ldr	r3, [pc, #776]	; (8020fb0 <slider_init+0x340>)
 8020ca6:	68dc      	ldr	r4, [r3, #12]
 8020ca8:	e00b      	b.n	8020cc2 <slider_init+0x52>
 8020caa:	4623      	mov	r3, r4
 8020cac:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 8020cb0:	4623      	mov	r3, r4
 8020cb2:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 8020cb6:	4623      	mov	r3, r4
 8020cb8:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 8020cbc:	4623      	mov	r3, r4
 8020cbe:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8020cc2:	4622      	mov	r2, r4
 8020cc4:	2100      	movs	r1, #0
 8020cc6:	f7fd ff9c 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 8020cca:	4bb8      	ldr	r3, [pc, #736]	; (8020fac <slider_init+0x33c>)
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020cd2:	4bb7      	ldr	r3, [pc, #732]	; (8020fb0 <slider_init+0x340>)
 8020cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020cd6:	f003 0302 	and.w	r3, r3, #2
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d004      	beq.n	8020ce8 <slider_init+0x78>
 8020cde:	48b5      	ldr	r0, [pc, #724]	; (8020fb4 <slider_init+0x344>)
 8020ce0:	f7fd fe04 	bl	801e8ec <lv_color_hex>
 8020ce4:	4605      	mov	r5, r0
 8020ce6:	e00b      	b.n	8020d00 <slider_init+0x90>
 8020ce8:	462b      	mov	r3, r5
 8020cea:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 8020cee:	462b      	mov	r3, r5
 8020cf0:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 8020cf4:	462b      	mov	r3, r5
 8020cf6:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 8020cfa:	462b      	mov	r3, r5
 8020cfc:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 8020d00:	462a      	mov	r2, r5
 8020d02:	2100      	movs	r1, #0
 8020d04:	4620      	mov	r0, r4
 8020d06:	f7fe f915 	bl	801ef34 <lv_style_set_value_color>
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020d0a:	4ba8      	ldr	r3, [pc, #672]	; (8020fac <slider_init+0x33c>)
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	3394      	adds	r3, #148	; 0x94
 8020d10:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020d14:	2100      	movs	r1, #0
 8020d16:	4618      	mov	r0, r3
 8020d18:	f7fd fe2e 	bl	801e978 <lv_style_set_radius>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020d1c:	4ba3      	ldr	r3, [pc, #652]	; (8020fac <slider_init+0x33c>)
 8020d1e:	681b      	ldr	r3, [r3, #0]
 8020d20:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020d24:	2000      	movs	r0, #0
 8020d26:	f7f9 fb77 	bl	801a418 <lv_disp_get_dpi>
 8020d2a:	4603      	mov	r3, r0
 8020d2c:	461a      	mov	r2, r3
 8020d2e:	4613      	mov	r3, r2
 8020d30:	00db      	lsls	r3, r3, #3
 8020d32:	1a9b      	subs	r3, r3, r2
 8020d34:	3350      	adds	r3, #80	; 0x50
 8020d36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020d3a:	db10      	blt.n	8020d5e <slider_init+0xee>
 8020d3c:	2000      	movs	r0, #0
 8020d3e:	f7f9 fb6b 	bl	801a418 <lv_disp_get_dpi>
 8020d42:	4603      	mov	r3, r0
 8020d44:	461a      	mov	r2, r3
 8020d46:	4613      	mov	r3, r2
 8020d48:	00db      	lsls	r3, r3, #3
 8020d4a:	1a9b      	subs	r3, r3, r2
 8020d4c:	3350      	adds	r3, #80	; 0x50
 8020d4e:	4a9a      	ldr	r2, [pc, #616]	; (8020fb8 <slider_init+0x348>)
 8020d50:	fb82 1203 	smull	r1, r2, r2, r3
 8020d54:	1192      	asrs	r2, r2, #6
 8020d56:	17db      	asrs	r3, r3, #31
 8020d58:	1ad3      	subs	r3, r2, r3
 8020d5a:	b21b      	sxth	r3, r3
 8020d5c:	e000      	b.n	8020d60 <slider_init+0xf0>
 8020d5e:	2301      	movs	r3, #1
 8020d60:	461a      	mov	r2, r3
 8020d62:	2100      	movs	r1, #0
 8020d64:	4620      	mov	r0, r4
 8020d66:	f7fd fe9d 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020d6a:	4b90      	ldr	r3, [pc, #576]	; (8020fac <slider_init+0x33c>)
 8020d6c:	681b      	ldr	r3, [r3, #0]
 8020d6e:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020d72:	2000      	movs	r0, #0
 8020d74:	f7f9 fb50 	bl	801a418 <lv_disp_get_dpi>
 8020d78:	4603      	mov	r3, r0
 8020d7a:	461a      	mov	r2, r3
 8020d7c:	4613      	mov	r3, r2
 8020d7e:	00db      	lsls	r3, r3, #3
 8020d80:	1a9b      	subs	r3, r3, r2
 8020d82:	3350      	adds	r3, #80	; 0x50
 8020d84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020d88:	db10      	blt.n	8020dac <slider_init+0x13c>
 8020d8a:	2000      	movs	r0, #0
 8020d8c:	f7f9 fb44 	bl	801a418 <lv_disp_get_dpi>
 8020d90:	4603      	mov	r3, r0
 8020d92:	461a      	mov	r2, r3
 8020d94:	4613      	mov	r3, r2
 8020d96:	00db      	lsls	r3, r3, #3
 8020d98:	1a9b      	subs	r3, r3, r2
 8020d9a:	3350      	adds	r3, #80	; 0x50
 8020d9c:	4a86      	ldr	r2, [pc, #536]	; (8020fb8 <slider_init+0x348>)
 8020d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8020da2:	1192      	asrs	r2, r2, #6
 8020da4:	17db      	asrs	r3, r3, #31
 8020da6:	1ad3      	subs	r3, r2, r3
 8020da8:	b21b      	sxth	r3, r3
 8020daa:	e000      	b.n	8020dae <slider_init+0x13e>
 8020dac:	2301      	movs	r3, #1
 8020dae:	461a      	mov	r2, r3
 8020db0:	2100      	movs	r1, #0
 8020db2:	4620      	mov	r0, r4
 8020db4:	f7fd fe8f 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020db8:	4b7c      	ldr	r3, [pc, #496]	; (8020fac <slider_init+0x33c>)
 8020dba:	681b      	ldr	r3, [r3, #0]
 8020dbc:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020dc0:	2000      	movs	r0, #0
 8020dc2:	f7f9 fb29 	bl	801a418 <lv_disp_get_dpi>
 8020dc6:	4603      	mov	r3, r0
 8020dc8:	461a      	mov	r2, r3
 8020dca:	4613      	mov	r3, r2
 8020dcc:	00db      	lsls	r3, r3, #3
 8020dce:	1a9b      	subs	r3, r3, r2
 8020dd0:	3350      	adds	r3, #80	; 0x50
 8020dd2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020dd6:	db10      	blt.n	8020dfa <slider_init+0x18a>
 8020dd8:	2000      	movs	r0, #0
 8020dda:	f7f9 fb1d 	bl	801a418 <lv_disp_get_dpi>
 8020dde:	4603      	mov	r3, r0
 8020de0:	461a      	mov	r2, r3
 8020de2:	4613      	mov	r3, r2
 8020de4:	00db      	lsls	r3, r3, #3
 8020de6:	1a9b      	subs	r3, r3, r2
 8020de8:	3350      	adds	r3, #80	; 0x50
 8020dea:	4a73      	ldr	r2, [pc, #460]	; (8020fb8 <slider_init+0x348>)
 8020dec:	fb82 1203 	smull	r1, r2, r2, r3
 8020df0:	1192      	asrs	r2, r2, #6
 8020df2:	17db      	asrs	r3, r3, #31
 8020df4:	1ad3      	subs	r3, r2, r3
 8020df6:	b21b      	sxth	r3, r3
 8020df8:	e000      	b.n	8020dfc <slider_init+0x18c>
 8020dfa:	2301      	movs	r3, #1
 8020dfc:	461a      	mov	r2, r3
 8020dfe:	2100      	movs	r1, #0
 8020e00:	4620      	mov	r0, r4
 8020e02:	f7fd fe1d 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020e06:	4b69      	ldr	r3, [pc, #420]	; (8020fac <slider_init+0x33c>)
 8020e08:	681b      	ldr	r3, [r3, #0]
 8020e0a:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020e0e:	2000      	movs	r0, #0
 8020e10:	f7f9 fb02 	bl	801a418 <lv_disp_get_dpi>
 8020e14:	4603      	mov	r3, r0
 8020e16:	461a      	mov	r2, r3
 8020e18:	4613      	mov	r3, r2
 8020e1a:	00db      	lsls	r3, r3, #3
 8020e1c:	1a9b      	subs	r3, r3, r2
 8020e1e:	3350      	adds	r3, #80	; 0x50
 8020e20:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020e24:	db10      	blt.n	8020e48 <slider_init+0x1d8>
 8020e26:	2000      	movs	r0, #0
 8020e28:	f7f9 faf6 	bl	801a418 <lv_disp_get_dpi>
 8020e2c:	4603      	mov	r3, r0
 8020e2e:	461a      	mov	r2, r3
 8020e30:	4613      	mov	r3, r2
 8020e32:	00db      	lsls	r3, r3, #3
 8020e34:	1a9b      	subs	r3, r3, r2
 8020e36:	3350      	adds	r3, #80	; 0x50
 8020e38:	4a5f      	ldr	r2, [pc, #380]	; (8020fb8 <slider_init+0x348>)
 8020e3a:	fb82 1203 	smull	r1, r2, r2, r3
 8020e3e:	1192      	asrs	r2, r2, #6
 8020e40:	17db      	asrs	r3, r3, #31
 8020e42:	1ad3      	subs	r3, r2, r3
 8020e44:	b21b      	sxth	r3, r3
 8020e46:	e000      	b.n	8020e4a <slider_init+0x1da>
 8020e48:	2301      	movs	r3, #1
 8020e4a:	461a      	mov	r2, r3
 8020e4c:	2100      	movs	r1, #0
 8020e4e:	4620      	mov	r0, r4
 8020e50:	f7fd fe0f 	bl	801ea72 <lv_style_set_pad_bottom>

    style_init_reset(&styles->slider_bg);
 8020e54:	4b55      	ldr	r3, [pc, #340]	; (8020fac <slider_init+0x33c>)
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	3398      	adds	r3, #152	; 0x98
 8020e5a:	4618      	mov	r0, r3
 8020e5c:	f004 fb04 	bl	8025468 <style_init_reset>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020e60:	4b52      	ldr	r3, [pc, #328]	; (8020fac <slider_init+0x33c>)
 8020e62:	681b      	ldr	r3, [r3, #0]
 8020e64:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020e68:	2000      	movs	r0, #0
 8020e6a:	f7f9 fad5 	bl	801a418 <lv_disp_get_dpi>
 8020e6e:	4603      	mov	r3, r0
 8020e70:	461a      	mov	r2, r3
 8020e72:	4613      	mov	r3, r2
 8020e74:	009b      	lsls	r3, r3, #2
 8020e76:	4413      	add	r3, r2
 8020e78:	005b      	lsls	r3, r3, #1
 8020e7a:	3350      	adds	r3, #80	; 0x50
 8020e7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020e80:	db11      	blt.n	8020ea6 <slider_init+0x236>
 8020e82:	2000      	movs	r0, #0
 8020e84:	f7f9 fac8 	bl	801a418 <lv_disp_get_dpi>
 8020e88:	4603      	mov	r3, r0
 8020e8a:	461a      	mov	r2, r3
 8020e8c:	4613      	mov	r3, r2
 8020e8e:	009b      	lsls	r3, r3, #2
 8020e90:	4413      	add	r3, r2
 8020e92:	005b      	lsls	r3, r3, #1
 8020e94:	3350      	adds	r3, #80	; 0x50
 8020e96:	4a48      	ldr	r2, [pc, #288]	; (8020fb8 <slider_init+0x348>)
 8020e98:	fb82 1203 	smull	r1, r2, r2, r3
 8020e9c:	1192      	asrs	r2, r2, #6
 8020e9e:	17db      	asrs	r3, r3, #31
 8020ea0:	1ad3      	subs	r3, r2, r3
 8020ea2:	b21b      	sxth	r3, r3
 8020ea4:	e000      	b.n	8020ea8 <slider_init+0x238>
 8020ea6:	2301      	movs	r3, #1
 8020ea8:	461a      	mov	r2, r3
 8020eaa:	2100      	movs	r1, #0
 8020eac:	4620      	mov	r0, r4
 8020eae:	f7fd fe76 	bl	801eb9e <lv_style_set_margin_left>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020eb2:	4b3e      	ldr	r3, [pc, #248]	; (8020fac <slider_init+0x33c>)
 8020eb4:	681b      	ldr	r3, [r3, #0]
 8020eb6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020eba:	2000      	movs	r0, #0
 8020ebc:	f7f9 faac 	bl	801a418 <lv_disp_get_dpi>
 8020ec0:	4603      	mov	r3, r0
 8020ec2:	461a      	mov	r2, r3
 8020ec4:	4613      	mov	r3, r2
 8020ec6:	009b      	lsls	r3, r3, #2
 8020ec8:	4413      	add	r3, r2
 8020eca:	005b      	lsls	r3, r3, #1
 8020ecc:	3350      	adds	r3, #80	; 0x50
 8020ece:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020ed2:	db11      	blt.n	8020ef8 <slider_init+0x288>
 8020ed4:	2000      	movs	r0, #0
 8020ed6:	f7f9 fa9f 	bl	801a418 <lv_disp_get_dpi>
 8020eda:	4603      	mov	r3, r0
 8020edc:	461a      	mov	r2, r3
 8020ede:	4613      	mov	r3, r2
 8020ee0:	009b      	lsls	r3, r3, #2
 8020ee2:	4413      	add	r3, r2
 8020ee4:	005b      	lsls	r3, r3, #1
 8020ee6:	3350      	adds	r3, #80	; 0x50
 8020ee8:	4a33      	ldr	r2, [pc, #204]	; (8020fb8 <slider_init+0x348>)
 8020eea:	fb82 1203 	smull	r1, r2, r2, r3
 8020eee:	1192      	asrs	r2, r2, #6
 8020ef0:	17db      	asrs	r3, r3, #31
 8020ef2:	1ad3      	subs	r3, r2, r3
 8020ef4:	b21b      	sxth	r3, r3
 8020ef6:	e000      	b.n	8020efa <slider_init+0x28a>
 8020ef8:	2301      	movs	r3, #1
 8020efa:	461a      	mov	r2, r3
 8020efc:	2100      	movs	r1, #0
 8020efe:	4620      	mov	r0, r4
 8020f00:	f7fd fe66 	bl	801ebd0 <lv_style_set_margin_right>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020f04:	4b29      	ldr	r3, [pc, #164]	; (8020fac <slider_init+0x33c>)
 8020f06:	681b      	ldr	r3, [r3, #0]
 8020f08:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020f0c:	2000      	movs	r0, #0
 8020f0e:	f7f9 fa83 	bl	801a418 <lv_disp_get_dpi>
 8020f12:	4603      	mov	r3, r0
 8020f14:	461a      	mov	r2, r3
 8020f16:	4613      	mov	r3, r2
 8020f18:	009b      	lsls	r3, r3, #2
 8020f1a:	4413      	add	r3, r2
 8020f1c:	005b      	lsls	r3, r3, #1
 8020f1e:	3350      	adds	r3, #80	; 0x50
 8020f20:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020f24:	db11      	blt.n	8020f4a <slider_init+0x2da>
 8020f26:	2000      	movs	r0, #0
 8020f28:	f7f9 fa76 	bl	801a418 <lv_disp_get_dpi>
 8020f2c:	4603      	mov	r3, r0
 8020f2e:	461a      	mov	r2, r3
 8020f30:	4613      	mov	r3, r2
 8020f32:	009b      	lsls	r3, r3, #2
 8020f34:	4413      	add	r3, r2
 8020f36:	005b      	lsls	r3, r3, #1
 8020f38:	3350      	adds	r3, #80	; 0x50
 8020f3a:	4a1f      	ldr	r2, [pc, #124]	; (8020fb8 <slider_init+0x348>)
 8020f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8020f40:	1192      	asrs	r2, r2, #6
 8020f42:	17db      	asrs	r3, r3, #31
 8020f44:	1ad3      	subs	r3, r2, r3
 8020f46:	b21b      	sxth	r3, r3
 8020f48:	e000      	b.n	8020f4c <slider_init+0x2dc>
 8020f4a:	2301      	movs	r3, #1
 8020f4c:	461a      	mov	r2, r3
 8020f4e:	2100      	movs	r1, #0
 8020f50:	4620      	mov	r0, r4
 8020f52:	f7fd fdf2 	bl	801eb3a <lv_style_set_margin_top>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020f56:	4b15      	ldr	r3, [pc, #84]	; (8020fac <slider_init+0x33c>)
 8020f58:	681b      	ldr	r3, [r3, #0]
 8020f5a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020f5e:	2000      	movs	r0, #0
 8020f60:	f7f9 fa5a 	bl	801a418 <lv_disp_get_dpi>
 8020f64:	4603      	mov	r3, r0
 8020f66:	461a      	mov	r2, r3
 8020f68:	4613      	mov	r3, r2
 8020f6a:	009b      	lsls	r3, r3, #2
 8020f6c:	4413      	add	r3, r2
 8020f6e:	005b      	lsls	r3, r3, #1
 8020f70:	3350      	adds	r3, #80	; 0x50
 8020f72:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020f76:	db11      	blt.n	8020f9c <slider_init+0x32c>
 8020f78:	2000      	movs	r0, #0
 8020f7a:	f7f9 fa4d 	bl	801a418 <lv_disp_get_dpi>
 8020f7e:	4603      	mov	r3, r0
 8020f80:	461a      	mov	r2, r3
 8020f82:	4613      	mov	r3, r2
 8020f84:	009b      	lsls	r3, r3, #2
 8020f86:	4413      	add	r3, r2
 8020f88:	005b      	lsls	r3, r3, #1
 8020f8a:	3350      	adds	r3, #80	; 0x50
 8020f8c:	4a0a      	ldr	r2, [pc, #40]	; (8020fb8 <slider_init+0x348>)
 8020f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8020f92:	1192      	asrs	r2, r2, #6
 8020f94:	17db      	asrs	r3, r3, #31
 8020f96:	1ad3      	subs	r3, r2, r3
 8020f98:	b21b      	sxth	r3, r3
 8020f9a:	e000      	b.n	8020f9e <slider_init+0x32e>
 8020f9c:	2301      	movs	r3, #1
 8020f9e:	461a      	mov	r2, r3
 8020fa0:	2100      	movs	r1, #0
 8020fa2:	4620      	mov	r0, r4
 8020fa4:	f7fd fde2 	bl	801eb6c <lv_style_set_margin_bottom>

#endif
}
 8020fa8:	bf00      	nop
 8020faa:	bdb0      	pop	{r4, r5, r7, pc}
 8020fac:	200200d4 	.word	0x200200d4
 8020fb0:	200200a8 	.word	0x200200a8
 8020fb4:	0031404f 	.word	0x0031404f
 8020fb8:	66666667 	.word	0x66666667

08020fbc <switch_init>:

static void switch_init(void)
{
 8020fbc:	b598      	push	{r3, r4, r7, lr}
 8020fbe:	af00      	add	r7, sp, #0
#if LV_USE_SWITCH != 0
    style_init_reset(&styles->sw_knob);
 8020fc0:	4b5a      	ldr	r3, [pc, #360]	; (802112c <switch_init+0x170>)
 8020fc2:	681b      	ldr	r3, [r3, #0]
 8020fc4:	33a0      	adds	r3, #160	; 0xa0
 8020fc6:	4618      	mov	r0, r3
 8020fc8:	f004 fa4e 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020fcc:	4b57      	ldr	r3, [pc, #348]	; (802112c <switch_init+0x170>)
 8020fce:	681b      	ldr	r3, [r3, #0]
 8020fd0:	33a0      	adds	r3, #160	; 0xa0
 8020fd2:	22ff      	movs	r2, #255	; 0xff
 8020fd4:	2100      	movs	r1, #0
 8020fd6:	4618      	mov	r0, r3
 8020fd8:	f7fd fe2a 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8020fdc:	4b53      	ldr	r3, [pc, #332]	; (802112c <switch_init+0x170>)
 8020fde:	681b      	ldr	r3, [r3, #0]
 8020fe0:	33a0      	adds	r3, #160	; 0xa0
 8020fe2:	4622      	mov	r2, r4
 8020fe4:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 8020fe8:	4622      	mov	r2, r4
 8020fea:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8020fee:	4622      	mov	r2, r4
 8020ff0:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 8020ff4:	4622      	mov	r2, r4
 8020ff6:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8020ffa:	4622      	mov	r2, r4
 8020ffc:	2100      	movs	r1, #0
 8020ffe:	4618      	mov	r0, r3
 8021000:	f7fd fdff 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8021004:	4b49      	ldr	r3, [pc, #292]	; (802112c <switch_init+0x170>)
 8021006:	681b      	ldr	r3, [r3, #0]
 8021008:	33a0      	adds	r3, #160	; 0xa0
 802100a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802100e:	2100      	movs	r1, #0
 8021010:	4618      	mov	r0, r3
 8021012:	f7fd fcb1 	bl	801e978 <lv_style_set_radius>
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
 8021016:	4b45      	ldr	r3, [pc, #276]	; (802112c <switch_init+0x170>)
 8021018:	681b      	ldr	r3, [r3, #0]
 802101a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 802101e:	2000      	movs	r0, #0
 8021020:	f7f9 f9fa 	bl	801a418 <lv_disp_get_dpi>
 8021024:	4603      	mov	r3, r0
 8021026:	3314      	adds	r3, #20
 8021028:	009b      	lsls	r3, r3, #2
 802102a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802102e:	db0d      	blt.n	802104c <switch_init+0x90>
 8021030:	2000      	movs	r0, #0
 8021032:	f7f9 f9f1 	bl	801a418 <lv_disp_get_dpi>
 8021036:	4603      	mov	r3, r0
 8021038:	3314      	adds	r3, #20
 802103a:	009b      	lsls	r3, r3, #2
 802103c:	4a3c      	ldr	r2, [pc, #240]	; (8021130 <switch_init+0x174>)
 802103e:	fb82 1203 	smull	r1, r2, r2, r3
 8021042:	1192      	asrs	r2, r2, #6
 8021044:	17db      	asrs	r3, r3, #31
 8021046:	1a9b      	subs	r3, r3, r2
 8021048:	b21b      	sxth	r3, r3
 802104a:	e001      	b.n	8021050 <switch_init+0x94>
 802104c:	f04f 33ff 	mov.w	r3, #4294967295
 8021050:	461a      	mov	r2, r3
 8021052:	2100      	movs	r1, #0
 8021054:	4620      	mov	r0, r4
 8021056:	f7fd fcf3 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
 802105a:	4b34      	ldr	r3, [pc, #208]	; (802112c <switch_init+0x170>)
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8021062:	2000      	movs	r0, #0
 8021064:	f7f9 f9d8 	bl	801a418 <lv_disp_get_dpi>
 8021068:	4603      	mov	r3, r0
 802106a:	3314      	adds	r3, #20
 802106c:	009b      	lsls	r3, r3, #2
 802106e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021072:	db0d      	blt.n	8021090 <switch_init+0xd4>
 8021074:	2000      	movs	r0, #0
 8021076:	f7f9 f9cf 	bl	801a418 <lv_disp_get_dpi>
 802107a:	4603      	mov	r3, r0
 802107c:	3314      	adds	r3, #20
 802107e:	009b      	lsls	r3, r3, #2
 8021080:	4a2b      	ldr	r2, [pc, #172]	; (8021130 <switch_init+0x174>)
 8021082:	fb82 1203 	smull	r1, r2, r2, r3
 8021086:	1192      	asrs	r2, r2, #6
 8021088:	17db      	asrs	r3, r3, #31
 802108a:	1a9b      	subs	r3, r3, r2
 802108c:	b21b      	sxth	r3, r3
 802108e:	e001      	b.n	8021094 <switch_init+0xd8>
 8021090:	f04f 33ff 	mov.w	r3, #4294967295
 8021094:	461a      	mov	r2, r3
 8021096:	2100      	movs	r1, #0
 8021098:	4620      	mov	r0, r4
 802109a:	f7fd fcea 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
 802109e:	4b23      	ldr	r3, [pc, #140]	; (802112c <switch_init+0x170>)
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80210a6:	2000      	movs	r0, #0
 80210a8:	f7f9 f9b6 	bl	801a418 <lv_disp_get_dpi>
 80210ac:	4603      	mov	r3, r0
 80210ae:	3314      	adds	r3, #20
 80210b0:	009b      	lsls	r3, r3, #2
 80210b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80210b6:	db0d      	blt.n	80210d4 <switch_init+0x118>
 80210b8:	2000      	movs	r0, #0
 80210ba:	f7f9 f9ad 	bl	801a418 <lv_disp_get_dpi>
 80210be:	4603      	mov	r3, r0
 80210c0:	3314      	adds	r3, #20
 80210c2:	009b      	lsls	r3, r3, #2
 80210c4:	4a1a      	ldr	r2, [pc, #104]	; (8021130 <switch_init+0x174>)
 80210c6:	fb82 1203 	smull	r1, r2, r2, r3
 80210ca:	1192      	asrs	r2, r2, #6
 80210cc:	17db      	asrs	r3, r3, #31
 80210ce:	1a9b      	subs	r3, r3, r2
 80210d0:	b21b      	sxth	r3, r3
 80210d2:	e001      	b.n	80210d8 <switch_init+0x11c>
 80210d4:	f04f 33ff 	mov.w	r3, #4294967295
 80210d8:	461a      	mov	r2, r3
 80210da:	2100      	movs	r1, #0
 80210dc:	4620      	mov	r0, r4
 80210de:	f7fd fce1 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
 80210e2:	4b12      	ldr	r3, [pc, #72]	; (802112c <switch_init+0x170>)
 80210e4:	681b      	ldr	r3, [r3, #0]
 80210e6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80210ea:	2000      	movs	r0, #0
 80210ec:	f7f9 f994 	bl	801a418 <lv_disp_get_dpi>
 80210f0:	4603      	mov	r3, r0
 80210f2:	3314      	adds	r3, #20
 80210f4:	009b      	lsls	r3, r3, #2
 80210f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80210fa:	db0d      	blt.n	8021118 <switch_init+0x15c>
 80210fc:	2000      	movs	r0, #0
 80210fe:	f7f9 f98b 	bl	801a418 <lv_disp_get_dpi>
 8021102:	4603      	mov	r3, r0
 8021104:	3314      	adds	r3, #20
 8021106:	009b      	lsls	r3, r3, #2
 8021108:	4a09      	ldr	r2, [pc, #36]	; (8021130 <switch_init+0x174>)
 802110a:	fb82 1203 	smull	r1, r2, r2, r3
 802110e:	1192      	asrs	r2, r2, #6
 8021110:	17db      	asrs	r3, r3, #31
 8021112:	1a9b      	subs	r3, r3, r2
 8021114:	b21b      	sxth	r3, r3
 8021116:	e001      	b.n	802111c <switch_init+0x160>
 8021118:	f04f 33ff 	mov.w	r3, #4294967295
 802111c:	461a      	mov	r2, r3
 802111e:	2100      	movs	r1, #0
 8021120:	4620      	mov	r0, r4
 8021122:	f7fd fcd8 	bl	801ead6 <lv_style_set_pad_right>
#endif
}
 8021126:	bf00      	nop
 8021128:	bd98      	pop	{r3, r4, r7, pc}
 802112a:	bf00      	nop
 802112c:	200200d4 	.word	0x200200d4
 8021130:	66666667 	.word	0x66666667

08021134 <linemeter_init>:

static void linemeter_init(void)
{
 8021134:	b598      	push	{r3, r4, r7, lr}
 8021136:	af00      	add	r7, sp, #0
#if LV_USE_LINEMETER != 0
    style_init_reset(&styles->lmeter);
 8021138:	4ba7      	ldr	r3, [pc, #668]	; (80213d8 <linemeter_init+0x2a4>)
 802113a:	681b      	ldr	r3, [r3, #0]
 802113c:	3374      	adds	r3, #116	; 0x74
 802113e:	4618      	mov	r0, r3
 8021140:	f004 f992 	bl	8025468 <style_init_reset>
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8021144:	4ba4      	ldr	r3, [pc, #656]	; (80213d8 <linemeter_init+0x2a4>)
 8021146:	681b      	ldr	r3, [r3, #0]
 8021148:	3374      	adds	r3, #116	; 0x74
 802114a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802114e:	2100      	movs	r1, #0
 8021150:	4618      	mov	r0, r3
 8021152:	f7fd fc11 	bl	801e978 <lv_style_set_radius>
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8021156:	4ba0      	ldr	r3, [pc, #640]	; (80213d8 <linemeter_init+0x2a4>)
 8021158:	681b      	ldr	r3, [r3, #0]
 802115a:	f103 0474 	add.w	r4, r3, #116	; 0x74
 802115e:	2000      	movs	r0, #0
 8021160:	f7f9 f95a 	bl	801a418 <lv_disp_get_dpi>
 8021164:	4603      	mov	r3, r0
 8021166:	461a      	mov	r2, r3
 8021168:	4613      	mov	r3, r2
 802116a:	009b      	lsls	r3, r3, #2
 802116c:	4413      	add	r3, r2
 802116e:	009b      	lsls	r3, r3, #2
 8021170:	3350      	adds	r3, #80	; 0x50
 8021172:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021176:	db11      	blt.n	802119c <linemeter_init+0x68>
 8021178:	2000      	movs	r0, #0
 802117a:	f7f9 f94d 	bl	801a418 <lv_disp_get_dpi>
 802117e:	4603      	mov	r3, r0
 8021180:	461a      	mov	r2, r3
 8021182:	4613      	mov	r3, r2
 8021184:	009b      	lsls	r3, r3, #2
 8021186:	4413      	add	r3, r2
 8021188:	009b      	lsls	r3, r3, #2
 802118a:	3350      	adds	r3, #80	; 0x50
 802118c:	4a93      	ldr	r2, [pc, #588]	; (80213dc <linemeter_init+0x2a8>)
 802118e:	fb82 1203 	smull	r1, r2, r2, r3
 8021192:	1192      	asrs	r2, r2, #6
 8021194:	17db      	asrs	r3, r3, #31
 8021196:	1ad3      	subs	r3, r2, r3
 8021198:	b21b      	sxth	r3, r3
 802119a:	e000      	b.n	802119e <linemeter_init+0x6a>
 802119c:	2301      	movs	r3, #1
 802119e:	461a      	mov	r2, r3
 80211a0:	2100      	movs	r1, #0
 80211a2:	4620      	mov	r0, r4
 80211a4:	f7fd fc7e 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 80211a8:	4b8b      	ldr	r3, [pc, #556]	; (80213d8 <linemeter_init+0x2a4>)
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	f103 0474 	add.w	r4, r3, #116	; 0x74
 80211b0:	2000      	movs	r0, #0
 80211b2:	f7f9 f931 	bl	801a418 <lv_disp_get_dpi>
 80211b6:	4603      	mov	r3, r0
 80211b8:	461a      	mov	r2, r3
 80211ba:	4613      	mov	r3, r2
 80211bc:	009b      	lsls	r3, r3, #2
 80211be:	4413      	add	r3, r2
 80211c0:	009b      	lsls	r3, r3, #2
 80211c2:	3350      	adds	r3, #80	; 0x50
 80211c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80211c8:	db11      	blt.n	80211ee <linemeter_init+0xba>
 80211ca:	2000      	movs	r0, #0
 80211cc:	f7f9 f924 	bl	801a418 <lv_disp_get_dpi>
 80211d0:	4603      	mov	r3, r0
 80211d2:	461a      	mov	r2, r3
 80211d4:	4613      	mov	r3, r2
 80211d6:	009b      	lsls	r3, r3, #2
 80211d8:	4413      	add	r3, r2
 80211da:	009b      	lsls	r3, r3, #2
 80211dc:	3350      	adds	r3, #80	; 0x50
 80211de:	4a7f      	ldr	r2, [pc, #508]	; (80213dc <linemeter_init+0x2a8>)
 80211e0:	fb82 1203 	smull	r1, r2, r2, r3
 80211e4:	1192      	asrs	r2, r2, #6
 80211e6:	17db      	asrs	r3, r3, #31
 80211e8:	1ad3      	subs	r3, r2, r3
 80211ea:	b21b      	sxth	r3, r3
 80211ec:	e000      	b.n	80211f0 <linemeter_init+0xbc>
 80211ee:	2301      	movs	r3, #1
 80211f0:	461a      	mov	r2, r3
 80211f2:	2100      	movs	r1, #0
 80211f4:	4620      	mov	r0, r4
 80211f6:	f7fd fc6e 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 80211fa:	4b77      	ldr	r3, [pc, #476]	; (80213d8 <linemeter_init+0x2a4>)
 80211fc:	681b      	ldr	r3, [r3, #0]
 80211fe:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8021202:	2000      	movs	r0, #0
 8021204:	f7f9 f908 	bl	801a418 <lv_disp_get_dpi>
 8021208:	4603      	mov	r3, r0
 802120a:	461a      	mov	r2, r3
 802120c:	4613      	mov	r3, r2
 802120e:	009b      	lsls	r3, r3, #2
 8021210:	4413      	add	r3, r2
 8021212:	009b      	lsls	r3, r3, #2
 8021214:	3350      	adds	r3, #80	; 0x50
 8021216:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802121a:	db11      	blt.n	8021240 <linemeter_init+0x10c>
 802121c:	2000      	movs	r0, #0
 802121e:	f7f9 f8fb 	bl	801a418 <lv_disp_get_dpi>
 8021222:	4603      	mov	r3, r0
 8021224:	461a      	mov	r2, r3
 8021226:	4613      	mov	r3, r2
 8021228:	009b      	lsls	r3, r3, #2
 802122a:	4413      	add	r3, r2
 802122c:	009b      	lsls	r3, r3, #2
 802122e:	3350      	adds	r3, #80	; 0x50
 8021230:	4a6a      	ldr	r2, [pc, #424]	; (80213dc <linemeter_init+0x2a8>)
 8021232:	fb82 1203 	smull	r1, r2, r2, r3
 8021236:	1192      	asrs	r2, r2, #6
 8021238:	17db      	asrs	r3, r3, #31
 802123a:	1ad3      	subs	r3, r2, r3
 802123c:	b21b      	sxth	r3, r3
 802123e:	e000      	b.n	8021242 <linemeter_init+0x10e>
 8021240:	2301      	movs	r3, #1
 8021242:	461a      	mov	r2, r3
 8021244:	2100      	movs	r1, #0
 8021246:	4620      	mov	r0, r4
 8021248:	f7fd fbfa 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
 802124c:	4b62      	ldr	r3, [pc, #392]	; (80213d8 <linemeter_init+0x2a4>)
 802124e:	681b      	ldr	r3, [r3, #0]
 8021250:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8021254:	2000      	movs	r0, #0
 8021256:	f7f9 f8df 	bl	801a418 <lv_disp_get_dpi>
 802125a:	4603      	mov	r3, r0
 802125c:	461a      	mov	r2, r3
 802125e:	4613      	mov	r3, r2
 8021260:	011b      	lsls	r3, r3, #4
 8021262:	1a9b      	subs	r3, r3, r2
 8021264:	005b      	lsls	r3, r3, #1
 8021266:	3350      	adds	r3, #80	; 0x50
 8021268:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802126c:	db11      	blt.n	8021292 <linemeter_init+0x15e>
 802126e:	2000      	movs	r0, #0
 8021270:	f7f9 f8d2 	bl	801a418 <lv_disp_get_dpi>
 8021274:	4603      	mov	r3, r0
 8021276:	461a      	mov	r2, r3
 8021278:	4613      	mov	r3, r2
 802127a:	011b      	lsls	r3, r3, #4
 802127c:	1a9b      	subs	r3, r3, r2
 802127e:	005b      	lsls	r3, r3, #1
 8021280:	3350      	adds	r3, #80	; 0x50
 8021282:	4a56      	ldr	r2, [pc, #344]	; (80213dc <linemeter_init+0x2a8>)
 8021284:	fb82 1203 	smull	r1, r2, r2, r3
 8021288:	1192      	asrs	r2, r2, #6
 802128a:	17db      	asrs	r3, r3, #31
 802128c:	1ad3      	subs	r3, r2, r3
 802128e:	b21b      	sxth	r3, r3
 8021290:	e000      	b.n	8021294 <linemeter_init+0x160>
 8021292:	2301      	movs	r3, #1
 8021294:	461a      	mov	r2, r3
 8021296:	2100      	movs	r1, #0
 8021298:	4620      	mov	r0, r4
 802129a:	f7fd fc35 	bl	801eb08 <lv_style_set_pad_inner>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
 802129e:	4b4e      	ldr	r3, [pc, #312]	; (80213d8 <linemeter_init+0x2a4>)
 80212a0:	681b      	ldr	r3, [r3, #0]
 80212a2:	f103 0474 	add.w	r4, r3, #116	; 0x74
 80212a6:	2000      	movs	r0, #0
 80212a8:	f7f9 f8b6 	bl	801a418 <lv_disp_get_dpi>
 80212ac:	4603      	mov	r3, r0
 80212ae:	461a      	mov	r2, r3
 80212b0:	4613      	mov	r3, r2
 80212b2:	009b      	lsls	r3, r3, #2
 80212b4:	4413      	add	r3, r2
 80212b6:	009a      	lsls	r2, r3, #2
 80212b8:	4413      	add	r3, r2
 80212ba:	3350      	adds	r3, #80	; 0x50
 80212bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80212c0:	db12      	blt.n	80212e8 <linemeter_init+0x1b4>
 80212c2:	2000      	movs	r0, #0
 80212c4:	f7f9 f8a8 	bl	801a418 <lv_disp_get_dpi>
 80212c8:	4603      	mov	r3, r0
 80212ca:	461a      	mov	r2, r3
 80212cc:	4613      	mov	r3, r2
 80212ce:	009b      	lsls	r3, r3, #2
 80212d0:	4413      	add	r3, r2
 80212d2:	009a      	lsls	r2, r3, #2
 80212d4:	4413      	add	r3, r2
 80212d6:	3350      	adds	r3, #80	; 0x50
 80212d8:	4a40      	ldr	r2, [pc, #256]	; (80213dc <linemeter_init+0x2a8>)
 80212da:	fb82 1203 	smull	r1, r2, r2, r3
 80212de:	1192      	asrs	r2, r2, #6
 80212e0:	17db      	asrs	r3, r3, #31
 80212e2:	1ad3      	subs	r3, r2, r3
 80212e4:	b21b      	sxth	r3, r3
 80212e6:	e000      	b.n	80212ea <linemeter_init+0x1b6>
 80212e8:	2301      	movs	r3, #1
 80212ea:	461a      	mov	r2, r3
 80212ec:	2100      	movs	r1, #0
 80212ee:	4620      	mov	r0, r4
 80212f0:	f7fd fffe 	bl	801f2f0 <lv_style_set_scale_width>

    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
 80212f4:	4b38      	ldr	r3, [pc, #224]	; (80213d8 <linemeter_init+0x2a4>)
 80212f6:	681b      	ldr	r3, [r3, #0]
 80212f8:	f103 0074 	add.w	r0, r3, #116	; 0x74
 80212fc:	4b38      	ldr	r3, [pc, #224]	; (80213e0 <linemeter_init+0x2ac>)
 80212fe:	68da      	ldr	r2, [r3, #12]
 8021300:	2100      	movs	r1, #0
 8021302:	f7fd ff2d 	bl	801f160 <lv_style_set_line_color>
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
 8021306:	4b34      	ldr	r3, [pc, #208]	; (80213d8 <linemeter_init+0x2a4>)
 8021308:	681b      	ldr	r3, [r3, #0]
 802130a:	f103 0074 	add.w	r0, r3, #116	; 0x74
 802130e:	4b34      	ldr	r3, [pc, #208]	; (80213e0 <linemeter_init+0x2ac>)
 8021310:	68da      	ldr	r2, [r3, #12]
 8021312:	2100      	movs	r1, #0
 8021314:	f7fe f837 	bl	801f386 <lv_style_set_scale_grad_color>
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 8021318:	4b2f      	ldr	r3, [pc, #188]	; (80213d8 <linemeter_init+0x2a4>)
 802131a:	681b      	ldr	r3, [r3, #0]
 802131c:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8021320:	f640 0088 	movw	r0, #2184	; 0x888
 8021324:	f7fd faf6 	bl	801e914 <lv_color_hex3>
 8021328:	4603      	mov	r3, r0
 802132a:	461a      	mov	r2, r3
 802132c:	2100      	movs	r1, #0
 802132e:	4620      	mov	r0, r4
 8021330:	f7fe f840 	bl	801f3b4 <lv_style_set_scale_end_color>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
 8021334:	4b28      	ldr	r3, [pc, #160]	; (80213d8 <linemeter_init+0x2a4>)
 8021336:	681b      	ldr	r3, [r3, #0]
 8021338:	f103 0474 	add.w	r4, r3, #116	; 0x74
 802133c:	2000      	movs	r0, #0
 802133e:	f7f9 f86b 	bl	801a418 <lv_disp_get_dpi>
 8021342:	4603      	mov	r3, r0
 8021344:	461a      	mov	r2, r3
 8021346:	4613      	mov	r3, r2
 8021348:	009b      	lsls	r3, r3, #2
 802134a:	4413      	add	r3, r2
 802134c:	005b      	lsls	r3, r3, #1
 802134e:	3350      	adds	r3, #80	; 0x50
 8021350:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021354:	db11      	blt.n	802137a <linemeter_init+0x246>
 8021356:	2000      	movs	r0, #0
 8021358:	f7f9 f85e 	bl	801a418 <lv_disp_get_dpi>
 802135c:	4603      	mov	r3, r0
 802135e:	461a      	mov	r2, r3
 8021360:	4613      	mov	r3, r2
 8021362:	009b      	lsls	r3, r3, #2
 8021364:	4413      	add	r3, r2
 8021366:	005b      	lsls	r3, r3, #1
 8021368:	3350      	adds	r3, #80	; 0x50
 802136a:	4a1c      	ldr	r2, [pc, #112]	; (80213dc <linemeter_init+0x2a8>)
 802136c:	fb82 1203 	smull	r1, r2, r2, r3
 8021370:	1192      	asrs	r2, r2, #6
 8021372:	17db      	asrs	r3, r3, #31
 8021374:	1ad3      	subs	r3, r2, r3
 8021376:	b21b      	sxth	r3, r3
 8021378:	e000      	b.n	802137c <linemeter_init+0x248>
 802137a:	2301      	movs	r3, #1
 802137c:	461a      	mov	r2, r3
 802137e:	2100      	movs	r1, #0
 8021380:	4620      	mov	r0, r4
 8021382:	f7fd fe89 	bl	801f098 <lv_style_set_line_width>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
 8021386:	4b14      	ldr	r3, [pc, #80]	; (80213d8 <linemeter_init+0x2a4>)
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	f103 0474 	add.w	r4, r3, #116	; 0x74
 802138e:	2000      	movs	r0, #0
 8021390:	f7f9 f842 	bl	801a418 <lv_disp_get_dpi>
 8021394:	4603      	mov	r3, r0
 8021396:	461a      	mov	r2, r3
 8021398:	4613      	mov	r3, r2
 802139a:	00db      	lsls	r3, r3, #3
 802139c:	1a9b      	subs	r3, r3, r2
 802139e:	3350      	adds	r3, #80	; 0x50
 80213a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80213a4:	db10      	blt.n	80213c8 <linemeter_init+0x294>
 80213a6:	2000      	movs	r0, #0
 80213a8:	f7f9 f836 	bl	801a418 <lv_disp_get_dpi>
 80213ac:	4603      	mov	r3, r0
 80213ae:	461a      	mov	r2, r3
 80213b0:	4613      	mov	r3, r2
 80213b2:	00db      	lsls	r3, r3, #3
 80213b4:	1a9b      	subs	r3, r3, r2
 80213b6:	3350      	adds	r3, #80	; 0x50
 80213b8:	4a08      	ldr	r2, [pc, #32]	; (80213dc <linemeter_init+0x2a8>)
 80213ba:	fb82 1203 	smull	r1, r2, r2, r3
 80213be:	1192      	asrs	r2, r2, #6
 80213c0:	17db      	asrs	r3, r3, #31
 80213c2:	1ad3      	subs	r3, r2, r3
 80213c4:	b21b      	sxth	r3, r3
 80213c6:	e000      	b.n	80213ca <linemeter_init+0x296>
 80213c8:	2301      	movs	r3, #1
 80213ca:	461a      	mov	r2, r3
 80213cc:	2100      	movs	r1, #0
 80213ce:	4620      	mov	r0, r4
 80213d0:	f7fd ffc0 	bl	801f354 <lv_style_set_scale_end_line_width>
#endif
}
 80213d4:	bf00      	nop
 80213d6:	bd98      	pop	{r3, r4, r7, pc}
 80213d8:	200200d4 	.word	0x200200d4
 80213dc:	66666667 	.word	0x66666667
 80213e0:	200200a8 	.word	0x200200a8

080213e4 <gauge_init>:

static void gauge_init(void)
{
 80213e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80213e6:	af00      	add	r7, sp, #0
#if LV_USE_GAUGE != 0
    style_init_reset(&styles->gauge_main);
 80213e8:	4bd6      	ldr	r3, [pc, #856]	; (8021744 <gauge_init+0x360>)
 80213ea:	681b      	ldr	r3, [r3, #0]
 80213ec:	3360      	adds	r3, #96	; 0x60
 80213ee:	4618      	mov	r0, r3
 80213f0:	f004 f83a 	bl	8025468 <style_init_reset>
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80213f4:	4bd3      	ldr	r3, [pc, #844]	; (8021744 <gauge_init+0x360>)
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80213fc:	f640 0088 	movw	r0, #2184	; 0x888
 8021400:	f7fd fa88 	bl	801e914 <lv_color_hex3>
 8021404:	4603      	mov	r3, r0
 8021406:	461a      	mov	r2, r3
 8021408:	2100      	movs	r1, #0
 802140a:	4630      	mov	r0, r6
 802140c:	f7fd fea8 	bl	801f160 <lv_style_set_line_color>
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 8021410:	4bcc      	ldr	r3, [pc, #816]	; (8021744 <gauge_init+0x360>)
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021418:	f640 0088 	movw	r0, #2184	; 0x888
 802141c:	f7fd fa7a 	bl	801e914 <lv_color_hex3>
 8021420:	4603      	mov	r3, r0
 8021422:	461a      	mov	r2, r3
 8021424:	2100      	movs	r1, #0
 8021426:	4630      	mov	r0, r6
 8021428:	f7fd ffad 	bl	801f386 <lv_style_set_scale_grad_color>
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
 802142c:	4bc5      	ldr	r3, [pc, #788]	; (8021744 <gauge_init+0x360>)
 802142e:	681b      	ldr	r3, [r3, #0]
 8021430:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8021434:	4bc4      	ldr	r3, [pc, #784]	; (8021748 <gauge_init+0x364>)
 8021436:	68da      	ldr	r2, [r3, #12]
 8021438:	2100      	movs	r1, #0
 802143a:	f7fd ffbb 	bl	801f3b4 <lv_style_set_scale_end_color>
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
 802143e:	4bc1      	ldr	r3, [pc, #772]	; (8021744 <gauge_init+0x360>)
 8021440:	681b      	ldr	r3, [r3, #0]
 8021442:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021446:	2000      	movs	r0, #0
 8021448:	f7f8 ffe6 	bl	801a418 <lv_disp_get_dpi>
 802144c:	4603      	mov	r3, r0
 802144e:	461a      	mov	r2, r3
 8021450:	4613      	mov	r3, r2
 8021452:	009b      	lsls	r3, r3, #2
 8021454:	4413      	add	r3, r2
 8021456:	3350      	adds	r3, #80	; 0x50
 8021458:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802145c:	db10      	blt.n	8021480 <gauge_init+0x9c>
 802145e:	2000      	movs	r0, #0
 8021460:	f7f8 ffda 	bl	801a418 <lv_disp_get_dpi>
 8021464:	4603      	mov	r3, r0
 8021466:	461a      	mov	r2, r3
 8021468:	4613      	mov	r3, r2
 802146a:	009b      	lsls	r3, r3, #2
 802146c:	4413      	add	r3, r2
 802146e:	3350      	adds	r3, #80	; 0x50
 8021470:	4ab6      	ldr	r2, [pc, #728]	; (802174c <gauge_init+0x368>)
 8021472:	fb82 1203 	smull	r1, r2, r2, r3
 8021476:	1192      	asrs	r2, r2, #6
 8021478:	17db      	asrs	r3, r3, #31
 802147a:	1ad3      	subs	r3, r2, r3
 802147c:	b21b      	sxth	r3, r3
 802147e:	e000      	b.n	8021482 <gauge_init+0x9e>
 8021480:	2301      	movs	r3, #1
 8021482:	461a      	mov	r2, r3
 8021484:	2100      	movs	r1, #0
 8021486:	4630      	mov	r0, r6
 8021488:	f7fd fe06 	bl	801f098 <lv_style_set_line_width>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
 802148c:	4bad      	ldr	r3, [pc, #692]	; (8021744 <gauge_init+0x360>)
 802148e:	681b      	ldr	r3, [r3, #0]
 8021490:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021494:	2000      	movs	r0, #0
 8021496:	f7f8 ffbf 	bl	801a418 <lv_disp_get_dpi>
 802149a:	4603      	mov	r3, r0
 802149c:	3314      	adds	r3, #20
 802149e:	009b      	lsls	r3, r3, #2
 80214a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80214a4:	db0d      	blt.n	80214c2 <gauge_init+0xde>
 80214a6:	2000      	movs	r0, #0
 80214a8:	f7f8 ffb6 	bl	801a418 <lv_disp_get_dpi>
 80214ac:	4603      	mov	r3, r0
 80214ae:	3314      	adds	r3, #20
 80214b0:	009b      	lsls	r3, r3, #2
 80214b2:	4aa6      	ldr	r2, [pc, #664]	; (802174c <gauge_init+0x368>)
 80214b4:	fb82 1203 	smull	r1, r2, r2, r3
 80214b8:	1192      	asrs	r2, r2, #6
 80214ba:	17db      	asrs	r3, r3, #31
 80214bc:	1ad3      	subs	r3, r2, r3
 80214be:	b21b      	sxth	r3, r3
 80214c0:	e000      	b.n	80214c4 <gauge_init+0xe0>
 80214c2:	2301      	movs	r3, #1
 80214c4:	461a      	mov	r2, r3
 80214c6:	2100      	movs	r1, #0
 80214c8:	4630      	mov	r0, r6
 80214ca:	f7fd ff43 	bl	801f354 <lv_style_set_scale_end_line_width>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
 80214ce:	4b9d      	ldr	r3, [pc, #628]	; (8021744 <gauge_init+0x360>)
 80214d0:	681b      	ldr	r3, [r3, #0]
 80214d2:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80214d6:	2000      	movs	r0, #0
 80214d8:	f7f8 ff9e 	bl	801a418 <lv_disp_get_dpi>
 80214dc:	4603      	mov	r3, r0
 80214de:	330a      	adds	r3, #10
 80214e0:	00db      	lsls	r3, r3, #3
 80214e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80214e6:	db0d      	blt.n	8021504 <gauge_init+0x120>
 80214e8:	2000      	movs	r0, #0
 80214ea:	f7f8 ff95 	bl	801a418 <lv_disp_get_dpi>
 80214ee:	4603      	mov	r3, r0
 80214f0:	330a      	adds	r3, #10
 80214f2:	00db      	lsls	r3, r3, #3
 80214f4:	4a95      	ldr	r2, [pc, #596]	; (802174c <gauge_init+0x368>)
 80214f6:	fb82 1203 	smull	r1, r2, r2, r3
 80214fa:	1192      	asrs	r2, r2, #6
 80214fc:	17db      	asrs	r3, r3, #31
 80214fe:	1ad3      	subs	r3, r2, r3
 8021500:	b21b      	sxth	r3, r3
 8021502:	e000      	b.n	8021506 <gauge_init+0x122>
 8021504:	2301      	movs	r3, #1
 8021506:	461a      	mov	r2, r3
 8021508:	2100      	movs	r1, #0
 802150a:	4630      	mov	r0, r6
 802150c:	f7fd ff09 	bl	801f322 <lv_style_set_scale_end_border_width>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 8021510:	4b8c      	ldr	r3, [pc, #560]	; (8021744 <gauge_init+0x360>)
 8021512:	681b      	ldr	r3, [r3, #0]
 8021514:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021518:	2000      	movs	r0, #0
 802151a:	f7f8 ff7d 	bl	801a418 <lv_disp_get_dpi>
 802151e:	4603      	mov	r3, r0
 8021520:	461a      	mov	r2, r3
 8021522:	4613      	mov	r3, r2
 8021524:	009b      	lsls	r3, r3, #2
 8021526:	4413      	add	r3, r2
 8021528:	009b      	lsls	r3, r3, #2
 802152a:	3350      	adds	r3, #80	; 0x50
 802152c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021530:	db11      	blt.n	8021556 <gauge_init+0x172>
 8021532:	2000      	movs	r0, #0
 8021534:	f7f8 ff70 	bl	801a418 <lv_disp_get_dpi>
 8021538:	4603      	mov	r3, r0
 802153a:	461a      	mov	r2, r3
 802153c:	4613      	mov	r3, r2
 802153e:	009b      	lsls	r3, r3, #2
 8021540:	4413      	add	r3, r2
 8021542:	009b      	lsls	r3, r3, #2
 8021544:	3350      	adds	r3, #80	; 0x50
 8021546:	4a81      	ldr	r2, [pc, #516]	; (802174c <gauge_init+0x368>)
 8021548:	fb82 1203 	smull	r1, r2, r2, r3
 802154c:	1192      	asrs	r2, r2, #6
 802154e:	17db      	asrs	r3, r3, #31
 8021550:	1ad3      	subs	r3, r2, r3
 8021552:	b21b      	sxth	r3, r3
 8021554:	e000      	b.n	8021558 <gauge_init+0x174>
 8021556:	2301      	movs	r3, #1
 8021558:	461a      	mov	r2, r3
 802155a:	2100      	movs	r1, #0
 802155c:	4630      	mov	r0, r6
 802155e:	f7fd faa1 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 8021562:	4b78      	ldr	r3, [pc, #480]	; (8021744 <gauge_init+0x360>)
 8021564:	681b      	ldr	r3, [r3, #0]
 8021566:	f103 0660 	add.w	r6, r3, #96	; 0x60
 802156a:	2000      	movs	r0, #0
 802156c:	f7f8 ff54 	bl	801a418 <lv_disp_get_dpi>
 8021570:	4603      	mov	r3, r0
 8021572:	461a      	mov	r2, r3
 8021574:	4613      	mov	r3, r2
 8021576:	009b      	lsls	r3, r3, #2
 8021578:	4413      	add	r3, r2
 802157a:	009b      	lsls	r3, r3, #2
 802157c:	3350      	adds	r3, #80	; 0x50
 802157e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021582:	db11      	blt.n	80215a8 <gauge_init+0x1c4>
 8021584:	2000      	movs	r0, #0
 8021586:	f7f8 ff47 	bl	801a418 <lv_disp_get_dpi>
 802158a:	4603      	mov	r3, r0
 802158c:	461a      	mov	r2, r3
 802158e:	4613      	mov	r3, r2
 8021590:	009b      	lsls	r3, r3, #2
 8021592:	4413      	add	r3, r2
 8021594:	009b      	lsls	r3, r3, #2
 8021596:	3350      	adds	r3, #80	; 0x50
 8021598:	4a6c      	ldr	r2, [pc, #432]	; (802174c <gauge_init+0x368>)
 802159a:	fb82 1203 	smull	r1, r2, r2, r3
 802159e:	1192      	asrs	r2, r2, #6
 80215a0:	17db      	asrs	r3, r3, #31
 80215a2:	1ad3      	subs	r3, r2, r3
 80215a4:	b21b      	sxth	r3, r3
 80215a6:	e000      	b.n	80215aa <gauge_init+0x1c6>
 80215a8:	2301      	movs	r3, #1
 80215aa:	461a      	mov	r2, r3
 80215ac:	2100      	movs	r1, #0
 80215ae:	4630      	mov	r0, r6
 80215b0:	f7fd fa91 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80215b4:	4b63      	ldr	r3, [pc, #396]	; (8021744 <gauge_init+0x360>)
 80215b6:	681b      	ldr	r3, [r3, #0]
 80215b8:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80215bc:	2000      	movs	r0, #0
 80215be:	f7f8 ff2b 	bl	801a418 <lv_disp_get_dpi>
 80215c2:	4603      	mov	r3, r0
 80215c4:	461a      	mov	r2, r3
 80215c6:	4613      	mov	r3, r2
 80215c8:	009b      	lsls	r3, r3, #2
 80215ca:	4413      	add	r3, r2
 80215cc:	009b      	lsls	r3, r3, #2
 80215ce:	3350      	adds	r3, #80	; 0x50
 80215d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80215d4:	db11      	blt.n	80215fa <gauge_init+0x216>
 80215d6:	2000      	movs	r0, #0
 80215d8:	f7f8 ff1e 	bl	801a418 <lv_disp_get_dpi>
 80215dc:	4603      	mov	r3, r0
 80215de:	461a      	mov	r2, r3
 80215e0:	4613      	mov	r3, r2
 80215e2:	009b      	lsls	r3, r3, #2
 80215e4:	4413      	add	r3, r2
 80215e6:	009b      	lsls	r3, r3, #2
 80215e8:	3350      	adds	r3, #80	; 0x50
 80215ea:	4a58      	ldr	r2, [pc, #352]	; (802174c <gauge_init+0x368>)
 80215ec:	fb82 1203 	smull	r1, r2, r2, r3
 80215f0:	1192      	asrs	r2, r2, #6
 80215f2:	17db      	asrs	r3, r3, #31
 80215f4:	1ad3      	subs	r3, r2, r3
 80215f6:	b21b      	sxth	r3, r3
 80215f8:	e000      	b.n	80215fc <gauge_init+0x218>
 80215fa:	2301      	movs	r3, #1
 80215fc:	461a      	mov	r2, r3
 80215fe:	2100      	movs	r1, #0
 8021600:	4630      	mov	r0, r6
 8021602:	f7fd fa1d 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 8021606:	4b4f      	ldr	r3, [pc, #316]	; (8021744 <gauge_init+0x360>)
 8021608:	681b      	ldr	r3, [r3, #0]
 802160a:	f103 0660 	add.w	r6, r3, #96	; 0x60
 802160e:	2000      	movs	r0, #0
 8021610:	f7f8 ff02 	bl	801a418 <lv_disp_get_dpi>
 8021614:	4603      	mov	r3, r0
 8021616:	461a      	mov	r2, r3
 8021618:	4613      	mov	r3, r2
 802161a:	009b      	lsls	r3, r3, #2
 802161c:	4413      	add	r3, r2
 802161e:	009b      	lsls	r3, r3, #2
 8021620:	3350      	adds	r3, #80	; 0x50
 8021622:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021626:	db11      	blt.n	802164c <gauge_init+0x268>
 8021628:	2000      	movs	r0, #0
 802162a:	f7f8 fef5 	bl	801a418 <lv_disp_get_dpi>
 802162e:	4603      	mov	r3, r0
 8021630:	461a      	mov	r2, r3
 8021632:	4613      	mov	r3, r2
 8021634:	009b      	lsls	r3, r3, #2
 8021636:	4413      	add	r3, r2
 8021638:	009b      	lsls	r3, r3, #2
 802163a:	3350      	adds	r3, #80	; 0x50
 802163c:	4a43      	ldr	r2, [pc, #268]	; (802174c <gauge_init+0x368>)
 802163e:	fb82 1203 	smull	r1, r2, r2, r3
 8021642:	1192      	asrs	r2, r2, #6
 8021644:	17db      	asrs	r3, r3, #31
 8021646:	1ad3      	subs	r3, r2, r3
 8021648:	b21b      	sxth	r3, r3
 802164a:	e000      	b.n	802164e <gauge_init+0x26a>
 802164c:	2301      	movs	r3, #1
 802164e:	461a      	mov	r2, r3
 8021650:	2100      	movs	r1, #0
 8021652:	4630      	mov	r0, r6
 8021654:	f7fd fa58 	bl	801eb08 <lv_style_set_pad_inner>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
 8021658:	4b3a      	ldr	r3, [pc, #232]	; (8021744 <gauge_init+0x360>)
 802165a:	681b      	ldr	r3, [r3, #0]
 802165c:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021660:	2000      	movs	r0, #0
 8021662:	f7f8 fed9 	bl	801a418 <lv_disp_get_dpi>
 8021666:	4603      	mov	r3, r0
 8021668:	461a      	mov	r2, r3
 802166a:	4613      	mov	r3, r2
 802166c:	011b      	lsls	r3, r3, #4
 802166e:	1a9b      	subs	r3, r3, r2
 8021670:	3350      	adds	r3, #80	; 0x50
 8021672:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021676:	db10      	blt.n	802169a <gauge_init+0x2b6>
 8021678:	2000      	movs	r0, #0
 802167a:	f7f8 fecd 	bl	801a418 <lv_disp_get_dpi>
 802167e:	4603      	mov	r3, r0
 8021680:	461a      	mov	r2, r3
 8021682:	4613      	mov	r3, r2
 8021684:	011b      	lsls	r3, r3, #4
 8021686:	1a9b      	subs	r3, r3, r2
 8021688:	3350      	adds	r3, #80	; 0x50
 802168a:	4a30      	ldr	r2, [pc, #192]	; (802174c <gauge_init+0x368>)
 802168c:	fb82 1203 	smull	r1, r2, r2, r3
 8021690:	1192      	asrs	r2, r2, #6
 8021692:	17db      	asrs	r3, r3, #31
 8021694:	1ad3      	subs	r3, r2, r3
 8021696:	b21b      	sxth	r3, r3
 8021698:	e000      	b.n	802169c <gauge_init+0x2b8>
 802169a:	2301      	movs	r3, #1
 802169c:	461a      	mov	r2, r3
 802169e:	2100      	movs	r1, #0
 80216a0:	4630      	mov	r0, r6
 80216a2:	f7fd fe25 	bl	801f2f0 <lv_style_set_scale_width>
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80216a6:	4b27      	ldr	r3, [pc, #156]	; (8021744 <gauge_init+0x360>)
 80216a8:	681b      	ldr	r3, [r3, #0]
 80216aa:	3360      	adds	r3, #96	; 0x60
 80216ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80216b0:	2100      	movs	r1, #0
 80216b2:	4618      	mov	r0, r3
 80216b4:	f7fd f960 	bl	801e978 <lv_style_set_radius>

    style_init_reset(&styles->gauge_strong);
 80216b8:	4b22      	ldr	r3, [pc, #136]	; (8021744 <gauge_init+0x360>)
 80216ba:	681b      	ldr	r3, [r3, #0]
 80216bc:	3364      	adds	r3, #100	; 0x64
 80216be:	4618      	mov	r0, r3
 80216c0:	f003 fed2 	bl	8025468 <style_init_reset>
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80216c4:	4b1f      	ldr	r3, [pc, #124]	; (8021744 <gauge_init+0x360>)
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	f103 0664 	add.w	r6, r3, #100	; 0x64
 80216cc:	f640 0088 	movw	r0, #2184	; 0x888
 80216d0:	f7fd f920 	bl	801e914 <lv_color_hex3>
 80216d4:	4603      	mov	r3, r0
 80216d6:	461a      	mov	r2, r3
 80216d8:	2100      	movs	r1, #0
 80216da:	4630      	mov	r0, r6
 80216dc:	f7fd fd40 	bl	801f160 <lv_style_set_line_color>
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80216e0:	4b18      	ldr	r3, [pc, #96]	; (8021744 <gauge_init+0x360>)
 80216e2:	681b      	ldr	r3, [r3, #0]
 80216e4:	f103 0664 	add.w	r6, r3, #100	; 0x64
 80216e8:	f640 0088 	movw	r0, #2184	; 0x888
 80216ec:	f7fd f912 	bl	801e914 <lv_color_hex3>
 80216f0:	4603      	mov	r3, r0
 80216f2:	461a      	mov	r2, r3
 80216f4:	2100      	movs	r1, #0
 80216f6:	4630      	mov	r0, r6
 80216f8:	f7fd fe45 	bl	801f386 <lv_style_set_scale_grad_color>
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
 80216fc:	4b11      	ldr	r3, [pc, #68]	; (8021744 <gauge_init+0x360>)
 80216fe:	681b      	ldr	r3, [r3, #0]
 8021700:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8021704:	4b10      	ldr	r3, [pc, #64]	; (8021748 <gauge_init+0x364>)
 8021706:	68da      	ldr	r2, [r3, #12]
 8021708:	2100      	movs	r1, #0
 802170a:	f7fd fe53 	bl	801f3b4 <lv_style_set_scale_end_color>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 802170e:	4b0d      	ldr	r3, [pc, #52]	; (8021744 <gauge_init+0x360>)
 8021710:	681b      	ldr	r3, [r3, #0]
 8021712:	f103 0664 	add.w	r6, r3, #100	; 0x64
 8021716:	2000      	movs	r0, #0
 8021718:	f7f8 fe7e 	bl	801a418 <lv_disp_get_dpi>
 802171c:	4603      	mov	r3, r0
 802171e:	330a      	adds	r3, #10
 8021720:	00db      	lsls	r3, r3, #3
 8021722:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021726:	db13      	blt.n	8021750 <gauge_init+0x36c>
 8021728:	2000      	movs	r0, #0
 802172a:	f7f8 fe75 	bl	801a418 <lv_disp_get_dpi>
 802172e:	4603      	mov	r3, r0
 8021730:	330a      	adds	r3, #10
 8021732:	00db      	lsls	r3, r3, #3
 8021734:	4a05      	ldr	r2, [pc, #20]	; (802174c <gauge_init+0x368>)
 8021736:	fb82 1203 	smull	r1, r2, r2, r3
 802173a:	1192      	asrs	r2, r2, #6
 802173c:	17db      	asrs	r3, r3, #31
 802173e:	1ad3      	subs	r3, r2, r3
 8021740:	b21b      	sxth	r3, r3
 8021742:	e006      	b.n	8021752 <gauge_init+0x36e>
 8021744:	200200d4 	.word	0x200200d4
 8021748:	200200a8 	.word	0x200200a8
 802174c:	66666667 	.word	0x66666667
 8021750:	2301      	movs	r3, #1
 8021752:	461a      	mov	r2, r3
 8021754:	2100      	movs	r1, #0
 8021756:	4630      	mov	r0, r6
 8021758:	f7fd fc9e 	bl	801f098 <lv_style_set_line_width>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 802175c:	4b8b      	ldr	r3, [pc, #556]	; (802198c <gauge_init+0x5a8>)
 802175e:	681b      	ldr	r3, [r3, #0]
 8021760:	f103 0664 	add.w	r6, r3, #100	; 0x64
 8021764:	2000      	movs	r0, #0
 8021766:	f7f8 fe57 	bl	801a418 <lv_disp_get_dpi>
 802176a:	4603      	mov	r3, r0
 802176c:	330a      	adds	r3, #10
 802176e:	00db      	lsls	r3, r3, #3
 8021770:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021774:	db0d      	blt.n	8021792 <gauge_init+0x3ae>
 8021776:	2000      	movs	r0, #0
 8021778:	f7f8 fe4e 	bl	801a418 <lv_disp_get_dpi>
 802177c:	4603      	mov	r3, r0
 802177e:	330a      	adds	r3, #10
 8021780:	00db      	lsls	r3, r3, #3
 8021782:	4a83      	ldr	r2, [pc, #524]	; (8021990 <gauge_init+0x5ac>)
 8021784:	fb82 1203 	smull	r1, r2, r2, r3
 8021788:	1192      	asrs	r2, r2, #6
 802178a:	17db      	asrs	r3, r3, #31
 802178c:	1ad3      	subs	r3, r2, r3
 802178e:	b21b      	sxth	r3, r3
 8021790:	e000      	b.n	8021794 <gauge_init+0x3b0>
 8021792:	2301      	movs	r3, #1
 8021794:	461a      	mov	r2, r3
 8021796:	2100      	movs	r1, #0
 8021798:	4630      	mov	r0, r6
 802179a:	f7fd fddb 	bl	801f354 <lv_style_set_scale_end_line_width>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
 802179e:	4b7b      	ldr	r3, [pc, #492]	; (802198c <gauge_init+0x5a8>)
 80217a0:	681b      	ldr	r3, [r3, #0]
 80217a2:	f103 0664 	add.w	r6, r3, #100	; 0x64
 80217a6:	2000      	movs	r0, #0
 80217a8:	f7f8 fe36 	bl	801a418 <lv_disp_get_dpi>
 80217ac:	4603      	mov	r3, r0
 80217ae:	461a      	mov	r2, r3
 80217b0:	4613      	mov	r3, r2
 80217b2:	009b      	lsls	r3, r3, #2
 80217b4:	4413      	add	r3, r2
 80217b6:	009a      	lsls	r2, r3, #2
 80217b8:	4413      	add	r3, r2
 80217ba:	3350      	adds	r3, #80	; 0x50
 80217bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80217c0:	db12      	blt.n	80217e8 <gauge_init+0x404>
 80217c2:	2000      	movs	r0, #0
 80217c4:	f7f8 fe28 	bl	801a418 <lv_disp_get_dpi>
 80217c8:	4603      	mov	r3, r0
 80217ca:	461a      	mov	r2, r3
 80217cc:	4613      	mov	r3, r2
 80217ce:	009b      	lsls	r3, r3, #2
 80217d0:	4413      	add	r3, r2
 80217d2:	009a      	lsls	r2, r3, #2
 80217d4:	4413      	add	r3, r2
 80217d6:	3350      	adds	r3, #80	; 0x50
 80217d8:	4a6d      	ldr	r2, [pc, #436]	; (8021990 <gauge_init+0x5ac>)
 80217da:	fb82 1203 	smull	r1, r2, r2, r3
 80217de:	1192      	asrs	r2, r2, #6
 80217e0:	17db      	asrs	r3, r3, #31
 80217e2:	1ad3      	subs	r3, r2, r3
 80217e4:	b21b      	sxth	r3, r3
 80217e6:	e000      	b.n	80217ea <gauge_init+0x406>
 80217e8:	2301      	movs	r3, #1
 80217ea:	461a      	mov	r2, r3
 80217ec:	2100      	movs	r1, #0
 80217ee:	4630      	mov	r0, r6
 80217f0:	f7fd fd7e 	bl	801f2f0 <lv_style_set_scale_width>

    style_init_reset(&styles->gauge_needle);
 80217f4:	4b65      	ldr	r3, [pc, #404]	; (802198c <gauge_init+0x5a8>)
 80217f6:	681b      	ldr	r3, [r3, #0]
 80217f8:	3368      	adds	r3, #104	; 0x68
 80217fa:	4618      	mov	r0, r3
 80217fc:	f003 fe34 	bl	8025468 <style_init_reset>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 8021800:	4b62      	ldr	r3, [pc, #392]	; (802198c <gauge_init+0x5a8>)
 8021802:	681b      	ldr	r3, [r3, #0]
 8021804:	f103 0668 	add.w	r6, r3, #104	; 0x68
 8021808:	4b62      	ldr	r3, [pc, #392]	; (8021994 <gauge_init+0x5b0>)
 802180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802180c:	f003 0302 	and.w	r3, r3, #2
 8021810:	2b00      	cmp	r3, #0
 8021812:	d004      	beq.n	802181e <gauge_init+0x43a>
 8021814:	4860      	ldr	r0, [pc, #384]	; (8021998 <gauge_init+0x5b4>)
 8021816:	f7fd f869 	bl	801e8ec <lv_color_hex>
 802181a:	4605      	mov	r5, r0
 802181c:	e00b      	b.n	8021836 <gauge_init+0x452>
 802181e:	462b      	mov	r3, r5
 8021820:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 8021824:	462b      	mov	r3, r5
 8021826:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 802182a:	462b      	mov	r3, r5
 802182c:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 8021830:	462b      	mov	r3, r5
 8021832:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 8021836:	462a      	mov	r2, r5
 8021838:	2100      	movs	r1, #0
 802183a:	4630      	mov	r0, r6
 802183c:	f7fd fc90 	bl	801f160 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
 8021840:	4b52      	ldr	r3, [pc, #328]	; (802198c <gauge_init+0x5a8>)
 8021842:	681b      	ldr	r3, [r3, #0]
 8021844:	f103 0568 	add.w	r5, r3, #104	; 0x68
 8021848:	2000      	movs	r0, #0
 802184a:	f7f8 fde5 	bl	801a418 <lv_disp_get_dpi>
 802184e:	4603      	mov	r3, r0
 8021850:	330a      	adds	r3, #10
 8021852:	00db      	lsls	r3, r3, #3
 8021854:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021858:	db0d      	blt.n	8021876 <gauge_init+0x492>
 802185a:	2000      	movs	r0, #0
 802185c:	f7f8 fddc 	bl	801a418 <lv_disp_get_dpi>
 8021860:	4603      	mov	r3, r0
 8021862:	330a      	adds	r3, #10
 8021864:	00db      	lsls	r3, r3, #3
 8021866:	4a4a      	ldr	r2, [pc, #296]	; (8021990 <gauge_init+0x5ac>)
 8021868:	fb82 1203 	smull	r1, r2, r2, r3
 802186c:	1192      	asrs	r2, r2, #6
 802186e:	17db      	asrs	r3, r3, #31
 8021870:	1ad3      	subs	r3, r2, r3
 8021872:	b21b      	sxth	r3, r3
 8021874:	e000      	b.n	8021878 <gauge_init+0x494>
 8021876:	2301      	movs	r3, #1
 8021878:	461a      	mov	r2, r3
 802187a:	2100      	movs	r1, #0
 802187c:	4628      	mov	r0, r5
 802187e:	f7fd fc0b 	bl	801f098 <lv_style_set_line_width>
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
 8021882:	4b42      	ldr	r3, [pc, #264]	; (802198c <gauge_init+0x5a8>)
 8021884:	681b      	ldr	r3, [r3, #0]
 8021886:	3368      	adds	r3, #104	; 0x68
 8021888:	22ff      	movs	r2, #255	; 0xff
 802188a:	2100      	movs	r1, #0
 802188c:	4618      	mov	r0, r3
 802188e:	f7fd f9cf 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 8021892:	4b3e      	ldr	r3, [pc, #248]	; (802198c <gauge_init+0x5a8>)
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	f103 0568 	add.w	r5, r3, #104	; 0x68
 802189a:	4b3e      	ldr	r3, [pc, #248]	; (8021994 <gauge_init+0x5b0>)
 802189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802189e:	f003 0302 	and.w	r3, r3, #2
 80218a2:	2b00      	cmp	r3, #0
 80218a4:	d004      	beq.n	80218b0 <gauge_init+0x4cc>
 80218a6:	483c      	ldr	r0, [pc, #240]	; (8021998 <gauge_init+0x5b4>)
 80218a8:	f7fd f820 	bl	801e8ec <lv_color_hex>
 80218ac:	4604      	mov	r4, r0
 80218ae:	e00b      	b.n	80218c8 <gauge_init+0x4e4>
 80218b0:	4623      	mov	r3, r4
 80218b2:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 80218b6:	4623      	mov	r3, r4
 80218b8:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 80218bc:	4623      	mov	r3, r4
 80218be:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 80218c2:	4623      	mov	r3, r4
 80218c4:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 80218c8:	4622      	mov	r2, r4
 80218ca:	2100      	movs	r1, #0
 80218cc:	4628      	mov	r0, r5
 80218ce:	f7fd f998 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80218d2:	4b2e      	ldr	r3, [pc, #184]	; (802198c <gauge_init+0x5a8>)
 80218d4:	681b      	ldr	r3, [r3, #0]
 80218d6:	3368      	adds	r3, #104	; 0x68
 80218d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80218dc:	2100      	movs	r1, #0
 80218de:	4618      	mov	r0, r3
 80218e0:	f7fd f84a 	bl	801e978 <lv_style_set_radius>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
 80218e4:	4b29      	ldr	r3, [pc, #164]	; (802198c <gauge_init+0x5a8>)
 80218e6:	681b      	ldr	r3, [r3, #0]
 80218e8:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80218ec:	2000      	movs	r0, #0
 80218ee:	f7f8 fd93 	bl	801a418 <lv_disp_get_dpi>
 80218f2:	4603      	mov	r3, r0
 80218f4:	461a      	mov	r2, r3
 80218f6:	4613      	mov	r3, r2
 80218f8:	011b      	lsls	r3, r3, #4
 80218fa:	1a9b      	subs	r3, r3, r2
 80218fc:	005b      	lsls	r3, r3, #1
 80218fe:	3350      	adds	r3, #80	; 0x50
 8021900:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021904:	db11      	blt.n	802192a <gauge_init+0x546>
 8021906:	2000      	movs	r0, #0
 8021908:	f7f8 fd86 	bl	801a418 <lv_disp_get_dpi>
 802190c:	4603      	mov	r3, r0
 802190e:	461a      	mov	r2, r3
 8021910:	4613      	mov	r3, r2
 8021912:	011b      	lsls	r3, r3, #4
 8021914:	1a9b      	subs	r3, r3, r2
 8021916:	005b      	lsls	r3, r3, #1
 8021918:	3350      	adds	r3, #80	; 0x50
 802191a:	4a1d      	ldr	r2, [pc, #116]	; (8021990 <gauge_init+0x5ac>)
 802191c:	fb82 1203 	smull	r1, r2, r2, r3
 8021920:	1192      	asrs	r2, r2, #6
 8021922:	17db      	asrs	r3, r3, #31
 8021924:	1ad3      	subs	r3, r2, r3
 8021926:	b21b      	sxth	r3, r3
 8021928:	e000      	b.n	802192c <gauge_init+0x548>
 802192a:	2301      	movs	r3, #1
 802192c:	461a      	mov	r2, r3
 802192e:	2100      	movs	r1, #0
 8021930:	4620      	mov	r0, r4
 8021932:	f7fd f853 	bl	801e9dc <lv_style_set_size>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
 8021936:	4b15      	ldr	r3, [pc, #84]	; (802198c <gauge_init+0x5a8>)
 8021938:	681b      	ldr	r3, [r3, #0]
 802193a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 802193e:	2000      	movs	r0, #0
 8021940:	f7f8 fd6a 	bl	801a418 <lv_disp_get_dpi>
 8021944:	4603      	mov	r3, r0
 8021946:	461a      	mov	r2, r3
 8021948:	4613      	mov	r3, r2
 802194a:	009b      	lsls	r3, r3, #2
 802194c:	4413      	add	r3, r2
 802194e:	005b      	lsls	r3, r3, #1
 8021950:	3350      	adds	r3, #80	; 0x50
 8021952:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021956:	db11      	blt.n	802197c <gauge_init+0x598>
 8021958:	2000      	movs	r0, #0
 802195a:	f7f8 fd5d 	bl	801a418 <lv_disp_get_dpi>
 802195e:	4603      	mov	r3, r0
 8021960:	461a      	mov	r2, r3
 8021962:	4613      	mov	r3, r2
 8021964:	009b      	lsls	r3, r3, #2
 8021966:	4413      	add	r3, r2
 8021968:	005b      	lsls	r3, r3, #1
 802196a:	3350      	adds	r3, #80	; 0x50
 802196c:	4a08      	ldr	r2, [pc, #32]	; (8021990 <gauge_init+0x5ac>)
 802196e:	fb82 1203 	smull	r1, r2, r2, r3
 8021972:	1192      	asrs	r2, r2, #6
 8021974:	17db      	asrs	r3, r3, #31
 8021976:	1ad3      	subs	r3, r2, r3
 8021978:	b21b      	sxth	r3, r3
 802197a:	e000      	b.n	802197e <gauge_init+0x59a>
 802197c:	2301      	movs	r3, #1
 802197e:	461a      	mov	r2, r3
 8021980:	2100      	movs	r1, #0
 8021982:	4620      	mov	r0, r4
 8021984:	f7fd f8c0 	bl	801eb08 <lv_style_set_pad_inner>
#endif
}
 8021988:	bf00      	nop
 802198a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802198c:	200200d4 	.word	0x200200d4
 8021990:	66666667 	.word	0x66666667
 8021994:	200200a8 	.word	0x200200a8
 8021998:	00464b5b 	.word	0x00464b5b

0802199c <arc_init>:

static void arc_init(void)
{
 802199c:	b598      	push	{r3, r4, r7, lr}
 802199e:	af00      	add	r7, sp, #0
#if LV_USE_ARC != 0
    style_init_reset(&styles->arc_indic);
 80219a0:	4b61      	ldr	r3, [pc, #388]	; (8021b28 <arc_init+0x18c>)
 80219a2:	681b      	ldr	r3, [r3, #0]
 80219a4:	331c      	adds	r3, #28
 80219a6:	4618      	mov	r0, r3
 80219a8:	f003 fd5e 	bl	8025468 <style_init_reset>
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
 80219ac:	4b5e      	ldr	r3, [pc, #376]	; (8021b28 <arc_init+0x18c>)
 80219ae:	681b      	ldr	r3, [r3, #0]
 80219b0:	f103 001c 	add.w	r0, r3, #28
 80219b4:	4b5d      	ldr	r3, [pc, #372]	; (8021b2c <arc_init+0x190>)
 80219b6:	68da      	ldr	r2, [r3, #12]
 80219b8:	2100      	movs	r1, #0
 80219ba:	f7fd fbd1 	bl	801f160 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 80219be:	4b5a      	ldr	r3, [pc, #360]	; (8021b28 <arc_init+0x18c>)
 80219c0:	681b      	ldr	r3, [r3, #0]
 80219c2:	f103 041c 	add.w	r4, r3, #28
 80219c6:	2000      	movs	r0, #0
 80219c8:	f7f8 fd26 	bl	801a418 <lv_disp_get_dpi>
 80219cc:	4603      	mov	r3, r0
 80219ce:	461a      	mov	r2, r3
 80219d0:	4613      	mov	r3, r2
 80219d2:	009b      	lsls	r3, r3, #2
 80219d4:	4413      	add	r3, r2
 80219d6:	009a      	lsls	r2, r3, #2
 80219d8:	4413      	add	r3, r2
 80219da:	3350      	adds	r3, #80	; 0x50
 80219dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80219e0:	db12      	blt.n	8021a08 <arc_init+0x6c>
 80219e2:	2000      	movs	r0, #0
 80219e4:	f7f8 fd18 	bl	801a418 <lv_disp_get_dpi>
 80219e8:	4603      	mov	r3, r0
 80219ea:	461a      	mov	r2, r3
 80219ec:	4613      	mov	r3, r2
 80219ee:	009b      	lsls	r3, r3, #2
 80219f0:	4413      	add	r3, r2
 80219f2:	009a      	lsls	r2, r3, #2
 80219f4:	4413      	add	r3, r2
 80219f6:	3350      	adds	r3, #80	; 0x50
 80219f8:	4a4d      	ldr	r2, [pc, #308]	; (8021b30 <arc_init+0x194>)
 80219fa:	fb82 1203 	smull	r1, r2, r2, r3
 80219fe:	1192      	asrs	r2, r2, #6
 8021a00:	17db      	asrs	r3, r3, #31
 8021a02:	1ad3      	subs	r3, r2, r3
 8021a04:	b21b      	sxth	r3, r3
 8021a06:	e000      	b.n	8021a0a <arc_init+0x6e>
 8021a08:	2301      	movs	r3, #1
 8021a0a:	461a      	mov	r2, r3
 8021a0c:	2100      	movs	r1, #0
 8021a0e:	4620      	mov	r0, r4
 8021a10:	f7fd fb42 	bl	801f098 <lv_style_set_line_width>
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
 8021a14:	4b44      	ldr	r3, [pc, #272]	; (8021b28 <arc_init+0x18c>)
 8021a16:	681b      	ldr	r3, [r3, #0]
 8021a18:	331c      	adds	r3, #28
 8021a1a:	2201      	movs	r2, #1
 8021a1c:	2100      	movs	r1, #0
 8021a1e:	4618      	mov	r0, r3
 8021a20:	f7fd fb85 	bl	801f12e <lv_style_set_line_rounded>

    style_init_reset(&styles->arc_bg);
 8021a24:	4b40      	ldr	r3, [pc, #256]	; (8021b28 <arc_init+0x18c>)
 8021a26:	681b      	ldr	r3, [r3, #0]
 8021a28:	3320      	adds	r3, #32
 8021a2a:	4618      	mov	r0, r3
 8021a2c:	f003 fd1c 	bl	8025468 <style_init_reset>
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 8021a30:	4b3d      	ldr	r3, [pc, #244]	; (8021b28 <arc_init+0x18c>)
 8021a32:	681b      	ldr	r3, [r3, #0]
 8021a34:	f103 0420 	add.w	r4, r3, #32
 8021a38:	4b3c      	ldr	r3, [pc, #240]	; (8021b2c <arc_init+0x190>)
 8021a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a3c:	f003 0302 	and.w	r3, r3, #2
 8021a40:	2b00      	cmp	r3, #0
 8021a42:	d004      	beq.n	8021a4e <arc_init+0xb2>
 8021a44:	483b      	ldr	r0, [pc, #236]	; (8021b34 <arc_init+0x198>)
 8021a46:	f7fc ff51 	bl	801e8ec <lv_color_hex>
 8021a4a:	4603      	mov	r3, r0
 8021a4c:	e003      	b.n	8021a56 <arc_init+0xba>
 8021a4e:	483a      	ldr	r0, [pc, #232]	; (8021b38 <arc_init+0x19c>)
 8021a50:	f7fc ff4c 	bl	801e8ec <lv_color_hex>
 8021a54:	4603      	mov	r3, r0
 8021a56:	461a      	mov	r2, r3
 8021a58:	2100      	movs	r1, #0
 8021a5a:	4620      	mov	r0, r4
 8021a5c:	f7fd fb80 	bl	801f160 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
 8021a60:	4b31      	ldr	r3, [pc, #196]	; (8021b28 <arc_init+0x18c>)
 8021a62:	681b      	ldr	r3, [r3, #0]
 8021a64:	f103 0420 	add.w	r4, r3, #32
 8021a68:	2000      	movs	r0, #0
 8021a6a:	f7f8 fcd5 	bl	801a418 <lv_disp_get_dpi>
 8021a6e:	4603      	mov	r3, r0
 8021a70:	461a      	mov	r2, r3
 8021a72:	4613      	mov	r3, r2
 8021a74:	009b      	lsls	r3, r3, #2
 8021a76:	4413      	add	r3, r2
 8021a78:	009a      	lsls	r2, r3, #2
 8021a7a:	4413      	add	r3, r2
 8021a7c:	3350      	adds	r3, #80	; 0x50
 8021a7e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021a82:	db12      	blt.n	8021aaa <arc_init+0x10e>
 8021a84:	2000      	movs	r0, #0
 8021a86:	f7f8 fcc7 	bl	801a418 <lv_disp_get_dpi>
 8021a8a:	4603      	mov	r3, r0
 8021a8c:	461a      	mov	r2, r3
 8021a8e:	4613      	mov	r3, r2
 8021a90:	009b      	lsls	r3, r3, #2
 8021a92:	4413      	add	r3, r2
 8021a94:	009a      	lsls	r2, r3, #2
 8021a96:	4413      	add	r3, r2
 8021a98:	3350      	adds	r3, #80	; 0x50
 8021a9a:	4a25      	ldr	r2, [pc, #148]	; (8021b30 <arc_init+0x194>)
 8021a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8021aa0:	1192      	asrs	r2, r2, #6
 8021aa2:	17db      	asrs	r3, r3, #31
 8021aa4:	1ad3      	subs	r3, r2, r3
 8021aa6:	b21b      	sxth	r3, r3
 8021aa8:	e000      	b.n	8021aac <arc_init+0x110>
 8021aaa:	2301      	movs	r3, #1
 8021aac:	461a      	mov	r2, r3
 8021aae:	2100      	movs	r1, #0
 8021ab0:	4620      	mov	r0, r4
 8021ab2:	f7fd faf1 	bl	801f098 <lv_style_set_line_width>
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
 8021ab6:	4b1c      	ldr	r3, [pc, #112]	; (8021b28 <arc_init+0x18c>)
 8021ab8:	681b      	ldr	r3, [r3, #0]
 8021aba:	3320      	adds	r3, #32
 8021abc:	2201      	movs	r2, #1
 8021abe:	2100      	movs	r1, #0
 8021ac0:	4618      	mov	r0, r3
 8021ac2:	f7fd fb34 	bl	801f12e <lv_style_set_line_rounded>

    style_init_reset(&styles->arc_knob);
 8021ac6:	4b18      	ldr	r3, [pc, #96]	; (8021b28 <arc_init+0x18c>)
 8021ac8:	681b      	ldr	r3, [r3, #0]
 8021aca:	3324      	adds	r3, #36	; 0x24
 8021acc:	4618      	mov	r0, r3
 8021ace:	f003 fccb 	bl	8025468 <style_init_reset>
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
 8021ad2:	4b15      	ldr	r3, [pc, #84]	; (8021b28 <arc_init+0x18c>)
 8021ad4:	681b      	ldr	r3, [r3, #0]
 8021ad6:	3324      	adds	r3, #36	; 0x24
 8021ad8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8021adc:	2100      	movs	r1, #0
 8021ade:	4618      	mov	r0, r3
 8021ae0:	f7fc ff4a 	bl	801e978 <lv_style_set_radius>
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 8021ae4:	4b10      	ldr	r3, [pc, #64]	; (8021b28 <arc_init+0x18c>)
 8021ae6:	681b      	ldr	r3, [r3, #0]
 8021ae8:	3324      	adds	r3, #36	; 0x24
 8021aea:	2200      	movs	r2, #0
 8021aec:	2100      	movs	r1, #0
 8021aee:	4618      	mov	r0, r3
 8021af0:	f7fc ffa6 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 8021af4:	4b0c      	ldr	r3, [pc, #48]	; (8021b28 <arc_init+0x18c>)
 8021af6:	681b      	ldr	r3, [r3, #0]
 8021af8:	3324      	adds	r3, #36	; 0x24
 8021afa:	2200      	movs	r2, #0
 8021afc:	2100      	movs	r1, #0
 8021afe:	4618      	mov	r0, r3
 8021b00:	f7fc ffb7 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
 8021b04:	4b08      	ldr	r3, [pc, #32]	; (8021b28 <arc_init+0x18c>)
 8021b06:	681b      	ldr	r3, [r3, #0]
 8021b08:	3324      	adds	r3, #36	; 0x24
 8021b0a:	2200      	movs	r2, #0
 8021b0c:	2100      	movs	r1, #0
 8021b0e:	4618      	mov	r0, r3
 8021b10:	f7fc ffc8 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
 8021b14:	4b04      	ldr	r3, [pc, #16]	; (8021b28 <arc_init+0x18c>)
 8021b16:	681b      	ldr	r3, [r3, #0]
 8021b18:	3324      	adds	r3, #36	; 0x24
 8021b1a:	2200      	movs	r2, #0
 8021b1c:	2100      	movs	r1, #0
 8021b1e:	4618      	mov	r0, r3
 8021b20:	f7fc ffd9 	bl	801ead6 <lv_style_set_pad_right>

#endif
}
 8021b24:	bf00      	nop
 8021b26:	bd98      	pop	{r3, r4, r7, pc}
 8021b28:	200200d4 	.word	0x200200d4
 8021b2c:	200200a8 	.word	0x200200a8
 8021b30:	66666667 	.word	0x66666667
 8021b34:	00d4d7d9 	.word	0x00d4d7d9
 8021b38:	0045494d 	.word	0x0045494d

08021b3c <spinner_init>:

static void spinner_init(void)
{
 8021b3c:	b480      	push	{r7}
 8021b3e:	af00      	add	r7, sp, #0
#if LV_USE_SPINNER != 0
#endif
}
 8021b40:	bf00      	nop
 8021b42:	46bd      	mov	sp, r7
 8021b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b48:	4770      	bx	lr
	...

08021b4c <chart_init>:

static void chart_init(void)
{
 8021b4c:	b598      	push	{r3, r4, r7, lr}
 8021b4e:	af00      	add	r7, sp, #0
#if LV_USE_CHART
    style_init_reset(&styles->chart_bg);
 8021b50:	4ba4      	ldr	r3, [pc, #656]	; (8021de4 <chart_init+0x298>)
 8021b52:	681b      	ldr	r3, [r3, #0]
 8021b54:	3344      	adds	r3, #68	; 0x44
 8021b56:	4618      	mov	r0, r3
 8021b58:	f003 fc86 	bl	8025468 <style_init_reset>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 8021b5c:	4ba1      	ldr	r3, [pc, #644]	; (8021de4 <chart_init+0x298>)
 8021b5e:	681b      	ldr	r3, [r3, #0]
 8021b60:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8021b64:	4ba0      	ldr	r3, [pc, #640]	; (8021de8 <chart_init+0x29c>)
 8021b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b68:	f003 0302 	and.w	r3, r3, #2
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	d011      	beq.n	8021b94 <chart_init+0x48>
 8021b70:	4b9d      	ldr	r3, [pc, #628]	; (8021de8 <chart_init+0x29c>)
 8021b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b74:	f003 0302 	and.w	r3, r3, #2
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	d005      	beq.n	8021b88 <chart_init+0x3c>
 8021b7c:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8021b80:	f7fc fec8 	bl	801e914 <lv_color_hex3>
 8021b84:	4603      	mov	r3, r0
 8021b86:	e009      	b.n	8021b9c <chart_init+0x50>
 8021b88:	f640 1099 	movw	r0, #2457	; 0x999
 8021b8c:	f7fc fec2 	bl	801e914 <lv_color_hex3>
 8021b90:	4603      	mov	r3, r0
 8021b92:	e003      	b.n	8021b9c <chart_init+0x50>
 8021b94:	4895      	ldr	r0, [pc, #596]	; (8021dec <chart_init+0x2a0>)
 8021b96:	f7fc fea9 	bl	801e8ec <lv_color_hex>
 8021b9a:	4603      	mov	r3, r0
 8021b9c:	461a      	mov	r2, r3
 8021b9e:	2100      	movs	r1, #0
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	f7fd fa11 	bl	801efc8 <lv_style_set_text_color>

    style_init_reset(&styles->chart_series_bg);
 8021ba6:	4b8f      	ldr	r3, [pc, #572]	; (8021de4 <chart_init+0x298>)
 8021ba8:	681b      	ldr	r3, [r3, #0]
 8021baa:	3348      	adds	r3, #72	; 0x48
 8021bac:	4618      	mov	r0, r3
 8021bae:	f003 fc5b 	bl	8025468 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
 8021bb2:	4b8c      	ldr	r3, [pc, #560]	; (8021de4 <chart_init+0x298>)
 8021bb4:	681b      	ldr	r3, [r3, #0]
 8021bb6:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8021bba:	2000      	movs	r0, #0
 8021bbc:	f7f8 fc2c 	bl	801a418 <lv_disp_get_dpi>
 8021bc0:	4603      	mov	r3, r0
 8021bc2:	3350      	adds	r3, #80	; 0x50
 8021bc4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021bc8:	db0c      	blt.n	8021be4 <chart_init+0x98>
 8021bca:	2000      	movs	r0, #0
 8021bcc:	f7f8 fc24 	bl	801a418 <lv_disp_get_dpi>
 8021bd0:	4603      	mov	r3, r0
 8021bd2:	3350      	adds	r3, #80	; 0x50
 8021bd4:	4a86      	ldr	r2, [pc, #536]	; (8021df0 <chart_init+0x2a4>)
 8021bd6:	fb82 1203 	smull	r1, r2, r2, r3
 8021bda:	1192      	asrs	r2, r2, #6
 8021bdc:	17db      	asrs	r3, r3, #31
 8021bde:	1ad3      	subs	r3, r2, r3
 8021be0:	b21b      	sxth	r3, r3
 8021be2:	e000      	b.n	8021be6 <chart_init+0x9a>
 8021be4:	2301      	movs	r3, #1
 8021be6:	461a      	mov	r2, r3
 8021be8:	2100      	movs	r1, #0
 8021bea:	4620      	mov	r0, r4
 8021bec:	f7fd fa54 	bl	801f098 <lv_style_set_line_width>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8021bf0:	4b7c      	ldr	r3, [pc, #496]	; (8021de4 <chart_init+0x298>)
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8021bf8:	2000      	movs	r0, #0
 8021bfa:	f7f8 fc0d 	bl	801a418 <lv_disp_get_dpi>
 8021bfe:	4603      	mov	r3, r0
 8021c00:	461a      	mov	r2, r3
 8021c02:	4613      	mov	r3, r2
 8021c04:	009b      	lsls	r3, r3, #2
 8021c06:	4413      	add	r3, r2
 8021c08:	005b      	lsls	r3, r3, #1
 8021c0a:	3350      	adds	r3, #80	; 0x50
 8021c0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021c10:	db11      	blt.n	8021c36 <chart_init+0xea>
 8021c12:	2000      	movs	r0, #0
 8021c14:	f7f8 fc00 	bl	801a418 <lv_disp_get_dpi>
 8021c18:	4603      	mov	r3, r0
 8021c1a:	461a      	mov	r2, r3
 8021c1c:	4613      	mov	r3, r2
 8021c1e:	009b      	lsls	r3, r3, #2
 8021c20:	4413      	add	r3, r2
 8021c22:	005b      	lsls	r3, r3, #1
 8021c24:	3350      	adds	r3, #80	; 0x50
 8021c26:	4a72      	ldr	r2, [pc, #456]	; (8021df0 <chart_init+0x2a4>)
 8021c28:	fb82 1203 	smull	r1, r2, r2, r3
 8021c2c:	1192      	asrs	r2, r2, #6
 8021c2e:	17db      	asrs	r3, r3, #31
 8021c30:	1ad3      	subs	r3, r2, r3
 8021c32:	b21b      	sxth	r3, r3
 8021c34:	e000      	b.n	8021c38 <chart_init+0xec>
 8021c36:	2301      	movs	r3, #1
 8021c38:	461a      	mov	r2, r3
 8021c3a:	2100      	movs	r1, #0
 8021c3c:	4620      	mov	r0, r4
 8021c3e:	f7fd fa44 	bl	801f0ca <lv_style_set_line_dash_width>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8021c42:	4b68      	ldr	r3, [pc, #416]	; (8021de4 <chart_init+0x298>)
 8021c44:	681b      	ldr	r3, [r3, #0]
 8021c46:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8021c4a:	2000      	movs	r0, #0
 8021c4c:	f7f8 fbe4 	bl	801a418 <lv_disp_get_dpi>
 8021c50:	4603      	mov	r3, r0
 8021c52:	461a      	mov	r2, r3
 8021c54:	4613      	mov	r3, r2
 8021c56:	009b      	lsls	r3, r3, #2
 8021c58:	4413      	add	r3, r2
 8021c5a:	005b      	lsls	r3, r3, #1
 8021c5c:	3350      	adds	r3, #80	; 0x50
 8021c5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021c62:	db11      	blt.n	8021c88 <chart_init+0x13c>
 8021c64:	2000      	movs	r0, #0
 8021c66:	f7f8 fbd7 	bl	801a418 <lv_disp_get_dpi>
 8021c6a:	4603      	mov	r3, r0
 8021c6c:	461a      	mov	r2, r3
 8021c6e:	4613      	mov	r3, r2
 8021c70:	009b      	lsls	r3, r3, #2
 8021c72:	4413      	add	r3, r2
 8021c74:	005b      	lsls	r3, r3, #1
 8021c76:	3350      	adds	r3, #80	; 0x50
 8021c78:	4a5d      	ldr	r2, [pc, #372]	; (8021df0 <chart_init+0x2a4>)
 8021c7a:	fb82 1203 	smull	r1, r2, r2, r3
 8021c7e:	1192      	asrs	r2, r2, #6
 8021c80:	17db      	asrs	r3, r3, #31
 8021c82:	1ad3      	subs	r3, r2, r3
 8021c84:	b21b      	sxth	r3, r3
 8021c86:	e000      	b.n	8021c8a <chart_init+0x13e>
 8021c88:	2301      	movs	r3, #1
 8021c8a:	461a      	mov	r2, r3
 8021c8c:	2100      	movs	r1, #0
 8021c8e:	4620      	mov	r0, r4
 8021c90:	f7fd fa34 	bl	801f0fc <lv_style_set_line_dash_gap>
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8021c94:	4b53      	ldr	r3, [pc, #332]	; (8021de4 <chart_init+0x298>)
 8021c96:	681b      	ldr	r3, [r3, #0]
 8021c98:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8021c9c:	4b52      	ldr	r3, [pc, #328]	; (8021de8 <chart_init+0x29c>)
 8021c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021ca0:	f003 0302 	and.w	r3, r3, #2
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d004      	beq.n	8021cb2 <chart_init+0x166>
 8021ca8:	4852      	ldr	r0, [pc, #328]	; (8021df4 <chart_init+0x2a8>)
 8021caa:	f7fc fe1f 	bl	801e8ec <lv_color_hex>
 8021cae:	4603      	mov	r3, r0
 8021cb0:	e003      	b.n	8021cba <chart_init+0x16e>
 8021cb2:	4851      	ldr	r0, [pc, #324]	; (8021df8 <chart_init+0x2ac>)
 8021cb4:	f7fc fe1a 	bl	801e8ec <lv_color_hex>
 8021cb8:	4603      	mov	r3, r0
 8021cba:	461a      	mov	r2, r3
 8021cbc:	2100      	movs	r1, #0
 8021cbe:	4620      	mov	r0, r4
 8021cc0:	f7fd fa4e 	bl	801f160 <lv_style_set_line_color>

    style_init_reset(&styles->chart_series);
 8021cc4:	4b47      	ldr	r3, [pc, #284]	; (8021de4 <chart_init+0x298>)
 8021cc6:	681b      	ldr	r3, [r3, #0]
 8021cc8:	334c      	adds	r3, #76	; 0x4c
 8021cca:	4618      	mov	r0, r3
 8021ccc:	f003 fbcc 	bl	8025468 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
 8021cd0:	4b44      	ldr	r3, [pc, #272]	; (8021de4 <chart_init+0x298>)
 8021cd2:	681b      	ldr	r3, [r3, #0]
 8021cd4:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021cd8:	2000      	movs	r0, #0
 8021cda:	f7f8 fb9d 	bl	801a418 <lv_disp_get_dpi>
 8021cde:	4603      	mov	r3, r0
 8021ce0:	461a      	mov	r2, r3
 8021ce2:	4613      	mov	r3, r2
 8021ce4:	005b      	lsls	r3, r3, #1
 8021ce6:	4413      	add	r3, r2
 8021ce8:	3350      	adds	r3, #80	; 0x50
 8021cea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021cee:	db10      	blt.n	8021d12 <chart_init+0x1c6>
 8021cf0:	2000      	movs	r0, #0
 8021cf2:	f7f8 fb91 	bl	801a418 <lv_disp_get_dpi>
 8021cf6:	4603      	mov	r3, r0
 8021cf8:	461a      	mov	r2, r3
 8021cfa:	4613      	mov	r3, r2
 8021cfc:	005b      	lsls	r3, r3, #1
 8021cfe:	4413      	add	r3, r2
 8021d00:	3350      	adds	r3, #80	; 0x50
 8021d02:	4a3b      	ldr	r2, [pc, #236]	; (8021df0 <chart_init+0x2a4>)
 8021d04:	fb82 1203 	smull	r1, r2, r2, r3
 8021d08:	1192      	asrs	r2, r2, #6
 8021d0a:	17db      	asrs	r3, r3, #31
 8021d0c:	1ad3      	subs	r3, r2, r3
 8021d0e:	b21b      	sxth	r3, r3
 8021d10:	e000      	b.n	8021d14 <chart_init+0x1c8>
 8021d12:	2301      	movs	r3, #1
 8021d14:	461a      	mov	r2, r3
 8021d16:	2100      	movs	r1, #0
 8021d18:	4620      	mov	r0, r4
 8021d1a:	f7fd f9bd 	bl	801f098 <lv_style_set_line_width>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
 8021d1e:	4b31      	ldr	r3, [pc, #196]	; (8021de4 <chart_init+0x298>)
 8021d20:	681b      	ldr	r3, [r3, #0]
 8021d22:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021d26:	2000      	movs	r0, #0
 8021d28:	f7f8 fb76 	bl	801a418 <lv_disp_get_dpi>
 8021d2c:	4603      	mov	r3, r0
 8021d2e:	3314      	adds	r3, #20
 8021d30:	009b      	lsls	r3, r3, #2
 8021d32:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021d36:	db0d      	blt.n	8021d54 <chart_init+0x208>
 8021d38:	2000      	movs	r0, #0
 8021d3a:	f7f8 fb6d 	bl	801a418 <lv_disp_get_dpi>
 8021d3e:	4603      	mov	r3, r0
 8021d40:	3314      	adds	r3, #20
 8021d42:	009b      	lsls	r3, r3, #2
 8021d44:	4a2a      	ldr	r2, [pc, #168]	; (8021df0 <chart_init+0x2a4>)
 8021d46:	fb82 1203 	smull	r1, r2, r2, r3
 8021d4a:	1192      	asrs	r2, r2, #6
 8021d4c:	17db      	asrs	r3, r3, #31
 8021d4e:	1ad3      	subs	r3, r2, r3
 8021d50:	b21b      	sxth	r3, r3
 8021d52:	e000      	b.n	8021d56 <chart_init+0x20a>
 8021d54:	2301      	movs	r3, #1
 8021d56:	461a      	mov	r2, r3
 8021d58:	2100      	movs	r1, #0
 8021d5a:	4620      	mov	r0, r4
 8021d5c:	f7fc fe3e 	bl	801e9dc <lv_style_set_size>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
 8021d60:	4b20      	ldr	r3, [pc, #128]	; (8021de4 <chart_init+0x298>)
 8021d62:	681b      	ldr	r3, [r3, #0]
 8021d64:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021d68:	2000      	movs	r0, #0
 8021d6a:	f7f8 fb55 	bl	801a418 <lv_disp_get_dpi>
 8021d6e:	4603      	mov	r3, r0
 8021d70:	3328      	adds	r3, #40	; 0x28
 8021d72:	005b      	lsls	r3, r3, #1
 8021d74:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021d78:	db0d      	blt.n	8021d96 <chart_init+0x24a>
 8021d7a:	2000      	movs	r0, #0
 8021d7c:	f7f8 fb4c 	bl	801a418 <lv_disp_get_dpi>
 8021d80:	4603      	mov	r3, r0
 8021d82:	3328      	adds	r3, #40	; 0x28
 8021d84:	005b      	lsls	r3, r3, #1
 8021d86:	4a1a      	ldr	r2, [pc, #104]	; (8021df0 <chart_init+0x2a4>)
 8021d88:	fb82 1203 	smull	r1, r2, r2, r3
 8021d8c:	1192      	asrs	r2, r2, #6
 8021d8e:	17db      	asrs	r3, r3, #31
 8021d90:	1ad3      	subs	r3, r2, r3
 8021d92:	b21b      	sxth	r3, r3
 8021d94:	e000      	b.n	8021d98 <chart_init+0x24c>
 8021d96:	2301      	movs	r3, #1
 8021d98:	461a      	mov	r2, r3
 8021d9a:	2100      	movs	r1, #0
 8021d9c:	4620      	mov	r0, r4
 8021d9e:	f7fc feb3 	bl	801eb08 <lv_style_set_pad_inner>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
 8021da2:	4b10      	ldr	r3, [pc, #64]	; (8021de4 <chart_init+0x298>)
 8021da4:	681b      	ldr	r3, [r3, #0]
 8021da6:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021daa:	2000      	movs	r0, #0
 8021dac:	f7f8 fb34 	bl	801a418 <lv_disp_get_dpi>
 8021db0:	4603      	mov	r3, r0
 8021db2:	3350      	adds	r3, #80	; 0x50
 8021db4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021db8:	db0c      	blt.n	8021dd4 <chart_init+0x288>
 8021dba:	2000      	movs	r0, #0
 8021dbc:	f7f8 fb2c 	bl	801a418 <lv_disp_get_dpi>
 8021dc0:	4603      	mov	r3, r0
 8021dc2:	3350      	adds	r3, #80	; 0x50
 8021dc4:	4a0a      	ldr	r2, [pc, #40]	; (8021df0 <chart_init+0x2a4>)
 8021dc6:	fb82 1203 	smull	r1, r2, r2, r3
 8021dca:	1192      	asrs	r2, r2, #6
 8021dcc:	17db      	asrs	r3, r3, #31
 8021dce:	1ad3      	subs	r3, r2, r3
 8021dd0:	b21b      	sxth	r3, r3
 8021dd2:	e000      	b.n	8021dd6 <chart_init+0x28a>
 8021dd4:	2301      	movs	r3, #1
 8021dd6:	461a      	mov	r2, r3
 8021dd8:	2100      	movs	r1, #0
 8021dda:	4620      	mov	r0, r4
 8021ddc:	f7fc fdcc 	bl	801e978 <lv_style_set_radius>

#endif
}
 8021de0:	bf00      	nop
 8021de2:	bd98      	pop	{r3, r4, r7, pc}
 8021de4:	200200d4 	.word	0x200200d4
 8021de8:	200200a8 	.word	0x200200a8
 8021dec:	00a1adbd 	.word	0x00a1adbd
 8021df0:	66666667 	.word	0x66666667
 8021df4:	00d6dde3 	.word	0x00d6dde3
 8021df8:	00808a97 	.word	0x00808a97

08021dfc <calendar_init>:

static void calendar_init(void)
{
 8021dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e00:	af00      	add	r7, sp, #0
#if LV_USE_CALENDAR

    style_init_reset(&styles->calendar_header);
 8021e02:	4bc1      	ldr	r3, [pc, #772]	; (8022108 <calendar_init+0x30c>)
 8021e04:	681b      	ldr	r3, [r3, #0]
 8021e06:	3334      	adds	r3, #52	; 0x34
 8021e08:	4618      	mov	r0, r3
 8021e0a:	f003 fb2d 	bl	8025468 <style_init_reset>
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
 8021e0e:	4bbe      	ldr	r3, [pc, #760]	; (8022108 <calendar_init+0x30c>)
 8021e10:	681b      	ldr	r3, [r3, #0]
 8021e12:	3334      	adds	r3, #52	; 0x34
 8021e14:	2200      	movs	r2, #0
 8021e16:	2100      	movs	r1, #0
 8021e18:	4618      	mov	r0, r3
 8021e1a:	f7fc fe11 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021e1e:	4bba      	ldr	r3, [pc, #744]	; (8022108 <calendar_init+0x30c>)
 8021e20:	681b      	ldr	r3, [r3, #0]
 8021e22:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021e26:	2000      	movs	r0, #0
 8021e28:	f7f8 fb0f 	bl	801a44a <lv_disp_get_size_category>
 8021e2c:	4603      	mov	r3, r0
 8021e2e:	2b01      	cmp	r3, #1
 8021e30:	d81e      	bhi.n	8021e70 <calendar_init+0x74>
 8021e32:	2000      	movs	r0, #0
 8021e34:	f7f8 faf0 	bl	801a418 <lv_disp_get_dpi>
 8021e38:	4603      	mov	r3, r0
 8021e3a:	461a      	mov	r2, r3
 8021e3c:	4613      	mov	r3, r2
 8021e3e:	011b      	lsls	r3, r3, #4
 8021e40:	1a9b      	subs	r3, r3, r2
 8021e42:	3350      	adds	r3, #80	; 0x50
 8021e44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021e48:	db10      	blt.n	8021e6c <calendar_init+0x70>
 8021e4a:	2000      	movs	r0, #0
 8021e4c:	f7f8 fae4 	bl	801a418 <lv_disp_get_dpi>
 8021e50:	4603      	mov	r3, r0
 8021e52:	461a      	mov	r2, r3
 8021e54:	4613      	mov	r3, r2
 8021e56:	011b      	lsls	r3, r3, #4
 8021e58:	1a9b      	subs	r3, r3, r2
 8021e5a:	3350      	adds	r3, #80	; 0x50
 8021e5c:	4aab      	ldr	r2, [pc, #684]	; (802210c <calendar_init+0x310>)
 8021e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8021e62:	1192      	asrs	r2, r2, #6
 8021e64:	17db      	asrs	r3, r3, #31
 8021e66:	1ad3      	subs	r3, r2, r3
 8021e68:	b21b      	sxth	r3, r3
 8021e6a:	e021      	b.n	8021eb0 <calendar_init+0xb4>
 8021e6c:	2301      	movs	r3, #1
 8021e6e:	e01f      	b.n	8021eb0 <calendar_init+0xb4>
 8021e70:	2000      	movs	r0, #0
 8021e72:	f7f8 fad1 	bl	801a418 <lv_disp_get_dpi>
 8021e76:	4603      	mov	r3, r0
 8021e78:	461a      	mov	r2, r3
 8021e7a:	4613      	mov	r3, r2
 8021e7c:	011b      	lsls	r3, r3, #4
 8021e7e:	1a9b      	subs	r3, r3, r2
 8021e80:	005b      	lsls	r3, r3, #1
 8021e82:	3350      	adds	r3, #80	; 0x50
 8021e84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021e88:	db11      	blt.n	8021eae <calendar_init+0xb2>
 8021e8a:	2000      	movs	r0, #0
 8021e8c:	f7f8 fac4 	bl	801a418 <lv_disp_get_dpi>
 8021e90:	4603      	mov	r3, r0
 8021e92:	461a      	mov	r2, r3
 8021e94:	4613      	mov	r3, r2
 8021e96:	011b      	lsls	r3, r3, #4
 8021e98:	1a9b      	subs	r3, r3, r2
 8021e9a:	005b      	lsls	r3, r3, #1
 8021e9c:	3350      	adds	r3, #80	; 0x50
 8021e9e:	4a9b      	ldr	r2, [pc, #620]	; (802210c <calendar_init+0x310>)
 8021ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8021ea4:	1192      	asrs	r2, r2, #6
 8021ea6:	17db      	asrs	r3, r3, #31
 8021ea8:	1ad3      	subs	r3, r2, r3
 8021eaa:	b21b      	sxth	r3, r3
 8021eac:	e000      	b.n	8021eb0 <calendar_init+0xb4>
 8021eae:	2301      	movs	r3, #1
 8021eb0:	461a      	mov	r2, r3
 8021eb2:	2100      	movs	r1, #0
 8021eb4:	4650      	mov	r0, sl
 8021eb6:	f7fc fdf5 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021eba:	4b93      	ldr	r3, [pc, #588]	; (8022108 <calendar_init+0x30c>)
 8021ebc:	681b      	ldr	r3, [r3, #0]
 8021ebe:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021ec2:	2000      	movs	r0, #0
 8021ec4:	f7f8 fac1 	bl	801a44a <lv_disp_get_size_category>
 8021ec8:	4603      	mov	r3, r0
 8021eca:	2b01      	cmp	r3, #1
 8021ecc:	d81e      	bhi.n	8021f0c <calendar_init+0x110>
 8021ece:	2000      	movs	r0, #0
 8021ed0:	f7f8 faa2 	bl	801a418 <lv_disp_get_dpi>
 8021ed4:	4603      	mov	r3, r0
 8021ed6:	461a      	mov	r2, r3
 8021ed8:	4613      	mov	r3, r2
 8021eda:	011b      	lsls	r3, r3, #4
 8021edc:	1a9b      	subs	r3, r3, r2
 8021ede:	3350      	adds	r3, #80	; 0x50
 8021ee0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021ee4:	db10      	blt.n	8021f08 <calendar_init+0x10c>
 8021ee6:	2000      	movs	r0, #0
 8021ee8:	f7f8 fa96 	bl	801a418 <lv_disp_get_dpi>
 8021eec:	4603      	mov	r3, r0
 8021eee:	461a      	mov	r2, r3
 8021ef0:	4613      	mov	r3, r2
 8021ef2:	011b      	lsls	r3, r3, #4
 8021ef4:	1a9b      	subs	r3, r3, r2
 8021ef6:	3350      	adds	r3, #80	; 0x50
 8021ef8:	4a84      	ldr	r2, [pc, #528]	; (802210c <calendar_init+0x310>)
 8021efa:	fb82 1203 	smull	r1, r2, r2, r3
 8021efe:	1192      	asrs	r2, r2, #6
 8021f00:	17db      	asrs	r3, r3, #31
 8021f02:	1ad3      	subs	r3, r2, r3
 8021f04:	b21b      	sxth	r3, r3
 8021f06:	e021      	b.n	8021f4c <calendar_init+0x150>
 8021f08:	2301      	movs	r3, #1
 8021f0a:	e01f      	b.n	8021f4c <calendar_init+0x150>
 8021f0c:	2000      	movs	r0, #0
 8021f0e:	f7f8 fa83 	bl	801a418 <lv_disp_get_dpi>
 8021f12:	4603      	mov	r3, r0
 8021f14:	461a      	mov	r2, r3
 8021f16:	4613      	mov	r3, r2
 8021f18:	011b      	lsls	r3, r3, #4
 8021f1a:	1a9b      	subs	r3, r3, r2
 8021f1c:	005b      	lsls	r3, r3, #1
 8021f1e:	3350      	adds	r3, #80	; 0x50
 8021f20:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021f24:	db11      	blt.n	8021f4a <calendar_init+0x14e>
 8021f26:	2000      	movs	r0, #0
 8021f28:	f7f8 fa76 	bl	801a418 <lv_disp_get_dpi>
 8021f2c:	4603      	mov	r3, r0
 8021f2e:	461a      	mov	r2, r3
 8021f30:	4613      	mov	r3, r2
 8021f32:	011b      	lsls	r3, r3, #4
 8021f34:	1a9b      	subs	r3, r3, r2
 8021f36:	005b      	lsls	r3, r3, #1
 8021f38:	3350      	adds	r3, #80	; 0x50
 8021f3a:	4a74      	ldr	r2, [pc, #464]	; (802210c <calendar_init+0x310>)
 8021f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8021f40:	1192      	asrs	r2, r2, #6
 8021f42:	17db      	asrs	r3, r3, #31
 8021f44:	1ad3      	subs	r3, r2, r3
 8021f46:	b21b      	sxth	r3, r3
 8021f48:	e000      	b.n	8021f4c <calendar_init+0x150>
 8021f4a:	2301      	movs	r3, #1
 8021f4c:	461a      	mov	r2, r3
 8021f4e:	2100      	movs	r1, #0
 8021f50:	4650      	mov	r0, sl
 8021f52:	f7fc fdc0 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
 8021f56:	4b6c      	ldr	r3, [pc, #432]	; (8022108 <calendar_init+0x30c>)
 8021f58:	681b      	ldr	r3, [r3, #0]
 8021f5a:	3334      	adds	r3, #52	; 0x34
 8021f5c:	2200      	movs	r2, #0
 8021f5e:	2100      	movs	r1, #0
 8021f60:	4618      	mov	r0, r3
 8021f62:	f7fc fd86 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021f66:	4b68      	ldr	r3, [pc, #416]	; (8022108 <calendar_init+0x30c>)
 8021f68:	681b      	ldr	r3, [r3, #0]
 8021f6a:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021f6e:	2000      	movs	r0, #0
 8021f70:	f7f8 fa6b 	bl	801a44a <lv_disp_get_size_category>
 8021f74:	4603      	mov	r3, r0
 8021f76:	2b01      	cmp	r3, #1
 8021f78:	d81e      	bhi.n	8021fb8 <calendar_init+0x1bc>
 8021f7a:	2000      	movs	r0, #0
 8021f7c:	f7f8 fa4c 	bl	801a418 <lv_disp_get_dpi>
 8021f80:	4603      	mov	r3, r0
 8021f82:	461a      	mov	r2, r3
 8021f84:	4613      	mov	r3, r2
 8021f86:	011b      	lsls	r3, r3, #4
 8021f88:	1a9b      	subs	r3, r3, r2
 8021f8a:	3350      	adds	r3, #80	; 0x50
 8021f8c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021f90:	db10      	blt.n	8021fb4 <calendar_init+0x1b8>
 8021f92:	2000      	movs	r0, #0
 8021f94:	f7f8 fa40 	bl	801a418 <lv_disp_get_dpi>
 8021f98:	4603      	mov	r3, r0
 8021f9a:	461a      	mov	r2, r3
 8021f9c:	4613      	mov	r3, r2
 8021f9e:	011b      	lsls	r3, r3, #4
 8021fa0:	1a9b      	subs	r3, r3, r2
 8021fa2:	3350      	adds	r3, #80	; 0x50
 8021fa4:	4a59      	ldr	r2, [pc, #356]	; (802210c <calendar_init+0x310>)
 8021fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8021faa:	1192      	asrs	r2, r2, #6
 8021fac:	17db      	asrs	r3, r3, #31
 8021fae:	1ad3      	subs	r3, r2, r3
 8021fb0:	b21b      	sxth	r3, r3
 8021fb2:	e021      	b.n	8021ff8 <calendar_init+0x1fc>
 8021fb4:	2301      	movs	r3, #1
 8021fb6:	e01f      	b.n	8021ff8 <calendar_init+0x1fc>
 8021fb8:	2000      	movs	r0, #0
 8021fba:	f7f8 fa2d 	bl	801a418 <lv_disp_get_dpi>
 8021fbe:	4603      	mov	r3, r0
 8021fc0:	461a      	mov	r2, r3
 8021fc2:	4613      	mov	r3, r2
 8021fc4:	011b      	lsls	r3, r3, #4
 8021fc6:	1a9b      	subs	r3, r3, r2
 8021fc8:	005b      	lsls	r3, r3, #1
 8021fca:	3350      	adds	r3, #80	; 0x50
 8021fcc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021fd0:	db11      	blt.n	8021ff6 <calendar_init+0x1fa>
 8021fd2:	2000      	movs	r0, #0
 8021fd4:	f7f8 fa20 	bl	801a418 <lv_disp_get_dpi>
 8021fd8:	4603      	mov	r3, r0
 8021fda:	461a      	mov	r2, r3
 8021fdc:	4613      	mov	r3, r2
 8021fde:	011b      	lsls	r3, r3, #4
 8021fe0:	1a9b      	subs	r3, r3, r2
 8021fe2:	005b      	lsls	r3, r3, #1
 8021fe4:	3350      	adds	r3, #80	; 0x50
 8021fe6:	4a49      	ldr	r2, [pc, #292]	; (802210c <calendar_init+0x310>)
 8021fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8021fec:	1192      	asrs	r2, r2, #6
 8021fee:	17db      	asrs	r3, r3, #31
 8021ff0:	1ad3      	subs	r3, r2, r3
 8021ff2:	b21b      	sxth	r3, r3
 8021ff4:	e000      	b.n	8021ff8 <calendar_init+0x1fc>
 8021ff6:	2301      	movs	r3, #1
 8021ff8:	461a      	mov	r2, r3
 8021ffa:	2100      	movs	r1, #0
 8021ffc:	4650      	mov	r0, sl
 8021ffe:	f7fc fd9c 	bl	801eb3a <lv_style_set_margin_top>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8022002:	4b41      	ldr	r3, [pc, #260]	; (8022108 <calendar_init+0x30c>)
 8022004:	681b      	ldr	r3, [r3, #0]
 8022006:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 802200a:	2000      	movs	r0, #0
 802200c:	f7f8 fa1d 	bl	801a44a <lv_disp_get_size_category>
 8022010:	4603      	mov	r3, r0
 8022012:	2b01      	cmp	r3, #1
 8022014:	d81e      	bhi.n	8022054 <calendar_init+0x258>
 8022016:	2000      	movs	r0, #0
 8022018:	f7f8 f9fe 	bl	801a418 <lv_disp_get_dpi>
 802201c:	4603      	mov	r3, r0
 802201e:	461a      	mov	r2, r3
 8022020:	4613      	mov	r3, r2
 8022022:	011b      	lsls	r3, r3, #4
 8022024:	1a9b      	subs	r3, r3, r2
 8022026:	3350      	adds	r3, #80	; 0x50
 8022028:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802202c:	db10      	blt.n	8022050 <calendar_init+0x254>
 802202e:	2000      	movs	r0, #0
 8022030:	f7f8 f9f2 	bl	801a418 <lv_disp_get_dpi>
 8022034:	4603      	mov	r3, r0
 8022036:	461a      	mov	r2, r3
 8022038:	4613      	mov	r3, r2
 802203a:	011b      	lsls	r3, r3, #4
 802203c:	1a9b      	subs	r3, r3, r2
 802203e:	3350      	adds	r3, #80	; 0x50
 8022040:	4a32      	ldr	r2, [pc, #200]	; (802210c <calendar_init+0x310>)
 8022042:	fb82 1203 	smull	r1, r2, r2, r3
 8022046:	1192      	asrs	r2, r2, #6
 8022048:	17db      	asrs	r3, r3, #31
 802204a:	1ad3      	subs	r3, r2, r3
 802204c:	b21b      	sxth	r3, r3
 802204e:	e021      	b.n	8022094 <calendar_init+0x298>
 8022050:	2301      	movs	r3, #1
 8022052:	e01f      	b.n	8022094 <calendar_init+0x298>
 8022054:	2000      	movs	r0, #0
 8022056:	f7f8 f9df 	bl	801a418 <lv_disp_get_dpi>
 802205a:	4603      	mov	r3, r0
 802205c:	461a      	mov	r2, r3
 802205e:	4613      	mov	r3, r2
 8022060:	011b      	lsls	r3, r3, #4
 8022062:	1a9b      	subs	r3, r3, r2
 8022064:	005b      	lsls	r3, r3, #1
 8022066:	3350      	adds	r3, #80	; 0x50
 8022068:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802206c:	db11      	blt.n	8022092 <calendar_init+0x296>
 802206e:	2000      	movs	r0, #0
 8022070:	f7f8 f9d2 	bl	801a418 <lv_disp_get_dpi>
 8022074:	4603      	mov	r3, r0
 8022076:	461a      	mov	r2, r3
 8022078:	4613      	mov	r3, r2
 802207a:	011b      	lsls	r3, r3, #4
 802207c:	1a9b      	subs	r3, r3, r2
 802207e:	005b      	lsls	r3, r3, #1
 8022080:	3350      	adds	r3, #80	; 0x50
 8022082:	4a22      	ldr	r2, [pc, #136]	; (802210c <calendar_init+0x310>)
 8022084:	fb82 1203 	smull	r1, r2, r2, r3
 8022088:	1192      	asrs	r2, r2, #6
 802208a:	17db      	asrs	r3, r3, #31
 802208c:	1ad3      	subs	r3, r2, r3
 802208e:	b21b      	sxth	r3, r3
 8022090:	e000      	b.n	8022094 <calendar_init+0x298>
 8022092:	2301      	movs	r3, #1
 8022094:	461a      	mov	r2, r3
 8022096:	2100      	movs	r1, #0
 8022098:	4650      	mov	r0, sl
 802209a:	f7fc fd67 	bl	801eb6c <lv_style_set_margin_bottom>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
 802209e:	4b1a      	ldr	r3, [pc, #104]	; (8022108 <calendar_init+0x30c>)
 80220a0:	681b      	ldr	r3, [r3, #0]
 80220a2:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 80220a6:	4b1a      	ldr	r3, [pc, #104]	; (8022110 <calendar_init+0x314>)
 80220a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80220aa:	f003 0302 	and.w	r3, r3, #2
 80220ae:	2b00      	cmp	r3, #0
 80220b0:	d004      	beq.n	80220bc <calendar_init+0x2c0>
 80220b2:	4818      	ldr	r0, [pc, #96]	; (8022114 <calendar_init+0x318>)
 80220b4:	f7fc fc1a 	bl	801e8ec <lv_color_hex>
 80220b8:	4680      	mov	r8, r0
 80220ba:	e00b      	b.n	80220d4 <calendar_init+0x2d8>
 80220bc:	4643      	mov	r3, r8
 80220be:	f043 08ff 	orr.w	r8, r3, #255	; 0xff
 80220c2:	4643      	mov	r3, r8
 80220c4:	f443 487f 	orr.w	r8, r3, #65280	; 0xff00
 80220c8:	4643      	mov	r3, r8
 80220ca:	f443 087f 	orr.w	r8, r3, #16711680	; 0xff0000
 80220ce:	4643      	mov	r3, r8
 80220d0:	f043 487f 	orr.w	r8, r3, #4278190080	; 0xff000000
 80220d4:	4642      	mov	r2, r8
 80220d6:	2110      	movs	r1, #16
 80220d8:	4650      	mov	r0, sl
 80220da:	f7fc ff75 	bl	801efc8 <lv_style_set_text_color>

    style_init_reset(&styles->calendar_daynames);
 80220de:	4b0a      	ldr	r3, [pc, #40]	; (8022108 <calendar_init+0x30c>)
 80220e0:	681b      	ldr	r3, [r3, #0]
 80220e2:	3338      	adds	r3, #56	; 0x38
 80220e4:	4618      	mov	r0, r3
 80220e6:	f003 f9bf 	bl	8025468 <style_init_reset>
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
 80220ea:	4b07      	ldr	r3, [pc, #28]	; (8022108 <calendar_init+0x30c>)
 80220ec:	681b      	ldr	r3, [r3, #0]
 80220ee:	f103 0838 	add.w	r8, r3, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
 80220f2:	4b07      	ldr	r3, [pc, #28]	; (8022110 <calendar_init+0x314>)
 80220f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80220f6:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	d00e      	beq.n	802211c <calendar_init+0x320>
 80220fe:	4806      	ldr	r0, [pc, #24]	; (8022118 <calendar_init+0x31c>)
 8022100:	f7fc fbf4 	bl	801e8ec <lv_color_hex>
 8022104:	4603      	mov	r3, r0
 8022106:	e00e      	b.n	8022126 <calendar_init+0x32a>
 8022108:	200200d4 	.word	0x200200d4
 802210c:	66666667 	.word	0x66666667
 8022110:	200200a8 	.word	0x200200a8
 8022114:	00888888 	.word	0x00888888
 8022118:	0031404f 	.word	0x0031404f
 802211c:	f640 60ee 	movw	r0, #3822	; 0xeee
 8022120:	f7fc fbf8 	bl	801e914 <lv_color_hex3>
 8022124:	4603      	mov	r3, r0
 8022126:	461a      	mov	r2, r3
 8022128:	2100      	movs	r1, #0
 802212a:	4640      	mov	r0, r8
 802212c:	f7fc ff4c 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8022130:	4bca      	ldr	r3, [pc, #808]	; (802245c <calendar_init+0x660>)
 8022132:	681b      	ldr	r3, [r3, #0]
 8022134:	f103 0838 	add.w	r8, r3, #56	; 0x38
 8022138:	2000      	movs	r0, #0
 802213a:	f7f8 f986 	bl	801a44a <lv_disp_get_size_category>
 802213e:	4603      	mov	r3, r0
 8022140:	2b01      	cmp	r3, #1
 8022142:	d81e      	bhi.n	8022182 <calendar_init+0x386>
 8022144:	2000      	movs	r0, #0
 8022146:	f7f8 f967 	bl	801a418 <lv_disp_get_dpi>
 802214a:	4603      	mov	r3, r0
 802214c:	461a      	mov	r2, r3
 802214e:	4613      	mov	r3, r2
 8022150:	011b      	lsls	r3, r3, #4
 8022152:	1a9b      	subs	r3, r3, r2
 8022154:	3350      	adds	r3, #80	; 0x50
 8022156:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802215a:	db10      	blt.n	802217e <calendar_init+0x382>
 802215c:	2000      	movs	r0, #0
 802215e:	f7f8 f95b 	bl	801a418 <lv_disp_get_dpi>
 8022162:	4603      	mov	r3, r0
 8022164:	461a      	mov	r2, r3
 8022166:	4613      	mov	r3, r2
 8022168:	011b      	lsls	r3, r3, #4
 802216a:	1a9b      	subs	r3, r3, r2
 802216c:	3350      	adds	r3, #80	; 0x50
 802216e:	4abc      	ldr	r2, [pc, #752]	; (8022460 <calendar_init+0x664>)
 8022170:	fb82 1203 	smull	r1, r2, r2, r3
 8022174:	1192      	asrs	r2, r2, #6
 8022176:	17db      	asrs	r3, r3, #31
 8022178:	1ad3      	subs	r3, r2, r3
 802217a:	b21b      	sxth	r3, r3
 802217c:	e021      	b.n	80221c2 <calendar_init+0x3c6>
 802217e:	2301      	movs	r3, #1
 8022180:	e01f      	b.n	80221c2 <calendar_init+0x3c6>
 8022182:	2000      	movs	r0, #0
 8022184:	f7f8 f948 	bl	801a418 <lv_disp_get_dpi>
 8022188:	4603      	mov	r3, r0
 802218a:	461a      	mov	r2, r3
 802218c:	4613      	mov	r3, r2
 802218e:	011b      	lsls	r3, r3, #4
 8022190:	1a9b      	subs	r3, r3, r2
 8022192:	005b      	lsls	r3, r3, #1
 8022194:	3350      	adds	r3, #80	; 0x50
 8022196:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802219a:	db11      	blt.n	80221c0 <calendar_init+0x3c4>
 802219c:	2000      	movs	r0, #0
 802219e:	f7f8 f93b 	bl	801a418 <lv_disp_get_dpi>
 80221a2:	4603      	mov	r3, r0
 80221a4:	461a      	mov	r2, r3
 80221a6:	4613      	mov	r3, r2
 80221a8:	011b      	lsls	r3, r3, #4
 80221aa:	1a9b      	subs	r3, r3, r2
 80221ac:	005b      	lsls	r3, r3, #1
 80221ae:	3350      	adds	r3, #80	; 0x50
 80221b0:	4aab      	ldr	r2, [pc, #684]	; (8022460 <calendar_init+0x664>)
 80221b2:	fb82 1203 	smull	r1, r2, r2, r3
 80221b6:	1192      	asrs	r2, r2, #6
 80221b8:	17db      	asrs	r3, r3, #31
 80221ba:	1ad3      	subs	r3, r2, r3
 80221bc:	b21b      	sxth	r3, r3
 80221be:	e000      	b.n	80221c2 <calendar_init+0x3c6>
 80221c0:	2301      	movs	r3, #1
 80221c2:	461a      	mov	r2, r3
 80221c4:	2100      	movs	r1, #0
 80221c6:	4640      	mov	r0, r8
 80221c8:	f7fc fc6c 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 80221cc:	4ba3      	ldr	r3, [pc, #652]	; (802245c <calendar_init+0x660>)
 80221ce:	681b      	ldr	r3, [r3, #0]
 80221d0:	f103 0838 	add.w	r8, r3, #56	; 0x38
 80221d4:	2000      	movs	r0, #0
 80221d6:	f7f8 f938 	bl	801a44a <lv_disp_get_size_category>
 80221da:	4603      	mov	r3, r0
 80221dc:	2b01      	cmp	r3, #1
 80221de:	d81e      	bhi.n	802221e <calendar_init+0x422>
 80221e0:	2000      	movs	r0, #0
 80221e2:	f7f8 f919 	bl	801a418 <lv_disp_get_dpi>
 80221e6:	4603      	mov	r3, r0
 80221e8:	461a      	mov	r2, r3
 80221ea:	4613      	mov	r3, r2
 80221ec:	011b      	lsls	r3, r3, #4
 80221ee:	1a9b      	subs	r3, r3, r2
 80221f0:	3350      	adds	r3, #80	; 0x50
 80221f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80221f6:	db10      	blt.n	802221a <calendar_init+0x41e>
 80221f8:	2000      	movs	r0, #0
 80221fa:	f7f8 f90d 	bl	801a418 <lv_disp_get_dpi>
 80221fe:	4603      	mov	r3, r0
 8022200:	461a      	mov	r2, r3
 8022202:	4613      	mov	r3, r2
 8022204:	011b      	lsls	r3, r3, #4
 8022206:	1a9b      	subs	r3, r3, r2
 8022208:	3350      	adds	r3, #80	; 0x50
 802220a:	4a95      	ldr	r2, [pc, #596]	; (8022460 <calendar_init+0x664>)
 802220c:	fb82 1203 	smull	r1, r2, r2, r3
 8022210:	1192      	asrs	r2, r2, #6
 8022212:	17db      	asrs	r3, r3, #31
 8022214:	1ad3      	subs	r3, r2, r3
 8022216:	b21b      	sxth	r3, r3
 8022218:	e021      	b.n	802225e <calendar_init+0x462>
 802221a:	2301      	movs	r3, #1
 802221c:	e01f      	b.n	802225e <calendar_init+0x462>
 802221e:	2000      	movs	r0, #0
 8022220:	f7f8 f8fa 	bl	801a418 <lv_disp_get_dpi>
 8022224:	4603      	mov	r3, r0
 8022226:	461a      	mov	r2, r3
 8022228:	4613      	mov	r3, r2
 802222a:	011b      	lsls	r3, r3, #4
 802222c:	1a9b      	subs	r3, r3, r2
 802222e:	005b      	lsls	r3, r3, #1
 8022230:	3350      	adds	r3, #80	; 0x50
 8022232:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022236:	db11      	blt.n	802225c <calendar_init+0x460>
 8022238:	2000      	movs	r0, #0
 802223a:	f7f8 f8ed 	bl	801a418 <lv_disp_get_dpi>
 802223e:	4603      	mov	r3, r0
 8022240:	461a      	mov	r2, r3
 8022242:	4613      	mov	r3, r2
 8022244:	011b      	lsls	r3, r3, #4
 8022246:	1a9b      	subs	r3, r3, r2
 8022248:	005b      	lsls	r3, r3, #1
 802224a:	3350      	adds	r3, #80	; 0x50
 802224c:	4a84      	ldr	r2, [pc, #528]	; (8022460 <calendar_init+0x664>)
 802224e:	fb82 1203 	smull	r1, r2, r2, r3
 8022252:	1192      	asrs	r2, r2, #6
 8022254:	17db      	asrs	r3, r3, #31
 8022256:	1ad3      	subs	r3, r2, r3
 8022258:	b21b      	sxth	r3, r3
 802225a:	e000      	b.n	802225e <calendar_init+0x462>
 802225c:	2301      	movs	r3, #1
 802225e:	461a      	mov	r2, r3
 8022260:	2100      	movs	r1, #0
 8022262:	4640      	mov	r0, r8
 8022264:	f7fc fc37 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8022268:	4b7c      	ldr	r3, [pc, #496]	; (802245c <calendar_init+0x660>)
 802226a:	681b      	ldr	r3, [r3, #0]
 802226c:	f103 0838 	add.w	r8, r3, #56	; 0x38
 8022270:	2000      	movs	r0, #0
 8022272:	f7f8 f8ea 	bl	801a44a <lv_disp_get_size_category>
 8022276:	4603      	mov	r3, r0
 8022278:	2b01      	cmp	r3, #1
 802227a:	d81e      	bhi.n	80222ba <calendar_init+0x4be>
 802227c:	2000      	movs	r0, #0
 802227e:	f7f8 f8cb 	bl	801a418 <lv_disp_get_dpi>
 8022282:	4603      	mov	r3, r0
 8022284:	461a      	mov	r2, r3
 8022286:	4613      	mov	r3, r2
 8022288:	011b      	lsls	r3, r3, #4
 802228a:	1a9b      	subs	r3, r3, r2
 802228c:	3350      	adds	r3, #80	; 0x50
 802228e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022292:	db10      	blt.n	80222b6 <calendar_init+0x4ba>
 8022294:	2000      	movs	r0, #0
 8022296:	f7f8 f8bf 	bl	801a418 <lv_disp_get_dpi>
 802229a:	4603      	mov	r3, r0
 802229c:	461a      	mov	r2, r3
 802229e:	4613      	mov	r3, r2
 80222a0:	011b      	lsls	r3, r3, #4
 80222a2:	1a9b      	subs	r3, r3, r2
 80222a4:	3350      	adds	r3, #80	; 0x50
 80222a6:	4a6e      	ldr	r2, [pc, #440]	; (8022460 <calendar_init+0x664>)
 80222a8:	fb82 1203 	smull	r1, r2, r2, r3
 80222ac:	1192      	asrs	r2, r2, #6
 80222ae:	17db      	asrs	r3, r3, #31
 80222b0:	1ad3      	subs	r3, r2, r3
 80222b2:	b21b      	sxth	r3, r3
 80222b4:	e021      	b.n	80222fa <calendar_init+0x4fe>
 80222b6:	2301      	movs	r3, #1
 80222b8:	e01f      	b.n	80222fa <calendar_init+0x4fe>
 80222ba:	2000      	movs	r0, #0
 80222bc:	f7f8 f8ac 	bl	801a418 <lv_disp_get_dpi>
 80222c0:	4603      	mov	r3, r0
 80222c2:	461a      	mov	r2, r3
 80222c4:	4613      	mov	r3, r2
 80222c6:	011b      	lsls	r3, r3, #4
 80222c8:	1a9b      	subs	r3, r3, r2
 80222ca:	005b      	lsls	r3, r3, #1
 80222cc:	3350      	adds	r3, #80	; 0x50
 80222ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80222d2:	db11      	blt.n	80222f8 <calendar_init+0x4fc>
 80222d4:	2000      	movs	r0, #0
 80222d6:	f7f8 f89f 	bl	801a418 <lv_disp_get_dpi>
 80222da:	4603      	mov	r3, r0
 80222dc:	461a      	mov	r2, r3
 80222de:	4613      	mov	r3, r2
 80222e0:	011b      	lsls	r3, r3, #4
 80222e2:	1a9b      	subs	r3, r3, r2
 80222e4:	005b      	lsls	r3, r3, #1
 80222e6:	3350      	adds	r3, #80	; 0x50
 80222e8:	4a5d      	ldr	r2, [pc, #372]	; (8022460 <calendar_init+0x664>)
 80222ea:	fb82 1203 	smull	r1, r2, r2, r3
 80222ee:	1192      	asrs	r2, r2, #6
 80222f0:	17db      	asrs	r3, r3, #31
 80222f2:	1ad3      	subs	r3, r2, r3
 80222f4:	b21b      	sxth	r3, r3
 80222f6:	e000      	b.n	80222fa <calendar_init+0x4fe>
 80222f8:	2301      	movs	r3, #1
 80222fa:	461a      	mov	r2, r3
 80222fc:	2100      	movs	r1, #0
 80222fe:	4640      	mov	r0, r8
 8022300:	f7fc fbb7 	bl	801ea72 <lv_style_set_pad_bottom>

    style_init_reset(&styles->calendar_date_nums);
 8022304:	4b55      	ldr	r3, [pc, #340]	; (802245c <calendar_init+0x660>)
 8022306:	681b      	ldr	r3, [r3, #0]
 8022308:	3330      	adds	r3, #48	; 0x30
 802230a:	4618      	mov	r0, r3
 802230c:	f003 f8ac 	bl	8025468 <style_init_reset>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
 8022310:	4b52      	ldr	r3, [pc, #328]	; (802245c <calendar_init+0x660>)
 8022312:	681b      	ldr	r3, [r3, #0]
 8022314:	f103 0830 	add.w	r8, r3, #48	; 0x30
 8022318:	2000      	movs	r0, #0
 802231a:	f7f8 f87d 	bl	801a418 <lv_disp_get_dpi>
 802231e:	4603      	mov	r3, r0
 8022320:	3314      	adds	r3, #20
 8022322:	009b      	lsls	r3, r3, #2
 8022324:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022328:	db0d      	blt.n	8022346 <calendar_init+0x54a>
 802232a:	2000      	movs	r0, #0
 802232c:	f7f8 f874 	bl	801a418 <lv_disp_get_dpi>
 8022330:	4603      	mov	r3, r0
 8022332:	3314      	adds	r3, #20
 8022334:	009b      	lsls	r3, r3, #2
 8022336:	4a4a      	ldr	r2, [pc, #296]	; (8022460 <calendar_init+0x664>)
 8022338:	fb82 1203 	smull	r1, r2, r2, r3
 802233c:	1192      	asrs	r2, r2, #6
 802233e:	17db      	asrs	r3, r3, #31
 8022340:	1ad3      	subs	r3, r2, r3
 8022342:	b21b      	sxth	r3, r3
 8022344:	e000      	b.n	8022348 <calendar_init+0x54c>
 8022346:	2301      	movs	r3, #1
 8022348:	461a      	mov	r2, r3
 802234a:	2100      	movs	r1, #0
 802234c:	4640      	mov	r0, r8
 802234e:	f7fc fb13 	bl	801e978 <lv_style_set_radius>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
 8022352:	4b42      	ldr	r3, [pc, #264]	; (802245c <calendar_init+0x660>)
 8022354:	681b      	ldr	r3, [r3, #0]
 8022356:	f103 0830 	add.w	r8, r3, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 802235a:	4b42      	ldr	r3, [pc, #264]	; (8022464 <calendar_init+0x668>)
 802235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802235e:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
 8022362:	2b00      	cmp	r3, #0
 8022364:	d004      	beq.n	8022370 <calendar_init+0x574>
 8022366:	4840      	ldr	r0, [pc, #256]	; (8022468 <calendar_init+0x66c>)
 8022368:	f7fc fac0 	bl	801e8ec <lv_color_hex>
 802236c:	4606      	mov	r6, r0
 802236e:	e00b      	b.n	8022388 <calendar_init+0x58c>
 8022370:	4633      	mov	r3, r6
 8022372:	f043 06ff 	orr.w	r6, r3, #255	; 0xff
 8022376:	4633      	mov	r3, r6
 8022378:	f443 467f 	orr.w	r6, r3, #65280	; 0xff00
 802237c:	4633      	mov	r3, r6
 802237e:	f443 067f 	orr.w	r6, r3, #16711680	; 0xff0000
 8022382:	4633      	mov	r3, r6
 8022384:	f043 467f 	orr.w	r6, r3, #4278190080	; 0xff000000
 8022388:	4632      	mov	r2, r6
 802238a:	2101      	movs	r1, #1
 802238c:	4640      	mov	r0, r8
 802238e:	f7fc fe1b 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
 8022392:	4b32      	ldr	r3, [pc, #200]	; (802245c <calendar_init+0x660>)
 8022394:	681b      	ldr	r3, [r3, #0]
 8022396:	f103 0030 	add.w	r0, r3, #48	; 0x30
 802239a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802239e:	f363 0407 	bfi	r4, r3, #0, #8
 80223a2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80223a6:	f363 240f 	bfi	r4, r3, #8, #8
 80223aa:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80223ae:	f363 4417 	bfi	r4, r3, #16, #8
 80223b2:	4623      	mov	r3, r4
 80223b4:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 80223b8:	4622      	mov	r2, r4
 80223ba:	2120      	movs	r1, #32
 80223bc:	f7fc fe04 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
 80223c0:	4b26      	ldr	r3, [pc, #152]	; (802245c <calendar_init+0x660>)
 80223c2:	681b      	ldr	r3, [r3, #0]
 80223c4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80223c8:	4b26      	ldr	r3, [pc, #152]	; (8022464 <calendar_init+0x668>)
 80223ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80223cc:	f003 0302 	and.w	r3, r3, #2
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	d001      	beq.n	80223d8 <calendar_init+0x5dc>
 80223d4:	2333      	movs	r3, #51	; 0x33
 80223d6:	e000      	b.n	80223da <calendar_init+0x5de>
 80223d8:	2366      	movs	r3, #102	; 0x66
 80223da:	461a      	mov	r2, r3
 80223dc:	2101      	movs	r1, #1
 80223de:	f7fc fc27 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
 80223e2:	4b1e      	ldr	r3, [pc, #120]	; (802245c <calendar_init+0x660>)
 80223e4:	681b      	ldr	r3, [r3, #0]
 80223e6:	3330      	adds	r3, #48	; 0x30
 80223e8:	2233      	movs	r2, #51	; 0x33
 80223ea:	2110      	movs	r1, #16
 80223ec:	4618      	mov	r0, r3
 80223ee:	f7fc fc1f 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
 80223f2:	4b1a      	ldr	r3, [pc, #104]	; (802245c <calendar_init+0x660>)
 80223f4:	681b      	ldr	r3, [r3, #0]
 80223f6:	3330      	adds	r3, #48	; 0x30
 80223f8:	22ff      	movs	r2, #255	; 0xff
 80223fa:	2102      	movs	r1, #2
 80223fc:	4618      	mov	r0, r3
 80223fe:	f7fc fc17 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
 8022402:	4b16      	ldr	r3, [pc, #88]	; (802245c <calendar_init+0x660>)
 8022404:	681b      	ldr	r3, [r3, #0]
 8022406:	3330      	adds	r3, #48	; 0x30
 8022408:	464a      	mov	r2, r9
 802240a:	f042 09ff 	orr.w	r9, r2, #255	; 0xff
 802240e:	464a      	mov	r2, r9
 8022410:	f442 497f 	orr.w	r9, r2, #65280	; 0xff00
 8022414:	464a      	mov	r2, r9
 8022416:	f442 097f 	orr.w	r9, r2, #16711680	; 0xff0000
 802241a:	464a      	mov	r2, r9
 802241c:	f042 497f 	orr.w	r9, r2, #4278190080	; 0xff000000
 8022420:	464a      	mov	r2, r9
 8022422:	2102      	movs	r1, #2
 8022424:	4618      	mov	r0, r3
 8022426:	f7fc fdcf 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
 802242a:	4b0c      	ldr	r3, [pc, #48]	; (802245c <calendar_init+0x660>)
 802242c:	681b      	ldr	r3, [r3, #0]
 802242e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8022432:	4b0c      	ldr	r3, [pc, #48]	; (8022464 <calendar_init+0x668>)
 8022434:	68da      	ldr	r2, [r3, #12]
 8022436:	2102      	movs	r1, #2
 8022438:	f7fc fbe3 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
 802243c:	4b07      	ldr	r3, [pc, #28]	; (802245c <calendar_init+0x660>)
 802243e:	681b      	ldr	r3, [r3, #0]
 8022440:	f103 0430 	add.w	r4, r3, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
 8022444:	4b07      	ldr	r3, [pc, #28]	; (8022464 <calendar_init+0x668>)
 8022446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022448:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
 802244c:	2b00      	cmp	r3, #0
 802244e:	d00f      	beq.n	8022470 <calendar_init+0x674>
 8022450:	4806      	ldr	r0, [pc, #24]	; (802246c <calendar_init+0x670>)
 8022452:	f7fc fa4b 	bl	801e8ec <lv_color_hex>
 8022456:	4605      	mov	r5, r0
 8022458:	e016      	b.n	8022488 <calendar_init+0x68c>
 802245a:	bf00      	nop
 802245c:	200200d4 	.word	0x200200d4
 8022460:	66666667 	.word	0x66666667
 8022464:	200200a8 	.word	0x200200a8
 8022468:	0031404f 	.word	0x0031404f
 802246c:	00666666 	.word	0x00666666
 8022470:	462b      	mov	r3, r5
 8022472:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 8022476:	462b      	mov	r3, r5
 8022478:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 802247c:	462b      	mov	r3, r5
 802247e:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 8022482:	462b      	mov	r3, r5
 8022484:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 8022488:	462a      	mov	r2, r5
 802248a:	2100      	movs	r1, #0
 802248c:	4620      	mov	r0, r4
 802248e:	f7fc fbb8 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
 8022492:	4b9b      	ldr	r3, [pc, #620]	; (8022700 <calendar_init+0x904>)
 8022494:	681b      	ldr	r3, [r3, #0]
 8022496:	f103 0030 	add.w	r0, r3, #48	; 0x30
 802249a:	4b9a      	ldr	r3, [pc, #616]	; (8022704 <calendar_init+0x908>)
 802249c:	68da      	ldr	r2, [r3, #12]
 802249e:	2101      	movs	r1, #1
 80224a0:	f7fc fbaf 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
 80224a4:	4b96      	ldr	r3, [pc, #600]	; (8022700 <calendar_init+0x904>)
 80224a6:	681b      	ldr	r3, [r3, #0]
 80224a8:	3330      	adds	r3, #48	; 0x30
 80224aa:	2202      	movs	r2, #2
 80224ac:	2101      	movs	r1, #1
 80224ae:	4618      	mov	r0, r3
 80224b0:	f7fc fbd6 	bl	801ec60 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
 80224b4:	4b92      	ldr	r3, [pc, #584]	; (8022700 <calendar_init+0x904>)
 80224b6:	681b      	ldr	r3, [r3, #0]
 80224b8:	3330      	adds	r3, #48	; 0x30
 80224ba:	2204      	movs	r2, #4
 80224bc:	2101      	movs	r1, #1
 80224be:	4618      	mov	r0, r3
 80224c0:	f7fc fbe7 	bl	801ec92 <lv_style_set_border_side>
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
 80224c4:	4b8e      	ldr	r3, [pc, #568]	; (8022700 <calendar_init+0x904>)
 80224c6:	681b      	ldr	r3, [r3, #0]
 80224c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80224cc:	4b8d      	ldr	r3, [pc, #564]	; (8022704 <calendar_init+0x908>)
 80224ce:	68da      	ldr	r2, [r3, #12]
 80224d0:	2101      	movs	r1, #1
 80224d2:	f7fc fc10 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
 80224d6:	4b8a      	ldr	r3, [pc, #552]	; (8022700 <calendar_init+0x904>)
 80224d8:	681b      	ldr	r3, [r3, #0]
 80224da:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80224de:	2000      	movs	r0, #0
 80224e0:	f7f7 ff9a 	bl	801a418 <lv_disp_get_dpi>
 80224e4:	4603      	mov	r3, r0
 80224e6:	461a      	mov	r2, r3
 80224e8:	4613      	mov	r3, r2
 80224ea:	005b      	lsls	r3, r3, #1
 80224ec:	4413      	add	r3, r2
 80224ee:	3350      	adds	r3, #80	; 0x50
 80224f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80224f4:	db10      	blt.n	8022518 <calendar_init+0x71c>
 80224f6:	2000      	movs	r0, #0
 80224f8:	f7f7 ff8e 	bl	801a418 <lv_disp_get_dpi>
 80224fc:	4603      	mov	r3, r0
 80224fe:	461a      	mov	r2, r3
 8022500:	4613      	mov	r3, r2
 8022502:	005b      	lsls	r3, r3, #1
 8022504:	4413      	add	r3, r2
 8022506:	3350      	adds	r3, #80	; 0x50
 8022508:	4a7f      	ldr	r2, [pc, #508]	; (8022708 <calendar_init+0x90c>)
 802250a:	fb82 1203 	smull	r1, r2, r2, r3
 802250e:	1192      	asrs	r2, r2, #6
 8022510:	17db      	asrs	r3, r3, #31
 8022512:	1ad3      	subs	r3, r2, r3
 8022514:	b21b      	sxth	r3, r3
 8022516:	e000      	b.n	802251a <calendar_init+0x71e>
 8022518:	2301      	movs	r3, #1
 802251a:	461a      	mov	r2, r3
 802251c:	2100      	movs	r1, #0
 802251e:	4620      	mov	r0, r4
 8022520:	f7fc faf2 	bl	801eb08 <lv_style_set_pad_inner>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8022524:	4b76      	ldr	r3, [pc, #472]	; (8022700 <calendar_init+0x904>)
 8022526:	681b      	ldr	r3, [r3, #0]
 8022528:	f103 0430 	add.w	r4, r3, #48	; 0x30
 802252c:	2000      	movs	r0, #0
 802252e:	f7f7 ff8c 	bl	801a44a <lv_disp_get_size_category>
 8022532:	4603      	mov	r3, r0
 8022534:	2b01      	cmp	r3, #1
 8022536:	d81e      	bhi.n	8022576 <calendar_init+0x77a>
 8022538:	2000      	movs	r0, #0
 802253a:	f7f7 ff6d 	bl	801a418 <lv_disp_get_dpi>
 802253e:	4603      	mov	r3, r0
 8022540:	461a      	mov	r2, r3
 8022542:	4613      	mov	r3, r2
 8022544:	011b      	lsls	r3, r3, #4
 8022546:	1a9b      	subs	r3, r3, r2
 8022548:	3350      	adds	r3, #80	; 0x50
 802254a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802254e:	db10      	blt.n	8022572 <calendar_init+0x776>
 8022550:	2000      	movs	r0, #0
 8022552:	f7f7 ff61 	bl	801a418 <lv_disp_get_dpi>
 8022556:	4603      	mov	r3, r0
 8022558:	461a      	mov	r2, r3
 802255a:	4613      	mov	r3, r2
 802255c:	011b      	lsls	r3, r3, #4
 802255e:	1a9b      	subs	r3, r3, r2
 8022560:	3350      	adds	r3, #80	; 0x50
 8022562:	4a69      	ldr	r2, [pc, #420]	; (8022708 <calendar_init+0x90c>)
 8022564:	fb82 1203 	smull	r1, r2, r2, r3
 8022568:	1192      	asrs	r2, r2, #6
 802256a:	17db      	asrs	r3, r3, #31
 802256c:	1ad3      	subs	r3, r2, r3
 802256e:	b21b      	sxth	r3, r3
 8022570:	e021      	b.n	80225b6 <calendar_init+0x7ba>
 8022572:	2301      	movs	r3, #1
 8022574:	e01f      	b.n	80225b6 <calendar_init+0x7ba>
 8022576:	2000      	movs	r0, #0
 8022578:	f7f7 ff4e 	bl	801a418 <lv_disp_get_dpi>
 802257c:	4603      	mov	r3, r0
 802257e:	461a      	mov	r2, r3
 8022580:	4613      	mov	r3, r2
 8022582:	011b      	lsls	r3, r3, #4
 8022584:	1a9b      	subs	r3, r3, r2
 8022586:	005b      	lsls	r3, r3, #1
 8022588:	3350      	adds	r3, #80	; 0x50
 802258a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802258e:	db11      	blt.n	80225b4 <calendar_init+0x7b8>
 8022590:	2000      	movs	r0, #0
 8022592:	f7f7 ff41 	bl	801a418 <lv_disp_get_dpi>
 8022596:	4603      	mov	r3, r0
 8022598:	461a      	mov	r2, r3
 802259a:	4613      	mov	r3, r2
 802259c:	011b      	lsls	r3, r3, #4
 802259e:	1a9b      	subs	r3, r3, r2
 80225a0:	005b      	lsls	r3, r3, #1
 80225a2:	3350      	adds	r3, #80	; 0x50
 80225a4:	4a58      	ldr	r2, [pc, #352]	; (8022708 <calendar_init+0x90c>)
 80225a6:	fb82 1203 	smull	r1, r2, r2, r3
 80225aa:	1192      	asrs	r2, r2, #6
 80225ac:	17db      	asrs	r3, r3, #31
 80225ae:	1ad3      	subs	r3, r2, r3
 80225b0:	b21b      	sxth	r3, r3
 80225b2:	e000      	b.n	80225b6 <calendar_init+0x7ba>
 80225b4:	2301      	movs	r3, #1
 80225b6:	461a      	mov	r2, r3
 80225b8:	2100      	movs	r1, #0
 80225ba:	4620      	mov	r0, r4
 80225bc:	f7fc fa72 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 80225c0:	4b4f      	ldr	r3, [pc, #316]	; (8022700 <calendar_init+0x904>)
 80225c2:	681b      	ldr	r3, [r3, #0]
 80225c4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80225c8:	2000      	movs	r0, #0
 80225ca:	f7f7 ff3e 	bl	801a44a <lv_disp_get_size_category>
 80225ce:	4603      	mov	r3, r0
 80225d0:	2b01      	cmp	r3, #1
 80225d2:	d81e      	bhi.n	8022612 <calendar_init+0x816>
 80225d4:	2000      	movs	r0, #0
 80225d6:	f7f7 ff1f 	bl	801a418 <lv_disp_get_dpi>
 80225da:	4603      	mov	r3, r0
 80225dc:	461a      	mov	r2, r3
 80225de:	4613      	mov	r3, r2
 80225e0:	011b      	lsls	r3, r3, #4
 80225e2:	1a9b      	subs	r3, r3, r2
 80225e4:	3350      	adds	r3, #80	; 0x50
 80225e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80225ea:	db10      	blt.n	802260e <calendar_init+0x812>
 80225ec:	2000      	movs	r0, #0
 80225ee:	f7f7 ff13 	bl	801a418 <lv_disp_get_dpi>
 80225f2:	4603      	mov	r3, r0
 80225f4:	461a      	mov	r2, r3
 80225f6:	4613      	mov	r3, r2
 80225f8:	011b      	lsls	r3, r3, #4
 80225fa:	1a9b      	subs	r3, r3, r2
 80225fc:	3350      	adds	r3, #80	; 0x50
 80225fe:	4a42      	ldr	r2, [pc, #264]	; (8022708 <calendar_init+0x90c>)
 8022600:	fb82 1203 	smull	r1, r2, r2, r3
 8022604:	1192      	asrs	r2, r2, #6
 8022606:	17db      	asrs	r3, r3, #31
 8022608:	1ad3      	subs	r3, r2, r3
 802260a:	b21b      	sxth	r3, r3
 802260c:	e021      	b.n	8022652 <calendar_init+0x856>
 802260e:	2301      	movs	r3, #1
 8022610:	e01f      	b.n	8022652 <calendar_init+0x856>
 8022612:	2000      	movs	r0, #0
 8022614:	f7f7 ff00 	bl	801a418 <lv_disp_get_dpi>
 8022618:	4603      	mov	r3, r0
 802261a:	461a      	mov	r2, r3
 802261c:	4613      	mov	r3, r2
 802261e:	011b      	lsls	r3, r3, #4
 8022620:	1a9b      	subs	r3, r3, r2
 8022622:	005b      	lsls	r3, r3, #1
 8022624:	3350      	adds	r3, #80	; 0x50
 8022626:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802262a:	db11      	blt.n	8022650 <calendar_init+0x854>
 802262c:	2000      	movs	r0, #0
 802262e:	f7f7 fef3 	bl	801a418 <lv_disp_get_dpi>
 8022632:	4603      	mov	r3, r0
 8022634:	461a      	mov	r2, r3
 8022636:	4613      	mov	r3, r2
 8022638:	011b      	lsls	r3, r3, #4
 802263a:	1a9b      	subs	r3, r3, r2
 802263c:	005b      	lsls	r3, r3, #1
 802263e:	3350      	adds	r3, #80	; 0x50
 8022640:	4a31      	ldr	r2, [pc, #196]	; (8022708 <calendar_init+0x90c>)
 8022642:	fb82 1203 	smull	r1, r2, r2, r3
 8022646:	1192      	asrs	r2, r2, #6
 8022648:	17db      	asrs	r3, r3, #31
 802264a:	1ad3      	subs	r3, r2, r3
 802264c:	b21b      	sxth	r3, r3
 802264e:	e000      	b.n	8022652 <calendar_init+0x856>
 8022650:	2301      	movs	r3, #1
 8022652:	461a      	mov	r2, r3
 8022654:	2100      	movs	r1, #0
 8022656:	4620      	mov	r0, r4
 8022658:	f7fc fa3d 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 802265c:	4b28      	ldr	r3, [pc, #160]	; (8022700 <calendar_init+0x904>)
 802265e:	681b      	ldr	r3, [r3, #0]
 8022660:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8022664:	2000      	movs	r0, #0
 8022666:	f7f7 fef0 	bl	801a44a <lv_disp_get_size_category>
 802266a:	4603      	mov	r3, r0
 802266c:	2b01      	cmp	r3, #1
 802266e:	d81e      	bhi.n	80226ae <calendar_init+0x8b2>
 8022670:	2000      	movs	r0, #0
 8022672:	f7f7 fed1 	bl	801a418 <lv_disp_get_dpi>
 8022676:	4603      	mov	r3, r0
 8022678:	461a      	mov	r2, r3
 802267a:	4613      	mov	r3, r2
 802267c:	011b      	lsls	r3, r3, #4
 802267e:	1a9b      	subs	r3, r3, r2
 8022680:	3350      	adds	r3, #80	; 0x50
 8022682:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022686:	db10      	blt.n	80226aa <calendar_init+0x8ae>
 8022688:	2000      	movs	r0, #0
 802268a:	f7f7 fec5 	bl	801a418 <lv_disp_get_dpi>
 802268e:	4603      	mov	r3, r0
 8022690:	461a      	mov	r2, r3
 8022692:	4613      	mov	r3, r2
 8022694:	011b      	lsls	r3, r3, #4
 8022696:	1a9b      	subs	r3, r3, r2
 8022698:	3350      	adds	r3, #80	; 0x50
 802269a:	4a1b      	ldr	r2, [pc, #108]	; (8022708 <calendar_init+0x90c>)
 802269c:	fb82 1203 	smull	r1, r2, r2, r3
 80226a0:	1192      	asrs	r2, r2, #6
 80226a2:	17db      	asrs	r3, r3, #31
 80226a4:	1ad3      	subs	r3, r2, r3
 80226a6:	b21b      	sxth	r3, r3
 80226a8:	e021      	b.n	80226ee <calendar_init+0x8f2>
 80226aa:	2301      	movs	r3, #1
 80226ac:	e01f      	b.n	80226ee <calendar_init+0x8f2>
 80226ae:	2000      	movs	r0, #0
 80226b0:	f7f7 feb2 	bl	801a418 <lv_disp_get_dpi>
 80226b4:	4603      	mov	r3, r0
 80226b6:	461a      	mov	r2, r3
 80226b8:	4613      	mov	r3, r2
 80226ba:	011b      	lsls	r3, r3, #4
 80226bc:	1a9b      	subs	r3, r3, r2
 80226be:	005b      	lsls	r3, r3, #1
 80226c0:	3350      	adds	r3, #80	; 0x50
 80226c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80226c6:	db11      	blt.n	80226ec <calendar_init+0x8f0>
 80226c8:	2000      	movs	r0, #0
 80226ca:	f7f7 fea5 	bl	801a418 <lv_disp_get_dpi>
 80226ce:	4603      	mov	r3, r0
 80226d0:	461a      	mov	r2, r3
 80226d2:	4613      	mov	r3, r2
 80226d4:	011b      	lsls	r3, r3, #4
 80226d6:	1a9b      	subs	r3, r3, r2
 80226d8:	005b      	lsls	r3, r3, #1
 80226da:	3350      	adds	r3, #80	; 0x50
 80226dc:	4a0a      	ldr	r2, [pc, #40]	; (8022708 <calendar_init+0x90c>)
 80226de:	fb82 1203 	smull	r1, r2, r2, r3
 80226e2:	1192      	asrs	r2, r2, #6
 80226e4:	17db      	asrs	r3, r3, #31
 80226e6:	1ad3      	subs	r3, r2, r3
 80226e8:	b21b      	sxth	r3, r3
 80226ea:	e000      	b.n	80226ee <calendar_init+0x8f2>
 80226ec:	2301      	movs	r3, #1
 80226ee:	461a      	mov	r2, r3
 80226f0:	2100      	movs	r1, #0
 80226f2:	4620      	mov	r0, r4
 80226f4:	f7fc f9bd 	bl	801ea72 <lv_style_set_pad_bottom>
#endif
}
 80226f8:	bf00      	nop
 80226fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226fe:	bf00      	nop
 8022700:	200200d4 	.word	0x200200d4
 8022704:	200200a8 	.word	0x200200a8
 8022708:	66666667 	.word	0x66666667

0802270c <cpicker_init>:

static void cpicker_init(void)
{
 802270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802270e:	af00      	add	r7, sp, #0
#if LV_USE_CPICKER
    style_init_reset(&styles->cpicker_bg);
 8022710:	4bc5      	ldr	r3, [pc, #788]	; (8022a28 <cpicker_init+0x31c>)
 8022712:	681b      	ldr	r3, [r3, #0]
 8022714:	333c      	adds	r3, #60	; 0x3c
 8022716:	4618      	mov	r0, r3
 8022718:	f002 fea6 	bl	8025468 <style_init_reset>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 802271c:	4bc2      	ldr	r3, [pc, #776]	; (8022a28 <cpicker_init+0x31c>)
 802271e:	681b      	ldr	r3, [r3, #0]
 8022720:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 8022724:	2000      	movs	r0, #0
 8022726:	f7f7 fe77 	bl	801a418 <lv_disp_get_dpi>
 802272a:	4603      	mov	r3, r0
 802272c:	461a      	mov	r2, r3
 802272e:	4613      	mov	r3, r2
 8022730:	011b      	lsls	r3, r3, #4
 8022732:	1a9b      	subs	r3, r3, r2
 8022734:	005b      	lsls	r3, r3, #1
 8022736:	3350      	adds	r3, #80	; 0x50
 8022738:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802273c:	db11      	blt.n	8022762 <cpicker_init+0x56>
 802273e:	2000      	movs	r0, #0
 8022740:	f7f7 fe6a 	bl	801a418 <lv_disp_get_dpi>
 8022744:	4603      	mov	r3, r0
 8022746:	461a      	mov	r2, r3
 8022748:	4613      	mov	r3, r2
 802274a:	011b      	lsls	r3, r3, #4
 802274c:	1a9b      	subs	r3, r3, r2
 802274e:	005b      	lsls	r3, r3, #1
 8022750:	3350      	adds	r3, #80	; 0x50
 8022752:	4ab6      	ldr	r2, [pc, #728]	; (8022a2c <cpicker_init+0x320>)
 8022754:	fb82 1203 	smull	r1, r2, r2, r3
 8022758:	1192      	asrs	r2, r2, #6
 802275a:	17db      	asrs	r3, r3, #31
 802275c:	1ad3      	subs	r3, r2, r3
 802275e:	b21b      	sxth	r3, r3
 8022760:	e000      	b.n	8022764 <cpicker_init+0x58>
 8022762:	2301      	movs	r3, #1
 8022764:	461a      	mov	r2, r3
 8022766:	2100      	movs	r1, #0
 8022768:	4630      	mov	r0, r6
 802276a:	f7fc fdc1 	bl	801f2f0 <lv_style_set_scale_width>
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 802276e:	4bae      	ldr	r3, [pc, #696]	; (8022a28 <cpicker_init+0x31c>)
 8022770:	681b      	ldr	r3, [r3, #0]
 8022772:	333c      	adds	r3, #60	; 0x3c
 8022774:	22ff      	movs	r2, #255	; 0xff
 8022776:	2100      	movs	r1, #0
 8022778:	4618      	mov	r0, r3
 802277a:	f7fc fa59 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
 802277e:	4baa      	ldr	r3, [pc, #680]	; (8022a28 <cpicker_init+0x31c>)
 8022780:	681b      	ldr	r3, [r3, #0]
 8022782:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 8022786:	4baa      	ldr	r3, [pc, #680]	; (8022a30 <cpicker_init+0x324>)
 8022788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802278a:	f003 0302 	and.w	r3, r3, #2
 802278e:	2b00      	cmp	r3, #0
 8022790:	d004      	beq.n	802279c <cpicker_init+0x90>
 8022792:	48a8      	ldr	r0, [pc, #672]	; (8022a34 <cpicker_init+0x328>)
 8022794:	f7fc f8aa 	bl	801e8ec <lv_color_hex>
 8022798:	4603      	mov	r3, r0
 802279a:	e003      	b.n	80227a4 <cpicker_init+0x98>
 802279c:	48a6      	ldr	r0, [pc, #664]	; (8022a38 <cpicker_init+0x32c>)
 802279e:	f7fc f8a5 	bl	801e8ec <lv_color_hex>
 80227a2:	4603      	mov	r3, r0
 80227a4:	461a      	mov	r2, r3
 80227a6:	2100      	movs	r1, #0
 80227a8:	4630      	mov	r0, r6
 80227aa:	f7fc fa2a 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
 80227ae:	4b9e      	ldr	r3, [pc, #632]	; (8022a28 <cpicker_init+0x31c>)
 80227b0:	681b      	ldr	r3, [r3, #0]
 80227b2:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 80227b6:	2000      	movs	r0, #0
 80227b8:	f7f7 fe2e 	bl	801a418 <lv_disp_get_dpi>
 80227bc:	4603      	mov	r3, r0
 80227be:	461a      	mov	r2, r3
 80227c0:	4613      	mov	r3, r2
 80227c2:	009b      	lsls	r3, r3, #2
 80227c4:	4413      	add	r3, r2
 80227c6:	009b      	lsls	r3, r3, #2
 80227c8:	3350      	adds	r3, #80	; 0x50
 80227ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80227ce:	db11      	blt.n	80227f4 <cpicker_init+0xe8>
 80227d0:	2000      	movs	r0, #0
 80227d2:	f7f7 fe21 	bl	801a418 <lv_disp_get_dpi>
 80227d6:	4603      	mov	r3, r0
 80227d8:	461a      	mov	r2, r3
 80227da:	4613      	mov	r3, r2
 80227dc:	009b      	lsls	r3, r3, #2
 80227de:	4413      	add	r3, r2
 80227e0:	009b      	lsls	r3, r3, #2
 80227e2:	3350      	adds	r3, #80	; 0x50
 80227e4:	4a91      	ldr	r2, [pc, #580]	; (8022a2c <cpicker_init+0x320>)
 80227e6:	fb82 1203 	smull	r1, r2, r2, r3
 80227ea:	1192      	asrs	r2, r2, #6
 80227ec:	17db      	asrs	r3, r3, #31
 80227ee:	1ad3      	subs	r3, r2, r3
 80227f0:	b21b      	sxth	r3, r3
 80227f2:	e000      	b.n	80227f6 <cpicker_init+0xea>
 80227f4:	2301      	movs	r3, #1
 80227f6:	461a      	mov	r2, r3
 80227f8:	2100      	movs	r1, #0
 80227fa:	4630      	mov	r0, r6
 80227fc:	f7fc f984 	bl	801eb08 <lv_style_set_pad_inner>
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8022800:	4b89      	ldr	r3, [pc, #548]	; (8022a28 <cpicker_init+0x31c>)
 8022802:	681b      	ldr	r3, [r3, #0]
 8022804:	333c      	adds	r3, #60	; 0x3c
 8022806:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802280a:	2100      	movs	r1, #0
 802280c:	4618      	mov	r0, r3
 802280e:	f7fc f8b3 	bl	801e978 <lv_style_set_radius>

    style_init_reset(&styles->cpicker_indic);
 8022812:	4b85      	ldr	r3, [pc, #532]	; (8022a28 <cpicker_init+0x31c>)
 8022814:	681b      	ldr	r3, [r3, #0]
 8022816:	3340      	adds	r3, #64	; 0x40
 8022818:	4618      	mov	r0, r3
 802281a:	f002 fe25 	bl	8025468 <style_init_reset>
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 802281e:	4b82      	ldr	r3, [pc, #520]	; (8022a28 <cpicker_init+0x31c>)
 8022820:	681b      	ldr	r3, [r3, #0]
 8022822:	3340      	adds	r3, #64	; 0x40
 8022824:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8022828:	2100      	movs	r1, #0
 802282a:	4618      	mov	r0, r3
 802282c:	f7fc f8a4 	bl	801e978 <lv_style_set_radius>
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8022830:	4b7d      	ldr	r3, [pc, #500]	; (8022a28 <cpicker_init+0x31c>)
 8022832:	681b      	ldr	r3, [r3, #0]
 8022834:	3340      	adds	r3, #64	; 0x40
 8022836:	462a      	mov	r2, r5
 8022838:	f042 05ff 	orr.w	r5, r2, #255	; 0xff
 802283c:	462a      	mov	r2, r5
 802283e:	f442 457f 	orr.w	r5, r2, #65280	; 0xff00
 8022842:	462a      	mov	r2, r5
 8022844:	f442 057f 	orr.w	r5, r2, #16711680	; 0xff0000
 8022848:	462a      	mov	r2, r5
 802284a:	f042 457f 	orr.w	r5, r2, #4278190080	; 0xff000000
 802284e:	462a      	mov	r2, r5
 8022850:	2100      	movs	r1, #0
 8022852:	4618      	mov	r0, r3
 8022854:	f7fc f9d5 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 8022858:	4b73      	ldr	r3, [pc, #460]	; (8022a28 <cpicker_init+0x31c>)
 802285a:	681b      	ldr	r3, [r3, #0]
 802285c:	3340      	adds	r3, #64	; 0x40
 802285e:	22ff      	movs	r2, #255	; 0xff
 8022860:	2100      	movs	r1, #0
 8022862:	4618      	mov	r0, r3
 8022864:	f7fc f9e4 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
 8022868:	4b6f      	ldr	r3, [pc, #444]	; (8022a28 <cpicker_init+0x31c>)
 802286a:	681b      	ldr	r3, [r3, #0]
 802286c:	3340      	adds	r3, #64	; 0x40
 802286e:	2202      	movs	r2, #2
 8022870:	2100      	movs	r1, #0
 8022872:	4618      	mov	r0, r3
 8022874:	f7fc f9f4 	bl	801ec60 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
 8022878:	4b6b      	ldr	r3, [pc, #428]	; (8022a28 <cpicker_init+0x31c>)
 802287a:	681b      	ldr	r3, [r3, #0]
 802287c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8022880:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8022884:	f363 0407 	bfi	r4, r3, #0, #8
 8022888:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802288c:	f363 240f 	bfi	r4, r3, #8, #8
 8022890:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8022894:	f363 4417 	bfi	r4, r3, #16, #8
 8022898:	4623      	mov	r3, r4
 802289a:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 802289e:	4622      	mov	r2, r4
 80228a0:	2100      	movs	r1, #0
 80228a2:	f7fc fa28 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
 80228a6:	4b60      	ldr	r3, [pc, #384]	; (8022a28 <cpicker_init+0x31c>)
 80228a8:	681b      	ldr	r3, [r3, #0]
 80228aa:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80228ae:	4b60      	ldr	r3, [pc, #384]	; (8022a30 <cpicker_init+0x324>)
 80228b0:	68da      	ldr	r2, [r3, #12]
 80228b2:	2102      	movs	r1, #2
 80228b4:	f7fc fa1f 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
 80228b8:	4b5b      	ldr	r3, [pc, #364]	; (8022a28 <cpicker_init+0x31c>)
 80228ba:	681b      	ldr	r3, [r3, #0]
 80228bc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80228c0:	4b5b      	ldr	r3, [pc, #364]	; (8022a30 <cpicker_init+0x324>)
 80228c2:	691a      	ldr	r2, [r3, #16]
 80228c4:	2104      	movs	r1, #4
 80228c6:	f7fc fa16 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 80228ca:	4b57      	ldr	r3, [pc, #348]	; (8022a28 <cpicker_init+0x31c>)
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80228d2:	2000      	movs	r0, #0
 80228d4:	f7f7 fda0 	bl	801a418 <lv_disp_get_dpi>
 80228d8:	4603      	mov	r3, r0
 80228da:	461a      	mov	r2, r3
 80228dc:	4613      	mov	r3, r2
 80228de:	005b      	lsls	r3, r3, #1
 80228e0:	4413      	add	r3, r2
 80228e2:	009b      	lsls	r3, r3, #2
 80228e4:	4413      	add	r3, r2
 80228e6:	3350      	adds	r3, #80	; 0x50
 80228e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80228ec:	db12      	blt.n	8022914 <cpicker_init+0x208>
 80228ee:	2000      	movs	r0, #0
 80228f0:	f7f7 fd92 	bl	801a418 <lv_disp_get_dpi>
 80228f4:	4603      	mov	r3, r0
 80228f6:	461a      	mov	r2, r3
 80228f8:	4613      	mov	r3, r2
 80228fa:	005b      	lsls	r3, r3, #1
 80228fc:	4413      	add	r3, r2
 80228fe:	009b      	lsls	r3, r3, #2
 8022900:	4413      	add	r3, r2
 8022902:	3350      	adds	r3, #80	; 0x50
 8022904:	4a49      	ldr	r2, [pc, #292]	; (8022a2c <cpicker_init+0x320>)
 8022906:	fb82 1203 	smull	r1, r2, r2, r3
 802290a:	1192      	asrs	r2, r2, #6
 802290c:	17db      	asrs	r3, r3, #31
 802290e:	1ad3      	subs	r3, r2, r3
 8022910:	b21b      	sxth	r3, r3
 8022912:	e000      	b.n	8022916 <cpicker_init+0x20a>
 8022914:	2301      	movs	r3, #1
 8022916:	461a      	mov	r2, r3
 8022918:	2100      	movs	r1, #0
 802291a:	4620      	mov	r0, r4
 802291c:	f7fc f8c2 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8022920:	4b41      	ldr	r3, [pc, #260]	; (8022a28 <cpicker_init+0x31c>)
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8022928:	2000      	movs	r0, #0
 802292a:	f7f7 fd75 	bl	801a418 <lv_disp_get_dpi>
 802292e:	4603      	mov	r3, r0
 8022930:	461a      	mov	r2, r3
 8022932:	4613      	mov	r3, r2
 8022934:	005b      	lsls	r3, r3, #1
 8022936:	4413      	add	r3, r2
 8022938:	009b      	lsls	r3, r3, #2
 802293a:	4413      	add	r3, r2
 802293c:	3350      	adds	r3, #80	; 0x50
 802293e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022942:	db12      	blt.n	802296a <cpicker_init+0x25e>
 8022944:	2000      	movs	r0, #0
 8022946:	f7f7 fd67 	bl	801a418 <lv_disp_get_dpi>
 802294a:	4603      	mov	r3, r0
 802294c:	461a      	mov	r2, r3
 802294e:	4613      	mov	r3, r2
 8022950:	005b      	lsls	r3, r3, #1
 8022952:	4413      	add	r3, r2
 8022954:	009b      	lsls	r3, r3, #2
 8022956:	4413      	add	r3, r2
 8022958:	3350      	adds	r3, #80	; 0x50
 802295a:	4a34      	ldr	r2, [pc, #208]	; (8022a2c <cpicker_init+0x320>)
 802295c:	fb82 1203 	smull	r1, r2, r2, r3
 8022960:	1192      	asrs	r2, r2, #6
 8022962:	17db      	asrs	r3, r3, #31
 8022964:	1ad3      	subs	r3, r2, r3
 8022966:	b21b      	sxth	r3, r3
 8022968:	e000      	b.n	802296c <cpicker_init+0x260>
 802296a:	2301      	movs	r3, #1
 802296c:	461a      	mov	r2, r3
 802296e:	2100      	movs	r1, #0
 8022970:	4620      	mov	r0, r4
 8022972:	f7fc f8b0 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8022976:	4b2c      	ldr	r3, [pc, #176]	; (8022a28 <cpicker_init+0x31c>)
 8022978:	681b      	ldr	r3, [r3, #0]
 802297a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 802297e:	2000      	movs	r0, #0
 8022980:	f7f7 fd4a 	bl	801a418 <lv_disp_get_dpi>
 8022984:	4603      	mov	r3, r0
 8022986:	461a      	mov	r2, r3
 8022988:	4613      	mov	r3, r2
 802298a:	005b      	lsls	r3, r3, #1
 802298c:	4413      	add	r3, r2
 802298e:	009b      	lsls	r3, r3, #2
 8022990:	4413      	add	r3, r2
 8022992:	3350      	adds	r3, #80	; 0x50
 8022994:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022998:	db12      	blt.n	80229c0 <cpicker_init+0x2b4>
 802299a:	2000      	movs	r0, #0
 802299c:	f7f7 fd3c 	bl	801a418 <lv_disp_get_dpi>
 80229a0:	4603      	mov	r3, r0
 80229a2:	461a      	mov	r2, r3
 80229a4:	4613      	mov	r3, r2
 80229a6:	005b      	lsls	r3, r3, #1
 80229a8:	4413      	add	r3, r2
 80229aa:	009b      	lsls	r3, r3, #2
 80229ac:	4413      	add	r3, r2
 80229ae:	3350      	adds	r3, #80	; 0x50
 80229b0:	4a1e      	ldr	r2, [pc, #120]	; (8022a2c <cpicker_init+0x320>)
 80229b2:	fb82 1203 	smull	r1, r2, r2, r3
 80229b6:	1192      	asrs	r2, r2, #6
 80229b8:	17db      	asrs	r3, r3, #31
 80229ba:	1ad3      	subs	r3, r2, r3
 80229bc:	b21b      	sxth	r3, r3
 80229be:	e000      	b.n	80229c2 <cpicker_init+0x2b6>
 80229c0:	2301      	movs	r3, #1
 80229c2:	461a      	mov	r2, r3
 80229c4:	2100      	movs	r1, #0
 80229c6:	4620      	mov	r0, r4
 80229c8:	f7fc f83a 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 80229cc:	4b16      	ldr	r3, [pc, #88]	; (8022a28 <cpicker_init+0x31c>)
 80229ce:	681b      	ldr	r3, [r3, #0]
 80229d0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80229d4:	2000      	movs	r0, #0
 80229d6:	f7f7 fd1f 	bl	801a418 <lv_disp_get_dpi>
 80229da:	4603      	mov	r3, r0
 80229dc:	461a      	mov	r2, r3
 80229de:	4613      	mov	r3, r2
 80229e0:	005b      	lsls	r3, r3, #1
 80229e2:	4413      	add	r3, r2
 80229e4:	009b      	lsls	r3, r3, #2
 80229e6:	4413      	add	r3, r2
 80229e8:	3350      	adds	r3, #80	; 0x50
 80229ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80229ee:	db12      	blt.n	8022a16 <cpicker_init+0x30a>
 80229f0:	2000      	movs	r0, #0
 80229f2:	f7f7 fd11 	bl	801a418 <lv_disp_get_dpi>
 80229f6:	4603      	mov	r3, r0
 80229f8:	461a      	mov	r2, r3
 80229fa:	4613      	mov	r3, r2
 80229fc:	005b      	lsls	r3, r3, #1
 80229fe:	4413      	add	r3, r2
 8022a00:	009b      	lsls	r3, r3, #2
 8022a02:	4413      	add	r3, r2
 8022a04:	3350      	adds	r3, #80	; 0x50
 8022a06:	4a09      	ldr	r2, [pc, #36]	; (8022a2c <cpicker_init+0x320>)
 8022a08:	fb82 1203 	smull	r1, r2, r2, r3
 8022a0c:	1192      	asrs	r2, r2, #6
 8022a0e:	17db      	asrs	r3, r3, #31
 8022a10:	1ad3      	subs	r3, r2, r3
 8022a12:	b21b      	sxth	r3, r3
 8022a14:	e000      	b.n	8022a18 <cpicker_init+0x30c>
 8022a16:	2301      	movs	r3, #1
 8022a18:	461a      	mov	r2, r3
 8022a1a:	2100      	movs	r1, #0
 8022a1c:	4620      	mov	r0, r4
 8022a1e:	f7fc f828 	bl	801ea72 <lv_style_set_pad_bottom>
#endif
}
 8022a22:	bf00      	nop
 8022a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a26:	bf00      	nop
 8022a28:	200200d4 	.word	0x200200d4
 8022a2c:	66666667 	.word	0x66666667
 8022a30:	200200a8 	.word	0x200200a8
 8022a34:	00eaeff3 	.word	0x00eaeff3
 8022a38:	00444b5a 	.word	0x00444b5a

08022a3c <checkbox_init>:

static void checkbox_init(void)
{
 8022a3c:	b5b0      	push	{r4, r5, r7, lr}
 8022a3e:	af00      	add	r7, sp, #0
#if LV_USE_CHECKBOX != 0
    style_init_reset(&styles->cb_bg);
 8022a40:	4bd3      	ldr	r3, [pc, #844]	; (8022d90 <checkbox_init+0x354>)
 8022a42:	681b      	ldr	r3, [r3, #0]
 8022a44:	3350      	adds	r3, #80	; 0x50
 8022a46:	4618      	mov	r0, r3
 8022a48:	f002 fd0e 	bl	8025468 <style_init_reset>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 8022a4c:	4bd0      	ldr	r3, [pc, #832]	; (8022d90 <checkbox_init+0x354>)
 8022a4e:	681b      	ldr	r3, [r3, #0]
 8022a50:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8022a54:	2000      	movs	r0, #0
 8022a56:	f7f7 fcdf 	bl	801a418 <lv_disp_get_dpi>
 8022a5a:	4603      	mov	r3, r0
 8022a5c:	3314      	adds	r3, #20
 8022a5e:	009b      	lsls	r3, r3, #2
 8022a60:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022a64:	db0d      	blt.n	8022a82 <checkbox_init+0x46>
 8022a66:	2000      	movs	r0, #0
 8022a68:	f7f7 fcd6 	bl	801a418 <lv_disp_get_dpi>
 8022a6c:	4603      	mov	r3, r0
 8022a6e:	3314      	adds	r3, #20
 8022a70:	009b      	lsls	r3, r3, #2
 8022a72:	4ac8      	ldr	r2, [pc, #800]	; (8022d94 <checkbox_init+0x358>)
 8022a74:	fb82 1203 	smull	r1, r2, r2, r3
 8022a78:	1192      	asrs	r2, r2, #6
 8022a7a:	17db      	asrs	r3, r3, #31
 8022a7c:	1ad3      	subs	r3, r2, r3
 8022a7e:	b21b      	sxth	r3, r3
 8022a80:	e000      	b.n	8022a84 <checkbox_init+0x48>
 8022a82:	2301      	movs	r3, #1
 8022a84:	461a      	mov	r2, r3
 8022a86:	2100      	movs	r1, #0
 8022a88:	4628      	mov	r0, r5
 8022a8a:	f7fb ff75 	bl	801e978 <lv_style_set_radius>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8022a8e:	4bc0      	ldr	r3, [pc, #768]	; (8022d90 <checkbox_init+0x354>)
 8022a90:	681b      	ldr	r3, [r3, #0]
 8022a92:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8022a96:	2000      	movs	r0, #0
 8022a98:	f7f7 fcbe 	bl	801a418 <lv_disp_get_dpi>
 8022a9c:	4603      	mov	r3, r0
 8022a9e:	461a      	mov	r2, r3
 8022aa0:	4613      	mov	r3, r2
 8022aa2:	009b      	lsls	r3, r3, #2
 8022aa4:	4413      	add	r3, r2
 8022aa6:	005b      	lsls	r3, r3, #1
 8022aa8:	3350      	adds	r3, #80	; 0x50
 8022aaa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022aae:	db11      	blt.n	8022ad4 <checkbox_init+0x98>
 8022ab0:	2000      	movs	r0, #0
 8022ab2:	f7f7 fcb1 	bl	801a418 <lv_disp_get_dpi>
 8022ab6:	4603      	mov	r3, r0
 8022ab8:	461a      	mov	r2, r3
 8022aba:	4613      	mov	r3, r2
 8022abc:	009b      	lsls	r3, r3, #2
 8022abe:	4413      	add	r3, r2
 8022ac0:	005b      	lsls	r3, r3, #1
 8022ac2:	3350      	adds	r3, #80	; 0x50
 8022ac4:	4ab3      	ldr	r2, [pc, #716]	; (8022d94 <checkbox_init+0x358>)
 8022ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8022aca:	1192      	asrs	r2, r2, #6
 8022acc:	17db      	asrs	r3, r3, #31
 8022ace:	1ad3      	subs	r3, r2, r3
 8022ad0:	b21b      	sxth	r3, r3
 8022ad2:	e000      	b.n	8022ad6 <checkbox_init+0x9a>
 8022ad4:	2301      	movs	r3, #1
 8022ad6:	461a      	mov	r2, r3
 8022ad8:	2100      	movs	r1, #0
 8022ada:	4628      	mov	r0, r5
 8022adc:	f7fc f814 	bl	801eb08 <lv_style_set_pad_inner>
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
 8022ae0:	4bab      	ldr	r3, [pc, #684]	; (8022d90 <checkbox_init+0x354>)
 8022ae2:	681b      	ldr	r3, [r3, #0]
 8022ae4:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8022ae8:	4bab      	ldr	r3, [pc, #684]	; (8022d98 <checkbox_init+0x35c>)
 8022aea:	68da      	ldr	r2, [r3, #12]
 8022aec:	2100      	movs	r1, #0
 8022aee:	f7fc f963 	bl	801edb8 <lv_style_set_outline_color>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8022af2:	4ba7      	ldr	r3, [pc, #668]	; (8022d90 <checkbox_init+0x354>)
 8022af4:	681b      	ldr	r3, [r3, #0]
 8022af6:	3350      	adds	r3, #80	; 0x50
 8022af8:	2200      	movs	r2, #0
 8022afa:	2100      	movs	r1, #0
 8022afc:	4618      	mov	r0, r3
 8022afe:	f7fc f972 	bl	801ede6 <lv_style_set_outline_opa>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
 8022b02:	4ba3      	ldr	r3, [pc, #652]	; (8022d90 <checkbox_init+0x354>)
 8022b04:	681b      	ldr	r3, [r3, #0]
 8022b06:	3350      	adds	r3, #80	; 0x50
 8022b08:	227f      	movs	r2, #127	; 0x7f
 8022b0a:	2102      	movs	r1, #2
 8022b0c:	4618      	mov	r0, r3
 8022b0e:	f7fc f96a 	bl	801ede6 <lv_style_set_outline_opa>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 8022b12:	4b9f      	ldr	r3, [pc, #636]	; (8022d90 <checkbox_init+0x354>)
 8022b14:	681b      	ldr	r3, [r3, #0]
 8022b16:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8022b1a:	4b9f      	ldr	r3, [pc, #636]	; (8022d98 <checkbox_init+0x35c>)
 8022b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022b1e:	f003 0320 	and.w	r3, r3, #32
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	d118      	bne.n	8022b58 <checkbox_init+0x11c>
 8022b26:	2000      	movs	r0, #0
 8022b28:	f7f7 fc76 	bl	801a418 <lv_disp_get_dpi>
 8022b2c:	4603      	mov	r3, r0
 8022b2e:	3328      	adds	r3, #40	; 0x28
 8022b30:	005b      	lsls	r3, r3, #1
 8022b32:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022b36:	db0d      	blt.n	8022b54 <checkbox_init+0x118>
 8022b38:	2000      	movs	r0, #0
 8022b3a:	f7f7 fc6d 	bl	801a418 <lv_disp_get_dpi>
 8022b3e:	4603      	mov	r3, r0
 8022b40:	3328      	adds	r3, #40	; 0x28
 8022b42:	005b      	lsls	r3, r3, #1
 8022b44:	4a93      	ldr	r2, [pc, #588]	; (8022d94 <checkbox_init+0x358>)
 8022b46:	fb82 1203 	smull	r1, r2, r2, r3
 8022b4a:	1192      	asrs	r2, r2, #6
 8022b4c:	17db      	asrs	r3, r3, #31
 8022b4e:	1ad3      	subs	r3, r2, r3
 8022b50:	b21b      	sxth	r3, r3
 8022b52:	e002      	b.n	8022b5a <checkbox_init+0x11e>
 8022b54:	2301      	movs	r3, #1
 8022b56:	e000      	b.n	8022b5a <checkbox_init+0x11e>
 8022b58:	2300      	movs	r3, #0
 8022b5a:	461a      	mov	r2, r3
 8022b5c:	2100      	movs	r1, #0
 8022b5e:	4628      	mov	r0, r5
 8022b60:	f7fc f8f8 	bl	801ed54 <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8022b64:	4b8a      	ldr	r3, [pc, #552]	; (8022d90 <checkbox_init+0x354>)
 8022b66:	681b      	ldr	r3, [r3, #0]
 8022b68:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8022b6c:	2000      	movs	r0, #0
 8022b6e:	f7f7 fc53 	bl	801a418 <lv_disp_get_dpi>
 8022b72:	4603      	mov	r3, r0
 8022b74:	461a      	mov	r2, r3
 8022b76:	4613      	mov	r3, r2
 8022b78:	009b      	lsls	r3, r3, #2
 8022b7a:	4413      	add	r3, r2
 8022b7c:	005b      	lsls	r3, r3, #1
 8022b7e:	3350      	adds	r3, #80	; 0x50
 8022b80:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022b84:	db11      	blt.n	8022baa <checkbox_init+0x16e>
 8022b86:	2000      	movs	r0, #0
 8022b88:	f7f7 fc46 	bl	801a418 <lv_disp_get_dpi>
 8022b8c:	4603      	mov	r3, r0
 8022b8e:	461a      	mov	r2, r3
 8022b90:	4613      	mov	r3, r2
 8022b92:	009b      	lsls	r3, r3, #2
 8022b94:	4413      	add	r3, r2
 8022b96:	005b      	lsls	r3, r3, #1
 8022b98:	3350      	adds	r3, #80	; 0x50
 8022b9a:	4a7e      	ldr	r2, [pc, #504]	; (8022d94 <checkbox_init+0x358>)
 8022b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8022ba0:	1192      	asrs	r2, r2, #6
 8022ba2:	17db      	asrs	r3, r3, #31
 8022ba4:	1ad3      	subs	r3, r2, r3
 8022ba6:	b21b      	sxth	r3, r3
 8022ba8:	e000      	b.n	8022bac <checkbox_init+0x170>
 8022baa:	2301      	movs	r3, #1
 8022bac:	461a      	mov	r2, r3
 8022bae:	2100      	movs	r1, #0
 8022bb0:	4628      	mov	r0, r5
 8022bb2:	f7fc f8e8 	bl	801ed86 <lv_style_set_outline_pad>
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8022bb6:	4b76      	ldr	r3, [pc, #472]	; (8022d90 <checkbox_init+0x354>)
 8022bb8:	681b      	ldr	r3, [r3, #0]
 8022bba:	3350      	adds	r3, #80	; 0x50
 8022bbc:	2200      	movs	r2, #0
 8022bbe:	2100      	movs	r1, #0
 8022bc0:	4618      	mov	r0, r3
 8022bc2:	f7fc faff 	bl	801f1c4 <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 8022bc6:	4b72      	ldr	r3, [pc, #456]	; (8022d90 <checkbox_init+0x354>)
 8022bc8:	681b      	ldr	r3, [r3, #0]
 8022bca:	3350      	adds	r3, #80	; 0x50
 8022bcc:	224c      	movs	r2, #76	; 0x4c
 8022bce:	2100      	movs	r1, #0
 8022bd0:	4618      	mov	r0, r3
 8022bd2:	f7fc fb74 	bl	801f2be <lv_style_set_transition_prop_6>

    style_init_reset(&styles->cb_bullet);
 8022bd6:	4b6e      	ldr	r3, [pc, #440]	; (8022d90 <checkbox_init+0x354>)
 8022bd8:	681b      	ldr	r3, [r3, #0]
 8022bda:	3354      	adds	r3, #84	; 0x54
 8022bdc:	4618      	mov	r0, r3
 8022bde:	f002 fc43 	bl	8025468 <style_init_reset>
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
 8022be2:	4b6b      	ldr	r3, [pc, #428]	; (8022d90 <checkbox_init+0x354>)
 8022be4:	681b      	ldr	r3, [r3, #0]
 8022be6:	3354      	adds	r3, #84	; 0x54
 8022be8:	2200      	movs	r2, #0
 8022bea:	2102      	movs	r1, #2
 8022bec:	4618      	mov	r0, r3
 8022bee:	f7fc f8fa 	bl	801ede6 <lv_style_set_outline_opa>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
 8022bf2:	4b67      	ldr	r3, [pc, #412]	; (8022d90 <checkbox_init+0x354>)
 8022bf4:	681b      	ldr	r3, [r3, #0]
 8022bf6:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8022bfa:	2000      	movs	r0, #0
 8022bfc:	f7f7 fc0c 	bl	801a418 <lv_disp_get_dpi>
 8022c00:	4603      	mov	r3, r0
 8022c02:	3314      	adds	r3, #20
 8022c04:	009b      	lsls	r3, r3, #2
 8022c06:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022c0a:	db0d      	blt.n	8022c28 <checkbox_init+0x1ec>
 8022c0c:	2000      	movs	r0, #0
 8022c0e:	f7f7 fc03 	bl	801a418 <lv_disp_get_dpi>
 8022c12:	4603      	mov	r3, r0
 8022c14:	3314      	adds	r3, #20
 8022c16:	009b      	lsls	r3, r3, #2
 8022c18:	4a5e      	ldr	r2, [pc, #376]	; (8022d94 <checkbox_init+0x358>)
 8022c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8022c1e:	1192      	asrs	r2, r2, #6
 8022c20:	17db      	asrs	r3, r3, #31
 8022c22:	1ad3      	subs	r3, r2, r3
 8022c24:	b21b      	sxth	r3, r3
 8022c26:	e000      	b.n	8022c2a <checkbox_init+0x1ee>
 8022c28:	2301      	movs	r3, #1
 8022c2a:	461a      	mov	r2, r3
 8022c2c:	2100      	movs	r1, #0
 8022c2e:	4628      	mov	r0, r5
 8022c30:	f7fb fea2 	bl	801e978 <lv_style_set_radius>
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
 8022c34:	4b56      	ldr	r3, [pc, #344]	; (8022d90 <checkbox_init+0x354>)
 8022c36:	681b      	ldr	r3, [r3, #0]
 8022c38:	3354      	adds	r3, #84	; 0x54
 8022c3a:	4a58      	ldr	r2, [pc, #352]	; (8022d9c <checkbox_init+0x360>)
 8022c3c:	2101      	movs	r1, #1
 8022c3e:	4618      	mov	r0, r3
 8022c40:	f7fc f961 	bl	801ef06 <lv_style_set_pattern_image>
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
 8022c44:	4b52      	ldr	r3, [pc, #328]	; (8022d90 <checkbox_init+0x354>)
 8022c46:	681b      	ldr	r3, [r3, #0]
 8022c48:	3354      	adds	r3, #84	; 0x54
 8022c4a:	4622      	mov	r2, r4
 8022c4c:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 8022c50:	4622      	mov	r2, r4
 8022c52:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8022c56:	4622      	mov	r2, r4
 8022c58:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 8022c5c:	4622      	mov	r2, r4
 8022c5e:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8022c62:	4622      	mov	r2, r4
 8022c64:	2101      	movs	r1, #1
 8022c66:	4618      	mov	r0, r3
 8022c68:	f7fc f91e 	bl	801eea8 <lv_style_set_pattern_recolor>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8022c6c:	4b48      	ldr	r3, [pc, #288]	; (8022d90 <checkbox_init+0x354>)
 8022c6e:	681b      	ldr	r3, [r3, #0]
 8022c70:	3354      	adds	r3, #84	; 0x54
 8022c72:	2200      	movs	r2, #0
 8022c74:	2100      	movs	r1, #0
 8022c76:	4618      	mov	r0, r3
 8022c78:	f7fc f92d 	bl	801eed6 <lv_style_set_pattern_opa>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
 8022c7c:	4b44      	ldr	r3, [pc, #272]	; (8022d90 <checkbox_init+0x354>)
 8022c7e:	681b      	ldr	r3, [r3, #0]
 8022c80:	3354      	adds	r3, #84	; 0x54
 8022c82:	22ff      	movs	r2, #255	; 0xff
 8022c84:	2101      	movs	r1, #1
 8022c86:	4618      	mov	r0, r3
 8022c88:	f7fc f925 	bl	801eed6 <lv_style_set_pattern_opa>
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
 8022c8c:	4b40      	ldr	r3, [pc, #256]	; (8022d90 <checkbox_init+0x354>)
 8022c8e:	681b      	ldr	r3, [r3, #0]
 8022c90:	3354      	adds	r3, #84	; 0x54
 8022c92:	226c      	movs	r2, #108	; 0x6c
 8022c94:	2100      	movs	r1, #0
 8022c96:	4618      	mov	r0, r3
 8022c98:	f7fc fac6 	bl	801f228 <lv_style_set_transition_prop_3>
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
 8022c9c:	4b3c      	ldr	r3, [pc, #240]	; (8022d90 <checkbox_init+0x354>)
 8022c9e:	681b      	ldr	r3, [r3, #0]
 8022ca0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8022ca4:	4b3c      	ldr	r3, [pc, #240]	; (8022d98 <checkbox_init+0x35c>)
 8022ca6:	695b      	ldr	r3, [r3, #20]
 8022ca8:	461a      	mov	r2, r3
 8022caa:	2101      	movs	r1, #1
 8022cac:	f7fc f9da 	bl	801f064 <lv_style_set_text_font>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022cb0:	4b37      	ldr	r3, [pc, #220]	; (8022d90 <checkbox_init+0x354>)
 8022cb2:	681b      	ldr	r3, [r3, #0]
 8022cb4:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022cb8:	2000      	movs	r0, #0
 8022cba:	f7f7 fbad 	bl	801a418 <lv_disp_get_dpi>
 8022cbe:	4603      	mov	r3, r0
 8022cc0:	461a      	mov	r2, r3
 8022cc2:	4613      	mov	r3, r2
 8022cc4:	005b      	lsls	r3, r3, #1
 8022cc6:	4413      	add	r3, r2
 8022cc8:	3350      	adds	r3, #80	; 0x50
 8022cca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022cce:	db10      	blt.n	8022cf2 <checkbox_init+0x2b6>
 8022cd0:	2000      	movs	r0, #0
 8022cd2:	f7f7 fba1 	bl	801a418 <lv_disp_get_dpi>
 8022cd6:	4603      	mov	r3, r0
 8022cd8:	461a      	mov	r2, r3
 8022cda:	4613      	mov	r3, r2
 8022cdc:	005b      	lsls	r3, r3, #1
 8022cde:	4413      	add	r3, r2
 8022ce0:	3350      	adds	r3, #80	; 0x50
 8022ce2:	4a2c      	ldr	r2, [pc, #176]	; (8022d94 <checkbox_init+0x358>)
 8022ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8022ce8:	1192      	asrs	r2, r2, #6
 8022cea:	17db      	asrs	r3, r3, #31
 8022cec:	1ad3      	subs	r3, r2, r3
 8022cee:	b21b      	sxth	r3, r3
 8022cf0:	e000      	b.n	8022cf4 <checkbox_init+0x2b8>
 8022cf2:	2301      	movs	r3, #1
 8022cf4:	461a      	mov	r2, r3
 8022cf6:	2100      	movs	r1, #0
 8022cf8:	4620      	mov	r0, r4
 8022cfa:	f7fb fed3 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022cfe:	4b24      	ldr	r3, [pc, #144]	; (8022d90 <checkbox_init+0x354>)
 8022d00:	681b      	ldr	r3, [r3, #0]
 8022d02:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022d06:	2000      	movs	r0, #0
 8022d08:	f7f7 fb86 	bl	801a418 <lv_disp_get_dpi>
 8022d0c:	4603      	mov	r3, r0
 8022d0e:	461a      	mov	r2, r3
 8022d10:	4613      	mov	r3, r2
 8022d12:	005b      	lsls	r3, r3, #1
 8022d14:	4413      	add	r3, r2
 8022d16:	3350      	adds	r3, #80	; 0x50
 8022d18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022d1c:	db10      	blt.n	8022d40 <checkbox_init+0x304>
 8022d1e:	2000      	movs	r0, #0
 8022d20:	f7f7 fb7a 	bl	801a418 <lv_disp_get_dpi>
 8022d24:	4603      	mov	r3, r0
 8022d26:	461a      	mov	r2, r3
 8022d28:	4613      	mov	r3, r2
 8022d2a:	005b      	lsls	r3, r3, #1
 8022d2c:	4413      	add	r3, r2
 8022d2e:	3350      	adds	r3, #80	; 0x50
 8022d30:	4a18      	ldr	r2, [pc, #96]	; (8022d94 <checkbox_init+0x358>)
 8022d32:	fb82 1203 	smull	r1, r2, r2, r3
 8022d36:	1192      	asrs	r2, r2, #6
 8022d38:	17db      	asrs	r3, r3, #31
 8022d3a:	1ad3      	subs	r3, r2, r3
 8022d3c:	b21b      	sxth	r3, r3
 8022d3e:	e000      	b.n	8022d42 <checkbox_init+0x306>
 8022d40:	2301      	movs	r3, #1
 8022d42:	461a      	mov	r2, r3
 8022d44:	2100      	movs	r1, #0
 8022d46:	4620      	mov	r0, r4
 8022d48:	f7fb fec5 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022d4c:	4b10      	ldr	r3, [pc, #64]	; (8022d90 <checkbox_init+0x354>)
 8022d4e:	681b      	ldr	r3, [r3, #0]
 8022d50:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022d54:	2000      	movs	r0, #0
 8022d56:	f7f7 fb5f 	bl	801a418 <lv_disp_get_dpi>
 8022d5a:	4603      	mov	r3, r0
 8022d5c:	461a      	mov	r2, r3
 8022d5e:	4613      	mov	r3, r2
 8022d60:	005b      	lsls	r3, r3, #1
 8022d62:	4413      	add	r3, r2
 8022d64:	3350      	adds	r3, #80	; 0x50
 8022d66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022d6a:	db19      	blt.n	8022da0 <checkbox_init+0x364>
 8022d6c:	2000      	movs	r0, #0
 8022d6e:	f7f7 fb53 	bl	801a418 <lv_disp_get_dpi>
 8022d72:	4603      	mov	r3, r0
 8022d74:	461a      	mov	r2, r3
 8022d76:	4613      	mov	r3, r2
 8022d78:	005b      	lsls	r3, r3, #1
 8022d7a:	4413      	add	r3, r2
 8022d7c:	3350      	adds	r3, #80	; 0x50
 8022d7e:	4a05      	ldr	r2, [pc, #20]	; (8022d94 <checkbox_init+0x358>)
 8022d80:	fb82 1203 	smull	r1, r2, r2, r3
 8022d84:	1192      	asrs	r2, r2, #6
 8022d86:	17db      	asrs	r3, r3, #31
 8022d88:	1ad3      	subs	r3, r2, r3
 8022d8a:	b21b      	sxth	r3, r3
 8022d8c:	e009      	b.n	8022da2 <checkbox_init+0x366>
 8022d8e:	bf00      	nop
 8022d90:	200200d4 	.word	0x200200d4
 8022d94:	66666667 	.word	0x66666667
 8022d98:	200200a8 	.word	0x200200a8
 8022d9c:	0802d234 	.word	0x0802d234
 8022da0:	2301      	movs	r3, #1
 8022da2:	461a      	mov	r2, r3
 8022da4:	2100      	movs	r1, #0
 8022da6:	4620      	mov	r0, r4
 8022da8:	f7fb fe4a 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022dac:	4b14      	ldr	r3, [pc, #80]	; (8022e00 <checkbox_init+0x3c4>)
 8022dae:	681b      	ldr	r3, [r3, #0]
 8022db0:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022db4:	2000      	movs	r0, #0
 8022db6:	f7f7 fb2f 	bl	801a418 <lv_disp_get_dpi>
 8022dba:	4603      	mov	r3, r0
 8022dbc:	461a      	mov	r2, r3
 8022dbe:	4613      	mov	r3, r2
 8022dc0:	005b      	lsls	r3, r3, #1
 8022dc2:	4413      	add	r3, r2
 8022dc4:	3350      	adds	r3, #80	; 0x50
 8022dc6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022dca:	db10      	blt.n	8022dee <checkbox_init+0x3b2>
 8022dcc:	2000      	movs	r0, #0
 8022dce:	f7f7 fb23 	bl	801a418 <lv_disp_get_dpi>
 8022dd2:	4603      	mov	r3, r0
 8022dd4:	461a      	mov	r2, r3
 8022dd6:	4613      	mov	r3, r2
 8022dd8:	005b      	lsls	r3, r3, #1
 8022dda:	4413      	add	r3, r2
 8022ddc:	3350      	adds	r3, #80	; 0x50
 8022dde:	4a09      	ldr	r2, [pc, #36]	; (8022e04 <checkbox_init+0x3c8>)
 8022de0:	fb82 1203 	smull	r1, r2, r2, r3
 8022de4:	1192      	asrs	r2, r2, #6
 8022de6:	17db      	asrs	r3, r3, #31
 8022de8:	1ad3      	subs	r3, r2, r3
 8022dea:	b21b      	sxth	r3, r3
 8022dec:	e000      	b.n	8022df0 <checkbox_init+0x3b4>
 8022dee:	2301      	movs	r3, #1
 8022df0:	461a      	mov	r2, r3
 8022df2:	2100      	movs	r1, #0
 8022df4:	4620      	mov	r0, r4
 8022df6:	f7fb fe3c 	bl	801ea72 <lv_style_set_pad_bottom>
#endif
}
 8022dfa:	bf00      	nop
 8022dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8022dfe:	bf00      	nop
 8022e00:	200200d4 	.word	0x200200d4
 8022e04:	66666667 	.word	0x66666667

08022e08 <btnmatrix_init>:

static void btnmatrix_init(void)
{
 8022e08:	b480      	push	{r7}
 8022e0a:	af00      	add	r7, sp, #0
}
 8022e0c:	bf00      	nop
 8022e0e:	46bd      	mov	sp, r7
 8022e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e14:	4770      	bx	lr
	...

08022e18 <keyboard_init>:

static void keyboard_init(void)
{
 8022e18:	b5b0      	push	{r4, r5, r7, lr}
 8022e1a:	af00      	add	r7, sp, #0
#if LV_USE_KEYBOARD
    style_init_reset(&styles->kb_bg);
 8022e1c:	4b96      	ldr	r3, [pc, #600]	; (8023078 <keyboard_init+0x260>)
 8022e1e:	681b      	ldr	r3, [r3, #0]
 8022e20:	336c      	adds	r3, #108	; 0x6c
 8022e22:	4618      	mov	r0, r3
 8022e24:	f002 fb20 	bl	8025468 <style_init_reset>
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
 8022e28:	4b93      	ldr	r3, [pc, #588]	; (8023078 <keyboard_init+0x260>)
 8022e2a:	681b      	ldr	r3, [r3, #0]
 8022e2c:	336c      	adds	r3, #108	; 0x6c
 8022e2e:	2200      	movs	r2, #0
 8022e30:	2100      	movs	r1, #0
 8022e32:	4618      	mov	r0, r3
 8022e34:	f7fb fda0 	bl	801e978 <lv_style_set_radius>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 8022e38:	4b8f      	ldr	r3, [pc, #572]	; (8023078 <keyboard_init+0x260>)
 8022e3a:	681b      	ldr	r3, [r3, #0]
 8022e3c:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 8022e40:	2000      	movs	r0, #0
 8022e42:	f7f7 fae9 	bl	801a418 <lv_disp_get_dpi>
 8022e46:	4603      	mov	r3, r0
 8022e48:	3314      	adds	r3, #20
 8022e4a:	009b      	lsls	r3, r3, #2
 8022e4c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022e50:	db0d      	blt.n	8022e6e <keyboard_init+0x56>
 8022e52:	2000      	movs	r0, #0
 8022e54:	f7f7 fae0 	bl	801a418 <lv_disp_get_dpi>
 8022e58:	4603      	mov	r3, r0
 8022e5a:	3314      	adds	r3, #20
 8022e5c:	009b      	lsls	r3, r3, #2
 8022e5e:	4a87      	ldr	r2, [pc, #540]	; (802307c <keyboard_init+0x264>)
 8022e60:	fb82 1203 	smull	r1, r2, r2, r3
 8022e64:	1192      	asrs	r2, r2, #6
 8022e66:	17db      	asrs	r3, r3, #31
 8022e68:	1ad3      	subs	r3, r2, r3
 8022e6a:	b21b      	sxth	r3, r3
 8022e6c:	e000      	b.n	8022e70 <keyboard_init+0x58>
 8022e6e:	2301      	movs	r3, #1
 8022e70:	461a      	mov	r2, r3
 8022e72:	2100      	movs	r1, #0
 8022e74:	4628      	mov	r0, r5
 8022e76:	f7fb fef3 	bl	801ec60 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
 8022e7a:	4b7f      	ldr	r3, [pc, #508]	; (8023078 <keyboard_init+0x260>)
 8022e7c:	681b      	ldr	r3, [r3, #0]
 8022e7e:	336c      	adds	r3, #108	; 0x6c
 8022e80:	2202      	movs	r2, #2
 8022e82:	2100      	movs	r1, #0
 8022e84:	4618      	mov	r0, r3
 8022e86:	f7fb ff04 	bl	801ec92 <lv_style_set_border_side>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
 8022e8a:	4b7b      	ldr	r3, [pc, #492]	; (8023078 <keyboard_init+0x260>)
 8022e8c:	681b      	ldr	r3, [r3, #0]
 8022e8e:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 8022e92:	4b7b      	ldr	r3, [pc, #492]	; (8023080 <keyboard_init+0x268>)
 8022e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e96:	f003 0302 	and.w	r3, r3, #2
 8022e9a:	2b00      	cmp	r3, #0
 8022e9c:	d010      	beq.n	8022ec0 <keyboard_init+0xa8>
 8022e9e:	4b78      	ldr	r3, [pc, #480]	; (8023080 <keyboard_init+0x268>)
 8022ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022ea2:	f003 0302 	and.w	r3, r3, #2
 8022ea6:	2b00      	cmp	r3, #0
 8022ea8:	d004      	beq.n	8022eb4 <keyboard_init+0x9c>
 8022eaa:	4876      	ldr	r0, [pc, #472]	; (8023084 <keyboard_init+0x26c>)
 8022eac:	f7fb fd1e 	bl	801e8ec <lv_color_hex>
 8022eb0:	4604      	mov	r4, r0
 8022eb2:	e00e      	b.n	8022ed2 <keyboard_init+0xba>
 8022eb4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8022eb8:	f7fb fd18 	bl	801e8ec <lv_color_hex>
 8022ebc:	4604      	mov	r4, r0
 8022ebe:	e008      	b.n	8022ed2 <keyboard_init+0xba>
 8022ec0:	f36f 0407 	bfc	r4, #0, #8
 8022ec4:	f36f 240f 	bfc	r4, #8, #8
 8022ec8:	f36f 4417 	bfc	r4, #16, #8
 8022ecc:	4623      	mov	r3, r4
 8022ece:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8022ed2:	4622      	mov	r2, r4
 8022ed4:	2100      	movs	r1, #0
 8022ed6:	4628      	mov	r0, r5
 8022ed8:	f7fb ff0d 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
 8022edc:	4b66      	ldr	r3, [pc, #408]	; (8023078 <keyboard_init+0x260>)
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8022ee4:	4b66      	ldr	r3, [pc, #408]	; (8023080 <keyboard_init+0x268>)
 8022ee6:	691a      	ldr	r2, [r3, #16]
 8022ee8:	2104      	movs	r1, #4
 8022eea:	f7fb ff04 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 8022eee:	4b62      	ldr	r3, [pc, #392]	; (8023078 <keyboard_init+0x260>)
 8022ef0:	681b      	ldr	r3, [r3, #0]
 8022ef2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022ef6:	2000      	movs	r0, #0
 8022ef8:	f7f7 fa8e 	bl	801a418 <lv_disp_get_dpi>
 8022efc:	4603      	mov	r3, r0
 8022efe:	461a      	mov	r2, r3
 8022f00:	4613      	mov	r3, r2
 8022f02:	009b      	lsls	r3, r3, #2
 8022f04:	4413      	add	r3, r2
 8022f06:	3350      	adds	r3, #80	; 0x50
 8022f08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022f0c:	db10      	blt.n	8022f30 <keyboard_init+0x118>
 8022f0e:	2000      	movs	r0, #0
 8022f10:	f7f7 fa82 	bl	801a418 <lv_disp_get_dpi>
 8022f14:	4603      	mov	r3, r0
 8022f16:	461a      	mov	r2, r3
 8022f18:	4613      	mov	r3, r2
 8022f1a:	009b      	lsls	r3, r3, #2
 8022f1c:	4413      	add	r3, r2
 8022f1e:	3350      	adds	r3, #80	; 0x50
 8022f20:	4a56      	ldr	r2, [pc, #344]	; (802307c <keyboard_init+0x264>)
 8022f22:	fb82 1203 	smull	r1, r2, r2, r3
 8022f26:	1192      	asrs	r2, r2, #6
 8022f28:	17db      	asrs	r3, r3, #31
 8022f2a:	1ad3      	subs	r3, r2, r3
 8022f2c:	b21b      	sxth	r3, r3
 8022f2e:	e000      	b.n	8022f32 <keyboard_init+0x11a>
 8022f30:	2301      	movs	r3, #1
 8022f32:	461a      	mov	r2, r3
 8022f34:	2100      	movs	r1, #0
 8022f36:	4620      	mov	r0, r4
 8022f38:	f7fb fdb4 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 8022f3c:	4b4e      	ldr	r3, [pc, #312]	; (8023078 <keyboard_init+0x260>)
 8022f3e:	681b      	ldr	r3, [r3, #0]
 8022f40:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022f44:	2000      	movs	r0, #0
 8022f46:	f7f7 fa67 	bl	801a418 <lv_disp_get_dpi>
 8022f4a:	4603      	mov	r3, r0
 8022f4c:	461a      	mov	r2, r3
 8022f4e:	4613      	mov	r3, r2
 8022f50:	009b      	lsls	r3, r3, #2
 8022f52:	4413      	add	r3, r2
 8022f54:	3350      	adds	r3, #80	; 0x50
 8022f56:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022f5a:	db10      	blt.n	8022f7e <keyboard_init+0x166>
 8022f5c:	2000      	movs	r0, #0
 8022f5e:	f7f7 fa5b 	bl	801a418 <lv_disp_get_dpi>
 8022f62:	4603      	mov	r3, r0
 8022f64:	461a      	mov	r2, r3
 8022f66:	4613      	mov	r3, r2
 8022f68:	009b      	lsls	r3, r3, #2
 8022f6a:	4413      	add	r3, r2
 8022f6c:	3350      	adds	r3, #80	; 0x50
 8022f6e:	4a43      	ldr	r2, [pc, #268]	; (802307c <keyboard_init+0x264>)
 8022f70:	fb82 1203 	smull	r1, r2, r2, r3
 8022f74:	1192      	asrs	r2, r2, #6
 8022f76:	17db      	asrs	r3, r3, #31
 8022f78:	1ad3      	subs	r3, r2, r3
 8022f7a:	b21b      	sxth	r3, r3
 8022f7c:	e000      	b.n	8022f80 <keyboard_init+0x168>
 8022f7e:	2301      	movs	r3, #1
 8022f80:	461a      	mov	r2, r3
 8022f82:	2100      	movs	r1, #0
 8022f84:	4620      	mov	r0, r4
 8022f86:	f7fb fda6 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 8022f8a:	4b3b      	ldr	r3, [pc, #236]	; (8023078 <keyboard_init+0x260>)
 8022f8c:	681b      	ldr	r3, [r3, #0]
 8022f8e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022f92:	2000      	movs	r0, #0
 8022f94:	f7f7 fa40 	bl	801a418 <lv_disp_get_dpi>
 8022f98:	4603      	mov	r3, r0
 8022f9a:	461a      	mov	r2, r3
 8022f9c:	4613      	mov	r3, r2
 8022f9e:	009b      	lsls	r3, r3, #2
 8022fa0:	4413      	add	r3, r2
 8022fa2:	3350      	adds	r3, #80	; 0x50
 8022fa4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022fa8:	db10      	blt.n	8022fcc <keyboard_init+0x1b4>
 8022faa:	2000      	movs	r0, #0
 8022fac:	f7f7 fa34 	bl	801a418 <lv_disp_get_dpi>
 8022fb0:	4603      	mov	r3, r0
 8022fb2:	461a      	mov	r2, r3
 8022fb4:	4613      	mov	r3, r2
 8022fb6:	009b      	lsls	r3, r3, #2
 8022fb8:	4413      	add	r3, r2
 8022fba:	3350      	adds	r3, #80	; 0x50
 8022fbc:	4a2f      	ldr	r2, [pc, #188]	; (802307c <keyboard_init+0x264>)
 8022fbe:	fb82 1203 	smull	r1, r2, r2, r3
 8022fc2:	1192      	asrs	r2, r2, #6
 8022fc4:	17db      	asrs	r3, r3, #31
 8022fc6:	1ad3      	subs	r3, r2, r3
 8022fc8:	b21b      	sxth	r3, r3
 8022fca:	e000      	b.n	8022fce <keyboard_init+0x1b6>
 8022fcc:	2301      	movs	r3, #1
 8022fce:	461a      	mov	r2, r3
 8022fd0:	2100      	movs	r1, #0
 8022fd2:	4620      	mov	r0, r4
 8022fd4:	f7fb fd34 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 8022fd8:	4b27      	ldr	r3, [pc, #156]	; (8023078 <keyboard_init+0x260>)
 8022fda:	681b      	ldr	r3, [r3, #0]
 8022fdc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022fe0:	2000      	movs	r0, #0
 8022fe2:	f7f7 fa19 	bl	801a418 <lv_disp_get_dpi>
 8022fe6:	4603      	mov	r3, r0
 8022fe8:	461a      	mov	r2, r3
 8022fea:	4613      	mov	r3, r2
 8022fec:	009b      	lsls	r3, r3, #2
 8022fee:	4413      	add	r3, r2
 8022ff0:	3350      	adds	r3, #80	; 0x50
 8022ff2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022ff6:	db10      	blt.n	802301a <keyboard_init+0x202>
 8022ff8:	2000      	movs	r0, #0
 8022ffa:	f7f7 fa0d 	bl	801a418 <lv_disp_get_dpi>
 8022ffe:	4603      	mov	r3, r0
 8023000:	461a      	mov	r2, r3
 8023002:	4613      	mov	r3, r2
 8023004:	009b      	lsls	r3, r3, #2
 8023006:	4413      	add	r3, r2
 8023008:	3350      	adds	r3, #80	; 0x50
 802300a:	4a1c      	ldr	r2, [pc, #112]	; (802307c <keyboard_init+0x264>)
 802300c:	fb82 1203 	smull	r1, r2, r2, r3
 8023010:	1192      	asrs	r2, r2, #6
 8023012:	17db      	asrs	r3, r3, #31
 8023014:	1ad3      	subs	r3, r2, r3
 8023016:	b21b      	sxth	r3, r3
 8023018:	e000      	b.n	802301c <keyboard_init+0x204>
 802301a:	2301      	movs	r3, #1
 802301c:	461a      	mov	r2, r3
 802301e:	2100      	movs	r1, #0
 8023020:	4620      	mov	r0, r4
 8023022:	f7fb fd26 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
 8023026:	4b14      	ldr	r3, [pc, #80]	; (8023078 <keyboard_init+0x260>)
 8023028:	681b      	ldr	r3, [r3, #0]
 802302a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 802302e:	2000      	movs	r0, #0
 8023030:	f7f7 f9f2 	bl	801a418 <lv_disp_get_dpi>
 8023034:	4603      	mov	r3, r0
 8023036:	461a      	mov	r2, r3
 8023038:	4613      	mov	r3, r2
 802303a:	005b      	lsls	r3, r3, #1
 802303c:	4413      	add	r3, r2
 802303e:	3350      	adds	r3, #80	; 0x50
 8023040:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023044:	db10      	blt.n	8023068 <keyboard_init+0x250>
 8023046:	2000      	movs	r0, #0
 8023048:	f7f7 f9e6 	bl	801a418 <lv_disp_get_dpi>
 802304c:	4603      	mov	r3, r0
 802304e:	461a      	mov	r2, r3
 8023050:	4613      	mov	r3, r2
 8023052:	005b      	lsls	r3, r3, #1
 8023054:	4413      	add	r3, r2
 8023056:	3350      	adds	r3, #80	; 0x50
 8023058:	4a08      	ldr	r2, [pc, #32]	; (802307c <keyboard_init+0x264>)
 802305a:	fb82 1203 	smull	r1, r2, r2, r3
 802305e:	1192      	asrs	r2, r2, #6
 8023060:	17db      	asrs	r3, r3, #31
 8023062:	1ad3      	subs	r3, r2, r3
 8023064:	b21b      	sxth	r3, r3
 8023066:	e000      	b.n	802306a <keyboard_init+0x252>
 8023068:	2301      	movs	r3, #1
 802306a:	461a      	mov	r2, r3
 802306c:	2100      	movs	r1, #0
 802306e:	4620      	mov	r0, r4
 8023070:	f7fb fd4a 	bl	801eb08 <lv_style_set_pad_inner>
#endif
}
 8023074:	bf00      	nop
 8023076:	bdb0      	pop	{r4, r5, r7, pc}
 8023078:	200200d4 	.word	0x200200d4
 802307c:	66666667 	.word	0x66666667
 8023080:	200200a8 	.word	0x200200a8
 8023084:	003b3e42 	.word	0x003b3e42

08023088 <msgbox_init>:

static void msgbox_init(void)
{
 8023088:	b5b0      	push	{r4, r5, r7, lr}
 802308a:	af00      	add	r7, sp, #0
#if LV_USE_MSGBOX
    style_init_reset(&styles->mbox_bg);
 802308c:	4b29      	ldr	r3, [pc, #164]	; (8023134 <msgbox_init+0xac>)
 802308e:	681b      	ldr	r3, [r3, #0]
 8023090:	3380      	adds	r3, #128	; 0x80
 8023092:	4618      	mov	r0, r3
 8023094:	f002 f9e8 	bl	8025468 <style_init_reset>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
 8023098:	4b26      	ldr	r3, [pc, #152]	; (8023134 <msgbox_init+0xac>)
 802309a:	681b      	ldr	r3, [r3, #0]
 802309c:	f103 0580 	add.w	r5, r3, #128	; 0x80
 80230a0:	2000      	movs	r0, #0
 80230a2:	f7f7 f9b9 	bl	801a418 <lv_disp_get_dpi>
 80230a6:	4603      	mov	r3, r0
 80230a8:	461a      	mov	r2, r3
 80230aa:	2332      	movs	r3, #50	; 0x32
 80230ac:	fb03 f302 	mul.w	r3, r3, r2
 80230b0:	3350      	adds	r3, #80	; 0x50
 80230b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80230b6:	db10      	blt.n	80230da <msgbox_init+0x52>
 80230b8:	2000      	movs	r0, #0
 80230ba:	f7f7 f9ad 	bl	801a418 <lv_disp_get_dpi>
 80230be:	4603      	mov	r3, r0
 80230c0:	461a      	mov	r2, r3
 80230c2:	2332      	movs	r3, #50	; 0x32
 80230c4:	fb03 f302 	mul.w	r3, r3, r2
 80230c8:	3350      	adds	r3, #80	; 0x50
 80230ca:	4a1b      	ldr	r2, [pc, #108]	; (8023138 <msgbox_init+0xb0>)
 80230cc:	fb82 1203 	smull	r1, r2, r2, r3
 80230d0:	1192      	asrs	r2, r2, #6
 80230d2:	17db      	asrs	r3, r3, #31
 80230d4:	1ad3      	subs	r3, r2, r3
 80230d6:	b21b      	sxth	r3, r3
 80230d8:	e000      	b.n	80230dc <msgbox_init+0x54>
 80230da:	2301      	movs	r3, #1
 80230dc:	461a      	mov	r2, r3
 80230de:	2100      	movs	r1, #0
 80230e0:	4628      	mov	r0, r5
 80230e2:	f7fb fe98 	bl	801ee16 <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
 80230e6:	4b13      	ldr	r3, [pc, #76]	; (8023134 <msgbox_init+0xac>)
 80230e8:	681b      	ldr	r3, [r3, #0]
 80230ea:	f103 0580 	add.w	r5, r3, #128	; 0x80
 80230ee:	4b13      	ldr	r3, [pc, #76]	; (802313c <msgbox_init+0xb4>)
 80230f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80230f2:	f003 0302 	and.w	r3, r3, #2
 80230f6:	2b00      	cmp	r3, #0
 80230f8:	d00f      	beq.n	802311a <msgbox_init+0x92>
 80230fa:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 80230fe:	f363 0407 	bfi	r4, r3, #0, #8
 8023102:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8023106:	f363 240f 	bfi	r4, r3, #8, #8
 802310a:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 802310e:	f363 4417 	bfi	r4, r3, #16, #8
 8023112:	4623      	mov	r3, r4
 8023114:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8023118:	e004      	b.n	8023124 <msgbox_init+0x9c>
 802311a:	f640 1099 	movw	r0, #2457	; 0x999
 802311e:	f7fb fbf9 	bl	801e914 <lv_color_hex3>
 8023122:	4604      	mov	r4, r0
 8023124:	4622      	mov	r2, r4
 8023126:	2100      	movs	r1, #0
 8023128:	4628      	mov	r0, r5
 802312a:	f7fb fea6 	bl	801ee7a <lv_style_set_shadow_color>

#endif
}
 802312e:	bf00      	nop
 8023130:	bdb0      	pop	{r4, r5, r7, pc}
 8023132:	bf00      	nop
 8023134:	200200d4 	.word	0x200200d4
 8023138:	66666667 	.word	0x66666667
 802313c:	200200a8 	.word	0x200200a8

08023140 <page_init>:

static void page_init(void)
{
 8023140:	b598      	push	{r3, r4, r7, lr}
 8023142:	af00      	add	r7, sp, #0
#if LV_USE_PAGE
    style_init_reset(&styles->sb);
 8023144:	4b60      	ldr	r3, [pc, #384]	; (80232c8 <page_init+0x188>)
 8023146:	681b      	ldr	r3, [r3, #0]
 8023148:	3384      	adds	r3, #132	; 0x84
 802314a:	4618      	mov	r0, r3
 802314c:	f002 f98c 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023150:	4b5d      	ldr	r3, [pc, #372]	; (80232c8 <page_init+0x188>)
 8023152:	681b      	ldr	r3, [r3, #0]
 8023154:	3384      	adds	r3, #132	; 0x84
 8023156:	22ff      	movs	r2, #255	; 0xff
 8023158:	2100      	movs	r1, #0
 802315a:	4618      	mov	r0, r3
 802315c:	f7fb fd68 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
 8023160:	4b59      	ldr	r3, [pc, #356]	; (80232c8 <page_init+0x188>)
 8023162:	681b      	ldr	r3, [r3, #0]
 8023164:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8023168:	4b58      	ldr	r3, [pc, #352]	; (80232cc <page_init+0x18c>)
 802316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802316c:	f003 0302 	and.w	r3, r3, #2
 8023170:	2b00      	cmp	r3, #0
 8023172:	d004      	beq.n	802317e <page_init+0x3e>
 8023174:	4856      	ldr	r0, [pc, #344]	; (80232d0 <page_init+0x190>)
 8023176:	f7fb fbb9 	bl	801e8ec <lv_color_hex>
 802317a:	4603      	mov	r3, r0
 802317c:	e003      	b.n	8023186 <page_init+0x46>
 802317e:	4855      	ldr	r0, [pc, #340]	; (80232d4 <page_init+0x194>)
 8023180:	f7fb fbb4 	bl	801e8ec <lv_color_hex>
 8023184:	4603      	mov	r3, r0
 8023186:	461a      	mov	r2, r3
 8023188:	2100      	movs	r1, #0
 802318a:	4620      	mov	r0, r4
 802318c:	f7fb fd39 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8023190:	4b4d      	ldr	r3, [pc, #308]	; (80232c8 <page_init+0x188>)
 8023192:	681b      	ldr	r3, [r3, #0]
 8023194:	3384      	adds	r3, #132	; 0x84
 8023196:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802319a:	2100      	movs	r1, #0
 802319c:	4618      	mov	r0, r3
 802319e:	f7fb fbeb 	bl	801e978 <lv_style_set_radius>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
 80231a2:	4b49      	ldr	r3, [pc, #292]	; (80232c8 <page_init+0x188>)
 80231a4:	681b      	ldr	r3, [r3, #0]
 80231a6:	f103 0484 	add.w	r4, r3, #132	; 0x84
 80231aa:	2000      	movs	r0, #0
 80231ac:	f7f7 f934 	bl	801a418 <lv_disp_get_dpi>
 80231b0:	4603      	mov	r3, r0
 80231b2:	461a      	mov	r2, r3
 80231b4:	4613      	mov	r3, r2
 80231b6:	00db      	lsls	r3, r3, #3
 80231b8:	1a9b      	subs	r3, r3, r2
 80231ba:	3350      	adds	r3, #80	; 0x50
 80231bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80231c0:	db10      	blt.n	80231e4 <page_init+0xa4>
 80231c2:	2000      	movs	r0, #0
 80231c4:	f7f7 f928 	bl	801a418 <lv_disp_get_dpi>
 80231c8:	4603      	mov	r3, r0
 80231ca:	461a      	mov	r2, r3
 80231cc:	4613      	mov	r3, r2
 80231ce:	00db      	lsls	r3, r3, #3
 80231d0:	1a9b      	subs	r3, r3, r2
 80231d2:	3350      	adds	r3, #80	; 0x50
 80231d4:	4a40      	ldr	r2, [pc, #256]	; (80232d8 <page_init+0x198>)
 80231d6:	fb82 1203 	smull	r1, r2, r2, r3
 80231da:	1192      	asrs	r2, r2, #6
 80231dc:	17db      	asrs	r3, r3, #31
 80231de:	1ad3      	subs	r3, r2, r3
 80231e0:	b21b      	sxth	r3, r3
 80231e2:	e000      	b.n	80231e6 <page_init+0xa6>
 80231e4:	2301      	movs	r3, #1
 80231e6:	461a      	mov	r2, r3
 80231e8:	2100      	movs	r1, #0
 80231ea:	4620      	mov	r0, r4
 80231ec:	f7fb fbf6 	bl	801e9dc <lv_style_set_size>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 80231f0:	4b35      	ldr	r3, [pc, #212]	; (80232c8 <page_init+0x188>)
 80231f2:	681b      	ldr	r3, [r3, #0]
 80231f4:	f103 0484 	add.w	r4, r3, #132	; 0x84
 80231f8:	2000      	movs	r0, #0
 80231fa:	f7f7 f90d 	bl	801a418 <lv_disp_get_dpi>
 80231fe:	4603      	mov	r3, r0
 8023200:	461a      	mov	r2, r3
 8023202:	4613      	mov	r3, r2
 8023204:	00db      	lsls	r3, r3, #3
 8023206:	1a9b      	subs	r3, r3, r2
 8023208:	3350      	adds	r3, #80	; 0x50
 802320a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802320e:	db10      	blt.n	8023232 <page_init+0xf2>
 8023210:	2000      	movs	r0, #0
 8023212:	f7f7 f901 	bl	801a418 <lv_disp_get_dpi>
 8023216:	4603      	mov	r3, r0
 8023218:	461a      	mov	r2, r3
 802321a:	4613      	mov	r3, r2
 802321c:	00db      	lsls	r3, r3, #3
 802321e:	1a9b      	subs	r3, r3, r2
 8023220:	3350      	adds	r3, #80	; 0x50
 8023222:	4a2d      	ldr	r2, [pc, #180]	; (80232d8 <page_init+0x198>)
 8023224:	fb82 1203 	smull	r1, r2, r2, r3
 8023228:	1192      	asrs	r2, r2, #6
 802322a:	17db      	asrs	r3, r3, #31
 802322c:	1ad3      	subs	r3, r2, r3
 802322e:	b21b      	sxth	r3, r3
 8023230:	e000      	b.n	8023234 <page_init+0xf4>
 8023232:	2301      	movs	r3, #1
 8023234:	461a      	mov	r2, r3
 8023236:	2100      	movs	r1, #0
 8023238:	4620      	mov	r0, r4
 802323a:	f7fb fc4c 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 802323e:	4b22      	ldr	r3, [pc, #136]	; (80232c8 <page_init+0x188>)
 8023240:	681b      	ldr	r3, [r3, #0]
 8023242:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8023246:	2000      	movs	r0, #0
 8023248:	f7f7 f8e6 	bl	801a418 <lv_disp_get_dpi>
 802324c:	4603      	mov	r3, r0
 802324e:	461a      	mov	r2, r3
 8023250:	4613      	mov	r3, r2
 8023252:	00db      	lsls	r3, r3, #3
 8023254:	1a9b      	subs	r3, r3, r2
 8023256:	3350      	adds	r3, #80	; 0x50
 8023258:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802325c:	db10      	blt.n	8023280 <page_init+0x140>
 802325e:	2000      	movs	r0, #0
 8023260:	f7f7 f8da 	bl	801a418 <lv_disp_get_dpi>
 8023264:	4603      	mov	r3, r0
 8023266:	461a      	mov	r2, r3
 8023268:	4613      	mov	r3, r2
 802326a:	00db      	lsls	r3, r3, #3
 802326c:	1a9b      	subs	r3, r3, r2
 802326e:	3350      	adds	r3, #80	; 0x50
 8023270:	4a19      	ldr	r2, [pc, #100]	; (80232d8 <page_init+0x198>)
 8023272:	fb82 1203 	smull	r1, r2, r2, r3
 8023276:	1192      	asrs	r2, r2, #6
 8023278:	17db      	asrs	r3, r3, #31
 802327a:	1ad3      	subs	r3, r2, r3
 802327c:	b21b      	sxth	r3, r3
 802327e:	e000      	b.n	8023282 <page_init+0x142>
 8023280:	2301      	movs	r3, #1
 8023282:	461a      	mov	r2, r3
 8023284:	2100      	movs	r1, #0
 8023286:	4620      	mov	r0, r4
 8023288:	f7fb fbf3 	bl	801ea72 <lv_style_set_pad_bottom>

#if LV_USE_ANIMATION
    style_init_reset(&styles->edge_flash);
 802328c:	4b0e      	ldr	r3, [pc, #56]	; (80232c8 <page_init+0x188>)
 802328e:	681b      	ldr	r3, [r3, #0]
 8023290:	3388      	adds	r3, #136	; 0x88
 8023292:	4618      	mov	r0, r3
 8023294:	f002 f8e8 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023298:	4b0b      	ldr	r3, [pc, #44]	; (80232c8 <page_init+0x188>)
 802329a:	681b      	ldr	r3, [r3, #0]
 802329c:	3388      	adds	r3, #136	; 0x88
 802329e:	22ff      	movs	r2, #255	; 0xff
 80232a0:	2100      	movs	r1, #0
 80232a2:	4618      	mov	r0, r3
 80232a4:	f7fb fcc4 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
 80232a8:	4b07      	ldr	r3, [pc, #28]	; (80232c8 <page_init+0x188>)
 80232aa:	681b      	ldr	r3, [r3, #0]
 80232ac:	f103 0488 	add.w	r4, r3, #136	; 0x88
 80232b0:	f640 0088 	movw	r0, #2184	; 0x888
 80232b4:	f7fb fb2e 	bl	801e914 <lv_color_hex3>
 80232b8:	4603      	mov	r3, r0
 80232ba:	461a      	mov	r2, r3
 80232bc:	2100      	movs	r1, #0
 80232be:	4620      	mov	r0, r4
 80232c0:	f7fb fc9f 	bl	801ec02 <lv_style_set_bg_color>
#endif
#endif
}
 80232c4:	bf00      	nop
 80232c6:	bd98      	pop	{r3, r4, r7, pc}
 80232c8:	200200d4 	.word	0x200200d4
 80232cc:	200200a8 	.word	0x200200a8
 80232d0:	00cccfd1 	.word	0x00cccfd1
 80232d4:	00777f85 	.word	0x00777f85
 80232d8:	66666667 	.word	0x66666667

080232dc <textarea_init>:

static void textarea_init(void)
{
 80232dc:	b598      	push	{r3, r4, r7, lr}
 80232de:	af00      	add	r7, sp, #0
#if LV_USE_TEXTAREA
    style_init_reset(&styles->ta_cursor);
 80232e0:	4b49      	ldr	r3, [pc, #292]	; (8023408 <textarea_init+0x12c>)
 80232e2:	681b      	ldr	r3, [r3, #0]
 80232e4:	33b8      	adds	r3, #184	; 0xb8
 80232e6:	4618      	mov	r0, r3
 80232e8:	f002 f8be 	bl	8025468 <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 80232ec:	4b46      	ldr	r3, [pc, #280]	; (8023408 <textarea_init+0x12c>)
 80232ee:	681b      	ldr	r3, [r3, #0]
 80232f0:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80232f4:	4b45      	ldr	r3, [pc, #276]	; (802340c <textarea_init+0x130>)
 80232f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80232f8:	f003 0302 	and.w	r3, r3, #2
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	d004      	beq.n	802330a <textarea_init+0x2e>
 8023300:	4843      	ldr	r0, [pc, #268]	; (8023410 <textarea_init+0x134>)
 8023302:	f7fb faf3 	bl	801e8ec <lv_color_hex>
 8023306:	4603      	mov	r3, r0
 8023308:	e003      	b.n	8023312 <textarea_init+0x36>
 802330a:	4842      	ldr	r0, [pc, #264]	; (8023414 <textarea_init+0x138>)
 802330c:	f7fb faee 	bl	801e8ec <lv_color_hex>
 8023310:	4603      	mov	r3, r0
 8023312:	461a      	mov	r2, r3
 8023314:	2100      	movs	r1, #0
 8023316:	4620      	mov	r0, r4
 8023318:	f7fb fced 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
 802331c:	4b3a      	ldr	r3, [pc, #232]	; (8023408 <textarea_init+0x12c>)
 802331e:	681b      	ldr	r3, [r3, #0]
 8023320:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8023324:	2000      	movs	r0, #0
 8023326:	f7f7 f877 	bl	801a418 <lv_disp_get_dpi>
 802332a:	4603      	mov	r3, r0
 802332c:	3328      	adds	r3, #40	; 0x28
 802332e:	005b      	lsls	r3, r3, #1
 8023330:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023334:	db0d      	blt.n	8023352 <textarea_init+0x76>
 8023336:	2000      	movs	r0, #0
 8023338:	f7f7 f86e 	bl	801a418 <lv_disp_get_dpi>
 802333c:	4603      	mov	r3, r0
 802333e:	3328      	adds	r3, #40	; 0x28
 8023340:	005b      	lsls	r3, r3, #1
 8023342:	4a35      	ldr	r2, [pc, #212]	; (8023418 <textarea_init+0x13c>)
 8023344:	fb82 1203 	smull	r1, r2, r2, r3
 8023348:	1192      	asrs	r2, r2, #6
 802334a:	17db      	asrs	r3, r3, #31
 802334c:	1ad3      	subs	r3, r2, r3
 802334e:	b21b      	sxth	r3, r3
 8023350:	e000      	b.n	8023354 <textarea_init+0x78>
 8023352:	2301      	movs	r3, #1
 8023354:	461a      	mov	r2, r3
 8023356:	2100      	movs	r1, #0
 8023358:	4620      	mov	r0, r4
 802335a:	f7fb fc81 	bl	801ec60 <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
 802335e:	4b2a      	ldr	r3, [pc, #168]	; (8023408 <textarea_init+0x12c>)
 8023360:	681b      	ldr	r3, [r3, #0]
 8023362:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8023366:	2000      	movs	r0, #0
 8023368:	f7f7 f856 	bl	801a418 <lv_disp_get_dpi>
 802336c:	4603      	mov	r3, r0
 802336e:	3350      	adds	r3, #80	; 0x50
 8023370:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023374:	db0c      	blt.n	8023390 <textarea_init+0xb4>
 8023376:	2000      	movs	r0, #0
 8023378:	f7f7 f84e 	bl	801a418 <lv_disp_get_dpi>
 802337c:	4603      	mov	r3, r0
 802337e:	3350      	adds	r3, #80	; 0x50
 8023380:	4a25      	ldr	r2, [pc, #148]	; (8023418 <textarea_init+0x13c>)
 8023382:	fb82 1203 	smull	r1, r2, r2, r3
 8023386:	1192      	asrs	r2, r2, #6
 8023388:	17db      	asrs	r3, r3, #31
 802338a:	1ad3      	subs	r3, r2, r3
 802338c:	b21b      	sxth	r3, r3
 802338e:	e000      	b.n	8023392 <textarea_init+0xb6>
 8023390:	2301      	movs	r3, #1
 8023392:	461a      	mov	r2, r3
 8023394:	2100      	movs	r1, #0
 8023396:	4620      	mov	r0, r4
 8023398:	f7fb fb84 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
 802339c:	4b1a      	ldr	r3, [pc, #104]	; (8023408 <textarea_init+0x12c>)
 802339e:	681b      	ldr	r3, [r3, #0]
 80233a0:	33b8      	adds	r3, #184	; 0xb8
 80233a2:	2204      	movs	r2, #4
 80233a4:	2100      	movs	r1, #0
 80233a6:	4618      	mov	r0, r3
 80233a8:	f7fb fc73 	bl	801ec92 <lv_style_set_border_side>

    style_init_reset(&styles->ta_placeholder);
 80233ac:	4b16      	ldr	r3, [pc, #88]	; (8023408 <textarea_init+0x12c>)
 80233ae:	681b      	ldr	r3, [r3, #0]
 80233b0:	33bc      	adds	r3, #188	; 0xbc
 80233b2:	4618      	mov	r0, r3
 80233b4:	f002 f858 	bl	8025468 <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 80233b8:	4b13      	ldr	r3, [pc, #76]	; (8023408 <textarea_init+0x12c>)
 80233ba:	681b      	ldr	r3, [r3, #0]
 80233bc:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 80233c0:	4b12      	ldr	r3, [pc, #72]	; (802340c <textarea_init+0x130>)
 80233c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80233c4:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 80233c8:	2b00      	cmp	r3, #0
 80233ca:	d011      	beq.n	80233f0 <textarea_init+0x114>
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 80233cc:	4b0f      	ldr	r3, [pc, #60]	; (802340c <textarea_init+0x130>)
 80233ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80233d0:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 80233d4:	2b00      	cmp	r3, #0
 80233d6:	d005      	beq.n	80233e4 <textarea_init+0x108>
 80233d8:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80233dc:	f7fb fa9a 	bl	801e914 <lv_color_hex3>
 80233e0:	4603      	mov	r3, r0
 80233e2:	e009      	b.n	80233f8 <textarea_init+0x11c>
 80233e4:	f640 1099 	movw	r0, #2457	; 0x999
 80233e8:	f7fb fa94 	bl	801e914 <lv_color_hex3>
 80233ec:	4603      	mov	r3, r0
 80233ee:	e003      	b.n	80233f8 <textarea_init+0x11c>
 80233f0:	480a      	ldr	r0, [pc, #40]	; (802341c <textarea_init+0x140>)
 80233f2:	f7fb fa7b 	bl	801e8ec <lv_color_hex>
 80233f6:	4603      	mov	r3, r0
 80233f8:	461a      	mov	r2, r3
 80233fa:	2100      	movs	r1, #0
 80233fc:	4620      	mov	r0, r4
 80233fe:	f7fb fde3 	bl	801efc8 <lv_style_set_text_color>
#endif
}
 8023402:	bf00      	nop
 8023404:	bd98      	pop	{r3, r4, r7, pc}
 8023406:	bf00      	nop
 8023408:	200200d4 	.word	0x200200d4
 802340c:	200200a8 	.word	0x200200a8
 8023410:	0031404f 	.word	0x0031404f
 8023414:	00a5a8ad 	.word	0x00a5a8ad
 8023418:	66666667 	.word	0x66666667
 802341c:	00a1adbd 	.word	0x00a1adbd

08023420 <spinbox_init>:

static void spinbox_init(void)
{
 8023420:	b598      	push	{r3, r4, r7, lr}
 8023422:	af00      	add	r7, sp, #0
#if LV_USE_SPINBOX

    style_init_reset(&styles->spinbox_cursor);
 8023424:	4b3d      	ldr	r3, [pc, #244]	; (802351c <spinbox_init+0xfc>)
 8023426:	681b      	ldr	r3, [r3, #0]
 8023428:	339c      	adds	r3, #156	; 0x9c
 802342a:	4618      	mov	r0, r3
 802342c:	f002 f81c 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023430:	4b3a      	ldr	r3, [pc, #232]	; (802351c <spinbox_init+0xfc>)
 8023432:	681b      	ldr	r3, [r3, #0]
 8023434:	339c      	adds	r3, #156	; 0x9c
 8023436:	22ff      	movs	r2, #255	; 0xff
 8023438:	2100      	movs	r1, #0
 802343a:	4618      	mov	r0, r3
 802343c:	f7fb fbf8 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
 8023440:	4b36      	ldr	r3, [pc, #216]	; (802351c <spinbox_init+0xfc>)
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 8023448:	4b35      	ldr	r3, [pc, #212]	; (8023520 <spinbox_init+0x100>)
 802344a:	68da      	ldr	r2, [r3, #12]
 802344c:	2100      	movs	r1, #0
 802344e:	f7fb fbd8 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8023452:	4b32      	ldr	r3, [pc, #200]	; (802351c <spinbox_init+0xfc>)
 8023454:	681b      	ldr	r3, [r3, #0]
 8023456:	339c      	adds	r3, #156	; 0x9c
 8023458:	4622      	mov	r2, r4
 802345a:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 802345e:	4622      	mov	r2, r4
 8023460:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8023464:	4622      	mov	r2, r4
 8023466:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 802346a:	4622      	mov	r2, r4
 802346c:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8023470:	4622      	mov	r2, r4
 8023472:	2100      	movs	r1, #0
 8023474:	4618      	mov	r0, r3
 8023476:	f7fb fda7 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 802347a:	4b28      	ldr	r3, [pc, #160]	; (802351c <spinbox_init+0xfc>)
 802347c:	681b      	ldr	r3, [r3, #0]
 802347e:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8023482:	2000      	movs	r0, #0
 8023484:	f7f6 ffc8 	bl	801a418 <lv_disp_get_dpi>
 8023488:	4603      	mov	r3, r0
 802348a:	461a      	mov	r2, r3
 802348c:	2364      	movs	r3, #100	; 0x64
 802348e:	fb03 f302 	mul.w	r3, r3, r2
 8023492:	3350      	adds	r3, #80	; 0x50
 8023494:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023498:	db10      	blt.n	80234bc <spinbox_init+0x9c>
 802349a:	2000      	movs	r0, #0
 802349c:	f7f6 ffbc 	bl	801a418 <lv_disp_get_dpi>
 80234a0:	4603      	mov	r3, r0
 80234a2:	461a      	mov	r2, r3
 80234a4:	2364      	movs	r3, #100	; 0x64
 80234a6:	fb03 f302 	mul.w	r3, r3, r2
 80234aa:	3350      	adds	r3, #80	; 0x50
 80234ac:	4a1d      	ldr	r2, [pc, #116]	; (8023524 <spinbox_init+0x104>)
 80234ae:	fb82 1203 	smull	r1, r2, r2, r3
 80234b2:	1192      	asrs	r2, r2, #6
 80234b4:	17db      	asrs	r3, r3, #31
 80234b6:	1ad3      	subs	r3, r2, r3
 80234b8:	b21b      	sxth	r3, r3
 80234ba:	e000      	b.n	80234be <spinbox_init+0x9e>
 80234bc:	2301      	movs	r3, #1
 80234be:	461a      	mov	r2, r3
 80234c0:	2100      	movs	r1, #0
 80234c2:	4620      	mov	r0, r4
 80234c4:	f7fb fabc 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 80234c8:	4b14      	ldr	r3, [pc, #80]	; (802351c <spinbox_init+0xfc>)
 80234ca:	681b      	ldr	r3, [r3, #0]
 80234cc:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80234d0:	2000      	movs	r0, #0
 80234d2:	f7f6 ffa1 	bl	801a418 <lv_disp_get_dpi>
 80234d6:	4603      	mov	r3, r0
 80234d8:	461a      	mov	r2, r3
 80234da:	2364      	movs	r3, #100	; 0x64
 80234dc:	fb03 f302 	mul.w	r3, r3, r2
 80234e0:	3350      	adds	r3, #80	; 0x50
 80234e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80234e6:	db10      	blt.n	802350a <spinbox_init+0xea>
 80234e8:	2000      	movs	r0, #0
 80234ea:	f7f6 ff95 	bl	801a418 <lv_disp_get_dpi>
 80234ee:	4603      	mov	r3, r0
 80234f0:	461a      	mov	r2, r3
 80234f2:	2364      	movs	r3, #100	; 0x64
 80234f4:	fb03 f302 	mul.w	r3, r3, r2
 80234f8:	3350      	adds	r3, #80	; 0x50
 80234fa:	4a0a      	ldr	r2, [pc, #40]	; (8023524 <spinbox_init+0x104>)
 80234fc:	fb82 1203 	smull	r1, r2, r2, r3
 8023500:	1192      	asrs	r2, r2, #6
 8023502:	17db      	asrs	r3, r3, #31
 8023504:	1ad3      	subs	r3, r2, r3
 8023506:	b21b      	sxth	r3, r3
 8023508:	e000      	b.n	802350c <spinbox_init+0xec>
 802350a:	2301      	movs	r3, #1
 802350c:	461a      	mov	r2, r3
 802350e:	2100      	movs	r1, #0
 8023510:	4620      	mov	r0, r4
 8023512:	f7fb faae 	bl	801ea72 <lv_style_set_pad_bottom>

#endif
}
 8023516:	bf00      	nop
 8023518:	bd98      	pop	{r3, r4, r7, pc}
 802351a:	bf00      	nop
 802351c:	200200d4 	.word	0x200200d4
 8023520:	200200a8 	.word	0x200200a8
 8023524:	66666667 	.word	0x66666667

08023528 <list_init>:

static void list_init(void)
{
 8023528:	b598      	push	{r3, r4, r7, lr}
 802352a:	af00      	add	r7, sp, #0
#if LV_USE_LIST != 0
    style_init_reset(&styles->list_bg);
 802352c:	4bab      	ldr	r3, [pc, #684]	; (80237dc <list_init+0x2b4>)
 802352e:	681b      	ldr	r3, [r3, #0]
 8023530:	3378      	adds	r3, #120	; 0x78
 8023532:	4618      	mov	r0, r3
 8023534:	f001 ff98 	bl	8025468 <style_init_reset>
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
 8023538:	4ba8      	ldr	r3, [pc, #672]	; (80237dc <list_init+0x2b4>)
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	3378      	adds	r3, #120	; 0x78
 802353e:	2201      	movs	r2, #1
 8023540:	2100      	movs	r1, #0
 8023542:	4618      	mov	r0, r3
 8023544:	f7fb fa31 	bl	801e9aa <lv_style_set_clip_corner>
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023548:	4ba4      	ldr	r3, [pc, #656]	; (80237dc <list_init+0x2b4>)
 802354a:	681b      	ldr	r3, [r3, #0]
 802354c:	3378      	adds	r3, #120	; 0x78
 802354e:	2200      	movs	r2, #0
 8023550:	2100      	movs	r1, #0
 8023552:	4618      	mov	r0, r3
 8023554:	f7fb faa6 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023558:	4ba0      	ldr	r3, [pc, #640]	; (80237dc <list_init+0x2b4>)
 802355a:	681b      	ldr	r3, [r3, #0]
 802355c:	3378      	adds	r3, #120	; 0x78
 802355e:	2200      	movs	r2, #0
 8023560:	2100      	movs	r1, #0
 8023562:	4618      	mov	r0, r3
 8023564:	f7fb fab7 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023568:	4b9c      	ldr	r3, [pc, #624]	; (80237dc <list_init+0x2b4>)
 802356a:	681b      	ldr	r3, [r3, #0]
 802356c:	3378      	adds	r3, #120	; 0x78
 802356e:	2200      	movs	r2, #0
 8023570:	2100      	movs	r1, #0
 8023572:	4618      	mov	r0, r3
 8023574:	f7fb fa64 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023578:	4b98      	ldr	r3, [pc, #608]	; (80237dc <list_init+0x2b4>)
 802357a:	681b      	ldr	r3, [r3, #0]
 802357c:	3378      	adds	r3, #120	; 0x78
 802357e:	2200      	movs	r2, #0
 8023580:	2100      	movs	r1, #0
 8023582:	4618      	mov	r0, r3
 8023584:	f7fb fa75 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023588:	4b94      	ldr	r3, [pc, #592]	; (80237dc <list_init+0x2b4>)
 802358a:	681b      	ldr	r3, [r3, #0]
 802358c:	3378      	adds	r3, #120	; 0x78
 802358e:	2200      	movs	r2, #0
 8023590:	2100      	movs	r1, #0
 8023592:	4618      	mov	r0, r3
 8023594:	f7fb fab8 	bl	801eb08 <lv_style_set_pad_inner>

    style_init_reset(&styles->list_btn);
 8023598:	4b90      	ldr	r3, [pc, #576]	; (80237dc <list_init+0x2b4>)
 802359a:	681b      	ldr	r3, [r3, #0]
 802359c:	337c      	adds	r3, #124	; 0x7c
 802359e:	4618      	mov	r0, r3
 80235a0:	f001 ff62 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 80235a4:	4b8d      	ldr	r3, [pc, #564]	; (80237dc <list_init+0x2b4>)
 80235a6:	681b      	ldr	r3, [r3, #0]
 80235a8:	337c      	adds	r3, #124	; 0x7c
 80235aa:	22ff      	movs	r2, #255	; 0xff
 80235ac:	2100      	movs	r1, #0
 80235ae:	4618      	mov	r0, r3
 80235b0:	f7fb fb3e 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
 80235b4:	4b89      	ldr	r3, [pc, #548]	; (80237dc <list_init+0x2b4>)
 80235b6:	681b      	ldr	r3, [r3, #0]
 80235b8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80235bc:	4b88      	ldr	r3, [pc, #544]	; (80237e0 <list_init+0x2b8>)
 80235be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80235c0:	f003 0302 	and.w	r3, r3, #2
 80235c4:	2b00      	cmp	r3, #0
 80235c6:	d005      	beq.n	80235d4 <list_init+0xac>
 80235c8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80235cc:	f7fb f98e 	bl	801e8ec <lv_color_hex>
 80235d0:	4603      	mov	r3, r0
 80235d2:	e003      	b.n	80235dc <list_init+0xb4>
 80235d4:	4883      	ldr	r0, [pc, #524]	; (80237e4 <list_init+0x2bc>)
 80235d6:	f7fb f989 	bl	801e8ec <lv_color_hex>
 80235da:	4603      	mov	r3, r0
 80235dc:	461a      	mov	r2, r3
 80235de:	2100      	movs	r1, #0
 80235e0:	4620      	mov	r0, r4
 80235e2:	f7fb fb0e 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
 80235e6:	4b7d      	ldr	r3, [pc, #500]	; (80237dc <list_init+0x2b4>)
 80235e8:	681b      	ldr	r3, [r3, #0]
 80235ea:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80235ee:	4b7c      	ldr	r3, [pc, #496]	; (80237e0 <list_init+0x2b8>)
 80235f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80235f2:	f003 0302 	and.w	r3, r3, #2
 80235f6:	2b00      	cmp	r3, #0
 80235f8:	d004      	beq.n	8023604 <list_init+0xdc>
 80235fa:	487b      	ldr	r0, [pc, #492]	; (80237e8 <list_init+0x2c0>)
 80235fc:	f7fb f976 	bl	801e8ec <lv_color_hex>
 8023600:	4603      	mov	r3, r0
 8023602:	e003      	b.n	802360c <list_init+0xe4>
 8023604:	4879      	ldr	r0, [pc, #484]	; (80237ec <list_init+0x2c4>)
 8023606:	f7fb f971 	bl	801e8ec <lv_color_hex>
 802360a:	4603      	mov	r3, r0
 802360c:	461a      	mov	r2, r3
 802360e:	2110      	movs	r1, #16
 8023610:	4620      	mov	r0, r4
 8023612:	f7fb faf6 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
 8023616:	4b71      	ldr	r3, [pc, #452]	; (80237dc <list_init+0x2b4>)
 8023618:	681b      	ldr	r3, [r3, #0]
 802361a:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 802361e:	4b70      	ldr	r3, [pc, #448]	; (80237e0 <list_init+0x2b8>)
 8023620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023622:	f003 0302 	and.w	r3, r3, #2
 8023626:	2b00      	cmp	r3, #0
 8023628:	d005      	beq.n	8023636 <list_init+0x10e>
 802362a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802362e:	f7fb f95d 	bl	801e8ec <lv_color_hex>
 8023632:	4603      	mov	r3, r0
 8023634:	e003      	b.n	802363e <list_init+0x116>
 8023636:	486b      	ldr	r0, [pc, #428]	; (80237e4 <list_init+0x2bc>)
 8023638:	f7fb f958 	bl	801e8ec <lv_color_hex>
 802363c:	4603      	mov	r3, r0
 802363e:	461a      	mov	r2, r3
 8023640:	2120      	movs	r1, #32
 8023642:	4620      	mov	r0, r4
 8023644:	f7fb fadd 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
 8023648:	4b64      	ldr	r3, [pc, #400]	; (80237dc <list_init+0x2b4>)
 802364a:	681b      	ldr	r3, [r3, #0]
 802364c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8023650:	4b63      	ldr	r3, [pc, #396]	; (80237e0 <list_init+0x2b8>)
 8023652:	68da      	ldr	r2, [r3, #12]
 8023654:	2101      	movs	r1, #1
 8023656:	f7fb fad4 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
 802365a:	4b60      	ldr	r3, [pc, #384]	; (80237dc <list_init+0x2b4>)
 802365c:	681b      	ldr	r3, [r3, #0]
 802365e:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023662:	4b5f      	ldr	r3, [pc, #380]	; (80237e0 <list_init+0x2b8>)
 8023664:	2133      	movs	r1, #51	; 0x33
 8023666:	68d8      	ldr	r0, [r3, #12]
 8023668:	f7f8 fa6c 	bl	801bb44 <lv_color_darken>
 802366c:	4603      	mov	r3, r0
 802366e:	461a      	mov	r2, r3
 8023670:	2111      	movs	r1, #17
 8023672:	4620      	mov	r0, r4
 8023674:	f7fb fac5 	bl	801ec02 <lv_style_set_bg_color>

    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8023678:	4b58      	ldr	r3, [pc, #352]	; (80237dc <list_init+0x2b4>)
 802367a:	681b      	ldr	r3, [r3, #0]
 802367c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023680:	4b57      	ldr	r3, [pc, #348]	; (80237e0 <list_init+0x2b8>)
 8023682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023684:	f003 0302 	and.w	r3, r3, #2
 8023688:	2b00      	cmp	r3, #0
 802368a:	d004      	beq.n	8023696 <list_init+0x16e>
 802368c:	4858      	ldr	r0, [pc, #352]	; (80237f0 <list_init+0x2c8>)
 802368e:	f7fb f92d 	bl	801e8ec <lv_color_hex>
 8023692:	4603      	mov	r3, r0
 8023694:	e004      	b.n	80236a0 <list_init+0x178>
 8023696:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802369a:	f7fb f927 	bl	801e8ec <lv_color_hex>
 802369e:	4603      	mov	r3, r0
 80236a0:	461a      	mov	r2, r3
 80236a2:	2100      	movs	r1, #0
 80236a4:	4620      	mov	r0, r4
 80236a6:	f7fb fc8f 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 80236aa:	4b4c      	ldr	r3, [pc, #304]	; (80237dc <list_init+0x2b4>)
 80236ac:	681b      	ldr	r3, [r3, #0]
 80236ae:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80236b2:	4b4b      	ldr	r3, [pc, #300]	; (80237e0 <list_init+0x2b8>)
 80236b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236b6:	f003 0302 	and.w	r3, r3, #2
 80236ba:	2b00      	cmp	r3, #0
 80236bc:	d005      	beq.n	80236ca <list_init+0x1a2>
 80236be:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80236c2:	f7fb f913 	bl	801e8ec <lv_color_hex>
 80236c6:	4603      	mov	r3, r0
 80236c8:	e004      	b.n	80236d4 <list_init+0x1ac>
 80236ca:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80236ce:	f7fb f90d 	bl	801e8ec <lv_color_hex>
 80236d2:	4603      	mov	r3, r0
 80236d4:	461a      	mov	r2, r3
 80236d6:	2101      	movs	r1, #1
 80236d8:	4620      	mov	r0, r4
 80236da:	f7fb fc75 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 80236de:	4b3f      	ldr	r3, [pc, #252]	; (80237dc <list_init+0x2b4>)
 80236e0:	681b      	ldr	r3, [r3, #0]
 80236e2:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80236e6:	4b3e      	ldr	r3, [pc, #248]	; (80237e0 <list_init+0x2b8>)
 80236e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236ea:	f003 0302 	and.w	r3, r3, #2
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	d005      	beq.n	80236fe <list_init+0x1d6>
 80236f2:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80236f6:	f7fb f90d 	bl	801e914 <lv_color_hex3>
 80236fa:	4603      	mov	r3, r0
 80236fc:	e004      	b.n	8023708 <list_init+0x1e0>
 80236fe:	f640 1099 	movw	r0, #2457	; 0x999
 8023702:	f7fb f907 	bl	801e914 <lv_color_hex3>
 8023706:	4603      	mov	r3, r0
 8023708:	461a      	mov	r2, r3
 802370a:	2120      	movs	r1, #32
 802370c:	4620      	mov	r0, r4
 802370e:	f7fb fc5b 	bl	801efc8 <lv_style_set_text_color>

    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8023712:	4b32      	ldr	r3, [pc, #200]	; (80237dc <list_init+0x2b4>)
 8023714:	681b      	ldr	r3, [r3, #0]
 8023716:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 802371a:	4b31      	ldr	r3, [pc, #196]	; (80237e0 <list_init+0x2b8>)
 802371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802371e:	f003 0302 	and.w	r3, r3, #2
 8023722:	2b00      	cmp	r3, #0
 8023724:	d004      	beq.n	8023730 <list_init+0x208>
 8023726:	4832      	ldr	r0, [pc, #200]	; (80237f0 <list_init+0x2c8>)
 8023728:	f7fb f8e0 	bl	801e8ec <lv_color_hex>
 802372c:	4603      	mov	r3, r0
 802372e:	e004      	b.n	802373a <list_init+0x212>
 8023730:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023734:	f7fb f8da 	bl	801e8ec <lv_color_hex>
 8023738:	4603      	mov	r3, r0
 802373a:	461a      	mov	r2, r3
 802373c:	2100      	movs	r1, #0
 802373e:	4620      	mov	r0, r4
 8023740:	f7fb fd26 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 8023744:	4b25      	ldr	r3, [pc, #148]	; (80237dc <list_init+0x2b4>)
 8023746:	681b      	ldr	r3, [r3, #0]
 8023748:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 802374c:	4b24      	ldr	r3, [pc, #144]	; (80237e0 <list_init+0x2b8>)
 802374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023750:	f003 0302 	and.w	r3, r3, #2
 8023754:	2b00      	cmp	r3, #0
 8023756:	d005      	beq.n	8023764 <list_init+0x23c>
 8023758:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802375c:	f7fb f8c6 	bl	801e8ec <lv_color_hex>
 8023760:	4603      	mov	r3, r0
 8023762:	e004      	b.n	802376e <list_init+0x246>
 8023764:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023768:	f7fb f8c0 	bl	801e8ec <lv_color_hex>
 802376c:	4603      	mov	r3, r0
 802376e:	461a      	mov	r2, r3
 8023770:	2101      	movs	r1, #1
 8023772:	4620      	mov	r0, r4
 8023774:	f7fb fd0c 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 8023778:	4b18      	ldr	r3, [pc, #96]	; (80237dc <list_init+0x2b4>)
 802377a:	681b      	ldr	r3, [r3, #0]
 802377c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023780:	4b17      	ldr	r3, [pc, #92]	; (80237e0 <list_init+0x2b8>)
 8023782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023784:	f003 0302 	and.w	r3, r3, #2
 8023788:	2b00      	cmp	r3, #0
 802378a:	d005      	beq.n	8023798 <list_init+0x270>
 802378c:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8023790:	f7fb f8c0 	bl	801e914 <lv_color_hex3>
 8023794:	4603      	mov	r3, r0
 8023796:	e004      	b.n	80237a2 <list_init+0x27a>
 8023798:	f640 1099 	movw	r0, #2457	; 0x999
 802379c:	f7fb f8ba 	bl	801e914 <lv_color_hex3>
 80237a0:	4603      	mov	r3, r0
 80237a2:	461a      	mov	r2, r3
 80237a4:	2120      	movs	r1, #32
 80237a6:	4620      	mov	r0, r4
 80237a8:	f7fb fcf2 	bl	801f190 <lv_style_set_image_recolor>

    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
 80237ac:	4b0b      	ldr	r3, [pc, #44]	; (80237dc <list_init+0x2b4>)
 80237ae:	681b      	ldr	r3, [r3, #0]
 80237b0:	337c      	adds	r3, #124	; 0x7c
 80237b2:	2201      	movs	r2, #1
 80237b4:	2100      	movs	r1, #0
 80237b6:	4618      	mov	r0, r3
 80237b8:	f7fb fa6b 	bl	801ec92 <lv_style_set_border_side>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 80237bc:	4b07      	ldr	r3, [pc, #28]	; (80237dc <list_init+0x2b4>)
 80237be:	681b      	ldr	r3, [r3, #0]
 80237c0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80237c4:	4b06      	ldr	r3, [pc, #24]	; (80237e0 <list_init+0x2b8>)
 80237c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80237c8:	f003 0302 	and.w	r3, r3, #2
 80237cc:	2b00      	cmp	r3, #0
 80237ce:	d013      	beq.n	80237f8 <list_init+0x2d0>
 80237d0:	4808      	ldr	r0, [pc, #32]	; (80237f4 <list_init+0x2cc>)
 80237d2:	f7fb f88b 	bl	801e8ec <lv_color_hex>
 80237d6:	4603      	mov	r3, r0
 80237d8:	e012      	b.n	8023800 <list_init+0x2d8>
 80237da:	bf00      	nop
 80237dc:	200200d4 	.word	0x200200d4
 80237e0:	200200a8 	.word	0x200200a8
 80237e4:	00586273 	.word	0x00586273
 80237e8:	00eeeeee 	.word	0x00eeeeee
 80237ec:	00494f57 	.word	0x00494f57
 80237f0:	003b3e42 	.word	0x003b3e42
 80237f4:	00d6dde3 	.word	0x00d6dde3
 80237f8:	48cf      	ldr	r0, [pc, #828]	; (8023b38 <list_init+0x610>)
 80237fa:	f7fb f877 	bl	801e8ec <lv_color_hex>
 80237fe:	4603      	mov	r3, r0
 8023800:	461a      	mov	r2, r3
 8023802:	2100      	movs	r1, #0
 8023804:	4620      	mov	r0, r4
 8023806:	f7fb fa76 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
 802380a:	4bcc      	ldr	r3, [pc, #816]	; (8023b3c <list_init+0x614>)
 802380c:	681b      	ldr	r3, [r3, #0]
 802380e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8023812:	4bcb      	ldr	r3, [pc, #812]	; (8023b40 <list_init+0x618>)
 8023814:	68da      	ldr	r2, [r3, #12]
 8023816:	2102      	movs	r1, #2
 8023818:	f7fb fa6d 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
 802381c:	4bc7      	ldr	r3, [pc, #796]	; (8023b3c <list_init+0x614>)
 802381e:	681b      	ldr	r3, [r3, #0]
 8023820:	337c      	adds	r3, #124	; 0x7c
 8023822:	2201      	movs	r2, #1
 8023824:	2100      	movs	r1, #0
 8023826:	4618      	mov	r0, r3
 8023828:	f7fb fa1a 	bl	801ec60 <lv_style_set_border_width>

    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
 802382c:	4bc3      	ldr	r3, [pc, #780]	; (8023b3c <list_init+0x614>)
 802382e:	681b      	ldr	r3, [r3, #0]
 8023830:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8023834:	4bc2      	ldr	r3, [pc, #776]	; (8023b40 <list_init+0x618>)
 8023836:	691a      	ldr	r2, [r3, #16]
 8023838:	2102      	movs	r1, #2
 802383a:	f7fb fabd 	bl	801edb8 <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
 802383e:	4bbf      	ldr	r3, [pc, #764]	; (8023b3c <list_init+0x614>)
 8023840:	681b      	ldr	r3, [r3, #0]
 8023842:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023846:	4bbe      	ldr	r3, [pc, #760]	; (8023b40 <list_init+0x618>)
 8023848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802384a:	f003 0320 	and.w	r3, r3, #32
 802384e:	2b00      	cmp	r3, #0
 8023850:	d118      	bne.n	8023884 <list_init+0x35c>
 8023852:	2000      	movs	r0, #0
 8023854:	f7f6 fde0 	bl	801a418 <lv_disp_get_dpi>
 8023858:	4603      	mov	r3, r0
 802385a:	3328      	adds	r3, #40	; 0x28
 802385c:	005b      	lsls	r3, r3, #1
 802385e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023862:	db0d      	blt.n	8023880 <list_init+0x358>
 8023864:	2000      	movs	r0, #0
 8023866:	f7f6 fdd7 	bl	801a418 <lv_disp_get_dpi>
 802386a:	4603      	mov	r3, r0
 802386c:	3328      	adds	r3, #40	; 0x28
 802386e:	005b      	lsls	r3, r3, #1
 8023870:	4ab4      	ldr	r2, [pc, #720]	; (8023b44 <list_init+0x61c>)
 8023872:	fb82 1203 	smull	r1, r2, r2, r3
 8023876:	1192      	asrs	r2, r2, #6
 8023878:	17db      	asrs	r3, r3, #31
 802387a:	1ad3      	subs	r3, r2, r3
 802387c:	b21b      	sxth	r3, r3
 802387e:	e002      	b.n	8023886 <list_init+0x35e>
 8023880:	2301      	movs	r3, #1
 8023882:	e000      	b.n	8023886 <list_init+0x35e>
 8023884:	2300      	movs	r3, #0
 8023886:	461a      	mov	r2, r3
 8023888:	2102      	movs	r1, #2
 802388a:	4620      	mov	r0, r4
 802388c:	f7fb fa62 	bl	801ed54 <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
 8023890:	4baa      	ldr	r3, [pc, #680]	; (8023b3c <list_init+0x614>)
 8023892:	681b      	ldr	r3, [r3, #0]
 8023894:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023898:	2000      	movs	r0, #0
 802389a:	f7f6 fdbd 	bl	801a418 <lv_disp_get_dpi>
 802389e:	4603      	mov	r3, r0
 80238a0:	3328      	adds	r3, #40	; 0x28
 80238a2:	005b      	lsls	r3, r3, #1
 80238a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80238a8:	db0d      	blt.n	80238c6 <list_init+0x39e>
 80238aa:	2000      	movs	r0, #0
 80238ac:	f7f6 fdb4 	bl	801a418 <lv_disp_get_dpi>
 80238b0:	4603      	mov	r3, r0
 80238b2:	3328      	adds	r3, #40	; 0x28
 80238b4:	005b      	lsls	r3, r3, #1
 80238b6:	4aa3      	ldr	r2, [pc, #652]	; (8023b44 <list_init+0x61c>)
 80238b8:	fb82 1203 	smull	r1, r2, r2, r3
 80238bc:	1192      	asrs	r2, r2, #6
 80238be:	17db      	asrs	r3, r3, #31
 80238c0:	1a9b      	subs	r3, r3, r2
 80238c2:	b21b      	sxth	r3, r3
 80238c4:	e001      	b.n	80238ca <list_init+0x3a2>
 80238c6:	f04f 33ff 	mov.w	r3, #4294967295
 80238ca:	461a      	mov	r2, r3
 80238cc:	2102      	movs	r1, #2
 80238ce:	4620      	mov	r0, r4
 80238d0:	f7fb fa59 	bl	801ed86 <lv_style_set_outline_pad>

    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 80238d4:	4b99      	ldr	r3, [pc, #612]	; (8023b3c <list_init+0x614>)
 80238d6:	681b      	ldr	r3, [r3, #0]
 80238d8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80238dc:	2000      	movs	r0, #0
 80238de:	f7f6 fdb4 	bl	801a44a <lv_disp_get_size_category>
 80238e2:	4603      	mov	r3, r0
 80238e4:	2b01      	cmp	r3, #1
 80238e6:	d81e      	bhi.n	8023926 <list_init+0x3fe>
 80238e8:	2000      	movs	r0, #0
 80238ea:	f7f6 fd95 	bl	801a418 <lv_disp_get_dpi>
 80238ee:	4603      	mov	r3, r0
 80238f0:	461a      	mov	r2, r3
 80238f2:	4613      	mov	r3, r2
 80238f4:	011b      	lsls	r3, r3, #4
 80238f6:	1a9b      	subs	r3, r3, r2
 80238f8:	3350      	adds	r3, #80	; 0x50
 80238fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80238fe:	db10      	blt.n	8023922 <list_init+0x3fa>
 8023900:	2000      	movs	r0, #0
 8023902:	f7f6 fd89 	bl	801a418 <lv_disp_get_dpi>
 8023906:	4603      	mov	r3, r0
 8023908:	461a      	mov	r2, r3
 802390a:	4613      	mov	r3, r2
 802390c:	011b      	lsls	r3, r3, #4
 802390e:	1a9b      	subs	r3, r3, r2
 8023910:	3350      	adds	r3, #80	; 0x50
 8023912:	4a8c      	ldr	r2, [pc, #560]	; (8023b44 <list_init+0x61c>)
 8023914:	fb82 1203 	smull	r1, r2, r2, r3
 8023918:	1192      	asrs	r2, r2, #6
 802391a:	17db      	asrs	r3, r3, #31
 802391c:	1ad3      	subs	r3, r2, r3
 802391e:	b21b      	sxth	r3, r3
 8023920:	e021      	b.n	8023966 <list_init+0x43e>
 8023922:	2301      	movs	r3, #1
 8023924:	e01f      	b.n	8023966 <list_init+0x43e>
 8023926:	2000      	movs	r0, #0
 8023928:	f7f6 fd76 	bl	801a418 <lv_disp_get_dpi>
 802392c:	4603      	mov	r3, r0
 802392e:	461a      	mov	r2, r3
 8023930:	4613      	mov	r3, r2
 8023932:	011b      	lsls	r3, r3, #4
 8023934:	1a9b      	subs	r3, r3, r2
 8023936:	005b      	lsls	r3, r3, #1
 8023938:	3350      	adds	r3, #80	; 0x50
 802393a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802393e:	db11      	blt.n	8023964 <list_init+0x43c>
 8023940:	2000      	movs	r0, #0
 8023942:	f7f6 fd69 	bl	801a418 <lv_disp_get_dpi>
 8023946:	4603      	mov	r3, r0
 8023948:	461a      	mov	r2, r3
 802394a:	4613      	mov	r3, r2
 802394c:	011b      	lsls	r3, r3, #4
 802394e:	1a9b      	subs	r3, r3, r2
 8023950:	005b      	lsls	r3, r3, #1
 8023952:	3350      	adds	r3, #80	; 0x50
 8023954:	4a7b      	ldr	r2, [pc, #492]	; (8023b44 <list_init+0x61c>)
 8023956:	fb82 1203 	smull	r1, r2, r2, r3
 802395a:	1192      	asrs	r2, r2, #6
 802395c:	17db      	asrs	r3, r3, #31
 802395e:	1ad3      	subs	r3, r2, r3
 8023960:	b21b      	sxth	r3, r3
 8023962:	e000      	b.n	8023966 <list_init+0x43e>
 8023964:	2301      	movs	r3, #1
 8023966:	461a      	mov	r2, r3
 8023968:	2100      	movs	r1, #0
 802396a:	4620      	mov	r0, r4
 802396c:	f7fb f89a 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8023970:	4b72      	ldr	r3, [pc, #456]	; (8023b3c <list_init+0x614>)
 8023972:	681b      	ldr	r3, [r3, #0]
 8023974:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023978:	2000      	movs	r0, #0
 802397a:	f7f6 fd66 	bl	801a44a <lv_disp_get_size_category>
 802397e:	4603      	mov	r3, r0
 8023980:	2b01      	cmp	r3, #1
 8023982:	d81e      	bhi.n	80239c2 <list_init+0x49a>
 8023984:	2000      	movs	r0, #0
 8023986:	f7f6 fd47 	bl	801a418 <lv_disp_get_dpi>
 802398a:	4603      	mov	r3, r0
 802398c:	461a      	mov	r2, r3
 802398e:	4613      	mov	r3, r2
 8023990:	011b      	lsls	r3, r3, #4
 8023992:	1a9b      	subs	r3, r3, r2
 8023994:	3350      	adds	r3, #80	; 0x50
 8023996:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802399a:	db10      	blt.n	80239be <list_init+0x496>
 802399c:	2000      	movs	r0, #0
 802399e:	f7f6 fd3b 	bl	801a418 <lv_disp_get_dpi>
 80239a2:	4603      	mov	r3, r0
 80239a4:	461a      	mov	r2, r3
 80239a6:	4613      	mov	r3, r2
 80239a8:	011b      	lsls	r3, r3, #4
 80239aa:	1a9b      	subs	r3, r3, r2
 80239ac:	3350      	adds	r3, #80	; 0x50
 80239ae:	4a65      	ldr	r2, [pc, #404]	; (8023b44 <list_init+0x61c>)
 80239b0:	fb82 1203 	smull	r1, r2, r2, r3
 80239b4:	1192      	asrs	r2, r2, #6
 80239b6:	17db      	asrs	r3, r3, #31
 80239b8:	1ad3      	subs	r3, r2, r3
 80239ba:	b21b      	sxth	r3, r3
 80239bc:	e021      	b.n	8023a02 <list_init+0x4da>
 80239be:	2301      	movs	r3, #1
 80239c0:	e01f      	b.n	8023a02 <list_init+0x4da>
 80239c2:	2000      	movs	r0, #0
 80239c4:	f7f6 fd28 	bl	801a418 <lv_disp_get_dpi>
 80239c8:	4603      	mov	r3, r0
 80239ca:	461a      	mov	r2, r3
 80239cc:	4613      	mov	r3, r2
 80239ce:	011b      	lsls	r3, r3, #4
 80239d0:	1a9b      	subs	r3, r3, r2
 80239d2:	005b      	lsls	r3, r3, #1
 80239d4:	3350      	adds	r3, #80	; 0x50
 80239d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80239da:	db11      	blt.n	8023a00 <list_init+0x4d8>
 80239dc:	2000      	movs	r0, #0
 80239de:	f7f6 fd1b 	bl	801a418 <lv_disp_get_dpi>
 80239e2:	4603      	mov	r3, r0
 80239e4:	461a      	mov	r2, r3
 80239e6:	4613      	mov	r3, r2
 80239e8:	011b      	lsls	r3, r3, #4
 80239ea:	1a9b      	subs	r3, r3, r2
 80239ec:	005b      	lsls	r3, r3, #1
 80239ee:	3350      	adds	r3, #80	; 0x50
 80239f0:	4a54      	ldr	r2, [pc, #336]	; (8023b44 <list_init+0x61c>)
 80239f2:	fb82 1203 	smull	r1, r2, r2, r3
 80239f6:	1192      	asrs	r2, r2, #6
 80239f8:	17db      	asrs	r3, r3, #31
 80239fa:	1ad3      	subs	r3, r2, r3
 80239fc:	b21b      	sxth	r3, r3
 80239fe:	e000      	b.n	8023a02 <list_init+0x4da>
 8023a00:	2301      	movs	r3, #1
 8023a02:	461a      	mov	r2, r3
 8023a04:	2100      	movs	r1, #0
 8023a06:	4620      	mov	r0, r4
 8023a08:	f7fb f865 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8023a0c:	4b4b      	ldr	r3, [pc, #300]	; (8023b3c <list_init+0x614>)
 8023a0e:	681b      	ldr	r3, [r3, #0]
 8023a10:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023a14:	2000      	movs	r0, #0
 8023a16:	f7f6 fd18 	bl	801a44a <lv_disp_get_size_category>
 8023a1a:	4603      	mov	r3, r0
 8023a1c:	2b01      	cmp	r3, #1
 8023a1e:	d81e      	bhi.n	8023a5e <list_init+0x536>
 8023a20:	2000      	movs	r0, #0
 8023a22:	f7f6 fcf9 	bl	801a418 <lv_disp_get_dpi>
 8023a26:	4603      	mov	r3, r0
 8023a28:	461a      	mov	r2, r3
 8023a2a:	4613      	mov	r3, r2
 8023a2c:	011b      	lsls	r3, r3, #4
 8023a2e:	1a9b      	subs	r3, r3, r2
 8023a30:	3350      	adds	r3, #80	; 0x50
 8023a32:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023a36:	db10      	blt.n	8023a5a <list_init+0x532>
 8023a38:	2000      	movs	r0, #0
 8023a3a:	f7f6 fced 	bl	801a418 <lv_disp_get_dpi>
 8023a3e:	4603      	mov	r3, r0
 8023a40:	461a      	mov	r2, r3
 8023a42:	4613      	mov	r3, r2
 8023a44:	011b      	lsls	r3, r3, #4
 8023a46:	1a9b      	subs	r3, r3, r2
 8023a48:	3350      	adds	r3, #80	; 0x50
 8023a4a:	4a3e      	ldr	r2, [pc, #248]	; (8023b44 <list_init+0x61c>)
 8023a4c:	fb82 1203 	smull	r1, r2, r2, r3
 8023a50:	1192      	asrs	r2, r2, #6
 8023a52:	17db      	asrs	r3, r3, #31
 8023a54:	1ad3      	subs	r3, r2, r3
 8023a56:	b21b      	sxth	r3, r3
 8023a58:	e021      	b.n	8023a9e <list_init+0x576>
 8023a5a:	2301      	movs	r3, #1
 8023a5c:	e01f      	b.n	8023a9e <list_init+0x576>
 8023a5e:	2000      	movs	r0, #0
 8023a60:	f7f6 fcda 	bl	801a418 <lv_disp_get_dpi>
 8023a64:	4603      	mov	r3, r0
 8023a66:	461a      	mov	r2, r3
 8023a68:	4613      	mov	r3, r2
 8023a6a:	011b      	lsls	r3, r3, #4
 8023a6c:	1a9b      	subs	r3, r3, r2
 8023a6e:	005b      	lsls	r3, r3, #1
 8023a70:	3350      	adds	r3, #80	; 0x50
 8023a72:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023a76:	db11      	blt.n	8023a9c <list_init+0x574>
 8023a78:	2000      	movs	r0, #0
 8023a7a:	f7f6 fccd 	bl	801a418 <lv_disp_get_dpi>
 8023a7e:	4603      	mov	r3, r0
 8023a80:	461a      	mov	r2, r3
 8023a82:	4613      	mov	r3, r2
 8023a84:	011b      	lsls	r3, r3, #4
 8023a86:	1a9b      	subs	r3, r3, r2
 8023a88:	005b      	lsls	r3, r3, #1
 8023a8a:	3350      	adds	r3, #80	; 0x50
 8023a8c:	4a2d      	ldr	r2, [pc, #180]	; (8023b44 <list_init+0x61c>)
 8023a8e:	fb82 1203 	smull	r1, r2, r2, r3
 8023a92:	1192      	asrs	r2, r2, #6
 8023a94:	17db      	asrs	r3, r3, #31
 8023a96:	1ad3      	subs	r3, r2, r3
 8023a98:	b21b      	sxth	r3, r3
 8023a9a:	e000      	b.n	8023a9e <list_init+0x576>
 8023a9c:	2301      	movs	r3, #1
 8023a9e:	461a      	mov	r2, r3
 8023aa0:	2100      	movs	r1, #0
 8023aa2:	4620      	mov	r0, r4
 8023aa4:	f7fa ffcc 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8023aa8:	4b24      	ldr	r3, [pc, #144]	; (8023b3c <list_init+0x614>)
 8023aaa:	681b      	ldr	r3, [r3, #0]
 8023aac:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023ab0:	2000      	movs	r0, #0
 8023ab2:	f7f6 fcca 	bl	801a44a <lv_disp_get_size_category>
 8023ab6:	4603      	mov	r3, r0
 8023ab8:	2b01      	cmp	r3, #1
 8023aba:	d81e      	bhi.n	8023afa <list_init+0x5d2>
 8023abc:	2000      	movs	r0, #0
 8023abe:	f7f6 fcab 	bl	801a418 <lv_disp_get_dpi>
 8023ac2:	4603      	mov	r3, r0
 8023ac4:	461a      	mov	r2, r3
 8023ac6:	4613      	mov	r3, r2
 8023ac8:	011b      	lsls	r3, r3, #4
 8023aca:	1a9b      	subs	r3, r3, r2
 8023acc:	3350      	adds	r3, #80	; 0x50
 8023ace:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023ad2:	db10      	blt.n	8023af6 <list_init+0x5ce>
 8023ad4:	2000      	movs	r0, #0
 8023ad6:	f7f6 fc9f 	bl	801a418 <lv_disp_get_dpi>
 8023ada:	4603      	mov	r3, r0
 8023adc:	461a      	mov	r2, r3
 8023ade:	4613      	mov	r3, r2
 8023ae0:	011b      	lsls	r3, r3, #4
 8023ae2:	1a9b      	subs	r3, r3, r2
 8023ae4:	3350      	adds	r3, #80	; 0x50
 8023ae6:	4a17      	ldr	r2, [pc, #92]	; (8023b44 <list_init+0x61c>)
 8023ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8023aec:	1192      	asrs	r2, r2, #6
 8023aee:	17db      	asrs	r3, r3, #31
 8023af0:	1ad3      	subs	r3, r2, r3
 8023af2:	b21b      	sxth	r3, r3
 8023af4:	e029      	b.n	8023b4a <list_init+0x622>
 8023af6:	2301      	movs	r3, #1
 8023af8:	e027      	b.n	8023b4a <list_init+0x622>
 8023afa:	2000      	movs	r0, #0
 8023afc:	f7f6 fc8c 	bl	801a418 <lv_disp_get_dpi>
 8023b00:	4603      	mov	r3, r0
 8023b02:	461a      	mov	r2, r3
 8023b04:	4613      	mov	r3, r2
 8023b06:	011b      	lsls	r3, r3, #4
 8023b08:	1a9b      	subs	r3, r3, r2
 8023b0a:	005b      	lsls	r3, r3, #1
 8023b0c:	3350      	adds	r3, #80	; 0x50
 8023b0e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023b12:	db19      	blt.n	8023b48 <list_init+0x620>
 8023b14:	2000      	movs	r0, #0
 8023b16:	f7f6 fc7f 	bl	801a418 <lv_disp_get_dpi>
 8023b1a:	4603      	mov	r3, r0
 8023b1c:	461a      	mov	r2, r3
 8023b1e:	4613      	mov	r3, r2
 8023b20:	011b      	lsls	r3, r3, #4
 8023b22:	1a9b      	subs	r3, r3, r2
 8023b24:	005b      	lsls	r3, r3, #1
 8023b26:	3350      	adds	r3, #80	; 0x50
 8023b28:	4a06      	ldr	r2, [pc, #24]	; (8023b44 <list_init+0x61c>)
 8023b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8023b2e:	1192      	asrs	r2, r2, #6
 8023b30:	17db      	asrs	r3, r3, #31
 8023b32:	1ad3      	subs	r3, r2, r3
 8023b34:	b21b      	sxth	r3, r3
 8023b36:	e008      	b.n	8023b4a <list_init+0x622>
 8023b38:	00808a97 	.word	0x00808a97
 8023b3c:	200200d4 	.word	0x200200d4
 8023b40:	200200a8 	.word	0x200200a8
 8023b44:	66666667 	.word	0x66666667
 8023b48:	2301      	movs	r3, #1
 8023b4a:	461a      	mov	r2, r3
 8023b4c:	2100      	movs	r1, #0
 8023b4e:	4620      	mov	r0, r4
 8023b50:	f7fa ff8f 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8023b54:	4b9f      	ldr	r3, [pc, #636]	; (8023dd4 <list_init+0x8ac>)
 8023b56:	681b      	ldr	r3, [r3, #0]
 8023b58:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023b5c:	2000      	movs	r0, #0
 8023b5e:	f7f6 fc74 	bl	801a44a <lv_disp_get_size_category>
 8023b62:	4603      	mov	r3, r0
 8023b64:	2b01      	cmp	r3, #1
 8023b66:	d81e      	bhi.n	8023ba6 <list_init+0x67e>
 8023b68:	2000      	movs	r0, #0
 8023b6a:	f7f6 fc55 	bl	801a418 <lv_disp_get_dpi>
 8023b6e:	4603      	mov	r3, r0
 8023b70:	461a      	mov	r2, r3
 8023b72:	4613      	mov	r3, r2
 8023b74:	011b      	lsls	r3, r3, #4
 8023b76:	1a9b      	subs	r3, r3, r2
 8023b78:	3350      	adds	r3, #80	; 0x50
 8023b7a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023b7e:	db10      	blt.n	8023ba2 <list_init+0x67a>
 8023b80:	2000      	movs	r0, #0
 8023b82:	f7f6 fc49 	bl	801a418 <lv_disp_get_dpi>
 8023b86:	4603      	mov	r3, r0
 8023b88:	461a      	mov	r2, r3
 8023b8a:	4613      	mov	r3, r2
 8023b8c:	011b      	lsls	r3, r3, #4
 8023b8e:	1a9b      	subs	r3, r3, r2
 8023b90:	3350      	adds	r3, #80	; 0x50
 8023b92:	4a91      	ldr	r2, [pc, #580]	; (8023dd8 <list_init+0x8b0>)
 8023b94:	fb82 1203 	smull	r1, r2, r2, r3
 8023b98:	1192      	asrs	r2, r2, #6
 8023b9a:	17db      	asrs	r3, r3, #31
 8023b9c:	1ad3      	subs	r3, r2, r3
 8023b9e:	b21b      	sxth	r3, r3
 8023ba0:	e021      	b.n	8023be6 <list_init+0x6be>
 8023ba2:	2301      	movs	r3, #1
 8023ba4:	e01f      	b.n	8023be6 <list_init+0x6be>
 8023ba6:	2000      	movs	r0, #0
 8023ba8:	f7f6 fc36 	bl	801a418 <lv_disp_get_dpi>
 8023bac:	4603      	mov	r3, r0
 8023bae:	461a      	mov	r2, r3
 8023bb0:	4613      	mov	r3, r2
 8023bb2:	011b      	lsls	r3, r3, #4
 8023bb4:	1a9b      	subs	r3, r3, r2
 8023bb6:	005b      	lsls	r3, r3, #1
 8023bb8:	3350      	adds	r3, #80	; 0x50
 8023bba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023bbe:	db11      	blt.n	8023be4 <list_init+0x6bc>
 8023bc0:	2000      	movs	r0, #0
 8023bc2:	f7f6 fc29 	bl	801a418 <lv_disp_get_dpi>
 8023bc6:	4603      	mov	r3, r0
 8023bc8:	461a      	mov	r2, r3
 8023bca:	4613      	mov	r3, r2
 8023bcc:	011b      	lsls	r3, r3, #4
 8023bce:	1a9b      	subs	r3, r3, r2
 8023bd0:	005b      	lsls	r3, r3, #1
 8023bd2:	3350      	adds	r3, #80	; 0x50
 8023bd4:	4a80      	ldr	r2, [pc, #512]	; (8023dd8 <list_init+0x8b0>)
 8023bd6:	fb82 1203 	smull	r1, r2, r2, r3
 8023bda:	1192      	asrs	r2, r2, #6
 8023bdc:	17db      	asrs	r3, r3, #31
 8023bde:	1ad3      	subs	r3, r2, r3
 8023be0:	b21b      	sxth	r3, r3
 8023be2:	e000      	b.n	8023be6 <list_init+0x6be>
 8023be4:	2301      	movs	r3, #1
 8023be6:	461a      	mov	r2, r3
 8023be8:	2100      	movs	r1, #0
 8023bea:	4620      	mov	r0, r4
 8023bec:	f7fa ff8c 	bl	801eb08 <lv_style_set_pad_inner>

    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
 8023bf0:	4b78      	ldr	r3, [pc, #480]	; (8023dd4 <list_init+0x8ac>)
 8023bf2:	681b      	ldr	r3, [r3, #0]
 8023bf4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023bf8:	2000      	movs	r0, #0
 8023bfa:	f7f6 fc26 	bl	801a44a <lv_disp_get_size_category>
 8023bfe:	4603      	mov	r3, r0
 8023c00:	2b01      	cmp	r3, #1
 8023c02:	d81f      	bhi.n	8023c44 <list_init+0x71c>
 8023c04:	2000      	movs	r0, #0
 8023c06:	f7f6 fc07 	bl	801a418 <lv_disp_get_dpi>
 8023c0a:	4603      	mov	r3, r0
 8023c0c:	461a      	mov	r2, r3
 8023c0e:	4613      	mov	r3, r2
 8023c10:	011b      	lsls	r3, r3, #4
 8023c12:	1a9b      	subs	r3, r3, r2
 8023c14:	3350      	adds	r3, #80	; 0x50
 8023c16:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023c1a:	db10      	blt.n	8023c3e <list_init+0x716>
 8023c1c:	2000      	movs	r0, #0
 8023c1e:	f7f6 fbfb 	bl	801a418 <lv_disp_get_dpi>
 8023c22:	4603      	mov	r3, r0
 8023c24:	461a      	mov	r2, r3
 8023c26:	4613      	mov	r3, r2
 8023c28:	011b      	lsls	r3, r3, #4
 8023c2a:	1a9b      	subs	r3, r3, r2
 8023c2c:	3350      	adds	r3, #80	; 0x50
 8023c2e:	4a6a      	ldr	r2, [pc, #424]	; (8023dd8 <list_init+0x8b0>)
 8023c30:	fb82 1203 	smull	r1, r2, r2, r3
 8023c34:	1192      	asrs	r2, r2, #6
 8023c36:	17db      	asrs	r3, r3, #31
 8023c38:	1a9b      	subs	r3, r3, r2
 8023c3a:	b21b      	sxth	r3, r3
 8023c3c:	e023      	b.n	8023c86 <list_init+0x75e>
 8023c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8023c42:	e020      	b.n	8023c86 <list_init+0x75e>
 8023c44:	2000      	movs	r0, #0
 8023c46:	f7f6 fbe7 	bl	801a418 <lv_disp_get_dpi>
 8023c4a:	4603      	mov	r3, r0
 8023c4c:	461a      	mov	r2, r3
 8023c4e:	4613      	mov	r3, r2
 8023c50:	011b      	lsls	r3, r3, #4
 8023c52:	1a9b      	subs	r3, r3, r2
 8023c54:	005b      	lsls	r3, r3, #1
 8023c56:	3350      	adds	r3, #80	; 0x50
 8023c58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023c5c:	db11      	blt.n	8023c82 <list_init+0x75a>
 8023c5e:	2000      	movs	r0, #0
 8023c60:	f7f6 fbda 	bl	801a418 <lv_disp_get_dpi>
 8023c64:	4603      	mov	r3, r0
 8023c66:	461a      	mov	r2, r3
 8023c68:	4613      	mov	r3, r2
 8023c6a:	011b      	lsls	r3, r3, #4
 8023c6c:	1a9b      	subs	r3, r3, r2
 8023c6e:	005b      	lsls	r3, r3, #1
 8023c70:	3350      	adds	r3, #80	; 0x50
 8023c72:	4a59      	ldr	r2, [pc, #356]	; (8023dd8 <list_init+0x8b0>)
 8023c74:	fb82 1203 	smull	r1, r2, r2, r3
 8023c78:	1192      	asrs	r2, r2, #6
 8023c7a:	17db      	asrs	r3, r3, #31
 8023c7c:	1a9b      	subs	r3, r3, r2
 8023c7e:	b21b      	sxth	r3, r3
 8023c80:	e001      	b.n	8023c86 <list_init+0x75e>
 8023c82:	f04f 33ff 	mov.w	r3, #4294967295
 8023c86:	461a      	mov	r2, r3
 8023c88:	2100      	movs	r1, #0
 8023c8a:	4620      	mov	r0, r4
 8023c8c:	f7fa febf 	bl	801ea0e <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
 8023c90:	4b50      	ldr	r3, [pc, #320]	; (8023dd4 <list_init+0x8ac>)
 8023c92:	681b      	ldr	r3, [r3, #0]
 8023c94:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023c98:	2000      	movs	r0, #0
 8023c9a:	f7f6 fbbd 	bl	801a418 <lv_disp_get_dpi>
 8023c9e:	4603      	mov	r3, r0
 8023ca0:	3328      	adds	r3, #40	; 0x28
 8023ca2:	005b      	lsls	r3, r3, #1
 8023ca4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023ca8:	db0d      	blt.n	8023cc6 <list_init+0x79e>
 8023caa:	2000      	movs	r0, #0
 8023cac:	f7f6 fbb4 	bl	801a418 <lv_disp_get_dpi>
 8023cb0:	4603      	mov	r3, r0
 8023cb2:	3328      	adds	r3, #40	; 0x28
 8023cb4:	005b      	lsls	r3, r3, #1
 8023cb6:	4a48      	ldr	r2, [pc, #288]	; (8023dd8 <list_init+0x8b0>)
 8023cb8:	fb82 1203 	smull	r1, r2, r2, r3
 8023cbc:	1192      	asrs	r2, r2, #6
 8023cbe:	17db      	asrs	r3, r3, #31
 8023cc0:	1a9b      	subs	r3, r3, r2
 8023cc2:	b21b      	sxth	r3, r3
 8023cc4:	e001      	b.n	8023cca <list_init+0x7a2>
 8023cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8023cca:	461a      	mov	r2, r3
 8023ccc:	2110      	movs	r1, #16
 8023cce:	4620      	mov	r0, r4
 8023cd0:	f7fa fe9d 	bl	801ea0e <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
 8023cd4:	4b3f      	ldr	r3, [pc, #252]	; (8023dd4 <list_init+0x8ac>)
 8023cd6:	681b      	ldr	r3, [r3, #0]
 8023cd8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023cdc:	2000      	movs	r0, #0
 8023cde:	f7f6 fb9b 	bl	801a418 <lv_disp_get_dpi>
 8023ce2:	4603      	mov	r3, r0
 8023ce4:	3328      	adds	r3, #40	; 0x28
 8023ce6:	005b      	lsls	r3, r3, #1
 8023ce8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023cec:	db0d      	blt.n	8023d0a <list_init+0x7e2>
 8023cee:	2000      	movs	r0, #0
 8023cf0:	f7f6 fb92 	bl	801a418 <lv_disp_get_dpi>
 8023cf4:	4603      	mov	r3, r0
 8023cf6:	3328      	adds	r3, #40	; 0x28
 8023cf8:	005b      	lsls	r3, r3, #1
 8023cfa:	4a37      	ldr	r2, [pc, #220]	; (8023dd8 <list_init+0x8b0>)
 8023cfc:	fb82 1203 	smull	r1, r2, r2, r3
 8023d00:	1192      	asrs	r2, r2, #6
 8023d02:	17db      	asrs	r3, r3, #31
 8023d04:	1a9b      	subs	r3, r3, r2
 8023d06:	b21b      	sxth	r3, r3
 8023d08:	e001      	b.n	8023d0e <list_init+0x7e6>
 8023d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8023d0e:	461a      	mov	r2, r3
 8023d10:	2101      	movs	r1, #1
 8023d12:	4620      	mov	r0, r4
 8023d14:	f7fa fe7b 	bl	801ea0e <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
 8023d18:	4b2e      	ldr	r3, [pc, #184]	; (8023dd4 <list_init+0x8ac>)
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023d20:	2000      	movs	r0, #0
 8023d22:	f7f6 fb79 	bl	801a418 <lv_disp_get_dpi>
 8023d26:	4603      	mov	r3, r0
 8023d28:	3328      	adds	r3, #40	; 0x28
 8023d2a:	005b      	lsls	r3, r3, #1
 8023d2c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023d30:	db0d      	blt.n	8023d4e <list_init+0x826>
 8023d32:	2000      	movs	r0, #0
 8023d34:	f7f6 fb70 	bl	801a418 <lv_disp_get_dpi>
 8023d38:	4603      	mov	r3, r0
 8023d3a:	3328      	adds	r3, #40	; 0x28
 8023d3c:	005b      	lsls	r3, r3, #1
 8023d3e:	4a26      	ldr	r2, [pc, #152]	; (8023dd8 <list_init+0x8b0>)
 8023d40:	fb82 1203 	smull	r1, r2, r2, r3
 8023d44:	1192      	asrs	r2, r2, #6
 8023d46:	17db      	asrs	r3, r3, #31
 8023d48:	1a9b      	subs	r3, r3, r2
 8023d4a:	b21b      	sxth	r3, r3
 8023d4c:	e001      	b.n	8023d52 <list_init+0x82a>
 8023d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8023d52:	461a      	mov	r2, r3
 8023d54:	2120      	movs	r1, #32
 8023d56:	4620      	mov	r0, r4
 8023d58:	f7fa fe59 	bl	801ea0e <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
 8023d5c:	4b1d      	ldr	r3, [pc, #116]	; (8023dd4 <list_init+0x8ac>)
 8023d5e:	681b      	ldr	r3, [r3, #0]
 8023d60:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023d64:	2000      	movs	r0, #0
 8023d66:	f7f6 fb57 	bl	801a418 <lv_disp_get_dpi>
 8023d6a:	4603      	mov	r3, r0
 8023d6c:	3328      	adds	r3, #40	; 0x28
 8023d6e:	005b      	lsls	r3, r3, #1
 8023d70:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023d74:	db0d      	blt.n	8023d92 <list_init+0x86a>
 8023d76:	2000      	movs	r0, #0
 8023d78:	f7f6 fb4e 	bl	801a418 <lv_disp_get_dpi>
 8023d7c:	4603      	mov	r3, r0
 8023d7e:	3328      	adds	r3, #40	; 0x28
 8023d80:	005b      	lsls	r3, r3, #1
 8023d82:	4a15      	ldr	r2, [pc, #84]	; (8023dd8 <list_init+0x8b0>)
 8023d84:	fb82 1203 	smull	r1, r2, r2, r3
 8023d88:	1192      	asrs	r2, r2, #6
 8023d8a:	17db      	asrs	r3, r3, #31
 8023d8c:	1a9b      	subs	r3, r3, r2
 8023d8e:	b21b      	sxth	r3, r3
 8023d90:	e001      	b.n	8023d96 <list_init+0x86e>
 8023d92:	f04f 33ff 	mov.w	r3, #4294967295
 8023d96:	461a      	mov	r2, r3
 8023d98:	2102      	movs	r1, #2
 8023d9a:	4620      	mov	r0, r4
 8023d9c:	f7fa fe37 	bl	801ea0e <lv_style_set_transform_width>

    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 8023da0:	4b0c      	ldr	r3, [pc, #48]	; (8023dd4 <list_init+0x8ac>)
 8023da2:	681b      	ldr	r3, [r3, #0]
 8023da4:	337c      	adds	r3, #124	; 0x7c
 8023da6:	2200      	movs	r2, #0
 8023da8:	2100      	movs	r1, #0
 8023daa:	4618      	mov	r0, r3
 8023dac:	f7fb fa0a 	bl	801f1c4 <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 8023db0:	4b08      	ldr	r3, [pc, #32]	; (8023dd4 <list_init+0x8ac>)
 8023db2:	681b      	ldr	r3, [r3, #0]
 8023db4:	337c      	adds	r3, #124	; 0x7c
 8023db6:	2229      	movs	r2, #41	; 0x29
 8023db8:	2100      	movs	r1, #0
 8023dba:	4618      	mov	r0, r3
 8023dbc:	f7fb fa7f 	bl	801f2be <lv_style_set_transition_prop_6>
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
 8023dc0:	4b04      	ldr	r3, [pc, #16]	; (8023dd4 <list_init+0x8ac>)
 8023dc2:	681b      	ldr	r3, [r3, #0]
 8023dc4:	337c      	adds	r3, #124	; 0x7c
 8023dc6:	2204      	movs	r2, #4
 8023dc8:	2100      	movs	r1, #0
 8023dca:	4618      	mov	r0, r3
 8023dcc:	f7fb fa5e 	bl	801f28c <lv_style_set_transition_prop_5>
#endif
}
 8023dd0:	bf00      	nop
 8023dd2:	bd98      	pop	{r3, r4, r7, pc}
 8023dd4:	200200d4 	.word	0x200200d4
 8023dd8:	66666667 	.word	0x66666667

08023ddc <ddlist_init>:

static void ddlist_init(void)
{
 8023ddc:	b598      	push	{r3, r4, r7, lr}
 8023dde:	af00      	add	r7, sp, #0
#if LV_USE_DROPDOWN != 0

    style_init_reset(&styles->ddlist_page);
 8023de0:	4b4d      	ldr	r3, [pc, #308]	; (8023f18 <ddlist_init+0x13c>)
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	3358      	adds	r3, #88	; 0x58
 8023de6:	4618      	mov	r0, r3
 8023de8:	f001 fb3e 	bl	8025468 <style_init_reset>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
 8023dec:	4b4a      	ldr	r3, [pc, #296]	; (8023f18 <ddlist_init+0x13c>)
 8023dee:	681b      	ldr	r3, [r3, #0]
 8023df0:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8023df4:	2000      	movs	r0, #0
 8023df6:	f7f6 fb0f 	bl	801a418 <lv_disp_get_dpi>
 8023dfa:	4603      	mov	r3, r0
 8023dfc:	461a      	mov	r2, r3
 8023dfe:	4613      	mov	r3, r2
 8023e00:	009b      	lsls	r3, r3, #2
 8023e02:	4413      	add	r3, r2
 8023e04:	009b      	lsls	r3, r3, #2
 8023e06:	3350      	adds	r3, #80	; 0x50
 8023e08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023e0c:	db11      	blt.n	8023e32 <ddlist_init+0x56>
 8023e0e:	2000      	movs	r0, #0
 8023e10:	f7f6 fb02 	bl	801a418 <lv_disp_get_dpi>
 8023e14:	4603      	mov	r3, r0
 8023e16:	461a      	mov	r2, r3
 8023e18:	4613      	mov	r3, r2
 8023e1a:	009b      	lsls	r3, r3, #2
 8023e1c:	4413      	add	r3, r2
 8023e1e:	009b      	lsls	r3, r3, #2
 8023e20:	3350      	adds	r3, #80	; 0x50
 8023e22:	4a3e      	ldr	r2, [pc, #248]	; (8023f1c <ddlist_init+0x140>)
 8023e24:	fb82 1203 	smull	r1, r2, r2, r3
 8023e28:	1192      	asrs	r2, r2, #6
 8023e2a:	17db      	asrs	r3, r3, #31
 8023e2c:	1ad3      	subs	r3, r2, r3
 8023e2e:	b21b      	sxth	r3, r3
 8023e30:	e000      	b.n	8023e34 <ddlist_init+0x58>
 8023e32:	2301      	movs	r3, #1
 8023e34:	461a      	mov	r2, r3
 8023e36:	2100      	movs	r1, #0
 8023e38:	4620      	mov	r0, r4
 8023e3a:	f7fb f8a9 	bl	801ef90 <lv_style_set_text_line_space>
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
 8023e3e:	4b36      	ldr	r3, [pc, #216]	; (8023f18 <ddlist_init+0x13c>)
 8023e40:	681b      	ldr	r3, [r3, #0]
 8023e42:	3358      	adds	r3, #88	; 0x58
 8023e44:	2201      	movs	r2, #1
 8023e46:	2100      	movs	r1, #0
 8023e48:	4618      	mov	r0, r3
 8023e4a:	f7fa fdae 	bl	801e9aa <lv_style_set_clip_corner>

    style_init_reset(&styles->ddlist_sel);
 8023e4e:	4b32      	ldr	r3, [pc, #200]	; (8023f18 <ddlist_init+0x13c>)
 8023e50:	681b      	ldr	r3, [r3, #0]
 8023e52:	335c      	adds	r3, #92	; 0x5c
 8023e54:	4618      	mov	r0, r3
 8023e56:	f001 fb07 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023e5a:	4b2f      	ldr	r3, [pc, #188]	; (8023f18 <ddlist_init+0x13c>)
 8023e5c:	681b      	ldr	r3, [r3, #0]
 8023e5e:	335c      	adds	r3, #92	; 0x5c
 8023e60:	22ff      	movs	r2, #255	; 0xff
 8023e62:	2100      	movs	r1, #0
 8023e64:	4618      	mov	r0, r3
 8023e66:	f7fa fee3 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
 8023e6a:	4b2b      	ldr	r3, [pc, #172]	; (8023f18 <ddlist_init+0x13c>)
 8023e6c:	681b      	ldr	r3, [r3, #0]
 8023e6e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8023e72:	4b2b      	ldr	r3, [pc, #172]	; (8023f20 <ddlist_init+0x144>)
 8023e74:	68da      	ldr	r2, [r3, #12]
 8023e76:	2100      	movs	r1, #0
 8023e78:	f7fa fec3 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
 8023e7c:	4b26      	ldr	r3, [pc, #152]	; (8023f18 <ddlist_init+0x13c>)
 8023e7e:	681b      	ldr	r3, [r3, #0]
 8023e80:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8023e84:	4b26      	ldr	r3, [pc, #152]	; (8023f20 <ddlist_init+0x144>)
 8023e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e88:	f003 0302 	and.w	r3, r3, #2
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	d005      	beq.n	8023e9c <ddlist_init+0xc0>
 8023e90:	f640 70ff 	movw	r0, #4095	; 0xfff
 8023e94:	f7fa fd3e 	bl	801e914 <lv_color_hex3>
 8023e98:	4603      	mov	r3, r0
 8023e9a:	e004      	b.n	8023ea6 <ddlist_init+0xca>
 8023e9c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8023ea0:	f7fa fd38 	bl	801e914 <lv_color_hex3>
 8023ea4:	4603      	mov	r3, r0
 8023ea6:	461a      	mov	r2, r3
 8023ea8:	2100      	movs	r1, #0
 8023eaa:	4620      	mov	r0, r4
 8023eac:	f7fb f88c 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
 8023eb0:	4b19      	ldr	r3, [pc, #100]	; (8023f18 <ddlist_init+0x13c>)
 8023eb2:	681b      	ldr	r3, [r3, #0]
 8023eb4:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8023eb8:	4b19      	ldr	r3, [pc, #100]	; (8023f20 <ddlist_init+0x144>)
 8023eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ebc:	f003 0302 	and.w	r3, r3, #2
 8023ec0:	2b00      	cmp	r3, #0
 8023ec2:	d004      	beq.n	8023ece <ddlist_init+0xf2>
 8023ec4:	4817      	ldr	r0, [pc, #92]	; (8023f24 <ddlist_init+0x148>)
 8023ec6:	f7fa fd11 	bl	801e8ec <lv_color_hex>
 8023eca:	4603      	mov	r3, r0
 8023ecc:	e003      	b.n	8023ed6 <ddlist_init+0xfa>
 8023ece:	4816      	ldr	r0, [pc, #88]	; (8023f28 <ddlist_init+0x14c>)
 8023ed0:	f7fa fd0c 	bl	801e8ec <lv_color_hex>
 8023ed4:	4603      	mov	r3, r0
 8023ed6:	461a      	mov	r2, r3
 8023ed8:	2110      	movs	r1, #16
 8023eda:	4620      	mov	r0, r4
 8023edc:	f7fa fe91 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 8023ee0:	4b0d      	ldr	r3, [pc, #52]	; (8023f18 <ddlist_init+0x13c>)
 8023ee2:	681b      	ldr	r3, [r3, #0]
 8023ee4:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8023ee8:	4b0d      	ldr	r3, [pc, #52]	; (8023f20 <ddlist_init+0x144>)
 8023eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023eec:	f003 0302 	and.w	r3, r3, #2
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	d004      	beq.n	8023efe <ddlist_init+0x122>
 8023ef4:	480d      	ldr	r0, [pc, #52]	; (8023f2c <ddlist_init+0x150>)
 8023ef6:	f7fa fcf9 	bl	801e8ec <lv_color_hex>
 8023efa:	4603      	mov	r3, r0
 8023efc:	e004      	b.n	8023f08 <ddlist_init+0x12c>
 8023efe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023f02:	f7fa fcf3 	bl	801e8ec <lv_color_hex>
 8023f06:	4603      	mov	r3, r0
 8023f08:	461a      	mov	r2, r3
 8023f0a:	2110      	movs	r1, #16
 8023f0c:	4620      	mov	r0, r4
 8023f0e:	f7fb f85b 	bl	801efc8 <lv_style_set_text_color>
#endif
}
 8023f12:	bf00      	nop
 8023f14:	bd98      	pop	{r3, r4, r7, pc}
 8023f16:	bf00      	nop
 8023f18:	200200d4 	.word	0x200200d4
 8023f1c:	66666667 	.word	0x66666667
 8023f20:	200200a8 	.word	0x200200a8
 8023f24:	00eeeeee 	.word	0x00eeeeee
 8023f28:	00494f57 	.word	0x00494f57
 8023f2c:	003b3e42 	.word	0x003b3e42

08023f30 <roller_init>:

static void roller_init(void)
{
 8023f30:	b5b0      	push	{r4, r5, r7, lr}
 8023f32:	af00      	add	r7, sp, #0
#if LV_USE_ROLLER != 0
    style_init_reset(&styles->roller_bg);
 8023f34:	4b2e      	ldr	r3, [pc, #184]	; (8023ff0 <roller_init+0xc0>)
 8023f36:	681b      	ldr	r3, [r3, #0]
 8023f38:	338c      	adds	r3, #140	; 0x8c
 8023f3a:	4618      	mov	r0, r3
 8023f3c:	f001 fa94 	bl	8025468 <style_init_reset>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
 8023f40:	4b2b      	ldr	r3, [pc, #172]	; (8023ff0 <roller_init+0xc0>)
 8023f42:	681b      	ldr	r3, [r3, #0]
 8023f44:	f103 058c 	add.w	r5, r3, #140	; 0x8c
 8023f48:	2000      	movs	r0, #0
 8023f4a:	f7f6 fa65 	bl	801a418 <lv_disp_get_dpi>
 8023f4e:	4603      	mov	r3, r0
 8023f50:	461a      	mov	r2, r3
 8023f52:	4613      	mov	r3, r2
 8023f54:	009b      	lsls	r3, r3, #2
 8023f56:	4413      	add	r3, r2
 8023f58:	009a      	lsls	r2, r3, #2
 8023f5a:	4413      	add	r3, r2
 8023f5c:	3350      	adds	r3, #80	; 0x50
 8023f5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023f62:	db12      	blt.n	8023f8a <roller_init+0x5a>
 8023f64:	2000      	movs	r0, #0
 8023f66:	f7f6 fa57 	bl	801a418 <lv_disp_get_dpi>
 8023f6a:	4603      	mov	r3, r0
 8023f6c:	461a      	mov	r2, r3
 8023f6e:	4613      	mov	r3, r2
 8023f70:	009b      	lsls	r3, r3, #2
 8023f72:	4413      	add	r3, r2
 8023f74:	009a      	lsls	r2, r3, #2
 8023f76:	4413      	add	r3, r2
 8023f78:	3350      	adds	r3, #80	; 0x50
 8023f7a:	4a1e      	ldr	r2, [pc, #120]	; (8023ff4 <roller_init+0xc4>)
 8023f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8023f80:	1192      	asrs	r2, r2, #6
 8023f82:	17db      	asrs	r3, r3, #31
 8023f84:	1ad3      	subs	r3, r2, r3
 8023f86:	b21b      	sxth	r3, r3
 8023f88:	e000      	b.n	8023f8c <roller_init+0x5c>
 8023f8a:	2301      	movs	r3, #1
 8023f8c:	461a      	mov	r2, r3
 8023f8e:	2100      	movs	r1, #0
 8023f90:	4628      	mov	r0, r5
 8023f92:	f7fa fffd 	bl	801ef90 <lv_style_set_text_line_space>

    style_init_reset(&styles->roller_sel);
 8023f96:	4b16      	ldr	r3, [pc, #88]	; (8023ff0 <roller_init+0xc0>)
 8023f98:	681b      	ldr	r3, [r3, #0]
 8023f9a:	3390      	adds	r3, #144	; 0x90
 8023f9c:	4618      	mov	r0, r3
 8023f9e:	f001 fa63 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023fa2:	4b13      	ldr	r3, [pc, #76]	; (8023ff0 <roller_init+0xc0>)
 8023fa4:	681b      	ldr	r3, [r3, #0]
 8023fa6:	3390      	adds	r3, #144	; 0x90
 8023fa8:	22ff      	movs	r2, #255	; 0xff
 8023faa:	2100      	movs	r1, #0
 8023fac:	4618      	mov	r0, r3
 8023fae:	f7fa fe3f 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
 8023fb2:	4b0f      	ldr	r3, [pc, #60]	; (8023ff0 <roller_init+0xc0>)
 8023fb4:	681b      	ldr	r3, [r3, #0]
 8023fb6:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8023fba:	4b0f      	ldr	r3, [pc, #60]	; (8023ff8 <roller_init+0xc8>)
 8023fbc:	68da      	ldr	r2, [r3, #12]
 8023fbe:	2100      	movs	r1, #0
 8023fc0:	f7fa fe1f 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8023fc4:	4b0a      	ldr	r3, [pc, #40]	; (8023ff0 <roller_init+0xc0>)
 8023fc6:	681b      	ldr	r3, [r3, #0]
 8023fc8:	3390      	adds	r3, #144	; 0x90
 8023fca:	4622      	mov	r2, r4
 8023fcc:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 8023fd0:	4622      	mov	r2, r4
 8023fd2:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8023fd6:	4622      	mov	r2, r4
 8023fd8:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 8023fdc:	4622      	mov	r2, r4
 8023fde:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8023fe2:	4622      	mov	r2, r4
 8023fe4:	2100      	movs	r1, #0
 8023fe6:	4618      	mov	r0, r3
 8023fe8:	f7fa ffee 	bl	801efc8 <lv_style_set_text_color>
#endif
}
 8023fec:	bf00      	nop
 8023fee:	bdb0      	pop	{r4, r5, r7, pc}
 8023ff0:	200200d4 	.word	0x200200d4
 8023ff4:	66666667 	.word	0x66666667
 8023ff8:	200200a8 	.word	0x200200a8

08023ffc <tabview_init>:

static void tabview_init(void)
{
 8023ffc:	b480      	push	{r7}
 8023ffe:	af00      	add	r7, sp, #0
#if LV_USE_TABVIEW != 0
#endif
}
 8024000:	bf00      	nop
 8024002:	46bd      	mov	sp, r7
 8024004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024008:	4770      	bx	lr

0802400a <tileview_init>:

static void tileview_init(void)
{
 802400a:	b480      	push	{r7}
 802400c:	af00      	add	r7, sp, #0
#if LV_USE_TILEVIEW != 0
#endif
}
 802400e:	bf00      	nop
 8024010:	46bd      	mov	sp, r7
 8024012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024016:	4770      	bx	lr

08024018 <table_init>:

static void table_init(void)
{
 8024018:	b598      	push	{r3, r4, r7, lr}
 802401a:	af00      	add	r7, sp, #0
#if LV_USE_TABLE != 0
    style_init_reset(&styles->table_cell);
 802401c:	4bb3      	ldr	r3, [pc, #716]	; (80242ec <table_init+0x2d4>)
 802401e:	681b      	ldr	r3, [r3, #0]
 8024020:	33a4      	adds	r3, #164	; 0xa4
 8024022:	4618      	mov	r0, r3
 8024024:	f001 fa20 	bl	8025468 <style_init_reset>
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8024028:	4bb0      	ldr	r3, [pc, #704]	; (80242ec <table_init+0x2d4>)
 802402a:	681b      	ldr	r3, [r3, #0]
 802402c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8024030:	4baf      	ldr	r3, [pc, #700]	; (80242f0 <table_init+0x2d8>)
 8024032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024034:	f003 0302 	and.w	r3, r3, #2
 8024038:	2b00      	cmp	r3, #0
 802403a:	d004      	beq.n	8024046 <table_init+0x2e>
 802403c:	48ad      	ldr	r0, [pc, #692]	; (80242f4 <table_init+0x2dc>)
 802403e:	f7fa fc55 	bl	801e8ec <lv_color_hex>
 8024042:	4603      	mov	r3, r0
 8024044:	e003      	b.n	802404e <table_init+0x36>
 8024046:	48ac      	ldr	r0, [pc, #688]	; (80242f8 <table_init+0x2e0>)
 8024048:	f7fa fc50 	bl	801e8ec <lv_color_hex>
 802404c:	4603      	mov	r3, r0
 802404e:	461a      	mov	r2, r3
 8024050:	2100      	movs	r1, #0
 8024052:	4620      	mov	r0, r4
 8024054:	f7fa fe4f 	bl	801ecf6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
 8024058:	4ba4      	ldr	r3, [pc, #656]	; (80242ec <table_init+0x2d4>)
 802405a:	681b      	ldr	r3, [r3, #0]
 802405c:	33a4      	adds	r3, #164	; 0xa4
 802405e:	2201      	movs	r2, #1
 8024060:	2100      	movs	r1, #0
 8024062:	4618      	mov	r0, r3
 8024064:	f7fa fdfc 	bl	801ec60 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
 8024068:	4ba0      	ldr	r3, [pc, #640]	; (80242ec <table_init+0x2d4>)
 802406a:	681b      	ldr	r3, [r3, #0]
 802406c:	33a4      	adds	r3, #164	; 0xa4
 802406e:	2203      	movs	r2, #3
 8024070:	2100      	movs	r1, #0
 8024072:	4618      	mov	r0, r3
 8024074:	f7fa fe0d 	bl	801ec92 <lv_style_set_border_side>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8024078:	4b9c      	ldr	r3, [pc, #624]	; (80242ec <table_init+0x2d4>)
 802407a:	681b      	ldr	r3, [r3, #0]
 802407c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8024080:	2000      	movs	r0, #0
 8024082:	f7f6 f9e2 	bl	801a44a <lv_disp_get_size_category>
 8024086:	4603      	mov	r3, r0
 8024088:	2b01      	cmp	r3, #1
 802408a:	d81e      	bhi.n	80240ca <table_init+0xb2>
 802408c:	2000      	movs	r0, #0
 802408e:	f7f6 f9c3 	bl	801a418 <lv_disp_get_dpi>
 8024092:	4603      	mov	r3, r0
 8024094:	461a      	mov	r2, r3
 8024096:	4613      	mov	r3, r2
 8024098:	011b      	lsls	r3, r3, #4
 802409a:	1a9b      	subs	r3, r3, r2
 802409c:	3350      	adds	r3, #80	; 0x50
 802409e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80240a2:	db10      	blt.n	80240c6 <table_init+0xae>
 80240a4:	2000      	movs	r0, #0
 80240a6:	f7f6 f9b7 	bl	801a418 <lv_disp_get_dpi>
 80240aa:	4603      	mov	r3, r0
 80240ac:	461a      	mov	r2, r3
 80240ae:	4613      	mov	r3, r2
 80240b0:	011b      	lsls	r3, r3, #4
 80240b2:	1a9b      	subs	r3, r3, r2
 80240b4:	3350      	adds	r3, #80	; 0x50
 80240b6:	4a91      	ldr	r2, [pc, #580]	; (80242fc <table_init+0x2e4>)
 80240b8:	fb82 1203 	smull	r1, r2, r2, r3
 80240bc:	1192      	asrs	r2, r2, #6
 80240be:	17db      	asrs	r3, r3, #31
 80240c0:	1ad3      	subs	r3, r2, r3
 80240c2:	b21b      	sxth	r3, r3
 80240c4:	e021      	b.n	802410a <table_init+0xf2>
 80240c6:	2301      	movs	r3, #1
 80240c8:	e01f      	b.n	802410a <table_init+0xf2>
 80240ca:	2000      	movs	r0, #0
 80240cc:	f7f6 f9a4 	bl	801a418 <lv_disp_get_dpi>
 80240d0:	4603      	mov	r3, r0
 80240d2:	461a      	mov	r2, r3
 80240d4:	4613      	mov	r3, r2
 80240d6:	011b      	lsls	r3, r3, #4
 80240d8:	1a9b      	subs	r3, r3, r2
 80240da:	005b      	lsls	r3, r3, #1
 80240dc:	3350      	adds	r3, #80	; 0x50
 80240de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80240e2:	db11      	blt.n	8024108 <table_init+0xf0>
 80240e4:	2000      	movs	r0, #0
 80240e6:	f7f6 f997 	bl	801a418 <lv_disp_get_dpi>
 80240ea:	4603      	mov	r3, r0
 80240ec:	461a      	mov	r2, r3
 80240ee:	4613      	mov	r3, r2
 80240f0:	011b      	lsls	r3, r3, #4
 80240f2:	1a9b      	subs	r3, r3, r2
 80240f4:	005b      	lsls	r3, r3, #1
 80240f6:	3350      	adds	r3, #80	; 0x50
 80240f8:	4a80      	ldr	r2, [pc, #512]	; (80242fc <table_init+0x2e4>)
 80240fa:	fb82 1203 	smull	r1, r2, r2, r3
 80240fe:	1192      	asrs	r2, r2, #6
 8024100:	17db      	asrs	r3, r3, #31
 8024102:	1ad3      	subs	r3, r2, r3
 8024104:	b21b      	sxth	r3, r3
 8024106:	e000      	b.n	802410a <table_init+0xf2>
 8024108:	2301      	movs	r3, #1
 802410a:	461a      	mov	r2, r3
 802410c:	2100      	movs	r1, #0
 802410e:	4620      	mov	r0, r4
 8024110:	f7fa fcc8 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8024114:	4b75      	ldr	r3, [pc, #468]	; (80242ec <table_init+0x2d4>)
 8024116:	681b      	ldr	r3, [r3, #0]
 8024118:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 802411c:	2000      	movs	r0, #0
 802411e:	f7f6 f994 	bl	801a44a <lv_disp_get_size_category>
 8024122:	4603      	mov	r3, r0
 8024124:	2b01      	cmp	r3, #1
 8024126:	d81e      	bhi.n	8024166 <table_init+0x14e>
 8024128:	2000      	movs	r0, #0
 802412a:	f7f6 f975 	bl	801a418 <lv_disp_get_dpi>
 802412e:	4603      	mov	r3, r0
 8024130:	461a      	mov	r2, r3
 8024132:	4613      	mov	r3, r2
 8024134:	011b      	lsls	r3, r3, #4
 8024136:	1a9b      	subs	r3, r3, r2
 8024138:	3350      	adds	r3, #80	; 0x50
 802413a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802413e:	db10      	blt.n	8024162 <table_init+0x14a>
 8024140:	2000      	movs	r0, #0
 8024142:	f7f6 f969 	bl	801a418 <lv_disp_get_dpi>
 8024146:	4603      	mov	r3, r0
 8024148:	461a      	mov	r2, r3
 802414a:	4613      	mov	r3, r2
 802414c:	011b      	lsls	r3, r3, #4
 802414e:	1a9b      	subs	r3, r3, r2
 8024150:	3350      	adds	r3, #80	; 0x50
 8024152:	4a6a      	ldr	r2, [pc, #424]	; (80242fc <table_init+0x2e4>)
 8024154:	fb82 1203 	smull	r1, r2, r2, r3
 8024158:	1192      	asrs	r2, r2, #6
 802415a:	17db      	asrs	r3, r3, #31
 802415c:	1ad3      	subs	r3, r2, r3
 802415e:	b21b      	sxth	r3, r3
 8024160:	e021      	b.n	80241a6 <table_init+0x18e>
 8024162:	2301      	movs	r3, #1
 8024164:	e01f      	b.n	80241a6 <table_init+0x18e>
 8024166:	2000      	movs	r0, #0
 8024168:	f7f6 f956 	bl	801a418 <lv_disp_get_dpi>
 802416c:	4603      	mov	r3, r0
 802416e:	461a      	mov	r2, r3
 8024170:	4613      	mov	r3, r2
 8024172:	011b      	lsls	r3, r3, #4
 8024174:	1a9b      	subs	r3, r3, r2
 8024176:	005b      	lsls	r3, r3, #1
 8024178:	3350      	adds	r3, #80	; 0x50
 802417a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802417e:	db11      	blt.n	80241a4 <table_init+0x18c>
 8024180:	2000      	movs	r0, #0
 8024182:	f7f6 f949 	bl	801a418 <lv_disp_get_dpi>
 8024186:	4603      	mov	r3, r0
 8024188:	461a      	mov	r2, r3
 802418a:	4613      	mov	r3, r2
 802418c:	011b      	lsls	r3, r3, #4
 802418e:	1a9b      	subs	r3, r3, r2
 8024190:	005b      	lsls	r3, r3, #1
 8024192:	3350      	adds	r3, #80	; 0x50
 8024194:	4a59      	ldr	r2, [pc, #356]	; (80242fc <table_init+0x2e4>)
 8024196:	fb82 1203 	smull	r1, r2, r2, r3
 802419a:	1192      	asrs	r2, r2, #6
 802419c:	17db      	asrs	r3, r3, #31
 802419e:	1ad3      	subs	r3, r2, r3
 80241a0:	b21b      	sxth	r3, r3
 80241a2:	e000      	b.n	80241a6 <table_init+0x18e>
 80241a4:	2301      	movs	r3, #1
 80241a6:	461a      	mov	r2, r3
 80241a8:	2100      	movs	r1, #0
 80241aa:	4620      	mov	r0, r4
 80241ac:	f7fa fc93 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 80241b0:	4b4e      	ldr	r3, [pc, #312]	; (80242ec <table_init+0x2d4>)
 80241b2:	681b      	ldr	r3, [r3, #0]
 80241b4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80241b8:	2000      	movs	r0, #0
 80241ba:	f7f6 f946 	bl	801a44a <lv_disp_get_size_category>
 80241be:	4603      	mov	r3, r0
 80241c0:	2b01      	cmp	r3, #1
 80241c2:	d81e      	bhi.n	8024202 <table_init+0x1ea>
 80241c4:	2000      	movs	r0, #0
 80241c6:	f7f6 f927 	bl	801a418 <lv_disp_get_dpi>
 80241ca:	4603      	mov	r3, r0
 80241cc:	461a      	mov	r2, r3
 80241ce:	4613      	mov	r3, r2
 80241d0:	011b      	lsls	r3, r3, #4
 80241d2:	1a9b      	subs	r3, r3, r2
 80241d4:	3350      	adds	r3, #80	; 0x50
 80241d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80241da:	db10      	blt.n	80241fe <table_init+0x1e6>
 80241dc:	2000      	movs	r0, #0
 80241de:	f7f6 f91b 	bl	801a418 <lv_disp_get_dpi>
 80241e2:	4603      	mov	r3, r0
 80241e4:	461a      	mov	r2, r3
 80241e6:	4613      	mov	r3, r2
 80241e8:	011b      	lsls	r3, r3, #4
 80241ea:	1a9b      	subs	r3, r3, r2
 80241ec:	3350      	adds	r3, #80	; 0x50
 80241ee:	4a43      	ldr	r2, [pc, #268]	; (80242fc <table_init+0x2e4>)
 80241f0:	fb82 1203 	smull	r1, r2, r2, r3
 80241f4:	1192      	asrs	r2, r2, #6
 80241f6:	17db      	asrs	r3, r3, #31
 80241f8:	1ad3      	subs	r3, r2, r3
 80241fa:	b21b      	sxth	r3, r3
 80241fc:	e021      	b.n	8024242 <table_init+0x22a>
 80241fe:	2301      	movs	r3, #1
 8024200:	e01f      	b.n	8024242 <table_init+0x22a>
 8024202:	2000      	movs	r0, #0
 8024204:	f7f6 f908 	bl	801a418 <lv_disp_get_dpi>
 8024208:	4603      	mov	r3, r0
 802420a:	461a      	mov	r2, r3
 802420c:	4613      	mov	r3, r2
 802420e:	011b      	lsls	r3, r3, #4
 8024210:	1a9b      	subs	r3, r3, r2
 8024212:	005b      	lsls	r3, r3, #1
 8024214:	3350      	adds	r3, #80	; 0x50
 8024216:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802421a:	db11      	blt.n	8024240 <table_init+0x228>
 802421c:	2000      	movs	r0, #0
 802421e:	f7f6 f8fb 	bl	801a418 <lv_disp_get_dpi>
 8024222:	4603      	mov	r3, r0
 8024224:	461a      	mov	r2, r3
 8024226:	4613      	mov	r3, r2
 8024228:	011b      	lsls	r3, r3, #4
 802422a:	1a9b      	subs	r3, r3, r2
 802422c:	005b      	lsls	r3, r3, #1
 802422e:	3350      	adds	r3, #80	; 0x50
 8024230:	4a32      	ldr	r2, [pc, #200]	; (80242fc <table_init+0x2e4>)
 8024232:	fb82 1203 	smull	r1, r2, r2, r3
 8024236:	1192      	asrs	r2, r2, #6
 8024238:	17db      	asrs	r3, r3, #31
 802423a:	1ad3      	subs	r3, r2, r3
 802423c:	b21b      	sxth	r3, r3
 802423e:	e000      	b.n	8024242 <table_init+0x22a>
 8024240:	2301      	movs	r3, #1
 8024242:	461a      	mov	r2, r3
 8024244:	2100      	movs	r1, #0
 8024246:	4620      	mov	r0, r4
 8024248:	f7fa fbfa 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 802424c:	4b27      	ldr	r3, [pc, #156]	; (80242ec <table_init+0x2d4>)
 802424e:	681b      	ldr	r3, [r3, #0]
 8024250:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8024254:	2000      	movs	r0, #0
 8024256:	f7f6 f8f8 	bl	801a44a <lv_disp_get_size_category>
 802425a:	4603      	mov	r3, r0
 802425c:	2b01      	cmp	r3, #1
 802425e:	d81e      	bhi.n	802429e <table_init+0x286>
 8024260:	2000      	movs	r0, #0
 8024262:	f7f6 f8d9 	bl	801a418 <lv_disp_get_dpi>
 8024266:	4603      	mov	r3, r0
 8024268:	461a      	mov	r2, r3
 802426a:	4613      	mov	r3, r2
 802426c:	011b      	lsls	r3, r3, #4
 802426e:	1a9b      	subs	r3, r3, r2
 8024270:	3350      	adds	r3, #80	; 0x50
 8024272:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024276:	db10      	blt.n	802429a <table_init+0x282>
 8024278:	2000      	movs	r0, #0
 802427a:	f7f6 f8cd 	bl	801a418 <lv_disp_get_dpi>
 802427e:	4603      	mov	r3, r0
 8024280:	461a      	mov	r2, r3
 8024282:	4613      	mov	r3, r2
 8024284:	011b      	lsls	r3, r3, #4
 8024286:	1a9b      	subs	r3, r3, r2
 8024288:	3350      	adds	r3, #80	; 0x50
 802428a:	4a1c      	ldr	r2, [pc, #112]	; (80242fc <table_init+0x2e4>)
 802428c:	fb82 1203 	smull	r1, r2, r2, r3
 8024290:	1192      	asrs	r2, r2, #6
 8024292:	17db      	asrs	r3, r3, #31
 8024294:	1ad3      	subs	r3, r2, r3
 8024296:	b21b      	sxth	r3, r3
 8024298:	e021      	b.n	80242de <table_init+0x2c6>
 802429a:	2301      	movs	r3, #1
 802429c:	e01f      	b.n	80242de <table_init+0x2c6>
 802429e:	2000      	movs	r0, #0
 80242a0:	f7f6 f8ba 	bl	801a418 <lv_disp_get_dpi>
 80242a4:	4603      	mov	r3, r0
 80242a6:	461a      	mov	r2, r3
 80242a8:	4613      	mov	r3, r2
 80242aa:	011b      	lsls	r3, r3, #4
 80242ac:	1a9b      	subs	r3, r3, r2
 80242ae:	005b      	lsls	r3, r3, #1
 80242b0:	3350      	adds	r3, #80	; 0x50
 80242b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80242b6:	db11      	blt.n	80242dc <table_init+0x2c4>
 80242b8:	2000      	movs	r0, #0
 80242ba:	f7f6 f8ad 	bl	801a418 <lv_disp_get_dpi>
 80242be:	4603      	mov	r3, r0
 80242c0:	461a      	mov	r2, r3
 80242c2:	4613      	mov	r3, r2
 80242c4:	011b      	lsls	r3, r3, #4
 80242c6:	1a9b      	subs	r3, r3, r2
 80242c8:	005b      	lsls	r3, r3, #1
 80242ca:	3350      	adds	r3, #80	; 0x50
 80242cc:	4a0b      	ldr	r2, [pc, #44]	; (80242fc <table_init+0x2e4>)
 80242ce:	fb82 1203 	smull	r1, r2, r2, r3
 80242d2:	1192      	asrs	r2, r2, #6
 80242d4:	17db      	asrs	r3, r3, #31
 80242d6:	1ad3      	subs	r3, r2, r3
 80242d8:	b21b      	sxth	r3, r3
 80242da:	e000      	b.n	80242de <table_init+0x2c6>
 80242dc:	2301      	movs	r3, #1
 80242de:	461a      	mov	r2, r3
 80242e0:	2100      	movs	r1, #0
 80242e2:	4620      	mov	r0, r4
 80242e4:	f7fa fbc5 	bl	801ea72 <lv_style_set_pad_bottom>

#endif
}
 80242e8:	bf00      	nop
 80242ea:	bd98      	pop	{r3, r4, r7, pc}
 80242ec:	200200d4 	.word	0x200200d4
 80242f0:	200200a8 	.word	0x200200a8
 80242f4:	00d6dde3 	.word	0x00d6dde3
 80242f8:	00808a97 	.word	0x00808a97
 80242fc:	66666667 	.word	0x66666667

08024300 <win_init>:

static void win_init(void)
{
 8024300:	b480      	push	{r7}
 8024302:	af00      	add	r7, sp, #0
#if LV_USE_WIN != 0
#endif
}
 8024304:	bf00      	nop
 8024306:	46bd      	mov	sp, r7
 8024308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802430c:	4770      	bx	lr
	...

08024310 <tabview_win_shared_init>:

static void tabview_win_shared_init(void)
{
 8024310:	b598      	push	{r3, r4, r7, lr}
 8024312:	af00      	add	r7, sp, #0
#if LV_USE_TABVIEW || LV_USE_WIN
    style_init_reset(&styles->tabview_btns_bg);
 8024314:	4bcc      	ldr	r3, [pc, #816]	; (8024648 <tabview_win_shared_init+0x338>)
 8024316:	681b      	ldr	r3, [r3, #0]
 8024318:	33ac      	adds	r3, #172	; 0xac
 802431a:	4618      	mov	r0, r3
 802431c:	f001 f8a4 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8024320:	4bc9      	ldr	r3, [pc, #804]	; (8024648 <tabview_win_shared_init+0x338>)
 8024322:	681b      	ldr	r3, [r3, #0]
 8024324:	33ac      	adds	r3, #172	; 0xac
 8024326:	22ff      	movs	r2, #255	; 0xff
 8024328:	2100      	movs	r1, #0
 802432a:	4618      	mov	r0, r3
 802432c:	f7fa fc80 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
 8024330:	4bc5      	ldr	r3, [pc, #788]	; (8024648 <tabview_win_shared_init+0x338>)
 8024332:	681b      	ldr	r3, [r3, #0]
 8024334:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8024338:	4bc4      	ldr	r3, [pc, #784]	; (802464c <tabview_win_shared_init+0x33c>)
 802433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802433c:	f003 0302 	and.w	r3, r3, #2
 8024340:	2b00      	cmp	r3, #0
 8024342:	d005      	beq.n	8024350 <tabview_win_shared_init+0x40>
 8024344:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8024348:	f7fa fad0 	bl	801e8ec <lv_color_hex>
 802434c:	4603      	mov	r3, r0
 802434e:	e003      	b.n	8024358 <tabview_win_shared_init+0x48>
 8024350:	48bf      	ldr	r0, [pc, #764]	; (8024650 <tabview_win_shared_init+0x340>)
 8024352:	f7fa facb 	bl	801e8ec <lv_color_hex>
 8024356:	4603      	mov	r3, r0
 8024358:	461a      	mov	r2, r3
 802435a:	2100      	movs	r1, #0
 802435c:	4620      	mov	r0, r4
 802435e:	f7fa fc50 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 8024362:	4bb9      	ldr	r3, [pc, #740]	; (8024648 <tabview_win_shared_init+0x338>)
 8024364:	681b      	ldr	r3, [r3, #0]
 8024366:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 802436a:	4bb8      	ldr	r3, [pc, #736]	; (802464c <tabview_win_shared_init+0x33c>)
 802436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802436e:	f003 0302 	and.w	r3, r3, #2
 8024372:	2b00      	cmp	r3, #0
 8024374:	d004      	beq.n	8024380 <tabview_win_shared_init+0x70>
 8024376:	48b7      	ldr	r0, [pc, #732]	; (8024654 <tabview_win_shared_init+0x344>)
 8024378:	f7fa fab8 	bl	801e8ec <lv_color_hex>
 802437c:	4603      	mov	r3, r0
 802437e:	e003      	b.n	8024388 <tabview_win_shared_init+0x78>
 8024380:	48b5      	ldr	r0, [pc, #724]	; (8024658 <tabview_win_shared_init+0x348>)
 8024382:	f7fa fab3 	bl	801e8ec <lv_color_hex>
 8024386:	4603      	mov	r3, r0
 8024388:	461a      	mov	r2, r3
 802438a:	2100      	movs	r1, #0
 802438c:	4620      	mov	r0, r4
 802438e:	f7fa fe1b 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
 8024392:	4bad      	ldr	r3, [pc, #692]	; (8024648 <tabview_win_shared_init+0x338>)
 8024394:	681b      	ldr	r3, [r3, #0]
 8024396:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 802439a:	48b0      	ldr	r0, [pc, #704]	; (802465c <tabview_win_shared_init+0x34c>)
 802439c:	f7fa faa6 	bl	801e8ec <lv_color_hex>
 80243a0:	4603      	mov	r3, r0
 80243a2:	461a      	mov	r2, r3
 80243a4:	2100      	movs	r1, #0
 80243a6:	4620      	mov	r0, r4
 80243a8:	f7fa fef2 	bl	801f190 <lv_style_set_image_recolor>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 80243ac:	4ba6      	ldr	r3, [pc, #664]	; (8024648 <tabview_win_shared_init+0x338>)
 80243ae:	681b      	ldr	r3, [r3, #0]
 80243b0:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 80243b4:	2000      	movs	r0, #0
 80243b6:	f7f6 f82f 	bl	801a418 <lv_disp_get_dpi>
 80243ba:	4603      	mov	r3, r0
 80243bc:	461a      	mov	r2, r3
 80243be:	4613      	mov	r3, r2
 80243c0:	00db      	lsls	r3, r3, #3
 80243c2:	1a9b      	subs	r3, r3, r2
 80243c4:	3350      	adds	r3, #80	; 0x50
 80243c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80243ca:	db10      	blt.n	80243ee <tabview_win_shared_init+0xde>
 80243cc:	2000      	movs	r0, #0
 80243ce:	f7f6 f823 	bl	801a418 <lv_disp_get_dpi>
 80243d2:	4603      	mov	r3, r0
 80243d4:	461a      	mov	r2, r3
 80243d6:	4613      	mov	r3, r2
 80243d8:	00db      	lsls	r3, r3, #3
 80243da:	1a9b      	subs	r3, r3, r2
 80243dc:	3350      	adds	r3, #80	; 0x50
 80243de:	4aa0      	ldr	r2, [pc, #640]	; (8024660 <tabview_win_shared_init+0x350>)
 80243e0:	fb82 1203 	smull	r1, r2, r2, r3
 80243e4:	1192      	asrs	r2, r2, #6
 80243e6:	17db      	asrs	r3, r3, #31
 80243e8:	1ad3      	subs	r3, r2, r3
 80243ea:	b21b      	sxth	r3, r3
 80243ec:	e000      	b.n	80243f0 <tabview_win_shared_init+0xe0>
 80243ee:	2301      	movs	r3, #1
 80243f0:	461a      	mov	r2, r3
 80243f2:	2100      	movs	r1, #0
 80243f4:	4620      	mov	r0, r4
 80243f6:	f7fa fb23 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 80243fa:	4b93      	ldr	r3, [pc, #588]	; (8024648 <tabview_win_shared_init+0x338>)
 80243fc:	681b      	ldr	r3, [r3, #0]
 80243fe:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8024402:	2000      	movs	r0, #0
 8024404:	f7f6 f808 	bl	801a418 <lv_disp_get_dpi>
 8024408:	4603      	mov	r3, r0
 802440a:	461a      	mov	r2, r3
 802440c:	4613      	mov	r3, r2
 802440e:	00db      	lsls	r3, r3, #3
 8024410:	1a9b      	subs	r3, r3, r2
 8024412:	3350      	adds	r3, #80	; 0x50
 8024414:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024418:	db10      	blt.n	802443c <tabview_win_shared_init+0x12c>
 802441a:	2000      	movs	r0, #0
 802441c:	f7f5 fffc 	bl	801a418 <lv_disp_get_dpi>
 8024420:	4603      	mov	r3, r0
 8024422:	461a      	mov	r2, r3
 8024424:	4613      	mov	r3, r2
 8024426:	00db      	lsls	r3, r3, #3
 8024428:	1a9b      	subs	r3, r3, r2
 802442a:	3350      	adds	r3, #80	; 0x50
 802442c:	4a8c      	ldr	r2, [pc, #560]	; (8024660 <tabview_win_shared_init+0x350>)
 802442e:	fb82 1203 	smull	r1, r2, r2, r3
 8024432:	1192      	asrs	r2, r2, #6
 8024434:	17db      	asrs	r3, r3, #31
 8024436:	1ad3      	subs	r3, r2, r3
 8024438:	b21b      	sxth	r3, r3
 802443a:	e000      	b.n	802443e <tabview_win_shared_init+0x12e>
 802443c:	2301      	movs	r3, #1
 802443e:	461a      	mov	r2, r3
 8024440:	2100      	movs	r1, #0
 8024442:	4620      	mov	r0, r4
 8024444:	f7fa fb2e 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 8024448:	4b7f      	ldr	r3, [pc, #508]	; (8024648 <tabview_win_shared_init+0x338>)
 802444a:	681b      	ldr	r3, [r3, #0]
 802444c:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8024450:	2000      	movs	r0, #0
 8024452:	f7f5 ffe1 	bl	801a418 <lv_disp_get_dpi>
 8024456:	4603      	mov	r3, r0
 8024458:	461a      	mov	r2, r3
 802445a:	4613      	mov	r3, r2
 802445c:	00db      	lsls	r3, r3, #3
 802445e:	1a9b      	subs	r3, r3, r2
 8024460:	3350      	adds	r3, #80	; 0x50
 8024462:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024466:	db10      	blt.n	802448a <tabview_win_shared_init+0x17a>
 8024468:	2000      	movs	r0, #0
 802446a:	f7f5 ffd5 	bl	801a418 <lv_disp_get_dpi>
 802446e:	4603      	mov	r3, r0
 8024470:	461a      	mov	r2, r3
 8024472:	4613      	mov	r3, r2
 8024474:	00db      	lsls	r3, r3, #3
 8024476:	1a9b      	subs	r3, r3, r2
 8024478:	3350      	adds	r3, #80	; 0x50
 802447a:	4a79      	ldr	r2, [pc, #484]	; (8024660 <tabview_win_shared_init+0x350>)
 802447c:	fb82 1203 	smull	r1, r2, r2, r3
 8024480:	1192      	asrs	r2, r2, #6
 8024482:	17db      	asrs	r3, r3, #31
 8024484:	1ad3      	subs	r3, r2, r3
 8024486:	b21b      	sxth	r3, r3
 8024488:	e000      	b.n	802448c <tabview_win_shared_init+0x17c>
 802448a:	2301      	movs	r3, #1
 802448c:	461a      	mov	r2, r3
 802448e:	2100      	movs	r1, #0
 8024490:	4620      	mov	r0, r4
 8024492:	f7fa fb20 	bl	801ead6 <lv_style_set_pad_right>

    style_init_reset(&styles->tabview_btns);
 8024496:	4b6c      	ldr	r3, [pc, #432]	; (8024648 <tabview_win_shared_init+0x338>)
 8024498:	681b      	ldr	r3, [r3, #0]
 802449a:	33a8      	adds	r3, #168	; 0xa8
 802449c:	4618      	mov	r0, r3
 802449e:	f000 ffe3 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
 80244a2:	4b69      	ldr	r3, [pc, #420]	; (8024648 <tabview_win_shared_init+0x338>)
 80244a4:	681b      	ldr	r3, [r3, #0]
 80244a6:	33a8      	adds	r3, #168	; 0xa8
 80244a8:	227f      	movs	r2, #127	; 0x7f
 80244aa:	2110      	movs	r1, #16
 80244ac:	4618      	mov	r0, r3
 80244ae:	f7fa fbbf 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
 80244b2:	4b65      	ldr	r3, [pc, #404]	; (8024648 <tabview_win_shared_init+0x338>)
 80244b4:	681b      	ldr	r3, [r3, #0]
 80244b6:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80244ba:	f640 0088 	movw	r0, #2184	; 0x888
 80244be:	f7fa fa29 	bl	801e914 <lv_color_hex3>
 80244c2:	4603      	mov	r3, r0
 80244c4:	461a      	mov	r2, r3
 80244c6:	2110      	movs	r1, #16
 80244c8:	4620      	mov	r0, r4
 80244ca:	f7fa fb9a 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
 80244ce:	4b5e      	ldr	r3, [pc, #376]	; (8024648 <tabview_win_shared_init+0x338>)
 80244d0:	681b      	ldr	r3, [r3, #0]
 80244d2:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80244d6:	4b5d      	ldr	r3, [pc, #372]	; (802464c <tabview_win_shared_init+0x33c>)
 80244d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80244da:	f003 0302 	and.w	r3, r3, #2
 80244de:	2b00      	cmp	r3, #0
 80244e0:	d004      	beq.n	80244ec <tabview_win_shared_init+0x1dc>
 80244e2:	485c      	ldr	r0, [pc, #368]	; (8024654 <tabview_win_shared_init+0x344>)
 80244e4:	f7fa fa02 	bl	801e8ec <lv_color_hex>
 80244e8:	4603      	mov	r3, r0
 80244ea:	e003      	b.n	80244f4 <tabview_win_shared_init+0x1e4>
 80244ec:	485a      	ldr	r0, [pc, #360]	; (8024658 <tabview_win_shared_init+0x348>)
 80244ee:	f7fa f9fd 	bl	801e8ec <lv_color_hex>
 80244f2:	4603      	mov	r3, r0
 80244f4:	461a      	mov	r2, r3
 80244f6:	2101      	movs	r1, #1
 80244f8:	4620      	mov	r0, r4
 80244fa:	f7fa fd65 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 80244fe:	4b52      	ldr	r3, [pc, #328]	; (8024648 <tabview_win_shared_init+0x338>)
 8024500:	681b      	ldr	r3, [r3, #0]
 8024502:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8024506:	2000      	movs	r0, #0
 8024508:	f7f5 ff86 	bl	801a418 <lv_disp_get_dpi>
 802450c:	4603      	mov	r3, r0
 802450e:	461a      	mov	r2, r3
 8024510:	4613      	mov	r3, r2
 8024512:	009b      	lsls	r3, r3, #2
 8024514:	4413      	add	r3, r2
 8024516:	009b      	lsls	r3, r3, #2
 8024518:	3350      	adds	r3, #80	; 0x50
 802451a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802451e:	db11      	blt.n	8024544 <tabview_win_shared_init+0x234>
 8024520:	2000      	movs	r0, #0
 8024522:	f7f5 ff79 	bl	801a418 <lv_disp_get_dpi>
 8024526:	4603      	mov	r3, r0
 8024528:	461a      	mov	r2, r3
 802452a:	4613      	mov	r3, r2
 802452c:	009b      	lsls	r3, r3, #2
 802452e:	4413      	add	r3, r2
 8024530:	009b      	lsls	r3, r3, #2
 8024532:	3350      	adds	r3, #80	; 0x50
 8024534:	4a4a      	ldr	r2, [pc, #296]	; (8024660 <tabview_win_shared_init+0x350>)
 8024536:	fb82 1203 	smull	r1, r2, r2, r3
 802453a:	1192      	asrs	r2, r2, #6
 802453c:	17db      	asrs	r3, r3, #31
 802453e:	1ad3      	subs	r3, r2, r3
 8024540:	b21b      	sxth	r3, r3
 8024542:	e000      	b.n	8024546 <tabview_win_shared_init+0x236>
 8024544:	2301      	movs	r3, #1
 8024546:	461a      	mov	r2, r3
 8024548:	2100      	movs	r1, #0
 802454a:	4620      	mov	r0, r4
 802454c:	f7fa fa78 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 8024550:	4b3d      	ldr	r3, [pc, #244]	; (8024648 <tabview_win_shared_init+0x338>)
 8024552:	681b      	ldr	r3, [r3, #0]
 8024554:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8024558:	2000      	movs	r0, #0
 802455a:	f7f5 ff5d 	bl	801a418 <lv_disp_get_dpi>
 802455e:	4603      	mov	r3, r0
 8024560:	461a      	mov	r2, r3
 8024562:	4613      	mov	r3, r2
 8024564:	009b      	lsls	r3, r3, #2
 8024566:	4413      	add	r3, r2
 8024568:	009b      	lsls	r3, r3, #2
 802456a:	3350      	adds	r3, #80	; 0x50
 802456c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024570:	db11      	blt.n	8024596 <tabview_win_shared_init+0x286>
 8024572:	2000      	movs	r0, #0
 8024574:	f7f5 ff50 	bl	801a418 <lv_disp_get_dpi>
 8024578:	4603      	mov	r3, r0
 802457a:	461a      	mov	r2, r3
 802457c:	4613      	mov	r3, r2
 802457e:	009b      	lsls	r3, r3, #2
 8024580:	4413      	add	r3, r2
 8024582:	009b      	lsls	r3, r3, #2
 8024584:	3350      	adds	r3, #80	; 0x50
 8024586:	4a36      	ldr	r2, [pc, #216]	; (8024660 <tabview_win_shared_init+0x350>)
 8024588:	fb82 1203 	smull	r1, r2, r2, r3
 802458c:	1192      	asrs	r2, r2, #6
 802458e:	17db      	asrs	r3, r3, #31
 8024590:	1ad3      	subs	r3, r2, r3
 8024592:	b21b      	sxth	r3, r3
 8024594:	e000      	b.n	8024598 <tabview_win_shared_init+0x288>
 8024596:	2301      	movs	r3, #1
 8024598:	461a      	mov	r2, r3
 802459a:	2100      	movs	r1, #0
 802459c:	4620      	mov	r0, r4
 802459e:	f7fa fa68 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
 80245a2:	4b29      	ldr	r3, [pc, #164]	; (8024648 <tabview_win_shared_init+0x338>)
 80245a4:	681b      	ldr	r3, [r3, #0]
 80245a6:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 80245aa:	4b28      	ldr	r3, [pc, #160]	; (802464c <tabview_win_shared_init+0x33c>)
 80245ac:	68da      	ldr	r2, [r3, #12]
 80245ae:	2102      	movs	r1, #2
 80245b0:	f7fa fd0a 	bl	801efc8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
 80245b4:	4b24      	ldr	r3, [pc, #144]	; (8024648 <tabview_win_shared_init+0x338>)
 80245b6:	681b      	ldr	r3, [r3, #0]
 80245b8:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 80245bc:	4b23      	ldr	r3, [pc, #140]	; (802464c <tabview_win_shared_init+0x33c>)
 80245be:	691a      	ldr	r2, [r3, #16]
 80245c0:	2104      	movs	r1, #4
 80245c2:	f7fa fd01 	bl	801efc8 <lv_style_set_text_color>

    style_init_reset(&styles->tabview_indic);
 80245c6:	4b20      	ldr	r3, [pc, #128]	; (8024648 <tabview_win_shared_init+0x338>)
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	33b0      	adds	r3, #176	; 0xb0
 80245cc:	4618      	mov	r0, r3
 80245ce:	f000 ff4b 	bl	8025468 <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 80245d2:	4b1d      	ldr	r3, [pc, #116]	; (8024648 <tabview_win_shared_init+0x338>)
 80245d4:	681b      	ldr	r3, [r3, #0]
 80245d6:	33b0      	adds	r3, #176	; 0xb0
 80245d8:	22ff      	movs	r2, #255	; 0xff
 80245da:	2100      	movs	r1, #0
 80245dc:	4618      	mov	r0, r3
 80245de:	f7fa fb27 	bl	801ec30 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
 80245e2:	4b19      	ldr	r3, [pc, #100]	; (8024648 <tabview_win_shared_init+0x338>)
 80245e4:	681b      	ldr	r3, [r3, #0]
 80245e6:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 80245ea:	4b18      	ldr	r3, [pc, #96]	; (802464c <tabview_win_shared_init+0x33c>)
 80245ec:	68da      	ldr	r2, [r3, #12]
 80245ee:	2100      	movs	r1, #0
 80245f0:	f7fa fb07 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
 80245f4:	4b14      	ldr	r3, [pc, #80]	; (8024648 <tabview_win_shared_init+0x338>)
 80245f6:	681b      	ldr	r3, [r3, #0]
 80245f8:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 80245fc:	4b13      	ldr	r3, [pc, #76]	; (802464c <tabview_win_shared_init+0x33c>)
 80245fe:	691a      	ldr	r2, [r3, #16]
 8024600:	2104      	movs	r1, #4
 8024602:	f7fa fafe 	bl	801ec02 <lv_style_set_bg_color>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
 8024606:	4b10      	ldr	r3, [pc, #64]	; (8024648 <tabview_win_shared_init+0x338>)
 8024608:	681b      	ldr	r3, [r3, #0]
 802460a:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 802460e:	2000      	movs	r0, #0
 8024610:	f7f5 ff02 	bl	801a418 <lv_disp_get_dpi>
 8024614:	4603      	mov	r3, r0
 8024616:	461a      	mov	r2, r3
 8024618:	4613      	mov	r3, r2
 802461a:	009b      	lsls	r3, r3, #2
 802461c:	4413      	add	r3, r2
 802461e:	3350      	adds	r3, #80	; 0x50
 8024620:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024624:	db1e      	blt.n	8024664 <tabview_win_shared_init+0x354>
 8024626:	2000      	movs	r0, #0
 8024628:	f7f5 fef6 	bl	801a418 <lv_disp_get_dpi>
 802462c:	4603      	mov	r3, r0
 802462e:	461a      	mov	r2, r3
 8024630:	4613      	mov	r3, r2
 8024632:	009b      	lsls	r3, r3, #2
 8024634:	4413      	add	r3, r2
 8024636:	3350      	adds	r3, #80	; 0x50
 8024638:	4a09      	ldr	r2, [pc, #36]	; (8024660 <tabview_win_shared_init+0x350>)
 802463a:	fb82 1203 	smull	r1, r2, r2, r3
 802463e:	1192      	asrs	r2, r2, #6
 8024640:	17db      	asrs	r3, r3, #31
 8024642:	1ad3      	subs	r3, r2, r3
 8024644:	b21b      	sxth	r3, r3
 8024646:	e00e      	b.n	8024666 <tabview_win_shared_init+0x356>
 8024648:	200200d4 	.word	0x200200d4
 802464c:	200200a8 	.word	0x200200a8
 8024650:	00586273 	.word	0x00586273
 8024654:	003b3e42 	.word	0x003b3e42
 8024658:	00e7e9ec 	.word	0x00e7e9ec
 802465c:	00979a9f 	.word	0x00979a9f
 8024660:	66666667 	.word	0x66666667
 8024664:	2301      	movs	r3, #1
 8024666:	461a      	mov	r2, r3
 8024668:	2100      	movs	r1, #0
 802466a:	4620      	mov	r0, r4
 802466c:	f7fa f9b6 	bl	801e9dc <lv_style_set_size>
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8024670:	4bcb      	ldr	r3, [pc, #812]	; (80249a0 <tabview_win_shared_init+0x690>)
 8024672:	681b      	ldr	r3, [r3, #0]
 8024674:	33b0      	adds	r3, #176	; 0xb0
 8024676:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802467a:	2100      	movs	r1, #0
 802467c:	4618      	mov	r0, r3
 802467e:	f7fa f97b 	bl	801e978 <lv_style_set_radius>

    style_init_reset(&styles->tabview_page_scrl);
 8024682:	4bc7      	ldr	r3, [pc, #796]	; (80249a0 <tabview_win_shared_init+0x690>)
 8024684:	681b      	ldr	r3, [r3, #0]
 8024686:	33b4      	adds	r3, #180	; 0xb4
 8024688:	4618      	mov	r0, r3
 802468a:	f000 feed 	bl	8025468 <style_init_reset>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 802468e:	4bc4      	ldr	r3, [pc, #784]	; (80249a0 <tabview_win_shared_init+0x690>)
 8024690:	681b      	ldr	r3, [r3, #0]
 8024692:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8024696:	2000      	movs	r0, #0
 8024698:	f7f5 fed7 	bl	801a44a <lv_disp_get_size_category>
 802469c:	4603      	mov	r3, r0
 802469e:	2b01      	cmp	r3, #1
 80246a0:	d81e      	bhi.n	80246e0 <tabview_win_shared_init+0x3d0>
 80246a2:	2000      	movs	r0, #0
 80246a4:	f7f5 feb8 	bl	801a418 <lv_disp_get_dpi>
 80246a8:	4603      	mov	r3, r0
 80246aa:	461a      	mov	r2, r3
 80246ac:	4613      	mov	r3, r2
 80246ae:	011b      	lsls	r3, r3, #4
 80246b0:	1a9b      	subs	r3, r3, r2
 80246b2:	3350      	adds	r3, #80	; 0x50
 80246b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80246b8:	db10      	blt.n	80246dc <tabview_win_shared_init+0x3cc>
 80246ba:	2000      	movs	r0, #0
 80246bc:	f7f5 feac 	bl	801a418 <lv_disp_get_dpi>
 80246c0:	4603      	mov	r3, r0
 80246c2:	461a      	mov	r2, r3
 80246c4:	4613      	mov	r3, r2
 80246c6:	011b      	lsls	r3, r3, #4
 80246c8:	1a9b      	subs	r3, r3, r2
 80246ca:	3350      	adds	r3, #80	; 0x50
 80246cc:	4ab5      	ldr	r2, [pc, #724]	; (80249a4 <tabview_win_shared_init+0x694>)
 80246ce:	fb82 1203 	smull	r1, r2, r2, r3
 80246d2:	1192      	asrs	r2, r2, #6
 80246d4:	17db      	asrs	r3, r3, #31
 80246d6:	1ad3      	subs	r3, r2, r3
 80246d8:	b21b      	sxth	r3, r3
 80246da:	e021      	b.n	8024720 <tabview_win_shared_init+0x410>
 80246dc:	2301      	movs	r3, #1
 80246de:	e01f      	b.n	8024720 <tabview_win_shared_init+0x410>
 80246e0:	2000      	movs	r0, #0
 80246e2:	f7f5 fe99 	bl	801a418 <lv_disp_get_dpi>
 80246e6:	4603      	mov	r3, r0
 80246e8:	461a      	mov	r2, r3
 80246ea:	4613      	mov	r3, r2
 80246ec:	011b      	lsls	r3, r3, #4
 80246ee:	1a9b      	subs	r3, r3, r2
 80246f0:	005b      	lsls	r3, r3, #1
 80246f2:	3350      	adds	r3, #80	; 0x50
 80246f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80246f8:	db11      	blt.n	802471e <tabview_win_shared_init+0x40e>
 80246fa:	2000      	movs	r0, #0
 80246fc:	f7f5 fe8c 	bl	801a418 <lv_disp_get_dpi>
 8024700:	4603      	mov	r3, r0
 8024702:	461a      	mov	r2, r3
 8024704:	4613      	mov	r3, r2
 8024706:	011b      	lsls	r3, r3, #4
 8024708:	1a9b      	subs	r3, r3, r2
 802470a:	005b      	lsls	r3, r3, #1
 802470c:	3350      	adds	r3, #80	; 0x50
 802470e:	4aa5      	ldr	r2, [pc, #660]	; (80249a4 <tabview_win_shared_init+0x694>)
 8024710:	fb82 1203 	smull	r1, r2, r2, r3
 8024714:	1192      	asrs	r2, r2, #6
 8024716:	17db      	asrs	r3, r3, #31
 8024718:	1ad3      	subs	r3, r2, r3
 802471a:	b21b      	sxth	r3, r3
 802471c:	e000      	b.n	8024720 <tabview_win_shared_init+0x410>
 802471e:	2301      	movs	r3, #1
 8024720:	461a      	mov	r2, r3
 8024722:	2100      	movs	r1, #0
 8024724:	4620      	mov	r0, r4
 8024726:	f7fa f98b 	bl	801ea40 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 802472a:	4b9d      	ldr	r3, [pc, #628]	; (80249a0 <tabview_win_shared_init+0x690>)
 802472c:	681b      	ldr	r3, [r3, #0]
 802472e:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8024732:	2000      	movs	r0, #0
 8024734:	f7f5 fe89 	bl	801a44a <lv_disp_get_size_category>
 8024738:	4603      	mov	r3, r0
 802473a:	2b01      	cmp	r3, #1
 802473c:	d81e      	bhi.n	802477c <tabview_win_shared_init+0x46c>
 802473e:	2000      	movs	r0, #0
 8024740:	f7f5 fe6a 	bl	801a418 <lv_disp_get_dpi>
 8024744:	4603      	mov	r3, r0
 8024746:	461a      	mov	r2, r3
 8024748:	4613      	mov	r3, r2
 802474a:	011b      	lsls	r3, r3, #4
 802474c:	1a9b      	subs	r3, r3, r2
 802474e:	3350      	adds	r3, #80	; 0x50
 8024750:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024754:	db10      	blt.n	8024778 <tabview_win_shared_init+0x468>
 8024756:	2000      	movs	r0, #0
 8024758:	f7f5 fe5e 	bl	801a418 <lv_disp_get_dpi>
 802475c:	4603      	mov	r3, r0
 802475e:	461a      	mov	r2, r3
 8024760:	4613      	mov	r3, r2
 8024762:	011b      	lsls	r3, r3, #4
 8024764:	1a9b      	subs	r3, r3, r2
 8024766:	3350      	adds	r3, #80	; 0x50
 8024768:	4a8e      	ldr	r2, [pc, #568]	; (80249a4 <tabview_win_shared_init+0x694>)
 802476a:	fb82 1203 	smull	r1, r2, r2, r3
 802476e:	1192      	asrs	r2, r2, #6
 8024770:	17db      	asrs	r3, r3, #31
 8024772:	1ad3      	subs	r3, r2, r3
 8024774:	b21b      	sxth	r3, r3
 8024776:	e021      	b.n	80247bc <tabview_win_shared_init+0x4ac>
 8024778:	2301      	movs	r3, #1
 802477a:	e01f      	b.n	80247bc <tabview_win_shared_init+0x4ac>
 802477c:	2000      	movs	r0, #0
 802477e:	f7f5 fe4b 	bl	801a418 <lv_disp_get_dpi>
 8024782:	4603      	mov	r3, r0
 8024784:	461a      	mov	r2, r3
 8024786:	4613      	mov	r3, r2
 8024788:	011b      	lsls	r3, r3, #4
 802478a:	1a9b      	subs	r3, r3, r2
 802478c:	005b      	lsls	r3, r3, #1
 802478e:	3350      	adds	r3, #80	; 0x50
 8024790:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024794:	db11      	blt.n	80247ba <tabview_win_shared_init+0x4aa>
 8024796:	2000      	movs	r0, #0
 8024798:	f7f5 fe3e 	bl	801a418 <lv_disp_get_dpi>
 802479c:	4603      	mov	r3, r0
 802479e:	461a      	mov	r2, r3
 80247a0:	4613      	mov	r3, r2
 80247a2:	011b      	lsls	r3, r3, #4
 80247a4:	1a9b      	subs	r3, r3, r2
 80247a6:	005b      	lsls	r3, r3, #1
 80247a8:	3350      	adds	r3, #80	; 0x50
 80247aa:	4a7e      	ldr	r2, [pc, #504]	; (80249a4 <tabview_win_shared_init+0x694>)
 80247ac:	fb82 1203 	smull	r1, r2, r2, r3
 80247b0:	1192      	asrs	r2, r2, #6
 80247b2:	17db      	asrs	r3, r3, #31
 80247b4:	1ad3      	subs	r3, r2, r3
 80247b6:	b21b      	sxth	r3, r3
 80247b8:	e000      	b.n	80247bc <tabview_win_shared_init+0x4ac>
 80247ba:	2301      	movs	r3, #1
 80247bc:	461a      	mov	r2, r3
 80247be:	2100      	movs	r1, #0
 80247c0:	4620      	mov	r0, r4
 80247c2:	f7fa f956 	bl	801ea72 <lv_style_set_pad_bottom>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 80247c6:	4b76      	ldr	r3, [pc, #472]	; (80249a0 <tabview_win_shared_init+0x690>)
 80247c8:	681b      	ldr	r3, [r3, #0]
 80247ca:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80247ce:	2000      	movs	r0, #0
 80247d0:	f7f5 fe3b 	bl	801a44a <lv_disp_get_size_category>
 80247d4:	4603      	mov	r3, r0
 80247d6:	2b01      	cmp	r3, #1
 80247d8:	d81e      	bhi.n	8024818 <tabview_win_shared_init+0x508>
 80247da:	2000      	movs	r0, #0
 80247dc:	f7f5 fe1c 	bl	801a418 <lv_disp_get_dpi>
 80247e0:	4603      	mov	r3, r0
 80247e2:	461a      	mov	r2, r3
 80247e4:	4613      	mov	r3, r2
 80247e6:	011b      	lsls	r3, r3, #4
 80247e8:	1a9b      	subs	r3, r3, r2
 80247ea:	3350      	adds	r3, #80	; 0x50
 80247ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80247f0:	db10      	blt.n	8024814 <tabview_win_shared_init+0x504>
 80247f2:	2000      	movs	r0, #0
 80247f4:	f7f5 fe10 	bl	801a418 <lv_disp_get_dpi>
 80247f8:	4603      	mov	r3, r0
 80247fa:	461a      	mov	r2, r3
 80247fc:	4613      	mov	r3, r2
 80247fe:	011b      	lsls	r3, r3, #4
 8024800:	1a9b      	subs	r3, r3, r2
 8024802:	3350      	adds	r3, #80	; 0x50
 8024804:	4a67      	ldr	r2, [pc, #412]	; (80249a4 <tabview_win_shared_init+0x694>)
 8024806:	fb82 1203 	smull	r1, r2, r2, r3
 802480a:	1192      	asrs	r2, r2, #6
 802480c:	17db      	asrs	r3, r3, #31
 802480e:	1ad3      	subs	r3, r2, r3
 8024810:	b21b      	sxth	r3, r3
 8024812:	e021      	b.n	8024858 <tabview_win_shared_init+0x548>
 8024814:	2301      	movs	r3, #1
 8024816:	e01f      	b.n	8024858 <tabview_win_shared_init+0x548>
 8024818:	2000      	movs	r0, #0
 802481a:	f7f5 fdfd 	bl	801a418 <lv_disp_get_dpi>
 802481e:	4603      	mov	r3, r0
 8024820:	461a      	mov	r2, r3
 8024822:	4613      	mov	r3, r2
 8024824:	011b      	lsls	r3, r3, #4
 8024826:	1a9b      	subs	r3, r3, r2
 8024828:	005b      	lsls	r3, r3, #1
 802482a:	3350      	adds	r3, #80	; 0x50
 802482c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024830:	db11      	blt.n	8024856 <tabview_win_shared_init+0x546>
 8024832:	2000      	movs	r0, #0
 8024834:	f7f5 fdf0 	bl	801a418 <lv_disp_get_dpi>
 8024838:	4603      	mov	r3, r0
 802483a:	461a      	mov	r2, r3
 802483c:	4613      	mov	r3, r2
 802483e:	011b      	lsls	r3, r3, #4
 8024840:	1a9b      	subs	r3, r3, r2
 8024842:	005b      	lsls	r3, r3, #1
 8024844:	3350      	adds	r3, #80	; 0x50
 8024846:	4a57      	ldr	r2, [pc, #348]	; (80249a4 <tabview_win_shared_init+0x694>)
 8024848:	fb82 1203 	smull	r1, r2, r2, r3
 802484c:	1192      	asrs	r2, r2, #6
 802484e:	17db      	asrs	r3, r3, #31
 8024850:	1ad3      	subs	r3, r2, r3
 8024852:	b21b      	sxth	r3, r3
 8024854:	e000      	b.n	8024858 <tabview_win_shared_init+0x548>
 8024856:	2301      	movs	r3, #1
 8024858:	461a      	mov	r2, r3
 802485a:	2100      	movs	r1, #0
 802485c:	4620      	mov	r0, r4
 802485e:	f7fa f921 	bl	801eaa4 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 8024862:	4b4f      	ldr	r3, [pc, #316]	; (80249a0 <tabview_win_shared_init+0x690>)
 8024864:	681b      	ldr	r3, [r3, #0]
 8024866:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 802486a:	2000      	movs	r0, #0
 802486c:	f7f5 fded 	bl	801a44a <lv_disp_get_size_category>
 8024870:	4603      	mov	r3, r0
 8024872:	2b01      	cmp	r3, #1
 8024874:	d81e      	bhi.n	80248b4 <tabview_win_shared_init+0x5a4>
 8024876:	2000      	movs	r0, #0
 8024878:	f7f5 fdce 	bl	801a418 <lv_disp_get_dpi>
 802487c:	4603      	mov	r3, r0
 802487e:	461a      	mov	r2, r3
 8024880:	4613      	mov	r3, r2
 8024882:	011b      	lsls	r3, r3, #4
 8024884:	1a9b      	subs	r3, r3, r2
 8024886:	3350      	adds	r3, #80	; 0x50
 8024888:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802488c:	db10      	blt.n	80248b0 <tabview_win_shared_init+0x5a0>
 802488e:	2000      	movs	r0, #0
 8024890:	f7f5 fdc2 	bl	801a418 <lv_disp_get_dpi>
 8024894:	4603      	mov	r3, r0
 8024896:	461a      	mov	r2, r3
 8024898:	4613      	mov	r3, r2
 802489a:	011b      	lsls	r3, r3, #4
 802489c:	1a9b      	subs	r3, r3, r2
 802489e:	3350      	adds	r3, #80	; 0x50
 80248a0:	4a40      	ldr	r2, [pc, #256]	; (80249a4 <tabview_win_shared_init+0x694>)
 80248a2:	fb82 1203 	smull	r1, r2, r2, r3
 80248a6:	1192      	asrs	r2, r2, #6
 80248a8:	17db      	asrs	r3, r3, #31
 80248aa:	1ad3      	subs	r3, r2, r3
 80248ac:	b21b      	sxth	r3, r3
 80248ae:	e021      	b.n	80248f4 <tabview_win_shared_init+0x5e4>
 80248b0:	2301      	movs	r3, #1
 80248b2:	e01f      	b.n	80248f4 <tabview_win_shared_init+0x5e4>
 80248b4:	2000      	movs	r0, #0
 80248b6:	f7f5 fdaf 	bl	801a418 <lv_disp_get_dpi>
 80248ba:	4603      	mov	r3, r0
 80248bc:	461a      	mov	r2, r3
 80248be:	4613      	mov	r3, r2
 80248c0:	011b      	lsls	r3, r3, #4
 80248c2:	1a9b      	subs	r3, r3, r2
 80248c4:	005b      	lsls	r3, r3, #1
 80248c6:	3350      	adds	r3, #80	; 0x50
 80248c8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80248cc:	db11      	blt.n	80248f2 <tabview_win_shared_init+0x5e2>
 80248ce:	2000      	movs	r0, #0
 80248d0:	f7f5 fda2 	bl	801a418 <lv_disp_get_dpi>
 80248d4:	4603      	mov	r3, r0
 80248d6:	461a      	mov	r2, r3
 80248d8:	4613      	mov	r3, r2
 80248da:	011b      	lsls	r3, r3, #4
 80248dc:	1a9b      	subs	r3, r3, r2
 80248de:	005b      	lsls	r3, r3, #1
 80248e0:	3350      	adds	r3, #80	; 0x50
 80248e2:	4a30      	ldr	r2, [pc, #192]	; (80249a4 <tabview_win_shared_init+0x694>)
 80248e4:	fb82 1203 	smull	r1, r2, r2, r3
 80248e8:	1192      	asrs	r2, r2, #6
 80248ea:	17db      	asrs	r3, r3, #31
 80248ec:	1ad3      	subs	r3, r2, r3
 80248ee:	b21b      	sxth	r3, r3
 80248f0:	e000      	b.n	80248f4 <tabview_win_shared_init+0x5e4>
 80248f2:	2301      	movs	r3, #1
 80248f4:	461a      	mov	r2, r3
 80248f6:	2100      	movs	r1, #0
 80248f8:	4620      	mov	r0, r4
 80248fa:	f7fa f8ec 	bl	801ead6 <lv_style_set_pad_right>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 80248fe:	4b28      	ldr	r3, [pc, #160]	; (80249a0 <tabview_win_shared_init+0x690>)
 8024900:	681b      	ldr	r3, [r3, #0]
 8024902:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8024906:	2000      	movs	r0, #0
 8024908:	f7f5 fd9f 	bl	801a44a <lv_disp_get_size_category>
 802490c:	4603      	mov	r3, r0
 802490e:	2b01      	cmp	r3, #1
 8024910:	d81e      	bhi.n	8024950 <tabview_win_shared_init+0x640>
 8024912:	2000      	movs	r0, #0
 8024914:	f7f5 fd80 	bl	801a418 <lv_disp_get_dpi>
 8024918:	4603      	mov	r3, r0
 802491a:	461a      	mov	r2, r3
 802491c:	4613      	mov	r3, r2
 802491e:	011b      	lsls	r3, r3, #4
 8024920:	1a9b      	subs	r3, r3, r2
 8024922:	3350      	adds	r3, #80	; 0x50
 8024924:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024928:	db10      	blt.n	802494c <tabview_win_shared_init+0x63c>
 802492a:	2000      	movs	r0, #0
 802492c:	f7f5 fd74 	bl	801a418 <lv_disp_get_dpi>
 8024930:	4603      	mov	r3, r0
 8024932:	461a      	mov	r2, r3
 8024934:	4613      	mov	r3, r2
 8024936:	011b      	lsls	r3, r3, #4
 8024938:	1a9b      	subs	r3, r3, r2
 802493a:	3350      	adds	r3, #80	; 0x50
 802493c:	4a19      	ldr	r2, [pc, #100]	; (80249a4 <tabview_win_shared_init+0x694>)
 802493e:	fb82 1203 	smull	r1, r2, r2, r3
 8024942:	1192      	asrs	r2, r2, #6
 8024944:	17db      	asrs	r3, r3, #31
 8024946:	1ad3      	subs	r3, r2, r3
 8024948:	b21b      	sxth	r3, r3
 802494a:	e021      	b.n	8024990 <tabview_win_shared_init+0x680>
 802494c:	2301      	movs	r3, #1
 802494e:	e01f      	b.n	8024990 <tabview_win_shared_init+0x680>
 8024950:	2000      	movs	r0, #0
 8024952:	f7f5 fd61 	bl	801a418 <lv_disp_get_dpi>
 8024956:	4603      	mov	r3, r0
 8024958:	461a      	mov	r2, r3
 802495a:	4613      	mov	r3, r2
 802495c:	011b      	lsls	r3, r3, #4
 802495e:	1a9b      	subs	r3, r3, r2
 8024960:	005b      	lsls	r3, r3, #1
 8024962:	3350      	adds	r3, #80	; 0x50
 8024964:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024968:	db11      	blt.n	802498e <tabview_win_shared_init+0x67e>
 802496a:	2000      	movs	r0, #0
 802496c:	f7f5 fd54 	bl	801a418 <lv_disp_get_dpi>
 8024970:	4603      	mov	r3, r0
 8024972:	461a      	mov	r2, r3
 8024974:	4613      	mov	r3, r2
 8024976:	011b      	lsls	r3, r3, #4
 8024978:	1a9b      	subs	r3, r3, r2
 802497a:	005b      	lsls	r3, r3, #1
 802497c:	3350      	adds	r3, #80	; 0x50
 802497e:	4a09      	ldr	r2, [pc, #36]	; (80249a4 <tabview_win_shared_init+0x694>)
 8024980:	fb82 1203 	smull	r1, r2, r2, r3
 8024984:	1192      	asrs	r2, r2, #6
 8024986:	17db      	asrs	r3, r3, #31
 8024988:	1ad3      	subs	r3, r2, r3
 802498a:	b21b      	sxth	r3, r3
 802498c:	e000      	b.n	8024990 <tabview_win_shared_init+0x680>
 802498e:	2301      	movs	r3, #1
 8024990:	461a      	mov	r2, r3
 8024992:	2100      	movs	r1, #0
 8024994:	4620      	mov	r0, r4
 8024996:	f7fa f8b7 	bl	801eb08 <lv_style_set_pad_inner>
#endif
}
 802499a:	bf00      	nop
 802499c:	bd98      	pop	{r3, r4, r7, pc}
 802499e:	bf00      	nop
 80249a0:	200200d4 	.word	0x200200d4
 80249a4:	66666667 	.word	0x66666667

080249a8 <lv_theme_material_init>:
 * @return a pointer to reference this theme later
 */
lv_theme_t * lv_theme_material_init(lv_color_t color_primary, lv_color_t color_secondary, uint32_t flags,
                                    const lv_font_t * font_small, const lv_font_t * font_normal, const lv_font_t * font_subtitle,
                                    const lv_font_t * font_title)
{
 80249a8:	b580      	push	{r7, lr}
 80249aa:	b084      	sub	sp, #16
 80249ac:	af00      	add	r7, sp, #0
 80249ae:	60f8      	str	r0, [r7, #12]
 80249b0:	60b9      	str	r1, [r7, #8]
 80249b2:	607a      	str	r2, [r7, #4]
 80249b4:	603b      	str	r3, [r7, #0]

    /* This trick is required only to avoid the garbage collection of
     * styles' data if LVGL is used in a binding (e.g. Micropython)
     * In a general case styles could be simple `static lv_style_t my style` variables*/
    if(!inited) {
 80249b6:	4b3b      	ldr	r3, [pc, #236]	; (8024aa4 <lv_theme_material_init+0xfc>)
 80249b8:	781b      	ldrb	r3, [r3, #0]
 80249ba:	f083 0301 	eor.w	r3, r3, #1
 80249be:	b2db      	uxtb	r3, r3
 80249c0:	2b00      	cmp	r3, #0
 80249c2:	d009      	beq.n	80249d8 <lv_theme_material_init+0x30>
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
 80249c4:	20c0      	movs	r0, #192	; 0xc0
 80249c6:	f7f7 fe61 	bl	801c68c <lv_mem_alloc>
 80249ca:	4602      	mov	r2, r0
 80249cc:	4b36      	ldr	r3, [pc, #216]	; (8024aa8 <lv_theme_material_init+0x100>)
 80249ce:	601a      	str	r2, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
 80249d0:	4b35      	ldr	r3, [pc, #212]	; (8024aa8 <lv_theme_material_init+0x100>)
 80249d2:	681b      	ldr	r3, [r3, #0]
 80249d4:	4a35      	ldr	r2, [pc, #212]	; (8024aac <lv_theme_material_init+0x104>)
 80249d6:	6013      	str	r3, [r2, #0]
    }

    theme.color_primary = color_primary;
 80249d8:	4a35      	ldr	r2, [pc, #212]	; (8024ab0 <lv_theme_material_init+0x108>)
 80249da:	68fb      	ldr	r3, [r7, #12]
 80249dc:	60d3      	str	r3, [r2, #12]
    theme.color_secondary = color_secondary;
 80249de:	4a34      	ldr	r2, [pc, #208]	; (8024ab0 <lv_theme_material_init+0x108>)
 80249e0:	68bb      	ldr	r3, [r7, #8]
 80249e2:	6113      	str	r3, [r2, #16]
    theme.font_small = font_small;
 80249e4:	4a32      	ldr	r2, [pc, #200]	; (8024ab0 <lv_theme_material_init+0x108>)
 80249e6:	683b      	ldr	r3, [r7, #0]
 80249e8:	6153      	str	r3, [r2, #20]
    theme.font_normal = font_normal;
 80249ea:	4a31      	ldr	r2, [pc, #196]	; (8024ab0 <lv_theme_material_init+0x108>)
 80249ec:	69bb      	ldr	r3, [r7, #24]
 80249ee:	6193      	str	r3, [r2, #24]
    theme.font_subtitle = font_subtitle;
 80249f0:	4a2f      	ldr	r2, [pc, #188]	; (8024ab0 <lv_theme_material_init+0x108>)
 80249f2:	69fb      	ldr	r3, [r7, #28]
 80249f4:	61d3      	str	r3, [r2, #28]
    theme.font_title = font_title;
 80249f6:	4a2e      	ldr	r2, [pc, #184]	; (8024ab0 <lv_theme_material_init+0x108>)
 80249f8:	6a3b      	ldr	r3, [r7, #32]
 80249fa:	6213      	str	r3, [r2, #32]
    theme.flags = flags;
 80249fc:	4a2c      	ldr	r2, [pc, #176]	; (8024ab0 <lv_theme_material_init+0x108>)
 80249fe:	687b      	ldr	r3, [r7, #4]
 8024a00:	6253      	str	r3, [r2, #36]	; 0x24

    basic_init();
 8024a02:	f7fa fcef 	bl	801f3e4 <basic_init>
    cont_init();
 8024a06:	f7fb ff65 	bl	80208d4 <cont_init>
    btn_init();
 8024a0a:	f7fb ff6a 	bl	80208e2 <btn_init>
    label_init();
 8024a0e:	f7fb ff6f 	bl	80208f0 <label_init>
    bar_init();
 8024a12:	f7fb ff75 	bl	8020900 <bar_init>
    img_init();
 8024a16:	f7fc f87d 	bl	8020b14 <img_init>
    line_init();
 8024a1a:	f7fc f882 	bl	8020b22 <line_init>
    led_init();
 8024a1e:	f7fc f887 	bl	8020b30 <led_init>
    slider_init();
 8024a22:	f7fc f925 	bl	8020c70 <slider_init>
    switch_init();
 8024a26:	f7fc fac9 	bl	8020fbc <switch_init>
    linemeter_init();
 8024a2a:	f7fc fb83 	bl	8021134 <linemeter_init>
    gauge_init();
 8024a2e:	f7fc fcd9 	bl	80213e4 <gauge_init>
    arc_init();
 8024a32:	f7fc ffb3 	bl	802199c <arc_init>
    spinner_init();
 8024a36:	f7fd f881 	bl	8021b3c <spinner_init>
    chart_init();
 8024a3a:	f7fd f887 	bl	8021b4c <chart_init>
    calendar_init();
 8024a3e:	f7fd f9dd 	bl	8021dfc <calendar_init>
    cpicker_init();
 8024a42:	f7fd fe63 	bl	802270c <cpicker_init>
    checkbox_init();
 8024a46:	f7fd fff9 	bl	8022a3c <checkbox_init>
    btnmatrix_init();
 8024a4a:	f7fe f9dd 	bl	8022e08 <btnmatrix_init>
    keyboard_init();
 8024a4e:	f7fe f9e3 	bl	8022e18 <keyboard_init>
    msgbox_init();
 8024a52:	f7fe fb19 	bl	8023088 <msgbox_init>
    page_init();
 8024a56:	f7fe fb73 	bl	8023140 <page_init>
    textarea_init();
 8024a5a:	f7fe fc3f 	bl	80232dc <textarea_init>
    spinbox_init();
 8024a5e:	f7fe fcdf 	bl	8023420 <spinbox_init>
    list_init();
 8024a62:	f7fe fd61 	bl	8023528 <list_init>
    ddlist_init();
 8024a66:	f7ff f9b9 	bl	8023ddc <ddlist_init>
    roller_init();
 8024a6a:	f7ff fa61 	bl	8023f30 <roller_init>
    tabview_init();
 8024a6e:	f7ff fac5 	bl	8023ffc <tabview_init>
    tileview_init();
 8024a72:	f7ff faca 	bl	802400a <tileview_init>
    table_init();
 8024a76:	f7ff facf 	bl	8024018 <table_init>
    win_init();
 8024a7a:	f7ff fc41 	bl	8024300 <win_init>
    tabview_win_shared_init();
 8024a7e:	f7ff fc47 	bl	8024310 <tabview_win_shared_init>

    theme.apply_xcb = NULL;
 8024a82:	4b0b      	ldr	r3, [pc, #44]	; (8024ab0 <lv_theme_material_init+0x108>)
 8024a84:	2200      	movs	r2, #0
 8024a86:	605a      	str	r2, [r3, #4]
    theme.apply_cb = theme_apply;
 8024a88:	4b09      	ldr	r3, [pc, #36]	; (8024ab0 <lv_theme_material_init+0x108>)
 8024a8a:	4a0a      	ldr	r2, [pc, #40]	; (8024ab4 <lv_theme_material_init+0x10c>)
 8024a8c:	601a      	str	r2, [r3, #0]

    inited = true;
 8024a8e:	4b05      	ldr	r3, [pc, #20]	; (8024aa4 <lv_theme_material_init+0xfc>)
 8024a90:	2201      	movs	r2, #1
 8024a92:	701a      	strb	r2, [r3, #0]

    lv_obj_report_style_mod(NULL);
 8024a94:	2000      	movs	r0, #0
 8024a96:	f7e1 fac7 	bl	8006028 <lv_obj_report_style_mod>

    return &theme;
 8024a9a:	4b05      	ldr	r3, [pc, #20]	; (8024ab0 <lv_theme_material_init+0x108>)
}
 8024a9c:	4618      	mov	r0, r3
 8024a9e:	3710      	adds	r7, #16
 8024aa0:	46bd      	mov	sp, r7
 8024aa2:	bd80      	pop	{r7, pc}
 8024aa4:	200200d8 	.word	0x200200d8
 8024aa8:	20021850 	.word	0x20021850
 8024aac:	200200d4 	.word	0x200200d4
 8024ab0:	200200a8 	.word	0x200200a8
 8024ab4:	08024ab9 	.word	0x08024ab9

08024ab8 <theme_apply>:

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 8024ab8:	b580      	push	{r7, lr}
 8024aba:	b086      	sub	sp, #24
 8024abc:	af00      	add	r7, sp, #0
 8024abe:	60f8      	str	r0, [r7, #12]
 8024ac0:	60b9      	str	r1, [r7, #8]
 8024ac2:	4613      	mov	r3, r2
 8024ac4:	80fb      	strh	r3, [r7, #6]
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
 8024ac6:	88fb      	ldrh	r3, [r7, #6]
 8024ac8:	2b28      	cmp	r3, #40	; 0x28
 8024aca:	f200 84c1 	bhi.w	8025450 <theme_apply+0x998>
 8024ace:	a201      	add	r2, pc, #4	; (adr r2, 8024ad4 <theme_apply+0x1c>)
 8024ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024ad4:	08025451 	.word	0x08025451
 8024ad8:	08024b79 	.word	0x08024b79
 8024adc:	08024b93 	.word	0x08024b93
 8024ae0:	08024cff 	.word	0x08024cff
 8024ae4:	08024c83 	.word	0x08024c83
 8024ae8:	08024bcb 	.word	0x08024bcb
 8024aec:	08024be7 	.word	0x08024be7
 8024af0:	08025337 	.word	0x08025337
 8024af4:	08025451 	.word	0x08025451
 8024af8:	08024dfd 	.word	0x08024dfd
 8024afc:	08025111 	.word	0x08025111
 8024b00:	08024baf 	.word	0x08024baf
 8024b04:	08025399 	.word	0x08025399
 8024b08:	0802507f 	.word	0x0802507f
 8024b0c:	080253f9 	.word	0x080253f9
 8024b10:	08025451 	.word	0x08025451
 8024b14:	08025451 	.word	0x08025451
 8024b18:	08024c37 	.word	0x08024c37
 8024b1c:	08025451 	.word	0x08025451
 8024b20:	08024e9b 	.word	0x08024e9b
 8024b24:	08025451 	.word	0x08025451
 8024b28:	08025025 	.word	0x08025025
 8024b2c:	08025065 	.word	0x08025065
 8024b30:	080253d1 	.word	0x080253d1
 8024b34:	08024e41 	.word	0x08024e41
 8024b38:	08024e69 	.word	0x08024e69
 8024b3c:	08025019 	.word	0x08025019
 8024b40:	08024eb5 	.word	0x08024eb5
 8024b44:	08024fd9 	.word	0x08024fd9
 8024b48:	08024da5 	.word	0x08024da5
 8024b4c:	080252cf 	.word	0x080252cf
 8024b50:	0802530f 	.word	0x0802530f
 8024b54:	08024d73 	.word	0x08024d73
 8024b58:	08024cb5 	.word	0x08024cb5
 8024b5c:	0802519d 	.word	0x0802519d
 8024b60:	08024f17 	.word	0x08024f17
 8024b64:	08024f77 	.word	0x08024f77
 8024b68:	0802525f 	.word	0x0802525f
 8024b6c:	08024f91 	.word	0x08024f91
 8024b70:	080251e5 	.word	0x080251e5
 8024b74:	08025245 	.word	0x08025245
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 8024b78:	2100      	movs	r1, #0
 8024b7a:	68b8      	ldr	r0, [r7, #8]
 8024b7c:	f7e1 ffa8 	bl	8006ad0 <lv_obj_get_style_list>
 8024b80:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024b82:	4bae      	ldr	r3, [pc, #696]	; (8024e3c <theme_apply+0x384>)
 8024b84:	681b      	ldr	r3, [r3, #0]
 8024b86:	4619      	mov	r1, r3
 8024b88:	6938      	ldr	r0, [r7, #16]
 8024b8a:	f7e6 fbfd 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024b8e:	f000 bc60 	b.w	8025452 <theme_apply+0x99a>
        case LV_THEME_OBJ:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 8024b92:	2100      	movs	r1, #0
 8024b94:	68b8      	ldr	r0, [r7, #8]
 8024b96:	f7e1 ff9b 	bl	8006ad0 <lv_obj_get_style_list>
 8024b9a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024b9c:	4ba7      	ldr	r3, [pc, #668]	; (8024e3c <theme_apply+0x384>)
 8024b9e:	681b      	ldr	r3, [r3, #0]
 8024ba0:	3304      	adds	r3, #4
 8024ba2:	4619      	mov	r1, r3
 8024ba4:	6938      	ldr	r0, [r7, #16]
 8024ba6:	f7e6 fbef 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024baa:	f000 bc52 	b.w	8025452 <theme_apply+0x99a>
#if LV_USE_CONT
        case LV_THEME_CONT:
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
 8024bae:	2100      	movs	r1, #0
 8024bb0:	68b8      	ldr	r0, [r7, #8]
 8024bb2:	f7e1 ff8d 	bl	8006ad0 <lv_obj_get_style_list>
 8024bb6:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024bb8:	4ba0      	ldr	r3, [pc, #640]	; (8024e3c <theme_apply+0x384>)
 8024bba:	681b      	ldr	r3, [r3, #0]
 8024bbc:	3304      	adds	r3, #4
 8024bbe:	4619      	mov	r1, r3
 8024bc0:	6938      	ldr	r0, [r7, #16]
 8024bc2:	f7e6 fbe1 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024bc6:	f000 bc44 	b.w	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8024bca:	2100      	movs	r1, #0
 8024bcc:	68b8      	ldr	r0, [r7, #8]
 8024bce:	f7e1 ff7f 	bl	8006ad0 <lv_obj_get_style_list>
 8024bd2:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->btn);
 8024bd4:	4b99      	ldr	r3, [pc, #612]	; (8024e3c <theme_apply+0x384>)
 8024bd6:	681b      	ldr	r3, [r3, #0]
 8024bd8:	3310      	adds	r3, #16
 8024bda:	4619      	mov	r1, r3
 8024bdc:	6938      	ldr	r0, [r7, #16]
 8024bde:	f7e6 fbd3 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024be2:	f000 bc36 	b.w	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
 8024be6:	2100      	movs	r1, #0
 8024be8:	68b8      	ldr	r0, [r7, #8]
 8024bea:	f7e1 ff71 	bl	8006ad0 <lv_obj_get_style_list>
 8024bee:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024bf0:	4b92      	ldr	r3, [pc, #584]	; (8024e3c <theme_apply+0x384>)
 8024bf2:	681b      	ldr	r3, [r3, #0]
 8024bf4:	3304      	adds	r3, #4
 8024bf6:	4619      	mov	r1, r3
 8024bf8:	6938      	ldr	r0, [r7, #16]
 8024bfa:	f7e6 fbc5 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8024bfe:	4b8f      	ldr	r3, [pc, #572]	; (8024e3c <theme_apply+0x384>)
 8024c00:	681b      	ldr	r3, [r3, #0]
 8024c02:	3318      	adds	r3, #24
 8024c04:	4619      	mov	r1, r3
 8024c06:	6938      	ldr	r0, [r7, #16]
 8024c08:	f7e6 fbbe 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
 8024c0c:	2101      	movs	r1, #1
 8024c0e:	68b8      	ldr	r0, [r7, #8]
 8024c10:	f7e1 ff5e 	bl	8006ad0 <lv_obj_get_style_list>
 8024c14:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024c16:	4b89      	ldr	r3, [pc, #548]	; (8024e3c <theme_apply+0x384>)
 8024c18:	681b      	ldr	r3, [r3, #0]
 8024c1a:	3304      	adds	r3, #4
 8024c1c:	4619      	mov	r1, r3
 8024c1e:	6938      	ldr	r0, [r7, #16]
 8024c20:	f7e6 fbb2 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8024c24:	4b85      	ldr	r3, [pc, #532]	; (8024e3c <theme_apply+0x384>)
 8024c26:	681b      	ldr	r3, [r3, #0]
 8024c28:	3308      	adds	r3, #8
 8024c2a:	4619      	mov	r1, r3
 8024c2c:	6938      	ldr	r0, [r7, #16]
 8024c2e:	f7e6 fbab 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024c32:	f000 bc0e 	b.w	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
 8024c36:	2100      	movs	r1, #0
 8024c38:	68b8      	ldr	r0, [r7, #8]
 8024c3a:	f7e1 ff49 	bl	8006ad0 <lv_obj_get_style_list>
 8024c3e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024c40:	4b7e      	ldr	r3, [pc, #504]	; (8024e3c <theme_apply+0x384>)
 8024c42:	681b      	ldr	r3, [r3, #0]
 8024c44:	4619      	mov	r1, r3
 8024c46:	6938      	ldr	r0, [r7, #16]
 8024c48:	f7e6 fb9e 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->kb_bg);
 8024c4c:	4b7b      	ldr	r3, [pc, #492]	; (8024e3c <theme_apply+0x384>)
 8024c4e:	681b      	ldr	r3, [r3, #0]
 8024c50:	336c      	adds	r3, #108	; 0x6c
 8024c52:	4619      	mov	r1, r3
 8024c54:	6938      	ldr	r0, [r7, #16]
 8024c56:	f7e6 fb97 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
 8024c5a:	2101      	movs	r1, #1
 8024c5c:	68b8      	ldr	r0, [r7, #8]
 8024c5e:	f7e1 ff37 	bl	8006ad0 <lv_obj_get_style_list>
 8024c62:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024c64:	4b75      	ldr	r3, [pc, #468]	; (8024e3c <theme_apply+0x384>)
 8024c66:	681b      	ldr	r3, [r3, #0]
 8024c68:	3304      	adds	r3, #4
 8024c6a:	4619      	mov	r1, r3
 8024c6c:	6938      	ldr	r0, [r7, #16]
 8024c6e:	f7e6 fb8b 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8024c72:	4b72      	ldr	r3, [pc, #456]	; (8024e3c <theme_apply+0x384>)
 8024c74:	681b      	ldr	r3, [r3, #0]
 8024c76:	3308      	adds	r3, #8
 8024c78:	4619      	mov	r1, r3
 8024c7a:	6938      	ldr	r0, [r7, #16]
 8024c7c:	f7e6 fb84 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024c80:	e3e7      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
 8024c82:	2100      	movs	r1, #0
 8024c84:	68b8      	ldr	r0, [r7, #8]
 8024c86:	f7e1 ff23 	bl	8006ad0 <lv_obj_get_style_list>
 8024c8a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_bg);
 8024c8c:	4b6b      	ldr	r3, [pc, #428]	; (8024e3c <theme_apply+0x384>)
 8024c8e:	681b      	ldr	r3, [r3, #0]
 8024c90:	3328      	adds	r3, #40	; 0x28
 8024c92:	4619      	mov	r1, r3
 8024c94:	6938      	ldr	r0, [r7, #16]
 8024c96:	f7e6 fb77 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
 8024c9a:	2101      	movs	r1, #1
 8024c9c:	68b8      	ldr	r0, [r7, #8]
 8024c9e:	f7e1 ff17 	bl	8006ad0 <lv_obj_get_style_list>
 8024ca2:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_indic);
 8024ca4:	4b65      	ldr	r3, [pc, #404]	; (8024e3c <theme_apply+0x384>)
 8024ca6:	681b      	ldr	r3, [r3, #0]
 8024ca8:	332c      	adds	r3, #44	; 0x2c
 8024caa:	4619      	mov	r1, r3
 8024cac:	6938      	ldr	r0, [r7, #16]
 8024cae:	f7e6 fb6b 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024cb2:	e3ce      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
 8024cb4:	2100      	movs	r1, #0
 8024cb6:	68b8      	ldr	r0, [r7, #8]
 8024cb8:	f7e1 ff0a 	bl	8006ad0 <lv_obj_get_style_list>
 8024cbc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_bg);
 8024cbe:	4b5f      	ldr	r3, [pc, #380]	; (8024e3c <theme_apply+0x384>)
 8024cc0:	681b      	ldr	r3, [r3, #0]
 8024cc2:	3328      	adds	r3, #40	; 0x28
 8024cc4:	4619      	mov	r1, r3
 8024cc6:	6938      	ldr	r0, [r7, #16]
 8024cc8:	f7e6 fb5e 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
 8024ccc:	2101      	movs	r1, #1
 8024cce:	68b8      	ldr	r0, [r7, #8]
 8024cd0:	f7e1 fefe 	bl	8006ad0 <lv_obj_get_style_list>
 8024cd4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_indic);
 8024cd6:	4b59      	ldr	r3, [pc, #356]	; (8024e3c <theme_apply+0x384>)
 8024cd8:	681b      	ldr	r3, [r3, #0]
 8024cda:	332c      	adds	r3, #44	; 0x2c
 8024cdc:	4619      	mov	r1, r3
 8024cde:	6938      	ldr	r0, [r7, #16]
 8024ce0:	f7e6 fb52 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
 8024ce4:	2102      	movs	r1, #2
 8024ce6:	68b8      	ldr	r0, [r7, #8]
 8024ce8:	f7e1 fef2 	bl	8006ad0 <lv_obj_get_style_list>
 8024cec:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sw_knob);
 8024cee:	4b53      	ldr	r3, [pc, #332]	; (8024e3c <theme_apply+0x384>)
 8024cf0:	681b      	ldr	r3, [r3, #0]
 8024cf2:	33a0      	adds	r3, #160	; 0xa0
 8024cf4:	4619      	mov	r1, r3
 8024cf6:	6938      	ldr	r0, [r7, #16]
 8024cf8:	f7e6 fb46 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024cfc:	e3a9      	b.n	8025452 <theme_apply+0x99a>
            break;
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
 8024cfe:	2100      	movs	r1, #0
 8024d00:	68b8      	ldr	r0, [r7, #8]
 8024d02:	f7e1 fee5 	bl	8006ad0 <lv_obj_get_style_list>
 8024d06:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024d08:	4b4c      	ldr	r3, [pc, #304]	; (8024e3c <theme_apply+0x384>)
 8024d0a:	681b      	ldr	r3, [r3, #0]
 8024d0c:	3304      	adds	r3, #4
 8024d0e:	4619      	mov	r1, r3
 8024d10:	6938      	ldr	r0, [r7, #16]
 8024d12:	f7e6 fb39 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_bg);
 8024d16:	4b49      	ldr	r3, [pc, #292]	; (8024e3c <theme_apply+0x384>)
 8024d18:	681b      	ldr	r3, [r3, #0]
 8024d1a:	3320      	adds	r3, #32
 8024d1c:	4619      	mov	r1, r3
 8024d1e:	6938      	ldr	r0, [r7, #16]
 8024d20:	f7e6 fb32 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
 8024d24:	2101      	movs	r1, #1
 8024d26:	68b8      	ldr	r0, [r7, #8]
 8024d28:	f7e1 fed2 	bl	8006ad0 <lv_obj_get_style_list>
 8024d2c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->arc_indic);
 8024d2e:	4b43      	ldr	r3, [pc, #268]	; (8024e3c <theme_apply+0x384>)
 8024d30:	681b      	ldr	r3, [r3, #0]
 8024d32:	331c      	adds	r3, #28
 8024d34:	4619      	mov	r1, r3
 8024d36:	6938      	ldr	r0, [r7, #16]
 8024d38:	f7e6 fb26 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
 8024d3c:	2102      	movs	r1, #2
 8024d3e:	68b8      	ldr	r0, [r7, #8]
 8024d40:	f7e1 fec6 	bl	8006ad0 <lv_obj_get_style_list>
 8024d44:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024d46:	4b3d      	ldr	r3, [pc, #244]	; (8024e3c <theme_apply+0x384>)
 8024d48:	681b      	ldr	r3, [r3, #0]
 8024d4a:	3304      	adds	r3, #4
 8024d4c:	4619      	mov	r1, r3
 8024d4e:	6938      	ldr	r0, [r7, #16]
 8024d50:	f7e6 fb1a 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8024d54:	4b39      	ldr	r3, [pc, #228]	; (8024e3c <theme_apply+0x384>)
 8024d56:	681b      	ldr	r3, [r3, #0]
 8024d58:	3308      	adds	r3, #8
 8024d5a:	4619      	mov	r1, r3
 8024d5c:	6938      	ldr	r0, [r7, #16]
 8024d5e:	f7e6 fb13 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_knob);
 8024d62:	4b36      	ldr	r3, [pc, #216]	; (8024e3c <theme_apply+0x384>)
 8024d64:	681b      	ldr	r3, [r3, #0]
 8024d66:	3324      	adds	r3, #36	; 0x24
 8024d68:	4619      	mov	r1, r3
 8024d6a:	6938      	ldr	r0, [r7, #16]
 8024d6c:	f7e6 fb0c 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024d70:	e36f      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
 8024d72:	2100      	movs	r1, #0
 8024d74:	68b8      	ldr	r0, [r7, #8]
 8024d76:	f7e1 feab 	bl	8006ad0 <lv_obj_get_style_list>
 8024d7a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->arc_bg);
 8024d7c:	4b2f      	ldr	r3, [pc, #188]	; (8024e3c <theme_apply+0x384>)
 8024d7e:	681b      	ldr	r3, [r3, #0]
 8024d80:	3320      	adds	r3, #32
 8024d82:	4619      	mov	r1, r3
 8024d84:	6938      	ldr	r0, [r7, #16]
 8024d86:	f7e6 faff 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
 8024d8a:	2101      	movs	r1, #1
 8024d8c:	68b8      	ldr	r0, [r7, #8]
 8024d8e:	f7e1 fe9f 	bl	8006ad0 <lv_obj_get_style_list>
 8024d92:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->arc_indic);
 8024d94:	4b29      	ldr	r3, [pc, #164]	; (8024e3c <theme_apply+0x384>)
 8024d96:	681b      	ldr	r3, [r3, #0]
 8024d98:	331c      	adds	r3, #28
 8024d9a:	4619      	mov	r1, r3
 8024d9c:	6938      	ldr	r0, [r7, #16]
 8024d9e:	f7e6 faf3 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024da2:	e356      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
 8024da4:	2100      	movs	r1, #0
 8024da6:	68b8      	ldr	r0, [r7, #8]
 8024da8:	f7e1 fe92 	bl	8006ad0 <lv_obj_get_style_list>
 8024dac:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_bg);
 8024dae:	4b23      	ldr	r3, [pc, #140]	; (8024e3c <theme_apply+0x384>)
 8024db0:	681b      	ldr	r3, [r3, #0]
 8024db2:	3328      	adds	r3, #40	; 0x28
 8024db4:	4619      	mov	r1, r3
 8024db6:	6938      	ldr	r0, [r7, #16]
 8024db8:	f7e6 fae6 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->slider_bg);
 8024dbc:	4b1f      	ldr	r3, [pc, #124]	; (8024e3c <theme_apply+0x384>)
 8024dbe:	681b      	ldr	r3, [r3, #0]
 8024dc0:	3398      	adds	r3, #152	; 0x98
 8024dc2:	4619      	mov	r1, r3
 8024dc4:	6938      	ldr	r0, [r7, #16]
 8024dc6:	f7e6 fadf 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
 8024dca:	2101      	movs	r1, #1
 8024dcc:	68b8      	ldr	r0, [r7, #8]
 8024dce:	f7e1 fe7f 	bl	8006ad0 <lv_obj_get_style_list>
 8024dd2:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_indic);
 8024dd4:	4b19      	ldr	r3, [pc, #100]	; (8024e3c <theme_apply+0x384>)
 8024dd6:	681b      	ldr	r3, [r3, #0]
 8024dd8:	332c      	adds	r3, #44	; 0x2c
 8024dda:	4619      	mov	r1, r3
 8024ddc:	6938      	ldr	r0, [r7, #16]
 8024dde:	f7e6 fad3 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
 8024de2:	2102      	movs	r1, #2
 8024de4:	68b8      	ldr	r0, [r7, #8]
 8024de6:	f7e1 fe73 	bl	8006ad0 <lv_obj_get_style_list>
 8024dea:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->slider_knob);
 8024dec:	4b13      	ldr	r3, [pc, #76]	; (8024e3c <theme_apply+0x384>)
 8024dee:	681b      	ldr	r3, [r3, #0]
 8024df0:	3394      	adds	r3, #148	; 0x94
 8024df2:	4619      	mov	r1, r3
 8024df4:	6938      	ldr	r0, [r7, #16]
 8024df6:	f7e6 fac7 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024dfa:	e32a      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
 8024dfc:	2100      	movs	r1, #0
 8024dfe:	68b8      	ldr	r0, [r7, #8]
 8024e00:	f7e1 fe66 	bl	8006ad0 <lv_obj_get_style_list>
 8024e04:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->cb_bg);
 8024e06:	4b0d      	ldr	r3, [pc, #52]	; (8024e3c <theme_apply+0x384>)
 8024e08:	681b      	ldr	r3, [r3, #0]
 8024e0a:	3350      	adds	r3, #80	; 0x50
 8024e0c:	4619      	mov	r1, r3
 8024e0e:	6938      	ldr	r0, [r7, #16]
 8024e10:	f7e6 faba 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
 8024e14:	2140      	movs	r1, #64	; 0x40
 8024e16:	68b8      	ldr	r0, [r7, #8]
 8024e18:	f7e1 fe5a 	bl	8006ad0 <lv_obj_get_style_list>
 8024e1c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->btn);
 8024e1e:	4b07      	ldr	r3, [pc, #28]	; (8024e3c <theme_apply+0x384>)
 8024e20:	681b      	ldr	r3, [r3, #0]
 8024e22:	3310      	adds	r3, #16
 8024e24:	4619      	mov	r1, r3
 8024e26:	6938      	ldr	r0, [r7, #16]
 8024e28:	f7e6 faae 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->cb_bullet);
 8024e2c:	4b03      	ldr	r3, [pc, #12]	; (8024e3c <theme_apply+0x384>)
 8024e2e:	681b      	ldr	r3, [r3, #0]
 8024e30:	3354      	adds	r3, #84	; 0x54
 8024e32:	4619      	mov	r1, r3
 8024e34:	6938      	ldr	r0, [r7, #16]
 8024e36:	f7e6 faa7 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024e3a:	e30a      	b.n	8025452 <theme_apply+0x99a>
 8024e3c:	200200d4 	.word	0x200200d4
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
 8024e40:	2100      	movs	r1, #0
 8024e42:	68b8      	ldr	r0, [r7, #8]
 8024e44:	f7e1 fe44 	bl	8006ad0 <lv_obj_get_style_list>
 8024e48:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024e4a:	4bb0      	ldr	r3, [pc, #704]	; (802510c <theme_apply+0x654>)
 8024e4c:	681b      	ldr	r3, [r3, #0]
 8024e4e:	3304      	adds	r3, #4
 8024e50:	4619      	mov	r1, r3
 8024e52:	6938      	ldr	r0, [r7, #16]
 8024e54:	f7e6 fa98 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->mbox_bg);
 8024e58:	4bac      	ldr	r3, [pc, #688]	; (802510c <theme_apply+0x654>)
 8024e5a:	681b      	ldr	r3, [r3, #0]
 8024e5c:	3380      	adds	r3, #128	; 0x80
 8024e5e:	4619      	mov	r1, r3
 8024e60:	6938      	ldr	r0, [r7, #16]
 8024e62:	f7e6 fa91 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024e66:	e2f4      	b.n	8025452 <theme_apply+0x99a>

        case LV_THEME_MSGBOX_BTNS:
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
 8024e68:	2140      	movs	r1, #64	; 0x40
 8024e6a:	68b8      	ldr	r0, [r7, #8]
 8024e6c:	f7e1 fe30 	bl	8006ad0 <lv_obj_get_style_list>
 8024e70:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->pad_small);
 8024e72:	4ba6      	ldr	r3, [pc, #664]	; (802510c <theme_apply+0x654>)
 8024e74:	681b      	ldr	r3, [r3, #0]
 8024e76:	3318      	adds	r3, #24
 8024e78:	4619      	mov	r1, r3
 8024e7a:	6938      	ldr	r0, [r7, #16]
 8024e7c:	f7e6 fa84 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
 8024e80:	2141      	movs	r1, #65	; 0x41
 8024e82:	68b8      	ldr	r0, [r7, #8]
 8024e84:	f7e1 fe24 	bl	8006ad0 <lv_obj_get_style_list>
 8024e88:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->btn);
 8024e8a:	4ba0      	ldr	r3, [pc, #640]	; (802510c <theme_apply+0x654>)
 8024e8c:	681b      	ldr	r3, [r3, #0]
 8024e8e:	3310      	adds	r3, #16
 8024e90:	4619      	mov	r1, r3
 8024e92:	6938      	ldr	r0, [r7, #16]
 8024e94:	f7e6 fa78 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024e98:	e2db      	b.n	8025452 <theme_apply+0x99a>

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
 8024e9a:	2100      	movs	r1, #0
 8024e9c:	68b8      	ldr	r0, [r7, #8]
 8024e9e:	f7e1 fe17 	bl	8006ad0 <lv_obj_get_style_list>
 8024ea2:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->led);
 8024ea4:	4b99      	ldr	r3, [pc, #612]	; (802510c <theme_apply+0x654>)
 8024ea6:	681b      	ldr	r3, [r3, #0]
 8024ea8:	3370      	adds	r3, #112	; 0x70
 8024eaa:	4619      	mov	r1, r3
 8024eac:	6938      	ldr	r0, [r7, #16]
 8024eae:	f7e6 fa6b 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024eb2:	e2ce      	b.n	8025452 <theme_apply+0x99a>
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
 8024eb4:	2100      	movs	r1, #0
 8024eb6:	68b8      	ldr	r0, [r7, #8]
 8024eb8:	f7e1 fe0a 	bl	8006ad0 <lv_obj_get_style_list>
 8024ebc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024ebe:	4b93      	ldr	r3, [pc, #588]	; (802510c <theme_apply+0x654>)
 8024ec0:	681b      	ldr	r3, [r3, #0]
 8024ec2:	3304      	adds	r3, #4
 8024ec4:	4619      	mov	r1, r3
 8024ec6:	6938      	ldr	r0, [r7, #16]
 8024ec8:	f7e6 fa5e 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 8024ecc:	2140      	movs	r1, #64	; 0x40
 8024ece:	68b8      	ldr	r0, [r7, #8]
 8024ed0:	f7e1 fdfe 	bl	8006ad0 <lv_obj_get_style_list>
 8024ed4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->pad_inner);
 8024ed6:	4b8d      	ldr	r3, [pc, #564]	; (802510c <theme_apply+0x654>)
 8024ed8:	681b      	ldr	r3, [r3, #0]
 8024eda:	3314      	adds	r3, #20
 8024edc:	4619      	mov	r1, r3
 8024ede:	6938      	ldr	r0, [r7, #16]
 8024ee0:	f7e6 fa52 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
 8024ee4:	2101      	movs	r1, #1
 8024ee6:	68b8      	ldr	r0, [r7, #8]
 8024ee8:	f7e1 fdf2 	bl	8006ad0 <lv_obj_get_style_list>
 8024eec:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8024eee:	4b87      	ldr	r3, [pc, #540]	; (802510c <theme_apply+0x654>)
 8024ef0:	681b      	ldr	r3, [r3, #0]
 8024ef2:	3384      	adds	r3, #132	; 0x84
 8024ef4:	4619      	mov	r1, r3
 8024ef6:	6938      	ldr	r0, [r7, #16]
 8024ef8:	f7e6 fa46 	bl	800b388 <_lv_style_list_add_style>

#if LV_USE_ANIMATION
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
 8024efc:	2102      	movs	r1, #2
 8024efe:	68b8      	ldr	r0, [r7, #8]
 8024f00:	f7e1 fde6 	bl	8006ad0 <lv_obj_get_style_list>
 8024f04:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->edge_flash);
 8024f06:	4b81      	ldr	r3, [pc, #516]	; (802510c <theme_apply+0x654>)
 8024f08:	681b      	ldr	r3, [r3, #0]
 8024f0a:	3388      	adds	r3, #136	; 0x88
 8024f0c:	4619      	mov	r1, r3
 8024f0e:	6938      	ldr	r0, [r7, #16]
 8024f10:	f7e6 fa3a 	bl	800b388 <_lv_style_list_add_style>
#endif
            break;
 8024f14:	e29d      	b.n	8025452 <theme_apply+0x99a>
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
 8024f16:	2100      	movs	r1, #0
 8024f18:	68b8      	ldr	r0, [r7, #8]
 8024f1a:	f7e1 fdd9 	bl	8006ad0 <lv_obj_get_style_list>
 8024f1e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024f20:	4b7a      	ldr	r3, [pc, #488]	; (802510c <theme_apply+0x654>)
 8024f22:	681b      	ldr	r3, [r3, #0]
 8024f24:	4619      	mov	r1, r3
 8024f26:	6938      	ldr	r0, [r7, #16]
 8024f28:	f7e6 fa2e 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
 8024f2c:	2141      	movs	r1, #65	; 0x41
 8024f2e:	68b8      	ldr	r0, [r7, #8]
 8024f30:	f7e1 fdce 	bl	8006ad0 <lv_obj_get_style_list>
 8024f34:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
 8024f36:	4b75      	ldr	r3, [pc, #468]	; (802510c <theme_apply+0x654>)
 8024f38:	681b      	ldr	r3, [r3, #0]
 8024f3a:	33ac      	adds	r3, #172	; 0xac
 8024f3c:	4619      	mov	r1, r3
 8024f3e:	6938      	ldr	r0, [r7, #16]
 8024f40:	f7e6 fa22 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
 8024f44:	2143      	movs	r1, #67	; 0x43
 8024f46:	68b8      	ldr	r0, [r7, #8]
 8024f48:	f7e1 fdc2 	bl	8006ad0 <lv_obj_get_style_list>
 8024f4c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_indic);
 8024f4e:	4b6f      	ldr	r3, [pc, #444]	; (802510c <theme_apply+0x654>)
 8024f50:	681b      	ldr	r3, [r3, #0]
 8024f52:	33b0      	adds	r3, #176	; 0xb0
 8024f54:	4619      	mov	r1, r3
 8024f56:	6938      	ldr	r0, [r7, #16]
 8024f58:	f7e6 fa16 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
 8024f5c:	2142      	movs	r1, #66	; 0x42
 8024f5e:	68b8      	ldr	r0, [r7, #8]
 8024f60:	f7e1 fdb6 	bl	8006ad0 <lv_obj_get_style_list>
 8024f64:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns);
 8024f66:	4b69      	ldr	r3, [pc, #420]	; (802510c <theme_apply+0x654>)
 8024f68:	681b      	ldr	r3, [r3, #0]
 8024f6a:	33a8      	adds	r3, #168	; 0xa8
 8024f6c:	4619      	mov	r1, r3
 8024f6e:	6938      	ldr	r0, [r7, #16]
 8024f70:	f7e6 fa0a 	bl	800b388 <_lv_style_list_add_style>
            break;
 8024f74:	e26d      	b.n	8025452 <theme_apply+0x99a>

        case LV_THEME_TABVIEW_PAGE:
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 8024f76:	2140      	movs	r1, #64	; 0x40
 8024f78:	68b8      	ldr	r0, [r7, #8]
 8024f7a:	f7e1 fda9 	bl	8006ad0 <lv_obj_get_style_list>
 8024f7e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
 8024f80:	4b62      	ldr	r3, [pc, #392]	; (802510c <theme_apply+0x654>)
 8024f82:	681b      	ldr	r3, [r3, #0]
 8024f84:	33b4      	adds	r3, #180	; 0xb4
 8024f86:	4619      	mov	r1, r3
 8024f88:	6938      	ldr	r0, [r7, #16]
 8024f8a:	f7e6 f9fd 	bl	800b388 <_lv_style_list_add_style>

            break;
 8024f8e:	e260      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
 8024f90:	2100      	movs	r1, #0
 8024f92:	68b8      	ldr	r0, [r7, #8]
 8024f94:	f7e1 fd9c 	bl	8006ad0 <lv_obj_get_style_list>
 8024f98:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024f9a:	4b5c      	ldr	r3, [pc, #368]	; (802510c <theme_apply+0x654>)
 8024f9c:	681b      	ldr	r3, [r3, #0]
 8024f9e:	4619      	mov	r1, r3
 8024fa0:	6938      	ldr	r0, [r7, #16]
 8024fa2:	f7e6 f9f1 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
 8024fa6:	2101      	movs	r1, #1
 8024fa8:	68b8      	ldr	r0, [r7, #8]
 8024faa:	f7e1 fd91 	bl	8006ad0 <lv_obj_get_style_list>
 8024fae:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8024fb0:	4b56      	ldr	r3, [pc, #344]	; (802510c <theme_apply+0x654>)
 8024fb2:	681b      	ldr	r3, [r3, #0]
 8024fb4:	3384      	adds	r3, #132	; 0x84
 8024fb6:	4619      	mov	r1, r3
 8024fb8:	6938      	ldr	r0, [r7, #16]
 8024fba:	f7e6 f9e5 	bl	800b388 <_lv_style_list_add_style>

#if LV_USE_ANIMATION
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
 8024fbe:	2102      	movs	r1, #2
 8024fc0:	68b8      	ldr	r0, [r7, #8]
 8024fc2:	f7e1 fd85 	bl	8006ad0 <lv_obj_get_style_list>
 8024fc6:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->edge_flash);
 8024fc8:	4b50      	ldr	r3, [pc, #320]	; (802510c <theme_apply+0x654>)
 8024fca:	681b      	ldr	r3, [r3, #0]
 8024fcc:	3388      	adds	r3, #136	; 0x88
 8024fce:	4619      	mov	r1, r3
 8024fd0:	6938      	ldr	r0, [r7, #16]
 8024fd2:	f7e6 f9d9 	bl	800b388 <_lv_style_list_add_style>
#endif
            break;
 8024fd6:	e23c      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
 8024fd8:	2100      	movs	r1, #0
 8024fda:	68b8      	ldr	r0, [r7, #8]
 8024fdc:	f7e1 fd78 	bl	8006ad0 <lv_obj_get_style_list>
 8024fe0:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024fe2:	4b4a      	ldr	r3, [pc, #296]	; (802510c <theme_apply+0x654>)
 8024fe4:	681b      	ldr	r3, [r3, #0]
 8024fe6:	3304      	adds	r3, #4
 8024fe8:	4619      	mov	r1, r3
 8024fea:	6938      	ldr	r0, [r7, #16]
 8024fec:	f7e6 f9cc 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->roller_bg);
 8024ff0:	4b46      	ldr	r3, [pc, #280]	; (802510c <theme_apply+0x654>)
 8024ff2:	681b      	ldr	r3, [r3, #0]
 8024ff4:	338c      	adds	r3, #140	; 0x8c
 8024ff6:	4619      	mov	r1, r3
 8024ff8:	6938      	ldr	r0, [r7, #16]
 8024ffa:	f7e6 f9c5 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
 8024ffe:	2103      	movs	r1, #3
 8025000:	68b8      	ldr	r0, [r7, #8]
 8025002:	f7e1 fd65 	bl	8006ad0 <lv_obj_get_style_list>
 8025006:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->roller_sel);
 8025008:	4b40      	ldr	r3, [pc, #256]	; (802510c <theme_apply+0x654>)
 802500a:	681b      	ldr	r3, [r3, #0]
 802500c:	3390      	adds	r3, #144	; 0x90
 802500e:	4619      	mov	r1, r3
 8025010:	6938      	ldr	r0, [r7, #16]
 8025012:	f7e6 f9b9 	bl	800b388 <_lv_style_list_add_style>
            break;
 8025016:	e21c      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
 8025018:	2100      	movs	r1, #0
 802501a:	68b8      	ldr	r0, [r7, #8]
 802501c:	f7e1 fd58 	bl	8006ad0 <lv_obj_get_style_list>
 8025020:	6138      	str	r0, [r7, #16]
            break;
 8025022:	e216      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
 8025024:	2100      	movs	r1, #0
 8025026:	68b8      	ldr	r0, [r7, #8]
 8025028:	f7e1 fd52 	bl	8006ad0 <lv_obj_get_style_list>
 802502c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 802502e:	4b37      	ldr	r3, [pc, #220]	; (802510c <theme_apply+0x654>)
 8025030:	681b      	ldr	r3, [r3, #0]
 8025032:	3304      	adds	r3, #4
 8025034:	4619      	mov	r1, r3
 8025036:	6938      	ldr	r0, [r7, #16]
 8025038:	f7e6 f9a6 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->list_bg);
 802503c:	4b33      	ldr	r3, [pc, #204]	; (802510c <theme_apply+0x654>)
 802503e:	681b      	ldr	r3, [r3, #0]
 8025040:	3378      	adds	r3, #120	; 0x78
 8025042:	4619      	mov	r1, r3
 8025044:	6938      	ldr	r0, [r7, #16]
 8025046:	f7e6 f99f 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
 802504a:	2101      	movs	r1, #1
 802504c:	68b8      	ldr	r0, [r7, #8]
 802504e:	f7e1 fd3f 	bl	8006ad0 <lv_obj_get_style_list>
 8025052:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8025054:	4b2d      	ldr	r3, [pc, #180]	; (802510c <theme_apply+0x654>)
 8025056:	681b      	ldr	r3, [r3, #0]
 8025058:	3384      	adds	r3, #132	; 0x84
 802505a:	4619      	mov	r1, r3
 802505c:	6938      	ldr	r0, [r7, #16]
 802505e:	f7e6 f993 	bl	800b388 <_lv_style_list_add_style>
            break;
 8025062:	e1f6      	b.n	8025452 <theme_apply+0x99a>

        case LV_THEME_LIST_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8025064:	2100      	movs	r1, #0
 8025066:	68b8      	ldr	r0, [r7, #8]
 8025068:	f7e1 fd32 	bl	8006ad0 <lv_obj_get_style_list>
 802506c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->list_btn);
 802506e:	4b27      	ldr	r3, [pc, #156]	; (802510c <theme_apply+0x654>)
 8025070:	681b      	ldr	r3, [r3, #0]
 8025072:	337c      	adds	r3, #124	; 0x7c
 8025074:	4619      	mov	r1, r3
 8025076:	6938      	ldr	r0, [r7, #16]
 8025078:	f7e6 f986 	bl	800b388 <_lv_style_list_add_style>
            break;
 802507c:	e1e9      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
 802507e:	2100      	movs	r1, #0
 8025080:	68b8      	ldr	r0, [r7, #8]
 8025082:	f7e1 fd25 	bl	8006ad0 <lv_obj_get_style_list>
 8025086:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8025088:	4b20      	ldr	r3, [pc, #128]	; (802510c <theme_apply+0x654>)
 802508a:	681b      	ldr	r3, [r3, #0]
 802508c:	3304      	adds	r3, #4
 802508e:	4619      	mov	r1, r3
 8025090:	6938      	ldr	r0, [r7, #16]
 8025092:	f7e6 f979 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8025096:	4b1d      	ldr	r3, [pc, #116]	; (802510c <theme_apply+0x654>)
 8025098:	681b      	ldr	r3, [r3, #0]
 802509a:	3308      	adds	r3, #8
 802509c:	4619      	mov	r1, r3
 802509e:	6938      	ldr	r0, [r7, #16]
 80250a0:	f7e6 f972 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 80250a4:	4b19      	ldr	r3, [pc, #100]	; (802510c <theme_apply+0x654>)
 80250a6:	681b      	ldr	r3, [r3, #0]
 80250a8:	3318      	adds	r3, #24
 80250aa:	4619      	mov	r1, r3
 80250ac:	6938      	ldr	r0, [r7, #16]
 80250ae:	f7e6 f96b 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
 80250b2:	2140      	movs	r1, #64	; 0x40
 80250b4:	68b8      	ldr	r0, [r7, #8]
 80250b6:	f7e1 fd0b 	bl	8006ad0 <lv_obj_get_style_list>
 80250ba:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80250bc:	4b13      	ldr	r3, [pc, #76]	; (802510c <theme_apply+0x654>)
 80250be:	681b      	ldr	r3, [r3, #0]
 80250c0:	3304      	adds	r3, #4
 80250c2:	4619      	mov	r1, r3
 80250c4:	6938      	ldr	r0, [r7, #16]
 80250c6:	f7e6 f95f 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->ddlist_page);
 80250ca:	4b10      	ldr	r3, [pc, #64]	; (802510c <theme_apply+0x654>)
 80250cc:	681b      	ldr	r3, [r3, #0]
 80250ce:	3358      	adds	r3, #88	; 0x58
 80250d0:	4619      	mov	r1, r3
 80250d2:	6938      	ldr	r0, [r7, #16]
 80250d4:	f7e6 f958 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 80250d8:	2141      	movs	r1, #65	; 0x41
 80250da:	68b8      	ldr	r0, [r7, #8]
 80250dc:	f7e1 fcf8 	bl	8006ad0 <lv_obj_get_style_list>
 80250e0:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 80250e2:	4b0a      	ldr	r3, [pc, #40]	; (802510c <theme_apply+0x654>)
 80250e4:	681b      	ldr	r3, [r3, #0]
 80250e6:	3384      	adds	r3, #132	; 0x84
 80250e8:	4619      	mov	r1, r3
 80250ea:	6938      	ldr	r0, [r7, #16]
 80250ec:	f7e6 f94c 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
 80250f0:	2142      	movs	r1, #66	; 0x42
 80250f2:	68b8      	ldr	r0, [r7, #8]
 80250f4:	f7e1 fcec 	bl	8006ad0 <lv_obj_get_style_list>
 80250f8:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->ddlist_sel);
 80250fa:	4b04      	ldr	r3, [pc, #16]	; (802510c <theme_apply+0x654>)
 80250fc:	681b      	ldr	r3, [r3, #0]
 80250fe:	335c      	adds	r3, #92	; 0x5c
 8025100:	4619      	mov	r1, r3
 8025102:	6938      	ldr	r0, [r7, #16]
 8025104:	f7e6 f940 	bl	800b388 <_lv_style_list_add_style>
            break;
 8025108:	e1a3      	b.n	8025452 <theme_apply+0x99a>
 802510a:	bf00      	nop
 802510c:	200200d4 	.word	0x200200d4
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
 8025110:	2100      	movs	r1, #0
 8025112:	68b8      	ldr	r0, [r7, #8]
 8025114:	f7e1 fcdc 	bl	8006ad0 <lv_obj_get_style_list>
 8025118:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 802511a:	4bac      	ldr	r3, [pc, #688]	; (80253cc <theme_apply+0x914>)
 802511c:	681b      	ldr	r3, [r3, #0]
 802511e:	3304      	adds	r3, #4
 8025120:	4619      	mov	r1, r3
 8025122:	6938      	ldr	r0, [r7, #16]
 8025124:	f7e6 f930 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_bg);
 8025128:	4ba8      	ldr	r3, [pc, #672]	; (80253cc <theme_apply+0x914>)
 802512a:	681b      	ldr	r3, [r3, #0]
 802512c:	3344      	adds	r3, #68	; 0x44
 802512e:	4619      	mov	r1, r3
 8025130:	6938      	ldr	r0, [r7, #16]
 8025132:	f7e6 f929 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8025136:	4ba5      	ldr	r3, [pc, #660]	; (80253cc <theme_apply+0x914>)
 8025138:	681b      	ldr	r3, [r3, #0]
 802513a:	3318      	adds	r3, #24
 802513c:	4619      	mov	r1, r3
 802513e:	6938      	ldr	r0, [r7, #16]
 8025140:	f7e6 f922 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
 8025144:	2101      	movs	r1, #1
 8025146:	68b8      	ldr	r0, [r7, #8]
 8025148:	f7e1 fcc2 	bl	8006ad0 <lv_obj_get_style_list>
 802514c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->pad_small);
 802514e:	4b9f      	ldr	r3, [pc, #636]	; (80253cc <theme_apply+0x914>)
 8025150:	681b      	ldr	r3, [r3, #0]
 8025152:	3318      	adds	r3, #24
 8025154:	4619      	mov	r1, r3
 8025156:	6938      	ldr	r0, [r7, #16]
 8025158:	f7e6 f916 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_series_bg);
 802515c:	4b9b      	ldr	r3, [pc, #620]	; (80253cc <theme_apply+0x914>)
 802515e:	681b      	ldr	r3, [r3, #0]
 8025160:	3348      	adds	r3, #72	; 0x48
 8025162:	4619      	mov	r1, r3
 8025164:	6938      	ldr	r0, [r7, #16]
 8025166:	f7e6 f90f 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
 802516a:	2103      	movs	r1, #3
 802516c:	68b8      	ldr	r0, [r7, #8]
 802516e:	f7e1 fcaf 	bl	8006ad0 <lv_obj_get_style_list>
 8025172:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->chart_series_bg);
 8025174:	4b95      	ldr	r3, [pc, #596]	; (80253cc <theme_apply+0x914>)
 8025176:	681b      	ldr	r3, [r3, #0]
 8025178:	3348      	adds	r3, #72	; 0x48
 802517a:	4619      	mov	r1, r3
 802517c:	6938      	ldr	r0, [r7, #16]
 802517e:	f7e6 f903 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
 8025182:	2102      	movs	r1, #2
 8025184:	68b8      	ldr	r0, [r7, #8]
 8025186:	f7e1 fca3 	bl	8006ad0 <lv_obj_get_style_list>
 802518a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->chart_series);
 802518c:	4b8f      	ldr	r3, [pc, #572]	; (80253cc <theme_apply+0x914>)
 802518e:	681b      	ldr	r3, [r3, #0]
 8025190:	334c      	adds	r3, #76	; 0x4c
 8025192:	4619      	mov	r1, r3
 8025194:	6938      	ldr	r0, [r7, #16]
 8025196:	f7e6 f8f7 	bl	800b388 <_lv_style_list_add_style>
            break;
 802519a:	e15a      	b.n	8025452 <theme_apply+0x99a>
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE: {
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
 802519c:	2100      	movs	r1, #0
 802519e:	68b8      	ldr	r0, [r7, #8]
 80251a0:	f7e1 fc96 	bl	8006ad0 <lv_obj_get_style_list>
 80251a4:	6138      	str	r0, [r7, #16]
                _lv_style_list_add_style(list, &styles->bg);
 80251a6:	4b89      	ldr	r3, [pc, #548]	; (80253cc <theme_apply+0x914>)
 80251a8:	681b      	ldr	r3, [r3, #0]
 80251aa:	3304      	adds	r3, #4
 80251ac:	4619      	mov	r1, r3
 80251ae:	6938      	ldr	r0, [r7, #16]
 80251b0:	f7e6 f8ea 	bl	800b388 <_lv_style_list_add_style>

                int idx = 1; /* start value should be 1, not zero, since cell styles
 80251b4:	2301      	movs	r3, #1
 80251b6:	617b      	str	r3, [r7, #20]
                            start at 1 due to presence of LV_TABLE_PART_BG=0
                            in the enum (lv_table.h) */
                /* declaring idx outside loop to work with older compilers */
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
 80251b8:	e010      	b.n	80251dc <theme_apply+0x724>
                    list = lv_obj_get_style_list(obj, idx);
 80251ba:	697b      	ldr	r3, [r7, #20]
 80251bc:	b2db      	uxtb	r3, r3
 80251be:	4619      	mov	r1, r3
 80251c0:	68b8      	ldr	r0, [r7, #8]
 80251c2:	f7e1 fc85 	bl	8006ad0 <lv_obj_get_style_list>
 80251c6:	6138      	str	r0, [r7, #16]
                    _lv_style_list_add_style(list, &styles->table_cell);
 80251c8:	4b80      	ldr	r3, [pc, #512]	; (80253cc <theme_apply+0x914>)
 80251ca:	681b      	ldr	r3, [r3, #0]
 80251cc:	33a4      	adds	r3, #164	; 0xa4
 80251ce:	4619      	mov	r1, r3
 80251d0:	6938      	ldr	r0, [r7, #16]
 80251d2:	f7e6 f8d9 	bl	800b388 <_lv_style_list_add_style>
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
 80251d6:	697b      	ldr	r3, [r7, #20]
 80251d8:	3301      	adds	r3, #1
 80251da:	617b      	str	r3, [r7, #20]
 80251dc:	697b      	ldr	r3, [r7, #20]
 80251de:	2b04      	cmp	r3, #4
 80251e0:	ddeb      	ble.n	80251ba <theme_apply+0x702>
                }
                break;
 80251e2:	e136      	b.n	8025452 <theme_apply+0x99a>
            }
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
 80251e4:	2100      	movs	r1, #0
 80251e6:	68b8      	ldr	r0, [r7, #8]
 80251e8:	f7e1 fc72 	bl	8006ad0 <lv_obj_get_style_list>
 80251ec:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 80251ee:	4b77      	ldr	r3, [pc, #476]	; (80253cc <theme_apply+0x914>)
 80251f0:	681b      	ldr	r3, [r3, #0]
 80251f2:	4619      	mov	r1, r3
 80251f4:	6938      	ldr	r0, [r7, #16]
 80251f6:	f7e6 f8c7 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
 80251fa:	2142      	movs	r1, #66	; 0x42
 80251fc:	68b8      	ldr	r0, [r7, #8]
 80251fe:	f7e1 fc67 	bl	8006ad0 <lv_obj_get_style_list>
 8025202:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8025204:	4b71      	ldr	r3, [pc, #452]	; (80253cc <theme_apply+0x914>)
 8025206:	681b      	ldr	r3, [r3, #0]
 8025208:	3384      	adds	r3, #132	; 0x84
 802520a:	4619      	mov	r1, r3
 802520c:	6938      	ldr	r0, [r7, #16]
 802520e:	f7e6 f8bb 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 8025212:	2141      	movs	r1, #65	; 0x41
 8025214:	68b8      	ldr	r0, [r7, #8]
 8025216:	f7e1 fc5b 	bl	8006ad0 <lv_obj_get_style_list>
 802521a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
 802521c:	4b6b      	ldr	r3, [pc, #428]	; (80253cc <theme_apply+0x914>)
 802521e:	681b      	ldr	r3, [r3, #0]
 8025220:	33b4      	adds	r3, #180	; 0xb4
 8025222:	4619      	mov	r1, r3
 8025224:	6938      	ldr	r0, [r7, #16]
 8025226:	f7e6 f8af 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
 802522a:	2140      	movs	r1, #64	; 0x40
 802522c:	68b8      	ldr	r0, [r7, #8]
 802522e:	f7e1 fc4f 	bl	8006ad0 <lv_obj_get_style_list>
 8025232:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
 8025234:	4b65      	ldr	r3, [pc, #404]	; (80253cc <theme_apply+0x914>)
 8025236:	681b      	ldr	r3, [r3, #0]
 8025238:	33ac      	adds	r3, #172	; 0xac
 802523a:	4619      	mov	r1, r3
 802523c:	6938      	ldr	r0, [r7, #16]
 802523e:	f7e6 f8a3 	bl	800b388 <_lv_style_list_add_style>
            break;
 8025242:	e106      	b.n	8025452 <theme_apply+0x99a>

        case LV_THEME_WIN_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8025244:	2100      	movs	r1, #0
 8025246:	68b8      	ldr	r0, [r7, #8]
 8025248:	f7e1 fc42 	bl	8006ad0 <lv_obj_get_style_list>
 802524c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns);
 802524e:	4b5f      	ldr	r3, [pc, #380]	; (80253cc <theme_apply+0x914>)
 8025250:	681b      	ldr	r3, [r3, #0]
 8025252:	33a8      	adds	r3, #168	; 0xa8
 8025254:	4619      	mov	r1, r3
 8025256:	6938      	ldr	r0, [r7, #16]
 8025258:	f7e6 f896 	bl	800b388 <_lv_style_list_add_style>
            break;
 802525c:	e0f9      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
 802525e:	2100      	movs	r1, #0
 8025260:	68b8      	ldr	r0, [r7, #8]
 8025262:	f7e1 fc35 	bl	8006ad0 <lv_obj_get_style_list>
 8025266:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8025268:	4b58      	ldr	r3, [pc, #352]	; (80253cc <theme_apply+0x914>)
 802526a:	681b      	ldr	r3, [r3, #0]
 802526c:	3304      	adds	r3, #4
 802526e:	4619      	mov	r1, r3
 8025270:	6938      	ldr	r0, [r7, #16]
 8025272:	f7e6 f889 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8025276:	4b55      	ldr	r3, [pc, #340]	; (80253cc <theme_apply+0x914>)
 8025278:	681b      	ldr	r3, [r3, #0]
 802527a:	3318      	adds	r3, #24
 802527c:	4619      	mov	r1, r3
 802527e:	6938      	ldr	r0, [r7, #16]
 8025280:	f7e6 f882 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
 8025284:	2104      	movs	r1, #4
 8025286:	68b8      	ldr	r0, [r7, #8]
 8025288:	f7e1 fc22 	bl	8006ad0 <lv_obj_get_style_list>
 802528c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->ta_placeholder);
 802528e:	4b4f      	ldr	r3, [pc, #316]	; (80253cc <theme_apply+0x914>)
 8025290:	681b      	ldr	r3, [r3, #0]
 8025292:	33bc      	adds	r3, #188	; 0xbc
 8025294:	4619      	mov	r1, r3
 8025296:	6938      	ldr	r0, [r7, #16]
 8025298:	f7e6 f876 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 802529c:	2103      	movs	r1, #3
 802529e:	68b8      	ldr	r0, [r7, #8]
 80252a0:	f7e1 fc16 	bl	8006ad0 <lv_obj_get_style_list>
 80252a4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->ta_cursor);
 80252a6:	4b49      	ldr	r3, [pc, #292]	; (80253cc <theme_apply+0x914>)
 80252a8:	681b      	ldr	r3, [r3, #0]
 80252aa:	33b8      	adds	r3, #184	; 0xb8
 80252ac:	4619      	mov	r1, r3
 80252ae:	6938      	ldr	r0, [r7, #16]
 80252b0:	f7e6 f86a 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
 80252b4:	2101      	movs	r1, #1
 80252b6:	68b8      	ldr	r0, [r7, #8]
 80252b8:	f7e1 fc0a 	bl	8006ad0 <lv_obj_get_style_list>
 80252bc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 80252be:	4b43      	ldr	r3, [pc, #268]	; (80253cc <theme_apply+0x914>)
 80252c0:	681b      	ldr	r3, [r3, #0]
 80252c2:	3384      	adds	r3, #132	; 0x84
 80252c4:	4619      	mov	r1, r3
 80252c6:	6938      	ldr	r0, [r7, #16]
 80252c8:	f7e6 f85e 	bl	800b388 <_lv_style_list_add_style>
            break;
 80252cc:	e0c1      	b.n	8025452 <theme_apply+0x99a>

#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
 80252ce:	2100      	movs	r1, #0
 80252d0:	68b8      	ldr	r0, [r7, #8]
 80252d2:	f7e1 fbfd 	bl	8006ad0 <lv_obj_get_style_list>
 80252d6:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80252d8:	4b3c      	ldr	r3, [pc, #240]	; (80253cc <theme_apply+0x914>)
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	3304      	adds	r3, #4
 80252de:	4619      	mov	r1, r3
 80252e0:	6938      	ldr	r0, [r7, #16]
 80252e2:	f7e6 f851 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 80252e6:	4b39      	ldr	r3, [pc, #228]	; (80253cc <theme_apply+0x914>)
 80252e8:	681b      	ldr	r3, [r3, #0]
 80252ea:	3318      	adds	r3, #24
 80252ec:	4619      	mov	r1, r3
 80252ee:	6938      	ldr	r0, [r7, #16]
 80252f0:	f7e6 f84a 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
 80252f4:	2103      	movs	r1, #3
 80252f6:	68b8      	ldr	r0, [r7, #8]
 80252f8:	f7e1 fbea 	bl	8006ad0 <lv_obj_get_style_list>
 80252fc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
 80252fe:	4b33      	ldr	r3, [pc, #204]	; (80253cc <theme_apply+0x914>)
 8025300:	681b      	ldr	r3, [r3, #0]
 8025302:	339c      	adds	r3, #156	; 0x9c
 8025304:	4619      	mov	r1, r3
 8025306:	6938      	ldr	r0, [r7, #16]
 8025308:	f7e6 f83e 	bl	800b388 <_lv_style_list_add_style>
            break;
 802530c:	e0a1      	b.n	8025452 <theme_apply+0x99a>

        case LV_THEME_SPINBOX_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 802530e:	2100      	movs	r1, #0
 8025310:	68b8      	ldr	r0, [r7, #8]
 8025312:	f7e1 fbdd 	bl	8006ad0 <lv_obj_get_style_list>
 8025316:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8025318:	4b2c      	ldr	r3, [pc, #176]	; (80253cc <theme_apply+0x914>)
 802531a:	681b      	ldr	r3, [r3, #0]
 802531c:	3304      	adds	r3, #4
 802531e:	4619      	mov	r1, r3
 8025320:	6938      	ldr	r0, [r7, #16]
 8025322:	f7e6 f831 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8025326:	4b29      	ldr	r3, [pc, #164]	; (80253cc <theme_apply+0x914>)
 8025328:	681b      	ldr	r3, [r3, #0]
 802532a:	3308      	adds	r3, #8
 802532c:	4619      	mov	r1, r3
 802532e:	6938      	ldr	r0, [r7, #16]
 8025330:	f7e6 f82a 	bl	800b388 <_lv_style_list_add_style>
            break;
 8025334:	e08d      	b.n	8025452 <theme_apply+0x99a>
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
 8025336:	2100      	movs	r1, #0
 8025338:	68b8      	ldr	r0, [r7, #8]
 802533a:	f7e1 fbc9 	bl	8006ad0 <lv_obj_get_style_list>
 802533e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8025340:	4b22      	ldr	r3, [pc, #136]	; (80253cc <theme_apply+0x914>)
 8025342:	681b      	ldr	r3, [r3, #0]
 8025344:	3304      	adds	r3, #4
 8025346:	4619      	mov	r1, r3
 8025348:	6938      	ldr	r0, [r7, #16]
 802534a:	f7e6 f81d 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
 802534e:	2103      	movs	r1, #3
 8025350:	68b8      	ldr	r0, [r7, #8]
 8025352:	f7e1 fbbd 	bl	8006ad0 <lv_obj_get_style_list>
 8025356:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
 8025358:	4b1c      	ldr	r3, [pc, #112]	; (80253cc <theme_apply+0x914>)
 802535a:	681b      	ldr	r3, [r3, #0]
 802535c:	3330      	adds	r3, #48	; 0x30
 802535e:	4619      	mov	r1, r3
 8025360:	6938      	ldr	r0, [r7, #16]
 8025362:	f7e6 f811 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
 8025366:	2101      	movs	r1, #1
 8025368:	68b8      	ldr	r0, [r7, #8]
 802536a:	f7e1 fbb1 	bl	8006ad0 <lv_obj_get_style_list>
 802536e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->calendar_header);
 8025370:	4b16      	ldr	r3, [pc, #88]	; (80253cc <theme_apply+0x914>)
 8025372:	681b      	ldr	r3, [r3, #0]
 8025374:	3334      	adds	r3, #52	; 0x34
 8025376:	4619      	mov	r1, r3
 8025378:	6938      	ldr	r0, [r7, #16]
 802537a:	f7e6 f805 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 802537e:	2102      	movs	r1, #2
 8025380:	68b8      	ldr	r0, [r7, #8]
 8025382:	f7e1 fba5 	bl	8006ad0 <lv_obj_get_style_list>
 8025386:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->calendar_daynames);
 8025388:	4b10      	ldr	r3, [pc, #64]	; (80253cc <theme_apply+0x914>)
 802538a:	681b      	ldr	r3, [r3, #0]
 802538c:	3338      	adds	r3, #56	; 0x38
 802538e:	4619      	mov	r1, r3
 8025390:	6938      	ldr	r0, [r7, #16]
 8025392:	f7e5 fff9 	bl	800b388 <_lv_style_list_add_style>
            break;
 8025396:	e05c      	b.n	8025452 <theme_apply+0x99a>
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
 8025398:	2100      	movs	r1, #0
 802539a:	68b8      	ldr	r0, [r7, #8]
 802539c:	f7e1 fb98 	bl	8006ad0 <lv_obj_get_style_list>
 80253a0:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->cpicker_bg);
 80253a2:	4b0a      	ldr	r3, [pc, #40]	; (80253cc <theme_apply+0x914>)
 80253a4:	681b      	ldr	r3, [r3, #0]
 80253a6:	333c      	adds	r3, #60	; 0x3c
 80253a8:	4619      	mov	r1, r3
 80253aa:	6938      	ldr	r0, [r7, #16]
 80253ac:	f7e5 ffec 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
 80253b0:	2101      	movs	r1, #1
 80253b2:	68b8      	ldr	r0, [r7, #8]
 80253b4:	f7e1 fb8c 	bl	8006ad0 <lv_obj_get_style_list>
 80253b8:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->cpicker_indic);
 80253ba:	4b04      	ldr	r3, [pc, #16]	; (80253cc <theme_apply+0x914>)
 80253bc:	681b      	ldr	r3, [r3, #0]
 80253be:	3340      	adds	r3, #64	; 0x40
 80253c0:	4619      	mov	r1, r3
 80253c2:	6938      	ldr	r0, [r7, #16]
 80253c4:	f7e5 ffe0 	bl	800b388 <_lv_style_list_add_style>
            break;
 80253c8:	e043      	b.n	8025452 <theme_apply+0x99a>
 80253ca:	bf00      	nop
 80253cc:	200200d4 	.word	0x200200d4
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
 80253d0:	2100      	movs	r1, #0
 80253d2:	68b8      	ldr	r0, [r7, #8]
 80253d4:	f7e1 fb7c 	bl	8006ad0 <lv_obj_get_style_list>
 80253d8:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80253da:	4b22      	ldr	r3, [pc, #136]	; (8025464 <theme_apply+0x9ac>)
 80253dc:	681b      	ldr	r3, [r3, #0]
 80253de:	3304      	adds	r3, #4
 80253e0:	4619      	mov	r1, r3
 80253e2:	6938      	ldr	r0, [r7, #16]
 80253e4:	f7e5 ffd0 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->lmeter);
 80253e8:	4b1e      	ldr	r3, [pc, #120]	; (8025464 <theme_apply+0x9ac>)
 80253ea:	681b      	ldr	r3, [r3, #0]
 80253ec:	3374      	adds	r3, #116	; 0x74
 80253ee:	4619      	mov	r1, r3
 80253f0:	6938      	ldr	r0, [r7, #16]
 80253f2:	f7e5 ffc9 	bl	800b388 <_lv_style_list_add_style>
            break;
 80253f6:	e02c      	b.n	8025452 <theme_apply+0x99a>
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
 80253f8:	2100      	movs	r1, #0
 80253fa:	68b8      	ldr	r0, [r7, #8]
 80253fc:	f7e1 fb68 	bl	8006ad0 <lv_obj_get_style_list>
 8025400:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8025402:	4b18      	ldr	r3, [pc, #96]	; (8025464 <theme_apply+0x9ac>)
 8025404:	681b      	ldr	r3, [r3, #0]
 8025406:	3304      	adds	r3, #4
 8025408:	4619      	mov	r1, r3
 802540a:	6938      	ldr	r0, [r7, #16]
 802540c:	f7e5 ffbc 	bl	800b388 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->gauge_main);
 8025410:	4b14      	ldr	r3, [pc, #80]	; (8025464 <theme_apply+0x9ac>)
 8025412:	681b      	ldr	r3, [r3, #0]
 8025414:	3360      	adds	r3, #96	; 0x60
 8025416:	4619      	mov	r1, r3
 8025418:	6938      	ldr	r0, [r7, #16]
 802541a:	f7e5 ffb5 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
 802541e:	2101      	movs	r1, #1
 8025420:	68b8      	ldr	r0, [r7, #8]
 8025422:	f7e1 fb55 	bl	8006ad0 <lv_obj_get_style_list>
 8025426:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->gauge_strong);
 8025428:	4b0e      	ldr	r3, [pc, #56]	; (8025464 <theme_apply+0x9ac>)
 802542a:	681b      	ldr	r3, [r3, #0]
 802542c:	3364      	adds	r3, #100	; 0x64
 802542e:	4619      	mov	r1, r3
 8025430:	6938      	ldr	r0, [r7, #16]
 8025432:	f7e5 ffa9 	bl	800b388 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
 8025436:	2102      	movs	r1, #2
 8025438:	68b8      	ldr	r0, [r7, #8]
 802543a:	f7e1 fb49 	bl	8006ad0 <lv_obj_get_style_list>
 802543e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->gauge_needle);
 8025440:	4b08      	ldr	r3, [pc, #32]	; (8025464 <theme_apply+0x9ac>)
 8025442:	681b      	ldr	r3, [r3, #0]
 8025444:	3368      	adds	r3, #104	; 0x68
 8025446:	4619      	mov	r1, r3
 8025448:	6938      	ldr	r0, [r7, #16]
 802544a:	f7e5 ff9d 	bl	800b388 <_lv_style_list_add_style>
            break;
 802544e:	e000      	b.n	8025452 <theme_apply+0x99a>
#endif
        default:
            break;
 8025450:	bf00      	nop
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8025452:	22ff      	movs	r2, #255	; 0xff
 8025454:	21ff      	movs	r1, #255	; 0xff
 8025456:	68b8      	ldr	r0, [r7, #8]
 8025458:	f7e0 fd50 	bl	8005efc <lv_obj_refresh_style>
}
 802545c:	bf00      	nop
 802545e:	3718      	adds	r7, #24
 8025460:	46bd      	mov	sp, r7
 8025462:	bd80      	pop	{r7, pc}
 8025464:	200200d4 	.word	0x200200d4

08025468 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
 8025468:	b580      	push	{r7, lr}
 802546a:	b082      	sub	sp, #8
 802546c:	af00      	add	r7, sp, #0
 802546e:	6078      	str	r0, [r7, #4]
    if(inited) lv_style_reset(style);
 8025470:	4b07      	ldr	r3, [pc, #28]	; (8025490 <style_init_reset+0x28>)
 8025472:	781b      	ldrb	r3, [r3, #0]
 8025474:	2b00      	cmp	r3, #0
 8025476:	d003      	beq.n	8025480 <style_init_reset+0x18>
 8025478:	6878      	ldr	r0, [r7, #4]
 802547a:	f7e6 f91e 	bl	800b6ba <lv_style_reset>
    else lv_style_init(style);
}
 802547e:	e002      	b.n	8025486 <style_init_reset+0x1e>
    else lv_style_init(style);
 8025480:	6878      	ldr	r0, [r7, #4]
 8025482:	f7e5 fe0e 	bl	800b0a2 <lv_style_init>
}
 8025486:	bf00      	nop
 8025488:	3708      	adds	r7, #8
 802548a:	46bd      	mov	sp, r7
 802548c:	bd80      	pop	{r7, pc}
 802548e:	bf00      	nop
 8025490:	200200d8 	.word	0x200200d8

08025494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8025494:	b580      	push	{r7, lr}
 8025496:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8025498:	2003      	movs	r0, #3
 802549a:	f000 f8f8 	bl	802568e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802549e:	2000      	movs	r0, #0
 80254a0:	f7dc f88e 	bl	80015c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80254a4:	f7dc f868 	bl	8001578 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80254a8:	2300      	movs	r3, #0
}
 80254aa:	4618      	mov	r0, r3
 80254ac:	bd80      	pop	{r7, pc}
	...

080254b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80254b0:	b480      	push	{r7}
 80254b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80254b4:	4b06      	ldr	r3, [pc, #24]	; (80254d0 <HAL_IncTick+0x20>)
 80254b6:	781b      	ldrb	r3, [r3, #0]
 80254b8:	461a      	mov	r2, r3
 80254ba:	4b06      	ldr	r3, [pc, #24]	; (80254d4 <HAL_IncTick+0x24>)
 80254bc:	681b      	ldr	r3, [r3, #0]
 80254be:	4413      	add	r3, r2
 80254c0:	4a04      	ldr	r2, [pc, #16]	; (80254d4 <HAL_IncTick+0x24>)
 80254c2:	6013      	str	r3, [r2, #0]
}
 80254c4:	bf00      	nop
 80254c6:	46bd      	mov	sp, r7
 80254c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254cc:	4770      	bx	lr
 80254ce:	bf00      	nop
 80254d0:	20000050 	.word	0x20000050
 80254d4:	2002190c 	.word	0x2002190c

080254d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80254d8:	b480      	push	{r7}
 80254da:	af00      	add	r7, sp, #0
  return uwTick;
 80254dc:	4b03      	ldr	r3, [pc, #12]	; (80254ec <HAL_GetTick+0x14>)
 80254de:	681b      	ldr	r3, [r3, #0]
}
 80254e0:	4618      	mov	r0, r3
 80254e2:	46bd      	mov	sp, r7
 80254e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254e8:	4770      	bx	lr
 80254ea:	bf00      	nop
 80254ec:	2002190c 	.word	0x2002190c

080254f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80254f0:	b580      	push	{r7, lr}
 80254f2:	b084      	sub	sp, #16
 80254f4:	af00      	add	r7, sp, #0
 80254f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80254f8:	f7ff ffee 	bl	80254d8 <HAL_GetTick>
 80254fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80254fe:	687b      	ldr	r3, [r7, #4]
 8025500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8025502:	68fb      	ldr	r3, [r7, #12]
 8025504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025508:	d005      	beq.n	8025516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802550a:	4b09      	ldr	r3, [pc, #36]	; (8025530 <HAL_Delay+0x40>)
 802550c:	781b      	ldrb	r3, [r3, #0]
 802550e:	461a      	mov	r2, r3
 8025510:	68fb      	ldr	r3, [r7, #12]
 8025512:	4413      	add	r3, r2
 8025514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8025516:	bf00      	nop
 8025518:	f7ff ffde 	bl	80254d8 <HAL_GetTick>
 802551c:	4602      	mov	r2, r0
 802551e:	68bb      	ldr	r3, [r7, #8]
 8025520:	1ad3      	subs	r3, r2, r3
 8025522:	68fa      	ldr	r2, [r7, #12]
 8025524:	429a      	cmp	r2, r3
 8025526:	d8f7      	bhi.n	8025518 <HAL_Delay+0x28>
  {
  }
}
 8025528:	bf00      	nop
 802552a:	3710      	adds	r7, #16
 802552c:	46bd      	mov	sp, r7
 802552e:	bd80      	pop	{r7, pc}
 8025530:	20000050 	.word	0x20000050

08025534 <__NVIC_SetPriorityGrouping>:
{
 8025534:	b480      	push	{r7}
 8025536:	b085      	sub	sp, #20
 8025538:	af00      	add	r7, sp, #0
 802553a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802553c:	687b      	ldr	r3, [r7, #4]
 802553e:	f003 0307 	and.w	r3, r3, #7
 8025542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8025544:	4b0b      	ldr	r3, [pc, #44]	; (8025574 <__NVIC_SetPriorityGrouping+0x40>)
 8025546:	68db      	ldr	r3, [r3, #12]
 8025548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802554a:	68ba      	ldr	r2, [r7, #8]
 802554c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8025550:	4013      	ands	r3, r2
 8025552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8025554:	68fb      	ldr	r3, [r7, #12]
 8025556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8025558:	68bb      	ldr	r3, [r7, #8]
 802555a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802555c:	4b06      	ldr	r3, [pc, #24]	; (8025578 <__NVIC_SetPriorityGrouping+0x44>)
 802555e:	4313      	orrs	r3, r2
 8025560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8025562:	4a04      	ldr	r2, [pc, #16]	; (8025574 <__NVIC_SetPriorityGrouping+0x40>)
 8025564:	68bb      	ldr	r3, [r7, #8]
 8025566:	60d3      	str	r3, [r2, #12]
}
 8025568:	bf00      	nop
 802556a:	3714      	adds	r7, #20
 802556c:	46bd      	mov	sp, r7
 802556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025572:	4770      	bx	lr
 8025574:	e000ed00 	.word	0xe000ed00
 8025578:	05fa0000 	.word	0x05fa0000

0802557c <__NVIC_GetPriorityGrouping>:
{
 802557c:	b480      	push	{r7}
 802557e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8025580:	4b04      	ldr	r3, [pc, #16]	; (8025594 <__NVIC_GetPriorityGrouping+0x18>)
 8025582:	68db      	ldr	r3, [r3, #12]
 8025584:	0a1b      	lsrs	r3, r3, #8
 8025586:	f003 0307 	and.w	r3, r3, #7
}
 802558a:	4618      	mov	r0, r3
 802558c:	46bd      	mov	sp, r7
 802558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025592:	4770      	bx	lr
 8025594:	e000ed00 	.word	0xe000ed00

08025598 <__NVIC_EnableIRQ>:
{
 8025598:	b480      	push	{r7}
 802559a:	b083      	sub	sp, #12
 802559c:	af00      	add	r7, sp, #0
 802559e:	4603      	mov	r3, r0
 80255a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80255a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80255a6:	2b00      	cmp	r3, #0
 80255a8:	db0b      	blt.n	80255c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80255aa:	79fb      	ldrb	r3, [r7, #7]
 80255ac:	f003 021f 	and.w	r2, r3, #31
 80255b0:	4907      	ldr	r1, [pc, #28]	; (80255d0 <__NVIC_EnableIRQ+0x38>)
 80255b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80255b6:	095b      	lsrs	r3, r3, #5
 80255b8:	2001      	movs	r0, #1
 80255ba:	fa00 f202 	lsl.w	r2, r0, r2
 80255be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80255c2:	bf00      	nop
 80255c4:	370c      	adds	r7, #12
 80255c6:	46bd      	mov	sp, r7
 80255c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255cc:	4770      	bx	lr
 80255ce:	bf00      	nop
 80255d0:	e000e100 	.word	0xe000e100

080255d4 <__NVIC_SetPriority>:
{
 80255d4:	b480      	push	{r7}
 80255d6:	b083      	sub	sp, #12
 80255d8:	af00      	add	r7, sp, #0
 80255da:	4603      	mov	r3, r0
 80255dc:	6039      	str	r1, [r7, #0]
 80255de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80255e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80255e4:	2b00      	cmp	r3, #0
 80255e6:	db0a      	blt.n	80255fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80255e8:	683b      	ldr	r3, [r7, #0]
 80255ea:	b2da      	uxtb	r2, r3
 80255ec:	490c      	ldr	r1, [pc, #48]	; (8025620 <__NVIC_SetPriority+0x4c>)
 80255ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80255f2:	0112      	lsls	r2, r2, #4
 80255f4:	b2d2      	uxtb	r2, r2
 80255f6:	440b      	add	r3, r1
 80255f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80255fc:	e00a      	b.n	8025614 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80255fe:	683b      	ldr	r3, [r7, #0]
 8025600:	b2da      	uxtb	r2, r3
 8025602:	4908      	ldr	r1, [pc, #32]	; (8025624 <__NVIC_SetPriority+0x50>)
 8025604:	79fb      	ldrb	r3, [r7, #7]
 8025606:	f003 030f 	and.w	r3, r3, #15
 802560a:	3b04      	subs	r3, #4
 802560c:	0112      	lsls	r2, r2, #4
 802560e:	b2d2      	uxtb	r2, r2
 8025610:	440b      	add	r3, r1
 8025612:	761a      	strb	r2, [r3, #24]
}
 8025614:	bf00      	nop
 8025616:	370c      	adds	r7, #12
 8025618:	46bd      	mov	sp, r7
 802561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802561e:	4770      	bx	lr
 8025620:	e000e100 	.word	0xe000e100
 8025624:	e000ed00 	.word	0xe000ed00

08025628 <NVIC_EncodePriority>:
{
 8025628:	b480      	push	{r7}
 802562a:	b089      	sub	sp, #36	; 0x24
 802562c:	af00      	add	r7, sp, #0
 802562e:	60f8      	str	r0, [r7, #12]
 8025630:	60b9      	str	r1, [r7, #8]
 8025632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8025634:	68fb      	ldr	r3, [r7, #12]
 8025636:	f003 0307 	and.w	r3, r3, #7
 802563a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802563c:	69fb      	ldr	r3, [r7, #28]
 802563e:	f1c3 0307 	rsb	r3, r3, #7
 8025642:	2b04      	cmp	r3, #4
 8025644:	bf28      	it	cs
 8025646:	2304      	movcs	r3, #4
 8025648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802564a:	69fb      	ldr	r3, [r7, #28]
 802564c:	3304      	adds	r3, #4
 802564e:	2b06      	cmp	r3, #6
 8025650:	d902      	bls.n	8025658 <NVIC_EncodePriority+0x30>
 8025652:	69fb      	ldr	r3, [r7, #28]
 8025654:	3b03      	subs	r3, #3
 8025656:	e000      	b.n	802565a <NVIC_EncodePriority+0x32>
 8025658:	2300      	movs	r3, #0
 802565a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802565c:	f04f 32ff 	mov.w	r2, #4294967295
 8025660:	69bb      	ldr	r3, [r7, #24]
 8025662:	fa02 f303 	lsl.w	r3, r2, r3
 8025666:	43da      	mvns	r2, r3
 8025668:	68bb      	ldr	r3, [r7, #8]
 802566a:	401a      	ands	r2, r3
 802566c:	697b      	ldr	r3, [r7, #20]
 802566e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8025670:	f04f 31ff 	mov.w	r1, #4294967295
 8025674:	697b      	ldr	r3, [r7, #20]
 8025676:	fa01 f303 	lsl.w	r3, r1, r3
 802567a:	43d9      	mvns	r1, r3
 802567c:	687b      	ldr	r3, [r7, #4]
 802567e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8025680:	4313      	orrs	r3, r2
}
 8025682:	4618      	mov	r0, r3
 8025684:	3724      	adds	r7, #36	; 0x24
 8025686:	46bd      	mov	sp, r7
 8025688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802568c:	4770      	bx	lr

0802568e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802568e:	b580      	push	{r7, lr}
 8025690:	b082      	sub	sp, #8
 8025692:	af00      	add	r7, sp, #0
 8025694:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8025696:	6878      	ldr	r0, [r7, #4]
 8025698:	f7ff ff4c 	bl	8025534 <__NVIC_SetPriorityGrouping>
}
 802569c:	bf00      	nop
 802569e:	3708      	adds	r7, #8
 80256a0:	46bd      	mov	sp, r7
 80256a2:	bd80      	pop	{r7, pc}

080256a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80256a4:	b580      	push	{r7, lr}
 80256a6:	b086      	sub	sp, #24
 80256a8:	af00      	add	r7, sp, #0
 80256aa:	4603      	mov	r3, r0
 80256ac:	60b9      	str	r1, [r7, #8]
 80256ae:	607a      	str	r2, [r7, #4]
 80256b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80256b2:	2300      	movs	r3, #0
 80256b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80256b6:	f7ff ff61 	bl	802557c <__NVIC_GetPriorityGrouping>
 80256ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80256bc:	687a      	ldr	r2, [r7, #4]
 80256be:	68b9      	ldr	r1, [r7, #8]
 80256c0:	6978      	ldr	r0, [r7, #20]
 80256c2:	f7ff ffb1 	bl	8025628 <NVIC_EncodePriority>
 80256c6:	4602      	mov	r2, r0
 80256c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80256cc:	4611      	mov	r1, r2
 80256ce:	4618      	mov	r0, r3
 80256d0:	f7ff ff80 	bl	80255d4 <__NVIC_SetPriority>
}
 80256d4:	bf00      	nop
 80256d6:	3718      	adds	r7, #24
 80256d8:	46bd      	mov	sp, r7
 80256da:	bd80      	pop	{r7, pc}

080256dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80256dc:	b580      	push	{r7, lr}
 80256de:	b082      	sub	sp, #8
 80256e0:	af00      	add	r7, sp, #0
 80256e2:	4603      	mov	r3, r0
 80256e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80256e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80256ea:	4618      	mov	r0, r3
 80256ec:	f7ff ff54 	bl	8025598 <__NVIC_EnableIRQ>
}
 80256f0:	bf00      	nop
 80256f2:	3708      	adds	r7, #8
 80256f4:	46bd      	mov	sp, r7
 80256f6:	bd80      	pop	{r7, pc}

080256f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80256f8:	b580      	push	{r7, lr}
 80256fa:	b086      	sub	sp, #24
 80256fc:	af00      	add	r7, sp, #0
 80256fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8025700:	2300      	movs	r3, #0
 8025702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8025704:	f7ff fee8 	bl	80254d8 <HAL_GetTick>
 8025708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802570a:	687b      	ldr	r3, [r7, #4]
 802570c:	2b00      	cmp	r3, #0
 802570e:	d101      	bne.n	8025714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8025710:	2301      	movs	r3, #1
 8025712:	e099      	b.n	8025848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8025714:	687b      	ldr	r3, [r7, #4]
 8025716:	2200      	movs	r2, #0
 8025718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 802571c:	687b      	ldr	r3, [r7, #4]
 802571e:	2202      	movs	r2, #2
 8025720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8025724:	687b      	ldr	r3, [r7, #4]
 8025726:	681b      	ldr	r3, [r3, #0]
 8025728:	681a      	ldr	r2, [r3, #0]
 802572a:	687b      	ldr	r3, [r7, #4]
 802572c:	681b      	ldr	r3, [r3, #0]
 802572e:	f022 0201 	bic.w	r2, r2, #1
 8025732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8025734:	e00f      	b.n	8025756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8025736:	f7ff fecf 	bl	80254d8 <HAL_GetTick>
 802573a:	4602      	mov	r2, r0
 802573c:	693b      	ldr	r3, [r7, #16]
 802573e:	1ad3      	subs	r3, r2, r3
 8025740:	2b05      	cmp	r3, #5
 8025742:	d908      	bls.n	8025756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8025744:	687b      	ldr	r3, [r7, #4]
 8025746:	2220      	movs	r2, #32
 8025748:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802574a:	687b      	ldr	r3, [r7, #4]
 802574c:	2203      	movs	r2, #3
 802574e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8025752:	2303      	movs	r3, #3
 8025754:	e078      	b.n	8025848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8025756:	687b      	ldr	r3, [r7, #4]
 8025758:	681b      	ldr	r3, [r3, #0]
 802575a:	681b      	ldr	r3, [r3, #0]
 802575c:	f003 0301 	and.w	r3, r3, #1
 8025760:	2b00      	cmp	r3, #0
 8025762:	d1e8      	bne.n	8025736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8025764:	687b      	ldr	r3, [r7, #4]
 8025766:	681b      	ldr	r3, [r3, #0]
 8025768:	681b      	ldr	r3, [r3, #0]
 802576a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802576c:	697a      	ldr	r2, [r7, #20]
 802576e:	4b38      	ldr	r3, [pc, #224]	; (8025850 <HAL_DMA_Init+0x158>)
 8025770:	4013      	ands	r3, r2
 8025772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8025774:	687b      	ldr	r3, [r7, #4]
 8025776:	685a      	ldr	r2, [r3, #4]
 8025778:	687b      	ldr	r3, [r7, #4]
 802577a:	689b      	ldr	r3, [r3, #8]
 802577c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802577e:	687b      	ldr	r3, [r7, #4]
 8025780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8025782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8025784:	687b      	ldr	r3, [r7, #4]
 8025786:	691b      	ldr	r3, [r3, #16]
 8025788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802578a:	687b      	ldr	r3, [r7, #4]
 802578c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802578e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8025790:	687b      	ldr	r3, [r7, #4]
 8025792:	699b      	ldr	r3, [r3, #24]
 8025794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8025796:	687b      	ldr	r3, [r7, #4]
 8025798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802579a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802579c:	687b      	ldr	r3, [r7, #4]
 802579e:	6a1b      	ldr	r3, [r3, #32]
 80257a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80257a2:	697a      	ldr	r2, [r7, #20]
 80257a4:	4313      	orrs	r3, r2
 80257a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80257a8:	687b      	ldr	r3, [r7, #4]
 80257aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80257ac:	2b04      	cmp	r3, #4
 80257ae:	d107      	bne.n	80257c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80257b0:	687b      	ldr	r3, [r7, #4]
 80257b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80257b4:	687b      	ldr	r3, [r7, #4]
 80257b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80257b8:	4313      	orrs	r3, r2
 80257ba:	697a      	ldr	r2, [r7, #20]
 80257bc:	4313      	orrs	r3, r2
 80257be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80257c0:	687b      	ldr	r3, [r7, #4]
 80257c2:	681b      	ldr	r3, [r3, #0]
 80257c4:	697a      	ldr	r2, [r7, #20]
 80257c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80257c8:	687b      	ldr	r3, [r7, #4]
 80257ca:	681b      	ldr	r3, [r3, #0]
 80257cc:	695b      	ldr	r3, [r3, #20]
 80257ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80257d0:	697b      	ldr	r3, [r7, #20]
 80257d2:	f023 0307 	bic.w	r3, r3, #7
 80257d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80257d8:	687b      	ldr	r3, [r7, #4]
 80257da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80257dc:	697a      	ldr	r2, [r7, #20]
 80257de:	4313      	orrs	r3, r2
 80257e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80257e2:	687b      	ldr	r3, [r7, #4]
 80257e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80257e6:	2b04      	cmp	r3, #4
 80257e8:	d117      	bne.n	802581a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80257ea:	687b      	ldr	r3, [r7, #4]
 80257ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80257ee:	697a      	ldr	r2, [r7, #20]
 80257f0:	4313      	orrs	r3, r2
 80257f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80257f4:	687b      	ldr	r3, [r7, #4]
 80257f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80257f8:	2b00      	cmp	r3, #0
 80257fa:	d00e      	beq.n	802581a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80257fc:	6878      	ldr	r0, [r7, #4]
 80257fe:	f000 f9e9 	bl	8025bd4 <DMA_CheckFifoParam>
 8025802:	4603      	mov	r3, r0
 8025804:	2b00      	cmp	r3, #0
 8025806:	d008      	beq.n	802581a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8025808:	687b      	ldr	r3, [r7, #4]
 802580a:	2240      	movs	r2, #64	; 0x40
 802580c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802580e:	687b      	ldr	r3, [r7, #4]
 8025810:	2201      	movs	r2, #1
 8025812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8025816:	2301      	movs	r3, #1
 8025818:	e016      	b.n	8025848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802581a:	687b      	ldr	r3, [r7, #4]
 802581c:	681b      	ldr	r3, [r3, #0]
 802581e:	697a      	ldr	r2, [r7, #20]
 8025820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8025822:	6878      	ldr	r0, [r7, #4]
 8025824:	f000 f9a0 	bl	8025b68 <DMA_CalcBaseAndBitshift>
 8025828:	4603      	mov	r3, r0
 802582a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802582c:	687b      	ldr	r3, [r7, #4]
 802582e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025830:	223f      	movs	r2, #63	; 0x3f
 8025832:	409a      	lsls	r2, r3
 8025834:	68fb      	ldr	r3, [r7, #12]
 8025836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8025838:	687b      	ldr	r3, [r7, #4]
 802583a:	2200      	movs	r2, #0
 802583c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802583e:	687b      	ldr	r3, [r7, #4]
 8025840:	2201      	movs	r2, #1
 8025842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8025846:	2300      	movs	r3, #0
}
 8025848:	4618      	mov	r0, r3
 802584a:	3718      	adds	r7, #24
 802584c:	46bd      	mov	sp, r7
 802584e:	bd80      	pop	{r7, pc}
 8025850:	f010803f 	.word	0xf010803f

08025854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8025854:	b580      	push	{r7, lr}
 8025856:	b086      	sub	sp, #24
 8025858:	af00      	add	r7, sp, #0
 802585a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 802585c:	2300      	movs	r3, #0
 802585e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8025860:	4b92      	ldr	r3, [pc, #584]	; (8025aac <HAL_DMA_IRQHandler+0x258>)
 8025862:	681b      	ldr	r3, [r3, #0]
 8025864:	4a92      	ldr	r2, [pc, #584]	; (8025ab0 <HAL_DMA_IRQHandler+0x25c>)
 8025866:	fba2 2303 	umull	r2, r3, r2, r3
 802586a:	0a9b      	lsrs	r3, r3, #10
 802586c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802586e:	687b      	ldr	r3, [r7, #4]
 8025870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8025872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8025874:	693b      	ldr	r3, [r7, #16]
 8025876:	681b      	ldr	r3, [r3, #0]
 8025878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802587a:	687b      	ldr	r3, [r7, #4]
 802587c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802587e:	2208      	movs	r2, #8
 8025880:	409a      	lsls	r2, r3
 8025882:	68fb      	ldr	r3, [r7, #12]
 8025884:	4013      	ands	r3, r2
 8025886:	2b00      	cmp	r3, #0
 8025888:	d01a      	beq.n	80258c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802588a:	687b      	ldr	r3, [r7, #4]
 802588c:	681b      	ldr	r3, [r3, #0]
 802588e:	681b      	ldr	r3, [r3, #0]
 8025890:	f003 0304 	and.w	r3, r3, #4
 8025894:	2b00      	cmp	r3, #0
 8025896:	d013      	beq.n	80258c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8025898:	687b      	ldr	r3, [r7, #4]
 802589a:	681b      	ldr	r3, [r3, #0]
 802589c:	681a      	ldr	r2, [r3, #0]
 802589e:	687b      	ldr	r3, [r7, #4]
 80258a0:	681b      	ldr	r3, [r3, #0]
 80258a2:	f022 0204 	bic.w	r2, r2, #4
 80258a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80258a8:	687b      	ldr	r3, [r7, #4]
 80258aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80258ac:	2208      	movs	r2, #8
 80258ae:	409a      	lsls	r2, r3
 80258b0:	693b      	ldr	r3, [r7, #16]
 80258b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80258b4:	687b      	ldr	r3, [r7, #4]
 80258b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80258b8:	f043 0201 	orr.w	r2, r3, #1
 80258bc:	687b      	ldr	r3, [r7, #4]
 80258be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80258c0:	687b      	ldr	r3, [r7, #4]
 80258c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80258c4:	2201      	movs	r2, #1
 80258c6:	409a      	lsls	r2, r3
 80258c8:	68fb      	ldr	r3, [r7, #12]
 80258ca:	4013      	ands	r3, r2
 80258cc:	2b00      	cmp	r3, #0
 80258ce:	d012      	beq.n	80258f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80258d0:	687b      	ldr	r3, [r7, #4]
 80258d2:	681b      	ldr	r3, [r3, #0]
 80258d4:	695b      	ldr	r3, [r3, #20]
 80258d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80258da:	2b00      	cmp	r3, #0
 80258dc:	d00b      	beq.n	80258f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80258de:	687b      	ldr	r3, [r7, #4]
 80258e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80258e2:	2201      	movs	r2, #1
 80258e4:	409a      	lsls	r2, r3
 80258e6:	693b      	ldr	r3, [r7, #16]
 80258e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80258ea:	687b      	ldr	r3, [r7, #4]
 80258ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80258ee:	f043 0202 	orr.w	r2, r3, #2
 80258f2:	687b      	ldr	r3, [r7, #4]
 80258f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80258f6:	687b      	ldr	r3, [r7, #4]
 80258f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80258fa:	2204      	movs	r2, #4
 80258fc:	409a      	lsls	r2, r3
 80258fe:	68fb      	ldr	r3, [r7, #12]
 8025900:	4013      	ands	r3, r2
 8025902:	2b00      	cmp	r3, #0
 8025904:	d012      	beq.n	802592c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8025906:	687b      	ldr	r3, [r7, #4]
 8025908:	681b      	ldr	r3, [r3, #0]
 802590a:	681b      	ldr	r3, [r3, #0]
 802590c:	f003 0302 	and.w	r3, r3, #2
 8025910:	2b00      	cmp	r3, #0
 8025912:	d00b      	beq.n	802592c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8025914:	687b      	ldr	r3, [r7, #4]
 8025916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025918:	2204      	movs	r2, #4
 802591a:	409a      	lsls	r2, r3
 802591c:	693b      	ldr	r3, [r7, #16]
 802591e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8025920:	687b      	ldr	r3, [r7, #4]
 8025922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025924:	f043 0204 	orr.w	r2, r3, #4
 8025928:	687b      	ldr	r3, [r7, #4]
 802592a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 802592c:	687b      	ldr	r3, [r7, #4]
 802592e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025930:	2210      	movs	r2, #16
 8025932:	409a      	lsls	r2, r3
 8025934:	68fb      	ldr	r3, [r7, #12]
 8025936:	4013      	ands	r3, r2
 8025938:	2b00      	cmp	r3, #0
 802593a:	d043      	beq.n	80259c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 802593c:	687b      	ldr	r3, [r7, #4]
 802593e:	681b      	ldr	r3, [r3, #0]
 8025940:	681b      	ldr	r3, [r3, #0]
 8025942:	f003 0308 	and.w	r3, r3, #8
 8025946:	2b00      	cmp	r3, #0
 8025948:	d03c      	beq.n	80259c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 802594a:	687b      	ldr	r3, [r7, #4]
 802594c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802594e:	2210      	movs	r2, #16
 8025950:	409a      	lsls	r2, r3
 8025952:	693b      	ldr	r3, [r7, #16]
 8025954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8025956:	687b      	ldr	r3, [r7, #4]
 8025958:	681b      	ldr	r3, [r3, #0]
 802595a:	681b      	ldr	r3, [r3, #0]
 802595c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025960:	2b00      	cmp	r3, #0
 8025962:	d018      	beq.n	8025996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8025964:	687b      	ldr	r3, [r7, #4]
 8025966:	681b      	ldr	r3, [r3, #0]
 8025968:	681b      	ldr	r3, [r3, #0]
 802596a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802596e:	2b00      	cmp	r3, #0
 8025970:	d108      	bne.n	8025984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8025972:	687b      	ldr	r3, [r7, #4]
 8025974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025976:	2b00      	cmp	r3, #0
 8025978:	d024      	beq.n	80259c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802597a:	687b      	ldr	r3, [r7, #4]
 802597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802597e:	6878      	ldr	r0, [r7, #4]
 8025980:	4798      	blx	r3
 8025982:	e01f      	b.n	80259c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8025984:	687b      	ldr	r3, [r7, #4]
 8025986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025988:	2b00      	cmp	r3, #0
 802598a:	d01b      	beq.n	80259c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802598c:	687b      	ldr	r3, [r7, #4]
 802598e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025990:	6878      	ldr	r0, [r7, #4]
 8025992:	4798      	blx	r3
 8025994:	e016      	b.n	80259c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8025996:	687b      	ldr	r3, [r7, #4]
 8025998:	681b      	ldr	r3, [r3, #0]
 802599a:	681b      	ldr	r3, [r3, #0]
 802599c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80259a0:	2b00      	cmp	r3, #0
 80259a2:	d107      	bne.n	80259b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80259a4:	687b      	ldr	r3, [r7, #4]
 80259a6:	681b      	ldr	r3, [r3, #0]
 80259a8:	681a      	ldr	r2, [r3, #0]
 80259aa:	687b      	ldr	r3, [r7, #4]
 80259ac:	681b      	ldr	r3, [r3, #0]
 80259ae:	f022 0208 	bic.w	r2, r2, #8
 80259b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80259b4:	687b      	ldr	r3, [r7, #4]
 80259b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80259b8:	2b00      	cmp	r3, #0
 80259ba:	d003      	beq.n	80259c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80259bc:	687b      	ldr	r3, [r7, #4]
 80259be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80259c0:	6878      	ldr	r0, [r7, #4]
 80259c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80259c4:	687b      	ldr	r3, [r7, #4]
 80259c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80259c8:	2220      	movs	r2, #32
 80259ca:	409a      	lsls	r2, r3
 80259cc:	68fb      	ldr	r3, [r7, #12]
 80259ce:	4013      	ands	r3, r2
 80259d0:	2b00      	cmp	r3, #0
 80259d2:	f000 808e 	beq.w	8025af2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80259d6:	687b      	ldr	r3, [r7, #4]
 80259d8:	681b      	ldr	r3, [r3, #0]
 80259da:	681b      	ldr	r3, [r3, #0]
 80259dc:	f003 0310 	and.w	r3, r3, #16
 80259e0:	2b00      	cmp	r3, #0
 80259e2:	f000 8086 	beq.w	8025af2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80259ea:	2220      	movs	r2, #32
 80259ec:	409a      	lsls	r2, r3
 80259ee:	693b      	ldr	r3, [r7, #16]
 80259f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80259f2:	687b      	ldr	r3, [r7, #4]
 80259f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80259f8:	b2db      	uxtb	r3, r3
 80259fa:	2b05      	cmp	r3, #5
 80259fc:	d136      	bne.n	8025a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80259fe:	687b      	ldr	r3, [r7, #4]
 8025a00:	681b      	ldr	r3, [r3, #0]
 8025a02:	681a      	ldr	r2, [r3, #0]
 8025a04:	687b      	ldr	r3, [r7, #4]
 8025a06:	681b      	ldr	r3, [r3, #0]
 8025a08:	f022 0216 	bic.w	r2, r2, #22
 8025a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8025a0e:	687b      	ldr	r3, [r7, #4]
 8025a10:	681b      	ldr	r3, [r3, #0]
 8025a12:	695a      	ldr	r2, [r3, #20]
 8025a14:	687b      	ldr	r3, [r7, #4]
 8025a16:	681b      	ldr	r3, [r3, #0]
 8025a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8025a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8025a1e:	687b      	ldr	r3, [r7, #4]
 8025a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a22:	2b00      	cmp	r3, #0
 8025a24:	d103      	bne.n	8025a2e <HAL_DMA_IRQHandler+0x1da>
 8025a26:	687b      	ldr	r3, [r7, #4]
 8025a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025a2a:	2b00      	cmp	r3, #0
 8025a2c:	d007      	beq.n	8025a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8025a2e:	687b      	ldr	r3, [r7, #4]
 8025a30:	681b      	ldr	r3, [r3, #0]
 8025a32:	681a      	ldr	r2, [r3, #0]
 8025a34:	687b      	ldr	r3, [r7, #4]
 8025a36:	681b      	ldr	r3, [r3, #0]
 8025a38:	f022 0208 	bic.w	r2, r2, #8
 8025a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8025a3e:	687b      	ldr	r3, [r7, #4]
 8025a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025a42:	223f      	movs	r2, #63	; 0x3f
 8025a44:	409a      	lsls	r2, r3
 8025a46:	693b      	ldr	r3, [r7, #16]
 8025a48:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8025a4a:	687b      	ldr	r3, [r7, #4]
 8025a4c:	2200      	movs	r2, #0
 8025a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8025a52:	687b      	ldr	r3, [r7, #4]
 8025a54:	2201      	movs	r2, #1
 8025a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8025a5a:	687b      	ldr	r3, [r7, #4]
 8025a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8025a5e:	2b00      	cmp	r3, #0
 8025a60:	d07d      	beq.n	8025b5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8025a62:	687b      	ldr	r3, [r7, #4]
 8025a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8025a66:	6878      	ldr	r0, [r7, #4]
 8025a68:	4798      	blx	r3
        }
        return;
 8025a6a:	e078      	b.n	8025b5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8025a6c:	687b      	ldr	r3, [r7, #4]
 8025a6e:	681b      	ldr	r3, [r3, #0]
 8025a70:	681b      	ldr	r3, [r3, #0]
 8025a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025a76:	2b00      	cmp	r3, #0
 8025a78:	d01c      	beq.n	8025ab4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8025a7a:	687b      	ldr	r3, [r7, #4]
 8025a7c:	681b      	ldr	r3, [r3, #0]
 8025a7e:	681b      	ldr	r3, [r3, #0]
 8025a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025a84:	2b00      	cmp	r3, #0
 8025a86:	d108      	bne.n	8025a9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8025a88:	687b      	ldr	r3, [r7, #4]
 8025a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025a8c:	2b00      	cmp	r3, #0
 8025a8e:	d030      	beq.n	8025af2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8025a90:	687b      	ldr	r3, [r7, #4]
 8025a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025a94:	6878      	ldr	r0, [r7, #4]
 8025a96:	4798      	blx	r3
 8025a98:	e02b      	b.n	8025af2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8025a9a:	687b      	ldr	r3, [r7, #4]
 8025a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025a9e:	2b00      	cmp	r3, #0
 8025aa0:	d027      	beq.n	8025af2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8025aa2:	687b      	ldr	r3, [r7, #4]
 8025aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025aa6:	6878      	ldr	r0, [r7, #4]
 8025aa8:	4798      	blx	r3
 8025aaa:	e022      	b.n	8025af2 <HAL_DMA_IRQHandler+0x29e>
 8025aac:	20000000 	.word	0x20000000
 8025ab0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8025ab4:	687b      	ldr	r3, [r7, #4]
 8025ab6:	681b      	ldr	r3, [r3, #0]
 8025ab8:	681b      	ldr	r3, [r3, #0]
 8025aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025abe:	2b00      	cmp	r3, #0
 8025ac0:	d10f      	bne.n	8025ae2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8025ac2:	687b      	ldr	r3, [r7, #4]
 8025ac4:	681b      	ldr	r3, [r3, #0]
 8025ac6:	681a      	ldr	r2, [r3, #0]
 8025ac8:	687b      	ldr	r3, [r7, #4]
 8025aca:	681b      	ldr	r3, [r3, #0]
 8025acc:	f022 0210 	bic.w	r2, r2, #16
 8025ad0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8025ad2:	687b      	ldr	r3, [r7, #4]
 8025ad4:	2200      	movs	r2, #0
 8025ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8025ada:	687b      	ldr	r3, [r7, #4]
 8025adc:	2201      	movs	r2, #1
 8025ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8025ae2:	687b      	ldr	r3, [r7, #4]
 8025ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025ae6:	2b00      	cmp	r3, #0
 8025ae8:	d003      	beq.n	8025af2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8025aea:	687b      	ldr	r3, [r7, #4]
 8025aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025aee:	6878      	ldr	r0, [r7, #4]
 8025af0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8025af2:	687b      	ldr	r3, [r7, #4]
 8025af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025af6:	2b00      	cmp	r3, #0
 8025af8:	d032      	beq.n	8025b60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8025afa:	687b      	ldr	r3, [r7, #4]
 8025afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025afe:	f003 0301 	and.w	r3, r3, #1
 8025b02:	2b00      	cmp	r3, #0
 8025b04:	d022      	beq.n	8025b4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8025b06:	687b      	ldr	r3, [r7, #4]
 8025b08:	2205      	movs	r2, #5
 8025b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8025b0e:	687b      	ldr	r3, [r7, #4]
 8025b10:	681b      	ldr	r3, [r3, #0]
 8025b12:	681a      	ldr	r2, [r3, #0]
 8025b14:	687b      	ldr	r3, [r7, #4]
 8025b16:	681b      	ldr	r3, [r3, #0]
 8025b18:	f022 0201 	bic.w	r2, r2, #1
 8025b1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8025b1e:	68bb      	ldr	r3, [r7, #8]
 8025b20:	3301      	adds	r3, #1
 8025b22:	60bb      	str	r3, [r7, #8]
 8025b24:	697a      	ldr	r2, [r7, #20]
 8025b26:	429a      	cmp	r2, r3
 8025b28:	d307      	bcc.n	8025b3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8025b2a:	687b      	ldr	r3, [r7, #4]
 8025b2c:	681b      	ldr	r3, [r3, #0]
 8025b2e:	681b      	ldr	r3, [r3, #0]
 8025b30:	f003 0301 	and.w	r3, r3, #1
 8025b34:	2b00      	cmp	r3, #0
 8025b36:	d1f2      	bne.n	8025b1e <HAL_DMA_IRQHandler+0x2ca>
 8025b38:	e000      	b.n	8025b3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8025b3a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8025b3c:	687b      	ldr	r3, [r7, #4]
 8025b3e:	2200      	movs	r2, #0
 8025b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8025b44:	687b      	ldr	r3, [r7, #4]
 8025b46:	2201      	movs	r2, #1
 8025b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8025b4c:	687b      	ldr	r3, [r7, #4]
 8025b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8025b50:	2b00      	cmp	r3, #0
 8025b52:	d005      	beq.n	8025b60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8025b54:	687b      	ldr	r3, [r7, #4]
 8025b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8025b58:	6878      	ldr	r0, [r7, #4]
 8025b5a:	4798      	blx	r3
 8025b5c:	e000      	b.n	8025b60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8025b5e:	bf00      	nop
    }
  }
}
 8025b60:	3718      	adds	r7, #24
 8025b62:	46bd      	mov	sp, r7
 8025b64:	bd80      	pop	{r7, pc}
 8025b66:	bf00      	nop

08025b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8025b68:	b480      	push	{r7}
 8025b6a:	b085      	sub	sp, #20
 8025b6c:	af00      	add	r7, sp, #0
 8025b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8025b70:	687b      	ldr	r3, [r7, #4]
 8025b72:	681b      	ldr	r3, [r3, #0]
 8025b74:	b2db      	uxtb	r3, r3
 8025b76:	3b10      	subs	r3, #16
 8025b78:	4a13      	ldr	r2, [pc, #76]	; (8025bc8 <DMA_CalcBaseAndBitshift+0x60>)
 8025b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8025b7e:	091b      	lsrs	r3, r3, #4
 8025b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8025b82:	4a12      	ldr	r2, [pc, #72]	; (8025bcc <DMA_CalcBaseAndBitshift+0x64>)
 8025b84:	68fb      	ldr	r3, [r7, #12]
 8025b86:	4413      	add	r3, r2
 8025b88:	781b      	ldrb	r3, [r3, #0]
 8025b8a:	461a      	mov	r2, r3
 8025b8c:	687b      	ldr	r3, [r7, #4]
 8025b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8025b90:	68fb      	ldr	r3, [r7, #12]
 8025b92:	2b03      	cmp	r3, #3
 8025b94:	d908      	bls.n	8025ba8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8025b96:	687b      	ldr	r3, [r7, #4]
 8025b98:	681b      	ldr	r3, [r3, #0]
 8025b9a:	461a      	mov	r2, r3
 8025b9c:	4b0c      	ldr	r3, [pc, #48]	; (8025bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8025b9e:	4013      	ands	r3, r2
 8025ba0:	1d1a      	adds	r2, r3, #4
 8025ba2:	687b      	ldr	r3, [r7, #4]
 8025ba4:	659a      	str	r2, [r3, #88]	; 0x58
 8025ba6:	e006      	b.n	8025bb6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8025ba8:	687b      	ldr	r3, [r7, #4]
 8025baa:	681b      	ldr	r3, [r3, #0]
 8025bac:	461a      	mov	r2, r3
 8025bae:	4b08      	ldr	r3, [pc, #32]	; (8025bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8025bb0:	4013      	ands	r3, r2
 8025bb2:	687a      	ldr	r2, [r7, #4]
 8025bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8025bb6:	687b      	ldr	r3, [r7, #4]
 8025bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8025bba:	4618      	mov	r0, r3
 8025bbc:	3714      	adds	r7, #20
 8025bbe:	46bd      	mov	sp, r7
 8025bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bc4:	4770      	bx	lr
 8025bc6:	bf00      	nop
 8025bc8:	aaaaaaab 	.word	0xaaaaaaab
 8025bcc:	080308b4 	.word	0x080308b4
 8025bd0:	fffffc00 	.word	0xfffffc00

08025bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8025bd4:	b480      	push	{r7}
 8025bd6:	b085      	sub	sp, #20
 8025bd8:	af00      	add	r7, sp, #0
 8025bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8025bdc:	2300      	movs	r3, #0
 8025bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8025be0:	687b      	ldr	r3, [r7, #4]
 8025be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8025be6:	687b      	ldr	r3, [r7, #4]
 8025be8:	699b      	ldr	r3, [r3, #24]
 8025bea:	2b00      	cmp	r3, #0
 8025bec:	d11f      	bne.n	8025c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8025bee:	68bb      	ldr	r3, [r7, #8]
 8025bf0:	2b03      	cmp	r3, #3
 8025bf2:	d855      	bhi.n	8025ca0 <DMA_CheckFifoParam+0xcc>
 8025bf4:	a201      	add	r2, pc, #4	; (adr r2, 8025bfc <DMA_CheckFifoParam+0x28>)
 8025bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025bfa:	bf00      	nop
 8025bfc:	08025c0d 	.word	0x08025c0d
 8025c00:	08025c1f 	.word	0x08025c1f
 8025c04:	08025c0d 	.word	0x08025c0d
 8025c08:	08025ca1 	.word	0x08025ca1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025c0c:	687b      	ldr	r3, [r7, #4]
 8025c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8025c14:	2b00      	cmp	r3, #0
 8025c16:	d045      	beq.n	8025ca4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8025c18:	2301      	movs	r3, #1
 8025c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025c1c:	e042      	b.n	8025ca4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8025c1e:	687b      	ldr	r3, [r7, #4]
 8025c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8025c26:	d13f      	bne.n	8025ca8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8025c28:	2301      	movs	r3, #1
 8025c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025c2c:	e03c      	b.n	8025ca8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8025c2e:	687b      	ldr	r3, [r7, #4]
 8025c30:	699b      	ldr	r3, [r3, #24]
 8025c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8025c36:	d121      	bne.n	8025c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8025c38:	68bb      	ldr	r3, [r7, #8]
 8025c3a:	2b03      	cmp	r3, #3
 8025c3c:	d836      	bhi.n	8025cac <DMA_CheckFifoParam+0xd8>
 8025c3e:	a201      	add	r2, pc, #4	; (adr r2, 8025c44 <DMA_CheckFifoParam+0x70>)
 8025c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025c44:	08025c55 	.word	0x08025c55
 8025c48:	08025c5b 	.word	0x08025c5b
 8025c4c:	08025c55 	.word	0x08025c55
 8025c50:	08025c6d 	.word	0x08025c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8025c54:	2301      	movs	r3, #1
 8025c56:	73fb      	strb	r3, [r7, #15]
      break;
 8025c58:	e02f      	b.n	8025cba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025c5a:	687b      	ldr	r3, [r7, #4]
 8025c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8025c62:	2b00      	cmp	r3, #0
 8025c64:	d024      	beq.n	8025cb0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8025c66:	2301      	movs	r3, #1
 8025c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025c6a:	e021      	b.n	8025cb0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8025c6c:	687b      	ldr	r3, [r7, #4]
 8025c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8025c74:	d11e      	bne.n	8025cb4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8025c76:	2301      	movs	r3, #1
 8025c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8025c7a:	e01b      	b.n	8025cb4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8025c7c:	68bb      	ldr	r3, [r7, #8]
 8025c7e:	2b02      	cmp	r3, #2
 8025c80:	d902      	bls.n	8025c88 <DMA_CheckFifoParam+0xb4>
 8025c82:	2b03      	cmp	r3, #3
 8025c84:	d003      	beq.n	8025c8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8025c86:	e018      	b.n	8025cba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8025c88:	2301      	movs	r3, #1
 8025c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8025c8c:	e015      	b.n	8025cba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025c8e:	687b      	ldr	r3, [r7, #4]
 8025c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8025c96:	2b00      	cmp	r3, #0
 8025c98:	d00e      	beq.n	8025cb8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8025c9a:	2301      	movs	r3, #1
 8025c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8025c9e:	e00b      	b.n	8025cb8 <DMA_CheckFifoParam+0xe4>
      break;
 8025ca0:	bf00      	nop
 8025ca2:	e00a      	b.n	8025cba <DMA_CheckFifoParam+0xe6>
      break;
 8025ca4:	bf00      	nop
 8025ca6:	e008      	b.n	8025cba <DMA_CheckFifoParam+0xe6>
      break;
 8025ca8:	bf00      	nop
 8025caa:	e006      	b.n	8025cba <DMA_CheckFifoParam+0xe6>
      break;
 8025cac:	bf00      	nop
 8025cae:	e004      	b.n	8025cba <DMA_CheckFifoParam+0xe6>
      break;
 8025cb0:	bf00      	nop
 8025cb2:	e002      	b.n	8025cba <DMA_CheckFifoParam+0xe6>
      break;   
 8025cb4:	bf00      	nop
 8025cb6:	e000      	b.n	8025cba <DMA_CheckFifoParam+0xe6>
      break;
 8025cb8:	bf00      	nop
    }
  } 
  
  return status; 
 8025cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8025cbc:	4618      	mov	r0, r3
 8025cbe:	3714      	adds	r7, #20
 8025cc0:	46bd      	mov	sp, r7
 8025cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cc6:	4770      	bx	lr

08025cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8025cc8:	b480      	push	{r7}
 8025cca:	b089      	sub	sp, #36	; 0x24
 8025ccc:	af00      	add	r7, sp, #0
 8025cce:	6078      	str	r0, [r7, #4]
 8025cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8025cd2:	2300      	movs	r3, #0
 8025cd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8025cd6:	2300      	movs	r3, #0
 8025cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8025cda:	2300      	movs	r3, #0
 8025cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8025cde:	2300      	movs	r3, #0
 8025ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8025ce2:	2300      	movs	r3, #0
 8025ce4:	61fb      	str	r3, [r7, #28]
 8025ce6:	e175      	b.n	8025fd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8025ce8:	2201      	movs	r2, #1
 8025cea:	69fb      	ldr	r3, [r7, #28]
 8025cec:	fa02 f303 	lsl.w	r3, r2, r3
 8025cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8025cf2:	683b      	ldr	r3, [r7, #0]
 8025cf4:	681b      	ldr	r3, [r3, #0]
 8025cf6:	697a      	ldr	r2, [r7, #20]
 8025cf8:	4013      	ands	r3, r2
 8025cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8025cfc:	693a      	ldr	r2, [r7, #16]
 8025cfe:	697b      	ldr	r3, [r7, #20]
 8025d00:	429a      	cmp	r2, r3
 8025d02:	f040 8164 	bne.w	8025fce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8025d06:	683b      	ldr	r3, [r7, #0]
 8025d08:	685b      	ldr	r3, [r3, #4]
 8025d0a:	2b01      	cmp	r3, #1
 8025d0c:	d00b      	beq.n	8025d26 <HAL_GPIO_Init+0x5e>
 8025d0e:	683b      	ldr	r3, [r7, #0]
 8025d10:	685b      	ldr	r3, [r3, #4]
 8025d12:	2b02      	cmp	r3, #2
 8025d14:	d007      	beq.n	8025d26 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8025d16:	683b      	ldr	r3, [r7, #0]
 8025d18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8025d1a:	2b11      	cmp	r3, #17
 8025d1c:	d003      	beq.n	8025d26 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8025d1e:	683b      	ldr	r3, [r7, #0]
 8025d20:	685b      	ldr	r3, [r3, #4]
 8025d22:	2b12      	cmp	r3, #18
 8025d24:	d130      	bne.n	8025d88 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8025d26:	687b      	ldr	r3, [r7, #4]
 8025d28:	689b      	ldr	r3, [r3, #8]
 8025d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8025d2c:	69fb      	ldr	r3, [r7, #28]
 8025d2e:	005b      	lsls	r3, r3, #1
 8025d30:	2203      	movs	r2, #3
 8025d32:	fa02 f303 	lsl.w	r3, r2, r3
 8025d36:	43db      	mvns	r3, r3
 8025d38:	69ba      	ldr	r2, [r7, #24]
 8025d3a:	4013      	ands	r3, r2
 8025d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8025d3e:	683b      	ldr	r3, [r7, #0]
 8025d40:	68da      	ldr	r2, [r3, #12]
 8025d42:	69fb      	ldr	r3, [r7, #28]
 8025d44:	005b      	lsls	r3, r3, #1
 8025d46:	fa02 f303 	lsl.w	r3, r2, r3
 8025d4a:	69ba      	ldr	r2, [r7, #24]
 8025d4c:	4313      	orrs	r3, r2
 8025d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8025d50:	687b      	ldr	r3, [r7, #4]
 8025d52:	69ba      	ldr	r2, [r7, #24]
 8025d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8025d56:	687b      	ldr	r3, [r7, #4]
 8025d58:	685b      	ldr	r3, [r3, #4]
 8025d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8025d5c:	2201      	movs	r2, #1
 8025d5e:	69fb      	ldr	r3, [r7, #28]
 8025d60:	fa02 f303 	lsl.w	r3, r2, r3
 8025d64:	43db      	mvns	r3, r3
 8025d66:	69ba      	ldr	r2, [r7, #24]
 8025d68:	4013      	ands	r3, r2
 8025d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8025d6c:	683b      	ldr	r3, [r7, #0]
 8025d6e:	685b      	ldr	r3, [r3, #4]
 8025d70:	091b      	lsrs	r3, r3, #4
 8025d72:	f003 0201 	and.w	r2, r3, #1
 8025d76:	69fb      	ldr	r3, [r7, #28]
 8025d78:	fa02 f303 	lsl.w	r3, r2, r3
 8025d7c:	69ba      	ldr	r2, [r7, #24]
 8025d7e:	4313      	orrs	r3, r2
 8025d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8025d82:	687b      	ldr	r3, [r7, #4]
 8025d84:	69ba      	ldr	r2, [r7, #24]
 8025d86:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8025d88:	687b      	ldr	r3, [r7, #4]
 8025d8a:	68db      	ldr	r3, [r3, #12]
 8025d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8025d8e:	69fb      	ldr	r3, [r7, #28]
 8025d90:	005b      	lsls	r3, r3, #1
 8025d92:	2203      	movs	r2, #3
 8025d94:	fa02 f303 	lsl.w	r3, r2, r3
 8025d98:	43db      	mvns	r3, r3
 8025d9a:	69ba      	ldr	r2, [r7, #24]
 8025d9c:	4013      	ands	r3, r2
 8025d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8025da0:	683b      	ldr	r3, [r7, #0]
 8025da2:	689a      	ldr	r2, [r3, #8]
 8025da4:	69fb      	ldr	r3, [r7, #28]
 8025da6:	005b      	lsls	r3, r3, #1
 8025da8:	fa02 f303 	lsl.w	r3, r2, r3
 8025dac:	69ba      	ldr	r2, [r7, #24]
 8025dae:	4313      	orrs	r3, r2
 8025db0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8025db2:	687b      	ldr	r3, [r7, #4]
 8025db4:	69ba      	ldr	r2, [r7, #24]
 8025db6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8025db8:	683b      	ldr	r3, [r7, #0]
 8025dba:	685b      	ldr	r3, [r3, #4]
 8025dbc:	2b02      	cmp	r3, #2
 8025dbe:	d003      	beq.n	8025dc8 <HAL_GPIO_Init+0x100>
 8025dc0:	683b      	ldr	r3, [r7, #0]
 8025dc2:	685b      	ldr	r3, [r3, #4]
 8025dc4:	2b12      	cmp	r3, #18
 8025dc6:	d123      	bne.n	8025e10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8025dc8:	69fb      	ldr	r3, [r7, #28]
 8025dca:	08da      	lsrs	r2, r3, #3
 8025dcc:	687b      	ldr	r3, [r7, #4]
 8025dce:	3208      	adds	r2, #8
 8025dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8025dd6:	69fb      	ldr	r3, [r7, #28]
 8025dd8:	f003 0307 	and.w	r3, r3, #7
 8025ddc:	009b      	lsls	r3, r3, #2
 8025dde:	220f      	movs	r2, #15
 8025de0:	fa02 f303 	lsl.w	r3, r2, r3
 8025de4:	43db      	mvns	r3, r3
 8025de6:	69ba      	ldr	r2, [r7, #24]
 8025de8:	4013      	ands	r3, r2
 8025dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8025dec:	683b      	ldr	r3, [r7, #0]
 8025dee:	691a      	ldr	r2, [r3, #16]
 8025df0:	69fb      	ldr	r3, [r7, #28]
 8025df2:	f003 0307 	and.w	r3, r3, #7
 8025df6:	009b      	lsls	r3, r3, #2
 8025df8:	fa02 f303 	lsl.w	r3, r2, r3
 8025dfc:	69ba      	ldr	r2, [r7, #24]
 8025dfe:	4313      	orrs	r3, r2
 8025e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8025e02:	69fb      	ldr	r3, [r7, #28]
 8025e04:	08da      	lsrs	r2, r3, #3
 8025e06:	687b      	ldr	r3, [r7, #4]
 8025e08:	3208      	adds	r2, #8
 8025e0a:	69b9      	ldr	r1, [r7, #24]
 8025e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8025e10:	687b      	ldr	r3, [r7, #4]
 8025e12:	681b      	ldr	r3, [r3, #0]
 8025e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8025e16:	69fb      	ldr	r3, [r7, #28]
 8025e18:	005b      	lsls	r3, r3, #1
 8025e1a:	2203      	movs	r2, #3
 8025e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8025e20:	43db      	mvns	r3, r3
 8025e22:	69ba      	ldr	r2, [r7, #24]
 8025e24:	4013      	ands	r3, r2
 8025e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8025e28:	683b      	ldr	r3, [r7, #0]
 8025e2a:	685b      	ldr	r3, [r3, #4]
 8025e2c:	f003 0203 	and.w	r2, r3, #3
 8025e30:	69fb      	ldr	r3, [r7, #28]
 8025e32:	005b      	lsls	r3, r3, #1
 8025e34:	fa02 f303 	lsl.w	r3, r2, r3
 8025e38:	69ba      	ldr	r2, [r7, #24]
 8025e3a:	4313      	orrs	r3, r2
 8025e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8025e3e:	687b      	ldr	r3, [r7, #4]
 8025e40:	69ba      	ldr	r2, [r7, #24]
 8025e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8025e44:	683b      	ldr	r3, [r7, #0]
 8025e46:	685b      	ldr	r3, [r3, #4]
 8025e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025e4c:	2b00      	cmp	r3, #0
 8025e4e:	f000 80be 	beq.w	8025fce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025e52:	4b65      	ldr	r3, [pc, #404]	; (8025fe8 <HAL_GPIO_Init+0x320>)
 8025e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025e56:	4a64      	ldr	r2, [pc, #400]	; (8025fe8 <HAL_GPIO_Init+0x320>)
 8025e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8025e5e:	4b62      	ldr	r3, [pc, #392]	; (8025fe8 <HAL_GPIO_Init+0x320>)
 8025e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025e66:	60fb      	str	r3, [r7, #12]
 8025e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8025e6a:	4a60      	ldr	r2, [pc, #384]	; (8025fec <HAL_GPIO_Init+0x324>)
 8025e6c:	69fb      	ldr	r3, [r7, #28]
 8025e6e:	089b      	lsrs	r3, r3, #2
 8025e70:	3302      	adds	r3, #2
 8025e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8025e78:	69fb      	ldr	r3, [r7, #28]
 8025e7a:	f003 0303 	and.w	r3, r3, #3
 8025e7e:	009b      	lsls	r3, r3, #2
 8025e80:	220f      	movs	r2, #15
 8025e82:	fa02 f303 	lsl.w	r3, r2, r3
 8025e86:	43db      	mvns	r3, r3
 8025e88:	69ba      	ldr	r2, [r7, #24]
 8025e8a:	4013      	ands	r3, r2
 8025e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8025e8e:	687b      	ldr	r3, [r7, #4]
 8025e90:	4a57      	ldr	r2, [pc, #348]	; (8025ff0 <HAL_GPIO_Init+0x328>)
 8025e92:	4293      	cmp	r3, r2
 8025e94:	d037      	beq.n	8025f06 <HAL_GPIO_Init+0x23e>
 8025e96:	687b      	ldr	r3, [r7, #4]
 8025e98:	4a56      	ldr	r2, [pc, #344]	; (8025ff4 <HAL_GPIO_Init+0x32c>)
 8025e9a:	4293      	cmp	r3, r2
 8025e9c:	d031      	beq.n	8025f02 <HAL_GPIO_Init+0x23a>
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	4a55      	ldr	r2, [pc, #340]	; (8025ff8 <HAL_GPIO_Init+0x330>)
 8025ea2:	4293      	cmp	r3, r2
 8025ea4:	d02b      	beq.n	8025efe <HAL_GPIO_Init+0x236>
 8025ea6:	687b      	ldr	r3, [r7, #4]
 8025ea8:	4a54      	ldr	r2, [pc, #336]	; (8025ffc <HAL_GPIO_Init+0x334>)
 8025eaa:	4293      	cmp	r3, r2
 8025eac:	d025      	beq.n	8025efa <HAL_GPIO_Init+0x232>
 8025eae:	687b      	ldr	r3, [r7, #4]
 8025eb0:	4a53      	ldr	r2, [pc, #332]	; (8026000 <HAL_GPIO_Init+0x338>)
 8025eb2:	4293      	cmp	r3, r2
 8025eb4:	d01f      	beq.n	8025ef6 <HAL_GPIO_Init+0x22e>
 8025eb6:	687b      	ldr	r3, [r7, #4]
 8025eb8:	4a52      	ldr	r2, [pc, #328]	; (8026004 <HAL_GPIO_Init+0x33c>)
 8025eba:	4293      	cmp	r3, r2
 8025ebc:	d019      	beq.n	8025ef2 <HAL_GPIO_Init+0x22a>
 8025ebe:	687b      	ldr	r3, [r7, #4]
 8025ec0:	4a51      	ldr	r2, [pc, #324]	; (8026008 <HAL_GPIO_Init+0x340>)
 8025ec2:	4293      	cmp	r3, r2
 8025ec4:	d013      	beq.n	8025eee <HAL_GPIO_Init+0x226>
 8025ec6:	687b      	ldr	r3, [r7, #4]
 8025ec8:	4a50      	ldr	r2, [pc, #320]	; (802600c <HAL_GPIO_Init+0x344>)
 8025eca:	4293      	cmp	r3, r2
 8025ecc:	d00d      	beq.n	8025eea <HAL_GPIO_Init+0x222>
 8025ece:	687b      	ldr	r3, [r7, #4]
 8025ed0:	4a4f      	ldr	r2, [pc, #316]	; (8026010 <HAL_GPIO_Init+0x348>)
 8025ed2:	4293      	cmp	r3, r2
 8025ed4:	d007      	beq.n	8025ee6 <HAL_GPIO_Init+0x21e>
 8025ed6:	687b      	ldr	r3, [r7, #4]
 8025ed8:	4a4e      	ldr	r2, [pc, #312]	; (8026014 <HAL_GPIO_Init+0x34c>)
 8025eda:	4293      	cmp	r3, r2
 8025edc:	d101      	bne.n	8025ee2 <HAL_GPIO_Init+0x21a>
 8025ede:	2309      	movs	r3, #9
 8025ee0:	e012      	b.n	8025f08 <HAL_GPIO_Init+0x240>
 8025ee2:	230a      	movs	r3, #10
 8025ee4:	e010      	b.n	8025f08 <HAL_GPIO_Init+0x240>
 8025ee6:	2308      	movs	r3, #8
 8025ee8:	e00e      	b.n	8025f08 <HAL_GPIO_Init+0x240>
 8025eea:	2307      	movs	r3, #7
 8025eec:	e00c      	b.n	8025f08 <HAL_GPIO_Init+0x240>
 8025eee:	2306      	movs	r3, #6
 8025ef0:	e00a      	b.n	8025f08 <HAL_GPIO_Init+0x240>
 8025ef2:	2305      	movs	r3, #5
 8025ef4:	e008      	b.n	8025f08 <HAL_GPIO_Init+0x240>
 8025ef6:	2304      	movs	r3, #4
 8025ef8:	e006      	b.n	8025f08 <HAL_GPIO_Init+0x240>
 8025efa:	2303      	movs	r3, #3
 8025efc:	e004      	b.n	8025f08 <HAL_GPIO_Init+0x240>
 8025efe:	2302      	movs	r3, #2
 8025f00:	e002      	b.n	8025f08 <HAL_GPIO_Init+0x240>
 8025f02:	2301      	movs	r3, #1
 8025f04:	e000      	b.n	8025f08 <HAL_GPIO_Init+0x240>
 8025f06:	2300      	movs	r3, #0
 8025f08:	69fa      	ldr	r2, [r7, #28]
 8025f0a:	f002 0203 	and.w	r2, r2, #3
 8025f0e:	0092      	lsls	r2, r2, #2
 8025f10:	4093      	lsls	r3, r2
 8025f12:	69ba      	ldr	r2, [r7, #24]
 8025f14:	4313      	orrs	r3, r2
 8025f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8025f18:	4934      	ldr	r1, [pc, #208]	; (8025fec <HAL_GPIO_Init+0x324>)
 8025f1a:	69fb      	ldr	r3, [r7, #28]
 8025f1c:	089b      	lsrs	r3, r3, #2
 8025f1e:	3302      	adds	r3, #2
 8025f20:	69ba      	ldr	r2, [r7, #24]
 8025f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8025f26:	4b3c      	ldr	r3, [pc, #240]	; (8026018 <HAL_GPIO_Init+0x350>)
 8025f28:	681b      	ldr	r3, [r3, #0]
 8025f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025f2c:	693b      	ldr	r3, [r7, #16]
 8025f2e:	43db      	mvns	r3, r3
 8025f30:	69ba      	ldr	r2, [r7, #24]
 8025f32:	4013      	ands	r3, r2
 8025f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8025f36:	683b      	ldr	r3, [r7, #0]
 8025f38:	685b      	ldr	r3, [r3, #4]
 8025f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025f3e:	2b00      	cmp	r3, #0
 8025f40:	d003      	beq.n	8025f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8025f42:	69ba      	ldr	r2, [r7, #24]
 8025f44:	693b      	ldr	r3, [r7, #16]
 8025f46:	4313      	orrs	r3, r2
 8025f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8025f4a:	4a33      	ldr	r2, [pc, #204]	; (8026018 <HAL_GPIO_Init+0x350>)
 8025f4c:	69bb      	ldr	r3, [r7, #24]
 8025f4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8025f50:	4b31      	ldr	r3, [pc, #196]	; (8026018 <HAL_GPIO_Init+0x350>)
 8025f52:	685b      	ldr	r3, [r3, #4]
 8025f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025f56:	693b      	ldr	r3, [r7, #16]
 8025f58:	43db      	mvns	r3, r3
 8025f5a:	69ba      	ldr	r2, [r7, #24]
 8025f5c:	4013      	ands	r3, r2
 8025f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8025f60:	683b      	ldr	r3, [r7, #0]
 8025f62:	685b      	ldr	r3, [r3, #4]
 8025f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025f68:	2b00      	cmp	r3, #0
 8025f6a:	d003      	beq.n	8025f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8025f6c:	69ba      	ldr	r2, [r7, #24]
 8025f6e:	693b      	ldr	r3, [r7, #16]
 8025f70:	4313      	orrs	r3, r2
 8025f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8025f74:	4a28      	ldr	r2, [pc, #160]	; (8026018 <HAL_GPIO_Init+0x350>)
 8025f76:	69bb      	ldr	r3, [r7, #24]
 8025f78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8025f7a:	4b27      	ldr	r3, [pc, #156]	; (8026018 <HAL_GPIO_Init+0x350>)
 8025f7c:	689b      	ldr	r3, [r3, #8]
 8025f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025f80:	693b      	ldr	r3, [r7, #16]
 8025f82:	43db      	mvns	r3, r3
 8025f84:	69ba      	ldr	r2, [r7, #24]
 8025f86:	4013      	ands	r3, r2
 8025f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8025f8a:	683b      	ldr	r3, [r7, #0]
 8025f8c:	685b      	ldr	r3, [r3, #4]
 8025f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025f92:	2b00      	cmp	r3, #0
 8025f94:	d003      	beq.n	8025f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8025f96:	69ba      	ldr	r2, [r7, #24]
 8025f98:	693b      	ldr	r3, [r7, #16]
 8025f9a:	4313      	orrs	r3, r2
 8025f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8025f9e:	4a1e      	ldr	r2, [pc, #120]	; (8026018 <HAL_GPIO_Init+0x350>)
 8025fa0:	69bb      	ldr	r3, [r7, #24]
 8025fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8025fa4:	4b1c      	ldr	r3, [pc, #112]	; (8026018 <HAL_GPIO_Init+0x350>)
 8025fa6:	68db      	ldr	r3, [r3, #12]
 8025fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025faa:	693b      	ldr	r3, [r7, #16]
 8025fac:	43db      	mvns	r3, r3
 8025fae:	69ba      	ldr	r2, [r7, #24]
 8025fb0:	4013      	ands	r3, r2
 8025fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8025fb4:	683b      	ldr	r3, [r7, #0]
 8025fb6:	685b      	ldr	r3, [r3, #4]
 8025fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8025fbc:	2b00      	cmp	r3, #0
 8025fbe:	d003      	beq.n	8025fc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8025fc0:	69ba      	ldr	r2, [r7, #24]
 8025fc2:	693b      	ldr	r3, [r7, #16]
 8025fc4:	4313      	orrs	r3, r2
 8025fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8025fc8:	4a13      	ldr	r2, [pc, #76]	; (8026018 <HAL_GPIO_Init+0x350>)
 8025fca:	69bb      	ldr	r3, [r7, #24]
 8025fcc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8025fce:	69fb      	ldr	r3, [r7, #28]
 8025fd0:	3301      	adds	r3, #1
 8025fd2:	61fb      	str	r3, [r7, #28]
 8025fd4:	69fb      	ldr	r3, [r7, #28]
 8025fd6:	2b0f      	cmp	r3, #15
 8025fd8:	f67f ae86 	bls.w	8025ce8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8025fdc:	bf00      	nop
 8025fde:	3724      	adds	r7, #36	; 0x24
 8025fe0:	46bd      	mov	sp, r7
 8025fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fe6:	4770      	bx	lr
 8025fe8:	40023800 	.word	0x40023800
 8025fec:	40013800 	.word	0x40013800
 8025ff0:	40020000 	.word	0x40020000
 8025ff4:	40020400 	.word	0x40020400
 8025ff8:	40020800 	.word	0x40020800
 8025ffc:	40020c00 	.word	0x40020c00
 8026000:	40021000 	.word	0x40021000
 8026004:	40021400 	.word	0x40021400
 8026008:	40021800 	.word	0x40021800
 802600c:	40021c00 	.word	0x40021c00
 8026010:	40022000 	.word	0x40022000
 8026014:	40022400 	.word	0x40022400
 8026018:	40013c00 	.word	0x40013c00

0802601c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 802601c:	b480      	push	{r7}
 802601e:	b085      	sub	sp, #20
 8026020:	af00      	add	r7, sp, #0
 8026022:	6078      	str	r0, [r7, #4]
 8026024:	460b      	mov	r3, r1
 8026026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8026028:	687b      	ldr	r3, [r7, #4]
 802602a:	691a      	ldr	r2, [r3, #16]
 802602c:	887b      	ldrh	r3, [r7, #2]
 802602e:	4013      	ands	r3, r2
 8026030:	2b00      	cmp	r3, #0
 8026032:	d002      	beq.n	802603a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8026034:	2301      	movs	r3, #1
 8026036:	73fb      	strb	r3, [r7, #15]
 8026038:	e001      	b.n	802603e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 802603a:	2300      	movs	r3, #0
 802603c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 802603e:	7bfb      	ldrb	r3, [r7, #15]
}
 8026040:	4618      	mov	r0, r3
 8026042:	3714      	adds	r7, #20
 8026044:	46bd      	mov	sp, r7
 8026046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802604a:	4770      	bx	lr

0802604c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802604c:	b480      	push	{r7}
 802604e:	b083      	sub	sp, #12
 8026050:	af00      	add	r7, sp, #0
 8026052:	6078      	str	r0, [r7, #4]
 8026054:	460b      	mov	r3, r1
 8026056:	807b      	strh	r3, [r7, #2]
 8026058:	4613      	mov	r3, r2
 802605a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802605c:	787b      	ldrb	r3, [r7, #1]
 802605e:	2b00      	cmp	r3, #0
 8026060:	d003      	beq.n	802606a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8026062:	887a      	ldrh	r2, [r7, #2]
 8026064:	687b      	ldr	r3, [r7, #4]
 8026066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8026068:	e003      	b.n	8026072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 802606a:	887b      	ldrh	r3, [r7, #2]
 802606c:	041a      	lsls	r2, r3, #16
 802606e:	687b      	ldr	r3, [r7, #4]
 8026070:	619a      	str	r2, [r3, #24]
}
 8026072:	bf00      	nop
 8026074:	370c      	adds	r7, #12
 8026076:	46bd      	mov	sp, r7
 8026078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802607c:	4770      	bx	lr
	...

08026080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8026080:	b580      	push	{r7, lr}
 8026082:	b082      	sub	sp, #8
 8026084:	af00      	add	r7, sp, #0
 8026086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8026088:	687b      	ldr	r3, [r7, #4]
 802608a:	2b00      	cmp	r3, #0
 802608c:	d101      	bne.n	8026092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802608e:	2301      	movs	r3, #1
 8026090:	e07f      	b.n	8026192 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8026092:	687b      	ldr	r3, [r7, #4]
 8026094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026098:	b2db      	uxtb	r3, r3
 802609a:	2b00      	cmp	r3, #0
 802609c:	d106      	bne.n	80260ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802609e:	687b      	ldr	r3, [r7, #4]
 80260a0:	2200      	movs	r2, #0
 80260a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80260a6:	6878      	ldr	r0, [r7, #4]
 80260a8:	f7da ff0c 	bl	8000ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80260ac:	687b      	ldr	r3, [r7, #4]
 80260ae:	2224      	movs	r2, #36	; 0x24
 80260b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80260b4:	687b      	ldr	r3, [r7, #4]
 80260b6:	681b      	ldr	r3, [r3, #0]
 80260b8:	681a      	ldr	r2, [r3, #0]
 80260ba:	687b      	ldr	r3, [r7, #4]
 80260bc:	681b      	ldr	r3, [r3, #0]
 80260be:	f022 0201 	bic.w	r2, r2, #1
 80260c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80260c4:	687b      	ldr	r3, [r7, #4]
 80260c6:	685a      	ldr	r2, [r3, #4]
 80260c8:	687b      	ldr	r3, [r7, #4]
 80260ca:	681b      	ldr	r3, [r3, #0]
 80260cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80260d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80260d2:	687b      	ldr	r3, [r7, #4]
 80260d4:	681b      	ldr	r3, [r3, #0]
 80260d6:	689a      	ldr	r2, [r3, #8]
 80260d8:	687b      	ldr	r3, [r7, #4]
 80260da:	681b      	ldr	r3, [r3, #0]
 80260dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80260e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80260e2:	687b      	ldr	r3, [r7, #4]
 80260e4:	68db      	ldr	r3, [r3, #12]
 80260e6:	2b01      	cmp	r3, #1
 80260e8:	d107      	bne.n	80260fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80260ea:	687b      	ldr	r3, [r7, #4]
 80260ec:	689a      	ldr	r2, [r3, #8]
 80260ee:	687b      	ldr	r3, [r7, #4]
 80260f0:	681b      	ldr	r3, [r3, #0]
 80260f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80260f6:	609a      	str	r2, [r3, #8]
 80260f8:	e006      	b.n	8026108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80260fa:	687b      	ldr	r3, [r7, #4]
 80260fc:	689a      	ldr	r2, [r3, #8]
 80260fe:	687b      	ldr	r3, [r7, #4]
 8026100:	681b      	ldr	r3, [r3, #0]
 8026102:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8026106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8026108:	687b      	ldr	r3, [r7, #4]
 802610a:	68db      	ldr	r3, [r3, #12]
 802610c:	2b02      	cmp	r3, #2
 802610e:	d104      	bne.n	802611a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8026110:	687b      	ldr	r3, [r7, #4]
 8026112:	681b      	ldr	r3, [r3, #0]
 8026114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8026118:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 802611a:	687b      	ldr	r3, [r7, #4]
 802611c:	681b      	ldr	r3, [r3, #0]
 802611e:	6859      	ldr	r1, [r3, #4]
 8026120:	687b      	ldr	r3, [r7, #4]
 8026122:	681a      	ldr	r2, [r3, #0]
 8026124:	4b1d      	ldr	r3, [pc, #116]	; (802619c <HAL_I2C_Init+0x11c>)
 8026126:	430b      	orrs	r3, r1
 8026128:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 802612a:	687b      	ldr	r3, [r7, #4]
 802612c:	681b      	ldr	r3, [r3, #0]
 802612e:	68da      	ldr	r2, [r3, #12]
 8026130:	687b      	ldr	r3, [r7, #4]
 8026132:	681b      	ldr	r3, [r3, #0]
 8026134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8026138:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 802613a:	687b      	ldr	r3, [r7, #4]
 802613c:	691a      	ldr	r2, [r3, #16]
 802613e:	687b      	ldr	r3, [r7, #4]
 8026140:	695b      	ldr	r3, [r3, #20]
 8026142:	ea42 0103 	orr.w	r1, r2, r3
 8026146:	687b      	ldr	r3, [r7, #4]
 8026148:	699b      	ldr	r3, [r3, #24]
 802614a:	021a      	lsls	r2, r3, #8
 802614c:	687b      	ldr	r3, [r7, #4]
 802614e:	681b      	ldr	r3, [r3, #0]
 8026150:	430a      	orrs	r2, r1
 8026152:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8026154:	687b      	ldr	r3, [r7, #4]
 8026156:	69d9      	ldr	r1, [r3, #28]
 8026158:	687b      	ldr	r3, [r7, #4]
 802615a:	6a1a      	ldr	r2, [r3, #32]
 802615c:	687b      	ldr	r3, [r7, #4]
 802615e:	681b      	ldr	r3, [r3, #0]
 8026160:	430a      	orrs	r2, r1
 8026162:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8026164:	687b      	ldr	r3, [r7, #4]
 8026166:	681b      	ldr	r3, [r3, #0]
 8026168:	681a      	ldr	r2, [r3, #0]
 802616a:	687b      	ldr	r3, [r7, #4]
 802616c:	681b      	ldr	r3, [r3, #0]
 802616e:	f042 0201 	orr.w	r2, r2, #1
 8026172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8026174:	687b      	ldr	r3, [r7, #4]
 8026176:	2200      	movs	r2, #0
 8026178:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 802617a:	687b      	ldr	r3, [r7, #4]
 802617c:	2220      	movs	r2, #32
 802617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8026182:	687b      	ldr	r3, [r7, #4]
 8026184:	2200      	movs	r2, #0
 8026186:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8026188:	687b      	ldr	r3, [r7, #4]
 802618a:	2200      	movs	r2, #0
 802618c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8026190:	2300      	movs	r3, #0
}
 8026192:	4618      	mov	r0, r3
 8026194:	3708      	adds	r7, #8
 8026196:	46bd      	mov	sp, r7
 8026198:	bd80      	pop	{r7, pc}
 802619a:	bf00      	nop
 802619c:	02008000 	.word	0x02008000

080261a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80261a0:	b580      	push	{r7, lr}
 80261a2:	b088      	sub	sp, #32
 80261a4:	af02      	add	r7, sp, #8
 80261a6:	60f8      	str	r0, [r7, #12]
 80261a8:	4608      	mov	r0, r1
 80261aa:	4611      	mov	r1, r2
 80261ac:	461a      	mov	r2, r3
 80261ae:	4603      	mov	r3, r0
 80261b0:	817b      	strh	r3, [r7, #10]
 80261b2:	460b      	mov	r3, r1
 80261b4:	813b      	strh	r3, [r7, #8]
 80261b6:	4613      	mov	r3, r2
 80261b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80261ba:	68fb      	ldr	r3, [r7, #12]
 80261bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80261c0:	b2db      	uxtb	r3, r3
 80261c2:	2b20      	cmp	r3, #32
 80261c4:	f040 80fd 	bne.w	80263c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80261c8:	6a3b      	ldr	r3, [r7, #32]
 80261ca:	2b00      	cmp	r3, #0
 80261cc:	d002      	beq.n	80261d4 <HAL_I2C_Mem_Read+0x34>
 80261ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80261d0:	2b00      	cmp	r3, #0
 80261d2:	d105      	bne.n	80261e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80261d4:	68fb      	ldr	r3, [r7, #12]
 80261d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80261da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80261dc:	2301      	movs	r3, #1
 80261de:	e0f1      	b.n	80263c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80261e0:	68fb      	ldr	r3, [r7, #12]
 80261e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80261e6:	2b01      	cmp	r3, #1
 80261e8:	d101      	bne.n	80261ee <HAL_I2C_Mem_Read+0x4e>
 80261ea:	2302      	movs	r3, #2
 80261ec:	e0ea      	b.n	80263c4 <HAL_I2C_Mem_Read+0x224>
 80261ee:	68fb      	ldr	r3, [r7, #12]
 80261f0:	2201      	movs	r2, #1
 80261f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80261f6:	f7ff f96f 	bl	80254d8 <HAL_GetTick>
 80261fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80261fc:	697b      	ldr	r3, [r7, #20]
 80261fe:	9300      	str	r3, [sp, #0]
 8026200:	2319      	movs	r3, #25
 8026202:	2201      	movs	r2, #1
 8026204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8026208:	68f8      	ldr	r0, [r7, #12]
 802620a:	f000 f975 	bl	80264f8 <I2C_WaitOnFlagUntilTimeout>
 802620e:	4603      	mov	r3, r0
 8026210:	2b00      	cmp	r3, #0
 8026212:	d001      	beq.n	8026218 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8026214:	2301      	movs	r3, #1
 8026216:	e0d5      	b.n	80263c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8026218:	68fb      	ldr	r3, [r7, #12]
 802621a:	2222      	movs	r2, #34	; 0x22
 802621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8026220:	68fb      	ldr	r3, [r7, #12]
 8026222:	2240      	movs	r2, #64	; 0x40
 8026224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8026228:	68fb      	ldr	r3, [r7, #12]
 802622a:	2200      	movs	r2, #0
 802622c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 802622e:	68fb      	ldr	r3, [r7, #12]
 8026230:	6a3a      	ldr	r2, [r7, #32]
 8026232:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8026234:	68fb      	ldr	r3, [r7, #12]
 8026236:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8026238:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 802623a:	68fb      	ldr	r3, [r7, #12]
 802623c:	2200      	movs	r2, #0
 802623e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8026240:	88f8      	ldrh	r0, [r7, #6]
 8026242:	893a      	ldrh	r2, [r7, #8]
 8026244:	8979      	ldrh	r1, [r7, #10]
 8026246:	697b      	ldr	r3, [r7, #20]
 8026248:	9301      	str	r3, [sp, #4]
 802624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802624c:	9300      	str	r3, [sp, #0]
 802624e:	4603      	mov	r3, r0
 8026250:	68f8      	ldr	r0, [r7, #12]
 8026252:	f000 f8d9 	bl	8026408 <I2C_RequestMemoryRead>
 8026256:	4603      	mov	r3, r0
 8026258:	2b00      	cmp	r3, #0
 802625a:	d005      	beq.n	8026268 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802625c:	68fb      	ldr	r3, [r7, #12]
 802625e:	2200      	movs	r2, #0
 8026260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8026264:	2301      	movs	r3, #1
 8026266:	e0ad      	b.n	80263c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8026268:	68fb      	ldr	r3, [r7, #12]
 802626a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802626c:	b29b      	uxth	r3, r3
 802626e:	2bff      	cmp	r3, #255	; 0xff
 8026270:	d90e      	bls.n	8026290 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8026272:	68fb      	ldr	r3, [r7, #12]
 8026274:	22ff      	movs	r2, #255	; 0xff
 8026276:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8026278:	68fb      	ldr	r3, [r7, #12]
 802627a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802627c:	b2da      	uxtb	r2, r3
 802627e:	8979      	ldrh	r1, [r7, #10]
 8026280:	4b52      	ldr	r3, [pc, #328]	; (80263cc <HAL_I2C_Mem_Read+0x22c>)
 8026282:	9300      	str	r3, [sp, #0]
 8026284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8026288:	68f8      	ldr	r0, [r7, #12]
 802628a:	f000 fa57 	bl	802673c <I2C_TransferConfig>
 802628e:	e00f      	b.n	80262b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8026290:	68fb      	ldr	r3, [r7, #12]
 8026292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8026294:	b29a      	uxth	r2, r3
 8026296:	68fb      	ldr	r3, [r7, #12]
 8026298:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 802629a:	68fb      	ldr	r3, [r7, #12]
 802629c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802629e:	b2da      	uxtb	r2, r3
 80262a0:	8979      	ldrh	r1, [r7, #10]
 80262a2:	4b4a      	ldr	r3, [pc, #296]	; (80263cc <HAL_I2C_Mem_Read+0x22c>)
 80262a4:	9300      	str	r3, [sp, #0]
 80262a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80262aa:	68f8      	ldr	r0, [r7, #12]
 80262ac:	f000 fa46 	bl	802673c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80262b0:	697b      	ldr	r3, [r7, #20]
 80262b2:	9300      	str	r3, [sp, #0]
 80262b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80262b6:	2200      	movs	r2, #0
 80262b8:	2104      	movs	r1, #4
 80262ba:	68f8      	ldr	r0, [r7, #12]
 80262bc:	f000 f91c 	bl	80264f8 <I2C_WaitOnFlagUntilTimeout>
 80262c0:	4603      	mov	r3, r0
 80262c2:	2b00      	cmp	r3, #0
 80262c4:	d001      	beq.n	80262ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80262c6:	2301      	movs	r3, #1
 80262c8:	e07c      	b.n	80263c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80262ca:	68fb      	ldr	r3, [r7, #12]
 80262cc:	681b      	ldr	r3, [r3, #0]
 80262ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80262d0:	68fb      	ldr	r3, [r7, #12]
 80262d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80262d4:	b2d2      	uxtb	r2, r2
 80262d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80262d8:	68fb      	ldr	r3, [r7, #12]
 80262da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80262dc:	1c5a      	adds	r2, r3, #1
 80262de:	68fb      	ldr	r3, [r7, #12]
 80262e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80262e2:	68fb      	ldr	r3, [r7, #12]
 80262e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80262e6:	3b01      	subs	r3, #1
 80262e8:	b29a      	uxth	r2, r3
 80262ea:	68fb      	ldr	r3, [r7, #12]
 80262ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80262ee:	68fb      	ldr	r3, [r7, #12]
 80262f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80262f2:	b29b      	uxth	r3, r3
 80262f4:	3b01      	subs	r3, #1
 80262f6:	b29a      	uxth	r2, r3
 80262f8:	68fb      	ldr	r3, [r7, #12]
 80262fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80262fc:	68fb      	ldr	r3, [r7, #12]
 80262fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8026300:	b29b      	uxth	r3, r3
 8026302:	2b00      	cmp	r3, #0
 8026304:	d034      	beq.n	8026370 <HAL_I2C_Mem_Read+0x1d0>
 8026306:	68fb      	ldr	r3, [r7, #12]
 8026308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802630a:	2b00      	cmp	r3, #0
 802630c:	d130      	bne.n	8026370 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 802630e:	697b      	ldr	r3, [r7, #20]
 8026310:	9300      	str	r3, [sp, #0]
 8026312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026314:	2200      	movs	r2, #0
 8026316:	2180      	movs	r1, #128	; 0x80
 8026318:	68f8      	ldr	r0, [r7, #12]
 802631a:	f000 f8ed 	bl	80264f8 <I2C_WaitOnFlagUntilTimeout>
 802631e:	4603      	mov	r3, r0
 8026320:	2b00      	cmp	r3, #0
 8026322:	d001      	beq.n	8026328 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8026324:	2301      	movs	r3, #1
 8026326:	e04d      	b.n	80263c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8026328:	68fb      	ldr	r3, [r7, #12]
 802632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802632c:	b29b      	uxth	r3, r3
 802632e:	2bff      	cmp	r3, #255	; 0xff
 8026330:	d90e      	bls.n	8026350 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8026332:	68fb      	ldr	r3, [r7, #12]
 8026334:	22ff      	movs	r2, #255	; 0xff
 8026336:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8026338:	68fb      	ldr	r3, [r7, #12]
 802633a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802633c:	b2da      	uxtb	r2, r3
 802633e:	8979      	ldrh	r1, [r7, #10]
 8026340:	2300      	movs	r3, #0
 8026342:	9300      	str	r3, [sp, #0]
 8026344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8026348:	68f8      	ldr	r0, [r7, #12]
 802634a:	f000 f9f7 	bl	802673c <I2C_TransferConfig>
 802634e:	e00f      	b.n	8026370 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8026350:	68fb      	ldr	r3, [r7, #12]
 8026352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8026354:	b29a      	uxth	r2, r3
 8026356:	68fb      	ldr	r3, [r7, #12]
 8026358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 802635a:	68fb      	ldr	r3, [r7, #12]
 802635c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802635e:	b2da      	uxtb	r2, r3
 8026360:	8979      	ldrh	r1, [r7, #10]
 8026362:	2300      	movs	r3, #0
 8026364:	9300      	str	r3, [sp, #0]
 8026366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 802636a:	68f8      	ldr	r0, [r7, #12]
 802636c:	f000 f9e6 	bl	802673c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8026370:	68fb      	ldr	r3, [r7, #12]
 8026372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8026374:	b29b      	uxth	r3, r3
 8026376:	2b00      	cmp	r3, #0
 8026378:	d19a      	bne.n	80262b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802637a:	697a      	ldr	r2, [r7, #20]
 802637c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802637e:	68f8      	ldr	r0, [r7, #12]
 8026380:	f000 f93a 	bl	80265f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8026384:	4603      	mov	r3, r0
 8026386:	2b00      	cmp	r3, #0
 8026388:	d001      	beq.n	802638e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 802638a:	2301      	movs	r3, #1
 802638c:	e01a      	b.n	80263c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802638e:	68fb      	ldr	r3, [r7, #12]
 8026390:	681b      	ldr	r3, [r3, #0]
 8026392:	2220      	movs	r2, #32
 8026394:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8026396:	68fb      	ldr	r3, [r7, #12]
 8026398:	681b      	ldr	r3, [r3, #0]
 802639a:	6859      	ldr	r1, [r3, #4]
 802639c:	68fb      	ldr	r3, [r7, #12]
 802639e:	681a      	ldr	r2, [r3, #0]
 80263a0:	4b0b      	ldr	r3, [pc, #44]	; (80263d0 <HAL_I2C_Mem_Read+0x230>)
 80263a2:	400b      	ands	r3, r1
 80263a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80263a6:	68fb      	ldr	r3, [r7, #12]
 80263a8:	2220      	movs	r2, #32
 80263aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80263ae:	68fb      	ldr	r3, [r7, #12]
 80263b0:	2200      	movs	r2, #0
 80263b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80263b6:	68fb      	ldr	r3, [r7, #12]
 80263b8:	2200      	movs	r2, #0
 80263ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80263be:	2300      	movs	r3, #0
 80263c0:	e000      	b.n	80263c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80263c2:	2302      	movs	r3, #2
  }
}
 80263c4:	4618      	mov	r0, r3
 80263c6:	3718      	adds	r7, #24
 80263c8:	46bd      	mov	sp, r7
 80263ca:	bd80      	pop	{r7, pc}
 80263cc:	80002400 	.word	0x80002400
 80263d0:	fe00e800 	.word	0xfe00e800

080263d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80263d4:	b580      	push	{r7, lr}
 80263d6:	b084      	sub	sp, #16
 80263d8:	af00      	add	r7, sp, #0
 80263da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80263dc:	687b      	ldr	r3, [r7, #4]
 80263de:	681b      	ldr	r3, [r3, #0]
 80263e0:	699b      	ldr	r3, [r3, #24]
 80263e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80263e4:	687b      	ldr	r3, [r7, #4]
 80263e6:	681b      	ldr	r3, [r3, #0]
 80263e8:	681b      	ldr	r3, [r3, #0]
 80263ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80263ec:	687b      	ldr	r3, [r7, #4]
 80263ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80263f0:	2b00      	cmp	r3, #0
 80263f2:	d005      	beq.n	8026400 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80263f4:	687b      	ldr	r3, [r7, #4]
 80263f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80263f8:	68ba      	ldr	r2, [r7, #8]
 80263fa:	68f9      	ldr	r1, [r7, #12]
 80263fc:	6878      	ldr	r0, [r7, #4]
 80263fe:	4798      	blx	r3
  }
}
 8026400:	bf00      	nop
 8026402:	3710      	adds	r7, #16
 8026404:	46bd      	mov	sp, r7
 8026406:	bd80      	pop	{r7, pc}

08026408 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8026408:	b580      	push	{r7, lr}
 802640a:	b086      	sub	sp, #24
 802640c:	af02      	add	r7, sp, #8
 802640e:	60f8      	str	r0, [r7, #12]
 8026410:	4608      	mov	r0, r1
 8026412:	4611      	mov	r1, r2
 8026414:	461a      	mov	r2, r3
 8026416:	4603      	mov	r3, r0
 8026418:	817b      	strh	r3, [r7, #10]
 802641a:	460b      	mov	r3, r1
 802641c:	813b      	strh	r3, [r7, #8]
 802641e:	4613      	mov	r3, r2
 8026420:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8026422:	88fb      	ldrh	r3, [r7, #6]
 8026424:	b2da      	uxtb	r2, r3
 8026426:	8979      	ldrh	r1, [r7, #10]
 8026428:	4b20      	ldr	r3, [pc, #128]	; (80264ac <I2C_RequestMemoryRead+0xa4>)
 802642a:	9300      	str	r3, [sp, #0]
 802642c:	2300      	movs	r3, #0
 802642e:	68f8      	ldr	r0, [r7, #12]
 8026430:	f000 f984 	bl	802673c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8026434:	69fa      	ldr	r2, [r7, #28]
 8026436:	69b9      	ldr	r1, [r7, #24]
 8026438:	68f8      	ldr	r0, [r7, #12]
 802643a:	f000 f89d 	bl	8026578 <I2C_WaitOnTXISFlagUntilTimeout>
 802643e:	4603      	mov	r3, r0
 8026440:	2b00      	cmp	r3, #0
 8026442:	d001      	beq.n	8026448 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8026444:	2301      	movs	r3, #1
 8026446:	e02c      	b.n	80264a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8026448:	88fb      	ldrh	r3, [r7, #6]
 802644a:	2b01      	cmp	r3, #1
 802644c:	d105      	bne.n	802645a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 802644e:	893b      	ldrh	r3, [r7, #8]
 8026450:	b2da      	uxtb	r2, r3
 8026452:	68fb      	ldr	r3, [r7, #12]
 8026454:	681b      	ldr	r3, [r3, #0]
 8026456:	629a      	str	r2, [r3, #40]	; 0x28
 8026458:	e015      	b.n	8026486 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 802645a:	893b      	ldrh	r3, [r7, #8]
 802645c:	0a1b      	lsrs	r3, r3, #8
 802645e:	b29b      	uxth	r3, r3
 8026460:	b2da      	uxtb	r2, r3
 8026462:	68fb      	ldr	r3, [r7, #12]
 8026464:	681b      	ldr	r3, [r3, #0]
 8026466:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8026468:	69fa      	ldr	r2, [r7, #28]
 802646a:	69b9      	ldr	r1, [r7, #24]
 802646c:	68f8      	ldr	r0, [r7, #12]
 802646e:	f000 f883 	bl	8026578 <I2C_WaitOnTXISFlagUntilTimeout>
 8026472:	4603      	mov	r3, r0
 8026474:	2b00      	cmp	r3, #0
 8026476:	d001      	beq.n	802647c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8026478:	2301      	movs	r3, #1
 802647a:	e012      	b.n	80264a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 802647c:	893b      	ldrh	r3, [r7, #8]
 802647e:	b2da      	uxtb	r2, r3
 8026480:	68fb      	ldr	r3, [r7, #12]
 8026482:	681b      	ldr	r3, [r3, #0]
 8026484:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8026486:	69fb      	ldr	r3, [r7, #28]
 8026488:	9300      	str	r3, [sp, #0]
 802648a:	69bb      	ldr	r3, [r7, #24]
 802648c:	2200      	movs	r2, #0
 802648e:	2140      	movs	r1, #64	; 0x40
 8026490:	68f8      	ldr	r0, [r7, #12]
 8026492:	f000 f831 	bl	80264f8 <I2C_WaitOnFlagUntilTimeout>
 8026496:	4603      	mov	r3, r0
 8026498:	2b00      	cmp	r3, #0
 802649a:	d001      	beq.n	80264a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 802649c:	2301      	movs	r3, #1
 802649e:	e000      	b.n	80264a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80264a0:	2300      	movs	r3, #0
}
 80264a2:	4618      	mov	r0, r3
 80264a4:	3710      	adds	r7, #16
 80264a6:	46bd      	mov	sp, r7
 80264a8:	bd80      	pop	{r7, pc}
 80264aa:	bf00      	nop
 80264ac:	80002000 	.word	0x80002000

080264b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80264b0:	b480      	push	{r7}
 80264b2:	b083      	sub	sp, #12
 80264b4:	af00      	add	r7, sp, #0
 80264b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80264b8:	687b      	ldr	r3, [r7, #4]
 80264ba:	681b      	ldr	r3, [r3, #0]
 80264bc:	699b      	ldr	r3, [r3, #24]
 80264be:	f003 0302 	and.w	r3, r3, #2
 80264c2:	2b02      	cmp	r3, #2
 80264c4:	d103      	bne.n	80264ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80264c6:	687b      	ldr	r3, [r7, #4]
 80264c8:	681b      	ldr	r3, [r3, #0]
 80264ca:	2200      	movs	r2, #0
 80264cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80264ce:	687b      	ldr	r3, [r7, #4]
 80264d0:	681b      	ldr	r3, [r3, #0]
 80264d2:	699b      	ldr	r3, [r3, #24]
 80264d4:	f003 0301 	and.w	r3, r3, #1
 80264d8:	2b01      	cmp	r3, #1
 80264da:	d007      	beq.n	80264ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80264dc:	687b      	ldr	r3, [r7, #4]
 80264de:	681b      	ldr	r3, [r3, #0]
 80264e0:	699a      	ldr	r2, [r3, #24]
 80264e2:	687b      	ldr	r3, [r7, #4]
 80264e4:	681b      	ldr	r3, [r3, #0]
 80264e6:	f042 0201 	orr.w	r2, r2, #1
 80264ea:	619a      	str	r2, [r3, #24]
  }
}
 80264ec:	bf00      	nop
 80264ee:	370c      	adds	r7, #12
 80264f0:	46bd      	mov	sp, r7
 80264f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264f6:	4770      	bx	lr

080264f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80264f8:	b580      	push	{r7, lr}
 80264fa:	b084      	sub	sp, #16
 80264fc:	af00      	add	r7, sp, #0
 80264fe:	60f8      	str	r0, [r7, #12]
 8026500:	60b9      	str	r1, [r7, #8]
 8026502:	603b      	str	r3, [r7, #0]
 8026504:	4613      	mov	r3, r2
 8026506:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8026508:	e022      	b.n	8026550 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802650a:	683b      	ldr	r3, [r7, #0]
 802650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026510:	d01e      	beq.n	8026550 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8026512:	f7fe ffe1 	bl	80254d8 <HAL_GetTick>
 8026516:	4602      	mov	r2, r0
 8026518:	69bb      	ldr	r3, [r7, #24]
 802651a:	1ad3      	subs	r3, r2, r3
 802651c:	683a      	ldr	r2, [r7, #0]
 802651e:	429a      	cmp	r2, r3
 8026520:	d302      	bcc.n	8026528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8026522:	683b      	ldr	r3, [r7, #0]
 8026524:	2b00      	cmp	r3, #0
 8026526:	d113      	bne.n	8026550 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8026528:	68fb      	ldr	r3, [r7, #12]
 802652a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802652c:	f043 0220 	orr.w	r2, r3, #32
 8026530:	68fb      	ldr	r3, [r7, #12]
 8026532:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8026534:	68fb      	ldr	r3, [r7, #12]
 8026536:	2220      	movs	r2, #32
 8026538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802653c:	68fb      	ldr	r3, [r7, #12]
 802653e:	2200      	movs	r2, #0
 8026540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8026544:	68fb      	ldr	r3, [r7, #12]
 8026546:	2200      	movs	r2, #0
 8026548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 802654c:	2301      	movs	r3, #1
 802654e:	e00f      	b.n	8026570 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8026550:	68fb      	ldr	r3, [r7, #12]
 8026552:	681b      	ldr	r3, [r3, #0]
 8026554:	699a      	ldr	r2, [r3, #24]
 8026556:	68bb      	ldr	r3, [r7, #8]
 8026558:	4013      	ands	r3, r2
 802655a:	68ba      	ldr	r2, [r7, #8]
 802655c:	429a      	cmp	r2, r3
 802655e:	bf0c      	ite	eq
 8026560:	2301      	moveq	r3, #1
 8026562:	2300      	movne	r3, #0
 8026564:	b2db      	uxtb	r3, r3
 8026566:	461a      	mov	r2, r3
 8026568:	79fb      	ldrb	r3, [r7, #7]
 802656a:	429a      	cmp	r2, r3
 802656c:	d0cd      	beq.n	802650a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802656e:	2300      	movs	r3, #0
}
 8026570:	4618      	mov	r0, r3
 8026572:	3710      	adds	r7, #16
 8026574:	46bd      	mov	sp, r7
 8026576:	bd80      	pop	{r7, pc}

08026578 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8026578:	b580      	push	{r7, lr}
 802657a:	b084      	sub	sp, #16
 802657c:	af00      	add	r7, sp, #0
 802657e:	60f8      	str	r0, [r7, #12]
 8026580:	60b9      	str	r1, [r7, #8]
 8026582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8026584:	e02c      	b.n	80265e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8026586:	687a      	ldr	r2, [r7, #4]
 8026588:	68b9      	ldr	r1, [r7, #8]
 802658a:	68f8      	ldr	r0, [r7, #12]
 802658c:	f000 f870 	bl	8026670 <I2C_IsAcknowledgeFailed>
 8026590:	4603      	mov	r3, r0
 8026592:	2b00      	cmp	r3, #0
 8026594:	d001      	beq.n	802659a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8026596:	2301      	movs	r3, #1
 8026598:	e02a      	b.n	80265f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802659a:	68bb      	ldr	r3, [r7, #8]
 802659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80265a0:	d01e      	beq.n	80265e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80265a2:	f7fe ff99 	bl	80254d8 <HAL_GetTick>
 80265a6:	4602      	mov	r2, r0
 80265a8:	687b      	ldr	r3, [r7, #4]
 80265aa:	1ad3      	subs	r3, r2, r3
 80265ac:	68ba      	ldr	r2, [r7, #8]
 80265ae:	429a      	cmp	r2, r3
 80265b0:	d302      	bcc.n	80265b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80265b2:	68bb      	ldr	r3, [r7, #8]
 80265b4:	2b00      	cmp	r3, #0
 80265b6:	d113      	bne.n	80265e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80265b8:	68fb      	ldr	r3, [r7, #12]
 80265ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80265bc:	f043 0220 	orr.w	r2, r3, #32
 80265c0:	68fb      	ldr	r3, [r7, #12]
 80265c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80265c4:	68fb      	ldr	r3, [r7, #12]
 80265c6:	2220      	movs	r2, #32
 80265c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80265cc:	68fb      	ldr	r3, [r7, #12]
 80265ce:	2200      	movs	r2, #0
 80265d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80265d4:	68fb      	ldr	r3, [r7, #12]
 80265d6:	2200      	movs	r2, #0
 80265d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80265dc:	2301      	movs	r3, #1
 80265de:	e007      	b.n	80265f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80265e0:	68fb      	ldr	r3, [r7, #12]
 80265e2:	681b      	ldr	r3, [r3, #0]
 80265e4:	699b      	ldr	r3, [r3, #24]
 80265e6:	f003 0302 	and.w	r3, r3, #2
 80265ea:	2b02      	cmp	r3, #2
 80265ec:	d1cb      	bne.n	8026586 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80265ee:	2300      	movs	r3, #0
}
 80265f0:	4618      	mov	r0, r3
 80265f2:	3710      	adds	r7, #16
 80265f4:	46bd      	mov	sp, r7
 80265f6:	bd80      	pop	{r7, pc}

080265f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80265f8:	b580      	push	{r7, lr}
 80265fa:	b084      	sub	sp, #16
 80265fc:	af00      	add	r7, sp, #0
 80265fe:	60f8      	str	r0, [r7, #12]
 8026600:	60b9      	str	r1, [r7, #8]
 8026602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8026604:	e028      	b.n	8026658 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8026606:	687a      	ldr	r2, [r7, #4]
 8026608:	68b9      	ldr	r1, [r7, #8]
 802660a:	68f8      	ldr	r0, [r7, #12]
 802660c:	f000 f830 	bl	8026670 <I2C_IsAcknowledgeFailed>
 8026610:	4603      	mov	r3, r0
 8026612:	2b00      	cmp	r3, #0
 8026614:	d001      	beq.n	802661a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8026616:	2301      	movs	r3, #1
 8026618:	e026      	b.n	8026668 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802661a:	f7fe ff5d 	bl	80254d8 <HAL_GetTick>
 802661e:	4602      	mov	r2, r0
 8026620:	687b      	ldr	r3, [r7, #4]
 8026622:	1ad3      	subs	r3, r2, r3
 8026624:	68ba      	ldr	r2, [r7, #8]
 8026626:	429a      	cmp	r2, r3
 8026628:	d302      	bcc.n	8026630 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 802662a:	68bb      	ldr	r3, [r7, #8]
 802662c:	2b00      	cmp	r3, #0
 802662e:	d113      	bne.n	8026658 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8026630:	68fb      	ldr	r3, [r7, #12]
 8026632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026634:	f043 0220 	orr.w	r2, r3, #32
 8026638:	68fb      	ldr	r3, [r7, #12]
 802663a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 802663c:	68fb      	ldr	r3, [r7, #12]
 802663e:	2220      	movs	r2, #32
 8026640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8026644:	68fb      	ldr	r3, [r7, #12]
 8026646:	2200      	movs	r2, #0
 8026648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802664c:	68fb      	ldr	r3, [r7, #12]
 802664e:	2200      	movs	r2, #0
 8026650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8026654:	2301      	movs	r3, #1
 8026656:	e007      	b.n	8026668 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8026658:	68fb      	ldr	r3, [r7, #12]
 802665a:	681b      	ldr	r3, [r3, #0]
 802665c:	699b      	ldr	r3, [r3, #24]
 802665e:	f003 0320 	and.w	r3, r3, #32
 8026662:	2b20      	cmp	r3, #32
 8026664:	d1cf      	bne.n	8026606 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8026666:	2300      	movs	r3, #0
}
 8026668:	4618      	mov	r0, r3
 802666a:	3710      	adds	r7, #16
 802666c:	46bd      	mov	sp, r7
 802666e:	bd80      	pop	{r7, pc}

08026670 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8026670:	b580      	push	{r7, lr}
 8026672:	b084      	sub	sp, #16
 8026674:	af00      	add	r7, sp, #0
 8026676:	60f8      	str	r0, [r7, #12]
 8026678:	60b9      	str	r1, [r7, #8]
 802667a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 802667c:	68fb      	ldr	r3, [r7, #12]
 802667e:	681b      	ldr	r3, [r3, #0]
 8026680:	699b      	ldr	r3, [r3, #24]
 8026682:	f003 0310 	and.w	r3, r3, #16
 8026686:	2b10      	cmp	r3, #16
 8026688:	d151      	bne.n	802672e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 802668a:	e022      	b.n	80266d2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 802668c:	68bb      	ldr	r3, [r7, #8]
 802668e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026692:	d01e      	beq.n	80266d2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8026694:	f7fe ff20 	bl	80254d8 <HAL_GetTick>
 8026698:	4602      	mov	r2, r0
 802669a:	687b      	ldr	r3, [r7, #4]
 802669c:	1ad3      	subs	r3, r2, r3
 802669e:	68ba      	ldr	r2, [r7, #8]
 80266a0:	429a      	cmp	r2, r3
 80266a2:	d302      	bcc.n	80266aa <I2C_IsAcknowledgeFailed+0x3a>
 80266a4:	68bb      	ldr	r3, [r7, #8]
 80266a6:	2b00      	cmp	r3, #0
 80266a8:	d113      	bne.n	80266d2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80266aa:	68fb      	ldr	r3, [r7, #12]
 80266ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80266ae:	f043 0220 	orr.w	r2, r3, #32
 80266b2:	68fb      	ldr	r3, [r7, #12]
 80266b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80266b6:	68fb      	ldr	r3, [r7, #12]
 80266b8:	2220      	movs	r2, #32
 80266ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80266be:	68fb      	ldr	r3, [r7, #12]
 80266c0:	2200      	movs	r2, #0
 80266c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80266c6:	68fb      	ldr	r3, [r7, #12]
 80266c8:	2200      	movs	r2, #0
 80266ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80266ce:	2301      	movs	r3, #1
 80266d0:	e02e      	b.n	8026730 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80266d2:	68fb      	ldr	r3, [r7, #12]
 80266d4:	681b      	ldr	r3, [r3, #0]
 80266d6:	699b      	ldr	r3, [r3, #24]
 80266d8:	f003 0320 	and.w	r3, r3, #32
 80266dc:	2b20      	cmp	r3, #32
 80266de:	d1d5      	bne.n	802668c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80266e0:	68fb      	ldr	r3, [r7, #12]
 80266e2:	681b      	ldr	r3, [r3, #0]
 80266e4:	2210      	movs	r2, #16
 80266e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80266e8:	68fb      	ldr	r3, [r7, #12]
 80266ea:	681b      	ldr	r3, [r3, #0]
 80266ec:	2220      	movs	r2, #32
 80266ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80266f0:	68f8      	ldr	r0, [r7, #12]
 80266f2:	f7ff fedd 	bl	80264b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80266f6:	68fb      	ldr	r3, [r7, #12]
 80266f8:	681b      	ldr	r3, [r3, #0]
 80266fa:	6859      	ldr	r1, [r3, #4]
 80266fc:	68fb      	ldr	r3, [r7, #12]
 80266fe:	681a      	ldr	r2, [r3, #0]
 8026700:	4b0d      	ldr	r3, [pc, #52]	; (8026738 <I2C_IsAcknowledgeFailed+0xc8>)
 8026702:	400b      	ands	r3, r1
 8026704:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8026706:	68fb      	ldr	r3, [r7, #12]
 8026708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802670a:	f043 0204 	orr.w	r2, r3, #4
 802670e:	68fb      	ldr	r3, [r7, #12]
 8026710:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8026712:	68fb      	ldr	r3, [r7, #12]
 8026714:	2220      	movs	r2, #32
 8026716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 802671a:	68fb      	ldr	r3, [r7, #12]
 802671c:	2200      	movs	r2, #0
 802671e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026722:	68fb      	ldr	r3, [r7, #12]
 8026724:	2200      	movs	r2, #0
 8026726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 802672a:	2301      	movs	r3, #1
 802672c:	e000      	b.n	8026730 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 802672e:	2300      	movs	r3, #0
}
 8026730:	4618      	mov	r0, r3
 8026732:	3710      	adds	r7, #16
 8026734:	46bd      	mov	sp, r7
 8026736:	bd80      	pop	{r7, pc}
 8026738:	fe00e800 	.word	0xfe00e800

0802673c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 802673c:	b480      	push	{r7}
 802673e:	b085      	sub	sp, #20
 8026740:	af00      	add	r7, sp, #0
 8026742:	60f8      	str	r0, [r7, #12]
 8026744:	607b      	str	r3, [r7, #4]
 8026746:	460b      	mov	r3, r1
 8026748:	817b      	strh	r3, [r7, #10]
 802674a:	4613      	mov	r3, r2
 802674c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 802674e:	68fb      	ldr	r3, [r7, #12]
 8026750:	681b      	ldr	r3, [r3, #0]
 8026752:	685a      	ldr	r2, [r3, #4]
 8026754:	69bb      	ldr	r3, [r7, #24]
 8026756:	0d5b      	lsrs	r3, r3, #21
 8026758:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 802675c:	4b0d      	ldr	r3, [pc, #52]	; (8026794 <I2C_TransferConfig+0x58>)
 802675e:	430b      	orrs	r3, r1
 8026760:	43db      	mvns	r3, r3
 8026762:	ea02 0103 	and.w	r1, r2, r3
 8026766:	897b      	ldrh	r3, [r7, #10]
 8026768:	f3c3 0209 	ubfx	r2, r3, #0, #10
 802676c:	7a7b      	ldrb	r3, [r7, #9]
 802676e:	041b      	lsls	r3, r3, #16
 8026770:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8026774:	431a      	orrs	r2, r3
 8026776:	687b      	ldr	r3, [r7, #4]
 8026778:	431a      	orrs	r2, r3
 802677a:	69bb      	ldr	r3, [r7, #24]
 802677c:	431a      	orrs	r2, r3
 802677e:	68fb      	ldr	r3, [r7, #12]
 8026780:	681b      	ldr	r3, [r3, #0]
 8026782:	430a      	orrs	r2, r1
 8026784:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8026786:	bf00      	nop
 8026788:	3714      	adds	r7, #20
 802678a:	46bd      	mov	sp, r7
 802678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026790:	4770      	bx	lr
 8026792:	bf00      	nop
 8026794:	03ff63ff 	.word	0x03ff63ff

08026798 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8026798:	b480      	push	{r7}
 802679a:	b083      	sub	sp, #12
 802679c:	af00      	add	r7, sp, #0
 802679e:	6078      	str	r0, [r7, #4]
 80267a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80267a2:	687b      	ldr	r3, [r7, #4]
 80267a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80267a8:	b2db      	uxtb	r3, r3
 80267aa:	2b20      	cmp	r3, #32
 80267ac:	d138      	bne.n	8026820 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80267ae:	687b      	ldr	r3, [r7, #4]
 80267b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80267b4:	2b01      	cmp	r3, #1
 80267b6:	d101      	bne.n	80267bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80267b8:	2302      	movs	r3, #2
 80267ba:	e032      	b.n	8026822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80267bc:	687b      	ldr	r3, [r7, #4]
 80267be:	2201      	movs	r2, #1
 80267c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	2224      	movs	r2, #36	; 0x24
 80267c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80267cc:	687b      	ldr	r3, [r7, #4]
 80267ce:	681b      	ldr	r3, [r3, #0]
 80267d0:	681a      	ldr	r2, [r3, #0]
 80267d2:	687b      	ldr	r3, [r7, #4]
 80267d4:	681b      	ldr	r3, [r3, #0]
 80267d6:	f022 0201 	bic.w	r2, r2, #1
 80267da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80267dc:	687b      	ldr	r3, [r7, #4]
 80267de:	681b      	ldr	r3, [r3, #0]
 80267e0:	681a      	ldr	r2, [r3, #0]
 80267e2:	687b      	ldr	r3, [r7, #4]
 80267e4:	681b      	ldr	r3, [r3, #0]
 80267e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80267ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80267ec:	687b      	ldr	r3, [r7, #4]
 80267ee:	681b      	ldr	r3, [r3, #0]
 80267f0:	6819      	ldr	r1, [r3, #0]
 80267f2:	687b      	ldr	r3, [r7, #4]
 80267f4:	681b      	ldr	r3, [r3, #0]
 80267f6:	683a      	ldr	r2, [r7, #0]
 80267f8:	430a      	orrs	r2, r1
 80267fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80267fc:	687b      	ldr	r3, [r7, #4]
 80267fe:	681b      	ldr	r3, [r3, #0]
 8026800:	681a      	ldr	r2, [r3, #0]
 8026802:	687b      	ldr	r3, [r7, #4]
 8026804:	681b      	ldr	r3, [r3, #0]
 8026806:	f042 0201 	orr.w	r2, r2, #1
 802680a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802680c:	687b      	ldr	r3, [r7, #4]
 802680e:	2220      	movs	r2, #32
 8026810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026814:	687b      	ldr	r3, [r7, #4]
 8026816:	2200      	movs	r2, #0
 8026818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802681c:	2300      	movs	r3, #0
 802681e:	e000      	b.n	8026822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8026820:	2302      	movs	r3, #2
  }
}
 8026822:	4618      	mov	r0, r3
 8026824:	370c      	adds	r7, #12
 8026826:	46bd      	mov	sp, r7
 8026828:	f85d 7b04 	ldr.w	r7, [sp], #4
 802682c:	4770      	bx	lr

0802682e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 802682e:	b480      	push	{r7}
 8026830:	b085      	sub	sp, #20
 8026832:	af00      	add	r7, sp, #0
 8026834:	6078      	str	r0, [r7, #4]
 8026836:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026838:	687b      	ldr	r3, [r7, #4]
 802683a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802683e:	b2db      	uxtb	r3, r3
 8026840:	2b20      	cmp	r3, #32
 8026842:	d139      	bne.n	80268b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8026844:	687b      	ldr	r3, [r7, #4]
 8026846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802684a:	2b01      	cmp	r3, #1
 802684c:	d101      	bne.n	8026852 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 802684e:	2302      	movs	r3, #2
 8026850:	e033      	b.n	80268ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8026852:	687b      	ldr	r3, [r7, #4]
 8026854:	2201      	movs	r2, #1
 8026856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802685a:	687b      	ldr	r3, [r7, #4]
 802685c:	2224      	movs	r2, #36	; 0x24
 802685e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026862:	687b      	ldr	r3, [r7, #4]
 8026864:	681b      	ldr	r3, [r3, #0]
 8026866:	681a      	ldr	r2, [r3, #0]
 8026868:	687b      	ldr	r3, [r7, #4]
 802686a:	681b      	ldr	r3, [r3, #0]
 802686c:	f022 0201 	bic.w	r2, r2, #1
 8026870:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8026872:	687b      	ldr	r3, [r7, #4]
 8026874:	681b      	ldr	r3, [r3, #0]
 8026876:	681b      	ldr	r3, [r3, #0]
 8026878:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 802687a:	68fb      	ldr	r3, [r7, #12]
 802687c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8026880:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8026882:	683b      	ldr	r3, [r7, #0]
 8026884:	021b      	lsls	r3, r3, #8
 8026886:	68fa      	ldr	r2, [r7, #12]
 8026888:	4313      	orrs	r3, r2
 802688a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 802688c:	687b      	ldr	r3, [r7, #4]
 802688e:	681b      	ldr	r3, [r3, #0]
 8026890:	68fa      	ldr	r2, [r7, #12]
 8026892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8026894:	687b      	ldr	r3, [r7, #4]
 8026896:	681b      	ldr	r3, [r3, #0]
 8026898:	681a      	ldr	r2, [r3, #0]
 802689a:	687b      	ldr	r3, [r7, #4]
 802689c:	681b      	ldr	r3, [r3, #0]
 802689e:	f042 0201 	orr.w	r2, r2, #1
 80268a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80268a4:	687b      	ldr	r3, [r7, #4]
 80268a6:	2220      	movs	r2, #32
 80268a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80268ac:	687b      	ldr	r3, [r7, #4]
 80268ae:	2200      	movs	r2, #0
 80268b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80268b4:	2300      	movs	r3, #0
 80268b6:	e000      	b.n	80268ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80268b8:	2302      	movs	r3, #2
  }
}
 80268ba:	4618      	mov	r0, r3
 80268bc:	3714      	adds	r7, #20
 80268be:	46bd      	mov	sp, r7
 80268c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268c4:	4770      	bx	lr
	...

080268c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80268c8:	b580      	push	{r7, lr}
 80268ca:	b084      	sub	sp, #16
 80268cc:	af00      	add	r7, sp, #0
 80268ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80268d0:	687b      	ldr	r3, [r7, #4]
 80268d2:	2b00      	cmp	r3, #0
 80268d4:	d101      	bne.n	80268da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80268d6:	2301      	movs	r3, #1
 80268d8:	e0bf      	b.n	8026a5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80268da:	687b      	ldr	r3, [r7, #4]
 80268dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80268e0:	b2db      	uxtb	r3, r3
 80268e2:	2b00      	cmp	r3, #0
 80268e4:	d106      	bne.n	80268f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80268e6:	687b      	ldr	r3, [r7, #4]
 80268e8:	2200      	movs	r2, #0
 80268ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80268ee:	6878      	ldr	r0, [r7, #4]
 80268f0:	f7da fb34 	bl	8000f5c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80268f4:	687b      	ldr	r3, [r7, #4]
 80268f6:	2202      	movs	r2, #2
 80268f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80268fc:	687b      	ldr	r3, [r7, #4]
 80268fe:	681b      	ldr	r3, [r3, #0]
 8026900:	699a      	ldr	r2, [r3, #24]
 8026902:	687b      	ldr	r3, [r7, #4]
 8026904:	681b      	ldr	r3, [r3, #0]
 8026906:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 802690a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 802690c:	687b      	ldr	r3, [r7, #4]
 802690e:	681b      	ldr	r3, [r3, #0]
 8026910:	6999      	ldr	r1, [r3, #24]
 8026912:	687b      	ldr	r3, [r7, #4]
 8026914:	685a      	ldr	r2, [r3, #4]
 8026916:	687b      	ldr	r3, [r7, #4]
 8026918:	689b      	ldr	r3, [r3, #8]
 802691a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 802691c:	687b      	ldr	r3, [r7, #4]
 802691e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026920:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026922:	687b      	ldr	r3, [r7, #4]
 8026924:	691b      	ldr	r3, [r3, #16]
 8026926:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026928:	687b      	ldr	r3, [r7, #4]
 802692a:	681b      	ldr	r3, [r3, #0]
 802692c:	430a      	orrs	r2, r1
 802692e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8026930:	687b      	ldr	r3, [r7, #4]
 8026932:	681b      	ldr	r3, [r3, #0]
 8026934:	6899      	ldr	r1, [r3, #8]
 8026936:	687b      	ldr	r3, [r7, #4]
 8026938:	681a      	ldr	r2, [r3, #0]
 802693a:	4b4a      	ldr	r3, [pc, #296]	; (8026a64 <HAL_LTDC_Init+0x19c>)
 802693c:	400b      	ands	r3, r1
 802693e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8026940:	687b      	ldr	r3, [r7, #4]
 8026942:	695b      	ldr	r3, [r3, #20]
 8026944:	041b      	lsls	r3, r3, #16
 8026946:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8026948:	687b      	ldr	r3, [r7, #4]
 802694a:	681b      	ldr	r3, [r3, #0]
 802694c:	6899      	ldr	r1, [r3, #8]
 802694e:	687b      	ldr	r3, [r7, #4]
 8026950:	699a      	ldr	r2, [r3, #24]
 8026952:	68fb      	ldr	r3, [r7, #12]
 8026954:	431a      	orrs	r2, r3
 8026956:	687b      	ldr	r3, [r7, #4]
 8026958:	681b      	ldr	r3, [r3, #0]
 802695a:	430a      	orrs	r2, r1
 802695c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 802695e:	687b      	ldr	r3, [r7, #4]
 8026960:	681b      	ldr	r3, [r3, #0]
 8026962:	68d9      	ldr	r1, [r3, #12]
 8026964:	687b      	ldr	r3, [r7, #4]
 8026966:	681a      	ldr	r2, [r3, #0]
 8026968:	4b3e      	ldr	r3, [pc, #248]	; (8026a64 <HAL_LTDC_Init+0x19c>)
 802696a:	400b      	ands	r3, r1
 802696c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 802696e:	687b      	ldr	r3, [r7, #4]
 8026970:	69db      	ldr	r3, [r3, #28]
 8026972:	041b      	lsls	r3, r3, #16
 8026974:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8026976:	687b      	ldr	r3, [r7, #4]
 8026978:	681b      	ldr	r3, [r3, #0]
 802697a:	68d9      	ldr	r1, [r3, #12]
 802697c:	687b      	ldr	r3, [r7, #4]
 802697e:	6a1a      	ldr	r2, [r3, #32]
 8026980:	68fb      	ldr	r3, [r7, #12]
 8026982:	431a      	orrs	r2, r3
 8026984:	687b      	ldr	r3, [r7, #4]
 8026986:	681b      	ldr	r3, [r3, #0]
 8026988:	430a      	orrs	r2, r1
 802698a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 802698c:	687b      	ldr	r3, [r7, #4]
 802698e:	681b      	ldr	r3, [r3, #0]
 8026990:	6919      	ldr	r1, [r3, #16]
 8026992:	687b      	ldr	r3, [r7, #4]
 8026994:	681a      	ldr	r2, [r3, #0]
 8026996:	4b33      	ldr	r3, [pc, #204]	; (8026a64 <HAL_LTDC_Init+0x19c>)
 8026998:	400b      	ands	r3, r1
 802699a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 802699c:	687b      	ldr	r3, [r7, #4]
 802699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80269a0:	041b      	lsls	r3, r3, #16
 80269a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80269a4:	687b      	ldr	r3, [r7, #4]
 80269a6:	681b      	ldr	r3, [r3, #0]
 80269a8:	6919      	ldr	r1, [r3, #16]
 80269aa:	687b      	ldr	r3, [r7, #4]
 80269ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80269ae:	68fb      	ldr	r3, [r7, #12]
 80269b0:	431a      	orrs	r2, r3
 80269b2:	687b      	ldr	r3, [r7, #4]
 80269b4:	681b      	ldr	r3, [r3, #0]
 80269b6:	430a      	orrs	r2, r1
 80269b8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80269ba:	687b      	ldr	r3, [r7, #4]
 80269bc:	681b      	ldr	r3, [r3, #0]
 80269be:	6959      	ldr	r1, [r3, #20]
 80269c0:	687b      	ldr	r3, [r7, #4]
 80269c2:	681a      	ldr	r2, [r3, #0]
 80269c4:	4b27      	ldr	r3, [pc, #156]	; (8026a64 <HAL_LTDC_Init+0x19c>)
 80269c6:	400b      	ands	r3, r1
 80269c8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80269ce:	041b      	lsls	r3, r3, #16
 80269d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80269d2:	687b      	ldr	r3, [r7, #4]
 80269d4:	681b      	ldr	r3, [r3, #0]
 80269d6:	6959      	ldr	r1, [r3, #20]
 80269d8:	687b      	ldr	r3, [r7, #4]
 80269da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80269dc:	68fb      	ldr	r3, [r7, #12]
 80269de:	431a      	orrs	r2, r3
 80269e0:	687b      	ldr	r3, [r7, #4]
 80269e2:	681b      	ldr	r3, [r3, #0]
 80269e4:	430a      	orrs	r2, r1
 80269e6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80269e8:	687b      	ldr	r3, [r7, #4]
 80269ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80269ee:	021b      	lsls	r3, r3, #8
 80269f0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80269f2:	687b      	ldr	r3, [r7, #4]
 80269f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80269f8:	041b      	lsls	r3, r3, #16
 80269fa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80269fc:	687b      	ldr	r3, [r7, #4]
 80269fe:	681b      	ldr	r3, [r3, #0]
 8026a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026a02:	687b      	ldr	r3, [r7, #4]
 8026a04:	681b      	ldr	r3, [r3, #0]
 8026a06:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8026a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8026a0c:	687b      	ldr	r3, [r7, #4]
 8026a0e:	681b      	ldr	r3, [r3, #0]
 8026a10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026a12:	68ba      	ldr	r2, [r7, #8]
 8026a14:	68fb      	ldr	r3, [r7, #12]
 8026a16:	4313      	orrs	r3, r2
 8026a18:	687a      	ldr	r2, [r7, #4]
 8026a1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8026a1e:	431a      	orrs	r2, r3
 8026a20:	687b      	ldr	r3, [r7, #4]
 8026a22:	681b      	ldr	r3, [r3, #0]
 8026a24:	430a      	orrs	r2, r1
 8026a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8026a28:	687b      	ldr	r3, [r7, #4]
 8026a2a:	681b      	ldr	r3, [r3, #0]
 8026a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	681b      	ldr	r3, [r3, #0]
 8026a32:	f042 0206 	orr.w	r2, r2, #6
 8026a36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8026a38:	687b      	ldr	r3, [r7, #4]
 8026a3a:	681b      	ldr	r3, [r3, #0]
 8026a3c:	699a      	ldr	r2, [r3, #24]
 8026a3e:	687b      	ldr	r3, [r7, #4]
 8026a40:	681b      	ldr	r3, [r3, #0]
 8026a42:	f042 0201 	orr.w	r2, r2, #1
 8026a46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8026a48:	687b      	ldr	r3, [r7, #4]
 8026a4a:	2200      	movs	r2, #0
 8026a4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026a50:	687b      	ldr	r3, [r7, #4]
 8026a52:	2201      	movs	r2, #1
 8026a54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8026a58:	2300      	movs	r3, #0
}
 8026a5a:	4618      	mov	r0, r3
 8026a5c:	3710      	adds	r7, #16
 8026a5e:	46bd      	mov	sp, r7
 8026a60:	bd80      	pop	{r7, pc}
 8026a62:	bf00      	nop
 8026a64:	f000f800 	.word	0xf000f800

08026a68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026a68:	b5b0      	push	{r4, r5, r7, lr}
 8026a6a:	b084      	sub	sp, #16
 8026a6c:	af00      	add	r7, sp, #0
 8026a6e:	60f8      	str	r0, [r7, #12]
 8026a70:	60b9      	str	r1, [r7, #8]
 8026a72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026a74:	68fb      	ldr	r3, [r7, #12]
 8026a76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026a7a:	2b01      	cmp	r3, #1
 8026a7c:	d101      	bne.n	8026a82 <HAL_LTDC_ConfigLayer+0x1a>
 8026a7e:	2302      	movs	r3, #2
 8026a80:	e02c      	b.n	8026adc <HAL_LTDC_ConfigLayer+0x74>
 8026a82:	68fb      	ldr	r3, [r7, #12]
 8026a84:	2201      	movs	r2, #1
 8026a86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026a8a:	68fb      	ldr	r3, [r7, #12]
 8026a8c:	2202      	movs	r2, #2
 8026a8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8026a92:	68fa      	ldr	r2, [r7, #12]
 8026a94:	687b      	ldr	r3, [r7, #4]
 8026a96:	2134      	movs	r1, #52	; 0x34
 8026a98:	fb01 f303 	mul.w	r3, r1, r3
 8026a9c:	4413      	add	r3, r2
 8026a9e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8026aa2:	68bb      	ldr	r3, [r7, #8]
 8026aa4:	4614      	mov	r4, r2
 8026aa6:	461d      	mov	r5, r3
 8026aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026ab4:	682b      	ldr	r3, [r5, #0]
 8026ab6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8026ab8:	687a      	ldr	r2, [r7, #4]
 8026aba:	68b9      	ldr	r1, [r7, #8]
 8026abc:	68f8      	ldr	r0, [r7, #12]
 8026abe:	f000 f83b 	bl	8026b38 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026ac2:	68fb      	ldr	r3, [r7, #12]
 8026ac4:	681b      	ldr	r3, [r3, #0]
 8026ac6:	2201      	movs	r2, #1
 8026ac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8026aca:	68fb      	ldr	r3, [r7, #12]
 8026acc:	2201      	movs	r2, #1
 8026ace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026ad2:	68fb      	ldr	r3, [r7, #12]
 8026ad4:	2200      	movs	r2, #0
 8026ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026ada:	2300      	movs	r3, #0
}
 8026adc:	4618      	mov	r0, r3
 8026ade:	3710      	adds	r7, #16
 8026ae0:	46bd      	mov	sp, r7
 8026ae2:	bdb0      	pop	{r4, r5, r7, pc}

08026ae4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8026ae4:	b480      	push	{r7}
 8026ae6:	b083      	sub	sp, #12
 8026ae8:	af00      	add	r7, sp, #0
 8026aea:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8026aec:	687b      	ldr	r3, [r7, #4]
 8026aee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026af2:	2b01      	cmp	r3, #1
 8026af4:	d101      	bne.n	8026afa <HAL_LTDC_EnableDither+0x16>
 8026af6:	2302      	movs	r3, #2
 8026af8:	e016      	b.n	8026b28 <HAL_LTDC_EnableDither+0x44>
 8026afa:	687b      	ldr	r3, [r7, #4]
 8026afc:	2201      	movs	r2, #1
 8026afe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026b02:	687b      	ldr	r3, [r7, #4]
 8026b04:	2202      	movs	r2, #2
 8026b06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8026b0a:	4b0a      	ldr	r3, [pc, #40]	; (8026b34 <HAL_LTDC_EnableDither+0x50>)
 8026b0c:	699b      	ldr	r3, [r3, #24]
 8026b0e:	4a09      	ldr	r2, [pc, #36]	; (8026b34 <HAL_LTDC_EnableDither+0x50>)
 8026b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026b14:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026b16:	687b      	ldr	r3, [r7, #4]
 8026b18:	2201      	movs	r2, #1
 8026b1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026b1e:	687b      	ldr	r3, [r7, #4]
 8026b20:	2200      	movs	r2, #0
 8026b22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026b26:	2300      	movs	r3, #0
}
 8026b28:	4618      	mov	r0, r3
 8026b2a:	370c      	adds	r7, #12
 8026b2c:	46bd      	mov	sp, r7
 8026b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b32:	4770      	bx	lr
 8026b34:	40016800 	.word	0x40016800

08026b38 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026b38:	b480      	push	{r7}
 8026b3a:	b089      	sub	sp, #36	; 0x24
 8026b3c:	af00      	add	r7, sp, #0
 8026b3e:	60f8      	str	r0, [r7, #12]
 8026b40:	60b9      	str	r1, [r7, #8]
 8026b42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8026b44:	68bb      	ldr	r3, [r7, #8]
 8026b46:	685a      	ldr	r2, [r3, #4]
 8026b48:	68fb      	ldr	r3, [r7, #12]
 8026b4a:	681b      	ldr	r3, [r3, #0]
 8026b4c:	68db      	ldr	r3, [r3, #12]
 8026b4e:	0c1b      	lsrs	r3, r3, #16
 8026b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026b54:	4413      	add	r3, r2
 8026b56:	041b      	lsls	r3, r3, #16
 8026b58:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8026b5a:	68fb      	ldr	r3, [r7, #12]
 8026b5c:	681b      	ldr	r3, [r3, #0]
 8026b5e:	461a      	mov	r2, r3
 8026b60:	687b      	ldr	r3, [r7, #4]
 8026b62:	01db      	lsls	r3, r3, #7
 8026b64:	4413      	add	r3, r2
 8026b66:	3384      	adds	r3, #132	; 0x84
 8026b68:	685b      	ldr	r3, [r3, #4]
 8026b6a:	68fa      	ldr	r2, [r7, #12]
 8026b6c:	6812      	ldr	r2, [r2, #0]
 8026b6e:	4611      	mov	r1, r2
 8026b70:	687a      	ldr	r2, [r7, #4]
 8026b72:	01d2      	lsls	r2, r2, #7
 8026b74:	440a      	add	r2, r1
 8026b76:	3284      	adds	r2, #132	; 0x84
 8026b78:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8026b7c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8026b7e:	68bb      	ldr	r3, [r7, #8]
 8026b80:	681a      	ldr	r2, [r3, #0]
 8026b82:	68fb      	ldr	r3, [r7, #12]
 8026b84:	681b      	ldr	r3, [r3, #0]
 8026b86:	68db      	ldr	r3, [r3, #12]
 8026b88:	0c1b      	lsrs	r3, r3, #16
 8026b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026b8e:	4413      	add	r3, r2
 8026b90:	1c5a      	adds	r2, r3, #1
 8026b92:	68fb      	ldr	r3, [r7, #12]
 8026b94:	681b      	ldr	r3, [r3, #0]
 8026b96:	4619      	mov	r1, r3
 8026b98:	687b      	ldr	r3, [r7, #4]
 8026b9a:	01db      	lsls	r3, r3, #7
 8026b9c:	440b      	add	r3, r1
 8026b9e:	3384      	adds	r3, #132	; 0x84
 8026ba0:	4619      	mov	r1, r3
 8026ba2:	69fb      	ldr	r3, [r7, #28]
 8026ba4:	4313      	orrs	r3, r2
 8026ba6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8026ba8:	68bb      	ldr	r3, [r7, #8]
 8026baa:	68da      	ldr	r2, [r3, #12]
 8026bac:	68fb      	ldr	r3, [r7, #12]
 8026bae:	681b      	ldr	r3, [r3, #0]
 8026bb0:	68db      	ldr	r3, [r3, #12]
 8026bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026bb6:	4413      	add	r3, r2
 8026bb8:	041b      	lsls	r3, r3, #16
 8026bba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8026bbc:	68fb      	ldr	r3, [r7, #12]
 8026bbe:	681b      	ldr	r3, [r3, #0]
 8026bc0:	461a      	mov	r2, r3
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	01db      	lsls	r3, r3, #7
 8026bc6:	4413      	add	r3, r2
 8026bc8:	3384      	adds	r3, #132	; 0x84
 8026bca:	689b      	ldr	r3, [r3, #8]
 8026bcc:	68fa      	ldr	r2, [r7, #12]
 8026bce:	6812      	ldr	r2, [r2, #0]
 8026bd0:	4611      	mov	r1, r2
 8026bd2:	687a      	ldr	r2, [r7, #4]
 8026bd4:	01d2      	lsls	r2, r2, #7
 8026bd6:	440a      	add	r2, r1
 8026bd8:	3284      	adds	r2, #132	; 0x84
 8026bda:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8026bde:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8026be0:	68bb      	ldr	r3, [r7, #8]
 8026be2:	689a      	ldr	r2, [r3, #8]
 8026be4:	68fb      	ldr	r3, [r7, #12]
 8026be6:	681b      	ldr	r3, [r3, #0]
 8026be8:	68db      	ldr	r3, [r3, #12]
 8026bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026bee:	4413      	add	r3, r2
 8026bf0:	1c5a      	adds	r2, r3, #1
 8026bf2:	68fb      	ldr	r3, [r7, #12]
 8026bf4:	681b      	ldr	r3, [r3, #0]
 8026bf6:	4619      	mov	r1, r3
 8026bf8:	687b      	ldr	r3, [r7, #4]
 8026bfa:	01db      	lsls	r3, r3, #7
 8026bfc:	440b      	add	r3, r1
 8026bfe:	3384      	adds	r3, #132	; 0x84
 8026c00:	4619      	mov	r1, r3
 8026c02:	69fb      	ldr	r3, [r7, #28]
 8026c04:	4313      	orrs	r3, r2
 8026c06:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8026c08:	68fb      	ldr	r3, [r7, #12]
 8026c0a:	681b      	ldr	r3, [r3, #0]
 8026c0c:	461a      	mov	r2, r3
 8026c0e:	687b      	ldr	r3, [r7, #4]
 8026c10:	01db      	lsls	r3, r3, #7
 8026c12:	4413      	add	r3, r2
 8026c14:	3384      	adds	r3, #132	; 0x84
 8026c16:	691b      	ldr	r3, [r3, #16]
 8026c18:	68fa      	ldr	r2, [r7, #12]
 8026c1a:	6812      	ldr	r2, [r2, #0]
 8026c1c:	4611      	mov	r1, r2
 8026c1e:	687a      	ldr	r2, [r7, #4]
 8026c20:	01d2      	lsls	r2, r2, #7
 8026c22:	440a      	add	r2, r1
 8026c24:	3284      	adds	r2, #132	; 0x84
 8026c26:	f023 0307 	bic.w	r3, r3, #7
 8026c2a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8026c2c:	68fb      	ldr	r3, [r7, #12]
 8026c2e:	681b      	ldr	r3, [r3, #0]
 8026c30:	461a      	mov	r2, r3
 8026c32:	687b      	ldr	r3, [r7, #4]
 8026c34:	01db      	lsls	r3, r3, #7
 8026c36:	4413      	add	r3, r2
 8026c38:	3384      	adds	r3, #132	; 0x84
 8026c3a:	461a      	mov	r2, r3
 8026c3c:	68bb      	ldr	r3, [r7, #8]
 8026c3e:	691b      	ldr	r3, [r3, #16]
 8026c40:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8026c42:	68bb      	ldr	r3, [r7, #8]
 8026c44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8026c48:	021b      	lsls	r3, r3, #8
 8026c4a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8026c4c:	68bb      	ldr	r3, [r7, #8]
 8026c4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8026c52:	041b      	lsls	r3, r3, #16
 8026c54:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8026c56:	68bb      	ldr	r3, [r7, #8]
 8026c58:	699b      	ldr	r3, [r3, #24]
 8026c5a:	061b      	lsls	r3, r3, #24
 8026c5c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8026c5e:	68fb      	ldr	r3, [r7, #12]
 8026c60:	681b      	ldr	r3, [r3, #0]
 8026c62:	461a      	mov	r2, r3
 8026c64:	687b      	ldr	r3, [r7, #4]
 8026c66:	01db      	lsls	r3, r3, #7
 8026c68:	4413      	add	r3, r2
 8026c6a:	3384      	adds	r3, #132	; 0x84
 8026c6c:	699b      	ldr	r3, [r3, #24]
 8026c6e:	68fb      	ldr	r3, [r7, #12]
 8026c70:	681b      	ldr	r3, [r3, #0]
 8026c72:	461a      	mov	r2, r3
 8026c74:	687b      	ldr	r3, [r7, #4]
 8026c76:	01db      	lsls	r3, r3, #7
 8026c78:	4413      	add	r3, r2
 8026c7a:	3384      	adds	r3, #132	; 0x84
 8026c7c:	461a      	mov	r2, r3
 8026c7e:	2300      	movs	r3, #0
 8026c80:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8026c82:	68bb      	ldr	r3, [r7, #8]
 8026c84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026c88:	461a      	mov	r2, r3
 8026c8a:	69fb      	ldr	r3, [r7, #28]
 8026c8c:	431a      	orrs	r2, r3
 8026c8e:	69bb      	ldr	r3, [r7, #24]
 8026c90:	431a      	orrs	r2, r3
 8026c92:	68fb      	ldr	r3, [r7, #12]
 8026c94:	681b      	ldr	r3, [r3, #0]
 8026c96:	4619      	mov	r1, r3
 8026c98:	687b      	ldr	r3, [r7, #4]
 8026c9a:	01db      	lsls	r3, r3, #7
 8026c9c:	440b      	add	r3, r1
 8026c9e:	3384      	adds	r3, #132	; 0x84
 8026ca0:	4619      	mov	r1, r3
 8026ca2:	697b      	ldr	r3, [r7, #20]
 8026ca4:	4313      	orrs	r3, r2
 8026ca6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8026ca8:	68fb      	ldr	r3, [r7, #12]
 8026caa:	681b      	ldr	r3, [r3, #0]
 8026cac:	461a      	mov	r2, r3
 8026cae:	687b      	ldr	r3, [r7, #4]
 8026cb0:	01db      	lsls	r3, r3, #7
 8026cb2:	4413      	add	r3, r2
 8026cb4:	3384      	adds	r3, #132	; 0x84
 8026cb6:	695b      	ldr	r3, [r3, #20]
 8026cb8:	68fa      	ldr	r2, [r7, #12]
 8026cba:	6812      	ldr	r2, [r2, #0]
 8026cbc:	4611      	mov	r1, r2
 8026cbe:	687a      	ldr	r2, [r7, #4]
 8026cc0:	01d2      	lsls	r2, r2, #7
 8026cc2:	440a      	add	r2, r1
 8026cc4:	3284      	adds	r2, #132	; 0x84
 8026cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8026cca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8026ccc:	68fb      	ldr	r3, [r7, #12]
 8026cce:	681b      	ldr	r3, [r3, #0]
 8026cd0:	461a      	mov	r2, r3
 8026cd2:	687b      	ldr	r3, [r7, #4]
 8026cd4:	01db      	lsls	r3, r3, #7
 8026cd6:	4413      	add	r3, r2
 8026cd8:	3384      	adds	r3, #132	; 0x84
 8026cda:	461a      	mov	r2, r3
 8026cdc:	68bb      	ldr	r3, [r7, #8]
 8026cde:	695b      	ldr	r3, [r3, #20]
 8026ce0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8026ce2:	68fb      	ldr	r3, [r7, #12]
 8026ce4:	681b      	ldr	r3, [r3, #0]
 8026ce6:	461a      	mov	r2, r3
 8026ce8:	687b      	ldr	r3, [r7, #4]
 8026cea:	01db      	lsls	r3, r3, #7
 8026cec:	4413      	add	r3, r2
 8026cee:	3384      	adds	r3, #132	; 0x84
 8026cf0:	69da      	ldr	r2, [r3, #28]
 8026cf2:	68fb      	ldr	r3, [r7, #12]
 8026cf4:	681b      	ldr	r3, [r3, #0]
 8026cf6:	4619      	mov	r1, r3
 8026cf8:	687b      	ldr	r3, [r7, #4]
 8026cfa:	01db      	lsls	r3, r3, #7
 8026cfc:	440b      	add	r3, r1
 8026cfe:	3384      	adds	r3, #132	; 0x84
 8026d00:	4619      	mov	r1, r3
 8026d02:	4b58      	ldr	r3, [pc, #352]	; (8026e64 <LTDC_SetConfig+0x32c>)
 8026d04:	4013      	ands	r3, r2
 8026d06:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8026d08:	68bb      	ldr	r3, [r7, #8]
 8026d0a:	69da      	ldr	r2, [r3, #28]
 8026d0c:	68bb      	ldr	r3, [r7, #8]
 8026d0e:	6a1b      	ldr	r3, [r3, #32]
 8026d10:	68f9      	ldr	r1, [r7, #12]
 8026d12:	6809      	ldr	r1, [r1, #0]
 8026d14:	4608      	mov	r0, r1
 8026d16:	6879      	ldr	r1, [r7, #4]
 8026d18:	01c9      	lsls	r1, r1, #7
 8026d1a:	4401      	add	r1, r0
 8026d1c:	3184      	adds	r1, #132	; 0x84
 8026d1e:	4313      	orrs	r3, r2
 8026d20:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8026d22:	68fb      	ldr	r3, [r7, #12]
 8026d24:	681b      	ldr	r3, [r3, #0]
 8026d26:	461a      	mov	r2, r3
 8026d28:	687b      	ldr	r3, [r7, #4]
 8026d2a:	01db      	lsls	r3, r3, #7
 8026d2c:	4413      	add	r3, r2
 8026d2e:	3384      	adds	r3, #132	; 0x84
 8026d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d32:	68fb      	ldr	r3, [r7, #12]
 8026d34:	681b      	ldr	r3, [r3, #0]
 8026d36:	461a      	mov	r2, r3
 8026d38:	687b      	ldr	r3, [r7, #4]
 8026d3a:	01db      	lsls	r3, r3, #7
 8026d3c:	4413      	add	r3, r2
 8026d3e:	3384      	adds	r3, #132	; 0x84
 8026d40:	461a      	mov	r2, r3
 8026d42:	2300      	movs	r3, #0
 8026d44:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8026d46:	68fb      	ldr	r3, [r7, #12]
 8026d48:	681b      	ldr	r3, [r3, #0]
 8026d4a:	461a      	mov	r2, r3
 8026d4c:	687b      	ldr	r3, [r7, #4]
 8026d4e:	01db      	lsls	r3, r3, #7
 8026d50:	4413      	add	r3, r2
 8026d52:	3384      	adds	r3, #132	; 0x84
 8026d54:	461a      	mov	r2, r3
 8026d56:	68bb      	ldr	r3, [r7, #8]
 8026d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d5a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8026d5c:	68bb      	ldr	r3, [r7, #8]
 8026d5e:	691b      	ldr	r3, [r3, #16]
 8026d60:	2b00      	cmp	r3, #0
 8026d62:	d102      	bne.n	8026d6a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8026d64:	2304      	movs	r3, #4
 8026d66:	61fb      	str	r3, [r7, #28]
 8026d68:	e01b      	b.n	8026da2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8026d6a:	68bb      	ldr	r3, [r7, #8]
 8026d6c:	691b      	ldr	r3, [r3, #16]
 8026d6e:	2b01      	cmp	r3, #1
 8026d70:	d102      	bne.n	8026d78 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8026d72:	2303      	movs	r3, #3
 8026d74:	61fb      	str	r3, [r7, #28]
 8026d76:	e014      	b.n	8026da2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8026d78:	68bb      	ldr	r3, [r7, #8]
 8026d7a:	691b      	ldr	r3, [r3, #16]
 8026d7c:	2b04      	cmp	r3, #4
 8026d7e:	d00b      	beq.n	8026d98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8026d80:	68bb      	ldr	r3, [r7, #8]
 8026d82:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8026d84:	2b02      	cmp	r3, #2
 8026d86:	d007      	beq.n	8026d98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8026d88:	68bb      	ldr	r3, [r7, #8]
 8026d8a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8026d8c:	2b03      	cmp	r3, #3
 8026d8e:	d003      	beq.n	8026d98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8026d90:	68bb      	ldr	r3, [r7, #8]
 8026d92:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8026d94:	2b07      	cmp	r3, #7
 8026d96:	d102      	bne.n	8026d9e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8026d98:	2302      	movs	r3, #2
 8026d9a:	61fb      	str	r3, [r7, #28]
 8026d9c:	e001      	b.n	8026da2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8026d9e:	2301      	movs	r3, #1
 8026da0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8026da2:	68fb      	ldr	r3, [r7, #12]
 8026da4:	681b      	ldr	r3, [r3, #0]
 8026da6:	461a      	mov	r2, r3
 8026da8:	687b      	ldr	r3, [r7, #4]
 8026daa:	01db      	lsls	r3, r3, #7
 8026dac:	4413      	add	r3, r2
 8026dae:	3384      	adds	r3, #132	; 0x84
 8026db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026db2:	68fa      	ldr	r2, [r7, #12]
 8026db4:	6812      	ldr	r2, [r2, #0]
 8026db6:	4611      	mov	r1, r2
 8026db8:	687a      	ldr	r2, [r7, #4]
 8026dba:	01d2      	lsls	r2, r2, #7
 8026dbc:	440a      	add	r2, r1
 8026dbe:	3284      	adds	r2, #132	; 0x84
 8026dc0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8026dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8026dc6:	68bb      	ldr	r3, [r7, #8]
 8026dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026dca:	69fa      	ldr	r2, [r7, #28]
 8026dcc:	fb02 f303 	mul.w	r3, r2, r3
 8026dd0:	041a      	lsls	r2, r3, #16
 8026dd2:	68bb      	ldr	r3, [r7, #8]
 8026dd4:	6859      	ldr	r1, [r3, #4]
 8026dd6:	68bb      	ldr	r3, [r7, #8]
 8026dd8:	681b      	ldr	r3, [r3, #0]
 8026dda:	1acb      	subs	r3, r1, r3
 8026ddc:	69f9      	ldr	r1, [r7, #28]
 8026dde:	fb01 f303 	mul.w	r3, r1, r3
 8026de2:	3303      	adds	r3, #3
 8026de4:	68f9      	ldr	r1, [r7, #12]
 8026de6:	6809      	ldr	r1, [r1, #0]
 8026de8:	4608      	mov	r0, r1
 8026dea:	6879      	ldr	r1, [r7, #4]
 8026dec:	01c9      	lsls	r1, r1, #7
 8026dee:	4401      	add	r1, r0
 8026df0:	3184      	adds	r1, #132	; 0x84
 8026df2:	4313      	orrs	r3, r2
 8026df4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8026df6:	68fb      	ldr	r3, [r7, #12]
 8026df8:	681b      	ldr	r3, [r3, #0]
 8026dfa:	461a      	mov	r2, r3
 8026dfc:	687b      	ldr	r3, [r7, #4]
 8026dfe:	01db      	lsls	r3, r3, #7
 8026e00:	4413      	add	r3, r2
 8026e02:	3384      	adds	r3, #132	; 0x84
 8026e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026e06:	68fb      	ldr	r3, [r7, #12]
 8026e08:	681b      	ldr	r3, [r3, #0]
 8026e0a:	4619      	mov	r1, r3
 8026e0c:	687b      	ldr	r3, [r7, #4]
 8026e0e:	01db      	lsls	r3, r3, #7
 8026e10:	440b      	add	r3, r1
 8026e12:	3384      	adds	r3, #132	; 0x84
 8026e14:	4619      	mov	r1, r3
 8026e16:	4b14      	ldr	r3, [pc, #80]	; (8026e68 <LTDC_SetConfig+0x330>)
 8026e18:	4013      	ands	r3, r2
 8026e1a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8026e1c:	68fb      	ldr	r3, [r7, #12]
 8026e1e:	681b      	ldr	r3, [r3, #0]
 8026e20:	461a      	mov	r2, r3
 8026e22:	687b      	ldr	r3, [r7, #4]
 8026e24:	01db      	lsls	r3, r3, #7
 8026e26:	4413      	add	r3, r2
 8026e28:	3384      	adds	r3, #132	; 0x84
 8026e2a:	461a      	mov	r2, r3
 8026e2c:	68bb      	ldr	r3, [r7, #8]
 8026e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026e30:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8026e32:	68fb      	ldr	r3, [r7, #12]
 8026e34:	681b      	ldr	r3, [r3, #0]
 8026e36:	461a      	mov	r2, r3
 8026e38:	687b      	ldr	r3, [r7, #4]
 8026e3a:	01db      	lsls	r3, r3, #7
 8026e3c:	4413      	add	r3, r2
 8026e3e:	3384      	adds	r3, #132	; 0x84
 8026e40:	681b      	ldr	r3, [r3, #0]
 8026e42:	68fa      	ldr	r2, [r7, #12]
 8026e44:	6812      	ldr	r2, [r2, #0]
 8026e46:	4611      	mov	r1, r2
 8026e48:	687a      	ldr	r2, [r7, #4]
 8026e4a:	01d2      	lsls	r2, r2, #7
 8026e4c:	440a      	add	r2, r1
 8026e4e:	3284      	adds	r2, #132	; 0x84
 8026e50:	f043 0301 	orr.w	r3, r3, #1
 8026e54:	6013      	str	r3, [r2, #0]
}
 8026e56:	bf00      	nop
 8026e58:	3724      	adds	r7, #36	; 0x24
 8026e5a:	46bd      	mov	sp, r7
 8026e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e60:	4770      	bx	lr
 8026e62:	bf00      	nop
 8026e64:	fffff8f8 	.word	0xfffff8f8
 8026e68:	fffff800 	.word	0xfffff800

08026e6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8026e6c:	b580      	push	{r7, lr}
 8026e6e:	b082      	sub	sp, #8
 8026e70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8026e72:	2300      	movs	r3, #0
 8026e74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8026e76:	4b23      	ldr	r3, [pc, #140]	; (8026f04 <HAL_PWREx_EnableOverDrive+0x98>)
 8026e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e7a:	4a22      	ldr	r2, [pc, #136]	; (8026f04 <HAL_PWREx_EnableOverDrive+0x98>)
 8026e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026e80:	6413      	str	r3, [r2, #64]	; 0x40
 8026e82:	4b20      	ldr	r3, [pc, #128]	; (8026f04 <HAL_PWREx_EnableOverDrive+0x98>)
 8026e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026e8a:	603b      	str	r3, [r7, #0]
 8026e8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8026e8e:	4b1e      	ldr	r3, [pc, #120]	; (8026f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026e90:	681b      	ldr	r3, [r3, #0]
 8026e92:	4a1d      	ldr	r2, [pc, #116]	; (8026f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026e98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8026e9a:	f7fe fb1d 	bl	80254d8 <HAL_GetTick>
 8026e9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8026ea0:	e009      	b.n	8026eb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8026ea2:	f7fe fb19 	bl	80254d8 <HAL_GetTick>
 8026ea6:	4602      	mov	r2, r0
 8026ea8:	687b      	ldr	r3, [r7, #4]
 8026eaa:	1ad3      	subs	r3, r2, r3
 8026eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026eb0:	d901      	bls.n	8026eb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8026eb2:	2303      	movs	r3, #3
 8026eb4:	e022      	b.n	8026efc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8026eb6:	4b14      	ldr	r3, [pc, #80]	; (8026f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026eb8:	685b      	ldr	r3, [r3, #4]
 8026eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8026ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026ec2:	d1ee      	bne.n	8026ea2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8026ec4:	4b10      	ldr	r3, [pc, #64]	; (8026f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026ec6:	681b      	ldr	r3, [r3, #0]
 8026ec8:	4a0f      	ldr	r2, [pc, #60]	; (8026f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026ece:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8026ed0:	f7fe fb02 	bl	80254d8 <HAL_GetTick>
 8026ed4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8026ed6:	e009      	b.n	8026eec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8026ed8:	f7fe fafe 	bl	80254d8 <HAL_GetTick>
 8026edc:	4602      	mov	r2, r0
 8026ede:	687b      	ldr	r3, [r7, #4]
 8026ee0:	1ad3      	subs	r3, r2, r3
 8026ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026ee6:	d901      	bls.n	8026eec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8026ee8:	2303      	movs	r3, #3
 8026eea:	e007      	b.n	8026efc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8026eec:	4b06      	ldr	r3, [pc, #24]	; (8026f08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026eee:	685b      	ldr	r3, [r3, #4]
 8026ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8026ef8:	d1ee      	bne.n	8026ed8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8026efa:	2300      	movs	r3, #0
}
 8026efc:	4618      	mov	r0, r3
 8026efe:	3708      	adds	r7, #8
 8026f00:	46bd      	mov	sp, r7
 8026f02:	bd80      	pop	{r7, pc}
 8026f04:	40023800 	.word	0x40023800
 8026f08:	40007000 	.word	0x40007000

08026f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026f0c:	b580      	push	{r7, lr}
 8026f0e:	b086      	sub	sp, #24
 8026f10:	af00      	add	r7, sp, #0
 8026f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8026f14:	2300      	movs	r3, #0
 8026f16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8026f18:	687b      	ldr	r3, [r7, #4]
 8026f1a:	2b00      	cmp	r3, #0
 8026f1c:	d101      	bne.n	8026f22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8026f1e:	2301      	movs	r3, #1
 8026f20:	e291      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026f22:	687b      	ldr	r3, [r7, #4]
 8026f24:	681b      	ldr	r3, [r3, #0]
 8026f26:	f003 0301 	and.w	r3, r3, #1
 8026f2a:	2b00      	cmp	r3, #0
 8026f2c:	f000 8087 	beq.w	802703e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8026f30:	4b96      	ldr	r3, [pc, #600]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026f32:	689b      	ldr	r3, [r3, #8]
 8026f34:	f003 030c 	and.w	r3, r3, #12
 8026f38:	2b04      	cmp	r3, #4
 8026f3a:	d00c      	beq.n	8026f56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026f3c:	4b93      	ldr	r3, [pc, #588]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026f3e:	689b      	ldr	r3, [r3, #8]
 8026f40:	f003 030c 	and.w	r3, r3, #12
 8026f44:	2b08      	cmp	r3, #8
 8026f46:	d112      	bne.n	8026f6e <HAL_RCC_OscConfig+0x62>
 8026f48:	4b90      	ldr	r3, [pc, #576]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026f4a:	685b      	ldr	r3, [r3, #4]
 8026f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026f54:	d10b      	bne.n	8026f6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026f56:	4b8d      	ldr	r3, [pc, #564]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026f58:	681b      	ldr	r3, [r3, #0]
 8026f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026f5e:	2b00      	cmp	r3, #0
 8026f60:	d06c      	beq.n	802703c <HAL_RCC_OscConfig+0x130>
 8026f62:	687b      	ldr	r3, [r7, #4]
 8026f64:	685b      	ldr	r3, [r3, #4]
 8026f66:	2b00      	cmp	r3, #0
 8026f68:	d168      	bne.n	802703c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8026f6a:	2301      	movs	r3, #1
 8026f6c:	e26b      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026f6e:	687b      	ldr	r3, [r7, #4]
 8026f70:	685b      	ldr	r3, [r3, #4]
 8026f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026f76:	d106      	bne.n	8026f86 <HAL_RCC_OscConfig+0x7a>
 8026f78:	4b84      	ldr	r3, [pc, #528]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026f7a:	681b      	ldr	r3, [r3, #0]
 8026f7c:	4a83      	ldr	r2, [pc, #524]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026f82:	6013      	str	r3, [r2, #0]
 8026f84:	e02e      	b.n	8026fe4 <HAL_RCC_OscConfig+0xd8>
 8026f86:	687b      	ldr	r3, [r7, #4]
 8026f88:	685b      	ldr	r3, [r3, #4]
 8026f8a:	2b00      	cmp	r3, #0
 8026f8c:	d10c      	bne.n	8026fa8 <HAL_RCC_OscConfig+0x9c>
 8026f8e:	4b7f      	ldr	r3, [pc, #508]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026f90:	681b      	ldr	r3, [r3, #0]
 8026f92:	4a7e      	ldr	r2, [pc, #504]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026f98:	6013      	str	r3, [r2, #0]
 8026f9a:	4b7c      	ldr	r3, [pc, #496]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026f9c:	681b      	ldr	r3, [r3, #0]
 8026f9e:	4a7b      	ldr	r2, [pc, #492]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026fa4:	6013      	str	r3, [r2, #0]
 8026fa6:	e01d      	b.n	8026fe4 <HAL_RCC_OscConfig+0xd8>
 8026fa8:	687b      	ldr	r3, [r7, #4]
 8026faa:	685b      	ldr	r3, [r3, #4]
 8026fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026fb0:	d10c      	bne.n	8026fcc <HAL_RCC_OscConfig+0xc0>
 8026fb2:	4b76      	ldr	r3, [pc, #472]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026fb4:	681b      	ldr	r3, [r3, #0]
 8026fb6:	4a75      	ldr	r2, [pc, #468]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026fbc:	6013      	str	r3, [r2, #0]
 8026fbe:	4b73      	ldr	r3, [pc, #460]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026fc0:	681b      	ldr	r3, [r3, #0]
 8026fc2:	4a72      	ldr	r2, [pc, #456]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026fc8:	6013      	str	r3, [r2, #0]
 8026fca:	e00b      	b.n	8026fe4 <HAL_RCC_OscConfig+0xd8>
 8026fcc:	4b6f      	ldr	r3, [pc, #444]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026fce:	681b      	ldr	r3, [r3, #0]
 8026fd0:	4a6e      	ldr	r2, [pc, #440]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026fd6:	6013      	str	r3, [r2, #0]
 8026fd8:	4b6c      	ldr	r3, [pc, #432]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026fda:	681b      	ldr	r3, [r3, #0]
 8026fdc:	4a6b      	ldr	r2, [pc, #428]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8026fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8026fe4:	687b      	ldr	r3, [r7, #4]
 8026fe6:	685b      	ldr	r3, [r3, #4]
 8026fe8:	2b00      	cmp	r3, #0
 8026fea:	d013      	beq.n	8027014 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026fec:	f7fe fa74 	bl	80254d8 <HAL_GetTick>
 8026ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026ff2:	e008      	b.n	8027006 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8026ff4:	f7fe fa70 	bl	80254d8 <HAL_GetTick>
 8026ff8:	4602      	mov	r2, r0
 8026ffa:	693b      	ldr	r3, [r7, #16]
 8026ffc:	1ad3      	subs	r3, r2, r3
 8026ffe:	2b64      	cmp	r3, #100	; 0x64
 8027000:	d901      	bls.n	8027006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8027002:	2303      	movs	r3, #3
 8027004:	e21f      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027006:	4b61      	ldr	r3, [pc, #388]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027008:	681b      	ldr	r3, [r3, #0]
 802700a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802700e:	2b00      	cmp	r3, #0
 8027010:	d0f0      	beq.n	8026ff4 <HAL_RCC_OscConfig+0xe8>
 8027012:	e014      	b.n	802703e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027014:	f7fe fa60 	bl	80254d8 <HAL_GetTick>
 8027018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802701a:	e008      	b.n	802702e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802701c:	f7fe fa5c 	bl	80254d8 <HAL_GetTick>
 8027020:	4602      	mov	r2, r0
 8027022:	693b      	ldr	r3, [r7, #16]
 8027024:	1ad3      	subs	r3, r2, r3
 8027026:	2b64      	cmp	r3, #100	; 0x64
 8027028:	d901      	bls.n	802702e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 802702a:	2303      	movs	r3, #3
 802702c:	e20b      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802702e:	4b57      	ldr	r3, [pc, #348]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027030:	681b      	ldr	r3, [r3, #0]
 8027032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027036:	2b00      	cmp	r3, #0
 8027038:	d1f0      	bne.n	802701c <HAL_RCC_OscConfig+0x110>
 802703a:	e000      	b.n	802703e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802703c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802703e:	687b      	ldr	r3, [r7, #4]
 8027040:	681b      	ldr	r3, [r3, #0]
 8027042:	f003 0302 	and.w	r3, r3, #2
 8027046:	2b00      	cmp	r3, #0
 8027048:	d069      	beq.n	802711e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 802704a:	4b50      	ldr	r3, [pc, #320]	; (802718c <HAL_RCC_OscConfig+0x280>)
 802704c:	689b      	ldr	r3, [r3, #8]
 802704e:	f003 030c 	and.w	r3, r3, #12
 8027052:	2b00      	cmp	r3, #0
 8027054:	d00b      	beq.n	802706e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027056:	4b4d      	ldr	r3, [pc, #308]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027058:	689b      	ldr	r3, [r3, #8]
 802705a:	f003 030c 	and.w	r3, r3, #12
 802705e:	2b08      	cmp	r3, #8
 8027060:	d11c      	bne.n	802709c <HAL_RCC_OscConfig+0x190>
 8027062:	4b4a      	ldr	r3, [pc, #296]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027064:	685b      	ldr	r3, [r3, #4]
 8027066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802706a:	2b00      	cmp	r3, #0
 802706c:	d116      	bne.n	802709c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802706e:	4b47      	ldr	r3, [pc, #284]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027070:	681b      	ldr	r3, [r3, #0]
 8027072:	f003 0302 	and.w	r3, r3, #2
 8027076:	2b00      	cmp	r3, #0
 8027078:	d005      	beq.n	8027086 <HAL_RCC_OscConfig+0x17a>
 802707a:	687b      	ldr	r3, [r7, #4]
 802707c:	68db      	ldr	r3, [r3, #12]
 802707e:	2b01      	cmp	r3, #1
 8027080:	d001      	beq.n	8027086 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8027082:	2301      	movs	r3, #1
 8027084:	e1df      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027086:	4b41      	ldr	r3, [pc, #260]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027088:	681b      	ldr	r3, [r3, #0]
 802708a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802708e:	687b      	ldr	r3, [r7, #4]
 8027090:	691b      	ldr	r3, [r3, #16]
 8027092:	00db      	lsls	r3, r3, #3
 8027094:	493d      	ldr	r1, [pc, #244]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027096:	4313      	orrs	r3, r2
 8027098:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802709a:	e040      	b.n	802711e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	68db      	ldr	r3, [r3, #12]
 80270a0:	2b00      	cmp	r3, #0
 80270a2:	d023      	beq.n	80270ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80270a4:	4b39      	ldr	r3, [pc, #228]	; (802718c <HAL_RCC_OscConfig+0x280>)
 80270a6:	681b      	ldr	r3, [r3, #0]
 80270a8:	4a38      	ldr	r2, [pc, #224]	; (802718c <HAL_RCC_OscConfig+0x280>)
 80270aa:	f043 0301 	orr.w	r3, r3, #1
 80270ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80270b0:	f7fe fa12 	bl	80254d8 <HAL_GetTick>
 80270b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80270b6:	e008      	b.n	80270ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80270b8:	f7fe fa0e 	bl	80254d8 <HAL_GetTick>
 80270bc:	4602      	mov	r2, r0
 80270be:	693b      	ldr	r3, [r7, #16]
 80270c0:	1ad3      	subs	r3, r2, r3
 80270c2:	2b02      	cmp	r3, #2
 80270c4:	d901      	bls.n	80270ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80270c6:	2303      	movs	r3, #3
 80270c8:	e1bd      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80270ca:	4b30      	ldr	r3, [pc, #192]	; (802718c <HAL_RCC_OscConfig+0x280>)
 80270cc:	681b      	ldr	r3, [r3, #0]
 80270ce:	f003 0302 	and.w	r3, r3, #2
 80270d2:	2b00      	cmp	r3, #0
 80270d4:	d0f0      	beq.n	80270b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80270d6:	4b2d      	ldr	r3, [pc, #180]	; (802718c <HAL_RCC_OscConfig+0x280>)
 80270d8:	681b      	ldr	r3, [r3, #0]
 80270da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80270de:	687b      	ldr	r3, [r7, #4]
 80270e0:	691b      	ldr	r3, [r3, #16]
 80270e2:	00db      	lsls	r3, r3, #3
 80270e4:	4929      	ldr	r1, [pc, #164]	; (802718c <HAL_RCC_OscConfig+0x280>)
 80270e6:	4313      	orrs	r3, r2
 80270e8:	600b      	str	r3, [r1, #0]
 80270ea:	e018      	b.n	802711e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80270ec:	4b27      	ldr	r3, [pc, #156]	; (802718c <HAL_RCC_OscConfig+0x280>)
 80270ee:	681b      	ldr	r3, [r3, #0]
 80270f0:	4a26      	ldr	r2, [pc, #152]	; (802718c <HAL_RCC_OscConfig+0x280>)
 80270f2:	f023 0301 	bic.w	r3, r3, #1
 80270f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80270f8:	f7fe f9ee 	bl	80254d8 <HAL_GetTick>
 80270fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80270fe:	e008      	b.n	8027112 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8027100:	f7fe f9ea 	bl	80254d8 <HAL_GetTick>
 8027104:	4602      	mov	r2, r0
 8027106:	693b      	ldr	r3, [r7, #16]
 8027108:	1ad3      	subs	r3, r2, r3
 802710a:	2b02      	cmp	r3, #2
 802710c:	d901      	bls.n	8027112 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 802710e:	2303      	movs	r3, #3
 8027110:	e199      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027112:	4b1e      	ldr	r3, [pc, #120]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027114:	681b      	ldr	r3, [r3, #0]
 8027116:	f003 0302 	and.w	r3, r3, #2
 802711a:	2b00      	cmp	r3, #0
 802711c:	d1f0      	bne.n	8027100 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802711e:	687b      	ldr	r3, [r7, #4]
 8027120:	681b      	ldr	r3, [r3, #0]
 8027122:	f003 0308 	and.w	r3, r3, #8
 8027126:	2b00      	cmp	r3, #0
 8027128:	d038      	beq.n	802719c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 802712a:	687b      	ldr	r3, [r7, #4]
 802712c:	695b      	ldr	r3, [r3, #20]
 802712e:	2b00      	cmp	r3, #0
 8027130:	d019      	beq.n	8027166 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8027132:	4b16      	ldr	r3, [pc, #88]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027136:	4a15      	ldr	r2, [pc, #84]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027138:	f043 0301 	orr.w	r3, r3, #1
 802713c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802713e:	f7fe f9cb 	bl	80254d8 <HAL_GetTick>
 8027142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027144:	e008      	b.n	8027158 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8027146:	f7fe f9c7 	bl	80254d8 <HAL_GetTick>
 802714a:	4602      	mov	r2, r0
 802714c:	693b      	ldr	r3, [r7, #16]
 802714e:	1ad3      	subs	r3, r2, r3
 8027150:	2b02      	cmp	r3, #2
 8027152:	d901      	bls.n	8027158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8027154:	2303      	movs	r3, #3
 8027156:	e176      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027158:	4b0c      	ldr	r3, [pc, #48]	; (802718c <HAL_RCC_OscConfig+0x280>)
 802715a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802715c:	f003 0302 	and.w	r3, r3, #2
 8027160:	2b00      	cmp	r3, #0
 8027162:	d0f0      	beq.n	8027146 <HAL_RCC_OscConfig+0x23a>
 8027164:	e01a      	b.n	802719c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8027166:	4b09      	ldr	r3, [pc, #36]	; (802718c <HAL_RCC_OscConfig+0x280>)
 8027168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802716a:	4a08      	ldr	r2, [pc, #32]	; (802718c <HAL_RCC_OscConfig+0x280>)
 802716c:	f023 0301 	bic.w	r3, r3, #1
 8027170:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027172:	f7fe f9b1 	bl	80254d8 <HAL_GetTick>
 8027176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027178:	e00a      	b.n	8027190 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802717a:	f7fe f9ad 	bl	80254d8 <HAL_GetTick>
 802717e:	4602      	mov	r2, r0
 8027180:	693b      	ldr	r3, [r7, #16]
 8027182:	1ad3      	subs	r3, r2, r3
 8027184:	2b02      	cmp	r3, #2
 8027186:	d903      	bls.n	8027190 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8027188:	2303      	movs	r3, #3
 802718a:	e15c      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
 802718c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027190:	4b91      	ldr	r3, [pc, #580]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027194:	f003 0302 	and.w	r3, r3, #2
 8027198:	2b00      	cmp	r3, #0
 802719a:	d1ee      	bne.n	802717a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802719c:	687b      	ldr	r3, [r7, #4]
 802719e:	681b      	ldr	r3, [r3, #0]
 80271a0:	f003 0304 	and.w	r3, r3, #4
 80271a4:	2b00      	cmp	r3, #0
 80271a6:	f000 80a4 	beq.w	80272f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80271aa:	4b8b      	ldr	r3, [pc, #556]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80271ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80271b2:	2b00      	cmp	r3, #0
 80271b4:	d10d      	bne.n	80271d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80271b6:	4b88      	ldr	r3, [pc, #544]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80271b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271ba:	4a87      	ldr	r2, [pc, #540]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80271bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80271c0:	6413      	str	r3, [r2, #64]	; 0x40
 80271c2:	4b85      	ldr	r3, [pc, #532]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80271c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80271ca:	60bb      	str	r3, [r7, #8]
 80271cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80271ce:	2301      	movs	r3, #1
 80271d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80271d2:	4b82      	ldr	r3, [pc, #520]	; (80273dc <HAL_RCC_OscConfig+0x4d0>)
 80271d4:	681b      	ldr	r3, [r3, #0]
 80271d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80271da:	2b00      	cmp	r3, #0
 80271dc:	d118      	bne.n	8027210 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80271de:	4b7f      	ldr	r3, [pc, #508]	; (80273dc <HAL_RCC_OscConfig+0x4d0>)
 80271e0:	681b      	ldr	r3, [r3, #0]
 80271e2:	4a7e      	ldr	r2, [pc, #504]	; (80273dc <HAL_RCC_OscConfig+0x4d0>)
 80271e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80271e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80271ea:	f7fe f975 	bl	80254d8 <HAL_GetTick>
 80271ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80271f0:	e008      	b.n	8027204 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80271f2:	f7fe f971 	bl	80254d8 <HAL_GetTick>
 80271f6:	4602      	mov	r2, r0
 80271f8:	693b      	ldr	r3, [r7, #16]
 80271fa:	1ad3      	subs	r3, r2, r3
 80271fc:	2b64      	cmp	r3, #100	; 0x64
 80271fe:	d901      	bls.n	8027204 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8027200:	2303      	movs	r3, #3
 8027202:	e120      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8027204:	4b75      	ldr	r3, [pc, #468]	; (80273dc <HAL_RCC_OscConfig+0x4d0>)
 8027206:	681b      	ldr	r3, [r3, #0]
 8027208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802720c:	2b00      	cmp	r3, #0
 802720e:	d0f0      	beq.n	80271f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027210:	687b      	ldr	r3, [r7, #4]
 8027212:	689b      	ldr	r3, [r3, #8]
 8027214:	2b01      	cmp	r3, #1
 8027216:	d106      	bne.n	8027226 <HAL_RCC_OscConfig+0x31a>
 8027218:	4b6f      	ldr	r3, [pc, #444]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 802721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802721c:	4a6e      	ldr	r2, [pc, #440]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 802721e:	f043 0301 	orr.w	r3, r3, #1
 8027222:	6713      	str	r3, [r2, #112]	; 0x70
 8027224:	e02d      	b.n	8027282 <HAL_RCC_OscConfig+0x376>
 8027226:	687b      	ldr	r3, [r7, #4]
 8027228:	689b      	ldr	r3, [r3, #8]
 802722a:	2b00      	cmp	r3, #0
 802722c:	d10c      	bne.n	8027248 <HAL_RCC_OscConfig+0x33c>
 802722e:	4b6a      	ldr	r3, [pc, #424]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027232:	4a69      	ldr	r2, [pc, #420]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027234:	f023 0301 	bic.w	r3, r3, #1
 8027238:	6713      	str	r3, [r2, #112]	; 0x70
 802723a:	4b67      	ldr	r3, [pc, #412]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 802723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802723e:	4a66      	ldr	r2, [pc, #408]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027240:	f023 0304 	bic.w	r3, r3, #4
 8027244:	6713      	str	r3, [r2, #112]	; 0x70
 8027246:	e01c      	b.n	8027282 <HAL_RCC_OscConfig+0x376>
 8027248:	687b      	ldr	r3, [r7, #4]
 802724a:	689b      	ldr	r3, [r3, #8]
 802724c:	2b05      	cmp	r3, #5
 802724e:	d10c      	bne.n	802726a <HAL_RCC_OscConfig+0x35e>
 8027250:	4b61      	ldr	r3, [pc, #388]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027254:	4a60      	ldr	r2, [pc, #384]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027256:	f043 0304 	orr.w	r3, r3, #4
 802725a:	6713      	str	r3, [r2, #112]	; 0x70
 802725c:	4b5e      	ldr	r3, [pc, #376]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 802725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027260:	4a5d      	ldr	r2, [pc, #372]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027262:	f043 0301 	orr.w	r3, r3, #1
 8027266:	6713      	str	r3, [r2, #112]	; 0x70
 8027268:	e00b      	b.n	8027282 <HAL_RCC_OscConfig+0x376>
 802726a:	4b5b      	ldr	r3, [pc, #364]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 802726c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802726e:	4a5a      	ldr	r2, [pc, #360]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027270:	f023 0301 	bic.w	r3, r3, #1
 8027274:	6713      	str	r3, [r2, #112]	; 0x70
 8027276:	4b58      	ldr	r3, [pc, #352]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802727a:	4a57      	ldr	r2, [pc, #348]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 802727c:	f023 0304 	bic.w	r3, r3, #4
 8027280:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8027282:	687b      	ldr	r3, [r7, #4]
 8027284:	689b      	ldr	r3, [r3, #8]
 8027286:	2b00      	cmp	r3, #0
 8027288:	d015      	beq.n	80272b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802728a:	f7fe f925 	bl	80254d8 <HAL_GetTick>
 802728e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027290:	e00a      	b.n	80272a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8027292:	f7fe f921 	bl	80254d8 <HAL_GetTick>
 8027296:	4602      	mov	r2, r0
 8027298:	693b      	ldr	r3, [r7, #16]
 802729a:	1ad3      	subs	r3, r2, r3
 802729c:	f241 3288 	movw	r2, #5000	; 0x1388
 80272a0:	4293      	cmp	r3, r2
 80272a2:	d901      	bls.n	80272a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80272a4:	2303      	movs	r3, #3
 80272a6:	e0ce      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80272a8:	4b4b      	ldr	r3, [pc, #300]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80272aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80272ac:	f003 0302 	and.w	r3, r3, #2
 80272b0:	2b00      	cmp	r3, #0
 80272b2:	d0ee      	beq.n	8027292 <HAL_RCC_OscConfig+0x386>
 80272b4:	e014      	b.n	80272e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80272b6:	f7fe f90f 	bl	80254d8 <HAL_GetTick>
 80272ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80272bc:	e00a      	b.n	80272d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80272be:	f7fe f90b 	bl	80254d8 <HAL_GetTick>
 80272c2:	4602      	mov	r2, r0
 80272c4:	693b      	ldr	r3, [r7, #16]
 80272c6:	1ad3      	subs	r3, r2, r3
 80272c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80272cc:	4293      	cmp	r3, r2
 80272ce:	d901      	bls.n	80272d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80272d0:	2303      	movs	r3, #3
 80272d2:	e0b8      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80272d4:	4b40      	ldr	r3, [pc, #256]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80272d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80272d8:	f003 0302 	and.w	r3, r3, #2
 80272dc:	2b00      	cmp	r3, #0
 80272de:	d1ee      	bne.n	80272be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80272e0:	7dfb      	ldrb	r3, [r7, #23]
 80272e2:	2b01      	cmp	r3, #1
 80272e4:	d105      	bne.n	80272f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80272e6:	4b3c      	ldr	r3, [pc, #240]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80272e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80272ea:	4a3b      	ldr	r2, [pc, #236]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80272ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80272f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80272f2:	687b      	ldr	r3, [r7, #4]
 80272f4:	699b      	ldr	r3, [r3, #24]
 80272f6:	2b00      	cmp	r3, #0
 80272f8:	f000 80a4 	beq.w	8027444 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80272fc:	4b36      	ldr	r3, [pc, #216]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80272fe:	689b      	ldr	r3, [r3, #8]
 8027300:	f003 030c 	and.w	r3, r3, #12
 8027304:	2b08      	cmp	r3, #8
 8027306:	d06b      	beq.n	80273e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8027308:	687b      	ldr	r3, [r7, #4]
 802730a:	699b      	ldr	r3, [r3, #24]
 802730c:	2b02      	cmp	r3, #2
 802730e:	d149      	bne.n	80273a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027310:	4b31      	ldr	r3, [pc, #196]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027312:	681b      	ldr	r3, [r3, #0]
 8027314:	4a30      	ldr	r2, [pc, #192]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802731a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802731c:	f7fe f8dc 	bl	80254d8 <HAL_GetTick>
 8027320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027322:	e008      	b.n	8027336 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027324:	f7fe f8d8 	bl	80254d8 <HAL_GetTick>
 8027328:	4602      	mov	r2, r0
 802732a:	693b      	ldr	r3, [r7, #16]
 802732c:	1ad3      	subs	r3, r2, r3
 802732e:	2b02      	cmp	r3, #2
 8027330:	d901      	bls.n	8027336 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8027332:	2303      	movs	r3, #3
 8027334:	e087      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027336:	4b28      	ldr	r3, [pc, #160]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027338:	681b      	ldr	r3, [r3, #0]
 802733a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802733e:	2b00      	cmp	r3, #0
 8027340:	d1f0      	bne.n	8027324 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8027342:	687b      	ldr	r3, [r7, #4]
 8027344:	69da      	ldr	r2, [r3, #28]
 8027346:	687b      	ldr	r3, [r7, #4]
 8027348:	6a1b      	ldr	r3, [r3, #32]
 802734a:	431a      	orrs	r2, r3
 802734c:	687b      	ldr	r3, [r7, #4]
 802734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027350:	019b      	lsls	r3, r3, #6
 8027352:	431a      	orrs	r2, r3
 8027354:	687b      	ldr	r3, [r7, #4]
 8027356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027358:	085b      	lsrs	r3, r3, #1
 802735a:	3b01      	subs	r3, #1
 802735c:	041b      	lsls	r3, r3, #16
 802735e:	431a      	orrs	r2, r3
 8027360:	687b      	ldr	r3, [r7, #4]
 8027362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027364:	061b      	lsls	r3, r3, #24
 8027366:	4313      	orrs	r3, r2
 8027368:	4a1b      	ldr	r2, [pc, #108]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 802736a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802736e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8027370:	4b19      	ldr	r3, [pc, #100]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027372:	681b      	ldr	r3, [r3, #0]
 8027374:	4a18      	ldr	r2, [pc, #96]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802737a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802737c:	f7fe f8ac 	bl	80254d8 <HAL_GetTick>
 8027380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027382:	e008      	b.n	8027396 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027384:	f7fe f8a8 	bl	80254d8 <HAL_GetTick>
 8027388:	4602      	mov	r2, r0
 802738a:	693b      	ldr	r3, [r7, #16]
 802738c:	1ad3      	subs	r3, r2, r3
 802738e:	2b02      	cmp	r3, #2
 8027390:	d901      	bls.n	8027396 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8027392:	2303      	movs	r3, #3
 8027394:	e057      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027396:	4b10      	ldr	r3, [pc, #64]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 8027398:	681b      	ldr	r3, [r3, #0]
 802739a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802739e:	2b00      	cmp	r3, #0
 80273a0:	d0f0      	beq.n	8027384 <HAL_RCC_OscConfig+0x478>
 80273a2:	e04f      	b.n	8027444 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80273a4:	4b0c      	ldr	r3, [pc, #48]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80273a6:	681b      	ldr	r3, [r3, #0]
 80273a8:	4a0b      	ldr	r2, [pc, #44]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80273aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80273ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80273b0:	f7fe f892 	bl	80254d8 <HAL_GetTick>
 80273b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80273b6:	e008      	b.n	80273ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80273b8:	f7fe f88e 	bl	80254d8 <HAL_GetTick>
 80273bc:	4602      	mov	r2, r0
 80273be:	693b      	ldr	r3, [r7, #16]
 80273c0:	1ad3      	subs	r3, r2, r3
 80273c2:	2b02      	cmp	r3, #2
 80273c4:	d901      	bls.n	80273ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80273c6:	2303      	movs	r3, #3
 80273c8:	e03d      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80273ca:	4b03      	ldr	r3, [pc, #12]	; (80273d8 <HAL_RCC_OscConfig+0x4cc>)
 80273cc:	681b      	ldr	r3, [r3, #0]
 80273ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80273d2:	2b00      	cmp	r3, #0
 80273d4:	d1f0      	bne.n	80273b8 <HAL_RCC_OscConfig+0x4ac>
 80273d6:	e035      	b.n	8027444 <HAL_RCC_OscConfig+0x538>
 80273d8:	40023800 	.word	0x40023800
 80273dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80273e0:	4b1b      	ldr	r3, [pc, #108]	; (8027450 <HAL_RCC_OscConfig+0x544>)
 80273e2:	685b      	ldr	r3, [r3, #4]
 80273e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80273e6:	687b      	ldr	r3, [r7, #4]
 80273e8:	699b      	ldr	r3, [r3, #24]
 80273ea:	2b01      	cmp	r3, #1
 80273ec:	d028      	beq.n	8027440 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80273ee:	68fb      	ldr	r3, [r7, #12]
 80273f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80273f4:	687b      	ldr	r3, [r7, #4]
 80273f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80273f8:	429a      	cmp	r2, r3
 80273fa:	d121      	bne.n	8027440 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80273fc:	68fb      	ldr	r3, [r7, #12]
 80273fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8027402:	687b      	ldr	r3, [r7, #4]
 8027404:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027406:	429a      	cmp	r2, r3
 8027408:	d11a      	bne.n	8027440 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 802740a:	68fa      	ldr	r2, [r7, #12]
 802740c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8027410:	4013      	ands	r3, r2
 8027412:	687a      	ldr	r2, [r7, #4]
 8027414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8027416:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8027418:	4293      	cmp	r3, r2
 802741a:	d111      	bne.n	8027440 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 802741c:	68fb      	ldr	r3, [r7, #12]
 802741e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8027422:	687b      	ldr	r3, [r7, #4]
 8027424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027426:	085b      	lsrs	r3, r3, #1
 8027428:	3b01      	subs	r3, #1
 802742a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 802742c:	429a      	cmp	r2, r3
 802742e:	d107      	bne.n	8027440 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8027430:	68fb      	ldr	r3, [r7, #12]
 8027432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8027436:	687b      	ldr	r3, [r7, #4]
 8027438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802743a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 802743c:	429a      	cmp	r2, r3
 802743e:	d001      	beq.n	8027444 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8027440:	2301      	movs	r3, #1
 8027442:	e000      	b.n	8027446 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8027444:	2300      	movs	r3, #0
}
 8027446:	4618      	mov	r0, r3
 8027448:	3718      	adds	r7, #24
 802744a:	46bd      	mov	sp, r7
 802744c:	bd80      	pop	{r7, pc}
 802744e:	bf00      	nop
 8027450:	40023800 	.word	0x40023800

08027454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8027454:	b580      	push	{r7, lr}
 8027456:	b084      	sub	sp, #16
 8027458:	af00      	add	r7, sp, #0
 802745a:	6078      	str	r0, [r7, #4]
 802745c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 802745e:	2300      	movs	r3, #0
 8027460:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8027462:	687b      	ldr	r3, [r7, #4]
 8027464:	2b00      	cmp	r3, #0
 8027466:	d101      	bne.n	802746c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8027468:	2301      	movs	r3, #1
 802746a:	e0d0      	b.n	802760e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 802746c:	4b6a      	ldr	r3, [pc, #424]	; (8027618 <HAL_RCC_ClockConfig+0x1c4>)
 802746e:	681b      	ldr	r3, [r3, #0]
 8027470:	f003 030f 	and.w	r3, r3, #15
 8027474:	683a      	ldr	r2, [r7, #0]
 8027476:	429a      	cmp	r2, r3
 8027478:	d910      	bls.n	802749c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802747a:	4b67      	ldr	r3, [pc, #412]	; (8027618 <HAL_RCC_ClockConfig+0x1c4>)
 802747c:	681b      	ldr	r3, [r3, #0]
 802747e:	f023 020f 	bic.w	r2, r3, #15
 8027482:	4965      	ldr	r1, [pc, #404]	; (8027618 <HAL_RCC_ClockConfig+0x1c4>)
 8027484:	683b      	ldr	r3, [r7, #0]
 8027486:	4313      	orrs	r3, r2
 8027488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802748a:	4b63      	ldr	r3, [pc, #396]	; (8027618 <HAL_RCC_ClockConfig+0x1c4>)
 802748c:	681b      	ldr	r3, [r3, #0]
 802748e:	f003 030f 	and.w	r3, r3, #15
 8027492:	683a      	ldr	r2, [r7, #0]
 8027494:	429a      	cmp	r2, r3
 8027496:	d001      	beq.n	802749c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8027498:	2301      	movs	r3, #1
 802749a:	e0b8      	b.n	802760e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802749c:	687b      	ldr	r3, [r7, #4]
 802749e:	681b      	ldr	r3, [r3, #0]
 80274a0:	f003 0302 	and.w	r3, r3, #2
 80274a4:	2b00      	cmp	r3, #0
 80274a6:	d020      	beq.n	80274ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80274a8:	687b      	ldr	r3, [r7, #4]
 80274aa:	681b      	ldr	r3, [r3, #0]
 80274ac:	f003 0304 	and.w	r3, r3, #4
 80274b0:	2b00      	cmp	r3, #0
 80274b2:	d005      	beq.n	80274c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80274b4:	4b59      	ldr	r3, [pc, #356]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80274b6:	689b      	ldr	r3, [r3, #8]
 80274b8:	4a58      	ldr	r2, [pc, #352]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80274ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80274be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80274c0:	687b      	ldr	r3, [r7, #4]
 80274c2:	681b      	ldr	r3, [r3, #0]
 80274c4:	f003 0308 	and.w	r3, r3, #8
 80274c8:	2b00      	cmp	r3, #0
 80274ca:	d005      	beq.n	80274d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80274cc:	4b53      	ldr	r3, [pc, #332]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80274ce:	689b      	ldr	r3, [r3, #8]
 80274d0:	4a52      	ldr	r2, [pc, #328]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80274d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80274d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80274d8:	4b50      	ldr	r3, [pc, #320]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80274da:	689b      	ldr	r3, [r3, #8]
 80274dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80274e0:	687b      	ldr	r3, [r7, #4]
 80274e2:	689b      	ldr	r3, [r3, #8]
 80274e4:	494d      	ldr	r1, [pc, #308]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80274e6:	4313      	orrs	r3, r2
 80274e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80274ea:	687b      	ldr	r3, [r7, #4]
 80274ec:	681b      	ldr	r3, [r3, #0]
 80274ee:	f003 0301 	and.w	r3, r3, #1
 80274f2:	2b00      	cmp	r3, #0
 80274f4:	d040      	beq.n	8027578 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80274f6:	687b      	ldr	r3, [r7, #4]
 80274f8:	685b      	ldr	r3, [r3, #4]
 80274fa:	2b01      	cmp	r3, #1
 80274fc:	d107      	bne.n	802750e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80274fe:	4b47      	ldr	r3, [pc, #284]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 8027500:	681b      	ldr	r3, [r3, #0]
 8027502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027506:	2b00      	cmp	r3, #0
 8027508:	d115      	bne.n	8027536 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 802750a:	2301      	movs	r3, #1
 802750c:	e07f      	b.n	802760e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802750e:	687b      	ldr	r3, [r7, #4]
 8027510:	685b      	ldr	r3, [r3, #4]
 8027512:	2b02      	cmp	r3, #2
 8027514:	d107      	bne.n	8027526 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027516:	4b41      	ldr	r3, [pc, #260]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 8027518:	681b      	ldr	r3, [r3, #0]
 802751a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802751e:	2b00      	cmp	r3, #0
 8027520:	d109      	bne.n	8027536 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8027522:	2301      	movs	r3, #1
 8027524:	e073      	b.n	802760e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027526:	4b3d      	ldr	r3, [pc, #244]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 8027528:	681b      	ldr	r3, [r3, #0]
 802752a:	f003 0302 	and.w	r3, r3, #2
 802752e:	2b00      	cmp	r3, #0
 8027530:	d101      	bne.n	8027536 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8027532:	2301      	movs	r3, #1
 8027534:	e06b      	b.n	802760e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8027536:	4b39      	ldr	r3, [pc, #228]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 8027538:	689b      	ldr	r3, [r3, #8]
 802753a:	f023 0203 	bic.w	r2, r3, #3
 802753e:	687b      	ldr	r3, [r7, #4]
 8027540:	685b      	ldr	r3, [r3, #4]
 8027542:	4936      	ldr	r1, [pc, #216]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 8027544:	4313      	orrs	r3, r2
 8027546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027548:	f7fd ffc6 	bl	80254d8 <HAL_GetTick>
 802754c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802754e:	e00a      	b.n	8027566 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8027550:	f7fd ffc2 	bl	80254d8 <HAL_GetTick>
 8027554:	4602      	mov	r2, r0
 8027556:	68fb      	ldr	r3, [r7, #12]
 8027558:	1ad3      	subs	r3, r2, r3
 802755a:	f241 3288 	movw	r2, #5000	; 0x1388
 802755e:	4293      	cmp	r3, r2
 8027560:	d901      	bls.n	8027566 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8027562:	2303      	movs	r3, #3
 8027564:	e053      	b.n	802760e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027566:	4b2d      	ldr	r3, [pc, #180]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 8027568:	689b      	ldr	r3, [r3, #8]
 802756a:	f003 020c 	and.w	r2, r3, #12
 802756e:	687b      	ldr	r3, [r7, #4]
 8027570:	685b      	ldr	r3, [r3, #4]
 8027572:	009b      	lsls	r3, r3, #2
 8027574:	429a      	cmp	r2, r3
 8027576:	d1eb      	bne.n	8027550 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8027578:	4b27      	ldr	r3, [pc, #156]	; (8027618 <HAL_RCC_ClockConfig+0x1c4>)
 802757a:	681b      	ldr	r3, [r3, #0]
 802757c:	f003 030f 	and.w	r3, r3, #15
 8027580:	683a      	ldr	r2, [r7, #0]
 8027582:	429a      	cmp	r2, r3
 8027584:	d210      	bcs.n	80275a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027586:	4b24      	ldr	r3, [pc, #144]	; (8027618 <HAL_RCC_ClockConfig+0x1c4>)
 8027588:	681b      	ldr	r3, [r3, #0]
 802758a:	f023 020f 	bic.w	r2, r3, #15
 802758e:	4922      	ldr	r1, [pc, #136]	; (8027618 <HAL_RCC_ClockConfig+0x1c4>)
 8027590:	683b      	ldr	r3, [r7, #0]
 8027592:	4313      	orrs	r3, r2
 8027594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8027596:	4b20      	ldr	r3, [pc, #128]	; (8027618 <HAL_RCC_ClockConfig+0x1c4>)
 8027598:	681b      	ldr	r3, [r3, #0]
 802759a:	f003 030f 	and.w	r3, r3, #15
 802759e:	683a      	ldr	r2, [r7, #0]
 80275a0:	429a      	cmp	r2, r3
 80275a2:	d001      	beq.n	80275a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80275a4:	2301      	movs	r3, #1
 80275a6:	e032      	b.n	802760e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80275a8:	687b      	ldr	r3, [r7, #4]
 80275aa:	681b      	ldr	r3, [r3, #0]
 80275ac:	f003 0304 	and.w	r3, r3, #4
 80275b0:	2b00      	cmp	r3, #0
 80275b2:	d008      	beq.n	80275c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80275b4:	4b19      	ldr	r3, [pc, #100]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80275b6:	689b      	ldr	r3, [r3, #8]
 80275b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80275bc:	687b      	ldr	r3, [r7, #4]
 80275be:	68db      	ldr	r3, [r3, #12]
 80275c0:	4916      	ldr	r1, [pc, #88]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80275c2:	4313      	orrs	r3, r2
 80275c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80275c6:	687b      	ldr	r3, [r7, #4]
 80275c8:	681b      	ldr	r3, [r3, #0]
 80275ca:	f003 0308 	and.w	r3, r3, #8
 80275ce:	2b00      	cmp	r3, #0
 80275d0:	d009      	beq.n	80275e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80275d2:	4b12      	ldr	r3, [pc, #72]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80275d4:	689b      	ldr	r3, [r3, #8]
 80275d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80275da:	687b      	ldr	r3, [r7, #4]
 80275dc:	691b      	ldr	r3, [r3, #16]
 80275de:	00db      	lsls	r3, r3, #3
 80275e0:	490e      	ldr	r1, [pc, #56]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80275e2:	4313      	orrs	r3, r2
 80275e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80275e6:	f000 f831 	bl	802764c <HAL_RCC_GetSysClockFreq>
 80275ea:	4601      	mov	r1, r0
 80275ec:	4b0b      	ldr	r3, [pc, #44]	; (802761c <HAL_RCC_ClockConfig+0x1c8>)
 80275ee:	689b      	ldr	r3, [r3, #8]
 80275f0:	091b      	lsrs	r3, r3, #4
 80275f2:	f003 030f 	and.w	r3, r3, #15
 80275f6:	4a0a      	ldr	r2, [pc, #40]	; (8027620 <HAL_RCC_ClockConfig+0x1cc>)
 80275f8:	5cd3      	ldrb	r3, [r2, r3]
 80275fa:	fa21 f303 	lsr.w	r3, r1, r3
 80275fe:	4a09      	ldr	r2, [pc, #36]	; (8027624 <HAL_RCC_ClockConfig+0x1d0>)
 8027600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8027602:	4b09      	ldr	r3, [pc, #36]	; (8027628 <HAL_RCC_ClockConfig+0x1d4>)
 8027604:	681b      	ldr	r3, [r3, #0]
 8027606:	4618      	mov	r0, r3
 8027608:	f7d9 ffda 	bl	80015c0 <HAL_InitTick>

  return HAL_OK;
 802760c:	2300      	movs	r3, #0
}
 802760e:	4618      	mov	r0, r3
 8027610:	3710      	adds	r7, #16
 8027612:	46bd      	mov	sp, r7
 8027614:	bd80      	pop	{r7, pc}
 8027616:	bf00      	nop
 8027618:	40023c00 	.word	0x40023c00
 802761c:	40023800 	.word	0x40023800
 8027620:	0802d280 	.word	0x0802d280
 8027624:	20000000 	.word	0x20000000
 8027628:	2000004c 	.word	0x2000004c

0802762c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 802762c:	b480      	push	{r7}
 802762e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8027630:	4b05      	ldr	r3, [pc, #20]	; (8027648 <HAL_RCC_EnableCSS+0x1c>)
 8027632:	681b      	ldr	r3, [r3, #0]
 8027634:	4a04      	ldr	r2, [pc, #16]	; (8027648 <HAL_RCC_EnableCSS+0x1c>)
 8027636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802763a:	6013      	str	r3, [r2, #0]
}
 802763c:	bf00      	nop
 802763e:	46bd      	mov	sp, r7
 8027640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027644:	4770      	bx	lr
 8027646:	bf00      	nop
 8027648:	40023800 	.word	0x40023800

0802764c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802764c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802764e:	b085      	sub	sp, #20
 8027650:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8027652:	2300      	movs	r3, #0
 8027654:	607b      	str	r3, [r7, #4]
 8027656:	2300      	movs	r3, #0
 8027658:	60fb      	str	r3, [r7, #12]
 802765a:	2300      	movs	r3, #0
 802765c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 802765e:	2300      	movs	r3, #0
 8027660:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8027662:	4b50      	ldr	r3, [pc, #320]	; (80277a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8027664:	689b      	ldr	r3, [r3, #8]
 8027666:	f003 030c 	and.w	r3, r3, #12
 802766a:	2b04      	cmp	r3, #4
 802766c:	d007      	beq.n	802767e <HAL_RCC_GetSysClockFreq+0x32>
 802766e:	2b08      	cmp	r3, #8
 8027670:	d008      	beq.n	8027684 <HAL_RCC_GetSysClockFreq+0x38>
 8027672:	2b00      	cmp	r3, #0
 8027674:	f040 808d 	bne.w	8027792 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8027678:	4b4b      	ldr	r3, [pc, #300]	; (80277a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 802767a:	60bb      	str	r3, [r7, #8]
      break;
 802767c:	e08c      	b.n	8027798 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802767e:	4b4b      	ldr	r3, [pc, #300]	; (80277ac <HAL_RCC_GetSysClockFreq+0x160>)
 8027680:	60bb      	str	r3, [r7, #8]
      break;
 8027682:	e089      	b.n	8027798 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027684:	4b47      	ldr	r3, [pc, #284]	; (80277a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8027686:	685b      	ldr	r3, [r3, #4]
 8027688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802768c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 802768e:	4b45      	ldr	r3, [pc, #276]	; (80277a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8027690:	685b      	ldr	r3, [r3, #4]
 8027692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027696:	2b00      	cmp	r3, #0
 8027698:	d023      	beq.n	80276e2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802769a:	4b42      	ldr	r3, [pc, #264]	; (80277a4 <HAL_RCC_GetSysClockFreq+0x158>)
 802769c:	685b      	ldr	r3, [r3, #4]
 802769e:	099b      	lsrs	r3, r3, #6
 80276a0:	f04f 0400 	mov.w	r4, #0
 80276a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80276a8:	f04f 0200 	mov.w	r2, #0
 80276ac:	ea03 0501 	and.w	r5, r3, r1
 80276b0:	ea04 0602 	and.w	r6, r4, r2
 80276b4:	4a3d      	ldr	r2, [pc, #244]	; (80277ac <HAL_RCC_GetSysClockFreq+0x160>)
 80276b6:	fb02 f106 	mul.w	r1, r2, r6
 80276ba:	2200      	movs	r2, #0
 80276bc:	fb02 f205 	mul.w	r2, r2, r5
 80276c0:	440a      	add	r2, r1
 80276c2:	493a      	ldr	r1, [pc, #232]	; (80277ac <HAL_RCC_GetSysClockFreq+0x160>)
 80276c4:	fba5 0101 	umull	r0, r1, r5, r1
 80276c8:	1853      	adds	r3, r2, r1
 80276ca:	4619      	mov	r1, r3
 80276cc:	687b      	ldr	r3, [r7, #4]
 80276ce:	f04f 0400 	mov.w	r4, #0
 80276d2:	461a      	mov	r2, r3
 80276d4:	4623      	mov	r3, r4
 80276d6:	f7d8 fda9 	bl	800022c <__aeabi_uldivmod>
 80276da:	4603      	mov	r3, r0
 80276dc:	460c      	mov	r4, r1
 80276de:	60fb      	str	r3, [r7, #12]
 80276e0:	e049      	b.n	8027776 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80276e2:	4b30      	ldr	r3, [pc, #192]	; (80277a4 <HAL_RCC_GetSysClockFreq+0x158>)
 80276e4:	685b      	ldr	r3, [r3, #4]
 80276e6:	099b      	lsrs	r3, r3, #6
 80276e8:	f04f 0400 	mov.w	r4, #0
 80276ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80276f0:	f04f 0200 	mov.w	r2, #0
 80276f4:	ea03 0501 	and.w	r5, r3, r1
 80276f8:	ea04 0602 	and.w	r6, r4, r2
 80276fc:	4629      	mov	r1, r5
 80276fe:	4632      	mov	r2, r6
 8027700:	f04f 0300 	mov.w	r3, #0
 8027704:	f04f 0400 	mov.w	r4, #0
 8027708:	0154      	lsls	r4, r2, #5
 802770a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802770e:	014b      	lsls	r3, r1, #5
 8027710:	4619      	mov	r1, r3
 8027712:	4622      	mov	r2, r4
 8027714:	1b49      	subs	r1, r1, r5
 8027716:	eb62 0206 	sbc.w	r2, r2, r6
 802771a:	f04f 0300 	mov.w	r3, #0
 802771e:	f04f 0400 	mov.w	r4, #0
 8027722:	0194      	lsls	r4, r2, #6
 8027724:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8027728:	018b      	lsls	r3, r1, #6
 802772a:	1a5b      	subs	r3, r3, r1
 802772c:	eb64 0402 	sbc.w	r4, r4, r2
 8027730:	f04f 0100 	mov.w	r1, #0
 8027734:	f04f 0200 	mov.w	r2, #0
 8027738:	00e2      	lsls	r2, r4, #3
 802773a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 802773e:	00d9      	lsls	r1, r3, #3
 8027740:	460b      	mov	r3, r1
 8027742:	4614      	mov	r4, r2
 8027744:	195b      	adds	r3, r3, r5
 8027746:	eb44 0406 	adc.w	r4, r4, r6
 802774a:	f04f 0100 	mov.w	r1, #0
 802774e:	f04f 0200 	mov.w	r2, #0
 8027752:	02a2      	lsls	r2, r4, #10
 8027754:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8027758:	0299      	lsls	r1, r3, #10
 802775a:	460b      	mov	r3, r1
 802775c:	4614      	mov	r4, r2
 802775e:	4618      	mov	r0, r3
 8027760:	4621      	mov	r1, r4
 8027762:	687b      	ldr	r3, [r7, #4]
 8027764:	f04f 0400 	mov.w	r4, #0
 8027768:	461a      	mov	r2, r3
 802776a:	4623      	mov	r3, r4
 802776c:	f7d8 fd5e 	bl	800022c <__aeabi_uldivmod>
 8027770:	4603      	mov	r3, r0
 8027772:	460c      	mov	r4, r1
 8027774:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8027776:	4b0b      	ldr	r3, [pc, #44]	; (80277a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8027778:	685b      	ldr	r3, [r3, #4]
 802777a:	0c1b      	lsrs	r3, r3, #16
 802777c:	f003 0303 	and.w	r3, r3, #3
 8027780:	3301      	adds	r3, #1
 8027782:	005b      	lsls	r3, r3, #1
 8027784:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8027786:	68fa      	ldr	r2, [r7, #12]
 8027788:	683b      	ldr	r3, [r7, #0]
 802778a:	fbb2 f3f3 	udiv	r3, r2, r3
 802778e:	60bb      	str	r3, [r7, #8]
      break;
 8027790:	e002      	b.n	8027798 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8027792:	4b05      	ldr	r3, [pc, #20]	; (80277a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8027794:	60bb      	str	r3, [r7, #8]
      break;
 8027796:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027798:	68bb      	ldr	r3, [r7, #8]
}
 802779a:	4618      	mov	r0, r3
 802779c:	3714      	adds	r7, #20
 802779e:	46bd      	mov	sp, r7
 80277a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80277a2:	bf00      	nop
 80277a4:	40023800 	.word	0x40023800
 80277a8:	00f42400 	.word	0x00f42400
 80277ac:	017d7840 	.word	0x017d7840

080277b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80277b0:	b480      	push	{r7}
 80277b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80277b4:	4b03      	ldr	r3, [pc, #12]	; (80277c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80277b6:	681b      	ldr	r3, [r3, #0]
}
 80277b8:	4618      	mov	r0, r3
 80277ba:	46bd      	mov	sp, r7
 80277bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277c0:	4770      	bx	lr
 80277c2:	bf00      	nop
 80277c4:	20000000 	.word	0x20000000

080277c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80277c8:	b580      	push	{r7, lr}
 80277ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80277cc:	f7ff fff0 	bl	80277b0 <HAL_RCC_GetHCLKFreq>
 80277d0:	4601      	mov	r1, r0
 80277d2:	4b05      	ldr	r3, [pc, #20]	; (80277e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80277d4:	689b      	ldr	r3, [r3, #8]
 80277d6:	0b5b      	lsrs	r3, r3, #13
 80277d8:	f003 0307 	and.w	r3, r3, #7
 80277dc:	4a03      	ldr	r2, [pc, #12]	; (80277ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80277de:	5cd3      	ldrb	r3, [r2, r3]
 80277e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80277e4:	4618      	mov	r0, r3
 80277e6:	bd80      	pop	{r7, pc}
 80277e8:	40023800 	.word	0x40023800
 80277ec:	0802d290 	.word	0x0802d290

080277f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80277f0:	b480      	push	{r7}
 80277f2:	b083      	sub	sp, #12
 80277f4:	af00      	add	r7, sp, #0
 80277f6:	6078      	str	r0, [r7, #4]
 80277f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80277fa:	687b      	ldr	r3, [r7, #4]
 80277fc:	220f      	movs	r2, #15
 80277fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027800:	4b12      	ldr	r3, [pc, #72]	; (802784c <HAL_RCC_GetClockConfig+0x5c>)
 8027802:	689b      	ldr	r3, [r3, #8]
 8027804:	f003 0203 	and.w	r2, r3, #3
 8027808:	687b      	ldr	r3, [r7, #4]
 802780a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 802780c:	4b0f      	ldr	r3, [pc, #60]	; (802784c <HAL_RCC_GetClockConfig+0x5c>)
 802780e:	689b      	ldr	r3, [r3, #8]
 8027810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027814:	687b      	ldr	r3, [r7, #4]
 8027816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8027818:	4b0c      	ldr	r3, [pc, #48]	; (802784c <HAL_RCC_GetClockConfig+0x5c>)
 802781a:	689b      	ldr	r3, [r3, #8]
 802781c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027820:	687b      	ldr	r3, [r7, #4]
 8027822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8027824:	4b09      	ldr	r3, [pc, #36]	; (802784c <HAL_RCC_GetClockConfig+0x5c>)
 8027826:	689b      	ldr	r3, [r3, #8]
 8027828:	08db      	lsrs	r3, r3, #3
 802782a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 802782e:	687b      	ldr	r3, [r7, #4]
 8027830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027832:	4b07      	ldr	r3, [pc, #28]	; (8027850 <HAL_RCC_GetClockConfig+0x60>)
 8027834:	681b      	ldr	r3, [r3, #0]
 8027836:	f003 020f 	and.w	r2, r3, #15
 802783a:	683b      	ldr	r3, [r7, #0]
 802783c:	601a      	str	r2, [r3, #0]
}
 802783e:	bf00      	nop
 8027840:	370c      	adds	r7, #12
 8027842:	46bd      	mov	sp, r7
 8027844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027848:	4770      	bx	lr
 802784a:	bf00      	nop
 802784c:	40023800 	.word	0x40023800
 8027850:	40023c00 	.word	0x40023c00

08027854 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8027854:	b580      	push	{r7, lr}
 8027856:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8027858:	4b06      	ldr	r3, [pc, #24]	; (8027874 <HAL_RCC_NMI_IRQHandler+0x20>)
 802785a:	68db      	ldr	r3, [r3, #12]
 802785c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027860:	2b80      	cmp	r3, #128	; 0x80
 8027862:	d104      	bne.n	802786e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8027864:	f000 f80a 	bl	802787c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8027868:	4b03      	ldr	r3, [pc, #12]	; (8027878 <HAL_RCC_NMI_IRQHandler+0x24>)
 802786a:	2280      	movs	r2, #128	; 0x80
 802786c:	701a      	strb	r2, [r3, #0]
  }
}
 802786e:	bf00      	nop
 8027870:	bd80      	pop	{r7, pc}
 8027872:	bf00      	nop
 8027874:	40023800 	.word	0x40023800
 8027878:	4002380e 	.word	0x4002380e

0802787c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 802787c:	b480      	push	{r7}
 802787e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8027880:	bf00      	nop
 8027882:	46bd      	mov	sp, r7
 8027884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027888:	4770      	bx	lr
	...

0802788c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802788c:	b580      	push	{r7, lr}
 802788e:	b088      	sub	sp, #32
 8027890:	af00      	add	r7, sp, #0
 8027892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8027894:	2300      	movs	r3, #0
 8027896:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8027898:	2300      	movs	r3, #0
 802789a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 802789c:	2300      	movs	r3, #0
 802789e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80278a0:	2300      	movs	r3, #0
 80278a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80278a4:	2300      	movs	r3, #0
 80278a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80278a8:	687b      	ldr	r3, [r7, #4]
 80278aa:	681b      	ldr	r3, [r3, #0]
 80278ac:	f003 0301 	and.w	r3, r3, #1
 80278b0:	2b00      	cmp	r3, #0
 80278b2:	d012      	beq.n	80278da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80278b4:	4b69      	ldr	r3, [pc, #420]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80278b6:	689b      	ldr	r3, [r3, #8]
 80278b8:	4a68      	ldr	r2, [pc, #416]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80278ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80278be:	6093      	str	r3, [r2, #8]
 80278c0:	4b66      	ldr	r3, [pc, #408]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80278c2:	689a      	ldr	r2, [r3, #8]
 80278c4:	687b      	ldr	r3, [r7, #4]
 80278c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80278c8:	4964      	ldr	r1, [pc, #400]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80278ca:	4313      	orrs	r3, r2
 80278cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80278ce:	687b      	ldr	r3, [r7, #4]
 80278d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80278d2:	2b00      	cmp	r3, #0
 80278d4:	d101      	bne.n	80278da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80278d6:	2301      	movs	r3, #1
 80278d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80278da:	687b      	ldr	r3, [r7, #4]
 80278dc:	681b      	ldr	r3, [r3, #0]
 80278de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80278e2:	2b00      	cmp	r3, #0
 80278e4:	d017      	beq.n	8027916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80278e6:	4b5d      	ldr	r3, [pc, #372]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80278e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80278ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80278f0:	687b      	ldr	r3, [r7, #4]
 80278f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80278f4:	4959      	ldr	r1, [pc, #356]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80278f6:	4313      	orrs	r3, r2
 80278f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80278fc:	687b      	ldr	r3, [r7, #4]
 80278fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8027904:	d101      	bne.n	802790a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8027906:	2301      	movs	r3, #1
 8027908:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 802790a:	687b      	ldr	r3, [r7, #4]
 802790c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802790e:	2b00      	cmp	r3, #0
 8027910:	d101      	bne.n	8027916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8027912:	2301      	movs	r3, #1
 8027914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8027916:	687b      	ldr	r3, [r7, #4]
 8027918:	681b      	ldr	r3, [r3, #0]
 802791a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802791e:	2b00      	cmp	r3, #0
 8027920:	d017      	beq.n	8027952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8027922:	4b4e      	ldr	r3, [pc, #312]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 802792c:	687b      	ldr	r3, [r7, #4]
 802792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027930:	494a      	ldr	r1, [pc, #296]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027932:	4313      	orrs	r3, r2
 8027934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8027938:	687b      	ldr	r3, [r7, #4]
 802793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802793c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027940:	d101      	bne.n	8027946 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8027942:	2301      	movs	r3, #1
 8027944:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8027946:	687b      	ldr	r3, [r7, #4]
 8027948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802794a:	2b00      	cmp	r3, #0
 802794c:	d101      	bne.n	8027952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 802794e:	2301      	movs	r3, #1
 8027950:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8027952:	687b      	ldr	r3, [r7, #4]
 8027954:	681b      	ldr	r3, [r3, #0]
 8027956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802795a:	2b00      	cmp	r3, #0
 802795c:	d001      	beq.n	8027962 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 802795e:	2301      	movs	r3, #1
 8027960:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8027962:	687b      	ldr	r3, [r7, #4]
 8027964:	681b      	ldr	r3, [r3, #0]
 8027966:	f003 0320 	and.w	r3, r3, #32
 802796a:	2b00      	cmp	r3, #0
 802796c:	f000 808b 	beq.w	8027a86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8027970:	4b3a      	ldr	r3, [pc, #232]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027974:	4a39      	ldr	r2, [pc, #228]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802797a:	6413      	str	r3, [r2, #64]	; 0x40
 802797c:	4b37      	ldr	r3, [pc, #220]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027984:	60bb      	str	r3, [r7, #8]
 8027986:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8027988:	4b35      	ldr	r3, [pc, #212]	; (8027a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 802798a:	681b      	ldr	r3, [r3, #0]
 802798c:	4a34      	ldr	r2, [pc, #208]	; (8027a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 802798e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027994:	f7fd fda0 	bl	80254d8 <HAL_GetTick>
 8027998:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 802799a:	e008      	b.n	80279ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802799c:	f7fd fd9c 	bl	80254d8 <HAL_GetTick>
 80279a0:	4602      	mov	r2, r0
 80279a2:	697b      	ldr	r3, [r7, #20]
 80279a4:	1ad3      	subs	r3, r2, r3
 80279a6:	2b64      	cmp	r3, #100	; 0x64
 80279a8:	d901      	bls.n	80279ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80279aa:	2303      	movs	r3, #3
 80279ac:	e355      	b.n	802805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80279ae:	4b2c      	ldr	r3, [pc, #176]	; (8027a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80279b0:	681b      	ldr	r3, [r3, #0]
 80279b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80279b6:	2b00      	cmp	r3, #0
 80279b8:	d0f0      	beq.n	802799c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80279ba:	4b28      	ldr	r3, [pc, #160]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80279be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80279c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80279c4:	693b      	ldr	r3, [r7, #16]
 80279c6:	2b00      	cmp	r3, #0
 80279c8:	d035      	beq.n	8027a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80279ca:	687b      	ldr	r3, [r7, #4]
 80279cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80279d2:	693a      	ldr	r2, [r7, #16]
 80279d4:	429a      	cmp	r2, r3
 80279d6:	d02e      	beq.n	8027a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80279d8:	4b20      	ldr	r3, [pc, #128]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80279dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80279e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80279e2:	4b1e      	ldr	r3, [pc, #120]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80279e6:	4a1d      	ldr	r2, [pc, #116]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80279ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80279ee:	4b1b      	ldr	r3, [pc, #108]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80279f2:	4a1a      	ldr	r2, [pc, #104]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80279f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80279fa:	4a18      	ldr	r2, [pc, #96]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279fc:	693b      	ldr	r3, [r7, #16]
 80279fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8027a00:	4b16      	ldr	r3, [pc, #88]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027a04:	f003 0301 	and.w	r3, r3, #1
 8027a08:	2b01      	cmp	r3, #1
 8027a0a:	d114      	bne.n	8027a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027a0c:	f7fd fd64 	bl	80254d8 <HAL_GetTick>
 8027a10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027a12:	e00a      	b.n	8027a2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027a14:	f7fd fd60 	bl	80254d8 <HAL_GetTick>
 8027a18:	4602      	mov	r2, r0
 8027a1a:	697b      	ldr	r3, [r7, #20]
 8027a1c:	1ad3      	subs	r3, r2, r3
 8027a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8027a22:	4293      	cmp	r3, r2
 8027a24:	d901      	bls.n	8027a2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8027a26:	2303      	movs	r3, #3
 8027a28:	e317      	b.n	802805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027a2a:	4b0c      	ldr	r3, [pc, #48]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027a2e:	f003 0302 	and.w	r3, r3, #2
 8027a32:	2b00      	cmp	r3, #0
 8027a34:	d0ee      	beq.n	8027a14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8027a36:	687b      	ldr	r3, [r7, #4]
 8027a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8027a42:	d111      	bne.n	8027a68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8027a44:	4b05      	ldr	r3, [pc, #20]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027a46:	689b      	ldr	r3, [r3, #8]
 8027a48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8027a4c:	687b      	ldr	r3, [r7, #4]
 8027a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8027a50:	4b04      	ldr	r3, [pc, #16]	; (8027a64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8027a52:	400b      	ands	r3, r1
 8027a54:	4901      	ldr	r1, [pc, #4]	; (8027a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027a56:	4313      	orrs	r3, r2
 8027a58:	608b      	str	r3, [r1, #8]
 8027a5a:	e00b      	b.n	8027a74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8027a5c:	40023800 	.word	0x40023800
 8027a60:	40007000 	.word	0x40007000
 8027a64:	0ffffcff 	.word	0x0ffffcff
 8027a68:	4bb0      	ldr	r3, [pc, #704]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a6a:	689b      	ldr	r3, [r3, #8]
 8027a6c:	4aaf      	ldr	r2, [pc, #700]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8027a72:	6093      	str	r3, [r2, #8]
 8027a74:	4bad      	ldr	r3, [pc, #692]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8027a78:	687b      	ldr	r3, [r7, #4]
 8027a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027a80:	49aa      	ldr	r1, [pc, #680]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a82:	4313      	orrs	r3, r2
 8027a84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8027a86:	687b      	ldr	r3, [r7, #4]
 8027a88:	681b      	ldr	r3, [r3, #0]
 8027a8a:	f003 0310 	and.w	r3, r3, #16
 8027a8e:	2b00      	cmp	r3, #0
 8027a90:	d010      	beq.n	8027ab4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8027a92:	4ba6      	ldr	r3, [pc, #664]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027a98:	4aa4      	ldr	r2, [pc, #656]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027a9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8027aa2:	4ba2      	ldr	r3, [pc, #648]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027aa4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8027aa8:	687b      	ldr	r3, [r7, #4]
 8027aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027aac:	499f      	ldr	r1, [pc, #636]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027aae:	4313      	orrs	r3, r2
 8027ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8027ab4:	687b      	ldr	r3, [r7, #4]
 8027ab6:	681b      	ldr	r3, [r3, #0]
 8027ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027abc:	2b00      	cmp	r3, #0
 8027abe:	d00a      	beq.n	8027ad6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8027ac0:	4b9a      	ldr	r3, [pc, #616]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027ac6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027aca:	687b      	ldr	r3, [r7, #4]
 8027acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8027ace:	4997      	ldr	r1, [pc, #604]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027ad0:	4313      	orrs	r3, r2
 8027ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8027ad6:	687b      	ldr	r3, [r7, #4]
 8027ad8:	681b      	ldr	r3, [r3, #0]
 8027ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8027ade:	2b00      	cmp	r3, #0
 8027ae0:	d00a      	beq.n	8027af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8027ae2:	4b92      	ldr	r3, [pc, #584]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027ae8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8027aec:	687b      	ldr	r3, [r7, #4]
 8027aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027af0:	498e      	ldr	r1, [pc, #568]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027af2:	4313      	orrs	r3, r2
 8027af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8027af8:	687b      	ldr	r3, [r7, #4]
 8027afa:	681b      	ldr	r3, [r3, #0]
 8027afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027b00:	2b00      	cmp	r3, #0
 8027b02:	d00a      	beq.n	8027b1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8027b04:	4b89      	ldr	r3, [pc, #548]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8027b0e:	687b      	ldr	r3, [r7, #4]
 8027b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027b12:	4986      	ldr	r1, [pc, #536]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b14:	4313      	orrs	r3, r2
 8027b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8027b1a:	687b      	ldr	r3, [r7, #4]
 8027b1c:	681b      	ldr	r3, [r3, #0]
 8027b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027b22:	2b00      	cmp	r3, #0
 8027b24:	d00a      	beq.n	8027b3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8027b26:	4b81      	ldr	r3, [pc, #516]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8027b30:	687b      	ldr	r3, [r7, #4]
 8027b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027b34:	497d      	ldr	r1, [pc, #500]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b36:	4313      	orrs	r3, r2
 8027b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8027b3c:	687b      	ldr	r3, [r7, #4]
 8027b3e:	681b      	ldr	r3, [r3, #0]
 8027b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027b44:	2b00      	cmp	r3, #0
 8027b46:	d00a      	beq.n	8027b5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8027b48:	4b78      	ldr	r3, [pc, #480]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b4e:	f023 0203 	bic.w	r2, r3, #3
 8027b52:	687b      	ldr	r3, [r7, #4]
 8027b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027b56:	4975      	ldr	r1, [pc, #468]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b58:	4313      	orrs	r3, r2
 8027b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8027b5e:	687b      	ldr	r3, [r7, #4]
 8027b60:	681b      	ldr	r3, [r3, #0]
 8027b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027b66:	2b00      	cmp	r3, #0
 8027b68:	d00a      	beq.n	8027b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8027b6a:	4b70      	ldr	r3, [pc, #448]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b70:	f023 020c 	bic.w	r2, r3, #12
 8027b74:	687b      	ldr	r3, [r7, #4]
 8027b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027b78:	496c      	ldr	r1, [pc, #432]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b7a:	4313      	orrs	r3, r2
 8027b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8027b80:	687b      	ldr	r3, [r7, #4]
 8027b82:	681b      	ldr	r3, [r3, #0]
 8027b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027b88:	2b00      	cmp	r3, #0
 8027b8a:	d00a      	beq.n	8027ba2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8027b8c:	4b67      	ldr	r3, [pc, #412]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8027b96:	687b      	ldr	r3, [r7, #4]
 8027b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027b9a:	4964      	ldr	r1, [pc, #400]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b9c:	4313      	orrs	r3, r2
 8027b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8027ba2:	687b      	ldr	r3, [r7, #4]
 8027ba4:	681b      	ldr	r3, [r3, #0]
 8027ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027baa:	2b00      	cmp	r3, #0
 8027bac:	d00a      	beq.n	8027bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8027bae:	4b5f      	ldr	r3, [pc, #380]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027bb4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8027bb8:	687b      	ldr	r3, [r7, #4]
 8027bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027bbc:	495b      	ldr	r1, [pc, #364]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027bbe:	4313      	orrs	r3, r2
 8027bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8027bc4:	687b      	ldr	r3, [r7, #4]
 8027bc6:	681b      	ldr	r3, [r3, #0]
 8027bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027bcc:	2b00      	cmp	r3, #0
 8027bce:	d00a      	beq.n	8027be6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8027bd0:	4b56      	ldr	r3, [pc, #344]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8027bda:	687b      	ldr	r3, [r7, #4]
 8027bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027bde:	4953      	ldr	r1, [pc, #332]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027be0:	4313      	orrs	r3, r2
 8027be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8027be6:	687b      	ldr	r3, [r7, #4]
 8027be8:	681b      	ldr	r3, [r3, #0]
 8027bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027bee:	2b00      	cmp	r3, #0
 8027bf0:	d00a      	beq.n	8027c08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8027bf2:	4b4e      	ldr	r3, [pc, #312]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027bf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8027bfc:	687b      	ldr	r3, [r7, #4]
 8027bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027c00:	494a      	ldr	r1, [pc, #296]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c02:	4313      	orrs	r3, r2
 8027c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8027c08:	687b      	ldr	r3, [r7, #4]
 8027c0a:	681b      	ldr	r3, [r3, #0]
 8027c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8027c10:	2b00      	cmp	r3, #0
 8027c12:	d00a      	beq.n	8027c2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8027c14:	4b45      	ldr	r3, [pc, #276]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027c1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8027c1e:	687b      	ldr	r3, [r7, #4]
 8027c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027c22:	4942      	ldr	r1, [pc, #264]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c24:	4313      	orrs	r3, r2
 8027c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8027c2a:	687b      	ldr	r3, [r7, #4]
 8027c2c:	681b      	ldr	r3, [r3, #0]
 8027c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8027c32:	2b00      	cmp	r3, #0
 8027c34:	d00a      	beq.n	8027c4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8027c36:	4b3d      	ldr	r3, [pc, #244]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027c3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8027c40:	687b      	ldr	r3, [r7, #4]
 8027c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8027c44:	4939      	ldr	r1, [pc, #228]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c46:	4313      	orrs	r3, r2
 8027c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8027c4c:	687b      	ldr	r3, [r7, #4]
 8027c4e:	681b      	ldr	r3, [r3, #0]
 8027c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027c54:	2b00      	cmp	r3, #0
 8027c56:	d00a      	beq.n	8027c6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8027c58:	4b34      	ldr	r3, [pc, #208]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027c5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8027c62:	687b      	ldr	r3, [r7, #4]
 8027c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8027c66:	4931      	ldr	r1, [pc, #196]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c68:	4313      	orrs	r3, r2
 8027c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8027c6e:	687b      	ldr	r3, [r7, #4]
 8027c70:	681b      	ldr	r3, [r3, #0]
 8027c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027c76:	2b00      	cmp	r3, #0
 8027c78:	d011      	beq.n	8027c9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8027c7a:	4b2c      	ldr	r3, [pc, #176]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027c80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8027c84:	687b      	ldr	r3, [r7, #4]
 8027c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8027c88:	4928      	ldr	r1, [pc, #160]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c8a:	4313      	orrs	r3, r2
 8027c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8027c90:	687b      	ldr	r3, [r7, #4]
 8027c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8027c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8027c98:	d101      	bne.n	8027c9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8027c9a:	2301      	movs	r3, #1
 8027c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8027c9e:	687b      	ldr	r3, [r7, #4]
 8027ca0:	681b      	ldr	r3, [r3, #0]
 8027ca2:	f003 0308 	and.w	r3, r3, #8
 8027ca6:	2b00      	cmp	r3, #0
 8027ca8:	d001      	beq.n	8027cae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8027caa:	2301      	movs	r3, #1
 8027cac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8027cae:	687b      	ldr	r3, [r7, #4]
 8027cb0:	681b      	ldr	r3, [r3, #0]
 8027cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8027cb6:	2b00      	cmp	r3, #0
 8027cb8:	d00a      	beq.n	8027cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8027cba:	4b1c      	ldr	r3, [pc, #112]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027cc0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8027cc4:	687b      	ldr	r3, [r7, #4]
 8027cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027cc8:	4918      	ldr	r1, [pc, #96]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027cca:	4313      	orrs	r3, r2
 8027ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8027cd0:	687b      	ldr	r3, [r7, #4]
 8027cd2:	681b      	ldr	r3, [r3, #0]
 8027cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8027cd8:	2b00      	cmp	r3, #0
 8027cda:	d00b      	beq.n	8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8027cdc:	4b13      	ldr	r3, [pc, #76]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027ce2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8027ce6:	687b      	ldr	r3, [r7, #4]
 8027ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8027cec:	490f      	ldr	r1, [pc, #60]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027cee:	4313      	orrs	r3, r2
 8027cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8027cf4:	69fb      	ldr	r3, [r7, #28]
 8027cf6:	2b01      	cmp	r3, #1
 8027cf8:	d005      	beq.n	8027d06 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8027cfa:	687b      	ldr	r3, [r7, #4]
 8027cfc:	681b      	ldr	r3, [r3, #0]
 8027cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8027d02:	f040 80d8 	bne.w	8027eb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8027d06:	4b09      	ldr	r3, [pc, #36]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027d08:	681b      	ldr	r3, [r3, #0]
 8027d0a:	4a08      	ldr	r2, [pc, #32]	; (8027d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027d0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8027d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027d12:	f7fd fbe1 	bl	80254d8 <HAL_GetTick>
 8027d16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027d18:	e00a      	b.n	8027d30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8027d1a:	f7fd fbdd 	bl	80254d8 <HAL_GetTick>
 8027d1e:	4602      	mov	r2, r0
 8027d20:	697b      	ldr	r3, [r7, #20]
 8027d22:	1ad3      	subs	r3, r2, r3
 8027d24:	2b64      	cmp	r3, #100	; 0x64
 8027d26:	d903      	bls.n	8027d30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027d28:	2303      	movs	r3, #3
 8027d2a:	e196      	b.n	802805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8027d2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027d30:	4b6c      	ldr	r3, [pc, #432]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027d32:	681b      	ldr	r3, [r3, #0]
 8027d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027d38:	2b00      	cmp	r3, #0
 8027d3a:	d1ee      	bne.n	8027d1a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8027d3c:	687b      	ldr	r3, [r7, #4]
 8027d3e:	681b      	ldr	r3, [r3, #0]
 8027d40:	f003 0301 	and.w	r3, r3, #1
 8027d44:	2b00      	cmp	r3, #0
 8027d46:	d021      	beq.n	8027d8c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8027d48:	687b      	ldr	r3, [r7, #4]
 8027d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027d4c:	2b00      	cmp	r3, #0
 8027d4e:	d11d      	bne.n	8027d8c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8027d50:	4b64      	ldr	r3, [pc, #400]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027d56:	0c1b      	lsrs	r3, r3, #16
 8027d58:	f003 0303 	and.w	r3, r3, #3
 8027d5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8027d5e:	4b61      	ldr	r3, [pc, #388]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027d64:	0e1b      	lsrs	r3, r3, #24
 8027d66:	f003 030f 	and.w	r3, r3, #15
 8027d6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8027d6c:	687b      	ldr	r3, [r7, #4]
 8027d6e:	685b      	ldr	r3, [r3, #4]
 8027d70:	019a      	lsls	r2, r3, #6
 8027d72:	693b      	ldr	r3, [r7, #16]
 8027d74:	041b      	lsls	r3, r3, #16
 8027d76:	431a      	orrs	r2, r3
 8027d78:	68fb      	ldr	r3, [r7, #12]
 8027d7a:	061b      	lsls	r3, r3, #24
 8027d7c:	431a      	orrs	r2, r3
 8027d7e:	687b      	ldr	r3, [r7, #4]
 8027d80:	689b      	ldr	r3, [r3, #8]
 8027d82:	071b      	lsls	r3, r3, #28
 8027d84:	4957      	ldr	r1, [pc, #348]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027d86:	4313      	orrs	r3, r2
 8027d88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8027d8c:	687b      	ldr	r3, [r7, #4]
 8027d8e:	681b      	ldr	r3, [r3, #0]
 8027d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027d94:	2b00      	cmp	r3, #0
 8027d96:	d004      	beq.n	8027da2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8027d98:	687b      	ldr	r3, [r7, #4]
 8027d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8027da0:	d00a      	beq.n	8027db8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8027da2:	687b      	ldr	r3, [r7, #4]
 8027da4:	681b      	ldr	r3, [r3, #0]
 8027da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8027daa:	2b00      	cmp	r3, #0
 8027dac:	d02e      	beq.n	8027e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8027dae:	687b      	ldr	r3, [r7, #4]
 8027db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027db6:	d129      	bne.n	8027e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8027db8:	4b4a      	ldr	r3, [pc, #296]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027dbe:	0c1b      	lsrs	r3, r3, #16
 8027dc0:	f003 0303 	and.w	r3, r3, #3
 8027dc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8027dc6:	4b47      	ldr	r3, [pc, #284]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027dcc:	0f1b      	lsrs	r3, r3, #28
 8027dce:	f003 0307 	and.w	r3, r3, #7
 8027dd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8027dd4:	687b      	ldr	r3, [r7, #4]
 8027dd6:	685b      	ldr	r3, [r3, #4]
 8027dd8:	019a      	lsls	r2, r3, #6
 8027dda:	693b      	ldr	r3, [r7, #16]
 8027ddc:	041b      	lsls	r3, r3, #16
 8027dde:	431a      	orrs	r2, r3
 8027de0:	687b      	ldr	r3, [r7, #4]
 8027de2:	68db      	ldr	r3, [r3, #12]
 8027de4:	061b      	lsls	r3, r3, #24
 8027de6:	431a      	orrs	r2, r3
 8027de8:	68fb      	ldr	r3, [r7, #12]
 8027dea:	071b      	lsls	r3, r3, #28
 8027dec:	493d      	ldr	r1, [pc, #244]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027dee:	4313      	orrs	r3, r2
 8027df0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8027df4:	4b3b      	ldr	r3, [pc, #236]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027dfa:	f023 021f 	bic.w	r2, r3, #31
 8027dfe:	687b      	ldr	r3, [r7, #4]
 8027e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027e02:	3b01      	subs	r3, #1
 8027e04:	4937      	ldr	r1, [pc, #220]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e06:	4313      	orrs	r3, r2
 8027e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8027e0c:	687b      	ldr	r3, [r7, #4]
 8027e0e:	681b      	ldr	r3, [r3, #0]
 8027e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027e14:	2b00      	cmp	r3, #0
 8027e16:	d01d      	beq.n	8027e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8027e18:	4b32      	ldr	r3, [pc, #200]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027e1e:	0e1b      	lsrs	r3, r3, #24
 8027e20:	f003 030f 	and.w	r3, r3, #15
 8027e24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8027e26:	4b2f      	ldr	r3, [pc, #188]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027e2c:	0f1b      	lsrs	r3, r3, #28
 8027e2e:	f003 0307 	and.w	r3, r3, #7
 8027e32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8027e34:	687b      	ldr	r3, [r7, #4]
 8027e36:	685b      	ldr	r3, [r3, #4]
 8027e38:	019a      	lsls	r2, r3, #6
 8027e3a:	687b      	ldr	r3, [r7, #4]
 8027e3c:	691b      	ldr	r3, [r3, #16]
 8027e3e:	041b      	lsls	r3, r3, #16
 8027e40:	431a      	orrs	r2, r3
 8027e42:	693b      	ldr	r3, [r7, #16]
 8027e44:	061b      	lsls	r3, r3, #24
 8027e46:	431a      	orrs	r2, r3
 8027e48:	68fb      	ldr	r3, [r7, #12]
 8027e4a:	071b      	lsls	r3, r3, #28
 8027e4c:	4925      	ldr	r1, [pc, #148]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e4e:	4313      	orrs	r3, r2
 8027e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027e54:	687b      	ldr	r3, [r7, #4]
 8027e56:	681b      	ldr	r3, [r3, #0]
 8027e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027e5c:	2b00      	cmp	r3, #0
 8027e5e:	d011      	beq.n	8027e84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8027e60:	687b      	ldr	r3, [r7, #4]
 8027e62:	685b      	ldr	r3, [r3, #4]
 8027e64:	019a      	lsls	r2, r3, #6
 8027e66:	687b      	ldr	r3, [r7, #4]
 8027e68:	691b      	ldr	r3, [r3, #16]
 8027e6a:	041b      	lsls	r3, r3, #16
 8027e6c:	431a      	orrs	r2, r3
 8027e6e:	687b      	ldr	r3, [r7, #4]
 8027e70:	68db      	ldr	r3, [r3, #12]
 8027e72:	061b      	lsls	r3, r3, #24
 8027e74:	431a      	orrs	r2, r3
 8027e76:	687b      	ldr	r3, [r7, #4]
 8027e78:	689b      	ldr	r3, [r3, #8]
 8027e7a:	071b      	lsls	r3, r3, #28
 8027e7c:	4919      	ldr	r1, [pc, #100]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e7e:	4313      	orrs	r3, r2
 8027e80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027e84:	4b17      	ldr	r3, [pc, #92]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e86:	681b      	ldr	r3, [r3, #0]
 8027e88:	4a16      	ldr	r2, [pc, #88]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8027e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027e90:	f7fd fb22 	bl	80254d8 <HAL_GetTick>
 8027e94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027e96:	e008      	b.n	8027eaa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8027e98:	f7fd fb1e 	bl	80254d8 <HAL_GetTick>
 8027e9c:	4602      	mov	r2, r0
 8027e9e:	697b      	ldr	r3, [r7, #20]
 8027ea0:	1ad3      	subs	r3, r2, r3
 8027ea2:	2b64      	cmp	r3, #100	; 0x64
 8027ea4:	d901      	bls.n	8027eaa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027ea6:	2303      	movs	r3, #3
 8027ea8:	e0d7      	b.n	802805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027eaa:	4b0e      	ldr	r3, [pc, #56]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027eac:	681b      	ldr	r3, [r3, #0]
 8027eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027eb2:	2b00      	cmp	r3, #0
 8027eb4:	d0f0      	beq.n	8027e98 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8027eb6:	69bb      	ldr	r3, [r7, #24]
 8027eb8:	2b01      	cmp	r3, #1
 8027eba:	f040 80cd 	bne.w	8028058 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8027ebe:	4b09      	ldr	r3, [pc, #36]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027ec0:	681b      	ldr	r3, [r3, #0]
 8027ec2:	4a08      	ldr	r2, [pc, #32]	; (8027ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8027ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027eca:	f7fd fb05 	bl	80254d8 <HAL_GetTick>
 8027ece:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027ed0:	e00a      	b.n	8027ee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8027ed2:	f7fd fb01 	bl	80254d8 <HAL_GetTick>
 8027ed6:	4602      	mov	r2, r0
 8027ed8:	697b      	ldr	r3, [r7, #20]
 8027eda:	1ad3      	subs	r3, r2, r3
 8027edc:	2b64      	cmp	r3, #100	; 0x64
 8027ede:	d903      	bls.n	8027ee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027ee0:	2303      	movs	r3, #3
 8027ee2:	e0ba      	b.n	802805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8027ee4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027ee8:	4b5e      	ldr	r3, [pc, #376]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027eea:	681b      	ldr	r3, [r3, #0]
 8027eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027ef4:	d0ed      	beq.n	8027ed2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8027ef6:	687b      	ldr	r3, [r7, #4]
 8027ef8:	681b      	ldr	r3, [r3, #0]
 8027efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027efe:	2b00      	cmp	r3, #0
 8027f00:	d003      	beq.n	8027f0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8027f02:	687b      	ldr	r3, [r7, #4]
 8027f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027f06:	2b00      	cmp	r3, #0
 8027f08:	d009      	beq.n	8027f1e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8027f0a:	687b      	ldr	r3, [r7, #4]
 8027f0c:	681b      	ldr	r3, [r3, #0]
 8027f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8027f12:	2b00      	cmp	r3, #0
 8027f14:	d02e      	beq.n	8027f74 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8027f16:	687b      	ldr	r3, [r7, #4]
 8027f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027f1a:	2b00      	cmp	r3, #0
 8027f1c:	d12a      	bne.n	8027f74 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8027f1e:	4b51      	ldr	r3, [pc, #324]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027f24:	0c1b      	lsrs	r3, r3, #16
 8027f26:	f003 0303 	and.w	r3, r3, #3
 8027f2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027f2c:	4b4d      	ldr	r3, [pc, #308]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027f32:	0f1b      	lsrs	r3, r3, #28
 8027f34:	f003 0307 	and.w	r3, r3, #7
 8027f38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8027f3a:	687b      	ldr	r3, [r7, #4]
 8027f3c:	695b      	ldr	r3, [r3, #20]
 8027f3e:	019a      	lsls	r2, r3, #6
 8027f40:	693b      	ldr	r3, [r7, #16]
 8027f42:	041b      	lsls	r3, r3, #16
 8027f44:	431a      	orrs	r2, r3
 8027f46:	687b      	ldr	r3, [r7, #4]
 8027f48:	699b      	ldr	r3, [r3, #24]
 8027f4a:	061b      	lsls	r3, r3, #24
 8027f4c:	431a      	orrs	r2, r3
 8027f4e:	68fb      	ldr	r3, [r7, #12]
 8027f50:	071b      	lsls	r3, r3, #28
 8027f52:	4944      	ldr	r1, [pc, #272]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f54:	4313      	orrs	r3, r2
 8027f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8027f5a:	4b42      	ldr	r3, [pc, #264]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027f60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8027f64:	687b      	ldr	r3, [r7, #4]
 8027f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027f68:	3b01      	subs	r3, #1
 8027f6a:	021b      	lsls	r3, r3, #8
 8027f6c:	493d      	ldr	r1, [pc, #244]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f6e:	4313      	orrs	r3, r2
 8027f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8027f74:	687b      	ldr	r3, [r7, #4]
 8027f76:	681b      	ldr	r3, [r3, #0]
 8027f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027f7c:	2b00      	cmp	r3, #0
 8027f7e:	d022      	beq.n	8027fc6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8027f80:	687b      	ldr	r3, [r7, #4]
 8027f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8027f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8027f88:	d11d      	bne.n	8027fc6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027f8a:	4b36      	ldr	r3, [pc, #216]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027f90:	0e1b      	lsrs	r3, r3, #24
 8027f92:	f003 030f 	and.w	r3, r3, #15
 8027f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027f98:	4b32      	ldr	r3, [pc, #200]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027f9e:	0f1b      	lsrs	r3, r3, #28
 8027fa0:	f003 0307 	and.w	r3, r3, #7
 8027fa4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8027fa6:	687b      	ldr	r3, [r7, #4]
 8027fa8:	695b      	ldr	r3, [r3, #20]
 8027faa:	019a      	lsls	r2, r3, #6
 8027fac:	687b      	ldr	r3, [r7, #4]
 8027fae:	6a1b      	ldr	r3, [r3, #32]
 8027fb0:	041b      	lsls	r3, r3, #16
 8027fb2:	431a      	orrs	r2, r3
 8027fb4:	693b      	ldr	r3, [r7, #16]
 8027fb6:	061b      	lsls	r3, r3, #24
 8027fb8:	431a      	orrs	r2, r3
 8027fba:	68fb      	ldr	r3, [r7, #12]
 8027fbc:	071b      	lsls	r3, r3, #28
 8027fbe:	4929      	ldr	r1, [pc, #164]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027fc0:	4313      	orrs	r3, r2
 8027fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8027fc6:	687b      	ldr	r3, [r7, #4]
 8027fc8:	681b      	ldr	r3, [r3, #0]
 8027fca:	f003 0308 	and.w	r3, r3, #8
 8027fce:	2b00      	cmp	r3, #0
 8027fd0:	d028      	beq.n	8028024 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027fd2:	4b24      	ldr	r3, [pc, #144]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027fd8:	0e1b      	lsrs	r3, r3, #24
 8027fda:	f003 030f 	and.w	r3, r3, #15
 8027fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8027fe0:	4b20      	ldr	r3, [pc, #128]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027fe6:	0c1b      	lsrs	r3, r3, #16
 8027fe8:	f003 0303 	and.w	r3, r3, #3
 8027fec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8027fee:	687b      	ldr	r3, [r7, #4]
 8027ff0:	695b      	ldr	r3, [r3, #20]
 8027ff2:	019a      	lsls	r2, r3, #6
 8027ff4:	68fb      	ldr	r3, [r7, #12]
 8027ff6:	041b      	lsls	r3, r3, #16
 8027ff8:	431a      	orrs	r2, r3
 8027ffa:	693b      	ldr	r3, [r7, #16]
 8027ffc:	061b      	lsls	r3, r3, #24
 8027ffe:	431a      	orrs	r2, r3
 8028000:	687b      	ldr	r3, [r7, #4]
 8028002:	69db      	ldr	r3, [r3, #28]
 8028004:	071b      	lsls	r3, r3, #28
 8028006:	4917      	ldr	r1, [pc, #92]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8028008:	4313      	orrs	r3, r2
 802800a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 802800e:	4b15      	ldr	r3, [pc, #84]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8028010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8028014:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8028018:	687b      	ldr	r3, [r7, #4]
 802801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802801c:	4911      	ldr	r1, [pc, #68]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 802801e:	4313      	orrs	r3, r2
 8028020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8028024:	4b0f      	ldr	r3, [pc, #60]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8028026:	681b      	ldr	r3, [r3, #0]
 8028028:	4a0e      	ldr	r2, [pc, #56]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 802802a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802802e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028030:	f7fd fa52 	bl	80254d8 <HAL_GetTick>
 8028034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8028036:	e008      	b.n	802804a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8028038:	f7fd fa4e 	bl	80254d8 <HAL_GetTick>
 802803c:	4602      	mov	r2, r0
 802803e:	697b      	ldr	r3, [r7, #20]
 8028040:	1ad3      	subs	r3, r2, r3
 8028042:	2b64      	cmp	r3, #100	; 0x64
 8028044:	d901      	bls.n	802804a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8028046:	2303      	movs	r3, #3
 8028048:	e007      	b.n	802805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802804a:	4b06      	ldr	r3, [pc, #24]	; (8028064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 802804c:	681b      	ldr	r3, [r3, #0]
 802804e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8028052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8028056:	d1ef      	bne.n	8028038 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8028058:	2300      	movs	r3, #0
}
 802805a:	4618      	mov	r0, r3
 802805c:	3720      	adds	r7, #32
 802805e:	46bd      	mov	sp, r7
 8028060:	bd80      	pop	{r7, pc}
 8028062:	bf00      	nop
 8028064:	40023800 	.word	0x40023800

08028068 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8028068:	b580      	push	{r7, lr}
 802806a:	b082      	sub	sp, #8
 802806c:	af00      	add	r7, sp, #0
 802806e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8028070:	687b      	ldr	r3, [r7, #4]
 8028072:	2b00      	cmp	r3, #0
 8028074:	d101      	bne.n	802807a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8028076:	2301      	movs	r3, #1
 8028078:	e022      	b.n	80280c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 802807a:	687b      	ldr	r3, [r7, #4]
 802807c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8028080:	b2db      	uxtb	r3, r3
 8028082:	2b00      	cmp	r3, #0
 8028084:	d105      	bne.n	8028092 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8028086:	687b      	ldr	r3, [r7, #4]
 8028088:	2200      	movs	r2, #0
 802808a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 802808c:	6878      	ldr	r0, [r7, #4]
 802808e:	f7d9 f981 	bl	8001394 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8028092:	687b      	ldr	r3, [r7, #4]
 8028094:	2203      	movs	r2, #3
 8028096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 802809a:	6878      	ldr	r0, [r7, #4]
 802809c:	f000 f814 	bl	80280c8 <HAL_SD_InitCard>
 80280a0:	4603      	mov	r3, r0
 80280a2:	2b00      	cmp	r3, #0
 80280a4:	d001      	beq.n	80280aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80280a6:	2301      	movs	r3, #1
 80280a8:	e00a      	b.n	80280c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80280aa:	687b      	ldr	r3, [r7, #4]
 80280ac:	2200      	movs	r2, #0
 80280ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80280b0:	687b      	ldr	r3, [r7, #4]
 80280b2:	2200      	movs	r2, #0
 80280b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80280b6:	687b      	ldr	r3, [r7, #4]
 80280b8:	2201      	movs	r2, #1
 80280ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80280be:	2300      	movs	r3, #0
}
 80280c0:	4618      	mov	r0, r3
 80280c2:	3708      	adds	r7, #8
 80280c4:	46bd      	mov	sp, r7
 80280c6:	bd80      	pop	{r7, pc}

080280c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80280c8:	b5b0      	push	{r4, r5, r7, lr}
 80280ca:	b08e      	sub	sp, #56	; 0x38
 80280cc:	af04      	add	r7, sp, #16
 80280ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80280d0:	2300      	movs	r3, #0
 80280d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80280d4:	2300      	movs	r3, #0
 80280d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80280d8:	2300      	movs	r3, #0
 80280da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80280dc:	2300      	movs	r3, #0
 80280de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80280e0:	2300      	movs	r3, #0
 80280e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80280e4:	2376      	movs	r3, #118	; 0x76
 80280e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80280e8:	687b      	ldr	r3, [r7, #4]
 80280ea:	681d      	ldr	r5, [r3, #0]
 80280ec:	466c      	mov	r4, sp
 80280ee:	f107 0314 	add.w	r3, r7, #20
 80280f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80280f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80280fa:	f107 0308 	add.w	r3, r7, #8
 80280fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028100:	4628      	mov	r0, r5
 8028102:	f001 fd3b 	bl	8029b7c <SDMMC_Init>
 8028106:	4603      	mov	r3, r0
 8028108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 802810c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8028110:	2b00      	cmp	r3, #0
 8028112:	d001      	beq.n	8028118 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8028114:	2301      	movs	r3, #1
 8028116:	e03b      	b.n	8028190 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8028118:	687b      	ldr	r3, [r7, #4]
 802811a:	681b      	ldr	r3, [r3, #0]
 802811c:	685a      	ldr	r2, [r3, #4]
 802811e:	687b      	ldr	r3, [r7, #4]
 8028120:	681b      	ldr	r3, [r3, #0]
 8028122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8028126:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8028128:	687b      	ldr	r3, [r7, #4]
 802812a:	681b      	ldr	r3, [r3, #0]
 802812c:	4618      	mov	r0, r3
 802812e:	f001 fd6f 	bl	8029c10 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8028132:	687b      	ldr	r3, [r7, #4]
 8028134:	681b      	ldr	r3, [r3, #0]
 8028136:	685a      	ldr	r2, [r3, #4]
 8028138:	687b      	ldr	r3, [r7, #4]
 802813a:	681b      	ldr	r3, [r3, #0]
 802813c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028140:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8028142:	6878      	ldr	r0, [r7, #4]
 8028144:	f000 fefa 	bl	8028f3c <SD_PowerON>
 8028148:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 802814a:	6a3b      	ldr	r3, [r7, #32]
 802814c:	2b00      	cmp	r3, #0
 802814e:	d00b      	beq.n	8028168 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8028150:	687b      	ldr	r3, [r7, #4]
 8028152:	2201      	movs	r2, #1
 8028154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8028158:	687b      	ldr	r3, [r7, #4]
 802815a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802815c:	6a3b      	ldr	r3, [r7, #32]
 802815e:	431a      	orrs	r2, r3
 8028160:	687b      	ldr	r3, [r7, #4]
 8028162:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8028164:	2301      	movs	r3, #1
 8028166:	e013      	b.n	8028190 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8028168:	6878      	ldr	r0, [r7, #4]
 802816a:	f000 fe19 	bl	8028da0 <SD_InitCard>
 802816e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8028170:	6a3b      	ldr	r3, [r7, #32]
 8028172:	2b00      	cmp	r3, #0
 8028174:	d00b      	beq.n	802818e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8028176:	687b      	ldr	r3, [r7, #4]
 8028178:	2201      	movs	r2, #1
 802817a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 802817e:	687b      	ldr	r3, [r7, #4]
 8028180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028182:	6a3b      	ldr	r3, [r7, #32]
 8028184:	431a      	orrs	r2, r3
 8028186:	687b      	ldr	r3, [r7, #4]
 8028188:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 802818a:	2301      	movs	r3, #1
 802818c:	e000      	b.n	8028190 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 802818e:	2300      	movs	r3, #0
}
 8028190:	4618      	mov	r0, r3
 8028192:	3728      	adds	r7, #40	; 0x28
 8028194:	46bd      	mov	sp, r7
 8028196:	bdb0      	pop	{r4, r5, r7, pc}

08028198 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8028198:	b580      	push	{r7, lr}
 802819a:	b092      	sub	sp, #72	; 0x48
 802819c:	af00      	add	r7, sp, #0
 802819e:	60f8      	str	r0, [r7, #12]
 80281a0:	60b9      	str	r1, [r7, #8]
 80281a2:	607a      	str	r2, [r7, #4]
 80281a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80281a6:	f7fd f997 	bl	80254d8 <HAL_GetTick>
 80281aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80281ac:	687b      	ldr	r3, [r7, #4]
 80281ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80281b0:	68bb      	ldr	r3, [r7, #8]
 80281b2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80281b4:	68bb      	ldr	r3, [r7, #8]
 80281b6:	2b00      	cmp	r3, #0
 80281b8:	d107      	bne.n	80281ca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80281ba:	68fb      	ldr	r3, [r7, #12]
 80281bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80281be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80281c2:	68fb      	ldr	r3, [r7, #12]
 80281c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80281c6:	2301      	movs	r3, #1
 80281c8:	e1d7      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80281ca:	68fb      	ldr	r3, [r7, #12]
 80281cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80281d0:	b2db      	uxtb	r3, r3
 80281d2:	2b01      	cmp	r3, #1
 80281d4:	f040 81ca 	bne.w	802856c <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80281d8:	68fb      	ldr	r3, [r7, #12]
 80281da:	2200      	movs	r2, #0
 80281dc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80281de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80281e0:	683b      	ldr	r3, [r7, #0]
 80281e2:	441a      	add	r2, r3
 80281e4:	68fb      	ldr	r3, [r7, #12]
 80281e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80281e8:	429a      	cmp	r2, r3
 80281ea:	d907      	bls.n	80281fc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80281ec:	68fb      	ldr	r3, [r7, #12]
 80281ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80281f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80281f4:	68fb      	ldr	r3, [r7, #12]
 80281f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80281f8:	2301      	movs	r3, #1
 80281fa:	e1be      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80281fc:	68fb      	ldr	r3, [r7, #12]
 80281fe:	2203      	movs	r2, #3
 8028200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8028204:	68fb      	ldr	r3, [r7, #12]
 8028206:	681b      	ldr	r3, [r3, #0]
 8028208:	2200      	movs	r2, #0
 802820a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 802820c:	68fb      	ldr	r3, [r7, #12]
 802820e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028210:	2b01      	cmp	r3, #1
 8028212:	d002      	beq.n	802821a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8028214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028216:	025b      	lsls	r3, r3, #9
 8028218:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 802821a:	68fb      	ldr	r3, [r7, #12]
 802821c:	681b      	ldr	r3, [r3, #0]
 802821e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8028222:	4618      	mov	r0, r3
 8028224:	f001 fd88 	bl	8029d38 <SDMMC_CmdBlockLength>
 8028228:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 802822a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802822c:	2b00      	cmp	r3, #0
 802822e:	d00f      	beq.n	8028250 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028230:	68fb      	ldr	r3, [r7, #12]
 8028232:	681b      	ldr	r3, [r3, #0]
 8028234:	4a9a      	ldr	r2, [pc, #616]	; (80284a0 <HAL_SD_ReadBlocks+0x308>)
 8028236:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8028238:	68fb      	ldr	r3, [r7, #12]
 802823a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802823c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802823e:	431a      	orrs	r2, r3
 8028240:	68fb      	ldr	r3, [r7, #12]
 8028242:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028244:	68fb      	ldr	r3, [r7, #12]
 8028246:	2201      	movs	r2, #1
 8028248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 802824c:	2301      	movs	r3, #1
 802824e:	e194      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8028250:	f04f 33ff 	mov.w	r3, #4294967295
 8028254:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8028256:	683b      	ldr	r3, [r7, #0]
 8028258:	025b      	lsls	r3, r3, #9
 802825a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 802825c:	2390      	movs	r3, #144	; 0x90
 802825e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8028260:	2302      	movs	r3, #2
 8028262:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8028264:	2300      	movs	r3, #0
 8028266:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8028268:	2301      	movs	r3, #1
 802826a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 802826c:	68fb      	ldr	r3, [r7, #12]
 802826e:	681b      	ldr	r3, [r3, #0]
 8028270:	f107 0214 	add.w	r2, r7, #20
 8028274:	4611      	mov	r1, r2
 8028276:	4618      	mov	r0, r3
 8028278:	f001 fd32 	bl	8029ce0 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 802827c:	683b      	ldr	r3, [r7, #0]
 802827e:	2b01      	cmp	r3, #1
 8028280:	d90a      	bls.n	8028298 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8028282:	68fb      	ldr	r3, [r7, #12]
 8028284:	2202      	movs	r2, #2
 8028286:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8028288:	68fb      	ldr	r3, [r7, #12]
 802828a:	681b      	ldr	r3, [r3, #0]
 802828c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802828e:	4618      	mov	r0, r3
 8028290:	f001 fd96 	bl	8029dc0 <SDMMC_CmdReadMultiBlock>
 8028294:	6478      	str	r0, [r7, #68]	; 0x44
 8028296:	e009      	b.n	80282ac <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8028298:	68fb      	ldr	r3, [r7, #12]
 802829a:	2201      	movs	r2, #1
 802829c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 802829e:	68fb      	ldr	r3, [r7, #12]
 80282a0:	681b      	ldr	r3, [r3, #0]
 80282a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80282a4:	4618      	mov	r0, r3
 80282a6:	f001 fd69 	bl	8029d7c <SDMMC_CmdReadSingleBlock>
 80282aa:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80282ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80282ae:	2b00      	cmp	r3, #0
 80282b0:	d012      	beq.n	80282d8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80282b2:	68fb      	ldr	r3, [r7, #12]
 80282b4:	681b      	ldr	r3, [r3, #0]
 80282b6:	4a7a      	ldr	r2, [pc, #488]	; (80284a0 <HAL_SD_ReadBlocks+0x308>)
 80282b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80282ba:	68fb      	ldr	r3, [r7, #12]
 80282bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80282be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80282c0:	431a      	orrs	r2, r3
 80282c2:	68fb      	ldr	r3, [r7, #12]
 80282c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80282c6:	68fb      	ldr	r3, [r7, #12]
 80282c8:	2201      	movs	r2, #1
 80282ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80282ce:	68fb      	ldr	r3, [r7, #12]
 80282d0:	2200      	movs	r2, #0
 80282d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80282d4:	2301      	movs	r3, #1
 80282d6:	e150      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80282d8:	69bb      	ldr	r3, [r7, #24]
 80282da:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80282dc:	e061      	b.n	80283a2 <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80282de:	68fb      	ldr	r3, [r7, #12]
 80282e0:	681b      	ldr	r3, [r3, #0]
 80282e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80282e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80282e8:	2b00      	cmp	r3, #0
 80282ea:	d03c      	beq.n	8028366 <HAL_SD_ReadBlocks+0x1ce>
 80282ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80282ee:	2b00      	cmp	r3, #0
 80282f0:	d039      	beq.n	8028366 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80282f2:	2300      	movs	r3, #0
 80282f4:	643b      	str	r3, [r7, #64]	; 0x40
 80282f6:	e033      	b.n	8028360 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80282f8:	68fb      	ldr	r3, [r7, #12]
 80282fa:	681b      	ldr	r3, [r3, #0]
 80282fc:	4618      	mov	r0, r3
 80282fe:	f001 fc69 	bl	8029bd4 <SDMMC_ReadFIFO>
 8028302:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8028304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028306:	b2da      	uxtb	r2, r3
 8028308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802830a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 802830c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802830e:	3301      	adds	r3, #1
 8028310:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8028312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028314:	3b01      	subs	r3, #1
 8028316:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8028318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802831a:	0a1b      	lsrs	r3, r3, #8
 802831c:	b2da      	uxtb	r2, r3
 802831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028320:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8028322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028324:	3301      	adds	r3, #1
 8028326:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8028328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802832a:	3b01      	subs	r3, #1
 802832c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 802832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028330:	0c1b      	lsrs	r3, r3, #16
 8028332:	b2da      	uxtb	r2, r3
 8028334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028336:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8028338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802833a:	3301      	adds	r3, #1
 802833c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 802833e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028340:	3b01      	subs	r3, #1
 8028342:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8028344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028346:	0e1b      	lsrs	r3, r3, #24
 8028348:	b2da      	uxtb	r2, r3
 802834a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802834c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 802834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028350:	3301      	adds	r3, #1
 8028352:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8028354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028356:	3b01      	subs	r3, #1
 8028358:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 802835a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802835c:	3301      	adds	r3, #1
 802835e:	643b      	str	r3, [r7, #64]	; 0x40
 8028360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028362:	2b07      	cmp	r3, #7
 8028364:	d9c8      	bls.n	80282f8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8028366:	f7fd f8b7 	bl	80254d8 <HAL_GetTick>
 802836a:	4602      	mov	r2, r0
 802836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802836e:	1ad3      	subs	r3, r2, r3
 8028370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8028372:	429a      	cmp	r2, r3
 8028374:	d902      	bls.n	802837c <HAL_SD_ReadBlocks+0x1e4>
 8028376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028378:	2b00      	cmp	r3, #0
 802837a:	d112      	bne.n	80283a2 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802837c:	68fb      	ldr	r3, [r7, #12]
 802837e:	681b      	ldr	r3, [r3, #0]
 8028380:	4a47      	ldr	r2, [pc, #284]	; (80284a0 <HAL_SD_ReadBlocks+0x308>)
 8028382:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8028384:	68fb      	ldr	r3, [r7, #12]
 8028386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028388:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 802838c:	68fb      	ldr	r3, [r7, #12]
 802838e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8028390:	68fb      	ldr	r3, [r7, #12]
 8028392:	2201      	movs	r2, #1
 8028394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8028398:	68fb      	ldr	r3, [r7, #12]
 802839a:	2200      	movs	r2, #0
 802839c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 802839e:	2303      	movs	r3, #3
 80283a0:	e0eb      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80283a2:	68fb      	ldr	r3, [r7, #12]
 80283a4:	681b      	ldr	r3, [r3, #0]
 80283a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80283a8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80283ac:	2b00      	cmp	r3, #0
 80283ae:	d096      	beq.n	80282de <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80283b0:	68fb      	ldr	r3, [r7, #12]
 80283b2:	681b      	ldr	r3, [r3, #0]
 80283b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80283b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80283ba:	2b00      	cmp	r3, #0
 80283bc:	d022      	beq.n	8028404 <HAL_SD_ReadBlocks+0x26c>
 80283be:	683b      	ldr	r3, [r7, #0]
 80283c0:	2b01      	cmp	r3, #1
 80283c2:	d91f      	bls.n	8028404 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80283c4:	68fb      	ldr	r3, [r7, #12]
 80283c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80283c8:	2b03      	cmp	r3, #3
 80283ca:	d01b      	beq.n	8028404 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80283cc:	68fb      	ldr	r3, [r7, #12]
 80283ce:	681b      	ldr	r3, [r3, #0]
 80283d0:	4618      	mov	r0, r3
 80283d2:	f001 fd5b 	bl	8029e8c <SDMMC_CmdStopTransfer>
 80283d6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80283d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80283da:	2b00      	cmp	r3, #0
 80283dc:	d012      	beq.n	8028404 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80283de:	68fb      	ldr	r3, [r7, #12]
 80283e0:	681b      	ldr	r3, [r3, #0]
 80283e2:	4a2f      	ldr	r2, [pc, #188]	; (80284a0 <HAL_SD_ReadBlocks+0x308>)
 80283e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80283e6:	68fb      	ldr	r3, [r7, #12]
 80283e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80283ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80283ec:	431a      	orrs	r2, r3
 80283ee:	68fb      	ldr	r3, [r7, #12]
 80283f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80283f2:	68fb      	ldr	r3, [r7, #12]
 80283f4:	2201      	movs	r2, #1
 80283f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80283fa:	68fb      	ldr	r3, [r7, #12]
 80283fc:	2200      	movs	r2, #0
 80283fe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8028400:	2301      	movs	r3, #1
 8028402:	e0ba      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8028404:	68fb      	ldr	r3, [r7, #12]
 8028406:	681b      	ldr	r3, [r3, #0]
 8028408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802840a:	f003 0308 	and.w	r3, r3, #8
 802840e:	2b00      	cmp	r3, #0
 8028410:	d012      	beq.n	8028438 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028412:	68fb      	ldr	r3, [r7, #12]
 8028414:	681b      	ldr	r3, [r3, #0]
 8028416:	4a22      	ldr	r2, [pc, #136]	; (80284a0 <HAL_SD_ReadBlocks+0x308>)
 8028418:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 802841a:	68fb      	ldr	r3, [r7, #12]
 802841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802841e:	f043 0208 	orr.w	r2, r3, #8
 8028422:	68fb      	ldr	r3, [r7, #12]
 8028424:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028426:	68fb      	ldr	r3, [r7, #12]
 8028428:	2201      	movs	r2, #1
 802842a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 802842e:	68fb      	ldr	r3, [r7, #12]
 8028430:	2200      	movs	r2, #0
 8028432:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8028434:	2301      	movs	r3, #1
 8028436:	e0a0      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8028438:	68fb      	ldr	r3, [r7, #12]
 802843a:	681b      	ldr	r3, [r3, #0]
 802843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802843e:	f003 0302 	and.w	r3, r3, #2
 8028442:	2b00      	cmp	r3, #0
 8028444:	d012      	beq.n	802846c <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028446:	68fb      	ldr	r3, [r7, #12]
 8028448:	681b      	ldr	r3, [r3, #0]
 802844a:	4a15      	ldr	r2, [pc, #84]	; (80284a0 <HAL_SD_ReadBlocks+0x308>)
 802844c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 802844e:	68fb      	ldr	r3, [r7, #12]
 8028450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028452:	f043 0202 	orr.w	r2, r3, #2
 8028456:	68fb      	ldr	r3, [r7, #12]
 8028458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 802845a:	68fb      	ldr	r3, [r7, #12]
 802845c:	2201      	movs	r2, #1
 802845e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8028462:	68fb      	ldr	r3, [r7, #12]
 8028464:	2200      	movs	r2, #0
 8028466:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8028468:	2301      	movs	r3, #1
 802846a:	e086      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 802846c:	68fb      	ldr	r3, [r7, #12]
 802846e:	681b      	ldr	r3, [r3, #0]
 8028470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028472:	f003 0320 	and.w	r3, r3, #32
 8028476:	2b00      	cmp	r3, #0
 8028478:	d063      	beq.n	8028542 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802847a:	68fb      	ldr	r3, [r7, #12]
 802847c:	681b      	ldr	r3, [r3, #0]
 802847e:	4a08      	ldr	r2, [pc, #32]	; (80284a0 <HAL_SD_ReadBlocks+0x308>)
 8028480:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8028482:	68fb      	ldr	r3, [r7, #12]
 8028484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028486:	f043 0220 	orr.w	r2, r3, #32
 802848a:	68fb      	ldr	r3, [r7, #12]
 802848c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 802848e:	68fb      	ldr	r3, [r7, #12]
 8028490:	2201      	movs	r2, #1
 8028492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8028496:	68fb      	ldr	r3, [r7, #12]
 8028498:	2200      	movs	r2, #0
 802849a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 802849c:	2301      	movs	r3, #1
 802849e:	e06c      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
 80284a0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80284a4:	68fb      	ldr	r3, [r7, #12]
 80284a6:	681b      	ldr	r3, [r3, #0]
 80284a8:	4618      	mov	r0, r3
 80284aa:	f001 fb93 	bl	8029bd4 <SDMMC_ReadFIFO>
 80284ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80284b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80284b2:	b2da      	uxtb	r2, r3
 80284b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80284b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284ba:	3301      	adds	r3, #1
 80284bc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80284be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80284c0:	3b01      	subs	r3, #1
 80284c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80284c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80284c6:	0a1b      	lsrs	r3, r3, #8
 80284c8:	b2da      	uxtb	r2, r3
 80284ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80284ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284d0:	3301      	adds	r3, #1
 80284d2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80284d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80284d6:	3b01      	subs	r3, #1
 80284d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80284da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80284dc:	0c1b      	lsrs	r3, r3, #16
 80284de:	b2da      	uxtb	r2, r3
 80284e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284e2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80284e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284e6:	3301      	adds	r3, #1
 80284e8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80284ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80284ec:	3b01      	subs	r3, #1
 80284ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80284f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80284f2:	0e1b      	lsrs	r3, r3, #24
 80284f4:	b2da      	uxtb	r2, r3
 80284f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284f8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80284fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284fc:	3301      	adds	r3, #1
 80284fe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8028500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028502:	3b01      	subs	r3, #1
 8028504:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8028506:	f7fc ffe7 	bl	80254d8 <HAL_GetTick>
 802850a:	4602      	mov	r2, r0
 802850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802850e:	1ad3      	subs	r3, r2, r3
 8028510:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8028512:	429a      	cmp	r2, r3
 8028514:	d902      	bls.n	802851c <HAL_SD_ReadBlocks+0x384>
 8028516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028518:	2b00      	cmp	r3, #0
 802851a:	d112      	bne.n	8028542 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802851c:	68fb      	ldr	r3, [r7, #12]
 802851e:	681b      	ldr	r3, [r3, #0]
 8028520:	4a18      	ldr	r2, [pc, #96]	; (8028584 <HAL_SD_ReadBlocks+0x3ec>)
 8028522:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8028524:	68fb      	ldr	r3, [r7, #12]
 8028526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028528:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 802852c:	68fb      	ldr	r3, [r7, #12]
 802852e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8028530:	68fb      	ldr	r3, [r7, #12]
 8028532:	2201      	movs	r2, #1
 8028534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8028538:	68fb      	ldr	r3, [r7, #12]
 802853a:	2200      	movs	r2, #0
 802853c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 802853e:	2301      	movs	r3, #1
 8028540:	e01b      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8028542:	68fb      	ldr	r3, [r7, #12]
 8028544:	681b      	ldr	r3, [r3, #0]
 8028546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802854c:	2b00      	cmp	r3, #0
 802854e:	d002      	beq.n	8028556 <HAL_SD_ReadBlocks+0x3be>
 8028550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028552:	2b00      	cmp	r3, #0
 8028554:	d1a6      	bne.n	80284a4 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8028556:	68fb      	ldr	r3, [r7, #12]
 8028558:	681b      	ldr	r3, [r3, #0]
 802855a:	f240 523a 	movw	r2, #1338	; 0x53a
 802855e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8028560:	68fb      	ldr	r3, [r7, #12]
 8028562:	2201      	movs	r2, #1
 8028564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8028568:	2300      	movs	r3, #0
 802856a:	e006      	b.n	802857a <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 802856c:	68fb      	ldr	r3, [r7, #12]
 802856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028570:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8028574:	68fb      	ldr	r3, [r7, #12]
 8028576:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8028578:	2301      	movs	r3, #1
  }
}
 802857a:	4618      	mov	r0, r3
 802857c:	3748      	adds	r7, #72	; 0x48
 802857e:	46bd      	mov	sp, r7
 8028580:	bd80      	pop	{r7, pc}
 8028582:	bf00      	nop
 8028584:	004005ff 	.word	0x004005ff

08028588 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8028588:	b580      	push	{r7, lr}
 802858a:	b092      	sub	sp, #72	; 0x48
 802858c:	af00      	add	r7, sp, #0
 802858e:	60f8      	str	r0, [r7, #12]
 8028590:	60b9      	str	r1, [r7, #8]
 8028592:	607a      	str	r2, [r7, #4]
 8028594:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8028596:	f7fc ff9f 	bl	80254d8 <HAL_GetTick>
 802859a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 802859c:	687b      	ldr	r3, [r7, #4]
 802859e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80285a0:	68bb      	ldr	r3, [r7, #8]
 80285a2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80285a4:	68bb      	ldr	r3, [r7, #8]
 80285a6:	2b00      	cmp	r3, #0
 80285a8:	d107      	bne.n	80285ba <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80285aa:	68fb      	ldr	r3, [r7, #12]
 80285ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80285ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80285b2:	68fb      	ldr	r3, [r7, #12]
 80285b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80285b6:	2301      	movs	r3, #1
 80285b8:	e182      	b.n	80288c0 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80285ba:	68fb      	ldr	r3, [r7, #12]
 80285bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80285c0:	b2db      	uxtb	r3, r3
 80285c2:	2b01      	cmp	r3, #1
 80285c4:	f040 8175 	bne.w	80288b2 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80285c8:	68fb      	ldr	r3, [r7, #12]
 80285ca:	2200      	movs	r2, #0
 80285cc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80285ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80285d0:	683b      	ldr	r3, [r7, #0]
 80285d2:	441a      	add	r2, r3
 80285d4:	68fb      	ldr	r3, [r7, #12]
 80285d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80285d8:	429a      	cmp	r2, r3
 80285da:	d907      	bls.n	80285ec <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80285dc:	68fb      	ldr	r3, [r7, #12]
 80285de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80285e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80285e4:	68fb      	ldr	r3, [r7, #12]
 80285e6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80285e8:	2301      	movs	r3, #1
 80285ea:	e169      	b.n	80288c0 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80285ec:	68fb      	ldr	r3, [r7, #12]
 80285ee:	2203      	movs	r2, #3
 80285f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80285f4:	68fb      	ldr	r3, [r7, #12]
 80285f6:	681b      	ldr	r3, [r3, #0]
 80285f8:	2200      	movs	r2, #0
 80285fa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80285fc:	68fb      	ldr	r3, [r7, #12]
 80285fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028600:	2b01      	cmp	r3, #1
 8028602:	d002      	beq.n	802860a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8028604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028606:	025b      	lsls	r3, r3, #9
 8028608:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 802860a:	68fb      	ldr	r3, [r7, #12]
 802860c:	681b      	ldr	r3, [r3, #0]
 802860e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8028612:	4618      	mov	r0, r3
 8028614:	f001 fb90 	bl	8029d38 <SDMMC_CmdBlockLength>
 8028618:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 802861a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802861c:	2b00      	cmp	r3, #0
 802861e:	d00f      	beq.n	8028640 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028620:	68fb      	ldr	r3, [r7, #12]
 8028622:	681b      	ldr	r3, [r3, #0]
 8028624:	4a9c      	ldr	r2, [pc, #624]	; (8028898 <HAL_SD_WriteBlocks+0x310>)
 8028626:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8028628:	68fb      	ldr	r3, [r7, #12]
 802862a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802862c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802862e:	431a      	orrs	r2, r3
 8028630:	68fb      	ldr	r3, [r7, #12]
 8028632:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028634:	68fb      	ldr	r3, [r7, #12]
 8028636:	2201      	movs	r2, #1
 8028638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 802863c:	2301      	movs	r3, #1
 802863e:	e13f      	b.n	80288c0 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8028640:	f04f 33ff 	mov.w	r3, #4294967295
 8028644:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8028646:	683b      	ldr	r3, [r7, #0]
 8028648:	025b      	lsls	r3, r3, #9
 802864a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 802864c:	2390      	movs	r3, #144	; 0x90
 802864e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8028650:	2300      	movs	r3, #0
 8028652:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8028654:	2300      	movs	r3, #0
 8028656:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8028658:	2301      	movs	r3, #1
 802865a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 802865c:	68fb      	ldr	r3, [r7, #12]
 802865e:	681b      	ldr	r3, [r3, #0]
 8028660:	f107 0218 	add.w	r2, r7, #24
 8028664:	4611      	mov	r1, r2
 8028666:	4618      	mov	r0, r3
 8028668:	f001 fb3a 	bl	8029ce0 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 802866c:	683b      	ldr	r3, [r7, #0]
 802866e:	2b01      	cmp	r3, #1
 8028670:	d90a      	bls.n	8028688 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8028672:	68fb      	ldr	r3, [r7, #12]
 8028674:	2220      	movs	r2, #32
 8028676:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8028678:	68fb      	ldr	r3, [r7, #12]
 802867a:	681b      	ldr	r3, [r3, #0]
 802867c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802867e:	4618      	mov	r0, r3
 8028680:	f001 fbe2 	bl	8029e48 <SDMMC_CmdWriteMultiBlock>
 8028684:	6478      	str	r0, [r7, #68]	; 0x44
 8028686:	e009      	b.n	802869c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8028688:	68fb      	ldr	r3, [r7, #12]
 802868a:	2210      	movs	r2, #16
 802868c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 802868e:	68fb      	ldr	r3, [r7, #12]
 8028690:	681b      	ldr	r3, [r3, #0]
 8028692:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028694:	4618      	mov	r0, r3
 8028696:	f001 fbb5 	bl	8029e04 <SDMMC_CmdWriteSingleBlock>
 802869a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 802869c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802869e:	2b00      	cmp	r3, #0
 80286a0:	d012      	beq.n	80286c8 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80286a2:	68fb      	ldr	r3, [r7, #12]
 80286a4:	681b      	ldr	r3, [r3, #0]
 80286a6:	4a7c      	ldr	r2, [pc, #496]	; (8028898 <HAL_SD_WriteBlocks+0x310>)
 80286a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80286aa:	68fb      	ldr	r3, [r7, #12]
 80286ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80286ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80286b0:	431a      	orrs	r2, r3
 80286b2:	68fb      	ldr	r3, [r7, #12]
 80286b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80286b6:	68fb      	ldr	r3, [r7, #12]
 80286b8:	2201      	movs	r2, #1
 80286ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80286be:	68fb      	ldr	r3, [r7, #12]
 80286c0:	2200      	movs	r2, #0
 80286c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80286c4:	2301      	movs	r3, #1
 80286c6:	e0fb      	b.n	80288c0 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80286c8:	69fb      	ldr	r3, [r7, #28]
 80286ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80286cc:	e065      	b.n	802879a <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80286ce:	68fb      	ldr	r3, [r7, #12]
 80286d0:	681b      	ldr	r3, [r3, #0]
 80286d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80286d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80286d8:	2b00      	cmp	r3, #0
 80286da:	d040      	beq.n	802875e <HAL_SD_WriteBlocks+0x1d6>
 80286dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80286de:	2b00      	cmp	r3, #0
 80286e0:	d03d      	beq.n	802875e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80286e2:	2300      	movs	r3, #0
 80286e4:	643b      	str	r3, [r7, #64]	; 0x40
 80286e6:	e037      	b.n	8028758 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80286e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286ea:	781b      	ldrb	r3, [r3, #0]
 80286ec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80286ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286f0:	3301      	adds	r3, #1
 80286f2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80286f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80286f6:	3b01      	subs	r3, #1
 80286f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80286fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286fc:	781b      	ldrb	r3, [r3, #0]
 80286fe:	021a      	lsls	r2, r3, #8
 8028700:	697b      	ldr	r3, [r7, #20]
 8028702:	4313      	orrs	r3, r2
 8028704:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8028706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028708:	3301      	adds	r3, #1
 802870a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 802870c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802870e:	3b01      	subs	r3, #1
 8028710:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8028712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028714:	781b      	ldrb	r3, [r3, #0]
 8028716:	041a      	lsls	r2, r3, #16
 8028718:	697b      	ldr	r3, [r7, #20]
 802871a:	4313      	orrs	r3, r2
 802871c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 802871e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028720:	3301      	adds	r3, #1
 8028722:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8028724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028726:	3b01      	subs	r3, #1
 8028728:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 802872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802872c:	781b      	ldrb	r3, [r3, #0]
 802872e:	061a      	lsls	r2, r3, #24
 8028730:	697b      	ldr	r3, [r7, #20]
 8028732:	4313      	orrs	r3, r2
 8028734:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8028736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028738:	3301      	adds	r3, #1
 802873a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 802873c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802873e:	3b01      	subs	r3, #1
 8028740:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8028742:	68fb      	ldr	r3, [r7, #12]
 8028744:	681b      	ldr	r3, [r3, #0]
 8028746:	f107 0214 	add.w	r2, r7, #20
 802874a:	4611      	mov	r1, r2
 802874c:	4618      	mov	r0, r3
 802874e:	f001 fa4e 	bl	8029bee <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8028752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028754:	3301      	adds	r3, #1
 8028756:	643b      	str	r3, [r7, #64]	; 0x40
 8028758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802875a:	2b07      	cmp	r3, #7
 802875c:	d9c4      	bls.n	80286e8 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 802875e:	f7fc febb 	bl	80254d8 <HAL_GetTick>
 8028762:	4602      	mov	r2, r0
 8028764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028766:	1ad3      	subs	r3, r2, r3
 8028768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802876a:	429a      	cmp	r2, r3
 802876c:	d902      	bls.n	8028774 <HAL_SD_WriteBlocks+0x1ec>
 802876e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028770:	2b00      	cmp	r3, #0
 8028772:	d112      	bne.n	802879a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028774:	68fb      	ldr	r3, [r7, #12]
 8028776:	681b      	ldr	r3, [r3, #0]
 8028778:	4a47      	ldr	r2, [pc, #284]	; (8028898 <HAL_SD_WriteBlocks+0x310>)
 802877a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 802877c:	68fb      	ldr	r3, [r7, #12]
 802877e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028782:	431a      	orrs	r2, r3
 8028784:	68fb      	ldr	r3, [r7, #12]
 8028786:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8028788:	68fb      	ldr	r3, [r7, #12]
 802878a:	2201      	movs	r2, #1
 802878c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8028790:	68fb      	ldr	r3, [r7, #12]
 8028792:	2200      	movs	r2, #0
 8028794:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8028796:	2303      	movs	r3, #3
 8028798:	e092      	b.n	80288c0 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 802879a:	68fb      	ldr	r3, [r7, #12]
 802879c:	681b      	ldr	r3, [r3, #0]
 802879e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80287a0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80287a4:	2b00      	cmp	r3, #0
 80287a6:	d092      	beq.n	80286ce <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80287a8:	68fb      	ldr	r3, [r7, #12]
 80287aa:	681b      	ldr	r3, [r3, #0]
 80287ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80287ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80287b2:	2b00      	cmp	r3, #0
 80287b4:	d022      	beq.n	80287fc <HAL_SD_WriteBlocks+0x274>
 80287b6:	683b      	ldr	r3, [r7, #0]
 80287b8:	2b01      	cmp	r3, #1
 80287ba:	d91f      	bls.n	80287fc <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80287bc:	68fb      	ldr	r3, [r7, #12]
 80287be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80287c0:	2b03      	cmp	r3, #3
 80287c2:	d01b      	beq.n	80287fc <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80287c4:	68fb      	ldr	r3, [r7, #12]
 80287c6:	681b      	ldr	r3, [r3, #0]
 80287c8:	4618      	mov	r0, r3
 80287ca:	f001 fb5f 	bl	8029e8c <SDMMC_CmdStopTransfer>
 80287ce:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80287d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80287d2:	2b00      	cmp	r3, #0
 80287d4:	d012      	beq.n	80287fc <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80287d6:	68fb      	ldr	r3, [r7, #12]
 80287d8:	681b      	ldr	r3, [r3, #0]
 80287da:	4a2f      	ldr	r2, [pc, #188]	; (8028898 <HAL_SD_WriteBlocks+0x310>)
 80287dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80287de:	68fb      	ldr	r3, [r7, #12]
 80287e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80287e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80287e4:	431a      	orrs	r2, r3
 80287e6:	68fb      	ldr	r3, [r7, #12]
 80287e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80287ea:	68fb      	ldr	r3, [r7, #12]
 80287ec:	2201      	movs	r2, #1
 80287ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80287f2:	68fb      	ldr	r3, [r7, #12]
 80287f4:	2200      	movs	r2, #0
 80287f6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80287f8:	2301      	movs	r3, #1
 80287fa:	e061      	b.n	80288c0 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80287fc:	68fb      	ldr	r3, [r7, #12]
 80287fe:	681b      	ldr	r3, [r3, #0]
 8028800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028802:	f003 0308 	and.w	r3, r3, #8
 8028806:	2b00      	cmp	r3, #0
 8028808:	d012      	beq.n	8028830 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802880a:	68fb      	ldr	r3, [r7, #12]
 802880c:	681b      	ldr	r3, [r3, #0]
 802880e:	4a22      	ldr	r2, [pc, #136]	; (8028898 <HAL_SD_WriteBlocks+0x310>)
 8028810:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8028812:	68fb      	ldr	r3, [r7, #12]
 8028814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028816:	f043 0208 	orr.w	r2, r3, #8
 802881a:	68fb      	ldr	r3, [r7, #12]
 802881c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 802881e:	68fb      	ldr	r3, [r7, #12]
 8028820:	2201      	movs	r2, #1
 8028822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8028826:	68fb      	ldr	r3, [r7, #12]
 8028828:	2200      	movs	r2, #0
 802882a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 802882c:	2301      	movs	r3, #1
 802882e:	e047      	b.n	80288c0 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8028830:	68fb      	ldr	r3, [r7, #12]
 8028832:	681b      	ldr	r3, [r3, #0]
 8028834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028836:	f003 0302 	and.w	r3, r3, #2
 802883a:	2b00      	cmp	r3, #0
 802883c:	d012      	beq.n	8028864 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802883e:	68fb      	ldr	r3, [r7, #12]
 8028840:	681b      	ldr	r3, [r3, #0]
 8028842:	4a15      	ldr	r2, [pc, #84]	; (8028898 <HAL_SD_WriteBlocks+0x310>)
 8028844:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8028846:	68fb      	ldr	r3, [r7, #12]
 8028848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802884a:	f043 0202 	orr.w	r2, r3, #2
 802884e:	68fb      	ldr	r3, [r7, #12]
 8028850:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028852:	68fb      	ldr	r3, [r7, #12]
 8028854:	2201      	movs	r2, #1
 8028856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 802885a:	68fb      	ldr	r3, [r7, #12]
 802885c:	2200      	movs	r2, #0
 802885e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8028860:	2301      	movs	r3, #1
 8028862:	e02d      	b.n	80288c0 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8028864:	68fb      	ldr	r3, [r7, #12]
 8028866:	681b      	ldr	r3, [r3, #0]
 8028868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802886a:	f003 0310 	and.w	r3, r3, #16
 802886e:	2b00      	cmp	r3, #0
 8028870:	d014      	beq.n	802889c <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028872:	68fb      	ldr	r3, [r7, #12]
 8028874:	681b      	ldr	r3, [r3, #0]
 8028876:	4a08      	ldr	r2, [pc, #32]	; (8028898 <HAL_SD_WriteBlocks+0x310>)
 8028878:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 802887a:	68fb      	ldr	r3, [r7, #12]
 802887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802887e:	f043 0210 	orr.w	r2, r3, #16
 8028882:	68fb      	ldr	r3, [r7, #12]
 8028884:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028886:	68fb      	ldr	r3, [r7, #12]
 8028888:	2201      	movs	r2, #1
 802888a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 802888e:	68fb      	ldr	r3, [r7, #12]
 8028890:	2200      	movs	r2, #0
 8028892:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8028894:	2301      	movs	r3, #1
 8028896:	e013      	b.n	80288c0 <HAL_SD_WriteBlocks+0x338>
 8028898:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 802889c:	68fb      	ldr	r3, [r7, #12]
 802889e:	681b      	ldr	r3, [r3, #0]
 80288a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80288a4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80288a6:	68fb      	ldr	r3, [r7, #12]
 80288a8:	2201      	movs	r2, #1
 80288aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80288ae:	2300      	movs	r3, #0
 80288b0:	e006      	b.n	80288c0 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80288b2:	68fb      	ldr	r3, [r7, #12]
 80288b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80288b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80288ba:	68fb      	ldr	r3, [r7, #12]
 80288bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80288be:	2301      	movs	r3, #1
  }
}
 80288c0:	4618      	mov	r0, r3
 80288c2:	3748      	adds	r7, #72	; 0x48
 80288c4:	46bd      	mov	sp, r7
 80288c6:	bd80      	pop	{r7, pc}

080288c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80288c8:	b480      	push	{r7}
 80288ca:	b083      	sub	sp, #12
 80288cc:	af00      	add	r7, sp, #0
 80288ce:	6078      	str	r0, [r7, #4]
 80288d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80288d2:	687b      	ldr	r3, [r7, #4]
 80288d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80288d6:	0f9b      	lsrs	r3, r3, #30
 80288d8:	b2da      	uxtb	r2, r3
 80288da:	683b      	ldr	r3, [r7, #0]
 80288dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80288de:	687b      	ldr	r3, [r7, #4]
 80288e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80288e2:	0e9b      	lsrs	r3, r3, #26
 80288e4:	b2db      	uxtb	r3, r3
 80288e6:	f003 030f 	and.w	r3, r3, #15
 80288ea:	b2da      	uxtb	r2, r3
 80288ec:	683b      	ldr	r3, [r7, #0]
 80288ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80288f0:	687b      	ldr	r3, [r7, #4]
 80288f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80288f4:	0e1b      	lsrs	r3, r3, #24
 80288f6:	b2db      	uxtb	r3, r3
 80288f8:	f003 0303 	and.w	r3, r3, #3
 80288fc:	b2da      	uxtb	r2, r3
 80288fe:	683b      	ldr	r3, [r7, #0]
 8028900:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8028902:	687b      	ldr	r3, [r7, #4]
 8028904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8028906:	0c1b      	lsrs	r3, r3, #16
 8028908:	b2da      	uxtb	r2, r3
 802890a:	683b      	ldr	r3, [r7, #0]
 802890c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 802890e:	687b      	ldr	r3, [r7, #4]
 8028910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8028912:	0a1b      	lsrs	r3, r3, #8
 8028914:	b2da      	uxtb	r2, r3
 8028916:	683b      	ldr	r3, [r7, #0]
 8028918:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 802891a:	687b      	ldr	r3, [r7, #4]
 802891c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802891e:	b2da      	uxtb	r2, r3
 8028920:	683b      	ldr	r3, [r7, #0]
 8028922:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8028924:	687b      	ldr	r3, [r7, #4]
 8028926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028928:	0d1b      	lsrs	r3, r3, #20
 802892a:	b29a      	uxth	r2, r3
 802892c:	683b      	ldr	r3, [r7, #0]
 802892e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8028930:	687b      	ldr	r3, [r7, #4]
 8028932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028934:	0c1b      	lsrs	r3, r3, #16
 8028936:	b2db      	uxtb	r3, r3
 8028938:	f003 030f 	and.w	r3, r3, #15
 802893c:	b2da      	uxtb	r2, r3
 802893e:	683b      	ldr	r3, [r7, #0]
 8028940:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8028942:	687b      	ldr	r3, [r7, #4]
 8028944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028946:	0bdb      	lsrs	r3, r3, #15
 8028948:	b2db      	uxtb	r3, r3
 802894a:	f003 0301 	and.w	r3, r3, #1
 802894e:	b2da      	uxtb	r2, r3
 8028950:	683b      	ldr	r3, [r7, #0]
 8028952:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8028954:	687b      	ldr	r3, [r7, #4]
 8028956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028958:	0b9b      	lsrs	r3, r3, #14
 802895a:	b2db      	uxtb	r3, r3
 802895c:	f003 0301 	and.w	r3, r3, #1
 8028960:	b2da      	uxtb	r2, r3
 8028962:	683b      	ldr	r3, [r7, #0]
 8028964:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8028966:	687b      	ldr	r3, [r7, #4]
 8028968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802896a:	0b5b      	lsrs	r3, r3, #13
 802896c:	b2db      	uxtb	r3, r3
 802896e:	f003 0301 	and.w	r3, r3, #1
 8028972:	b2da      	uxtb	r2, r3
 8028974:	683b      	ldr	r3, [r7, #0]
 8028976:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8028978:	687b      	ldr	r3, [r7, #4]
 802897a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802897c:	0b1b      	lsrs	r3, r3, #12
 802897e:	b2db      	uxtb	r3, r3
 8028980:	f003 0301 	and.w	r3, r3, #1
 8028984:	b2da      	uxtb	r2, r3
 8028986:	683b      	ldr	r3, [r7, #0]
 8028988:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 802898a:	683b      	ldr	r3, [r7, #0]
 802898c:	2200      	movs	r2, #0
 802898e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8028990:	687b      	ldr	r3, [r7, #4]
 8028992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028994:	2b00      	cmp	r3, #0
 8028996:	d163      	bne.n	8028a60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8028998:	687b      	ldr	r3, [r7, #4]
 802899a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802899c:	009a      	lsls	r2, r3, #2
 802899e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80289a2:	4013      	ands	r3, r2
 80289a4:	687a      	ldr	r2, [r7, #4]
 80289a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80289a8:	0f92      	lsrs	r2, r2, #30
 80289aa:	431a      	orrs	r2, r3
 80289ac:	683b      	ldr	r3, [r7, #0]
 80289ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80289b0:	687b      	ldr	r3, [r7, #4]
 80289b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80289b4:	0edb      	lsrs	r3, r3, #27
 80289b6:	b2db      	uxtb	r3, r3
 80289b8:	f003 0307 	and.w	r3, r3, #7
 80289bc:	b2da      	uxtb	r2, r3
 80289be:	683b      	ldr	r3, [r7, #0]
 80289c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80289c2:	687b      	ldr	r3, [r7, #4]
 80289c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80289c6:	0e1b      	lsrs	r3, r3, #24
 80289c8:	b2db      	uxtb	r3, r3
 80289ca:	f003 0307 	and.w	r3, r3, #7
 80289ce:	b2da      	uxtb	r2, r3
 80289d0:	683b      	ldr	r3, [r7, #0]
 80289d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80289d4:	687b      	ldr	r3, [r7, #4]
 80289d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80289d8:	0d5b      	lsrs	r3, r3, #21
 80289da:	b2db      	uxtb	r3, r3
 80289dc:	f003 0307 	and.w	r3, r3, #7
 80289e0:	b2da      	uxtb	r2, r3
 80289e2:	683b      	ldr	r3, [r7, #0]
 80289e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80289e6:	687b      	ldr	r3, [r7, #4]
 80289e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80289ea:	0c9b      	lsrs	r3, r3, #18
 80289ec:	b2db      	uxtb	r3, r3
 80289ee:	f003 0307 	and.w	r3, r3, #7
 80289f2:	b2da      	uxtb	r2, r3
 80289f4:	683b      	ldr	r3, [r7, #0]
 80289f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80289f8:	687b      	ldr	r3, [r7, #4]
 80289fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80289fc:	0bdb      	lsrs	r3, r3, #15
 80289fe:	b2db      	uxtb	r3, r3
 8028a00:	f003 0307 	and.w	r3, r3, #7
 8028a04:	b2da      	uxtb	r2, r3
 8028a06:	683b      	ldr	r3, [r7, #0]
 8028a08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8028a0a:	683b      	ldr	r3, [r7, #0]
 8028a0c:	691b      	ldr	r3, [r3, #16]
 8028a0e:	1c5a      	adds	r2, r3, #1
 8028a10:	687b      	ldr	r3, [r7, #4]
 8028a12:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8028a14:	683b      	ldr	r3, [r7, #0]
 8028a16:	7e1b      	ldrb	r3, [r3, #24]
 8028a18:	b2db      	uxtb	r3, r3
 8028a1a:	f003 0307 	and.w	r3, r3, #7
 8028a1e:	3302      	adds	r3, #2
 8028a20:	2201      	movs	r2, #1
 8028a22:	fa02 f303 	lsl.w	r3, r2, r3
 8028a26:	687a      	ldr	r2, [r7, #4]
 8028a28:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8028a2a:	fb02 f203 	mul.w	r2, r2, r3
 8028a2e:	687b      	ldr	r3, [r7, #4]
 8028a30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8028a32:	683b      	ldr	r3, [r7, #0]
 8028a34:	7a1b      	ldrb	r3, [r3, #8]
 8028a36:	b2db      	uxtb	r3, r3
 8028a38:	f003 030f 	and.w	r3, r3, #15
 8028a3c:	2201      	movs	r2, #1
 8028a3e:	409a      	lsls	r2, r3
 8028a40:	687b      	ldr	r3, [r7, #4]
 8028a42:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8028a44:	687b      	ldr	r3, [r7, #4]
 8028a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028a48:	687a      	ldr	r2, [r7, #4]
 8028a4a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8028a4c:	0a52      	lsrs	r2, r2, #9
 8028a4e:	fb02 f203 	mul.w	r2, r2, r3
 8028a52:	687b      	ldr	r3, [r7, #4]
 8028a54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8028a56:	687b      	ldr	r3, [r7, #4]
 8028a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8028a5c:	661a      	str	r2, [r3, #96]	; 0x60
 8028a5e:	e031      	b.n	8028ac4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8028a60:	687b      	ldr	r3, [r7, #4]
 8028a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028a64:	2b01      	cmp	r3, #1
 8028a66:	d11d      	bne.n	8028aa4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8028a68:	687b      	ldr	r3, [r7, #4]
 8028a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028a6c:	041b      	lsls	r3, r3, #16
 8028a6e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8028a72:	687b      	ldr	r3, [r7, #4]
 8028a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028a76:	0c1b      	lsrs	r3, r3, #16
 8028a78:	431a      	orrs	r2, r3
 8028a7a:	683b      	ldr	r3, [r7, #0]
 8028a7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8028a7e:	683b      	ldr	r3, [r7, #0]
 8028a80:	691b      	ldr	r3, [r3, #16]
 8028a82:	3301      	adds	r3, #1
 8028a84:	029a      	lsls	r2, r3, #10
 8028a86:	687b      	ldr	r3, [r7, #4]
 8028a88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8028a8a:	687b      	ldr	r3, [r7, #4]
 8028a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8028a8e:	687b      	ldr	r3, [r7, #4]
 8028a90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8028a92:	687b      	ldr	r3, [r7, #4]
 8028a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8028a98:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8028a9a:	687b      	ldr	r3, [r7, #4]
 8028a9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8028a9e:	687b      	ldr	r3, [r7, #4]
 8028aa0:	661a      	str	r2, [r3, #96]	; 0x60
 8028aa2:	e00f      	b.n	8028ac4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028aa4:	687b      	ldr	r3, [r7, #4]
 8028aa6:	681b      	ldr	r3, [r3, #0]
 8028aa8:	4a58      	ldr	r2, [pc, #352]	; (8028c0c <HAL_SD_GetCardCSD+0x344>)
 8028aaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028aac:	687b      	ldr	r3, [r7, #4]
 8028aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ab0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8028ab4:	687b      	ldr	r3, [r7, #4]
 8028ab6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8028ab8:	687b      	ldr	r3, [r7, #4]
 8028aba:	2201      	movs	r2, #1
 8028abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8028ac0:	2301      	movs	r3, #1
 8028ac2:	e09d      	b.n	8028c00 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8028ac4:	687b      	ldr	r3, [r7, #4]
 8028ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028ac8:	0b9b      	lsrs	r3, r3, #14
 8028aca:	b2db      	uxtb	r3, r3
 8028acc:	f003 0301 	and.w	r3, r3, #1
 8028ad0:	b2da      	uxtb	r2, r3
 8028ad2:	683b      	ldr	r3, [r7, #0]
 8028ad4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8028ad6:	687b      	ldr	r3, [r7, #4]
 8028ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028ada:	09db      	lsrs	r3, r3, #7
 8028adc:	b2db      	uxtb	r3, r3
 8028ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028ae2:	b2da      	uxtb	r2, r3
 8028ae4:	683b      	ldr	r3, [r7, #0]
 8028ae6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8028ae8:	687b      	ldr	r3, [r7, #4]
 8028aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028aec:	b2db      	uxtb	r3, r3
 8028aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028af2:	b2da      	uxtb	r2, r3
 8028af4:	683b      	ldr	r3, [r7, #0]
 8028af6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8028af8:	687b      	ldr	r3, [r7, #4]
 8028afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028afc:	0fdb      	lsrs	r3, r3, #31
 8028afe:	b2da      	uxtb	r2, r3
 8028b00:	683b      	ldr	r3, [r7, #0]
 8028b02:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8028b04:	687b      	ldr	r3, [r7, #4]
 8028b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b08:	0f5b      	lsrs	r3, r3, #29
 8028b0a:	b2db      	uxtb	r3, r3
 8028b0c:	f003 0303 	and.w	r3, r3, #3
 8028b10:	b2da      	uxtb	r2, r3
 8028b12:	683b      	ldr	r3, [r7, #0]
 8028b14:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8028b16:	687b      	ldr	r3, [r7, #4]
 8028b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b1a:	0e9b      	lsrs	r3, r3, #26
 8028b1c:	b2db      	uxtb	r3, r3
 8028b1e:	f003 0307 	and.w	r3, r3, #7
 8028b22:	b2da      	uxtb	r2, r3
 8028b24:	683b      	ldr	r3, [r7, #0]
 8028b26:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8028b28:	687b      	ldr	r3, [r7, #4]
 8028b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b2c:	0d9b      	lsrs	r3, r3, #22
 8028b2e:	b2db      	uxtb	r3, r3
 8028b30:	f003 030f 	and.w	r3, r3, #15
 8028b34:	b2da      	uxtb	r2, r3
 8028b36:	683b      	ldr	r3, [r7, #0]
 8028b38:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8028b3a:	687b      	ldr	r3, [r7, #4]
 8028b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b3e:	0d5b      	lsrs	r3, r3, #21
 8028b40:	b2db      	uxtb	r3, r3
 8028b42:	f003 0301 	and.w	r3, r3, #1
 8028b46:	b2da      	uxtb	r2, r3
 8028b48:	683b      	ldr	r3, [r7, #0]
 8028b4a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8028b4e:	683b      	ldr	r3, [r7, #0]
 8028b50:	2200      	movs	r2, #0
 8028b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8028b56:	687b      	ldr	r3, [r7, #4]
 8028b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b5a:	0c1b      	lsrs	r3, r3, #16
 8028b5c:	b2db      	uxtb	r3, r3
 8028b5e:	f003 0301 	and.w	r3, r3, #1
 8028b62:	b2da      	uxtb	r2, r3
 8028b64:	683b      	ldr	r3, [r7, #0]
 8028b66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8028b6a:	687b      	ldr	r3, [r7, #4]
 8028b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b6e:	0bdb      	lsrs	r3, r3, #15
 8028b70:	b2db      	uxtb	r3, r3
 8028b72:	f003 0301 	and.w	r3, r3, #1
 8028b76:	b2da      	uxtb	r2, r3
 8028b78:	683b      	ldr	r3, [r7, #0]
 8028b7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8028b7e:	687b      	ldr	r3, [r7, #4]
 8028b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b82:	0b9b      	lsrs	r3, r3, #14
 8028b84:	b2db      	uxtb	r3, r3
 8028b86:	f003 0301 	and.w	r3, r3, #1
 8028b8a:	b2da      	uxtb	r2, r3
 8028b8c:	683b      	ldr	r3, [r7, #0]
 8028b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8028b92:	687b      	ldr	r3, [r7, #4]
 8028b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b96:	0b5b      	lsrs	r3, r3, #13
 8028b98:	b2db      	uxtb	r3, r3
 8028b9a:	f003 0301 	and.w	r3, r3, #1
 8028b9e:	b2da      	uxtb	r2, r3
 8028ba0:	683b      	ldr	r3, [r7, #0]
 8028ba2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8028ba6:	687b      	ldr	r3, [r7, #4]
 8028ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028baa:	0b1b      	lsrs	r3, r3, #12
 8028bac:	b2db      	uxtb	r3, r3
 8028bae:	f003 0301 	and.w	r3, r3, #1
 8028bb2:	b2da      	uxtb	r2, r3
 8028bb4:	683b      	ldr	r3, [r7, #0]
 8028bb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8028bba:	687b      	ldr	r3, [r7, #4]
 8028bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028bbe:	0a9b      	lsrs	r3, r3, #10
 8028bc0:	b2db      	uxtb	r3, r3
 8028bc2:	f003 0303 	and.w	r3, r3, #3
 8028bc6:	b2da      	uxtb	r2, r3
 8028bc8:	683b      	ldr	r3, [r7, #0]
 8028bca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8028bce:	687b      	ldr	r3, [r7, #4]
 8028bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028bd2:	0a1b      	lsrs	r3, r3, #8
 8028bd4:	b2db      	uxtb	r3, r3
 8028bd6:	f003 0303 	and.w	r3, r3, #3
 8028bda:	b2da      	uxtb	r2, r3
 8028bdc:	683b      	ldr	r3, [r7, #0]
 8028bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8028be2:	687b      	ldr	r3, [r7, #4]
 8028be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028be6:	085b      	lsrs	r3, r3, #1
 8028be8:	b2db      	uxtb	r3, r3
 8028bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028bee:	b2da      	uxtb	r2, r3
 8028bf0:	683b      	ldr	r3, [r7, #0]
 8028bf2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8028bf6:	683b      	ldr	r3, [r7, #0]
 8028bf8:	2201      	movs	r2, #1
 8028bfa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8028bfe:	2300      	movs	r3, #0
}
 8028c00:	4618      	mov	r0, r3
 8028c02:	370c      	adds	r7, #12
 8028c04:	46bd      	mov	sp, r7
 8028c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c0a:	4770      	bx	lr
 8028c0c:	004005ff 	.word	0x004005ff

08028c10 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8028c10:	b480      	push	{r7}
 8028c12:	b083      	sub	sp, #12
 8028c14:	af00      	add	r7, sp, #0
 8028c16:	6078      	str	r0, [r7, #4]
 8028c18:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8028c1a:	687b      	ldr	r3, [r7, #4]
 8028c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028c1e:	683b      	ldr	r3, [r7, #0]
 8028c20:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8028c22:	687b      	ldr	r3, [r7, #4]
 8028c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8028c26:	683b      	ldr	r3, [r7, #0]
 8028c28:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8028c2a:	687b      	ldr	r3, [r7, #4]
 8028c2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8028c2e:	683b      	ldr	r3, [r7, #0]
 8028c30:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8028c32:	687b      	ldr	r3, [r7, #4]
 8028c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8028c36:	683b      	ldr	r3, [r7, #0]
 8028c38:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8028c3a:	687b      	ldr	r3, [r7, #4]
 8028c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8028c3e:	683b      	ldr	r3, [r7, #0]
 8028c40:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8028c42:	687b      	ldr	r3, [r7, #4]
 8028c44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8028c46:	683b      	ldr	r3, [r7, #0]
 8028c48:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8028c4a:	687b      	ldr	r3, [r7, #4]
 8028c4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8028c4e:	683b      	ldr	r3, [r7, #0]
 8028c50:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8028c52:	687b      	ldr	r3, [r7, #4]
 8028c54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8028c56:	683b      	ldr	r3, [r7, #0]
 8028c58:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8028c5a:	2300      	movs	r3, #0
}
 8028c5c:	4618      	mov	r0, r3
 8028c5e:	370c      	adds	r7, #12
 8028c60:	46bd      	mov	sp, r7
 8028c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c66:	4770      	bx	lr

08028c68 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8028c68:	b5b0      	push	{r4, r5, r7, lr}
 8028c6a:	b08e      	sub	sp, #56	; 0x38
 8028c6c:	af04      	add	r7, sp, #16
 8028c6e:	6078      	str	r0, [r7, #4]
 8028c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8028c72:	687b      	ldr	r3, [r7, #4]
 8028c74:	2203      	movs	r2, #3
 8028c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8028c7a:	687b      	ldr	r3, [r7, #4]
 8028c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028c7e:	2b03      	cmp	r3, #3
 8028c80:	d02e      	beq.n	8028ce0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8028c82:	683b      	ldr	r3, [r7, #0]
 8028c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028c88:	d106      	bne.n	8028c98 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028c8a:	687b      	ldr	r3, [r7, #4]
 8028c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028c8e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8028c92:	687b      	ldr	r3, [r7, #4]
 8028c94:	639a      	str	r2, [r3, #56]	; 0x38
 8028c96:	e029      	b.n	8028cec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8028c98:	683b      	ldr	r3, [r7, #0]
 8028c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028c9e:	d10a      	bne.n	8028cb6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8028ca0:	6878      	ldr	r0, [r7, #4]
 8028ca2:	f000 fa01 	bl	80290a8 <SD_WideBus_Enable>
 8028ca6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8028ca8:	687b      	ldr	r3, [r7, #4]
 8028caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028cae:	431a      	orrs	r2, r3
 8028cb0:	687b      	ldr	r3, [r7, #4]
 8028cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8028cb4:	e01a      	b.n	8028cec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8028cb6:	683b      	ldr	r3, [r7, #0]
 8028cb8:	2b00      	cmp	r3, #0
 8028cba:	d10a      	bne.n	8028cd2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8028cbc:	6878      	ldr	r0, [r7, #4]
 8028cbe:	f000 fa3e 	bl	802913e <SD_WideBus_Disable>
 8028cc2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8028cc4:	687b      	ldr	r3, [r7, #4]
 8028cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028cca:	431a      	orrs	r2, r3
 8028ccc:	687b      	ldr	r3, [r7, #4]
 8028cce:	639a      	str	r2, [r3, #56]	; 0x38
 8028cd0:	e00c      	b.n	8028cec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8028cd2:	687b      	ldr	r3, [r7, #4]
 8028cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8028cda:	687b      	ldr	r3, [r7, #4]
 8028cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8028cde:	e005      	b.n	8028cec <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028ce0:	687b      	ldr	r3, [r7, #4]
 8028ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ce4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8028ce8:	687b      	ldr	r3, [r7, #4]
 8028cea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8028cec:	687b      	ldr	r3, [r7, #4]
 8028cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cf0:	2b00      	cmp	r3, #0
 8028cf2:	d009      	beq.n	8028d08 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028cf4:	687b      	ldr	r3, [r7, #4]
 8028cf6:	681b      	ldr	r3, [r3, #0]
 8028cf8:	4a18      	ldr	r2, [pc, #96]	; (8028d5c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8028cfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8028cfc:	687b      	ldr	r3, [r7, #4]
 8028cfe:	2201      	movs	r2, #1
 8028d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8028d04:	2301      	movs	r3, #1
 8028d06:	e024      	b.n	8028d52 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8028d08:	687b      	ldr	r3, [r7, #4]
 8028d0a:	685b      	ldr	r3, [r3, #4]
 8028d0c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8028d0e:	687b      	ldr	r3, [r7, #4]
 8028d10:	689b      	ldr	r3, [r3, #8]
 8028d12:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8028d14:	687b      	ldr	r3, [r7, #4]
 8028d16:	68db      	ldr	r3, [r3, #12]
 8028d18:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8028d1a:	683b      	ldr	r3, [r7, #0]
 8028d1c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8028d1e:	687b      	ldr	r3, [r7, #4]
 8028d20:	695b      	ldr	r3, [r3, #20]
 8028d22:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8028d24:	687b      	ldr	r3, [r7, #4]
 8028d26:	699b      	ldr	r3, [r3, #24]
 8028d28:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8028d2a:	687b      	ldr	r3, [r7, #4]
 8028d2c:	681d      	ldr	r5, [r3, #0]
 8028d2e:	466c      	mov	r4, sp
 8028d30:	f107 0318 	add.w	r3, r7, #24
 8028d34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028d38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8028d3c:	f107 030c 	add.w	r3, r7, #12
 8028d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028d42:	4628      	mov	r0, r5
 8028d44:	f000 ff1a 	bl	8029b7c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8028d48:	687b      	ldr	r3, [r7, #4]
 8028d4a:	2201      	movs	r2, #1
 8028d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8028d50:	2300      	movs	r3, #0
}
 8028d52:	4618      	mov	r0, r3
 8028d54:	3728      	adds	r7, #40	; 0x28
 8028d56:	46bd      	mov	sp, r7
 8028d58:	bdb0      	pop	{r4, r5, r7, pc}
 8028d5a:	bf00      	nop
 8028d5c:	004005ff 	.word	0x004005ff

08028d60 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8028d60:	b580      	push	{r7, lr}
 8028d62:	b086      	sub	sp, #24
 8028d64:	af00      	add	r7, sp, #0
 8028d66:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8028d68:	2300      	movs	r3, #0
 8028d6a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8028d6c:	f107 030c 	add.w	r3, r7, #12
 8028d70:	4619      	mov	r1, r3
 8028d72:	6878      	ldr	r0, [r7, #4]
 8028d74:	f000 f970 	bl	8029058 <SD_SendStatus>
 8028d78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8028d7a:	697b      	ldr	r3, [r7, #20]
 8028d7c:	2b00      	cmp	r3, #0
 8028d7e:	d005      	beq.n	8028d8c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8028d80:	687b      	ldr	r3, [r7, #4]
 8028d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028d84:	697b      	ldr	r3, [r7, #20]
 8028d86:	431a      	orrs	r2, r3
 8028d88:	687b      	ldr	r3, [r7, #4]
 8028d8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8028d8c:	68fb      	ldr	r3, [r7, #12]
 8028d8e:	0a5b      	lsrs	r3, r3, #9
 8028d90:	f003 030f 	and.w	r3, r3, #15
 8028d94:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8028d96:	693b      	ldr	r3, [r7, #16]
}
 8028d98:	4618      	mov	r0, r3
 8028d9a:	3718      	adds	r7, #24
 8028d9c:	46bd      	mov	sp, r7
 8028d9e:	bd80      	pop	{r7, pc}

08028da0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8028da0:	b5b0      	push	{r4, r5, r7, lr}
 8028da2:	b094      	sub	sp, #80	; 0x50
 8028da4:	af04      	add	r7, sp, #16
 8028da6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8028da8:	2301      	movs	r3, #1
 8028daa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8028dac:	687b      	ldr	r3, [r7, #4]
 8028dae:	681b      	ldr	r3, [r3, #0]
 8028db0:	4618      	mov	r0, r3
 8028db2:	f000 ff3c 	bl	8029c2e <SDMMC_GetPowerState>
 8028db6:	4603      	mov	r3, r0
 8028db8:	2b00      	cmp	r3, #0
 8028dba:	d102      	bne.n	8028dc2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8028dbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8028dc0:	e0b7      	b.n	8028f32 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8028dc2:	687b      	ldr	r3, [r7, #4]
 8028dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028dc6:	2b03      	cmp	r3, #3
 8028dc8:	d02f      	beq.n	8028e2a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8028dca:	687b      	ldr	r3, [r7, #4]
 8028dcc:	681b      	ldr	r3, [r3, #0]
 8028dce:	4618      	mov	r0, r3
 8028dd0:	f001 f967 	bl	802a0a2 <SDMMC_CmdSendCID>
 8028dd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8028dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028dd8:	2b00      	cmp	r3, #0
 8028dda:	d001      	beq.n	8028de0 <SD_InitCard+0x40>
    {
      return errorstate;
 8028ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028dde:	e0a8      	b.n	8028f32 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8028de0:	687b      	ldr	r3, [r7, #4]
 8028de2:	681b      	ldr	r3, [r3, #0]
 8028de4:	2100      	movs	r1, #0
 8028de6:	4618      	mov	r0, r3
 8028de8:	f000 ff67 	bl	8029cba <SDMMC_GetResponse>
 8028dec:	4602      	mov	r2, r0
 8028dee:	687b      	ldr	r3, [r7, #4]
 8028df0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8028df2:	687b      	ldr	r3, [r7, #4]
 8028df4:	681b      	ldr	r3, [r3, #0]
 8028df6:	2104      	movs	r1, #4
 8028df8:	4618      	mov	r0, r3
 8028dfa:	f000 ff5e 	bl	8029cba <SDMMC_GetResponse>
 8028dfe:	4602      	mov	r2, r0
 8028e00:	687b      	ldr	r3, [r7, #4]
 8028e02:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8028e04:	687b      	ldr	r3, [r7, #4]
 8028e06:	681b      	ldr	r3, [r3, #0]
 8028e08:	2108      	movs	r1, #8
 8028e0a:	4618      	mov	r0, r3
 8028e0c:	f000 ff55 	bl	8029cba <SDMMC_GetResponse>
 8028e10:	4602      	mov	r2, r0
 8028e12:	687b      	ldr	r3, [r7, #4]
 8028e14:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8028e16:	687b      	ldr	r3, [r7, #4]
 8028e18:	681b      	ldr	r3, [r3, #0]
 8028e1a:	210c      	movs	r1, #12
 8028e1c:	4618      	mov	r0, r3
 8028e1e:	f000 ff4c 	bl	8029cba <SDMMC_GetResponse>
 8028e22:	4602      	mov	r2, r0
 8028e24:	687b      	ldr	r3, [r7, #4]
 8028e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8028e2a:	687b      	ldr	r3, [r7, #4]
 8028e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028e2e:	2b03      	cmp	r3, #3
 8028e30:	d00d      	beq.n	8028e4e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8028e32:	687b      	ldr	r3, [r7, #4]
 8028e34:	681b      	ldr	r3, [r3, #0]
 8028e36:	f107 020e 	add.w	r2, r7, #14
 8028e3a:	4611      	mov	r1, r2
 8028e3c:	4618      	mov	r0, r3
 8028e3e:	f001 f96d 	bl	802a11c <SDMMC_CmdSetRelAdd>
 8028e42:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8028e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028e46:	2b00      	cmp	r3, #0
 8028e48:	d001      	beq.n	8028e4e <SD_InitCard+0xae>
    {
      return errorstate;
 8028e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028e4c:	e071      	b.n	8028f32 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8028e4e:	687b      	ldr	r3, [r7, #4]
 8028e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028e52:	2b03      	cmp	r3, #3
 8028e54:	d036      	beq.n	8028ec4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8028e56:	89fb      	ldrh	r3, [r7, #14]
 8028e58:	461a      	mov	r2, r3
 8028e5a:	687b      	ldr	r3, [r7, #4]
 8028e5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8028e5e:	687b      	ldr	r3, [r7, #4]
 8028e60:	681a      	ldr	r2, [r3, #0]
 8028e62:	687b      	ldr	r3, [r7, #4]
 8028e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028e66:	041b      	lsls	r3, r3, #16
 8028e68:	4619      	mov	r1, r3
 8028e6a:	4610      	mov	r0, r2
 8028e6c:	f001 f937 	bl	802a0de <SDMMC_CmdSendCSD>
 8028e70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8028e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028e74:	2b00      	cmp	r3, #0
 8028e76:	d001      	beq.n	8028e7c <SD_InitCard+0xdc>
    {
      return errorstate;
 8028e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028e7a:	e05a      	b.n	8028f32 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8028e7c:	687b      	ldr	r3, [r7, #4]
 8028e7e:	681b      	ldr	r3, [r3, #0]
 8028e80:	2100      	movs	r1, #0
 8028e82:	4618      	mov	r0, r3
 8028e84:	f000 ff19 	bl	8029cba <SDMMC_GetResponse>
 8028e88:	4602      	mov	r2, r0
 8028e8a:	687b      	ldr	r3, [r7, #4]
 8028e8c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8028e8e:	687b      	ldr	r3, [r7, #4]
 8028e90:	681b      	ldr	r3, [r3, #0]
 8028e92:	2104      	movs	r1, #4
 8028e94:	4618      	mov	r0, r3
 8028e96:	f000 ff10 	bl	8029cba <SDMMC_GetResponse>
 8028e9a:	4602      	mov	r2, r0
 8028e9c:	687b      	ldr	r3, [r7, #4]
 8028e9e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8028ea0:	687b      	ldr	r3, [r7, #4]
 8028ea2:	681b      	ldr	r3, [r3, #0]
 8028ea4:	2108      	movs	r1, #8
 8028ea6:	4618      	mov	r0, r3
 8028ea8:	f000 ff07 	bl	8029cba <SDMMC_GetResponse>
 8028eac:	4602      	mov	r2, r0
 8028eae:	687b      	ldr	r3, [r7, #4]
 8028eb0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8028eb2:	687b      	ldr	r3, [r7, #4]
 8028eb4:	681b      	ldr	r3, [r3, #0]
 8028eb6:	210c      	movs	r1, #12
 8028eb8:	4618      	mov	r0, r3
 8028eba:	f000 fefe 	bl	8029cba <SDMMC_GetResponse>
 8028ebe:	4602      	mov	r2, r0
 8028ec0:	687b      	ldr	r3, [r7, #4]
 8028ec2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8028ec4:	687b      	ldr	r3, [r7, #4]
 8028ec6:	681b      	ldr	r3, [r3, #0]
 8028ec8:	2104      	movs	r1, #4
 8028eca:	4618      	mov	r0, r3
 8028ecc:	f000 fef5 	bl	8029cba <SDMMC_GetResponse>
 8028ed0:	4603      	mov	r3, r0
 8028ed2:	0d1a      	lsrs	r2, r3, #20
 8028ed4:	687b      	ldr	r3, [r7, #4]
 8028ed6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8028ed8:	f107 0310 	add.w	r3, r7, #16
 8028edc:	4619      	mov	r1, r3
 8028ede:	6878      	ldr	r0, [r7, #4]
 8028ee0:	f7ff fcf2 	bl	80288c8 <HAL_SD_GetCardCSD>
 8028ee4:	4603      	mov	r3, r0
 8028ee6:	2b00      	cmp	r3, #0
 8028ee8:	d002      	beq.n	8028ef0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028eea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8028eee:	e020      	b.n	8028f32 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8028ef0:	687b      	ldr	r3, [r7, #4]
 8028ef2:	6819      	ldr	r1, [r3, #0]
 8028ef4:	687b      	ldr	r3, [r7, #4]
 8028ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028ef8:	041b      	lsls	r3, r3, #16
 8028efa:	f04f 0400 	mov.w	r4, #0
 8028efe:	461a      	mov	r2, r3
 8028f00:	4623      	mov	r3, r4
 8028f02:	4608      	mov	r0, r1
 8028f04:	f000 ffe4 	bl	8029ed0 <SDMMC_CmdSelDesel>
 8028f08:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8028f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028f0c:	2b00      	cmp	r3, #0
 8028f0e:	d001      	beq.n	8028f14 <SD_InitCard+0x174>
  {
    return errorstate;
 8028f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028f12:	e00e      	b.n	8028f32 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8028f14:	687b      	ldr	r3, [r7, #4]
 8028f16:	681d      	ldr	r5, [r3, #0]
 8028f18:	687b      	ldr	r3, [r7, #4]
 8028f1a:	466c      	mov	r4, sp
 8028f1c:	f103 0210 	add.w	r2, r3, #16
 8028f20:	ca07      	ldmia	r2, {r0, r1, r2}
 8028f22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8028f26:	3304      	adds	r3, #4
 8028f28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028f2a:	4628      	mov	r0, r5
 8028f2c:	f000 fe26 	bl	8029b7c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8028f30:	2300      	movs	r3, #0
}
 8028f32:	4618      	mov	r0, r3
 8028f34:	3740      	adds	r7, #64	; 0x40
 8028f36:	46bd      	mov	sp, r7
 8028f38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028f3c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8028f3c:	b580      	push	{r7, lr}
 8028f3e:	b086      	sub	sp, #24
 8028f40:	af00      	add	r7, sp, #0
 8028f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8028f44:	2300      	movs	r3, #0
 8028f46:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8028f48:	2300      	movs	r3, #0
 8028f4a:	617b      	str	r3, [r7, #20]
 8028f4c:	2300      	movs	r3, #0
 8028f4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8028f50:	687b      	ldr	r3, [r7, #4]
 8028f52:	681b      	ldr	r3, [r3, #0]
 8028f54:	4618      	mov	r0, r3
 8028f56:	f000 ffde 	bl	8029f16 <SDMMC_CmdGoIdleState>
 8028f5a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8028f5c:	68fb      	ldr	r3, [r7, #12]
 8028f5e:	2b00      	cmp	r3, #0
 8028f60:	d001      	beq.n	8028f66 <SD_PowerON+0x2a>
  {
    return errorstate;
 8028f62:	68fb      	ldr	r3, [r7, #12]
 8028f64:	e072      	b.n	802904c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8028f66:	687b      	ldr	r3, [r7, #4]
 8028f68:	681b      	ldr	r3, [r3, #0]
 8028f6a:	4618      	mov	r0, r3
 8028f6c:	f000 fff1 	bl	8029f52 <SDMMC_CmdOperCond>
 8028f70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8028f72:	68fb      	ldr	r3, [r7, #12]
 8028f74:	2b00      	cmp	r3, #0
 8028f76:	d00d      	beq.n	8028f94 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8028f78:	687b      	ldr	r3, [r7, #4]
 8028f7a:	2200      	movs	r2, #0
 8028f7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8028f7e:	687b      	ldr	r3, [r7, #4]
 8028f80:	681b      	ldr	r3, [r3, #0]
 8028f82:	4618      	mov	r0, r3
 8028f84:	f000 ffc7 	bl	8029f16 <SDMMC_CmdGoIdleState>
 8028f88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8028f8a:	68fb      	ldr	r3, [r7, #12]
 8028f8c:	2b00      	cmp	r3, #0
 8028f8e:	d004      	beq.n	8028f9a <SD_PowerON+0x5e>
    {
      return errorstate;
 8028f90:	68fb      	ldr	r3, [r7, #12]
 8028f92:	e05b      	b.n	802904c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8028f94:	687b      	ldr	r3, [r7, #4]
 8028f96:	2201      	movs	r2, #1
 8028f98:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8028f9a:	687b      	ldr	r3, [r7, #4]
 8028f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028f9e:	2b01      	cmp	r3, #1
 8028fa0:	d137      	bne.n	8029012 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8028fa2:	687b      	ldr	r3, [r7, #4]
 8028fa4:	681b      	ldr	r3, [r3, #0]
 8028fa6:	2100      	movs	r1, #0
 8028fa8:	4618      	mov	r0, r3
 8028faa:	f000 fff1 	bl	8029f90 <SDMMC_CmdAppCommand>
 8028fae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8028fb0:	68fb      	ldr	r3, [r7, #12]
 8028fb2:	2b00      	cmp	r3, #0
 8028fb4:	d02d      	beq.n	8029012 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028fb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8028fba:	e047      	b.n	802904c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8028fbc:	687b      	ldr	r3, [r7, #4]
 8028fbe:	681b      	ldr	r3, [r3, #0]
 8028fc0:	2100      	movs	r1, #0
 8028fc2:	4618      	mov	r0, r3
 8028fc4:	f000 ffe4 	bl	8029f90 <SDMMC_CmdAppCommand>
 8028fc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8028fca:	68fb      	ldr	r3, [r7, #12]
 8028fcc:	2b00      	cmp	r3, #0
 8028fce:	d001      	beq.n	8028fd4 <SD_PowerON+0x98>
    {
      return errorstate;
 8028fd0:	68fb      	ldr	r3, [r7, #12]
 8028fd2:	e03b      	b.n	802904c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8028fd4:	687b      	ldr	r3, [r7, #4]
 8028fd6:	681b      	ldr	r3, [r3, #0]
 8028fd8:	491e      	ldr	r1, [pc, #120]	; (8029054 <SD_PowerON+0x118>)
 8028fda:	4618      	mov	r0, r3
 8028fdc:	f000 fffa 	bl	8029fd4 <SDMMC_CmdAppOperCommand>
 8028fe0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8028fe2:	68fb      	ldr	r3, [r7, #12]
 8028fe4:	2b00      	cmp	r3, #0
 8028fe6:	d002      	beq.n	8028fee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028fe8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8028fec:	e02e      	b.n	802904c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8028fee:	687b      	ldr	r3, [r7, #4]
 8028ff0:	681b      	ldr	r3, [r3, #0]
 8028ff2:	2100      	movs	r1, #0
 8028ff4:	4618      	mov	r0, r3
 8028ff6:	f000 fe60 	bl	8029cba <SDMMC_GetResponse>
 8028ffa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8028ffc:	697b      	ldr	r3, [r7, #20]
 8028ffe:	0fdb      	lsrs	r3, r3, #31
 8029000:	2b01      	cmp	r3, #1
 8029002:	d101      	bne.n	8029008 <SD_PowerON+0xcc>
 8029004:	2301      	movs	r3, #1
 8029006:	e000      	b.n	802900a <SD_PowerON+0xce>
 8029008:	2300      	movs	r3, #0
 802900a:	613b      	str	r3, [r7, #16]

    count++;
 802900c:	68bb      	ldr	r3, [r7, #8]
 802900e:	3301      	adds	r3, #1
 8029010:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8029012:	68bb      	ldr	r3, [r7, #8]
 8029014:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8029018:	4293      	cmp	r3, r2
 802901a:	d802      	bhi.n	8029022 <SD_PowerON+0xe6>
 802901c:	693b      	ldr	r3, [r7, #16]
 802901e:	2b00      	cmp	r3, #0
 8029020:	d0cc      	beq.n	8028fbc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8029022:	68bb      	ldr	r3, [r7, #8]
 8029024:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8029028:	4293      	cmp	r3, r2
 802902a:	d902      	bls.n	8029032 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 802902c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8029030:	e00c      	b.n	802904c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8029032:	697b      	ldr	r3, [r7, #20]
 8029034:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8029038:	2b00      	cmp	r3, #0
 802903a:	d003      	beq.n	8029044 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 802903c:	687b      	ldr	r3, [r7, #4]
 802903e:	2201      	movs	r2, #1
 8029040:	645a      	str	r2, [r3, #68]	; 0x44
 8029042:	e002      	b.n	802904a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8029044:	687b      	ldr	r3, [r7, #4]
 8029046:	2200      	movs	r2, #0
 8029048:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 802904a:	2300      	movs	r3, #0
}
 802904c:	4618      	mov	r0, r3
 802904e:	3718      	adds	r7, #24
 8029050:	46bd      	mov	sp, r7
 8029052:	bd80      	pop	{r7, pc}
 8029054:	c1100000 	.word	0xc1100000

08029058 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8029058:	b580      	push	{r7, lr}
 802905a:	b084      	sub	sp, #16
 802905c:	af00      	add	r7, sp, #0
 802905e:	6078      	str	r0, [r7, #4]
 8029060:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8029062:	683b      	ldr	r3, [r7, #0]
 8029064:	2b00      	cmp	r3, #0
 8029066:	d102      	bne.n	802906e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8029068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802906c:	e018      	b.n	80290a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802906e:	687b      	ldr	r3, [r7, #4]
 8029070:	681a      	ldr	r2, [r3, #0]
 8029072:	687b      	ldr	r3, [r7, #4]
 8029074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029076:	041b      	lsls	r3, r3, #16
 8029078:	4619      	mov	r1, r3
 802907a:	4610      	mov	r0, r2
 802907c:	f001 f86f 	bl	802a15e <SDMMC_CmdSendStatus>
 8029080:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8029082:	68fb      	ldr	r3, [r7, #12]
 8029084:	2b00      	cmp	r3, #0
 8029086:	d001      	beq.n	802908c <SD_SendStatus+0x34>
  {
    return errorstate;
 8029088:	68fb      	ldr	r3, [r7, #12]
 802908a:	e009      	b.n	80290a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 802908c:	687b      	ldr	r3, [r7, #4]
 802908e:	681b      	ldr	r3, [r3, #0]
 8029090:	2100      	movs	r1, #0
 8029092:	4618      	mov	r0, r3
 8029094:	f000 fe11 	bl	8029cba <SDMMC_GetResponse>
 8029098:	4602      	mov	r2, r0
 802909a:	683b      	ldr	r3, [r7, #0]
 802909c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 802909e:	2300      	movs	r3, #0
}
 80290a0:	4618      	mov	r0, r3
 80290a2:	3710      	adds	r7, #16
 80290a4:	46bd      	mov	sp, r7
 80290a6:	bd80      	pop	{r7, pc}

080290a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80290a8:	b580      	push	{r7, lr}
 80290aa:	b086      	sub	sp, #24
 80290ac:	af00      	add	r7, sp, #0
 80290ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80290b0:	2300      	movs	r3, #0
 80290b2:	60fb      	str	r3, [r7, #12]
 80290b4:	2300      	movs	r3, #0
 80290b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80290b8:	687b      	ldr	r3, [r7, #4]
 80290ba:	681b      	ldr	r3, [r3, #0]
 80290bc:	2100      	movs	r1, #0
 80290be:	4618      	mov	r0, r3
 80290c0:	f000 fdfb 	bl	8029cba <SDMMC_GetResponse>
 80290c4:	4603      	mov	r3, r0
 80290c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80290ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80290ce:	d102      	bne.n	80290d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80290d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80290d4:	e02f      	b.n	8029136 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80290d6:	f107 030c 	add.w	r3, r7, #12
 80290da:	4619      	mov	r1, r3
 80290dc:	6878      	ldr	r0, [r7, #4]
 80290de:	f000 f879 	bl	80291d4 <SD_FindSCR>
 80290e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80290e4:	697b      	ldr	r3, [r7, #20]
 80290e6:	2b00      	cmp	r3, #0
 80290e8:	d001      	beq.n	80290ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80290ea:	697b      	ldr	r3, [r7, #20]
 80290ec:	e023      	b.n	8029136 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80290ee:	693b      	ldr	r3, [r7, #16]
 80290f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80290f4:	2b00      	cmp	r3, #0
 80290f6:	d01c      	beq.n	8029132 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80290f8:	687b      	ldr	r3, [r7, #4]
 80290fa:	681a      	ldr	r2, [r3, #0]
 80290fc:	687b      	ldr	r3, [r7, #4]
 80290fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029100:	041b      	lsls	r3, r3, #16
 8029102:	4619      	mov	r1, r3
 8029104:	4610      	mov	r0, r2
 8029106:	f000 ff43 	bl	8029f90 <SDMMC_CmdAppCommand>
 802910a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 802910c:	697b      	ldr	r3, [r7, #20]
 802910e:	2b00      	cmp	r3, #0
 8029110:	d001      	beq.n	8029116 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8029112:	697b      	ldr	r3, [r7, #20]
 8029114:	e00f      	b.n	8029136 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8029116:	687b      	ldr	r3, [r7, #4]
 8029118:	681b      	ldr	r3, [r3, #0]
 802911a:	2102      	movs	r1, #2
 802911c:	4618      	mov	r0, r3
 802911e:	f000 ff7d 	bl	802a01c <SDMMC_CmdBusWidth>
 8029122:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8029124:	697b      	ldr	r3, [r7, #20]
 8029126:	2b00      	cmp	r3, #0
 8029128:	d001      	beq.n	802912e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 802912a:	697b      	ldr	r3, [r7, #20]
 802912c:	e003      	b.n	8029136 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 802912e:	2300      	movs	r3, #0
 8029130:	e001      	b.n	8029136 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8029132:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8029136:	4618      	mov	r0, r3
 8029138:	3718      	adds	r7, #24
 802913a:	46bd      	mov	sp, r7
 802913c:	bd80      	pop	{r7, pc}

0802913e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 802913e:	b580      	push	{r7, lr}
 8029140:	b086      	sub	sp, #24
 8029142:	af00      	add	r7, sp, #0
 8029144:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8029146:	2300      	movs	r3, #0
 8029148:	60fb      	str	r3, [r7, #12]
 802914a:	2300      	movs	r3, #0
 802914c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 802914e:	687b      	ldr	r3, [r7, #4]
 8029150:	681b      	ldr	r3, [r3, #0]
 8029152:	2100      	movs	r1, #0
 8029154:	4618      	mov	r0, r3
 8029156:	f000 fdb0 	bl	8029cba <SDMMC_GetResponse>
 802915a:	4603      	mov	r3, r0
 802915c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8029160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8029164:	d102      	bne.n	802916c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8029166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802916a:	e02f      	b.n	80291cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 802916c:	f107 030c 	add.w	r3, r7, #12
 8029170:	4619      	mov	r1, r3
 8029172:	6878      	ldr	r0, [r7, #4]
 8029174:	f000 f82e 	bl	80291d4 <SD_FindSCR>
 8029178:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 802917a:	697b      	ldr	r3, [r7, #20]
 802917c:	2b00      	cmp	r3, #0
 802917e:	d001      	beq.n	8029184 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8029180:	697b      	ldr	r3, [r7, #20]
 8029182:	e023      	b.n	80291cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8029184:	693b      	ldr	r3, [r7, #16]
 8029186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802918a:	2b00      	cmp	r3, #0
 802918c:	d01c      	beq.n	80291c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802918e:	687b      	ldr	r3, [r7, #4]
 8029190:	681a      	ldr	r2, [r3, #0]
 8029192:	687b      	ldr	r3, [r7, #4]
 8029194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029196:	041b      	lsls	r3, r3, #16
 8029198:	4619      	mov	r1, r3
 802919a:	4610      	mov	r0, r2
 802919c:	f000 fef8 	bl	8029f90 <SDMMC_CmdAppCommand>
 80291a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80291a2:	697b      	ldr	r3, [r7, #20]
 80291a4:	2b00      	cmp	r3, #0
 80291a6:	d001      	beq.n	80291ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80291a8:	697b      	ldr	r3, [r7, #20]
 80291aa:	e00f      	b.n	80291cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80291ac:	687b      	ldr	r3, [r7, #4]
 80291ae:	681b      	ldr	r3, [r3, #0]
 80291b0:	2100      	movs	r1, #0
 80291b2:	4618      	mov	r0, r3
 80291b4:	f000 ff32 	bl	802a01c <SDMMC_CmdBusWidth>
 80291b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80291ba:	697b      	ldr	r3, [r7, #20]
 80291bc:	2b00      	cmp	r3, #0
 80291be:	d001      	beq.n	80291c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80291c0:	697b      	ldr	r3, [r7, #20]
 80291c2:	e003      	b.n	80291cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80291c4:	2300      	movs	r3, #0
 80291c6:	e001      	b.n	80291cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80291c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80291cc:	4618      	mov	r0, r3
 80291ce:	3718      	adds	r7, #24
 80291d0:	46bd      	mov	sp, r7
 80291d2:	bd80      	pop	{r7, pc}

080291d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80291d4:	b590      	push	{r4, r7, lr}
 80291d6:	b08f      	sub	sp, #60	; 0x3c
 80291d8:	af00      	add	r7, sp, #0
 80291da:	6078      	str	r0, [r7, #4]
 80291dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80291de:	f7fc f97b 	bl	80254d8 <HAL_GetTick>
 80291e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80291e4:	2300      	movs	r3, #0
 80291e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80291e8:	2300      	movs	r3, #0
 80291ea:	60bb      	str	r3, [r7, #8]
 80291ec:	2300      	movs	r3, #0
 80291ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80291f0:	683b      	ldr	r3, [r7, #0]
 80291f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80291f4:	687b      	ldr	r3, [r7, #4]
 80291f6:	681b      	ldr	r3, [r3, #0]
 80291f8:	2108      	movs	r1, #8
 80291fa:	4618      	mov	r0, r3
 80291fc:	f000 fd9c 	bl	8029d38 <SDMMC_CmdBlockLength>
 8029200:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8029202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029204:	2b00      	cmp	r3, #0
 8029206:	d001      	beq.n	802920c <SD_FindSCR+0x38>
  {
    return errorstate;
 8029208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802920a:	e0a9      	b.n	8029360 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 802920c:	687b      	ldr	r3, [r7, #4]
 802920e:	681a      	ldr	r2, [r3, #0]
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029214:	041b      	lsls	r3, r3, #16
 8029216:	4619      	mov	r1, r3
 8029218:	4610      	mov	r0, r2
 802921a:	f000 feb9 	bl	8029f90 <SDMMC_CmdAppCommand>
 802921e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8029220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029222:	2b00      	cmp	r3, #0
 8029224:	d001      	beq.n	802922a <SD_FindSCR+0x56>
  {
    return errorstate;
 8029226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029228:	e09a      	b.n	8029360 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 802922a:	f04f 33ff 	mov.w	r3, #4294967295
 802922e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8029230:	2308      	movs	r3, #8
 8029232:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8029234:	2330      	movs	r3, #48	; 0x30
 8029236:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8029238:	2302      	movs	r3, #2
 802923a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 802923c:	2300      	movs	r3, #0
 802923e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8029240:	2301      	movs	r3, #1
 8029242:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8029244:	687b      	ldr	r3, [r7, #4]
 8029246:	681b      	ldr	r3, [r3, #0]
 8029248:	f107 0210 	add.w	r2, r7, #16
 802924c:	4611      	mov	r1, r2
 802924e:	4618      	mov	r0, r3
 8029250:	f000 fd46 	bl	8029ce0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8029254:	687b      	ldr	r3, [r7, #4]
 8029256:	681b      	ldr	r3, [r3, #0]
 8029258:	4618      	mov	r0, r3
 802925a:	f000 ff01 	bl	802a060 <SDMMC_CmdSendSCR>
 802925e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8029260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029262:	2b00      	cmp	r3, #0
 8029264:	d022      	beq.n	80292ac <SD_FindSCR+0xd8>
  {
    return errorstate;
 8029266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029268:	e07a      	b.n	8029360 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 802926a:	687b      	ldr	r3, [r7, #4]
 802926c:	681b      	ldr	r3, [r3, #0]
 802926e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8029274:	2b00      	cmp	r3, #0
 8029276:	d00e      	beq.n	8029296 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8029278:	687b      	ldr	r3, [r7, #4]
 802927a:	6819      	ldr	r1, [r3, #0]
 802927c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802927e:	009b      	lsls	r3, r3, #2
 8029280:	f107 0208 	add.w	r2, r7, #8
 8029284:	18d4      	adds	r4, r2, r3
 8029286:	4608      	mov	r0, r1
 8029288:	f000 fca4 	bl	8029bd4 <SDMMC_ReadFIFO>
 802928c:	4603      	mov	r3, r0
 802928e:	6023      	str	r3, [r4, #0]
      index++;
 8029290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029292:	3301      	adds	r3, #1
 8029294:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8029296:	f7fc f91f 	bl	80254d8 <HAL_GetTick>
 802929a:	4602      	mov	r2, r0
 802929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802929e:	1ad3      	subs	r3, r2, r3
 80292a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80292a4:	d102      	bne.n	80292ac <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80292a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80292aa:	e059      	b.n	8029360 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80292ac:	687b      	ldr	r3, [r7, #4]
 80292ae:	681b      	ldr	r3, [r3, #0]
 80292b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80292b2:	f240 432a 	movw	r3, #1066	; 0x42a
 80292b6:	4013      	ands	r3, r2
 80292b8:	2b00      	cmp	r3, #0
 80292ba:	d0d6      	beq.n	802926a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80292bc:	687b      	ldr	r3, [r7, #4]
 80292be:	681b      	ldr	r3, [r3, #0]
 80292c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80292c2:	f003 0308 	and.w	r3, r3, #8
 80292c6:	2b00      	cmp	r3, #0
 80292c8:	d005      	beq.n	80292d6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80292ca:	687b      	ldr	r3, [r7, #4]
 80292cc:	681b      	ldr	r3, [r3, #0]
 80292ce:	2208      	movs	r2, #8
 80292d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80292d2:	2308      	movs	r3, #8
 80292d4:	e044      	b.n	8029360 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80292d6:	687b      	ldr	r3, [r7, #4]
 80292d8:	681b      	ldr	r3, [r3, #0]
 80292da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80292dc:	f003 0302 	and.w	r3, r3, #2
 80292e0:	2b00      	cmp	r3, #0
 80292e2:	d005      	beq.n	80292f0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80292e4:	687b      	ldr	r3, [r7, #4]
 80292e6:	681b      	ldr	r3, [r3, #0]
 80292e8:	2202      	movs	r2, #2
 80292ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80292ec:	2302      	movs	r3, #2
 80292ee:	e037      	b.n	8029360 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80292f0:	687b      	ldr	r3, [r7, #4]
 80292f2:	681b      	ldr	r3, [r3, #0]
 80292f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80292f6:	f003 0320 	and.w	r3, r3, #32
 80292fa:	2b00      	cmp	r3, #0
 80292fc:	d005      	beq.n	802930a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80292fe:	687b      	ldr	r3, [r7, #4]
 8029300:	681b      	ldr	r3, [r3, #0]
 8029302:	2220      	movs	r2, #32
 8029304:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8029306:	2320      	movs	r3, #32
 8029308:	e02a      	b.n	8029360 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 802930a:	687b      	ldr	r3, [r7, #4]
 802930c:	681b      	ldr	r3, [r3, #0]
 802930e:	f240 523a 	movw	r2, #1338	; 0x53a
 8029312:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8029314:	68fb      	ldr	r3, [r7, #12]
 8029316:	061a      	lsls	r2, r3, #24
 8029318:	68fb      	ldr	r3, [r7, #12]
 802931a:	021b      	lsls	r3, r3, #8
 802931c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8029320:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8029322:	68fb      	ldr	r3, [r7, #12]
 8029324:	0a1b      	lsrs	r3, r3, #8
 8029326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 802932a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 802932c:	68fb      	ldr	r3, [r7, #12]
 802932e:	0e1b      	lsrs	r3, r3, #24
 8029330:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8029332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029334:	601a      	str	r2, [r3, #0]
    scr++;
 8029336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029338:	3304      	adds	r3, #4
 802933a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 802933c:	68bb      	ldr	r3, [r7, #8]
 802933e:	061a      	lsls	r2, r3, #24
 8029340:	68bb      	ldr	r3, [r7, #8]
 8029342:	021b      	lsls	r3, r3, #8
 8029344:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8029348:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 802934a:	68bb      	ldr	r3, [r7, #8]
 802934c:	0a1b      	lsrs	r3, r3, #8
 802934e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8029352:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8029354:	68bb      	ldr	r3, [r7, #8]
 8029356:	0e1b      	lsrs	r3, r3, #24
 8029358:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 802935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802935c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 802935e:	2300      	movs	r3, #0
}
 8029360:	4618      	mov	r0, r3
 8029362:	373c      	adds	r7, #60	; 0x3c
 8029364:	46bd      	mov	sp, r7
 8029366:	bd90      	pop	{r4, r7, pc}

08029368 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8029368:	b580      	push	{r7, lr}
 802936a:	b082      	sub	sp, #8
 802936c:	af00      	add	r7, sp, #0
 802936e:	6078      	str	r0, [r7, #4]
 8029370:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8029372:	687b      	ldr	r3, [r7, #4]
 8029374:	2b00      	cmp	r3, #0
 8029376:	d101      	bne.n	802937c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8029378:	2301      	movs	r3, #1
 802937a:	e025      	b.n	80293c8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 802937c:	687b      	ldr	r3, [r7, #4]
 802937e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8029382:	b2db      	uxtb	r3, r3
 8029384:	2b00      	cmp	r3, #0
 8029386:	d106      	bne.n	8029396 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8029388:	687b      	ldr	r3, [r7, #4]
 802938a:	2200      	movs	r2, #0
 802938c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8029390:	6878      	ldr	r0, [r7, #4]
 8029392:	f7d7 fc89 	bl	8000ca8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8029396:	687b      	ldr	r3, [r7, #4]
 8029398:	2202      	movs	r2, #2
 802939a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 802939e:	687b      	ldr	r3, [r7, #4]
 80293a0:	681a      	ldr	r2, [r3, #0]
 80293a2:	687b      	ldr	r3, [r7, #4]
 80293a4:	3304      	adds	r3, #4
 80293a6:	4619      	mov	r1, r3
 80293a8:	4610      	mov	r0, r2
 80293aa:	f000 fac1 	bl	8029930 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80293ae:	687b      	ldr	r3, [r7, #4]
 80293b0:	6818      	ldr	r0, [r3, #0]
 80293b2:	687b      	ldr	r3, [r7, #4]
 80293b4:	685b      	ldr	r3, [r3, #4]
 80293b6:	461a      	mov	r2, r3
 80293b8:	6839      	ldr	r1, [r7, #0]
 80293ba:	f000 fb2b 	bl	8029a14 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80293be:	687b      	ldr	r3, [r7, #4]
 80293c0:	2201      	movs	r2, #1
 80293c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80293c6:	2300      	movs	r3, #0
}
 80293c8:	4618      	mov	r0, r3
 80293ca:	3708      	adds	r7, #8
 80293cc:	46bd      	mov	sp, r7
 80293ce:	bd80      	pop	{r7, pc}

080293d0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80293d0:	b580      	push	{r7, lr}
 80293d2:	b084      	sub	sp, #16
 80293d4:	af00      	add	r7, sp, #0
 80293d6:	60f8      	str	r0, [r7, #12]
 80293d8:	60b9      	str	r1, [r7, #8]
 80293da:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80293dc:	68fb      	ldr	r3, [r7, #12]
 80293de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80293e2:	b2db      	uxtb	r3, r3
 80293e4:	2b02      	cmp	r3, #2
 80293e6:	d101      	bne.n	80293ec <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80293e8:	2302      	movs	r3, #2
 80293ea:	e018      	b.n	802941e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80293ec:	68fb      	ldr	r3, [r7, #12]
 80293ee:	2202      	movs	r2, #2
 80293f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80293f4:	68fb      	ldr	r3, [r7, #12]
 80293f6:	681b      	ldr	r3, [r3, #0]
 80293f8:	687a      	ldr	r2, [r7, #4]
 80293fa:	68b9      	ldr	r1, [r7, #8]
 80293fc:	4618      	mov	r0, r3
 80293fe:	f000 fb89 	bl	8029b14 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8029402:	68bb      	ldr	r3, [r7, #8]
 8029404:	681b      	ldr	r3, [r3, #0]
 8029406:	2b02      	cmp	r3, #2
 8029408:	d104      	bne.n	8029414 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 802940a:	68fb      	ldr	r3, [r7, #12]
 802940c:	2205      	movs	r2, #5
 802940e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8029412:	e003      	b.n	802941c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8029414:	68fb      	ldr	r3, [r7, #12]
 8029416:	2201      	movs	r2, #1
 8029418:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 802941c:	2300      	movs	r3, #0
}
 802941e:	4618      	mov	r0, r3
 8029420:	3710      	adds	r7, #16
 8029422:	46bd      	mov	sp, r7
 8029424:	bd80      	pop	{r7, pc}

08029426 <HAL_SDRAM_SetAutoRefreshNumber>:
  *                the configuration information for SDRAM module.  
  * @param  AutoRefreshNumber The SDRAM auto Refresh number       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
 8029426:	b580      	push	{r7, lr}
 8029428:	b082      	sub	sp, #8
 802942a:	af00      	add	r7, sp, #0
 802942c:	6078      	str	r0, [r7, #4]
 802942e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8029430:	687b      	ldr	r3, [r7, #4]
 8029432:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8029436:	b2db      	uxtb	r3, r3
 8029438:	2b02      	cmp	r3, #2
 802943a:	d101      	bne.n	8029440 <HAL_SDRAM_SetAutoRefreshNumber+0x1a>
  {
    return HAL_BUSY;
 802943c:	2302      	movs	r3, #2
 802943e:	e00e      	b.n	802945e <HAL_SDRAM_SetAutoRefreshNumber+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8029440:	687b      	ldr	r3, [r7, #4]
 8029442:	2202      	movs	r2, #2
 8029444:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Set the Auto-Refresh number */
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 8029448:	687b      	ldr	r3, [r7, #4]
 802944a:	681b      	ldr	r3, [r3, #0]
 802944c:	6839      	ldr	r1, [r7, #0]
 802944e:	4618      	mov	r0, r3
 8029450:	f000 fb81 	bl	8029b56 <FMC_SDRAM_SetAutoRefreshNumber>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8029454:	687b      	ldr	r3, [r7, #4]
 8029456:	2201      	movs	r2, #1
 8029458:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 802945c:	2300      	movs	r3, #0
}
 802945e:	4618      	mov	r0, r3
 8029460:	3708      	adds	r7, #8
 8029462:	46bd      	mov	sp, r7
 8029464:	bd80      	pop	{r7, pc}

08029466 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8029466:	b580      	push	{r7, lr}
 8029468:	b082      	sub	sp, #8
 802946a:	af00      	add	r7, sp, #0
 802946c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802946e:	687b      	ldr	r3, [r7, #4]
 8029470:	2b00      	cmp	r3, #0
 8029472:	d101      	bne.n	8029478 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8029474:	2301      	movs	r3, #1
 8029476:	e01d      	b.n	80294b4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029478:	687b      	ldr	r3, [r7, #4]
 802947a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802947e:	b2db      	uxtb	r3, r3
 8029480:	2b00      	cmp	r3, #0
 8029482:	d106      	bne.n	8029492 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029484:	687b      	ldr	r3, [r7, #4]
 8029486:	2200      	movs	r2, #0
 8029488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802948c:	6878      	ldr	r0, [r7, #4]
 802948e:	f000 f815 	bl	80294bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029492:	687b      	ldr	r3, [r7, #4]
 8029494:	2202      	movs	r2, #2
 8029496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802949a:	687b      	ldr	r3, [r7, #4]
 802949c:	681a      	ldr	r2, [r3, #0]
 802949e:	687b      	ldr	r3, [r7, #4]
 80294a0:	3304      	adds	r3, #4
 80294a2:	4619      	mov	r1, r3
 80294a4:	4610      	mov	r0, r2
 80294a6:	f000 f985 	bl	80297b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80294aa:	687b      	ldr	r3, [r7, #4]
 80294ac:	2201      	movs	r2, #1
 80294ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80294b2:	2300      	movs	r3, #0
}
 80294b4:	4618      	mov	r0, r3
 80294b6:	3708      	adds	r7, #8
 80294b8:	46bd      	mov	sp, r7
 80294ba:	bd80      	pop	{r7, pc}

080294bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80294bc:	b480      	push	{r7}
 80294be:	b083      	sub	sp, #12
 80294c0:	af00      	add	r7, sp, #0
 80294c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80294c4:	bf00      	nop
 80294c6:	370c      	adds	r7, #12
 80294c8:	46bd      	mov	sp, r7
 80294ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294ce:	4770      	bx	lr

080294d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80294d0:	b480      	push	{r7}
 80294d2:	b085      	sub	sp, #20
 80294d4:	af00      	add	r7, sp, #0
 80294d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80294d8:	687b      	ldr	r3, [r7, #4]
 80294da:	681b      	ldr	r3, [r3, #0]
 80294dc:	68da      	ldr	r2, [r3, #12]
 80294de:	687b      	ldr	r3, [r7, #4]
 80294e0:	681b      	ldr	r3, [r3, #0]
 80294e2:	f042 0201 	orr.w	r2, r2, #1
 80294e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80294e8:	687b      	ldr	r3, [r7, #4]
 80294ea:	681b      	ldr	r3, [r3, #0]
 80294ec:	689a      	ldr	r2, [r3, #8]
 80294ee:	4b0c      	ldr	r3, [pc, #48]	; (8029520 <HAL_TIM_Base_Start_IT+0x50>)
 80294f0:	4013      	ands	r3, r2
 80294f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80294f4:	68fb      	ldr	r3, [r7, #12]
 80294f6:	2b06      	cmp	r3, #6
 80294f8:	d00b      	beq.n	8029512 <HAL_TIM_Base_Start_IT+0x42>
 80294fa:	68fb      	ldr	r3, [r7, #12]
 80294fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029500:	d007      	beq.n	8029512 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8029502:	687b      	ldr	r3, [r7, #4]
 8029504:	681b      	ldr	r3, [r3, #0]
 8029506:	681a      	ldr	r2, [r3, #0]
 8029508:	687b      	ldr	r3, [r7, #4]
 802950a:	681b      	ldr	r3, [r3, #0]
 802950c:	f042 0201 	orr.w	r2, r2, #1
 8029510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029512:	2300      	movs	r3, #0
}
 8029514:	4618      	mov	r0, r3
 8029516:	3714      	adds	r7, #20
 8029518:	46bd      	mov	sp, r7
 802951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802951e:	4770      	bx	lr
 8029520:	00010007 	.word	0x00010007

08029524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8029524:	b580      	push	{r7, lr}
 8029526:	b082      	sub	sp, #8
 8029528:	af00      	add	r7, sp, #0
 802952a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802952c:	687b      	ldr	r3, [r7, #4]
 802952e:	681b      	ldr	r3, [r3, #0]
 8029530:	691b      	ldr	r3, [r3, #16]
 8029532:	f003 0302 	and.w	r3, r3, #2
 8029536:	2b02      	cmp	r3, #2
 8029538:	d122      	bne.n	8029580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802953a:	687b      	ldr	r3, [r7, #4]
 802953c:	681b      	ldr	r3, [r3, #0]
 802953e:	68db      	ldr	r3, [r3, #12]
 8029540:	f003 0302 	and.w	r3, r3, #2
 8029544:	2b02      	cmp	r3, #2
 8029546:	d11b      	bne.n	8029580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029548:	687b      	ldr	r3, [r7, #4]
 802954a:	681b      	ldr	r3, [r3, #0]
 802954c:	f06f 0202 	mvn.w	r2, #2
 8029550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8029552:	687b      	ldr	r3, [r7, #4]
 8029554:	2201      	movs	r2, #1
 8029556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029558:	687b      	ldr	r3, [r7, #4]
 802955a:	681b      	ldr	r3, [r3, #0]
 802955c:	699b      	ldr	r3, [r3, #24]
 802955e:	f003 0303 	and.w	r3, r3, #3
 8029562:	2b00      	cmp	r3, #0
 8029564:	d003      	beq.n	802956e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029566:	6878      	ldr	r0, [r7, #4]
 8029568:	f000 f905 	bl	8029776 <HAL_TIM_IC_CaptureCallback>
 802956c:	e005      	b.n	802957a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802956e:	6878      	ldr	r0, [r7, #4]
 8029570:	f000 f8f7 	bl	8029762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029574:	6878      	ldr	r0, [r7, #4]
 8029576:	f000 f908 	bl	802978a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802957a:	687b      	ldr	r3, [r7, #4]
 802957c:	2200      	movs	r2, #0
 802957e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8029580:	687b      	ldr	r3, [r7, #4]
 8029582:	681b      	ldr	r3, [r3, #0]
 8029584:	691b      	ldr	r3, [r3, #16]
 8029586:	f003 0304 	and.w	r3, r3, #4
 802958a:	2b04      	cmp	r3, #4
 802958c:	d122      	bne.n	80295d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802958e:	687b      	ldr	r3, [r7, #4]
 8029590:	681b      	ldr	r3, [r3, #0]
 8029592:	68db      	ldr	r3, [r3, #12]
 8029594:	f003 0304 	and.w	r3, r3, #4
 8029598:	2b04      	cmp	r3, #4
 802959a:	d11b      	bne.n	80295d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	681b      	ldr	r3, [r3, #0]
 80295a0:	f06f 0204 	mvn.w	r2, #4
 80295a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80295a6:	687b      	ldr	r3, [r7, #4]
 80295a8:	2202      	movs	r2, #2
 80295aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80295ac:	687b      	ldr	r3, [r7, #4]
 80295ae:	681b      	ldr	r3, [r3, #0]
 80295b0:	699b      	ldr	r3, [r3, #24]
 80295b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80295b6:	2b00      	cmp	r3, #0
 80295b8:	d003      	beq.n	80295c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80295ba:	6878      	ldr	r0, [r7, #4]
 80295bc:	f000 f8db 	bl	8029776 <HAL_TIM_IC_CaptureCallback>
 80295c0:	e005      	b.n	80295ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80295c2:	6878      	ldr	r0, [r7, #4]
 80295c4:	f000 f8cd 	bl	8029762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80295c8:	6878      	ldr	r0, [r7, #4]
 80295ca:	f000 f8de 	bl	802978a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80295ce:	687b      	ldr	r3, [r7, #4]
 80295d0:	2200      	movs	r2, #0
 80295d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80295d4:	687b      	ldr	r3, [r7, #4]
 80295d6:	681b      	ldr	r3, [r3, #0]
 80295d8:	691b      	ldr	r3, [r3, #16]
 80295da:	f003 0308 	and.w	r3, r3, #8
 80295de:	2b08      	cmp	r3, #8
 80295e0:	d122      	bne.n	8029628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80295e2:	687b      	ldr	r3, [r7, #4]
 80295e4:	681b      	ldr	r3, [r3, #0]
 80295e6:	68db      	ldr	r3, [r3, #12]
 80295e8:	f003 0308 	and.w	r3, r3, #8
 80295ec:	2b08      	cmp	r3, #8
 80295ee:	d11b      	bne.n	8029628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80295f0:	687b      	ldr	r3, [r7, #4]
 80295f2:	681b      	ldr	r3, [r3, #0]
 80295f4:	f06f 0208 	mvn.w	r2, #8
 80295f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80295fa:	687b      	ldr	r3, [r7, #4]
 80295fc:	2204      	movs	r2, #4
 80295fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8029600:	687b      	ldr	r3, [r7, #4]
 8029602:	681b      	ldr	r3, [r3, #0]
 8029604:	69db      	ldr	r3, [r3, #28]
 8029606:	f003 0303 	and.w	r3, r3, #3
 802960a:	2b00      	cmp	r3, #0
 802960c:	d003      	beq.n	8029616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802960e:	6878      	ldr	r0, [r7, #4]
 8029610:	f000 f8b1 	bl	8029776 <HAL_TIM_IC_CaptureCallback>
 8029614:	e005      	b.n	8029622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029616:	6878      	ldr	r0, [r7, #4]
 8029618:	f000 f8a3 	bl	8029762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802961c:	6878      	ldr	r0, [r7, #4]
 802961e:	f000 f8b4 	bl	802978a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029622:	687b      	ldr	r3, [r7, #4]
 8029624:	2200      	movs	r2, #0
 8029626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8029628:	687b      	ldr	r3, [r7, #4]
 802962a:	681b      	ldr	r3, [r3, #0]
 802962c:	691b      	ldr	r3, [r3, #16]
 802962e:	f003 0310 	and.w	r3, r3, #16
 8029632:	2b10      	cmp	r3, #16
 8029634:	d122      	bne.n	802967c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8029636:	687b      	ldr	r3, [r7, #4]
 8029638:	681b      	ldr	r3, [r3, #0]
 802963a:	68db      	ldr	r3, [r3, #12]
 802963c:	f003 0310 	and.w	r3, r3, #16
 8029640:	2b10      	cmp	r3, #16
 8029642:	d11b      	bne.n	802967c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	681b      	ldr	r3, [r3, #0]
 8029648:	f06f 0210 	mvn.w	r2, #16
 802964c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802964e:	687b      	ldr	r3, [r7, #4]
 8029650:	2208      	movs	r2, #8
 8029652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029654:	687b      	ldr	r3, [r7, #4]
 8029656:	681b      	ldr	r3, [r3, #0]
 8029658:	69db      	ldr	r3, [r3, #28]
 802965a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802965e:	2b00      	cmp	r3, #0
 8029660:	d003      	beq.n	802966a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029662:	6878      	ldr	r0, [r7, #4]
 8029664:	f000 f887 	bl	8029776 <HAL_TIM_IC_CaptureCallback>
 8029668:	e005      	b.n	8029676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802966a:	6878      	ldr	r0, [r7, #4]
 802966c:	f000 f879 	bl	8029762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029670:	6878      	ldr	r0, [r7, #4]
 8029672:	f000 f88a 	bl	802978a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029676:	687b      	ldr	r3, [r7, #4]
 8029678:	2200      	movs	r2, #0
 802967a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802967c:	687b      	ldr	r3, [r7, #4]
 802967e:	681b      	ldr	r3, [r3, #0]
 8029680:	691b      	ldr	r3, [r3, #16]
 8029682:	f003 0301 	and.w	r3, r3, #1
 8029686:	2b01      	cmp	r3, #1
 8029688:	d10e      	bne.n	80296a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802968a:	687b      	ldr	r3, [r7, #4]
 802968c:	681b      	ldr	r3, [r3, #0]
 802968e:	68db      	ldr	r3, [r3, #12]
 8029690:	f003 0301 	and.w	r3, r3, #1
 8029694:	2b01      	cmp	r3, #1
 8029696:	d107      	bne.n	80296a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029698:	687b      	ldr	r3, [r7, #4]
 802969a:	681b      	ldr	r3, [r3, #0]
 802969c:	f06f 0201 	mvn.w	r2, #1
 80296a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80296a2:	6878      	ldr	r0, [r7, #4]
 80296a4:	f7d7 fe36 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80296a8:	687b      	ldr	r3, [r7, #4]
 80296aa:	681b      	ldr	r3, [r3, #0]
 80296ac:	691b      	ldr	r3, [r3, #16]
 80296ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80296b2:	2b80      	cmp	r3, #128	; 0x80
 80296b4:	d10e      	bne.n	80296d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80296b6:	687b      	ldr	r3, [r7, #4]
 80296b8:	681b      	ldr	r3, [r3, #0]
 80296ba:	68db      	ldr	r3, [r3, #12]
 80296bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80296c0:	2b80      	cmp	r3, #128	; 0x80
 80296c2:	d107      	bne.n	80296d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80296c4:	687b      	ldr	r3, [r7, #4]
 80296c6:	681b      	ldr	r3, [r3, #0]
 80296c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80296cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80296ce:	6878      	ldr	r0, [r7, #4]
 80296d0:	f000 f91a 	bl	8029908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80296d4:	687b      	ldr	r3, [r7, #4]
 80296d6:	681b      	ldr	r3, [r3, #0]
 80296d8:	691b      	ldr	r3, [r3, #16]
 80296da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80296de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80296e2:	d10e      	bne.n	8029702 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80296e4:	687b      	ldr	r3, [r7, #4]
 80296e6:	681b      	ldr	r3, [r3, #0]
 80296e8:	68db      	ldr	r3, [r3, #12]
 80296ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80296ee:	2b80      	cmp	r3, #128	; 0x80
 80296f0:	d107      	bne.n	8029702 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80296f2:	687b      	ldr	r3, [r7, #4]
 80296f4:	681b      	ldr	r3, [r3, #0]
 80296f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80296fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80296fc:	6878      	ldr	r0, [r7, #4]
 80296fe:	f000 f90d 	bl	802991c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029702:	687b      	ldr	r3, [r7, #4]
 8029704:	681b      	ldr	r3, [r3, #0]
 8029706:	691b      	ldr	r3, [r3, #16]
 8029708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802970c:	2b40      	cmp	r3, #64	; 0x40
 802970e:	d10e      	bne.n	802972e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029710:	687b      	ldr	r3, [r7, #4]
 8029712:	681b      	ldr	r3, [r3, #0]
 8029714:	68db      	ldr	r3, [r3, #12]
 8029716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802971a:	2b40      	cmp	r3, #64	; 0x40
 802971c:	d107      	bne.n	802972e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802971e:	687b      	ldr	r3, [r7, #4]
 8029720:	681b      	ldr	r3, [r3, #0]
 8029722:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8029726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029728:	6878      	ldr	r0, [r7, #4]
 802972a:	f000 f838 	bl	802979e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802972e:	687b      	ldr	r3, [r7, #4]
 8029730:	681b      	ldr	r3, [r3, #0]
 8029732:	691b      	ldr	r3, [r3, #16]
 8029734:	f003 0320 	and.w	r3, r3, #32
 8029738:	2b20      	cmp	r3, #32
 802973a:	d10e      	bne.n	802975a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802973c:	687b      	ldr	r3, [r7, #4]
 802973e:	681b      	ldr	r3, [r3, #0]
 8029740:	68db      	ldr	r3, [r3, #12]
 8029742:	f003 0320 	and.w	r3, r3, #32
 8029746:	2b20      	cmp	r3, #32
 8029748:	d107      	bne.n	802975a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802974a:	687b      	ldr	r3, [r7, #4]
 802974c:	681b      	ldr	r3, [r3, #0]
 802974e:	f06f 0220 	mvn.w	r2, #32
 8029752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8029754:	6878      	ldr	r0, [r7, #4]
 8029756:	f000 f8cd 	bl	80298f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802975a:	bf00      	nop
 802975c:	3708      	adds	r7, #8
 802975e:	46bd      	mov	sp, r7
 8029760:	bd80      	pop	{r7, pc}

08029762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029762:	b480      	push	{r7}
 8029764:	b083      	sub	sp, #12
 8029766:	af00      	add	r7, sp, #0
 8029768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802976a:	bf00      	nop
 802976c:	370c      	adds	r7, #12
 802976e:	46bd      	mov	sp, r7
 8029770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029774:	4770      	bx	lr

08029776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029776:	b480      	push	{r7}
 8029778:	b083      	sub	sp, #12
 802977a:	af00      	add	r7, sp, #0
 802977c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802977e:	bf00      	nop
 8029780:	370c      	adds	r7, #12
 8029782:	46bd      	mov	sp, r7
 8029784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029788:	4770      	bx	lr

0802978a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802978a:	b480      	push	{r7}
 802978c:	b083      	sub	sp, #12
 802978e:	af00      	add	r7, sp, #0
 8029790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029792:	bf00      	nop
 8029794:	370c      	adds	r7, #12
 8029796:	46bd      	mov	sp, r7
 8029798:	f85d 7b04 	ldr.w	r7, [sp], #4
 802979c:	4770      	bx	lr

0802979e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802979e:	b480      	push	{r7}
 80297a0:	b083      	sub	sp, #12
 80297a2:	af00      	add	r7, sp, #0
 80297a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80297a6:	bf00      	nop
 80297a8:	370c      	adds	r7, #12
 80297aa:	46bd      	mov	sp, r7
 80297ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80297b0:	4770      	bx	lr
	...

080297b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80297b4:	b480      	push	{r7}
 80297b6:	b085      	sub	sp, #20
 80297b8:	af00      	add	r7, sp, #0
 80297ba:	6078      	str	r0, [r7, #4]
 80297bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80297be:	687b      	ldr	r3, [r7, #4]
 80297c0:	681b      	ldr	r3, [r3, #0]
 80297c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80297c4:	687b      	ldr	r3, [r7, #4]
 80297c6:	4a40      	ldr	r2, [pc, #256]	; (80298c8 <TIM_Base_SetConfig+0x114>)
 80297c8:	4293      	cmp	r3, r2
 80297ca:	d013      	beq.n	80297f4 <TIM_Base_SetConfig+0x40>
 80297cc:	687b      	ldr	r3, [r7, #4]
 80297ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80297d2:	d00f      	beq.n	80297f4 <TIM_Base_SetConfig+0x40>
 80297d4:	687b      	ldr	r3, [r7, #4]
 80297d6:	4a3d      	ldr	r2, [pc, #244]	; (80298cc <TIM_Base_SetConfig+0x118>)
 80297d8:	4293      	cmp	r3, r2
 80297da:	d00b      	beq.n	80297f4 <TIM_Base_SetConfig+0x40>
 80297dc:	687b      	ldr	r3, [r7, #4]
 80297de:	4a3c      	ldr	r2, [pc, #240]	; (80298d0 <TIM_Base_SetConfig+0x11c>)
 80297e0:	4293      	cmp	r3, r2
 80297e2:	d007      	beq.n	80297f4 <TIM_Base_SetConfig+0x40>
 80297e4:	687b      	ldr	r3, [r7, #4]
 80297e6:	4a3b      	ldr	r2, [pc, #236]	; (80298d4 <TIM_Base_SetConfig+0x120>)
 80297e8:	4293      	cmp	r3, r2
 80297ea:	d003      	beq.n	80297f4 <TIM_Base_SetConfig+0x40>
 80297ec:	687b      	ldr	r3, [r7, #4]
 80297ee:	4a3a      	ldr	r2, [pc, #232]	; (80298d8 <TIM_Base_SetConfig+0x124>)
 80297f0:	4293      	cmp	r3, r2
 80297f2:	d108      	bne.n	8029806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80297f4:	68fb      	ldr	r3, [r7, #12]
 80297f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80297fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80297fc:	683b      	ldr	r3, [r7, #0]
 80297fe:	685b      	ldr	r3, [r3, #4]
 8029800:	68fa      	ldr	r2, [r7, #12]
 8029802:	4313      	orrs	r3, r2
 8029804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029806:	687b      	ldr	r3, [r7, #4]
 8029808:	4a2f      	ldr	r2, [pc, #188]	; (80298c8 <TIM_Base_SetConfig+0x114>)
 802980a:	4293      	cmp	r3, r2
 802980c:	d02b      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 802980e:	687b      	ldr	r3, [r7, #4]
 8029810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029814:	d027      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 8029816:	687b      	ldr	r3, [r7, #4]
 8029818:	4a2c      	ldr	r2, [pc, #176]	; (80298cc <TIM_Base_SetConfig+0x118>)
 802981a:	4293      	cmp	r3, r2
 802981c:	d023      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	4a2b      	ldr	r2, [pc, #172]	; (80298d0 <TIM_Base_SetConfig+0x11c>)
 8029822:	4293      	cmp	r3, r2
 8029824:	d01f      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 8029826:	687b      	ldr	r3, [r7, #4]
 8029828:	4a2a      	ldr	r2, [pc, #168]	; (80298d4 <TIM_Base_SetConfig+0x120>)
 802982a:	4293      	cmp	r3, r2
 802982c:	d01b      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 802982e:	687b      	ldr	r3, [r7, #4]
 8029830:	4a29      	ldr	r2, [pc, #164]	; (80298d8 <TIM_Base_SetConfig+0x124>)
 8029832:	4293      	cmp	r3, r2
 8029834:	d017      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 8029836:	687b      	ldr	r3, [r7, #4]
 8029838:	4a28      	ldr	r2, [pc, #160]	; (80298dc <TIM_Base_SetConfig+0x128>)
 802983a:	4293      	cmp	r3, r2
 802983c:	d013      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 802983e:	687b      	ldr	r3, [r7, #4]
 8029840:	4a27      	ldr	r2, [pc, #156]	; (80298e0 <TIM_Base_SetConfig+0x12c>)
 8029842:	4293      	cmp	r3, r2
 8029844:	d00f      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 8029846:	687b      	ldr	r3, [r7, #4]
 8029848:	4a26      	ldr	r2, [pc, #152]	; (80298e4 <TIM_Base_SetConfig+0x130>)
 802984a:	4293      	cmp	r3, r2
 802984c:	d00b      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 802984e:	687b      	ldr	r3, [r7, #4]
 8029850:	4a25      	ldr	r2, [pc, #148]	; (80298e8 <TIM_Base_SetConfig+0x134>)
 8029852:	4293      	cmp	r3, r2
 8029854:	d007      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 8029856:	687b      	ldr	r3, [r7, #4]
 8029858:	4a24      	ldr	r2, [pc, #144]	; (80298ec <TIM_Base_SetConfig+0x138>)
 802985a:	4293      	cmp	r3, r2
 802985c:	d003      	beq.n	8029866 <TIM_Base_SetConfig+0xb2>
 802985e:	687b      	ldr	r3, [r7, #4]
 8029860:	4a23      	ldr	r2, [pc, #140]	; (80298f0 <TIM_Base_SetConfig+0x13c>)
 8029862:	4293      	cmp	r3, r2
 8029864:	d108      	bne.n	8029878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029866:	68fb      	ldr	r3, [r7, #12]
 8029868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802986c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802986e:	683b      	ldr	r3, [r7, #0]
 8029870:	68db      	ldr	r3, [r3, #12]
 8029872:	68fa      	ldr	r2, [r7, #12]
 8029874:	4313      	orrs	r3, r2
 8029876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029878:	68fb      	ldr	r3, [r7, #12]
 802987a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802987e:	683b      	ldr	r3, [r7, #0]
 8029880:	695b      	ldr	r3, [r3, #20]
 8029882:	4313      	orrs	r3, r2
 8029884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029886:	687b      	ldr	r3, [r7, #4]
 8029888:	68fa      	ldr	r2, [r7, #12]
 802988a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802988c:	683b      	ldr	r3, [r7, #0]
 802988e:	689a      	ldr	r2, [r3, #8]
 8029890:	687b      	ldr	r3, [r7, #4]
 8029892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029894:	683b      	ldr	r3, [r7, #0]
 8029896:	681a      	ldr	r2, [r3, #0]
 8029898:	687b      	ldr	r3, [r7, #4]
 802989a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802989c:	687b      	ldr	r3, [r7, #4]
 802989e:	4a0a      	ldr	r2, [pc, #40]	; (80298c8 <TIM_Base_SetConfig+0x114>)
 80298a0:	4293      	cmp	r3, r2
 80298a2:	d003      	beq.n	80298ac <TIM_Base_SetConfig+0xf8>
 80298a4:	687b      	ldr	r3, [r7, #4]
 80298a6:	4a0c      	ldr	r2, [pc, #48]	; (80298d8 <TIM_Base_SetConfig+0x124>)
 80298a8:	4293      	cmp	r3, r2
 80298aa:	d103      	bne.n	80298b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80298ac:	683b      	ldr	r3, [r7, #0]
 80298ae:	691a      	ldr	r2, [r3, #16]
 80298b0:	687b      	ldr	r3, [r7, #4]
 80298b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80298b4:	687b      	ldr	r3, [r7, #4]
 80298b6:	2201      	movs	r2, #1
 80298b8:	615a      	str	r2, [r3, #20]
}
 80298ba:	bf00      	nop
 80298bc:	3714      	adds	r7, #20
 80298be:	46bd      	mov	sp, r7
 80298c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298c4:	4770      	bx	lr
 80298c6:	bf00      	nop
 80298c8:	40010000 	.word	0x40010000
 80298cc:	40000400 	.word	0x40000400
 80298d0:	40000800 	.word	0x40000800
 80298d4:	40000c00 	.word	0x40000c00
 80298d8:	40010400 	.word	0x40010400
 80298dc:	40014000 	.word	0x40014000
 80298e0:	40014400 	.word	0x40014400
 80298e4:	40014800 	.word	0x40014800
 80298e8:	40001800 	.word	0x40001800
 80298ec:	40001c00 	.word	0x40001c00
 80298f0:	40002000 	.word	0x40002000

080298f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80298f4:	b480      	push	{r7}
 80298f6:	b083      	sub	sp, #12
 80298f8:	af00      	add	r7, sp, #0
 80298fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80298fc:	bf00      	nop
 80298fe:	370c      	adds	r7, #12
 8029900:	46bd      	mov	sp, r7
 8029902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029906:	4770      	bx	lr

08029908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029908:	b480      	push	{r7}
 802990a:	b083      	sub	sp, #12
 802990c:	af00      	add	r7, sp, #0
 802990e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8029910:	bf00      	nop
 8029912:	370c      	adds	r7, #12
 8029914:	46bd      	mov	sp, r7
 8029916:	f85d 7b04 	ldr.w	r7, [sp], #4
 802991a:	4770      	bx	lr

0802991c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 802991c:	b480      	push	{r7}
 802991e:	b083      	sub	sp, #12
 8029920:	af00      	add	r7, sp, #0
 8029922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8029924:	bf00      	nop
 8029926:	370c      	adds	r7, #12
 8029928:	46bd      	mov	sp, r7
 802992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802992e:	4770      	bx	lr

08029930 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8029930:	b480      	push	{r7}
 8029932:	b085      	sub	sp, #20
 8029934:	af00      	add	r7, sp, #0
 8029936:	6078      	str	r0, [r7, #4]
 8029938:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 802993a:	2300      	movs	r3, #0
 802993c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 802993e:	2300      	movs	r3, #0
 8029940:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8029942:	683b      	ldr	r3, [r7, #0]
 8029944:	681b      	ldr	r3, [r3, #0]
 8029946:	2b01      	cmp	r3, #1
 8029948:	d027      	beq.n	802999a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 802994a:	687b      	ldr	r3, [r7, #4]
 802994c:	681b      	ldr	r3, [r3, #0]
 802994e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8029950:	68fa      	ldr	r2, [r7, #12]
 8029952:	4b2f      	ldr	r3, [pc, #188]	; (8029a10 <FMC_SDRAM_Init+0xe0>)
 8029954:	4013      	ands	r3, r2
 8029956:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8029958:	683b      	ldr	r3, [r7, #0]
 802995a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 802995c:	683b      	ldr	r3, [r7, #0]
 802995e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8029960:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8029962:	683b      	ldr	r3, [r7, #0]
 8029964:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8029966:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8029968:	683b      	ldr	r3, [r7, #0]
 802996a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 802996c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 802996e:	683b      	ldr	r3, [r7, #0]
 8029970:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8029972:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8029974:	683b      	ldr	r3, [r7, #0]
 8029976:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8029978:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 802997a:	683b      	ldr	r3, [r7, #0]
 802997c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 802997e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8029980:	683b      	ldr	r3, [r7, #0]
 8029982:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8029984:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8029986:	683b      	ldr	r3, [r7, #0]
 8029988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 802998a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 802998c:	68fa      	ldr	r2, [r7, #12]
 802998e:	4313      	orrs	r3, r2
 8029990:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8029992:	687b      	ldr	r3, [r7, #4]
 8029994:	68fa      	ldr	r2, [r7, #12]
 8029996:	601a      	str	r2, [r3, #0]
 8029998:	e032      	b.n	8029a00 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 802999a:	687b      	ldr	r3, [r7, #4]
 802999c:	681b      	ldr	r3, [r3, #0]
 802999e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80299a0:	68fb      	ldr	r3, [r7, #12]
 80299a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80299a6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80299a8:	683b      	ldr	r3, [r7, #0]
 80299aa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80299ac:	683b      	ldr	r3, [r7, #0]
 80299ae:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80299b0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80299b2:	683b      	ldr	r3, [r7, #0]
 80299b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80299b6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80299b8:	68fa      	ldr	r2, [r7, #12]
 80299ba:	4313      	orrs	r3, r2
 80299bc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80299be:	687b      	ldr	r3, [r7, #4]
 80299c0:	685b      	ldr	r3, [r3, #4]
 80299c2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80299c4:	68ba      	ldr	r2, [r7, #8]
 80299c6:	4b12      	ldr	r3, [pc, #72]	; (8029a10 <FMC_SDRAM_Init+0xe0>)
 80299c8:	4013      	ands	r3, r2
 80299ca:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80299cc:	683b      	ldr	r3, [r7, #0]
 80299ce:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80299d0:	683b      	ldr	r3, [r7, #0]
 80299d2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80299d4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80299d6:	683b      	ldr	r3, [r7, #0]
 80299d8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80299da:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80299dc:	683b      	ldr	r3, [r7, #0]
 80299de:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80299e0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80299e2:	683b      	ldr	r3, [r7, #0]
 80299e4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80299e6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80299e8:	683b      	ldr	r3, [r7, #0]
 80299ea:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80299ec:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80299ee:	68ba      	ldr	r2, [r7, #8]
 80299f0:	4313      	orrs	r3, r2
 80299f2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80299f4:	687b      	ldr	r3, [r7, #4]
 80299f6:	68fa      	ldr	r2, [r7, #12]
 80299f8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80299fa:	687b      	ldr	r3, [r7, #4]
 80299fc:	68ba      	ldr	r2, [r7, #8]
 80299fe:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8029a00:	2300      	movs	r3, #0
}
 8029a02:	4618      	mov	r0, r3
 8029a04:	3714      	adds	r7, #20
 8029a06:	46bd      	mov	sp, r7
 8029a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a0c:	4770      	bx	lr
 8029a0e:	bf00      	nop
 8029a10:	ffff8000 	.word	0xffff8000

08029a14 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8029a14:	b480      	push	{r7}
 8029a16:	b087      	sub	sp, #28
 8029a18:	af00      	add	r7, sp, #0
 8029a1a:	60f8      	str	r0, [r7, #12]
 8029a1c:	60b9      	str	r1, [r7, #8]
 8029a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8029a20:	2300      	movs	r3, #0
 8029a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8029a24:	2300      	movs	r3, #0
 8029a26:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8029a28:	687b      	ldr	r3, [r7, #4]
 8029a2a:	2b01      	cmp	r3, #1
 8029a2c:	d02e      	beq.n	8029a8c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8029a2e:	68fb      	ldr	r3, [r7, #12]
 8029a30:	689b      	ldr	r3, [r3, #8]
 8029a32:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8029a34:	697b      	ldr	r3, [r7, #20]
 8029a36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8029a3a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029a3c:	68bb      	ldr	r3, [r7, #8]
 8029a3e:	681b      	ldr	r3, [r3, #0]
 8029a40:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8029a42:	68bb      	ldr	r3, [r7, #8]
 8029a44:	685b      	ldr	r3, [r3, #4]
 8029a46:	3b01      	subs	r3, #1
 8029a48:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029a4a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8029a4c:	68bb      	ldr	r3, [r7, #8]
 8029a4e:	689b      	ldr	r3, [r3, #8]
 8029a50:	3b01      	subs	r3, #1
 8029a52:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8029a54:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8029a56:	68bb      	ldr	r3, [r7, #8]
 8029a58:	68db      	ldr	r3, [r3, #12]
 8029a5a:	3b01      	subs	r3, #1
 8029a5c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8029a5e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8029a60:	68bb      	ldr	r3, [r7, #8]
 8029a62:	691b      	ldr	r3, [r3, #16]
 8029a64:	3b01      	subs	r3, #1
 8029a66:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8029a68:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8029a6a:	68bb      	ldr	r3, [r7, #8]
 8029a6c:	695b      	ldr	r3, [r3, #20]
 8029a6e:	3b01      	subs	r3, #1
 8029a70:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8029a72:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8029a74:	68bb      	ldr	r3, [r7, #8]
 8029a76:	699b      	ldr	r3, [r3, #24]
 8029a78:	3b01      	subs	r3, #1
 8029a7a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029a7c:	4313      	orrs	r3, r2
 8029a7e:	697a      	ldr	r2, [r7, #20]
 8029a80:	4313      	orrs	r3, r2
 8029a82:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8029a84:	68fb      	ldr	r3, [r7, #12]
 8029a86:	697a      	ldr	r2, [r7, #20]
 8029a88:	609a      	str	r2, [r3, #8]
 8029a8a:	e039      	b.n	8029b00 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8029a8c:	68fb      	ldr	r3, [r7, #12]
 8029a8e:	689b      	ldr	r3, [r3, #8]
 8029a90:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8029a92:	697a      	ldr	r2, [r7, #20]
 8029a94:	4b1e      	ldr	r3, [pc, #120]	; (8029b10 <FMC_SDRAM_Timing_Init+0xfc>)
 8029a96:	4013      	ands	r3, r2
 8029a98:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8029a9a:	68bb      	ldr	r3, [r7, #8]
 8029a9c:	68db      	ldr	r3, [r3, #12]
 8029a9e:	3b01      	subs	r3, #1
 8029aa0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8029aa2:	68bb      	ldr	r3, [r7, #8]
 8029aa4:	695b      	ldr	r3, [r3, #20]
 8029aa6:	3b01      	subs	r3, #1
 8029aa8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8029aaa:	4313      	orrs	r3, r2
 8029aac:	697a      	ldr	r2, [r7, #20]
 8029aae:	4313      	orrs	r3, r2
 8029ab0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8029ab2:	68fb      	ldr	r3, [r7, #12]
 8029ab4:	68db      	ldr	r3, [r3, #12]
 8029ab6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8029ab8:	693b      	ldr	r3, [r7, #16]
 8029aba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8029abe:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029ac0:	68bb      	ldr	r3, [r7, #8]
 8029ac2:	681b      	ldr	r3, [r3, #0]
 8029ac4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8029ac6:	68bb      	ldr	r3, [r7, #8]
 8029ac8:	685b      	ldr	r3, [r3, #4]
 8029aca:	3b01      	subs	r3, #1
 8029acc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029ace:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8029ad0:	68bb      	ldr	r3, [r7, #8]
 8029ad2:	689b      	ldr	r3, [r3, #8]
 8029ad4:	3b01      	subs	r3, #1
 8029ad6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8029ad8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8029ada:	68bb      	ldr	r3, [r7, #8]
 8029adc:	691b      	ldr	r3, [r3, #16]
 8029ade:	3b01      	subs	r3, #1
 8029ae0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8029ae2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8029ae4:	68bb      	ldr	r3, [r7, #8]
 8029ae6:	699b      	ldr	r3, [r3, #24]
 8029ae8:	3b01      	subs	r3, #1
 8029aea:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029aec:	4313      	orrs	r3, r2
 8029aee:	693a      	ldr	r2, [r7, #16]
 8029af0:	4313      	orrs	r3, r2
 8029af2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8029af4:	68fb      	ldr	r3, [r7, #12]
 8029af6:	697a      	ldr	r2, [r7, #20]
 8029af8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8029afa:	68fb      	ldr	r3, [r7, #12]
 8029afc:	693a      	ldr	r2, [r7, #16]
 8029afe:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8029b00:	2300      	movs	r3, #0
}
 8029b02:	4618      	mov	r0, r3
 8029b04:	371c      	adds	r7, #28
 8029b06:	46bd      	mov	sp, r7
 8029b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b0c:	4770      	bx	lr
 8029b0e:	bf00      	nop
 8029b10:	ff0f0fff 	.word	0xff0f0fff

08029b14 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8029b14:	b480      	push	{r7}
 8029b16:	b087      	sub	sp, #28
 8029b18:	af00      	add	r7, sp, #0
 8029b1a:	60f8      	str	r0, [r7, #12]
 8029b1c:	60b9      	str	r1, [r7, #8]
 8029b1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8029b20:	2300      	movs	r3, #0
 8029b22:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8029b24:	68bb      	ldr	r3, [r7, #8]
 8029b26:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8029b28:	68bb      	ldr	r3, [r7, #8]
 8029b2a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8029b2c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8029b2e:	68bb      	ldr	r3, [r7, #8]
 8029b30:	689b      	ldr	r3, [r3, #8]
 8029b32:	3b01      	subs	r3, #1
 8029b34:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8029b36:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8029b38:	68bb      	ldr	r3, [r7, #8]
 8029b3a:	68db      	ldr	r3, [r3, #12]
 8029b3c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8029b3e:	4313      	orrs	r3, r2
 8029b40:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8029b42:	697a      	ldr	r2, [r7, #20]
 8029b44:	68fb      	ldr	r3, [r7, #12]
 8029b46:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8029b48:	2300      	movs	r3, #0
}
 8029b4a:	4618      	mov	r0, r3
 8029b4c:	371c      	adds	r7, #28
 8029b4e:	46bd      	mov	sp, r7
 8029b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b54:	4770      	bx	lr

08029b56 <FMC_SDRAM_SetAutoRefreshNumber>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  AutoRefreshNumber Specifies the auto Refresh number.       
  * @retval None
  */
HAL_StatusTypeDef FMC_SDRAM_SetAutoRefreshNumber(FMC_SDRAM_TypeDef *Device, uint32_t AutoRefreshNumber)
{
 8029b56:	b480      	push	{r7}
 8029b58:	b083      	sub	sp, #12
 8029b5a:	af00      	add	r7, sp, #0
 8029b5c:	6078      	str	r0, [r7, #4]
 8029b5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(AutoRefreshNumber));
  
  /* Set the Auto-refresh number in command register */
  Device->SDCMR |= (AutoRefreshNumber << 5); 
 8029b60:	687b      	ldr	r3, [r7, #4]
 8029b62:	691a      	ldr	r2, [r3, #16]
 8029b64:	683b      	ldr	r3, [r7, #0]
 8029b66:	015b      	lsls	r3, r3, #5
 8029b68:	431a      	orrs	r2, r3
 8029b6a:	687b      	ldr	r3, [r7, #4]
 8029b6c:	611a      	str	r2, [r3, #16]

  return HAL_OK;  
 8029b6e:	2300      	movs	r3, #0
}
 8029b70:	4618      	mov	r0, r3
 8029b72:	370c      	adds	r7, #12
 8029b74:	46bd      	mov	sp, r7
 8029b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b7a:	4770      	bx	lr

08029b7c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8029b7c:	b084      	sub	sp, #16
 8029b7e:	b480      	push	{r7}
 8029b80:	b085      	sub	sp, #20
 8029b82:	af00      	add	r7, sp, #0
 8029b84:	6078      	str	r0, [r7, #4]
 8029b86:	f107 001c 	add.w	r0, r7, #28
 8029b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8029b8e:	2300      	movs	r3, #0
 8029b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8029b92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8029b94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8029b96:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8029b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8029b9a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8029b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8029b9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8029ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8029ba2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8029ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8029ba6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8029ba8:	68fa      	ldr	r2, [r7, #12]
 8029baa:	4313      	orrs	r3, r2
 8029bac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8029bae:	687b      	ldr	r3, [r7, #4]
 8029bb0:	685a      	ldr	r2, [r3, #4]
 8029bb2:	4b07      	ldr	r3, [pc, #28]	; (8029bd0 <SDMMC_Init+0x54>)
 8029bb4:	4013      	ands	r3, r2
 8029bb6:	68fa      	ldr	r2, [r7, #12]
 8029bb8:	431a      	orrs	r2, r3
 8029bba:	687b      	ldr	r3, [r7, #4]
 8029bbc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8029bbe:	2300      	movs	r3, #0
}
 8029bc0:	4618      	mov	r0, r3
 8029bc2:	3714      	adds	r7, #20
 8029bc4:	46bd      	mov	sp, r7
 8029bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bca:	b004      	add	sp, #16
 8029bcc:	4770      	bx	lr
 8029bce:	bf00      	nop
 8029bd0:	ffff8100 	.word	0xffff8100

08029bd4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8029bd4:	b480      	push	{r7}
 8029bd6:	b083      	sub	sp, #12
 8029bd8:	af00      	add	r7, sp, #0
 8029bda:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8029bdc:	687b      	ldr	r3, [r7, #4]
 8029bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8029be2:	4618      	mov	r0, r3
 8029be4:	370c      	adds	r7, #12
 8029be6:	46bd      	mov	sp, r7
 8029be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bec:	4770      	bx	lr

08029bee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8029bee:	b480      	push	{r7}
 8029bf0:	b083      	sub	sp, #12
 8029bf2:	af00      	add	r7, sp, #0
 8029bf4:	6078      	str	r0, [r7, #4]
 8029bf6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8029bf8:	683b      	ldr	r3, [r7, #0]
 8029bfa:	681a      	ldr	r2, [r3, #0]
 8029bfc:	687b      	ldr	r3, [r7, #4]
 8029bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8029c02:	2300      	movs	r3, #0
}
 8029c04:	4618      	mov	r0, r3
 8029c06:	370c      	adds	r7, #12
 8029c08:	46bd      	mov	sp, r7
 8029c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c0e:	4770      	bx	lr

08029c10 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8029c10:	b580      	push	{r7, lr}
 8029c12:	b082      	sub	sp, #8
 8029c14:	af00      	add	r7, sp, #0
 8029c16:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8029c18:	687b      	ldr	r3, [r7, #4]
 8029c1a:	2203      	movs	r2, #3
 8029c1c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8029c1e:	2002      	movs	r0, #2
 8029c20:	f7fb fc66 	bl	80254f0 <HAL_Delay>
  
  return HAL_OK;
 8029c24:	2300      	movs	r3, #0
}
 8029c26:	4618      	mov	r0, r3
 8029c28:	3708      	adds	r7, #8
 8029c2a:	46bd      	mov	sp, r7
 8029c2c:	bd80      	pop	{r7, pc}

08029c2e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8029c2e:	b480      	push	{r7}
 8029c30:	b083      	sub	sp, #12
 8029c32:	af00      	add	r7, sp, #0
 8029c34:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8029c36:	687b      	ldr	r3, [r7, #4]
 8029c38:	681b      	ldr	r3, [r3, #0]
 8029c3a:	f003 0303 	and.w	r3, r3, #3
}
 8029c3e:	4618      	mov	r0, r3
 8029c40:	370c      	adds	r7, #12
 8029c42:	46bd      	mov	sp, r7
 8029c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c48:	4770      	bx	lr
	...

08029c4c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8029c4c:	b480      	push	{r7}
 8029c4e:	b085      	sub	sp, #20
 8029c50:	af00      	add	r7, sp, #0
 8029c52:	6078      	str	r0, [r7, #4]
 8029c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8029c56:	2300      	movs	r3, #0
 8029c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8029c5a:	683b      	ldr	r3, [r7, #0]
 8029c5c:	681a      	ldr	r2, [r3, #0]
 8029c5e:	687b      	ldr	r3, [r7, #4]
 8029c60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8029c62:	683b      	ldr	r3, [r7, #0]
 8029c64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8029c66:	683b      	ldr	r3, [r7, #0]
 8029c68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8029c6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8029c6c:	683b      	ldr	r3, [r7, #0]
 8029c6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8029c70:	431a      	orrs	r2, r3
                       Command->CPSM);
 8029c72:	683b      	ldr	r3, [r7, #0]
 8029c74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8029c76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8029c78:	68fa      	ldr	r2, [r7, #12]
 8029c7a:	4313      	orrs	r3, r2
 8029c7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8029c7e:	687b      	ldr	r3, [r7, #4]
 8029c80:	68da      	ldr	r2, [r3, #12]
 8029c82:	4b06      	ldr	r3, [pc, #24]	; (8029c9c <SDMMC_SendCommand+0x50>)
 8029c84:	4013      	ands	r3, r2
 8029c86:	68fa      	ldr	r2, [r7, #12]
 8029c88:	431a      	orrs	r2, r3
 8029c8a:	687b      	ldr	r3, [r7, #4]
 8029c8c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8029c8e:	2300      	movs	r3, #0
}
 8029c90:	4618      	mov	r0, r3
 8029c92:	3714      	adds	r7, #20
 8029c94:	46bd      	mov	sp, r7
 8029c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c9a:	4770      	bx	lr
 8029c9c:	fffff000 	.word	0xfffff000

08029ca0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8029ca0:	b480      	push	{r7}
 8029ca2:	b083      	sub	sp, #12
 8029ca4:	af00      	add	r7, sp, #0
 8029ca6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8029ca8:	687b      	ldr	r3, [r7, #4]
 8029caa:	691b      	ldr	r3, [r3, #16]
 8029cac:	b2db      	uxtb	r3, r3
}
 8029cae:	4618      	mov	r0, r3
 8029cb0:	370c      	adds	r7, #12
 8029cb2:	46bd      	mov	sp, r7
 8029cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cb8:	4770      	bx	lr

08029cba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8029cba:	b480      	push	{r7}
 8029cbc:	b085      	sub	sp, #20
 8029cbe:	af00      	add	r7, sp, #0
 8029cc0:	6078      	str	r0, [r7, #4]
 8029cc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8029cc4:	687b      	ldr	r3, [r7, #4]
 8029cc6:	3314      	adds	r3, #20
 8029cc8:	461a      	mov	r2, r3
 8029cca:	683b      	ldr	r3, [r7, #0]
 8029ccc:	4413      	add	r3, r2
 8029cce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8029cd0:	68fb      	ldr	r3, [r7, #12]
 8029cd2:	681b      	ldr	r3, [r3, #0]
}  
 8029cd4:	4618      	mov	r0, r3
 8029cd6:	3714      	adds	r7, #20
 8029cd8:	46bd      	mov	sp, r7
 8029cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cde:	4770      	bx	lr

08029ce0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8029ce0:	b480      	push	{r7}
 8029ce2:	b085      	sub	sp, #20
 8029ce4:	af00      	add	r7, sp, #0
 8029ce6:	6078      	str	r0, [r7, #4]
 8029ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8029cea:	2300      	movs	r3, #0
 8029cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8029cee:	683b      	ldr	r3, [r7, #0]
 8029cf0:	681a      	ldr	r2, [r3, #0]
 8029cf2:	687b      	ldr	r3, [r7, #4]
 8029cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8029cf6:	683b      	ldr	r3, [r7, #0]
 8029cf8:	685a      	ldr	r2, [r3, #4]
 8029cfa:	687b      	ldr	r3, [r7, #4]
 8029cfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8029cfe:	683b      	ldr	r3, [r7, #0]
 8029d00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8029d02:	683b      	ldr	r3, [r7, #0]
 8029d04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8029d06:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8029d08:	683b      	ldr	r3, [r7, #0]
 8029d0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8029d0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8029d0e:	683b      	ldr	r3, [r7, #0]
 8029d10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8029d12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8029d14:	68fa      	ldr	r2, [r7, #12]
 8029d16:	4313      	orrs	r3, r2
 8029d18:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8029d1a:	687b      	ldr	r3, [r7, #4]
 8029d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029d1e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8029d22:	68fb      	ldr	r3, [r7, #12]
 8029d24:	431a      	orrs	r2, r3
 8029d26:	687b      	ldr	r3, [r7, #4]
 8029d28:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8029d2a:	2300      	movs	r3, #0

}
 8029d2c:	4618      	mov	r0, r3
 8029d2e:	3714      	adds	r7, #20
 8029d30:	46bd      	mov	sp, r7
 8029d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d36:	4770      	bx	lr

08029d38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8029d38:	b580      	push	{r7, lr}
 8029d3a:	b088      	sub	sp, #32
 8029d3c:	af00      	add	r7, sp, #0
 8029d3e:	6078      	str	r0, [r7, #4]
 8029d40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8029d42:	683b      	ldr	r3, [r7, #0]
 8029d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8029d46:	2310      	movs	r3, #16
 8029d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029d4a:	2340      	movs	r3, #64	; 0x40
 8029d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029d4e:	2300      	movs	r3, #0
 8029d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029d56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029d58:	f107 0308 	add.w	r3, r7, #8
 8029d5c:	4619      	mov	r1, r3
 8029d5e:	6878      	ldr	r0, [r7, #4]
 8029d60:	f7ff ff74 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8029d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8029d68:	2110      	movs	r1, #16
 8029d6a:	6878      	ldr	r0, [r7, #4]
 8029d6c:	f000 fa42 	bl	802a1f4 <SDMMC_GetCmdResp1>
 8029d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029d72:	69fb      	ldr	r3, [r7, #28]
}
 8029d74:	4618      	mov	r0, r3
 8029d76:	3720      	adds	r7, #32
 8029d78:	46bd      	mov	sp, r7
 8029d7a:	bd80      	pop	{r7, pc}

08029d7c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8029d7c:	b580      	push	{r7, lr}
 8029d7e:	b088      	sub	sp, #32
 8029d80:	af00      	add	r7, sp, #0
 8029d82:	6078      	str	r0, [r7, #4]
 8029d84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8029d86:	683b      	ldr	r3, [r7, #0]
 8029d88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8029d8a:	2311      	movs	r3, #17
 8029d8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029d8e:	2340      	movs	r3, #64	; 0x40
 8029d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029d92:	2300      	movs	r3, #0
 8029d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029d9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029d9c:	f107 0308 	add.w	r3, r7, #8
 8029da0:	4619      	mov	r1, r3
 8029da2:	6878      	ldr	r0, [r7, #4]
 8029da4:	f7ff ff52 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8029da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8029dac:	2111      	movs	r1, #17
 8029dae:	6878      	ldr	r0, [r7, #4]
 8029db0:	f000 fa20 	bl	802a1f4 <SDMMC_GetCmdResp1>
 8029db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029db6:	69fb      	ldr	r3, [r7, #28]
}
 8029db8:	4618      	mov	r0, r3
 8029dba:	3720      	adds	r7, #32
 8029dbc:	46bd      	mov	sp, r7
 8029dbe:	bd80      	pop	{r7, pc}

08029dc0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8029dc0:	b580      	push	{r7, lr}
 8029dc2:	b088      	sub	sp, #32
 8029dc4:	af00      	add	r7, sp, #0
 8029dc6:	6078      	str	r0, [r7, #4]
 8029dc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8029dca:	683b      	ldr	r3, [r7, #0]
 8029dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8029dce:	2312      	movs	r3, #18
 8029dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029dd2:	2340      	movs	r3, #64	; 0x40
 8029dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029dd6:	2300      	movs	r3, #0
 8029dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029dde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029de0:	f107 0308 	add.w	r3, r7, #8
 8029de4:	4619      	mov	r1, r3
 8029de6:	6878      	ldr	r0, [r7, #4]
 8029de8:	f7ff ff30 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8029dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8029df0:	2112      	movs	r1, #18
 8029df2:	6878      	ldr	r0, [r7, #4]
 8029df4:	f000 f9fe 	bl	802a1f4 <SDMMC_GetCmdResp1>
 8029df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029dfa:	69fb      	ldr	r3, [r7, #28]
}
 8029dfc:	4618      	mov	r0, r3
 8029dfe:	3720      	adds	r7, #32
 8029e00:	46bd      	mov	sp, r7
 8029e02:	bd80      	pop	{r7, pc}

08029e04 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8029e04:	b580      	push	{r7, lr}
 8029e06:	b088      	sub	sp, #32
 8029e08:	af00      	add	r7, sp, #0
 8029e0a:	6078      	str	r0, [r7, #4]
 8029e0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8029e0e:	683b      	ldr	r3, [r7, #0]
 8029e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8029e12:	2318      	movs	r3, #24
 8029e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029e16:	2340      	movs	r3, #64	; 0x40
 8029e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029e1a:	2300      	movs	r3, #0
 8029e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029e22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029e24:	f107 0308 	add.w	r3, r7, #8
 8029e28:	4619      	mov	r1, r3
 8029e2a:	6878      	ldr	r0, [r7, #4]
 8029e2c:	f7ff ff0e 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8029e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8029e34:	2118      	movs	r1, #24
 8029e36:	6878      	ldr	r0, [r7, #4]
 8029e38:	f000 f9dc 	bl	802a1f4 <SDMMC_GetCmdResp1>
 8029e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029e3e:	69fb      	ldr	r3, [r7, #28]
}
 8029e40:	4618      	mov	r0, r3
 8029e42:	3720      	adds	r7, #32
 8029e44:	46bd      	mov	sp, r7
 8029e46:	bd80      	pop	{r7, pc}

08029e48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8029e48:	b580      	push	{r7, lr}
 8029e4a:	b088      	sub	sp, #32
 8029e4c:	af00      	add	r7, sp, #0
 8029e4e:	6078      	str	r0, [r7, #4]
 8029e50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8029e52:	683b      	ldr	r3, [r7, #0]
 8029e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8029e56:	2319      	movs	r3, #25
 8029e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029e5a:	2340      	movs	r3, #64	; 0x40
 8029e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029e5e:	2300      	movs	r3, #0
 8029e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029e66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029e68:	f107 0308 	add.w	r3, r7, #8
 8029e6c:	4619      	mov	r1, r3
 8029e6e:	6878      	ldr	r0, [r7, #4]
 8029e70:	f7ff feec 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8029e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8029e78:	2119      	movs	r1, #25
 8029e7a:	6878      	ldr	r0, [r7, #4]
 8029e7c:	f000 f9ba 	bl	802a1f4 <SDMMC_GetCmdResp1>
 8029e80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029e82:	69fb      	ldr	r3, [r7, #28]
}
 8029e84:	4618      	mov	r0, r3
 8029e86:	3720      	adds	r7, #32
 8029e88:	46bd      	mov	sp, r7
 8029e8a:	bd80      	pop	{r7, pc}

08029e8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8029e8c:	b580      	push	{r7, lr}
 8029e8e:	b088      	sub	sp, #32
 8029e90:	af00      	add	r7, sp, #0
 8029e92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8029e94:	2300      	movs	r3, #0
 8029e96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8029e98:	230c      	movs	r3, #12
 8029e9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029e9c:	2340      	movs	r3, #64	; 0x40
 8029e9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029ea0:	2300      	movs	r3, #0
 8029ea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029ea8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029eaa:	f107 0308 	add.w	r3, r7, #8
 8029eae:	4619      	mov	r1, r3
 8029eb0:	6878      	ldr	r0, [r7, #4]
 8029eb2:	f7ff fecb 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8029eb6:	4a05      	ldr	r2, [pc, #20]	; (8029ecc <SDMMC_CmdStopTransfer+0x40>)
 8029eb8:	210c      	movs	r1, #12
 8029eba:	6878      	ldr	r0, [r7, #4]
 8029ebc:	f000 f99a 	bl	802a1f4 <SDMMC_GetCmdResp1>
 8029ec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029ec2:	69fb      	ldr	r3, [r7, #28]
}
 8029ec4:	4618      	mov	r0, r3
 8029ec6:	3720      	adds	r7, #32
 8029ec8:	46bd      	mov	sp, r7
 8029eca:	bd80      	pop	{r7, pc}
 8029ecc:	05f5e100 	.word	0x05f5e100

08029ed0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8029ed0:	b580      	push	{r7, lr}
 8029ed2:	b08a      	sub	sp, #40	; 0x28
 8029ed4:	af00      	add	r7, sp, #0
 8029ed6:	60f8      	str	r0, [r7, #12]
 8029ed8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8029edc:	683b      	ldr	r3, [r7, #0]
 8029ede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8029ee0:	2307      	movs	r3, #7
 8029ee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029ee4:	2340      	movs	r3, #64	; 0x40
 8029ee6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029ee8:	2300      	movs	r3, #0
 8029eea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029ef0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029ef2:	f107 0310 	add.w	r3, r7, #16
 8029ef6:	4619      	mov	r1, r3
 8029ef8:	68f8      	ldr	r0, [r7, #12]
 8029efa:	f7ff fea7 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8029efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8029f02:	2107      	movs	r1, #7
 8029f04:	68f8      	ldr	r0, [r7, #12]
 8029f06:	f000 f975 	bl	802a1f4 <SDMMC_GetCmdResp1>
 8029f0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8029f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8029f0e:	4618      	mov	r0, r3
 8029f10:	3728      	adds	r7, #40	; 0x28
 8029f12:	46bd      	mov	sp, r7
 8029f14:	bd80      	pop	{r7, pc}

08029f16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8029f16:	b580      	push	{r7, lr}
 8029f18:	b088      	sub	sp, #32
 8029f1a:	af00      	add	r7, sp, #0
 8029f1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8029f1e:	2300      	movs	r3, #0
 8029f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8029f22:	2300      	movs	r3, #0
 8029f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8029f26:	2300      	movs	r3, #0
 8029f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029f2a:	2300      	movs	r3, #0
 8029f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029f32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029f34:	f107 0308 	add.w	r3, r7, #8
 8029f38:	4619      	mov	r1, r3
 8029f3a:	6878      	ldr	r0, [r7, #4]
 8029f3c:	f7ff fe86 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8029f40:	6878      	ldr	r0, [r7, #4]
 8029f42:	f000 f92f 	bl	802a1a4 <SDMMC_GetCmdError>
 8029f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029f48:	69fb      	ldr	r3, [r7, #28]
}
 8029f4a:	4618      	mov	r0, r3
 8029f4c:	3720      	adds	r7, #32
 8029f4e:	46bd      	mov	sp, r7
 8029f50:	bd80      	pop	{r7, pc}

08029f52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8029f52:	b580      	push	{r7, lr}
 8029f54:	b088      	sub	sp, #32
 8029f56:	af00      	add	r7, sp, #0
 8029f58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8029f5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8029f5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8029f60:	2308      	movs	r3, #8
 8029f62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029f64:	2340      	movs	r3, #64	; 0x40
 8029f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029f68:	2300      	movs	r3, #0
 8029f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029f70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029f72:	f107 0308 	add.w	r3, r7, #8
 8029f76:	4619      	mov	r1, r3
 8029f78:	6878      	ldr	r0, [r7, #4]
 8029f7a:	f7ff fe67 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8029f7e:	6878      	ldr	r0, [r7, #4]
 8029f80:	f000 fb18 	bl	802a5b4 <SDMMC_GetCmdResp7>
 8029f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029f86:	69fb      	ldr	r3, [r7, #28]
}
 8029f88:	4618      	mov	r0, r3
 8029f8a:	3720      	adds	r7, #32
 8029f8c:	46bd      	mov	sp, r7
 8029f8e:	bd80      	pop	{r7, pc}

08029f90 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8029f90:	b580      	push	{r7, lr}
 8029f92:	b088      	sub	sp, #32
 8029f94:	af00      	add	r7, sp, #0
 8029f96:	6078      	str	r0, [r7, #4]
 8029f98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8029f9a:	683b      	ldr	r3, [r7, #0]
 8029f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8029f9e:	2337      	movs	r3, #55	; 0x37
 8029fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029fa2:	2340      	movs	r3, #64	; 0x40
 8029fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029fa6:	2300      	movs	r3, #0
 8029fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029fae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029fb0:	f107 0308 	add.w	r3, r7, #8
 8029fb4:	4619      	mov	r1, r3
 8029fb6:	6878      	ldr	r0, [r7, #4]
 8029fb8:	f7ff fe48 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8029fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8029fc0:	2137      	movs	r1, #55	; 0x37
 8029fc2:	6878      	ldr	r0, [r7, #4]
 8029fc4:	f000 f916 	bl	802a1f4 <SDMMC_GetCmdResp1>
 8029fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029fca:	69fb      	ldr	r3, [r7, #28]
}
 8029fcc:	4618      	mov	r0, r3
 8029fce:	3720      	adds	r7, #32
 8029fd0:	46bd      	mov	sp, r7
 8029fd2:	bd80      	pop	{r7, pc}

08029fd4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8029fd4:	b580      	push	{r7, lr}
 8029fd6:	b088      	sub	sp, #32
 8029fd8:	af00      	add	r7, sp, #0
 8029fda:	6078      	str	r0, [r7, #4]
 8029fdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8029fde:	683a      	ldr	r2, [r7, #0]
 8029fe0:	4b0d      	ldr	r3, [pc, #52]	; (802a018 <SDMMC_CmdAppOperCommand+0x44>)
 8029fe2:	4313      	orrs	r3, r2
 8029fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8029fe6:	2329      	movs	r3, #41	; 0x29
 8029fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029fea:	2340      	movs	r3, #64	; 0x40
 8029fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029fee:	2300      	movs	r3, #0
 8029ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029ff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029ff8:	f107 0308 	add.w	r3, r7, #8
 8029ffc:	4619      	mov	r1, r3
 8029ffe:	6878      	ldr	r0, [r7, #4]
 802a000:	f7ff fe24 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 802a004:	6878      	ldr	r0, [r7, #4]
 802a006:	f000 fa27 	bl	802a458 <SDMMC_GetCmdResp3>
 802a00a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a00c:	69fb      	ldr	r3, [r7, #28]
}
 802a00e:	4618      	mov	r0, r3
 802a010:	3720      	adds	r7, #32
 802a012:	46bd      	mov	sp, r7
 802a014:	bd80      	pop	{r7, pc}
 802a016:	bf00      	nop
 802a018:	80100000 	.word	0x80100000

0802a01c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 802a01c:	b580      	push	{r7, lr}
 802a01e:	b088      	sub	sp, #32
 802a020:	af00      	add	r7, sp, #0
 802a022:	6078      	str	r0, [r7, #4]
 802a024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 802a026:	683b      	ldr	r3, [r7, #0]
 802a028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 802a02a:	2306      	movs	r3, #6
 802a02c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802a02e:	2340      	movs	r3, #64	; 0x40
 802a030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a032:	2300      	movs	r3, #0
 802a034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a03a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a03c:	f107 0308 	add.w	r3, r7, #8
 802a040:	4619      	mov	r1, r3
 802a042:	6878      	ldr	r0, [r7, #4]
 802a044:	f7ff fe02 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 802a048:	f241 3288 	movw	r2, #5000	; 0x1388
 802a04c:	2106      	movs	r1, #6
 802a04e:	6878      	ldr	r0, [r7, #4]
 802a050:	f000 f8d0 	bl	802a1f4 <SDMMC_GetCmdResp1>
 802a054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a056:	69fb      	ldr	r3, [r7, #28]
}
 802a058:	4618      	mov	r0, r3
 802a05a:	3720      	adds	r7, #32
 802a05c:	46bd      	mov	sp, r7
 802a05e:	bd80      	pop	{r7, pc}

0802a060 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 802a060:	b580      	push	{r7, lr}
 802a062:	b088      	sub	sp, #32
 802a064:	af00      	add	r7, sp, #0
 802a066:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 802a068:	2300      	movs	r3, #0
 802a06a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 802a06c:	2333      	movs	r3, #51	; 0x33
 802a06e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802a070:	2340      	movs	r3, #64	; 0x40
 802a072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a074:	2300      	movs	r3, #0
 802a076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a07c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a07e:	f107 0308 	add.w	r3, r7, #8
 802a082:	4619      	mov	r1, r3
 802a084:	6878      	ldr	r0, [r7, #4]
 802a086:	f7ff fde1 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 802a08a:	f241 3288 	movw	r2, #5000	; 0x1388
 802a08e:	2133      	movs	r1, #51	; 0x33
 802a090:	6878      	ldr	r0, [r7, #4]
 802a092:	f000 f8af 	bl	802a1f4 <SDMMC_GetCmdResp1>
 802a096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a098:	69fb      	ldr	r3, [r7, #28]
}
 802a09a:	4618      	mov	r0, r3
 802a09c:	3720      	adds	r7, #32
 802a09e:	46bd      	mov	sp, r7
 802a0a0:	bd80      	pop	{r7, pc}

0802a0a2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 802a0a2:	b580      	push	{r7, lr}
 802a0a4:	b088      	sub	sp, #32
 802a0a6:	af00      	add	r7, sp, #0
 802a0a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 802a0aa:	2300      	movs	r3, #0
 802a0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 802a0ae:	2302      	movs	r3, #2
 802a0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802a0b2:	23c0      	movs	r3, #192	; 0xc0
 802a0b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a0b6:	2300      	movs	r3, #0
 802a0b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a0ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a0be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a0c0:	f107 0308 	add.w	r3, r7, #8
 802a0c4:	4619      	mov	r1, r3
 802a0c6:	6878      	ldr	r0, [r7, #4]
 802a0c8:	f7ff fdc0 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 802a0cc:	6878      	ldr	r0, [r7, #4]
 802a0ce:	f000 f97d 	bl	802a3cc <SDMMC_GetCmdResp2>
 802a0d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a0d4:	69fb      	ldr	r3, [r7, #28]
}
 802a0d6:	4618      	mov	r0, r3
 802a0d8:	3720      	adds	r7, #32
 802a0da:	46bd      	mov	sp, r7
 802a0dc:	bd80      	pop	{r7, pc}

0802a0de <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802a0de:	b580      	push	{r7, lr}
 802a0e0:	b088      	sub	sp, #32
 802a0e2:	af00      	add	r7, sp, #0
 802a0e4:	6078      	str	r0, [r7, #4]
 802a0e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 802a0e8:	683b      	ldr	r3, [r7, #0]
 802a0ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 802a0ec:	2309      	movs	r3, #9
 802a0ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802a0f0:	23c0      	movs	r3, #192	; 0xc0
 802a0f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a0f4:	2300      	movs	r3, #0
 802a0f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a0fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a0fe:	f107 0308 	add.w	r3, r7, #8
 802a102:	4619      	mov	r1, r3
 802a104:	6878      	ldr	r0, [r7, #4]
 802a106:	f7ff fda1 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 802a10a:	6878      	ldr	r0, [r7, #4]
 802a10c:	f000 f95e 	bl	802a3cc <SDMMC_GetCmdResp2>
 802a110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a112:	69fb      	ldr	r3, [r7, #28]
}
 802a114:	4618      	mov	r0, r3
 802a116:	3720      	adds	r7, #32
 802a118:	46bd      	mov	sp, r7
 802a11a:	bd80      	pop	{r7, pc}

0802a11c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 802a11c:	b580      	push	{r7, lr}
 802a11e:	b088      	sub	sp, #32
 802a120:	af00      	add	r7, sp, #0
 802a122:	6078      	str	r0, [r7, #4]
 802a124:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 802a126:	2300      	movs	r3, #0
 802a128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 802a12a:	2303      	movs	r3, #3
 802a12c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802a12e:	2340      	movs	r3, #64	; 0x40
 802a130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a132:	2300      	movs	r3, #0
 802a134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a13a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a13c:	f107 0308 	add.w	r3, r7, #8
 802a140:	4619      	mov	r1, r3
 802a142:	6878      	ldr	r0, [r7, #4]
 802a144:	f7ff fd82 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 802a148:	683a      	ldr	r2, [r7, #0]
 802a14a:	2103      	movs	r1, #3
 802a14c:	6878      	ldr	r0, [r7, #4]
 802a14e:	f000 f9bd 	bl	802a4cc <SDMMC_GetCmdResp6>
 802a152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a154:	69fb      	ldr	r3, [r7, #28]
}
 802a156:	4618      	mov	r0, r3
 802a158:	3720      	adds	r7, #32
 802a15a:	46bd      	mov	sp, r7
 802a15c:	bd80      	pop	{r7, pc}

0802a15e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802a15e:	b580      	push	{r7, lr}
 802a160:	b088      	sub	sp, #32
 802a162:	af00      	add	r7, sp, #0
 802a164:	6078      	str	r0, [r7, #4]
 802a166:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 802a168:	683b      	ldr	r3, [r7, #0]
 802a16a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 802a16c:	230d      	movs	r3, #13
 802a16e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802a170:	2340      	movs	r3, #64	; 0x40
 802a172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a174:	2300      	movs	r3, #0
 802a176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a17c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a17e:	f107 0308 	add.w	r3, r7, #8
 802a182:	4619      	mov	r1, r3
 802a184:	6878      	ldr	r0, [r7, #4]
 802a186:	f7ff fd61 	bl	8029c4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 802a18a:	f241 3288 	movw	r2, #5000	; 0x1388
 802a18e:	210d      	movs	r1, #13
 802a190:	6878      	ldr	r0, [r7, #4]
 802a192:	f000 f82f 	bl	802a1f4 <SDMMC_GetCmdResp1>
 802a196:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a198:	69fb      	ldr	r3, [r7, #28]
}
 802a19a:	4618      	mov	r0, r3
 802a19c:	3720      	adds	r7, #32
 802a19e:	46bd      	mov	sp, r7
 802a1a0:	bd80      	pop	{r7, pc}
	...

0802a1a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 802a1a4:	b490      	push	{r4, r7}
 802a1a6:	b082      	sub	sp, #8
 802a1a8:	af00      	add	r7, sp, #0
 802a1aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802a1ac:	4b0f      	ldr	r3, [pc, #60]	; (802a1ec <SDMMC_GetCmdError+0x48>)
 802a1ae:	681b      	ldr	r3, [r3, #0]
 802a1b0:	4a0f      	ldr	r2, [pc, #60]	; (802a1f0 <SDMMC_GetCmdError+0x4c>)
 802a1b2:	fba2 2303 	umull	r2, r3, r2, r3
 802a1b6:	0a5b      	lsrs	r3, r3, #9
 802a1b8:	f241 3288 	movw	r2, #5000	; 0x1388
 802a1bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a1c0:	4623      	mov	r3, r4
 802a1c2:	1e5c      	subs	r4, r3, #1
 802a1c4:	2b00      	cmp	r3, #0
 802a1c6:	d102      	bne.n	802a1ce <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a1c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a1cc:	e009      	b.n	802a1e2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 802a1ce:	687b      	ldr	r3, [r7, #4]
 802a1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a1d6:	2b00      	cmp	r3, #0
 802a1d8:	d0f2      	beq.n	802a1c0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802a1da:	687b      	ldr	r3, [r7, #4]
 802a1dc:	22c5      	movs	r2, #197	; 0xc5
 802a1de:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 802a1e0:	2300      	movs	r3, #0
}
 802a1e2:	4618      	mov	r0, r3
 802a1e4:	3708      	adds	r7, #8
 802a1e6:	46bd      	mov	sp, r7
 802a1e8:	bc90      	pop	{r4, r7}
 802a1ea:	4770      	bx	lr
 802a1ec:	20000000 	.word	0x20000000
 802a1f0:	10624dd3 	.word	0x10624dd3

0802a1f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 802a1f4:	b590      	push	{r4, r7, lr}
 802a1f6:	b087      	sub	sp, #28
 802a1f8:	af00      	add	r7, sp, #0
 802a1fa:	60f8      	str	r0, [r7, #12]
 802a1fc:	460b      	mov	r3, r1
 802a1fe:	607a      	str	r2, [r7, #4]
 802a200:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 802a202:	4b6f      	ldr	r3, [pc, #444]	; (802a3c0 <SDMMC_GetCmdResp1+0x1cc>)
 802a204:	681b      	ldr	r3, [r3, #0]
 802a206:	4a6f      	ldr	r2, [pc, #444]	; (802a3c4 <SDMMC_GetCmdResp1+0x1d0>)
 802a208:	fba2 2303 	umull	r2, r3, r2, r3
 802a20c:	0a5b      	lsrs	r3, r3, #9
 802a20e:	687a      	ldr	r2, [r7, #4]
 802a210:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a214:	4623      	mov	r3, r4
 802a216:	1e5c      	subs	r4, r3, #1
 802a218:	2b00      	cmp	r3, #0
 802a21a:	d102      	bne.n	802a222 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a21c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a220:	e0c9      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 802a222:	68fb      	ldr	r3, [r7, #12]
 802a224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a226:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a228:	697b      	ldr	r3, [r7, #20]
 802a22a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802a22e:	2b00      	cmp	r3, #0
 802a230:	d0f0      	beq.n	802a214 <SDMMC_GetCmdResp1+0x20>
 802a232:	697b      	ldr	r3, [r7, #20]
 802a234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a238:	2b00      	cmp	r3, #0
 802a23a:	d1eb      	bne.n	802a214 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802a23c:	68fb      	ldr	r3, [r7, #12]
 802a23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a240:	f003 0304 	and.w	r3, r3, #4
 802a244:	2b00      	cmp	r3, #0
 802a246:	d004      	beq.n	802a252 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802a248:	68fb      	ldr	r3, [r7, #12]
 802a24a:	2204      	movs	r2, #4
 802a24c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802a24e:	2304      	movs	r3, #4
 802a250:	e0b1      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802a252:	68fb      	ldr	r3, [r7, #12]
 802a254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a256:	f003 0301 	and.w	r3, r3, #1
 802a25a:	2b00      	cmp	r3, #0
 802a25c:	d004      	beq.n	802a268 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802a25e:	68fb      	ldr	r3, [r7, #12]
 802a260:	2201      	movs	r2, #1
 802a262:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a264:	2301      	movs	r3, #1
 802a266:	e0a6      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802a268:	68fb      	ldr	r3, [r7, #12]
 802a26a:	22c5      	movs	r2, #197	; 0xc5
 802a26c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 802a26e:	68f8      	ldr	r0, [r7, #12]
 802a270:	f7ff fd16 	bl	8029ca0 <SDMMC_GetCommandResponse>
 802a274:	4603      	mov	r3, r0
 802a276:	461a      	mov	r2, r3
 802a278:	7afb      	ldrb	r3, [r7, #11]
 802a27a:	4293      	cmp	r3, r2
 802a27c:	d001      	beq.n	802a282 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a27e:	2301      	movs	r3, #1
 802a280:	e099      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 802a282:	2100      	movs	r1, #0
 802a284:	68f8      	ldr	r0, [r7, #12]
 802a286:	f7ff fd18 	bl	8029cba <SDMMC_GetResponse>
 802a28a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 802a28c:	693a      	ldr	r2, [r7, #16]
 802a28e:	4b4e      	ldr	r3, [pc, #312]	; (802a3c8 <SDMMC_GetCmdResp1+0x1d4>)
 802a290:	4013      	ands	r3, r2
 802a292:	2b00      	cmp	r3, #0
 802a294:	d101      	bne.n	802a29a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 802a296:	2300      	movs	r3, #0
 802a298:	e08d      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 802a29a:	693b      	ldr	r3, [r7, #16]
 802a29c:	2b00      	cmp	r3, #0
 802a29e:	da02      	bge.n	802a2a6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 802a2a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 802a2a4:	e087      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 802a2a6:	693b      	ldr	r3, [r7, #16]
 802a2a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802a2ac:	2b00      	cmp	r3, #0
 802a2ae:	d001      	beq.n	802a2b4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 802a2b0:	2340      	movs	r3, #64	; 0x40
 802a2b2:	e080      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 802a2b4:	693b      	ldr	r3, [r7, #16]
 802a2b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802a2ba:	2b00      	cmp	r3, #0
 802a2bc:	d001      	beq.n	802a2c2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 802a2be:	2380      	movs	r3, #128	; 0x80
 802a2c0:	e079      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 802a2c2:	693b      	ldr	r3, [r7, #16]
 802a2c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a2c8:	2b00      	cmp	r3, #0
 802a2ca:	d002      	beq.n	802a2d2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 802a2cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 802a2d0:	e071      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 802a2d2:	693b      	ldr	r3, [r7, #16]
 802a2d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802a2d8:	2b00      	cmp	r3, #0
 802a2da:	d002      	beq.n	802a2e2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 802a2dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 802a2e0:	e069      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 802a2e2:	693b      	ldr	r3, [r7, #16]
 802a2e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802a2e8:	2b00      	cmp	r3, #0
 802a2ea:	d002      	beq.n	802a2f2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 802a2ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a2f0:	e061      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 802a2f2:	693b      	ldr	r3, [r7, #16]
 802a2f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802a2f8:	2b00      	cmp	r3, #0
 802a2fa:	d002      	beq.n	802a302 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 802a2fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802a300:	e059      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 802a302:	693b      	ldr	r3, [r7, #16]
 802a304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802a308:	2b00      	cmp	r3, #0
 802a30a:	d002      	beq.n	802a312 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 802a30c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a310:	e051      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 802a312:	693b      	ldr	r3, [r7, #16]
 802a314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a318:	2b00      	cmp	r3, #0
 802a31a:	d002      	beq.n	802a322 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 802a31c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802a320:	e049      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 802a322:	693b      	ldr	r3, [r7, #16]
 802a324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802a328:	2b00      	cmp	r3, #0
 802a32a:	d002      	beq.n	802a332 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 802a32c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802a330:	e041      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 802a332:	693b      	ldr	r3, [r7, #16]
 802a334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802a338:	2b00      	cmp	r3, #0
 802a33a:	d002      	beq.n	802a342 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 802a33c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a340:	e039      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 802a342:	693b      	ldr	r3, [r7, #16]
 802a344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802a348:	2b00      	cmp	r3, #0
 802a34a:	d002      	beq.n	802a352 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 802a34c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802a350:	e031      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 802a352:	693b      	ldr	r3, [r7, #16]
 802a354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a358:	2b00      	cmp	r3, #0
 802a35a:	d002      	beq.n	802a362 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 802a35c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802a360:	e029      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 802a362:	693b      	ldr	r3, [r7, #16]
 802a364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802a368:	2b00      	cmp	r3, #0
 802a36a:	d002      	beq.n	802a372 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 802a36c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802a370:	e021      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 802a372:	693b      	ldr	r3, [r7, #16]
 802a374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a378:	2b00      	cmp	r3, #0
 802a37a:	d002      	beq.n	802a382 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 802a37c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802a380:	e019      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 802a382:	693b      	ldr	r3, [r7, #16]
 802a384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802a388:	2b00      	cmp	r3, #0
 802a38a:	d002      	beq.n	802a392 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 802a38c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802a390:	e011      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 802a392:	693b      	ldr	r3, [r7, #16]
 802a394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802a398:	2b00      	cmp	r3, #0
 802a39a:	d002      	beq.n	802a3a2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 802a39c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802a3a0:	e009      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 802a3a2:	693b      	ldr	r3, [r7, #16]
 802a3a4:	f003 0308 	and.w	r3, r3, #8
 802a3a8:	2b00      	cmp	r3, #0
 802a3aa:	d002      	beq.n	802a3b2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 802a3ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802a3b0:	e001      	b.n	802a3b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802a3b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 802a3b6:	4618      	mov	r0, r3
 802a3b8:	371c      	adds	r7, #28
 802a3ba:	46bd      	mov	sp, r7
 802a3bc:	bd90      	pop	{r4, r7, pc}
 802a3be:	bf00      	nop
 802a3c0:	20000000 	.word	0x20000000
 802a3c4:	10624dd3 	.word	0x10624dd3
 802a3c8:	fdffe008 	.word	0xfdffe008

0802a3cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 802a3cc:	b490      	push	{r4, r7}
 802a3ce:	b084      	sub	sp, #16
 802a3d0:	af00      	add	r7, sp, #0
 802a3d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802a3d4:	4b1e      	ldr	r3, [pc, #120]	; (802a450 <SDMMC_GetCmdResp2+0x84>)
 802a3d6:	681b      	ldr	r3, [r3, #0]
 802a3d8:	4a1e      	ldr	r2, [pc, #120]	; (802a454 <SDMMC_GetCmdResp2+0x88>)
 802a3da:	fba2 2303 	umull	r2, r3, r2, r3
 802a3de:	0a5b      	lsrs	r3, r3, #9
 802a3e0:	f241 3288 	movw	r2, #5000	; 0x1388
 802a3e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a3e8:	4623      	mov	r3, r4
 802a3ea:	1e5c      	subs	r4, r3, #1
 802a3ec:	2b00      	cmp	r3, #0
 802a3ee:	d102      	bne.n	802a3f6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a3f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a3f4:	e026      	b.n	802a444 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 802a3f6:	687b      	ldr	r3, [r7, #4]
 802a3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a3fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a3fc:	68fb      	ldr	r3, [r7, #12]
 802a3fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802a402:	2b00      	cmp	r3, #0
 802a404:	d0f0      	beq.n	802a3e8 <SDMMC_GetCmdResp2+0x1c>
 802a406:	68fb      	ldr	r3, [r7, #12]
 802a408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a40c:	2b00      	cmp	r3, #0
 802a40e:	d1eb      	bne.n	802a3e8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802a410:	687b      	ldr	r3, [r7, #4]
 802a412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a414:	f003 0304 	and.w	r3, r3, #4
 802a418:	2b00      	cmp	r3, #0
 802a41a:	d004      	beq.n	802a426 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802a41c:	687b      	ldr	r3, [r7, #4]
 802a41e:	2204      	movs	r2, #4
 802a420:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802a422:	2304      	movs	r3, #4
 802a424:	e00e      	b.n	802a444 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802a426:	687b      	ldr	r3, [r7, #4]
 802a428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a42a:	f003 0301 	and.w	r3, r3, #1
 802a42e:	2b00      	cmp	r3, #0
 802a430:	d004      	beq.n	802a43c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802a432:	687b      	ldr	r3, [r7, #4]
 802a434:	2201      	movs	r2, #1
 802a436:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a438:	2301      	movs	r3, #1
 802a43a:	e003      	b.n	802a444 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802a43c:	687b      	ldr	r3, [r7, #4]
 802a43e:	22c5      	movs	r2, #197	; 0xc5
 802a440:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 802a442:	2300      	movs	r3, #0
}
 802a444:	4618      	mov	r0, r3
 802a446:	3710      	adds	r7, #16
 802a448:	46bd      	mov	sp, r7
 802a44a:	bc90      	pop	{r4, r7}
 802a44c:	4770      	bx	lr
 802a44e:	bf00      	nop
 802a450:	20000000 	.word	0x20000000
 802a454:	10624dd3 	.word	0x10624dd3

0802a458 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 802a458:	b490      	push	{r4, r7}
 802a45a:	b084      	sub	sp, #16
 802a45c:	af00      	add	r7, sp, #0
 802a45e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802a460:	4b18      	ldr	r3, [pc, #96]	; (802a4c4 <SDMMC_GetCmdResp3+0x6c>)
 802a462:	681b      	ldr	r3, [r3, #0]
 802a464:	4a18      	ldr	r2, [pc, #96]	; (802a4c8 <SDMMC_GetCmdResp3+0x70>)
 802a466:	fba2 2303 	umull	r2, r3, r2, r3
 802a46a:	0a5b      	lsrs	r3, r3, #9
 802a46c:	f241 3288 	movw	r2, #5000	; 0x1388
 802a470:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a474:	4623      	mov	r3, r4
 802a476:	1e5c      	subs	r4, r3, #1
 802a478:	2b00      	cmp	r3, #0
 802a47a:	d102      	bne.n	802a482 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a47c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a480:	e01b      	b.n	802a4ba <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 802a482:	687b      	ldr	r3, [r7, #4]
 802a484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a486:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a488:	68fb      	ldr	r3, [r7, #12]
 802a48a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802a48e:	2b00      	cmp	r3, #0
 802a490:	d0f0      	beq.n	802a474 <SDMMC_GetCmdResp3+0x1c>
 802a492:	68fb      	ldr	r3, [r7, #12]
 802a494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a498:	2b00      	cmp	r3, #0
 802a49a:	d1eb      	bne.n	802a474 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802a49c:	687b      	ldr	r3, [r7, #4]
 802a49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a4a0:	f003 0304 	and.w	r3, r3, #4
 802a4a4:	2b00      	cmp	r3, #0
 802a4a6:	d004      	beq.n	802a4b2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802a4a8:	687b      	ldr	r3, [r7, #4]
 802a4aa:	2204      	movs	r2, #4
 802a4ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802a4ae:	2304      	movs	r3, #4
 802a4b0:	e003      	b.n	802a4ba <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802a4b2:	687b      	ldr	r3, [r7, #4]
 802a4b4:	22c5      	movs	r2, #197	; 0xc5
 802a4b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 802a4b8:	2300      	movs	r3, #0
}
 802a4ba:	4618      	mov	r0, r3
 802a4bc:	3710      	adds	r7, #16
 802a4be:	46bd      	mov	sp, r7
 802a4c0:	bc90      	pop	{r4, r7}
 802a4c2:	4770      	bx	lr
 802a4c4:	20000000 	.word	0x20000000
 802a4c8:	10624dd3 	.word	0x10624dd3

0802a4cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 802a4cc:	b590      	push	{r4, r7, lr}
 802a4ce:	b087      	sub	sp, #28
 802a4d0:	af00      	add	r7, sp, #0
 802a4d2:	60f8      	str	r0, [r7, #12]
 802a4d4:	460b      	mov	r3, r1
 802a4d6:	607a      	str	r2, [r7, #4]
 802a4d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802a4da:	4b34      	ldr	r3, [pc, #208]	; (802a5ac <SDMMC_GetCmdResp6+0xe0>)
 802a4dc:	681b      	ldr	r3, [r3, #0]
 802a4de:	4a34      	ldr	r2, [pc, #208]	; (802a5b0 <SDMMC_GetCmdResp6+0xe4>)
 802a4e0:	fba2 2303 	umull	r2, r3, r2, r3
 802a4e4:	0a5b      	lsrs	r3, r3, #9
 802a4e6:	f241 3288 	movw	r2, #5000	; 0x1388
 802a4ea:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a4ee:	4623      	mov	r3, r4
 802a4f0:	1e5c      	subs	r4, r3, #1
 802a4f2:	2b00      	cmp	r3, #0
 802a4f4:	d102      	bne.n	802a4fc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a4f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a4fa:	e052      	b.n	802a5a2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 802a4fc:	68fb      	ldr	r3, [r7, #12]
 802a4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a500:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a502:	697b      	ldr	r3, [r7, #20]
 802a504:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802a508:	2b00      	cmp	r3, #0
 802a50a:	d0f0      	beq.n	802a4ee <SDMMC_GetCmdResp6+0x22>
 802a50c:	697b      	ldr	r3, [r7, #20]
 802a50e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a512:	2b00      	cmp	r3, #0
 802a514:	d1eb      	bne.n	802a4ee <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802a516:	68fb      	ldr	r3, [r7, #12]
 802a518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a51a:	f003 0304 	and.w	r3, r3, #4
 802a51e:	2b00      	cmp	r3, #0
 802a520:	d004      	beq.n	802a52c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802a522:	68fb      	ldr	r3, [r7, #12]
 802a524:	2204      	movs	r2, #4
 802a526:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802a528:	2304      	movs	r3, #4
 802a52a:	e03a      	b.n	802a5a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802a52c:	68fb      	ldr	r3, [r7, #12]
 802a52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a530:	f003 0301 	and.w	r3, r3, #1
 802a534:	2b00      	cmp	r3, #0
 802a536:	d004      	beq.n	802a542 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802a538:	68fb      	ldr	r3, [r7, #12]
 802a53a:	2201      	movs	r2, #1
 802a53c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a53e:	2301      	movs	r3, #1
 802a540:	e02f      	b.n	802a5a2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 802a542:	68f8      	ldr	r0, [r7, #12]
 802a544:	f7ff fbac 	bl	8029ca0 <SDMMC_GetCommandResponse>
 802a548:	4603      	mov	r3, r0
 802a54a:	461a      	mov	r2, r3
 802a54c:	7afb      	ldrb	r3, [r7, #11]
 802a54e:	4293      	cmp	r3, r2
 802a550:	d001      	beq.n	802a556 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a552:	2301      	movs	r3, #1
 802a554:	e025      	b.n	802a5a2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802a556:	68fb      	ldr	r3, [r7, #12]
 802a558:	22c5      	movs	r2, #197	; 0xc5
 802a55a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 802a55c:	2100      	movs	r1, #0
 802a55e:	68f8      	ldr	r0, [r7, #12]
 802a560:	f7ff fbab 	bl	8029cba <SDMMC_GetResponse>
 802a564:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 802a566:	693b      	ldr	r3, [r7, #16]
 802a568:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 802a56c:	2b00      	cmp	r3, #0
 802a56e:	d106      	bne.n	802a57e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 802a570:	693b      	ldr	r3, [r7, #16]
 802a572:	0c1b      	lsrs	r3, r3, #16
 802a574:	b29a      	uxth	r2, r3
 802a576:	687b      	ldr	r3, [r7, #4]
 802a578:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 802a57a:	2300      	movs	r3, #0
 802a57c:	e011      	b.n	802a5a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 802a57e:	693b      	ldr	r3, [r7, #16]
 802a580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802a584:	2b00      	cmp	r3, #0
 802a586:	d002      	beq.n	802a58e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 802a588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802a58c:	e009      	b.n	802a5a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 802a58e:	693b      	ldr	r3, [r7, #16]
 802a590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a594:	2b00      	cmp	r3, #0
 802a596:	d002      	beq.n	802a59e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 802a598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a59c:	e001      	b.n	802a5a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802a59e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 802a5a2:	4618      	mov	r0, r3
 802a5a4:	371c      	adds	r7, #28
 802a5a6:	46bd      	mov	sp, r7
 802a5a8:	bd90      	pop	{r4, r7, pc}
 802a5aa:	bf00      	nop
 802a5ac:	20000000 	.word	0x20000000
 802a5b0:	10624dd3 	.word	0x10624dd3

0802a5b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 802a5b4:	b490      	push	{r4, r7}
 802a5b6:	b084      	sub	sp, #16
 802a5b8:	af00      	add	r7, sp, #0
 802a5ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802a5bc:	4b21      	ldr	r3, [pc, #132]	; (802a644 <SDMMC_GetCmdResp7+0x90>)
 802a5be:	681b      	ldr	r3, [r3, #0]
 802a5c0:	4a21      	ldr	r2, [pc, #132]	; (802a648 <SDMMC_GetCmdResp7+0x94>)
 802a5c2:	fba2 2303 	umull	r2, r3, r2, r3
 802a5c6:	0a5b      	lsrs	r3, r3, #9
 802a5c8:	f241 3288 	movw	r2, #5000	; 0x1388
 802a5cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a5d0:	4623      	mov	r3, r4
 802a5d2:	1e5c      	subs	r4, r3, #1
 802a5d4:	2b00      	cmp	r3, #0
 802a5d6:	d102      	bne.n	802a5de <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a5d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a5dc:	e02c      	b.n	802a638 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 802a5de:	687b      	ldr	r3, [r7, #4]
 802a5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a5e2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a5e4:	68fb      	ldr	r3, [r7, #12]
 802a5e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802a5ea:	2b00      	cmp	r3, #0
 802a5ec:	d0f0      	beq.n	802a5d0 <SDMMC_GetCmdResp7+0x1c>
 802a5ee:	68fb      	ldr	r3, [r7, #12]
 802a5f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a5f4:	2b00      	cmp	r3, #0
 802a5f6:	d1eb      	bne.n	802a5d0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802a5f8:	687b      	ldr	r3, [r7, #4]
 802a5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a5fc:	f003 0304 	and.w	r3, r3, #4
 802a600:	2b00      	cmp	r3, #0
 802a602:	d004      	beq.n	802a60e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802a604:	687b      	ldr	r3, [r7, #4]
 802a606:	2204      	movs	r2, #4
 802a608:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802a60a:	2304      	movs	r3, #4
 802a60c:	e014      	b.n	802a638 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802a60e:	687b      	ldr	r3, [r7, #4]
 802a610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a612:	f003 0301 	and.w	r3, r3, #1
 802a616:	2b00      	cmp	r3, #0
 802a618:	d004      	beq.n	802a624 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802a61a:	687b      	ldr	r3, [r7, #4]
 802a61c:	2201      	movs	r2, #1
 802a61e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a620:	2301      	movs	r3, #1
 802a622:	e009      	b.n	802a638 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 802a624:	687b      	ldr	r3, [r7, #4]
 802a626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802a62c:	2b00      	cmp	r3, #0
 802a62e:	d002      	beq.n	802a636 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 802a630:	687b      	ldr	r3, [r7, #4]
 802a632:	2240      	movs	r2, #64	; 0x40
 802a634:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 802a636:	2300      	movs	r3, #0
  
}
 802a638:	4618      	mov	r0, r3
 802a63a:	3710      	adds	r7, #16
 802a63c:	46bd      	mov	sp, r7
 802a63e:	bc90      	pop	{r4, r7}
 802a640:	4770      	bx	lr
 802a642:	bf00      	nop
 802a644:	20000000 	.word	0x20000000
 802a648:	10624dd3 	.word	0x10624dd3

0802a64c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 802a64c:	b580      	push	{r7, lr}
 802a64e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 802a650:	4904      	ldr	r1, [pc, #16]	; (802a664 <MX_FATFS_Init+0x18>)
 802a652:	4805      	ldr	r0, [pc, #20]	; (802a668 <MX_FATFS_Init+0x1c>)
 802a654:	f002 fbf0 	bl	802ce38 <FATFS_LinkDriver>
 802a658:	4603      	mov	r3, r0
 802a65a:	461a      	mov	r2, r3
 802a65c:	4b03      	ldr	r3, [pc, #12]	; (802a66c <MX_FATFS_Init+0x20>)
 802a65e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 802a660:	bf00      	nop
 802a662:	bd80      	pop	{r7, pc}
 802a664:	20021914 	.word	0x20021914
 802a668:	080308bc 	.word	0x080308bc
 802a66c:	20021910 	.word	0x20021910

0802a670 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 802a670:	b580      	push	{r7, lr}
 802a672:	b082      	sub	sp, #8
 802a674:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 802a676:	2300      	movs	r3, #0
 802a678:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 802a67a:	f000 f879 	bl	802a770 <BSP_SD_IsDetected>
 802a67e:	4603      	mov	r3, r0
 802a680:	2b01      	cmp	r3, #1
 802a682:	d001      	beq.n	802a688 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 802a684:	2302      	movs	r3, #2
 802a686:	e012      	b.n	802a6ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 802a688:	480b      	ldr	r0, [pc, #44]	; (802a6b8 <BSP_SD_Init+0x48>)
 802a68a:	f7fd fced 	bl	8028068 <HAL_SD_Init>
 802a68e:	4603      	mov	r3, r0
 802a690:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 802a692:	79fb      	ldrb	r3, [r7, #7]
 802a694:	2b00      	cmp	r3, #0
 802a696:	d109      	bne.n	802a6ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 802a698:	f44f 6100 	mov.w	r1, #2048	; 0x800
 802a69c:	4806      	ldr	r0, [pc, #24]	; (802a6b8 <BSP_SD_Init+0x48>)
 802a69e:	f7fe fae3 	bl	8028c68 <HAL_SD_ConfigWideBusOperation>
 802a6a2:	4603      	mov	r3, r0
 802a6a4:	2b00      	cmp	r3, #0
 802a6a6:	d001      	beq.n	802a6ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 802a6a8:	2301      	movs	r3, #1
 802a6aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 802a6ac:	79fb      	ldrb	r3, [r7, #7]
}
 802a6ae:	4618      	mov	r0, r3
 802a6b0:	3708      	adds	r7, #8
 802a6b2:	46bd      	mov	sp, r7
 802a6b4:	bd80      	pop	{r7, pc}
 802a6b6:	bf00      	nop
 802a6b8:	20021600 	.word	0x20021600

0802a6bc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 802a6bc:	b580      	push	{r7, lr}
 802a6be:	b088      	sub	sp, #32
 802a6c0:	af02      	add	r7, sp, #8
 802a6c2:	60f8      	str	r0, [r7, #12]
 802a6c4:	60b9      	str	r1, [r7, #8]
 802a6c6:	607a      	str	r2, [r7, #4]
 802a6c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 802a6ca:	2300      	movs	r3, #0
 802a6cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 802a6ce:	683b      	ldr	r3, [r7, #0]
 802a6d0:	9300      	str	r3, [sp, #0]
 802a6d2:	687b      	ldr	r3, [r7, #4]
 802a6d4:	68ba      	ldr	r2, [r7, #8]
 802a6d6:	68f9      	ldr	r1, [r7, #12]
 802a6d8:	4806      	ldr	r0, [pc, #24]	; (802a6f4 <BSP_SD_ReadBlocks+0x38>)
 802a6da:	f7fd fd5d 	bl	8028198 <HAL_SD_ReadBlocks>
 802a6de:	4603      	mov	r3, r0
 802a6e0:	2b00      	cmp	r3, #0
 802a6e2:	d001      	beq.n	802a6e8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 802a6e4:	2301      	movs	r3, #1
 802a6e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 802a6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 802a6ea:	4618      	mov	r0, r3
 802a6ec:	3718      	adds	r7, #24
 802a6ee:	46bd      	mov	sp, r7
 802a6f0:	bd80      	pop	{r7, pc}
 802a6f2:	bf00      	nop
 802a6f4:	20021600 	.word	0x20021600

0802a6f8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 802a6f8:	b580      	push	{r7, lr}
 802a6fa:	b088      	sub	sp, #32
 802a6fc:	af02      	add	r7, sp, #8
 802a6fe:	60f8      	str	r0, [r7, #12]
 802a700:	60b9      	str	r1, [r7, #8]
 802a702:	607a      	str	r2, [r7, #4]
 802a704:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 802a706:	2300      	movs	r3, #0
 802a708:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 802a70a:	683b      	ldr	r3, [r7, #0]
 802a70c:	9300      	str	r3, [sp, #0]
 802a70e:	687b      	ldr	r3, [r7, #4]
 802a710:	68ba      	ldr	r2, [r7, #8]
 802a712:	68f9      	ldr	r1, [r7, #12]
 802a714:	4806      	ldr	r0, [pc, #24]	; (802a730 <BSP_SD_WriteBlocks+0x38>)
 802a716:	f7fd ff37 	bl	8028588 <HAL_SD_WriteBlocks>
 802a71a:	4603      	mov	r3, r0
 802a71c:	2b00      	cmp	r3, #0
 802a71e:	d001      	beq.n	802a724 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 802a720:	2301      	movs	r3, #1
 802a722:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 802a724:	7dfb      	ldrb	r3, [r7, #23]
}
 802a726:	4618      	mov	r0, r3
 802a728:	3718      	adds	r7, #24
 802a72a:	46bd      	mov	sp, r7
 802a72c:	bd80      	pop	{r7, pc}
 802a72e:	bf00      	nop
 802a730:	20021600 	.word	0x20021600

0802a734 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 802a734:	b580      	push	{r7, lr}
 802a736:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 802a738:	4805      	ldr	r0, [pc, #20]	; (802a750 <BSP_SD_GetCardState+0x1c>)
 802a73a:	f7fe fb11 	bl	8028d60 <HAL_SD_GetCardState>
 802a73e:	4603      	mov	r3, r0
 802a740:	2b04      	cmp	r3, #4
 802a742:	bf14      	ite	ne
 802a744:	2301      	movne	r3, #1
 802a746:	2300      	moveq	r3, #0
 802a748:	b2db      	uxtb	r3, r3
}
 802a74a:	4618      	mov	r0, r3
 802a74c:	bd80      	pop	{r7, pc}
 802a74e:	bf00      	nop
 802a750:	20021600 	.word	0x20021600

0802a754 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 802a754:	b580      	push	{r7, lr}
 802a756:	b082      	sub	sp, #8
 802a758:	af00      	add	r7, sp, #0
 802a75a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 802a75c:	6879      	ldr	r1, [r7, #4]
 802a75e:	4803      	ldr	r0, [pc, #12]	; (802a76c <BSP_SD_GetCardInfo+0x18>)
 802a760:	f7fe fa56 	bl	8028c10 <HAL_SD_GetCardInfo>
}
 802a764:	bf00      	nop
 802a766:	3708      	adds	r7, #8
 802a768:	46bd      	mov	sp, r7
 802a76a:	bd80      	pop	{r7, pc}
 802a76c:	20021600 	.word	0x20021600

0802a770 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 802a770:	b580      	push	{r7, lr}
 802a772:	b082      	sub	sp, #8
 802a774:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 802a776:	2301      	movs	r3, #1
 802a778:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 802a77a:	f000 f80b 	bl	802a794 <BSP_PlatformIsDetected>
 802a77e:	4603      	mov	r3, r0
 802a780:	2b00      	cmp	r3, #0
 802a782:	d101      	bne.n	802a788 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 802a784:	2300      	movs	r3, #0
 802a786:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 802a788:	79fb      	ldrb	r3, [r7, #7]
 802a78a:	b2db      	uxtb	r3, r3
}
 802a78c:	4618      	mov	r0, r3
 802a78e:	3708      	adds	r7, #8
 802a790:	46bd      	mov	sp, r7
 802a792:	bd80      	pop	{r7, pc}

0802a794 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 802a794:	b580      	push	{r7, lr}
 802a796:	b082      	sub	sp, #8
 802a798:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 802a79a:	2301      	movs	r3, #1
 802a79c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 802a79e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802a7a2:	4806      	ldr	r0, [pc, #24]	; (802a7bc <BSP_PlatformIsDetected+0x28>)
 802a7a4:	f7fb fc3a 	bl	802601c <HAL_GPIO_ReadPin>
 802a7a8:	4603      	mov	r3, r0
 802a7aa:	2b00      	cmp	r3, #0
 802a7ac:	d001      	beq.n	802a7b2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 802a7ae:	2300      	movs	r3, #0
 802a7b0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 802a7b2:	79fb      	ldrb	r3, [r7, #7]
}
 802a7b4:	4618      	mov	r0, r3
 802a7b6:	3708      	adds	r7, #8
 802a7b8:	46bd      	mov	sp, r7
 802a7ba:	bd80      	pop	{r7, pc}
 802a7bc:	40020800 	.word	0x40020800

0802a7c0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 802a7c0:	b580      	push	{r7, lr}
 802a7c2:	b082      	sub	sp, #8
 802a7c4:	af00      	add	r7, sp, #0
 802a7c6:	4603      	mov	r3, r0
 802a7c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 802a7ca:	4b0b      	ldr	r3, [pc, #44]	; (802a7f8 <SD_CheckStatus+0x38>)
 802a7cc:	2201      	movs	r2, #1
 802a7ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 802a7d0:	f7ff ffb0 	bl	802a734 <BSP_SD_GetCardState>
 802a7d4:	4603      	mov	r3, r0
 802a7d6:	2b00      	cmp	r3, #0
 802a7d8:	d107      	bne.n	802a7ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 802a7da:	4b07      	ldr	r3, [pc, #28]	; (802a7f8 <SD_CheckStatus+0x38>)
 802a7dc:	781b      	ldrb	r3, [r3, #0]
 802a7de:	b2db      	uxtb	r3, r3
 802a7e0:	f023 0301 	bic.w	r3, r3, #1
 802a7e4:	b2da      	uxtb	r2, r3
 802a7e6:	4b04      	ldr	r3, [pc, #16]	; (802a7f8 <SD_CheckStatus+0x38>)
 802a7e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 802a7ea:	4b03      	ldr	r3, [pc, #12]	; (802a7f8 <SD_CheckStatus+0x38>)
 802a7ec:	781b      	ldrb	r3, [r3, #0]
 802a7ee:	b2db      	uxtb	r3, r3
}
 802a7f0:	4618      	mov	r0, r3
 802a7f2:	3708      	adds	r7, #8
 802a7f4:	46bd      	mov	sp, r7
 802a7f6:	bd80      	pop	{r7, pc}
 802a7f8:	20000051 	.word	0x20000051

0802a7fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 802a7fc:	b580      	push	{r7, lr}
 802a7fe:	b082      	sub	sp, #8
 802a800:	af00      	add	r7, sp, #0
 802a802:	4603      	mov	r3, r0
 802a804:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 802a806:	4b0b      	ldr	r3, [pc, #44]	; (802a834 <SD_initialize+0x38>)
 802a808:	2201      	movs	r2, #1
 802a80a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 802a80c:	f7ff ff30 	bl	802a670 <BSP_SD_Init>
 802a810:	4603      	mov	r3, r0
 802a812:	2b00      	cmp	r3, #0
 802a814:	d107      	bne.n	802a826 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 802a816:	79fb      	ldrb	r3, [r7, #7]
 802a818:	4618      	mov	r0, r3
 802a81a:	f7ff ffd1 	bl	802a7c0 <SD_CheckStatus>
 802a81e:	4603      	mov	r3, r0
 802a820:	461a      	mov	r2, r3
 802a822:	4b04      	ldr	r3, [pc, #16]	; (802a834 <SD_initialize+0x38>)
 802a824:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 802a826:	4b03      	ldr	r3, [pc, #12]	; (802a834 <SD_initialize+0x38>)
 802a828:	781b      	ldrb	r3, [r3, #0]
 802a82a:	b2db      	uxtb	r3, r3
}
 802a82c:	4618      	mov	r0, r3
 802a82e:	3708      	adds	r7, #8
 802a830:	46bd      	mov	sp, r7
 802a832:	bd80      	pop	{r7, pc}
 802a834:	20000051 	.word	0x20000051

0802a838 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 802a838:	b580      	push	{r7, lr}
 802a83a:	b082      	sub	sp, #8
 802a83c:	af00      	add	r7, sp, #0
 802a83e:	4603      	mov	r3, r0
 802a840:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 802a842:	79fb      	ldrb	r3, [r7, #7]
 802a844:	4618      	mov	r0, r3
 802a846:	f7ff ffbb 	bl	802a7c0 <SD_CheckStatus>
 802a84a:	4603      	mov	r3, r0
}
 802a84c:	4618      	mov	r0, r3
 802a84e:	3708      	adds	r7, #8
 802a850:	46bd      	mov	sp, r7
 802a852:	bd80      	pop	{r7, pc}

0802a854 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 802a854:	b580      	push	{r7, lr}
 802a856:	b086      	sub	sp, #24
 802a858:	af00      	add	r7, sp, #0
 802a85a:	60b9      	str	r1, [r7, #8]
 802a85c:	607a      	str	r2, [r7, #4]
 802a85e:	603b      	str	r3, [r7, #0]
 802a860:	4603      	mov	r3, r0
 802a862:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802a864:	2301      	movs	r3, #1
 802a866:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 802a868:	f04f 33ff 	mov.w	r3, #4294967295
 802a86c:	683a      	ldr	r2, [r7, #0]
 802a86e:	6879      	ldr	r1, [r7, #4]
 802a870:	68b8      	ldr	r0, [r7, #8]
 802a872:	f7ff ff23 	bl	802a6bc <BSP_SD_ReadBlocks>
 802a876:	4603      	mov	r3, r0
 802a878:	2b00      	cmp	r3, #0
 802a87a:	d107      	bne.n	802a88c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 802a87c:	bf00      	nop
 802a87e:	f7ff ff59 	bl	802a734 <BSP_SD_GetCardState>
 802a882:	4603      	mov	r3, r0
 802a884:	2b00      	cmp	r3, #0
 802a886:	d1fa      	bne.n	802a87e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 802a888:	2300      	movs	r3, #0
 802a88a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 802a88c:	7dfb      	ldrb	r3, [r7, #23]
}
 802a88e:	4618      	mov	r0, r3
 802a890:	3718      	adds	r7, #24
 802a892:	46bd      	mov	sp, r7
 802a894:	bd80      	pop	{r7, pc}

0802a896 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 802a896:	b580      	push	{r7, lr}
 802a898:	b086      	sub	sp, #24
 802a89a:	af00      	add	r7, sp, #0
 802a89c:	60b9      	str	r1, [r7, #8]
 802a89e:	607a      	str	r2, [r7, #4]
 802a8a0:	603b      	str	r3, [r7, #0]
 802a8a2:	4603      	mov	r3, r0
 802a8a4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802a8a6:	2301      	movs	r3, #1
 802a8a8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 802a8aa:	f04f 33ff 	mov.w	r3, #4294967295
 802a8ae:	683a      	ldr	r2, [r7, #0]
 802a8b0:	6879      	ldr	r1, [r7, #4]
 802a8b2:	68b8      	ldr	r0, [r7, #8]
 802a8b4:	f7ff ff20 	bl	802a6f8 <BSP_SD_WriteBlocks>
 802a8b8:	4603      	mov	r3, r0
 802a8ba:	2b00      	cmp	r3, #0
 802a8bc:	d107      	bne.n	802a8ce <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 802a8be:	bf00      	nop
 802a8c0:	f7ff ff38 	bl	802a734 <BSP_SD_GetCardState>
 802a8c4:	4603      	mov	r3, r0
 802a8c6:	2b00      	cmp	r3, #0
 802a8c8:	d1fa      	bne.n	802a8c0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 802a8ca:	2300      	movs	r3, #0
 802a8cc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 802a8ce:	7dfb      	ldrb	r3, [r7, #23]
}
 802a8d0:	4618      	mov	r0, r3
 802a8d2:	3718      	adds	r7, #24
 802a8d4:	46bd      	mov	sp, r7
 802a8d6:	bd80      	pop	{r7, pc}

0802a8d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 802a8d8:	b580      	push	{r7, lr}
 802a8da:	b08c      	sub	sp, #48	; 0x30
 802a8dc:	af00      	add	r7, sp, #0
 802a8de:	4603      	mov	r3, r0
 802a8e0:	603a      	str	r2, [r7, #0]
 802a8e2:	71fb      	strb	r3, [r7, #7]
 802a8e4:	460b      	mov	r3, r1
 802a8e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 802a8e8:	2301      	movs	r3, #1
 802a8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 802a8ee:	4b25      	ldr	r3, [pc, #148]	; (802a984 <SD_ioctl+0xac>)
 802a8f0:	781b      	ldrb	r3, [r3, #0]
 802a8f2:	b2db      	uxtb	r3, r3
 802a8f4:	f003 0301 	and.w	r3, r3, #1
 802a8f8:	2b00      	cmp	r3, #0
 802a8fa:	d001      	beq.n	802a900 <SD_ioctl+0x28>
 802a8fc:	2303      	movs	r3, #3
 802a8fe:	e03c      	b.n	802a97a <SD_ioctl+0xa2>

  switch (cmd)
 802a900:	79bb      	ldrb	r3, [r7, #6]
 802a902:	2b03      	cmp	r3, #3
 802a904:	d834      	bhi.n	802a970 <SD_ioctl+0x98>
 802a906:	a201      	add	r2, pc, #4	; (adr r2, 802a90c <SD_ioctl+0x34>)
 802a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a90c:	0802a91d 	.word	0x0802a91d
 802a910:	0802a925 	.word	0x0802a925
 802a914:	0802a93d 	.word	0x0802a93d
 802a918:	0802a957 	.word	0x0802a957
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 802a91c:	2300      	movs	r3, #0
 802a91e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802a922:	e028      	b.n	802a976 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 802a924:	f107 030c 	add.w	r3, r7, #12
 802a928:	4618      	mov	r0, r3
 802a92a:	f7ff ff13 	bl	802a754 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 802a92e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a930:	683b      	ldr	r3, [r7, #0]
 802a932:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 802a934:	2300      	movs	r3, #0
 802a936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802a93a:	e01c      	b.n	802a976 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 802a93c:	f107 030c 	add.w	r3, r7, #12
 802a940:	4618      	mov	r0, r3
 802a942:	f7ff ff07 	bl	802a754 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 802a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a948:	b29a      	uxth	r2, r3
 802a94a:	683b      	ldr	r3, [r7, #0]
 802a94c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 802a94e:	2300      	movs	r3, #0
 802a950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802a954:	e00f      	b.n	802a976 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 802a956:	f107 030c 	add.w	r3, r7, #12
 802a95a:	4618      	mov	r0, r3
 802a95c:	f7ff fefa 	bl	802a754 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 802a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a962:	0a5a      	lsrs	r2, r3, #9
 802a964:	683b      	ldr	r3, [r7, #0]
 802a966:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 802a968:	2300      	movs	r3, #0
 802a96a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802a96e:	e002      	b.n	802a976 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 802a970:	2304      	movs	r3, #4
 802a972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 802a976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802a97a:	4618      	mov	r0, r3
 802a97c:	3730      	adds	r7, #48	; 0x30
 802a97e:	46bd      	mov	sp, r7
 802a980:	bd80      	pop	{r7, pc}
 802a982:	bf00      	nop
 802a984:	20000051 	.word	0x20000051

0802a988 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 802a988:	b580      	push	{r7, lr}
 802a98a:	b084      	sub	sp, #16
 802a98c:	af00      	add	r7, sp, #0
 802a98e:	4603      	mov	r3, r0
 802a990:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 802a992:	79fb      	ldrb	r3, [r7, #7]
 802a994:	4a08      	ldr	r2, [pc, #32]	; (802a9b8 <disk_status+0x30>)
 802a996:	009b      	lsls	r3, r3, #2
 802a998:	4413      	add	r3, r2
 802a99a:	685b      	ldr	r3, [r3, #4]
 802a99c:	685b      	ldr	r3, [r3, #4]
 802a99e:	79fa      	ldrb	r2, [r7, #7]
 802a9a0:	4905      	ldr	r1, [pc, #20]	; (802a9b8 <disk_status+0x30>)
 802a9a2:	440a      	add	r2, r1
 802a9a4:	7a12      	ldrb	r2, [r2, #8]
 802a9a6:	4610      	mov	r0, r2
 802a9a8:	4798      	blx	r3
 802a9aa:	4603      	mov	r3, r0
 802a9ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 802a9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 802a9b0:	4618      	mov	r0, r3
 802a9b2:	3710      	adds	r7, #16
 802a9b4:	46bd      	mov	sp, r7
 802a9b6:	bd80      	pop	{r7, pc}
 802a9b8:	20020104 	.word	0x20020104

0802a9bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 802a9bc:	b580      	push	{r7, lr}
 802a9be:	b084      	sub	sp, #16
 802a9c0:	af00      	add	r7, sp, #0
 802a9c2:	4603      	mov	r3, r0
 802a9c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 802a9c6:	2300      	movs	r3, #0
 802a9c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 802a9ca:	79fb      	ldrb	r3, [r7, #7]
 802a9cc:	4a0d      	ldr	r2, [pc, #52]	; (802aa04 <disk_initialize+0x48>)
 802a9ce:	5cd3      	ldrb	r3, [r2, r3]
 802a9d0:	2b00      	cmp	r3, #0
 802a9d2:	d111      	bne.n	802a9f8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 802a9d4:	79fb      	ldrb	r3, [r7, #7]
 802a9d6:	4a0b      	ldr	r2, [pc, #44]	; (802aa04 <disk_initialize+0x48>)
 802a9d8:	2101      	movs	r1, #1
 802a9da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 802a9dc:	79fb      	ldrb	r3, [r7, #7]
 802a9de:	4a09      	ldr	r2, [pc, #36]	; (802aa04 <disk_initialize+0x48>)
 802a9e0:	009b      	lsls	r3, r3, #2
 802a9e2:	4413      	add	r3, r2
 802a9e4:	685b      	ldr	r3, [r3, #4]
 802a9e6:	681b      	ldr	r3, [r3, #0]
 802a9e8:	79fa      	ldrb	r2, [r7, #7]
 802a9ea:	4906      	ldr	r1, [pc, #24]	; (802aa04 <disk_initialize+0x48>)
 802a9ec:	440a      	add	r2, r1
 802a9ee:	7a12      	ldrb	r2, [r2, #8]
 802a9f0:	4610      	mov	r0, r2
 802a9f2:	4798      	blx	r3
 802a9f4:	4603      	mov	r3, r0
 802a9f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 802a9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 802a9fa:	4618      	mov	r0, r3
 802a9fc:	3710      	adds	r7, #16
 802a9fe:	46bd      	mov	sp, r7
 802aa00:	bd80      	pop	{r7, pc}
 802aa02:	bf00      	nop
 802aa04:	20020104 	.word	0x20020104

0802aa08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 802aa08:	b590      	push	{r4, r7, lr}
 802aa0a:	b087      	sub	sp, #28
 802aa0c:	af00      	add	r7, sp, #0
 802aa0e:	60b9      	str	r1, [r7, #8]
 802aa10:	607a      	str	r2, [r7, #4]
 802aa12:	603b      	str	r3, [r7, #0]
 802aa14:	4603      	mov	r3, r0
 802aa16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 802aa18:	7bfb      	ldrb	r3, [r7, #15]
 802aa1a:	4a0a      	ldr	r2, [pc, #40]	; (802aa44 <disk_read+0x3c>)
 802aa1c:	009b      	lsls	r3, r3, #2
 802aa1e:	4413      	add	r3, r2
 802aa20:	685b      	ldr	r3, [r3, #4]
 802aa22:	689c      	ldr	r4, [r3, #8]
 802aa24:	7bfb      	ldrb	r3, [r7, #15]
 802aa26:	4a07      	ldr	r2, [pc, #28]	; (802aa44 <disk_read+0x3c>)
 802aa28:	4413      	add	r3, r2
 802aa2a:	7a18      	ldrb	r0, [r3, #8]
 802aa2c:	683b      	ldr	r3, [r7, #0]
 802aa2e:	687a      	ldr	r2, [r7, #4]
 802aa30:	68b9      	ldr	r1, [r7, #8]
 802aa32:	47a0      	blx	r4
 802aa34:	4603      	mov	r3, r0
 802aa36:	75fb      	strb	r3, [r7, #23]
  return res;
 802aa38:	7dfb      	ldrb	r3, [r7, #23]
}
 802aa3a:	4618      	mov	r0, r3
 802aa3c:	371c      	adds	r7, #28
 802aa3e:	46bd      	mov	sp, r7
 802aa40:	bd90      	pop	{r4, r7, pc}
 802aa42:	bf00      	nop
 802aa44:	20020104 	.word	0x20020104

0802aa48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 802aa48:	b590      	push	{r4, r7, lr}
 802aa4a:	b087      	sub	sp, #28
 802aa4c:	af00      	add	r7, sp, #0
 802aa4e:	60b9      	str	r1, [r7, #8]
 802aa50:	607a      	str	r2, [r7, #4]
 802aa52:	603b      	str	r3, [r7, #0]
 802aa54:	4603      	mov	r3, r0
 802aa56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 802aa58:	7bfb      	ldrb	r3, [r7, #15]
 802aa5a:	4a0a      	ldr	r2, [pc, #40]	; (802aa84 <disk_write+0x3c>)
 802aa5c:	009b      	lsls	r3, r3, #2
 802aa5e:	4413      	add	r3, r2
 802aa60:	685b      	ldr	r3, [r3, #4]
 802aa62:	68dc      	ldr	r4, [r3, #12]
 802aa64:	7bfb      	ldrb	r3, [r7, #15]
 802aa66:	4a07      	ldr	r2, [pc, #28]	; (802aa84 <disk_write+0x3c>)
 802aa68:	4413      	add	r3, r2
 802aa6a:	7a18      	ldrb	r0, [r3, #8]
 802aa6c:	683b      	ldr	r3, [r7, #0]
 802aa6e:	687a      	ldr	r2, [r7, #4]
 802aa70:	68b9      	ldr	r1, [r7, #8]
 802aa72:	47a0      	blx	r4
 802aa74:	4603      	mov	r3, r0
 802aa76:	75fb      	strb	r3, [r7, #23]
  return res;
 802aa78:	7dfb      	ldrb	r3, [r7, #23]
}
 802aa7a:	4618      	mov	r0, r3
 802aa7c:	371c      	adds	r7, #28
 802aa7e:	46bd      	mov	sp, r7
 802aa80:	bd90      	pop	{r4, r7, pc}
 802aa82:	bf00      	nop
 802aa84:	20020104 	.word	0x20020104

0802aa88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 802aa88:	b580      	push	{r7, lr}
 802aa8a:	b084      	sub	sp, #16
 802aa8c:	af00      	add	r7, sp, #0
 802aa8e:	4603      	mov	r3, r0
 802aa90:	603a      	str	r2, [r7, #0]
 802aa92:	71fb      	strb	r3, [r7, #7]
 802aa94:	460b      	mov	r3, r1
 802aa96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 802aa98:	79fb      	ldrb	r3, [r7, #7]
 802aa9a:	4a09      	ldr	r2, [pc, #36]	; (802aac0 <disk_ioctl+0x38>)
 802aa9c:	009b      	lsls	r3, r3, #2
 802aa9e:	4413      	add	r3, r2
 802aaa0:	685b      	ldr	r3, [r3, #4]
 802aaa2:	691b      	ldr	r3, [r3, #16]
 802aaa4:	79fa      	ldrb	r2, [r7, #7]
 802aaa6:	4906      	ldr	r1, [pc, #24]	; (802aac0 <disk_ioctl+0x38>)
 802aaa8:	440a      	add	r2, r1
 802aaaa:	7a10      	ldrb	r0, [r2, #8]
 802aaac:	79b9      	ldrb	r1, [r7, #6]
 802aaae:	683a      	ldr	r2, [r7, #0]
 802aab0:	4798      	blx	r3
 802aab2:	4603      	mov	r3, r0
 802aab4:	73fb      	strb	r3, [r7, #15]
  return res;
 802aab6:	7bfb      	ldrb	r3, [r7, #15]
}
 802aab8:	4618      	mov	r0, r3
 802aaba:	3710      	adds	r7, #16
 802aabc:	46bd      	mov	sp, r7
 802aabe:	bd80      	pop	{r7, pc}
 802aac0:	20020104 	.word	0x20020104

0802aac4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 802aac4:	b480      	push	{r7}
 802aac6:	b085      	sub	sp, #20
 802aac8:	af00      	add	r7, sp, #0
 802aaca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 802aacc:	687b      	ldr	r3, [r7, #4]
 802aace:	3301      	adds	r3, #1
 802aad0:	781b      	ldrb	r3, [r3, #0]
 802aad2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 802aad4:	89fb      	ldrh	r3, [r7, #14]
 802aad6:	021b      	lsls	r3, r3, #8
 802aad8:	b21a      	sxth	r2, r3
 802aada:	687b      	ldr	r3, [r7, #4]
 802aadc:	781b      	ldrb	r3, [r3, #0]
 802aade:	b21b      	sxth	r3, r3
 802aae0:	4313      	orrs	r3, r2
 802aae2:	b21b      	sxth	r3, r3
 802aae4:	81fb      	strh	r3, [r7, #14]
	return rv;
 802aae6:	89fb      	ldrh	r3, [r7, #14]
}
 802aae8:	4618      	mov	r0, r3
 802aaea:	3714      	adds	r7, #20
 802aaec:	46bd      	mov	sp, r7
 802aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aaf2:	4770      	bx	lr

0802aaf4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 802aaf4:	b480      	push	{r7}
 802aaf6:	b085      	sub	sp, #20
 802aaf8:	af00      	add	r7, sp, #0
 802aafa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 802aafc:	687b      	ldr	r3, [r7, #4]
 802aafe:	3303      	adds	r3, #3
 802ab00:	781b      	ldrb	r3, [r3, #0]
 802ab02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 802ab04:	68fb      	ldr	r3, [r7, #12]
 802ab06:	021b      	lsls	r3, r3, #8
 802ab08:	687a      	ldr	r2, [r7, #4]
 802ab0a:	3202      	adds	r2, #2
 802ab0c:	7812      	ldrb	r2, [r2, #0]
 802ab0e:	4313      	orrs	r3, r2
 802ab10:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 802ab12:	68fb      	ldr	r3, [r7, #12]
 802ab14:	021b      	lsls	r3, r3, #8
 802ab16:	687a      	ldr	r2, [r7, #4]
 802ab18:	3201      	adds	r2, #1
 802ab1a:	7812      	ldrb	r2, [r2, #0]
 802ab1c:	4313      	orrs	r3, r2
 802ab1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 802ab20:	68fb      	ldr	r3, [r7, #12]
 802ab22:	021b      	lsls	r3, r3, #8
 802ab24:	687a      	ldr	r2, [r7, #4]
 802ab26:	7812      	ldrb	r2, [r2, #0]
 802ab28:	4313      	orrs	r3, r2
 802ab2a:	60fb      	str	r3, [r7, #12]
	return rv;
 802ab2c:	68fb      	ldr	r3, [r7, #12]
}
 802ab2e:	4618      	mov	r0, r3
 802ab30:	3714      	adds	r7, #20
 802ab32:	46bd      	mov	sp, r7
 802ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab38:	4770      	bx	lr

0802ab3a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 802ab3a:	b480      	push	{r7}
 802ab3c:	b083      	sub	sp, #12
 802ab3e:	af00      	add	r7, sp, #0
 802ab40:	6078      	str	r0, [r7, #4]
 802ab42:	460b      	mov	r3, r1
 802ab44:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 802ab46:	687b      	ldr	r3, [r7, #4]
 802ab48:	1c5a      	adds	r2, r3, #1
 802ab4a:	607a      	str	r2, [r7, #4]
 802ab4c:	887a      	ldrh	r2, [r7, #2]
 802ab4e:	b2d2      	uxtb	r2, r2
 802ab50:	701a      	strb	r2, [r3, #0]
 802ab52:	887b      	ldrh	r3, [r7, #2]
 802ab54:	0a1b      	lsrs	r3, r3, #8
 802ab56:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 802ab58:	687b      	ldr	r3, [r7, #4]
 802ab5a:	1c5a      	adds	r2, r3, #1
 802ab5c:	607a      	str	r2, [r7, #4]
 802ab5e:	887a      	ldrh	r2, [r7, #2]
 802ab60:	b2d2      	uxtb	r2, r2
 802ab62:	701a      	strb	r2, [r3, #0]
}
 802ab64:	bf00      	nop
 802ab66:	370c      	adds	r7, #12
 802ab68:	46bd      	mov	sp, r7
 802ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab6e:	4770      	bx	lr

0802ab70 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 802ab70:	b480      	push	{r7}
 802ab72:	b083      	sub	sp, #12
 802ab74:	af00      	add	r7, sp, #0
 802ab76:	6078      	str	r0, [r7, #4]
 802ab78:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802ab7a:	687b      	ldr	r3, [r7, #4]
 802ab7c:	1c5a      	adds	r2, r3, #1
 802ab7e:	607a      	str	r2, [r7, #4]
 802ab80:	683a      	ldr	r2, [r7, #0]
 802ab82:	b2d2      	uxtb	r2, r2
 802ab84:	701a      	strb	r2, [r3, #0]
 802ab86:	683b      	ldr	r3, [r7, #0]
 802ab88:	0a1b      	lsrs	r3, r3, #8
 802ab8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802ab8c:	687b      	ldr	r3, [r7, #4]
 802ab8e:	1c5a      	adds	r2, r3, #1
 802ab90:	607a      	str	r2, [r7, #4]
 802ab92:	683a      	ldr	r2, [r7, #0]
 802ab94:	b2d2      	uxtb	r2, r2
 802ab96:	701a      	strb	r2, [r3, #0]
 802ab98:	683b      	ldr	r3, [r7, #0]
 802ab9a:	0a1b      	lsrs	r3, r3, #8
 802ab9c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802ab9e:	687b      	ldr	r3, [r7, #4]
 802aba0:	1c5a      	adds	r2, r3, #1
 802aba2:	607a      	str	r2, [r7, #4]
 802aba4:	683a      	ldr	r2, [r7, #0]
 802aba6:	b2d2      	uxtb	r2, r2
 802aba8:	701a      	strb	r2, [r3, #0]
 802abaa:	683b      	ldr	r3, [r7, #0]
 802abac:	0a1b      	lsrs	r3, r3, #8
 802abae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 802abb0:	687b      	ldr	r3, [r7, #4]
 802abb2:	1c5a      	adds	r2, r3, #1
 802abb4:	607a      	str	r2, [r7, #4]
 802abb6:	683a      	ldr	r2, [r7, #0]
 802abb8:	b2d2      	uxtb	r2, r2
 802abba:	701a      	strb	r2, [r3, #0]
}
 802abbc:	bf00      	nop
 802abbe:	370c      	adds	r7, #12
 802abc0:	46bd      	mov	sp, r7
 802abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abc6:	4770      	bx	lr

0802abc8 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 802abc8:	b480      	push	{r7}
 802abca:	b087      	sub	sp, #28
 802abcc:	af00      	add	r7, sp, #0
 802abce:	60f8      	str	r0, [r7, #12]
 802abd0:	60b9      	str	r1, [r7, #8]
 802abd2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 802abd4:	68fb      	ldr	r3, [r7, #12]
 802abd6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 802abd8:	697b      	ldr	r3, [r7, #20]
 802abda:	1c5a      	adds	r2, r3, #1
 802abdc:	617a      	str	r2, [r7, #20]
 802abde:	68ba      	ldr	r2, [r7, #8]
 802abe0:	b2d2      	uxtb	r2, r2
 802abe2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 802abe4:	687b      	ldr	r3, [r7, #4]
 802abe6:	3b01      	subs	r3, #1
 802abe8:	607b      	str	r3, [r7, #4]
 802abea:	687b      	ldr	r3, [r7, #4]
 802abec:	2b00      	cmp	r3, #0
 802abee:	d1f3      	bne.n	802abd8 <mem_set+0x10>
}
 802abf0:	bf00      	nop
 802abf2:	371c      	adds	r7, #28
 802abf4:	46bd      	mov	sp, r7
 802abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abfa:	4770      	bx	lr

0802abfc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 802abfc:	b480      	push	{r7}
 802abfe:	b089      	sub	sp, #36	; 0x24
 802ac00:	af00      	add	r7, sp, #0
 802ac02:	60f8      	str	r0, [r7, #12]
 802ac04:	60b9      	str	r1, [r7, #8]
 802ac06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 802ac08:	68fb      	ldr	r3, [r7, #12]
 802ac0a:	61fb      	str	r3, [r7, #28]
 802ac0c:	68bb      	ldr	r3, [r7, #8]
 802ac0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 802ac10:	2300      	movs	r3, #0
 802ac12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 802ac14:	69fb      	ldr	r3, [r7, #28]
 802ac16:	1c5a      	adds	r2, r3, #1
 802ac18:	61fa      	str	r2, [r7, #28]
 802ac1a:	781b      	ldrb	r3, [r3, #0]
 802ac1c:	4619      	mov	r1, r3
 802ac1e:	69bb      	ldr	r3, [r7, #24]
 802ac20:	1c5a      	adds	r2, r3, #1
 802ac22:	61ba      	str	r2, [r7, #24]
 802ac24:	781b      	ldrb	r3, [r3, #0]
 802ac26:	1acb      	subs	r3, r1, r3
 802ac28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 802ac2a:	687b      	ldr	r3, [r7, #4]
 802ac2c:	3b01      	subs	r3, #1
 802ac2e:	607b      	str	r3, [r7, #4]
 802ac30:	687b      	ldr	r3, [r7, #4]
 802ac32:	2b00      	cmp	r3, #0
 802ac34:	d002      	beq.n	802ac3c <mem_cmp+0x40>
 802ac36:	697b      	ldr	r3, [r7, #20]
 802ac38:	2b00      	cmp	r3, #0
 802ac3a:	d0eb      	beq.n	802ac14 <mem_cmp+0x18>

	return r;
 802ac3c:	697b      	ldr	r3, [r7, #20]
}
 802ac3e:	4618      	mov	r0, r3
 802ac40:	3724      	adds	r7, #36	; 0x24
 802ac42:	46bd      	mov	sp, r7
 802ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac48:	4770      	bx	lr

0802ac4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 802ac4a:	b480      	push	{r7}
 802ac4c:	b083      	sub	sp, #12
 802ac4e:	af00      	add	r7, sp, #0
 802ac50:	6078      	str	r0, [r7, #4]
 802ac52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 802ac54:	e002      	b.n	802ac5c <chk_chr+0x12>
 802ac56:	687b      	ldr	r3, [r7, #4]
 802ac58:	3301      	adds	r3, #1
 802ac5a:	607b      	str	r3, [r7, #4]
 802ac5c:	687b      	ldr	r3, [r7, #4]
 802ac5e:	781b      	ldrb	r3, [r3, #0]
 802ac60:	2b00      	cmp	r3, #0
 802ac62:	d005      	beq.n	802ac70 <chk_chr+0x26>
 802ac64:	687b      	ldr	r3, [r7, #4]
 802ac66:	781b      	ldrb	r3, [r3, #0]
 802ac68:	461a      	mov	r2, r3
 802ac6a:	683b      	ldr	r3, [r7, #0]
 802ac6c:	4293      	cmp	r3, r2
 802ac6e:	d1f2      	bne.n	802ac56 <chk_chr+0xc>
	return *str;
 802ac70:	687b      	ldr	r3, [r7, #4]
 802ac72:	781b      	ldrb	r3, [r3, #0]
}
 802ac74:	4618      	mov	r0, r3
 802ac76:	370c      	adds	r7, #12
 802ac78:	46bd      	mov	sp, r7
 802ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac7e:	4770      	bx	lr

0802ac80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 802ac80:	b480      	push	{r7}
 802ac82:	b085      	sub	sp, #20
 802ac84:	af00      	add	r7, sp, #0
 802ac86:	6078      	str	r0, [r7, #4]
 802ac88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 802ac8a:	2300      	movs	r3, #0
 802ac8c:	60fb      	str	r3, [r7, #12]
 802ac8e:	e01f      	b.n	802acd0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 802ac90:	4a41      	ldr	r2, [pc, #260]	; (802ad98 <inc_lock+0x118>)
 802ac92:	68fb      	ldr	r3, [r7, #12]
 802ac94:	011b      	lsls	r3, r3, #4
 802ac96:	4413      	add	r3, r2
 802ac98:	681a      	ldr	r2, [r3, #0]
 802ac9a:	687b      	ldr	r3, [r7, #4]
 802ac9c:	681b      	ldr	r3, [r3, #0]
 802ac9e:	429a      	cmp	r2, r3
 802aca0:	d113      	bne.n	802acca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 802aca2:	4a3d      	ldr	r2, [pc, #244]	; (802ad98 <inc_lock+0x118>)
 802aca4:	68fb      	ldr	r3, [r7, #12]
 802aca6:	011b      	lsls	r3, r3, #4
 802aca8:	4413      	add	r3, r2
 802acaa:	3304      	adds	r3, #4
 802acac:	681a      	ldr	r2, [r3, #0]
 802acae:	687b      	ldr	r3, [r7, #4]
 802acb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 802acb2:	429a      	cmp	r2, r3
 802acb4:	d109      	bne.n	802acca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 802acb6:	4a38      	ldr	r2, [pc, #224]	; (802ad98 <inc_lock+0x118>)
 802acb8:	68fb      	ldr	r3, [r7, #12]
 802acba:	011b      	lsls	r3, r3, #4
 802acbc:	4413      	add	r3, r2
 802acbe:	3308      	adds	r3, #8
 802acc0:	681a      	ldr	r2, [r3, #0]
 802acc2:	687b      	ldr	r3, [r7, #4]
 802acc4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 802acc6:	429a      	cmp	r2, r3
 802acc8:	d006      	beq.n	802acd8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 802acca:	68fb      	ldr	r3, [r7, #12]
 802accc:	3301      	adds	r3, #1
 802acce:	60fb      	str	r3, [r7, #12]
 802acd0:	68fb      	ldr	r3, [r7, #12]
 802acd2:	2b01      	cmp	r3, #1
 802acd4:	d9dc      	bls.n	802ac90 <inc_lock+0x10>
 802acd6:	e000      	b.n	802acda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 802acd8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 802acda:	68fb      	ldr	r3, [r7, #12]
 802acdc:	2b02      	cmp	r3, #2
 802acde:	d132      	bne.n	802ad46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 802ace0:	2300      	movs	r3, #0
 802ace2:	60fb      	str	r3, [r7, #12]
 802ace4:	e002      	b.n	802acec <inc_lock+0x6c>
 802ace6:	68fb      	ldr	r3, [r7, #12]
 802ace8:	3301      	adds	r3, #1
 802acea:	60fb      	str	r3, [r7, #12]
 802acec:	68fb      	ldr	r3, [r7, #12]
 802acee:	2b01      	cmp	r3, #1
 802acf0:	d806      	bhi.n	802ad00 <inc_lock+0x80>
 802acf2:	4a29      	ldr	r2, [pc, #164]	; (802ad98 <inc_lock+0x118>)
 802acf4:	68fb      	ldr	r3, [r7, #12]
 802acf6:	011b      	lsls	r3, r3, #4
 802acf8:	4413      	add	r3, r2
 802acfa:	681b      	ldr	r3, [r3, #0]
 802acfc:	2b00      	cmp	r3, #0
 802acfe:	d1f2      	bne.n	802ace6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 802ad00:	68fb      	ldr	r3, [r7, #12]
 802ad02:	2b02      	cmp	r3, #2
 802ad04:	d101      	bne.n	802ad0a <inc_lock+0x8a>
 802ad06:	2300      	movs	r3, #0
 802ad08:	e040      	b.n	802ad8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 802ad0a:	687b      	ldr	r3, [r7, #4]
 802ad0c:	681a      	ldr	r2, [r3, #0]
 802ad0e:	4922      	ldr	r1, [pc, #136]	; (802ad98 <inc_lock+0x118>)
 802ad10:	68fb      	ldr	r3, [r7, #12]
 802ad12:	011b      	lsls	r3, r3, #4
 802ad14:	440b      	add	r3, r1
 802ad16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 802ad18:	687b      	ldr	r3, [r7, #4]
 802ad1a:	689a      	ldr	r2, [r3, #8]
 802ad1c:	491e      	ldr	r1, [pc, #120]	; (802ad98 <inc_lock+0x118>)
 802ad1e:	68fb      	ldr	r3, [r7, #12]
 802ad20:	011b      	lsls	r3, r3, #4
 802ad22:	440b      	add	r3, r1
 802ad24:	3304      	adds	r3, #4
 802ad26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 802ad28:	687b      	ldr	r3, [r7, #4]
 802ad2a:	695a      	ldr	r2, [r3, #20]
 802ad2c:	491a      	ldr	r1, [pc, #104]	; (802ad98 <inc_lock+0x118>)
 802ad2e:	68fb      	ldr	r3, [r7, #12]
 802ad30:	011b      	lsls	r3, r3, #4
 802ad32:	440b      	add	r3, r1
 802ad34:	3308      	adds	r3, #8
 802ad36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 802ad38:	4a17      	ldr	r2, [pc, #92]	; (802ad98 <inc_lock+0x118>)
 802ad3a:	68fb      	ldr	r3, [r7, #12]
 802ad3c:	011b      	lsls	r3, r3, #4
 802ad3e:	4413      	add	r3, r2
 802ad40:	330c      	adds	r3, #12
 802ad42:	2200      	movs	r2, #0
 802ad44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 802ad46:	683b      	ldr	r3, [r7, #0]
 802ad48:	2b00      	cmp	r3, #0
 802ad4a:	d009      	beq.n	802ad60 <inc_lock+0xe0>
 802ad4c:	4a12      	ldr	r2, [pc, #72]	; (802ad98 <inc_lock+0x118>)
 802ad4e:	68fb      	ldr	r3, [r7, #12]
 802ad50:	011b      	lsls	r3, r3, #4
 802ad52:	4413      	add	r3, r2
 802ad54:	330c      	adds	r3, #12
 802ad56:	881b      	ldrh	r3, [r3, #0]
 802ad58:	2b00      	cmp	r3, #0
 802ad5a:	d001      	beq.n	802ad60 <inc_lock+0xe0>
 802ad5c:	2300      	movs	r3, #0
 802ad5e:	e015      	b.n	802ad8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 802ad60:	683b      	ldr	r3, [r7, #0]
 802ad62:	2b00      	cmp	r3, #0
 802ad64:	d108      	bne.n	802ad78 <inc_lock+0xf8>
 802ad66:	4a0c      	ldr	r2, [pc, #48]	; (802ad98 <inc_lock+0x118>)
 802ad68:	68fb      	ldr	r3, [r7, #12]
 802ad6a:	011b      	lsls	r3, r3, #4
 802ad6c:	4413      	add	r3, r2
 802ad6e:	330c      	adds	r3, #12
 802ad70:	881b      	ldrh	r3, [r3, #0]
 802ad72:	3301      	adds	r3, #1
 802ad74:	b29a      	uxth	r2, r3
 802ad76:	e001      	b.n	802ad7c <inc_lock+0xfc>
 802ad78:	f44f 7280 	mov.w	r2, #256	; 0x100
 802ad7c:	4906      	ldr	r1, [pc, #24]	; (802ad98 <inc_lock+0x118>)
 802ad7e:	68fb      	ldr	r3, [r7, #12]
 802ad80:	011b      	lsls	r3, r3, #4
 802ad82:	440b      	add	r3, r1
 802ad84:	330c      	adds	r3, #12
 802ad86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 802ad88:	68fb      	ldr	r3, [r7, #12]
 802ad8a:	3301      	adds	r3, #1
}
 802ad8c:	4618      	mov	r0, r3
 802ad8e:	3714      	adds	r7, #20
 802ad90:	46bd      	mov	sp, r7
 802ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad96:	4770      	bx	lr
 802ad98:	200200e4 	.word	0x200200e4

0802ad9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 802ad9c:	b480      	push	{r7}
 802ad9e:	b085      	sub	sp, #20
 802ada0:	af00      	add	r7, sp, #0
 802ada2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 802ada4:	2300      	movs	r3, #0
 802ada6:	60fb      	str	r3, [r7, #12]
 802ada8:	e010      	b.n	802adcc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 802adaa:	4a0d      	ldr	r2, [pc, #52]	; (802ade0 <clear_lock+0x44>)
 802adac:	68fb      	ldr	r3, [r7, #12]
 802adae:	011b      	lsls	r3, r3, #4
 802adb0:	4413      	add	r3, r2
 802adb2:	681b      	ldr	r3, [r3, #0]
 802adb4:	687a      	ldr	r2, [r7, #4]
 802adb6:	429a      	cmp	r2, r3
 802adb8:	d105      	bne.n	802adc6 <clear_lock+0x2a>
 802adba:	4a09      	ldr	r2, [pc, #36]	; (802ade0 <clear_lock+0x44>)
 802adbc:	68fb      	ldr	r3, [r7, #12]
 802adbe:	011b      	lsls	r3, r3, #4
 802adc0:	4413      	add	r3, r2
 802adc2:	2200      	movs	r2, #0
 802adc4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 802adc6:	68fb      	ldr	r3, [r7, #12]
 802adc8:	3301      	adds	r3, #1
 802adca:	60fb      	str	r3, [r7, #12]
 802adcc:	68fb      	ldr	r3, [r7, #12]
 802adce:	2b01      	cmp	r3, #1
 802add0:	d9eb      	bls.n	802adaa <clear_lock+0xe>
	}
}
 802add2:	bf00      	nop
 802add4:	3714      	adds	r7, #20
 802add6:	46bd      	mov	sp, r7
 802add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802addc:	4770      	bx	lr
 802adde:	bf00      	nop
 802ade0:	200200e4 	.word	0x200200e4

0802ade4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 802ade4:	b580      	push	{r7, lr}
 802ade6:	b086      	sub	sp, #24
 802ade8:	af00      	add	r7, sp, #0
 802adea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 802adec:	2300      	movs	r3, #0
 802adee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 802adf0:	687b      	ldr	r3, [r7, #4]
 802adf2:	78db      	ldrb	r3, [r3, #3]
 802adf4:	2b00      	cmp	r3, #0
 802adf6:	d034      	beq.n	802ae62 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 802adf8:	687b      	ldr	r3, [r7, #4]
 802adfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802adfc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 802adfe:	687b      	ldr	r3, [r7, #4]
 802ae00:	7858      	ldrb	r0, [r3, #1]
 802ae02:	687b      	ldr	r3, [r7, #4]
 802ae04:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802ae08:	2301      	movs	r3, #1
 802ae0a:	697a      	ldr	r2, [r7, #20]
 802ae0c:	f7ff fe1c 	bl	802aa48 <disk_write>
 802ae10:	4603      	mov	r3, r0
 802ae12:	2b00      	cmp	r3, #0
 802ae14:	d002      	beq.n	802ae1c <sync_window+0x38>
			res = FR_DISK_ERR;
 802ae16:	2301      	movs	r3, #1
 802ae18:	73fb      	strb	r3, [r7, #15]
 802ae1a:	e022      	b.n	802ae62 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 802ae1c:	687b      	ldr	r3, [r7, #4]
 802ae1e:	2200      	movs	r2, #0
 802ae20:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 802ae22:	687b      	ldr	r3, [r7, #4]
 802ae24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ae26:	697a      	ldr	r2, [r7, #20]
 802ae28:	1ad2      	subs	r2, r2, r3
 802ae2a:	687b      	ldr	r3, [r7, #4]
 802ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ae2e:	429a      	cmp	r2, r3
 802ae30:	d217      	bcs.n	802ae62 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 802ae32:	687b      	ldr	r3, [r7, #4]
 802ae34:	789b      	ldrb	r3, [r3, #2]
 802ae36:	613b      	str	r3, [r7, #16]
 802ae38:	e010      	b.n	802ae5c <sync_window+0x78>
					wsect += fs->fsize;
 802ae3a:	687b      	ldr	r3, [r7, #4]
 802ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ae3e:	697a      	ldr	r2, [r7, #20]
 802ae40:	4413      	add	r3, r2
 802ae42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 802ae44:	687b      	ldr	r3, [r7, #4]
 802ae46:	7858      	ldrb	r0, [r3, #1]
 802ae48:	687b      	ldr	r3, [r7, #4]
 802ae4a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802ae4e:	2301      	movs	r3, #1
 802ae50:	697a      	ldr	r2, [r7, #20]
 802ae52:	f7ff fdf9 	bl	802aa48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 802ae56:	693b      	ldr	r3, [r7, #16]
 802ae58:	3b01      	subs	r3, #1
 802ae5a:	613b      	str	r3, [r7, #16]
 802ae5c:	693b      	ldr	r3, [r7, #16]
 802ae5e:	2b01      	cmp	r3, #1
 802ae60:	d8eb      	bhi.n	802ae3a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 802ae62:	7bfb      	ldrb	r3, [r7, #15]
}
 802ae64:	4618      	mov	r0, r3
 802ae66:	3718      	adds	r7, #24
 802ae68:	46bd      	mov	sp, r7
 802ae6a:	bd80      	pop	{r7, pc}

0802ae6c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 802ae6c:	b580      	push	{r7, lr}
 802ae6e:	b084      	sub	sp, #16
 802ae70:	af00      	add	r7, sp, #0
 802ae72:	6078      	str	r0, [r7, #4]
 802ae74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 802ae76:	2300      	movs	r3, #0
 802ae78:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 802ae7a:	687b      	ldr	r3, [r7, #4]
 802ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ae7e:	683a      	ldr	r2, [r7, #0]
 802ae80:	429a      	cmp	r2, r3
 802ae82:	d01b      	beq.n	802aebc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 802ae84:	6878      	ldr	r0, [r7, #4]
 802ae86:	f7ff ffad 	bl	802ade4 <sync_window>
 802ae8a:	4603      	mov	r3, r0
 802ae8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 802ae8e:	7bfb      	ldrb	r3, [r7, #15]
 802ae90:	2b00      	cmp	r3, #0
 802ae92:	d113      	bne.n	802aebc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 802ae94:	687b      	ldr	r3, [r7, #4]
 802ae96:	7858      	ldrb	r0, [r3, #1]
 802ae98:	687b      	ldr	r3, [r7, #4]
 802ae9a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802ae9e:	2301      	movs	r3, #1
 802aea0:	683a      	ldr	r2, [r7, #0]
 802aea2:	f7ff fdb1 	bl	802aa08 <disk_read>
 802aea6:	4603      	mov	r3, r0
 802aea8:	2b00      	cmp	r3, #0
 802aeaa:	d004      	beq.n	802aeb6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 802aeac:	f04f 33ff 	mov.w	r3, #4294967295
 802aeb0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 802aeb2:	2301      	movs	r3, #1
 802aeb4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 802aeb6:	687b      	ldr	r3, [r7, #4]
 802aeb8:	683a      	ldr	r2, [r7, #0]
 802aeba:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 802aebc:	7bfb      	ldrb	r3, [r7, #15]
}
 802aebe:	4618      	mov	r0, r3
 802aec0:	3710      	adds	r7, #16
 802aec2:	46bd      	mov	sp, r7
 802aec4:	bd80      	pop	{r7, pc}

0802aec6 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 802aec6:	b480      	push	{r7}
 802aec8:	b083      	sub	sp, #12
 802aeca:	af00      	add	r7, sp, #0
 802aecc:	6078      	str	r0, [r7, #4]
 802aece:	6039      	str	r1, [r7, #0]
	clst -= 2;
 802aed0:	683b      	ldr	r3, [r7, #0]
 802aed2:	3b02      	subs	r3, #2
 802aed4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 802aed6:	687b      	ldr	r3, [r7, #4]
 802aed8:	6a1b      	ldr	r3, [r3, #32]
 802aeda:	3b02      	subs	r3, #2
 802aedc:	683a      	ldr	r2, [r7, #0]
 802aede:	429a      	cmp	r2, r3
 802aee0:	d301      	bcc.n	802aee6 <clust2sect+0x20>
 802aee2:	2300      	movs	r3, #0
 802aee4:	e008      	b.n	802aef8 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 802aee6:	687b      	ldr	r3, [r7, #4]
 802aee8:	895b      	ldrh	r3, [r3, #10]
 802aeea:	461a      	mov	r2, r3
 802aeec:	683b      	ldr	r3, [r7, #0]
 802aeee:	fb03 f202 	mul.w	r2, r3, r2
 802aef2:	687b      	ldr	r3, [r7, #4]
 802aef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802aef6:	4413      	add	r3, r2
}
 802aef8:	4618      	mov	r0, r3
 802aefa:	370c      	adds	r7, #12
 802aefc:	46bd      	mov	sp, r7
 802aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af02:	4770      	bx	lr

0802af04 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 802af04:	b580      	push	{r7, lr}
 802af06:	b086      	sub	sp, #24
 802af08:	af00      	add	r7, sp, #0
 802af0a:	6078      	str	r0, [r7, #4]
 802af0c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 802af0e:	687b      	ldr	r3, [r7, #4]
 802af10:	681b      	ldr	r3, [r3, #0]
 802af12:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 802af14:	683b      	ldr	r3, [r7, #0]
 802af16:	2b01      	cmp	r3, #1
 802af18:	d904      	bls.n	802af24 <get_fat+0x20>
 802af1a:	693b      	ldr	r3, [r7, #16]
 802af1c:	6a1b      	ldr	r3, [r3, #32]
 802af1e:	683a      	ldr	r2, [r7, #0]
 802af20:	429a      	cmp	r2, r3
 802af22:	d302      	bcc.n	802af2a <get_fat+0x26>
		val = 1;	/* Internal error */
 802af24:	2301      	movs	r3, #1
 802af26:	617b      	str	r3, [r7, #20]
 802af28:	e0b7      	b.n	802b09a <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 802af2a:	f04f 33ff 	mov.w	r3, #4294967295
 802af2e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 802af30:	693b      	ldr	r3, [r7, #16]
 802af32:	781b      	ldrb	r3, [r3, #0]
 802af34:	2b02      	cmp	r3, #2
 802af36:	d05a      	beq.n	802afee <get_fat+0xea>
 802af38:	2b03      	cmp	r3, #3
 802af3a:	d07d      	beq.n	802b038 <get_fat+0x134>
 802af3c:	2b01      	cmp	r3, #1
 802af3e:	f040 80a2 	bne.w	802b086 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 802af42:	683b      	ldr	r3, [r7, #0]
 802af44:	60fb      	str	r3, [r7, #12]
 802af46:	68fb      	ldr	r3, [r7, #12]
 802af48:	085b      	lsrs	r3, r3, #1
 802af4a:	68fa      	ldr	r2, [r7, #12]
 802af4c:	4413      	add	r3, r2
 802af4e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802af50:	693b      	ldr	r3, [r7, #16]
 802af52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802af54:	693b      	ldr	r3, [r7, #16]
 802af56:	899b      	ldrh	r3, [r3, #12]
 802af58:	4619      	mov	r1, r3
 802af5a:	68fb      	ldr	r3, [r7, #12]
 802af5c:	fbb3 f3f1 	udiv	r3, r3, r1
 802af60:	4413      	add	r3, r2
 802af62:	4619      	mov	r1, r3
 802af64:	6938      	ldr	r0, [r7, #16]
 802af66:	f7ff ff81 	bl	802ae6c <move_window>
 802af6a:	4603      	mov	r3, r0
 802af6c:	2b00      	cmp	r3, #0
 802af6e:	f040 808d 	bne.w	802b08c <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 802af72:	68fb      	ldr	r3, [r7, #12]
 802af74:	1c5a      	adds	r2, r3, #1
 802af76:	60fa      	str	r2, [r7, #12]
 802af78:	693a      	ldr	r2, [r7, #16]
 802af7a:	8992      	ldrh	r2, [r2, #12]
 802af7c:	fbb3 f1f2 	udiv	r1, r3, r2
 802af80:	fb02 f201 	mul.w	r2, r2, r1
 802af84:	1a9b      	subs	r3, r3, r2
 802af86:	693a      	ldr	r2, [r7, #16]
 802af88:	4413      	add	r3, r2
 802af8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802af8e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802af90:	693b      	ldr	r3, [r7, #16]
 802af92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802af94:	693b      	ldr	r3, [r7, #16]
 802af96:	899b      	ldrh	r3, [r3, #12]
 802af98:	4619      	mov	r1, r3
 802af9a:	68fb      	ldr	r3, [r7, #12]
 802af9c:	fbb3 f3f1 	udiv	r3, r3, r1
 802afa0:	4413      	add	r3, r2
 802afa2:	4619      	mov	r1, r3
 802afa4:	6938      	ldr	r0, [r7, #16]
 802afa6:	f7ff ff61 	bl	802ae6c <move_window>
 802afaa:	4603      	mov	r3, r0
 802afac:	2b00      	cmp	r3, #0
 802afae:	d16f      	bne.n	802b090 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 802afb0:	693b      	ldr	r3, [r7, #16]
 802afb2:	899b      	ldrh	r3, [r3, #12]
 802afb4:	461a      	mov	r2, r3
 802afb6:	68fb      	ldr	r3, [r7, #12]
 802afb8:	fbb3 f1f2 	udiv	r1, r3, r2
 802afbc:	fb02 f201 	mul.w	r2, r2, r1
 802afc0:	1a9b      	subs	r3, r3, r2
 802afc2:	693a      	ldr	r2, [r7, #16]
 802afc4:	4413      	add	r3, r2
 802afc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802afca:	021b      	lsls	r3, r3, #8
 802afcc:	461a      	mov	r2, r3
 802afce:	68bb      	ldr	r3, [r7, #8]
 802afd0:	4313      	orrs	r3, r2
 802afd2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 802afd4:	683b      	ldr	r3, [r7, #0]
 802afd6:	f003 0301 	and.w	r3, r3, #1
 802afda:	2b00      	cmp	r3, #0
 802afdc:	d002      	beq.n	802afe4 <get_fat+0xe0>
 802afde:	68bb      	ldr	r3, [r7, #8]
 802afe0:	091b      	lsrs	r3, r3, #4
 802afe2:	e002      	b.n	802afea <get_fat+0xe6>
 802afe4:	68bb      	ldr	r3, [r7, #8]
 802afe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802afea:	617b      	str	r3, [r7, #20]
			break;
 802afec:	e055      	b.n	802b09a <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 802afee:	693b      	ldr	r3, [r7, #16]
 802aff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802aff2:	693b      	ldr	r3, [r7, #16]
 802aff4:	899b      	ldrh	r3, [r3, #12]
 802aff6:	085b      	lsrs	r3, r3, #1
 802aff8:	b29b      	uxth	r3, r3
 802affa:	4619      	mov	r1, r3
 802affc:	683b      	ldr	r3, [r7, #0]
 802affe:	fbb3 f3f1 	udiv	r3, r3, r1
 802b002:	4413      	add	r3, r2
 802b004:	4619      	mov	r1, r3
 802b006:	6938      	ldr	r0, [r7, #16]
 802b008:	f7ff ff30 	bl	802ae6c <move_window>
 802b00c:	4603      	mov	r3, r0
 802b00e:	2b00      	cmp	r3, #0
 802b010:	d140      	bne.n	802b094 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 802b012:	693b      	ldr	r3, [r7, #16]
 802b014:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b018:	683b      	ldr	r3, [r7, #0]
 802b01a:	005b      	lsls	r3, r3, #1
 802b01c:	693a      	ldr	r2, [r7, #16]
 802b01e:	8992      	ldrh	r2, [r2, #12]
 802b020:	fbb3 f0f2 	udiv	r0, r3, r2
 802b024:	fb02 f200 	mul.w	r2, r2, r0
 802b028:	1a9b      	subs	r3, r3, r2
 802b02a:	440b      	add	r3, r1
 802b02c:	4618      	mov	r0, r3
 802b02e:	f7ff fd49 	bl	802aac4 <ld_word>
 802b032:	4603      	mov	r3, r0
 802b034:	617b      	str	r3, [r7, #20]
			break;
 802b036:	e030      	b.n	802b09a <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 802b038:	693b      	ldr	r3, [r7, #16]
 802b03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b03c:	693b      	ldr	r3, [r7, #16]
 802b03e:	899b      	ldrh	r3, [r3, #12]
 802b040:	089b      	lsrs	r3, r3, #2
 802b042:	b29b      	uxth	r3, r3
 802b044:	4619      	mov	r1, r3
 802b046:	683b      	ldr	r3, [r7, #0]
 802b048:	fbb3 f3f1 	udiv	r3, r3, r1
 802b04c:	4413      	add	r3, r2
 802b04e:	4619      	mov	r1, r3
 802b050:	6938      	ldr	r0, [r7, #16]
 802b052:	f7ff ff0b 	bl	802ae6c <move_window>
 802b056:	4603      	mov	r3, r0
 802b058:	2b00      	cmp	r3, #0
 802b05a:	d11d      	bne.n	802b098 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 802b05c:	693b      	ldr	r3, [r7, #16]
 802b05e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b062:	683b      	ldr	r3, [r7, #0]
 802b064:	009b      	lsls	r3, r3, #2
 802b066:	693a      	ldr	r2, [r7, #16]
 802b068:	8992      	ldrh	r2, [r2, #12]
 802b06a:	fbb3 f0f2 	udiv	r0, r3, r2
 802b06e:	fb02 f200 	mul.w	r2, r2, r0
 802b072:	1a9b      	subs	r3, r3, r2
 802b074:	440b      	add	r3, r1
 802b076:	4618      	mov	r0, r3
 802b078:	f7ff fd3c 	bl	802aaf4 <ld_dword>
 802b07c:	4603      	mov	r3, r0
 802b07e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802b082:	617b      	str	r3, [r7, #20]
			break;
 802b084:	e009      	b.n	802b09a <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 802b086:	2301      	movs	r3, #1
 802b088:	617b      	str	r3, [r7, #20]
 802b08a:	e006      	b.n	802b09a <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802b08c:	bf00      	nop
 802b08e:	e004      	b.n	802b09a <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802b090:	bf00      	nop
 802b092:	e002      	b.n	802b09a <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 802b094:	bf00      	nop
 802b096:	e000      	b.n	802b09a <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 802b098:	bf00      	nop
		}
	}

	return val;
 802b09a:	697b      	ldr	r3, [r7, #20]
}
 802b09c:	4618      	mov	r0, r3
 802b09e:	3718      	adds	r7, #24
 802b0a0:	46bd      	mov	sp, r7
 802b0a2:	bd80      	pop	{r7, pc}

0802b0a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 802b0a4:	b590      	push	{r4, r7, lr}
 802b0a6:	b089      	sub	sp, #36	; 0x24
 802b0a8:	af00      	add	r7, sp, #0
 802b0aa:	60f8      	str	r0, [r7, #12]
 802b0ac:	60b9      	str	r1, [r7, #8]
 802b0ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 802b0b0:	2302      	movs	r3, #2
 802b0b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 802b0b4:	68bb      	ldr	r3, [r7, #8]
 802b0b6:	2b01      	cmp	r3, #1
 802b0b8:	f240 8106 	bls.w	802b2c8 <put_fat+0x224>
 802b0bc:	68fb      	ldr	r3, [r7, #12]
 802b0be:	6a1b      	ldr	r3, [r3, #32]
 802b0c0:	68ba      	ldr	r2, [r7, #8]
 802b0c2:	429a      	cmp	r2, r3
 802b0c4:	f080 8100 	bcs.w	802b2c8 <put_fat+0x224>
		switch (fs->fs_type) {
 802b0c8:	68fb      	ldr	r3, [r7, #12]
 802b0ca:	781b      	ldrb	r3, [r3, #0]
 802b0cc:	2b02      	cmp	r3, #2
 802b0ce:	f000 8088 	beq.w	802b1e2 <put_fat+0x13e>
 802b0d2:	2b03      	cmp	r3, #3
 802b0d4:	f000 80b0 	beq.w	802b238 <put_fat+0x194>
 802b0d8:	2b01      	cmp	r3, #1
 802b0da:	f040 80f5 	bne.w	802b2c8 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 802b0de:	68bb      	ldr	r3, [r7, #8]
 802b0e0:	61bb      	str	r3, [r7, #24]
 802b0e2:	69bb      	ldr	r3, [r7, #24]
 802b0e4:	085b      	lsrs	r3, r3, #1
 802b0e6:	69ba      	ldr	r2, [r7, #24]
 802b0e8:	4413      	add	r3, r2
 802b0ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 802b0ec:	68fb      	ldr	r3, [r7, #12]
 802b0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b0f0:	68fb      	ldr	r3, [r7, #12]
 802b0f2:	899b      	ldrh	r3, [r3, #12]
 802b0f4:	4619      	mov	r1, r3
 802b0f6:	69bb      	ldr	r3, [r7, #24]
 802b0f8:	fbb3 f3f1 	udiv	r3, r3, r1
 802b0fc:	4413      	add	r3, r2
 802b0fe:	4619      	mov	r1, r3
 802b100:	68f8      	ldr	r0, [r7, #12]
 802b102:	f7ff feb3 	bl	802ae6c <move_window>
 802b106:	4603      	mov	r3, r0
 802b108:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802b10a:	7ffb      	ldrb	r3, [r7, #31]
 802b10c:	2b00      	cmp	r3, #0
 802b10e:	f040 80d4 	bne.w	802b2ba <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 802b112:	68fb      	ldr	r3, [r7, #12]
 802b114:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b118:	69bb      	ldr	r3, [r7, #24]
 802b11a:	1c5a      	adds	r2, r3, #1
 802b11c:	61ba      	str	r2, [r7, #24]
 802b11e:	68fa      	ldr	r2, [r7, #12]
 802b120:	8992      	ldrh	r2, [r2, #12]
 802b122:	fbb3 f0f2 	udiv	r0, r3, r2
 802b126:	fb02 f200 	mul.w	r2, r2, r0
 802b12a:	1a9b      	subs	r3, r3, r2
 802b12c:	440b      	add	r3, r1
 802b12e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 802b130:	68bb      	ldr	r3, [r7, #8]
 802b132:	f003 0301 	and.w	r3, r3, #1
 802b136:	2b00      	cmp	r3, #0
 802b138:	d00d      	beq.n	802b156 <put_fat+0xb2>
 802b13a:	697b      	ldr	r3, [r7, #20]
 802b13c:	781b      	ldrb	r3, [r3, #0]
 802b13e:	b25b      	sxtb	r3, r3
 802b140:	f003 030f 	and.w	r3, r3, #15
 802b144:	b25a      	sxtb	r2, r3
 802b146:	687b      	ldr	r3, [r7, #4]
 802b148:	b2db      	uxtb	r3, r3
 802b14a:	011b      	lsls	r3, r3, #4
 802b14c:	b25b      	sxtb	r3, r3
 802b14e:	4313      	orrs	r3, r2
 802b150:	b25b      	sxtb	r3, r3
 802b152:	b2db      	uxtb	r3, r3
 802b154:	e001      	b.n	802b15a <put_fat+0xb6>
 802b156:	687b      	ldr	r3, [r7, #4]
 802b158:	b2db      	uxtb	r3, r3
 802b15a:	697a      	ldr	r2, [r7, #20]
 802b15c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 802b15e:	68fb      	ldr	r3, [r7, #12]
 802b160:	2201      	movs	r2, #1
 802b162:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 802b164:	68fb      	ldr	r3, [r7, #12]
 802b166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b168:	68fb      	ldr	r3, [r7, #12]
 802b16a:	899b      	ldrh	r3, [r3, #12]
 802b16c:	4619      	mov	r1, r3
 802b16e:	69bb      	ldr	r3, [r7, #24]
 802b170:	fbb3 f3f1 	udiv	r3, r3, r1
 802b174:	4413      	add	r3, r2
 802b176:	4619      	mov	r1, r3
 802b178:	68f8      	ldr	r0, [r7, #12]
 802b17a:	f7ff fe77 	bl	802ae6c <move_window>
 802b17e:	4603      	mov	r3, r0
 802b180:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802b182:	7ffb      	ldrb	r3, [r7, #31]
 802b184:	2b00      	cmp	r3, #0
 802b186:	f040 809a 	bne.w	802b2be <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 802b18a:	68fb      	ldr	r3, [r7, #12]
 802b18c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b190:	68fb      	ldr	r3, [r7, #12]
 802b192:	899b      	ldrh	r3, [r3, #12]
 802b194:	461a      	mov	r2, r3
 802b196:	69bb      	ldr	r3, [r7, #24]
 802b198:	fbb3 f0f2 	udiv	r0, r3, r2
 802b19c:	fb02 f200 	mul.w	r2, r2, r0
 802b1a0:	1a9b      	subs	r3, r3, r2
 802b1a2:	440b      	add	r3, r1
 802b1a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 802b1a6:	68bb      	ldr	r3, [r7, #8]
 802b1a8:	f003 0301 	and.w	r3, r3, #1
 802b1ac:	2b00      	cmp	r3, #0
 802b1ae:	d003      	beq.n	802b1b8 <put_fat+0x114>
 802b1b0:	687b      	ldr	r3, [r7, #4]
 802b1b2:	091b      	lsrs	r3, r3, #4
 802b1b4:	b2db      	uxtb	r3, r3
 802b1b6:	e00e      	b.n	802b1d6 <put_fat+0x132>
 802b1b8:	697b      	ldr	r3, [r7, #20]
 802b1ba:	781b      	ldrb	r3, [r3, #0]
 802b1bc:	b25b      	sxtb	r3, r3
 802b1be:	f023 030f 	bic.w	r3, r3, #15
 802b1c2:	b25a      	sxtb	r2, r3
 802b1c4:	687b      	ldr	r3, [r7, #4]
 802b1c6:	0a1b      	lsrs	r3, r3, #8
 802b1c8:	b25b      	sxtb	r3, r3
 802b1ca:	f003 030f 	and.w	r3, r3, #15
 802b1ce:	b25b      	sxtb	r3, r3
 802b1d0:	4313      	orrs	r3, r2
 802b1d2:	b25b      	sxtb	r3, r3
 802b1d4:	b2db      	uxtb	r3, r3
 802b1d6:	697a      	ldr	r2, [r7, #20]
 802b1d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 802b1da:	68fb      	ldr	r3, [r7, #12]
 802b1dc:	2201      	movs	r2, #1
 802b1de:	70da      	strb	r2, [r3, #3]
			break;
 802b1e0:	e072      	b.n	802b2c8 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 802b1e2:	68fb      	ldr	r3, [r7, #12]
 802b1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b1e6:	68fb      	ldr	r3, [r7, #12]
 802b1e8:	899b      	ldrh	r3, [r3, #12]
 802b1ea:	085b      	lsrs	r3, r3, #1
 802b1ec:	b29b      	uxth	r3, r3
 802b1ee:	4619      	mov	r1, r3
 802b1f0:	68bb      	ldr	r3, [r7, #8]
 802b1f2:	fbb3 f3f1 	udiv	r3, r3, r1
 802b1f6:	4413      	add	r3, r2
 802b1f8:	4619      	mov	r1, r3
 802b1fa:	68f8      	ldr	r0, [r7, #12]
 802b1fc:	f7ff fe36 	bl	802ae6c <move_window>
 802b200:	4603      	mov	r3, r0
 802b202:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802b204:	7ffb      	ldrb	r3, [r7, #31]
 802b206:	2b00      	cmp	r3, #0
 802b208:	d15b      	bne.n	802b2c2 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 802b20a:	68fb      	ldr	r3, [r7, #12]
 802b20c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b210:	68bb      	ldr	r3, [r7, #8]
 802b212:	005b      	lsls	r3, r3, #1
 802b214:	68fa      	ldr	r2, [r7, #12]
 802b216:	8992      	ldrh	r2, [r2, #12]
 802b218:	fbb3 f0f2 	udiv	r0, r3, r2
 802b21c:	fb02 f200 	mul.w	r2, r2, r0
 802b220:	1a9b      	subs	r3, r3, r2
 802b222:	440b      	add	r3, r1
 802b224:	687a      	ldr	r2, [r7, #4]
 802b226:	b292      	uxth	r2, r2
 802b228:	4611      	mov	r1, r2
 802b22a:	4618      	mov	r0, r3
 802b22c:	f7ff fc85 	bl	802ab3a <st_word>
			fs->wflag = 1;
 802b230:	68fb      	ldr	r3, [r7, #12]
 802b232:	2201      	movs	r2, #1
 802b234:	70da      	strb	r2, [r3, #3]
			break;
 802b236:	e047      	b.n	802b2c8 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 802b238:	68fb      	ldr	r3, [r7, #12]
 802b23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b23c:	68fb      	ldr	r3, [r7, #12]
 802b23e:	899b      	ldrh	r3, [r3, #12]
 802b240:	089b      	lsrs	r3, r3, #2
 802b242:	b29b      	uxth	r3, r3
 802b244:	4619      	mov	r1, r3
 802b246:	68bb      	ldr	r3, [r7, #8]
 802b248:	fbb3 f3f1 	udiv	r3, r3, r1
 802b24c:	4413      	add	r3, r2
 802b24e:	4619      	mov	r1, r3
 802b250:	68f8      	ldr	r0, [r7, #12]
 802b252:	f7ff fe0b 	bl	802ae6c <move_window>
 802b256:	4603      	mov	r3, r0
 802b258:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802b25a:	7ffb      	ldrb	r3, [r7, #31]
 802b25c:	2b00      	cmp	r3, #0
 802b25e:	d132      	bne.n	802b2c6 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 802b260:	687b      	ldr	r3, [r7, #4]
 802b262:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 802b266:	68fb      	ldr	r3, [r7, #12]
 802b268:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b26c:	68bb      	ldr	r3, [r7, #8]
 802b26e:	009b      	lsls	r3, r3, #2
 802b270:	68fa      	ldr	r2, [r7, #12]
 802b272:	8992      	ldrh	r2, [r2, #12]
 802b274:	fbb3 f0f2 	udiv	r0, r3, r2
 802b278:	fb02 f200 	mul.w	r2, r2, r0
 802b27c:	1a9b      	subs	r3, r3, r2
 802b27e:	440b      	add	r3, r1
 802b280:	4618      	mov	r0, r3
 802b282:	f7ff fc37 	bl	802aaf4 <ld_dword>
 802b286:	4603      	mov	r3, r0
 802b288:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 802b28c:	4323      	orrs	r3, r4
 802b28e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 802b290:	68fb      	ldr	r3, [r7, #12]
 802b292:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b296:	68bb      	ldr	r3, [r7, #8]
 802b298:	009b      	lsls	r3, r3, #2
 802b29a:	68fa      	ldr	r2, [r7, #12]
 802b29c:	8992      	ldrh	r2, [r2, #12]
 802b29e:	fbb3 f0f2 	udiv	r0, r3, r2
 802b2a2:	fb02 f200 	mul.w	r2, r2, r0
 802b2a6:	1a9b      	subs	r3, r3, r2
 802b2a8:	440b      	add	r3, r1
 802b2aa:	6879      	ldr	r1, [r7, #4]
 802b2ac:	4618      	mov	r0, r3
 802b2ae:	f7ff fc5f 	bl	802ab70 <st_dword>
			fs->wflag = 1;
 802b2b2:	68fb      	ldr	r3, [r7, #12]
 802b2b4:	2201      	movs	r2, #1
 802b2b6:	70da      	strb	r2, [r3, #3]
			break;
 802b2b8:	e006      	b.n	802b2c8 <put_fat+0x224>
			if (res != FR_OK) break;
 802b2ba:	bf00      	nop
 802b2bc:	e004      	b.n	802b2c8 <put_fat+0x224>
			if (res != FR_OK) break;
 802b2be:	bf00      	nop
 802b2c0:	e002      	b.n	802b2c8 <put_fat+0x224>
			if (res != FR_OK) break;
 802b2c2:	bf00      	nop
 802b2c4:	e000      	b.n	802b2c8 <put_fat+0x224>
			if (res != FR_OK) break;
 802b2c6:	bf00      	nop
		}
	}
	return res;
 802b2c8:	7ffb      	ldrb	r3, [r7, #31]
}
 802b2ca:	4618      	mov	r0, r3
 802b2cc:	3724      	adds	r7, #36	; 0x24
 802b2ce:	46bd      	mov	sp, r7
 802b2d0:	bd90      	pop	{r4, r7, pc}

0802b2d2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 802b2d2:	b580      	push	{r7, lr}
 802b2d4:	b088      	sub	sp, #32
 802b2d6:	af00      	add	r7, sp, #0
 802b2d8:	6078      	str	r0, [r7, #4]
 802b2da:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 802b2dc:	687b      	ldr	r3, [r7, #4]
 802b2de:	681b      	ldr	r3, [r3, #0]
 802b2e0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 802b2e2:	683b      	ldr	r3, [r7, #0]
 802b2e4:	2b00      	cmp	r3, #0
 802b2e6:	d10d      	bne.n	802b304 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 802b2e8:	693b      	ldr	r3, [r7, #16]
 802b2ea:	695b      	ldr	r3, [r3, #20]
 802b2ec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 802b2ee:	69bb      	ldr	r3, [r7, #24]
 802b2f0:	2b00      	cmp	r3, #0
 802b2f2:	d004      	beq.n	802b2fe <create_chain+0x2c>
 802b2f4:	693b      	ldr	r3, [r7, #16]
 802b2f6:	6a1b      	ldr	r3, [r3, #32]
 802b2f8:	69ba      	ldr	r2, [r7, #24]
 802b2fa:	429a      	cmp	r2, r3
 802b2fc:	d31b      	bcc.n	802b336 <create_chain+0x64>
 802b2fe:	2301      	movs	r3, #1
 802b300:	61bb      	str	r3, [r7, #24]
 802b302:	e018      	b.n	802b336 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 802b304:	6839      	ldr	r1, [r7, #0]
 802b306:	6878      	ldr	r0, [r7, #4]
 802b308:	f7ff fdfc 	bl	802af04 <get_fat>
 802b30c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 802b30e:	68fb      	ldr	r3, [r7, #12]
 802b310:	2b01      	cmp	r3, #1
 802b312:	d801      	bhi.n	802b318 <create_chain+0x46>
 802b314:	2301      	movs	r3, #1
 802b316:	e070      	b.n	802b3fa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 802b318:	68fb      	ldr	r3, [r7, #12]
 802b31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b31e:	d101      	bne.n	802b324 <create_chain+0x52>
 802b320:	68fb      	ldr	r3, [r7, #12]
 802b322:	e06a      	b.n	802b3fa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 802b324:	693b      	ldr	r3, [r7, #16]
 802b326:	6a1b      	ldr	r3, [r3, #32]
 802b328:	68fa      	ldr	r2, [r7, #12]
 802b32a:	429a      	cmp	r2, r3
 802b32c:	d201      	bcs.n	802b332 <create_chain+0x60>
 802b32e:	68fb      	ldr	r3, [r7, #12]
 802b330:	e063      	b.n	802b3fa <create_chain+0x128>
		scl = clst;
 802b332:	683b      	ldr	r3, [r7, #0]
 802b334:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 802b336:	69bb      	ldr	r3, [r7, #24]
 802b338:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 802b33a:	69fb      	ldr	r3, [r7, #28]
 802b33c:	3301      	adds	r3, #1
 802b33e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 802b340:	693b      	ldr	r3, [r7, #16]
 802b342:	6a1b      	ldr	r3, [r3, #32]
 802b344:	69fa      	ldr	r2, [r7, #28]
 802b346:	429a      	cmp	r2, r3
 802b348:	d307      	bcc.n	802b35a <create_chain+0x88>
				ncl = 2;
 802b34a:	2302      	movs	r3, #2
 802b34c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 802b34e:	69fa      	ldr	r2, [r7, #28]
 802b350:	69bb      	ldr	r3, [r7, #24]
 802b352:	429a      	cmp	r2, r3
 802b354:	d901      	bls.n	802b35a <create_chain+0x88>
 802b356:	2300      	movs	r3, #0
 802b358:	e04f      	b.n	802b3fa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 802b35a:	69f9      	ldr	r1, [r7, #28]
 802b35c:	6878      	ldr	r0, [r7, #4]
 802b35e:	f7ff fdd1 	bl	802af04 <get_fat>
 802b362:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 802b364:	68fb      	ldr	r3, [r7, #12]
 802b366:	2b00      	cmp	r3, #0
 802b368:	d00e      	beq.n	802b388 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 802b36a:	68fb      	ldr	r3, [r7, #12]
 802b36c:	2b01      	cmp	r3, #1
 802b36e:	d003      	beq.n	802b378 <create_chain+0xa6>
 802b370:	68fb      	ldr	r3, [r7, #12]
 802b372:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b376:	d101      	bne.n	802b37c <create_chain+0xaa>
 802b378:	68fb      	ldr	r3, [r7, #12]
 802b37a:	e03e      	b.n	802b3fa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 802b37c:	69fa      	ldr	r2, [r7, #28]
 802b37e:	69bb      	ldr	r3, [r7, #24]
 802b380:	429a      	cmp	r2, r3
 802b382:	d1da      	bne.n	802b33a <create_chain+0x68>
 802b384:	2300      	movs	r3, #0
 802b386:	e038      	b.n	802b3fa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 802b388:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 802b38a:	f04f 32ff 	mov.w	r2, #4294967295
 802b38e:	69f9      	ldr	r1, [r7, #28]
 802b390:	6938      	ldr	r0, [r7, #16]
 802b392:	f7ff fe87 	bl	802b0a4 <put_fat>
 802b396:	4603      	mov	r3, r0
 802b398:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 802b39a:	7dfb      	ldrb	r3, [r7, #23]
 802b39c:	2b00      	cmp	r3, #0
 802b39e:	d109      	bne.n	802b3b4 <create_chain+0xe2>
 802b3a0:	683b      	ldr	r3, [r7, #0]
 802b3a2:	2b00      	cmp	r3, #0
 802b3a4:	d006      	beq.n	802b3b4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 802b3a6:	69fa      	ldr	r2, [r7, #28]
 802b3a8:	6839      	ldr	r1, [r7, #0]
 802b3aa:	6938      	ldr	r0, [r7, #16]
 802b3ac:	f7ff fe7a 	bl	802b0a4 <put_fat>
 802b3b0:	4603      	mov	r3, r0
 802b3b2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 802b3b4:	7dfb      	ldrb	r3, [r7, #23]
 802b3b6:	2b00      	cmp	r3, #0
 802b3b8:	d116      	bne.n	802b3e8 <create_chain+0x116>
		fs->last_clst = ncl;
 802b3ba:	693b      	ldr	r3, [r7, #16]
 802b3bc:	69fa      	ldr	r2, [r7, #28]
 802b3be:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 802b3c0:	693b      	ldr	r3, [r7, #16]
 802b3c2:	699a      	ldr	r2, [r3, #24]
 802b3c4:	693b      	ldr	r3, [r7, #16]
 802b3c6:	6a1b      	ldr	r3, [r3, #32]
 802b3c8:	3b02      	subs	r3, #2
 802b3ca:	429a      	cmp	r2, r3
 802b3cc:	d804      	bhi.n	802b3d8 <create_chain+0x106>
 802b3ce:	693b      	ldr	r3, [r7, #16]
 802b3d0:	699b      	ldr	r3, [r3, #24]
 802b3d2:	1e5a      	subs	r2, r3, #1
 802b3d4:	693b      	ldr	r3, [r7, #16]
 802b3d6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 802b3d8:	693b      	ldr	r3, [r7, #16]
 802b3da:	791b      	ldrb	r3, [r3, #4]
 802b3dc:	f043 0301 	orr.w	r3, r3, #1
 802b3e0:	b2da      	uxtb	r2, r3
 802b3e2:	693b      	ldr	r3, [r7, #16]
 802b3e4:	711a      	strb	r2, [r3, #4]
 802b3e6:	e007      	b.n	802b3f8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 802b3e8:	7dfb      	ldrb	r3, [r7, #23]
 802b3ea:	2b01      	cmp	r3, #1
 802b3ec:	d102      	bne.n	802b3f4 <create_chain+0x122>
 802b3ee:	f04f 33ff 	mov.w	r3, #4294967295
 802b3f2:	e000      	b.n	802b3f6 <create_chain+0x124>
 802b3f4:	2301      	movs	r3, #1
 802b3f6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 802b3f8:	69fb      	ldr	r3, [r7, #28]
}
 802b3fa:	4618      	mov	r0, r3
 802b3fc:	3720      	adds	r7, #32
 802b3fe:	46bd      	mov	sp, r7
 802b400:	bd80      	pop	{r7, pc}

0802b402 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 802b402:	b580      	push	{r7, lr}
 802b404:	b086      	sub	sp, #24
 802b406:	af00      	add	r7, sp, #0
 802b408:	6078      	str	r0, [r7, #4]
 802b40a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 802b40c:	687b      	ldr	r3, [r7, #4]
 802b40e:	681b      	ldr	r3, [r3, #0]
 802b410:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 802b412:	683b      	ldr	r3, [r7, #0]
 802b414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802b418:	d204      	bcs.n	802b424 <dir_sdi+0x22>
 802b41a:	683b      	ldr	r3, [r7, #0]
 802b41c:	f003 031f 	and.w	r3, r3, #31
 802b420:	2b00      	cmp	r3, #0
 802b422:	d001      	beq.n	802b428 <dir_sdi+0x26>
		return FR_INT_ERR;
 802b424:	2302      	movs	r3, #2
 802b426:	e071      	b.n	802b50c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 802b428:	687b      	ldr	r3, [r7, #4]
 802b42a:	683a      	ldr	r2, [r7, #0]
 802b42c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 802b42e:	687b      	ldr	r3, [r7, #4]
 802b430:	689b      	ldr	r3, [r3, #8]
 802b432:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 802b434:	697b      	ldr	r3, [r7, #20]
 802b436:	2b00      	cmp	r3, #0
 802b438:	d106      	bne.n	802b448 <dir_sdi+0x46>
 802b43a:	693b      	ldr	r3, [r7, #16]
 802b43c:	781b      	ldrb	r3, [r3, #0]
 802b43e:	2b02      	cmp	r3, #2
 802b440:	d902      	bls.n	802b448 <dir_sdi+0x46>
		clst = fs->dirbase;
 802b442:	693b      	ldr	r3, [r7, #16]
 802b444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b446:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 802b448:	697b      	ldr	r3, [r7, #20]
 802b44a:	2b00      	cmp	r3, #0
 802b44c:	d10c      	bne.n	802b468 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 802b44e:	683b      	ldr	r3, [r7, #0]
 802b450:	095b      	lsrs	r3, r3, #5
 802b452:	693a      	ldr	r2, [r7, #16]
 802b454:	8912      	ldrh	r2, [r2, #8]
 802b456:	4293      	cmp	r3, r2
 802b458:	d301      	bcc.n	802b45e <dir_sdi+0x5c>
 802b45a:	2302      	movs	r3, #2
 802b45c:	e056      	b.n	802b50c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 802b45e:	693b      	ldr	r3, [r7, #16]
 802b460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b462:	687b      	ldr	r3, [r7, #4]
 802b464:	61da      	str	r2, [r3, #28]
 802b466:	e02d      	b.n	802b4c4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 802b468:	693b      	ldr	r3, [r7, #16]
 802b46a:	895b      	ldrh	r3, [r3, #10]
 802b46c:	461a      	mov	r2, r3
 802b46e:	693b      	ldr	r3, [r7, #16]
 802b470:	899b      	ldrh	r3, [r3, #12]
 802b472:	fb03 f302 	mul.w	r3, r3, r2
 802b476:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 802b478:	e019      	b.n	802b4ae <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 802b47a:	687b      	ldr	r3, [r7, #4]
 802b47c:	6979      	ldr	r1, [r7, #20]
 802b47e:	4618      	mov	r0, r3
 802b480:	f7ff fd40 	bl	802af04 <get_fat>
 802b484:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 802b486:	697b      	ldr	r3, [r7, #20]
 802b488:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b48c:	d101      	bne.n	802b492 <dir_sdi+0x90>
 802b48e:	2301      	movs	r3, #1
 802b490:	e03c      	b.n	802b50c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 802b492:	697b      	ldr	r3, [r7, #20]
 802b494:	2b01      	cmp	r3, #1
 802b496:	d904      	bls.n	802b4a2 <dir_sdi+0xa0>
 802b498:	693b      	ldr	r3, [r7, #16]
 802b49a:	6a1b      	ldr	r3, [r3, #32]
 802b49c:	697a      	ldr	r2, [r7, #20]
 802b49e:	429a      	cmp	r2, r3
 802b4a0:	d301      	bcc.n	802b4a6 <dir_sdi+0xa4>
 802b4a2:	2302      	movs	r3, #2
 802b4a4:	e032      	b.n	802b50c <dir_sdi+0x10a>
			ofs -= csz;
 802b4a6:	683a      	ldr	r2, [r7, #0]
 802b4a8:	68fb      	ldr	r3, [r7, #12]
 802b4aa:	1ad3      	subs	r3, r2, r3
 802b4ac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 802b4ae:	683a      	ldr	r2, [r7, #0]
 802b4b0:	68fb      	ldr	r3, [r7, #12]
 802b4b2:	429a      	cmp	r2, r3
 802b4b4:	d2e1      	bcs.n	802b47a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 802b4b6:	6979      	ldr	r1, [r7, #20]
 802b4b8:	6938      	ldr	r0, [r7, #16]
 802b4ba:	f7ff fd04 	bl	802aec6 <clust2sect>
 802b4be:	4602      	mov	r2, r0
 802b4c0:	687b      	ldr	r3, [r7, #4]
 802b4c2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 802b4c4:	687b      	ldr	r3, [r7, #4]
 802b4c6:	697a      	ldr	r2, [r7, #20]
 802b4c8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 802b4ca:	687b      	ldr	r3, [r7, #4]
 802b4cc:	69db      	ldr	r3, [r3, #28]
 802b4ce:	2b00      	cmp	r3, #0
 802b4d0:	d101      	bne.n	802b4d6 <dir_sdi+0xd4>
 802b4d2:	2302      	movs	r3, #2
 802b4d4:	e01a      	b.n	802b50c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 802b4d6:	687b      	ldr	r3, [r7, #4]
 802b4d8:	69da      	ldr	r2, [r3, #28]
 802b4da:	693b      	ldr	r3, [r7, #16]
 802b4dc:	899b      	ldrh	r3, [r3, #12]
 802b4de:	4619      	mov	r1, r3
 802b4e0:	683b      	ldr	r3, [r7, #0]
 802b4e2:	fbb3 f3f1 	udiv	r3, r3, r1
 802b4e6:	441a      	add	r2, r3
 802b4e8:	687b      	ldr	r3, [r7, #4]
 802b4ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 802b4ec:	693b      	ldr	r3, [r7, #16]
 802b4ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b4f2:	693b      	ldr	r3, [r7, #16]
 802b4f4:	899b      	ldrh	r3, [r3, #12]
 802b4f6:	461a      	mov	r2, r3
 802b4f8:	683b      	ldr	r3, [r7, #0]
 802b4fa:	fbb3 f0f2 	udiv	r0, r3, r2
 802b4fe:	fb02 f200 	mul.w	r2, r2, r0
 802b502:	1a9b      	subs	r3, r3, r2
 802b504:	18ca      	adds	r2, r1, r3
 802b506:	687b      	ldr	r3, [r7, #4]
 802b508:	621a      	str	r2, [r3, #32]

	return FR_OK;
 802b50a:	2300      	movs	r3, #0
}
 802b50c:	4618      	mov	r0, r3
 802b50e:	3718      	adds	r7, #24
 802b510:	46bd      	mov	sp, r7
 802b512:	bd80      	pop	{r7, pc}

0802b514 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 802b514:	b580      	push	{r7, lr}
 802b516:	b086      	sub	sp, #24
 802b518:	af00      	add	r7, sp, #0
 802b51a:	6078      	str	r0, [r7, #4]
 802b51c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 802b51e:	687b      	ldr	r3, [r7, #4]
 802b520:	681b      	ldr	r3, [r3, #0]
 802b522:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 802b524:	687b      	ldr	r3, [r7, #4]
 802b526:	695b      	ldr	r3, [r3, #20]
 802b528:	3320      	adds	r3, #32
 802b52a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 802b52c:	687b      	ldr	r3, [r7, #4]
 802b52e:	69db      	ldr	r3, [r3, #28]
 802b530:	2b00      	cmp	r3, #0
 802b532:	d003      	beq.n	802b53c <dir_next+0x28>
 802b534:	68bb      	ldr	r3, [r7, #8]
 802b536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802b53a:	d301      	bcc.n	802b540 <dir_next+0x2c>
 802b53c:	2304      	movs	r3, #4
 802b53e:	e0bb      	b.n	802b6b8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 802b540:	68fb      	ldr	r3, [r7, #12]
 802b542:	899b      	ldrh	r3, [r3, #12]
 802b544:	461a      	mov	r2, r3
 802b546:	68bb      	ldr	r3, [r7, #8]
 802b548:	fbb3 f1f2 	udiv	r1, r3, r2
 802b54c:	fb02 f201 	mul.w	r2, r2, r1
 802b550:	1a9b      	subs	r3, r3, r2
 802b552:	2b00      	cmp	r3, #0
 802b554:	f040 809d 	bne.w	802b692 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 802b558:	687b      	ldr	r3, [r7, #4]
 802b55a:	69db      	ldr	r3, [r3, #28]
 802b55c:	1c5a      	adds	r2, r3, #1
 802b55e:	687b      	ldr	r3, [r7, #4]
 802b560:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 802b562:	687b      	ldr	r3, [r7, #4]
 802b564:	699b      	ldr	r3, [r3, #24]
 802b566:	2b00      	cmp	r3, #0
 802b568:	d10b      	bne.n	802b582 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 802b56a:	68bb      	ldr	r3, [r7, #8]
 802b56c:	095b      	lsrs	r3, r3, #5
 802b56e:	68fa      	ldr	r2, [r7, #12]
 802b570:	8912      	ldrh	r2, [r2, #8]
 802b572:	4293      	cmp	r3, r2
 802b574:	f0c0 808d 	bcc.w	802b692 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 802b578:	687b      	ldr	r3, [r7, #4]
 802b57a:	2200      	movs	r2, #0
 802b57c:	61da      	str	r2, [r3, #28]
 802b57e:	2304      	movs	r3, #4
 802b580:	e09a      	b.n	802b6b8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 802b582:	68fb      	ldr	r3, [r7, #12]
 802b584:	899b      	ldrh	r3, [r3, #12]
 802b586:	461a      	mov	r2, r3
 802b588:	68bb      	ldr	r3, [r7, #8]
 802b58a:	fbb3 f3f2 	udiv	r3, r3, r2
 802b58e:	68fa      	ldr	r2, [r7, #12]
 802b590:	8952      	ldrh	r2, [r2, #10]
 802b592:	3a01      	subs	r2, #1
 802b594:	4013      	ands	r3, r2
 802b596:	2b00      	cmp	r3, #0
 802b598:	d17b      	bne.n	802b692 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 802b59a:	687a      	ldr	r2, [r7, #4]
 802b59c:	687b      	ldr	r3, [r7, #4]
 802b59e:	699b      	ldr	r3, [r3, #24]
 802b5a0:	4619      	mov	r1, r3
 802b5a2:	4610      	mov	r0, r2
 802b5a4:	f7ff fcae 	bl	802af04 <get_fat>
 802b5a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 802b5aa:	697b      	ldr	r3, [r7, #20]
 802b5ac:	2b01      	cmp	r3, #1
 802b5ae:	d801      	bhi.n	802b5b4 <dir_next+0xa0>
 802b5b0:	2302      	movs	r3, #2
 802b5b2:	e081      	b.n	802b6b8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 802b5b4:	697b      	ldr	r3, [r7, #20]
 802b5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b5ba:	d101      	bne.n	802b5c0 <dir_next+0xac>
 802b5bc:	2301      	movs	r3, #1
 802b5be:	e07b      	b.n	802b6b8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 802b5c0:	68fb      	ldr	r3, [r7, #12]
 802b5c2:	6a1b      	ldr	r3, [r3, #32]
 802b5c4:	697a      	ldr	r2, [r7, #20]
 802b5c6:	429a      	cmp	r2, r3
 802b5c8:	d359      	bcc.n	802b67e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 802b5ca:	683b      	ldr	r3, [r7, #0]
 802b5cc:	2b00      	cmp	r3, #0
 802b5ce:	d104      	bne.n	802b5da <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 802b5d0:	687b      	ldr	r3, [r7, #4]
 802b5d2:	2200      	movs	r2, #0
 802b5d4:	61da      	str	r2, [r3, #28]
 802b5d6:	2304      	movs	r3, #4
 802b5d8:	e06e      	b.n	802b6b8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 802b5da:	687a      	ldr	r2, [r7, #4]
 802b5dc:	687b      	ldr	r3, [r7, #4]
 802b5de:	699b      	ldr	r3, [r3, #24]
 802b5e0:	4619      	mov	r1, r3
 802b5e2:	4610      	mov	r0, r2
 802b5e4:	f7ff fe75 	bl	802b2d2 <create_chain>
 802b5e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 802b5ea:	697b      	ldr	r3, [r7, #20]
 802b5ec:	2b00      	cmp	r3, #0
 802b5ee:	d101      	bne.n	802b5f4 <dir_next+0xe0>
 802b5f0:	2307      	movs	r3, #7
 802b5f2:	e061      	b.n	802b6b8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 802b5f4:	697b      	ldr	r3, [r7, #20]
 802b5f6:	2b01      	cmp	r3, #1
 802b5f8:	d101      	bne.n	802b5fe <dir_next+0xea>
 802b5fa:	2302      	movs	r3, #2
 802b5fc:	e05c      	b.n	802b6b8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 802b5fe:	697b      	ldr	r3, [r7, #20]
 802b600:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b604:	d101      	bne.n	802b60a <dir_next+0xf6>
 802b606:	2301      	movs	r3, #1
 802b608:	e056      	b.n	802b6b8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 802b60a:	68f8      	ldr	r0, [r7, #12]
 802b60c:	f7ff fbea 	bl	802ade4 <sync_window>
 802b610:	4603      	mov	r3, r0
 802b612:	2b00      	cmp	r3, #0
 802b614:	d001      	beq.n	802b61a <dir_next+0x106>
 802b616:	2301      	movs	r3, #1
 802b618:	e04e      	b.n	802b6b8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 802b61a:	68fb      	ldr	r3, [r7, #12]
 802b61c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 802b620:	68fb      	ldr	r3, [r7, #12]
 802b622:	899b      	ldrh	r3, [r3, #12]
 802b624:	461a      	mov	r2, r3
 802b626:	2100      	movs	r1, #0
 802b628:	f7ff face 	bl	802abc8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 802b62c:	2300      	movs	r3, #0
 802b62e:	613b      	str	r3, [r7, #16]
 802b630:	6979      	ldr	r1, [r7, #20]
 802b632:	68f8      	ldr	r0, [r7, #12]
 802b634:	f7ff fc47 	bl	802aec6 <clust2sect>
 802b638:	4602      	mov	r2, r0
 802b63a:	68fb      	ldr	r3, [r7, #12]
 802b63c:	639a      	str	r2, [r3, #56]	; 0x38
 802b63e:	e012      	b.n	802b666 <dir_next+0x152>
						fs->wflag = 1;
 802b640:	68fb      	ldr	r3, [r7, #12]
 802b642:	2201      	movs	r2, #1
 802b644:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 802b646:	68f8      	ldr	r0, [r7, #12]
 802b648:	f7ff fbcc 	bl	802ade4 <sync_window>
 802b64c:	4603      	mov	r3, r0
 802b64e:	2b00      	cmp	r3, #0
 802b650:	d001      	beq.n	802b656 <dir_next+0x142>
 802b652:	2301      	movs	r3, #1
 802b654:	e030      	b.n	802b6b8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 802b656:	693b      	ldr	r3, [r7, #16]
 802b658:	3301      	adds	r3, #1
 802b65a:	613b      	str	r3, [r7, #16]
 802b65c:	68fb      	ldr	r3, [r7, #12]
 802b65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b660:	1c5a      	adds	r2, r3, #1
 802b662:	68fb      	ldr	r3, [r7, #12]
 802b664:	639a      	str	r2, [r3, #56]	; 0x38
 802b666:	68fb      	ldr	r3, [r7, #12]
 802b668:	895b      	ldrh	r3, [r3, #10]
 802b66a:	461a      	mov	r2, r3
 802b66c:	693b      	ldr	r3, [r7, #16]
 802b66e:	4293      	cmp	r3, r2
 802b670:	d3e6      	bcc.n	802b640 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 802b672:	68fb      	ldr	r3, [r7, #12]
 802b674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802b676:	693b      	ldr	r3, [r7, #16]
 802b678:	1ad2      	subs	r2, r2, r3
 802b67a:	68fb      	ldr	r3, [r7, #12]
 802b67c:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 802b67e:	687b      	ldr	r3, [r7, #4]
 802b680:	697a      	ldr	r2, [r7, #20]
 802b682:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 802b684:	6979      	ldr	r1, [r7, #20]
 802b686:	68f8      	ldr	r0, [r7, #12]
 802b688:	f7ff fc1d 	bl	802aec6 <clust2sect>
 802b68c:	4602      	mov	r2, r0
 802b68e:	687b      	ldr	r3, [r7, #4]
 802b690:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 802b692:	687b      	ldr	r3, [r7, #4]
 802b694:	68ba      	ldr	r2, [r7, #8]
 802b696:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 802b698:	68fb      	ldr	r3, [r7, #12]
 802b69a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b69e:	68fb      	ldr	r3, [r7, #12]
 802b6a0:	899b      	ldrh	r3, [r3, #12]
 802b6a2:	461a      	mov	r2, r3
 802b6a4:	68bb      	ldr	r3, [r7, #8]
 802b6a6:	fbb3 f0f2 	udiv	r0, r3, r2
 802b6aa:	fb02 f200 	mul.w	r2, r2, r0
 802b6ae:	1a9b      	subs	r3, r3, r2
 802b6b0:	18ca      	adds	r2, r1, r3
 802b6b2:	687b      	ldr	r3, [r7, #4]
 802b6b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 802b6b6:	2300      	movs	r3, #0
}
 802b6b8:	4618      	mov	r0, r3
 802b6ba:	3718      	adds	r7, #24
 802b6bc:	46bd      	mov	sp, r7
 802b6be:	bd80      	pop	{r7, pc}

0802b6c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 802b6c0:	b580      	push	{r7, lr}
 802b6c2:	b084      	sub	sp, #16
 802b6c4:	af00      	add	r7, sp, #0
 802b6c6:	6078      	str	r0, [r7, #4]
 802b6c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 802b6ca:	683b      	ldr	r3, [r7, #0]
 802b6cc:	331a      	adds	r3, #26
 802b6ce:	4618      	mov	r0, r3
 802b6d0:	f7ff f9f8 	bl	802aac4 <ld_word>
 802b6d4:	4603      	mov	r3, r0
 802b6d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 802b6d8:	687b      	ldr	r3, [r7, #4]
 802b6da:	781b      	ldrb	r3, [r3, #0]
 802b6dc:	2b03      	cmp	r3, #3
 802b6de:	d109      	bne.n	802b6f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 802b6e0:	683b      	ldr	r3, [r7, #0]
 802b6e2:	3314      	adds	r3, #20
 802b6e4:	4618      	mov	r0, r3
 802b6e6:	f7ff f9ed 	bl	802aac4 <ld_word>
 802b6ea:	4603      	mov	r3, r0
 802b6ec:	041b      	lsls	r3, r3, #16
 802b6ee:	68fa      	ldr	r2, [r7, #12]
 802b6f0:	4313      	orrs	r3, r2
 802b6f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 802b6f4:	68fb      	ldr	r3, [r7, #12]
}
 802b6f6:	4618      	mov	r0, r3
 802b6f8:	3710      	adds	r7, #16
 802b6fa:	46bd      	mov	sp, r7
 802b6fc:	bd80      	pop	{r7, pc}
	...

0802b700 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 802b700:	b590      	push	{r4, r7, lr}
 802b702:	b087      	sub	sp, #28
 802b704:	af00      	add	r7, sp, #0
 802b706:	6078      	str	r0, [r7, #4]
 802b708:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 802b70a:	683b      	ldr	r3, [r7, #0]
 802b70c:	331a      	adds	r3, #26
 802b70e:	4618      	mov	r0, r3
 802b710:	f7ff f9d8 	bl	802aac4 <ld_word>
 802b714:	4603      	mov	r3, r0
 802b716:	2b00      	cmp	r3, #0
 802b718:	d001      	beq.n	802b71e <cmp_lfn+0x1e>
 802b71a:	2300      	movs	r3, #0
 802b71c:	e059      	b.n	802b7d2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 802b71e:	683b      	ldr	r3, [r7, #0]
 802b720:	781b      	ldrb	r3, [r3, #0]
 802b722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802b726:	1e5a      	subs	r2, r3, #1
 802b728:	4613      	mov	r3, r2
 802b72a:	005b      	lsls	r3, r3, #1
 802b72c:	4413      	add	r3, r2
 802b72e:	009b      	lsls	r3, r3, #2
 802b730:	4413      	add	r3, r2
 802b732:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 802b734:	2301      	movs	r3, #1
 802b736:	81fb      	strh	r3, [r7, #14]
 802b738:	2300      	movs	r3, #0
 802b73a:	613b      	str	r3, [r7, #16]
 802b73c:	e033      	b.n	802b7a6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 802b73e:	4a27      	ldr	r2, [pc, #156]	; (802b7dc <cmp_lfn+0xdc>)
 802b740:	693b      	ldr	r3, [r7, #16]
 802b742:	4413      	add	r3, r2
 802b744:	781b      	ldrb	r3, [r3, #0]
 802b746:	461a      	mov	r2, r3
 802b748:	683b      	ldr	r3, [r7, #0]
 802b74a:	4413      	add	r3, r2
 802b74c:	4618      	mov	r0, r3
 802b74e:	f7ff f9b9 	bl	802aac4 <ld_word>
 802b752:	4603      	mov	r3, r0
 802b754:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 802b756:	89fb      	ldrh	r3, [r7, #14]
 802b758:	2b00      	cmp	r3, #0
 802b75a:	d01a      	beq.n	802b792 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 802b75c:	697b      	ldr	r3, [r7, #20]
 802b75e:	2bfe      	cmp	r3, #254	; 0xfe
 802b760:	d812      	bhi.n	802b788 <cmp_lfn+0x88>
 802b762:	89bb      	ldrh	r3, [r7, #12]
 802b764:	4618      	mov	r0, r3
 802b766:	f001 fbb3 	bl	802ced0 <ff_wtoupper>
 802b76a:	4603      	mov	r3, r0
 802b76c:	461c      	mov	r4, r3
 802b76e:	697b      	ldr	r3, [r7, #20]
 802b770:	1c5a      	adds	r2, r3, #1
 802b772:	617a      	str	r2, [r7, #20]
 802b774:	005b      	lsls	r3, r3, #1
 802b776:	687a      	ldr	r2, [r7, #4]
 802b778:	4413      	add	r3, r2
 802b77a:	881b      	ldrh	r3, [r3, #0]
 802b77c:	4618      	mov	r0, r3
 802b77e:	f001 fba7 	bl	802ced0 <ff_wtoupper>
 802b782:	4603      	mov	r3, r0
 802b784:	429c      	cmp	r4, r3
 802b786:	d001      	beq.n	802b78c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 802b788:	2300      	movs	r3, #0
 802b78a:	e022      	b.n	802b7d2 <cmp_lfn+0xd2>
			}
			wc = uc;
 802b78c:	89bb      	ldrh	r3, [r7, #12]
 802b78e:	81fb      	strh	r3, [r7, #14]
 802b790:	e006      	b.n	802b7a0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 802b792:	89bb      	ldrh	r3, [r7, #12]
 802b794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802b798:	4293      	cmp	r3, r2
 802b79a:	d001      	beq.n	802b7a0 <cmp_lfn+0xa0>
 802b79c:	2300      	movs	r3, #0
 802b79e:	e018      	b.n	802b7d2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 802b7a0:	693b      	ldr	r3, [r7, #16]
 802b7a2:	3301      	adds	r3, #1
 802b7a4:	613b      	str	r3, [r7, #16]
 802b7a6:	693b      	ldr	r3, [r7, #16]
 802b7a8:	2b0c      	cmp	r3, #12
 802b7aa:	d9c8      	bls.n	802b73e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 802b7ac:	683b      	ldr	r3, [r7, #0]
 802b7ae:	781b      	ldrb	r3, [r3, #0]
 802b7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b7b4:	2b00      	cmp	r3, #0
 802b7b6:	d00b      	beq.n	802b7d0 <cmp_lfn+0xd0>
 802b7b8:	89fb      	ldrh	r3, [r7, #14]
 802b7ba:	2b00      	cmp	r3, #0
 802b7bc:	d008      	beq.n	802b7d0 <cmp_lfn+0xd0>
 802b7be:	697b      	ldr	r3, [r7, #20]
 802b7c0:	005b      	lsls	r3, r3, #1
 802b7c2:	687a      	ldr	r2, [r7, #4]
 802b7c4:	4413      	add	r3, r2
 802b7c6:	881b      	ldrh	r3, [r3, #0]
 802b7c8:	2b00      	cmp	r3, #0
 802b7ca:	d001      	beq.n	802b7d0 <cmp_lfn+0xd0>
 802b7cc:	2300      	movs	r3, #0
 802b7ce:	e000      	b.n	802b7d2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 802b7d0:	2301      	movs	r3, #1
}
 802b7d2:	4618      	mov	r0, r3
 802b7d4:	371c      	adds	r7, #28
 802b7d6:	46bd      	mov	sp, r7
 802b7d8:	bd90      	pop	{r4, r7, pc}
 802b7da:	bf00      	nop
 802b7dc:	08030950 	.word	0x08030950

0802b7e0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 802b7e0:	b580      	push	{r7, lr}
 802b7e2:	b086      	sub	sp, #24
 802b7e4:	af00      	add	r7, sp, #0
 802b7e6:	6078      	str	r0, [r7, #4]
 802b7e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 802b7ea:	683b      	ldr	r3, [r7, #0]
 802b7ec:	331a      	adds	r3, #26
 802b7ee:	4618      	mov	r0, r3
 802b7f0:	f7ff f968 	bl	802aac4 <ld_word>
 802b7f4:	4603      	mov	r3, r0
 802b7f6:	2b00      	cmp	r3, #0
 802b7f8:	d001      	beq.n	802b7fe <pick_lfn+0x1e>
 802b7fa:	2300      	movs	r3, #0
 802b7fc:	e04d      	b.n	802b89a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 802b7fe:	683b      	ldr	r3, [r7, #0]
 802b800:	781b      	ldrb	r3, [r3, #0]
 802b802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802b806:	1e5a      	subs	r2, r3, #1
 802b808:	4613      	mov	r3, r2
 802b80a:	005b      	lsls	r3, r3, #1
 802b80c:	4413      	add	r3, r2
 802b80e:	009b      	lsls	r3, r3, #2
 802b810:	4413      	add	r3, r2
 802b812:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 802b814:	2301      	movs	r3, #1
 802b816:	81fb      	strh	r3, [r7, #14]
 802b818:	2300      	movs	r3, #0
 802b81a:	613b      	str	r3, [r7, #16]
 802b81c:	e028      	b.n	802b870 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 802b81e:	4a21      	ldr	r2, [pc, #132]	; (802b8a4 <pick_lfn+0xc4>)
 802b820:	693b      	ldr	r3, [r7, #16]
 802b822:	4413      	add	r3, r2
 802b824:	781b      	ldrb	r3, [r3, #0]
 802b826:	461a      	mov	r2, r3
 802b828:	683b      	ldr	r3, [r7, #0]
 802b82a:	4413      	add	r3, r2
 802b82c:	4618      	mov	r0, r3
 802b82e:	f7ff f949 	bl	802aac4 <ld_word>
 802b832:	4603      	mov	r3, r0
 802b834:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 802b836:	89fb      	ldrh	r3, [r7, #14]
 802b838:	2b00      	cmp	r3, #0
 802b83a:	d00f      	beq.n	802b85c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 802b83c:	697b      	ldr	r3, [r7, #20]
 802b83e:	2bfe      	cmp	r3, #254	; 0xfe
 802b840:	d901      	bls.n	802b846 <pick_lfn+0x66>
 802b842:	2300      	movs	r3, #0
 802b844:	e029      	b.n	802b89a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 802b846:	89bb      	ldrh	r3, [r7, #12]
 802b848:	81fb      	strh	r3, [r7, #14]
 802b84a:	697b      	ldr	r3, [r7, #20]
 802b84c:	1c5a      	adds	r2, r3, #1
 802b84e:	617a      	str	r2, [r7, #20]
 802b850:	005b      	lsls	r3, r3, #1
 802b852:	687a      	ldr	r2, [r7, #4]
 802b854:	4413      	add	r3, r2
 802b856:	89fa      	ldrh	r2, [r7, #14]
 802b858:	801a      	strh	r2, [r3, #0]
 802b85a:	e006      	b.n	802b86a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 802b85c:	89bb      	ldrh	r3, [r7, #12]
 802b85e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802b862:	4293      	cmp	r3, r2
 802b864:	d001      	beq.n	802b86a <pick_lfn+0x8a>
 802b866:	2300      	movs	r3, #0
 802b868:	e017      	b.n	802b89a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 802b86a:	693b      	ldr	r3, [r7, #16]
 802b86c:	3301      	adds	r3, #1
 802b86e:	613b      	str	r3, [r7, #16]
 802b870:	693b      	ldr	r3, [r7, #16]
 802b872:	2b0c      	cmp	r3, #12
 802b874:	d9d3      	bls.n	802b81e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 802b876:	683b      	ldr	r3, [r7, #0]
 802b878:	781b      	ldrb	r3, [r3, #0]
 802b87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b87e:	2b00      	cmp	r3, #0
 802b880:	d00a      	beq.n	802b898 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 802b882:	697b      	ldr	r3, [r7, #20]
 802b884:	2bfe      	cmp	r3, #254	; 0xfe
 802b886:	d901      	bls.n	802b88c <pick_lfn+0xac>
 802b888:	2300      	movs	r3, #0
 802b88a:	e006      	b.n	802b89a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 802b88c:	697b      	ldr	r3, [r7, #20]
 802b88e:	005b      	lsls	r3, r3, #1
 802b890:	687a      	ldr	r2, [r7, #4]
 802b892:	4413      	add	r3, r2
 802b894:	2200      	movs	r2, #0
 802b896:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 802b898:	2301      	movs	r3, #1
}
 802b89a:	4618      	mov	r0, r3
 802b89c:	3718      	adds	r7, #24
 802b89e:	46bd      	mov	sp, r7
 802b8a0:	bd80      	pop	{r7, pc}
 802b8a2:	bf00      	nop
 802b8a4:	08030950 	.word	0x08030950

0802b8a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 802b8a8:	b480      	push	{r7}
 802b8aa:	b085      	sub	sp, #20
 802b8ac:	af00      	add	r7, sp, #0
 802b8ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 802b8b0:	2300      	movs	r3, #0
 802b8b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 802b8b4:	230b      	movs	r3, #11
 802b8b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 802b8b8:	7bfb      	ldrb	r3, [r7, #15]
 802b8ba:	b2da      	uxtb	r2, r3
 802b8bc:	0852      	lsrs	r2, r2, #1
 802b8be:	01db      	lsls	r3, r3, #7
 802b8c0:	4313      	orrs	r3, r2
 802b8c2:	b2da      	uxtb	r2, r3
 802b8c4:	687b      	ldr	r3, [r7, #4]
 802b8c6:	1c59      	adds	r1, r3, #1
 802b8c8:	6079      	str	r1, [r7, #4]
 802b8ca:	781b      	ldrb	r3, [r3, #0]
 802b8cc:	4413      	add	r3, r2
 802b8ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 802b8d0:	68bb      	ldr	r3, [r7, #8]
 802b8d2:	3b01      	subs	r3, #1
 802b8d4:	60bb      	str	r3, [r7, #8]
 802b8d6:	68bb      	ldr	r3, [r7, #8]
 802b8d8:	2b00      	cmp	r3, #0
 802b8da:	d1ed      	bne.n	802b8b8 <sum_sfn+0x10>
	return sum;
 802b8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 802b8de:	4618      	mov	r0, r3
 802b8e0:	3714      	adds	r7, #20
 802b8e2:	46bd      	mov	sp, r7
 802b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8e8:	4770      	bx	lr

0802b8ea <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 802b8ea:	b580      	push	{r7, lr}
 802b8ec:	b086      	sub	sp, #24
 802b8ee:	af00      	add	r7, sp, #0
 802b8f0:	6078      	str	r0, [r7, #4]
 802b8f2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 802b8f4:	2304      	movs	r3, #4
 802b8f6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 802b8f8:	687b      	ldr	r3, [r7, #4]
 802b8fa:	681b      	ldr	r3, [r3, #0]
 802b8fc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 802b8fe:	23ff      	movs	r3, #255	; 0xff
 802b900:	757b      	strb	r3, [r7, #21]
 802b902:	23ff      	movs	r3, #255	; 0xff
 802b904:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 802b906:	e081      	b.n	802ba0c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 802b908:	687b      	ldr	r3, [r7, #4]
 802b90a:	69db      	ldr	r3, [r3, #28]
 802b90c:	4619      	mov	r1, r3
 802b90e:	6938      	ldr	r0, [r7, #16]
 802b910:	f7ff faac 	bl	802ae6c <move_window>
 802b914:	4603      	mov	r3, r0
 802b916:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 802b918:	7dfb      	ldrb	r3, [r7, #23]
 802b91a:	2b00      	cmp	r3, #0
 802b91c:	d17c      	bne.n	802ba18 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 802b91e:	687b      	ldr	r3, [r7, #4]
 802b920:	6a1b      	ldr	r3, [r3, #32]
 802b922:	781b      	ldrb	r3, [r3, #0]
 802b924:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 802b926:	7dbb      	ldrb	r3, [r7, #22]
 802b928:	2b00      	cmp	r3, #0
 802b92a:	d102      	bne.n	802b932 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 802b92c:	2304      	movs	r3, #4
 802b92e:	75fb      	strb	r3, [r7, #23]
 802b930:	e077      	b.n	802ba22 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 802b932:	687b      	ldr	r3, [r7, #4]
 802b934:	6a1b      	ldr	r3, [r3, #32]
 802b936:	330b      	adds	r3, #11
 802b938:	781b      	ldrb	r3, [r3, #0]
 802b93a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802b93e:	73fb      	strb	r3, [r7, #15]
 802b940:	687b      	ldr	r3, [r7, #4]
 802b942:	7bfa      	ldrb	r2, [r7, #15]
 802b944:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 802b946:	7dbb      	ldrb	r3, [r7, #22]
 802b948:	2be5      	cmp	r3, #229	; 0xe5
 802b94a:	d00e      	beq.n	802b96a <dir_read+0x80>
 802b94c:	7dbb      	ldrb	r3, [r7, #22]
 802b94e:	2b2e      	cmp	r3, #46	; 0x2e
 802b950:	d00b      	beq.n	802b96a <dir_read+0x80>
 802b952:	7bfb      	ldrb	r3, [r7, #15]
 802b954:	f023 0320 	bic.w	r3, r3, #32
 802b958:	2b08      	cmp	r3, #8
 802b95a:	bf0c      	ite	eq
 802b95c:	2301      	moveq	r3, #1
 802b95e:	2300      	movne	r3, #0
 802b960:	b2db      	uxtb	r3, r3
 802b962:	461a      	mov	r2, r3
 802b964:	683b      	ldr	r3, [r7, #0]
 802b966:	4293      	cmp	r3, r2
 802b968:	d002      	beq.n	802b970 <dir_read+0x86>
				ord = 0xFF;
 802b96a:	23ff      	movs	r3, #255	; 0xff
 802b96c:	757b      	strb	r3, [r7, #21]
 802b96e:	e044      	b.n	802b9fa <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 802b970:	7bfb      	ldrb	r3, [r7, #15]
 802b972:	2b0f      	cmp	r3, #15
 802b974:	d12f      	bne.n	802b9d6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 802b976:	7dbb      	ldrb	r3, [r7, #22]
 802b978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b97c:	2b00      	cmp	r3, #0
 802b97e:	d00d      	beq.n	802b99c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 802b980:	687b      	ldr	r3, [r7, #4]
 802b982:	6a1b      	ldr	r3, [r3, #32]
 802b984:	7b5b      	ldrb	r3, [r3, #13]
 802b986:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 802b988:	7dbb      	ldrb	r3, [r7, #22]
 802b98a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802b98e:	75bb      	strb	r3, [r7, #22]
 802b990:	7dbb      	ldrb	r3, [r7, #22]
 802b992:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 802b994:	687b      	ldr	r3, [r7, #4]
 802b996:	695a      	ldr	r2, [r3, #20]
 802b998:	687b      	ldr	r3, [r7, #4]
 802b99a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 802b99c:	7dba      	ldrb	r2, [r7, #22]
 802b99e:	7d7b      	ldrb	r3, [r7, #21]
 802b9a0:	429a      	cmp	r2, r3
 802b9a2:	d115      	bne.n	802b9d0 <dir_read+0xe6>
 802b9a4:	687b      	ldr	r3, [r7, #4]
 802b9a6:	6a1b      	ldr	r3, [r3, #32]
 802b9a8:	330d      	adds	r3, #13
 802b9aa:	781b      	ldrb	r3, [r3, #0]
 802b9ac:	7d3a      	ldrb	r2, [r7, #20]
 802b9ae:	429a      	cmp	r2, r3
 802b9b0:	d10e      	bne.n	802b9d0 <dir_read+0xe6>
 802b9b2:	693b      	ldr	r3, [r7, #16]
 802b9b4:	691a      	ldr	r2, [r3, #16]
 802b9b6:	687b      	ldr	r3, [r7, #4]
 802b9b8:	6a1b      	ldr	r3, [r3, #32]
 802b9ba:	4619      	mov	r1, r3
 802b9bc:	4610      	mov	r0, r2
 802b9be:	f7ff ff0f 	bl	802b7e0 <pick_lfn>
 802b9c2:	4603      	mov	r3, r0
 802b9c4:	2b00      	cmp	r3, #0
 802b9c6:	d003      	beq.n	802b9d0 <dir_read+0xe6>
 802b9c8:	7d7b      	ldrb	r3, [r7, #21]
 802b9ca:	3b01      	subs	r3, #1
 802b9cc:	b2db      	uxtb	r3, r3
 802b9ce:	e000      	b.n	802b9d2 <dir_read+0xe8>
 802b9d0:	23ff      	movs	r3, #255	; 0xff
 802b9d2:	757b      	strb	r3, [r7, #21]
 802b9d4:	e011      	b.n	802b9fa <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 802b9d6:	7d7b      	ldrb	r3, [r7, #21]
 802b9d8:	2b00      	cmp	r3, #0
 802b9da:	d109      	bne.n	802b9f0 <dir_read+0x106>
 802b9dc:	687b      	ldr	r3, [r7, #4]
 802b9de:	6a1b      	ldr	r3, [r3, #32]
 802b9e0:	4618      	mov	r0, r3
 802b9e2:	f7ff ff61 	bl	802b8a8 <sum_sfn>
 802b9e6:	4603      	mov	r3, r0
 802b9e8:	461a      	mov	r2, r3
 802b9ea:	7d3b      	ldrb	r3, [r7, #20]
 802b9ec:	4293      	cmp	r3, r2
 802b9ee:	d015      	beq.n	802ba1c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 802b9f0:	687b      	ldr	r3, [r7, #4]
 802b9f2:	f04f 32ff 	mov.w	r2, #4294967295
 802b9f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 802b9f8:	e010      	b.n	802ba1c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 802b9fa:	2100      	movs	r1, #0
 802b9fc:	6878      	ldr	r0, [r7, #4]
 802b9fe:	f7ff fd89 	bl	802b514 <dir_next>
 802ba02:	4603      	mov	r3, r0
 802ba04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 802ba06:	7dfb      	ldrb	r3, [r7, #23]
 802ba08:	2b00      	cmp	r3, #0
 802ba0a:	d109      	bne.n	802ba20 <dir_read+0x136>
	while (dp->sect) {
 802ba0c:	687b      	ldr	r3, [r7, #4]
 802ba0e:	69db      	ldr	r3, [r3, #28]
 802ba10:	2b00      	cmp	r3, #0
 802ba12:	f47f af79 	bne.w	802b908 <dir_read+0x1e>
 802ba16:	e004      	b.n	802ba22 <dir_read+0x138>
		if (res != FR_OK) break;
 802ba18:	bf00      	nop
 802ba1a:	e002      	b.n	802ba22 <dir_read+0x138>
					break;
 802ba1c:	bf00      	nop
 802ba1e:	e000      	b.n	802ba22 <dir_read+0x138>
		if (res != FR_OK) break;
 802ba20:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 802ba22:	7dfb      	ldrb	r3, [r7, #23]
 802ba24:	2b00      	cmp	r3, #0
 802ba26:	d002      	beq.n	802ba2e <dir_read+0x144>
 802ba28:	687b      	ldr	r3, [r7, #4]
 802ba2a:	2200      	movs	r2, #0
 802ba2c:	61da      	str	r2, [r3, #28]
	return res;
 802ba2e:	7dfb      	ldrb	r3, [r7, #23]
}
 802ba30:	4618      	mov	r0, r3
 802ba32:	3718      	adds	r7, #24
 802ba34:	46bd      	mov	sp, r7
 802ba36:	bd80      	pop	{r7, pc}

0802ba38 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 802ba38:	b580      	push	{r7, lr}
 802ba3a:	b086      	sub	sp, #24
 802ba3c:	af00      	add	r7, sp, #0
 802ba3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 802ba40:	687b      	ldr	r3, [r7, #4]
 802ba42:	681b      	ldr	r3, [r3, #0]
 802ba44:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 802ba46:	2100      	movs	r1, #0
 802ba48:	6878      	ldr	r0, [r7, #4]
 802ba4a:	f7ff fcda 	bl	802b402 <dir_sdi>
 802ba4e:	4603      	mov	r3, r0
 802ba50:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 802ba52:	7dfb      	ldrb	r3, [r7, #23]
 802ba54:	2b00      	cmp	r3, #0
 802ba56:	d001      	beq.n	802ba5c <dir_find+0x24>
 802ba58:	7dfb      	ldrb	r3, [r7, #23]
 802ba5a:	e0a9      	b.n	802bbb0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 802ba5c:	23ff      	movs	r3, #255	; 0xff
 802ba5e:	753b      	strb	r3, [r7, #20]
 802ba60:	7d3b      	ldrb	r3, [r7, #20]
 802ba62:	757b      	strb	r3, [r7, #21]
 802ba64:	687b      	ldr	r3, [r7, #4]
 802ba66:	f04f 32ff 	mov.w	r2, #4294967295
 802ba6a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 802ba6c:	687b      	ldr	r3, [r7, #4]
 802ba6e:	69db      	ldr	r3, [r3, #28]
 802ba70:	4619      	mov	r1, r3
 802ba72:	6938      	ldr	r0, [r7, #16]
 802ba74:	f7ff f9fa 	bl	802ae6c <move_window>
 802ba78:	4603      	mov	r3, r0
 802ba7a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 802ba7c:	7dfb      	ldrb	r3, [r7, #23]
 802ba7e:	2b00      	cmp	r3, #0
 802ba80:	f040 8090 	bne.w	802bba4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 802ba84:	687b      	ldr	r3, [r7, #4]
 802ba86:	6a1b      	ldr	r3, [r3, #32]
 802ba88:	781b      	ldrb	r3, [r3, #0]
 802ba8a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 802ba8c:	7dbb      	ldrb	r3, [r7, #22]
 802ba8e:	2b00      	cmp	r3, #0
 802ba90:	d102      	bne.n	802ba98 <dir_find+0x60>
 802ba92:	2304      	movs	r3, #4
 802ba94:	75fb      	strb	r3, [r7, #23]
 802ba96:	e08a      	b.n	802bbae <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 802ba98:	687b      	ldr	r3, [r7, #4]
 802ba9a:	6a1b      	ldr	r3, [r3, #32]
 802ba9c:	330b      	adds	r3, #11
 802ba9e:	781b      	ldrb	r3, [r3, #0]
 802baa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802baa4:	73fb      	strb	r3, [r7, #15]
 802baa6:	687b      	ldr	r3, [r7, #4]
 802baa8:	7bfa      	ldrb	r2, [r7, #15]
 802baaa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 802baac:	7dbb      	ldrb	r3, [r7, #22]
 802baae:	2be5      	cmp	r3, #229	; 0xe5
 802bab0:	d007      	beq.n	802bac2 <dir_find+0x8a>
 802bab2:	7bfb      	ldrb	r3, [r7, #15]
 802bab4:	f003 0308 	and.w	r3, r3, #8
 802bab8:	2b00      	cmp	r3, #0
 802baba:	d009      	beq.n	802bad0 <dir_find+0x98>
 802babc:	7bfb      	ldrb	r3, [r7, #15]
 802babe:	2b0f      	cmp	r3, #15
 802bac0:	d006      	beq.n	802bad0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 802bac2:	23ff      	movs	r3, #255	; 0xff
 802bac4:	757b      	strb	r3, [r7, #21]
 802bac6:	687b      	ldr	r3, [r7, #4]
 802bac8:	f04f 32ff 	mov.w	r2, #4294967295
 802bacc:	631a      	str	r2, [r3, #48]	; 0x30
 802bace:	e05e      	b.n	802bb8e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 802bad0:	7bfb      	ldrb	r3, [r7, #15]
 802bad2:	2b0f      	cmp	r3, #15
 802bad4:	d136      	bne.n	802bb44 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 802bad6:	687b      	ldr	r3, [r7, #4]
 802bad8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 802badc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bae0:	2b00      	cmp	r3, #0
 802bae2:	d154      	bne.n	802bb8e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 802bae4:	7dbb      	ldrb	r3, [r7, #22]
 802bae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802baea:	2b00      	cmp	r3, #0
 802baec:	d00d      	beq.n	802bb0a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 802baee:	687b      	ldr	r3, [r7, #4]
 802baf0:	6a1b      	ldr	r3, [r3, #32]
 802baf2:	7b5b      	ldrb	r3, [r3, #13]
 802baf4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 802baf6:	7dbb      	ldrb	r3, [r7, #22]
 802baf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802bafc:	75bb      	strb	r3, [r7, #22]
 802bafe:	7dbb      	ldrb	r3, [r7, #22]
 802bb00:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 802bb02:	687b      	ldr	r3, [r7, #4]
 802bb04:	695a      	ldr	r2, [r3, #20]
 802bb06:	687b      	ldr	r3, [r7, #4]
 802bb08:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 802bb0a:	7dba      	ldrb	r2, [r7, #22]
 802bb0c:	7d7b      	ldrb	r3, [r7, #21]
 802bb0e:	429a      	cmp	r2, r3
 802bb10:	d115      	bne.n	802bb3e <dir_find+0x106>
 802bb12:	687b      	ldr	r3, [r7, #4]
 802bb14:	6a1b      	ldr	r3, [r3, #32]
 802bb16:	330d      	adds	r3, #13
 802bb18:	781b      	ldrb	r3, [r3, #0]
 802bb1a:	7d3a      	ldrb	r2, [r7, #20]
 802bb1c:	429a      	cmp	r2, r3
 802bb1e:	d10e      	bne.n	802bb3e <dir_find+0x106>
 802bb20:	693b      	ldr	r3, [r7, #16]
 802bb22:	691a      	ldr	r2, [r3, #16]
 802bb24:	687b      	ldr	r3, [r7, #4]
 802bb26:	6a1b      	ldr	r3, [r3, #32]
 802bb28:	4619      	mov	r1, r3
 802bb2a:	4610      	mov	r0, r2
 802bb2c:	f7ff fde8 	bl	802b700 <cmp_lfn>
 802bb30:	4603      	mov	r3, r0
 802bb32:	2b00      	cmp	r3, #0
 802bb34:	d003      	beq.n	802bb3e <dir_find+0x106>
 802bb36:	7d7b      	ldrb	r3, [r7, #21]
 802bb38:	3b01      	subs	r3, #1
 802bb3a:	b2db      	uxtb	r3, r3
 802bb3c:	e000      	b.n	802bb40 <dir_find+0x108>
 802bb3e:	23ff      	movs	r3, #255	; 0xff
 802bb40:	757b      	strb	r3, [r7, #21]
 802bb42:	e024      	b.n	802bb8e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 802bb44:	7d7b      	ldrb	r3, [r7, #21]
 802bb46:	2b00      	cmp	r3, #0
 802bb48:	d109      	bne.n	802bb5e <dir_find+0x126>
 802bb4a:	687b      	ldr	r3, [r7, #4]
 802bb4c:	6a1b      	ldr	r3, [r3, #32]
 802bb4e:	4618      	mov	r0, r3
 802bb50:	f7ff feaa 	bl	802b8a8 <sum_sfn>
 802bb54:	4603      	mov	r3, r0
 802bb56:	461a      	mov	r2, r3
 802bb58:	7d3b      	ldrb	r3, [r7, #20]
 802bb5a:	4293      	cmp	r3, r2
 802bb5c:	d024      	beq.n	802bba8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 802bb5e:	687b      	ldr	r3, [r7, #4]
 802bb60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 802bb64:	f003 0301 	and.w	r3, r3, #1
 802bb68:	2b00      	cmp	r3, #0
 802bb6a:	d10a      	bne.n	802bb82 <dir_find+0x14a>
 802bb6c:	687b      	ldr	r3, [r7, #4]
 802bb6e:	6a18      	ldr	r0, [r3, #32]
 802bb70:	687b      	ldr	r3, [r7, #4]
 802bb72:	3324      	adds	r3, #36	; 0x24
 802bb74:	220b      	movs	r2, #11
 802bb76:	4619      	mov	r1, r3
 802bb78:	f7ff f840 	bl	802abfc <mem_cmp>
 802bb7c:	4603      	mov	r3, r0
 802bb7e:	2b00      	cmp	r3, #0
 802bb80:	d014      	beq.n	802bbac <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 802bb82:	23ff      	movs	r3, #255	; 0xff
 802bb84:	757b      	strb	r3, [r7, #21]
 802bb86:	687b      	ldr	r3, [r7, #4]
 802bb88:	f04f 32ff 	mov.w	r2, #4294967295
 802bb8c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 802bb8e:	2100      	movs	r1, #0
 802bb90:	6878      	ldr	r0, [r7, #4]
 802bb92:	f7ff fcbf 	bl	802b514 <dir_next>
 802bb96:	4603      	mov	r3, r0
 802bb98:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 802bb9a:	7dfb      	ldrb	r3, [r7, #23]
 802bb9c:	2b00      	cmp	r3, #0
 802bb9e:	f43f af65 	beq.w	802ba6c <dir_find+0x34>
 802bba2:	e004      	b.n	802bbae <dir_find+0x176>
		if (res != FR_OK) break;
 802bba4:	bf00      	nop
 802bba6:	e002      	b.n	802bbae <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 802bba8:	bf00      	nop
 802bbaa:	e000      	b.n	802bbae <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 802bbac:	bf00      	nop

	return res;
 802bbae:	7dfb      	ldrb	r3, [r7, #23]
}
 802bbb0:	4618      	mov	r0, r3
 802bbb2:	3718      	adds	r7, #24
 802bbb4:	46bd      	mov	sp, r7
 802bbb6:	bd80      	pop	{r7, pc}

0802bbb8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 802bbb8:	b580      	push	{r7, lr}
 802bbba:	b088      	sub	sp, #32
 802bbbc:	af00      	add	r7, sp, #0
 802bbbe:	6078      	str	r0, [r7, #4]
 802bbc0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 802bbc2:	687b      	ldr	r3, [r7, #4]
 802bbc4:	681b      	ldr	r3, [r3, #0]
 802bbc6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 802bbc8:	683b      	ldr	r3, [r7, #0]
 802bbca:	2200      	movs	r2, #0
 802bbcc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 802bbce:	687b      	ldr	r3, [r7, #4]
 802bbd0:	69db      	ldr	r3, [r3, #28]
 802bbd2:	2b00      	cmp	r3, #0
 802bbd4:	f000 80c9 	beq.w	802bd6a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 802bbd8:	687b      	ldr	r3, [r7, #4]
 802bbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 802bbe0:	d032      	beq.n	802bc48 <get_fileinfo+0x90>
			i = j = 0;
 802bbe2:	2300      	movs	r3, #0
 802bbe4:	61bb      	str	r3, [r7, #24]
 802bbe6:	69bb      	ldr	r3, [r7, #24]
 802bbe8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 802bbea:	e01b      	b.n	802bc24 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 802bbec:	89fb      	ldrh	r3, [r7, #14]
 802bbee:	2100      	movs	r1, #0
 802bbf0:	4618      	mov	r0, r3
 802bbf2:	f001 f931 	bl	802ce58 <ff_convert>
 802bbf6:	4603      	mov	r3, r0
 802bbf8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 802bbfa:	89fb      	ldrh	r3, [r7, #14]
 802bbfc:	2b00      	cmp	r3, #0
 802bbfe:	d102      	bne.n	802bc06 <get_fileinfo+0x4e>
 802bc00:	2300      	movs	r3, #0
 802bc02:	61fb      	str	r3, [r7, #28]
 802bc04:	e01a      	b.n	802bc3c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 802bc06:	69fb      	ldr	r3, [r7, #28]
 802bc08:	2bfe      	cmp	r3, #254	; 0xfe
 802bc0a:	d902      	bls.n	802bc12 <get_fileinfo+0x5a>
 802bc0c:	2300      	movs	r3, #0
 802bc0e:	61fb      	str	r3, [r7, #28]
 802bc10:	e014      	b.n	802bc3c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 802bc12:	69fb      	ldr	r3, [r7, #28]
 802bc14:	1c5a      	adds	r2, r3, #1
 802bc16:	61fa      	str	r2, [r7, #28]
 802bc18:	89fa      	ldrh	r2, [r7, #14]
 802bc1a:	b2d1      	uxtb	r1, r2
 802bc1c:	683a      	ldr	r2, [r7, #0]
 802bc1e:	4413      	add	r3, r2
 802bc20:	460a      	mov	r2, r1
 802bc22:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 802bc24:	693b      	ldr	r3, [r7, #16]
 802bc26:	691a      	ldr	r2, [r3, #16]
 802bc28:	69bb      	ldr	r3, [r7, #24]
 802bc2a:	1c59      	adds	r1, r3, #1
 802bc2c:	61b9      	str	r1, [r7, #24]
 802bc2e:	005b      	lsls	r3, r3, #1
 802bc30:	4413      	add	r3, r2
 802bc32:	881b      	ldrh	r3, [r3, #0]
 802bc34:	81fb      	strh	r3, [r7, #14]
 802bc36:	89fb      	ldrh	r3, [r7, #14]
 802bc38:	2b00      	cmp	r3, #0
 802bc3a:	d1d7      	bne.n	802bbec <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 802bc3c:	683a      	ldr	r2, [r7, #0]
 802bc3e:	69fb      	ldr	r3, [r7, #28]
 802bc40:	4413      	add	r3, r2
 802bc42:	3316      	adds	r3, #22
 802bc44:	2200      	movs	r2, #0
 802bc46:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 802bc48:	2300      	movs	r3, #0
 802bc4a:	61bb      	str	r3, [r7, #24]
 802bc4c:	69bb      	ldr	r3, [r7, #24]
 802bc4e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 802bc50:	683a      	ldr	r2, [r7, #0]
 802bc52:	69fb      	ldr	r3, [r7, #28]
 802bc54:	4413      	add	r3, r2
 802bc56:	3316      	adds	r3, #22
 802bc58:	781b      	ldrb	r3, [r3, #0]
 802bc5a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 802bc5c:	e04c      	b.n	802bcf8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 802bc5e:	687b      	ldr	r3, [r7, #4]
 802bc60:	6a1a      	ldr	r2, [r3, #32]
 802bc62:	69fb      	ldr	r3, [r7, #28]
 802bc64:	1c59      	adds	r1, r3, #1
 802bc66:	61f9      	str	r1, [r7, #28]
 802bc68:	4413      	add	r3, r2
 802bc6a:	781b      	ldrb	r3, [r3, #0]
 802bc6c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 802bc6e:	7dfb      	ldrb	r3, [r7, #23]
 802bc70:	2b20      	cmp	r3, #32
 802bc72:	d100      	bne.n	802bc76 <get_fileinfo+0xbe>
 802bc74:	e040      	b.n	802bcf8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 802bc76:	7dfb      	ldrb	r3, [r7, #23]
 802bc78:	2b05      	cmp	r3, #5
 802bc7a:	d101      	bne.n	802bc80 <get_fileinfo+0xc8>
 802bc7c:	23e5      	movs	r3, #229	; 0xe5
 802bc7e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 802bc80:	69fb      	ldr	r3, [r7, #28]
 802bc82:	2b09      	cmp	r3, #9
 802bc84:	d10f      	bne.n	802bca6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 802bc86:	89bb      	ldrh	r3, [r7, #12]
 802bc88:	2b00      	cmp	r3, #0
 802bc8a:	d105      	bne.n	802bc98 <get_fileinfo+0xe0>
 802bc8c:	683a      	ldr	r2, [r7, #0]
 802bc8e:	69bb      	ldr	r3, [r7, #24]
 802bc90:	4413      	add	r3, r2
 802bc92:	3316      	adds	r3, #22
 802bc94:	222e      	movs	r2, #46	; 0x2e
 802bc96:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 802bc98:	69bb      	ldr	r3, [r7, #24]
 802bc9a:	1c5a      	adds	r2, r3, #1
 802bc9c:	61ba      	str	r2, [r7, #24]
 802bc9e:	683a      	ldr	r2, [r7, #0]
 802bca0:	4413      	add	r3, r2
 802bca2:	222e      	movs	r2, #46	; 0x2e
 802bca4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 802bca6:	683a      	ldr	r2, [r7, #0]
 802bca8:	69bb      	ldr	r3, [r7, #24]
 802bcaa:	4413      	add	r3, r2
 802bcac:	3309      	adds	r3, #9
 802bcae:	7dfa      	ldrb	r2, [r7, #23]
 802bcb0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 802bcb2:	89bb      	ldrh	r3, [r7, #12]
 802bcb4:	2b00      	cmp	r3, #0
 802bcb6:	d11c      	bne.n	802bcf2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 802bcb8:	7dfb      	ldrb	r3, [r7, #23]
 802bcba:	2b40      	cmp	r3, #64	; 0x40
 802bcbc:	d913      	bls.n	802bce6 <get_fileinfo+0x12e>
 802bcbe:	7dfb      	ldrb	r3, [r7, #23]
 802bcc0:	2b5a      	cmp	r3, #90	; 0x5a
 802bcc2:	d810      	bhi.n	802bce6 <get_fileinfo+0x12e>
 802bcc4:	687b      	ldr	r3, [r7, #4]
 802bcc6:	6a1b      	ldr	r3, [r3, #32]
 802bcc8:	330c      	adds	r3, #12
 802bcca:	781b      	ldrb	r3, [r3, #0]
 802bccc:	461a      	mov	r2, r3
 802bcce:	69fb      	ldr	r3, [r7, #28]
 802bcd0:	2b08      	cmp	r3, #8
 802bcd2:	d901      	bls.n	802bcd8 <get_fileinfo+0x120>
 802bcd4:	2310      	movs	r3, #16
 802bcd6:	e000      	b.n	802bcda <get_fileinfo+0x122>
 802bcd8:	2308      	movs	r3, #8
 802bcda:	4013      	ands	r3, r2
 802bcdc:	2b00      	cmp	r3, #0
 802bcde:	d002      	beq.n	802bce6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 802bce0:	7dfb      	ldrb	r3, [r7, #23]
 802bce2:	3320      	adds	r3, #32
 802bce4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 802bce6:	683a      	ldr	r2, [r7, #0]
 802bce8:	69bb      	ldr	r3, [r7, #24]
 802bcea:	4413      	add	r3, r2
 802bcec:	3316      	adds	r3, #22
 802bcee:	7dfa      	ldrb	r2, [r7, #23]
 802bcf0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 802bcf2:	69bb      	ldr	r3, [r7, #24]
 802bcf4:	3301      	adds	r3, #1
 802bcf6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 802bcf8:	69fb      	ldr	r3, [r7, #28]
 802bcfa:	2b0a      	cmp	r3, #10
 802bcfc:	d9af      	bls.n	802bc5e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 802bcfe:	89bb      	ldrh	r3, [r7, #12]
 802bd00:	2b00      	cmp	r3, #0
 802bd02:	d10d      	bne.n	802bd20 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 802bd04:	683a      	ldr	r2, [r7, #0]
 802bd06:	69bb      	ldr	r3, [r7, #24]
 802bd08:	4413      	add	r3, r2
 802bd0a:	3316      	adds	r3, #22
 802bd0c:	2200      	movs	r2, #0
 802bd0e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 802bd10:	687b      	ldr	r3, [r7, #4]
 802bd12:	6a1b      	ldr	r3, [r3, #32]
 802bd14:	330c      	adds	r3, #12
 802bd16:	781b      	ldrb	r3, [r3, #0]
 802bd18:	2b00      	cmp	r3, #0
 802bd1a:	d101      	bne.n	802bd20 <get_fileinfo+0x168>
 802bd1c:	2300      	movs	r3, #0
 802bd1e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 802bd20:	683a      	ldr	r2, [r7, #0]
 802bd22:	69bb      	ldr	r3, [r7, #24]
 802bd24:	4413      	add	r3, r2
 802bd26:	3309      	adds	r3, #9
 802bd28:	2200      	movs	r2, #0
 802bd2a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 802bd2c:	687b      	ldr	r3, [r7, #4]
 802bd2e:	6a1b      	ldr	r3, [r3, #32]
 802bd30:	7ada      	ldrb	r2, [r3, #11]
 802bd32:	683b      	ldr	r3, [r7, #0]
 802bd34:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 802bd36:	687b      	ldr	r3, [r7, #4]
 802bd38:	6a1b      	ldr	r3, [r3, #32]
 802bd3a:	331c      	adds	r3, #28
 802bd3c:	4618      	mov	r0, r3
 802bd3e:	f7fe fed9 	bl	802aaf4 <ld_dword>
 802bd42:	4602      	mov	r2, r0
 802bd44:	683b      	ldr	r3, [r7, #0]
 802bd46:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 802bd48:	687b      	ldr	r3, [r7, #4]
 802bd4a:	6a1b      	ldr	r3, [r3, #32]
 802bd4c:	3316      	adds	r3, #22
 802bd4e:	4618      	mov	r0, r3
 802bd50:	f7fe fed0 	bl	802aaf4 <ld_dword>
 802bd54:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 802bd56:	68bb      	ldr	r3, [r7, #8]
 802bd58:	b29a      	uxth	r2, r3
 802bd5a:	683b      	ldr	r3, [r7, #0]
 802bd5c:	80da      	strh	r2, [r3, #6]
 802bd5e:	68bb      	ldr	r3, [r7, #8]
 802bd60:	0c1b      	lsrs	r3, r3, #16
 802bd62:	b29a      	uxth	r2, r3
 802bd64:	683b      	ldr	r3, [r7, #0]
 802bd66:	809a      	strh	r2, [r3, #4]
 802bd68:	e000      	b.n	802bd6c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 802bd6a:	bf00      	nop
}
 802bd6c:	3720      	adds	r7, #32
 802bd6e:	46bd      	mov	sp, r7
 802bd70:	bd80      	pop	{r7, pc}
	...

0802bd74 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 802bd74:	b480      	push	{r7}
 802bd76:	b085      	sub	sp, #20
 802bd78:	af00      	add	r7, sp, #0
 802bd7a:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 802bd7c:	687b      	ldr	r3, [r7, #4]
 802bd7e:	681b      	ldr	r3, [r3, #0]
 802bd80:	1c59      	adds	r1, r3, #1
 802bd82:	687a      	ldr	r2, [r7, #4]
 802bd84:	6011      	str	r1, [r2, #0]
 802bd86:	781b      	ldrb	r3, [r3, #0]
 802bd88:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 802bd8a:	89fb      	ldrh	r3, [r7, #14]
 802bd8c:	2b60      	cmp	r3, #96	; 0x60
 802bd8e:	d905      	bls.n	802bd9c <get_achar+0x28>
 802bd90:	89fb      	ldrh	r3, [r7, #14]
 802bd92:	2b7a      	cmp	r3, #122	; 0x7a
 802bd94:	d802      	bhi.n	802bd9c <get_achar+0x28>
 802bd96:	89fb      	ldrh	r3, [r7, #14]
 802bd98:	3b20      	subs	r3, #32
 802bd9a:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 802bd9c:	89fb      	ldrh	r3, [r7, #14]
 802bd9e:	2b7f      	cmp	r3, #127	; 0x7f
 802bda0:	d904      	bls.n	802bdac <get_achar+0x38>
 802bda2:	89fb      	ldrh	r3, [r7, #14]
 802bda4:	3b80      	subs	r3, #128	; 0x80
 802bda6:	4a05      	ldr	r2, [pc, #20]	; (802bdbc <get_achar+0x48>)
 802bda8:	5cd3      	ldrb	r3, [r2, r3]
 802bdaa:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 802bdac:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 802bdae:	4618      	mov	r0, r3
 802bdb0:	3714      	adds	r7, #20
 802bdb2:	46bd      	mov	sp, r7
 802bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bdb8:	4770      	bx	lr
 802bdba:	bf00      	nop
 802bdbc:	080308d0 	.word	0x080308d0

0802bdc0 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 802bdc0:	b580      	push	{r7, lr}
 802bdc2:	b08a      	sub	sp, #40	; 0x28
 802bdc4:	af00      	add	r7, sp, #0
 802bdc6:	60f8      	str	r0, [r7, #12]
 802bdc8:	60b9      	str	r1, [r7, #8]
 802bdca:	607a      	str	r2, [r7, #4]
 802bdcc:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 802bdce:	e009      	b.n	802bde4 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 802bdd0:	f107 0308 	add.w	r3, r7, #8
 802bdd4:	4618      	mov	r0, r3
 802bdd6:	f7ff ffcd 	bl	802bd74 <get_achar>
 802bdda:	4603      	mov	r3, r0
 802bddc:	2b00      	cmp	r3, #0
 802bdde:	d101      	bne.n	802bde4 <pattern_matching+0x24>
 802bde0:	2300      	movs	r3, #0
 802bde2:	e064      	b.n	802beae <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 802bde4:	687b      	ldr	r3, [r7, #4]
 802bde6:	1e5a      	subs	r2, r3, #1
 802bde8:	607a      	str	r2, [r7, #4]
 802bdea:	2b00      	cmp	r3, #0
 802bdec:	d1f0      	bne.n	802bdd0 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 802bdee:	68fb      	ldr	r3, [r7, #12]
 802bdf0:	781b      	ldrb	r3, [r3, #0]
 802bdf2:	2b00      	cmp	r3, #0
 802bdf4:	d104      	bne.n	802be00 <pattern_matching+0x40>
 802bdf6:	683b      	ldr	r3, [r7, #0]
 802bdf8:	2b00      	cmp	r3, #0
 802bdfa:	d001      	beq.n	802be00 <pattern_matching+0x40>
 802bdfc:	2301      	movs	r3, #1
 802bdfe:	e056      	b.n	802beae <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 802be00:	68fb      	ldr	r3, [r7, #12]
 802be02:	617b      	str	r3, [r7, #20]
 802be04:	68bb      	ldr	r3, [r7, #8]
 802be06:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 802be08:	697b      	ldr	r3, [r7, #20]
 802be0a:	781b      	ldrb	r3, [r3, #0]
 802be0c:	2b3f      	cmp	r3, #63	; 0x3f
 802be0e:	d003      	beq.n	802be18 <pattern_matching+0x58>
 802be10:	697b      	ldr	r3, [r7, #20]
 802be12:	781b      	ldrb	r3, [r3, #0]
 802be14:	2b2a      	cmp	r3, #42	; 0x2a
 802be16:	d126      	bne.n	802be66 <pattern_matching+0xa6>
				nm = nx = 0;
 802be18:	2300      	movs	r3, #0
 802be1a:	61fb      	str	r3, [r7, #28]
 802be1c:	69fb      	ldr	r3, [r7, #28]
 802be1e:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 802be20:	697b      	ldr	r3, [r7, #20]
 802be22:	1c5a      	adds	r2, r3, #1
 802be24:	617a      	str	r2, [r7, #20]
 802be26:	781b      	ldrb	r3, [r3, #0]
 802be28:	2b3f      	cmp	r3, #63	; 0x3f
 802be2a:	d103      	bne.n	802be34 <pattern_matching+0x74>
 802be2c:	6a3b      	ldr	r3, [r7, #32]
 802be2e:	3301      	adds	r3, #1
 802be30:	623b      	str	r3, [r7, #32]
 802be32:	e001      	b.n	802be38 <pattern_matching+0x78>
 802be34:	2301      	movs	r3, #1
 802be36:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 802be38:	697b      	ldr	r3, [r7, #20]
 802be3a:	781b      	ldrb	r3, [r3, #0]
 802be3c:	2b3f      	cmp	r3, #63	; 0x3f
 802be3e:	d0ef      	beq.n	802be20 <pattern_matching+0x60>
 802be40:	697b      	ldr	r3, [r7, #20]
 802be42:	781b      	ldrb	r3, [r3, #0]
 802be44:	2b2a      	cmp	r3, #42	; 0x2a
 802be46:	d0eb      	beq.n	802be20 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 802be48:	6978      	ldr	r0, [r7, #20]
 802be4a:	6939      	ldr	r1, [r7, #16]
 802be4c:	69fb      	ldr	r3, [r7, #28]
 802be4e:	6a3a      	ldr	r2, [r7, #32]
 802be50:	f7ff ffb6 	bl	802bdc0 <pattern_matching>
 802be54:	4603      	mov	r3, r0
 802be56:	2b00      	cmp	r3, #0
 802be58:	d001      	beq.n	802be5e <pattern_matching+0x9e>
 802be5a:	2301      	movs	r3, #1
 802be5c:	e027      	b.n	802beae <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 802be5e:	693b      	ldr	r3, [r7, #16]
 802be60:	781b      	ldrb	r3, [r3, #0]
 802be62:	84fb      	strh	r3, [r7, #38]	; 0x26
 802be64:	e017      	b.n	802be96 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 802be66:	f107 0314 	add.w	r3, r7, #20
 802be6a:	4618      	mov	r0, r3
 802be6c:	f7ff ff82 	bl	802bd74 <get_achar>
 802be70:	4603      	mov	r3, r0
 802be72:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 802be74:	f107 0310 	add.w	r3, r7, #16
 802be78:	4618      	mov	r0, r3
 802be7a:	f7ff ff7b 	bl	802bd74 <get_achar>
 802be7e:	4603      	mov	r3, r0
 802be80:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 802be82:	8b7a      	ldrh	r2, [r7, #26]
 802be84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802be86:	429a      	cmp	r2, r3
 802be88:	d104      	bne.n	802be94 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 802be8a:	8b7b      	ldrh	r3, [r7, #26]
 802be8c:	2b00      	cmp	r3, #0
 802be8e:	d1bb      	bne.n	802be08 <pattern_matching+0x48>
 802be90:	2301      	movs	r3, #1
 802be92:	e00c      	b.n	802beae <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 802be94:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 802be96:	f107 0308 	add.w	r3, r7, #8
 802be9a:	4618      	mov	r0, r3
 802be9c:	f7ff ff6a 	bl	802bd74 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 802bea0:	683b      	ldr	r3, [r7, #0]
 802bea2:	2b00      	cmp	r3, #0
 802bea4:	d002      	beq.n	802beac <pattern_matching+0xec>
 802bea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802bea8:	2b00      	cmp	r3, #0
 802beaa:	d1a9      	bne.n	802be00 <pattern_matching+0x40>

	return 0;
 802beac:	2300      	movs	r3, #0
}
 802beae:	4618      	mov	r0, r3
 802beb0:	3728      	adds	r7, #40	; 0x28
 802beb2:	46bd      	mov	sp, r7
 802beb4:	bd80      	pop	{r7, pc}
	...

0802beb8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 802beb8:	b580      	push	{r7, lr}
 802beba:	b08a      	sub	sp, #40	; 0x28
 802bebc:	af00      	add	r7, sp, #0
 802bebe:	6078      	str	r0, [r7, #4]
 802bec0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 802bec2:	683b      	ldr	r3, [r7, #0]
 802bec4:	681b      	ldr	r3, [r3, #0]
 802bec6:	613b      	str	r3, [r7, #16]
 802bec8:	687b      	ldr	r3, [r7, #4]
 802beca:	681b      	ldr	r3, [r3, #0]
 802becc:	691b      	ldr	r3, [r3, #16]
 802bece:	60fb      	str	r3, [r7, #12]
 802bed0:	2300      	movs	r3, #0
 802bed2:	617b      	str	r3, [r7, #20]
 802bed4:	697b      	ldr	r3, [r7, #20]
 802bed6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 802bed8:	69bb      	ldr	r3, [r7, #24]
 802beda:	1c5a      	adds	r2, r3, #1
 802bedc:	61ba      	str	r2, [r7, #24]
 802bede:	693a      	ldr	r2, [r7, #16]
 802bee0:	4413      	add	r3, r2
 802bee2:	781b      	ldrb	r3, [r3, #0]
 802bee4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 802bee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802bee8:	2b1f      	cmp	r3, #31
 802beea:	d940      	bls.n	802bf6e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 802beec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802beee:	2b2f      	cmp	r3, #47	; 0x2f
 802bef0:	d006      	beq.n	802bf00 <create_name+0x48>
 802bef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802bef4:	2b5c      	cmp	r3, #92	; 0x5c
 802bef6:	d110      	bne.n	802bf1a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 802bef8:	e002      	b.n	802bf00 <create_name+0x48>
 802befa:	69bb      	ldr	r3, [r7, #24]
 802befc:	3301      	adds	r3, #1
 802befe:	61bb      	str	r3, [r7, #24]
 802bf00:	693a      	ldr	r2, [r7, #16]
 802bf02:	69bb      	ldr	r3, [r7, #24]
 802bf04:	4413      	add	r3, r2
 802bf06:	781b      	ldrb	r3, [r3, #0]
 802bf08:	2b2f      	cmp	r3, #47	; 0x2f
 802bf0a:	d0f6      	beq.n	802befa <create_name+0x42>
 802bf0c:	693a      	ldr	r2, [r7, #16]
 802bf0e:	69bb      	ldr	r3, [r7, #24]
 802bf10:	4413      	add	r3, r2
 802bf12:	781b      	ldrb	r3, [r3, #0]
 802bf14:	2b5c      	cmp	r3, #92	; 0x5c
 802bf16:	d0f0      	beq.n	802befa <create_name+0x42>
			break;
 802bf18:	e02a      	b.n	802bf70 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 802bf1a:	697b      	ldr	r3, [r7, #20]
 802bf1c:	2bfe      	cmp	r3, #254	; 0xfe
 802bf1e:	d901      	bls.n	802bf24 <create_name+0x6c>
 802bf20:	2306      	movs	r3, #6
 802bf22:	e1cb      	b.n	802c2bc <create_name+0x404>
#if !_LFN_UNICODE
		w &= 0xFF;
 802bf24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802bf26:	b2db      	uxtb	r3, r3
 802bf28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 802bf2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802bf2c:	2101      	movs	r1, #1
 802bf2e:	4618      	mov	r0, r3
 802bf30:	f000 ff92 	bl	802ce58 <ff_convert>
 802bf34:	4603      	mov	r3, r0
 802bf36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 802bf38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802bf3a:	2b00      	cmp	r3, #0
 802bf3c:	d101      	bne.n	802bf42 <create_name+0x8a>
 802bf3e:	2306      	movs	r3, #6
 802bf40:	e1bc      	b.n	802c2bc <create_name+0x404>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 802bf42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802bf44:	2b7f      	cmp	r3, #127	; 0x7f
 802bf46:	d809      	bhi.n	802bf5c <create_name+0xa4>
 802bf48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802bf4a:	4619      	mov	r1, r3
 802bf4c:	48a5      	ldr	r0, [pc, #660]	; (802c1e4 <create_name+0x32c>)
 802bf4e:	f7fe fe7c 	bl	802ac4a <chk_chr>
 802bf52:	4603      	mov	r3, r0
 802bf54:	2b00      	cmp	r3, #0
 802bf56:	d001      	beq.n	802bf5c <create_name+0xa4>
 802bf58:	2306      	movs	r3, #6
 802bf5a:	e1af      	b.n	802c2bc <create_name+0x404>
		lfn[di++] = w;					/* Store the Unicode character */
 802bf5c:	697b      	ldr	r3, [r7, #20]
 802bf5e:	1c5a      	adds	r2, r3, #1
 802bf60:	617a      	str	r2, [r7, #20]
 802bf62:	005b      	lsls	r3, r3, #1
 802bf64:	68fa      	ldr	r2, [r7, #12]
 802bf66:	4413      	add	r3, r2
 802bf68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802bf6a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 802bf6c:	e7b4      	b.n	802bed8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 802bf6e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 802bf70:	693a      	ldr	r2, [r7, #16]
 802bf72:	69bb      	ldr	r3, [r7, #24]
 802bf74:	441a      	add	r2, r3
 802bf76:	683b      	ldr	r3, [r7, #0]
 802bf78:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 802bf7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802bf7c:	2b1f      	cmp	r3, #31
 802bf7e:	d801      	bhi.n	802bf84 <create_name+0xcc>
 802bf80:	2304      	movs	r3, #4
 802bf82:	e000      	b.n	802bf86 <create_name+0xce>
 802bf84:	2300      	movs	r3, #0
 802bf86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 802bf8a:	697b      	ldr	r3, [r7, #20]
 802bf8c:	2b01      	cmp	r3, #1
 802bf8e:	d109      	bne.n	802bfa4 <create_name+0xec>
 802bf90:	697a      	ldr	r2, [r7, #20]
 802bf92:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802bf96:	4413      	add	r3, r2
 802bf98:	005b      	lsls	r3, r3, #1
 802bf9a:	68fa      	ldr	r2, [r7, #12]
 802bf9c:	4413      	add	r3, r2
 802bf9e:	881b      	ldrh	r3, [r3, #0]
 802bfa0:	2b2e      	cmp	r3, #46	; 0x2e
 802bfa2:	d015      	beq.n	802bfd0 <create_name+0x118>
 802bfa4:	697b      	ldr	r3, [r7, #20]
 802bfa6:	2b02      	cmp	r3, #2
 802bfa8:	d14d      	bne.n	802c046 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 802bfaa:	697a      	ldr	r2, [r7, #20]
 802bfac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802bfb0:	4413      	add	r3, r2
 802bfb2:	005b      	lsls	r3, r3, #1
 802bfb4:	68fa      	ldr	r2, [r7, #12]
 802bfb6:	4413      	add	r3, r2
 802bfb8:	881b      	ldrh	r3, [r3, #0]
 802bfba:	2b2e      	cmp	r3, #46	; 0x2e
 802bfbc:	d143      	bne.n	802c046 <create_name+0x18e>
 802bfbe:	697a      	ldr	r2, [r7, #20]
 802bfc0:	4b89      	ldr	r3, [pc, #548]	; (802c1e8 <create_name+0x330>)
 802bfc2:	4413      	add	r3, r2
 802bfc4:	005b      	lsls	r3, r3, #1
 802bfc6:	68fa      	ldr	r2, [r7, #12]
 802bfc8:	4413      	add	r3, r2
 802bfca:	881b      	ldrh	r3, [r3, #0]
 802bfcc:	2b2e      	cmp	r3, #46	; 0x2e
 802bfce:	d13a      	bne.n	802c046 <create_name+0x18e>
		lfn[di] = 0;
 802bfd0:	697b      	ldr	r3, [r7, #20]
 802bfd2:	005b      	lsls	r3, r3, #1
 802bfd4:	68fa      	ldr	r2, [r7, #12]
 802bfd6:	4413      	add	r3, r2
 802bfd8:	2200      	movs	r2, #0
 802bfda:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 802bfdc:	2300      	movs	r3, #0
 802bfde:	623b      	str	r3, [r7, #32]
 802bfe0:	e00f      	b.n	802c002 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 802bfe2:	6a3a      	ldr	r2, [r7, #32]
 802bfe4:	697b      	ldr	r3, [r7, #20]
 802bfe6:	429a      	cmp	r2, r3
 802bfe8:	d201      	bcs.n	802bfee <create_name+0x136>
 802bfea:	212e      	movs	r1, #46	; 0x2e
 802bfec:	e000      	b.n	802bff0 <create_name+0x138>
 802bfee:	2120      	movs	r1, #32
 802bff0:	687a      	ldr	r2, [r7, #4]
 802bff2:	6a3b      	ldr	r3, [r7, #32]
 802bff4:	4413      	add	r3, r2
 802bff6:	3324      	adds	r3, #36	; 0x24
 802bff8:	460a      	mov	r2, r1
 802bffa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 802bffc:	6a3b      	ldr	r3, [r7, #32]
 802bffe:	3301      	adds	r3, #1
 802c000:	623b      	str	r3, [r7, #32]
 802c002:	6a3b      	ldr	r3, [r7, #32]
 802c004:	2b0a      	cmp	r3, #10
 802c006:	d9ec      	bls.n	802bfe2 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 802c008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c00c:	f043 0320 	orr.w	r3, r3, #32
 802c010:	b2d9      	uxtb	r1, r3
 802c012:	687a      	ldr	r2, [r7, #4]
 802c014:	6a3b      	ldr	r3, [r7, #32]
 802c016:	4413      	add	r3, r2
 802c018:	3324      	adds	r3, #36	; 0x24
 802c01a:	460a      	mov	r2, r1
 802c01c:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 802c01e:	2300      	movs	r3, #0
 802c020:	e14c      	b.n	802c2bc <create_name+0x404>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 802c022:	697a      	ldr	r2, [r7, #20]
 802c024:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802c028:	4413      	add	r3, r2
 802c02a:	005b      	lsls	r3, r3, #1
 802c02c:	68fa      	ldr	r2, [r7, #12]
 802c02e:	4413      	add	r3, r2
 802c030:	881b      	ldrh	r3, [r3, #0]
 802c032:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 802c034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c036:	2b20      	cmp	r3, #32
 802c038:	d002      	beq.n	802c040 <create_name+0x188>
 802c03a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c03c:	2b2e      	cmp	r3, #46	; 0x2e
 802c03e:	d106      	bne.n	802c04e <create_name+0x196>
		di--;
 802c040:	697b      	ldr	r3, [r7, #20]
 802c042:	3b01      	subs	r3, #1
 802c044:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 802c046:	697b      	ldr	r3, [r7, #20]
 802c048:	2b00      	cmp	r3, #0
 802c04a:	d1ea      	bne.n	802c022 <create_name+0x16a>
 802c04c:	e000      	b.n	802c050 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 802c04e:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 802c050:	697b      	ldr	r3, [r7, #20]
 802c052:	005b      	lsls	r3, r3, #1
 802c054:	68fa      	ldr	r2, [r7, #12]
 802c056:	4413      	add	r3, r2
 802c058:	2200      	movs	r2, #0
 802c05a:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 802c05c:	697b      	ldr	r3, [r7, #20]
 802c05e:	2b00      	cmp	r3, #0
 802c060:	d101      	bne.n	802c066 <create_name+0x1ae>
 802c062:	2306      	movs	r3, #6
 802c064:	e12a      	b.n	802c2bc <create_name+0x404>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 802c066:	687b      	ldr	r3, [r7, #4]
 802c068:	3324      	adds	r3, #36	; 0x24
 802c06a:	220b      	movs	r2, #11
 802c06c:	2120      	movs	r1, #32
 802c06e:	4618      	mov	r0, r3
 802c070:	f7fe fdaa 	bl	802abc8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 802c074:	2300      	movs	r3, #0
 802c076:	61bb      	str	r3, [r7, #24]
 802c078:	e002      	b.n	802c080 <create_name+0x1c8>
 802c07a:	69bb      	ldr	r3, [r7, #24]
 802c07c:	3301      	adds	r3, #1
 802c07e:	61bb      	str	r3, [r7, #24]
 802c080:	69bb      	ldr	r3, [r7, #24]
 802c082:	005b      	lsls	r3, r3, #1
 802c084:	68fa      	ldr	r2, [r7, #12]
 802c086:	4413      	add	r3, r2
 802c088:	881b      	ldrh	r3, [r3, #0]
 802c08a:	2b20      	cmp	r3, #32
 802c08c:	d0f5      	beq.n	802c07a <create_name+0x1c2>
 802c08e:	69bb      	ldr	r3, [r7, #24]
 802c090:	005b      	lsls	r3, r3, #1
 802c092:	68fa      	ldr	r2, [r7, #12]
 802c094:	4413      	add	r3, r2
 802c096:	881b      	ldrh	r3, [r3, #0]
 802c098:	2b2e      	cmp	r3, #46	; 0x2e
 802c09a:	d0ee      	beq.n	802c07a <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 802c09c:	69bb      	ldr	r3, [r7, #24]
 802c09e:	2b00      	cmp	r3, #0
 802c0a0:	d009      	beq.n	802c0b6 <create_name+0x1fe>
 802c0a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c0a6:	f043 0303 	orr.w	r3, r3, #3
 802c0aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 802c0ae:	e002      	b.n	802c0b6 <create_name+0x1fe>
 802c0b0:	697b      	ldr	r3, [r7, #20]
 802c0b2:	3b01      	subs	r3, #1
 802c0b4:	617b      	str	r3, [r7, #20]
 802c0b6:	697b      	ldr	r3, [r7, #20]
 802c0b8:	2b00      	cmp	r3, #0
 802c0ba:	d009      	beq.n	802c0d0 <create_name+0x218>
 802c0bc:	697a      	ldr	r2, [r7, #20]
 802c0be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802c0c2:	4413      	add	r3, r2
 802c0c4:	005b      	lsls	r3, r3, #1
 802c0c6:	68fa      	ldr	r2, [r7, #12]
 802c0c8:	4413      	add	r3, r2
 802c0ca:	881b      	ldrh	r3, [r3, #0]
 802c0cc:	2b2e      	cmp	r3, #46	; 0x2e
 802c0ce:	d1ef      	bne.n	802c0b0 <create_name+0x1f8>

	i = b = 0; ni = 8;
 802c0d0:	2300      	movs	r3, #0
 802c0d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802c0d6:	2300      	movs	r3, #0
 802c0d8:	623b      	str	r3, [r7, #32]
 802c0da:	2308      	movs	r3, #8
 802c0dc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 802c0de:	69bb      	ldr	r3, [r7, #24]
 802c0e0:	1c5a      	adds	r2, r3, #1
 802c0e2:	61ba      	str	r2, [r7, #24]
 802c0e4:	005b      	lsls	r3, r3, #1
 802c0e6:	68fa      	ldr	r2, [r7, #12]
 802c0e8:	4413      	add	r3, r2
 802c0ea:	881b      	ldrh	r3, [r3, #0]
 802c0ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 802c0ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c0f0:	2b00      	cmp	r3, #0
 802c0f2:	f000 8099 	beq.w	802c228 <create_name+0x370>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 802c0f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c0f8:	2b20      	cmp	r3, #32
 802c0fa:	d006      	beq.n	802c10a <create_name+0x252>
 802c0fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c0fe:	2b2e      	cmp	r3, #46	; 0x2e
 802c100:	d10a      	bne.n	802c118 <create_name+0x260>
 802c102:	69ba      	ldr	r2, [r7, #24]
 802c104:	697b      	ldr	r3, [r7, #20]
 802c106:	429a      	cmp	r2, r3
 802c108:	d006      	beq.n	802c118 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 802c10a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c10e:	f043 0303 	orr.w	r3, r3, #3
 802c112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802c116:	e086      	b.n	802c226 <create_name+0x36e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 802c118:	6a3a      	ldr	r2, [r7, #32]
 802c11a:	69fb      	ldr	r3, [r7, #28]
 802c11c:	429a      	cmp	r2, r3
 802c11e:	d203      	bcs.n	802c128 <create_name+0x270>
 802c120:	69ba      	ldr	r2, [r7, #24]
 802c122:	697b      	ldr	r3, [r7, #20]
 802c124:	429a      	cmp	r2, r3
 802c126:	d123      	bne.n	802c170 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 802c128:	69fb      	ldr	r3, [r7, #28]
 802c12a:	2b0b      	cmp	r3, #11
 802c12c:	d106      	bne.n	802c13c <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 802c12e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c132:	f043 0303 	orr.w	r3, r3, #3
 802c136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802c13a:	e078      	b.n	802c22e <create_name+0x376>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 802c13c:	69ba      	ldr	r2, [r7, #24]
 802c13e:	697b      	ldr	r3, [r7, #20]
 802c140:	429a      	cmp	r2, r3
 802c142:	d005      	beq.n	802c150 <create_name+0x298>
 802c144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c148:	f043 0303 	orr.w	r3, r3, #3
 802c14c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 802c150:	69ba      	ldr	r2, [r7, #24]
 802c152:	697b      	ldr	r3, [r7, #20]
 802c154:	429a      	cmp	r2, r3
 802c156:	d869      	bhi.n	802c22c <create_name+0x374>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 802c158:	697b      	ldr	r3, [r7, #20]
 802c15a:	61bb      	str	r3, [r7, #24]
 802c15c:	2308      	movs	r3, #8
 802c15e:	623b      	str	r3, [r7, #32]
 802c160:	230b      	movs	r3, #11
 802c162:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 802c164:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c168:	009b      	lsls	r3, r3, #2
 802c16a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802c16e:	e05a      	b.n	802c226 <create_name+0x36e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 802c170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c172:	2b7f      	cmp	r3, #127	; 0x7f
 802c174:	d914      	bls.n	802c1a0 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 802c176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c178:	2100      	movs	r1, #0
 802c17a:	4618      	mov	r0, r3
 802c17c:	f000 fe6c 	bl	802ce58 <ff_convert>
 802c180:	4603      	mov	r3, r0
 802c182:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 802c184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c186:	2b00      	cmp	r3, #0
 802c188:	d004      	beq.n	802c194 <create_name+0x2dc>
 802c18a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c18c:	3b80      	subs	r3, #128	; 0x80
 802c18e:	4a17      	ldr	r2, [pc, #92]	; (802c1ec <create_name+0x334>)
 802c190:	5cd3      	ldrb	r3, [r2, r3]
 802c192:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 802c194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c198:	f043 0302 	orr.w	r3, r3, #2
 802c19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 802c1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c1a2:	2b00      	cmp	r3, #0
 802c1a4:	d007      	beq.n	802c1b6 <create_name+0x2fe>
 802c1a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c1a8:	4619      	mov	r1, r3
 802c1aa:	4811      	ldr	r0, [pc, #68]	; (802c1f0 <create_name+0x338>)
 802c1ac:	f7fe fd4d 	bl	802ac4a <chk_chr>
 802c1b0:	4603      	mov	r3, r0
 802c1b2:	2b00      	cmp	r3, #0
 802c1b4:	d008      	beq.n	802c1c8 <create_name+0x310>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 802c1b6:	235f      	movs	r3, #95	; 0x5f
 802c1b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 802c1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c1be:	f043 0303 	orr.w	r3, r3, #3
 802c1c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802c1c6:	e024      	b.n	802c212 <create_name+0x35a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 802c1c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c1ca:	2b40      	cmp	r3, #64	; 0x40
 802c1cc:	d912      	bls.n	802c1f4 <create_name+0x33c>
 802c1ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c1d0:	2b5a      	cmp	r3, #90	; 0x5a
 802c1d2:	d80f      	bhi.n	802c1f4 <create_name+0x33c>
					b |= 2;
 802c1d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c1d8:	f043 0302 	orr.w	r3, r3, #2
 802c1dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802c1e0:	e017      	b.n	802c212 <create_name+0x35a>
 802c1e2:	bf00      	nop
 802c1e4:	0802d238 	.word	0x0802d238
 802c1e8:	7ffffffe 	.word	0x7ffffffe
 802c1ec:	080308d0 	.word	0x080308d0
 802c1f0:	0802d244 	.word	0x0802d244
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 802c1f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c1f6:	2b60      	cmp	r3, #96	; 0x60
 802c1f8:	d90b      	bls.n	802c212 <create_name+0x35a>
 802c1fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c1fc:	2b7a      	cmp	r3, #122	; 0x7a
 802c1fe:	d808      	bhi.n	802c212 <create_name+0x35a>
						b |= 1; w -= 0x20;
 802c200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c204:	f043 0301 	orr.w	r3, r3, #1
 802c208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802c20c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c20e:	3b20      	subs	r3, #32
 802c210:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 802c212:	6a3b      	ldr	r3, [r7, #32]
 802c214:	1c5a      	adds	r2, r3, #1
 802c216:	623a      	str	r2, [r7, #32]
 802c218:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802c21a:	b2d1      	uxtb	r1, r2
 802c21c:	687a      	ldr	r2, [r7, #4]
 802c21e:	4413      	add	r3, r2
 802c220:	460a      	mov	r2, r1
 802c222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 802c226:	e75a      	b.n	802c0de <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 802c228:	bf00      	nop
 802c22a:	e000      	b.n	802c22e <create_name+0x376>
			if (si > di) break;			/* No extension */
 802c22c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 802c22e:	687b      	ldr	r3, [r7, #4]
 802c230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802c234:	2be5      	cmp	r3, #229	; 0xe5
 802c236:	d103      	bne.n	802c240 <create_name+0x388>
 802c238:	687b      	ldr	r3, [r7, #4]
 802c23a:	2205      	movs	r2, #5
 802c23c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 802c240:	69fb      	ldr	r3, [r7, #28]
 802c242:	2b08      	cmp	r3, #8
 802c244:	d104      	bne.n	802c250 <create_name+0x398>
 802c246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c24a:	009b      	lsls	r3, r3, #2
 802c24c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 802c250:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c254:	f003 030c 	and.w	r3, r3, #12
 802c258:	2b0c      	cmp	r3, #12
 802c25a:	d005      	beq.n	802c268 <create_name+0x3b0>
 802c25c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c260:	f003 0303 	and.w	r3, r3, #3
 802c264:	2b03      	cmp	r3, #3
 802c266:	d105      	bne.n	802c274 <create_name+0x3bc>
 802c268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c26c:	f043 0302 	orr.w	r3, r3, #2
 802c270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 802c274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c278:	f003 0302 	and.w	r3, r3, #2
 802c27c:	2b00      	cmp	r3, #0
 802c27e:	d117      	bne.n	802c2b0 <create_name+0x3f8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 802c280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c284:	f003 0303 	and.w	r3, r3, #3
 802c288:	2b01      	cmp	r3, #1
 802c28a:	d105      	bne.n	802c298 <create_name+0x3e0>
 802c28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c290:	f043 0310 	orr.w	r3, r3, #16
 802c294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 802c298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c29c:	f003 030c 	and.w	r3, r3, #12
 802c2a0:	2b04      	cmp	r3, #4
 802c2a2:	d105      	bne.n	802c2b0 <create_name+0x3f8>
 802c2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c2a8:	f043 0308 	orr.w	r3, r3, #8
 802c2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 802c2b0:	687b      	ldr	r3, [r7, #4]
 802c2b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802c2b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 802c2ba:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 802c2bc:	4618      	mov	r0, r3
 802c2be:	3728      	adds	r7, #40	; 0x28
 802c2c0:	46bd      	mov	sp, r7
 802c2c2:	bd80      	pop	{r7, pc}

0802c2c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 802c2c4:	b580      	push	{r7, lr}
 802c2c6:	b086      	sub	sp, #24
 802c2c8:	af00      	add	r7, sp, #0
 802c2ca:	6078      	str	r0, [r7, #4]
 802c2cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 802c2ce:	687b      	ldr	r3, [r7, #4]
 802c2d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 802c2d2:	693b      	ldr	r3, [r7, #16]
 802c2d4:	681b      	ldr	r3, [r3, #0]
 802c2d6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 802c2d8:	683b      	ldr	r3, [r7, #0]
 802c2da:	781b      	ldrb	r3, [r3, #0]
 802c2dc:	2b2f      	cmp	r3, #47	; 0x2f
 802c2de:	d00b      	beq.n	802c2f8 <follow_path+0x34>
 802c2e0:	683b      	ldr	r3, [r7, #0]
 802c2e2:	781b      	ldrb	r3, [r3, #0]
 802c2e4:	2b5c      	cmp	r3, #92	; 0x5c
 802c2e6:	d007      	beq.n	802c2f8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 802c2e8:	68fb      	ldr	r3, [r7, #12]
 802c2ea:	69da      	ldr	r2, [r3, #28]
 802c2ec:	693b      	ldr	r3, [r7, #16]
 802c2ee:	609a      	str	r2, [r3, #8]
 802c2f0:	e00d      	b.n	802c30e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 802c2f2:	683b      	ldr	r3, [r7, #0]
 802c2f4:	3301      	adds	r3, #1
 802c2f6:	603b      	str	r3, [r7, #0]
 802c2f8:	683b      	ldr	r3, [r7, #0]
 802c2fa:	781b      	ldrb	r3, [r3, #0]
 802c2fc:	2b2f      	cmp	r3, #47	; 0x2f
 802c2fe:	d0f8      	beq.n	802c2f2 <follow_path+0x2e>
 802c300:	683b      	ldr	r3, [r7, #0]
 802c302:	781b      	ldrb	r3, [r3, #0]
 802c304:	2b5c      	cmp	r3, #92	; 0x5c
 802c306:	d0f4      	beq.n	802c2f2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 802c308:	693b      	ldr	r3, [r7, #16]
 802c30a:	2200      	movs	r2, #0
 802c30c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 802c30e:	683b      	ldr	r3, [r7, #0]
 802c310:	781b      	ldrb	r3, [r3, #0]
 802c312:	2b1f      	cmp	r3, #31
 802c314:	d80a      	bhi.n	802c32c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 802c316:	687b      	ldr	r3, [r7, #4]
 802c318:	2280      	movs	r2, #128	; 0x80
 802c31a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 802c31e:	2100      	movs	r1, #0
 802c320:	6878      	ldr	r0, [r7, #4]
 802c322:	f7ff f86e 	bl	802b402 <dir_sdi>
 802c326:	4603      	mov	r3, r0
 802c328:	75fb      	strb	r3, [r7, #23]
 802c32a:	e05b      	b.n	802c3e4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 802c32c:	463b      	mov	r3, r7
 802c32e:	4619      	mov	r1, r3
 802c330:	6878      	ldr	r0, [r7, #4]
 802c332:	f7ff fdc1 	bl	802beb8 <create_name>
 802c336:	4603      	mov	r3, r0
 802c338:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 802c33a:	7dfb      	ldrb	r3, [r7, #23]
 802c33c:	2b00      	cmp	r3, #0
 802c33e:	d14c      	bne.n	802c3da <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 802c340:	6878      	ldr	r0, [r7, #4]
 802c342:	f7ff fb79 	bl	802ba38 <dir_find>
 802c346:	4603      	mov	r3, r0
 802c348:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 802c34a:	687b      	ldr	r3, [r7, #4]
 802c34c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 802c350:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 802c352:	7dfb      	ldrb	r3, [r7, #23]
 802c354:	2b00      	cmp	r3, #0
 802c356:	d01b      	beq.n	802c390 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 802c358:	7dfb      	ldrb	r3, [r7, #23]
 802c35a:	2b04      	cmp	r3, #4
 802c35c:	d13f      	bne.n	802c3de <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 802c35e:	7afb      	ldrb	r3, [r7, #11]
 802c360:	f003 0320 	and.w	r3, r3, #32
 802c364:	2b00      	cmp	r3, #0
 802c366:	d00b      	beq.n	802c380 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 802c368:	7afb      	ldrb	r3, [r7, #11]
 802c36a:	f003 0304 	and.w	r3, r3, #4
 802c36e:	2b00      	cmp	r3, #0
 802c370:	d031      	beq.n	802c3d6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 802c372:	687b      	ldr	r3, [r7, #4]
 802c374:	2280      	movs	r2, #128	; 0x80
 802c376:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 802c37a:	2300      	movs	r3, #0
 802c37c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 802c37e:	e02e      	b.n	802c3de <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 802c380:	7afb      	ldrb	r3, [r7, #11]
 802c382:	f003 0304 	and.w	r3, r3, #4
 802c386:	2b00      	cmp	r3, #0
 802c388:	d129      	bne.n	802c3de <follow_path+0x11a>
 802c38a:	2305      	movs	r3, #5
 802c38c:	75fb      	strb	r3, [r7, #23]
				break;
 802c38e:	e026      	b.n	802c3de <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802c390:	7afb      	ldrb	r3, [r7, #11]
 802c392:	f003 0304 	and.w	r3, r3, #4
 802c396:	2b00      	cmp	r3, #0
 802c398:	d123      	bne.n	802c3e2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 802c39a:	693b      	ldr	r3, [r7, #16]
 802c39c:	799b      	ldrb	r3, [r3, #6]
 802c39e:	f003 0310 	and.w	r3, r3, #16
 802c3a2:	2b00      	cmp	r3, #0
 802c3a4:	d102      	bne.n	802c3ac <follow_path+0xe8>
				res = FR_NO_PATH; break;
 802c3a6:	2305      	movs	r3, #5
 802c3a8:	75fb      	strb	r3, [r7, #23]
 802c3aa:	e01b      	b.n	802c3e4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 802c3ac:	68fb      	ldr	r3, [r7, #12]
 802c3ae:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802c3b2:	687b      	ldr	r3, [r7, #4]
 802c3b4:	695b      	ldr	r3, [r3, #20]
 802c3b6:	68fa      	ldr	r2, [r7, #12]
 802c3b8:	8992      	ldrh	r2, [r2, #12]
 802c3ba:	fbb3 f0f2 	udiv	r0, r3, r2
 802c3be:	fb02 f200 	mul.w	r2, r2, r0
 802c3c2:	1a9b      	subs	r3, r3, r2
 802c3c4:	440b      	add	r3, r1
 802c3c6:	4619      	mov	r1, r3
 802c3c8:	68f8      	ldr	r0, [r7, #12]
 802c3ca:	f7ff f979 	bl	802b6c0 <ld_clust>
 802c3ce:	4602      	mov	r2, r0
 802c3d0:	693b      	ldr	r3, [r7, #16]
 802c3d2:	609a      	str	r2, [r3, #8]
 802c3d4:	e7aa      	b.n	802c32c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 802c3d6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 802c3d8:	e7a8      	b.n	802c32c <follow_path+0x68>
			if (res != FR_OK) break;
 802c3da:	bf00      	nop
 802c3dc:	e002      	b.n	802c3e4 <follow_path+0x120>
				break;
 802c3de:	bf00      	nop
 802c3e0:	e000      	b.n	802c3e4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802c3e2:	bf00      	nop
			}
		}
	}

	return res;
 802c3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 802c3e6:	4618      	mov	r0, r3
 802c3e8:	3718      	adds	r7, #24
 802c3ea:	46bd      	mov	sp, r7
 802c3ec:	bd80      	pop	{r7, pc}

0802c3ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 802c3ee:	b480      	push	{r7}
 802c3f0:	b087      	sub	sp, #28
 802c3f2:	af00      	add	r7, sp, #0
 802c3f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 802c3f6:	f04f 33ff 	mov.w	r3, #4294967295
 802c3fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 802c3fc:	687b      	ldr	r3, [r7, #4]
 802c3fe:	681b      	ldr	r3, [r3, #0]
 802c400:	2b00      	cmp	r3, #0
 802c402:	d031      	beq.n	802c468 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 802c404:	687b      	ldr	r3, [r7, #4]
 802c406:	681b      	ldr	r3, [r3, #0]
 802c408:	617b      	str	r3, [r7, #20]
 802c40a:	e002      	b.n	802c412 <get_ldnumber+0x24>
 802c40c:	697b      	ldr	r3, [r7, #20]
 802c40e:	3301      	adds	r3, #1
 802c410:	617b      	str	r3, [r7, #20]
 802c412:	697b      	ldr	r3, [r7, #20]
 802c414:	781b      	ldrb	r3, [r3, #0]
 802c416:	2b1f      	cmp	r3, #31
 802c418:	d903      	bls.n	802c422 <get_ldnumber+0x34>
 802c41a:	697b      	ldr	r3, [r7, #20]
 802c41c:	781b      	ldrb	r3, [r3, #0]
 802c41e:	2b3a      	cmp	r3, #58	; 0x3a
 802c420:	d1f4      	bne.n	802c40c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 802c422:	697b      	ldr	r3, [r7, #20]
 802c424:	781b      	ldrb	r3, [r3, #0]
 802c426:	2b3a      	cmp	r3, #58	; 0x3a
 802c428:	d11c      	bne.n	802c464 <get_ldnumber+0x76>
			tp = *path;
 802c42a:	687b      	ldr	r3, [r7, #4]
 802c42c:	681b      	ldr	r3, [r3, #0]
 802c42e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 802c430:	68fb      	ldr	r3, [r7, #12]
 802c432:	1c5a      	adds	r2, r3, #1
 802c434:	60fa      	str	r2, [r7, #12]
 802c436:	781b      	ldrb	r3, [r3, #0]
 802c438:	3b30      	subs	r3, #48	; 0x30
 802c43a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 802c43c:	68bb      	ldr	r3, [r7, #8]
 802c43e:	2b09      	cmp	r3, #9
 802c440:	d80e      	bhi.n	802c460 <get_ldnumber+0x72>
 802c442:	68fa      	ldr	r2, [r7, #12]
 802c444:	697b      	ldr	r3, [r7, #20]
 802c446:	429a      	cmp	r2, r3
 802c448:	d10a      	bne.n	802c460 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 802c44a:	68bb      	ldr	r3, [r7, #8]
 802c44c:	2b00      	cmp	r3, #0
 802c44e:	d107      	bne.n	802c460 <get_ldnumber+0x72>
					vol = (int)i;
 802c450:	68bb      	ldr	r3, [r7, #8]
 802c452:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 802c454:	697b      	ldr	r3, [r7, #20]
 802c456:	3301      	adds	r3, #1
 802c458:	617b      	str	r3, [r7, #20]
 802c45a:	687b      	ldr	r3, [r7, #4]
 802c45c:	697a      	ldr	r2, [r7, #20]
 802c45e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 802c460:	693b      	ldr	r3, [r7, #16]
 802c462:	e002      	b.n	802c46a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 802c464:	2300      	movs	r3, #0
 802c466:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 802c468:	693b      	ldr	r3, [r7, #16]
}
 802c46a:	4618      	mov	r0, r3
 802c46c:	371c      	adds	r7, #28
 802c46e:	46bd      	mov	sp, r7
 802c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c474:	4770      	bx	lr
	...

0802c478 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 802c478:	b580      	push	{r7, lr}
 802c47a:	b082      	sub	sp, #8
 802c47c:	af00      	add	r7, sp, #0
 802c47e:	6078      	str	r0, [r7, #4]
 802c480:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 802c482:	687b      	ldr	r3, [r7, #4]
 802c484:	2200      	movs	r2, #0
 802c486:	70da      	strb	r2, [r3, #3]
 802c488:	687b      	ldr	r3, [r7, #4]
 802c48a:	f04f 32ff 	mov.w	r2, #4294967295
 802c48e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 802c490:	6839      	ldr	r1, [r7, #0]
 802c492:	6878      	ldr	r0, [r7, #4]
 802c494:	f7fe fcea 	bl	802ae6c <move_window>
 802c498:	4603      	mov	r3, r0
 802c49a:	2b00      	cmp	r3, #0
 802c49c:	d001      	beq.n	802c4a2 <check_fs+0x2a>
 802c49e:	2304      	movs	r3, #4
 802c4a0:	e038      	b.n	802c514 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 802c4a2:	687b      	ldr	r3, [r7, #4]
 802c4a4:	333c      	adds	r3, #60	; 0x3c
 802c4a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 802c4aa:	4618      	mov	r0, r3
 802c4ac:	f7fe fb0a 	bl	802aac4 <ld_word>
 802c4b0:	4603      	mov	r3, r0
 802c4b2:	461a      	mov	r2, r3
 802c4b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 802c4b8:	429a      	cmp	r2, r3
 802c4ba:	d001      	beq.n	802c4c0 <check_fs+0x48>
 802c4bc:	2303      	movs	r3, #3
 802c4be:	e029      	b.n	802c514 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 802c4c0:	687b      	ldr	r3, [r7, #4]
 802c4c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c4c6:	2be9      	cmp	r3, #233	; 0xe9
 802c4c8:	d009      	beq.n	802c4de <check_fs+0x66>
 802c4ca:	687b      	ldr	r3, [r7, #4]
 802c4cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c4d0:	2beb      	cmp	r3, #235	; 0xeb
 802c4d2:	d11e      	bne.n	802c512 <check_fs+0x9a>
 802c4d4:	687b      	ldr	r3, [r7, #4]
 802c4d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802c4da:	2b90      	cmp	r3, #144	; 0x90
 802c4dc:	d119      	bne.n	802c512 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 802c4de:	687b      	ldr	r3, [r7, #4]
 802c4e0:	333c      	adds	r3, #60	; 0x3c
 802c4e2:	3336      	adds	r3, #54	; 0x36
 802c4e4:	4618      	mov	r0, r3
 802c4e6:	f7fe fb05 	bl	802aaf4 <ld_dword>
 802c4ea:	4603      	mov	r3, r0
 802c4ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 802c4f0:	4a0a      	ldr	r2, [pc, #40]	; (802c51c <check_fs+0xa4>)
 802c4f2:	4293      	cmp	r3, r2
 802c4f4:	d101      	bne.n	802c4fa <check_fs+0x82>
 802c4f6:	2300      	movs	r3, #0
 802c4f8:	e00c      	b.n	802c514 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 802c4fa:	687b      	ldr	r3, [r7, #4]
 802c4fc:	333c      	adds	r3, #60	; 0x3c
 802c4fe:	3352      	adds	r3, #82	; 0x52
 802c500:	4618      	mov	r0, r3
 802c502:	f7fe faf7 	bl	802aaf4 <ld_dword>
 802c506:	4602      	mov	r2, r0
 802c508:	4b05      	ldr	r3, [pc, #20]	; (802c520 <check_fs+0xa8>)
 802c50a:	429a      	cmp	r2, r3
 802c50c:	d101      	bne.n	802c512 <check_fs+0x9a>
 802c50e:	2300      	movs	r3, #0
 802c510:	e000      	b.n	802c514 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 802c512:	2302      	movs	r3, #2
}
 802c514:	4618      	mov	r0, r3
 802c516:	3708      	adds	r7, #8
 802c518:	46bd      	mov	sp, r7
 802c51a:	bd80      	pop	{r7, pc}
 802c51c:	00544146 	.word	0x00544146
 802c520:	33544146 	.word	0x33544146

0802c524 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 802c524:	b580      	push	{r7, lr}
 802c526:	b096      	sub	sp, #88	; 0x58
 802c528:	af00      	add	r7, sp, #0
 802c52a:	60f8      	str	r0, [r7, #12]
 802c52c:	60b9      	str	r1, [r7, #8]
 802c52e:	4613      	mov	r3, r2
 802c530:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 802c532:	68bb      	ldr	r3, [r7, #8]
 802c534:	2200      	movs	r2, #0
 802c536:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 802c538:	68f8      	ldr	r0, [r7, #12]
 802c53a:	f7ff ff58 	bl	802c3ee <get_ldnumber>
 802c53e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 802c540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c542:	2b00      	cmp	r3, #0
 802c544:	da01      	bge.n	802c54a <find_volume+0x26>
 802c546:	230b      	movs	r3, #11
 802c548:	e268      	b.n	802ca1c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 802c54a:	4ab0      	ldr	r2, [pc, #704]	; (802c80c <find_volume+0x2e8>)
 802c54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c54e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802c552:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 802c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c556:	2b00      	cmp	r3, #0
 802c558:	d101      	bne.n	802c55e <find_volume+0x3a>
 802c55a:	230c      	movs	r3, #12
 802c55c:	e25e      	b.n	802ca1c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 802c55e:	68bb      	ldr	r3, [r7, #8]
 802c560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c562:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 802c564:	79fb      	ldrb	r3, [r7, #7]
 802c566:	f023 0301 	bic.w	r3, r3, #1
 802c56a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 802c56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c56e:	781b      	ldrb	r3, [r3, #0]
 802c570:	2b00      	cmp	r3, #0
 802c572:	d01a      	beq.n	802c5aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 802c574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c576:	785b      	ldrb	r3, [r3, #1]
 802c578:	4618      	mov	r0, r3
 802c57a:	f7fe fa05 	bl	802a988 <disk_status>
 802c57e:	4603      	mov	r3, r0
 802c580:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 802c584:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c588:	f003 0301 	and.w	r3, r3, #1
 802c58c:	2b00      	cmp	r3, #0
 802c58e:	d10c      	bne.n	802c5aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 802c590:	79fb      	ldrb	r3, [r7, #7]
 802c592:	2b00      	cmp	r3, #0
 802c594:	d007      	beq.n	802c5a6 <find_volume+0x82>
 802c596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c59a:	f003 0304 	and.w	r3, r3, #4
 802c59e:	2b00      	cmp	r3, #0
 802c5a0:	d001      	beq.n	802c5a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 802c5a2:	230a      	movs	r3, #10
 802c5a4:	e23a      	b.n	802ca1c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 802c5a6:	2300      	movs	r3, #0
 802c5a8:	e238      	b.n	802ca1c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 802c5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c5ac:	2200      	movs	r2, #0
 802c5ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 802c5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c5b2:	b2da      	uxtb	r2, r3
 802c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c5b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 802c5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c5ba:	785b      	ldrb	r3, [r3, #1]
 802c5bc:	4618      	mov	r0, r3
 802c5be:	f7fe f9fd 	bl	802a9bc <disk_initialize>
 802c5c2:	4603      	mov	r3, r0
 802c5c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 802c5c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c5cc:	f003 0301 	and.w	r3, r3, #1
 802c5d0:	2b00      	cmp	r3, #0
 802c5d2:	d001      	beq.n	802c5d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 802c5d4:	2303      	movs	r3, #3
 802c5d6:	e221      	b.n	802ca1c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 802c5d8:	79fb      	ldrb	r3, [r7, #7]
 802c5da:	2b00      	cmp	r3, #0
 802c5dc:	d007      	beq.n	802c5ee <find_volume+0xca>
 802c5de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c5e2:	f003 0304 	and.w	r3, r3, #4
 802c5e6:	2b00      	cmp	r3, #0
 802c5e8:	d001      	beq.n	802c5ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 802c5ea:	230a      	movs	r3, #10
 802c5ec:	e216      	b.n	802ca1c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 802c5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c5f0:	7858      	ldrb	r0, [r3, #1]
 802c5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c5f4:	330c      	adds	r3, #12
 802c5f6:	461a      	mov	r2, r3
 802c5f8:	2102      	movs	r1, #2
 802c5fa:	f7fe fa45 	bl	802aa88 <disk_ioctl>
 802c5fe:	4603      	mov	r3, r0
 802c600:	2b00      	cmp	r3, #0
 802c602:	d001      	beq.n	802c608 <find_volume+0xe4>
 802c604:	2301      	movs	r3, #1
 802c606:	e209      	b.n	802ca1c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 802c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c60a:	899b      	ldrh	r3, [r3, #12]
 802c60c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c610:	d80d      	bhi.n	802c62e <find_volume+0x10a>
 802c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c614:	899b      	ldrh	r3, [r3, #12]
 802c616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c61a:	d308      	bcc.n	802c62e <find_volume+0x10a>
 802c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c61e:	899b      	ldrh	r3, [r3, #12]
 802c620:	461a      	mov	r2, r3
 802c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c624:	899b      	ldrh	r3, [r3, #12]
 802c626:	3b01      	subs	r3, #1
 802c628:	4013      	ands	r3, r2
 802c62a:	2b00      	cmp	r3, #0
 802c62c:	d001      	beq.n	802c632 <find_volume+0x10e>
 802c62e:	2301      	movs	r3, #1
 802c630:	e1f4      	b.n	802ca1c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 802c632:	2300      	movs	r3, #0
 802c634:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 802c636:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802c638:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802c63a:	f7ff ff1d 	bl	802c478 <check_fs>
 802c63e:	4603      	mov	r3, r0
 802c640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 802c644:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802c648:	2b02      	cmp	r3, #2
 802c64a:	d14b      	bne.n	802c6e4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 802c64c:	2300      	movs	r3, #0
 802c64e:	643b      	str	r3, [r7, #64]	; 0x40
 802c650:	e01f      	b.n	802c692 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 802c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c654:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 802c658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c65a:	011b      	lsls	r3, r3, #4
 802c65c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 802c660:	4413      	add	r3, r2
 802c662:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 802c664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c666:	3304      	adds	r3, #4
 802c668:	781b      	ldrb	r3, [r3, #0]
 802c66a:	2b00      	cmp	r3, #0
 802c66c:	d006      	beq.n	802c67c <find_volume+0x158>
 802c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c670:	3308      	adds	r3, #8
 802c672:	4618      	mov	r0, r3
 802c674:	f7fe fa3e 	bl	802aaf4 <ld_dword>
 802c678:	4602      	mov	r2, r0
 802c67a:	e000      	b.n	802c67e <find_volume+0x15a>
 802c67c:	2200      	movs	r2, #0
 802c67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c680:	009b      	lsls	r3, r3, #2
 802c682:	f107 0158 	add.w	r1, r7, #88	; 0x58
 802c686:	440b      	add	r3, r1
 802c688:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 802c68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c68e:	3301      	adds	r3, #1
 802c690:	643b      	str	r3, [r7, #64]	; 0x40
 802c692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c694:	2b03      	cmp	r3, #3
 802c696:	d9dc      	bls.n	802c652 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 802c698:	2300      	movs	r3, #0
 802c69a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 802c69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c69e:	2b00      	cmp	r3, #0
 802c6a0:	d002      	beq.n	802c6a8 <find_volume+0x184>
 802c6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c6a4:	3b01      	subs	r3, #1
 802c6a6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 802c6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c6aa:	009b      	lsls	r3, r3, #2
 802c6ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802c6b0:	4413      	add	r3, r2
 802c6b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 802c6b6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 802c6b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c6ba:	2b00      	cmp	r3, #0
 802c6bc:	d005      	beq.n	802c6ca <find_volume+0x1a6>
 802c6be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802c6c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802c6c2:	f7ff fed9 	bl	802c478 <check_fs>
 802c6c6:	4603      	mov	r3, r0
 802c6c8:	e000      	b.n	802c6cc <find_volume+0x1a8>
 802c6ca:	2303      	movs	r3, #3
 802c6cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 802c6d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802c6d4:	2b01      	cmp	r3, #1
 802c6d6:	d905      	bls.n	802c6e4 <find_volume+0x1c0>
 802c6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c6da:	3301      	adds	r3, #1
 802c6dc:	643b      	str	r3, [r7, #64]	; 0x40
 802c6de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c6e0:	2b03      	cmp	r3, #3
 802c6e2:	d9e1      	bls.n	802c6a8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 802c6e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802c6e8:	2b04      	cmp	r3, #4
 802c6ea:	d101      	bne.n	802c6f0 <find_volume+0x1cc>
 802c6ec:	2301      	movs	r3, #1
 802c6ee:	e195      	b.n	802ca1c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 802c6f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802c6f4:	2b01      	cmp	r3, #1
 802c6f6:	d901      	bls.n	802c6fc <find_volume+0x1d8>
 802c6f8:	230d      	movs	r3, #13
 802c6fa:	e18f      	b.n	802ca1c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 802c6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c6fe:	333c      	adds	r3, #60	; 0x3c
 802c700:	330b      	adds	r3, #11
 802c702:	4618      	mov	r0, r3
 802c704:	f7fe f9de 	bl	802aac4 <ld_word>
 802c708:	4603      	mov	r3, r0
 802c70a:	461a      	mov	r2, r3
 802c70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c70e:	899b      	ldrh	r3, [r3, #12]
 802c710:	429a      	cmp	r2, r3
 802c712:	d001      	beq.n	802c718 <find_volume+0x1f4>
 802c714:	230d      	movs	r3, #13
 802c716:	e181      	b.n	802ca1c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 802c718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c71a:	333c      	adds	r3, #60	; 0x3c
 802c71c:	3316      	adds	r3, #22
 802c71e:	4618      	mov	r0, r3
 802c720:	f7fe f9d0 	bl	802aac4 <ld_word>
 802c724:	4603      	mov	r3, r0
 802c726:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 802c728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c72a:	2b00      	cmp	r3, #0
 802c72c:	d106      	bne.n	802c73c <find_volume+0x218>
 802c72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c730:	333c      	adds	r3, #60	; 0x3c
 802c732:	3324      	adds	r3, #36	; 0x24
 802c734:	4618      	mov	r0, r3
 802c736:	f7fe f9dd 	bl	802aaf4 <ld_dword>
 802c73a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 802c73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c73e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c740:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 802c742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c744:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 802c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c74a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 802c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c74e:	789b      	ldrb	r3, [r3, #2]
 802c750:	2b01      	cmp	r3, #1
 802c752:	d005      	beq.n	802c760 <find_volume+0x23c>
 802c754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c756:	789b      	ldrb	r3, [r3, #2]
 802c758:	2b02      	cmp	r3, #2
 802c75a:	d001      	beq.n	802c760 <find_volume+0x23c>
 802c75c:	230d      	movs	r3, #13
 802c75e:	e15d      	b.n	802ca1c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 802c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c762:	789b      	ldrb	r3, [r3, #2]
 802c764:	461a      	mov	r2, r3
 802c766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c768:	fb02 f303 	mul.w	r3, r2, r3
 802c76c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 802c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c770:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 802c774:	b29a      	uxth	r2, r3
 802c776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c778:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 802c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c77c:	895b      	ldrh	r3, [r3, #10]
 802c77e:	2b00      	cmp	r3, #0
 802c780:	d008      	beq.n	802c794 <find_volume+0x270>
 802c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c784:	895b      	ldrh	r3, [r3, #10]
 802c786:	461a      	mov	r2, r3
 802c788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c78a:	895b      	ldrh	r3, [r3, #10]
 802c78c:	3b01      	subs	r3, #1
 802c78e:	4013      	ands	r3, r2
 802c790:	2b00      	cmp	r3, #0
 802c792:	d001      	beq.n	802c798 <find_volume+0x274>
 802c794:	230d      	movs	r3, #13
 802c796:	e141      	b.n	802ca1c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 802c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c79a:	333c      	adds	r3, #60	; 0x3c
 802c79c:	3311      	adds	r3, #17
 802c79e:	4618      	mov	r0, r3
 802c7a0:	f7fe f990 	bl	802aac4 <ld_word>
 802c7a4:	4603      	mov	r3, r0
 802c7a6:	461a      	mov	r2, r3
 802c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c7aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 802c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c7ae:	891b      	ldrh	r3, [r3, #8]
 802c7b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c7b2:	8992      	ldrh	r2, [r2, #12]
 802c7b4:	0952      	lsrs	r2, r2, #5
 802c7b6:	b292      	uxth	r2, r2
 802c7b8:	fbb3 f1f2 	udiv	r1, r3, r2
 802c7bc:	fb02 f201 	mul.w	r2, r2, r1
 802c7c0:	1a9b      	subs	r3, r3, r2
 802c7c2:	b29b      	uxth	r3, r3
 802c7c4:	2b00      	cmp	r3, #0
 802c7c6:	d001      	beq.n	802c7cc <find_volume+0x2a8>
 802c7c8:	230d      	movs	r3, #13
 802c7ca:	e127      	b.n	802ca1c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 802c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c7ce:	333c      	adds	r3, #60	; 0x3c
 802c7d0:	3313      	adds	r3, #19
 802c7d2:	4618      	mov	r0, r3
 802c7d4:	f7fe f976 	bl	802aac4 <ld_word>
 802c7d8:	4603      	mov	r3, r0
 802c7da:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 802c7dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c7de:	2b00      	cmp	r3, #0
 802c7e0:	d106      	bne.n	802c7f0 <find_volume+0x2cc>
 802c7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c7e4:	333c      	adds	r3, #60	; 0x3c
 802c7e6:	3320      	adds	r3, #32
 802c7e8:	4618      	mov	r0, r3
 802c7ea:	f7fe f983 	bl	802aaf4 <ld_dword>
 802c7ee:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 802c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c7f2:	333c      	adds	r3, #60	; 0x3c
 802c7f4:	330e      	adds	r3, #14
 802c7f6:	4618      	mov	r0, r3
 802c7f8:	f7fe f964 	bl	802aac4 <ld_word>
 802c7fc:	4603      	mov	r3, r0
 802c7fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 802c800:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802c802:	2b00      	cmp	r3, #0
 802c804:	d104      	bne.n	802c810 <find_volume+0x2ec>
 802c806:	230d      	movs	r3, #13
 802c808:	e108      	b.n	802ca1c <find_volume+0x4f8>
 802c80a:	bf00      	nop
 802c80c:	200200dc 	.word	0x200200dc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 802c810:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802c812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c814:	4413      	add	r3, r2
 802c816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c818:	8911      	ldrh	r1, [r2, #8]
 802c81a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c81c:	8992      	ldrh	r2, [r2, #12]
 802c81e:	0952      	lsrs	r2, r2, #5
 802c820:	b292      	uxth	r2, r2
 802c822:	fbb1 f2f2 	udiv	r2, r1, r2
 802c826:	b292      	uxth	r2, r2
 802c828:	4413      	add	r3, r2
 802c82a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 802c82c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c830:	429a      	cmp	r2, r3
 802c832:	d201      	bcs.n	802c838 <find_volume+0x314>
 802c834:	230d      	movs	r3, #13
 802c836:	e0f1      	b.n	802ca1c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 802c838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c83c:	1ad3      	subs	r3, r2, r3
 802c83e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c840:	8952      	ldrh	r2, [r2, #10]
 802c842:	fbb3 f3f2 	udiv	r3, r3, r2
 802c846:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 802c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c84a:	2b00      	cmp	r3, #0
 802c84c:	d101      	bne.n	802c852 <find_volume+0x32e>
 802c84e:	230d      	movs	r3, #13
 802c850:	e0e4      	b.n	802ca1c <find_volume+0x4f8>
		fmt = FS_FAT32;
 802c852:	2303      	movs	r3, #3
 802c854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 802c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c85a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 802c85e:	4293      	cmp	r3, r2
 802c860:	d802      	bhi.n	802c868 <find_volume+0x344>
 802c862:	2302      	movs	r3, #2
 802c864:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 802c868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c86a:	f640 72f5 	movw	r2, #4085	; 0xff5
 802c86e:	4293      	cmp	r3, r2
 802c870:	d802      	bhi.n	802c878 <find_volume+0x354>
 802c872:	2301      	movs	r3, #1
 802c874:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 802c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c87a:	1c9a      	adds	r2, r3, #2
 802c87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c87e:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 802c880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c882:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c884:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 802c886:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802c888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c88a:	441a      	add	r2, r3
 802c88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c88e:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 802c890:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c894:	441a      	add	r2, r3
 802c896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c898:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 802c89a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802c89e:	2b03      	cmp	r3, #3
 802c8a0:	d11e      	bne.n	802c8e0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 802c8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c8a4:	333c      	adds	r3, #60	; 0x3c
 802c8a6:	332a      	adds	r3, #42	; 0x2a
 802c8a8:	4618      	mov	r0, r3
 802c8aa:	f7fe f90b 	bl	802aac4 <ld_word>
 802c8ae:	4603      	mov	r3, r0
 802c8b0:	2b00      	cmp	r3, #0
 802c8b2:	d001      	beq.n	802c8b8 <find_volume+0x394>
 802c8b4:	230d      	movs	r3, #13
 802c8b6:	e0b1      	b.n	802ca1c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 802c8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c8ba:	891b      	ldrh	r3, [r3, #8]
 802c8bc:	2b00      	cmp	r3, #0
 802c8be:	d001      	beq.n	802c8c4 <find_volume+0x3a0>
 802c8c0:	230d      	movs	r3, #13
 802c8c2:	e0ab      	b.n	802ca1c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 802c8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c8c6:	333c      	adds	r3, #60	; 0x3c
 802c8c8:	332c      	adds	r3, #44	; 0x2c
 802c8ca:	4618      	mov	r0, r3
 802c8cc:	f7fe f912 	bl	802aaf4 <ld_dword>
 802c8d0:	4602      	mov	r2, r0
 802c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c8d4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 802c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c8d8:	6a1b      	ldr	r3, [r3, #32]
 802c8da:	009b      	lsls	r3, r3, #2
 802c8dc:	647b      	str	r3, [r7, #68]	; 0x44
 802c8de:	e01f      	b.n	802c920 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 802c8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c8e2:	891b      	ldrh	r3, [r3, #8]
 802c8e4:	2b00      	cmp	r3, #0
 802c8e6:	d101      	bne.n	802c8ec <find_volume+0x3c8>
 802c8e8:	230d      	movs	r3, #13
 802c8ea:	e097      	b.n	802ca1c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 802c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802c8f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c8f2:	441a      	add	r2, r3
 802c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c8f6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 802c8f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802c8fc:	2b02      	cmp	r3, #2
 802c8fe:	d103      	bne.n	802c908 <find_volume+0x3e4>
 802c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c902:	6a1b      	ldr	r3, [r3, #32]
 802c904:	005b      	lsls	r3, r3, #1
 802c906:	e00a      	b.n	802c91e <find_volume+0x3fa>
 802c908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c90a:	6a1a      	ldr	r2, [r3, #32]
 802c90c:	4613      	mov	r3, r2
 802c90e:	005b      	lsls	r3, r3, #1
 802c910:	4413      	add	r3, r2
 802c912:	085a      	lsrs	r2, r3, #1
 802c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c916:	6a1b      	ldr	r3, [r3, #32]
 802c918:	f003 0301 	and.w	r3, r3, #1
 802c91c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 802c91e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 802c920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802c924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c926:	899b      	ldrh	r3, [r3, #12]
 802c928:	4619      	mov	r1, r3
 802c92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c92c:	440b      	add	r3, r1
 802c92e:	3b01      	subs	r3, #1
 802c930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802c932:	8989      	ldrh	r1, [r1, #12]
 802c934:	fbb3 f3f1 	udiv	r3, r3, r1
 802c938:	429a      	cmp	r2, r3
 802c93a:	d201      	bcs.n	802c940 <find_volume+0x41c>
 802c93c:	230d      	movs	r3, #13
 802c93e:	e06d      	b.n	802ca1c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 802c940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c942:	f04f 32ff 	mov.w	r2, #4294967295
 802c946:	619a      	str	r2, [r3, #24]
 802c948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c94a:	699a      	ldr	r2, [r3, #24]
 802c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c94e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 802c950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c952:	2280      	movs	r2, #128	; 0x80
 802c954:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 802c956:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802c95a:	2b03      	cmp	r3, #3
 802c95c:	d149      	bne.n	802c9f2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 802c95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c960:	333c      	adds	r3, #60	; 0x3c
 802c962:	3330      	adds	r3, #48	; 0x30
 802c964:	4618      	mov	r0, r3
 802c966:	f7fe f8ad 	bl	802aac4 <ld_word>
 802c96a:	4603      	mov	r3, r0
 802c96c:	2b01      	cmp	r3, #1
 802c96e:	d140      	bne.n	802c9f2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 802c970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c972:	3301      	adds	r3, #1
 802c974:	4619      	mov	r1, r3
 802c976:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802c978:	f7fe fa78 	bl	802ae6c <move_window>
 802c97c:	4603      	mov	r3, r0
 802c97e:	2b00      	cmp	r3, #0
 802c980:	d137      	bne.n	802c9f2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 802c982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c984:	2200      	movs	r2, #0
 802c986:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 802c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c98a:	333c      	adds	r3, #60	; 0x3c
 802c98c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 802c990:	4618      	mov	r0, r3
 802c992:	f7fe f897 	bl	802aac4 <ld_word>
 802c996:	4603      	mov	r3, r0
 802c998:	461a      	mov	r2, r3
 802c99a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 802c99e:	429a      	cmp	r2, r3
 802c9a0:	d127      	bne.n	802c9f2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 802c9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c9a4:	333c      	adds	r3, #60	; 0x3c
 802c9a6:	4618      	mov	r0, r3
 802c9a8:	f7fe f8a4 	bl	802aaf4 <ld_dword>
 802c9ac:	4602      	mov	r2, r0
 802c9ae:	4b1d      	ldr	r3, [pc, #116]	; (802ca24 <find_volume+0x500>)
 802c9b0:	429a      	cmp	r2, r3
 802c9b2:	d11e      	bne.n	802c9f2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 802c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c9b6:	333c      	adds	r3, #60	; 0x3c
 802c9b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 802c9bc:	4618      	mov	r0, r3
 802c9be:	f7fe f899 	bl	802aaf4 <ld_dword>
 802c9c2:	4602      	mov	r2, r0
 802c9c4:	4b18      	ldr	r3, [pc, #96]	; (802ca28 <find_volume+0x504>)
 802c9c6:	429a      	cmp	r2, r3
 802c9c8:	d113      	bne.n	802c9f2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 802c9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c9cc:	333c      	adds	r3, #60	; 0x3c
 802c9ce:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 802c9d2:	4618      	mov	r0, r3
 802c9d4:	f7fe f88e 	bl	802aaf4 <ld_dword>
 802c9d8:	4602      	mov	r2, r0
 802c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c9dc:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 802c9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c9e0:	333c      	adds	r3, #60	; 0x3c
 802c9e2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 802c9e6:	4618      	mov	r0, r3
 802c9e8:	f7fe f884 	bl	802aaf4 <ld_dword>
 802c9ec:	4602      	mov	r2, r0
 802c9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c9f0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 802c9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c9f4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 802c9f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 802c9fa:	4b0c      	ldr	r3, [pc, #48]	; (802ca2c <find_volume+0x508>)
 802c9fc:	881b      	ldrh	r3, [r3, #0]
 802c9fe:	3301      	adds	r3, #1
 802ca00:	b29a      	uxth	r2, r3
 802ca02:	4b0a      	ldr	r3, [pc, #40]	; (802ca2c <find_volume+0x508>)
 802ca04:	801a      	strh	r2, [r3, #0]
 802ca06:	4b09      	ldr	r3, [pc, #36]	; (802ca2c <find_volume+0x508>)
 802ca08:	881a      	ldrh	r2, [r3, #0]
 802ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ca0c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 802ca0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ca10:	2200      	movs	r2, #0
 802ca12:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 802ca14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802ca16:	f7fe f9c1 	bl	802ad9c <clear_lock>
#endif
	return FR_OK;
 802ca1a:	2300      	movs	r3, #0
}
 802ca1c:	4618      	mov	r0, r3
 802ca1e:	3758      	adds	r7, #88	; 0x58
 802ca20:	46bd      	mov	sp, r7
 802ca22:	bd80      	pop	{r7, pc}
 802ca24:	41615252 	.word	0x41615252
 802ca28:	61417272 	.word	0x61417272
 802ca2c:	200200e0 	.word	0x200200e0

0802ca30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 802ca30:	b580      	push	{r7, lr}
 802ca32:	b084      	sub	sp, #16
 802ca34:	af00      	add	r7, sp, #0
 802ca36:	6078      	str	r0, [r7, #4]
 802ca38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 802ca3a:	2309      	movs	r3, #9
 802ca3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 802ca3e:	687b      	ldr	r3, [r7, #4]
 802ca40:	2b00      	cmp	r3, #0
 802ca42:	d01c      	beq.n	802ca7e <validate+0x4e>
 802ca44:	687b      	ldr	r3, [r7, #4]
 802ca46:	681b      	ldr	r3, [r3, #0]
 802ca48:	2b00      	cmp	r3, #0
 802ca4a:	d018      	beq.n	802ca7e <validate+0x4e>
 802ca4c:	687b      	ldr	r3, [r7, #4]
 802ca4e:	681b      	ldr	r3, [r3, #0]
 802ca50:	781b      	ldrb	r3, [r3, #0]
 802ca52:	2b00      	cmp	r3, #0
 802ca54:	d013      	beq.n	802ca7e <validate+0x4e>
 802ca56:	687b      	ldr	r3, [r7, #4]
 802ca58:	889a      	ldrh	r2, [r3, #4]
 802ca5a:	687b      	ldr	r3, [r7, #4]
 802ca5c:	681b      	ldr	r3, [r3, #0]
 802ca5e:	88db      	ldrh	r3, [r3, #6]
 802ca60:	429a      	cmp	r2, r3
 802ca62:	d10c      	bne.n	802ca7e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 802ca64:	687b      	ldr	r3, [r7, #4]
 802ca66:	681b      	ldr	r3, [r3, #0]
 802ca68:	785b      	ldrb	r3, [r3, #1]
 802ca6a:	4618      	mov	r0, r3
 802ca6c:	f7fd ff8c 	bl	802a988 <disk_status>
 802ca70:	4603      	mov	r3, r0
 802ca72:	f003 0301 	and.w	r3, r3, #1
 802ca76:	2b00      	cmp	r3, #0
 802ca78:	d101      	bne.n	802ca7e <validate+0x4e>
			res = FR_OK;
 802ca7a:	2300      	movs	r3, #0
 802ca7c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 802ca7e:	7bfb      	ldrb	r3, [r7, #15]
 802ca80:	2b00      	cmp	r3, #0
 802ca82:	d102      	bne.n	802ca8a <validate+0x5a>
 802ca84:	687b      	ldr	r3, [r7, #4]
 802ca86:	681b      	ldr	r3, [r3, #0]
 802ca88:	e000      	b.n	802ca8c <validate+0x5c>
 802ca8a:	2300      	movs	r3, #0
 802ca8c:	683a      	ldr	r2, [r7, #0]
 802ca8e:	6013      	str	r3, [r2, #0]
	return res;
 802ca90:	7bfb      	ldrb	r3, [r7, #15]
}
 802ca92:	4618      	mov	r0, r3
 802ca94:	3710      	adds	r7, #16
 802ca96:	46bd      	mov	sp, r7
 802ca98:	bd80      	pop	{r7, pc}
	...

0802ca9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 802ca9c:	b580      	push	{r7, lr}
 802ca9e:	b088      	sub	sp, #32
 802caa0:	af00      	add	r7, sp, #0
 802caa2:	60f8      	str	r0, [r7, #12]
 802caa4:	60b9      	str	r1, [r7, #8]
 802caa6:	4613      	mov	r3, r2
 802caa8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 802caaa:	68bb      	ldr	r3, [r7, #8]
 802caac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 802caae:	f107 0310 	add.w	r3, r7, #16
 802cab2:	4618      	mov	r0, r3
 802cab4:	f7ff fc9b 	bl	802c3ee <get_ldnumber>
 802cab8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 802caba:	69fb      	ldr	r3, [r7, #28]
 802cabc:	2b00      	cmp	r3, #0
 802cabe:	da01      	bge.n	802cac4 <f_mount+0x28>
 802cac0:	230b      	movs	r3, #11
 802cac2:	e02b      	b.n	802cb1c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 802cac4:	4a17      	ldr	r2, [pc, #92]	; (802cb24 <f_mount+0x88>)
 802cac6:	69fb      	ldr	r3, [r7, #28]
 802cac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802cacc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 802cace:	69bb      	ldr	r3, [r7, #24]
 802cad0:	2b00      	cmp	r3, #0
 802cad2:	d005      	beq.n	802cae0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 802cad4:	69b8      	ldr	r0, [r7, #24]
 802cad6:	f7fe f961 	bl	802ad9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 802cada:	69bb      	ldr	r3, [r7, #24]
 802cadc:	2200      	movs	r2, #0
 802cade:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 802cae0:	68fb      	ldr	r3, [r7, #12]
 802cae2:	2b00      	cmp	r3, #0
 802cae4:	d002      	beq.n	802caec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 802cae6:	68fb      	ldr	r3, [r7, #12]
 802cae8:	2200      	movs	r2, #0
 802caea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 802caec:	68fa      	ldr	r2, [r7, #12]
 802caee:	490d      	ldr	r1, [pc, #52]	; (802cb24 <f_mount+0x88>)
 802caf0:	69fb      	ldr	r3, [r7, #28]
 802caf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 802caf6:	68fb      	ldr	r3, [r7, #12]
 802caf8:	2b00      	cmp	r3, #0
 802cafa:	d002      	beq.n	802cb02 <f_mount+0x66>
 802cafc:	79fb      	ldrb	r3, [r7, #7]
 802cafe:	2b01      	cmp	r3, #1
 802cb00:	d001      	beq.n	802cb06 <f_mount+0x6a>
 802cb02:	2300      	movs	r3, #0
 802cb04:	e00a      	b.n	802cb1c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 802cb06:	f107 010c 	add.w	r1, r7, #12
 802cb0a:	f107 0308 	add.w	r3, r7, #8
 802cb0e:	2200      	movs	r2, #0
 802cb10:	4618      	mov	r0, r3
 802cb12:	f7ff fd07 	bl	802c524 <find_volume>
 802cb16:	4603      	mov	r3, r0
 802cb18:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 802cb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 802cb1c:	4618      	mov	r0, r3
 802cb1e:	3720      	adds	r7, #32
 802cb20:	46bd      	mov	sp, r7
 802cb22:	bd80      	pop	{r7, pc}
 802cb24:	200200dc 	.word	0x200200dc

0802cb28 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 802cb28:	b580      	push	{r7, lr}
 802cb2a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 802cb2e:	af00      	add	r7, sp, #0
 802cb30:	1d3b      	adds	r3, r7, #4
 802cb32:	6018      	str	r0, [r3, #0]
 802cb34:	463b      	mov	r3, r7
 802cb36:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 802cb38:	1d3b      	adds	r3, r7, #4
 802cb3a:	681b      	ldr	r3, [r3, #0]
 802cb3c:	2b00      	cmp	r3, #0
 802cb3e:	d101      	bne.n	802cb44 <f_opendir+0x1c>
 802cb40:	2309      	movs	r3, #9
 802cb42:	e08a      	b.n	802cc5a <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 802cb44:	1d3b      	adds	r3, r7, #4
 802cb46:	681b      	ldr	r3, [r3, #0]
 802cb48:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 802cb4c:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 802cb50:	463b      	mov	r3, r7
 802cb52:	2200      	movs	r2, #0
 802cb54:	4618      	mov	r0, r3
 802cb56:	f7ff fce5 	bl	802c524 <find_volume>
 802cb5a:	4603      	mov	r3, r0
 802cb5c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 802cb60:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 802cb64:	2b00      	cmp	r3, #0
 802cb66:	d16e      	bne.n	802cc46 <f_opendir+0x11e>
		obj->fs = fs;
 802cb68:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 802cb6c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 802cb70:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 802cb72:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 802cb76:	f107 020c 	add.w	r2, r7, #12
 802cb7a:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 802cb7c:	463b      	mov	r3, r7
 802cb7e:	681a      	ldr	r2, [r3, #0]
 802cb80:	1d3b      	adds	r3, r7, #4
 802cb82:	4611      	mov	r1, r2
 802cb84:	6818      	ldr	r0, [r3, #0]
 802cb86:	f7ff fb9d 	bl	802c2c4 <follow_path>
 802cb8a:	4603      	mov	r3, r0
 802cb8c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 802cb90:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 802cb94:	2b00      	cmp	r3, #0
 802cb96:	d14f      	bne.n	802cc38 <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 802cb98:	1d3b      	adds	r3, r7, #4
 802cb9a:	681b      	ldr	r3, [r3, #0]
 802cb9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 802cba0:	b25b      	sxtb	r3, r3
 802cba2:	2b00      	cmp	r3, #0
 802cba4:	db17      	blt.n	802cbd6 <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 802cba6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 802cbaa:	799b      	ldrb	r3, [r3, #6]
 802cbac:	f003 0310 	and.w	r3, r3, #16
 802cbb0:	2b00      	cmp	r3, #0
 802cbb2:	d00d      	beq.n	802cbd0 <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 802cbb4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 802cbb8:	1d3b      	adds	r3, r7, #4
 802cbba:	681b      	ldr	r3, [r3, #0]
 802cbbc:	6a1b      	ldr	r3, [r3, #32]
 802cbbe:	4619      	mov	r1, r3
 802cbc0:	4610      	mov	r0, r2
 802cbc2:	f7fe fd7d 	bl	802b6c0 <ld_clust>
 802cbc6:	4602      	mov	r2, r0
 802cbc8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 802cbcc:	609a      	str	r2, [r3, #8]
 802cbce:	e002      	b.n	802cbd6 <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 802cbd0:	2305      	movs	r3, #5
 802cbd2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 802cbd6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 802cbda:	2b00      	cmp	r3, #0
 802cbdc:	d12c      	bne.n	802cc38 <f_opendir+0x110>
				obj->id = fs->id;
 802cbde:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 802cbe2:	88da      	ldrh	r2, [r3, #6]
 802cbe4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 802cbe8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 802cbea:	1d3b      	adds	r3, r7, #4
 802cbec:	2100      	movs	r1, #0
 802cbee:	6818      	ldr	r0, [r3, #0]
 802cbf0:	f7fe fc07 	bl	802b402 <dir_sdi>
 802cbf4:	4603      	mov	r3, r0
 802cbf6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 802cbfa:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 802cbfe:	2b00      	cmp	r3, #0
 802cc00:	d11a      	bne.n	802cc38 <f_opendir+0x110>
					if (obj->sclust) {
 802cc02:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 802cc06:	689b      	ldr	r3, [r3, #8]
 802cc08:	2b00      	cmp	r3, #0
 802cc0a:	d011      	beq.n	802cc30 <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 802cc0c:	1d3b      	adds	r3, r7, #4
 802cc0e:	2100      	movs	r1, #0
 802cc10:	6818      	ldr	r0, [r3, #0]
 802cc12:	f7fe f835 	bl	802ac80 <inc_lock>
 802cc16:	4602      	mov	r2, r0
 802cc18:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 802cc1c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 802cc1e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 802cc22:	691b      	ldr	r3, [r3, #16]
 802cc24:	2b00      	cmp	r3, #0
 802cc26:	d107      	bne.n	802cc38 <f_opendir+0x110>
 802cc28:	2312      	movs	r3, #18
 802cc2a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 802cc2e:	e003      	b.n	802cc38 <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 802cc30:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 802cc34:	2200      	movs	r2, #0
 802cc36:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 802cc38:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 802cc3c:	2b04      	cmp	r3, #4
 802cc3e:	d102      	bne.n	802cc46 <f_opendir+0x11e>
 802cc40:	2305      	movs	r3, #5
 802cc42:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 802cc46:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 802cc4a:	2b00      	cmp	r3, #0
 802cc4c:	d003      	beq.n	802cc56 <f_opendir+0x12e>
 802cc4e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 802cc52:	2200      	movs	r2, #0
 802cc54:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 802cc56:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 802cc5a:	4618      	mov	r0, r3
 802cc5c:	f507 7706 	add.w	r7, r7, #536	; 0x218
 802cc60:	46bd      	mov	sp, r7
 802cc62:	bd80      	pop	{r7, pc}

0802cc64 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 802cc64:	b580      	push	{r7, lr}
 802cc66:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 802cc6a:	af00      	add	r7, sp, #0
 802cc6c:	1d3b      	adds	r3, r7, #4
 802cc6e:	6018      	str	r0, [r3, #0]
 802cc70:	463b      	mov	r3, r7
 802cc72:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 802cc74:	1d3b      	adds	r3, r7, #4
 802cc76:	681b      	ldr	r3, [r3, #0]
 802cc78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 802cc7c:	4611      	mov	r1, r2
 802cc7e:	4618      	mov	r0, r3
 802cc80:	f7ff fed6 	bl	802ca30 <validate>
 802cc84:	4603      	mov	r3, r0
 802cc86:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 802cc8a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 802cc8e:	2b00      	cmp	r3, #0
 802cc90:	d139      	bne.n	802cd06 <f_readdir+0xa2>
		if (!fno) {
 802cc92:	463b      	mov	r3, r7
 802cc94:	681b      	ldr	r3, [r3, #0]
 802cc96:	2b00      	cmp	r3, #0
 802cc98:	d108      	bne.n	802ccac <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 802cc9a:	1d3b      	adds	r3, r7, #4
 802cc9c:	2100      	movs	r1, #0
 802cc9e:	6818      	ldr	r0, [r3, #0]
 802cca0:	f7fe fbaf 	bl	802b402 <dir_sdi>
 802cca4:	4603      	mov	r3, r0
 802cca6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 802ccaa:	e02c      	b.n	802cd06 <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 802ccac:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802ccb0:	f107 0208 	add.w	r2, r7, #8
 802ccb4:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 802ccb6:	1d3b      	adds	r3, r7, #4
 802ccb8:	2100      	movs	r1, #0
 802ccba:	6818      	ldr	r0, [r3, #0]
 802ccbc:	f7fe fe15 	bl	802b8ea <dir_read>
 802ccc0:	4603      	mov	r3, r0
 802ccc2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 802ccc6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 802ccca:	2b04      	cmp	r3, #4
 802cccc:	d102      	bne.n	802ccd4 <f_readdir+0x70>
 802ccce:	2300      	movs	r3, #0
 802ccd0:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 802ccd4:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 802ccd8:	2b00      	cmp	r3, #0
 802ccda:	d114      	bne.n	802cd06 <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 802ccdc:	463a      	mov	r2, r7
 802ccde:	1d3b      	adds	r3, r7, #4
 802cce0:	6811      	ldr	r1, [r2, #0]
 802cce2:	6818      	ldr	r0, [r3, #0]
 802cce4:	f7fe ff68 	bl	802bbb8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 802cce8:	1d3b      	adds	r3, r7, #4
 802ccea:	2100      	movs	r1, #0
 802ccec:	6818      	ldr	r0, [r3, #0]
 802ccee:	f7fe fc11 	bl	802b514 <dir_next>
 802ccf2:	4603      	mov	r3, r0
 802ccf4:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 802ccf8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 802ccfc:	2b04      	cmp	r3, #4
 802ccfe:	d102      	bne.n	802cd06 <f_readdir+0xa2>
 802cd00:	2300      	movs	r3, #0
 802cd02:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 802cd06:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 802cd0a:	4618      	mov	r0, r3
 802cd0c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 802cd10:	46bd      	mov	sp, r7
 802cd12:	bd80      	pop	{r7, pc}

0802cd14 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 802cd14:	b580      	push	{r7, lr}
 802cd16:	b084      	sub	sp, #16
 802cd18:	af00      	add	r7, sp, #0
 802cd1a:	6078      	str	r0, [r7, #4]
 802cd1c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 802cd1e:	6839      	ldr	r1, [r7, #0]
 802cd20:	6878      	ldr	r0, [r7, #4]
 802cd22:	f7ff ff9f 	bl	802cc64 <f_readdir>
 802cd26:	4603      	mov	r3, r0
 802cd28:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 802cd2a:	7bfb      	ldrb	r3, [r7, #15]
 802cd2c:	2b00      	cmp	r3, #0
 802cd2e:	d114      	bne.n	802cd5a <f_findnext+0x46>
 802cd30:	683b      	ldr	r3, [r7, #0]
 802cd32:	2b00      	cmp	r3, #0
 802cd34:	d011      	beq.n	802cd5a <f_findnext+0x46>
 802cd36:	683b      	ldr	r3, [r7, #0]
 802cd38:	7d9b      	ldrb	r3, [r3, #22]
 802cd3a:	2b00      	cmp	r3, #0
 802cd3c:	d00d      	beq.n	802cd5a <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 802cd3e:	687b      	ldr	r3, [r7, #4]
 802cd40:	6b58      	ldr	r0, [r3, #52]	; 0x34
 802cd42:	683b      	ldr	r3, [r7, #0]
 802cd44:	f103 0116 	add.w	r1, r3, #22
 802cd48:	2300      	movs	r3, #0
 802cd4a:	2200      	movs	r2, #0
 802cd4c:	f7ff f838 	bl	802bdc0 <pattern_matching>
 802cd50:	4603      	mov	r3, r0
 802cd52:	2b00      	cmp	r3, #0
 802cd54:	d100      	bne.n	802cd58 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 802cd56:	e7e2      	b.n	802cd1e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 802cd58:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 802cd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 802cd5c:	4618      	mov	r0, r3
 802cd5e:	3710      	adds	r7, #16
 802cd60:	46bd      	mov	sp, r7
 802cd62:	bd80      	pop	{r7, pc}

0802cd64 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 802cd64:	b580      	push	{r7, lr}
 802cd66:	b086      	sub	sp, #24
 802cd68:	af00      	add	r7, sp, #0
 802cd6a:	60f8      	str	r0, [r7, #12]
 802cd6c:	60b9      	str	r1, [r7, #8]
 802cd6e:	607a      	str	r2, [r7, #4]
 802cd70:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 802cd72:	68fb      	ldr	r3, [r7, #12]
 802cd74:	683a      	ldr	r2, [r7, #0]
 802cd76:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 802cd78:	6879      	ldr	r1, [r7, #4]
 802cd7a:	68f8      	ldr	r0, [r7, #12]
 802cd7c:	f7ff fed4 	bl	802cb28 <f_opendir>
 802cd80:	4603      	mov	r3, r0
 802cd82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 802cd84:	7dfb      	ldrb	r3, [r7, #23]
 802cd86:	2b00      	cmp	r3, #0
 802cd88:	d105      	bne.n	802cd96 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 802cd8a:	68b9      	ldr	r1, [r7, #8]
 802cd8c:	68f8      	ldr	r0, [r7, #12]
 802cd8e:	f7ff ffc1 	bl	802cd14 <f_findnext>
 802cd92:	4603      	mov	r3, r0
 802cd94:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 802cd96:	7dfb      	ldrb	r3, [r7, #23]
}
 802cd98:	4618      	mov	r0, r3
 802cd9a:	3718      	adds	r7, #24
 802cd9c:	46bd      	mov	sp, r7
 802cd9e:	bd80      	pop	{r7, pc}

0802cda0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 802cda0:	b480      	push	{r7}
 802cda2:	b087      	sub	sp, #28
 802cda4:	af00      	add	r7, sp, #0
 802cda6:	60f8      	str	r0, [r7, #12]
 802cda8:	60b9      	str	r1, [r7, #8]
 802cdaa:	4613      	mov	r3, r2
 802cdac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 802cdae:	2301      	movs	r3, #1
 802cdb0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 802cdb2:	2300      	movs	r3, #0
 802cdb4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 802cdb6:	4b1f      	ldr	r3, [pc, #124]	; (802ce34 <FATFS_LinkDriverEx+0x94>)
 802cdb8:	7a5b      	ldrb	r3, [r3, #9]
 802cdba:	b2db      	uxtb	r3, r3
 802cdbc:	2b00      	cmp	r3, #0
 802cdbe:	d131      	bne.n	802ce24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 802cdc0:	4b1c      	ldr	r3, [pc, #112]	; (802ce34 <FATFS_LinkDriverEx+0x94>)
 802cdc2:	7a5b      	ldrb	r3, [r3, #9]
 802cdc4:	b2db      	uxtb	r3, r3
 802cdc6:	461a      	mov	r2, r3
 802cdc8:	4b1a      	ldr	r3, [pc, #104]	; (802ce34 <FATFS_LinkDriverEx+0x94>)
 802cdca:	2100      	movs	r1, #0
 802cdcc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 802cdce:	4b19      	ldr	r3, [pc, #100]	; (802ce34 <FATFS_LinkDriverEx+0x94>)
 802cdd0:	7a5b      	ldrb	r3, [r3, #9]
 802cdd2:	b2db      	uxtb	r3, r3
 802cdd4:	4a17      	ldr	r2, [pc, #92]	; (802ce34 <FATFS_LinkDriverEx+0x94>)
 802cdd6:	009b      	lsls	r3, r3, #2
 802cdd8:	4413      	add	r3, r2
 802cdda:	68fa      	ldr	r2, [r7, #12]
 802cddc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 802cdde:	4b15      	ldr	r3, [pc, #84]	; (802ce34 <FATFS_LinkDriverEx+0x94>)
 802cde0:	7a5b      	ldrb	r3, [r3, #9]
 802cde2:	b2db      	uxtb	r3, r3
 802cde4:	461a      	mov	r2, r3
 802cde6:	4b13      	ldr	r3, [pc, #76]	; (802ce34 <FATFS_LinkDriverEx+0x94>)
 802cde8:	4413      	add	r3, r2
 802cdea:	79fa      	ldrb	r2, [r7, #7]
 802cdec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 802cdee:	4b11      	ldr	r3, [pc, #68]	; (802ce34 <FATFS_LinkDriverEx+0x94>)
 802cdf0:	7a5b      	ldrb	r3, [r3, #9]
 802cdf2:	b2db      	uxtb	r3, r3
 802cdf4:	1c5a      	adds	r2, r3, #1
 802cdf6:	b2d1      	uxtb	r1, r2
 802cdf8:	4a0e      	ldr	r2, [pc, #56]	; (802ce34 <FATFS_LinkDriverEx+0x94>)
 802cdfa:	7251      	strb	r1, [r2, #9]
 802cdfc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 802cdfe:	7dbb      	ldrb	r3, [r7, #22]
 802ce00:	3330      	adds	r3, #48	; 0x30
 802ce02:	b2da      	uxtb	r2, r3
 802ce04:	68bb      	ldr	r3, [r7, #8]
 802ce06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 802ce08:	68bb      	ldr	r3, [r7, #8]
 802ce0a:	3301      	adds	r3, #1
 802ce0c:	223a      	movs	r2, #58	; 0x3a
 802ce0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 802ce10:	68bb      	ldr	r3, [r7, #8]
 802ce12:	3302      	adds	r3, #2
 802ce14:	222f      	movs	r2, #47	; 0x2f
 802ce16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 802ce18:	68bb      	ldr	r3, [r7, #8]
 802ce1a:	3303      	adds	r3, #3
 802ce1c:	2200      	movs	r2, #0
 802ce1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 802ce20:	2300      	movs	r3, #0
 802ce22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 802ce24:	7dfb      	ldrb	r3, [r7, #23]
}
 802ce26:	4618      	mov	r0, r3
 802ce28:	371c      	adds	r7, #28
 802ce2a:	46bd      	mov	sp, r7
 802ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce30:	4770      	bx	lr
 802ce32:	bf00      	nop
 802ce34:	20020104 	.word	0x20020104

0802ce38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 802ce38:	b580      	push	{r7, lr}
 802ce3a:	b082      	sub	sp, #8
 802ce3c:	af00      	add	r7, sp, #0
 802ce3e:	6078      	str	r0, [r7, #4]
 802ce40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 802ce42:	2200      	movs	r2, #0
 802ce44:	6839      	ldr	r1, [r7, #0]
 802ce46:	6878      	ldr	r0, [r7, #4]
 802ce48:	f7ff ffaa 	bl	802cda0 <FATFS_LinkDriverEx>
 802ce4c:	4603      	mov	r3, r0
}
 802ce4e:	4618      	mov	r0, r3
 802ce50:	3708      	adds	r7, #8
 802ce52:	46bd      	mov	sp, r7
 802ce54:	bd80      	pop	{r7, pc}
	...

0802ce58 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 802ce58:	b480      	push	{r7}
 802ce5a:	b085      	sub	sp, #20
 802ce5c:	af00      	add	r7, sp, #0
 802ce5e:	4603      	mov	r3, r0
 802ce60:	6039      	str	r1, [r7, #0]
 802ce62:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 802ce64:	88fb      	ldrh	r3, [r7, #6]
 802ce66:	2b7f      	cmp	r3, #127	; 0x7f
 802ce68:	d802      	bhi.n	802ce70 <ff_convert+0x18>
		c = chr;
 802ce6a:	88fb      	ldrh	r3, [r7, #6]
 802ce6c:	81fb      	strh	r3, [r7, #14]
 802ce6e:	e025      	b.n	802cebc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 802ce70:	683b      	ldr	r3, [r7, #0]
 802ce72:	2b00      	cmp	r3, #0
 802ce74:	d00b      	beq.n	802ce8e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 802ce76:	88fb      	ldrh	r3, [r7, #6]
 802ce78:	2bff      	cmp	r3, #255	; 0xff
 802ce7a:	d805      	bhi.n	802ce88 <ff_convert+0x30>
 802ce7c:	88fb      	ldrh	r3, [r7, #6]
 802ce7e:	3b80      	subs	r3, #128	; 0x80
 802ce80:	4a12      	ldr	r2, [pc, #72]	; (802cecc <ff_convert+0x74>)
 802ce82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802ce86:	e000      	b.n	802ce8a <ff_convert+0x32>
 802ce88:	2300      	movs	r3, #0
 802ce8a:	81fb      	strh	r3, [r7, #14]
 802ce8c:	e016      	b.n	802cebc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 802ce8e:	2300      	movs	r3, #0
 802ce90:	81fb      	strh	r3, [r7, #14]
 802ce92:	e009      	b.n	802cea8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 802ce94:	89fb      	ldrh	r3, [r7, #14]
 802ce96:	4a0d      	ldr	r2, [pc, #52]	; (802cecc <ff_convert+0x74>)
 802ce98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802ce9c:	88fa      	ldrh	r2, [r7, #6]
 802ce9e:	429a      	cmp	r2, r3
 802cea0:	d006      	beq.n	802ceb0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 802cea2:	89fb      	ldrh	r3, [r7, #14]
 802cea4:	3301      	adds	r3, #1
 802cea6:	81fb      	strh	r3, [r7, #14]
 802cea8:	89fb      	ldrh	r3, [r7, #14]
 802ceaa:	2b7f      	cmp	r3, #127	; 0x7f
 802ceac:	d9f2      	bls.n	802ce94 <ff_convert+0x3c>
 802ceae:	e000      	b.n	802ceb2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 802ceb0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 802ceb2:	89fb      	ldrh	r3, [r7, #14]
 802ceb4:	3380      	adds	r3, #128	; 0x80
 802ceb6:	b29b      	uxth	r3, r3
 802ceb8:	b2db      	uxtb	r3, r3
 802ceba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 802cebc:	89fb      	ldrh	r3, [r7, #14]
}
 802cebe:	4618      	mov	r0, r3
 802cec0:	3714      	adds	r7, #20
 802cec2:	46bd      	mov	sp, r7
 802cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cec8:	4770      	bx	lr
 802ceca:	bf00      	nop
 802cecc:	08030960 	.word	0x08030960

0802ced0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 802ced0:	b480      	push	{r7}
 802ced2:	b087      	sub	sp, #28
 802ced4:	af00      	add	r7, sp, #0
 802ced6:	4603      	mov	r3, r0
 802ced8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 802ceda:	88fb      	ldrh	r3, [r7, #6]
 802cedc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802cee0:	d201      	bcs.n	802cee6 <ff_wtoupper+0x16>
 802cee2:	4b3e      	ldr	r3, [pc, #248]	; (802cfdc <ff_wtoupper+0x10c>)
 802cee4:	e000      	b.n	802cee8 <ff_wtoupper+0x18>
 802cee6:	4b3e      	ldr	r3, [pc, #248]	; (802cfe0 <ff_wtoupper+0x110>)
 802cee8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 802ceea:	697b      	ldr	r3, [r7, #20]
 802ceec:	1c9a      	adds	r2, r3, #2
 802ceee:	617a      	str	r2, [r7, #20]
 802cef0:	881b      	ldrh	r3, [r3, #0]
 802cef2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 802cef4:	8a7b      	ldrh	r3, [r7, #18]
 802cef6:	2b00      	cmp	r3, #0
 802cef8:	d068      	beq.n	802cfcc <ff_wtoupper+0xfc>
 802cefa:	88fa      	ldrh	r2, [r7, #6]
 802cefc:	8a7b      	ldrh	r3, [r7, #18]
 802cefe:	429a      	cmp	r2, r3
 802cf00:	d364      	bcc.n	802cfcc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 802cf02:	697b      	ldr	r3, [r7, #20]
 802cf04:	1c9a      	adds	r2, r3, #2
 802cf06:	617a      	str	r2, [r7, #20]
 802cf08:	881b      	ldrh	r3, [r3, #0]
 802cf0a:	823b      	strh	r3, [r7, #16]
 802cf0c:	8a3b      	ldrh	r3, [r7, #16]
 802cf0e:	0a1b      	lsrs	r3, r3, #8
 802cf10:	81fb      	strh	r3, [r7, #14]
 802cf12:	8a3b      	ldrh	r3, [r7, #16]
 802cf14:	b2db      	uxtb	r3, r3
 802cf16:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 802cf18:	88fa      	ldrh	r2, [r7, #6]
 802cf1a:	8a79      	ldrh	r1, [r7, #18]
 802cf1c:	8a3b      	ldrh	r3, [r7, #16]
 802cf1e:	440b      	add	r3, r1
 802cf20:	429a      	cmp	r2, r3
 802cf22:	da49      	bge.n	802cfb8 <ff_wtoupper+0xe8>
			switch (cmd) {
 802cf24:	89fb      	ldrh	r3, [r7, #14]
 802cf26:	2b08      	cmp	r3, #8
 802cf28:	d84f      	bhi.n	802cfca <ff_wtoupper+0xfa>
 802cf2a:	a201      	add	r2, pc, #4	; (adr r2, 802cf30 <ff_wtoupper+0x60>)
 802cf2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802cf30:	0802cf55 	.word	0x0802cf55
 802cf34:	0802cf67 	.word	0x0802cf67
 802cf38:	0802cf7d 	.word	0x0802cf7d
 802cf3c:	0802cf85 	.word	0x0802cf85
 802cf40:	0802cf8d 	.word	0x0802cf8d
 802cf44:	0802cf95 	.word	0x0802cf95
 802cf48:	0802cf9d 	.word	0x0802cf9d
 802cf4c:	0802cfa5 	.word	0x0802cfa5
 802cf50:	0802cfad 	.word	0x0802cfad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 802cf54:	88fa      	ldrh	r2, [r7, #6]
 802cf56:	8a7b      	ldrh	r3, [r7, #18]
 802cf58:	1ad3      	subs	r3, r2, r3
 802cf5a:	005b      	lsls	r3, r3, #1
 802cf5c:	697a      	ldr	r2, [r7, #20]
 802cf5e:	4413      	add	r3, r2
 802cf60:	881b      	ldrh	r3, [r3, #0]
 802cf62:	80fb      	strh	r3, [r7, #6]
 802cf64:	e027      	b.n	802cfb6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 802cf66:	88fa      	ldrh	r2, [r7, #6]
 802cf68:	8a7b      	ldrh	r3, [r7, #18]
 802cf6a:	1ad3      	subs	r3, r2, r3
 802cf6c:	b29b      	uxth	r3, r3
 802cf6e:	f003 0301 	and.w	r3, r3, #1
 802cf72:	b29b      	uxth	r3, r3
 802cf74:	88fa      	ldrh	r2, [r7, #6]
 802cf76:	1ad3      	subs	r3, r2, r3
 802cf78:	80fb      	strh	r3, [r7, #6]
 802cf7a:	e01c      	b.n	802cfb6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 802cf7c:	88fb      	ldrh	r3, [r7, #6]
 802cf7e:	3b10      	subs	r3, #16
 802cf80:	80fb      	strh	r3, [r7, #6]
 802cf82:	e018      	b.n	802cfb6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 802cf84:	88fb      	ldrh	r3, [r7, #6]
 802cf86:	3b20      	subs	r3, #32
 802cf88:	80fb      	strh	r3, [r7, #6]
 802cf8a:	e014      	b.n	802cfb6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 802cf8c:	88fb      	ldrh	r3, [r7, #6]
 802cf8e:	3b30      	subs	r3, #48	; 0x30
 802cf90:	80fb      	strh	r3, [r7, #6]
 802cf92:	e010      	b.n	802cfb6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 802cf94:	88fb      	ldrh	r3, [r7, #6]
 802cf96:	3b1a      	subs	r3, #26
 802cf98:	80fb      	strh	r3, [r7, #6]
 802cf9a:	e00c      	b.n	802cfb6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 802cf9c:	88fb      	ldrh	r3, [r7, #6]
 802cf9e:	3308      	adds	r3, #8
 802cfa0:	80fb      	strh	r3, [r7, #6]
 802cfa2:	e008      	b.n	802cfb6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 802cfa4:	88fb      	ldrh	r3, [r7, #6]
 802cfa6:	3b50      	subs	r3, #80	; 0x50
 802cfa8:	80fb      	strh	r3, [r7, #6]
 802cfaa:	e004      	b.n	802cfb6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 802cfac:	88fb      	ldrh	r3, [r7, #6]
 802cfae:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 802cfb2:	80fb      	strh	r3, [r7, #6]
 802cfb4:	bf00      	nop
			}
			break;
 802cfb6:	e008      	b.n	802cfca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 802cfb8:	89fb      	ldrh	r3, [r7, #14]
 802cfba:	2b00      	cmp	r3, #0
 802cfbc:	d195      	bne.n	802ceea <ff_wtoupper+0x1a>
 802cfbe:	8a3b      	ldrh	r3, [r7, #16]
 802cfc0:	005b      	lsls	r3, r3, #1
 802cfc2:	697a      	ldr	r2, [r7, #20]
 802cfc4:	4413      	add	r3, r2
 802cfc6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 802cfc8:	e78f      	b.n	802ceea <ff_wtoupper+0x1a>
			break;
 802cfca:	bf00      	nop
	}

	return chr;
 802cfcc:	88fb      	ldrh	r3, [r7, #6]
}
 802cfce:	4618      	mov	r0, r3
 802cfd0:	371c      	adds	r7, #28
 802cfd2:	46bd      	mov	sp, r7
 802cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cfd8:	4770      	bx	lr
 802cfda:	bf00      	nop
 802cfdc:	08030a60 	.word	0x08030a60
 802cfe0:	08030c54 	.word	0x08030c54

0802cfe4 <__libc_init_array>:
 802cfe4:	b570      	push	{r4, r5, r6, lr}
 802cfe6:	4e0d      	ldr	r6, [pc, #52]	; (802d01c <__libc_init_array+0x38>)
 802cfe8:	4c0d      	ldr	r4, [pc, #52]	; (802d020 <__libc_init_array+0x3c>)
 802cfea:	1ba4      	subs	r4, r4, r6
 802cfec:	10a4      	asrs	r4, r4, #2
 802cfee:	2500      	movs	r5, #0
 802cff0:	42a5      	cmp	r5, r4
 802cff2:	d109      	bne.n	802d008 <__libc_init_array+0x24>
 802cff4:	4e0b      	ldr	r6, [pc, #44]	; (802d024 <__libc_init_array+0x40>)
 802cff6:	4c0c      	ldr	r4, [pc, #48]	; (802d028 <__libc_init_array+0x44>)
 802cff8:	f000 f838 	bl	802d06c <_init>
 802cffc:	1ba4      	subs	r4, r4, r6
 802cffe:	10a4      	asrs	r4, r4, #2
 802d000:	2500      	movs	r5, #0
 802d002:	42a5      	cmp	r5, r4
 802d004:	d105      	bne.n	802d012 <__libc_init_array+0x2e>
 802d006:	bd70      	pop	{r4, r5, r6, pc}
 802d008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802d00c:	4798      	blx	r3
 802d00e:	3501      	adds	r5, #1
 802d010:	e7ee      	b.n	802cff0 <__libc_init_array+0xc>
 802d012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802d016:	4798      	blx	r3
 802d018:	3501      	adds	r5, #1
 802d01a:	e7f2      	b.n	802d002 <__libc_init_array+0x1e>
 802d01c:	08030d18 	.word	0x08030d18
 802d020:	08030d18 	.word	0x08030d18
 802d024:	08030d18 	.word	0x08030d18
 802d028:	08030d1c 	.word	0x08030d1c

0802d02c <memcmp>:
 802d02c:	b530      	push	{r4, r5, lr}
 802d02e:	2400      	movs	r4, #0
 802d030:	42a2      	cmp	r2, r4
 802d032:	d101      	bne.n	802d038 <memcmp+0xc>
 802d034:	2000      	movs	r0, #0
 802d036:	e007      	b.n	802d048 <memcmp+0x1c>
 802d038:	5d03      	ldrb	r3, [r0, r4]
 802d03a:	3401      	adds	r4, #1
 802d03c:	190d      	adds	r5, r1, r4
 802d03e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 802d042:	42ab      	cmp	r3, r5
 802d044:	d0f4      	beq.n	802d030 <memcmp+0x4>
 802d046:	1b58      	subs	r0, r3, r5
 802d048:	bd30      	pop	{r4, r5, pc}

0802d04a <memset>:
 802d04a:	4402      	add	r2, r0
 802d04c:	4603      	mov	r3, r0
 802d04e:	4293      	cmp	r3, r2
 802d050:	d100      	bne.n	802d054 <memset+0xa>
 802d052:	4770      	bx	lr
 802d054:	f803 1b01 	strb.w	r1, [r3], #1
 802d058:	e7f9      	b.n	802d04e <memset+0x4>

0802d05a <strcpy>:
 802d05a:	4603      	mov	r3, r0
 802d05c:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d060:	f803 2b01 	strb.w	r2, [r3], #1
 802d064:	2a00      	cmp	r2, #0
 802d066:	d1f9      	bne.n	802d05c <strcpy+0x2>
 802d068:	4770      	bx	lr
	...

0802d06c <_init>:
 802d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d06e:	bf00      	nop
 802d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d072:	bc08      	pop	{r3}
 802d074:	469e      	mov	lr, r3
 802d076:	4770      	bx	lr

0802d078 <_fini>:
 802d078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d07a:	bf00      	nop
 802d07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d07e:	bc08      	pop	{r3}
 802d080:	469e      	mov	lr, r3
 802d082:	4770      	bx	lr
