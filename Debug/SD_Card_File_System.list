
SD_Card_File_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028148  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037d8  08028310  08028310  00038310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bae8  0802bae8  00040054  2**0
                  CONTENTS
  4 .ARM          00000008  0802bae8  0802bae8  0003bae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802baf0  0802baf0  00040054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802baf0  0802baf0  0003baf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802baf4  0802baf4  0003baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0802baf8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000204bc  20000054  0802bb4c  00040054  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20020510  0802bb4c  00040510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005b4f1  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000983d  00000000  00000000  0009b575  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003048  00000000  00000000  000a4db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002fc0  00000000  00000000  000a7e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000326f6  00000000  00000000  000aadc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003aae0  00000000  00000000  000dd4b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105477  00000000  00000000  00117f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021d40d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c940  00000000  00000000  0021d488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000054 	.word	0x20000054
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080282f8 	.word	0x080282f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000058 	.word	0x20000058
 8000204:	080282f8 	.word	0x080282f8

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b972 	b.w	8000528 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	4604      	mov	r4, r0
 8000264:	4688      	mov	r8, r1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d14b      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026a:	428a      	cmp	r2, r1
 800026c:	4615      	mov	r5, r2
 800026e:	d967      	bls.n	8000340 <__udivmoddi4+0xe4>
 8000270:	fab2 f282 	clz	r2, r2
 8000274:	b14a      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000276:	f1c2 0720 	rsb	r7, r2, #32
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	fa20 f707 	lsr.w	r7, r0, r7
 8000282:	4095      	lsls	r5, r2
 8000284:	ea47 0803 	orr.w	r8, r7, r3
 8000288:	4094      	lsls	r4, r2
 800028a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028e:	0c23      	lsrs	r3, r4, #16
 8000290:	fbb8 f7fe 	udiv	r7, r8, lr
 8000294:	fa1f fc85 	uxth.w	ip, r5
 8000298:	fb0e 8817 	mls	r8, lr, r7, r8
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	fb07 f10c 	mul.w	r1, r7, ip
 80002a4:	4299      	cmp	r1, r3
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x60>
 80002a8:	18eb      	adds	r3, r5, r3
 80002aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ae:	f080 811b 	bcs.w	80004e8 <__udivmoddi4+0x28c>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 8118 	bls.w	80004e8 <__udivmoddi4+0x28c>
 80002b8:	3f02      	subs	r7, #2
 80002ba:	442b      	add	r3, r5
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d0:	45a4      	cmp	ip, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x8c>
 80002d4:	192c      	adds	r4, r5, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002de:	45a4      	cmp	ip, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x290>
 80002e4:	3802      	subs	r0, #2
 80002e6:	442c      	add	r4, r5
 80002e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ec:	eba4 040c 	sub.w	r4, r4, ip
 80002f0:	2700      	movs	r7, #0
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa0>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xbe>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80eb 	beq.w	80004e2 <__udivmoddi4+0x286>
 800030c:	2700      	movs	r7, #0
 800030e:	e9c6 0100 	strd	r0, r1, [r6]
 8000312:	4638      	mov	r0, r7
 8000314:	4639      	mov	r1, r7
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f783 	clz	r7, r3
 800031e:	2f00      	cmp	r7, #0
 8000320:	d147      	bne.n	80003b2 <__udivmoddi4+0x156>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd0>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2c4>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	4698      	mov	r8, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa0>
 800033a:	e9c6 4800 	strd	r4, r8, [r6]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa0>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xe8>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 808f 	bne.w	800046c <__udivmoddi4+0x210>
 800034e:	1b49      	subs	r1, r1, r5
 8000350:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000354:	fa1f f885 	uxth.w	r8, r5
 8000358:	2701      	movs	r7, #1
 800035a:	fbb1 fcfe 	udiv	ip, r1, lr
 800035e:	0c23      	lsrs	r3, r4, #16
 8000360:	fb0e 111c 	mls	r1, lr, ip, r1
 8000364:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000368:	fb08 f10c 	mul.w	r1, r8, ip
 800036c:	4299      	cmp	r1, r3
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x124>
 8000370:	18eb      	adds	r3, r5, r3
 8000372:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4299      	cmp	r1, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2bc>
 800037e:	4684      	mov	ip, r0
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	b2a3      	uxth	r3, r4
 8000384:	fbb1 f0fe 	udiv	r0, r1, lr
 8000388:	fb0e 1410 	mls	r4, lr, r0, r1
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	fb08 f800 	mul.w	r8, r8, r0
 8000394:	45a0      	cmp	r8, r4
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x14c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x14a>
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	f200 80b6 	bhi.w	8000512 <__udivmoddi4+0x2b6>
 80003a6:	4618      	mov	r0, r3
 80003a8:	eba4 0408 	sub.w	r4, r4, r8
 80003ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b0:	e79f      	b.n	80002f2 <__udivmoddi4+0x96>
 80003b2:	f1c7 0c20 	rsb	ip, r7, #32
 80003b6:	40bb      	lsls	r3, r7
 80003b8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003bc:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c0:	fa01 f407 	lsl.w	r4, r1, r7
 80003c4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003cc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d0:	4325      	orrs	r5, r4
 80003d2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d6:	0c2c      	lsrs	r4, r5, #16
 80003d8:	fb08 3319 	mls	r3, r8, r9, r3
 80003dc:	fa1f fa8e 	uxth.w	sl, lr
 80003e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e4:	fb09 f40a 	mul.w	r4, r9, sl
 80003e8:	429c      	cmp	r4, r3
 80003ea:	fa02 f207 	lsl.w	r2, r2, r7
 80003ee:	fa00 f107 	lsl.w	r1, r0, r7
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1e 0303 	adds.w	r3, lr, r3
 80003f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003fc:	f080 8087 	bcs.w	800050e <__udivmoddi4+0x2b2>
 8000400:	429c      	cmp	r4, r3
 8000402:	f240 8084 	bls.w	800050e <__udivmoddi4+0x2b2>
 8000406:	f1a9 0902 	sub.w	r9, r9, #2
 800040a:	4473      	add	r3, lr
 800040c:	1b1b      	subs	r3, r3, r4
 800040e:	b2ad      	uxth	r5, r5
 8000410:	fbb3 f0f8 	udiv	r0, r3, r8
 8000414:	fb08 3310 	mls	r3, r8, r0, r3
 8000418:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800041c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000420:	45a2      	cmp	sl, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1e 0404 	adds.w	r4, lr, r4
 8000428:	f100 33ff 	add.w	r3, r0, #4294967295
 800042c:	d26b      	bcs.n	8000506 <__udivmoddi4+0x2aa>
 800042e:	45a2      	cmp	sl, r4
 8000430:	d969      	bls.n	8000506 <__udivmoddi4+0x2aa>
 8000432:	3802      	subs	r0, #2
 8000434:	4474      	add	r4, lr
 8000436:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043a:	fba0 8902 	umull	r8, r9, r0, r2
 800043e:	eba4 040a 	sub.w	r4, r4, sl
 8000442:	454c      	cmp	r4, r9
 8000444:	46c2      	mov	sl, r8
 8000446:	464b      	mov	r3, r9
 8000448:	d354      	bcc.n	80004f4 <__udivmoddi4+0x298>
 800044a:	d051      	beq.n	80004f0 <__udivmoddi4+0x294>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2c8>
 8000450:	ebb1 050a 	subs.w	r5, r1, sl
 8000454:	eb64 0403 	sbc.w	r4, r4, r3
 8000458:	fa04 fc0c 	lsl.w	ip, r4, ip
 800045c:	40fd      	lsrs	r5, r7
 800045e:	40fc      	lsrs	r4, r7
 8000460:	ea4c 0505 	orr.w	r5, ip, r5
 8000464:	e9c6 5400 	strd	r5, r4, [r6]
 8000468:	2700      	movs	r7, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f703 	lsr.w	r7, r0, r3
 8000474:	4095      	lsls	r5, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	fa21 f303 	lsr.w	r3, r1, r3
 800047e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000482:	4338      	orrs	r0, r7
 8000484:	0c01      	lsrs	r1, r0, #16
 8000486:	fbb3 f7fe 	udiv	r7, r3, lr
 800048a:	fa1f f885 	uxth.w	r8, r5
 800048e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb07 f308 	mul.w	r3, r7, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x256>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004a8:	d22f      	bcs.n	800050a <__udivmoddi4+0x2ae>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d92d      	bls.n	800050a <__udivmoddi4+0x2ae>
 80004ae:	3f02      	subs	r7, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1acb      	subs	r3, r1, r3
 80004b4:	b281      	uxth	r1, r0
 80004b6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ba:	fb0e 3310 	mls	r3, lr, r0, r3
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb00 f308 	mul.w	r3, r0, r8
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x27e>
 80004ca:	1869      	adds	r1, r5, r1
 80004cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d0:	d217      	bcs.n	8000502 <__udivmoddi4+0x2a6>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d915      	bls.n	8000502 <__udivmoddi4+0x2a6>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4429      	add	r1, r5
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e0:	e73b      	b.n	800035a <__udivmoddi4+0xfe>
 80004e2:	4637      	mov	r7, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e709      	b.n	80002fc <__udivmoddi4+0xa0>
 80004e8:	4607      	mov	r7, r0
 80004ea:	e6e7      	b.n	80002bc <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x8c>
 80004f0:	4541      	cmp	r1, r8
 80004f2:	d2ab      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f8:	eb69 020e 	sbc.w	r2, r9, lr
 80004fc:	3801      	subs	r0, #1
 80004fe:	4613      	mov	r3, r2
 8000500:	e7a4      	b.n	800044c <__udivmoddi4+0x1f0>
 8000502:	4660      	mov	r0, ip
 8000504:	e7e9      	b.n	80004da <__udivmoddi4+0x27e>
 8000506:	4618      	mov	r0, r3
 8000508:	e795      	b.n	8000436 <__udivmoddi4+0x1da>
 800050a:	4667      	mov	r7, ip
 800050c:	e7d1      	b.n	80004b2 <__udivmoddi4+0x256>
 800050e:	4681      	mov	r9, r0
 8000510:	e77c      	b.n	800040c <__udivmoddi4+0x1b0>
 8000512:	3802      	subs	r0, #2
 8000514:	442c      	add	r4, r5
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0x14c>
 8000518:	f1ac 0c02 	sub.w	ip, ip, #2
 800051c:	442b      	add	r3, r5
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x124>
 8000520:	4638      	mov	r0, r7
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xda>
 8000524:	4637      	mov	r7, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa0>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <FB_Init>:


static void FB_Message_Warning(lv_obj_t *parent, uint16_t x_pos, uint16_t y_pos, const char *message);

void FB_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	  Displayer_GUI_Init();
 8000530:	f000 f976 	bl	8000820 <Displayer_GUI_Init>
	  Touch_Screen_Init();
 8000534:	f000 fa48 	bl	80009c8 <Touch_Screen_Init>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <FB_Main_Screen>:


void FB_Main_Screen(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0


}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <SDRAM_Init>:
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *sdram_handle, FMC_SDRAM_CommandTypeDef *command);

SDRAM_HandleTypeDef hsdram1;

void SDRAM_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	; 0x30
 8000550:	af00      	add	r7, sp, #0


	FMC_SDRAM_CommandTypeDef   command;
    FMC_SDRAM_TimingTypeDef    SdramTiming = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
 8000560:	615a      	str	r2, [r3, #20]
 8000562:	619a      	str	r2, [r3, #24]

  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <SDRAM_Init+0x9c>)
 8000566:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SDRAM_Init+0xa0>)
 8000568:	601a      	str	r2, [r3, #0]

  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SDRAM_Init+0x9c>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <SDRAM_Init+0x9c>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <SDRAM_Init+0x9c>)
 8000578:	2204      	movs	r2, #4
 800057a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <SDRAM_Init+0x9c>)
 800057e:	2210      	movs	r2, #16
 8000580:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SDRAM_Init+0x9c>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <SDRAM_Init+0x9c>)
 800058a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800058e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <SDRAM_Init+0x9c>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <SDRAM_Init+0x9c>)
 8000598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800059c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <SDRAM_Init+0x9c>)
 80005a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <SDRAM_Init+0x9c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28


  SdramTiming.LoadToActiveDelay = 2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80005b0:	2306      	movs	r3, #6
 80005b2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80005b8:	2306      	movs	r3, #6
 80005ba:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]

  HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4619      	mov	r1, r3
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <SDRAM_Init+0x9c>)
 80005ce:	f027 fa45 	bl	8027a5c <HAL_SDRAM_Init>

  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	4619      	mov	r1, r3
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <SDRAM_Init+0x9c>)
 80005da:	f000 f809 	bl	80005f0 <SDRAM_Initialization_Sequence>

}
 80005de:	bf00      	nop
 80005e0:	3730      	adds	r7, #48	; 0x30
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200200d8 	.word	0x200200d8
 80005ec:	a0000140 	.word	0xa0000140

080005f0 <SDRAM_Initialization_Sequence>:

static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *sdram_handle, FMC_SDRAM_CommandTypeDef *command)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd;

  command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2210      	movs	r2, #16
 8000604:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	2201      	movs	r2, #1
 800060a:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000616:	6839      	ldr	r1, [r7, #0]
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f027 fa53 	bl	8027ac4 <HAL_SDRAM_SendCommand>

  HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f024 fdd6 	bl	80251d0 <HAL_Delay>

  command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	2202      	movs	r2, #2
 8000628:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2201      	movs	r2, #1
 8000634:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 800063c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000640:	6839      	ldr	r1, [r7, #0]
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f027 fa3e 	bl	8027ac4 <HAL_SDRAM_SendCommand>

  command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	2203      	movs	r2, #3
 800064c:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2210      	movs	r2, #16
 8000652:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 8;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2208      	movs	r2, #8
 8000658:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000664:	6839      	ldr	r1, [r7, #0]
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f027 fa2c 	bl	8027ac4 <HAL_SDRAM_SendCommand>

  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800066c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000670:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	2204      	movs	r2, #4
 8000676:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	2210      	movs	r2, #16
 800067c:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2201      	movs	r2, #1
 8000682:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = tmpmrd;
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 800068a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068e:	6839      	ldr	r1, [r7, #0]
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f027 fa17 	bl	8027ac4 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, SDRAM_REFRESH_TIME);
 8000696:	f240 6103 	movw	r1, #1539	; 0x603
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <SDRAM_Initialization_Sequence+0xb8>)
 800069c:	f027 fa3d 	bl	8027b1a <HAL_SDRAM_SetAutoRefreshNumber>

}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200200d8 	.word	0x200200d8

080006ac <Displayer_Init>:
 * retval: none.
 * brief : This function gets displayer ready to be driven.
 */

void Displayer_Init()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

	LCD_BACKLIGHT_STATE(1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2108      	movs	r1, #8
 80006b4:	4823      	ldr	r0, [pc, #140]	; (8000744 <Displayer_Init+0x98>)
 80006b6:	f025 f9c3 	bl	8025a40 <HAL_GPIO_WritePin>
	LCD_DISP_STATE(1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c0:	4821      	ldr	r0, [pc, #132]	; (8000748 <Displayer_Init+0x9c>)
 80006c2:	f025 f9bd 	bl	8025a40 <HAL_GPIO_WritePin>

	lcd_handle.Instance = LTDC;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <Displayer_Init+0xa0>)
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <Displayer_Init+0xa4>)
 80006ca:	601a      	str	r2, [r3, #0]
	lcd_handle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <Displayer_Init+0xa0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
	lcd_handle.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <Displayer_Init+0xa0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
	lcd_handle.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <Displayer_Init+0xa0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
	lcd_handle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <Displayer_Init+0xa0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
	lcd_handle.Init.HorizontalSync = (DISPLAYER_HSYNC - 1);
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <Displayer_Init+0xa0>)
 80006e6:	2228      	movs	r2, #40	; 0x28
 80006e8:	615a      	str	r2, [r3, #20]
	lcd_handle.Init.VerticalSync = (DISPLAYER_VSYNC - 1);
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <Displayer_Init+0xa0>)
 80006ec:	2209      	movs	r2, #9
 80006ee:	619a      	str	r2, [r3, #24]
	lcd_handle.Init.AccumulatedHBP = (DISPLAYER_HSYNC + DISPLAYER_HBP - 1);
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <Displayer_Init+0xa0>)
 80006f2:	2235      	movs	r2, #53	; 0x35
 80006f4:	61da      	str	r2, [r3, #28]
	lcd_handle.Init.AccumulatedVBP = (DISPLAYER_VSYNC + DISPLAYER_VBP - 1);
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <Displayer_Init+0xa0>)
 80006f8:	220b      	movs	r2, #11
 80006fa:	621a      	str	r2, [r3, #32]
	lcd_handle.Init.AccumulatedActiveH = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <Displayer_Init+0xa0>)
 80006fe:	f240 121b 	movw	r2, #283	; 0x11b
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
			+ DISPLAYER_VBP - 1);
	lcd_handle.Init.AccumulatedActiveW = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <Displayer_Init+0xa0>)
 8000706:	f240 2215 	movw	r2, #533	; 0x215
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
			+ DISPLAYER_HBP - 1);
	lcd_handle.Init.TotalHeigh = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <Displayer_Init+0xa0>)
 800070e:	f240 121d 	movw	r2, #285	; 0x11d
 8000712:	631a      	str	r2, [r3, #48]	; 0x30
			+ DISPLAYER_VBP + DISPLAYER_VFP - 1);
	lcd_handle.Init.TotalWidth = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <Displayer_Init+0xa0>)
 8000716:	f240 2235 	movw	r2, #565	; 0x235
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
			+ DISPLAYER_HBP + DISPLAYER_HFP - 1);
	lcd_handle.Init.Backcolor.Blue = 0;
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <Displayer_Init+0xa0>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	lcd_handle.Init.Backcolor.Green = 0;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <Displayer_Init+0xa0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	lcd_handle.Init.Backcolor.Red = 0;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <Displayer_Init+0xa0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	HAL_LTDC_Init(&lcd_handle);
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <Displayer_Init+0xa0>)
 8000736:	f025 fdc1 	bl	80262bc <HAL_LTDC_Init>
	Displayer_Layer_Init();
 800073a:	f000 f80b 	bl	8000754 <Displayer_Layer_Init>

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022800 	.word	0x40022800
 8000748:	40022000 	.word	0x40022000
 800074c:	2002010c 	.word	0x2002010c
 8000750:	40016800 	.word	0x40016800

08000754 <Displayer_Layer_Init>:
 * brief : This function initialises first layer.
 */


static void Displayer_Layer_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

	lcd_handle.LayerCfg[0].WindowX0 = 0;
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <Displayer_Layer_Init+0x84>)
 800075a:	2200      	movs	r2, #0
 800075c:	639a      	str	r2, [r3, #56]	; 0x38
	lcd_handle.LayerCfg[0].WindowX1 = DISPLAYER_WIDTH;
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <Displayer_Layer_Init+0x84>)
 8000760:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000764:	63da      	str	r2, [r3, #60]	; 0x3c
	lcd_handle.LayerCfg[0].WindowY0 = 0;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <Displayer_Layer_Init+0x84>)
 8000768:	2200      	movs	r2, #0
 800076a:	641a      	str	r2, [r3, #64]	; 0x40
	lcd_handle.LayerCfg[0].WindowY1 = DISPLAYER_HEIGHT;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <Displayer_Layer_Init+0x84>)
 800076e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000772:	645a      	str	r2, [r3, #68]	; 0x44
	lcd_handle.LayerCfg[0].PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <Displayer_Layer_Init+0x84>)
 8000776:	2200      	movs	r2, #0
 8000778:	649a      	str	r2, [r3, #72]	; 0x48
	lcd_handle.LayerCfg[0].Alpha = 255;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <Displayer_Layer_Init+0x84>)
 800077c:	22ff      	movs	r2, #255	; 0xff
 800077e:	64da      	str	r2, [r3, #76]	; 0x4c
	lcd_handle.LayerCfg[0].Alpha0 = 0;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <Displayer_Layer_Init+0x84>)
 8000782:	2200      	movs	r2, #0
 8000784:	651a      	str	r2, [r3, #80]	; 0x50
	lcd_handle.LayerCfg[0].BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <Displayer_Layer_Init+0x84>)
 8000788:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800078c:	655a      	str	r2, [r3, #84]	; 0x54
	lcd_handle.LayerCfg[0].BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <Displayer_Layer_Init+0x84>)
 8000790:	2207      	movs	r2, #7
 8000792:	659a      	str	r2, [r3, #88]	; 0x58
	lcd_handle.LayerCfg[0].FBStartAdress = (uint32_t)0xC0000000;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <Displayer_Layer_Init+0x84>)
 8000796:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800079a:	65da      	str	r2, [r3, #92]	; 0x5c
	lcd_handle.LayerCfg[0].ImageWidth = DISPLAYER_WIDTH;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <Displayer_Layer_Init+0x84>)
 800079e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007a2:	661a      	str	r2, [r3, #96]	; 0x60
	lcd_handle.LayerCfg[0].ImageHeight = DISPLAYER_HEIGHT;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <Displayer_Layer_Init+0x84>)
 80007a6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80007aa:	665a      	str	r2, [r3, #100]	; 0x64
	lcd_handle.LayerCfg[0].Backcolor.Blue = 0;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <Displayer_Layer_Init+0x84>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	lcd_handle.LayerCfg[0].Backcolor.Green = 0;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <Displayer_Layer_Init+0x84>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	lcd_handle.LayerCfg[0].Backcolor.Red = 0;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <Displayer_Layer_Init+0x84>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_LTDC_ConfigLayer(&lcd_handle, &lcd_handle.LayerCfg[0], 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	4905      	ldr	r1, [pc, #20]	; (80007dc <Displayer_Layer_Init+0x88>)
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <Displayer_Layer_Init+0x84>)
 80007ca:	f025 fe47 	bl	802645c <HAL_LTDC_ConfigLayer>
	HAL_LTDC_EnableDither(&lcd_handle);
 80007ce:	4802      	ldr	r0, [pc, #8]	; (80007d8 <Displayer_Layer_Init+0x84>)
 80007d0:	f025 fe82 	bl	80264d8 <HAL_LTDC_EnableDither>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2002010c 	.word	0x2002010c
 80007dc:	20020144 	.word	0x20020144

080007e0 <Display_Draw_Pixel>:
/*
 * NOTE : This function will wait for SDRAM to start.
 */

void Display_Draw_Pixel (int16_t Xpos, int16_t Ypos, uint32_t color)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	603a      	str	r2, [r7, #0]
 80007ea:	80fb      	strh	r3, [r7, #6]
 80007ec:	460b      	mov	r3, r1
 80007ee:	80bb      	strh	r3, [r7, #4]
	*(__IO uint32_t *)(lcd_handle.LayerCfg[0].FBStartAdress+( 4 * (Ypos * lcd_handle.LayerCfg [0] .ImageWidth + Xpos))) = color;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <Display_Draw_Pixel+0x3c>)
 80007f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80007f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007f8:	4908      	ldr	r1, [pc, #32]	; (800081c <Display_Draw_Pixel+0x3c>)
 80007fa:	6e09      	ldr	r1, [r1, #96]	; 0x60
 80007fc:	fb01 f103 	mul.w	r1, r1, r3
 8000800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000804:	440b      	add	r3, r1
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	461a      	mov	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	2002010c 	.word	0x2002010c

08000820 <Displayer_GUI_Init>:


static void display_interface(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p);

void Displayer_GUI_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08e      	sub	sp, #56	; 0x38
 8000824:	af00      	add	r7, sp, #0
	  SDRAM_Init();
 8000826:	f7ff fe91 	bl	800054c <SDRAM_Init>
	  Displayer_Init();
 800082a:	f7ff ff3f 	bl	80006ac <Displayer_Init>

	  lv_init();
 800082e:	f004 faeb 	bl	8004e08 <lv_init>

	  static lv_disp_buf_t disp_buf;
	  static lv_color_t buf[LV_HOR_RES_MAX * 50];
	  lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 50);
 8000832:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8000836:	2200      	movs	r2, #0
 8000838:	4909      	ldr	r1, [pc, #36]	; (8000860 <Displayer_GUI_Init+0x40>)
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <Displayer_GUI_Init+0x44>)
 800083c:	f019 fb1a 	bl	8019e74 <lv_disp_buf_init>

	  lv_disp_drv_t disp_drv;
	  lv_disp_drv_init(&disp_drv);
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4618      	mov	r0, r3
 8000844:	f019 fad3 	bl	8019dee <lv_disp_drv_init>
	  disp_drv.flush_cb = display_interface;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <Displayer_GUI_Init+0x48>)
 800084a:	613b      	str	r3, [r7, #16]
	  disp_drv.buffer = &disp_buf;
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <Displayer_GUI_Init+0x44>)
 800084e:	60bb      	str	r3, [r7, #8]
	  lv_disp_drv_register(&disp_drv);
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4618      	mov	r0, r3
 8000854:	f019 fb2a 	bl	8019eac <lv_disp_drv_register>
}
 8000858:	bf00      	nop
 800085a:	3738      	adds	r7, #56	; 0x38
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000094 	.word	0x20000094
 8000864:	20000070 	.word	0x20000070
 8000868:	0800086d 	.word	0x0800086d

0800086c <display_interface>:

static void display_interface(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
    int32_t x, y;
    for(y = area->y1; y <= area->y2; y++) {
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	e01d      	b.n	80008be <display_interface+0x52>
        for(x = area->x1; x <= area->x2; x++) {
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	e00e      	b.n	80008aa <display_interface+0x3e>
        	Display_Draw_Pixel(x, y, (uint32_t)color_p->full);
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	b218      	sxth	r0, r3
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	b219      	sxth	r1, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	f7ff ffa1 	bl	80007e0 <Display_Draw_Pixel>
            color_p++;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3304      	adds	r3, #4
 80008a2:	607b      	str	r3, [r7, #4]
        for(x = area->x1; x <= area->x2; x++) {
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	3301      	adds	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008b0:	461a      	mov	r2, r3
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	4293      	cmp	r3, r2
 80008b6:	dde9      	ble.n	800088c <display_interface+0x20>
    for(y = area->y1; y <= area->y2; y++) {
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	3301      	adds	r3, #1
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008c4:	461a      	mov	r2, r3
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	4293      	cmp	r3, r2
 80008ca:	ddda      	ble.n	8000882 <display_interface+0x16>
        }
    }

    lv_disp_flush_ready(disp);
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f019 fc65 	bl	801a19c <lv_disp_flush_ready>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <Touch_Screen_Ispressed>:
#include "touch_screen_reglist.h"

#define I2C_Handle (&hi2c3)

_Bool Touch_Screen_Ispressed()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af04      	add	r7, sp, #16

	uint8_t touch_num;

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_NUM, I2C_MEMADD_SIZE_8BIT, &touch_num, 1, 10);
 80008e2:	230a      	movs	r3, #10
 80008e4:	9302      	str	r3, [sp, #8]
 80008e6:	2301      	movs	r3, #1
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2301      	movs	r3, #1
 80008f0:	2202      	movs	r2, #2
 80008f2:	2171      	movs	r1, #113	; 0x71
 80008f4:	4806      	ldr	r0, [pc, #24]	; (8000910 <Touch_Screen_Ispressed+0x34>)
 80008f6:	f025 f94d 	bl	8025b94 <HAL_I2C_Mem_Read>

	if(touch_num > 0)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <Touch_Screen_Ispressed+0x28>
	{
		return true;
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <Touch_Screen_Ispressed+0x2a>
	}
	else
	{
		return false;
 8000904:	2300      	movs	r3, #0
	}

}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200201b4 	.word	0x200201b4

08000914 <Touch_Screen_Read>:

void Touch_Screen_Read(uint16_t *touch_x, uint16_t *touch_y)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af04      	add	r7, sp, #16
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	 uint8_t ts_x[2] ;
	 uint8_t ts_y[2] ;

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_X_H, I2C_MEMADD_SIZE_8BIT, &ts_x[0], 1, 10);
 800091e:	230a      	movs	r3, #10
 8000920:	9302      	str	r3, [sp, #8]
 8000922:	2301      	movs	r3, #1
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2301      	movs	r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	2171      	movs	r1, #113	; 0x71
 8000932:	4824      	ldr	r0, [pc, #144]	; (80009c4 <Touch_Screen_Read+0xb0>)
 8000934:	f025 f92e 	bl	8025b94 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_X_L, I2C_MEMADD_SIZE_8BIT, &ts_x[1], 1, 10);
 8000938:	230a      	movs	r3, #10
 800093a:	9302      	str	r3, [sp, #8]
 800093c:	2301      	movs	r3, #1
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	3301      	adds	r3, #1
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2301      	movs	r3, #1
 800094a:	2204      	movs	r2, #4
 800094c:	2171      	movs	r1, #113	; 0x71
 800094e:	481d      	ldr	r0, [pc, #116]	; (80009c4 <Touch_Screen_Read+0xb0>)
 8000950:	f025 f920 	bl	8025b94 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_Y_H, I2C_MEMADD_SIZE_8BIT, &ts_y[0], 1, 10);
 8000954:	230a      	movs	r3, #10
 8000956:	9302      	str	r3, [sp, #8]
 8000958:	2301      	movs	r3, #1
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2301      	movs	r3, #1
 8000964:	2205      	movs	r2, #5
 8000966:	2171      	movs	r1, #113	; 0x71
 8000968:	4816      	ldr	r0, [pc, #88]	; (80009c4 <Touch_Screen_Read+0xb0>)
 800096a:	f025 f913 	bl	8025b94 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_Y_L, I2C_MEMADD_SIZE_8BIT, &ts_y[1], 1, 10);
 800096e:	230a      	movs	r3, #10
 8000970:	9302      	str	r3, [sp, #8]
 8000972:	2301      	movs	r3, #1
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	3301      	adds	r3, #1
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	2206      	movs	r2, #6
 8000982:	2171      	movs	r1, #113	; 0x71
 8000984:	480f      	ldr	r0, [pc, #60]	; (80009c4 <Touch_Screen_Read+0xb0>)
 8000986:	f025 f905 	bl	8025b94 <HAL_I2C_Mem_Read>

	*touch_x = ts_x[1] + ((ts_x[0] & 0x0F) << 8);
 800098a:	7b7b      	ldrb	r3, [r7, #13]
 800098c:	b29a      	uxth	r2, r3
 800098e:	7b3b      	ldrb	r3, [r7, #12]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	b29b      	uxth	r3, r3
 8000994:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000998:	b29b      	uxth	r3, r3
 800099a:	4413      	add	r3, r2
 800099c:	b29a      	uxth	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	801a      	strh	r2, [r3, #0]
	*touch_y = ts_y[1] + ((ts_y[0] & 0x0F) << 8);
 80009a2:	7a7b      	ldrb	r3, [r7, #9]
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	7a3b      	ldrb	r3, [r7, #8]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4413      	add	r3, r2
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	801a      	strh	r2, [r3, #0]

}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200201b4 	.word	0x200201b4

080009c8 <Touch_Screen_Init>:
#include "touch_screen.h"

static bool my_touchpad_read(struct _lv_indev_drv_t * indev, lv_indev_data_t * data);

void Touch_Screen_Init()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
	MX_I2C3_Init();
 80009ce:	f000 f9bb 	bl	8000d48 <MX_I2C3_Init>

	lv_indev_drv_t indev_drv;
	lv_indev_drv_init(&indev_drv);
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f019 fc91 	bl	801a2fc <lv_indev_drv_init>
	indev_drv.type = LV_INDEV_TYPE_POINTER;
 80009da:	2301      	movs	r3, #1
 80009dc:	713b      	strb	r3, [r7, #4]
	indev_drv.read_cb = my_touchpad_read;
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <Touch_Screen_Init+0x2c>)
 80009e0:	60bb      	str	r3, [r7, #8]
	lv_indev_drv_register(&indev_drv);
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4618      	mov	r0, r3
 80009e6:	f019 fcab 	bl	801a340 <lv_indev_drv_register>
}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	080009f9 	.word	0x080009f9

080009f8 <my_touchpad_read>:

static bool my_touchpad_read(struct _lv_indev_drv_t * indev, lv_indev_data_t * data)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
	uint16_t ts_x;
	uint16_t ts_y;

	data->state = Touch_Screen_Ispressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 8000a02:	f7ff ff6b 	bl	80008dc <Touch_Screen_Ispressed>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	739a      	strb	r2, [r3, #14]

	if (data->state == LV_INDEV_STATE_PR)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	7b9b      	ldrb	r3, [r3, #14]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d107      	bne.n	8000a26 <my_touchpad_read+0x2e>
	{
		Touch_Screen_Read(&ts_x, &ts_y);
 8000a16:	f107 020c 	add.w	r2, r7, #12
 8000a1a:	f107 030e 	add.w	r3, r7, #14
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff77 	bl	8000914 <Touch_Screen_Read>
	}

	data->point.x = (int16_t)ts_y;
 8000a26:	89bb      	ldrh	r3, [r7, #12]
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	801a      	strh	r2, [r3, #0]
	data->point.y = (int16_t)ts_x;
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	805a      	strh	r2, [r3, #2]

	return false;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_DMA_Init+0x48>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <MX_DMA_Init+0x48>)
 8000a4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <MX_DMA_Init+0x48>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	203b      	movs	r0, #59	; 0x3b
 8000a64:	f024 fc8e 	bl	8025384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a68:	203b      	movs	r0, #59	; 0x3b
 8000a6a:	f024 fca7 	bl	80253bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2045      	movs	r0, #69	; 0x45
 8000a74:	f024 fc86 	bl	8025384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a78:	2045      	movs	r0, #69	; 0x45
 8000a7a:	f024 fc9f 	bl	80253bc <HAL_NVIC_EnableIRQ>

}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000aa0:	4b3a      	ldr	r3, [pc, #232]	; (8000b8c <HAL_FMC_MspInit+0x100>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d16d      	bne.n	8000b84 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000aa8:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <HAL_FMC_MspInit+0x100>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <HAL_FMC_MspInit+0x104>)
 8000ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab2:	4a37      	ldr	r2, [pc, #220]	; (8000b90 <HAL_FMC_MspInit+0x104>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6393      	str	r3, [r2, #56]	; 0x38
 8000aba:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <HAL_FMC_MspInit+0x104>)
 8000abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000ac6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000aca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	482c      	ldr	r0, [pc, #176]	; (8000b94 <HAL_FMC_MspInit+0x108>)
 8000ae2:	f024 fe03 	bl	80256ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000ae6:	f248 1313 	movw	r3, #33043	; 0x8113
 8000aea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000af8:	230c      	movs	r3, #12
 8000afa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4825      	ldr	r0, [pc, #148]	; (8000b98 <HAL_FMC_MspInit+0x10c>)
 8000b02:	f024 fdf3 	bl	80256ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000b06:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481e      	ldr	r0, [pc, #120]	; (8000b9c <HAL_FMC_MspInit+0x110>)
 8000b22:	f024 fde3 	bl	80256ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b26:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4817      	ldr	r0, [pc, #92]	; (8000ba0 <HAL_FMC_MspInit+0x114>)
 8000b42:	f024 fdd3 	bl	80256ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000b46:	2328      	movs	r3, #40	; 0x28
 8000b48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b56:	230c      	movs	r3, #12
 8000b58:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <HAL_FMC_MspInit+0x118>)
 8000b60:	f024 fdc4 	bl	80256ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b64:	2308      	movs	r3, #8
 8000b66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b74:	230c      	movs	r3, #12
 8000b76:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <HAL_FMC_MspInit+0x11c>)
 8000b7e:	f024 fdb5 	bl	80256ec <HAL_GPIO_Init>
 8000b82:	e000      	b.n	8000b86 <HAL_FMC_MspInit+0xfa>
    return;
 8000b84:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20017794 	.word	0x20017794
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40021800 	.word	0x40021800
 8000b9c:	40020c00 	.word	0x40020c00
 8000ba0:	40021400 	.word	0x40021400
 8000ba4:	40021c00 	.word	0x40021c00
 8000ba8:	40020800 	.word	0x40020800

08000bac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000bb4:	f7ff ff6a 	bl	8000a8c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b090      	sub	sp, #64	; 0x40
 8000bc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd6:	4b58      	ldr	r3, [pc, #352]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a57      	ldr	r2, [pc, #348]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b55      	ldr	r3, [pc, #340]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b52      	ldr	r3, [pc, #328]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a51      	ldr	r2, [pc, #324]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b4f      	ldr	r3, [pc, #316]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b4c      	ldr	r3, [pc, #304]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a4b      	ldr	r2, [pc, #300]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b49      	ldr	r3, [pc, #292]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
 8000c1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1e:	4b46      	ldr	r3, [pc, #280]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a45      	ldr	r2, [pc, #276]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c36:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a3f      	ldr	r2, [pc, #252]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a39      	ldr	r2, [pc, #228]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b37      	ldr	r3, [pc, #220]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a33      	ldr	r2, [pc, #204]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b31      	ldr	r3, [pc, #196]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a2d      	ldr	r2, [pc, #180]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0320 	and.w	r3, r3, #32
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_GPIO_Init+0x178>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2108      	movs	r1, #8
 8000cca:	481c      	ldr	r0, [pc, #112]	; (8000d3c <MX_GPIO_Init+0x17c>)
 8000ccc:	f024 feb8 	bl	8025a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f241 0102 	movw	r1, #4098	; 0x1002
 8000cd6:	481a      	ldr	r0, [pc, #104]	; (8000d40 <MX_GPIO_Init+0x180>)
 8000cd8:	f024 feb2 	bl	8025a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_GPIO_Init+0x184>)
 8000cf2:	f024 fcfb 	bl	80256ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480b      	ldr	r0, [pc, #44]	; (8000d3c <MX_GPIO_Init+0x17c>)
 8000d0e:	f024 fced 	bl	80256ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000d12:	f241 0302 	movw	r3, #4098	; 0x1002
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_GPIO_Init+0x180>)
 8000d2c:	f024 fcde 	bl	80256ec <HAL_GPIO_Init>

}
 8000d30:	bf00      	nop
 8000d32:	3740      	adds	r7, #64	; 0x40
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40022800 	.word	0x40022800
 8000d40:	40022000 	.word	0x40022000
 8000d44:	40020800 	.word	0x40020800

08000d48 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <MX_I2C3_Init+0x78>)
 8000d50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0040EAFF;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <MX_I2C3_Init+0x7c>)
 8000d56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d5a:	22e0      	movs	r2, #224	; 0xe0
 8000d5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d84:	f024 fe76 	bl	8025a74 <HAL_I2C_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d8e:	f000 fa5f 	bl	8001250 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000d96:	f025 f9f9 	bl	802618c <HAL_I2CEx_ConfigAnalogFilter>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000da0:	f000 fa56 	bl	8001250 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000da4:	2100      	movs	r1, #0
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_I2C3_Init+0x74>)
 8000da8:	f025 fa3b 	bl	8026222 <HAL_I2CEx_ConfigDigitalFilter>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000db2:	f000 fa4d 	bl	8001250 <Error_Handler>
  }

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200201b4 	.word	0x200201b4
 8000dc0:	40005c00 	.word	0x40005c00
 8000dc4:	0040eaff 	.word	0x0040eaff

08000dc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_I2C_MspInit+0x8c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d130      	bne.n	8000e4c <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_I2C_MspInit+0x90>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <HAL_I2C_MspInit+0x90>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_I2C_MspInit+0x90>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e02:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e08:	2312      	movs	r3, #18
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e14:	2304      	movs	r3, #4
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <HAL_I2C_MspInit+0x94>)
 8000e20:	f024 fc64 	bl	80256ec <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_I2C_MspInit+0x90>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <HAL_I2C_MspInit+0x90>)
 8000e2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_I2C_MspInit+0x90>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2048      	movs	r0, #72	; 0x48
 8000e42:	f024 fa9f 	bl	8025384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000e46:	2048      	movs	r0, #72	; 0x48
 8000e48:	f024 fab8 	bl	80253bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40005c00 	.word	0x40005c00
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40021c00 	.word	0x40021c00

08000e60 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08e      	sub	sp, #56	; 0x38
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a51      	ldr	r2, [pc, #324]	; (8000fc4 <HAL_LTDC_MspInit+0x164>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	f040 809b 	bne.w	8000fba <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e84:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e88:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000e8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e90:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e98:	623b      	str	r3, [r7, #32]
 8000e9a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9c:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a49      	ldr	r2, [pc, #292]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000eb4:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a43      	ldr	r2, [pc, #268]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec0:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ecc:	4b3e      	ldr	r3, [pc, #248]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a3d      	ldr	r2, [pc, #244]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b3b      	ldr	r3, [pc, #236]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee4:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	4a37      	ldr	r2, [pc, #220]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef0:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000efc:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	4a31      	ldr	r2, [pc, #196]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6313      	str	r3, [r2, #48]	; 0x30
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_LTDC_MspInit+0x168>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f14:	2310      	movs	r3, #16
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f24:	230e      	movs	r3, #14
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4827      	ldr	r0, [pc, #156]	; (8000fcc <HAL_LTDC_MspInit+0x16c>)
 8000f30:	f024 fbdc 	bl	80256ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8000f34:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f46:	230e      	movs	r3, #14
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481f      	ldr	r0, [pc, #124]	; (8000fd0 <HAL_LTDC_MspInit+0x170>)
 8000f52:	f024 fbcb 	bl	80256ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000f56:	23f7      	movs	r3, #247	; 0xf7
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f66:	230e      	movs	r3, #14
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <HAL_LTDC_MspInit+0x174>)
 8000f72:	f024 fbbb 	bl	80256ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f88:	2309      	movs	r3, #9
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <HAL_LTDC_MspInit+0x178>)
 8000f94:	f024 fbaa 	bl	80256ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8000f98:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000faa:	230e      	movs	r3, #14
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4809      	ldr	r0, [pc, #36]	; (8000fdc <HAL_LTDC_MspInit+0x17c>)
 8000fb6:	f024 fb99 	bl	80256ec <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3738      	adds	r7, #56	; 0x38
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40016800 	.word	0x40016800
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40022400 	.word	0x40022400
 8000fd4:	40022800 	.word	0x40022800
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <SCB_EnableICache+0x3c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ff8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <SCB_EnableICache+0x3c>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <SCB_EnableICache+0x3c>)
 8001002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001006:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800100c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <SCB_EnableDCache+0x7c>)
 8001028:	2200      	movs	r2, #0
 800102a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800102e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <SCB_EnableDCache+0x7c>)
 8001034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001038:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0b5b      	lsrs	r3, r3, #13
 800103e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001042:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	08db      	lsrs	r3, r3, #3
 8001048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800104c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	015a      	lsls	r2, r3, #5
 8001052:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001056:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800105c:	490f      	ldr	r1, [pc, #60]	; (800109c <SCB_EnableDCache+0x7c>)
 800105e:	4313      	orrs	r3, r2
 8001060:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1e5a      	subs	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1ef      	bne.n	800104e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1e5a      	subs	r2, r3, #1
 8001072:	60fa      	str	r2, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1e5      	bne.n	8001044 <SCB_EnableDCache+0x24>
 8001078:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <SCB_EnableDCache+0x7c>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <SCB_EnableDCache+0x7c>)
 8001082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001086:	6153      	str	r3, [r2, #20]
 8001088:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800108c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80010a4:	f7ff ff9c 	bl	8000fe0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80010a8:	f7ff ffba 	bl	8001020 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ac:	f024 f862 	bl	8025174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b0:	f000 f80c 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b4:	f7ff fd84 	bl	8000bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b8:	f7ff fcc2 	bl	8000a40 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* Module Init */
  FB_Init();
 80010bc:	f7ff fa36 	bl	800052c <FB_Init>

  /* Create Main Screen */
  FB_Main_Screen();
 80010c0:	f7ff fa3c 	bl	800053c <FB_Main_Screen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  lv_task_handler();
 80010c4:	f01c f870 	bl	801d1a8 <lv_task_handler>
 80010c8:	e7fc      	b.n	80010c4 <main+0x24>
	...

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0b4      	sub	sp, #208	; 0xd0
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010d6:	2230      	movs	r2, #48	; 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f027 f8fb 	bl	80282d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	2284      	movs	r2, #132	; 0x84
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f027 f8ec 	bl	80282d6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	4b43      	ldr	r3, [pc, #268]	; (800120c <SystemClock_Config+0x140>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a42      	ldr	r2, [pc, #264]	; (800120c <SystemClock_Config+0x140>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b40      	ldr	r3, [pc, #256]	; (800120c <SystemClock_Config+0x140>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001116:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <SystemClock_Config+0x144>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a3d      	ldr	r2, [pc, #244]	; (8001210 <SystemClock_Config+0x144>)
 800111c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <SystemClock_Config+0x144>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112e:	2301      	movs	r3, #1
 8001130:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113c:	2302      	movs	r3, #2
 800113e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001146:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 800114a:	230f      	movs	r3, #15
 800114c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001150:	23f0      	movs	r3, #240	; 0xf0
 8001152:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800115c:	2309      	movs	r3, #9
 800115e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001162:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001166:	4618      	mov	r0, r3
 8001168:	f025 fbca 	bl	8026900 <HAL_RCC_OscConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001172:	f000 f86d 	bl	8001250 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001176:	f025 fb73 	bl	8026860 <HAL_PWREx_EnableOverDrive>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001180:	f000 f866 	bl	8001250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001184:	230f      	movs	r3, #15
 8001186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001196:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800119a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80011a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011aa:	2106      	movs	r1, #6
 80011ac:	4618      	mov	r0, r3
 80011ae:	f025 fe4b 	bl	8026e48 <HAL_RCC_ClockConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80011b8:	f000 f84a 	bl	8001250 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <SystemClock_Config+0x148>)
 80011be:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 80011c0:	2372      	movs	r3, #114	; 0x72
 80011c2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80011c4:	2305      	movs	r3, #5
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80011cc:	2303      	movs	r3, #3
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80011d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011da:	2300      	movs	r3, #0
 80011dc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80011de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80011e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	4618      	mov	r0, r3
 80011f2:	f026 f845 	bl	8027280 <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x134>
  {
    Error_Handler();
 80011fc:	f000 f828 	bl	8001250 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001200:	f025 ff0e 	bl	8027020 <HAL_RCC_EnableCSS>
}
 8001204:	bf00      	nop
 8001206:	37d0      	adds	r7, #208	; 0xd0
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	40007000 	.word	0x40007000
 8001214:	00a10008 	.word	0x00a10008

08001218 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim->Instance == TIM1) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d104      	bne.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x1c>
	    HAL_IncTick();
 800122a:	f023 ffb1 	bl	8025190 <HAL_IncTick>
	    lv_tick_inc(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f019 f938 	bl	801a4a4 <lv_tick_inc>
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 800123e:	f023 ffa7 	bl	8025190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40010000 	.word	0x40010000

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x4>
	...

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_MspInit+0x44>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_MspInit+0x44>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_MspInit+0x44>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_MspInit+0x44>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_MspInit+0x44>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_MspInit+0x44>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	2019      	movs	r0, #25
 80012b6:	f024 f865 	bl	8025384 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012ba:	2019      	movs	r0, #25
 80012bc:	f024 f87e 	bl	80253bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_InitTick+0xa0>)
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_InitTick+0xa0>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6453      	str	r3, [r2, #68]	; 0x44
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_InitTick+0xa0>)
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012d8:	f107 0210 	add.w	r2, r7, #16
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f025 ff7e 	bl	80271e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80012e8:	f025 ff68 	bl	80271bc <HAL_RCC_GetPCLK2Freq>
 80012ec:	4603      	mov	r3, r0
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <HAL_InitTick+0xa4>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0c9b      	lsrs	r3, r3, #18
 80012fc:	3b01      	subs	r3, #1
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_InitTick+0xa8>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_InitTick+0xac>)
 8001304:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_InitTick+0xa8>)
 8001308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800130c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_InitTick+0xa8>)
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_InitTick+0xa8>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_InitTick+0xa8>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <HAL_InitTick+0xa8>)
 8001322:	f026 fc1a 	bl	8027b5a <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <HAL_InitTick+0xa8>)
 800132e:	f026 fc49 	bl	8027bc4 <HAL_TIM_Base_Start_IT>
 8001332:	4603      	mov	r3, r0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	431bde83 	.word	0x431bde83
 8001348:	20020344 	.word	0x20020344
 800134c:	40010000 	.word	0x40010000

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001354:	f025 ff78 	bl	8027248 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x8>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013b2:	f026 fc31 	bl	8027c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20020344 	.word	0x20020344

080013c0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <DMA2_Stream3_IRQHandler+0x10>)
 80013c6:	f024 f807 	bl	80253d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20020284 	.word	0x20020284

080013d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMA2_Stream6_IRQHandler+0x10>)
 80013da:	f023 fffd 	bl	80253d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200202e4 	.word	0x200202e4

080013e8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <I2C3_EV_IRQHandler+0x10>)
 80013ee:	f024 fceb 	bl	8025dc8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200201b4 	.word	0x200201b4

080013fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <SystemInit+0x28>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <SystemInit+0x28>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SystemInit+0x28>)
 8001412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001416:	609a      	str	r2, [r3, #8]
#endif
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800142c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800142e:	e003      	b.n	8001438 <LoopCopyDataInit>

08001430 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001432:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001434:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001436:	3104      	adds	r1, #4

08001438 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800143c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800143e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001440:	d3f6      	bcc.n	8001430 <CopyDataInit>
  ldr  r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001444:	e002      	b.n	800144c <LoopFillZerobss>

08001446 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001446:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001448:	f842 3b04 	str.w	r3, [r2], #4

0800144c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001450:	d3f9      	bcc.n	8001446 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001452:	f7ff ffd3 	bl	80013fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f026 ff0b 	bl	8028270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff fe21 	bl	80010a0 <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001464:	0802baf8 	.word	0x0802baf8
  ldr  r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800146c:	20000054 	.word	0x20000054
  ldr  r2, =_sbss
 8001470:	20000054 	.word	0x20000054
  ldr  r3, = _ebss
 8001474:	20020510 	.word	0x20020510

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>

0800147a <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <lv_disp_get_scr_act+0x14>
 8001488:	f018 fde6 	bl	801a058 <lv_disp_get_default>
 800148c:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 8001494:	2300      	movs	r3, #0
 8001496:	e001      	b.n	800149c <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <lv_disp_get_scr_prev+0x14>
 80014b2:	f018 fdd1 	bl	801a058 <lv_disp_get_default>
 80014b6:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <lv_disp_get_scr_prev+0x1e>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	e001      	b.n	80014c6 <lv_disp_get_scr_prev+0x22>
    }

    return disp->prev_scr;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <lv_disp_get_layer_top+0x14>
 80014dc:	f018 fdbc 	bl	801a058 <lv_disp_get_default>
 80014e0:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e001      	b.n	80014f0 <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <lv_disp_get_layer_sys+0x14>
 8001506:	f018 fda7 	bl	801a058 <lv_disp_get_default>
 800150a:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 8001512:	2300      	movs	r3, #0
 8001514:	e001      	b.n	800151a <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <_lv_group_init>:

/**
 * Init. the group module
 */
void _lv_group_init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8001528:	2118      	movs	r1, #24
 800152a:	4802      	ldr	r0, [pc, #8]	; (8001534 <_lv_group_init+0x10>)
 800152c:	f01a fbd2 	bl	801bcd4 <_lv_ll_init>
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200204f4 	.word	0x200204f4

08001538 <lv_group_add_obj>:
 * Add an object to a group
 * @param group pointer to a group
 * @param obj pointer to an object to add
 */
void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d04e      	beq.n	80015e6 <lv_group_add_obj+0xae>
    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    _LV_LL_READ(group->obj_ll, obj_i) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4618      	mov	r0, r3
 800154c:	f01a fd38 	bl	801bfc0 <_lv_ll_get_head>
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	e00a      	b.n	800156a <lv_group_add_obj+0x32>
        if((*obj_i) == obj) {
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d045      	beq.n	80015ea <lv_group_add_obj+0xb2>
    _LV_LL_READ(group->obj_ll, obj_i) {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68f9      	ldr	r1, [r7, #12]
 8001562:	4618      	mov	r0, r3
 8001564:	f01a fd52 	bl	801c00c <_lv_ll_get_next>
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f1      	bne.n	8001554 <lv_group_add_obj+0x1c>
            return;
        }
    }

    /*If the object is already in a group and focused then defocus it*/
    if(obj->group_p) {
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00a      	beq.n	800158e <lv_group_add_obj+0x56>
        if(lv_obj_is_focused(obj)) {
 8001578:	6838      	ldr	r0, [r7, #0]
 800157a:	f005 fe3f 	bl	80071fc <lv_obj_is_focused>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <lv_group_add_obj+0x56>
            lv_group_refocus(obj->group_p);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f999 	bl	80018c0 <lv_group_refocus>

            LV_LOG_INFO("lv_group_add_obj: assign object to an other group");
        }
    }

    obj->group_p     = group;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	639a      	str	r2, [r3, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	f01a fc30 	bl	801bdfc <_lv_ll_ins_tail>
 800159c:	60b8      	str	r0, [r7, #8]
    LV_ASSERT_MEM(next);
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f01a f958 	bl	801b854 <lv_debug_check_null>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f083 0301 	eor.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <lv_group_add_obj+0x8a>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f04f 0400 	mov.w	r4, #0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4623      	mov	r3, r4
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <lv_group_add_obj+0xc0>)
 80015bc:	f01a f95a 	bl	801b874 <lv_debug_log_error>
 80015c0:	e7fe      	b.n	80015c0 <lv_group_add_obj+0x88>
    if(next == NULL) return;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d012      	beq.n	80015ee <lv_group_add_obj+0xb6>
    *next = obj;
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	601a      	str	r2, [r3, #0]

    /* If the head and the tail is equal then there is only one object in the linked list.
     * In this case automatically activate it*/
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f01a fcf5 	bl	801bfc0 <_lv_ll_get_head>
 80015d6:	4602      	mov	r2, r0
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4293      	cmp	r3, r2
 80015dc:	d108      	bne.n	80015f0 <lv_group_add_obj+0xb8>
        lv_group_refocus(group);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f96e 	bl	80018c0 <lv_group_refocus>
 80015e4:	e004      	b.n	80015f0 <lv_group_add_obj+0xb8>
    if(group == NULL) return;
 80015e6:	bf00      	nop
 80015e8:	e002      	b.n	80015f0 <lv_group_add_obj+0xb8>
            return;
 80015ea:	bf00      	nop
 80015ec:	e000      	b.n	80015f0 <lv_group_add_obj+0xb8>
    if(next == NULL) return;
 80015ee:	bf00      	nop
    }
}
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd90      	pop	{r4, r7, pc}
 80015f6:	bf00      	nop
 80015f8:	08028310 	.word	0x08028310

080015fc <lv_group_focus_obj>:
/**
 * Focus on an object (defocus the current)
 * @param obj pointer to an object to focus on
 */
void lv_group_focus_obj(lv_obj_t * obj)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8084 	beq.w	8001714 <lv_group_focus_obj+0x118>
    lv_group_t * g = obj->group_p;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001610:	613b      	str	r3, [r7, #16]
    if(g == NULL) return;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d07f      	beq.n	8001718 <lv_group_focus_obj+0x11c>

    if(g->frozen != 0) return;
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	7d1b      	ldrb	r3, [r3, #20]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d17a      	bne.n	800171c <lv_group_focus_obj+0x120>

    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <lv_group_focus_obj+0x3e>
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	d072      	beq.n	8001720 <lv_group_focus_obj+0x124>

    /*On defocus edit mode must be leaved*/
    lv_group_set_editing(g, false);
 800163a:	2100      	movs	r1, #0
 800163c:	6938      	ldr	r0, [r7, #16]
 800163e:	f000 f8ca 	bl	80017d6 <lv_group_set_editing>

    lv_obj_t ** i;
    _LV_LL_READ(g->obj_ll, i) {
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4618      	mov	r0, r3
 8001646:	f01a fcbb 	bl	801bfc0 <_lv_ll_get_head>
 800164a:	6178      	str	r0, [r7, #20]
 800164c:	e05e      	b.n	800170c <lv_group_focus_obj+0x110>
        if(*i == obj) {
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	d153      	bne.n	8001700 <lv_group_focus_obj+0x104>
            if(g->obj_focus != NULL) {
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01c      	beq.n	800169a <lv_group_focus_obj+0x9e>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68d2      	ldr	r2, [r2, #12]
 800166c:	6810      	ldr	r0, [r2, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	2117      	movs	r1, #23
 8001672:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	210e      	movs	r1, #14
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fe0a 	bl	8006298 <lv_event_send>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
                if(res != LV_RES_OK) return;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d14a      	bne.n	8001724 <lv_group_focus_obj+0x128>
                lv_obj_invalidate(*g->obj_focus);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f003 ff4b 	bl	8005530 <lv_obj_invalidate>
            }

            g->obj_focus = i;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	60da      	str	r2, [r3, #12]

            if(g->obj_focus != NULL) {
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d03f      	beq.n	8001728 <lv_group_focus_obj+0x12c>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68d2      	ldr	r2, [r2, #12]
 80016b4:	6810      	ldr	r0, [r2, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	2116      	movs	r1, #22
 80016ba:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <lv_group_focus_obj+0xd0>
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	6938      	ldr	r0, [r7, #16]
 80016ca:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	210d      	movs	r1, #13
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fdde 	bl	8006298 <lv_event_send>
 80016dc:	4603      	mov	r3, r0
 80016de:	73bb      	strb	r3, [r7, #14]
                if(res != LV_RES_OK) return;
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d122      	bne.n	800172c <lv_group_focus_obj+0x130>
                lv_obj_invalidate(*g->obj_focus);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 ff1f 	bl	8005530 <lv_obj_invalidate>

                /*If the object or its parent has `top == true` bring it to the foreground*/
                obj_to_foreground(*g->obj_focus);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f9e5 	bl	8001ac8 <obj_to_foreground>
            }
            break;
 80016fe:	e013      	b.n	8001728 <lv_group_focus_obj+0x12c>
    _LV_LL_READ(g->obj_ll, i) {
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	6979      	ldr	r1, [r7, #20]
 8001704:	4618      	mov	r0, r3
 8001706:	f01a fc81 	bl	801c00c <_lv_ll_get_next>
 800170a:	6178      	str	r0, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d19d      	bne.n	800164e <lv_group_focus_obj+0x52>
 8001712:	e00c      	b.n	800172e <lv_group_focus_obj+0x132>
    if(obj == NULL) return;
 8001714:	bf00      	nop
 8001716:	e00a      	b.n	800172e <lv_group_focus_obj+0x132>
    if(g == NULL) return;
 8001718:	bf00      	nop
 800171a:	e008      	b.n	800172e <lv_group_focus_obj+0x132>
    if(g->frozen != 0) return;
 800171c:	bf00      	nop
 800171e:	e006      	b.n	800172e <lv_group_focus_obj+0x132>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
 8001720:	bf00      	nop
 8001722:	e004      	b.n	800172e <lv_group_focus_obj+0x132>
                if(res != LV_RES_OK) return;
 8001724:	bf00      	nop
 8001726:	e002      	b.n	800172e <lv_group_focus_obj+0x132>
            break;
 8001728:	bf00      	nop
 800172a:	e000      	b.n	800172e <lv_group_focus_obj+0x132>
                if(res != LV_RES_OK) return;
 800172c:	bf00      	nop
        }
    }
}
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <lv_group_focus_next>:
/**
 * Focus the next object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_next(lv_group_t * group)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <lv_group_focus_next+0x1c>)
 800173e:	4905      	ldr	r1, [pc, #20]	; (8001754 <lv_group_focus_next+0x20>)
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f8ee 	bl	8001922 <focus_next_core>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	0801c00d 	.word	0x0801c00d
 8001754:	0801bfc1 	.word	0x0801bfc1

08001758 <lv_group_focus_prev>:
/**
 * Focus the previous object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_prev(lv_group_t * group)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <lv_group_focus_prev+0x1c>)
 8001762:	4905      	ldr	r1, [pc, #20]	; (8001778 <lv_group_focus_prev+0x20>)
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f8dc 	bl	8001922 <focus_next_core>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	0801c041 	.word	0x0801c041
 8001778:	0801bfe7 	.word	0x0801bfe7

0800177c <lv_group_send_data>:
 * @param group pointer to a group
 * @param c a character (use LV_KEY_.. to navigate)
 * @return result of focused object in group.
 */
lv_res_t lv_group_send_data(lv_group_t * group, uint32_t c)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    lv_obj_t * act = lv_group_get_focused(group);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f868 	bl	800185c <lv_group_get_focused>
 800178c:	60f8      	str	r0, [r7, #12]
    if(act == NULL) return LV_RES_OK;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <lv_group_send_data+0x1c>
 8001794:	2301      	movs	r3, #1
 8001796:	e01a      	b.n	80017ce <lv_group_send_data+0x52>

    lv_res_t res;

    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	463a      	mov	r2, r7
 800179e:	2118      	movs	r1, #24
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	4798      	blx	r3
 80017a4:	4603      	mov	r3, r0
 80017a6:	72fb      	strb	r3, [r7, #11]
    if(res != LV_RES_OK) return res;
 80017a8:	7afb      	ldrb	r3, [r7, #11]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d001      	beq.n	80017b2 <lv_group_send_data+0x36>
 80017ae:	7afb      	ldrb	r3, [r7, #11]
 80017b0:	e00d      	b.n	80017ce <lv_group_send_data+0x52>

    res = lv_event_send(act, LV_EVENT_KEY, &c);
 80017b2:	463b      	mov	r3, r7
 80017b4:	461a      	mov	r2, r3
 80017b6:	210c      	movs	r1, #12
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f004 fd6d 	bl	8006298 <lv_event_send>
 80017be:	4603      	mov	r3, r0
 80017c0:	72fb      	strb	r3, [r7, #11]
    if(res != LV_RES_OK) return res;
 80017c2:	7afb      	ldrb	r3, [r7, #11]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d001      	beq.n	80017cc <lv_group_send_data+0x50>
 80017c8:	7afb      	ldrb	r3, [r7, #11]
 80017ca:	e000      	b.n	80017ce <lv_group_send_data+0x52>

    return res;
 80017cc:	7afb      	ldrb	r3, [r7, #11]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <lv_group_set_editing>:
 * Manually set the current mode (edit or navigate).
 * @param group pointer to group
 * @param edit: true: edit mode; false: navigate mode
 */
void lv_group_set_editing(lv_group_t * group, bool edit)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	70fb      	strb	r3, [r7, #3]
    if(group == NULL) return;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d031      	beq.n	800184c <lv_group_set_editing+0x76>
    uint8_t en_val = edit ? 1 : 0;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	75fb      	strb	r3, [r7, #23]

    if(en_val == group->editing) return; /*Do not set the same mode again*/
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7d1b      	ldrb	r3, [r3, #20]
 80017f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d028      	beq.n	8001850 <lv_group_set_editing+0x7a>

    group->editing     = en_val;
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	b2d9      	uxtb	r1, r3
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	7d13      	ldrb	r3, [r2, #20]
 800180a:	f361 0341 	bfi	r3, r1, #1, #1
 800180e:	7513      	strb	r3, [r2, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f823 	bl	800185c <lv_group_get_focused>
 8001816:	6138      	str	r0, [r7, #16]

    if(focused) {
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01b      	beq.n	8001856 <lv_group_set_editing+0x80>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2200      	movs	r2, #0
 8001824:	2116      	movs	r1, #22
 8001826:	6938      	ldr	r0, [r7, #16]
 8001828:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2200      	movs	r2, #0
 8001832:	210d      	movs	r1, #13
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fd2f 	bl	8006298 <lv_event_send>
 800183a:	4603      	mov	r3, r0
 800183c:	73fb      	strb	r3, [r7, #15]
        if(res != LV_RES_OK) return;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d107      	bne.n	8001854 <lv_group_set_editing+0x7e>

        lv_obj_invalidate(focused);
 8001844:	6938      	ldr	r0, [r7, #16]
 8001846:	f003 fe73 	bl	8005530 <lv_obj_invalidate>
 800184a:	e004      	b.n	8001856 <lv_group_set_editing+0x80>
    if(group == NULL) return;
 800184c:	bf00      	nop
 800184e:	e002      	b.n	8001856 <lv_group_set_editing+0x80>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8001850:	bf00      	nop
 8001852:	e000      	b.n	8001856 <lv_group_set_editing+0x80>
        if(res != LV_RES_OK) return;
 8001854:	bf00      	nop
    }
}
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <lv_group_get_focused>:
 * Get the focused object or NULL if there isn't one
 * @param group pointer to a group
 * @return pointer to the focused object
 */
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    if(!group) return NULL;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <lv_group_get_focused+0x12>
 800186a:	2300      	movs	r3, #0
 800186c:	e008      	b.n	8001880 <lv_group_get_focused+0x24>
    if(group->obj_focus == NULL) return NULL;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <lv_group_get_focused+0x1e>
 8001876:	2300      	movs	r3, #0
 8001878:	e002      	b.n	8001880 <lv_group_get_focused+0x24>

    return *group->obj_focus;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <lv_group_get_editing>:
 * Get the current mode (edit or navigate).
 * @param group pointer to group
 * @return true: edit mode; false: navigate mode
 */
bool lv_group_get_editing(const lv_group_t * group)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <lv_group_get_editing+0x12>
 800189a:	2300      	movs	r3, #0
 800189c:	e00a      	b.n	80018b4 <lv_group_get_editing+0x28>
    return group->editing ? true : false;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7d1b      	ldrb	r3, [r3, #20]
 80018a2:	085b      	lsrs	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7d1b      	ldrb	r3, [r3, #20]
 80018cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	7d13      	ldrb	r3, [r2, #20]
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	7513      	strb	r3, [r2, #20]

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7d1b      	ldrb	r3, [r3, #20]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <lv_group_refocus+0x34>
        lv_group_focus_next(g);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff21 	bl	8001734 <lv_group_focus_next>
 80018f2:	e009      	b.n	8001908 <lv_group_refocus+0x48>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7d1b      	ldrb	r3, [r3, #20]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <lv_group_refocus+0x48>
        lv_group_focus_prev(g);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ff28 	bl	8001758 <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	b2d9      	uxtb	r1, r3
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	7d13      	ldrb	r3, [r2, #20]
 8001914:	f361 1304 	bfi	r3, r1, #4, #1
 8001918:	7513      	strb	r3, [r2, #20]
}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <focus_next_core>:

static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b088      	sub	sp, #32
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
    if(group->frozen) return;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	7d1b      	ldrb	r3, [r3, #20]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f040 80b3 	bne.w	8001aa4 <focus_next_core+0x182>

    lv_obj_t ** obj_next     = group->obj_focus;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	61fb      	str	r3, [r7, #28]
    lv_obj_t ** obj_sentinel = NULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
    bool can_move            = true;
 8001948:	2301      	movs	r3, #1
 800194a:	75fb      	strb	r3, [r7, #23]
    bool can_begin           = true;
 800194c:	2301      	movs	r3, #1
 800194e:	75bb      	strb	r3, [r7, #22]

    for(;;) {
        if(obj_next == NULL) {
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d11a      	bne.n	800198c <focus_next_core+0x6a>
            if(group->wrap || obj_sentinel == NULL) {
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	7d1b      	ldrb	r3, [r3, #20]
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d103      	bne.n	800196c <focus_next_core+0x4a>
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 809e 	bne.w	8001aa8 <focus_next_core+0x186>
                if(!can_begin) return;
 800196c:	7dbb      	ldrb	r3, [r7, #22]
 800196e:	f083 0301 	eor.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 8099 	bne.w	8001aac <focus_next_core+0x18a>
                obj_next  = begin(&group->obj_ll);
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4610      	mov	r0, r2
 8001980:	4798      	blx	r3
 8001982:	61f8      	str	r0, [r7, #28]
                can_move  = false;
 8001984:	2300      	movs	r3, #0
 8001986:	75fb      	strb	r3, [r7, #23]
                can_begin = false;
 8001988:	2300      	movs	r3, #0
 800198a:	75bb      	strb	r3, [r7, #22]
                /*Currently focused object is the last/first in the group, keep it that way*/
                return;
            }
        }

        if(obj_sentinel == NULL) {
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d105      	bne.n	800199e <focus_next_core+0x7c>
            obj_sentinel = obj_next;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	61bb      	str	r3, [r7, #24]
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8089 	beq.w	8001ab0 <focus_next_core+0x18e>
        }

        if(can_move) {
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d009      	beq.n	80019b8 <focus_next_core+0x96>
            obj_next = move(&group->obj_ll, obj_next);
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69f9      	ldr	r1, [r7, #28]
 80019aa:	4610      	mov	r0, r2
 80019ac:	4798      	blx	r3
 80019ae:	61f8      	str	r0, [r7, #28]

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return;
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d07d      	beq.n	8001ab4 <focus_next_core+0x192>
        }

        can_move = true;
 80019b8:	2301      	movs	r3, #1
 80019ba:	75fb      	strb	r3, [r7, #23]

        if(obj_next == NULL) continue;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d016      	beq.n	80019f0 <focus_next_core+0xce>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f005 fbc7 	bl	800715c <lv_obj_get_state>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10d      	bne.n	80019f4 <focus_next_core+0xd2>

        /*Hidden and disabled objects don't receive focus*/
        if(!lv_obj_get_hidden(*obj_next)) break;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f005 fa73 	bl	8006ec8 <lv_obj_get_hidden>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f083 0301 	eor.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d104      	bne.n	80019f8 <focus_next_core+0xd6>
 80019ee:	e7af      	b.n	8001950 <focus_next_core+0x2e>
        if(obj_next == NULL) continue;
 80019f0:	bf00      	nop
 80019f2:	e7ad      	b.n	8001950 <focus_next_core+0x2e>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 80019f4:	bf00      	nop
        if(obj_next == NULL) {
 80019f6:	e7ab      	b.n	8001950 <focus_next_core+0x2e>
        if(!lv_obj_get_hidden(*obj_next)) break;
 80019f8:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d059      	beq.n	8001ab8 <focus_next_core+0x196>

    if(group->obj_focus) {
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01c      	beq.n	8001a46 <focus_next_core+0x124>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	68d2      	ldr	r2, [r2, #12]
 8001a18:	6810      	ldr	r0, [r2, #0]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2117      	movs	r1, #23
 8001a1e:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	210e      	movs	r1, #14
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 fc34 	bl	8006298 <lv_event_send>
 8001a30:	4603      	mov	r3, r0
 8001a32:	757b      	strb	r3, [r7, #21]
        if(res != LV_RES_OK) return;
 8001a34:	7d7b      	ldrb	r3, [r7, #21]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d140      	bne.n	8001abc <focus_next_core+0x19a>
        lv_obj_invalidate(*group->obj_focus);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 fd75 	bl	8005530 <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	60da      	str	r2, [r3, #12]

    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	68d2      	ldr	r2, [r2, #12]
 8001a58:	6810      	ldr	r0, [r2, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2116      	movs	r1, #22
 8001a5e:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	210d      	movs	r1, #13
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 fc14 	bl	8006298 <lv_event_send>
 8001a70:	4603      	mov	r3, r0
 8001a72:	753b      	strb	r3, [r7, #20]
    if(res != LV_RES_OK) return;
 8001a74:	7d3b      	ldrb	r3, [r7, #20]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d122      	bne.n	8001ac0 <focus_next_core+0x19e>

    /*If the object or its parent has `top == true` bring it to the foreground*/
    obj_to_foreground(*group->obj_focus);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f821 	bl	8001ac8 <obj_to_foreground>

    lv_obj_invalidate(*group->obj_focus);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fd4f 	bl	8005530 <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d013      	beq.n	8001ac2 <focus_next_core+0x1a0>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	4798      	blx	r3
 8001aa2:	e00e      	b.n	8001ac2 <focus_next_core+0x1a0>
    if(group->frozen) return;
 8001aa4:	bf00      	nop
 8001aa6:	e00c      	b.n	8001ac2 <focus_next_core+0x1a0>
                return;
 8001aa8:	bf00      	nop
 8001aaa:	e00a      	b.n	8001ac2 <focus_next_core+0x1a0>
                if(!can_begin) return;
 8001aac:	bf00      	nop
 8001aae:	e008      	b.n	8001ac2 <focus_next_core+0x1a0>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8001ab0:	bf00      	nop
 8001ab2:	e006      	b.n	8001ac2 <focus_next_core+0x1a0>
            if(obj_next == obj_sentinel) return;
 8001ab4:	bf00      	nop
 8001ab6:	e004      	b.n	8001ac2 <focus_next_core+0x1a0>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8001ab8:	bf00      	nop
 8001aba:	e002      	b.n	8001ac2 <focus_next_core+0x1a0>
        if(res != LV_RES_OK) return;
 8001abc:	bf00      	nop
 8001abe:	e000      	b.n	8001ac2 <focus_next_core+0x1a0>
    if(res != LV_RES_OK) return;
 8001ac0:	bf00      	nop
}
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <obj_to_foreground>:

static void obj_to_foreground(lv_obj_t * obj)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	60fb      	str	r3, [r7, #12]
    lv_obj_t * last_top = NULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
    while(i != NULL) {
 8001ad8:	e00d      	b.n	8001af6 <obj_to_foreground+0x2e>
        if(i->top != 0) last_top = i;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <obj_to_foreground+0x26>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
        i = lv_obj_get_parent(i);
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f004 fd3e 	bl	8006570 <lv_obj_get_parent>
 8001af4:	60f8      	str	r0, [r7, #12]
    while(i != NULL) {
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ee      	bne.n	8001ada <obj_to_foreground+0x12>
    }

    if(last_top != NULL) {
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <obj_to_foreground+0x40>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8001b02:	68b8      	ldr	r0, [r7, #8]
 8001b04:	f003 fdfa 	bl	80056fc <lv_obj_move_foreground>
    }
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_lv_indev_init>:

/**
 * Initialize the display input device subsystem
 */
void _lv_indev_init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
 8001b14:	2100      	movs	r1, #0
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f8b0 	bl	8001c7c <lv_indev_reset>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_lv_indev_read_task>:
/**
 * Called periodically to read the input devices
 * @param param pointer to and input device to read
 */
void _lv_indev_read_task(lv_task_t * task)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("indev read task started");

    lv_indev_data_t data;

    indev_act = task->user_data;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4a4b      	ldr	r2, [pc, #300]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001b2e:	6013      	str	r3, [r2, #0]

    /*Read and process all indevs*/
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8001b30:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8089 	beq.w	8001c4e <_lv_indev_read_task+0x12e>

    /*Handle reset query before processing the point*/
    indev_proc_reset_query_handler(indev_act);
 8001b3c:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 fb2b 	bl	800319c <indev_proc_reset_query_handler>

    if(indev_act->proc.disabled) return;
 8001b46:	4b45      	ldr	r3, [pc, #276]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d17c      	bne.n	8001c52 <_lv_indev_read_task+0x132>
    bool more_to_read;
    do {
        /*Read the data*/
        more_to_read = _lv_indev_read(indev_act, &data);
 8001b58:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f107 020c 	add.w	r2, r7, #12
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f018 fc60 	bl	801a428 <_lv_indev_read>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	77fb      	strb	r3, [r7, #31]

        /*The active object might deleted even in the read function*/
        indev_proc_reset_query_handler(indev_act);
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 fb13 	bl	800319c <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <_lv_indev_read_task+0x140>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        indev_act->proc.state = data.state;
 8001b7c:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	7eba      	ldrb	r2, [r7, #26]
 8001b82:	771a      	strb	r2, [r3, #28]

        /*Save the last activity time*/
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	7f1b      	ldrb	r3, [r3, #28]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <_lv_indev_read_task+0x80>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8001b8e:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68dc      	ldr	r4, [r3, #12]
 8001b94:	f018 fc9e 	bl	801a4d4 <lv_tick_get>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8001b9e:	e010      	b.n	8001bc2 <_lv_indev_read_task+0xa2>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d10b      	bne.n	8001bc2 <_lv_indev_read_task+0xa2>
 8001baa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <_lv_indev_read_task+0xa2>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68dc      	ldr	r4, [r3, #12]
 8001bb8:	f018 fc8c 	bl	801a4d4 <lv_tick_get>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
        }

        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <_lv_indev_read_task+0xbe>
            indev_pointer_proc(indev_act, &data);
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f107 020c 	add.w	r2, r7, #12
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f8a2 	bl	8001d20 <indev_pointer_proc>
 8001bdc:	e028      	b.n	8001c30 <_lv_indev_read_task+0x110>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d108      	bne.n	8001bfa <_lv_indev_read_task+0xda>
            indev_keypad_proc(indev_act, &data);
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f107 020c 	add.w	r2, r7, #12
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f8e0 	bl	8001db8 <indev_keypad_proc>
 8001bf8:	e01a      	b.n	8001c30 <_lv_indev_read_task+0x110>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d108      	bne.n	8001c16 <_lv_indev_read_task+0xf6>
            indev_encoder_proc(indev_act, &data);
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f107 020c 	add.w	r2, r7, #12
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fb12 	bl	8002238 <indev_encoder_proc>
 8001c14:	e00c      	b.n	8001c30 <_lv_indev_read_task+0x110>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d107      	bne.n	8001c30 <_lv_indev_read_task+0x110>
            indev_button_proc(indev_act, &data);
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f107 020c 	add.w	r2, r7, #12
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fe40 	bl	80028b0 <indev_button_proc>
        }
        /*Handle reset query if it happened in during processing*/
        indev_proc_reset_query_handler(indev_act);
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 fab1 	bl	800319c <indev_proc_reset_query_handler>
    } while(more_to_read);
 8001c3a:	7ffb      	ldrb	r3, [r7, #31]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d18b      	bne.n	8001b58 <_lv_indev_read_task+0x38>

    /*End of indev processing, so no act indev*/
    indev_act     = NULL;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <_lv_indev_read_task+0x13c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
    indev_obj_act = NULL;
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <_lv_indev_read_task+0x140>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e002      	b.n	8001c54 <_lv_indev_read_task+0x134>
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8001c4e:	bf00      	nop
 8001c50:	e000      	b.n	8001c54 <_lv_indev_read_task+0x134>
    if(indev_act->proc.disabled) return;
 8001c52:	bf00      	nop

    LV_LOG_TRACE("indev read task finished");
}
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20017798 	.word	0x20017798
 8001c60:	2001779c 	.word	0x2001779c

08001c64 <lv_indev_get_act>:
 * Get the currently processed input device. Can be used in action functions too.
 * @return pointer to the currently processed input device or NULL if no input device processing
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
    return indev_act;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <lv_indev_get_act+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20017798 	.word	0x20017798

08001c7c <lv_indev_reset>:
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
    if(indev) {
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01a      	beq.n	8001cc2 <lv_indev_reset+0x46>
        indev->proc.reset_query = 1;
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <lv_indev_reset+0x9c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d102      	bne.n	8001caa <lv_indev_reset+0x2e>
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <lv_indev_reset+0xa0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <lv_indev_reset+0x3e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d129      	bne.n	8001d0e <lv_indev_reset+0x92>
            indev->proc.types.pointer.last_pressed = NULL;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	63da      	str	r2, [r3, #60]	; 0x3c
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
        }
    }
}
 8001cc0:	e025      	b.n	8001d0e <lv_indev_reset+0x92>
        lv_indev_t * i = lv_indev_get_next(NULL);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f018 fb98 	bl	801a3f8 <lv_indev_get_next>
 8001cc8:	60f8      	str	r0, [r7, #12]
        while(i) {
 8001cca:	e01d      	b.n	8001d08 <lv_indev_reset+0x8c>
            i->proc.reset_query = 1;
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <lv_indev_reset+0x9c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d102      	bne.n	8001cea <lv_indev_reset+0x6e>
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <lv_indev_reset+0xa0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <lv_indev_reset+0x7e>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d102      	bne.n	8001d00 <lv_indev_reset+0x84>
                i->proc.types.pointer.last_pressed = NULL;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	63da      	str	r2, [r3, #60]	; 0x3c
            i = lv_indev_get_next(i);
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f018 fb79 	bl	801a3f8 <lv_indev_get_next>
 8001d06:	60f8      	str	r0, [r7, #12]
        while(i) {
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1de      	bne.n	8001ccc <lv_indev_reset+0x50>
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20017798 	.word	0x20017798
 8001d1c:	2001779c 	.word	0x2001779c

08001d20 <indev_pointer_proc>:
 * Process a new point from LV_INDEV_TYPE_POINTER input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_pointer_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    /*Move the cursor if set and moved*/
    if(i->cursor != NULL &&
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01a      	beq.n	8001d68 <indev_pointer_proc+0x48>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
    if(i->cursor != NULL &&
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d107      	bne.n	8001d52 <indev_pointer_proc+0x32>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d00a      	beq.n	8001d68 <indev_pointer_proc+0x48>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f003 fd08 	bl	8005778 <lv_obj_set_pos>
    }

    i->proc.types.pointer.act_point.x = data->point.x;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	841a      	strh	r2, [r3, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	845a      	strh	r2, [r3, #34]	; 0x22

    if(i->proc.state == LV_INDEV_STATE_PR) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7f1b      	ldrb	r3, [r3, #28]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <indev_pointer_proc+0x70>
        indev_proc_press(&i->proc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	331c      	adds	r3, #28
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fdf9 	bl	8002980 <indev_proc_press>
 8001d8e:	e004      	b.n	8001d9a <indev_pointer_proc+0x7a>
    }
    else {
        indev_proc_release(&i->proc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	331c      	adds	r3, #28
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 f8cf 	bl	8002f38 <indev_proc_release>
    }

    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	849a      	strh	r2, [r3, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <indev_keypad_proc>:
 * Process a new point from LV_INDEV_TYPE_KEYPAD input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_keypad_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
#if LV_USE_GROUP
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	7b9b      	ldrb	r3, [r3, #14]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d108      	bne.n	8001ddc <indev_keypad_proc+0x24>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8212 	bne.w	8002200 <indev_keypad_proc+0x448>

    if(i->proc.wait_until_release) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d014      	beq.n	8001e16 <indev_keypad_proc+0x5e>
        i->proc.wait_until_release      = 0;
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001df2:	f36f 03c3 	bfc	r3, #3, #1
 8001df6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001e06:	f36f 0300 	bfc	r3, #0, #1
 8001e0a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]
    }

    lv_group_t * g = i->group;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	617b      	str	r3, [r7, #20]
    if(g == NULL) return;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 81f0 	beq.w	8002204 <indev_keypad_proc+0x44c>

    indev_obj_act = lv_group_get_focused(g);
 8001e24:	6978      	ldr	r0, [r7, #20]
 8001e26:	f7ff fd19 	bl	800185c <lv_group_get_focused>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	4bae      	ldr	r3, [pc, #696]	; (80020e8 <indev_keypad_proc+0x330>)
 8001e2e:	601a      	str	r2, [r3, #0]
    if(indev_obj_act == NULL) return;
 8001e30:	4bad      	ldr	r3, [pc, #692]	; (80020e8 <indev_keypad_proc+0x330>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 81e7 	beq.w	8002208 <indev_keypad_proc+0x450>

    /*Save the last key to compare it with the current latter on RELEASE*/
    uint32_t prev_key = i->proc.types.keypad.last_key;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	613b      	str	r3, [r7, #16]

    /* Save the last key.
     * It must be done here else `lv_indev_get_key` will return the last key in events and signals*/
    i->proc.types.keypad.last_key = data->key;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Save the previous state so we can detect state changes below and also set the last state now
     * so if any signal/event handler on the way returns `LV_RES_INV` the last state is remembered
     * for the next time*/
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4e:	60fb      	str	r3, [r7, #12]
    i->proc.types.keypad.last_state = data->state;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	7b9a      	ldrb	r2, [r3, #14]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f883 2020 	strb.w	r2, [r3, #32]

    /*Key press happened*/
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	7b9b      	ldrb	r3, [r3, #14]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d17b      	bne.n	8001f5a <indev_keypad_proc+0x1a2>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d178      	bne.n	8001f5a <indev_keypad_proc+0x1a2>
        i->proc.pr_timestamp = lv_tick_get();
 8001e68:	f018 fb34 	bl	801a4d4 <lv_tick_get>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	649a      	str	r2, [r3, #72]	; 0x48

        /*Simulate a press on the object if ENTER was pressed*/
        if(data->key == LV_KEY_ENTER) {
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b0a      	cmp	r3, #10
 8001e78:	d125      	bne.n	8001ec6 <indev_keypad_proc+0x10e>
            /*Send the ENTER as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ENTER);
 8001e7a:	210a      	movs	r1, #10
 8001e7c:	6978      	ldr	r0, [r7, #20]
 8001e7e:	f7ff fc7d 	bl	800177c <lv_group_send_data>

            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8001e82:	4b99      	ldr	r3, [pc, #612]	; (80020e8 <indev_keypad_proc+0x330>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	4a97      	ldr	r2, [pc, #604]	; (80020e8 <indev_keypad_proc+0x330>)
 8001e8a:	6810      	ldr	r0, [r2, #0]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	210b      	movs	r1, #11
 8001e90:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	331c      	adds	r3, #28
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 ffa2 	bl	8003de0 <indev_reset_check>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 81b4 	bne.w	800220c <indev_keypad_proc+0x454>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8001ea4:	4b90      	ldr	r3, [pc, #576]	; (80020e8 <indev_keypad_proc+0x330>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 f9f3 	bl	8006298 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	331c      	adds	r3, #28
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 ff92 	bl	8003de0 <indev_reset_check>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8197 	beq.w	80021f2 <indev_keypad_proc+0x43a>
 8001ec4:	e1b3      	b.n	800222e <indev_keypad_proc+0x476>
        }
        else if(data->key == LV_KEY_ESC) {
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b1b      	cmp	r3, #27
 8001ecc:	d114      	bne.n	8001ef8 <indev_keypad_proc+0x140>
            /*Send the ESC as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ESC);
 8001ece:	211b      	movs	r1, #27
 8001ed0:	6978      	ldr	r0, [r7, #20]
 8001ed2:	f7ff fc53 	bl	800177c <lv_group_send_data>

            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 8001ed6:	4b84      	ldr	r3, [pc, #528]	; (80020e8 <indev_keypad_proc+0x330>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	2114      	movs	r1, #20
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 f9da 	bl	8006298 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	331c      	adds	r3, #28
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f001 ff79 	bl	8003de0 <indev_reset_check>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 817e 	beq.w	80021f2 <indev_keypad_proc+0x43a>
 8001ef6:	e19a      	b.n	800222e <indev_keypad_proc+0x476>
        }
        /*Move the focus on NEXT*/
        else if(data->key == LV_KEY_NEXT) {
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b09      	cmp	r3, #9
 8001efe:	d110      	bne.n	8001f22 <indev_keypad_proc+0x16a>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8001f00:	2100      	movs	r1, #0
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff fc67 	bl	80017d6 <lv_group_set_editing>
            lv_group_focus_next(g);
 8001f08:	6978      	ldr	r0, [r7, #20]
 8001f0a:	f7ff fc13 	bl	8001734 <lv_group_focus_next>
            if(indev_reset_check(&i->proc)) return;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	331c      	adds	r3, #28
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 ff64 	bl	8003de0 <indev_reset_check>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8169 	beq.w	80021f2 <indev_keypad_proc+0x43a>
 8001f20:	e185      	b.n	800222e <indev_keypad_proc+0x476>
        }
        /*Move the focus on PREV*/
        else if(data->key == LV_KEY_PREV) {
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b0b      	cmp	r3, #11
 8001f28:	d110      	bne.n	8001f4c <indev_keypad_proc+0x194>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	6978      	ldr	r0, [r7, #20]
 8001f2e:	f7ff fc52 	bl	80017d6 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff fc10 	bl	8001758 <lv_group_focus_prev>
            if(indev_reset_check(&i->proc)) return;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	331c      	adds	r3, #28
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f001 ff4f 	bl	8003de0 <indev_reset_check>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8154 	beq.w	80021f2 <indev_keypad_proc+0x43a>
 8001f4a:	e170      	b.n	800222e <indev_keypad_proc+0x476>
        }
        /*Just send other keys to the object (e.g. 'A' or `LV_GROUP_KEY_RIGHT`)*/
        else {
            lv_group_send_data(g, data->key);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4619      	mov	r1, r3
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff fc12 	bl	800177c <lv_group_send_data>
        if(data->key == LV_KEY_ENTER) {
 8001f58:	e14b      	b.n	80021f2 <indev_keypad_proc+0x43a>
        }
    }
    /*Pressing*/
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	7b9b      	ldrb	r3, [r3, #14]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	f040 80e9 	bne.w	8002136 <indev_keypad_proc+0x37e>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	f040 80e5 	bne.w	8002136 <indev_keypad_proc+0x37e>

        if(data->key == LV_KEY_ENTER) {
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b0a      	cmp	r3, #10
 8001f72:	d120      	bne.n	8001fb6 <indev_keypad_proc+0x1fe>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
 8001f74:	4b5c      	ldr	r3, [pc, #368]	; (80020e8 <indev_keypad_proc+0x330>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a5b      	ldr	r2, [pc, #364]	; (80020e8 <indev_keypad_proc+0x330>)
 8001f7c:	6810      	ldr	r0, [r2, #0]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	210c      	movs	r1, #12
 8001f82:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	331c      	adds	r3, #28
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 ff29 	bl	8003de0 <indev_reset_check>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f040 813d 	bne.w	8002210 <indev_keypad_proc+0x458>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 8001f96:	4b54      	ldr	r3, [pc, #336]	; (80020e8 <indev_keypad_proc+0x330>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 f97a 	bl	8006298 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	331c      	adds	r3, #28
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 ff19 	bl	8003de0 <indev_reset_check>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 812f 	bne.w	8002214 <indev_keypad_proc+0x45c>
        }

        /*Long press time has elapsed?*/
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d13b      	bne.n	800203e <indev_keypad_proc+0x286>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f018 fa9c 	bl	801a508 <lv_tick_elaps>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8b1b      	ldrh	r3, [r3, #24]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d931      	bls.n	800203e <indev_keypad_proc+0x286>
            i->proc.long_pr_sent = 1;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b0a      	cmp	r3, #10
 8001fee:	f040 80a0 	bne.w	8002132 <indev_keypad_proc+0x37a>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8001ff2:	f018 fa6f 	bl	801a4d4 <lv_tick_get>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	64da      	str	r2, [r3, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8001ffc:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <indev_keypad_proc+0x330>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a39      	ldr	r2, [pc, #228]	; (80020e8 <indev_keypad_proc+0x330>)
 8002004:	6810      	ldr	r0, [r2, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	210f      	movs	r1, #15
 800200a:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	331c      	adds	r3, #28
 8002010:	4618      	mov	r0, r3
 8002012:	f001 fee5 	bl	8003de0 <indev_reset_check>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	f040 80fd 	bne.w	8002218 <indev_keypad_proc+0x460>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 800201e:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <indev_keypad_proc+0x330>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	2104      	movs	r1, #4
 8002026:	4618      	mov	r0, r3
 8002028:	f004 f936 	bl	8006298 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	331c      	adds	r3, #28
 8002030:	4618      	mov	r0, r3
 8002032:	f001 fed5 	bl	8003de0 <indev_reset_check>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d07a      	beq.n	8002132 <indev_keypad_proc+0x37a>
 800203c:	e0f7      	b.n	800222e <indev_keypad_proc+0x476>
            }
        }
        /*Long press repeated time has elapsed?*/
        else if(i->proc.long_pr_sent != 0 &&
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80d3 	beq.w	80021f6 <indev_keypad_proc+0x43e>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	4618      	mov	r0, r3
 8002056:	f018 fa57 	bl	801a508 <lv_tick_elaps>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8b5b      	ldrh	r3, [r3, #26]
        else if(i->proc.long_pr_sent != 0 &&
 8002060:	429a      	cmp	r2, r3
 8002062:	f240 80c8 	bls.w	80021f6 <indev_keypad_proc+0x43e>

            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002066:	f018 fa35 	bl	801a4d4 <lv_tick_get>
 800206a:	4602      	mov	r2, r0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	64da      	str	r2, [r3, #76]	; 0x4c

            /*Send LONG_PRESS_REP on ENTER*/
            if(data->key == LV_KEY_ENTER) {
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b0a      	cmp	r3, #10
 8002076:	d121      	bne.n	80020bc <indev_keypad_proc+0x304>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <indev_keypad_proc+0x330>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <indev_keypad_proc+0x330>)
 8002080:	6810      	ldr	r0, [r2, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	2110      	movs	r1, #16
 8002086:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	331c      	adds	r3, #28
 800208c:	4618      	mov	r0, r3
 800208e:	f001 fea7 	bl	8003de0 <indev_reset_check>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 80c1 	bne.w	800221c <indev_keypad_proc+0x464>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <indev_keypad_proc+0x330>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2200      	movs	r2, #0
 80020a0:	2105      	movs	r1, #5
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 f8f8 	bl	8006298 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	331c      	adds	r3, #28
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 fe97 	bl	8003de0 <indev_reset_check>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 809e 	beq.w	80021f6 <indev_keypad_proc+0x43e>
 80020ba:	e0b8      	b.n	800222e <indev_keypad_proc+0x476>
            }
            /*Move the focus on NEXT again*/
            else if(data->key == LV_KEY_NEXT) {
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d113      	bne.n	80020ec <indev_keypad_proc+0x334>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80020c4:	2100      	movs	r1, #0
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff fb85 	bl	80017d6 <lv_group_set_editing>
                lv_group_focus_next(g);
 80020cc:	6978      	ldr	r0, [r7, #20]
 80020ce:	f7ff fb31 	bl	8001734 <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	331c      	adds	r3, #28
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 fe82 	bl	8003de0 <indev_reset_check>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8089 	beq.w	80021f6 <indev_keypad_proc+0x43e>
 80020e4:	e0a3      	b.n	800222e <indev_keypad_proc+0x476>
 80020e6:	bf00      	nop
 80020e8:	2001779c 	.word	0x2001779c
            }
            /*Move the focus on PREV again*/
            else if(data->key == LV_KEY_PREV) {
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b0b      	cmp	r3, #11
 80020f2:	d10f      	bne.n	8002114 <indev_keypad_proc+0x35c>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80020f4:	2100      	movs	r1, #0
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff fb6d 	bl	80017d6 <lv_group_set_editing>
                lv_group_focus_prev(g);
 80020fc:	6978      	ldr	r0, [r7, #20]
 80020fe:	f7ff fb2b 	bl	8001758 <lv_group_focus_prev>
                if(indev_reset_check(&i->proc)) return;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	331c      	adds	r3, #28
 8002106:	4618      	mov	r0, r3
 8002108:	f001 fe6a 	bl	8003de0 <indev_reset_check>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d071      	beq.n	80021f6 <indev_keypad_proc+0x43e>
 8002112:	e08c      	b.n	800222e <indev_keypad_proc+0x476>
            }
            /*Just send other keys again to the object (e.g. 'A' or `LV_GROUP_KEY_RIGHT)*/
            else {
                lv_group_send_data(g, data->key);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4619      	mov	r1, r3
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7ff fb2e 	bl	800177c <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	331c      	adds	r3, #28
 8002124:	4618      	mov	r0, r3
 8002126:	f001 fe5b 	bl	8003de0 <indev_reset_check>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d062      	beq.n	80021f6 <indev_keypad_proc+0x43e>
 8002130:	e07d      	b.n	800222e <indev_keypad_proc+0x476>
            if(data->key == LV_KEY_ENTER) {
 8002132:	bf00      	nop
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002134:	e05f      	b.n	80021f6 <indev_keypad_proc+0x43e>
            }
        }
    }
    /*Release happened*/
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7b9b      	ldrb	r3, [r3, #14]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d15c      	bne.n	80021f8 <indev_keypad_proc+0x440>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d159      	bne.n	80021f8 <indev_keypad_proc+0x440>
        /*The user might clear the key when it was released. Always release the pressed key*/
        data->key = prev_key;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	605a      	str	r2, [r3, #4]
        if(data->key == LV_KEY_ENTER) {
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b0a      	cmp	r3, #10
 8002150:	d144      	bne.n	80021dc <indev_keypad_proc+0x424>

            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <indev_keypad_proc+0x47c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	4a36      	ldr	r2, [pc, #216]	; (8002234 <indev_keypad_proc+0x47c>)
 800215a:	6810      	ldr	r0, [r2, #0]
 800215c:	2200      	movs	r2, #0
 800215e:	210e      	movs	r1, #14
 8002160:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	331c      	adds	r3, #28
 8002166:	4618      	mov	r0, r3
 8002168:	f001 fe3a 	bl	8003de0 <indev_reset_check>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d156      	bne.n	8002220 <indev_keypad_proc+0x468>

            if(i->proc.long_pr_sent == 0) {
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10e      	bne.n	80021a0 <indev_keypad_proc+0x3e8>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8002182:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <indev_keypad_proc+0x47c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2200      	movs	r2, #0
 8002188:	2103      	movs	r1, #3
 800218a:	4618      	mov	r0, r3
 800218c:	f004 f884 	bl	8006298 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	331c      	adds	r3, #28
 8002194:	4618      	mov	r0, r3
 8002196:	f001 fe23 	bl	8003de0 <indev_reset_check>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d141      	bne.n	8002224 <indev_keypad_proc+0x46c>
            }

            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <indev_keypad_proc+0x47c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	2106      	movs	r1, #6
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 f875 	bl	8006298 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	331c      	adds	r3, #28
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 fe14 	bl	8003de0 <indev_reset_check>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d134      	bne.n	8002228 <indev_keypad_proc+0x470>

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <indev_keypad_proc+0x47c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	2107      	movs	r1, #7
 80021c6:	4618      	mov	r0, r3
 80021c8:	f004 f866 	bl	8006298 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	331c      	adds	r3, #28
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 fe05 	bl	8003de0 <indev_reset_check>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d127      	bne.n	800222c <indev_keypad_proc+0x474>
        }
        i->proc.pr_timestamp = 0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80021e8:	f36f 0300 	bfc	r3, #0, #1
 80021ec:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 80021f0:	e002      	b.n	80021f8 <indev_keypad_proc+0x440>
        if(data->key == LV_KEY_ENTER) {
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <indev_keypad_proc+0x440>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80021f6:	bf00      	nop
    }
    indev_obj_act = NULL;
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <indev_keypad_proc+0x47c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e016      	b.n	800222e <indev_keypad_proc+0x476>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8002200:	bf00      	nop
 8002202:	e014      	b.n	800222e <indev_keypad_proc+0x476>
    if(g == NULL) return;
 8002204:	bf00      	nop
 8002206:	e012      	b.n	800222e <indev_keypad_proc+0x476>
    if(indev_obj_act == NULL) return;
 8002208:	bf00      	nop
 800220a:	e010      	b.n	800222e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 800220c:	bf00      	nop
 800220e:	e00e      	b.n	800222e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002210:	bf00      	nop
 8002212:	e00c      	b.n	800222e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002214:	bf00      	nop
 8002216:	e00a      	b.n	800222e <indev_keypad_proc+0x476>
                if(indev_reset_check(&i->proc)) return;
 8002218:	bf00      	nop
 800221a:	e008      	b.n	800222e <indev_keypad_proc+0x476>
                if(indev_reset_check(&i->proc)) return;
 800221c:	bf00      	nop
 800221e:	e006      	b.n	800222e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002220:	bf00      	nop
 8002222:	e004      	b.n	800222e <indev_keypad_proc+0x476>
                if(indev_reset_check(&i->proc)) return;
 8002224:	bf00      	nop
 8002226:	e002      	b.n	800222e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002228:	bf00      	nop
 800222a:	e000      	b.n	800222e <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 800222c:	bf00      	nop
#else
    (void)data; /*Unused*/
    (void)i;    /*Unused*/
#endif
}
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2001779c 	.word	0x2001779c

08002238 <indev_encoder_proc>:
 * Process a new point from LV_INDEV_TYPE_ENCODER input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_encoder_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
#if LV_USE_GROUP

    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	7b9b      	ldrb	r3, [r3, #14]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d108      	bne.n	800225c <indev_encoder_proc+0x24>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 830a 	bne.w	8002870 <indev_encoder_proc+0x638>

    if(i->proc.wait_until_release) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d014      	beq.n	8002296 <indev_encoder_proc+0x5e>
        i->proc.wait_until_release      = 0;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002272:	f36f 03c3 	bfc	r3, #3, #1
 8002276:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002286:	f36f 0300 	bfc	r3, #0, #1
 800228a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2020 	strb.w	r2, [r3, #32]
    }

    /* Save the last keys before anything else.
     * They need to be already saved if the function returns for any reason*/
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229c:	75fb      	strb	r3, [r7, #23]
    i->proc.types.keypad.last_state = data->state;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	7b9a      	ldrb	r2, [r3, #14]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f883 2020 	strb.w	r2, [r3, #32]
    i->proc.types.keypad.last_key   = data->key;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

    lv_group_t * g = i->group;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	613b      	str	r3, [r7, #16]
    if(g == NULL) return;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 82db 	beq.w	8002874 <indev_encoder_proc+0x63c>

    indev_obj_act = lv_group_get_focused(g);
 80022be:	6938      	ldr	r0, [r7, #16]
 80022c0:	f7ff facc 	bl	800185c <lv_group_get_focused>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4bab      	ldr	r3, [pc, #684]	; (8002574 <indev_encoder_proc+0x33c>)
 80022c8:	601a      	str	r2, [r3, #0]
    if(indev_obj_act == NULL) return;
 80022ca:	4baa      	ldr	r3, [pc, #680]	; (8002574 <indev_encoder_proc+0x33c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 82d2 	beq.w	8002878 <indev_encoder_proc+0x640>

    /*Process the steps they are valid only with released button*/
    if(data->state != LV_INDEV_STATE_REL) {
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	7b9b      	ldrb	r3, [r3, #14]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <indev_encoder_proc+0xaa>
        data->enc_diff = 0;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	819a      	strh	r2, [r3, #12]
    }

    /*Refresh the focused object. It might change due to lv_group_focus_prev/next*/
    indev_obj_act = lv_group_get_focused(g);
 80022e2:	6938      	ldr	r0, [r7, #16]
 80022e4:	f7ff faba 	bl	800185c <lv_group_get_focused>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4ba2      	ldr	r3, [pc, #648]	; (8002574 <indev_encoder_proc+0x33c>)
 80022ec:	601a      	str	r2, [r3, #0]
    if(indev_obj_act == NULL) return;
 80022ee:	4ba1      	ldr	r3, [pc, #644]	; (8002574 <indev_encoder_proc+0x33c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 82c2 	beq.w	800287c <indev_encoder_proc+0x644>

    /*Button press happened*/
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	7b9b      	ldrb	r3, [r3, #14]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	f040 8083 	bne.w	8002408 <indev_encoder_proc+0x1d0>
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d17f      	bne.n	8002408 <indev_encoder_proc+0x1d0>

        i->proc.pr_timestamp = lv_tick_get();
 8002308:	f018 f8e4 	bl	801a4d4 <lv_tick_get>
 800230c:	4602      	mov	r2, r0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	649a      	str	r2, [r3, #72]	; 0x48

        if(data->key == LV_KEY_ENTER) {
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b0a      	cmp	r3, #10
 8002318:	d13a      	bne.n	8002390 <indev_encoder_proc+0x158>
            bool editable = false;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 800231e:	4b95      	ldr	r3, [pc, #596]	; (8002574 <indev_encoder_proc+0x33c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a93      	ldr	r2, [pc, #588]	; (8002574 <indev_encoder_proc+0x33c>)
 8002326:	6810      	ldr	r0, [r2, #0]
 8002328:	f107 020f 	add.w	r2, r7, #15
 800232c:	2119      	movs	r1, #25
 800232e:	4798      	blx	r3

            if(lv_group_get_editing(g) == true || editable == false) {
 8002330:	6938      	ldr	r0, [r7, #16]
 8002332:	f7ff faab 	bl	800188c <lv_group_get_editing>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <indev_encoder_proc+0x112>
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 8228 	beq.w	800279a <indev_encoder_proc+0x562>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 800234a:	4b8a      	ldr	r3, [pc, #552]	; (8002574 <indev_encoder_proc+0x33c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a88      	ldr	r2, [pc, #544]	; (8002574 <indev_encoder_proc+0x33c>)
 8002352:	6810      	ldr	r0, [r2, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	210b      	movs	r1, #11
 8002358:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	331c      	adds	r3, #28
 800235e:	4618      	mov	r0, r3
 8002360:	f001 fd3e 	bl	8003de0 <indev_reset_check>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 828a 	bne.w	8002880 <indev_encoder_proc+0x648>

                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 800236c:	4b81      	ldr	r3, [pc, #516]	; (8002574 <indev_encoder_proc+0x33c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f003 ff8f 	bl	8006298 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	331c      	adds	r3, #28
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fd2e 	bl	8003de0 <indev_reset_check>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8207 	beq.w	800279a <indev_encoder_proc+0x562>
 800238c:	bf00      	nop
 800238e:	e28a      	b.n	80028a6 <indev_encoder_proc+0x66e>
            }
        }
        else if(data->key == LV_KEY_LEFT) {
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b14      	cmp	r3, #20
 8002396:	d109      	bne.n	80023ac <indev_encoder_proc+0x174>
            /*emulate encoder left*/
            data->enc_diff--;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	819a      	strh	r2, [r3, #12]
        if(data->key == LV_KEY_ENTER) {
 80023aa:	e1f6      	b.n	800279a <indev_encoder_proc+0x562>
        }
        else if(data->key == LV_KEY_RIGHT) {
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b13      	cmp	r3, #19
 80023b2:	d109      	bne.n	80023c8 <indev_encoder_proc+0x190>
            /*emulate encoder right*/
            data->enc_diff++;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	b29b      	uxth	r3, r3
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	819a      	strh	r2, [r3, #12]
        if(data->key == LV_KEY_ENTER) {
 80023c6:	e1e8      	b.n	800279a <indev_encoder_proc+0x562>
        }
        else if(data->key == LV_KEY_ESC) {
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b1b      	cmp	r3, #27
 80023ce:	d114      	bne.n	80023fa <indev_encoder_proc+0x1c2>
            /*Send the ESC as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ESC);
 80023d0:	211b      	movs	r1, #27
 80023d2:	6938      	ldr	r0, [r7, #16]
 80023d4:	f7ff f9d2 	bl	800177c <lv_group_send_data>

            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 80023d8:	4b66      	ldr	r3, [pc, #408]	; (8002574 <indev_encoder_proc+0x33c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	2114      	movs	r1, #20
 80023e0:	4618      	mov	r0, r3
 80023e2:	f003 ff59 	bl	8006298 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	331c      	adds	r3, #28
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 fcf8 	bl	8003de0 <indev_reset_check>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 81d1 	beq.w	800279a <indev_encoder_proc+0x562>
 80023f8:	e255      	b.n	80028a6 <indev_encoder_proc+0x66e>
        }
        /*Just send other keys to the object (e.g. 'A' or `LV_GROUP_KEY_RIGHT`)*/
        else {
            lv_group_send_data(g, data->key);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4619      	mov	r1, r3
 8002400:	6938      	ldr	r0, [r7, #16]
 8002402:	f7ff f9bb 	bl	800177c <lv_group_send_data>
        if(data->key == LV_KEY_ENTER) {
 8002406:	e1c8      	b.n	800279a <indev_encoder_proc+0x562>
        }
    }
    /*Pressing*/
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	7b9b      	ldrb	r3, [r3, #14]
 800240c:	2b01      	cmp	r3, #1
 800240e:	f040 80df 	bne.w	80025d0 <indev_encoder_proc+0x398>
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b01      	cmp	r3, #1
 8002416:	f040 80db 	bne.w	80025d0 <indev_encoder_proc+0x398>
        /* Long press*/
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d164      	bne.n	80024f4 <indev_encoder_proc+0x2bc>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242e:	4618      	mov	r0, r3
 8002430:	f018 f86a 	bl	801a508 <lv_tick_elaps>
 8002434:	4602      	mov	r2, r0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8b1b      	ldrh	r3, [r3, #24]
 800243a:	429a      	cmp	r2, r3
 800243c:	d95a      	bls.n	80024f4 <indev_encoder_proc+0x2bc>

            i->proc.long_pr_sent = 1;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800244c:	f018 f842 	bl	801a4d4 <lv_tick_get>
 8002450:	4602      	mov	r2, r0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	64da      	str	r2, [r3, #76]	; 0x4c

            if(data->key == LV_KEY_ENTER) {
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b0a      	cmp	r3, #10
 800245c:	d142      	bne.n	80024e4 <indev_encoder_proc+0x2ac>
                bool editable = false;
 800245e:	2300      	movs	r3, #0
 8002460:	73bb      	strb	r3, [r7, #14]
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8002462:	4b44      	ldr	r3, [pc, #272]	; (8002574 <indev_encoder_proc+0x33c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	4a42      	ldr	r2, [pc, #264]	; (8002574 <indev_encoder_proc+0x33c>)
 800246a:	6810      	ldr	r0, [r2, #0]
 800246c:	f107 020e 	add.w	r2, r7, #14
 8002470:	2119      	movs	r1, #25
 8002472:	4798      	blx	r3

                /*On enter long press toggle edit mode.*/
                if(editable) {
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d012      	beq.n	80024a0 <indev_encoder_proc+0x268>
                    /*Don't leave edit mode if there is only one object (nowhere to navigate)*/
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4618      	mov	r0, r3
 800247e:	f019 fdf8 	bl	801c072 <_lv_ll_get_len>
 8002482:	4603      	mov	r3, r0
 8002484:	2b01      	cmp	r3, #1
 8002486:	d92d      	bls.n	80024e4 <indev_encoder_proc+0x2ac>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 8002488:	6938      	ldr	r0, [r7, #16]
 800248a:	f7ff f9ff 	bl	800188c <lv_group_get_editing>
 800248e:	4603      	mov	r3, r0
 8002490:	f083 0301 	eor.w	r3, r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4619      	mov	r1, r3
 8002498:	6938      	ldr	r0, [r7, #16]
 800249a:	f7ff f99c 	bl	80017d6 <lv_group_set_editing>
 800249e:	e021      	b.n	80024e4 <indev_encoder_proc+0x2ac>
                    }
                }
                /*If not editable then just send a long press signal*/
                else {
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 80024a0:	4b34      	ldr	r3, [pc, #208]	; (8002574 <indev_encoder_proc+0x33c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a33      	ldr	r2, [pc, #204]	; (8002574 <indev_encoder_proc+0x33c>)
 80024a8:	6810      	ldr	r0, [r2, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	210f      	movs	r1, #15
 80024ae:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	331c      	adds	r3, #28
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fc93 	bl	8003de0 <indev_reset_check>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 81e1 	bne.w	8002884 <indev_encoder_proc+0x64c>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <indev_encoder_proc+0x33c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2200      	movs	r2, #0
 80024c8:	2104      	movs	r1, #4
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 fee4 	bl	8006298 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	331c      	adds	r3, #28
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 fc83 	bl	8003de0 <indev_reset_check>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <indev_encoder_proc+0x2ac>
 80024e0:	bf00      	nop
 80024e2:	e1e0      	b.n	80028a6 <indev_encoder_proc+0x66e>
                }
            }

            i->proc.long_pr_sent = 1;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80024f2:	e154      	b.n	800279e <indev_encoder_proc+0x566>
        }
        /*Long press repeated time has elapsed?*/
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 814c 	beq.w	800279e <indev_encoder_proc+0x566>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250a:	4618      	mov	r0, r3
 800250c:	f017 fffc 	bl	801a508 <lv_tick_elaps>
 8002510:	4602      	mov	r2, r0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8b5b      	ldrh	r3, [r3, #26]
 8002516:	429a      	cmp	r2, r3
 8002518:	f240 8141 	bls.w	800279e <indev_encoder_proc+0x566>

            i->proc.longpr_rep_timestamp = lv_tick_get();
 800251c:	f017 ffda 	bl	801a4d4 <lv_tick_get>
 8002520:	4602      	mov	r2, r0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	64da      	str	r2, [r3, #76]	; 0x4c

            if(data->key == LV_KEY_ENTER) {
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b0a      	cmp	r3, #10
 800252c:	d124      	bne.n	8002578 <indev_encoder_proc+0x340>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <indev_encoder_proc+0x33c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <indev_encoder_proc+0x33c>)
 8002536:	6810      	ldr	r0, [r2, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	2110      	movs	r1, #16
 800253c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	331c      	adds	r3, #28
 8002542:	4618      	mov	r0, r3
 8002544:	f001 fc4c 	bl	8003de0 <indev_reset_check>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 819c 	bne.w	8002888 <indev_encoder_proc+0x650>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <indev_encoder_proc+0x33c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	2105      	movs	r1, #5
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fe9d 	bl	8006298 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	331c      	adds	r3, #28
 8002562:	4618      	mov	r0, r3
 8002564:	f001 fc3c 	bl	8003de0 <indev_reset_check>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8117 	beq.w	800279e <indev_encoder_proc+0x566>
 8002570:	e199      	b.n	80028a6 <indev_encoder_proc+0x66e>
 8002572:	bf00      	nop
 8002574:	2001779c 	.word	0x2001779c
            }
            else if(data->key == LV_KEY_LEFT) {
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b14      	cmp	r3, #20
 800257e:	d109      	bne.n	8002594 <indev_encoder_proc+0x35c>
                /*emulate encoder left*/
                data->enc_diff--;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29b      	uxth	r3, r3
 800258c:	b21a      	sxth	r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	819a      	strh	r2, [r3, #12]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002592:	e104      	b.n	800279e <indev_encoder_proc+0x566>
            }
            else if(data->key == LV_KEY_RIGHT) {
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b13      	cmp	r3, #19
 800259a:	d109      	bne.n	80025b0 <indev_encoder_proc+0x378>
                /*emulate encoder right*/
                data->enc_diff++;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	819a      	strh	r2, [r3, #12]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80025ae:	e0f6      	b.n	800279e <indev_encoder_proc+0x566>
            }
            else {
                lv_group_send_data(g, data->key);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4619      	mov	r1, r3
 80025b6:	6938      	ldr	r0, [r7, #16]
 80025b8:	f7ff f8e0 	bl	800177c <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	331c      	adds	r3, #28
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 fc0d 	bl	8003de0 <indev_reset_check>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80e8 	beq.w	800279e <indev_encoder_proc+0x566>
 80025ce:	e16a      	b.n	80028a6 <indev_encoder_proc+0x66e>

        }

    }
    /*Release happened*/
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	7b9b      	ldrb	r3, [r3, #14]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 80e3 	bne.w	80027a0 <indev_encoder_proc+0x568>
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	f040 80df 	bne.w	80027a0 <indev_encoder_proc+0x568>

        if(data->key == LV_KEY_ENTER) {
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b0a      	cmp	r3, #10
 80025e8:	f040 80cc 	bne.w	8002784 <indev_encoder_proc+0x54c>
            bool editable = false;
 80025ec:	2300      	movs	r3, #0
 80025ee:	737b      	strb	r3, [r7, #13]
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 80025f0:	4bae      	ldr	r3, [pc, #696]	; (80028ac <indev_encoder_proc+0x674>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4aad      	ldr	r2, [pc, #692]	; (80028ac <indev_encoder_proc+0x674>)
 80025f8:	6810      	ldr	r0, [r2, #0]
 80025fa:	f107 020d 	add.w	r2, r7, #13
 80025fe:	2119      	movs	r1, #25
 8002600:	4798      	blx	r3

            /*The button was released on a non-editable object. Just send enter*/
            if(editable == false) {
 8002602:	7b7b      	ldrb	r3, [r7, #13]
 8002604:	f083 0301 	eor.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d048      	beq.n	80026a0 <indev_encoder_proc+0x468>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 800260e:	4ba7      	ldr	r3, [pc, #668]	; (80028ac <indev_encoder_proc+0x674>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	4aa5      	ldr	r2, [pc, #660]	; (80028ac <indev_encoder_proc+0x674>)
 8002616:	6810      	ldr	r0, [r2, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	210e      	movs	r1, #14
 800261c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	331c      	adds	r3, #28
 8002622:	4618      	mov	r0, r3
 8002624:	f001 fbdc 	bl	8003de0 <indev_reset_check>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 812e 	bne.w	800288c <indev_encoder_proc+0x654>

                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d106      	bne.n	800264e <indev_encoder_proc+0x416>
 8002640:	4b9a      	ldr	r3, [pc, #616]	; (80028ac <indev_encoder_proc+0x674>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2200      	movs	r2, #0
 8002646:	2103      	movs	r1, #3
 8002648:	4618      	mov	r0, r3
 800264a:	f003 fe25 	bl	8006298 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	331c      	adds	r3, #28
 8002652:	4618      	mov	r0, r3
 8002654:	f001 fbc4 	bl	8003de0 <indev_reset_check>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 8118 	bne.w	8002890 <indev_encoder_proc+0x658>

                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002660:	4b92      	ldr	r3, [pc, #584]	; (80028ac <indev_encoder_proc+0x674>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2200      	movs	r2, #0
 8002666:	2106      	movs	r1, #6
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fe15 	bl	8006298 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	331c      	adds	r3, #28
 8002672:	4618      	mov	r0, r3
 8002674:	f001 fbb4 	bl	8003de0 <indev_reset_check>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 810a 	bne.w	8002894 <indev_encoder_proc+0x65c>

                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8002680:	4b8a      	ldr	r3, [pc, #552]	; (80028ac <indev_encoder_proc+0x674>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	2107      	movs	r1, #7
 8002688:	4618      	mov	r0, r3
 800268a:	f003 fe05 	bl	8006298 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	331c      	adds	r3, #28
 8002692:	4618      	mov	r0, r3
 8002694:	f001 fba4 	bl	8003de0 <indev_reset_check>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d072      	beq.n	8002784 <indev_encoder_proc+0x54c>
 800269e:	e102      	b.n	80028a6 <indev_encoder_proc+0x66e>
            }
            /*An object is being edited and the button is released. */
            else if(g->editing) {
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	7d1b      	ldrb	r3, [r3, #20]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d054      	beq.n	8002758 <indev_encoder_proc+0x520>
                /*Ignore long pressed enter release because it comes from mode switch*/
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d006      	beq.n	80026cc <indev_encoder_proc+0x494>
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f019 fcd6 	bl	801c072 <_lv_ll_get_len>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d85b      	bhi.n	8002784 <indev_encoder_proc+0x54c>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 80026cc:	4b77      	ldr	r3, [pc, #476]	; (80028ac <indev_encoder_proc+0x674>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4a76      	ldr	r2, [pc, #472]	; (80028ac <indev_encoder_proc+0x674>)
 80026d4:	6810      	ldr	r0, [r2, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	210e      	movs	r1, #14
 80026da:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	331c      	adds	r3, #28
 80026e0:	4618      	mov	r0, r3
 80026e2:	f001 fb7d 	bl	8003de0 <indev_reset_check>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 80d5 	bne.w	8002898 <indev_encoder_proc+0x660>

                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 80026ee:	4b6f      	ldr	r3, [pc, #444]	; (80028ac <indev_encoder_proc+0x674>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2103      	movs	r1, #3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fdce 	bl	8006298 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	331c      	adds	r3, #28
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fb6d 	bl	8003de0 <indev_reset_check>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 80c7 	bne.w	800289c <indev_encoder_proc+0x664>

                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 800270e:	4b67      	ldr	r3, [pc, #412]	; (80028ac <indev_encoder_proc+0x674>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	2106      	movs	r1, #6
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fdbe 	bl	8006298 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	331c      	adds	r3, #28
 8002720:	4618      	mov	r0, r3
 8002722:	f001 fb5d 	bl	8003de0 <indev_reset_check>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	f040 80b9 	bne.w	80028a0 <indev_encoder_proc+0x668>

                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 800272e:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <indev_encoder_proc+0x674>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2200      	movs	r2, #0
 8002734:	2107      	movs	r1, #7
 8002736:	4618      	mov	r0, r3
 8002738:	f003 fdae 	bl	8006298 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	331c      	adds	r3, #28
 8002740:	4618      	mov	r0, r3
 8002742:	f001 fb4d 	bl	8003de0 <indev_reset_check>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	f040 80ab 	bne.w	80028a4 <indev_encoder_proc+0x66c>

                    lv_group_send_data(g, LV_KEY_ENTER);
 800274e:	210a      	movs	r1, #10
 8002750:	6938      	ldr	r0, [r7, #16]
 8002752:	f7ff f813 	bl	800177c <lv_group_send_data>
 8002756:	e015      	b.n	8002784 <indev_encoder_proc+0x54c>
                }
            }
            /*If the focused object is editable and now in navigate mode then on enter switch edit
               mode*/
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
 8002758:	7b7b      	ldrb	r3, [r7, #13]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <indev_encoder_proc+0x54c>
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	7d1b      	ldrb	r3, [r3, #20]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <indev_encoder_proc+0x54c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d103      	bne.n	8002784 <indev_encoder_proc+0x54c>
                lv_group_set_editing(g, true); /*Set edit mode*/
 800277c:	2101      	movs	r1, #1
 800277e:	6938      	ldr	r0, [r7, #16]
 8002780:	f7ff f829 	bl	80017d6 <lv_group_set_editing>
            }
        }

        i->proc.pr_timestamp = 0;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002790:	f36f 0300 	bfc	r3, #0, #1
 8002794:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8002798:	e002      	b.n	80027a0 <indev_encoder_proc+0x568>
        if(data->key == LV_KEY_ENTER) {
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <indev_encoder_proc+0x568>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 800279e:	bf00      	nop
    }
    indev_obj_act = NULL;
 80027a0:	4b42      	ldr	r3, [pc, #264]	; (80028ac <indev_encoder_proc+0x674>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]

    /*if encoder steps or simulated steps via left/right keys*/
    if(data->enc_diff != 0) {
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d07a      	beq.n	80028a6 <indev_encoder_proc+0x66e>
        /*In edit mode send LEFT/RIGHT keys*/
        if(lv_group_get_editing(g)) {
 80027b0:	6938      	ldr	r0, [r7, #16]
 80027b2:	f7ff f86b 	bl	800188c <lv_group_get_editing>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02d      	beq.n	8002818 <indev_encoder_proc+0x5e0>
            int32_t s;
            if(data->enc_diff < 0) {
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	da11      	bge.n	80027ea <indev_encoder_proc+0x5b2>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	e006      	b.n	80027da <indev_encoder_proc+0x5a2>
 80027cc:	2114      	movs	r1, #20
 80027ce:	6938      	ldr	r0, [r7, #16]
 80027d0:	f7fe ffd4 	bl	800177c <lv_group_send_data>
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	3301      	adds	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027e0:	425b      	negs	r3, r3
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	dbf1      	blt.n	80027cc <indev_encoder_proc+0x594>
 80027e8:	e05d      	b.n	80028a6 <indev_encoder_proc+0x66e>
            }
            else if(data->enc_diff > 0) {
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	dd58      	ble.n	80028a6 <indev_encoder_proc+0x66e>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	e006      	b.n	8002808 <indev_encoder_proc+0x5d0>
 80027fa:	2113      	movs	r1, #19
 80027fc:	6938      	ldr	r0, [r7, #16]
 80027fe:	f7fe ffbd 	bl	800177c <lv_group_send_data>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	4293      	cmp	r3, r2
 8002814:	dbf1      	blt.n	80027fa <indev_encoder_proc+0x5c2>
 8002816:	e046      	b.n	80028a6 <indev_encoder_proc+0x66e>
            }
        }
        /*In navigate mode focus on the next/prev objects*/
        else {
            int32_t s;
            if(data->enc_diff < 0) {
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	da10      	bge.n	8002844 <indev_encoder_proc+0x60c>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e005      	b.n	8002834 <indev_encoder_proc+0x5fc>
 8002828:	6938      	ldr	r0, [r7, #16]
 800282a:	f7fe ff95 	bl	8001758 <lv_group_focus_prev>
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	3301      	adds	r3, #1
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800283a:	425b      	negs	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	429a      	cmp	r2, r3
 8002840:	dbf2      	blt.n	8002828 <indev_encoder_proc+0x5f0>
 8002842:	e030      	b.n	80028a6 <indev_encoder_proc+0x66e>
            }
            else if(data->enc_diff > 0) {
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	dd2b      	ble.n	80028a6 <indev_encoder_proc+0x66e>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e005      	b.n	8002860 <indev_encoder_proc+0x628>
 8002854:	6938      	ldr	r0, [r7, #16]
 8002856:	f7fe ff6d 	bl	8001734 <lv_group_focus_next>
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	3301      	adds	r3, #1
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4293      	cmp	r3, r2
 800286c:	dbf2      	blt.n	8002854 <indev_encoder_proc+0x61c>
 800286e:	e01a      	b.n	80028a6 <indev_encoder_proc+0x66e>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8002870:	bf00      	nop
 8002872:	e018      	b.n	80028a6 <indev_encoder_proc+0x66e>
    if(g == NULL) return;
 8002874:	bf00      	nop
 8002876:	e016      	b.n	80028a6 <indev_encoder_proc+0x66e>
    if(indev_obj_act == NULL) return;
 8002878:	bf00      	nop
 800287a:	e014      	b.n	80028a6 <indev_encoder_proc+0x66e>
    if(indev_obj_act == NULL) return;
 800287c:	bf00      	nop
 800287e:	e012      	b.n	80028a6 <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002880:	bf00      	nop
 8002882:	e010      	b.n	80028a6 <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002884:	bf00      	nop
 8002886:	e00e      	b.n	80028a6 <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002888:	bf00      	nop
 800288a:	e00c      	b.n	80028a6 <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 800288c:	bf00      	nop
 800288e:	e00a      	b.n	80028a6 <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002890:	bf00      	nop
 8002892:	e008      	b.n	80028a6 <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002894:	bf00      	nop
 8002896:	e006      	b.n	80028a6 <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002898:	bf00      	nop
 800289a:	e004      	b.n	80028a6 <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 800289c:	bf00      	nop
 800289e:	e002      	b.n	80028a6 <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 80028a0:	bf00      	nop
 80028a2:	e000      	b.n	80028a6 <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 80028a4:	bf00      	nop

#else
    (void)data; /*Unused*/
    (void)i;    /*Unused*/
#endif
}
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	2001779c 	.word	0x2001779c

080028b0 <indev_button_proc>:
 * @param indev pointer to an input device state
 * @param x x coordinate of the next point
 * @param y y coordinate of the next point
 */
static void indev_button_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
    /* Die gracefully if i->btn_points is NULL */
    if(i->btn_points == NULL) {
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d056      	beq.n	8002970 <indev_button_proc+0xc0>
        LV_LOG_WARN("indev_button_proc: btn_points was NULL");
        return;
    }

    lv_coord_t x = i->btn_points[data->btn_id].x;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	81fb      	strh	r3, [r7, #14]
    lv_coord_t y = i->btn_points[data->btn_id].y;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	885b      	ldrh	r3, [r3, #2]
 80028e0:	81bb      	strh	r3, [r7, #12]

    /*If a new point comes always make a release*/
    if(data->state == LV_INDEV_STATE_PR) {
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	7b9b      	ldrb	r3, [r3, #14]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d112      	bne.n	8002910 <indev_button_proc+0x60>
        if(i->proc.types.pointer.last_point.x != x ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80028f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d106      	bne.n	8002906 <indev_button_proc+0x56>
           i->proc.types.pointer.last_point.y != y) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
        if(i->proc.types.pointer.last_point.x != x ||
 80028fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002902:	429a      	cmp	r2, r3
 8002904:	d004      	beq.n	8002910 <indev_button_proc+0x60>
            indev_proc_release(&i->proc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	331c      	adds	r3, #28
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fb14 	bl	8002f38 <indev_proc_release>
        }
    }

    if(indev_reset_check(&i->proc)) return;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	331c      	adds	r3, #28
 8002914:	4618      	mov	r0, r3
 8002916:	f001 fa63 	bl	8003de0 <indev_reset_check>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d129      	bne.n	8002974 <indev_button_proc+0xc4>

    /*Save the new points*/
    i->proc.types.pointer.act_point.x = x;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	89fa      	ldrh	r2, [r7, #14]
 8002924:	841a      	strh	r2, [r3, #32]
    i->proc.types.pointer.act_point.y = y;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	89ba      	ldrh	r2, [r7, #12]
 800292a:	845a      	strh	r2, [r3, #34]	; 0x22

    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	7b9b      	ldrb	r3, [r3, #14]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <indev_button_proc+0x90>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	331c      	adds	r3, #28
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f821 	bl	8002980 <indev_proc_press>
 800293e:	e004      	b.n	800294a <indev_button_proc+0x9a>
    else indev_proc_release(&i->proc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	331c      	adds	r3, #28
 8002944:	4618      	mov	r0, r3
 8002946:	f000 faf7 	bl	8002f38 <indev_proc_release>

    if(indev_reset_check(&i->proc)) return;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	331c      	adds	r3, #28
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fa46 	bl	8003de0 <indev_reset_check>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10e      	bne.n	8002978 <indev_button_proc+0xc8>

    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	849a      	strh	r2, [r3, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	84da      	strh	r2, [r3, #38]	; 0x26
 800296e:	e004      	b.n	800297a <indev_button_proc+0xca>
        return;
 8002970:	bf00      	nop
 8002972:	e002      	b.n	800297a <indev_button_proc+0xca>
    if(indev_reset_check(&i->proc)) return;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <indev_button_proc+0xca>
    if(indev_reset_check(&i->proc)) return;
 8002978:	bf00      	nop
}
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <indev_proc_press>:
 * Process the pressed state of LV_INDEV_TYPE_POINTER input devices
 * @param indev pointer to an input device 'proc'
 * @return LV_RES_OK: no indev reset required; LV_RES_INV: indev reset is required
 */
static void indev_proc_press(lv_indev_proc_t * proc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
    indev_obj_act = proc->types.pointer.act_obj;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4a8d      	ldr	r2, [pc, #564]	; (8002bc4 <indev_proc_press+0x244>)
 800298e:	6013      	str	r3, [r2, #0]

    if(proc->wait_until_release != 0) return;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 82a7 	bne.w	8002ef0 <indev_proc_press+0x570>

    lv_disp_t * disp = indev_act->driver.disp;
 80029a2:	4b89      	ldr	r3, [pc, #548]	; (8002bc8 <indev_proc_press+0x248>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	613b      	str	r3, [r7, #16]
    bool new_obj_searched = false;
 80029aa:	2300      	movs	r3, #0
 80029ac:	77fb      	strb	r3, [r7, #31]

    /*If there is no last object then search*/
    if(indev_obj_act == NULL) {
 80029ae:	4b85      	ldr	r3, [pc, #532]	; (8002bc4 <indev_proc_press+0x244>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d131      	bne.n	8002a1a <indev_proc_press+0x9a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 80029b6:	6938      	ldr	r0, [r7, #16]
 80029b8:	f7fe fd9e 	bl	80014f8 <lv_disp_get_layer_sys>
 80029bc:	4602      	mov	r2, r0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f000 fc45 	bl	8003254 <lv_indev_search_obj>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <indev_proc_press+0x244>)
 80029ce:	601a      	str	r2, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 80029d0:	4b7c      	ldr	r3, [pc, #496]	; (8002bc4 <indev_proc_press+0x244>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10c      	bne.n	80029f2 <indev_proc_press+0x72>
 80029d8:	6938      	ldr	r0, [r7, #16]
 80029da:	f7fe fd78 	bl	80014ce <lv_disp_get_layer_top>
 80029de:	4602      	mov	r2, r0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f000 fc34 	bl	8003254 <lv_indev_search_obj>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b75      	ldr	r3, [pc, #468]	; (8002bc4 <indev_proc_press+0x244>)
 80029f0:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 80029f2:	4b74      	ldr	r3, [pc, #464]	; (8002bc4 <indev_proc_press+0x244>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <indev_proc_press+0x94>
 80029fa:	6938      	ldr	r0, [r7, #16]
 80029fc:	f7fe fd3d 	bl	800147a <lv_disp_get_scr_act>
 8002a00:	4602      	mov	r2, r0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f000 fc23 	bl	8003254 <lv_indev_search_obj>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <indev_proc_press+0x244>)
 8002a12:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        new_obj_searched = true;
 8002a14:	2301      	movs	r3, #1
 8002a16:	77fb      	strb	r3, [r7, #31]
 8002a18:	e044      	b.n	8002aa4 <indev_proc_press+0x124>
    }
    /*If there is last object but it is not dragged and not protected also search*/
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d13c      	bne.n	8002aa4 <indev_proc_press+0x124>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
 8002a2a:	4b66      	ldr	r3, [pc, #408]	; (8002bc4 <indev_proc_press+0x244>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2110      	movs	r1, #16
 8002a30:	4618      	mov	r0, r3
 8002a32:	f004 fb69 	bl	8007108 <lv_obj_is_protected>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d030      	beq.n	8002aa4 <indev_proc_press+0x124>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8002a42:	6938      	ldr	r0, [r7, #16]
 8002a44:	f7fe fd58 	bl	80014f8 <lv_disp_get_layer_sys>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f000 fbff 	bl	8003254 <lv_indev_search_obj>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b5a      	ldr	r3, [pc, #360]	; (8002bc4 <indev_proc_press+0x244>)
 8002a5a:	601a      	str	r2, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8002a5c:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <indev_proc_press+0x244>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10c      	bne.n	8002a7e <indev_proc_press+0xfe>
 8002a64:	6938      	ldr	r0, [r7, #16]
 8002a66:	f7fe fd32 	bl	80014ce <lv_disp_get_layer_top>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 fbee 	bl	8003254 <lv_indev_search_obj>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b52      	ldr	r3, [pc, #328]	; (8002bc4 <indev_proc_press+0x244>)
 8002a7c:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8002a7e:	4b51      	ldr	r3, [pc, #324]	; (8002bc4 <indev_proc_press+0x244>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <indev_proc_press+0x120>
 8002a86:	6938      	ldr	r0, [r7, #16]
 8002a88:	f7fe fcf7 	bl	800147a <lv_disp_get_scr_act>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3304      	adds	r3, #4
 8002a92:	4619      	mov	r1, r3
 8002a94:	4610      	mov	r0, r2
 8002a96:	f000 fbdd 	bl	8003254 <lv_indev_search_obj>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <indev_proc_press+0x244>)
 8002a9e:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        new_obj_searched = true;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	77fb      	strb	r3, [r7, #31]
    /*If a draggable or a protected object was the last then keep it*/
    else {
    }

    /*The last object might have drag throw. Stop it manually*/
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8002aa4:	7ffb      	ldrb	r3, [r7, #31]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <indev_proc_press+0x144>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <indev_proc_press+0x144>
        proc->types.pointer.drag_throw_vect.x = 0;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	829a      	strh	r2, [r3, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	82da      	strh	r2, [r3, #22]
        indev_drag_throw(proc);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 ff66 	bl	8003990 <indev_drag_throw>
    }

    /*If a new object was found reset some variables and send a pressed signal*/
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <indev_proc_press+0x244>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	f000 80c9 	beq.w	8002c64 <indev_proc_press+0x2e4>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	811a      	strh	r2, [r3, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	815a      	strh	r2, [r3, #10]

        /*If a new object found the previous was lost, so send a signal*/
        if(proc->types.pointer.act_obj != NULL) {
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01c      	beq.n	8002b28 <indev_proc_press+0x1a8>
            /*Save the obj because in special cases `act_obj` can change in the signal function*/
            lv_obj_t * last_obj = proc->types.pointer.act_obj;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	60fb      	str	r3, [r7, #12]

            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	4a33      	ldr	r2, [pc, #204]	; (8002bc8 <indev_proc_press+0x248>)
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	210d      	movs	r1, #13
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f001 f96c 	bl	8003de0 <indev_reset_check>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 81f2 	bne.w	8002ef4 <indev_proc_press+0x574>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2102      	movs	r1, #2
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f003 fbbf 	bl	8006298 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f001 f960 	bl	8003de0 <indev_reset_check>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 81e8 	bne.w	8002ef8 <indev_proc_press+0x578>

        }

        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 8002b28:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <indev_proc_press+0x244>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	619a      	str	r2, [r3, #24]
        proc->types.pointer.last_obj = indev_obj_act;
 8002b30:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <indev_proc_press+0x244>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	61da      	str	r2, [r3, #28]

        if(indev_obj_act != NULL) {
 8002b38:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <indev_proc_press+0x244>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8091 	beq.w	8002c64 <indev_proc_press+0x2e4>
            /* Save the time when the obj pressed to count long press time.*/
            proc->pr_timestamp                 = lv_tick_get();
 8002b42:	f017 fcc7 	bl	801a4d4 <lv_tick_get>
 8002b46:	4602      	mov	r2, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8002b52:	f36f 0300 	bfc	r3, #0, #1
 8002b56:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002b60:	f36f 0300 	bfc	r3, #0, #1
 8002b64:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.drag_in_prog   = 0;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002b6e:	f36f 0341 	bfc	r3, #1, #1
 8002b72:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	821a      	strh	r2, [r3, #16]
            proc->types.pointer.drag_sum.y     = 0;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	825a      	strh	r2, [r3, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002b88:	2103      	movs	r1, #3
 8002b8a:	f361 0384 	bfi	r3, r1, #2, #3
 8002b8e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.gesture_sent   = 0;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002b98:	f36f 1345 	bfc	r3, #5, #1
 8002b9c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	84da      	strh	r2, [r3, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	819a      	strh	r2, [r3, #12]
            proc->types.pointer.vect.y         = 0;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	81da      	strh	r2, [r3, #14]

            /*Search for 'top' attribute*/
            lv_obj_t * i        = indev_obj_act;
 8002bb8:	4b02      	ldr	r3, [pc, #8]	; (8002bc4 <indev_proc_press+0x244>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
            lv_obj_t * last_top = NULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
            while(i != NULL) {
 8002bc2:	e011      	b.n	8002be8 <indev_proc_press+0x268>
 8002bc4:	2001779c 	.word	0x2001779c
 8002bc8:	20017798 	.word	0x20017798
                if(i->top) last_top = i;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <indev_proc_press+0x260>
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	617b      	str	r3, [r7, #20]
                i = lv_obj_get_parent(i);
 8002be0:	69b8      	ldr	r0, [r7, #24]
 8002be2:	f003 fcc5 	bl	8006570 <lv_obj_get_parent>
 8002be6:	61b8      	str	r0, [r7, #24]
            while(i != NULL) {
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1ee      	bne.n	8002bcc <indev_proc_press+0x24c>
            }

            if(last_top != NULL) {
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <indev_proc_press+0x27a>
                /*Move the last_top object to the foreground*/
                lv_obj_move_foreground(last_top);
 8002bf4:	6978      	ldr	r0, [r7, #20]
 8002bf6:	f002 fd81 	bl	80056fc <lv_obj_move_foreground>
            }

            /*Send a signal about the press*/
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
 8002bfa:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <indev_proc_press+0x39c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	4a46      	ldr	r2, [pc, #280]	; (8002d1c <indev_proc_press+0x39c>)
 8002c02:	6810      	ldr	r0, [r2, #0]
 8002c04:	4a46      	ldr	r2, [pc, #280]	; (8002d20 <indev_proc_press+0x3a0>)
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	210b      	movs	r1, #11
 8002c0a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f001 f8e7 	bl	8003de0 <indev_reset_check>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 8171 	bne.w	8002efc <indev_proc_press+0x57c>

            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8002c1a:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <indev_proc_press+0x39c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fb38 	bl	8006298 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f001 f8d9 	bl	8003de0 <indev_reset_check>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 8165 	bne.w	8002f00 <indev_proc_press+0x580>

            if(indev_act->proc.wait_until_release) return;
 8002c36:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <indev_proc_press+0x3a0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 815d 	bne.w	8002f04 <indev_proc_press+0x584>

            /*Handle focus*/
            indev_click_focus(&indev_act->proc);
 8002c4a:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <indev_proc_press+0x3a0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	331c      	adds	r3, #28
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fb67 	bl	8003324 <indev_click_focus>
            if(indev_reset_check(proc)) return;
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f001 f8c2 	bl	8003de0 <indev_reset_check>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 8152 	bne.w	8002f08 <indev_proc_press+0x588>

        }
    }

    /*Calculate the types.pointer.vector*/
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	819a      	strh	r2, [r3, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	b21a      	sxth	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	81da      	strh	r2, [r3, #14]

    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	10db      	asrs	r3, r3, #3
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	10db      	asrs	r3, r3, #3
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	82da      	strh	r2, [r3, #22]

    if(proc->types.pointer.drag_throw_vect.x < 0)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	da09      	bge.n	8002ce2 <indev_proc_press+0x362>
        proc->types.pointer.drag_throw_vect.x++;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	829a      	strh	r2, [r3, #20]
 8002ce0:	e00d      	b.n	8002cfe <indev_proc_press+0x37e>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	dd08      	ble.n	8002cfe <indev_proc_press+0x37e>
        proc->types.pointer.drag_throw_vect.x--;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	b21a      	sxth	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	829a      	strh	r2, [r3, #20]

    if(proc->types.pointer.drag_throw_vect.y < 0)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da0d      	bge.n	8002d24 <indev_proc_press+0x3a4>
        proc->types.pointer.drag_throw_vect.y++;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	b21a      	sxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	82da      	strh	r2, [r3, #22]
 8002d1a:	e011      	b.n	8002d40 <indev_proc_press+0x3c0>
 8002d1c:	2001779c 	.word	0x2001779c
 8002d20:	20017798 	.word	0x20017798
    else if(proc->types.pointer.drag_throw_vect.y > 0)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	dd08      	ble.n	8002d40 <indev_proc_press+0x3c0>
        proc->types.pointer.drag_throw_vect.y--;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	b21a      	sxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	82da      	strh	r2, [r3, #22]

    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	10db      	asrs	r3, r3, #3
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	10db      	asrs	r3, r3, #3
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	82da      	strh	r2, [r3, #22]

    /*If there is active object and it can be dragged run the drag*/
    if(indev_obj_act != NULL) {
 8002d7c:	4b6c      	ldr	r3, [pc, #432]	; (8002f30 <indev_proc_press+0x5b0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80d2 	beq.w	8002f2a <indev_proc_press+0x5aa>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
 8002d86:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <indev_proc_press+0x5b0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	4a68      	ldr	r2, [pc, #416]	; (8002f30 <indev_proc_press+0x5b0>)
 8002d8e:	6810      	ldr	r0, [r2, #0]
 8002d90:	4a68      	ldr	r2, [pc, #416]	; (8002f34 <indev_proc_press+0x5b4>)
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	210c      	movs	r1, #12
 8002d96:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f001 f821 	bl	8003de0 <indev_reset_check>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f040 80b3 	bne.w	8002f0c <indev_proc_press+0x58c>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 8002da6:	4b62      	ldr	r3, [pc, #392]	; (8002f30 <indev_proc_press+0x5b0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	2101      	movs	r1, #1
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 fa72 	bl	8006298 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f001 f813 	bl	8003de0 <indev_reset_check>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 80a7 	bne.w	8002f10 <indev_proc_press+0x590>
        if(indev_act->proc.wait_until_release) return;
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <indev_proc_press+0x5b4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f040 809f 	bne.w	8002f14 <indev_proc_press+0x594>

        indev_drag(proc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fbb8 	bl	800354c <indev_drag>
        indev_gesture(proc);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 ff3b 	bl	8003c58 <indev_gesture>
        if(indev_reset_check(proc)) return;
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fffc 	bl	8003de0 <indev_reset_check>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 8094 	bne.w	8002f18 <indev_proc_press+0x598>

        /*If there is no drag then check for long press time*/
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d13a      	bne.n	8002e76 <indev_proc_press+0x4f6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d132      	bne.n	8002e76 <indev_proc_press+0x4f6>
            /*Send a signal about the long press if enough time elapsed*/
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	4618      	mov	r0, r3
 8002e16:	f017 fb77 	bl	801a508 <lv_tick_elaps>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b45      	ldr	r3, [pc, #276]	; (8002f34 <indev_proc_press+0x5b4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	8b1b      	ldrh	r3, [r3, #24]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d927      	bls.n	8002e76 <indev_proc_press+0x4f6>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
 8002e26:	4b42      	ldr	r3, [pc, #264]	; (8002f30 <indev_proc_press+0x5b0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	4a40      	ldr	r2, [pc, #256]	; (8002f30 <indev_proc_press+0x5b0>)
 8002e2e:	6810      	ldr	r0, [r2, #0]
 8002e30:	4a40      	ldr	r2, [pc, #256]	; (8002f34 <indev_proc_press+0x5b4>)
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	210f      	movs	r1, #15
 8002e36:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 ffd1 	bl	8003de0 <indev_reset_check>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d16b      	bne.n	8002f1c <indev_proc_press+0x59c>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <indev_proc_press+0x5b0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fa23 	bl	8006298 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 ffc4 	bl	8003de0 <indev_reset_check>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d160      	bne.n	8002f20 <indev_proc_press+0x5a0>

                /*Mark the signal sending to do not send it again*/
                proc->long_pr_sent = 1;
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

                /*Save the long press time stamp for the long press repeat handler*/
                proc->longpr_rep_timestamp = lv_tick_get();
 8002e6c:	f017 fb32 	bl	801a4d4 <lv_tick_get>
 8002e70:	4602      	mov	r2, r0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        /*Send long press repeated signal*/
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d151      	bne.n	8002f2a <indev_proc_press+0x5aa>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d049      	beq.n	8002f2a <indev_proc_press+0x5aa>
            /*Send a signal about the long press repeat if enough time elapsed*/
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f017 fb34 	bl	801a508 <lv_tick_elaps>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <indev_proc_press+0x5b4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	8b5b      	ldrh	r3, [r3, #26]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d93e      	bls.n	8002f2a <indev_proc_press+0x5aa>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 8002eac:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <indev_proc_press+0x5b0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a1f      	ldr	r2, [pc, #124]	; (8002f30 <indev_proc_press+0x5b0>)
 8002eb4:	6810      	ldr	r0, [r2, #0]
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <indev_proc_press+0x5b4>)
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	2110      	movs	r1, #16
 8002ebc:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 ff8e 	bl	8003de0 <indev_reset_check>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d12c      	bne.n	8002f24 <indev_proc_press+0x5a4>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <indev_proc_press+0x5b0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2105      	movs	r1, #5
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 f9e0 	bl	8006298 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 ff81 	bl	8003de0 <indev_reset_check>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d121      	bne.n	8002f28 <indev_proc_press+0x5a8>
                proc->longpr_rep_timestamp = lv_tick_get();
 8002ee4:	f017 faf6 	bl	801a4d4 <lv_tick_get>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
 8002eee:	e01c      	b.n	8002f2a <indev_proc_press+0x5aa>
    if(proc->wait_until_release != 0) return;
 8002ef0:	bf00      	nop
 8002ef2:	e01a      	b.n	8002f2a <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8002ef4:	bf00      	nop
 8002ef6:	e018      	b.n	8002f2a <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8002ef8:	bf00      	nop
 8002efa:	e016      	b.n	8002f2a <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8002efc:	bf00      	nop
 8002efe:	e014      	b.n	8002f2a <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8002f00:	bf00      	nop
 8002f02:	e012      	b.n	8002f2a <indev_proc_press+0x5aa>
            if(indev_act->proc.wait_until_release) return;
 8002f04:	bf00      	nop
 8002f06:	e010      	b.n	8002f2a <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8002f08:	bf00      	nop
 8002f0a:	e00e      	b.n	8002f2a <indev_proc_press+0x5aa>
        if(indev_reset_check(proc)) return;
 8002f0c:	bf00      	nop
 8002f0e:	e00c      	b.n	8002f2a <indev_proc_press+0x5aa>
        if(indev_reset_check(proc)) return;
 8002f10:	bf00      	nop
 8002f12:	e00a      	b.n	8002f2a <indev_proc_press+0x5aa>
        if(indev_act->proc.wait_until_release) return;
 8002f14:	bf00      	nop
 8002f16:	e008      	b.n	8002f2a <indev_proc_press+0x5aa>
        if(indev_reset_check(proc)) return;
 8002f18:	bf00      	nop
 8002f1a:	e006      	b.n	8002f2a <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 8002f1c:	bf00      	nop
 8002f1e:	e004      	b.n	8002f2a <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 8002f20:	bf00      	nop
 8002f22:	e002      	b.n	8002f2a <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 8002f28:	bf00      	nop
            }
        }
    }
}
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	2001779c 	.word	0x2001779c
 8002f34:	20017798 	.word	0x20017798

08002f38 <indev_proc_release>:
/**
 * Process the released state of LV_INDEV_TYPE_POINTER input devices
 * @param proc pointer to an input device 'proc'
 */
static void indev_proc_release(lv_indev_proc_t * proc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
    if(proc->wait_until_release != 0) {
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d012      	beq.n	8002f76 <indev_proc_release+0x3e>
        proc->types.pointer.act_obj  = NULL;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	619a      	str	r2, [r3, #24]
        proc->types.pointer.last_obj = NULL;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	61da      	str	r2, [r3, #28]
        proc->pr_timestamp           = 0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
        proc->wait_until_release     = 0;
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8002f6e:	f36f 03c3 	bfc	r3, #3, #1
 8002f72:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    }
    indev_obj_act = proc->types.pointer.act_obj;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	4a86      	ldr	r2, [pc, #536]	; (8003194 <indev_proc_release+0x25c>)
 8002f7c:	6013      	str	r3, [r2, #0]

    /*Forget the act obj and send a released signal */
    if(indev_obj_act) {
 8002f7e:	4b85      	ldr	r3, [pc, #532]	; (8003194 <indev_proc_release+0x25c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80dd 	beq.w	8003142 <indev_proc_release+0x20a>

        /* If the object was protected against press lost then it possible that
         * the object is already not pressed but still it is the `act_obj`.
         * In this case send the `LV_SIGNAL_RELEASED/CLICKED` instead of `LV_SIGNAL_PRESS_LOST` if
         * the indev is ON the `types.pointer.act_obj` */
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 8002f88:	4b82      	ldr	r3, [pc, #520]	; (8003194 <indev_proc_release+0x25c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2110      	movs	r1, #16
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 f8ba 	bl	8007108 <lv_obj_is_protected>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d049      	beq.n	800302e <indev_proc_release+0xf6>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8002f9a:	4b7e      	ldr	r3, [pc, #504]	; (8003194 <indev_proc_release+0x25c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <indev_proc_release+0x25c>)
 8002fa2:	6810      	ldr	r0, [r2, #0]
 8002fa4:	4a7c      	ldr	r2, [pc, #496]	; (8003198 <indev_proc_release+0x260>)
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	210e      	movs	r1, #14
 8002faa:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 ff17 	bl	8003de0 <indev_reset_check>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f040 80d9 	bne.w	800316c <indev_proc_release+0x234>

            if(proc->types.pointer.drag_in_prog == 0) {
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d123      	bne.n	8003012 <indev_proc_release+0xda>
                if(proc->long_pr_sent == 0) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <indev_proc_release+0xbe>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8002fda:	4b6e      	ldr	r3, [pc, #440]	; (8003194 <indev_proc_release+0x25c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2103      	movs	r1, #3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 f958 	bl	8006298 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fef9 	bl	8003de0 <indev_reset_check>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f040 80bd 	bne.w	8003170 <indev_proc_release+0x238>
                }

                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002ff6:	4b67      	ldr	r3, [pc, #412]	; (8003194 <indev_proc_release+0x25c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2106      	movs	r1, #6
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 f94a 	bl	8006298 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 feeb 	bl	8003de0 <indev_reset_check>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 80b1 	bne.w	8003174 <indev_proc_release+0x23c>
            }

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8003012:	4b60      	ldr	r3, [pc, #384]	; (8003194 <indev_proc_release+0x25c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2200      	movs	r2, #0
 8003018:	2107      	movs	r1, #7
 800301a:	4618      	mov	r0, r3
 800301c:	f003 f93c 	bl	8006298 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fedd 	bl	8003de0 <indev_reset_check>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d04f      	beq.n	80030cc <indev_proc_release+0x194>
 800302c:	e0af      	b.n	800318e <indev_proc_release+0x256>
        }
        /* The simple case: `act_obj` was not protected against press lost.
         * If it is already not pressed then `indev_proc_press` would set `indev_obj_act = NULL`*/
        else {
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 800302e:	4b59      	ldr	r3, [pc, #356]	; (8003194 <indev_proc_release+0x25c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4a57      	ldr	r2, [pc, #348]	; (8003194 <indev_proc_release+0x25c>)
 8003036:	6810      	ldr	r0, [r2, #0]
 8003038:	4a57      	ldr	r2, [pc, #348]	; (8003198 <indev_proc_release+0x260>)
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	210e      	movs	r1, #14
 800303e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fecd 	bl	8003de0 <indev_reset_check>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 8095 	bne.w	8003178 <indev_proc_release+0x240>

            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d114      	bne.n	8003088 <indev_proc_release+0x150>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10c      	bne.n	8003088 <indev_proc_release+0x150>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 800306e:	4b49      	ldr	r3, [pc, #292]	; (8003194 <indev_proc_release+0x25c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	2103      	movs	r1, #3
 8003076:	4618      	mov	r0, r3
 8003078:	f003 f90e 	bl	8006298 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 feaf 	bl	8003de0 <indev_reset_check>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d179      	bne.n	800317c <indev_proc_release+0x244>
            }

            if(proc->types.pointer.drag_in_prog == 0) {
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10c      	bne.n	80030b2 <indev_proc_release+0x17a>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8003098:	4b3e      	ldr	r3, [pc, #248]	; (8003194 <indev_proc_release+0x25c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	2106      	movs	r1, #6
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 f8f9 	bl	8006298 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fe9a 	bl	8003de0 <indev_reset_check>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d166      	bne.n	8003180 <indev_proc_release+0x248>
            }

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 80030b2:	4b38      	ldr	r3, [pc, #224]	; (8003194 <indev_proc_release+0x25c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2200      	movs	r2, #0
 80030b8:	2107      	movs	r1, #7
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 f8ec 	bl	8006298 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fe8d 	bl	8003de0 <indev_reset_check>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d15b      	bne.n	8003184 <indev_proc_release+0x24c>
        }

        /*Send LV_EVENT_DRAG_THROW_BEGIN if required */
        /*If drag parent is active check recursively the drag_parent attribute*/
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
 80030cc:	4b31      	ldr	r3, [pc, #196]	; (8003194 <indev_proc_release+0x25c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fda3 	bl	8003c1c <get_dragged_obj>
 80030d6:	60f8      	str	r0, [r7, #12]
        if(drag_obj) {
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d028      	beq.n	8003130 <indev_proc_release+0x1f8>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f003 ff8c 	bl	8006ffc <lv_obj_get_drag_throw>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d022      	beq.n	8003130 <indev_proc_release+0x1f8>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d01a      	beq.n	8003130 <indev_proc_release+0x1f8>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <indev_proc_release+0x1d6>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	2200      	movs	r2, #0
 8003108:	2112      	movs	r1, #18
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fe66 	bl	8003de0 <indev_reset_check>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d136      	bne.n	8003188 <indev_proc_release+0x250>

                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
 800311a:	2200      	movs	r2, #0
 800311c:	210a      	movs	r1, #10
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f003 f8ba 	bl	8006298 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fe5b 	bl	8003de0 <indev_reset_check>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d12d      	bne.n	800318c <indev_proc_release+0x254>
            }
        }

        proc->types.pointer.act_obj = NULL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]
        proc->pr_timestamp          = 0;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /*The reset can be set in the signal function.
     * In case of reset query ignore the remaining parts.*/
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d021      	beq.n	800318e <indev_proc_release+0x256>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d119      	bne.n	800318e <indev_proc_release+0x256>
        indev_drag_throw(proc);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fc18 	bl	8003990 <indev_drag_throw>
        if(indev_reset_check(proc)) return;
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fe3d 	bl	8003de0 <indev_reset_check>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	e010      	b.n	800318e <indev_proc_release+0x256>
            if(indev_reset_check(proc)) return;
 800316c:	bf00      	nop
 800316e:	e00e      	b.n	800318e <indev_proc_release+0x256>
                    if(indev_reset_check(proc)) return;
 8003170:	bf00      	nop
 8003172:	e00c      	b.n	800318e <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 8003174:	bf00      	nop
 8003176:	e00a      	b.n	800318e <indev_proc_release+0x256>
            if(indev_reset_check(proc)) return;
 8003178:	bf00      	nop
 800317a:	e008      	b.n	800318e <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 800317c:	bf00      	nop
 800317e:	e006      	b.n	800318e <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 8003180:	bf00      	nop
 8003182:	e004      	b.n	800318e <indev_proc_release+0x256>
            if(indev_reset_check(proc)) return;
 8003184:	bf00      	nop
 8003186:	e002      	b.n	800318e <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 8003188:	bf00      	nop
 800318a:	e000      	b.n	800318e <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 800318c:	bf00      	nop
    }
}
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	2001779c 	.word	0x2001779c
 8003198:	20017798 	.word	0x20017798

0800319c <indev_proc_reset_query_handler>:
 * @param data pointer to the data read from the input device
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    if(indev->proc.reset_query) {
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d046      	beq.n	8003242 <indev_proc_reset_query_handler+0xa6>
        indev->proc.types.pointer.act_obj           = NULL;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	635a      	str	r2, [r3, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	639a      	str	r2, [r3, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 80031c6:	f36f 0300 	bfc	r3, #0, #1
 80031ca:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 80031d4:	f36f 0341 	bfc	r3, #1, #1
 80031d8:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
        indev->proc.long_pr_sent                    = 0;
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80031e2:	f36f 0300 	bfc	r3, #0, #1
 80031e6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	649a      	str	r2, [r3, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	64da      	str	r2, [r3, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	859a      	strh	r2, [r3, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	85da      	strh	r2, [r3, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 8003208:	2103      	movs	r1, #3
 800320a:	f361 0384 	bfi	r3, r1, #2, #3
 800320e:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	861a      	strh	r2, [r3, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	865a      	strh	r2, [r3, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        indev->proc.reset_query                     = 0;
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8003234:	f36f 0341 	bfc	r3, #1, #1
 8003238:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        indev_obj_act                               = NULL;
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <indev_proc_reset_query_handler+0xb4>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    }
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	2001779c 	.word	0x2001779c

08003254 <lv_indev_search_obj>:
 * @param obj pointer to a start object, typically the screen
 * @param point pointer to a point for searching the most top child
 * @return pointer to the found object or NULL if there was no suitable object
 */
lv_obj_t * lv_indev_search_obj(lv_obj_t * obj, lv_point_t * point)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]

    /*If the point is on this object check its children too*/
    if(lv_obj_hittest(obj, point)) {
 8003262:	6839      	ldr	r1, [r7, #0]
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f004 f83e 	bl	80072e6 <lv_obj_hittest>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d053      	beq.n	8003318 <lv_indev_search_obj+0xc4>
        lv_obj_t * i;

        _LV_LL_READ(obj->child_ll, i) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4618      	mov	r0, r3
 8003276:	f018 fea3 	bl	801bfc0 <_lv_ll_get_head>
 800327a:	6138      	str	r0, [r7, #16]
 800327c:	e00e      	b.n	800329c <lv_indev_search_obj+0x48>
            found_p = lv_indev_search_obj(i, point);
 800327e:	6839      	ldr	r1, [r7, #0]
 8003280:	6938      	ldr	r0, [r7, #16]
 8003282:	f7ff ffe7 	bl	8003254 <lv_indev_search_obj>
 8003286:	6178      	str	r0, [r7, #20]

            /*If a child was found then break*/
            if(found_p != NULL) {
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <lv_indev_search_obj+0x50>
        _LV_LL_READ(obj->child_ll, i) {
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	6939      	ldr	r1, [r7, #16]
 8003294:	4618      	mov	r0, r3
 8003296:	f018 feb9 	bl	801c00c <_lv_ll_get_next>
 800329a:	6138      	str	r0, [r7, #16]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1ed      	bne.n	800327e <lv_indev_search_obj+0x2a>
 80032a2:	e000      	b.n	80032a6 <lv_indev_search_obj+0x52>
                break;
 80032a4:	bf00      	nop
            }
        }

        /*If then the children was not ok, and this obj is clickable
         * and it or its parent is not hidden then save this object*/
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d135      	bne.n	8003318 <lv_indev_search_obj+0xc4>
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f003 fe33 	bl	8006f18 <lv_obj_get_click>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d02f      	beq.n	8003318 <lv_indev_search_obj+0xc4>
            lv_obj_t * hidden_i = obj;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60fb      	str	r3, [r7, #12]
            while(hidden_i != NULL) {
 80032bc:	e009      	b.n	80032d2 <lv_indev_search_obj+0x7e>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f003 fe02 	bl	8006ec8 <lv_obj_get_hidden>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <lv_indev_search_obj+0x86>
                hidden_i = lv_obj_get_parent(hidden_i);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f003 f950 	bl	8006570 <lv_obj_get_parent>
 80032d0:	60f8      	str	r0, [r7, #12]
            while(hidden_i != NULL) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f2      	bne.n	80032be <lv_indev_search_obj+0x6a>
 80032d8:	e000      	b.n	80032dc <lv_indev_search_obj+0x88>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80032da:	bf00      	nop
            }
            /*No parent found with hidden == true*/
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false){
 80032dc:	2140      	movs	r1, #64	; 0x40
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f003 ff12 	bl	8007108 <lv_obj_is_protected>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f083 0301 	eor.w	r3, r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <lv_indev_search_obj+0xba>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d110      	bne.n	8003318 <lv_indev_search_obj+0xc4>
 80032f6:	2100      	movs	r1, #0
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f003 ff2f 	bl	800715c <lv_obj_get_state>
 80032fe:	4603      	mov	r3, r0
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <lv_indev_search_obj+0xc4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e004      	b.n	8003318 <lv_indev_search_obj+0xc4>
            }
            else {
                if(hidden_i == NULL) found_p = obj;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <lv_indev_search_obj+0xc4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 8003318:	697b      	ldr	r3, [r7, #20]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <indev_click_focus>:
/**
 * Handle focus/defocus on click for POINTER input devices
 * @param proc pointer to the state of the indev
 */
static void indev_click_focus(lv_indev_proc_t * proc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
    /*Handle click focus*/
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
 800332c:	4b86      	ldr	r3, [pc, #536]	; (8003548 <indev_click_focus+0x224>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f004 ff60 	bl	80081f6 <lv_obj_get_focused_obj>
 8003336:	6178      	str	r0, [r7, #20]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 8003338:	4b83      	ldr	r3, [pc, #524]	; (8003548 <indev_click_focus+0x224>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2120      	movs	r1, #32
 800333e:	4618      	mov	r0, r3
 8003340:	f003 fee2 	bl	8007108 <lv_obj_is_protected>
 8003344:	4603      	mov	r3, r0
 8003346:	f083 0301 	eor.w	r3, r3, #1
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80f8 	beq.w	8003542 <indev_click_focus+0x21e>
       proc->types.pointer.last_pressed != obj_to_focus) {
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	f000 80f2 	beq.w	8003542 <indev_click_focus+0x21e>
#if LV_USE_GROUP
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f003 ff2e 	bl	80071c0 <lv_obj_get_group>
 8003364:	6138      	str	r0, [r7, #16]
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <indev_click_focus+0x58>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4618      	mov	r0, r3
 8003374:	f003 ff24 	bl	80071c0 <lv_obj_get_group>
 8003378:	4603      	mov	r3, r0
 800337a:	e000      	b.n	800337e <indev_click_focus+0x5a>
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]

        /*If both the last and act. obj. are in the same group (or no group but it's also the same) */
        if(g_act == g_prev) {
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	429a      	cmp	r2, r3
 8003386:	d146      	bne.n	8003416 <indev_click_focus+0xf2>
            /*The objects are in a group*/
            if(g_act) {
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <indev_click_focus+0x80>
                lv_group_focus_obj(obj_to_focus);
 800338e:	6978      	ldr	r0, [r7, #20]
 8003390:	f7fe f934 	bl	80015fc <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fd23 	bl	8003de0 <indev_reset_check>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80bb 	beq.w	8003518 <indev_click_focus+0x1f4>
 80033a2:	e0ce      	b.n	8003542 <indev_click_focus+0x21e>
            }
            /*The object are not in group*/
            else {
                if(proc->types.pointer.last_pressed) {
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <indev_click_focus+0xc0>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	2200      	movs	r2, #0
 80033b2:	2117      	movs	r1, #23
 80033b4:	4618      	mov	r0, r3
 80033b6:	f003 f81f 	bl	80063f8 <lv_signal_send>
                    if(indev_reset_check(proc)) return;
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fd10 	bl	8003de0 <indev_reset_check>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 80ac 	bne.w	8003520 <indev_click_focus+0x1fc>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	2200      	movs	r2, #0
 80033ce:	210e      	movs	r1, #14
 80033d0:	4618      	mov	r0, r3
 80033d2:	f002 ff61 	bl	8006298 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fd02 	bl	8003de0 <indev_reset_check>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 80a0 	bne.w	8003524 <indev_click_focus+0x200>
                }

                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 80033e4:	2200      	movs	r2, #0
 80033e6:	2116      	movs	r1, #22
 80033e8:	6978      	ldr	r0, [r7, #20]
 80033ea:	f003 f805 	bl	80063f8 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fcf6 	bl	8003de0 <indev_reset_check>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 8096 	bne.w	8003528 <indev_click_focus+0x204>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 80033fc:	2200      	movs	r2, #0
 80033fe:	210d      	movs	r1, #13
 8003400:	6978      	ldr	r0, [r7, #20]
 8003402:	f002 ff49 	bl	8006298 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fcea 	bl	8003de0 <indev_reset_check>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8082 	beq.w	8003518 <indev_click_focus+0x1f4>
 8003414:	e095      	b.n	8003542 <indev_click_focus+0x21e>
            }
        }
        /*The object are not in the same group (in different group or one in not a group)*/
        else {
            /*If the prev. obj. is not in a group then defocus it.*/
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d11e      	bne.n	800345a <indev_click_focus+0x136>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01a      	beq.n	800345a <indev_click_focus+0x136>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	2200      	movs	r2, #0
 800342a:	2117      	movs	r1, #23
 800342c:	4618      	mov	r0, r3
 800342e:	f002 ffe3 	bl	80063f8 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fcd4 	bl	8003de0 <indev_reset_check>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d176      	bne.n	800352c <indev_click_focus+0x208>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	2200      	movs	r2, #0
 8003444:	210e      	movs	r1, #14
 8003446:	4618      	mov	r0, r3
 8003448:	f002 ff26 	bl	8006298 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fcc7 	bl	8003de0 <indev_reset_check>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d03c      	beq.n	80034d2 <indev_click_focus+0x1ae>
 8003458:	e073      	b.n	8003542 <indev_click_focus+0x21e>
            }
            /*Focus on a non-group object*/
            else {
                if(proc->types.pointer.last_pressed) {
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d037      	beq.n	80034d2 <indev_click_focus+0x1ae>
                    /*If the prev. object also wasn't in a group defocus it*/
                    if(g_prev == NULL) {
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d11a      	bne.n	800349e <indev_click_focus+0x17a>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	2200      	movs	r2, #0
 800346e:	2117      	movs	r1, #23
 8003470:	4618      	mov	r0, r3
 8003472:	f002 ffc1 	bl	80063f8 <lv_signal_send>
                        if(indev_reset_check(proc)) return;
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fcb2 	bl	8003de0 <indev_reset_check>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d156      	bne.n	8003530 <indev_click_focus+0x20c>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	2200      	movs	r2, #0
 8003488:	210e      	movs	r1, #14
 800348a:	4618      	mov	r0, r3
 800348c:	f002 ff04 	bl	8006298 <lv_event_send>
                        if(indev_reset_check(proc)) return;
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fca5 	bl	8003de0 <indev_reset_check>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01a      	beq.n	80034d2 <indev_click_focus+0x1ae>
 800349c:	e051      	b.n	8003542 <indev_click_focus+0x21e>
                    }
                    /*If the prev. object also was in a group at least "LEAVE" it instead of defocus*/
                    else {
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	2200      	movs	r2, #0
 80034a4:	2115      	movs	r1, #21
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 ffa6 	bl	80063f8 <lv_signal_send>
                        if(indev_reset_check(proc)) return;
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fc97 	bl	8003de0 <indev_reset_check>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d13d      	bne.n	8003534 <indev_click_focus+0x210>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	2200      	movs	r2, #0
 80034be:	210f      	movs	r1, #15
 80034c0:	4618      	mov	r0, r3
 80034c2:	f002 fee9 	bl	8006298 <lv_event_send>
                        if(indev_reset_check(proc)) return;
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fc8a 	bl	8003de0 <indev_reset_check>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d132      	bne.n	8003538 <indev_click_focus+0x214>
                    }
                }
            }

            /*Focus to the act. in its group*/
            if(g_act) {
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <indev_click_focus+0x1c8>
                lv_group_focus_obj(obj_to_focus);
 80034d8:	6978      	ldr	r0, [r7, #20]
 80034da:	f7fe f88f 	bl	80015fc <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fc7e 	bl	8003de0 <indev_reset_check>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <indev_click_focus+0x1f4>
 80034ea:	e02a      	b.n	8003542 <indev_click_focus+0x21e>
            }
            else {
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 80034ec:	2200      	movs	r2, #0
 80034ee:	2116      	movs	r1, #22
 80034f0:	6978      	ldr	r0, [r7, #20]
 80034f2:	f002 ff81 	bl	80063f8 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fc72 	bl	8003de0 <indev_reset_check>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11c      	bne.n	800353c <indev_click_focus+0x218>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 8003502:	2200      	movs	r2, #0
 8003504:	210d      	movs	r1, #13
 8003506:	6978      	ldr	r0, [r7, #20]
 8003508:	f002 fec6 	bl	8006298 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fc67 	bl	8003de0 <indev_reset_check>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d113      	bne.n	8003540 <indev_click_focus+0x21c>
        lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
        if(indev_reset_check(proc)) return;
        lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
        if(indev_reset_check(proc)) return;
#endif
        proc->types.pointer.last_pressed = obj_to_focus;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	621a      	str	r2, [r3, #32]
 800351e:	e010      	b.n	8003542 <indev_click_focus+0x21e>
                    if(indev_reset_check(proc)) return;
 8003520:	bf00      	nop
 8003522:	e00e      	b.n	8003542 <indev_click_focus+0x21e>
                    if(indev_reset_check(proc)) return;
 8003524:	bf00      	nop
 8003526:	e00c      	b.n	8003542 <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 8003528:	bf00      	nop
 800352a:	e00a      	b.n	8003542 <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 800352c:	bf00      	nop
 800352e:	e008      	b.n	8003542 <indev_click_focus+0x21e>
                        if(indev_reset_check(proc)) return;
 8003530:	bf00      	nop
 8003532:	e006      	b.n	8003542 <indev_click_focus+0x21e>
                        if(indev_reset_check(proc)) return;
 8003534:	bf00      	nop
 8003536:	e004      	b.n	8003542 <indev_click_focus+0x21e>
                        if(indev_reset_check(proc)) return;
 8003538:	bf00      	nop
 800353a:	e002      	b.n	8003542 <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 800353c:	bf00      	nop
 800353e:	e000      	b.n	8003542 <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 8003540:	bf00      	nop
    }

}
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	2001779c 	.word	0x2001779c

0800354c <indev_drag>:
/**
 * Handle the dragging of indev_proc_p->types.pointer.act_obj
 * @param indev pointer to a input device state
 */
static void indev_drag(lv_indev_proc_t * proc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fb5f 	bl	8003c1c <get_dragged_obj>
 800355e:	61f8      	str	r0, [r7, #28]
    bool drag_just_started = false;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(drag_obj == NULL) return;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8207 	beq.w	800397c <indev_drag+0x430>

    if(lv_obj_get_drag(drag_obj) == false) return;
 800356e:	69f8      	ldr	r0, [r7, #28]
 8003570:	f003 fcfa 	bl	8006f68 <lv_obj_get_drag>
 8003574:	4603      	mov	r3, r0
 8003576:	f083 0301 	eor.w	r3, r3, #1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	f040 81ff 	bne.w	8003980 <indev_drag+0x434>

    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8003582:	69f8      	ldr	r0, [r7, #28]
 8003584:	f003 fd18 	bl	8006fb8 <lv_obj_get_drag_dir>
 8003588:	4603      	mov	r3, r0
 800358a:	76fb      	strb	r3, [r7, #27]

    /*Count the movement by drag*/
    if(proc->types.pointer.drag_limit_out == 0) {
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d172      	bne.n	8003682 <indev_drag+0x136>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	b21a      	sxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	821a      	strh	r2, [r3, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	b21a      	sxth	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	825a      	strh	r2, [r3, #18]

        /*Enough move?*/
        bool hor_en = false;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        bool ver_en = false;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
 80035dc:	7efb      	ldrb	r3, [r7, #27]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d002      	beq.n	80035e8 <indev_drag+0x9c>
 80035e2:	7efb      	ldrb	r3, [r7, #27]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d102      	bne.n	80035ee <indev_drag+0xa2>
            hor_en = true;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        }

        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 80035ee:	7efb      	ldrb	r3, [r7, #27]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d002      	beq.n	80035fa <indev_drag+0xae>
 80035f4:	7efb      	ldrb	r3, [r7, #27]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d102      	bne.n	8003600 <indev_drag+0xb4>
            ver_en = true;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        }

        if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8003600:	7efb      	ldrb	r3, [r7, #27]
 8003602:	2b04      	cmp	r3, #4
 8003604:	d115      	bne.n	8003632 <indev_drag+0xe6>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800360c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003610:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800361a:	2b00      	cmp	r3, #0
 800361c:	bfb8      	it	lt
 800361e:	425b      	neglt	r3, r3
 8003620:	429a      	cmp	r2, r3
 8003622:	dd03      	ble.n	800362c <indev_drag+0xe0>
                hor_en = true;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800362a:	e002      	b.n	8003632 <indev_drag+0xe6>
            }
            else {
                ver_en = true;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
        }

        /*If a move is greater then LV_DRAG_LIMIT then begin the drag*/
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 8003632:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <indev_drag+0x104>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	bfb8      	it	lt
 8003644:	425b      	neglt	r3, r3
 8003646:	4a6a      	ldr	r2, [pc, #424]	; (80037f0 <indev_drag+0x2a4>)
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	7d12      	ldrb	r2, [r2, #20]
 800364c:	4293      	cmp	r3, r2
 800364e:	da0e      	bge.n	800366e <indev_drag+0x122>
 8003650:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003654:	2b00      	cmp	r3, #0
 8003656:	d014      	beq.n	8003682 <indev_drag+0x136>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800365e:	2b00      	cmp	r3, #0
 8003660:	bfb8      	it	lt
 8003662:	425b      	neglt	r3, r3
 8003664:	4a62      	ldr	r2, [pc, #392]	; (80037f0 <indev_drag+0x2a4>)
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	7d12      	ldrb	r2, [r2, #20]
 800366a:	4293      	cmp	r3, r2
 800366c:	db09      	blt.n	8003682 <indev_drag+0x136>
            proc->types.pointer.drag_limit_out = 1;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            drag_just_started                   = true;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    /*If the drag limit is exceeded handle the dragging*/
    if(proc->types.pointer.drag_limit_out != 0) {
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8179 	beq.w	8003986 <indev_drag+0x43a>
        /*Set new position if the vector is not zero*/
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <indev_drag+0x15e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 816e 	beq.w	8003986 <indev_drag+0x43a>

            lv_coord_t prev_x     = drag_obj->coords.x1;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	8a1b      	ldrh	r3, [r3, #16]
 80036ae:	833b      	strh	r3, [r7, #24]
            lv_coord_t prev_y     = drag_obj->coords.y1;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	8a5b      	ldrh	r3, [r3, #18]
 80036b4:	82fb      	strh	r3, [r7, #22]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 80036b6:	69f8      	ldr	r0, [r7, #28]
 80036b8:	f002 ff5a 	bl	8006570 <lv_obj_get_parent>
 80036bc:	4603      	mov	r3, r0
 80036be:	4618      	mov	r0, r3
 80036c0:	f003 f832 	bl	8006728 <lv_obj_get_width>
 80036c4:	4603      	mov	r3, r0
 80036c6:	82bb      	strh	r3, [r7, #20]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 80036c8:	69f8      	ldr	r0, [r7, #28]
 80036ca:	f002 ff51 	bl	8006570 <lv_obj_get_parent>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 f84b 	bl	800676c <lv_obj_get_height>
 80036d6:	4603      	mov	r3, r0
 80036d8:	827b      	strh	r3, [r7, #18]

            /*Get the coordinates of the object and modify them*/
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 80036da:	69f8      	ldr	r0, [r7, #28]
 80036dc:	f002 ffbc 	bl	8006658 <lv_obj_get_x>
 80036e0:	4603      	mov	r3, r0
 80036e2:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 80036e4:	69f8      	ldr	r0, [r7, #28]
 80036e6:	f002 ffeb 	bl	80066c0 <lv_obj_get_y>
 80036ea:	4603      	mov	r3, r0
 80036ec:	843b      	strh	r3, [r7, #32]

            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
 80036ee:	7efb      	ldrb	r3, [r7, #27]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d11d      	bne.n	8003730 <indev_drag+0x1e4>
                if(drag_just_started) {
 80036f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 808e 	beq.w	800381a <indev_drag+0x2ce>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003704:	2103      	movs	r1, #3
 8003706:	f361 0384 	bfi	r3, r1, #2, #3
 800370a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003714:	b29a      	uxth	r2, r3
 8003716:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003718:	4413      	add	r3, r2
 800371a:	b29b      	uxth	r3, r3
 800371c:	847b      	strh	r3, [r7, #34]	; 0x22
                    act_y += proc->types.pointer.drag_sum.y;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003724:	b29a      	uxth	r2, r3
 8003726:	8c3b      	ldrh	r3, [r7, #32]
 8003728:	4413      	add	r3, r2
 800372a:	b29b      	uxth	r3, r3
 800372c:	843b      	strh	r3, [r7, #32]
 800372e:	e074      	b.n	800381a <indev_drag+0x2ce>
                }
            }
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
 8003730:	7efb      	ldrb	r3, [r7, #27]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d117      	bne.n	8003766 <indev_drag+0x21a>
                if(drag_just_started) {
 8003736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800373a:	2b00      	cmp	r3, #0
 800373c:	d06d      	beq.n	800381a <indev_drag+0x2ce>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003744:	2101      	movs	r1, #1
 8003746:	f361 0384 	bfi	r3, r1, #2, #3
 800374a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	825a      	strh	r2, [r3, #18]
                    act_x += proc->types.pointer.drag_sum.x;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800375a:	b29a      	uxth	r2, r3
 800375c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800375e:	4413      	add	r3, r2
 8003760:	b29b      	uxth	r3, r3
 8003762:	847b      	strh	r3, [r7, #34]	; 0x22
 8003764:	e059      	b.n	800381a <indev_drag+0x2ce>
                }
            }
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
 8003766:	7efb      	ldrb	r3, [r7, #27]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d117      	bne.n	800379c <indev_drag+0x250>
                if(drag_just_started) {
 800376c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003770:	2b00      	cmp	r3, #0
 8003772:	d052      	beq.n	800381a <indev_drag+0x2ce>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800377a:	2102      	movs	r1, #2
 800377c:	f361 0384 	bfi	r3, r1, #2, #3
 8003780:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	821a      	strh	r2, [r3, #16]
                    act_y += proc->types.pointer.drag_sum.y;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003790:	b29a      	uxth	r2, r3
 8003792:	8c3b      	ldrh	r3, [r7, #32]
 8003794:	4413      	add	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	843b      	strh	r3, [r7, #32]
 800379a:	e03e      	b.n	800381a <indev_drag+0x2ce>
                }
            }
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 800379c:	7efb      	ldrb	r3, [r7, #27]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d13b      	bne.n	800381a <indev_drag+0x2ce>
                if(drag_just_started) {
 80037a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d037      	beq.n	800381a <indev_drag+0x2ce>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80037b0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80037b4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bfb8      	it	lt
 80037c2:	425b      	neglt	r3, r3
 80037c4:	429a      	cmp	r2, r3
 80037c6:	dd15      	ble.n	80037f4 <indev_drag+0x2a8>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80037ce:	2101      	movs	r1, #1
 80037d0:	f361 0384 	bfi	r3, r1, #2, #3
 80037d4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	825a      	strh	r2, [r3, #18]
                        act_x += proc->types.pointer.drag_sum.x;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037e8:	4413      	add	r3, r2
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	847b      	strh	r3, [r7, #34]	; 0x22
 80037ee:	e014      	b.n	800381a <indev_drag+0x2ce>
 80037f0:	20017798 	.word	0x20017798
                    }
                    else {
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80037fa:	2102      	movs	r1, #2
 80037fc:	f361 0384 	bfi	r3, r1, #2, #3
 8003800:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	821a      	strh	r2, [r3, #16]
                        act_y += proc->types.pointer.drag_sum.y;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003810:	b29a      	uxth	r2, r3
 8003812:	8c3b      	ldrh	r3, [r7, #32]
 8003814:	4413      	add	r3, r2
 8003816:	b29b      	uxth	r3, r3
 8003818:	843b      	strh	r3, [r7, #32]
                    }
                }
            }

            /*Move the object*/
            if(allowed_dirs == LV_DRAG_DIR_HOR ||
 800381a:	7efb      	ldrb	r3, [r7, #27]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d014      	beq.n	800384a <indev_drag+0x2fe>
 8003820:	7efb      	ldrb	r3, [r7, #27]
 8003822:	2b03      	cmp	r3, #3
 8003824:	d011      	beq.n	800384a <indev_drag+0x2fe>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 8003826:	7efb      	ldrb	r3, [r7, #27]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d116      	bne.n	800385a <indev_drag+0x30e>
               (allowed_dirs == LV_DRAG_DIR_ONE &&
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003832:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003836:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003840:	2b00      	cmp	r3, #0
 8003842:	bfb8      	it	lt
 8003844:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 8003846:	429a      	cmp	r2, r3
 8003848:	dd07      	ble.n	800385a <indev_drag+0x30e>
                act_x += proc->types.pointer.vect.x;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003850:	b29a      	uxth	r2, r3
 8003852:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003854:	4413      	add	r3, r2
 8003856:	b29b      	uxth	r3, r3
 8003858:	847b      	strh	r3, [r7, #34]	; 0x22
            }
            if(allowed_dirs == LV_DRAG_DIR_VER ||
 800385a:	7efb      	ldrb	r3, [r7, #27]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d014      	beq.n	800388a <indev_drag+0x33e>
 8003860:	7efb      	ldrb	r3, [r7, #27]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d011      	beq.n	800388a <indev_drag+0x33e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 8003866:	7efb      	ldrb	r3, [r7, #27]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d116      	bne.n	800389a <indev_drag+0x34e>
               (allowed_dirs == LV_DRAG_DIR_ONE &&
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003872:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003876:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003880:	2b00      	cmp	r3, #0
 8003882:	bfb8      	it	lt
 8003884:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 8003886:	429a      	cmp	r2, r3
 8003888:	da07      	bge.n	800389a <indev_drag+0x34e>
                act_y += proc->types.pointer.vect.y;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003890:	b29a      	uxth	r2, r3
 8003892:	8c3b      	ldrh	r3, [r7, #32]
 8003894:	4413      	add	r3, r2
 8003896:	b29b      	uxth	r3, r3
 8003898:	843b      	strh	r3, [r7, #32]
            }

            uint16_t inv_buf_size =
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
 800389a:	4b3c      	ldr	r3, [pc, #240]	; (800398c <indev_drag+0x440>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
            uint16_t inv_buf_size =
 80038a0:	4618      	mov	r0, r3
 80038a2:	f016 fcb1 	bl	801a208 <lv_disp_get_inv_buf_size>
 80038a6:	4603      	mov	r3, r0
 80038a8:	823b      	strh	r3, [r7, #16]

            lv_obj_set_pos(drag_obj, act_x, act_y);
 80038aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80038ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80038b2:	4619      	mov	r1, r3
 80038b4:	69f8      	ldr	r0, [r7, #28]
 80038b6:	f001 ff5f 	bl	8005778 <lv_obj_set_pos>
            proc->types.pointer.drag_in_prog = 1;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

            /*If the object didn't moved then clear the invalidated areas*/
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80038ce:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d136      	bne.n	8003944 <indev_drag+0x3f8>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80038dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d12f      	bne.n	8003944 <indev_drag+0x3f8>
                /*In a special case if the object is moved on a page and
                 * the scrollable has fit == true and the object is dragged of the page then
                 * while its coordinate is not changing only the parent's size is reduced */
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 80038e4:	69f8      	ldr	r0, [r7, #28]
 80038e6:	f002 fe43 	bl	8006570 <lv_obj_get_parent>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f002 ff1b 	bl	8006728 <lv_obj_get_width>
 80038f2:	4603      	mov	r3, r0
 80038f4:	81fb      	strh	r3, [r7, #14]
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 80038f6:	69f8      	ldr	r0, [r7, #28]
 80038f8:	f002 fe3a 	bl	8006570 <lv_obj_get_parent>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4618      	mov	r0, r3
 8003900:	f002 ff34 	bl	800676c <lv_obj_get_height>
 8003904:	4603      	mov	r3, r0
 8003906:	81bb      	strh	r3, [r7, #12]
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 8003908:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800390c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003910:	429a      	cmp	r2, r3
 8003912:	d117      	bne.n	8003944 <indev_drag+0x3f8>
 8003914:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003918:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800391c:	429a      	cmp	r2, r3
 800391e:	d111      	bne.n	8003944 <indev_drag+0x3f8>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <indev_drag+0x440>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4618      	mov	r0, r3
 8003928:	f016 fc6e 	bl	801a208 <lv_disp_get_inv_buf_size>
 800392c:	4603      	mov	r3, r0
 800392e:	817b      	strh	r3, [r7, #10]
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <indev_drag+0x440>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68d8      	ldr	r0, [r3, #12]
 8003936:	897a      	ldrh	r2, [r7, #10]
 8003938:	8a3b      	ldrh	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	b29b      	uxth	r3, r3
 800393e:	4619      	mov	r1, r3
 8003940:	f016 fc72 	bl	801a228 <_lv_disp_pop_from_inv_buf>
                }
            }

            /*Set the drag in progress flag*/
            /*Send the drag begin signal on first move*/
            if(drag_just_started) {
 8003944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01c      	beq.n	8003986 <indev_drag+0x43a>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	4a0e      	ldr	r2, [pc, #56]	; (800398c <indev_drag+0x440>)
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	2111      	movs	r1, #17
 8003956:	69f8      	ldr	r0, [r7, #28]
 8003958:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa40 	bl	8003de0 <indev_reset_check>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10e      	bne.n	8003984 <indev_drag+0x438>

                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
 8003966:	2200      	movs	r2, #0
 8003968:	2108      	movs	r1, #8
 800396a:	69f8      	ldr	r0, [r7, #28]
 800396c:	f002 fc94 	bl	8006298 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fa35 	bl	8003de0 <indev_reset_check>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	e004      	b.n	8003986 <indev_drag+0x43a>
    if(drag_obj == NULL) return;
 800397c:	bf00      	nop
 800397e:	e002      	b.n	8003986 <indev_drag+0x43a>
    if(lv_obj_get_drag(drag_obj) == false) return;
 8003980:	bf00      	nop
 8003982:	e000      	b.n	8003986 <indev_drag+0x43a>
                if(indev_reset_check(proc)) return;
 8003984:	bf00      	nop
            }

        }
    }
}
 8003986:	3728      	adds	r7, #40	; 0x28
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20017798 	.word	0x20017798

08003990 <indev_drag_throw>:
/**
 * Handle throwing by drag if the drag is ended
 * @param indev pointer to an input device state
 */
static void indev_drag_throw(lv_indev_proc_t * proc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
    if(proc->types.pointer.drag_in_prog == 0) return;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8126 	beq.w	8003bf6 <indev_drag_throw+0x266>

    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f934 	bl	8003c1c <get_dragged_obj>
 80039b4:	6278      	str	r0, [r7, #36]	; 0x24

    if(drag_obj == NULL) return;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 811e 	beq.w	8003bfa <indev_drag_throw+0x26a>

    /*Return if the drag throw is not enabled*/
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 80039be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039c0:	f003 fb1c 	bl	8006ffc <lv_obj_get_drag_throw>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f083 0301 	eor.w	r3, r3, #1
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01a      	beq.n	8003a06 <indev_drag_throw+0x76>
        proc->types.pointer.drag_in_prog = 0;
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80039d6:	f36f 0341 	bfc	r3, #1, #1
 80039da:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	4a8c      	ldr	r2, [pc, #560]	; (8003c14 <indev_drag_throw+0x284>)
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	2113      	movs	r1, #19
 80039e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039ea:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f9f7 	bl	8003de0 <indev_reset_check>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f040 8102 	bne.w	8003bfe <indev_drag_throw+0x26e>

        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2109      	movs	r1, #9
 80039fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a00:	f002 fc4a 	bl	8006298 <lv_event_send>
        return;
 8003a04:	e102      	b.n	8003c0c <indev_drag_throw+0x27c>
    }

    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8003a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a08:	f003 fad6 	bl	8006fb8 <lv_obj_get_drag_dir>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /*Reduce the vectors*/
    proc->types.pointer.drag_throw_vect.x =
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b7e      	ldr	r3, [pc, #504]	; (8003c14 <indev_drag_throw+0x284>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	7d5b      	ldrb	r3, [r3, #21]
 8003a20:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003a24:	fb03 f302 	mul.w	r3, r3, r2
 8003a28:	4a7b      	ldr	r2, [pc, #492]	; (8003c18 <indev_drag_throw+0x288>)
 8003a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8003a2e:	1152      	asrs	r2, r2, #5
 8003a30:	17db      	asrs	r3, r3, #31
 8003a32:	1ad3      	subs	r3, r2, r3
    proc->types.pointer.drag_throw_vect.x =
 8003a34:	b21a      	sxth	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y =
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003a40:	461a      	mov	r2, r3
 8003a42:	4b74      	ldr	r3, [pc, #464]	; (8003c14 <indev_drag_throw+0x284>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	7d5b      	ldrb	r3, [r3, #21]
 8003a48:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003a4c:	fb03 f302 	mul.w	r3, r3, r2
 8003a50:	4a71      	ldr	r2, [pc, #452]	; (8003c18 <indev_drag_throw+0x288>)
 8003a52:	fb82 1203 	smull	r1, r2, r2, r3
 8003a56:	1152      	asrs	r2, r2, #5
 8003a58:	17db      	asrs	r3, r3, #31
 8003a5a:	1ad3      	subs	r3, r2, r3
    proc->types.pointer.drag_throw_vect.y =
 8003a5c:	b21a      	sxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	82da      	strh	r2, [r3, #22]

    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <indev_drag_throw+0xe8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80a0 	beq.w	8003bb8 <indev_drag_throw+0x228>
        /*Get the coordinates and modify them*/
        lv_area_t coords_ori;
        lv_obj_get_coords(drag_obj, &coords_ori);
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a80:	f002 fdc6 	bl	8006610 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8003a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a86:	f002 fde7 	bl	8006658 <lv_obj_get_x>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	843b      	strh	r3, [r7, #32]
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8003a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a9e:	f002 fe0f 	bl	80066c0 <lv_obj_get_y>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	83fb      	strh	r3, [r7, #30]

        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
 8003ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d108      	bne.n	8003ace <indev_drag_throw+0x13e>
 8003abc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003ac0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ac8:	f001 fe56 	bl	8005778 <lv_obj_set_pos>
 8003acc:	e02b      	b.n	8003b26 <indev_drag_throw+0x196>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
 8003ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d106      	bne.n	8003ae4 <indev_drag_throw+0x154>
 8003ad6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003ada:	4619      	mov	r1, r3
 8003adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ade:	f001 fef1 	bl	80058c4 <lv_obj_set_x>
 8003ae2:	e020      	b.n	8003b26 <indev_drag_throw+0x196>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
 8003ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d106      	bne.n	8003afa <indev_drag_throw+0x16a>
 8003aec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003af0:	4619      	mov	r1, r3
 8003af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003af4:	f001 ff10 	bl	8005918 <lv_obj_set_y>
 8003af8:	e015      	b.n	8003b26 <indev_drag_throw+0x196>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8003afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d111      	bne.n	8003b26 <indev_drag_throw+0x196>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d006      	beq.n	8003b1a <indev_drag_throw+0x18a>
 8003b0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003b10:	4619      	mov	r1, r3
 8003b12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b14:	f001 fed6 	bl	80058c4 <lv_obj_set_x>
 8003b18:	e005      	b.n	8003b26 <indev_drag_throw+0x196>
            else lv_obj_set_y(drag_obj, act_y);
 8003b1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b22:	f001 fef9 	bl	8005918 <lv_obj_set_y>
        }
        lv_area_t coord_new;
        lv_obj_get_coords(drag_obj, &coord_new);
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b2e:	f002 fd6f 	bl	8006610 <lv_obj_get_coords>

        /*If non of the coordinates are changed then do not continue throwing*/
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8003b32:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003b36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d004      	beq.n	8003b48 <indev_drag_throw+0x1b8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d15c      	bne.n	8003c02 <indev_drag_throw+0x272>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8003b48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003b4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d004      	beq.n	8003b5e <indev_drag_throw+0x1ce>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d151      	bne.n	8003c02 <indev_drag_throw+0x272>
            proc->types.pointer.drag_in_prog      = 0;
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003b64:	f36f 0341 	bfc	r3, #1, #1
 8003b68:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	819a      	strh	r2, [r3, #12]
            proc->types.pointer.vect.y            = 0;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	81da      	strh	r2, [r3, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	829a      	strh	r2, [r3, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	82da      	strh	r2, [r3, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <indev_drag_throw+0x284>)
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	2113      	movs	r1, #19
 8003b8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b90:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f924 	bl	8003de0 <indev_reset_check>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d133      	bne.n	8003c06 <indev_drag_throw+0x276>

            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2109      	movs	r1, #9
 8003ba2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ba4:	f002 fb78 	bl	8006298 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f919 	bl	8003de0 <indev_reset_check>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d026      	beq.n	8003c02 <indev_drag_throw+0x272>
 8003bb4:	bf00      	nop
 8003bb6:	e029      	b.n	8003c0c <indev_drag_throw+0x27c>
        }
    }
    /*If the types.pointer.vectors become 0 -> types.pointer.drag_in_prog = 0 and send a drag end
       signal*/
    else {
        proc->types.pointer.drag_in_prog = 0;
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003bbe:	f36f 0341 	bfc	r3, #1, #1
 8003bc2:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <indev_drag_throw+0x284>)
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	2113      	movs	r1, #19
 8003bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bd2:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f903 	bl	8003de0 <indev_reset_check>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d114      	bne.n	8003c0a <indev_drag_throw+0x27a>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8003be0:	2200      	movs	r2, #0
 8003be2:	2109      	movs	r1, #9
 8003be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003be6:	f002 fb57 	bl	8006298 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8f8 	bl	8003de0 <indev_reset_check>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	e00a      	b.n	8003c0c <indev_drag_throw+0x27c>
    if(proc->types.pointer.drag_in_prog == 0) return;
 8003bf6:	bf00      	nop
 8003bf8:	e008      	b.n	8003c0c <indev_drag_throw+0x27c>
    if(drag_obj == NULL) return;
 8003bfa:	bf00      	nop
 8003bfc:	e006      	b.n	8003c0c <indev_drag_throw+0x27c>
        if(indev_reset_check(proc)) return;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <indev_drag_throw+0x27c>
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <indev_drag_throw+0x27c>
            if(indev_reset_check(proc)) return;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <indev_drag_throw+0x27c>
        if(indev_reset_check(proc)) return;
 8003c0a:	bf00      	nop
    }
}
 8003c0c:	3728      	adds	r7, #40	; 0x28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20017798 	.word	0x20017798
 8003c18:	51eb851f 	.word	0x51eb851f

08003c1c <get_dragged_obj>:
 * Get the really dragged object by taking `drag_parent` into account.
 * @param obj the start object
 * @return the object to really drag
 */
static lv_obj_t * get_dragged_obj(lv_obj_t * obj)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <get_dragged_obj+0x12>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e010      	b.n	8003c50 <get_dragged_obj+0x34>
    lv_obj_t * drag_obj = obj;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	60fb      	str	r3, [r7, #12]
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8003c32:	e003      	b.n	8003c3c <get_dragged_obj+0x20>
        drag_obj = lv_obj_get_parent(drag_obj);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f002 fc9b 	bl	8006570 <lv_obj_get_parent>
 8003c3a:	60f8      	str	r0, [r7, #12]
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f003 fa05 	bl	800704c <lv_obj_get_drag_parent>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <get_dragged_obj+0x32>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f2      	bne.n	8003c34 <get_dragged_obj+0x18>
    }

    return drag_obj;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <indev_gesture>:
/**
* Handle the gesture of indev_proc_p->types.pointer.act_obj
* @param indev pointer to a input device state
*/
static void indev_gesture(lv_indev_proc_t * proc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

    if(proc->types.pointer.gesture_sent) return;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f040 80ac 	bne.w	8003dca <indev_gesture+0x172>

    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	60fb      	str	r3, [r7, #12]

    /*If gesture parent is active check recursively the gesture attribute*/
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 8003c78:	e003      	b.n	8003c82 <indev_gesture+0x2a>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f002 fc78 	bl	8006570 <lv_obj_get_parent>
 8003c80:	60f8      	str	r0, [r7, #12]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <indev_gesture+0x3c>
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f003 f9f4 	bl	8007076 <lv_obj_get_gesture_parent>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f2      	bne.n	8003c7a <indev_gesture+0x22>
    }

    if(gesture_obj == NULL) return;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8099 	beq.w	8003dce <indev_gesture+0x176>

    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bfb8      	it	lt
 8003ca6:	425b      	neglt	r3, r3
 8003ca8:	4a4c      	ldr	r2, [pc, #304]	; (8003ddc <indev_gesture+0x184>)
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	7d92      	ldrb	r2, [r2, #22]
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	da10      	bge.n	8003cd4 <indev_gesture+0x7c>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bfb8      	it	lt
 8003cbc:	425b      	neglt	r3, r3
 8003cbe:	4a47      	ldr	r2, [pc, #284]	; (8003ddc <indev_gesture+0x184>)
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	7d92      	ldrb	r2, [r2, #22]
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	da05      	bge.n	8003cd4 <indev_gesture+0x7c>
        proc->types.pointer.gesture_sum.x = 0;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	84da      	strh	r2, [r3, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /*Count the movement by gesture*/
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	b21a      	sxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	84da      	strh	r2, [r3, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	4413      	add	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b21a      	sxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28

    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	425b      	neglt	r3, r3
 8003d14:	4a31      	ldr	r2, [pc, #196]	; (8003ddc <indev_gesture+0x184>)
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	7dd2      	ldrb	r2, [r2, #23]
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	dc0a      	bgt.n	8003d34 <indev_gesture+0xdc>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bfb8      	it	lt
 8003d28:	425b      	neglt	r3, r3
 8003d2a:	4a2c      	ldr	r2, [pc, #176]	; (8003ddc <indev_gesture+0x184>)
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	7dd2      	ldrb	r2, [r2, #23]
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 8003d30:	4293      	cmp	r3, r2
 8003d32:	dd4f      	ble.n	8003dd4 <indev_gesture+0x17c>

        proc->types.pointer.gesture_sent = 1;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003d3a:	f043 0320 	orr.w	r3, r3, #32
 8003d3e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003d48:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003d4c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bfb8      	it	lt
 8003d5a:	425b      	neglt	r3, r3
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	dd0e      	ble.n	8003d7e <indev_gesture+0x126>
            if(proc->types.pointer.gesture_sum.x > 0)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	dd04      	ble.n	8003d74 <indev_gesture+0x11c>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d72:	e012      	b.n	8003d9a <indev_gesture+0x142>
            else
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d7c:	e00d      	b.n	8003d9a <indev_gesture+0x142>
        }
        else {
            if(proc->types.pointer.gesture_sum.y > 0)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	dd04      	ble.n	8003d92 <indev_gesture+0x13a>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d90:	e003      	b.n	8003d9a <indev_gesture+0x142>
            else
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	4a0f      	ldr	r2, [pc, #60]	; (8003ddc <indev_gesture+0x184>)
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	2114      	movs	r1, #20
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f819 	bl	8003de0 <indev_reset_check>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10e      	bne.n	8003dd2 <indev_gesture+0x17a>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
 8003db4:	2200      	movs	r2, #0
 8003db6:	210b      	movs	r1, #11
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f002 fa6d 	bl	8006298 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f80e 	bl	8003de0 <indev_reset_check>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	e004      	b.n	8003dd4 <indev_gesture+0x17c>
    if(proc->types.pointer.gesture_sent) return;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <indev_gesture+0x17c>
    if(gesture_obj == NULL) return;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <indev_gesture+0x17c>
        if(indev_reset_check(proc)) return;
 8003dd2:	bf00      	nop
    }
}
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20017798 	.word	0x20017798

08003de0 <indev_reset_check>:
 * Checks if the reset_query flag has been set. If so, perform necessary global indev cleanup actions
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
    if(proc->reset_query) {
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <indev_reset_check+0x1e>
        indev_obj_act = NULL;
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <indev_reset_check+0x44>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	2001779c 	.word	0x2001779c

08003e28 <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	613b      	str	r3, [r7, #16]

    while(len) {
 8003e3c:	e00c      	b.n	8003e58 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	701a      	strb	r2, [r3, #0]
        d8++;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
        s8++;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	613b      	str	r3, [r7, #16]
        len--;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	607b      	str	r3, [r7, #4]
    while(len) {
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1ef      	bne.n	8003e3e <_lv_memcpy_small+0x16>
    }

    return dst;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8003e76:	2208      	movs	r2, #8
 8003e78:	6839      	ldr	r1, [r7, #0]
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ffd4 	bl	8003e28 <_lv_memcpy_small>
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	b21b      	sxth	r3, r3
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	b21b      	sxth	r3, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8003ef2:	7bbb      	ldrb	r3, [r7, #14]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	fb03 f202 	mul.w	r2, r3, r2
 8003efc:	7abb      	ldrb	r3, [r7, #10]
 8003efe:	4619      	mov	r1, r3
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003f06:	fb03 f301 	mul.w	r3, r3, r1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4613      	mov	r3, r2
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	4413      	add	r3, r2
 8003f14:	01db      	lsls	r3, r3, #7
 8003f16:	4413      	add	r3, r2
 8003f18:	0ddb      	lsrs	r3, r3, #23
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8003f1e:	7b7b      	ldrb	r3, [r7, #13]
 8003f20:	461a      	mov	r2, r3
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	fb03 f202 	mul.w	r2, r3, r2
 8003f28:	7a7b      	ldrb	r3, [r7, #9]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003f32:	fb03 f301 	mul.w	r3, r3, r1
 8003f36:	4413      	add	r3, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	4413      	add	r3, r2
 8003f40:	01db      	lsls	r3, r3, #7
 8003f42:	4413      	add	r3, r2
 8003f44:	0ddb      	lsrs	r3, r3, #23
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8003f4a:	7b3b      	ldrb	r3, [r7, #12]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	fb03 f202 	mul.w	r2, r3, r2
 8003f54:	7a3b      	ldrb	r3, [r7, #8]
 8003f56:	4619      	mov	r1, r3
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003f5e:	fb03 f301 	mul.w	r3, r3, r1
 8003f62:	4413      	add	r3, r2
 8003f64:	461a      	mov	r2, r3
 8003f66:	4613      	mov	r3, r2
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	4413      	add	r3, r2
 8003f6c:	01db      	lsls	r3, r3, #7
 8003f6e:	4413      	add	r3, r2
 8003f70:	0ddb      	lsrs	r3, r3, #23
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 8003f76:	23ff      	movs	r3, #255	; 0xff
 8003f78:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8003f7a:	697b      	ldr	r3, [r7, #20]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8003f88:	b490      	push	{r4, r7}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	4622      	mov	r2, r4
 8003f96:	71fa      	strb	r2, [r7, #7]
 8003f98:	4602      	mov	r2, r0
 8003f9a:	71ba      	strb	r2, [r7, #6]
 8003f9c:	460a      	mov	r2, r1
 8003f9e:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 8003fa0:	797a      	ldrb	r2, [r7, #5]
 8003fa2:	f362 0307 	bfi	r3, r2, #0, #8
 8003fa6:	79ba      	ldrb	r2, [r7, #6]
 8003fa8:	f362 230f 	bfi	r3, r2, #8, #8
 8003fac:	79fa      	ldrb	r2, [r7, #7]
 8003fae:	f362 4317 	bfi	r3, r2, #16, #8
 8003fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc90      	pop	{r4, r7}
 8003fbe:	4770      	bx	lr

08003fc0 <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	b2d8      	uxtb	r0, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f7ff ffd5 	bl	8003f88 <lv_color_make>
 8003fde:	4603      	mov	r3, r0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
    a->var     = var;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	601a      	str	r2, [r3, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <lv_anim_set_exec_cb>:
 * @param exec_cb a function to execute during animation
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	605a      	str	r2, [r3, #4]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param duration duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
    a->time     = duration;
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <lv_anim_set_delay>:
 * Set a delay before starting the animation
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay before the animation in milliseconds
 */
static inline void lv_anim_set_delay(lv_anim_t * a, uint32_t delay)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	425a      	negs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <lv_anim_set_values>:
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start the start value
 * @param end the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, lv_anim_value_t start, lv_anim_value_t end)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	460b      	mov	r3, r1
 8004064:	807b      	strh	r3, [r7, #2]
 8004066:	4613      	mov	r3, r2
 8004068:	803b      	strh	r3, [r7, #0]
    a->start = start;
 800406a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	619a      	str	r2, [r3, #24]
    a->current = start;
 8004072:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	61da      	str	r2, [r3, #28]
    a->end   = end;
 800407a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <lv_anim_set_path>:
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function the get the current value of the animation.
 *                The built in functions starts with `lv_anim_path_...`
 */
static inline void lv_anim_set_path(lv_anim_t * a, const lv_anim_path_t * path)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(&a->path, path, sizeof(lv_anim_path_t));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3310      	adds	r3, #16
 800409c:	2208      	movs	r2, #8
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fec1 	bl	8003e28 <_lv_memcpy_small>
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <lv_anim_set_start_cb>:
 * Set a function call when the animation really starts (considering `delay`)
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	609a      	str	r2, [r3, #8]
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	60da      	str	r2, [r3, #12]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <lv_style_list_get_style>:
 * @param list pointer to a style list.
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	460b      	mov	r3, r1
 80040f0:	70fb      	strb	r3, [r7, #3]
    if(list->has_trans && list->skip_trans) id++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	791b      	ldrb	r3, [r3, #4]
 80040f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <lv_style_list_get_style+0x2e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	795b      	ldrb	r3, [r3, #5]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <lv_style_list_get_style+0x2e>
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	3301      	adds	r3, #1
 8004112:	70fb      	strb	r3, [r7, #3]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	791b      	ldrb	r3, [r3, #4]
 8004118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <lv_style_list_get_style+0x4e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	791b      	ldrb	r3, [r3, #4]
 8004126:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	4293      	cmp	r3, r2
 8004132:	d301      	bcc.n	8004138 <lv_style_list_get_style+0x52>
 8004134:	2300      	movs	r3, #0
 8004136:	e005      	b.n	8004144 <lv_style_list_get_style+0x5e>
    return list->style_list[id];
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <lv_obj_get_style_radius>:
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2201      	movs	r2, #1
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f002 fb47 	bl	80067f6 <_lv_obj_get_style_int>
 8004168:	4603      	mov	r3, r0
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <lv_obj_get_style_clip_corner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	70fb      	strb	r3, [r7, #3]
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	2202      	movs	r2, #2
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f002 fb36 	bl	80067f6 <_lv_obj_get_style_int>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <lv_obj_get_style_size>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	70fb      	strb	r3, [r7, #3]
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	2203      	movs	r2, #3
 80041ae:	4619      	mov	r1, r3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f002 fb20 	bl	80067f6 <_lv_obj_get_style_int>
 80041b6:	4603      	mov	r3, r0
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <lv_obj_get_style_transform_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	2204      	movs	r2, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f002 fb0f 	bl	80067f6 <_lv_obj_get_style_int>
 80041d8:	4603      	mov	r3, r0
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <lv_obj_get_style_transform_height>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	460b      	mov	r3, r1
 80041ec:	70fb      	strb	r3, [r7, #3]
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	2205      	movs	r2, #5
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f002 fafe 	bl	80067f6 <_lv_obj_get_style_int>
 80041fa:	4603      	mov	r3, r0
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <lv_obj_get_style_transform_angle>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	2206      	movs	r2, #6
 8004214:	4619      	mov	r1, r3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f002 faed 	bl	80067f6 <_lv_obj_get_style_int>
 800421c:	4603      	mov	r3, r0
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <lv_obj_get_style_transform_zoom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	70fb      	strb	r3, [r7, #3]
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	2207      	movs	r2, #7
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f002 fadc 	bl	80067f6 <_lv_obj_get_style_int>
 800423e:	4603      	mov	r3, r0
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <lv_obj_get_style_opa_scale>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	f248 020c 	movw	r2, #32780	; 0x800c
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f002 fcbe 	bl	8006bde <_lv_obj_get_style_opa>
 8004262:	4603      	mov	r3, r0
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <lv_obj_get_style_pad_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	2210      	movs	r2, #16
 800427c:	4619      	mov	r1, r3
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f002 fab9 	bl	80067f6 <_lv_obj_get_style_int>
 8004284:	4603      	mov	r3, r0
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <lv_obj_get_style_pad_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	70fb      	strb	r3, [r7, #3]
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	2211      	movs	r2, #17
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f002 faa8 	bl	80067f6 <_lv_obj_get_style_int>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <lv_obj_get_style_pad_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	70fb      	strb	r3, [r7, #3]
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	2212      	movs	r2, #18
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f002 fa97 	bl	80067f6 <_lv_obj_get_style_int>
 80042c8:	4603      	mov	r3, r0
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <lv_obj_get_style_pad_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	70fb      	strb	r3, [r7, #3]
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	2213      	movs	r2, #19
 80042e2:	4619      	mov	r1, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f002 fa86 	bl	80067f6 <_lv_obj_get_style_int>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <lv_obj_get_style_pad_inner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	2214      	movs	r2, #20
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f002 fa75 	bl	80067f6 <_lv_obj_get_style_int>
 800430c:	4603      	mov	r3, r0
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <lv_obj_get_style_margin_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	460b      	mov	r3, r1
 8004320:	70fb      	strb	r3, [r7, #3]
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	2215      	movs	r2, #21
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f002 fa64 	bl	80067f6 <_lv_obj_get_style_int>
 800432e:	4603      	mov	r3, r0
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <lv_obj_get_style_margin_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	2216      	movs	r2, #22
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f002 fa53 	bl	80067f6 <_lv_obj_get_style_int>
 8004350:	4603      	mov	r3, r0
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <lv_obj_get_style_margin_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	70fb      	strb	r3, [r7, #3]
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	2217      	movs	r2, #23
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f002 fa42 	bl	80067f6 <_lv_obj_get_style_int>
 8004372:	4603      	mov	r3, r0
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <lv_obj_get_style_margin_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	2218      	movs	r2, #24
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f002 fa31 	bl	80067f6 <_lv_obj_get_style_int>
 8004394:	4603      	mov	r3, r0
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <lv_obj_get_style_bg_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	70fb      	strb	r3, [r7, #3]
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	2220      	movs	r2, #32
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f002 fa20 	bl	80067f6 <_lv_obj_get_style_int>
 80043b6:	4603      	mov	r3, r0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <lv_obj_get_style_bg_main_stop>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	70fb      	strb	r3, [r7, #3]
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	2221      	movs	r2, #33	; 0x21
 80043d2:	4619      	mov	r1, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f002 fa0e 	bl	80067f6 <_lv_obj_get_style_int>
 80043da:	4603      	mov	r3, r0
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <lv_obj_get_style_bg_grad_stop>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	70fb      	strb	r3, [r7, #3]
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	2222      	movs	r2, #34	; 0x22
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f002 f9fd 	bl	80067f6 <_lv_obj_get_style_int>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <lv_obj_get_style_bg_grad_dir>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	2223      	movs	r2, #35	; 0x23
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f002 f9ec 	bl	80067f6 <_lv_obj_get_style_int>
 800441e:	4603      	mov	r3, r0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <lv_obj_get_style_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	70fb      	strb	r3, [r7, #3]
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	2229      	movs	r2, #41	; 0x29
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f002 fb63 	bl	8006b08 <_lv_obj_get_style_color>
 8004442:	4603      	mov	r3, r0
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <lv_obj_get_style_bg_grad_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	222a      	movs	r2, #42	; 0x2a
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f002 fb52 	bl	8006b08 <_lv_obj_get_style_color>
 8004464:	4603      	mov	r3, r0
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <lv_obj_get_style_bg_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	70fb      	strb	r3, [r7, #3]
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	222c      	movs	r2, #44	; 0x2c
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f002 fbac 	bl	8006bde <_lv_obj_get_style_opa>
 8004486:	4603      	mov	r3, r0
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <lv_obj_get_style_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	2230      	movs	r2, #48	; 0x30
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f002 f9a7 	bl	80067f6 <_lv_obj_get_style_int>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <lv_obj_get_style_border_side>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	460b      	mov	r3, r1
 80044bc:	70fb      	strb	r3, [r7, #3]
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	2231      	movs	r2, #49	; 0x31
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f002 f996 	bl	80067f6 <_lv_obj_get_style_int>
 80044ca:	4603      	mov	r3, r0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <lv_obj_get_style_border_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	70fb      	strb	r3, [r7, #3]
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	2232      	movs	r2, #50	; 0x32
 80044e6:	4619      	mov	r1, r3
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f002 f984 	bl	80067f6 <_lv_obj_get_style_int>
 80044ee:	4603      	mov	r3, r0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <lv_obj_get_style_border_post>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	70fb      	strb	r3, [r7, #3]
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	2233      	movs	r2, #51	; 0x33
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f002 f972 	bl	80067f6 <_lv_obj_get_style_int>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <lv_obj_get_style_border_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	70fb      	strb	r3, [r7, #3]
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	2239      	movs	r2, #57	; 0x39
 8004536:	4619      	mov	r1, r3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f002 fae5 	bl	8006b08 <_lv_obj_get_style_color>
 800453e:	4603      	mov	r3, r0
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <lv_obj_get_style_border_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	70fb      	strb	r3, [r7, #3]
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	223c      	movs	r2, #60	; 0x3c
 8004558:	4619      	mov	r1, r3
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f002 fb3f 	bl	8006bde <_lv_obj_get_style_opa>
 8004560:	4603      	mov	r3, r0
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <lv_obj_get_style_outline_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	70fb      	strb	r3, [r7, #3]
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	2240      	movs	r2, #64	; 0x40
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f002 f93a 	bl	80067f6 <_lv_obj_get_style_int>
 8004582:	4603      	mov	r3, r0
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <lv_obj_get_style_outline_pad>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	2241      	movs	r2, #65	; 0x41
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f002 f929 	bl	80067f6 <_lv_obj_get_style_int>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <lv_obj_get_style_outline_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	2242      	movs	r2, #66	; 0x42
 80045be:	4619      	mov	r1, r3
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f002 f918 	bl	80067f6 <_lv_obj_get_style_int>
 80045c6:	4603      	mov	r3, r0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <lv_obj_get_style_outline_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	70fb      	strb	r3, [r7, #3]
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	2249      	movs	r2, #73	; 0x49
 80045e2:	4619      	mov	r1, r3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f002 fa8f 	bl	8006b08 <_lv_obj_get_style_color>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <lv_obj_get_style_outline_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	224c      	movs	r2, #76	; 0x4c
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f002 fae9 	bl	8006bde <_lv_obj_get_style_opa>
 800460c:	4603      	mov	r3, r0
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <lv_obj_get_style_shadow_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	70fb      	strb	r3, [r7, #3]
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	2250      	movs	r2, #80	; 0x50
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f002 f8e4 	bl	80067f6 <_lv_obj_get_style_int>
 800462e:	4603      	mov	r3, r0
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <lv_obj_get_style_shadow_ofs_x>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	2251      	movs	r2, #81	; 0x51
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f002 f8d3 	bl	80067f6 <_lv_obj_get_style_int>
 8004650:	4603      	mov	r3, r0
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <lv_obj_get_style_shadow_ofs_y>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	70fb      	strb	r3, [r7, #3]
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	2252      	movs	r2, #82	; 0x52
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f002 f8c2 	bl	80067f6 <_lv_obj_get_style_int>
 8004672:	4603      	mov	r3, r0
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <lv_obj_get_style_shadow_spread>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	2253      	movs	r2, #83	; 0x53
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f002 f8b1 	bl	80067f6 <_lv_obj_get_style_int>
 8004694:	4603      	mov	r3, r0
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <lv_obj_get_style_shadow_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	70fb      	strb	r3, [r7, #3]
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	2254      	movs	r2, #84	; 0x54
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f002 f8a0 	bl	80067f6 <_lv_obj_get_style_int>
 80046b6:	4603      	mov	r3, r0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <lv_obj_get_style_shadow_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	70fb      	strb	r3, [r7, #3]
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	2259      	movs	r2, #89	; 0x59
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f002 fa17 	bl	8006b08 <_lv_obj_get_style_color>
 80046da:	4603      	mov	r3, r0
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <lv_obj_get_style_shadow_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	225c      	movs	r2, #92	; 0x5c
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f002 fa71 	bl	8006bde <_lv_obj_get_style_opa>
 80046fc:	4603      	mov	r3, r0
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <lv_obj_get_style_pattern_repeat>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	70fb      	strb	r3, [r7, #3]
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	2261      	movs	r2, #97	; 0x61
 8004716:	4619      	mov	r1, r3
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f002 f86c 	bl	80067f6 <_lv_obj_get_style_int>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <lv_obj_get_style_pattern_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	70fb      	strb	r3, [r7, #3]
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	2260      	movs	r2, #96	; 0x60
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f002 f856 	bl	80067f6 <_lv_obj_get_style_int>
 800474a:	4603      	mov	r3, r0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <lv_obj_get_style_pattern_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	70fb      	strb	r3, [r7, #3]
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	2269      	movs	r2, #105	; 0x69
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f002 f9cd 	bl	8006b08 <_lv_obj_get_style_color>
 800476e:	4603      	mov	r3, r0
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <lv_obj_get_style_pattern_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	226c      	movs	r2, #108	; 0x6c
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f002 fa27 	bl	8006bde <_lv_obj_get_style_opa>
 8004790:	4603      	mov	r3, r0
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <lv_obj_get_style_pattern_recolor_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	460b      	mov	r3, r1
 80047a4:	70fb      	strb	r3, [r7, #3]
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	226d      	movs	r2, #109	; 0x6d
 80047aa:	4619      	mov	r1, r3
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f002 fa16 	bl	8006bde <_lv_obj_get_style_opa>
 80047b2:	4603      	mov	r3, r0
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <lv_obj_get_style_pattern_image>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	70fb      	strb	r3, [r7, #3]
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	226e      	movs	r2, #110	; 0x6e
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f002 fac2 	bl	8006d58 <_lv_obj_get_style_ptr>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <lv_obj_get_style_value_letter_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	70fb      	strb	r3, [r7, #3]
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	2270      	movs	r2, #112	; 0x70
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f002 f800 	bl	80067f6 <_lv_obj_get_style_int>
 80047f6:	4603      	mov	r3, r0
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <lv_obj_get_style_value_line_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	2271      	movs	r2, #113	; 0x71
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f001 ffef 	bl	80067f6 <_lv_obj_get_style_int>
 8004818:	4603      	mov	r3, r0
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <lv_obj_get_style_value_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	70fb      	strb	r3, [r7, #3]
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	2272      	movs	r2, #114	; 0x72
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f001 ffde 	bl	80067f6 <_lv_obj_get_style_int>
 800483a:	4603      	mov	r3, r0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <lv_obj_get_style_value_ofs_x>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	70fb      	strb	r3, [r7, #3]
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	2273      	movs	r2, #115	; 0x73
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f001 ffcc 	bl	80067f6 <_lv_obj_get_style_int>
 800485e:	4603      	mov	r3, r0
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <lv_obj_get_style_value_ofs_y>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2274      	movs	r2, #116	; 0x74
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f001 ffbb 	bl	80067f6 <_lv_obj_get_style_int>
 8004880:	4603      	mov	r3, r0
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <lv_obj_get_style_value_align>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	70fb      	strb	r3, [r7, #3]
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	2275      	movs	r2, #117	; 0x75
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f001 ffaa 	bl	80067f6 <_lv_obj_get_style_int>
 80048a2:	4603      	mov	r3, r0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <lv_obj_get_style_value_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	460b      	mov	r3, r1
 80048b8:	70fb      	strb	r3, [r7, #3]
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	2279      	movs	r2, #121	; 0x79
 80048be:	4619      	mov	r1, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f002 f921 	bl	8006b08 <_lv_obj_get_style_color>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <lv_obj_get_style_value_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	70fb      	strb	r3, [r7, #3]
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	227c      	movs	r2, #124	; 0x7c
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f002 f97b 	bl	8006bde <_lv_obj_get_style_opa>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <lv_obj_get_style_value_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	70fb      	strb	r3, [r7, #3]
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	227e      	movs	r2, #126	; 0x7e
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f002 fa27 	bl	8006d58 <_lv_obj_get_style_ptr>
 800490a:	4603      	mov	r3, r0
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <lv_obj_get_style_value_str>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	227f      	movs	r2, #127	; 0x7f
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f002 fa16 	bl	8006d58 <_lv_obj_get_style_ptr>
 800492c:	4603      	mov	r3, r0
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <lv_obj_get_style_text_letter_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	460b      	mov	r3, r1
 8004940:	70fb      	strb	r3, [r7, #3]
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	f248 0280 	movw	r2, #32896	; 0x8080
 8004948:	4619      	mov	r1, r3
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f001 ff53 	bl	80067f6 <_lv_obj_get_style_int>
 8004950:	4603      	mov	r3, r0
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <lv_obj_get_style_text_line_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	70fb      	strb	r3, [r7, #3]
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	f248 0281 	movw	r2, #32897	; 0x8081
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 ff41 	bl	80067f6 <_lv_obj_get_style_int>
 8004974:	4603      	mov	r3, r0
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <lv_obj_get_style_text_decor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	70fb      	strb	r3, [r7, #3]
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	f248 0282 	movw	r2, #32898	; 0x8082
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f001 ff2f 	bl	80067f6 <_lv_obj_get_style_int>
 8004998:	4603      	mov	r3, r0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <lv_obj_get_style_text_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f248 0283 	movw	r2, #32899	; 0x8083
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 ff1c 	bl	80067f6 <_lv_obj_get_style_int>
 80049be:	4603      	mov	r3, r0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <lv_obj_get_style_text_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	460b      	mov	r3, r1
 80049d4:	70fb      	strb	r3, [r7, #3]
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	f248 0289 	movw	r2, #32905	; 0x8089
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f002 f892 	bl	8006b08 <_lv_obj_get_style_color>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <lv_obj_get_style_text_sel_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	460b      	mov	r3, r1
 80049f8:	70fb      	strb	r3, [r7, #3]
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f248 028a 	movw	r2, #32906	; 0x808a
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f002 f880 	bl	8006b08 <_lv_obj_get_style_color>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <lv_obj_get_style_text_sel_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	70fb      	strb	r3, [r7, #3]
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	f248 028b 	movw	r2, #32907	; 0x808b
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f002 f86e 	bl	8006b08 <_lv_obj_get_style_color>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <lv_obj_get_style_text_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	70fb      	strb	r3, [r7, #3]
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	f248 028c 	movw	r2, #32908	; 0x808c
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f002 f8c7 	bl	8006bde <_lv_obj_get_style_opa>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <lv_obj_get_style_text_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	70fb      	strb	r3, [r7, #3]
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	f248 028e 	movw	r2, #32910	; 0x808e
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f002 f972 	bl	8006d58 <_lv_obj_get_style_ptr>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <lv_obj_get_style_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	460b      	mov	r3, r1
 8004a88:	70fb      	strb	r3, [r7, #3]
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	2290      	movs	r2, #144	; 0x90
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f001 feb0 	bl	80067f6 <_lv_obj_get_style_int>
 8004a96:	4603      	mov	r3, r0
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <lv_obj_get_style_line_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	2291      	movs	r2, #145	; 0x91
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f001 fe9f 	bl	80067f6 <_lv_obj_get_style_int>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <lv_obj_get_style_line_dash_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	2292      	movs	r2, #146	; 0x92
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 fe8d 	bl	80067f6 <_lv_obj_get_style_int>
 8004adc:	4603      	mov	r3, r0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <lv_obj_get_style_line_dash_gap>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	70fb      	strb	r3, [r7, #3]
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	2293      	movs	r2, #147	; 0x93
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f001 fe7c 	bl	80067f6 <_lv_obj_get_style_int>
 8004afe:	4603      	mov	r3, r0
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <lv_obj_get_style_line_rounded>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	2294      	movs	r2, #148	; 0x94
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f001 fe6b 	bl	80067f6 <_lv_obj_get_style_int>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf14      	ite	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	2300      	moveq	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <lv_obj_get_style_line_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	2299      	movs	r2, #153	; 0x99
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f001 ffde 	bl	8006b08 <_lv_obj_get_style_color>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <lv_obj_get_style_line_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	70fb      	strb	r3, [r7, #3]
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	229c      	movs	r2, #156	; 0x9c
 8004b66:	4619      	mov	r1, r3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f002 f838 	bl	8006bde <_lv_obj_get_style_opa>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <lv_obj_get_style_image_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f001 fe32 	bl	80067f6 <_lv_obj_get_style_int>
 8004b92:	4603      	mov	r3, r0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <lv_obj_get_style_image_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	70fb      	strb	r3, [r7, #3]
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	f248 02a9 	movw	r2, #32937	; 0x80a9
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f001 ffa8 	bl	8006b08 <_lv_obj_get_style_color>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <lv_obj_get_style_image_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	70fb      	strb	r3, [r7, #3]
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	f248 02ac 	movw	r2, #32940	; 0x80ac
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f002 f801 	bl	8006bde <_lv_obj_get_style_opa>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <lv_obj_get_style_image_recolor_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	70fb      	strb	r3, [r7, #3]
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 ffef 	bl	8006bde <_lv_obj_get_style_opa>
 8004c00:	4603      	mov	r3, r0
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <lv_obj_get_style_transition_time>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	70fb      	strb	r3, [r7, #3]
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	22b0      	movs	r2, #176	; 0xb0
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 fdea 	bl	80067f6 <_lv_obj_get_style_int>
 8004c22:	4603      	mov	r3, r0
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <lv_obj_get_style_transition_delay>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	22b1      	movs	r2, #177	; 0xb1
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 fdd9 	bl	80067f6 <_lv_obj_get_style_int>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <lv_obj_get_style_transition_prop_1>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	70fb      	strb	r3, [r7, #3]
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	22b2      	movs	r2, #178	; 0xb2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 fdc8 	bl	80067f6 <_lv_obj_get_style_int>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <lv_obj_get_style_transition_prop_2>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	22b3      	movs	r2, #179	; 0xb3
 8004c80:	4619      	mov	r1, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 fdb7 	bl	80067f6 <_lv_obj_get_style_int>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <lv_obj_get_style_transition_prop_3>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	70fb      	strb	r3, [r7, #3]
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	22b4      	movs	r2, #180	; 0xb4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f001 fda6 	bl	80067f6 <_lv_obj_get_style_int>
 8004caa:	4603      	mov	r3, r0
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <lv_obj_get_style_transition_prop_4>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	70fb      	strb	r3, [r7, #3]
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	22b5      	movs	r2, #181	; 0xb5
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f001 fd95 	bl	80067f6 <_lv_obj_get_style_int>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <lv_obj_get_style_transition_prop_5>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	70fb      	strb	r3, [r7, #3]
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	22b6      	movs	r2, #182	; 0xb6
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f001 fd84 	bl	80067f6 <_lv_obj_get_style_int>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <lv_obj_get_style_transition_prop_6>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	22b7      	movs	r2, #183	; 0xb7
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 fd73 	bl	80067f6 <_lv_obj_get_style_int>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <lv_obj_get_style_transition_path>:
#if LV_USE_ANIMATION
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	70fb      	strb	r3, [r7, #3]
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	22be      	movs	r2, #190	; 0xbe
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f002 f813 	bl	8006d58 <_lv_obj_get_style_ptr>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <lv_obj_get_style_scale_width>:
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	22c0      	movs	r2, #192	; 0xc0
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 fd51 	bl	80067f6 <_lv_obj_get_style_int>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <lv_obj_get_style_scale_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70fb      	strb	r3, [r7, #3]
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	22c1      	movs	r2, #193	; 0xc1
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f001 fd40 	bl	80067f6 <_lv_obj_get_style_int>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <lv_obj_get_style_scale_end_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	70fb      	strb	r3, [r7, #3]
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	22c2      	movs	r2, #194	; 0xc2
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 fd2f 	bl	80067f6 <_lv_obj_get_style_int>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <lv_obj_get_style_scale_end_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	70fb      	strb	r3, [r7, #3]
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	22c3      	movs	r2, #195	; 0xc3
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 fd1e 	bl	80067f6 <_lv_obj_get_style_int>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <lv_obj_get_style_scale_grad_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	22c9      	movs	r2, #201	; 0xc9
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f001 fe96 	bl	8006b08 <_lv_obj_get_style_color>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <lv_obj_get_style_scale_end_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	22ca      	movs	r2, #202	; 0xca
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f001 fe85 	bl	8006b08 <_lv_obj_get_style_color>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b089      	sub	sp, #36	; 0x24
 8004e0c:	af04      	add	r7, sp, #16
    /* Do nothing if already initialized */
    if(lv_initialized) {
 8004e0e:	4b27      	ldr	r3, [pc, #156]	; (8004eac <lv_init+0xa4>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d146      	bne.n	8004ea4 <lv_init+0x9c>
    }

    LV_LOG_TRACE("lv_init started");

    /*Initialize the lv_misc modules*/
    _lv_mem_init();
 8004e16:	f017 fa89 	bl	801c32c <_lv_mem_init>
    _lv_task_core_init();
 8004e1a:	f018 f9b7 	bl	801d18c <_lv_task_core_init>

#if LV_USE_FILESYSTEM
    _lv_fs_init();
 8004e1e:	f016 fdb9 	bl	801b994 <_lv_fs_init>
#endif

#if LV_USE_ANIMATION
    _lv_anim_core_init();
 8004e22:	f015 fbaf 	bl	801a584 <_lv_anim_core_init>
#endif

#if LV_USE_GROUP
    _lv_group_init();
 8004e26:	f7fc fb7d 	bl	8001524 <_lv_group_init>
        LV_LOG_ERROR("PXP init error. STOP.\n");
        for(; ;) ;
    }
#endif

    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
 8004e2a:	2110      	movs	r1, #16
 8004e2c:	4820      	ldr	r0, [pc, #128]	; (8004eb0 <lv_init+0xa8>)
 8004e2e:	f016 ff51 	bl	801bcd4 <_lv_ll_init>

    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8004e32:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004e36:	481f      	ldr	r0, [pc, #124]	; (8004eb4 <lv_init+0xac>)
 8004e38:	f016 ff4c 	bl	801bcd4 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8004e3c:	2160      	movs	r1, #96	; 0x60
 8004e3e:	481e      	ldr	r0, [pc, #120]	; (8004eb8 <lv_init+0xb0>)
 8004e40:	f016 ff48 	bl	801bcd4 <_lv_ll_init>

    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
 8004e44:	481d      	ldr	r0, [pc, #116]	; (8004ebc <lv_init+0xb4>)
 8004e46:	f7ff f8bb 	bl	8003fc0 <lv_color_hex>
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	481c      	ldr	r0, [pc, #112]	; (8004ec0 <lv_init+0xb8>)
 8004e4e:	f7ff f8b7 	bl	8003fc0 <lv_color_hex>
 8004e52:	4601      	mov	r1, r0
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <lv_init+0xbc>)
 8004e56:	9302      	str	r3, [sp, #8]
 8004e58:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <lv_init+0xbc>)
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <lv_init+0xbc>)
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <lv_init+0xbc>)
 8004e62:	2202      	movs	r2, #2
 8004e64:	4620      	mov	r0, r4
 8004e66:	f01f fc0f 	bl	8024688 <lv_theme_material_init>
 8004e6a:	60f8      	str	r0, [r7, #12]
                                            LV_THEME_DEFAULT_FLAG,
                                            LV_THEME_DEFAULT_FONT_SMALL, LV_THEME_DEFAULT_FONT_NORMAL, LV_THEME_DEFAULT_FONT_SUBTITLE, LV_THEME_DEFAULT_FONT_TITLE);
    lv_theme_set_act(th);
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f019 f8fb 	bl	801e068 <lv_theme_set_act>

    /*Initialize the screen refresh system*/
    _lv_refr_init();
 8004e72:	f005 f80e 	bl	8009e92 <_lv_refr_init>

    /*Init the input device handling*/
    _lv_indev_init();
 8004e76:	f7fc fe4b 	bl	8001b10 <_lv_indev_init>

    _lv_img_decoder_init();
 8004e7a:	f013 f8c5 	bl	8018008 <_lv_img_decoder_init>
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8004e7e:	2001      	movs	r0, #1
 8004e80:	f012 ffc4 	bl	8017e0c <lv_img_cache_set_size>
#endif
    /*Test if the IDE has UTF-8 encoding*/
    char * txt = "Á";
 8004e84:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <lv_init+0xc0>)
 8004e86:	60bb      	str	r3, [r7, #8]

    uint8_t * txt_u8 = (uint8_t *) txt;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	607b      	str	r3, [r7, #4]
    if(txt_u8[0] != 0xc3 || txt_u8[1] != 0x81 || txt_u8[2] != 0x00) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2bc3      	cmp	r3, #195	; 0xc3
 8004e92:	d103      	bne.n	8004e9c <lv_init+0x94>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3301      	adds	r3, #1
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b81      	cmp	r3, #129	; 0x81
        LV_LOG_WARN("The strings has no UTF-8 encoding. Some characters won't be displayed.")
    }

    lv_initialized = true;
 8004e9c:	4b03      	ldr	r3, [pc, #12]	; (8004eac <lv_init+0xa4>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	e000      	b.n	8004ea6 <lv_init+0x9e>
        return;
 8004ea4:	bf00      	nop
    LV_LOG_INFO("lv_init ready");
}
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}
 8004eac:	200177a0 	.word	0x200177a0
 8004eb0:	20020444 	.word	0x20020444
 8004eb4:	200203a0 	.word	0x200203a0
 8004eb8:	20020394 	.word	0x20020394
 8004ebc:	0001a2b1 	.word	0x0001a2b1
 8004ec0:	0044d1b6 	.word	0x0044d1b6
 8004ec4:	20000020 	.word	0x20000020
 8004ec8:	08028320 	.word	0x08028320

08004ecc <lv_obj_create>:
 *                  If NULL then a screen will be created
 * @param copy pointer to a base object, if not NULL then the new object will be copied from it
 * @return pointer to the new object
 */
lv_obj_t * lv_obj_create(lv_obj_t * parent, const lv_obj_t * copy)
{
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
    lv_obj_t * new_obj = NULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]

    /*Create a screen*/
    if(parent == NULL) {
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d153      	bne.n	8004f88 <lv_obj_create+0xbc>
        LV_LOG_TRACE("Screen create started");
        lv_disp_t * disp = lv_disp_get_default();
 8004ee0:	f015 f8ba 	bl	801a058 <lv_disp_get_default>
 8004ee4:	60b8      	str	r0, [r7, #8]
        if(!disp) {
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <lv_obj_create+0x24>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
            return NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	e2e3      	b.n	80054b8 <lv_obj_create+0x5ec>
        }

        new_obj = _lv_ll_ins_head(&disp->scr_ll);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	3338      	adds	r3, #56	; 0x38
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f016 ff06 	bl	801bd06 <_lv_ll_ins_head>
 8004efa:	60f8      	str	r0, [r7, #12]
        LV_ASSERT_MEM(new_obj);
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f016 fca9 	bl	801b854 <lv_debug_check_null>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f083 0301 	eor.w	r3, r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <lv_obj_create+0x54>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f04f 0400 	mov.w	r4, #0
 8004f14:	461a      	mov	r2, r3
 8004f16:	4623      	mov	r3, r4
 8004f18:	4881      	ldr	r0, [pc, #516]	; (8005120 <lv_obj_create+0x254>)
 8004f1a:	f016 fcab 	bl	801b874 <lv_debug_log_error>
 8004f1e:	e7fe      	b.n	8004f1e <lv_obj_create+0x52>
        if(new_obj == NULL) return NULL;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <lv_obj_create+0x5e>
 8004f26:	2300      	movs	r3, #0
 8004f28:	e2c6      	b.n	80054b8 <lv_obj_create+0x5ec>

        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8004f2a:	214c      	movs	r1, #76	; 0x4c
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f017 ff88 	bl	801ce42 <_lv_memset_00>

#if LV_USE_BIDI
        new_obj->base_dir     = LV_BIDI_BASE_DIR_DEF;
#else
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8004f38:	f36f 1346 	bfc	r3, #5, #2
 8004f3c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
#endif

        /*Set the callbacks*/
        new_obj->signal_cb = lv_obj_signal;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a78      	ldr	r2, [pc, #480]	; (8005124 <lv_obj_create+0x258>)
 8004f44:	61da      	str	r2, [r3, #28]
        new_obj->design_cb = lv_obj_design;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a77      	ldr	r2, [pc, #476]	; (8005128 <lv_obj_create+0x25c>)
 8004f4a:	621a      	str	r2, [r3, #32]
        new_obj->event_cb = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	619a      	str	r2, [r3, #24]

        /*Set coordinates to full screen size*/
        new_obj->coords.x1    = 0;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = 0;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f015 f886 	bl	801a070 <lv_disp_get_hor_res>
 8004f64:	4603      	mov	r3, r0
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	b21a      	sxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8004f72:	2000      	movs	r0, #0
 8004f74:	f015 f89e 	bl	801a0b4 <lv_disp_get_ver_res>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	b21a      	sxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	82da      	strh	r2, [r3, #22]
 8004f86:	e0db      	b.n	8005140 <lv_obj_create+0x274>
    }
    /*Create a normal object*/
    else {
        LV_LOG_TRACE("Object create started");
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f016 fc63 	bl	801b854 <lv_debug_check_null>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f083 0301 	eor.w	r3, r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <lv_obj_create+0xe0>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f04f 0400 	mov.w	r4, #0
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4623      	mov	r3, r4
 8004fa4:	4861      	ldr	r0, [pc, #388]	; (800512c <lv_obj_create+0x260>)
 8004fa6:	f016 fc65 	bl	801b874 <lv_debug_log_error>
 8004faa:	e7fe      	b.n	8004faa <lv_obj_create+0xde>

        new_obj = _lv_ll_ins_head(&parent->child_ll);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f016 fea8 	bl	801bd06 <_lv_ll_ins_head>
 8004fb6:	60f8      	str	r0, [r7, #12]
        LV_ASSERT_MEM(new_obj);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f016 fc4b 	bl	801b854 <lv_debug_check_null>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f083 0301 	eor.w	r3, r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d008      	beq.n	8004fdc <lv_obj_create+0x110>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f04f 0400 	mov.w	r4, #0
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	4852      	ldr	r0, [pc, #328]	; (8005120 <lv_obj_create+0x254>)
 8004fd6:	f016 fc4d 	bl	801b874 <lv_debug_log_error>
 8004fda:	e7fe      	b.n	8004fda <lv_obj_create+0x10e>
        if(new_obj == NULL) return NULL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <lv_obj_create+0x11a>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e268      	b.n	80054b8 <lv_obj_create+0x5ec>

        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8004fe6:	214c      	movs	r1, #76	; 0x4c
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f017 ff2a 	bl	801ce42 <_lv_memset_00>

        new_obj->parent = parent;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	601a      	str	r2, [r3, #0]

#if LV_USE_BIDI
        new_obj->base_dir     = LV_BIDI_DIR_INHERIT;
#else
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8004ffa:	f36f 1346 	bfc	r3, #5, #2
 8004ffe:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
#endif

        /*Set the callbacks (signal:cb is required in `lv_obj_get_base_dir` if `LV_USE_ASSERT_OBJ` is enabled)*/
        new_obj->signal_cb = lv_obj_signal;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4a47      	ldr	r2, [pc, #284]	; (8005124 <lv_obj_create+0x258>)
 8005006:	61da      	str	r2, [r3, #28]
        new_obj->design_cb = lv_obj_design;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4a47      	ldr	r2, [pc, #284]	; (8005128 <lv_obj_create+0x25c>)
 800500c:	621a      	str	r2, [r3, #32]
        new_obj->event_cb = NULL;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	619a      	str	r2, [r3, #24]

        new_obj->coords.y1    = parent->coords.y1;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	825a      	strh	r2, [r3, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005024:	b29c      	uxth	r4, r3
 8005026:	2000      	movs	r0, #0
 8005028:	f015 f866 	bl	801a0f8 <lv_disp_get_dpi>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	2332      	movs	r3, #50	; 0x32
 8005032:	fb03 f302 	mul.w	r3, r3, r2
 8005036:	3350      	adds	r3, #80	; 0x50
 8005038:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800503c:	db10      	blt.n	8005060 <lv_obj_create+0x194>
 800503e:	2000      	movs	r0, #0
 8005040:	f015 f85a 	bl	801a0f8 <lv_disp_get_dpi>
 8005044:	4603      	mov	r3, r0
 8005046:	461a      	mov	r2, r3
 8005048:	2332      	movs	r3, #50	; 0x32
 800504a:	fb03 f302 	mul.w	r3, r3, r2
 800504e:	3350      	adds	r3, #80	; 0x50
 8005050:	4a37      	ldr	r2, [pc, #220]	; (8005130 <lv_obj_create+0x264>)
 8005052:	fb82 1203 	smull	r1, r2, r2, r3
 8005056:	1192      	asrs	r2, r2, #6
 8005058:	17db      	asrs	r3, r3, #31
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	b29b      	uxth	r3, r3
 800505e:	e000      	b.n	8005062 <lv_obj_create+0x196>
 8005060:	2301      	movs	r3, #1
 8005062:	4423      	add	r3, r4
 8005064:	b29b      	uxth	r3, r3
 8005066:	b21a      	sxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	82da      	strh	r2, [r3, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f002 f82d 	bl	80070cc <lv_obj_get_base_dir>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d12c      	bne.n	80050d2 <lv_obj_create+0x206>
            new_obj->coords.x2    = parent->coords.x2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	829a      	strh	r2, [r3, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005088:	b29c      	uxth	r4, r3
 800508a:	2000      	movs	r0, #0
 800508c:	f015 f834 	bl	801a0f8 <lv_disp_get_dpi>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	2364      	movs	r3, #100	; 0x64
 8005096:	fb03 f302 	mul.w	r3, r3, r2
 800509a:	3350      	adds	r3, #80	; 0x50
 800509c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80050a0:	db10      	blt.n	80050c4 <lv_obj_create+0x1f8>
 80050a2:	2000      	movs	r0, #0
 80050a4:	f015 f828 	bl	801a0f8 <lv_disp_get_dpi>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	2364      	movs	r3, #100	; 0x64
 80050ae:	fb03 f302 	mul.w	r3, r3, r2
 80050b2:	3350      	adds	r3, #80	; 0x50
 80050b4:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <lv_obj_create+0x264>)
 80050b6:	fb82 1203 	smull	r1, r2, r2, r3
 80050ba:	1192      	asrs	r2, r2, #6
 80050bc:	17db      	asrs	r3, r3, #31
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	e000      	b.n	80050c6 <lv_obj_create+0x1fa>
 80050c4:	2301      	movs	r3, #1
 80050c6:	1ae3      	subs	r3, r4, r3
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	b21a      	sxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	821a      	strh	r2, [r3, #16]
 80050d0:	e036      	b.n	8005140 <lv_obj_create+0x274>
        }
        else {
            new_obj->coords.x1    = parent->coords.x1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	821a      	strh	r2, [r3, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80050e2:	b29c      	uxth	r4, r3
 80050e4:	2000      	movs	r0, #0
 80050e6:	f015 f807 	bl	801a0f8 <lv_disp_get_dpi>
 80050ea:	4603      	mov	r3, r0
 80050ec:	461a      	mov	r2, r3
 80050ee:	2364      	movs	r3, #100	; 0x64
 80050f0:	fb03 f302 	mul.w	r3, r3, r2
 80050f4:	3350      	adds	r3, #80	; 0x50
 80050f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80050fa:	db1b      	blt.n	8005134 <lv_obj_create+0x268>
 80050fc:	2000      	movs	r0, #0
 80050fe:	f014 fffb 	bl	801a0f8 <lv_disp_get_dpi>
 8005102:	4603      	mov	r3, r0
 8005104:	461a      	mov	r2, r3
 8005106:	2364      	movs	r3, #100	; 0x64
 8005108:	fb03 f302 	mul.w	r3, r3, r2
 800510c:	3350      	adds	r3, #80	; 0x50
 800510e:	4a08      	ldr	r2, [pc, #32]	; (8005130 <lv_obj_create+0x264>)
 8005110:	fb82 1203 	smull	r1, r2, r2, r3
 8005114:	1192      	asrs	r2, r2, #6
 8005116:	17db      	asrs	r3, r3, #31
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	b29b      	uxth	r3, r3
 800511c:	e00b      	b.n	8005136 <lv_obj_create+0x26a>
 800511e:	bf00      	nop
 8005120:	08028324 	.word	0x08028324
 8005124:	08008235 	.word	0x08008235
 8005128:	08007e45 	.word	0x08007e45
 800512c:	08028334 	.word	0x08028334
 8005130:	66666667 	.word	0x66666667
 8005134:	2301      	movs	r3, #1
 8005136:	4423      	add	r3, r4
 8005138:	b29b      	uxth	r3, r3
 800513a:	b21a      	sxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	829a      	strh	r2, [r3, #20]
        }
    }

    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3304      	adds	r3, #4
 8005144:	214c      	movs	r1, #76	; 0x4c
 8005146:	4618      	mov	r0, r3
 8005148:	f016 fdc4 	bl	801bcd4 <_lv_ll_init>

    new_obj->ext_draw_pad = 0;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	865a      	strh	r2, [r3, #50]	; 0x32

#if LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_FULL
    _lv_memset_00(&new_obj->ext_click_pad, sizeof(new_obj->ext_click_pad));
#elif LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_TINY
    new_obj->ext_click_pad_hor = 0;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif

    /*Init realign*/
#if LV_USE_OBJ_REALIGN
    new_obj->realign.align        = LV_ALIGN_CENTER;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    new_obj->realign.xofs         = 0;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    new_obj->realign.yofs         = 0;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    new_obj->realign.base         = NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 8005186:	f36f 0300 	bfc	r3, #0, #1
 800518a:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#if LV_USE_USER_DATA
    _lv_memset_00(&new_obj->user_data, sizeof(lv_obj_user_data_t));
#endif

#if LV_USE_GROUP
    new_obj->group_p = NULL;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
#endif

    /*Set attributes*/
    new_obj->adv_hittest  = 0;
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800519a:	f36f 13c7 	bfc	r3, #7, #1
 800519e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->click        = 1;
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag         = 0;
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80051b6:	f36f 0341 	bfc	r3, #1, #1
 80051ba:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag_throw   = 0;
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80051c4:	f36f 0382 	bfc	r3, #2, #1
 80051c8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag_parent  = 0;
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80051d2:	f36f 03c3 	bfc	r3, #3, #1
 80051d6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80051e0:	2103      	movs	r1, #3
 80051e2:	f361 0384 	bfi	r3, r1, #2, #3
 80051e6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    new_obj->hidden       = 0;
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80051f0:	f36f 1304 	bfc	r3, #4, #1
 80051f4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->top          = 0;
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80051fe:	f36f 1345 	bfc	r3, #5, #1
 8005202:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->protect      = LV_PROTECT_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    new_obj->parent_event = 0;
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005214:	f36f 1386 	bfc	r3, #6, #1
 8005218:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	bf14      	ite	ne
 8005222:	2301      	movne	r3, #1
 8005224:	2300      	moveq	r3, #0
 8005226:	b2d9      	uxtb	r1, r3
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800522e:	f361 0300 	bfi	r3, r1, #0, #1
 8005232:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    new_obj->focus_parent  = 0;
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800523c:	f36f 0341 	bfc	r3, #1, #1
 8005240:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    new_obj->ext_attr = NULL;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	625a      	str	r2, [r3, #36]	; 0x24

    lv_style_list_init(&new_obj->style_list);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3328      	adds	r3, #40	; 0x28
 8005256:	4618      	mov	r0, r3
 8005258:	f005 fe1f 	bl	800ae9a <lv_style_list_init>
    if(copy == NULL) {
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10c      	bne.n	800527c <lv_obj_create+0x3b0>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <lv_obj_create+0x3a6>
 8005268:	2102      	movs	r1, #2
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f018 ff0c 	bl	801e088 <lv_theme_apply>
 8005270:	e00d      	b.n	800528e <lv_obj_create+0x3c2>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
 8005272:	2101      	movs	r1, #1
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f018 ff07 	bl	801e088 <lv_theme_apply>
 800527a:	e008      	b.n	800528e <lv_obj_create+0x3c2>
    }
    else {
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	3328      	adds	r3, #40	; 0x28
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f005 fe12 	bl	800aeb2 <lv_style_list_copy>
    }
    /*Copy the attributes if required*/
    if(copy != NULL) {
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8104 	beq.w	800549e <lv_obj_create+0x5d2>
        lv_area_copy(&new_obj->coords, &copy->coords);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f103 0210 	add.w	r2, r3, #16
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	3310      	adds	r3, #16
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f7fe fde2 	bl	8003e6c <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	865a      	strh	r2, [r3, #50]	; 0x32

#if LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_FULL
        lv_area_copy(&new_obj->ext_click_pad, &copy->ext_click_pad);
#elif LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_TINY
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        /*Set user data*/
#if LV_USE_USER_DATA
        _lv_memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
#endif

        new_obj->base_dir = copy->base_dir;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052d0:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80052d4:	b2d9      	uxtb	r1, r3
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80052dc:	f361 1346 	bfi	r3, r1, #5, #2
 80052e0:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35

        /*Copy realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = copy->realign.align;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	641a      	str	r2, [r3, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005316:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800531a:	b2d9      	uxtb	r1, r3
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 8005322:	f361 0300 	bfi	r3, r1, #0, #1
 8005326:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#endif

        /*Only copy the `event_cb`. `signal_cb` and `design_cb` will be copied in the derived
         * object type (e.g. `lv_btn`)*/
        new_obj->event_cb = copy->event_cb;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	619a      	str	r2, [r3, #24]

        /*Copy attributes*/
        new_obj->adv_hittest  = copy->adv_hittest;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005338:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800533c:	b2d9      	uxtb	r1, r3
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005344:	f361 13c7 	bfi	r3, r1, #7, #1
 8005348:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->click        = copy->click;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005352:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005356:	b2d9      	uxtb	r1, r3
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800535e:	f361 0300 	bfi	r3, r1, #0, #1
 8005362:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->drag         = copy->drag;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800536c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005370:	b2d9      	uxtb	r1, r3
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005378:	f361 0341 	bfi	r3, r1, #1, #1
 800537c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005386:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800538a:	b2d9      	uxtb	r1, r3
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8005392:	f361 0384 	bfi	r3, r1, #2, #3
 8005396:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053a4:	b2d9      	uxtb	r1, r3
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80053ac:	f361 0382 	bfi	r3, r1, #2, #1
 80053b0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053be:	b2d9      	uxtb	r1, r3
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80053c6:	f361 03c3 	bfi	r3, r1, #3, #1
 80053ca:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80053d8:	b2d9      	uxtb	r1, r3
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80053e0:	f361 1304 	bfi	r3, r1, #4, #1
 80053e4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->top          = copy->top;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053f2:	b2d9      	uxtb	r1, r3
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80053fa:	f361 1345 	bfi	r3, r1, #5, #1
 80053fe:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005408:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800540c:	b2d9      	uxtb	r1, r3
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005414:	f361 1386 	bfi	r3, r1, #6, #1
 8005418:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

        new_obj->protect      = copy->protect;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800542e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005432:	b2d9      	uxtb	r1, r3
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800543a:	f361 0300 	bfi	r3, r1, #0, #1
 800543e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005448:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800544c:	b2d9      	uxtb	r1, r3
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8005454:	f361 0341 	bfi	r3, r1, #1, #1
 8005458:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35

#if LV_USE_GROUP
        /*Add to the same group*/
        if(copy->group_p != NULL) {
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <lv_obj_create+0x5a4>
            lv_group_add_obj(copy->group_p, new_obj);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	68f9      	ldr	r1, [r7, #12]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fc f864 	bl	8001538 <lv_group_add_obj>
        }
#endif

        /*Set the same coordinates for non screen objects*/
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8005470:	6838      	ldr	r0, [r7, #0]
 8005472:	f001 f87d 	bl	8006570 <lv_obj_get_parent>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d010      	beq.n	800549e <lv_obj_create+0x5d2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <lv_obj_create+0x5d2>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8005482:	6838      	ldr	r0, [r7, #0]
 8005484:	f001 f8e8 	bl	8006658 <lv_obj_get_x>
 8005488:	4603      	mov	r3, r0
 800548a:	461c      	mov	r4, r3
 800548c:	6838      	ldr	r0, [r7, #0]
 800548e:	f001 f917 	bl	80066c0 <lv_obj_get_y>
 8005492:	4603      	mov	r3, r0
 8005494:	461a      	mov	r2, r3
 8005496:	4621      	mov	r1, r4
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f96d 	bl	8005778 <lv_obj_set_pos>
        }
    }

    /*Send a signal to the parent to notify it about the new child*/
    if(parent != NULL) {
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <lv_obj_create+0x5ea>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	2101      	movs	r1, #1
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(new_obj);
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f83d 	bl	8005530 <lv_obj_invalidate>
    }

    LV_LOG_INFO("Object create ready");

    return new_obj;
 80054b6:	68fb      	ldr	r3, [r7, #12]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd90      	pop	{r4, r7, pc}

080054c0 <lv_obj_invalidate_area>:
 * This area will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 * @param area the area to redraw
 */
void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
{
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f016 f9c2 	bl	801b854 <lv_debug_check_null>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f083 0301 	eor.w	r3, r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <lv_obj_invalidate_area+0x2e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f04f 0400 	mov.w	r4, #0
 80054e2:	461a      	mov	r2, r3
 80054e4:	4623      	mov	r3, r4
 80054e6:	4811      	ldr	r0, [pc, #68]	; (800552c <lv_obj_invalidate_area+0x6c>)
 80054e8:	f016 f9c4 	bl	801b874 <lv_debug_log_error>
 80054ec:	e7fe      	b.n	80054ec <lv_obj_invalidate_area+0x2c>

    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, area);
 80054ee:	f107 030c 	add.w	r3, r7, #12
 80054f2:	6839      	ldr	r1, [r7, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fcb9 	bl	8003e6c <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 80054fa:	f107 030c 	add.w	r3, r7, #12
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f863 	bl	80055cc <lv_obj_area_is_visible>
 8005506:	4603      	mov	r3, r0
 8005508:	75fb      	strb	r3, [r7, #23]

    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 800550a:	7dfb      	ldrb	r3, [r7, #23]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <lv_obj_invalidate_area+0x64>
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 ffdf 	bl	80064d4 <lv_obj_get_disp>
 8005516:	4602      	mov	r2, r0
 8005518:	f107 030c 	add.w	r3, r7, #12
 800551c:	4619      	mov	r1, r3
 800551e:	4610      	mov	r0, r2
 8005520:	f004 fcbe 	bl	8009ea0 <_lv_inv_area>
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	bd90      	pop	{r4, r7, pc}
 800552c:	08028334 	.word	0x08028334

08005530 <lv_obj_invalidate>:
/**
 * Mark the object as invalid therefore its current position will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 */
void lv_obj_invalidate(const lv_obj_t * obj)
{
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f016 f98b 	bl	801b854 <lv_debug_check_null>
 800553e:	4603      	mov	r3, r0
 8005540:	f083 0301 	eor.w	r3, r3, #1
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d008      	beq.n	800555c <lv_obj_invalidate+0x2c>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f04f 0400 	mov.w	r4, #0
 8005550:	461a      	mov	r2, r3
 8005552:	4623      	mov	r3, r4
 8005554:	481c      	ldr	r0, [pc, #112]	; (80055c8 <lv_obj_invalidate+0x98>)
 8005556:	f016 f98d 	bl	801b874 <lv_debug_log_error>
 800555a:	e7fe      	b.n	800555a <lv_obj_invalidate+0x2a>

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    lv_coord_t ext_size = obj->ext_draw_pad;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005560:	82fb      	strh	r3, [r7, #22]
    lv_area_copy(&obj_coords, &obj->coords);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f103 0210 	add.w	r2, r3, #16
 8005568:	f107 030c 	add.w	r3, r7, #12
 800556c:	4611      	mov	r1, r2
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fc7c 	bl	8003e6c <lv_area_copy>
    obj_coords.x1 -= ext_size;
 8005574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005578:	b29a      	uxth	r2, r3
 800557a:	8afb      	ldrh	r3, [r7, #22]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	b29b      	uxth	r3, r3
 8005580:	b21b      	sxth	r3, r3
 8005582:	81bb      	strh	r3, [r7, #12]
    obj_coords.y1 -= ext_size;
 8005584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005588:	b29a      	uxth	r2, r3
 800558a:	8afb      	ldrh	r3, [r7, #22]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	b29b      	uxth	r3, r3
 8005590:	b21b      	sxth	r3, r3
 8005592:	81fb      	strh	r3, [r7, #14]
    obj_coords.x2 += ext_size;
 8005594:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005598:	b29a      	uxth	r2, r3
 800559a:	8afb      	ldrh	r3, [r7, #22]
 800559c:	4413      	add	r3, r2
 800559e:	b29b      	uxth	r3, r3
 80055a0:	b21b      	sxth	r3, r3
 80055a2:	823b      	strh	r3, [r7, #16]
    obj_coords.y2 += ext_size;
 80055a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	8afb      	ldrh	r3, [r7, #22]
 80055ac:	4413      	add	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	b21b      	sxth	r3, r3
 80055b2:	827b      	strh	r3, [r7, #18]

    lv_obj_invalidate_area(obj, &obj_coords);
 80055b4:	f107 030c 	add.w	r3, r7, #12
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ff80 	bl	80054c0 <lv_obj_invalidate_area>

}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd90      	pop	{r4, r7, pc}
 80055c8:	08028334 	.word	0x08028334

080055cc <lv_obj_area_is_visible>:
 * @param obj pointer to an object
 * @param area the are to check. The visible part of the area will be written back here.
 * @return true: visible; false: not visible (hidden, out of parent, on other screen, etc)
 */
bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
    if(lv_obj_get_hidden(obj)) return false;
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f001 fc76 	bl	8006ec8 <lv_obj_get_hidden>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <lv_obj_area_is_visible+0x1a>
 80055e2:	2300      	movs	r3, #0
 80055e4:	e086      	b.n	80056f4 <lv_obj_area_is_visible+0x128>

    /*Invalidate the object only if it belongs to the current or previous'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 ff4c 	bl	8006484 <lv_obj_get_screen>
 80055ec:	61b8      	str	r0, [r7, #24]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 80055ee:	69b8      	ldr	r0, [r7, #24]
 80055f0:	f000 ff70 	bl	80064d4 <lv_obj_get_disp>
 80055f4:	6178      	str	r0, [r7, #20]
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 80055f6:	6978      	ldr	r0, [r7, #20]
 80055f8:	f7fb ff3f 	bl	800147a <lv_disp_get_scr_act>
 80055fc:	4602      	mov	r2, r0
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	4293      	cmp	r3, r2
 8005602:	d014      	beq.n	800562e <lv_obj_area_is_visible+0x62>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 8005604:	6978      	ldr	r0, [r7, #20]
 8005606:	f7fb ff4d 	bl	80014a4 <lv_disp_get_scr_prev>
 800560a:	4602      	mov	r2, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	4293      	cmp	r3, r2
 8005610:	d00d      	beq.n	800562e <lv_obj_area_is_visible+0x62>
       obj_scr == lv_disp_get_layer_top(disp) ||
 8005612:	6978      	ldr	r0, [r7, #20]
 8005614:	f7fb ff5b 	bl	80014ce <lv_disp_get_layer_top>
 8005618:	4602      	mov	r2, r0
       obj_scr == lv_disp_get_scr_prev(disp) ||
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	4293      	cmp	r3, r2
 800561e:	d006      	beq.n	800562e <lv_obj_area_is_visible+0x62>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f7fb ff69 	bl	80014f8 <lv_disp_get_layer_sys>
 8005626:	4602      	mov	r2, r0
       obj_scr == lv_disp_get_layer_top(disp) ||
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	4293      	cmp	r3, r2
 800562c:	d161      	bne.n	80056f2 <lv_obj_area_is_visible+0x126>

        /*Truncate the area to the object*/
        lv_area_t obj_coords;
        lv_coord_t ext_size = obj->ext_draw_pad;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005632:	827b      	strh	r3, [r7, #18]
        lv_area_copy(&obj_coords, &obj->coords);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f103 0210 	add.w	r2, r3, #16
 800563a:	f107 0308 	add.w	r3, r7, #8
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fc13 	bl	8003e6c <lv_area_copy>
        obj_coords.x1 -= ext_size;
 8005646:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800564a:	b29a      	uxth	r2, r3
 800564c:	8a7b      	ldrh	r3, [r7, #18]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	b29b      	uxth	r3, r3
 8005652:	b21b      	sxth	r3, r3
 8005654:	813b      	strh	r3, [r7, #8]
        obj_coords.y1 -= ext_size;
 8005656:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800565a:	b29a      	uxth	r2, r3
 800565c:	8a7b      	ldrh	r3, [r7, #18]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	b29b      	uxth	r3, r3
 8005662:	b21b      	sxth	r3, r3
 8005664:	817b      	strh	r3, [r7, #10]
        obj_coords.x2 += ext_size;
 8005666:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800566a:	b29a      	uxth	r2, r3
 800566c:	8a7b      	ldrh	r3, [r7, #18]
 800566e:	4413      	add	r3, r2
 8005670:	b29b      	uxth	r3, r3
 8005672:	b21b      	sxth	r3, r3
 8005674:	81bb      	strh	r3, [r7, #12]
        obj_coords.y2 += ext_size;
 8005676:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800567a:	b29a      	uxth	r2, r3
 800567c:	8a7b      	ldrh	r3, [r7, #18]
 800567e:	4413      	add	r3, r2
 8005680:	b29b      	uxth	r3, r3
 8005682:	b21b      	sxth	r3, r3
 8005684:	81fb      	strh	r3, [r7, #14]

        bool is_common;

        is_common = _lv_area_intersect(area, area, &obj_coords);
 8005686:	f107 0308 	add.w	r3, r7, #8
 800568a:	461a      	mov	r2, r3
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	6838      	ldr	r0, [r7, #0]
 8005690:	f015 fa86 	bl	801aba0 <_lv_area_intersect>
 8005694:	4603      	mov	r3, r0
 8005696:	747b      	strb	r3, [r7, #17]
        if(is_common == false) return false;  /*The area is not on the object*/
 8005698:	7c7b      	ldrb	r3, [r7, #17]
 800569a:	f083 0301 	eor.w	r3, r3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <lv_obj_area_is_visible+0xdc>
 80056a4:	2300      	movs	r3, #0
 80056a6:	e025      	b.n	80056f4 <lv_obj_area_is_visible+0x128>

        /*Truncate recursively to the parents*/
        lv_obj_t * par = lv_obj_get_parent(obj);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 ff61 	bl	8006570 <lv_obj_get_parent>
 80056ae:	61f8      	str	r0, [r7, #28]
        while(par != NULL) {
 80056b0:	e01c      	b.n	80056ec <lv_obj_area_is_visible+0x120>
            is_common = _lv_area_intersect(area, area, &par->coords);
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	3310      	adds	r3, #16
 80056b6:	461a      	mov	r2, r3
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	6838      	ldr	r0, [r7, #0]
 80056bc:	f015 fa70 	bl	801aba0 <_lv_area_intersect>
 80056c0:	4603      	mov	r3, r0
 80056c2:	747b      	strb	r3, [r7, #17]
            if(is_common == false) return false;       /*If no common parts with parent break;*/
 80056c4:	7c7b      	ldrb	r3, [r7, #17]
 80056c6:	f083 0301 	eor.w	r3, r3, #1
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <lv_obj_area_is_visible+0x108>
 80056d0:	2300      	movs	r3, #0
 80056d2:	e00f      	b.n	80056f4 <lv_obj_area_is_visible+0x128>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 80056d4:	69f8      	ldr	r0, [r7, #28]
 80056d6:	f001 fbf7 	bl	8006ec8 <lv_obj_get_hidden>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <lv_obj_area_is_visible+0x118>
 80056e0:	2300      	movs	r3, #0
 80056e2:	e007      	b.n	80056f4 <lv_obj_area_is_visible+0x128>

            par = lv_obj_get_parent(par);
 80056e4:	69f8      	ldr	r0, [r7, #28]
 80056e6:	f000 ff43 	bl	8006570 <lv_obj_get_parent>
 80056ea:	61f8      	str	r0, [r7, #28]
        while(par != NULL) {
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1df      	bne.n	80056b2 <lv_obj_area_is_visible+0xe6>
        }
    }

    return true;
 80056f2:	2301      	movs	r3, #1
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <lv_obj_move_foreground>:
/**
 * Move and object to the foreground
 * @param obj pointer to an object
 */
void lv_obj_move_foreground(lv_obj_t * obj)
{
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f016 f8a5 	bl	801b854 <lv_debug_check_null>
 800570a:	4603      	mov	r3, r0
 800570c:	f083 0301 	eor.w	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d008      	beq.n	8005728 <lv_obj_move_foreground+0x2c>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f04f 0400 	mov.w	r4, #0
 800571c:	461a      	mov	r2, r3
 800571e:	4623      	mov	r3, r4
 8005720:	4814      	ldr	r0, [pc, #80]	; (8005774 <lv_obj_move_foreground+0x78>)
 8005722:	f016 f8a7 	bl	801b874 <lv_debug_log_error>
 8005726:	e7fe      	b.n	8005726 <lv_obj_move_foreground+0x2a>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 ff21 	bl	8006570 <lv_obj_get_parent>
 800572e:	60f8      	str	r0, [r7, #12]

    /*Do nothing of already in the foreground*/
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3304      	adds	r3, #4
 8005734:	4618      	mov	r0, r3
 8005736:	f016 fc43 	bl	801bfc0 <_lv_ll_get_head>
 800573a:	4602      	mov	r2, r0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4293      	cmp	r3, r2
 8005740:	d014      	beq.n	800576c <lv_obj_move_foreground+0x70>

    lv_obj_invalidate(parent);
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff fef4 	bl	8005530 <lv_obj_invalidate>

    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	1d18      	adds	r0, r3, #4
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1d19      	adds	r1, r3, #4
 8005750:	2301      	movs	r3, #1
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	f016 fbdf 	bl	801bf16 <_lv_ll_chg_list>

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	2101      	movs	r1, #1
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	4798      	blx	r3

    lv_obj_invalidate(parent);
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f7ff fee3 	bl	8005530 <lv_obj_invalidate>
 800576a:	e000      	b.n	800576e <lv_obj_move_foreground+0x72>
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 800576c:	bf00      	nop
}
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}
 8005774:	08028334 	.word	0x08028334

08005778 <lv_obj_set_pos>:
 * @param obj pointer to an object
 * @param x new distance from the left side of the parent
 * @param y new distance from the top of the parent
 */
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f016 f863 	bl	801b854 <lv_debug_check_null>
 800578e:	4603      	mov	r3, r0
 8005790:	f083 0301 	eor.w	r3, r3, #1
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <lv_obj_set_pos+0x34>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f04f 0400 	mov.w	r4, #0
 80057a0:	461a      	mov	r2, r3
 80057a2:	4623      	mov	r3, r4
 80057a4:	4846      	ldr	r0, [pc, #280]	; (80058c0 <lv_obj_set_pos+0x148>)
 80057a6:	f016 f865 	bl	801b874 <lv_debug_log_error>
 80057aa:	e7fe      	b.n	80057aa <lv_obj_set_pos+0x32>

    /*Convert x and y to absolute coordinates*/
    lv_obj_t * par = obj->parent;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	617b      	str	r3, [r7, #20]

    if(par) {
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00f      	beq.n	80057d8 <lv_obj_set_pos+0x60>
        x = x + par->coords.x1;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80057be:	b29a      	uxth	r2, r3
 80057c0:	887b      	ldrh	r3, [r7, #2]
 80057c2:	4413      	add	r3, r2
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	807b      	strh	r3, [r7, #2]
        y = y + par->coords.y1;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	883b      	ldrh	r3, [r7, #0]
 80057d2:	4413      	add	r3, r2
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	803b      	strh	r3, [r7, #0]
    }

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	b21b      	sxth	r3, r3
 80057e8:	823b      	strh	r3, [r7, #16]
    diff.y = y - obj->coords.y1;
 80057ea:	883a      	ldrh	r2, [r7, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	b21b      	sxth	r3, r3
 80057fa:	827b      	strh	r3, [r7, #18]

    /* Do nothing if the position is not changed */
    /* It is very important else recursive positioning can
     * occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 80057fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <lv_obj_set_pos+0x94>
 8005804:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d054      	beq.n	80058b6 <lv_obj_set_pos+0x13e>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff fe8f 	bl	8005530 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8005812:	f107 0308 	add.w	r3, r7, #8
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fef9 	bl	8006610 <lv_obj_get_coords>

    obj->coords.x1 += diff.x;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005824:	b29a      	uxth	r2, r3
 8005826:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800582a:	b29b      	uxth	r3, r3
 800582c:	4413      	add	r3, r2
 800582e:	b29b      	uxth	r3, r3
 8005830:	b21a      	sxth	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	821a      	strh	r2, [r3, #16]
    obj->coords.y1 += diff.y;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800583c:	b29a      	uxth	r2, r3
 800583e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005842:	b29b      	uxth	r3, r3
 8005844:	4413      	add	r3, r2
 8005846:	b29b      	uxth	r3, r3
 8005848:	b21a      	sxth	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	825a      	strh	r2, [r3, #18]
    obj->coords.x2 += diff.x;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005854:	b29a      	uxth	r2, r3
 8005856:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800585a:	b29b      	uxth	r3, r3
 800585c:	4413      	add	r3, r2
 800585e:	b29b      	uxth	r3, r3
 8005860:	b21a      	sxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 += diff.y;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800586c:	b29a      	uxth	r2, r3
 800586e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005872:	b29b      	uxth	r3, r3
 8005874:	4413      	add	r3, r2
 8005876:	b29b      	uxth	r3, r3
 8005878:	b21a      	sxth	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	82da      	strh	r2, [r3, #22]

    refresh_children_position(obj, diff.x, diff.y);
 800587e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005882:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f002 fd8d 	bl	80083a8 <refresh_children_position>

    /*Inform the object about its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f107 0208 	add.w	r2, r7, #8
 8005896:	2102      	movs	r1, #2
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	4798      	blx	r3

    /*Send a signal to the parent too*/
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <lv_obj_set_pos+0x136>
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	2101      	movs	r1, #1
 80058aa:	6978      	ldr	r0, [r7, #20]
 80058ac:	4798      	blx	r3

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff fe3e 	bl	8005530 <lv_obj_invalidate>
 80058b4:	e000      	b.n	80058b8 <lv_obj_set_pos+0x140>
    if(diff.x == 0 && diff.y == 0) return;
 80058b6:	bf00      	nop
}
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd90      	pop	{r4, r7, pc}
 80058be:	bf00      	nop
 80058c0:	08028334 	.word	0x08028334

080058c4 <lv_obj_set_x>:
 * Set the x coordinate of a object
 * @param obj pointer to an object
 * @param x new distance from the left side from the parent
 */
void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 80058c4:	b590      	push	{r4, r7, lr}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f015 ffbf 	bl	801b854 <lv_debug_check_null>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f083 0301 	eor.w	r3, r3, #1
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <lv_obj_set_x+0x30>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f04f 0400 	mov.w	r4, #0
 80058e8:	461a      	mov	r2, r3
 80058ea:	4623      	mov	r3, r4
 80058ec:	4809      	ldr	r0, [pc, #36]	; (8005914 <lv_obj_set_x+0x50>)
 80058ee:	f015 ffc1 	bl	801b874 <lv_debug_log_error>
 80058f2:	e7fe      	b.n	80058f2 <lv_obj_set_x+0x2e>

    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fee3 	bl	80066c0 <lv_obj_get_y>
 80058fa:	4603      	mov	r3, r0
 80058fc:	461a      	mov	r2, r3
 80058fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff ff37 	bl	8005778 <lv_obj_set_pos>
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	bd90      	pop	{r4, r7, pc}
 8005912:	bf00      	nop
 8005914:	08028334 	.word	0x08028334

08005918 <lv_obj_set_y>:
 * Set the y coordinate of a object
 * @param obj pointer to an object
 * @param y new distance from the top of the parent
 */
void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f015 ff95 	bl	801b854 <lv_debug_check_null>
 800592a:	4603      	mov	r3, r0
 800592c:	f083 0301 	eor.w	r3, r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <lv_obj_set_y+0x30>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f04f 0400 	mov.w	r4, #0
 800593c:	461a      	mov	r2, r3
 800593e:	4623      	mov	r3, r4
 8005940:	4809      	ldr	r0, [pc, #36]	; (8005968 <lv_obj_set_y+0x50>)
 8005942:	f015 ff97 	bl	801b874 <lv_debug_log_error>
 8005946:	e7fe      	b.n	8005946 <lv_obj_set_y+0x2e>

    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fe85 	bl	8006658 <lv_obj_get_x>
 800594e:	4603      	mov	r3, r0
 8005950:	4619      	mov	r1, r3
 8005952:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005956:	461a      	mov	r2, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff ff0d 	bl	8005778 <lv_obj_set_pos>
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	bf00      	nop
 8005968:	08028334 	.word	0x08028334

0800596c <lv_obj_align>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_ofs x coordinate offset after alignment
 * @param y_ofs y coordinate offset after alignment
 */
void lv_obj_align(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 800596c:	b590      	push	{r4, r7, lr}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af04      	add	r7, sp, #16
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4611      	mov	r1, r2
 8005978:	461a      	mov	r2, r3
 800597a:	460b      	mov	r3, r1
 800597c:	71fb      	strb	r3, [r7, #7]
 800597e:	4613      	mov	r3, r2
 8005980:	80bb      	strh	r3, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f015 ff66 	bl	801b854 <lv_debug_check_null>
 8005988:	4603      	mov	r3, r0
 800598a:	f083 0301 	eor.w	r3, r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <lv_obj_align+0x3a>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f04f 0400 	mov.w	r4, #0
 800599a:	461a      	mov	r2, r3
 800599c:	4623      	mov	r3, r4
 800599e:	4822      	ldr	r0, [pc, #136]	; (8005a28 <lv_obj_align+0xbc>)
 80059a0:	f015 ff68 	bl	801b874 <lv_debug_log_error>
 80059a4:	e7fe      	b.n	80059a4 <lv_obj_align+0x38>

    if(base == NULL) base = lv_obj_get_parent(obj);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d103      	bne.n	80059b4 <lv_obj_align+0x48>
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fddf 	bl	8006570 <lv_obj_get_parent>
 80059b2:	60b8      	str	r0, [r7, #8]

    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 80059b4:	68b8      	ldr	r0, [r7, #8]
 80059b6:	f015 ff4d 	bl	801b854 <lv_debug_check_null>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f083 0301 	eor.w	r3, r3, #1
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d008      	beq.n	80059d8 <lv_obj_align+0x6c>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f04f 0400 	mov.w	r4, #0
 80059cc:	461a      	mov	r2, r3
 80059ce:	4623      	mov	r3, r4
 80059d0:	4815      	ldr	r0, [pc, #84]	; (8005a28 <lv_obj_align+0xbc>)
 80059d2:	f015 ff4f 	bl	801b874 <lv_debug_log_error>
 80059d6:	e7fe      	b.n	80059d6 <lv_obj_align+0x6a>

    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
 80059d8:	79fa      	ldrb	r2, [r7, #7]
 80059da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80059de:	9302      	str	r3, [sp, #8]
 80059e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	2301      	movs	r3, #1
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2301      	movs	r3, #1
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f002 fd9e 	bl	8008530 <obj_align_core>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	79fa      	ldrb	r2, [r7, #7]
 80059f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	88ba      	ldrh	r2, [r7, #4]
 8005a00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8c3a      	ldrh	r2, [r7, #32]
 8005a08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    obj->realign.base        = base;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40
    obj->realign.mid_align = 0;
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 8005a18:	f36f 0341 	bfc	r3, #1, #1
 8005a1c:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#endif
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd90      	pop	{r4, r7, pc}
 8005a28:	08028334 	.word	0x08028334

08005a2c <lv_obj_align_mid>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_ofs x coordinate offset after alignment
 * @param y_ofs y coordinate offset after alignment
 */
void lv_obj_align_mid(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b089      	sub	sp, #36	; 0x24
 8005a30:	af04      	add	r7, sp, #16
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	71fb      	strb	r3, [r7, #7]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80bb      	strh	r3, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f015 ff06 	bl	801b854 <lv_debug_check_null>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f083 0301 	eor.w	r3, r3, #1
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <lv_obj_align_mid+0x3a>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f04f 0400 	mov.w	r4, #0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4623      	mov	r3, r4
 8005a5e:	4822      	ldr	r0, [pc, #136]	; (8005ae8 <lv_obj_align_mid+0xbc>)
 8005a60:	f015 ff08 	bl	801b874 <lv_debug_log_error>
 8005a64:	e7fe      	b.n	8005a64 <lv_obj_align_mid+0x38>

    if(base == NULL) {
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d103      	bne.n	8005a74 <lv_obj_align_mid+0x48>
        base = lv_obj_get_parent(obj);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fd7f 	bl	8006570 <lv_obj_get_parent>
 8005a72:	60b8      	str	r0, [r7, #8]
    }

    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 8005a74:	68b8      	ldr	r0, [r7, #8]
 8005a76:	f015 feed 	bl	801b854 <lv_debug_check_null>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	f083 0301 	eor.w	r3, r3, #1
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d008      	beq.n	8005a98 <lv_obj_align_mid+0x6c>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f04f 0400 	mov.w	r4, #0
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4623      	mov	r3, r4
 8005a90:	4815      	ldr	r0, [pc, #84]	; (8005ae8 <lv_obj_align_mid+0xbc>)
 8005a92:	f015 feef 	bl	801b874 <lv_debug_log_error>
 8005a96:	e7fe      	b.n	8005a96 <lv_obj_align_mid+0x6a>

    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
 8005a98:	79fa      	ldrb	r2, [r7, #7]
 8005a9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005a9e:	9302      	str	r3, [sp, #8]
 8005aa0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	2301      	movs	r3, #1
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f002 fda6 	bl	8008600 <obj_align_mid_core>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	79fa      	ldrb	r2, [r7, #7]
 8005ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88ba      	ldrh	r2, [r7, #4]
 8005ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8c3a      	ldrh	r2, [r7, #32]
 8005ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    obj->realign.base        = base;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
    obj->realign.mid_align = 1;
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 8005ad8:	f043 0302 	orr.w	r3, r3, #2
 8005adc:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#endif
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd90      	pop	{r4, r7, pc}
 8005ae8:	08028334 	.word	0x08028334

08005aec <lv_obj_realign>:
/**
 * Realign the object based on the last `lv_obj_align` parameters.
 * @param obj pointer to an object
 */
void lv_obj_realign(lv_obj_t * obj)
{
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f015 fead 	bl	801b854 <lv_debug_check_null>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f083 0301 	eor.w	r3, r3, #1
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d008      	beq.n	8005b18 <lv_obj_realign+0x2c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f04f 0400 	mov.w	r4, #0
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4623      	mov	r3, r4
 8005b10:	4818      	ldr	r0, [pc, #96]	; (8005b74 <lv_obj_realign+0x88>)
 8005b12:	f015 feaf 	bl	801b874 <lv_debug_log_error>
 8005b16:	e7fe      	b.n	8005b16 <lv_obj_realign+0x2a>

#if LV_USE_OBJ_REALIGN
    if(obj->realign.mid_align)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <lv_obj_realign+0x5e>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f9b3 0044 	ldrsh.w	r0, [r3, #68]	; 0x44
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	4603      	mov	r3, r0
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff ff72 	bl	8005a2c <lv_obj_align_mid>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
#else
    (void)obj;
    LV_LOG_WARN("lv_obj_realign: no effect because LV_USE_OBJ_REALIGN = 0");
#endif
}
 8005b48:	e00f      	b.n	8005b6a <lv_obj_realign+0x7e>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f9b3 0044 	ldrsh.w	r0, [r3, #68]	; 0x44
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	4603      	mov	r3, r0
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff ff01 	bl	800596c <lv_obj_align>
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd90      	pop	{r4, r7, pc}
 8005b72:	bf00      	nop
 8005b74:	08028334 	.word	0x08028334

08005b78 <lv_obj_clean_style_list>:
 * @param obj pointer to an object
 * @param part the part of the object which style list should be reset.
 * E.g. `LV_OBJ_PART_MAIN`, `LV_BTN_PART_MAIN`, `LV_SLIDER_PART_KNOB`
 */
void lv_obj_clean_style_list(lv_obj_t * obj, uint8_t part)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fe11 	bl	80067b0 <lv_obj_get_style_list>
 8005b8e:	60f8      	str	r0, [r7, #12]
    if(style_dsc == NULL) {
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <lv_obj_clean_style_list+0x32>
        LV_LOG_WARN("lv_obj_clean_style_list: can't find style with `part`");
        return;
    }

    _lv_style_list_reset(style_dsc);
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f005 fba8 	bl	800b2ec <_lv_style_list_reset>
#if LV_USE_ANIMATION
    trans_del(obj, part, 0xFF, NULL);
 8005b9c:	78f9      	ldrb	r1, [r7, #3]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	22ff      	movs	r2, #255	; 0xff
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f003 f980 	bl	8008ea8 <trans_del>
 8005ba8:	e000      	b.n	8005bac <lv_obj_clean_style_list+0x34>
        return;
 8005baa:	bf00      	nop
#endif
}
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <lv_obj_reset_style_list>:
 * @param obj pointer to an object
 * @param part the part of the object which style list should be reset.
 * E.g. `LV_OBJ_PART_MAIN`, `LV_BTN_PART_MAIN`, `LV_SLIDER_PART_KNOB`
 */
void lv_obj_reset_style_list(lv_obj_t * obj, uint8_t part)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70fb      	strb	r3, [r7, #3]
    lv_obj_clean_style_list(obj, part);
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff ffd8 	bl	8005b78 <lv_obj_clean_style_list>

    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	22ff      	movs	r2, #255	; 0xff
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f804 	bl	8005bdc <lv_obj_refresh_style>
}
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <lv_obj_refresh_style>:
 * @param obj pointer to an object
 * @param part the part of the object which style property should be refreshed.
 * @param prop `LV_STYLE_PROP_ALL` or an `LV_STYLE_...` property. It is used to optimize what needs to be refreshed.
 */
void lv_obj_refresh_style(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
 8005be8:	4613      	mov	r3, r2
 8005bea:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f015 fe31 	bl	801b854 <lv_debug_check_null>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f083 0301 	eor.w	r3, r3, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <lv_obj_refresh_style+0x34>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f04f 0400 	mov.w	r4, #0
 8005c04:	461a      	mov	r2, r3
 8005c06:	4623      	mov	r3, r4
 8005c08:	483e      	ldr	r0, [pc, #248]	; (8005d04 <lv_obj_refresh_style+0x128>)
 8005c0a:	f015 fe33 	bl	801b874 <lv_debug_log_error>
 8005c0e:	e7fe      	b.n	8005c0e <lv_obj_refresh_style+0x32>

    invalidate_style_cache(obj, part, prop);
 8005c10:	883a      	ldrh	r2, [r7, #0]
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f003 fe24 	bl	8009864 <invalidate_style_cache>

    /*If a real style refresh is required*/
    bool real_refr = false;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]
    switch(prop) {
 8005c20:	883b      	ldrh	r3, [r7, #0]
 8005c22:	2b71      	cmp	r3, #113	; 0x71
 8005c24:	dc17      	bgt.n	8005c56 <lv_obj_refresh_style+0x7a>
 8005c26:	2b70      	cmp	r3, #112	; 0x70
 8005c28:	da31      	bge.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c2a:	2b41      	cmp	r3, #65	; 0x41
 8005c2c:	dc09      	bgt.n	8005c42 <lv_obj_refresh_style+0x66>
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	da2d      	bge.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	db2e      	blt.n	8005c94 <lv_obj_refresh_style+0xb8>
 8005c36:	2b07      	cmp	r3, #7
 8005c38:	dd29      	ble.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c3a:	3b10      	subs	r3, #16
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d829      	bhi.n	8005c94 <lv_obj_refresh_style+0xb8>
 8005c40:	e025      	b.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c42:	2b53      	cmp	r3, #83	; 0x53
 8005c44:	dc04      	bgt.n	8005c50 <lv_obj_refresh_style+0x74>
 8005c46:	2b50      	cmp	r3, #80	; 0x50
 8005c48:	da21      	bge.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c4a:	2b4c      	cmp	r3, #76	; 0x4c
 8005c4c:	d01f      	beq.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c4e:	e021      	b.n	8005c94 <lv_obj_refresh_style+0xb8>
 8005c50:	2b5c      	cmp	r3, #92	; 0x5c
 8005c52:	d01c      	beq.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c54:	e01e      	b.n	8005c94 <lv_obj_refresh_style+0xb8>
 8005c56:	2b7f      	cmp	r3, #127	; 0x7f
 8005c58:	dc08      	bgt.n	8005c6c <lv_obj_refresh_style+0x90>
 8005c5a:	2b7e      	cmp	r3, #126	; 0x7e
 8005c5c:	da17      	bge.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c5e:	2b73      	cmp	r3, #115	; 0x73
 8005c60:	db18      	blt.n	8005c94 <lv_obj_refresh_style+0xb8>
 8005c62:	2b75      	cmp	r3, #117	; 0x75
 8005c64:	dd13      	ble.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c66:	2b7c      	cmp	r3, #124	; 0x7c
 8005c68:	d011      	beq.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c6a:	e013      	b.n	8005c94 <lv_obj_refresh_style+0xb8>
 8005c6c:	f248 0281 	movw	r2, #32897	; 0x8081
 8005c70:	4293      	cmp	r3, r2
 8005c72:	dc08      	bgt.n	8005c86 <lv_obj_refresh_style+0xaa>
 8005c74:	f248 0280 	movw	r2, #32896	; 0x8080
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	da08      	bge.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c7c:	2b90      	cmp	r3, #144	; 0x90
 8005c7e:	d006      	beq.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c80:	2bff      	cmp	r3, #255	; 0xff
 8005c82:	d004      	beq.n	8005c8e <lv_obj_refresh_style+0xb2>
 8005c84:	e006      	b.n	8005c94 <lv_obj_refresh_style+0xb8>
 8005c86:	f248 028e 	movw	r2, #32910	; 0x808e
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d102      	bne.n	8005c94 <lv_obj_refresh_style+0xb8>
        case LV_STYLE_VALUE_OPA:
        case LV_STYLE_TEXT_LETTER_SPACE:
        case LV_STYLE_TEXT_LINE_SPACE:
        case LV_STYLE_TEXT_FONT:
        case LV_STYLE_LINE_WIDTH:
            real_refr = true;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
            break;
 8005c92:	e001      	b.n	8005c98 <lv_obj_refresh_style+0xbc>
        default:
            real_refr = false;
 8005c94:	2300      	movs	r3, #0
 8005c96:	73fb      	strb	r3, [r7, #15]
    }

    if(real_refr) {
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d02a      	beq.n	8005cf4 <lv_obj_refresh_style+0x118>
        lv_obj_invalidate(obj);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff fc46 	bl	8005530 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2104      	movs	r1, #4
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3

        switch(prop) {
 8005cb0:	883b      	ldrh	r3, [r7, #0]
 8005cb2:	2b15      	cmp	r3, #21
 8005cb4:	db10      	blt.n	8005cd8 <lv_obj_refresh_style+0xfc>
 8005cb6:	2b18      	cmp	r3, #24
 8005cb8:	dd01      	ble.n	8005cbe <lv_obj_refresh_style+0xe2>
 8005cba:	2bff      	cmp	r3, #255	; 0xff
 8005cbc:	d10c      	bne.n	8005cd8 <lv_obj_refresh_style+0xfc>
            case LV_STYLE_PROP_ALL:
            case LV_STYLE_MARGIN_TOP:
            case LV_STYLE_MARGIN_BOTTOM:
            case LV_STYLE_MARGIN_LEFT:
            case LV_STYLE_MARGIN_RIGHT:
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <lv_obj_refresh_style+0xfa>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6810      	ldr	r0, [r2, #0]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	4798      	blx	r3
                break;
 8005cd6:	bf00      	nop
        }

        lv_obj_invalidate(obj);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fc29 	bl	8005530 <lv_obj_invalidate>

        /*Send style change signals*/
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8005cde:	883b      	ldrh	r3, [r7, #0]
 8005ce0:	2bff      	cmp	r3, #255	; 0xff
 8005ce2:	d003      	beq.n	8005cec <lv_obj_refresh_style+0x110>
 8005ce4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	da06      	bge.n	8005cfa <lv_obj_refresh_style+0x11e>
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f002 fbfa 	bl	80084e6 <refresh_children_style>
    }
    else {
        lv_obj_invalidate(obj);
    }
}
 8005cf2:	e002      	b.n	8005cfa <lv_obj_refresh_style+0x11e>
        lv_obj_invalidate(obj);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff fc1b 	bl	8005530 <lv_obj_invalidate>
}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd90      	pop	{r4, r7, pc}
 8005d02:	bf00      	nop
 8005d04:	08028334 	.word	0x08028334

08005d08 <lv_obj_report_style_mod>:
 * Notify all object if a style is modified
 * @param style pointer to a style. Only the objects with this style will be notified
 *               (NULL to notify all objects)
 */
void lv_obj_report_style_mod(lv_style_t * style)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_disp_get_next(NULL);
 8005d10:	2000      	movs	r0, #0
 8005d12:	f014 fa55 	bl	801a1c0 <lv_disp_get_next>
 8005d16:	60f8      	str	r0, [r7, #12]

    while(d) {
 8005d18:	e018      	b.n	8005d4c <lv_obj_report_style_mod+0x44>
        lv_obj_t * i;
        _LV_LL_READ(d->scr_ll, i) {
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3338      	adds	r3, #56	; 0x38
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f016 f94e 	bl	801bfc0 <_lv_ll_get_head>
 8005d24:	60b8      	str	r0, [r7, #8]
 8005d26:	e00a      	b.n	8005d3e <lv_obj_report_style_mod+0x36>
            report_style_mod_core(style, i);
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f002 fb89 	bl	8008442 <report_style_mod_core>
        _LV_LL_READ(d->scr_ll, i) {
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3338      	adds	r3, #56	; 0x38
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f016 f968 	bl	801c00c <_lv_ll_get_next>
 8005d3c:	60b8      	str	r0, [r7, #8]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f1      	bne.n	8005d28 <lv_obj_report_style_mod+0x20>
        }
        d = lv_disp_get_next(d);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f014 fa3b 	bl	801a1c0 <lv_disp_get_next>
 8005d4a:	60f8      	str	r0, [r7, #12]
    while(d) {
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e3      	bne.n	8005d1a <lv_obj_report_style_mod+0x12>
    }
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <_lv_obj_disable_style_caching>:
 * Enable/disable the use of style cache for an object
 * @param obj pointer to an object
 * @param dis true: disable; false: enable (re-enable)
 */
void _lv_obj_disable_style_caching(lv_obj_t * obj, bool dis)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	70fb      	strb	r3, [r7, #3]
    uint8_t part;
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]
 8005d6a:	e011      	b.n	8005d90 <_lv_obj_disable_style_caching+0x36>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fd1d 	bl	80067b0 <lv_obj_get_style_list>
 8005d76:	6138      	str	r0, [r7, #16]
        if(list == NULL) break;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00c      	beq.n	8005d98 <_lv_obj_disable_style_caching+0x3e>
        list->ignore_cache = dis;
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	7953      	ldrb	r3, [r2, #5]
 8005d82:	78f9      	ldrb	r1, [r7, #3]
 8005d84:	f361 03c3 	bfi	r3, r1, #3, #1
 8005d88:	7153      	strb	r3, [r2, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	2b3f      	cmp	r3, #63	; 0x3f
 8005d94:	d9ea      	bls.n	8005d6c <_lv_obj_disable_style_caching+0x12>
 8005d96:	e000      	b.n	8005d9a <_lv_obj_disable_style_caching+0x40>
        if(list == NULL) break;
 8005d98:	bf00      	nop
    }
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8005d9a:	2340      	movs	r3, #64	; 0x40
 8005d9c:	75fb      	strb	r3, [r7, #23]
 8005d9e:	e011      	b.n	8005dc4 <_lv_obj_disable_style_caching+0x6a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fd03 	bl	80067b0 <lv_obj_get_style_list>
 8005daa:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00c      	beq.n	8005dcc <_lv_obj_disable_style_caching+0x72>
        list->ignore_cache = dis;
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	7953      	ldrb	r3, [r2, #5]
 8005db6:	78f9      	ldrb	r1, [r7, #3]
 8005db8:	f361 03c3 	bfi	r3, r1, #3, #1
 8005dbc:	7153      	strb	r3, [r2, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	75fb      	strb	r3, [r7, #23]
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2bff      	cmp	r3, #255	; 0xff
 8005dc8:	d1ea      	bne.n	8005da0 <_lv_obj_disable_style_caching+0x46>
    }
}
 8005dca:	e000      	b.n	8005dce <_lv_obj_disable_style_caching+0x74>
        if(list == NULL) break;
 8005dcc:	bf00      	nop
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <lv_obj_set_click>:
 * Enable or disable the clicking of an object
 * @param obj pointer to an object
 * @param en true: make the object clickable
 */
void lv_obj_set_click(lv_obj_t * obj, bool en)
{
 8005dd8:	b590      	push	{r4, r7, lr}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f015 fd35 	bl	801b854 <lv_debug_check_null>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f083 0301 	eor.w	r3, r3, #1
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <lv_obj_set_click+0x30>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f04f 0400 	mov.w	r4, #0
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4623      	mov	r3, r4
 8005e00:	4807      	ldr	r0, [pc, #28]	; (8005e20 <lv_obj_set_click+0x48>)
 8005e02:	f015 fd37 	bl	801b874 <lv_debug_log_error>
 8005e06:	e7fe      	b.n	8005e06 <lv_obj_set_click+0x2e>

    obj->click = (en == true ? 1 : 0);
 8005e08:	78f9      	ldrb	r1, [r7, #3]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005e10:	f361 0300 	bfi	r3, r1, #0, #1
 8005e14:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd90      	pop	{r4, r7, pc}
 8005e20:	08028334 	.word	0x08028334

08005e24 <lv_obj_set_state>:
 * from the previous state to the current
 * @param obj pointer to an object
 * @param state the new state
 */
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b0ff      	sub	sp, #508	; 0x1fc
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	6018      	str	r0, [r3, #0]
 8005e2e:	460a      	mov	r2, r1
 8005e30:	1cfb      	adds	r3, r7, #3
 8005e32:	701a      	strb	r2, [r3, #0]
    if(obj->state == new_state) return;
 8005e34:	1d3b      	adds	r3, r7, #4
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	1cfa      	adds	r2, r7, #3
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	f000 81b6 	beq.w	80061b2 <lv_obj_set_state+0x38e>

    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005e46:	1d3b      	adds	r3, r7, #4
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	f015 fd03 	bl	801b854 <lv_debug_check_null>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f083 0301 	eor.w	r3, r3, #1
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <lv_obj_set_state+0x4a>
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f04f 0400 	mov.w	r4, #0
 8005e62:	461a      	mov	r2, r3
 8005e64:	4623      	mov	r3, r4
 8005e66:	48d6      	ldr	r0, [pc, #856]	; (80061c0 <lv_obj_set_state+0x39c>)
 8005e68:	f015 fd04 	bl	801b874 <lv_debug_log_error>
 8005e6c:	e7fe      	b.n	8005e6c <lv_obj_set_state+0x48>

    lv_state_t prev_state = obj->state;
 8005e6e:	1d3b      	adds	r3, r7, #4
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e76:	f887 31ec 	strb.w	r3, [r7, #492]	; 0x1ec
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
    uint8_t part;
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 8005e86:	e048      	b.n	8005f1a <lv_obj_set_state+0xf6>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 8005e88:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8005e8c:	1d3b      	adds	r3, r7, #4
 8005e8e:	4611      	mov	r1, r2
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	f000 fc8d 	bl	80067b0 <lv_obj_get_style_list>
 8005e96:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
        if(style_list == NULL) break;   /*No more style lists*/
 8005e9a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d040      	beq.n	8005f24 <lv_obj_set_state+0x100>
        obj->state = prev_state;
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f897 21ec 	ldrb.w	r2, [r7, #492]	; 0x1ec
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        style_snapshot_t shot_pre;
        style_snapshot(obj, part, &shot_pre);
 8005eae:	f107 0208 	add.w	r2, r7, #8
 8005eb2:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 8005eb6:	1d3b      	adds	r3, r7, #4
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	f003 fd2d 	bl	8009918 <style_snapshot>
        obj->state = new_state;
 8005ebe:	1d3b      	adds	r3, r7, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	1cfa      	adds	r2, r7, #3
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        style_snapshot_t shot_post;
        style_snapshot(obj, part, &shot_post);
 8005eca:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8005ece:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	f003 fd1f 	bl	8009918 <style_snapshot>

        style_snapshot_res_t r = style_snapshot_compare(&shot_pre, &shot_post);
 8005eda:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8005ede:	f107 0308 	add.w	r3, r7, #8
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f003 fe64 	bl	8009bb2 <style_snapshot_compare>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
        if(r == STYLE_COMPARE_DIFF) {
 8005ef0:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d104      	bne.n	8005f02 <lv_obj_set_state+0xde>
            cmp_res = STYLE_COMPARE_DIFF;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
            break;
 8005efe:	bf00      	nop
 8005f00:	e011      	b.n	8005f26 <lv_obj_set_state+0x102>
        }
        if(r == STYLE_COMPARE_VISUAL_DIFF) {
 8005f02:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d102      	bne.n	8005f10 <lv_obj_set_state+0xec>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005f10:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 8005f14:	3301      	adds	r3, #1
 8005f16:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 8005f1a:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 8005f1e:	2b3f      	cmp	r3, #63	; 0x3f
 8005f20:	d9b2      	bls.n	8005e88 <lv_obj_set_state+0x64>
 8005f22:	e000      	b.n	8005f26 <lv_obj_set_state+0x102>
        if(style_list == NULL) break;   /*No more style lists*/
 8005f24:	bf00      	nop
        }
    }

    obj->state = new_state;
 8005f26:	1d3b      	adds	r3, r7, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	1cfa      	adds	r2, r7, #3
 8005f2c:	7812      	ldrb	r2, [r2, #0]
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    if(cmp_res == STYLE_COMPARE_SAME) {
 8005f32:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 813d 	beq.w	80061b6 <lv_obj_set_state+0x392>
#if LV_USE_ANIMATION == 0
    if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
#else

    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 8005f42:	e126      	b.n	8006192 <lv_obj_set_state+0x36e>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 8005f44:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8005f48:	1d3b      	adds	r3, r7, #4
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	f000 fc2f 	bl	80067b0 <lv_obj_get_style_list>
 8005f52:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
        if(style_list == NULL) break;   /*No more style lists*/
 8005f56:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 811f 	beq.w	800619e <lv_obj_set_state+0x37a>
        if(style_list->ignore_trans) continue;
 8005f60:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005f64:	795b      	ldrb	r3, [r3, #5]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 810a 	bne.w	8006186 <lv_obj_set_state+0x362>

        lv_style_int_t time = lv_obj_get_style_transition_time(obj, part);
 8005f72:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	4611      	mov	r1, r2
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	f7fe fe45 	bl	8004c0a <lv_obj_get_style_transition_time>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
        lv_style_property_t props[LV_STYLE_TRANS_NUM_MAX];
        lv_style_int_t delay = lv_obj_get_style_transition_delay(obj, part);
 8005f86:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8005f8a:	1d3b      	adds	r3, r7, #4
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	f7fe fe4c 	bl	8004c2c <lv_obj_get_style_transition_delay>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f8a7 31dc 	strh.w	r3, [r7, #476]	; 0x1dc
        lv_anim_path_t * path = lv_obj_get_style_transition_path(obj, part);
 8005f9a:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	f7fe feb9 	bl	8004d1a <lv_obj_get_style_transition_path>
 8005fa8:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
 8005fac:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8005fb0:	1d3b      	adds	r3, r7, #4
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	f7fe fe4a 	bl	8004c4e <lv_obj_get_style_transition_prop_1>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
 8005fc2:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8005fc6:	1d3b      	adds	r3, r7, #4
 8005fc8:	4611      	mov	r1, r2
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	f7fe fe50 	bl	8004c70 <lv_obj_get_style_transition_prop_2>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
 8005fd8:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8005fdc:	1d3b      	adds	r3, r7, #4
 8005fde:	4611      	mov	r1, r2
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	f7fe fe56 	bl	8004c92 <lv_obj_get_style_transition_prop_3>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
 8005fee:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8005ff2:	1d3b      	adds	r3, r7, #4
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	f7fe fe5c 	bl	8004cb4 <lv_obj_get_style_transition_prop_4>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
 8006004:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8006008:	1d3b      	adds	r3, r7, #4
 800600a:	4611      	mov	r1, r2
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	f7fe fe62 	bl	8004cd6 <lv_obj_get_style_transition_prop_5>
 8006012:	4603      	mov	r3, r0
 8006014:	b29b      	uxth	r3, r3
 8006016:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
 800601a:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	4611      	mov	r1, r2
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	f7fe fe68 	bl	8004cf8 <lv_obj_get_style_transition_prop_6>
 8006028:	4603      	mov	r3, r0
 800602a:	b29b      	uxth	r3, r3
 800602c:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2

        uint8_t i;
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
 8006030:	2300      	movs	r3, #0
 8006032:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
 8006036:	e08a      	b.n	800614e <lv_obj_set_state+0x32a>
            if(props[i] != 0) {
 8006038:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8006042:	4413      	add	r3, r2
 8006044:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d07b      	beq.n	8006144 <lv_obj_set_state+0x320>
                _lv_style_list_add_trans_style(style_list);
 800604c:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8006050:	f005 fd58 	bl	800bb04 <_lv_style_list_add_trans_style>

                lv_style_trans_t * tr = trans_create(obj, props[i], part, prev_state, new_state);
 8006054:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800605e:	4413      	add	r3, r2
 8006060:	f833 1c28 	ldrh.w	r1, [r3, #-40]
 8006064:	f897 41ec 	ldrb.w	r4, [r7, #492]	; 0x1ec
 8006068:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 800606c:	1d38      	adds	r0, r7, #4
 800606e:	1cfb      	adds	r3, r7, #3
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	4623      	mov	r3, r4
 8006076:	6800      	ldr	r0, [r0, #0]
 8006078:	f002 fcde 	bl	8008a38 <trans_create>
 800607c:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4

                /*If there is a pending anim for this property remove it*/
                if(tr) {
 8006080:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d05d      	beq.n	8006144 <lv_obj_set_state+0x320>
                    tr->obj = obj;
 8006088:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800608c:	1d3a      	adds	r2, r7, #4
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	601a      	str	r2, [r3, #0]
                    tr->prop = props[i];
 8006092:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800609c:	4413      	add	r3, r2
 800609e:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 80060a2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80060a6:	809a      	strh	r2, [r3, #4]
                    tr->part = part;
 80060a8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80060ac:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80060b0:	719a      	strb	r2, [r3, #6]

                    lv_anim_t a;
                    lv_anim_init(&a);
 80060b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80060b6:	4618      	mov	r0, r3
 80060b8:	f014 fa8a 	bl	801a5d0 <lv_anim_init>
                    lv_anim_set_var(&a, tr);
 80060bc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80060c0:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fd ff8f 	bl	8003fe8 <lv_anim_set_var>
                    lv_anim_set_exec_cb(&a, (lv_anim_exec_xcb_t)trans_anim_cb);
 80060ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80060ce:	493d      	ldr	r1, [pc, #244]	; (80061c4 <lv_obj_set_state+0x3a0>)
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fd ff97 	bl	8004004 <lv_anim_set_exec_cb>
                    lv_anim_set_start_cb(&a, trans_anim_start_cb);
 80060d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80060da:	493b      	ldr	r1, [pc, #236]	; (80061c8 <lv_obj_set_state+0x3a4>)
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fd ffe6 	bl	80040ae <lv_anim_set_start_cb>
                    lv_anim_set_ready_cb(&a, trans_anim_ready_cb);
 80060e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80060e6:	4939      	ldr	r1, [pc, #228]	; (80061cc <lv_obj_set_state+0x3a8>)
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fd ffee 	bl	80040ca <lv_anim_set_ready_cb>
                    lv_anim_set_values(&a, 0x00, 0xFF);
 80060ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80060f2:	22ff      	movs	r2, #255	; 0xff
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fd ffaf 	bl	800405a <lv_anim_set_values>
                    lv_anim_set_time(&a, time);
 80060fc:	f9b7 21de 	ldrsh.w	r2, [r7, #478]	; 0x1de
 8006100:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006104:	4611      	mov	r1, r2
 8006106:	4618      	mov	r0, r3
 8006108:	f7fd ff8a 	bl	8004020 <lv_anim_set_time>
                    lv_anim_set_delay(&a, delay);
 800610c:	f9b7 21dc 	ldrsh.w	r2, [r7, #476]	; 0x1dc
 8006110:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006114:	4611      	mov	r1, r2
 8006116:	4618      	mov	r0, r3
 8006118:	f7fd ff90 	bl	800403c <lv_anim_set_delay>
                    lv_anim_set_path(&a, path);
 800611c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006120:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8006124:	4618      	mov	r0, r3
 8006126:	f7fd ffb2 	bl	800408e <lv_anim_set_path>
                    a.early_apply = 0;
 800612a:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800612e:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8006132:	f36f 0300 	bfc	r3, #0, #1
 8006136:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    lv_anim_start(&a);
 800613a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800613e:	4618      	mov	r0, r3
 8006140:	f014 fa70 	bl	801a624 <lv_anim_start>
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
 8006144:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 8006148:	3301      	adds	r3, #1
 800614a:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
 800614e:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 8006152:	2b05      	cmp	r3, #5
 8006154:	f67f af70 	bls.w	8006038 <lv_obj_set_state+0x214>
                }

            }
        }
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8006158:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 800615c:	2b02      	cmp	r3, #2
 800615e:	d106      	bne.n	800616e <lv_obj_set_state+0x34a>
 8006160:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 8006164:	1d3b      	adds	r3, r7, #4
 8006166:	22ff      	movs	r2, #255	; 0xff
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f7ff fd37 	bl	8005bdc <lv_obj_refresh_style>

        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
 800616e:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8006172:	2b01      	cmp	r3, #1
 8006174:	d108      	bne.n	8006188 <lv_obj_set_state+0x364>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
 8006176:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	22ff      	movs	r2, #255	; 0xff
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	f003 fb70 	bl	8009864 <invalidate_style_cache>
 8006184:	e000      	b.n	8006188 <lv_obj_set_state+0x364>
        if(style_list->ignore_trans) continue;
 8006186:	bf00      	nop
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
 8006188:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 800618c:	3301      	adds	r3, #1
 800618e:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 8006192:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 8006196:	2b3f      	cmp	r3, #63	; 0x3f
 8006198:	f67f aed4 	bls.w	8005f44 <lv_obj_set_state+0x120>
 800619c:	e000      	b.n	80061a0 <lv_obj_set_state+0x37c>
        if(style_list == NULL) break;   /*No more style lists*/
 800619e:	bf00      	nop
        }
    }

    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
 80061a0:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d107      	bne.n	80061b8 <lv_obj_set_state+0x394>
        lv_obj_invalidate(obj);
 80061a8:	1d3b      	adds	r3, r7, #4
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	f7ff f9c0 	bl	8005530 <lv_obj_invalidate>
 80061b0:	e002      	b.n	80061b8 <lv_obj_set_state+0x394>
    if(obj->state == new_state) return;
 80061b2:	bf00      	nop
 80061b4:	e000      	b.n	80061b8 <lv_obj_set_state+0x394>
        return;
 80061b6:	bf00      	nop
    }

#endif

}
 80061b8:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd90      	pop	{r4, r7, pc}
 80061c0:	08028334 	.word	0x08028334
 80061c4:	08008f59 	.word	0x08008f59
 80061c8:	080090d1 	.word	0x080090d1
 80061cc:	08009189 	.word	0x08009189

080061d0 <lv_obj_add_state>:
 * from the previous state to the current
 * @param obj pointer to an object
 * @param state the state bits to add. E.g `LV_STATE_PRESSED | LV_STATE_FOCUSED`
 */
void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)
{
 80061d0:	b590      	push	{r4, r7, lr}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f015 fb39 	bl	801b854 <lv_debug_check_null>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f083 0301 	eor.w	r3, r3, #1
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <lv_obj_add_state+0x30>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f04f 0400 	mov.w	r4, #0
 80061f4:	461a      	mov	r2, r3
 80061f6:	4623      	mov	r3, r4
 80061f8:	480c      	ldr	r0, [pc, #48]	; (800622c <lv_obj_add_state+0x5c>)
 80061fa:	f015 fb3b 	bl	801b874 <lv_debug_log_error>
 80061fe:	e7fe      	b.n	80061fe <lv_obj_add_state+0x2e>

    lv_state_t new_state = obj->state | state;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	4313      	orrs	r3, r2
 800620a:	73fb      	strb	r3, [r7, #15]
    if(obj->state != new_state) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	429a      	cmp	r2, r3
 8006216:	d004      	beq.n	8006222 <lv_obj_add_state+0x52>
        lv_obj_set_state(obj, new_state);
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fe01 	bl	8005e24 <lv_obj_set_state>
    }
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	bd90      	pop	{r4, r7, pc}
 800622a:	bf00      	nop
 800622c:	08028334 	.word	0x08028334

08006230 <lv_obj_clear_state>:
 * from the previous state to the current
 * @param obj pointer to an object
 * @param state the state bits to remove. E.g `LV_STATE_PRESSED | LV_STATE_FOCUSED`
 */
void lv_obj_clear_state(lv_obj_t * obj, lv_state_t state)
{
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f015 fb09 	bl	801b854 <lv_debug_check_null>
 8006242:	4603      	mov	r3, r0
 8006244:	f083 0301 	eor.w	r3, r3, #1
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <lv_obj_clear_state+0x30>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f04f 0400 	mov.w	r4, #0
 8006254:	461a      	mov	r2, r3
 8006256:	4623      	mov	r3, r4
 8006258:	480e      	ldr	r0, [pc, #56]	; (8006294 <lv_obj_clear_state+0x64>)
 800625a:	f015 fb0b 	bl	801b874 <lv_debug_log_error>
 800625e:	e7fe      	b.n	800625e <lv_obj_clear_state+0x2e>

    lv_state_t new_state = obj->state & (~state);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006266:	b25a      	sxtb	r2, r3
 8006268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800626c:	43db      	mvns	r3, r3
 800626e:	b25b      	sxtb	r3, r3
 8006270:	4013      	ands	r3, r2
 8006272:	b25b      	sxtb	r3, r3
 8006274:	73fb      	strb	r3, [r7, #15]
    if(obj->state != new_state) {
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627c:	7bfa      	ldrb	r2, [r7, #15]
 800627e:	429a      	cmp	r2, r3
 8006280:	d004      	beq.n	800628c <lv_obj_clear_state+0x5c>
        lv_obj_set_state(obj, new_state);
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fdcc 	bl	8005e24 <lv_obj_set_state>
    }
}
 800628c:	bf00      	nop
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	bd90      	pop	{r4, r7, pc}
 8006294:	08028334 	.word	0x08028334

08006298 <lv_event_send>:
 * @param event the type of the event from `lv_event_t`
 * @param data arbitrary data depending on the object type and the event. (Usually `NULL`)
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send(lv_obj_t * obj, lv_event_t event, const void * data)
{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	460b      	mov	r3, r1
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <lv_event_send+0x18>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e01b      	b.n	80062e8 <lv_event_send+0x50>

    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f015 facf 	bl	801b854 <lv_debug_check_null>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f083 0301 	eor.w	r3, r3, #1
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <lv_event_send+0x3c>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f04f 0400 	mov.w	r4, #0
 80062c8:	461a      	mov	r2, r3
 80062ca:	4623      	mov	r3, r4
 80062cc:	4808      	ldr	r0, [pc, #32]	; (80062f0 <lv_event_send+0x58>)
 80062ce:	f015 fad1 	bl	801b874 <lv_debug_log_error>
 80062d2:	e7fe      	b.n	80062d2 <lv_event_send+0x3a>

    lv_res_t res;
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6998      	ldr	r0, [r3, #24]
 80062d8:	7afa      	ldrb	r2, [r7, #11]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68f9      	ldr	r1, [r7, #12]
 80062de:	f000 f809 	bl	80062f4 <lv_event_send_func>
 80062e2:	4603      	mov	r3, r0
 80062e4:	75fb      	strb	r3, [r7, #23]
    return res;
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd90      	pop	{r4, r7, pc}
 80062f0:	08028334 	.word	0x08028334

080062f4 <lv_event_send_func>:
 * @param event an event
 * @param data pointer to a custom data
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send_func(lv_event_cb_t event_xcb, lv_obj_t * obj, lv_event_t event, const void * data)
{
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b08b      	sub	sp, #44	; 0x2c
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	4613      	mov	r3, r2
 8006302:	71fb      	strb	r3, [r7, #7]
    if(obj != NULL) {
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d011      	beq.n	800632e <lv_event_send_func+0x3a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800630a:	68b8      	ldr	r0, [r7, #8]
 800630c:	f015 faa2 	bl	801b854 <lv_debug_check_null>
 8006310:	4603      	mov	r3, r0
 8006312:	f083 0301 	eor.w	r3, r3, #1
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <lv_event_send_func+0x3a>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f04f 0400 	mov.w	r4, #0
 8006322:	461a      	mov	r2, r3
 8006324:	4623      	mov	r3, r4
 8006326:	4831      	ldr	r0, [pc, #196]	; (80063ec <lv_event_send_func+0xf8>)
 8006328:	f015 faa4 	bl	801b874 <lv_debug_log_error>
 800632c:	e7fe      	b.n	800632c <lv_event_send_func+0x38>

    /* Build a simple linked list from the objects used in the events
     * It's important to know if an this object was deleted by a nested event
     * called from this `even_cb`. */
    lv_event_temp_data_t event_temp_data;
    event_temp_data.obj     = obj;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	613b      	str	r3, [r7, #16]
    event_temp_data.deleted = false;
 8006332:	2300      	movs	r3, #0
 8006334:	753b      	strb	r3, [r7, #20]
    event_temp_data.prev    = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]

    if(event_temp_data_head) {
 800633a:	4b2d      	ldr	r3, [pc, #180]	; (80063f0 <lv_event_send_func+0xfc>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <lv_event_send_func+0x54>
        event_temp_data.prev = event_temp_data_head;
 8006342:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <lv_event_send_func+0xfc>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	61bb      	str	r3, [r7, #24]
    }
    event_temp_data_head = &event_temp_data;
 8006348:	4a29      	ldr	r2, [pc, #164]	; (80063f0 <lv_event_send_func+0xfc>)
 800634a:	f107 0310 	add.w	r3, r7, #16
 800634e:	6013      	str	r3, [r2, #0]

    const void * event_act_data_save = event_act_data;
 8006350:	4b28      	ldr	r3, [pc, #160]	; (80063f4 <lv_event_send_func+0x100>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
    event_act_data                   = data;
 8006356:	4a27      	ldr	r2, [pc, #156]	; (80063f4 <lv_event_send_func+0x100>)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	6013      	str	r3, [r2, #0]

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 800635c:	f7fb fc82 	bl	8001c64 <lv_indev_get_act>
 8006360:	6238      	str	r0, [r7, #32]
    if(indev_act) {
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <lv_event_send_func+0x88>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <lv_event_send_func+0x88>
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	6a3a      	ldr	r2, [r7, #32]
 8006376:	79f9      	ldrb	r1, [r7, #7]
 8006378:	4610      	mov	r0, r2
 800637a:	4798      	blx	r3
    }

    /*Call the event callback itself*/
    if(event_xcb) event_xcb(obj, event);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <lv_event_send_func+0x98>
 8006382:	79fa      	ldrb	r2, [r7, #7]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4611      	mov	r1, r2
 8006388:	68b8      	ldr	r0, [r7, #8]
 800638a:	4798      	blx	r3

    /*Restore the event data*/
    event_act_data = event_act_data_save;
 800638c:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <lv_event_send_func+0x100>)
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	6013      	str	r3, [r2, #0]

    /*Remove this element from the list*/
    event_temp_data_head = event_temp_data_head->prev;
 8006392:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <lv_event_send_func+0xfc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <lv_event_send_func+0xfc>)
 800639a:	6013      	str	r3, [r2, #0]

    if(event_temp_data.deleted) {
 800639c:	7d3b      	ldrb	r3, [r7, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <lv_event_send_func+0xb2>
        return LV_RES_INV;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e01d      	b.n	80063e2 <lv_event_send_func+0xee>
    }

    if(obj) {
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d019      	beq.n	80063e0 <lv_event_send_func+0xec>
        if(obj->parent_event && obj->parent) {
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d011      	beq.n	80063e0 <lv_event_send_func+0xec>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00d      	beq.n	80063e0 <lv_event_send_func+0xec>
            lv_res_t res = lv_event_send(obj->parent, event, data);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	79f9      	ldrb	r1, [r7, #7]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff ff63 	bl	8006298 <lv_event_send>
 80063d2:	4603      	mov	r3, r0
 80063d4:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) {
 80063d6:	7ffb      	ldrb	r3, [r7, #31]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d001      	beq.n	80063e0 <lv_event_send_func+0xec>
                return LV_RES_INV;
 80063dc:	2300      	movs	r3, #0
 80063de:	e000      	b.n	80063e2 <lv_event_send_func+0xee>
            }
        }
    }

    return LV_RES_OK;
 80063e0:	2301      	movs	r3, #1
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	372c      	adds	r7, #44	; 0x2c
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd90      	pop	{r4, r7, pc}
 80063ea:	bf00      	nop
 80063ec:	08028334 	.word	0x08028334
 80063f0:	200177a4 	.word	0x200177a4
 80063f4:	200177a8 	.word	0x200177a8

080063f8 <lv_signal_send>:
 * @param obj pointer to an object
 * @param event the type of the event from `lv_event_t`.
 * @return LV_RES_OK or LV_RES_INV
 */
lv_res_t lv_signal_send(lv_obj_t * obj, lv_signal_t signal, void * param)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	460b      	mov	r3, r1
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <lv_signal_send+0x18>
 800640c:	2301      	movs	r3, #1
 800640e:	e00e      	b.n	800642e <lv_signal_send+0x36>

    lv_res_t res = LV_RES_OK;
 8006410:	2301      	movs	r3, #1
 8006412:	75fb      	strb	r3, [r7, #23]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <lv_signal_send+0x34>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	7af9      	ldrb	r1, [r7, #11]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	4798      	blx	r3
 8006428:	4603      	mov	r3, r0
 800642a:	75fb      	strb	r3, [r7, #23]

    return res;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <lv_obj_refresh_ext_draw_pad>:
 * Send a 'LV_SIGNAL_REFR_EXT_SIZE' signal to the object to refresh the extended draw area.
 * he object needs to be invalidated by `lv_obj_invalidate(obj)` manually after this function.
 * @param obj pointer to an object
 */
void lv_obj_refresh_ext_draw_pad(lv_obj_t * obj)
{
 8006438:	b590      	push	{r4, r7, lr}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f015 fa07 	bl	801b854 <lv_debug_check_null>
 8006446:	4603      	mov	r3, r0
 8006448:	f083 0301 	eor.w	r3, r3, #1
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <lv_obj_refresh_ext_draw_pad+0x2c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f04f 0400 	mov.w	r4, #0
 8006458:	461a      	mov	r2, r3
 800645a:	4623      	mov	r3, r4
 800645c:	4808      	ldr	r0, [pc, #32]	; (8006480 <lv_obj_refresh_ext_draw_pad+0x48>)
 800645e:	f015 fa09 	bl	801b874 <lv_debug_log_error>
 8006462:	e7fe      	b.n	8006462 <lv_obj_refresh_ext_draw_pad+0x2a>

    obj->ext_draw_pad = 0;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	865a      	strh	r2, [r3, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	2200      	movs	r2, #0
 8006470:	2106      	movs	r1, #6
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3

}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	bd90      	pop	{r4, r7, pc}
 800647e:	bf00      	nop
 8006480:	08028334 	.word	0x08028334

08006484 <lv_obj_get_screen>:
 * Return with the screen of an object
 * @param obj pointer to an object
 * @return pointer to a screen
 */
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 8006484:	b590      	push	{r4, r7, lr}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f015 f9e1 	bl	801b854 <lv_debug_check_null>
 8006492:	4603      	mov	r3, r0
 8006494:	f083 0301 	eor.w	r3, r3, #1
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d008      	beq.n	80064b0 <lv_obj_get_screen+0x2c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f04f 0400 	mov.w	r4, #0
 80064a4:	461a      	mov	r2, r3
 80064a6:	4623      	mov	r3, r4
 80064a8:	4809      	ldr	r0, [pc, #36]	; (80064d0 <lv_obj_get_screen+0x4c>)
 80064aa:	f015 f9e3 	bl	801b874 <lv_debug_log_error>
 80064ae:	e7fe      	b.n	80064ae <lv_obj_get_screen+0x2a>

    const lv_obj_t * par = obj;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_p;

    do {
        act_p = par;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	60bb      	str	r3, [r7, #8]
        par   = lv_obj_get_parent(act_p);
 80064b8:	68b8      	ldr	r0, [r7, #8]
 80064ba:	f000 f859 	bl	8006570 <lv_obj_get_parent>
 80064be:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f6      	bne.n	80064b4 <lv_obj_get_screen+0x30>

    return (lv_obj_t *)act_p;
 80064c6:	68bb      	ldr	r3, [r7, #8]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd90      	pop	{r4, r7, pc}
 80064d0:	08028334 	.word	0x08028334

080064d4 <lv_obj_get_disp>:
 * Get the display of an object
 * @param scr pointer to an object
 * @return pointer the object's display
 */
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 80064d4:	b590      	push	{r4, r7, lr}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f015 f9b9 	bl	801b854 <lv_debug_check_null>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f083 0301 	eor.w	r3, r3, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d008      	beq.n	8006500 <lv_obj_get_disp+0x2c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f04f 0400 	mov.w	r4, #0
 80064f4:	461a      	mov	r2, r3
 80064f6:	4623      	mov	r3, r4
 80064f8:	481b      	ldr	r0, [pc, #108]	; (8006568 <lv_obj_get_disp+0x94>)
 80064fa:	f015 f9bb 	bl	801b874 <lv_debug_log_error>
 80064fe:	e7fe      	b.n	80064fe <lv_obj_get_disp+0x2a>

    const lv_obj_t * scr;

    if(obj->parent == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <lv_obj_get_disp+0x3a>
        scr = obj; /*`obj` is a screen*/
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e003      	b.n	8006516 <lv_obj_get_disp+0x42>
    else
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ffb8 	bl	8006484 <lv_obj_get_screen>
 8006514:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 8006516:	4815      	ldr	r0, [pc, #84]	; (800656c <lv_obj_get_disp+0x98>)
 8006518:	f015 fd52 	bl	801bfc0 <_lv_ll_get_head>
 800651c:	6138      	str	r0, [r7, #16]
 800651e:	e01b      	b.n	8006558 <lv_obj_get_disp+0x84>
        lv_obj_t * s;
        _LV_LL_READ(d->scr_ll, s) {
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	3338      	adds	r3, #56	; 0x38
 8006524:	4618      	mov	r0, r3
 8006526:	f015 fd4b 	bl	801bfc0 <_lv_ll_get_head>
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	e00c      	b.n	8006548 <lv_obj_get_disp+0x74>
            if(s == scr) return d;
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	429a      	cmp	r2, r3
 8006534:	d101      	bne.n	800653a <lv_obj_get_disp+0x66>
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	e012      	b.n	8006560 <lv_obj_get_disp+0x8c>
        _LV_LL_READ(d->scr_ll, s) {
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3338      	adds	r3, #56	; 0x38
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	4618      	mov	r0, r3
 8006542:	f015 fd63 	bl	801c00c <_lv_ll_get_next>
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1ef      	bne.n	800652e <lv_obj_get_disp+0x5a>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 800654e:	6939      	ldr	r1, [r7, #16]
 8006550:	4806      	ldr	r0, [pc, #24]	; (800656c <lv_obj_get_disp+0x98>)
 8006552:	f015 fd5b 	bl	801c00c <_lv_ll_get_next>
 8006556:	6138      	str	r0, [r7, #16]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e0      	bne.n	8006520 <lv_obj_get_disp+0x4c>
        }
    }

    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    return NULL;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	bd90      	pop	{r4, r7, pc}
 8006568:	08028334 	.word	0x08028334
 800656c:	200203a0 	.word	0x200203a0

08006570 <lv_obj_get_parent>:
 * Returns with the parent of an object
 * @param obj pointer to an object
 * @return pointer to the parent of  'obj'
 */
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 8006570:	b590      	push	{r4, r7, lr}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f015 f96b 	bl	801b854 <lv_debug_check_null>
 800657e:	4603      	mov	r3, r0
 8006580:	f083 0301 	eor.w	r3, r3, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <lv_obj_get_parent+0x2c>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f04f 0400 	mov.w	r4, #0
 8006590:	461a      	mov	r2, r3
 8006592:	4623      	mov	r3, r4
 8006594:	4804      	ldr	r0, [pc, #16]	; (80065a8 <lv_obj_get_parent+0x38>)
 8006596:	f015 f96d 	bl	801b874 <lv_debug_log_error>
 800659a:	e7fe      	b.n	800659a <lv_obj_get_parent+0x2a>

    return obj->parent;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd90      	pop	{r4, r7, pc}
 80065a8:	08028334 	.word	0x08028334

080065ac <lv_obj_get_child>:
 * @param child NULL at first call to get the next children
 *                  and the previous return value later
 * @return the child after 'act_child' or NULL if no more child
 */
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, const lv_obj_t * child)
{
 80065ac:	b590      	push	{r4, r7, lr}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f015 f94c 	bl	801b854 <lv_debug_check_null>
 80065bc:	4603      	mov	r3, r0
 80065be:	f083 0301 	eor.w	r3, r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d008      	beq.n	80065da <lv_obj_get_child+0x2e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f04f 0400 	mov.w	r4, #0
 80065ce:	461a      	mov	r2, r3
 80065d0:	4623      	mov	r3, r4
 80065d2:	480e      	ldr	r0, [pc, #56]	; (800660c <lv_obj_get_child+0x60>)
 80065d4:	f015 f94e 	bl	801b874 <lv_debug_log_error>
 80065d8:	e7fe      	b.n	80065d8 <lv_obj_get_child+0x2c>

    lv_obj_t * result = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]

    if(child == NULL) {
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d106      	bne.n	80065f2 <lv_obj_get_child+0x46>
        result = _lv_ll_get_head(&obj->child_ll);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4618      	mov	r0, r3
 80065ea:	f015 fce9 	bl	801bfc0 <_lv_ll_get_head>
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	e006      	b.n	8006600 <lv_obj_get_child+0x54>
    }
    else {
        result = _lv_ll_get_next(&obj->child_ll, child);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3304      	adds	r3, #4
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f015 fd07 	bl	801c00c <_lv_ll_get_next>
 80065fe:	60f8      	str	r0, [r7, #12]
    }

    return result;
 8006600:	68fb      	ldr	r3, [r7, #12]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bd90      	pop	{r4, r7, pc}
 800660a:	bf00      	nop
 800660c:	08028334 	.word	0x08028334

08006610 <lv_obj_get_coords>:
 * Copy the coordinates of an object to an area
 * @param obj pointer to an object
 * @param cords_p pointer to an area to store the coordinates
 */
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * cords_p)
{
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f015 f91a 	bl	801b854 <lv_debug_check_null>
 8006620:	4603      	mov	r3, r0
 8006622:	f083 0301 	eor.w	r3, r3, #1
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <lv_obj_get_coords+0x2e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f04f 0400 	mov.w	r4, #0
 8006632:	461a      	mov	r2, r3
 8006634:	4623      	mov	r3, r4
 8006636:	4807      	ldr	r0, [pc, #28]	; (8006654 <lv_obj_get_coords+0x44>)
 8006638:	f015 f91c 	bl	801b874 <lv_debug_log_error>
 800663c:	e7fe      	b.n	800663c <lv_obj_get_coords+0x2c>

    lv_area_copy(cords_p, &obj->coords);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3310      	adds	r3, #16
 8006642:	4619      	mov	r1, r3
 8006644:	6838      	ldr	r0, [r7, #0]
 8006646:	f7fd fc11 	bl	8003e6c <lv_area_copy>
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}
 8006652:	bf00      	nop
 8006654:	08028334 	.word	0x08028334

08006658 <lv_obj_get_x>:
 * Get the x coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the left side of its parent
 */
lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f015 f8f7 	bl	801b854 <lv_debug_check_null>
 8006666:	4603      	mov	r3, r0
 8006668:	f083 0301 	eor.w	r3, r3, #1
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d008      	beq.n	8006684 <lv_obj_get_x+0x2c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f04f 0400 	mov.w	r4, #0
 8006678:	461a      	mov	r2, r3
 800667a:	4623      	mov	r3, r4
 800667c:	480f      	ldr	r0, [pc, #60]	; (80066bc <lv_obj_get_x+0x64>)
 800667e:	f015 f8f9 	bl	801b874 <lv_debug_log_error>
 8006682:	e7fe      	b.n	8006682 <lv_obj_get_x+0x2a>

    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff ff73 	bl	8006570 <lv_obj_get_parent>
 800668a:	60b8      	str	r0, [r7, #8]
    if(parent) {
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00b      	beq.n	80066aa <lv_obj_get_x+0x52>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006698:	b29a      	uxth	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	81fb      	strh	r3, [r7, #14]
 80066a8:	e002      	b.n	80066b0 <lv_obj_get_x+0x58>
    }
    else {
        rel_x = obj->coords.x1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	8a1b      	ldrh	r3, [r3, #16]
 80066ae:	81fb      	strh	r3, [r7, #14]
    }
    return rel_x;
 80066b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd90      	pop	{r4, r7, pc}
 80066bc:	08028334 	.word	0x08028334

080066c0 <lv_obj_get_y>:
 * Get the y coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the top of its parent
 */
lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f015 f8c3 	bl	801b854 <lv_debug_check_null>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f083 0301 	eor.w	r3, r3, #1
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d008      	beq.n	80066ec <lv_obj_get_y+0x2c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f04f 0400 	mov.w	r4, #0
 80066e0:	461a      	mov	r2, r3
 80066e2:	4623      	mov	r3, r4
 80066e4:	480f      	ldr	r0, [pc, #60]	; (8006724 <lv_obj_get_y+0x64>)
 80066e6:	f015 f8c5 	bl	801b874 <lv_debug_log_error>
 80066ea:	e7fe      	b.n	80066ea <lv_obj_get_y+0x2a>

    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff3f 	bl	8006570 <lv_obj_get_parent>
 80066f2:	60b8      	str	r0, [r7, #8]
    if(parent) {
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <lv_obj_get_y+0x52>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006700:	b29a      	uxth	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006708:	b29b      	uxth	r3, r3
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	b29b      	uxth	r3, r3
 800670e:	81fb      	strh	r3, [r7, #14]
 8006710:	e002      	b.n	8006718 <lv_obj_get_y+0x58>
    }
    else {
        rel_y = obj->coords.y1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	8a5b      	ldrh	r3, [r3, #18]
 8006716:	81fb      	strh	r3, [r7, #14]
    }
    return rel_y;
 8006718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	bd90      	pop	{r4, r7, pc}
 8006724:	08028334 	.word	0x08028334

08006728 <lv_obj_get_width>:
 * Get the width of an object
 * @param obj pointer to an object
 * @return the width
 */
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8006728:	b590      	push	{r4, r7, lr}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f015 f88f 	bl	801b854 <lv_debug_check_null>
 8006736:	4603      	mov	r3, r0
 8006738:	f083 0301 	eor.w	r3, r3, #1
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d008      	beq.n	8006754 <lv_obj_get_width+0x2c>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f04f 0400 	mov.w	r4, #0
 8006748:	461a      	mov	r2, r3
 800674a:	4623      	mov	r3, r4
 800674c:	4806      	ldr	r0, [pc, #24]	; (8006768 <lv_obj_get_width+0x40>)
 800674e:	f015 f891 	bl	801b874 <lv_debug_log_error>
 8006752:	e7fe      	b.n	8006752 <lv_obj_get_width+0x2a>

    return lv_area_get_width(&obj->coords);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3310      	adds	r3, #16
 8006758:	4618      	mov	r0, r3
 800675a:	f7fd fb95 	bl	8003e88 <lv_area_get_width>
 800675e:	4603      	mov	r3, r0
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	bd90      	pop	{r4, r7, pc}
 8006768:	08028334 	.word	0x08028334

0800676c <lv_obj_get_height>:
 * Get the height of an object
 * @param obj pointer to an object
 * @return the height
 */
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 800676c:	b590      	push	{r4, r7, lr}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f015 f86d 	bl	801b854 <lv_debug_check_null>
 800677a:	4603      	mov	r3, r0
 800677c:	f083 0301 	eor.w	r3, r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d008      	beq.n	8006798 <lv_obj_get_height+0x2c>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f04f 0400 	mov.w	r4, #0
 800678c:	461a      	mov	r2, r3
 800678e:	4623      	mov	r3, r4
 8006790:	4806      	ldr	r0, [pc, #24]	; (80067ac <lv_obj_get_height+0x40>)
 8006792:	f015 f86f 	bl	801b874 <lv_debug_log_error>
 8006796:	e7fe      	b.n	8006796 <lv_obj_get_height+0x2a>

    return lv_area_get_height(&obj->coords);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3310      	adds	r3, #16
 800679c:	4618      	mov	r0, r3
 800679e:	f7fd fb8a 	bl	8003eb6 <lv_area_get_height>
 80067a2:	4603      	mov	r3, r0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd90      	pop	{r4, r7, pc}
 80067ac:	08028334 	.word	0x08028334

080067b0 <lv_obj_get_style_list>:
/*-----------------
 * Appearance get
 *---------------*/

lv_style_list_t * lv_obj_get_style_list(const lv_obj_t * obj, uint8_t part)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <lv_obj_get_style_list+0x18>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3328      	adds	r3, #40	; 0x28
 80067c6:	e012      	b.n	80067ee <lv_obj_get_style_list+0x3e>

    lv_get_style_info_t info;
    info.part = part;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	733b      	strb	r3, [r7, #12]
    info.result = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	613b      	str	r3, [r7, #16]

    lv_res_t res;
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 80067d0:	f107 030c 	add.w	r3, r7, #12
 80067d4:	461a      	mov	r2, r3
 80067d6:	2108      	movs	r1, #8
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff fe0d 	bl	80063f8 <lv_signal_send>
 80067de:	4603      	mov	r3, r0
 80067e0:	75fb      	strb	r3, [r7, #23]

    if(res != LV_RES_OK) return NULL;
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d001      	beq.n	80067ec <lv_obj_get_style_list+0x3c>
 80067e8:	2300      	movs	r3, #0
 80067ea:	e000      	b.n	80067ee <lv_obj_get_style_list+0x3e>

    return info.result;
 80067ec:	693b      	ldr	r3, [r7, #16]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <_lv_obj_get_style_int>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_width()`
 * @note for performance reasons it's not checked if the property really has integer type
 */
lv_style_int_t _lv_obj_get_style_int(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b088      	sub	sp, #32
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
 8006802:	4613      	mov	r3, r2
 8006804:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8006806:	883b      	ldrh	r3, [r7, #0]
 8006808:	833b      	strh	r3, [r7, #24]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 800680a:	8b3b      	ldrh	r3, [r7, #24]
 800680c:	0a1b      	lsrs	r3, r3, #8
 800680e:	b29b      	uxth	r3, r3
 8006810:	75fb      	strb	r3, [r7, #23]

    lv_style_int_t value_act;
    lv_res_t res = LV_RES_INV;
 8006812:	2300      	movs	r3, #0
 8006814:	75bb      	strb	r3, [r7, #22]
    const lv_obj_t * parent = obj;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	61fb      	str	r3, [r7, #28]
    while(parent) {
 800681a:	e14a      	b.n	8006ab2 <_lv_obj_get_style_int+0x2bc>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	4619      	mov	r1, r3
 8006820:	69f8      	ldr	r0, [r7, #28]
 8006822:	f7ff ffc5 	bl	80067b0 <lv_obj_get_style_list>
 8006826:	6138      	str	r0, [r7, #16]
        if(!list->ignore_cache && list->style_cnt > 0) {
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	795b      	ldrb	r3, [r3, #5]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	f040 8112 	bne.w	8006a5c <_lv_obj_get_style_int+0x266>
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	791b      	ldrb	r3, [r3, #4]
 800683c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 810a 	beq.w	8006a5c <_lv_obj_get_style_int+0x266>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	795b      	ldrb	r3, [r3, #5]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d108      	bne.n	8006868 <_lv_obj_get_style_int+0x72>
 8006856:	883b      	ldrh	r3, [r7, #0]
 8006858:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800685c:	b29a      	uxth	r2, r3
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	4619      	mov	r1, r3
 8006862:	69f8      	ldr	r0, [r7, #28]
 8006864:	f002 fd4c 	bl	8009300 <update_style_cache>

            bool def = false;
 8006868:	2300      	movs	r3, #0
 800686a:	76fb      	strb	r3, [r7, #27]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 800686c:	883b      	ldrh	r3, [r7, #0]
 800686e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006872:	2b33      	cmp	r3, #51	; 0x33
 8006874:	f000 8086 	beq.w	8006984 <_lv_obj_get_style_int+0x18e>
 8006878:	2b33      	cmp	r3, #51	; 0x33
 800687a:	dc23      	bgt.n	80068c4 <_lv_obj_get_style_int+0xce>
 800687c:	2b13      	cmp	r3, #19
 800687e:	dc0f      	bgt.n	80068a0 <_lv_obj_get_style_int+0xaa>
 8006880:	2b10      	cmp	r3, #16
 8006882:	f280 80a7 	bge.w	80069d4 <_lv_obj_get_style_int+0x1de>
 8006886:	2b02      	cmp	r3, #2
 8006888:	d04a      	beq.n	8006920 <_lv_obj_get_style_int+0x12a>
 800688a:	2b02      	cmp	r3, #2
 800688c:	dc03      	bgt.n	8006896 <_lv_obj_get_style_int+0xa0>
 800688e:	2b01      	cmp	r3, #1
 8006890:	f000 808c 	beq.w	80069ac <_lv_obj_get_style_int+0x1b6>
 8006894:	e0df      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
 8006896:	3b04      	subs	r3, #4
 8006898:	2b03      	cmp	r3, #3
 800689a:	f200 80dc 	bhi.w	8006a56 <_lv_obj_get_style_int+0x260>
 800689e:	e053      	b.n	8006948 <_lv_obj_get_style_int+0x152>
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	f000 80ab 	beq.w	80069fc <_lv_obj_get_style_int+0x206>
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	dc04      	bgt.n	80068b4 <_lv_obj_get_style_int+0xbe>
 80068aa:	3b15      	subs	r3, #21
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	f200 80d2 	bhi.w	8006a56 <_lv_obj_get_style_int+0x260>
 80068b2:	e099      	b.n	80069e8 <_lv_obj_get_style_int+0x1f2>
 80068b4:	2b31      	cmp	r3, #49	; 0x31
 80068b6:	d05b      	beq.n	8006970 <_lv_obj_get_style_int+0x17a>
 80068b8:	2b31      	cmp	r3, #49	; 0x31
 80068ba:	f300 809f 	bgt.w	80069fc <_lv_obj_get_style_int+0x206>
 80068be:	2b30      	cmp	r3, #48	; 0x30
 80068c0:	d04c      	beq.n	800695c <_lv_obj_get_style_int+0x166>
 80068c2:	e0c8      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
 80068c4:	2b72      	cmp	r3, #114	; 0x72
 80068c6:	f000 8099 	beq.w	80069fc <_lv_obj_get_style_int+0x206>
 80068ca:	2b72      	cmp	r3, #114	; 0x72
 80068cc:	dc10      	bgt.n	80068f0 <_lv_obj_get_style_int+0xfa>
 80068ce:	2b50      	cmp	r3, #80	; 0x50
 80068d0:	d076      	beq.n	80069c0 <_lv_obj_get_style_int+0x1ca>
 80068d2:	2b50      	cmp	r3, #80	; 0x50
 80068d4:	dc05      	bgt.n	80068e2 <_lv_obj_get_style_int+0xec>
 80068d6:	2b40      	cmp	r3, #64	; 0x40
 80068d8:	d05e      	beq.n	8006998 <_lv_obj_get_style_int+0x1a2>
 80068da:	2b42      	cmp	r3, #66	; 0x42
 80068dc:	f000 808e 	beq.w	80069fc <_lv_obj_get_style_int+0x206>
 80068e0:	e0b9      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
 80068e2:	2b54      	cmp	r3, #84	; 0x54
 80068e4:	f000 808a 	beq.w	80069fc <_lv_obj_get_style_int+0x206>
 80068e8:	2b60      	cmp	r3, #96	; 0x60
 80068ea:	f000 8087 	beq.w	80069fc <_lv_obj_get_style_int+0x206>
 80068ee:	e0b2      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
 80068f0:	f248 0281 	movw	r2, #32897	; 0x8081
 80068f4:	4293      	cmp	r3, r2
 80068f6:	dc06      	bgt.n	8006906 <_lv_obj_get_style_int+0x110>
 80068f8:	f248 0280 	movw	r2, #32896	; 0x8080
 80068fc:	4293      	cmp	r3, r2
 80068fe:	da19      	bge.n	8006934 <_lv_obj_get_style_int+0x13e>
 8006900:	2b91      	cmp	r3, #145	; 0x91
 8006902:	d07b      	beq.n	80069fc <_lv_obj_get_style_int+0x206>
 8006904:	e0a7      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
 8006906:	f248 0283 	movw	r2, #32899	; 0x8083
 800690a:	4293      	cmp	r3, r2
 800690c:	d076      	beq.n	80069fc <_lv_obj_get_style_int+0x206>
 800690e:	f248 0283 	movw	r2, #32899	; 0x8083
 8006912:	4293      	cmp	r3, r2
 8006914:	db7c      	blt.n	8006a10 <_lv_obj_get_style_int+0x21a>
 8006916:	f248 02a0 	movw	r2, #32928	; 0x80a0
 800691a:	4293      	cmp	r3, r2
 800691c:	d06e      	beq.n	80069fc <_lv_obj_get_style_int+0x206>
 800691e:	e09a      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                case LV_STYLE_CLIP_CORNER:
                    if(list->clip_corner_off) def = true;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	795b      	ldrb	r3, [r3, #5]
 8006924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d07a      	beq.n	8006a24 <_lv_obj_get_style_int+0x22e>
 800692e:	2301      	movs	r3, #1
 8006930:	76fb      	strb	r3, [r7, #27]
                    break;
 8006932:	e077      	b.n	8006a24 <_lv_obj_get_style_int+0x22e>
                case LV_STYLE_TEXT_LETTER_SPACE:
                case LV_STYLE_TEXT_LINE_SPACE:
                    if(list->text_space_zero) def = true;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	79db      	ldrb	r3, [r3, #7]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d072      	beq.n	8006a28 <_lv_obj_get_style_int+0x232>
 8006942:	2301      	movs	r3, #1
 8006944:	76fb      	strb	r3, [r7, #27]
                    break;
 8006946:	e06f      	b.n	8006a28 <_lv_obj_get_style_int+0x232>
                case LV_STYLE_TRANSFORM_ANGLE:
                case LV_STYLE_TRANSFORM_WIDTH:
                case LV_STYLE_TRANSFORM_HEIGHT:
                case LV_STYLE_TRANSFORM_ZOOM:
                    if(list->transform_all_zero) def = true;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	795b      	ldrb	r3, [r3, #5]
 800694c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d06a      	beq.n	8006a2c <_lv_obj_get_style_int+0x236>
 8006956:	2301      	movs	r3, #1
 8006958:	76fb      	strb	r3, [r7, #27]
                    break;
 800695a:	e067      	b.n	8006a2c <_lv_obj_get_style_int+0x236>
                case LV_STYLE_BORDER_WIDTH:
                    if(list->border_width_zero) def = true;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	799b      	ldrb	r3, [r3, #6]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d062      	beq.n	8006a30 <_lv_obj_get_style_int+0x23a>
 800696a:	2301      	movs	r3, #1
 800696c:	76fb      	strb	r3, [r7, #27]
                    break;
 800696e:	e05f      	b.n	8006a30 <_lv_obj_get_style_int+0x23a>
                case LV_STYLE_BORDER_SIDE:
                    if(list->border_side_full) def = true;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	799b      	ldrb	r3, [r3, #6]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d05a      	beq.n	8006a34 <_lv_obj_get_style_int+0x23e>
 800697e:	2301      	movs	r3, #1
 8006980:	76fb      	strb	r3, [r7, #27]
                    break;
 8006982:	e057      	b.n	8006a34 <_lv_obj_get_style_int+0x23e>
                case LV_STYLE_BORDER_POST:
                    if(list->border_post_off) def = true;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	799b      	ldrb	r3, [r3, #6]
 8006988:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d052      	beq.n	8006a38 <_lv_obj_get_style_int+0x242>
 8006992:	2301      	movs	r3, #1
 8006994:	76fb      	strb	r3, [r7, #27]
                    break;
 8006996:	e04f      	b.n	8006a38 <_lv_obj_get_style_int+0x242>
                case LV_STYLE_OUTLINE_WIDTH:
                    if(list->outline_width_zero) def = true;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	79db      	ldrb	r3, [r3, #7]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d04a      	beq.n	8006a3c <_lv_obj_get_style_int+0x246>
 80069a6:	2301      	movs	r3, #1
 80069a8:	76fb      	strb	r3, [r7, #27]
                    break;
 80069aa:	e047      	b.n	8006a3c <_lv_obj_get_style_int+0x246>
                case LV_STYLE_RADIUS:
                    if(list->radius_zero) def = true;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	795b      	ldrb	r3, [r3, #5]
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d042      	beq.n	8006a40 <_lv_obj_get_style_int+0x24a>
 80069ba:	2301      	movs	r3, #1
 80069bc:	76fb      	strb	r3, [r7, #27]
                    break;
 80069be:	e03f      	b.n	8006a40 <_lv_obj_get_style_int+0x24a>
                case LV_STYLE_SHADOW_WIDTH:
                    if(list->shadow_width_zero) def = true;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	79db      	ldrb	r3, [r3, #7]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d03a      	beq.n	8006a44 <_lv_obj_get_style_int+0x24e>
 80069ce:	2301      	movs	r3, #1
 80069d0:	76fb      	strb	r3, [r7, #27]
                    break;
 80069d2:	e037      	b.n	8006a44 <_lv_obj_get_style_int+0x24e>
                case LV_STYLE_PAD_TOP:
                case LV_STYLE_PAD_BOTTOM:
                case LV_STYLE_PAD_LEFT:
                case LV_STYLE_PAD_RIGHT:
                    if(list->pad_all_zero) def = true;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	799b      	ldrb	r3, [r3, #6]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d032      	beq.n	8006a48 <_lv_obj_get_style_int+0x252>
 80069e2:	2301      	movs	r3, #1
 80069e4:	76fb      	strb	r3, [r7, #27]
                    break;
 80069e6:	e02f      	b.n	8006a48 <_lv_obj_get_style_int+0x252>
                case LV_STYLE_MARGIN_TOP:
                case LV_STYLE_MARGIN_BOTTOM:
                case LV_STYLE_MARGIN_LEFT:
                case LV_STYLE_MARGIN_RIGHT:
                    if(list->margin_all_zero) def = true;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	799b      	ldrb	r3, [r3, #6]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d02a      	beq.n	8006a4c <_lv_obj_get_style_int+0x256>
 80069f6:	2301      	movs	r3, #1
 80069f8:	76fb      	strb	r3, [r7, #27]
                    break;
 80069fa:	e027      	b.n	8006a4c <_lv_obj_get_style_int+0x256>
                case LV_STYLE_OUTLINE_BLEND_MODE:
                case LV_STYLE_PATTERN_BLEND_MODE:
                case LV_STYLE_SHADOW_BLEND_MODE:
                case LV_STYLE_TEXT_BLEND_MODE:
                case LV_STYLE_VALUE_BLEND_MODE:
                    if(list->blend_mode_all_normal) def = true;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	799b      	ldrb	r3, [r3, #6]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d022      	beq.n	8006a50 <_lv_obj_get_style_int+0x25a>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	76fb      	strb	r3, [r7, #27]
                    break;
 8006a0e:	e01f      	b.n	8006a50 <_lv_obj_get_style_int+0x25a>
                case LV_STYLE_TEXT_DECOR:
                    if(list->text_decor_none) def = true;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	79db      	ldrb	r3, [r3, #7]
 8006a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01a      	beq.n	8006a54 <_lv_obj_get_style_int+0x25e>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	76fb      	strb	r3, [r7, #27]
                    break;
 8006a22:	e017      	b.n	8006a54 <_lv_obj_get_style_int+0x25e>
                    break;
 8006a24:	bf00      	nop
 8006a26:	e016      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a28:	bf00      	nop
 8006a2a:	e014      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a2c:	bf00      	nop
 8006a2e:	e012      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a30:	bf00      	nop
 8006a32:	e010      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a34:	bf00      	nop
 8006a36:	e00e      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a38:	bf00      	nop
 8006a3a:	e00c      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a3c:	bf00      	nop
 8006a3e:	e00a      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a40:	bf00      	nop
 8006a42:	e008      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a44:	bf00      	nop
 8006a46:	e006      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a48:	bf00      	nop
 8006a4a:	e004      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a4c:	bf00      	nop
 8006a4e:	e002      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a50:	bf00      	nop
 8006a52:	e000      	b.n	8006a56 <_lv_obj_get_style_int+0x260>
                    break;
 8006a54:	bf00      	nop
            }

            if(def) {
 8006a56:	7efb      	ldrb	r3, [r7, #27]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d12f      	bne.n	8006abc <_lv_obj_get_style_int+0x2c6>
                break;
            }
        }

        lv_state_t state = lv_obj_get_state(parent, part);
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	69f8      	ldr	r0, [r7, #28]
 8006a62:	f000 fb7b 	bl	800715c <lv_obj_get_state>
 8006a66:	4603      	mov	r3, r0
 8006a68:	73fb      	strb	r3, [r7, #15]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	021b      	lsls	r3, r3, #8
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	8b3b      	ldrh	r3, [r7, #24]
 8006a74:	4413      	add	r3, r2
 8006a76:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_int(list, prop, &value_act);
 8006a78:	f107 020c 	add.w	r2, r7, #12
 8006a7c:	883b      	ldrh	r3, [r7, #0]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6938      	ldr	r0, [r7, #16]
 8006a82:	f005 f893 	bl	800bbac <_lv_style_list_get_int>
 8006a86:	4603      	mov	r3, r0
 8006a88:	75bb      	strb	r3, [r7, #22]
        if(res == LV_RES_OK) return value_act;
 8006a8a:	7dbb      	ldrb	r3, [r7, #22]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d102      	bne.n	8006a96 <_lv_obj_get_style_int+0x2a0>
 8006a90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a94:	e034      	b.n	8006b00 <_lv_obj_get_style_int+0x30a>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	da10      	bge.n	8006ac0 <_lv_obj_get_style_int+0x2ca>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 8006a9e:	78fb      	ldrb	r3, [r7, #3]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <_lv_obj_get_style_int+0x2b4>
            part = LV_OBJ_PART_MAIN;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	70fb      	strb	r3, [r7, #3]
            continue;
 8006aa8:	e003      	b.n	8006ab2 <_lv_obj_get_style_int+0x2bc>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 8006aaa:	69f8      	ldr	r0, [r7, #28]
 8006aac:	f7ff fd60 	bl	8006570 <lv_obj_get_parent>
 8006ab0:	61f8      	str	r0, [r7, #28]
    while(parent) {
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f47f aeb1 	bne.w	800681c <_lv_obj_get_style_int+0x26>
 8006aba:	e002      	b.n	8006ac2 <_lv_obj_get_style_int+0x2cc>
                break;
 8006abc:	bf00      	nop
 8006abe:	e000      	b.n	8006ac2 <_lv_obj_get_style_int+0x2cc>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006ac0:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 8006ac2:	883b      	ldrh	r3, [r7, #0]
 8006ac4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ac8:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 8006aca:	883b      	ldrh	r3, [r7, #0]
 8006acc:	2b22      	cmp	r3, #34	; 0x22
 8006ace:	d011      	beq.n	8006af4 <_lv_obj_get_style_int+0x2fe>
 8006ad0:	2b22      	cmp	r3, #34	; 0x22
 8006ad2:	dc04      	bgt.n	8006ade <_lv_obj_get_style_int+0x2e8>
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d009      	beq.n	8006aec <_lv_obj_get_style_int+0x2f6>
 8006ad8:	2b07      	cmp	r3, #7
 8006ada:	d00d      	beq.n	8006af8 <_lv_obj_get_style_int+0x302>
 8006adc:	e00f      	b.n	8006afe <_lv_obj_get_style_int+0x308>
 8006ade:	2b31      	cmp	r3, #49	; 0x31
 8006ae0:	d002      	beq.n	8006ae8 <_lv_obj_get_style_int+0x2f2>
 8006ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ae4:	d004      	beq.n	8006af0 <_lv_obj_get_style_int+0x2fa>
 8006ae6:	e00a      	b.n	8006afe <_lv_obj_get_style_int+0x308>
        case LV_STYLE_BORDER_SIDE:
            return LV_BORDER_SIDE_FULL;
 8006ae8:	230f      	movs	r3, #15
 8006aea:	e009      	b.n	8006b00 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_SIZE:
            return LV_DPI / 20;
 8006aec:	2306      	movs	r3, #6
 8006aee:	e007      	b.n	8006b00 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_SCALE_WIDTH:
            return LV_DPI / 8;
 8006af0:	2310      	movs	r3, #16
 8006af2:	e005      	b.n	8006b00 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_BG_GRAD_STOP:
            return 255;
 8006af4:	23ff      	movs	r3, #255	; 0xff
 8006af6:	e003      	b.n	8006b00 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_TRANSFORM_ZOOM:
            return LV_IMG_ZOOM_NONE;
 8006af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006afc:	e000      	b.n	8006b00 <_lv_obj_get_style_int+0x30a>
    }

    return 0;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3720      	adds	r7, #32
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <_lv_obj_get_style_color>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_color()`
 * @note for performance reasons it's not checked if the property really has color type
 */
lv_color_t _lv_obj_get_style_color(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8006b08:	b590      	push	{r4, r7, lr}
 8006b0a:	b089      	sub	sp, #36	; 0x24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
 8006b14:	4613      	mov	r3, r2
 8006b16:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8006b18:	883b      	ldrh	r3, [r7, #0]
 8006b1a:	837b      	strh	r3, [r7, #26]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 8006b1c:	8b7b      	ldrh	r3, [r7, #26]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	767b      	strb	r3, [r7, #25]

    lv_color_t value_act;
    lv_res_t res = LV_RES_INV;
 8006b24:	2300      	movs	r3, #0
 8006b26:	763b      	strb	r3, [r7, #24]
    const lv_obj_t * parent = obj;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	61fb      	str	r3, [r7, #28]
    while(parent) {
 8006b2c:	e02f      	b.n	8006b8e <_lv_obj_get_style_color+0x86>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	4619      	mov	r1, r3
 8006b32:	69f8      	ldr	r0, [r7, #28]
 8006b34:	f7ff fe3c 	bl	80067b0 <lv_obj_get_style_list>
 8006b38:	6178      	str	r0, [r7, #20]

        lv_state_t state = lv_obj_get_state(parent, part);
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	69f8      	ldr	r0, [r7, #28]
 8006b40:	f000 fb0c 	bl	800715c <lv_obj_get_state>
 8006b44:	4603      	mov	r3, r0
 8006b46:	74fb      	strb	r3, [r7, #19]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8006b48:	7cfb      	ldrb	r3, [r7, #19]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	8b7b      	ldrh	r3, [r7, #26]
 8006b52:	4413      	add	r3, r2
 8006b54:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_color(list, prop, &value_act);
 8006b56:	f107 020c 	add.w	r2, r7, #12
 8006b5a:	883b      	ldrh	r3, [r7, #0]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6978      	ldr	r0, [r7, #20]
 8006b60:	f005 f8a2 	bl	800bca8 <_lv_style_list_get_color>
 8006b64:	4603      	mov	r3, r0
 8006b66:	763b      	strb	r3, [r7, #24]
        if(res == LV_RES_OK) return value_act;
 8006b68:	7e3b      	ldrb	r3, [r7, #24]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <_lv_obj_get_style_color+0x6a>
 8006b6e:	68fc      	ldr	r4, [r7, #12]
 8006b70:	e030      	b.n	8006bd4 <_lv_obj_get_style_color+0xcc>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006b72:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	da0d      	bge.n	8006b96 <_lv_obj_get_style_color+0x8e>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <_lv_obj_get_style_color+0x7e>
            part = LV_OBJ_PART_MAIN;
 8006b80:	2300      	movs	r3, #0
 8006b82:	70fb      	strb	r3, [r7, #3]
            continue;
 8006b84:	e003      	b.n	8006b8e <_lv_obj_get_style_color+0x86>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 8006b86:	69f8      	ldr	r0, [r7, #28]
 8006b88:	f7ff fcf2 	bl	8006570 <lv_obj_get_parent>
 8006b8c:	61f8      	str	r0, [r7, #28]
    while(parent) {
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1cc      	bne.n	8006b2e <_lv_obj_get_style_color+0x26>
 8006b94:	e000      	b.n	8006b98 <_lv_obj_get_style_color+0x90>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006b96:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 8006b98:	883b      	ldrh	r3, [r7, #0]
 8006b9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b9e:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 8006ba0:	883b      	ldrh	r3, [r7, #0]
 8006ba2:	3b29      	subs	r3, #41	; 0x29
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d80c      	bhi.n	8006bc2 <_lv_obj_get_style_color+0xba>
        case LV_STYLE_BG_COLOR:
        case LV_STYLE_BG_GRAD_COLOR:
            return LV_COLOR_WHITE;
 8006ba8:	4623      	mov	r3, r4
 8006baa:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 8006bae:	4623      	mov	r3, r4
 8006bb0:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 8006bb4:	4623      	mov	r3, r4
 8006bb6:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 8006bba:	4623      	mov	r3, r4
 8006bbc:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8006bc0:	e008      	b.n	8006bd4 <_lv_obj_get_style_color+0xcc>
    }

    return LV_COLOR_BLACK;
 8006bc2:	f36f 0407 	bfc	r4, #0, #8
 8006bc6:	f36f 240f 	bfc	r4, #8, #8
 8006bca:	f36f 4417 	bfc	r4, #16, #8
 8006bce:	4623      	mov	r3, r4
 8006bd0:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8006bd4:	4623      	mov	r3, r4
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3724      	adds	r7, #36	; 0x24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd90      	pop	{r4, r7, pc}

08006bde <_lv_obj_get_style_opa>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_opa()`
 * @note for performance reasons it's not checked if the property really has opacity type
 */
lv_opa_t _lv_obj_get_style_opa(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b088      	sub	sp, #32
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
 8006bea:	4613      	mov	r3, r2
 8006bec:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8006bee:	883b      	ldrh	r3, [r7, #0]
 8006bf0:	833b      	strh	r3, [r7, #24]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 8006bf2:	8b3b      	ldrh	r3, [r7, #24]
 8006bf4:	0a1b      	lsrs	r3, r3, #8
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	75fb      	strb	r3, [r7, #23]

    lv_opa_t value_act;
    lv_res_t res = LV_RES_INV;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75bb      	strb	r3, [r7, #22]
    const lv_obj_t * parent = obj;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	61fb      	str	r3, [r7, #28]
    while(parent) {
 8006c02:	e08c      	b.n	8006d1e <_lv_obj_get_style_opa+0x140>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	4619      	mov	r1, r3
 8006c08:	69f8      	ldr	r0, [r7, #28]
 8006c0a:	f7ff fdd1 	bl	80067b0 <lv_obj_get_style_list>
 8006c0e:	6138      	str	r0, [r7, #16]

        if(!list->ignore_cache && list->style_cnt > 0) {
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	795b      	ldrb	r3, [r3, #5]
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d155      	bne.n	8006cca <_lv_obj_get_style_opa+0xec>
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	791b      	ldrb	r3, [r3, #4]
 8006c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d04e      	beq.n	8006cca <_lv_obj_get_style_opa+0xec>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	795b      	ldrb	r3, [r3, #5]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d108      	bne.n	8006c4c <_lv_obj_get_style_opa+0x6e>
 8006c3a:	883b      	ldrh	r3, [r7, #0]
 8006c3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	4619      	mov	r1, r3
 8006c46:	69f8      	ldr	r0, [r7, #28]
 8006c48:	f002 fb5a 	bl	8009300 <update_style_cache>
            bool def = false;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	76fb      	strb	r3, [r7, #27]
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 8006c50:	883b      	ldrh	r3, [r7, #0]
 8006c52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c56:	f248 020c 	movw	r2, #32780	; 0x800c
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d006      	beq.n	8006c6c <_lv_obj_get_style_opa+0x8e>
 8006c5e:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d01f      	beq.n	8006ca6 <_lv_obj_get_style_opa+0xc8>
 8006c66:	2b2c      	cmp	r3, #44	; 0x2c
 8006c68:	d00a      	beq.n	8006c80 <_lv_obj_get_style_opa+0xa2>
 8006c6a:	e02b      	b.n	8006cc4 <_lv_obj_get_style_opa+0xe6>
                case LV_STYLE_OPA_SCALE:
                    if(list->opa_scale_cover) def = true;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	795b      	ldrb	r3, [r3, #5]
 8006c70:	f003 0320 	and.w	r3, r3, #32
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01f      	beq.n	8006cba <_lv_obj_get_style_opa+0xdc>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	76fb      	strb	r3, [r7, #27]
                    break;
 8006c7e:	e01c      	b.n	8006cba <_lv_obj_get_style_opa+0xdc>
                case LV_STYLE_BG_OPA:
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	799b      	ldrb	r3, [r3, #6]
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <_lv_obj_get_style_opa+0xb4>
 8006c8e:	23ff      	movs	r3, #255	; 0xff
 8006c90:	e05d      	b.n	8006d4e <_lv_obj_get_style_opa+0x170>
                    if(list->bg_opa_transp) def = true;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	799b      	ldrb	r3, [r3, #6]
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00e      	beq.n	8006cbe <_lv_obj_get_style_opa+0xe0>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	76fb      	strb	r3, [r7, #27]
                    break;
 8006ca4:	e00b      	b.n	8006cbe <_lv_obj_get_style_opa+0xe0>
                case LV_STYLE_IMAGE_RECOLOR_OPA:
                    if(list->img_recolor_opa_transp) def = true;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	79db      	ldrb	r3, [r3, #7]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d006      	beq.n	8006cc2 <_lv_obj_get_style_opa+0xe4>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	76fb      	strb	r3, [r7, #27]
                    break;
 8006cb8:	e003      	b.n	8006cc2 <_lv_obj_get_style_opa+0xe4>
                    break;
 8006cba:	bf00      	nop
 8006cbc:	e002      	b.n	8006cc4 <_lv_obj_get_style_opa+0xe6>
                    break;
 8006cbe:	bf00      	nop
 8006cc0:	e000      	b.n	8006cc4 <_lv_obj_get_style_opa+0xe6>
                    break;
 8006cc2:	bf00      	nop
            }

            if(def) {
 8006cc4:	7efb      	ldrb	r3, [r7, #27]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d12e      	bne.n	8006d28 <_lv_obj_get_style_opa+0x14a>
                break;
            }
        }

        lv_state_t state = lv_obj_get_state(parent, part);
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	69f8      	ldr	r0, [r7, #28]
 8006cd0:	f000 fa44 	bl	800715c <lv_obj_get_state>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73fb      	strb	r3, [r7, #15]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	021b      	lsls	r3, r3, #8
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	8b3b      	ldrh	r3, [r7, #24]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_opa(list, prop, &value_act);
 8006ce6:	f107 020e 	add.w	r2, r7, #14
 8006cea:	883b      	ldrh	r3, [r7, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6938      	ldr	r0, [r7, #16]
 8006cf0:	f005 f857 	bl	800bda2 <_lv_style_list_get_opa>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	75bb      	strb	r3, [r7, #22]
        if(res == LV_RES_OK) return value_act;
 8006cf8:	7dbb      	ldrb	r3, [r7, #22]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <_lv_obj_get_style_opa+0x124>
 8006cfe:	7bbb      	ldrb	r3, [r7, #14]
 8006d00:	e025      	b.n	8006d4e <_lv_obj_get_style_opa+0x170>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006d02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da10      	bge.n	8006d2c <_lv_obj_get_style_opa+0x14e>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <_lv_obj_get_style_opa+0x138>
            part = LV_OBJ_PART_MAIN;
 8006d10:	2300      	movs	r3, #0
 8006d12:	70fb      	strb	r3, [r7, #3]
            continue;
 8006d14:	e003      	b.n	8006d1e <_lv_obj_get_style_opa+0x140>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 8006d16:	69f8      	ldr	r0, [r7, #28]
 8006d18:	f7ff fc2a 	bl	8006570 <lv_obj_get_parent>
 8006d1c:	61f8      	str	r0, [r7, #28]
    while(parent) {
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f47f af6f 	bne.w	8006c04 <_lv_obj_get_style_opa+0x26>
 8006d26:	e002      	b.n	8006d2e <_lv_obj_get_style_opa+0x150>
                break;
 8006d28:	bf00      	nop
 8006d2a:	e000      	b.n	8006d2e <_lv_obj_get_style_opa+0x150>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006d2c:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 8006d2e:	883b      	ldrh	r3, [r7, #0]
 8006d30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d34:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 8006d36:	883b      	ldrh	r3, [r7, #0]
 8006d38:	2b6d      	cmp	r3, #109	; 0x6d
 8006d3a:	d005      	beq.n	8006d48 <_lv_obj_get_style_opa+0x16a>
 8006d3c:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d001      	beq.n	8006d48 <_lv_obj_get_style_opa+0x16a>
 8006d44:	2b2c      	cmp	r3, #44	; 0x2c
 8006d46:	d101      	bne.n	8006d4c <_lv_obj_get_style_opa+0x16e>
        case LV_STYLE_BG_OPA:
        case LV_STYLE_IMAGE_RECOLOR_OPA:
        case LV_STYLE_PATTERN_RECOLOR_OPA:
            return LV_OPA_TRANSP;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e000      	b.n	8006d4e <_lv_obj_get_style_opa+0x170>
    }

    return LV_OPA_COVER;
 8006d4c:	23ff      	movs	r3, #255	; 0xff
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <_lv_obj_get_style_ptr>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_opa()`
 * @note for performance reasons it's not checked if the property really has pointer type
 */
const void * _lv_obj_get_style_ptr(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70fb      	strb	r3, [r7, #3]
 8006d64:	4613      	mov	r3, r2
 8006d66:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8006d68:	883b      	ldrh	r3, [r7, #0]
 8006d6a:	833b      	strh	r3, [r7, #24]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 8006d6c:	8b3b      	ldrh	r3, [r7, #24]
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	75fb      	strb	r3, [r7, #23]

    const void * value_act;
    lv_res_t res = LV_RES_INV;
 8006d74:	2300      	movs	r3, #0
 8006d76:	75bb      	strb	r3, [r7, #22]
    const lv_obj_t * parent = obj;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	61fb      	str	r3, [r7, #28]
    while(parent) {
 8006d7c:	e081      	b.n	8006e82 <_lv_obj_get_style_ptr+0x12a>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	4619      	mov	r1, r3
 8006d82:	69f8      	ldr	r0, [r7, #28]
 8006d84:	f7ff fd14 	bl	80067b0 <lv_obj_get_style_list>
 8006d88:	6138      	str	r0, [r7, #16]

        if(!list->ignore_cache && list->style_cnt > 0) {
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	795b      	ldrb	r3, [r3, #5]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d14a      	bne.n	8006e2e <_lv_obj_get_style_ptr+0xd6>
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	791b      	ldrb	r3, [r3, #4]
 8006d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d043      	beq.n	8006e2e <_lv_obj_get_style_ptr+0xd6>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	795b      	ldrb	r3, [r3, #5]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d108      	bne.n	8006dc6 <_lv_obj_get_style_ptr+0x6e>
 8006db4:	883b      	ldrh	r3, [r7, #0]
 8006db6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	69f8      	ldr	r0, [r7, #28]
 8006dc2:	f002 fa9d 	bl	8009300 <update_style_cache>
            bool def = false;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	76fb      	strb	r3, [r7, #27]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8006dca:	883b      	ldrh	r3, [r7, #0]
 8006dcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd2:	d006      	beq.n	8006de2 <_lv_obj_get_style_ptr+0x8a>
 8006dd4:	f248 028e 	movw	r2, #32910	; 0x808e
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d016      	beq.n	8006e0a <_lv_obj_get_style_ptr+0xb2>
 8006ddc:	2b6e      	cmp	r3, #110	; 0x6e
 8006dde:	d00a      	beq.n	8006df6 <_lv_obj_get_style_ptr+0x9e>
 8006de0:	e022      	b.n	8006e28 <_lv_obj_get_style_ptr+0xd0>
                case LV_STYLE_VALUE_STR:
                    if(list->value_txt_str) def = true;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	79db      	ldrb	r3, [r3, #7]
 8006de6:	f003 0308 	and.w	r3, r3, #8
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d016      	beq.n	8006e1e <_lv_obj_get_style_ptr+0xc6>
 8006df0:	2301      	movs	r3, #1
 8006df2:	76fb      	strb	r3, [r7, #27]
                    break;
 8006df4:	e013      	b.n	8006e1e <_lv_obj_get_style_ptr+0xc6>
                case LV_STYLE_PATTERN_IMAGE:
                    if(list->pattern_img_null) def = true;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	79db      	ldrb	r3, [r3, #7]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00e      	beq.n	8006e22 <_lv_obj_get_style_ptr+0xca>
 8006e04:	2301      	movs	r3, #1
 8006e06:	76fb      	strb	r3, [r7, #27]
                    break;
 8006e08:	e00b      	b.n	8006e22 <_lv_obj_get_style_ptr+0xca>
                case LV_STYLE_TEXT_FONT:
                    if(list->text_font_normal) def = true;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	79db      	ldrb	r3, [r3, #7]
 8006e0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <_lv_obj_get_style_ptr+0xce>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	76fb      	strb	r3, [r7, #27]
                    break;
 8006e1c:	e003      	b.n	8006e26 <_lv_obj_get_style_ptr+0xce>
                    break;
 8006e1e:	bf00      	nop
 8006e20:	e002      	b.n	8006e28 <_lv_obj_get_style_ptr+0xd0>
                    break;
 8006e22:	bf00      	nop
 8006e24:	e000      	b.n	8006e28 <_lv_obj_get_style_ptr+0xd0>
                    break;
 8006e26:	bf00      	nop
            }

            if(def) {
 8006e28:	7efb      	ldrb	r3, [r7, #27]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d12e      	bne.n	8006e8c <_lv_obj_get_style_ptr+0x134>
                break;
            }
        }

        lv_state_t state = lv_obj_get_state(parent, part);
 8006e2e:	78fb      	ldrb	r3, [r7, #3]
 8006e30:	4619      	mov	r1, r3
 8006e32:	69f8      	ldr	r0, [r7, #28]
 8006e34:	f000 f992 	bl	800715c <lv_obj_get_state>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	8b3b      	ldrh	r3, [r7, #24]
 8006e46:	4413      	add	r3, r2
 8006e48:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8006e4a:	f107 0208 	add.w	r2, r7, #8
 8006e4e:	883b      	ldrh	r3, [r7, #0]
 8006e50:	4619      	mov	r1, r3
 8006e52:	6938      	ldr	r0, [r7, #16]
 8006e54:	f005 f820 	bl	800be98 <_lv_style_list_get_ptr>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	75bb      	strb	r3, [r7, #22]
        if(res == LV_RES_OK)  return value_act;
 8006e5c:	7dbb      	ldrb	r3, [r7, #22]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <_lv_obj_get_style_ptr+0x10e>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	e029      	b.n	8006eba <_lv_obj_get_style_ptr+0x162>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	da10      	bge.n	8006e90 <_lv_obj_get_style_ptr+0x138>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <_lv_obj_get_style_ptr+0x122>
            part = LV_OBJ_PART_MAIN;
 8006e74:	2300      	movs	r3, #0
 8006e76:	70fb      	strb	r3, [r7, #3]
            continue;
 8006e78:	e003      	b.n	8006e82 <_lv_obj_get_style_ptr+0x12a>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 8006e7a:	69f8      	ldr	r0, [r7, #28]
 8006e7c:	f7ff fb78 	bl	8006570 <lv_obj_get_parent>
 8006e80:	61f8      	str	r0, [r7, #28]
    while(parent) {
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f47f af7a 	bne.w	8006d7e <_lv_obj_get_style_ptr+0x26>
 8006e8a:	e002      	b.n	8006e92 <_lv_obj_get_style_ptr+0x13a>
                break;
 8006e8c:	bf00      	nop
 8006e8e:	e000      	b.n	8006e92 <_lv_obj_get_style_ptr+0x13a>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006e90:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 8006e92:	883b      	ldrh	r3, [r7, #0]
 8006e94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e98:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 8006e9a:	883b      	ldrh	r3, [r7, #0]
 8006e9c:	2bbe      	cmp	r3, #190	; 0xbe
 8006e9e:	d009      	beq.n	8006eb4 <_lv_obj_get_style_ptr+0x15c>
 8006ea0:	f248 028e 	movw	r2, #32910	; 0x808e
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d001      	beq.n	8006eac <_lv_obj_get_style_ptr+0x154>
 8006ea8:	2b7e      	cmp	r3, #126	; 0x7e
 8006eaa:	d105      	bne.n	8006eb8 <_lv_obj_get_style_ptr+0x160>
        case LV_STYLE_TEXT_FONT:
        case LV_STYLE_VALUE_FONT:
            return lv_theme_get_font_normal();
 8006eac:	f017 f904 	bl	801e0b8 <lv_theme_get_font_normal>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	e002      	b.n	8006eba <_lv_obj_get_style_ptr+0x162>
#if LV_USE_ANIMATION
        case LV_STYLE_TRANSITION_PATH:
            return &lv_anim_path_def;
 8006eb4:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <_lv_obj_get_style_ptr+0x16c>)
 8006eb6:	e000      	b.n	8006eba <_lv_obj_get_style_ptr+0x162>
#endif
    }

    return NULL;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3720      	adds	r7, #32
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	0802ba14 	.word	0x0802ba14

08006ec8 <lv_obj_get_hidden>:
 * Get the hidden attribute of an object
 * @param obj pointer to an object
 * @return true: the object is hidden
 */
bool lv_obj_get_hidden(const lv_obj_t * obj)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f014 fcbf 	bl	801b854 <lv_debug_check_null>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f083 0301 	eor.w	r3, r3, #1
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d008      	beq.n	8006ef4 <lv_obj_get_hidden+0x2c>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f04f 0400 	mov.w	r4, #0
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4623      	mov	r3, r4
 8006eec:	4809      	ldr	r0, [pc, #36]	; (8006f14 <lv_obj_get_hidden+0x4c>)
 8006eee:	f014 fcc1 	bl	801b874 <lv_debug_log_error>
 8006ef2:	e7fe      	b.n	8006ef2 <lv_obj_get_hidden+0x2a>

    return obj->hidden == 0 ? false : true;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006efa:	f003 0310 	and.w	r3, r3, #16
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	bf14      	ite	ne
 8006f04:	2301      	movne	r3, #1
 8006f06:	2300      	moveq	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd90      	pop	{r4, r7, pc}
 8006f12:	bf00      	nop
 8006f14:	08028334 	.word	0x08028334

08006f18 <lv_obj_get_click>:
 * Get the click enable attribute of an object
 * @param obj pointer to an object
 * @return true: the object is clickable
 */
bool lv_obj_get_click(const lv_obj_t * obj)
{
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f014 fc97 	bl	801b854 <lv_debug_check_null>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f083 0301 	eor.w	r3, r3, #1
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d008      	beq.n	8006f44 <lv_obj_get_click+0x2c>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f04f 0400 	mov.w	r4, #0
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4623      	mov	r3, r4
 8006f3c:	4809      	ldr	r0, [pc, #36]	; (8006f64 <lv_obj_get_click+0x4c>)
 8006f3e:	f014 fc99 	bl	801b874 <lv_debug_log_error>
 8006f42:	e7fe      	b.n	8006f42 <lv_obj_get_click+0x2a>

    return obj->click == 0 ? false : true;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bf14      	ite	ne
 8006f54:	2301      	movne	r3, #1
 8006f56:	2300      	moveq	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd90      	pop	{r4, r7, pc}
 8006f62:	bf00      	nop
 8006f64:	08028334 	.word	0x08028334

08006f68 <lv_obj_get_drag>:
 * Get the drag enable attribute of an object
 * @param obj pointer to an object
 * @return true: the object is draggable
 */
bool lv_obj_get_drag(const lv_obj_t * obj)
{
 8006f68:	b590      	push	{r4, r7, lr}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f014 fc6f 	bl	801b854 <lv_debug_check_null>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f083 0301 	eor.w	r3, r3, #1
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <lv_obj_get_drag+0x2c>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f04f 0400 	mov.w	r4, #0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	4809      	ldr	r0, [pc, #36]	; (8006fb4 <lv_obj_get_drag+0x4c>)
 8006f8e:	f014 fc71 	bl	801b874 <lv_debug_log_error>
 8006f92:	e7fe      	b.n	8006f92 <lv_obj_get_drag+0x2a>

    return obj->drag == 0 ? false : true;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bf14      	ite	ne
 8006fa4:	2301      	movne	r3, #1
 8006fa6:	2300      	moveq	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd90      	pop	{r4, r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	08028334 	.word	0x08028334

08006fb8 <lv_obj_get_drag_dir>:
 * Get the directions an object can be dragged
 * @param obj pointer to an object
 * @return bitwise OR of allowed directions an object can be dragged in
 */
lv_drag_dir_t lv_obj_get_drag_dir(const lv_obj_t * obj)
{
 8006fb8:	b590      	push	{r4, r7, lr}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f014 fc47 	bl	801b854 <lv_debug_check_null>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f083 0301 	eor.w	r3, r3, #1
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d008      	beq.n	8006fe4 <lv_obj_get_drag_dir+0x2c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f04f 0400 	mov.w	r4, #0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4623      	mov	r3, r4
 8006fdc:	4806      	ldr	r0, [pc, #24]	; (8006ff8 <lv_obj_get_drag_dir+0x40>)
 8006fde:	f014 fc49 	bl	801b874 <lv_debug_log_error>
 8006fe2:	e7fe      	b.n	8006fe2 <lv_obj_get_drag_dir+0x2a>

    return obj->drag_dir;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fea:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006fee:	b2db      	uxtb	r3, r3
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd90      	pop	{r4, r7, pc}
 8006ff8:	08028334 	.word	0x08028334

08006ffc <lv_obj_get_drag_throw>:
 * Get the drag throw enable attribute of an object
 * @param obj pointer to an object
 * @return true: drag throw is enabled
 */
bool lv_obj_get_drag_throw(const lv_obj_t * obj)
{
 8006ffc:	b590      	push	{r4, r7, lr}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f014 fc25 	bl	801b854 <lv_debug_check_null>
 800700a:	4603      	mov	r3, r0
 800700c:	f083 0301 	eor.w	r3, r3, #1
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <lv_obj_get_drag_throw+0x2c>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f04f 0400 	mov.w	r4, #0
 800701c:	461a      	mov	r2, r3
 800701e:	4623      	mov	r3, r4
 8007020:	4809      	ldr	r0, [pc, #36]	; (8007048 <lv_obj_get_drag_throw+0x4c>)
 8007022:	f014 fc27 	bl	801b874 <lv_debug_log_error>
 8007026:	e7fe      	b.n	8007026 <lv_obj_get_drag_throw+0x2a>

    return obj->drag_throw == 0 ? false : true;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	bf14      	ite	ne
 8007038:	2301      	movne	r3, #1
 800703a:	2300      	moveq	r3, #0
 800703c:	b2db      	uxtb	r3, r3
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	bd90      	pop	{r4, r7, pc}
 8007046:	bf00      	nop
 8007048:	08028334 	.word	0x08028334

0800704c <lv_obj_get_drag_parent>:
 * Get the drag parent attribute of an object
 * @param obj pointer to an object
 * @return true: drag parent is enabled
 */
bool lv_obj_get_drag_parent(const lv_obj_t * obj)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
    return obj->drag_parent == 0 ? false : true;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	bf14      	ite	ne
 8007064:	2301      	movne	r3, #1
 8007066:	2300      	moveq	r3, #0
 8007068:	b2db      	uxtb	r3, r3
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <lv_obj_get_gesture_parent>:
* Get the gesture parent attribute of an object
* @param obj pointer to an object
* @return true: gesture parent is enabled
*/
bool lv_obj_get_gesture_parent(const lv_obj_t * obj)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
    return obj->gesture_parent == 0 ? false : true;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf14      	ite	ne
 800708e:	2301      	movne	r3, #1
 8007090:	2300      	moveq	r3, #0
 8007092:	b2db      	uxtb	r3, r3
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <lv_obj_get_focus_parent>:
* Get the focus parent attribute of an object
* @param obj pointer to an object
* @return true: focus parent is enabled
*/
bool lv_obj_get_focus_parent(const lv_obj_t * obj)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
    return obj->focus_parent == 0 ? false : true;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bf14      	ite	ne
 80070b8:	2301      	movne	r3, #1
 80070ba:	2300      	moveq	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
	...

080070cc <lv_obj_get_base_dir>:

    return obj->parent_event == 0 ? false : true;
}

lv_bidi_dir_t lv_obj_get_base_dir(const lv_obj_t * obj)
{
 80070cc:	b590      	push	{r4, r7, lr}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f014 fbbd 	bl	801b854 <lv_debug_check_null>
 80070da:	4603      	mov	r3, r0
 80070dc:	f083 0301 	eor.w	r3, r3, #1
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d008      	beq.n	80070f8 <lv_obj_get_base_dir+0x2c>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f04f 0400 	mov.w	r4, #0
 80070ec:	461a      	mov	r2, r3
 80070ee:	4623      	mov	r3, r4
 80070f0:	4804      	ldr	r0, [pc, #16]	; (8007104 <lv_obj_get_base_dir+0x38>)
 80070f2:	f014 fbbf 	bl	801b874 <lv_debug_log_error>
 80070f6:	e7fe      	b.n	80070f6 <lv_obj_get_base_dir+0x2a>
    }

    return LV_BIDI_BASE_DIR_DEF;
#else
    (void) obj;  /*Unused*/
    return LV_BIDI_DIR_LTR;
 80070f8:	2300      	movs	r3, #0
#endif
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd90      	pop	{r4, r7, pc}
 8007102:	bf00      	nop
 8007104:	08028334 	.word	0x08028334

08007108 <lv_obj_is_protected>:
 * @param obj pointer to an object
 * @param prot protect bits to test ('OR'ed values of `lv_protect_t`)
 * @return false: none of the given bits are set, true: at least one bit is set
 */
bool lv_obj_is_protected(const lv_obj_t * obj, uint8_t prot)
{
 8007108:	b590      	push	{r4, r7, lr}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f014 fb9d 	bl	801b854 <lv_debug_check_null>
 800711a:	4603      	mov	r3, r0
 800711c:	f083 0301 	eor.w	r3, r3, #1
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d008      	beq.n	8007138 <lv_obj_is_protected+0x30>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f04f 0400 	mov.w	r4, #0
 800712c:	461a      	mov	r2, r3
 800712e:	4623      	mov	r3, r4
 8007130:	4809      	ldr	r0, [pc, #36]	; (8007158 <lv_obj_is_protected+0x50>)
 8007132:	f014 fb9f 	bl	801b874 <lv_debug_log_error>
 8007136:	e7fe      	b.n	8007136 <lv_obj_is_protected+0x2e>

    return (obj->protect & prot) == 0 ? false : true;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800713e:	78fb      	ldrb	r3, [r7, #3]
 8007140:	4013      	ands	r3, r2
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	bf14      	ite	ne
 8007148:	2301      	movne	r3, #1
 800714a:	2300      	moveq	r3, #0
 800714c:	b2db      	uxtb	r3, r3
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	bd90      	pop	{r4, r7, pc}
 8007156:	bf00      	nop
 8007158:	08028334 	.word	0x08028334

0800715c <lv_obj_get_state>:

lv_state_t lv_obj_get_state(const lv_obj_t * obj, uint8_t part)
{
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f014 fb73 	bl	801b854 <lv_debug_check_null>
 800716e:	4603      	mov	r3, r0
 8007170:	f083 0301 	eor.w	r3, r3, #1
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d008      	beq.n	800718c <lv_obj_get_state+0x30>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f04f 0400 	mov.w	r4, #0
 8007180:	461a      	mov	r2, r3
 8007182:	4623      	mov	r3, r4
 8007184:	480d      	ldr	r0, [pc, #52]	; (80071bc <lv_obj_get_state+0x60>)
 8007186:	f014 fb75 	bl	801b874 <lv_debug_log_error>
 800718a:	e7fe      	b.n	800718a <lv_obj_get_state+0x2e>

    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	2b3f      	cmp	r3, #63	; 0x3f
 8007190:	d803      	bhi.n	800719a <lv_obj_get_state+0x3e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007198:	e00b      	b.n	80071b2 <lv_obj_get_state+0x56>

    /*If a real part is asked, then use the object's signal to get its state.
     * A real object can be in different state then the main part
     * and only the object itself knows who to get it's state. */
    lv_get_state_info_t info;
    info.part = part;
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	733b      	strb	r3, [r7, #12]
    info.result = LV_STATE_DEFAULT;
 800719e:	2300      	movs	r3, #0
 80071a0:	737b      	strb	r3, [r7, #13]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 80071a2:	f107 030c 	add.w	r3, r7, #12
 80071a6:	461a      	mov	r2, r3
 80071a8:	2109      	movs	r1, #9
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff f924 	bl	80063f8 <lv_signal_send>

    return info.result;
 80071b0:	7b7b      	ldrb	r3, [r7, #13]

}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd90      	pop	{r4, r7, pc}
 80071ba:	bf00      	nop
 80071bc:	08028334 	.word	0x08028334

080071c0 <lv_obj_get_group>:
 * Get the group of the object
 * @param obj pointer to an object
 * @return the pointer to group of the object
 */
void * lv_obj_get_group(const lv_obj_t * obj)
{
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f014 fb43 	bl	801b854 <lv_debug_check_null>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f083 0301 	eor.w	r3, r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d008      	beq.n	80071ec <lv_obj_get_group+0x2c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f04f 0400 	mov.w	r4, #0
 80071e0:	461a      	mov	r2, r3
 80071e2:	4623      	mov	r3, r4
 80071e4:	4804      	ldr	r0, [pc, #16]	; (80071f8 <lv_obj_get_group+0x38>)
 80071e6:	f014 fb45 	bl	801b874 <lv_debug_log_error>
 80071ea:	e7fe      	b.n	80071ea <lv_obj_get_group+0x2a>

#if LV_USE_GROUP
    return obj->group_p;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
#else
    LV_UNUSED(obj);
    return NULL;
#endif
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd90      	pop	{r4, r7, pc}
 80071f8:	08028334 	.word	0x08028334

080071fc <lv_obj_is_focused>:
 * Tell whether the object is the focused object of a group or not.
 * @param obj pointer to an object
 * @return true: the object is focused, false: the object is not focused or not in a group
 */
bool lv_obj_is_focused(const lv_obj_t * obj)
{
 80071fc:	b590      	push	{r4, r7, lr}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f014 fb25 	bl	801b854 <lv_debug_check_null>
 800720a:	4603      	mov	r3, r0
 800720c:	f083 0301 	eor.w	r3, r3, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d008      	beq.n	8007228 <lv_obj_is_focused+0x2c>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f04f 0400 	mov.w	r4, #0
 800721c:	461a      	mov	r2, r3
 800721e:	4623      	mov	r3, r4
 8007220:	480b      	ldr	r0, [pc, #44]	; (8007250 <lv_obj_is_focused+0x54>)
 8007222:	f014 fb27 	bl	801b874 <lv_debug_log_error>
 8007226:	e7fe      	b.n	8007226 <lv_obj_is_focused+0x2a>

#if LV_USE_GROUP
    if(obj->group_p) {
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <lv_obj_is_focused+0x4a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	4618      	mov	r0, r3
 8007236:	f7fa fb11 	bl	800185c <lv_group_get_focused>
 800723a:	4602      	mov	r2, r0
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4293      	cmp	r3, r2
 8007240:	d101      	bne.n	8007246 <lv_obj_is_focused+0x4a>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <lv_obj_is_focused+0x4c>
    }
    return false;
 8007246:	2300      	movs	r3, #0
#else
    LV_UNUSED(obj);
    return false;
#endif
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bd90      	pop	{r4, r7, pc}
 8007250:	08028334 	.word	0x08028334

08007254 <lv_obj_is_point_on_coords>:
 * whether the point is even within the object (as an optimization).
 * @param obj object to check
 * @param point screen-space point
 */
bool lv_obj_is_point_on_coords(lv_obj_t * obj, const lv_point_t * point)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
#if LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_TINY
    lv_area_t ext_area;
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007264:	b29a      	uxth	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800726c:	b29b      	uxth	r3, r3
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	b29b      	uxth	r3, r3
 8007272:	b21b      	sxth	r3, r3
 8007274:	813b      	strh	r3, [r7, #8]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800727c:	b29a      	uxth	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007284:	b29b      	uxth	r3, r3
 8007286:	4413      	add	r3, r2
 8007288:	b29b      	uxth	r3, r3
 800728a:	b21b      	sxth	r3, r3
 800728c:	81bb      	strh	r3, [r7, #12]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007294:	b29a      	uxth	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800729c:	b29b      	uxth	r3, r3
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	b21b      	sxth	r3, r3
 80072a4:	817b      	strh	r3, [r7, #10]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	4413      	add	r3, r2
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	b21b      	sxth	r3, r3
 80072bc:	81fb      	strh	r3, [r7, #14]

    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 80072be:	f107 0308 	add.w	r3, r7, #8
 80072c2:	2200      	movs	r2, #0
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f013 fcf7 	bl	801acba <_lv_area_is_point_on>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f083 0301 	eor.w	r3, r3, #1
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <lv_obj_is_point_on_coords+0x88>

    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
#else
    if(!_lv_area_is_point_on(&obj->coords, point, 0)) {
#endif
        return false;
 80072d8:	2300      	movs	r3, #0
 80072da:	e000      	b.n	80072de <lv_obj_is_point_on_coords+0x8a>
    }
    return true;
 80072dc:	2301      	movs	r3, #1
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <lv_obj_hittest>:
 * @param obj object to hit-test
 * @param point screen-space point
 * @return true if the object is considered under the point
 */
bool lv_obj_hittest(lv_obj_t * obj, lv_point_t * point)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
    if(obj->adv_hittest) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00c      	beq.n	800731a <lv_obj_hittest+0x34>
        lv_hit_test_info_t hit_info;
        hit_info.point = point;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	60bb      	str	r3, [r7, #8]
        hit_info.result = true;
 8007304:	2301      	movs	r3, #1
 8007306:	733b      	strb	r3, [r7, #12]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f107 0208 	add.w	r2, r7, #8
 8007310:	210a      	movs	r1, #10
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
        return hit_info.result;
 8007316:	7b3b      	ldrb	r3, [r7, #12]
 8007318:	e004      	b.n	8007324 <lv_obj_hittest+0x3e>
    }
    else
        return lv_obj_is_point_on_coords(obj, point);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff ff99 	bl	8007254 <lv_obj_is_point_on_coords>
 8007322:	4603      	mov	r3, r0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <lv_obj_handle_get_type_signal>:
 * @param buf pointer to `lv_obj_type_t`. (`param` in the signal callback)
 * @param name name of the object. E.g. "lv_btn". (Only the pointer is saved)
 * @return LV_RES_OK
 */
lv_res_t lv_obj_handle_get_type_signal(lv_obj_type_t * buf, const char * name)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
    uint8_t i;
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
 800733a:	e008      	b.n	800734e <lv_obj_handle_get_type_signal+0x22>
        if(buf->type[i] == NULL) break;
 800733c:	7bfa      	ldrb	r2, [r7, #15]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <lv_obj_handle_get_type_signal+0x2a>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	3301      	adds	r3, #1
 800734c:	73fb      	strb	r3, [r7, #15]
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b06      	cmp	r3, #6
 8007352:	d9f3      	bls.n	800733c <lv_obj_handle_get_type_signal+0x10>
 8007354:	e000      	b.n	8007358 <lv_obj_handle_get_type_signal+0x2c>
        if(buf->type[i] == NULL) break;
 8007356:	bf00      	nop
    }
    buf->type[i] = name;
 8007358:	7bfa      	ldrb	r2, [r7, #15]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    return LV_RES_OK;
 8007362:	2301      	movs	r3, #1
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <lv_obj_init_draw_rect_dsc>:
 * @param draw_dsc the descriptor the initialize
 * @note Only the relevant fields will be set.
 * E.g. if `border width == 0` the other border properties won't be evaluated.
 */
void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint8_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8007370:	b590      	push	{r4, r7, lr}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	460b      	mov	r3, r1
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	72fb      	strb	r3, [r7, #11]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	4619      	mov	r1, r3
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7fc fee4 	bl	8004150 <lv_obj_get_style_radius>
 8007388:	4603      	mov	r3, r0
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	801a      	strh	r2, [r3, #0]

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	4619      	mov	r1, r3
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7fc ff57 	bl	8004248 <lv_obj_get_style_opa_scale>
 800739a:	4603      	mov	r3, r0
 800739c:	75fb      	strb	r3, [r7, #23]
    if(opa_scale <= LV_OPA_MIN) {
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d812      	bhi.n	80073ca <lv_obj_init_draw_rect_dsc+0x5a>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	749a      	strb	r2, [r3, #18]
        draw_dsc->border_opa = LV_OPA_TRANSP;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	771a      	strb	r2, [r3, #28]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        draw_dsc->value_opa = LV_OPA_TRANSP;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        return;
 80073c8:	e223      	b.n	8007812 <lv_obj_init_draw_rect_dsc+0x4a2>
    }
#endif

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7c9b      	ldrb	r3, [r3, #18]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d042      	beq.n	8007458 <lv_obj_init_draw_rect_dsc+0xe8>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80073d2:	7afb      	ldrb	r3, [r7, #11]
 80073d4:	4619      	mov	r1, r3
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7fd f849 	bl	800446e <lv_obj_get_style_bg_opa>
 80073dc:	4603      	mov	r3, r0
 80073de:	461a      	mov	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	749a      	strb	r2, [r3, #18]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	7c9b      	ldrb	r3, [r3, #18]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d935      	bls.n	8007458 <lv_obj_init_draw_rect_dsc+0xe8>
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
 80073ec:	687c      	ldr	r4, [r7, #4]
 80073ee:	7afb      	ldrb	r3, [r7, #11]
 80073f0:	4619      	mov	r1, r3
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7fd f819 	bl	800442a <lv_obj_get_style_bg_color>
 80073f8:	6060      	str	r0, [r4, #4]
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 80073fa:	7afb      	ldrb	r3, [r7, #11]
 80073fc:	4619      	mov	r1, r3
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7fd f801 	bl	8004406 <lv_obj_get_style_bg_grad_dir>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	731a      	strb	r2, [r3, #12]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7b1b      	ldrb	r3, [r3, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d018      	beq.n	8007446 <lv_obj_init_draw_rect_dsc+0xd6>
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 8007414:	687c      	ldr	r4, [r7, #4]
 8007416:	7afb      	ldrb	r3, [r7, #11]
 8007418:	4619      	mov	r1, r3
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f7fd f816 	bl	800444c <lv_obj_get_style_bg_grad_color>
 8007420:	60a0      	str	r0, [r4, #8]
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 8007422:	7afb      	ldrb	r3, [r7, #11]
 8007424:	4619      	mov	r1, r3
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7fc ffcb 	bl	80043c2 <lv_obj_get_style_bg_main_stop>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	81da      	strh	r2, [r3, #14]
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 8007434:	7afb      	ldrb	r3, [r7, #11]
 8007436:	4619      	mov	r1, r3
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7fc ffd3 	bl	80043e4 <lv_obj_get_style_bg_grad_stop>
 800743e:	4603      	mov	r3, r0
 8007440:	461a      	mov	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	821a      	strh	r2, [r3, #16]
            }

#if LV_USE_BLEND_MODES
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	4619      	mov	r1, r3
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7fc ffa7 	bl	800439e <lv_obj_get_style_bg_blend_mode>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	74da      	strb	r2, [r3, #19]
#endif
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	4619      	mov	r1, r3
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7fd f817 	bl	8004490 <lv_obj_get_style_border_width>
 8007462:	4603      	mov	r3, r0
 8007464:	461a      	mov	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	831a      	strh	r2, [r3, #24]
    if(draw_dsc->border_width) {
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d029      	beq.n	80074c8 <lv_obj_init_draw_rect_dsc+0x158>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	7f1b      	ldrb	r3, [r3, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d025      	beq.n	80074c8 <lv_obj_init_draw_rect_dsc+0x158>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	4619      	mov	r1, r3
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7fd f861 	bl	8004548 <lv_obj_get_style_border_opa>
 8007486:	4603      	mov	r3, r0
 8007488:	461a      	mov	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	771a      	strb	r2, [r3, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	7f1b      	ldrb	r3, [r3, #28]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d90f      	bls.n	80074b6 <lv_obj_init_draw_rect_dsc+0x146>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	4619      	mov	r1, r3
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7fd f809 	bl	80044b2 <lv_obj_get_style_border_side>
 80074a0:	4603      	mov	r3, r0
 80074a2:	b21a      	sxth	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	835a      	strh	r2, [r3, #26]
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
 80074a8:	687c      	ldr	r4, [r7, #4]
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	4619      	mov	r1, r3
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7fd f839 	bl	8004526 <lv_obj_get_style_border_color>
 80074b4:	6160      	str	r0, [r4, #20]
            }
#if LV_USE_BLEND_MODES
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
 80074b6:	7afb      	ldrb	r3, [r7, #11]
 80074b8:	4619      	mov	r1, r3
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7fd f80b 	bl	80044d6 <lv_obj_get_style_border_blend_mode>
 80074c0:	4603      	mov	r3, r0
 80074c2:	461a      	mov	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	775a      	strb	r2, [r3, #29]
#endif
        }
    }

#if LV_USE_OUTLINE
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	4619      	mov	r1, r3
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f7fd f84c 	bl	800456a <lv_obj_get_style_outline_width>
 80074d2:	4603      	mov	r3, r0
 80074d4:	461a      	mov	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	849a      	strh	r2, [r3, #36]	; 0x24
    if(draw_dsc->outline_width) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d02d      	beq.n	8007540 <lv_obj_init_draw_rect_dsc+0x1d0>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d028      	beq.n	8007540 <lv_obj_init_draw_rect_dsc+0x1d0>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 80074ee:	7afb      	ldrb	r3, [r7, #11]
 80074f0:	4619      	mov	r1, r3
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f7fd f87e 	bl	80045f4 <lv_obj_get_style_outline_opa>
 80074f8:	4603      	mov	r3, r0
 80074fa:	461a      	mov	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007508:	2b02      	cmp	r3, #2
 800750a:	d90f      	bls.n	800752c <lv_obj_init_draw_rect_dsc+0x1bc>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	4619      	mov	r1, r3
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7fd f83b 	bl	800458c <lv_obj_get_style_outline_pad>
 8007516:	4603      	mov	r3, r0
 8007518:	461a      	mov	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	84da      	strh	r2, [r3, #38]	; 0x26
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
 800751e:	687c      	ldr	r4, [r7, #4]
 8007520:	7afb      	ldrb	r3, [r7, #11]
 8007522:	4619      	mov	r1, r3
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7fd f854 	bl	80045d2 <lv_obj_get_style_outline_color>
 800752a:	6220      	str	r0, [r4, #32]
            }
#if LV_USE_BLEND_MODES
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	4619      	mov	r1, r3
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7fd f83c 	bl	80045ae <lv_obj_get_style_outline_blend_mode>
 8007536:	4603      	mov	r3, r0
 8007538:	461a      	mov	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        }
    }
#endif

#if LV_USE_PATTERN
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	4619      	mov	r1, r3
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7fd f939 	bl	80047bc <lv_obj_get_style_pattern_image>
 800754a:	4602      	mov	r2, r0
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	63da      	str	r2, [r3, #60]	; 0x3c
    if(draw_dsc->pattern_image) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d059      	beq.n	800760c <lv_obj_init_draw_rect_dsc+0x29c>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800755e:	2b00      	cmp	r3, #0
 8007560:	d054      	beq.n	800760c <lv_obj_init_draw_rect_dsc+0x29c>
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
 8007562:	7afb      	ldrb	r3, [r7, #11]
 8007564:	4619      	mov	r1, r3
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f7fd f906 	bl	8004778 <lv_obj_get_style_pattern_opa>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800757c:	2b02      	cmp	r3, #2
 800757e:	d945      	bls.n	800760c <lv_obj_init_draw_rect_dsc+0x29c>
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
 8007580:	7afb      	ldrb	r3, [r7, #11]
 8007582:	4619      	mov	r1, r3
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7fd f908 	bl	800479a <lv_obj_get_style_pattern_recolor_opa>
 800758a:	4603      	mov	r3, r0
 800758c:	461a      	mov	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	4619      	mov	r1, r3
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7fd f8b4 	bl	8004706 <lv_obj_get_style_pattern_repeat>
 800759e:	4603      	mov	r3, r0
 80075a0:	4619      	mov	r1, r3
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 80075a8:	f361 0300 	bfi	r3, r1, #0, #1
 80075ac:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b4:	4618      	mov	r0, r3
 80075b6:	f006 fd65 	bl	800e084 <lv_img_src_get_type>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d10f      	bne.n	80075e0 <lv_obj_init_draw_rect_dsc+0x270>
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 80075c0:	687c      	ldr	r4, [r7, #4]
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	4619      	mov	r1, r3
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7fd f8c5 	bl	8004756 <lv_obj_get_style_pattern_recolor>
 80075cc:	6460      	str	r0, [r4, #68]	; 0x44
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	4619      	mov	r1, r3
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7fd fa41 	bl	8004a5a <lv_obj_get_style_text_font>
 80075d8:	4602      	mov	r2, r0
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	641a      	str	r2, [r3, #64]	; 0x40
 80075de:	e00b      	b.n	80075f8 <lv_obj_init_draw_rect_dsc+0x288>
                }
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d906      	bls.n	80075f8 <lv_obj_init_draw_rect_dsc+0x288>
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 80075ea:	687c      	ldr	r4, [r7, #4]
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	4619      	mov	r1, r3
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f7fd f8b0 	bl	8004756 <lv_obj_get_style_pattern_recolor>
 80075f6:	6460      	str	r0, [r4, #68]	; 0x44
                }
#if LV_USE_BLEND_MODES
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	4619      	mov	r1, r3
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7fd f898 	bl	8004732 <lv_obj_get_style_pattern_blend_mode>
 8007602:	4603      	mov	r3, r0
 8007604:	461a      	mov	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        }
    }
#endif

#if LV_USE_SHADOW
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	4619      	mov	r1, r3
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7fd f800 	bl	8004616 <lv_obj_get_style_shadow_width>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	861a      	strh	r2, [r3, #48]	; 0x30
    if(draw_dsc->shadow_width) {
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007624:	2b00      	cmp	r3, #0
 8007626:	d03f      	beq.n	80076a8 <lv_obj_init_draw_rect_dsc+0x338>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800762e:	2b02      	cmp	r3, #2
 8007630:	d93a      	bls.n	80076a8 <lv_obj_init_draw_rect_dsc+0x338>
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	4619      	mov	r1, r3
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7fd f854 	bl	80046e4 <lv_obj_get_style_shadow_opa>
 800763c:	4603      	mov	r3, r0
 800763e:	461a      	mov	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800764c:	2b02      	cmp	r3, #2
 800764e:	d92b      	bls.n	80076a8 <lv_obj_init_draw_rect_dsc+0x338>
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007650:	7afb      	ldrb	r3, [r7, #11]
 8007652:	4619      	mov	r1, r3
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7fc ffef 	bl	8004638 <lv_obj_get_style_shadow_ofs_x>
 800765a:	4603      	mov	r3, r0
 800765c:	461a      	mov	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	865a      	strh	r2, [r3, #50]	; 0x32
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007662:	7afb      	ldrb	r3, [r7, #11]
 8007664:	4619      	mov	r1, r3
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f7fc fff7 	bl	800465a <lv_obj_get_style_shadow_ofs_y>
 800766c:	4603      	mov	r3, r0
 800766e:	461a      	mov	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	869a      	strh	r2, [r3, #52]	; 0x34
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8007674:	7afb      	ldrb	r3, [r7, #11]
 8007676:	4619      	mov	r1, r3
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7fc ffff 	bl	800467c <lv_obj_get_style_shadow_spread>
 800767e:	4603      	mov	r3, r0
 8007680:	461a      	mov	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	86da      	strh	r2, [r3, #54]	; 0x36
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
 8007686:	687c      	ldr	r4, [r7, #4]
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	4619      	mov	r1, r3
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7fd f818 	bl	80046c2 <lv_obj_get_style_shadow_color>
 8007692:	62e0      	str	r0, [r4, #44]	; 0x2c
#if LV_USE_BLEND_MODES
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
 8007694:	7afb      	ldrb	r3, [r7, #11]
 8007696:	4619      	mov	r1, r3
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7fd f800 	bl	800469e <lv_obj_get_style_shadow_blend_mode>
 800769e:	4603      	mov	r3, r0
 80076a0:	461a      	mov	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
#endif

#if LV_USE_VALUE_STR
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	4619      	mov	r1, r3
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7fd f931 	bl	8004914 <lv_obj_get_style_value_str>
 80076b2:	4602      	mov	r2, r0
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	64da      	str	r2, [r3, #76]	; 0x4c
    if(draw_dsc->value_str) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d05e      	beq.n	800777e <lv_obj_init_draw_rect_dsc+0x40e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d959      	bls.n	800777e <lv_obj_init_draw_rect_dsc+0x40e>
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	4619      	mov	r1, r3
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7fd f8fe 	bl	80048d0 <lv_obj_get_style_value_opa>
 80076d4:	4603      	mov	r3, r0
 80076d6:	461a      	mov	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            if(draw_dsc->value_opa > LV_OPA_MIN) {
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d94a      	bls.n	800777e <lv_obj_init_draw_rect_dsc+0x40e>
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	4619      	mov	r1, r3
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7fd f8aa 	bl	8004846 <lv_obj_get_style_value_ofs_x>
 80076f2:	4603      	mov	r3, r0
 80076f4:	461a      	mov	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
 80076fc:	7afb      	ldrb	r3, [r7, #11]
 80076fe:	4619      	mov	r1, r3
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f7fd f8b1 	bl	8004868 <lv_obj_get_style_value_ofs_y>
 8007706:	4603      	mov	r3, r0
 8007708:	461a      	mov	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
 8007710:	687c      	ldr	r4, [r7, #4]
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	4619      	mov	r1, r3
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7fd f8c9 	bl	80048ae <lv_obj_get_style_value_color>
 800771c:	65a0      	str	r0, [r4, #88]	; 0x58
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
 800771e:	7afb      	ldrb	r3, [r7, #11]
 8007720:	4619      	mov	r1, r3
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7fd f8e5 	bl	80048f2 <lv_obj_get_style_value_font>
 8007728:	4602      	mov	r2, r0
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	651a      	str	r2, [r3, #80]	; 0x50
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	4619      	mov	r1, r3
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7fd f853 	bl	80047de <lv_obj_get_style_value_letter_space>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	4619      	mov	r1, r3
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f7fd f85a 	bl	8004800 <lv_obj_get_style_value_line_space>
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
 8007756:	7afb      	ldrb	r3, [r7, #11]
 8007758:	4619      	mov	r1, r3
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7fd f895 	bl	800488a <lv_obj_get_style_value_align>
 8007760:	4603      	mov	r3, r0
 8007762:	461a      	mov	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
#if LV_USE_BLEND_MODES
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	4619      	mov	r1, r3
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f7fd f857 	bl	8004822 <lv_obj_get_style_value_blend_mode>
 8007774:	4603      	mov	r3, r0
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        }
    }
#endif

#if LV_USE_OPA_SCALE
    if(opa_scale < LV_OPA_MAX) {
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	2bfc      	cmp	r3, #252	; 0xfc
 8007782:	d846      	bhi.n	8007812 <lv_obj_init_draw_rect_dsc+0x4a2>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	7c9b      	ldrb	r3, [r3, #18]
 8007788:	b29a      	uxth	r2, r3
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	b29b      	uxth	r3, r3
 800778e:	fb12 f303 	smulbb	r3, r2, r3
 8007792:	b29b      	uxth	r3, r3
 8007794:	0a1b      	lsrs	r3, r3, #8
 8007796:	b29b      	uxth	r3, r3
 8007798:	b2da      	uxtb	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	749a      	strb	r2, [r3, #18]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	7f1b      	ldrb	r3, [r3, #28]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	fb12 f303 	smulbb	r3, r2, r3
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	771a      	strb	r2, [r3, #28]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077be:	b29a      	uxth	r2, r3
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	fb12 f303 	smulbb	r3, r2, r3
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	0a1b      	lsrs	r3, r3, #8
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80077dc:	b29a      	uxth	r2, r3
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	fb12 f303 	smulbb	r3, r2, r3
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	7dfb      	ldrb	r3, [r7, #23]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	fb12 f303 	smulbb	r3, r2, r3
 8007804:	b29b      	uxth	r3, r3
 8007806:	0a1b      	lsrs	r3, r3, #8
 8007808:	b29b      	uxth	r3, r3
 800780a:	b2da      	uxtb	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }
#endif
}
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	bd90      	pop	{r4, r7, pc}

08007818 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint8_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8007818:	b590      	push	{r4, r7, lr}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	460b      	mov	r3, r1
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	72fb      	strb	r3, [r7, #11]
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	4619      	mov	r1, r3
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f7fd f903 	bl	8004a36 <lv_obj_get_style_text_opa>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	741a      	strb	r2, [r3, #16]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	7c1b      	ldrb	r3, [r3, #16]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d96a      	bls.n	8007916 <lv_obj_init_draw_label_dsc+0xfe>

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8007840:	7afb      	ldrb	r3, [r7, #11]
 8007842:	4619      	mov	r1, r3
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7fc fcff 	bl	8004248 <lv_obj_get_style_opa_scale>
 800784a:	4603      	mov	r3, r0
 800784c:	75fb      	strb	r3, [r7, #23]
    if(opa_scale < LV_OPA_MAX) {
 800784e:	7dfb      	ldrb	r3, [r7, #23]
 8007850:	2bfc      	cmp	r3, #252	; 0xfc
 8007852:	d80c      	bhi.n	800786e <lv_obj_init_draw_label_dsc+0x56>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	7c1b      	ldrb	r3, [r3, #16]
 8007858:	b29a      	uxth	r2, r3
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	b29b      	uxth	r3, r3
 800785e:	fb12 f303 	smulbb	r3, r2, r3
 8007862:	b29b      	uxth	r3, r3
 8007864:	0a1b      	lsrs	r3, r3, #8
 8007866:	b29b      	uxth	r3, r3
 8007868:	b2da      	uxtb	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	741a      	strb	r2, [r3, #16]
    }
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	7c1b      	ldrb	r3, [r3, #16]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d951      	bls.n	800791a <lv_obj_init_draw_label_dsc+0x102>
#endif

    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
 8007876:	687c      	ldr	r4, [r7, #4]
 8007878:	7afb      	ldrb	r3, [r7, #11]
 800787a:	4619      	mov	r1, r3
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f7fd f8a4 	bl	80049ca <lv_obj_get_style_text_color>
 8007882:	6020      	str	r0, [r4, #0]
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8007884:	7afb      	ldrb	r3, [r7, #11]
 8007886:	4619      	mov	r1, r3
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f7fd f854 	bl	8004936 <lv_obj_get_style_text_letter_space>
 800788e:	4603      	mov	r3, r0
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	829a      	strh	r2, [r3, #20]
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8007896:	7afb      	ldrb	r3, [r7, #11]
 8007898:	4619      	mov	r1, r3
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7fd f85d 	bl	800495a <lv_obj_get_style_text_line_space>
 80078a0:	4603      	mov	r3, r0
 80078a2:	461a      	mov	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	825a      	strh	r2, [r3, #18]
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 80078a8:	7afb      	ldrb	r3, [r7, #11]
 80078aa:	4619      	mov	r1, r3
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f7fd f866 	bl	800497e <lv_obj_get_style_text_decor>
 80078b2:	4603      	mov	r3, r0
 80078b4:	461a      	mov	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#if LV_USE_BLEND_MODES
    draw_dsc->blend_mode = lv_obj_get_style_text_blend_mode(obj, part);
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	4619      	mov	r1, r3
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7fd f86f 	bl	80049a4 <lv_obj_get_style_text_blend_mode>
 80078c6:	4603      	mov	r3, r0
 80078c8:	461a      	mov	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	4619      	mov	r1, r3
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f7fd f8c0 	bl	8004a5a <lv_obj_get_style_text_font>
 80078da:	4602      	mov	r2, r0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60da      	str	r2, [r3, #12]

    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d017      	beq.n	800791c <lv_obj_init_draw_label_dsc+0x104>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d011      	beq.n	800791c <lv_obj_init_draw_label_dsc+0x104>
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
 80078f8:	687c      	ldr	r4, [r7, #4]
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	4619      	mov	r1, r3
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f7fd f875 	bl	80049ee <lv_obj_get_style_text_sel_color>
 8007904:	6060      	str	r0, [r4, #4]
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
 8007906:	687c      	ldr	r4, [r7, #4]
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	4619      	mov	r1, r3
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f7fd f880 	bl	8004a12 <lv_obj_get_style_text_sel_bg_color>
 8007912:	60a0      	str	r0, [r4, #8]
 8007914:	e002      	b.n	800791c <lv_obj_init_draw_label_dsc+0x104>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007916:	bf00      	nop
 8007918:	e000      	b.n	800791c <lv_obj_init_draw_label_dsc+0x104>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 800791a:	bf00      	nop
    }

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_base_dir(obj);
#endif
}
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	bd90      	pop	{r4, r7, pc}

08007922 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint8_t part, lv_draw_img_dsc_t * draw_dsc)
{
 8007922:	b590      	push	{r4, r7, lr}
 8007924:	b087      	sub	sp, #28
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	460b      	mov	r3, r1
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	72fb      	strb	r3, [r7, #11]
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	4619      	mov	r1, r3
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7fd f944 	bl	8004bc2 <lv_obj_get_style_image_opa>
 800793a:	4603      	mov	r3, r0
 800793c:	461a      	mov	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	701a      	strb	r2, [r3, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b02      	cmp	r3, #2
 8007948:	d959      	bls.n	80079fe <lv_obj_init_draw_img_dsc+0xdc>

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	4619      	mov	r1, r3
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7fc fc7a 	bl	8004248 <lv_obj_get_style_opa_scale>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]
    if(opa_scale < LV_OPA_MAX) {
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	2bfc      	cmp	r3, #252	; 0xfc
 800795c:	d80c      	bhi.n	8007978 <lv_obj_init_draw_img_dsc+0x56>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b29a      	uxth	r2, r3
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	b29b      	uxth	r3, r3
 8007968:	fb12 f303 	smulbb	r3, r2, r3
 800796c:	b29b      	uxth	r3, r3
 800796e:	0a1b      	lsrs	r3, r3, #8
 8007970:	b29b      	uxth	r3, r3
 8007972:	b2da      	uxtb	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	701a      	strb	r2, [r3, #0]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b02      	cmp	r3, #2
 800797e:	d940      	bls.n	8007a02 <lv_obj_init_draw_img_dsc+0xe0>
#endif

    draw_dsc->angle = 0;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	805a      	strh	r2, [r3, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800798c:	811a      	strh	r2, [r3, #8]
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3310      	adds	r3, #16
 8007992:	4618      	mov	r0, r3
 8007994:	f7fc fa78 	bl	8003e88 <lv_area_get_width>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	da00      	bge.n	80079a0 <lv_obj_init_draw_img_dsc+0x7e>
 800799e:	3301      	adds	r3, #1
 80079a0:	105b      	asrs	r3, r3, #1
 80079a2:	b21a      	sxth	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	809a      	strh	r2, [r3, #4]
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3310      	adds	r3, #16
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fc fa82 	bl	8003eb6 <lv_area_get_height>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da00      	bge.n	80079ba <lv_obj_init_draw_img_dsc+0x98>
 80079b8:	3301      	adds	r3, #1
 80079ba:	105b      	asrs	r3, r3, #1
 80079bc:	b21a      	sxth	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	80da      	strh	r2, [r3, #6]

    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
 80079c2:	7afb      	ldrb	r3, [r7, #11]
 80079c4:	4619      	mov	r1, r3
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f7fd f90d 	bl	8004be6 <lv_obj_get_style_image_recolor_opa>
 80079cc:	4603      	mov	r3, r0
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	729a      	strb	r2, [r3, #10]
    if(draw_dsc->recolor_opa > 0) {
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	7a9b      	ldrb	r3, [r3, #10]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d006      	beq.n	80079ea <lv_obj_init_draw_img_dsc+0xc8>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
 80079dc:	687c      	ldr	r4, [r7, #4]
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	4619      	mov	r1, r3
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f7fd f8db 	bl	8004b9e <lv_obj_get_style_image_recolor>
 80079e8:	60e0      	str	r0, [r4, #12]
    }
#if LV_USE_BLEND_MODES
    draw_dsc->blend_mode = lv_obj_get_style_image_blend_mode(obj, part);
 80079ea:	7afb      	ldrb	r3, [r7, #11]
 80079ec:	4619      	mov	r1, r3
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7fd f8c2 	bl	8004b78 <lv_obj_get_style_image_blend_mode>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	741a      	strb	r2, [r3, #16]
 80079fc:	e002      	b.n	8007a04 <lv_obj_init_draw_img_dsc+0xe2>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80079fe:	bf00      	nop
 8007a00:	e000      	b.n	8007a04 <lv_obj_init_draw_img_dsc+0xe2>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007a02:	bf00      	nop
#endif
}
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd90      	pop	{r4, r7, pc}

08007a0a <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint8_t part, lv_draw_line_dsc_t * draw_dsc)
{
 8007a0a:	b590      	push	{r4, r7, lr}
 8007a0c:	b087      	sub	sp, #28
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	460b      	mov	r3, r1
 8007a14:	607a      	str	r2, [r7, #4]
 8007a16:	72fb      	strb	r3, [r7, #11]
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f7fd f82e 	bl	8004a7e <lv_obj_get_style_line_width>
 8007a22:	4603      	mov	r3, r0
 8007a24:	461a      	mov	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	809a      	strh	r2, [r3, #4]
    if(draw_dsc->width == 0) return;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d06a      	beq.n	8007b0a <lv_obj_init_draw_line_dsc+0x100>

    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	4619      	mov	r1, r3
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7fd f88c 	bl	8004b56 <lv_obj_get_style_line_opa>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	461a      	mov	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	729a      	strb	r2, [r3, #10]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	7a9b      	ldrb	r3, [r3, #10]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d95f      	bls.n	8007b0e <lv_obj_init_draw_line_dsc+0x104>

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	4619      	mov	r1, r3
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7fc fbf8 	bl	8004248 <lv_obj_get_style_opa_scale>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75fb      	strb	r3, [r7, #23]
    if(opa_scale < LV_OPA_MAX) {
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	2bfc      	cmp	r3, #252	; 0xfc
 8007a60:	d80c      	bhi.n	8007a7c <lv_obj_init_draw_line_dsc+0x72>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7a9b      	ldrb	r3, [r3, #10]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	fb12 f303 	smulbb	r3, r2, r3
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	0a1b      	lsrs	r3, r3, #8
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	729a      	strb	r2, [r3, #10]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7a9b      	ldrb	r3, [r3, #10]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d946      	bls.n	8007b12 <lv_obj_init_draw_line_dsc+0x108>
#endif

    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 8007a84:	687c      	ldr	r4, [r7, #4]
 8007a86:	7afb      	ldrb	r3, [r7, #11]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7fd f852 	bl	8004b34 <lv_obj_get_style_line_color>
 8007a90:	6020      	str	r0, [r4, #0]

    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8007a92:	7afb      	ldrb	r3, [r7, #11]
 8007a94:	4619      	mov	r1, r3
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7fd f814 	bl	8004ac4 <lv_obj_get_style_line_dash_width>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	80da      	strh	r2, [r3, #6]
    if(draw_dsc->dash_width) {
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d008      	beq.n	8007ac0 <lv_obj_init_draw_line_dsc+0xb6>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 8007aae:	7afb      	ldrb	r3, [r7, #11]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f7fd f817 	bl	8004ae6 <lv_obj_get_style_line_dash_gap>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	461a      	mov	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	811a      	strh	r2, [r3, #8]
    }

    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8007ac0:	7afb      	ldrb	r3, [r7, #11]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7fd f81f 	bl	8004b08 <lv_obj_get_style_line_rounded>
 8007aca:	4603      	mov	r3, r0
 8007acc:	4619      	mov	r1, r3
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	7ad3      	ldrb	r3, [r2, #11]
 8007ad2:	f361 0382 	bfi	r3, r1, #2, #1
 8007ad6:	72d3      	strb	r3, [r2, #11]
    draw_dsc->round_end = draw_dsc->round_start;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	7adb      	ldrb	r3, [r3, #11]
 8007adc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007ae0:	b2d9      	uxtb	r1, r3
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	7ad3      	ldrb	r3, [r2, #11]
 8007ae6:	f361 03c3 	bfi	r3, r1, #3, #1
 8007aea:	72d3      	strb	r3, [r2, #11]

#if LV_USE_BLEND_MODES
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	4619      	mov	r1, r3
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f7fc ffd5 	bl	8004aa0 <lv_obj_get_style_line_blend_mode>
 8007af6:	4603      	mov	r3, r0
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	b2d9      	uxtb	r1, r3
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	7ad3      	ldrb	r3, [r2, #11]
 8007b02:	f361 0301 	bfi	r3, r1, #0, #2
 8007b06:	72d3      	strb	r3, [r2, #11]
 8007b08:	e004      	b.n	8007b14 <lv_obj_init_draw_line_dsc+0x10a>
    if(draw_dsc->width == 0) return;
 8007b0a:	bf00      	nop
 8007b0c:	e002      	b.n	8007b14 <lv_obj_init_draw_line_dsc+0x10a>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007b0e:	bf00      	nop
 8007b10:	e000      	b.n	8007b14 <lv_obj_init_draw_line_dsc+0x10a>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007b12:	bf00      	nop
#endif
}
 8007b14:	371c      	adds	r7, #28
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd90      	pop	{r4, r7, pc}

08007b1a <lv_obj_get_draw_rect_ext_pad_size>:
 * Get the required extra size (around the object's part) to draw shadow, outline, value etc.
 * @param obj pointer to an object
 * @param part part of the object
 */
lv_coord_t lv_obj_get_draw_rect_ext_pad_size(lv_obj_t * obj, uint8_t part)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b096      	sub	sp, #88	; 0x58
 8007b1e:	af04      	add	r7, sp, #16
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70fb      	strb	r3, [r7, #3]
    lv_coord_t s = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fc fd70 	bl	8004616 <lv_obj_get_style_shadow_width>
 8007b36:	4603      	mov	r3, r0
 8007b38:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    if(sh_width) {
 8007b3c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d054      	beq.n	8007bee <lv_obj_get_draw_rect_ext_pad_size+0xd4>
        lv_opa_t sh_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fc fdcb 	bl	80046e4 <lv_obj_get_style_shadow_opa>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        if(sh_opa > LV_OPA_MIN) {
 8007b54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d948      	bls.n	8007bee <lv_obj_get_draw_rect_ext_pad_size+0xd4>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
 8007b5c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	da00      	bge.n	8007b66 <lv_obj_get_draw_rect_ext_pad_size+0x4c>
 8007b64:	3301      	adds	r3, #1
 8007b66:	105b      	asrs	r3, r3, #1
 8007b68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            sh_width++;
 8007b6c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	3301      	adds	r3, #1
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fc fd7c 	bl	800467c <lv_obj_get_style_shadow_spread>
 8007b84:	4603      	mov	r3, r0
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007b8c:	4413      	add	r3, r2
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            lv_style_int_t sh_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fc fd4d 	bl	8004638 <lv_obj_get_style_shadow_ofs_x>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            lv_style_int_t sh_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7fc fd56 	bl	800465a <lv_obj_get_style_shadow_ofs_y>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 8007bb2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8007bb6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8007bba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8007bbe:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bfb8      	it	lt
 8007bc6:	425b      	neglt	r3, r3
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	bfb8      	it	lt
 8007bcc:	4613      	movlt	r3, r2
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007bd4:	4413      	add	r3, r2
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            s = LV_MATH_MAX(s, sh_width);
 8007bdc:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8007be0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8007be4:	4293      	cmp	r3, r2
 8007be6:	bfb8      	it	lt
 8007be8:	4613      	movlt	r3, r2
 8007bea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }
    }

    const char * value_str = lv_obj_get_style_value_str(obj, part);
 8007bee:	78fb      	ldrb	r3, [r7, #3]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fc fe8e 	bl	8004914 <lv_obj_get_style_value_str>
 8007bf8:	63b8      	str	r0, [r7, #56]	; 0x38
    if(value_str) {
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 80d0 	beq.w	8007da2 <lv_obj_get_draw_rect_ext_pad_size+0x288>
        lv_opa_t value_opa = lv_obj_get_style_value_opa(obj, part);
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fc fe62 	bl	80048d0 <lv_obj_get_style_value_opa>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(value_opa > LV_OPA_MIN) {
 8007c12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	f240 80c3 	bls.w	8007da2 <lv_obj_get_draw_rect_ext_pad_size+0x288>
            lv_style_int_t letter_space = lv_obj_get_style_value_letter_space(obj, part);
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7fc fddc 	bl	80047de <lv_obj_get_style_value_letter_space>
 8007c26:	4603      	mov	r3, r0
 8007c28:	86bb      	strh	r3, [r7, #52]	; 0x34
            lv_style_int_t line_space = lv_obj_get_style_value_letter_space(obj, part);
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7fc fdd5 	bl	80047de <lv_obj_get_style_value_letter_space>
 8007c34:	4603      	mov	r3, r0
 8007c36:	867b      	strh	r3, [r7, #50]	; 0x32
            const lv_font_t * font = lv_obj_get_style_value_font(obj, part);
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7fc fe58 	bl	80048f2 <lv_obj_get_style_value_font>
 8007c42:	62f8      	str	r0, [r7, #44]	; 0x2c

            lv_point_t txt_size;
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 8007c44:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8007c48:	f107 0014 	add.w	r0, r7, #20
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9302      	str	r3, [sp, #8]
 8007c50:	f647 4318 	movw	r3, #31768	; 0x7c18
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c62:	f015 fd6f 	bl	801d744 <_lv_txt_get_size>

            lv_area_t value_area;
            value_area.x1 = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	81bb      	strh	r3, [r7, #12]
            value_area.y1 = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	81fb      	strh	r3, [r7, #14]
            value_area.x2 = txt_size.x - 1;
 8007c6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	3b01      	subs	r3, #1
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	b21b      	sxth	r3, r3
 8007c7a:	823b      	strh	r3, [r7, #16]
            value_area.y2 = txt_size.y - 1;
 8007c7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	b21b      	sxth	r3, r3
 8007c88:	827b      	strh	r3, [r7, #18]

            lv_style_int_t align = lv_obj_get_style_value_align(obj, part);
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7fc fdfb 	bl	800488a <lv_obj_get_style_value_align>
 8007c94:	4603      	mov	r3, r0
 8007c96:	857b      	strh	r3, [r7, #42]	; 0x2a
            lv_style_int_t xofs = lv_obj_get_style_value_ofs_x(obj, part);
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7fc fdd2 	bl	8004846 <lv_obj_get_style_value_ofs_x>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	853b      	strh	r3, [r7, #40]	; 0x28
            lv_style_int_t yofs = lv_obj_get_style_value_ofs_y(obj, part);
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fc fddc 	bl	8004868 <lv_obj_get_style_value_ofs_y>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_point_t p_align;
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f103 0010 	add.w	r0, r3, #16
 8007cba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	f107 0308 	add.w	r3, r7, #8
 8007cc2:	f107 010c 	add.w	r1, r7, #12
 8007cc6:	f013 f9ed 	bl	801b0a4 <_lv_area_align>

            value_area.x1 += p_align.x + xofs;
 8007cca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007cd4:	b299      	uxth	r1, r3
 8007cd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007cd8:	440b      	add	r3, r1
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	4413      	add	r3, r2
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	b21b      	sxth	r3, r3
 8007ce2:	81bb      	strh	r3, [r7, #12]
            value_area.y1 += p_align.y + yofs;
 8007ce4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007cee:	b299      	uxth	r1, r3
 8007cf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cf2:	440b      	add	r3, r1
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	4413      	add	r3, r2
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	b21b      	sxth	r3, r3
 8007cfc:	81fb      	strh	r3, [r7, #14]
            value_area.x2 += p_align.x + xofs;
 8007cfe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007d08:	b299      	uxth	r1, r3
 8007d0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d0c:	440b      	add	r3, r1
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	4413      	add	r3, r2
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	b21b      	sxth	r3, r3
 8007d16:	823b      	strh	r3, [r7, #16]
            value_area.y2 += p_align.y + yofs;
 8007d18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007d22:	b299      	uxth	r1, r3
 8007d24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d26:	440b      	add	r3, r1
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	4413      	add	r3, r2
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	b21b      	sxth	r3, r3
 8007d30:	827b      	strh	r3, [r7, #18]

            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8007d44:	4293      	cmp	r3, r2
 8007d46:	bfb8      	it	lt
 8007d48:	4613      	movlt	r3, r2
 8007d4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007d54:	461a      	mov	r2, r3
 8007d56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d5a:	1ad2      	subs	r2, r2, r3
 8007d5c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8007d60:	4293      	cmp	r3, r2
 8007d62:	bfb8      	it	lt
 8007d64:	4613      	movlt	r3, r2
 8007d66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 8007d6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d76:	1ad2      	subs	r2, r2, r3
 8007d78:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	bfb8      	it	lt
 8007d80:	4613      	movlt	r3, r2
 8007d82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 8007d86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007d92:	1ad2      	subs	r2, r2, r3
 8007d94:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	bfb8      	it	lt
 8007d9c:	4613      	movlt	r3, r2
 8007d9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }
    }

    lv_style_int_t outline_width = lv_obj_get_style_outline_width(obj, part);
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fc fbdf 	bl	800456a <lv_obj_get_style_outline_width>
 8007dac:	4603      	mov	r3, r0
 8007dae:	84bb      	strh	r3, [r7, #36]	; 0x24
    if(outline_width) {
 8007db0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01e      	beq.n	8007df6 <lv_obj_get_draw_rect_ext_pad_size+0x2dc>
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7fc fc19 	bl	80045f4 <lv_obj_get_style_outline_opa>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(outline_opa > LV_OPA_MIN) {
 8007dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d912      	bls.n	8007df6 <lv_obj_get_draw_rect_ext_pad_size+0x2dc>
            lv_style_int_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7fc fbd9 	bl	800458c <lv_obj_get_style_outline_pad>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	843b      	strh	r3, [r7, #32]
            s = LV_MATH_MAX(s, outline_pad + outline_width);
 8007dde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007de2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007de6:	441a      	add	r2, r3
 8007de8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8007dec:	4293      	cmp	r3, r2
 8007dee:	bfb8      	it	lt
 8007df0:	4613      	movlt	r3, r2
 8007df2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7fc f9e0 	bl	80041c0 <lv_obj_get_style_transform_width>
 8007e00:	4603      	mov	r3, r0
 8007e02:	83fb      	strh	r3, [r7, #30]
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7fc f9ea 	bl	80041e2 <lv_obj_get_style_transform_height>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	83bb      	strh	r3, [r7, #28]
    lv_coord_t wh = LV_MATH_MAX(w, h);
 8007e12:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007e16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	bfb8      	it	lt
 8007e1e:	4613      	movlt	r3, r2
 8007e20:	837b      	strh	r3, [r7, #26]
    if(wh > 0) s += wh;
 8007e22:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	dd06      	ble.n	8007e38 <lv_obj_get_draw_rect_ext_pad_size+0x31e>
 8007e2a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007e2e:	8b7b      	ldrh	r3, [r7, #26]
 8007e30:	4413      	add	r3, r2
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    return s;
 8007e38:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3748      	adds	r7, #72	; 0x48
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <lv_obj_design>:
 *                                  (return 'true' if yes)
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_obj_design(lv_obj_t * obj, const lv_area_t * clip_area, lv_design_mode_t mode)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b0ac      	sub	sp, #176	; 0xb0
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	f040 8085 	bne.w	8007f64 <lv_obj_design+0x120>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f7fc f988 	bl	8004172 <lv_obj_get_style_clip_corner>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <lv_obj_design+0x28>
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e1c0      	b.n	80081ee <lv_obj_design+0x3aa>

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        lv_coord_t r = lv_obj_get_style_radius(obj, LV_OBJ_PART_MAIN);
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f7fc f96e 	bl	8004150 <lv_obj_get_style_radius>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_OBJ_PART_MAIN);
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7fc f99f 	bl	80041c0 <lv_obj_get_style_transform_width>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_OBJ_PART_MAIN);
 8007e88:	2100      	movs	r1, #0
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7fc f9a9 	bl	80041e2 <lv_obj_get_style_transform_height>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f103 0210 	add.w	r2, r3, #16
 8007e9c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fb ffe2 	bl	8003e6c <lv_area_copy>
        coords.x1 -= w;
 8007ea8:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	b21b      	sxth	r3, r3
 8007eb8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        coords.x2 += w;
 8007ebc:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007ec6:	4413      	add	r3, r2
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	b21b      	sxth	r3, r3
 8007ecc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
        coords.y1 -= h;
 8007ed0:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	b21b      	sxth	r3, r3
 8007ee0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
        coords.y2 += h;
 8007ee4:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007eee:	4413      	add	r3, r2
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	b21b      	sxth	r3, r3
 8007ef4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8007ef8:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8007efc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007f00:	4619      	mov	r1, r3
 8007f02:	68b8      	ldr	r0, [r7, #8]
 8007f04:	f013 f830 	bl	801af68 <_lv_area_is_in>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f083 0301 	eor.w	r3, r3, #1
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <lv_obj_design+0xd4>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e16a      	b.n	80081ee <lv_obj_design+0x3aa>

        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8007f18:	2100      	movs	r1, #0
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f7fc faa7 	bl	800446e <lv_obj_get_style_bg_opa>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2bfc      	cmp	r3, #252	; 0xfc
 8007f24:	d801      	bhi.n	8007f2a <lv_obj_design+0xe6>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e161      	b.n	80081ee <lv_obj_design+0x3aa>

        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7fc fa36 	bl	800439e <lv_obj_get_style_bg_blend_mode>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <lv_obj_design+0xf8>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e158      	b.n	80081ee <lv_obj_design+0x3aa>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7fc fac9 	bl	80044d6 <lv_obj_get_style_border_blend_mode>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <lv_obj_design+0x10a>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e14f      	b.n	80081ee <lv_obj_design+0x3aa>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8007f4e:	2100      	movs	r1, #0
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7fc f979 	bl	8004248 <lv_obj_get_style_opa_scale>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2bfc      	cmp	r3, #252	; 0xfc
 8007f5a:	d801      	bhi.n	8007f60 <lv_obj_design+0x11c>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e146      	b.n	80081ee <lv_obj_design+0x3aa>

        return LV_DESIGN_RES_COVER;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e144      	b.n	80081ee <lv_obj_design+0x3aa>

    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f040 80c4 	bne.w	80080f4 <lv_obj_design+0x2b0>
        lv_draw_rect_dsc_t draw_dsc;
        lv_draw_rect_dsc_init(&draw_dsc);
 8007f6c:	f107 0310 	add.w	r3, r7, #16
 8007f70:	4618      	mov	r0, r3
 8007f72:	f00b f865 	bl	8013040 <lv_draw_rect_dsc_init>
        /*If the border is drawn later disable loading its properties*/
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8007f76:	2100      	movs	r1, #0
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7fc fabe 	bl	80044fa <lv_obj_get_style_border_post>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <lv_obj_design+0x14c>
            draw_dsc.border_post = 1;
 8007f84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f88:	f043 0301 	orr.w	r3, r3, #1
 8007f8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }

        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8007f90:	f107 0310 	add.w	r3, r7, #16
 8007f94:	461a      	mov	r2, r3
 8007f96:	2100      	movs	r1, #0
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7ff f9e9 	bl	8007370 <lv_obj_init_draw_rect_dsc>

        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_OBJ_PART_MAIN);
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f7fc f90d 	bl	80041c0 <lv_obj_get_style_transform_width>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_OBJ_PART_MAIN);
 8007fac:	2100      	movs	r1, #0
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f7fc f917 	bl	80041e2 <lv_obj_get_style_transform_height>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f103 0210 	add.w	r2, r3, #16
 8007fc0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fb ff50 	bl	8003e6c <lv_area_copy>
        coords.x1 -= w;
 8007fcc:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	b21b      	sxth	r3, r3
 8007fdc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        coords.x2 += w;
 8007fe0:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007fea:	4413      	add	r3, r2
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	b21b      	sxth	r3, r3
 8007ff0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        coords.y1 -= h;
 8007ff4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	b29b      	uxth	r3, r3
 8008002:	b21b      	sxth	r3, r3
 8008004:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        coords.y2 += h;
 8008008:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 800800c:	b29a      	uxth	r2, r3
 800800e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8008012:	4413      	add	r3, r2
 8008014:	b29b      	uxth	r3, r3
 8008016:	b21b      	sxth	r3, r3
 8008018:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

        lv_draw_rect(&coords, clip_area, &draw_dsc);
 800801c:	f107 0210 	add.w	r2, r7, #16
 8008020:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	4618      	mov	r0, r3
 8008028:	f00b f88e 	bl	8013148 <lv_draw_rect>

        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 800802c:	2100      	movs	r1, #0
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7fc f89f 	bl	8004172 <lv_obj_get_style_clip_corner>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 80d8 	beq.w	80081ec <lv_obj_design+0x3a8>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 800803c:	201c      	movs	r0, #28
 800803e:	f014 faf7 	bl	801c630 <_lv_mem_buf_get>
 8008042:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

            lv_coord_t r = lv_obj_get_style_radius(obj, LV_OBJ_PART_MAIN);
 8008046:	2100      	movs	r1, #0
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f7fc f881 	bl	8004150 <lv_obj_get_style_radius>
 800804e:	4603      	mov	r3, r0
 8008050:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            /* If it has border make the clip area 1 px smaller to avoid color bleeding
             * The border will cover the minimal issue on the edges*/
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 8008054:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d035      	beq.n	80080ce <lv_obj_design+0x28a>
 8008062:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008066:	2b01      	cmp	r3, #1
 8008068:	d931      	bls.n	80080ce <lv_obj_design+0x28a>
 800806a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800806e:	2b00      	cmp	r3, #0
 8008070:	dd2d      	ble.n	80080ce <lv_obj_design+0x28a>
                lv_area_t cc_area;
                cc_area.x1 = obj->coords.x1 + 1;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008078:	b29b      	uxth	r3, r3
 800807a:	3301      	adds	r3, #1
 800807c:	b29b      	uxth	r3, r3
 800807e:	b21b      	sxth	r3, r3
 8008080:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                cc_area.y1 = obj->coords.y1 + 1;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800808a:	b29b      	uxth	r3, r3
 800808c:	3301      	adds	r3, #1
 800808e:	b29b      	uxth	r3, r3
 8008090:	b21b      	sxth	r3, r3
 8008092:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                cc_area.x2 = obj->coords.x2 - 1;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	b21b      	sxth	r3, r3
 80080a4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
                cc_area.y2 = obj->coords.y2 - 1;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	b21b      	sxth	r3, r3
 80080b6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 80080ba:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 80080be:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80080c2:	2300      	movs	r3, #0
 80080c4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80080c8:	f009 fd96 	bl	8011bf8 <lv_draw_mask_radius_init>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 80080cc:	e009      	b.n	80080e2 <lv_obj_design+0x29e>
            }
            /*If no border use the full size.*/
            else {
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f103 0110 	add.w	r1, r3, #16
 80080d4:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 80080d8:	2300      	movs	r3, #0
 80080da:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80080de:	f009 fd8b 	bl	8011bf8 <lv_draw_mask_radius_init>
            }

            /*Add the mask and use `obj+8` as custom id. Don't use `obj` directly because it might be used by the user*/
            lv_draw_mask_add(mp, obj + 8);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80080e8:	4619      	mov	r1, r3
 80080ea:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80080ee:	f009 fb69 	bl	80117c4 <lv_draw_mask_add>
 80080f2:	e07b      	b.n	80081ec <lv_obj_design+0x3a8>
        }
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d178      	bne.n	80081ec <lv_obj_design+0x3a8>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 80080fa:	2100      	movs	r1, #0
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f7fc f838 	bl	8004172 <lv_obj_get_style_clip_corner>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00b      	beq.n	8008120 <lv_obj_design+0x2dc>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800810e:	4618      	mov	r0, r3
 8008110:	f009 fbf6 	bl	8011900 <lv_draw_mask_remove_custom>
 8008114:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            _lv_mem_buf_release(param);
 8008118:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800811c:	f014 fb66 	bl	801c7ec <_lv_mem_buf_release>
        }

        /*If the border is drawn later disable loading other properties*/
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8008120:	2100      	movs	r1, #0
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7fc f9e9 	bl	80044fa <lv_obj_get_style_border_post>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d05e      	beq.n	80081ec <lv_obj_design+0x3a8>
            lv_draw_rect_dsc_t draw_dsc;
            lv_draw_rect_dsc_init(&draw_dsc);
 800812e:	f107 0310 	add.w	r3, r7, #16
 8008132:	4618      	mov	r0, r3
 8008134:	f00a ff84 	bl	8013040 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8008138:	2300      	movs	r3, #0
 800813a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 800813e:	2300      	movs	r3, #0
 8008140:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8008144:	2300      	movs	r3, #0
 8008146:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            draw_dsc.value_opa = LV_OPA_TRANSP;
 800814a:	2300      	movs	r3, #0
 800814c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8008150:	f107 0310 	add.w	r3, r7, #16
 8008154:	461a      	mov	r2, r3
 8008156:	2100      	movs	r1, #0
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f7ff f909 	bl	8007370 <lv_obj_init_draw_rect_dsc>

            lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_OBJ_PART_MAIN);
 800815e:	2100      	movs	r1, #0
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f7fc f82d 	bl	80041c0 <lv_obj_get_style_transform_width>
 8008166:	4603      	mov	r3, r0
 8008168:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
            lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_OBJ_PART_MAIN);
 800816c:	2100      	movs	r1, #0
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7fc f837 	bl	80041e2 <lv_obj_get_style_transform_height>
 8008174:	4603      	mov	r3, r0
 8008176:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
            lv_area_t coords;
            lv_area_copy(&coords, &obj->coords);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f103 0210 	add.w	r2, r3, #16
 8008180:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7fb fe70 	bl	8003e6c <lv_area_copy>
            coords.x1 -= w;
 800818c:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8008190:	b29a      	uxth	r2, r3
 8008192:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	b29b      	uxth	r3, r3
 800819a:	b21b      	sxth	r3, r3
 800819c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            coords.x2 += w;
 80081a0:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80081aa:	4413      	add	r3, r2
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	b21b      	sxth	r3, r3
 80081b0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            coords.y1 -= h;
 80081b4:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	b21b      	sxth	r3, r3
 80081c4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            coords.y2 += h;
 80081c8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80081d2:	4413      	add	r3, r2
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	b21b      	sxth	r3, r3
 80081d8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 80081dc:	f107 0210 	add.w	r2, r7, #16
 80081e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f00a ffae 	bl	8013148 <lv_draw_rect>
        }
    }

    return LV_DESIGN_RES_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	37b0      	adds	r7, #176	; 0xb0
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <lv_obj_get_focused_obj>:
 * Get the really focused object by taking `focus_parent` into account.
 * @param obj the start object
 * @return the object to really focus
 */
lv_obj_t * lv_obj_get_focused_obj(const lv_obj_t * obj)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <lv_obj_get_focused_obj+0x12>
 8008204:	2300      	movs	r3, #0
 8008206:	e010      	b.n	800822a <lv_obj_get_focused_obj+0x34>
    const lv_obj_t * focus_obj = obj;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	60fb      	str	r3, [r7, #12]
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 800820c:	e003      	b.n	8008216 <lv_obj_get_focused_obj+0x20>
        focus_obj = lv_obj_get_parent(focus_obj);
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7fe f9ae 	bl	8006570 <lv_obj_get_parent>
 8008214:	60f8      	str	r0, [r7, #12]
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7fe ff42 	bl	80070a0 <lv_obj_get_focus_parent>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <lv_obj_get_focused_obj+0x32>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1f2      	bne.n	800820e <lv_obj_get_focused_obj+0x18>
    }

    return (lv_obj_t *)focus_obj;
 8008228:	68fb      	ldr	r3, [r7, #12]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <lv_obj_signal>:
 * @param sign signal type
 * @param param parameter for the signal (depends on signal type)
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	460b      	mov	r3, r1
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	72fb      	strb	r3, [r7, #11]
    if(sign == LV_SIGNAL_GET_STYLE) {
 8008242:	7afb      	ldrb	r3, [r7, #11]
 8008244:	2b08      	cmp	r3, #8
 8008246:	d110      	bne.n	800826a <lv_obj_signal+0x36>
        lv_get_style_info_t * info = param;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	617b      	str	r3, [r7, #20]
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <lv_obj_signal+0x2c>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	e002      	b.n	8008266 <lv_obj_signal+0x32>
        else info->result = NULL;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2200      	movs	r2, #0
 8008264:	605a      	str	r2, [r3, #4]
        return LV_RES_OK;
 8008266:	2301      	movs	r3, #1
 8008268:	e098      	b.n	800839c <lv_obj_signal+0x168>
    }
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 800826a:	7afb      	ldrb	r3, [r7, #11]
 800826c:	2b07      	cmp	r3, #7
 800826e:	d105      	bne.n	800827c <lv_obj_signal+0x48>
 8008270:	494c      	ldr	r1, [pc, #304]	; (80083a4 <lv_obj_signal+0x170>)
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff f85a 	bl	800732c <lv_obj_handle_get_type_signal>
 8008278:	4603      	mov	r3, r0
 800827a:	e08f      	b.n	800839c <lv_obj_signal+0x168>

    lv_res_t res = LV_RES_OK;
 800827c:	2301      	movs	r3, #1
 800827e:	77fb      	strb	r3, [r7, #31]

    if(sign == LV_SIGNAL_CHILD_CHG) {
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d10a      	bne.n	800829c <lv_obj_signal+0x68>
        /*Return 'invalid' if the child change signal is not enabled*/
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8008286:	2101      	movs	r1, #1
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7fe ff3d 	bl	8007108 <lv_obj_is_protected>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 8082 	beq.w	800839a <lv_obj_signal+0x166>
 8008296:	2300      	movs	r3, #0
 8008298:	77fb      	strb	r3, [r7, #31]
 800829a:	e07e      	b.n	800839a <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800829c:	7afb      	ldrb	r3, [r7, #11]
 800829e:	2b06      	cmp	r3, #6
 80082a0:	d111      	bne.n	80082c6 <lv_obj_signal+0x92>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
 80082a2:	2100      	movs	r1, #0
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff fc38 	bl	8007b1a <lv_obj_get_draw_rect_ext_pad_size>
 80082aa:	4603      	mov	r3, r0
 80082ac:	837b      	strh	r3, [r7, #26]
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80082b4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	bfb8      	it	lt
 80082bc:	4613      	movlt	r3, r2
 80082be:	b21a      	sxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	865a      	strh	r2, [r3, #50]	; 0x32
 80082c4:	e069      	b.n	800839a <lv_obj_signal+0x166>
    }
#if LV_USE_OBJ_REALIGN
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 80082c6:	7afb      	ldrb	r3, [r7, #11]
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d10b      	bne.n	80082e4 <lv_obj_signal+0xb0>
        if(obj->realign.auto_realign) {
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d05e      	beq.n	800839a <lv_obj_signal+0x166>
            lv_obj_realign(obj);
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f7fd fc05 	bl	8005aec <lv_obj_realign>
 80082e2:	e05a      	b.n	800839a <lv_obj_signal+0x166>
        }
    }
#endif
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 80082e4:	7afb      	ldrb	r3, [r7, #11]
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d103      	bne.n	80082f2 <lv_obj_signal+0xbe>
        lv_obj_refresh_ext_draw_pad(obj);
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f7fe f8a4 	bl	8006438 <lv_obj_refresh_ext_draw_pad>
 80082f0:	e053      	b.n	800839a <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_PRESSED) {
 80082f2:	7afb      	ldrb	r3, [r7, #11]
 80082f4:	2b0b      	cmp	r3, #11
 80082f6:	d104      	bne.n	8008302 <lv_obj_signal+0xce>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 80082f8:	2110      	movs	r1, #16
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7fd ff68 	bl	80061d0 <lv_obj_add_state>
 8008300:	e04b      	b.n	800839a <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8008302:	7afb      	ldrb	r3, [r7, #11]
 8008304:	2b0e      	cmp	r3, #14
 8008306:	d002      	beq.n	800830e <lv_obj_signal+0xda>
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	2b0d      	cmp	r3, #13
 800830c:	d104      	bne.n	8008318 <lv_obj_signal+0xe4>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 800830e:	2110      	movs	r1, #16
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7fd ff8d 	bl	8006230 <lv_obj_clear_state>
 8008316:	e040      	b.n	800839a <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_FOCUS) {
 8008318:	7afb      	ldrb	r3, [r7, #11]
 800831a:	2b16      	cmp	r3, #22
 800831c:	d12a      	bne.n	8008374 <lv_obj_signal+0x140>
        bool editing = false;
 800831e:	2300      	movs	r3, #0
 8008320:	77bb      	strb	r3, [r7, #30]
#if LV_USE_GROUP
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7fe ff4c 	bl	80071c0 <lv_obj_get_group>
 8008328:	4603      	mov	r3, r0
 800832a:	4618      	mov	r0, r3
 800832c:	f7f9 faae 	bl	800188c <lv_group_get_editing>
 8008330:	4603      	mov	r3, r0
 8008332:	77bb      	strb	r3, [r7, #30]
#endif
        if(editing) {
 8008334:	7fbb      	ldrb	r3, [r7, #30]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00f      	beq.n	800835a <lv_obj_signal+0x126>
            uint8_t state = LV_STATE_FOCUSED;
 800833a:	2302      	movs	r3, #2
 800833c:	777b      	strb	r3, [r7, #29]
            state |= LV_STATE_EDITED;
 800833e:	7f7b      	ldrb	r3, [r7, #29]
 8008340:	f043 0304 	orr.w	r3, r3, #4
 8008344:	777b      	strb	r3, [r7, #29]

            /*if using focus mode, change target to parent*/
            obj = lv_obj_get_focused_obj(obj);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff ff55 	bl	80081f6 <lv_obj_get_focused_obj>
 800834c:	60f8      	str	r0, [r7, #12]

            lv_obj_add_state(obj, state);
 800834e:	7f7b      	ldrb	r3, [r7, #29]
 8008350:	4619      	mov	r1, r3
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7fd ff3c 	bl	80061d0 <lv_obj_add_state>
 8008358:	e01f      	b.n	800839a <lv_obj_signal+0x166>
        }
        else {

            /*if using focus mode, change target to parent*/
            obj = lv_obj_get_focused_obj(obj);
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff ff4b 	bl	80081f6 <lv_obj_get_focused_obj>
 8008360:	60f8      	str	r0, [r7, #12]

            lv_obj_add_state(obj, LV_STATE_FOCUSED);
 8008362:	2102      	movs	r1, #2
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f7fd ff33 	bl	80061d0 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 800836a:	2104      	movs	r1, #4
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f7fd ff5f 	bl	8006230 <lv_obj_clear_state>
 8008372:	e012      	b.n	800839a <lv_obj_signal+0x166>
        }
    }
    else if(sign == LV_SIGNAL_DEFOCUS) {
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	2b17      	cmp	r3, #23
 8008378:	d108      	bne.n	800838c <lv_obj_signal+0x158>

        /*if using focus mode, change target to parent*/
        obj = lv_obj_get_focused_obj(obj);
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f7ff ff3b 	bl	80081f6 <lv_obj_get_focused_obj>
 8008380:	60f8      	str	r0, [r7, #12]

        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 8008382:	2106      	movs	r1, #6
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7fd ff53 	bl	8006230 <lv_obj_clear_state>
 800838a:	e006      	b.n	800839a <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_CLEANUP) {
 800838c:	7afb      	ldrb	r3, [r7, #11]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d103      	bne.n	800839a <lv_obj_signal+0x166>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 8008392:	2100      	movs	r1, #0
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7fd fbef 	bl	8005b78 <lv_obj_clean_style_list>
    }

    return res;
 800839a:	7ffb      	ldrb	r3, [r7, #31]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	08028344 	.word	0x08028344

080083a8 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	807b      	strh	r3, [r7, #2]
 80083b4:	4613      	mov	r3, r2
 80083b6:	803b      	strh	r3, [r7, #0]
    lv_obj_t * i;
    _LV_LL_READ(obj->child_ll, i) {
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4618      	mov	r0, r3
 80083be:	f013 fdff 	bl	801bfc0 <_lv_ll_get_head>
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	e036      	b.n	8008434 <refresh_children_position+0x8c>
        i->coords.x1 += x_diff;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	887b      	ldrh	r3, [r7, #2]
 80083d0:	4413      	add	r3, r2
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	b21a      	sxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	821a      	strh	r2, [r3, #16]
        i->coords.y1 += y_diff;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	883b      	ldrh	r3, [r7, #0]
 80083e4:	4413      	add	r3, r2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	b21a      	sxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	825a      	strh	r2, [r3, #18]
        i->coords.x2 += x_diff;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	887b      	ldrh	r3, [r7, #2]
 80083f8:	4413      	add	r3, r2
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	b21a      	sxth	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	829a      	strh	r2, [r3, #20]
        i->coords.y2 += y_diff;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008408:	b29a      	uxth	r2, r3
 800840a:	883b      	ldrh	r3, [r7, #0]
 800840c:	4413      	add	r3, r2
 800840e:	b29b      	uxth	r3, r3
 8008410:	b21a      	sxth	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	82da      	strh	r2, [r3, #22]

        refresh_children_position(i, x_diff, y_diff);
 8008416:	f9b7 2000 	ldrsh.w	r2, [r7]
 800841a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800841e:	4619      	mov	r1, r3
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7ff ffc1 	bl	80083a8 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3304      	adds	r3, #4
 800842a:	68f9      	ldr	r1, [r7, #12]
 800842c:	4618      	mov	r0, r3
 800842e:	f013 fded 	bl	801c00c <_lv_ll_get_next>
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1c5      	bne.n	80083c6 <refresh_children_position+0x1e>
    }
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <report_style_mod_core>:
 * Refresh the style of all children of an object. (Called recursively)
 * @param style refresh objects only with this style_list.
 * @param obj pointer to an object
 */
static void report_style_mod_core(void * style, lv_obj_t * obj)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b086      	sub	sp, #24
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 800844c:	2300      	movs	r3, #0
 800844e:	75fb      	strb	r3, [r7, #23]
 8008450:	e02e      	b.n	80084b0 <report_style_mod_core+0x6e>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8008452:	7dfb      	ldrb	r3, [r7, #23]
 8008454:	4619      	mov	r1, r3
 8008456:	6838      	ldr	r0, [r7, #0]
 8008458:	f7fe f9aa 	bl	80067b0 <lv_obj_get_style_list>
 800845c:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d029      	beq.n	80084b8 <report_style_mod_core+0x76>

        uint8_t ci;
        for(ci = 0; ci < list->style_cnt; ci++) {
 8008464:	2300      	movs	r3, #0
 8008466:	75bb      	strb	r3, [r7, #22]
 8008468:	e016      	b.n	8008498 <report_style_mod_core+0x56>
            /* changed class to _class to allow compilation as c++ */
            lv_style_t * _class = lv_style_list_get_style(list, ci);
 800846a:	7dbb      	ldrb	r3, [r7, #22]
 800846c:	4619      	mov	r1, r3
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f7fb fe39 	bl	80040e6 <lv_style_list_get_style>
 8008474:	60b8      	str	r0, [r7, #8]
            if(_class == style || style == NULL) {
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	429a      	cmp	r2, r3
 800847c:	d002      	beq.n	8008484 <report_style_mod_core+0x42>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d106      	bne.n	8008492 <report_style_mod_core+0x50>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	22ff      	movs	r2, #255	; 0xff
 8008488:	4619      	mov	r1, r3
 800848a:	6838      	ldr	r0, [r7, #0]
 800848c:	f7fd fba6 	bl	8005bdc <lv_obj_refresh_style>
                break;
 8008490:	e00b      	b.n	80084aa <report_style_mod_core+0x68>
        for(ci = 0; ci < list->style_cnt; ci++) {
 8008492:	7dbb      	ldrb	r3, [r7, #22]
 8008494:	3301      	adds	r3, #1
 8008496:	75bb      	strb	r3, [r7, #22]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	791b      	ldrb	r3, [r3, #4]
 800849c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	461a      	mov	r2, r3
 80084a4:	7dbb      	ldrb	r3, [r7, #22]
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d3df      	bcc.n	800846a <report_style_mod_core+0x28>
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	3301      	adds	r3, #1
 80084ae:	75fb      	strb	r3, [r7, #23]
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	2b40      	cmp	r3, #64	; 0x40
 80084b4:	d1cd      	bne.n	8008452 <report_style_mod_core+0x10>
 80084b6:	e000      	b.n	80084ba <report_style_mod_core+0x78>
        if(list == NULL) break;
 80084b8:	bf00      	nop
            }
        }
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 80084ba:	2100      	movs	r1, #0
 80084bc:	6838      	ldr	r0, [r7, #0]
 80084be:	f7fe f875 	bl	80065ac <lv_obj_get_child>
 80084c2:	6138      	str	r0, [r7, #16]
    while(child) {
 80084c4:	e008      	b.n	80084d8 <report_style_mod_core+0x96>
        report_style_mod_core(style, child);
 80084c6:	6939      	ldr	r1, [r7, #16]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff ffba 	bl	8008442 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
 80084ce:	6939      	ldr	r1, [r7, #16]
 80084d0:	6838      	ldr	r0, [r7, #0]
 80084d2:	f7fe f86b 	bl	80065ac <lv_obj_get_child>
 80084d6:	6138      	str	r0, [r7, #16]
    while(child) {
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1f3      	bne.n	80084c6 <report_style_mod_core+0x84>
    }

}
 80084de:	bf00      	nop
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 80084ee:	2100      	movs	r1, #0
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7fe f85b 	bl	80065ac <lv_obj_get_child>
 80084f6:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 80084f8:	e013      	b.n	8008522 <refresh_children_style+0x3c>
        lv_obj_invalidate(child);
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f7fd f818 	bl	8005530 <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	2200      	movs	r2, #0
 8008506:	2104      	movs	r1, #4
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	4798      	blx	r3
        lv_obj_invalidate(child);
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f7fd f80f 	bl	8005530 <lv_obj_invalidate>

        refresh_children_style(child); /*Check children too*/
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff ffe7 	bl	80084e6 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
 8008518:	68f9      	ldr	r1, [r7, #12]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7fe f846 	bl	80065ac <lv_obj_get_child>
 8008520:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e8      	bne.n	80084fa <refresh_children_style+0x14>
    }
}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <obj_align_core>:
    }
}

static void obj_align_core(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, bool x_set, bool y_set,
                           lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	4611      	mov	r1, r2
 800853c:	461a      	mov	r2, r3
 800853e:	460b      	mov	r3, r1
 8008540:	71fb      	strb	r3, [r7, #7]
 8008542:	4613      	mov	r3, r2
 8008544:	71bb      	strb	r3, [r7, #6]
    lv_point_t new_pos;
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	f103 0010 	add.w	r0, r3, #16
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f103 0110 	add.w	r1, r3, #16
 8008552:	f107 0314 	add.w	r3, r7, #20
 8008556:	79fa      	ldrb	r2, [r7, #7]
 8008558:	f012 fda4 	bl	801b0a4 <_lv_area_align>

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7fe f807 	bl	8006570 <lv_obj_get_parent>
 8008562:	61f8      	str	r0, [r7, #28]
    lv_coord_t par_abs_x  = par->coords.x1;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	8a1b      	ldrh	r3, [r3, #16]
 8008568:	837b      	strh	r3, [r7, #26]
    lv_coord_t par_abs_y  = par->coords.y1;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	8a5b      	ldrh	r3, [r3, #18]
 800856e:	833b      	strh	r3, [r7, #24]
    new_pos.x += x_ofs;
 8008570:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008574:	b29a      	uxth	r2, r3
 8008576:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008578:	4413      	add	r3, r2
 800857a:	b29b      	uxth	r3, r3
 800857c:	b21b      	sxth	r3, r3
 800857e:	82bb      	strh	r3, [r7, #20]
    new_pos.y += y_ofs;
 8008580:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008584:	b29a      	uxth	r2, r3
 8008586:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008588:	4413      	add	r3, r2
 800858a:	b29b      	uxth	r3, r3
 800858c:	b21b      	sxth	r3, r3
 800858e:	82fb      	strh	r3, [r7, #22]
    new_pos.x -= par_abs_x;
 8008590:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008594:	b29a      	uxth	r2, r3
 8008596:	8b7b      	ldrh	r3, [r7, #26]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	b29b      	uxth	r3, r3
 800859c:	b21b      	sxth	r3, r3
 800859e:	82bb      	strh	r3, [r7, #20]
    new_pos.y -= par_abs_y;
 80085a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	8b3b      	ldrh	r3, [r7, #24]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	b21b      	sxth	r3, r3
 80085ae:	82fb      	strh	r3, [r7, #22]

    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
 80085b0:	79bb      	ldrb	r3, [r7, #6]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00c      	beq.n	80085d0 <obj_align_core+0xa0>
 80085b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <obj_align_core+0xa0>
 80085be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80085c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80085c6:	4619      	mov	r1, r3
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7fd f8d5 	bl	8005778 <lv_obj_set_pos>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
}
 80085ce:	e013      	b.n	80085f8 <obj_align_core+0xc8>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
 80085d0:	79bb      	ldrb	r3, [r7, #6]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d006      	beq.n	80085e4 <obj_align_core+0xb4>
 80085d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80085da:	4619      	mov	r1, r3
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f7fd f971 	bl	80058c4 <lv_obj_set_x>
}
 80085e2:	e009      	b.n	80085f8 <obj_align_core+0xc8>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
 80085e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <obj_align_core+0xc8>
 80085ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80085f0:	4619      	mov	r1, r3
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f7fd f990 	bl	8005918 <lv_obj_set_y>
}
 80085f8:	bf00      	nop
 80085fa:	3720      	adds	r7, #32
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <obj_align_mid_core>:

static void obj_align_mid_core(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align,  bool x_set, bool y_set,
                               lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	; 0x28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4611      	mov	r1, r2
 800860c:	461a      	mov	r2, r3
 800860e:	460b      	mov	r3, r1
 8008610:	71fb      	strb	r3, [r7, #7]
 8008612:	4613      	mov	r3, r2
 8008614:	71bb      	strb	r3, [r7, #6]
    lv_coord_t new_x = lv_obj_get_x(obj);
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7fe f81e 	bl	8006658 <lv_obj_get_x>
 800861c:	4603      	mov	r3, r0
 800861e:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t new_y = lv_obj_get_y(obj);
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f7fe f84d 	bl	80066c0 <lv_obj_get_y>
 8008626:	4603      	mov	r3, r0
 8008628:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7fe f87c 	bl	8006728 <lv_obj_get_width>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	da00      	bge.n	8008638 <obj_align_mid_core+0x38>
 8008636:	3301      	adds	r3, #1
 8008638:	105b      	asrs	r3, r3, #1
 800863a:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f7fe f895 	bl	800676c <lv_obj_get_height>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	da00      	bge.n	800864a <obj_align_mid_core+0x4a>
 8008648:	3301      	adds	r3, #1
 800864a:	105b      	asrs	r3, r3, #1
 800864c:	843b      	strh	r3, [r7, #32]

    switch(align) {
 800864e:	79fb      	ldrb	r3, [r7, #7]
 8008650:	2b14      	cmp	r3, #20
 8008652:	f200 819e 	bhi.w	8008992 <obj_align_mid_core+0x392>
 8008656:	a201      	add	r2, pc, #4	; (adr r2, 800865c <obj_align_mid_core+0x5c>)
 8008658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865c:	080086b1 	.word	0x080086b1
 8008660:	080086eb 	.word	0x080086eb
 8008664:	080086fd 	.word	0x080086fd
 8008668:	08008723 	.word	0x08008723
 800866c:	0800873f 	.word	0x0800873f
 8008670:	0800875b 	.word	0x0800875b
 8008674:	0800878b 	.word	0x0800878b
 8008678:	080087b1 	.word	0x080087b1
 800867c:	080087d7 	.word	0x080087d7
 8008680:	08008807 	.word	0x08008807
 8008684:	08008819 	.word	0x08008819
 8008688:	0800883f 	.word	0x0800883f
 800868c:	0800885b 	.word	0x0800885b
 8008690:	08008877 	.word	0x08008877
 8008694:	080088a7 	.word	0x080088a7
 8008698:	080088cd 	.word	0x080088cd
 800869c:	080088df 	.word	0x080088df
 80086a0:	08008905 	.word	0x08008905
 80086a4:	08008921 	.word	0x08008921
 80086a8:	0800893d 	.word	0x0800893d
 80086ac:	0800896d 	.word	0x0800896d
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80086b0:	68b8      	ldr	r0, [r7, #8]
 80086b2:	f7fe f839 	bl	8006728 <lv_obj_get_width>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	da00      	bge.n	80086be <obj_align_mid_core+0xbe>
 80086bc:	3301      	adds	r3, #1
 80086be:	105b      	asrs	r3, r3, #1
 80086c0:	b21b      	sxth	r3, r3
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80086cc:	68b8      	ldr	r0, [r7, #8]
 80086ce:	f7fe f84d 	bl	800676c <lv_obj_get_height>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da00      	bge.n	80086da <obj_align_mid_core+0xda>
 80086d8:	3301      	adds	r3, #1
 80086da:	105b      	asrs	r3, r3, #1
 80086dc:	b21b      	sxth	r3, r3
 80086de:	b29a      	uxth	r2, r3
 80086e0:	8c3b      	ldrh	r3, [r7, #32]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80086e8:	e153      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = -obj_w_half;
 80086ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086ec:	425b      	negs	r3, r3
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80086f2:	8c3b      	ldrh	r3, [r7, #32]
 80086f4:	425b      	negs	r3, r3
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80086fa:	e14a      	b.n	8008992 <obj_align_mid_core+0x392>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80086fc:	68b8      	ldr	r0, [r7, #8]
 80086fe:	f7fe f813 	bl	8006728 <lv_obj_get_width>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	da00      	bge.n	800870a <obj_align_mid_core+0x10a>
 8008708:	3301      	adds	r3, #1
 800870a:	105b      	asrs	r3, r3, #1
 800870c:	b21b      	sxth	r3, r3
 800870e:	b29a      	uxth	r2, r3
 8008710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	b29b      	uxth	r3, r3
 8008716:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008718:	8c3b      	ldrh	r3, [r7, #32]
 800871a:	425b      	negs	r3, r3
 800871c:	b29b      	uxth	r3, r3
 800871e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008720:	e137      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008722:	68b8      	ldr	r0, [r7, #8]
 8008724:	f7fe f800 	bl	8006728 <lv_obj_get_width>
 8008728:	4603      	mov	r3, r0
 800872a:	b29a      	uxth	r2, r3
 800872c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	b29b      	uxth	r3, r3
 8008732:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008734:	8c3b      	ldrh	r3, [r7, #32]
 8008736:	425b      	negs	r3, r3
 8008738:	b29b      	uxth	r3, r3
 800873a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800873c:	e129      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = -obj_w_half;
 800873e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008740:	425b      	negs	r3, r3
 8008742:	b29b      	uxth	r3, r3
 8008744:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008746:	68b8      	ldr	r0, [r7, #8]
 8008748:	f7fe f810 	bl	800676c <lv_obj_get_height>
 800874c:	4603      	mov	r3, r0
 800874e:	b29a      	uxth	r2, r3
 8008750:	8c3b      	ldrh	r3, [r7, #32]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	b29b      	uxth	r3, r3
 8008756:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008758:	e11b      	b.n	8008992 <obj_align_mid_core+0x392>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800875a:	68b8      	ldr	r0, [r7, #8]
 800875c:	f7fd ffe4 	bl	8006728 <lv_obj_get_width>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	da00      	bge.n	8008768 <obj_align_mid_core+0x168>
 8008766:	3301      	adds	r3, #1
 8008768:	105b      	asrs	r3, r3, #1
 800876a:	b21b      	sxth	r3, r3
 800876c:	b29a      	uxth	r2, r3
 800876e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	b29b      	uxth	r3, r3
 8008774:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008776:	68b8      	ldr	r0, [r7, #8]
 8008778:	f7fd fff8 	bl	800676c <lv_obj_get_height>
 800877c:	4603      	mov	r3, r0
 800877e:	b29a      	uxth	r2, r3
 8008780:	8c3b      	ldrh	r3, [r7, #32]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	b29b      	uxth	r3, r3
 8008786:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008788:	e103      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800878a:	68b8      	ldr	r0, [r7, #8]
 800878c:	f7fd ffcc 	bl	8006728 <lv_obj_get_width>
 8008790:	4603      	mov	r3, r0
 8008792:	b29a      	uxth	r2, r3
 8008794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	b29b      	uxth	r3, r3
 800879a:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 800879c:	68b8      	ldr	r0, [r7, #8]
 800879e:	f7fd ffe5 	bl	800676c <lv_obj_get_height>
 80087a2:	4603      	mov	r3, r0
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	8c3b      	ldrh	r3, [r7, #32]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80087ae:	e0f0      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = -obj_w_half;
 80087b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087b2:	425b      	negs	r3, r3
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80087b8:	68b8      	ldr	r0, [r7, #8]
 80087ba:	f7fd ffd7 	bl	800676c <lv_obj_get_height>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	da00      	bge.n	80087c6 <obj_align_mid_core+0x1c6>
 80087c4:	3301      	adds	r3, #1
 80087c6:	105b      	asrs	r3, r3, #1
 80087c8:	b21b      	sxth	r3, r3
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	8c3b      	ldrh	r3, [r7, #32]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80087d4:	e0dd      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 80087d6:	68b8      	ldr	r0, [r7, #8]
 80087d8:	f7fd ffa6 	bl	8006728 <lv_obj_get_width>
 80087dc:	4603      	mov	r3, r0
 80087de:	b29a      	uxth	r2, r3
 80087e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80087e8:	68b8      	ldr	r0, [r7, #8]
 80087ea:	f7fd ffbf 	bl	800676c <lv_obj_get_height>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	da00      	bge.n	80087f6 <obj_align_mid_core+0x1f6>
 80087f4:	3301      	adds	r3, #1
 80087f6:	105b      	asrs	r3, r3, #1
 80087f8:	b21b      	sxth	r3, r3
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	8c3b      	ldrh	r3, [r7, #32]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	b29b      	uxth	r3, r3
 8008802:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008804:	e0c5      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = -obj_w_half;
 8008806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008808:	425b      	negs	r3, r3
 800880a:	b29b      	uxth	r3, r3
 800880c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 800880e:	8c3b      	ldrh	r3, [r7, #32]
 8008810:	425b      	negs	r3, r3
 8008812:	b29b      	uxth	r3, r3
 8008814:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008816:	e0bc      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008818:	68b8      	ldr	r0, [r7, #8]
 800881a:	f7fd ff85 	bl	8006728 <lv_obj_get_width>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	da00      	bge.n	8008826 <obj_align_mid_core+0x226>
 8008824:	3301      	adds	r3, #1
 8008826:	105b      	asrs	r3, r3, #1
 8008828:	b21b      	sxth	r3, r3
 800882a:	b29a      	uxth	r2, r3
 800882c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	b29b      	uxth	r3, r3
 8008832:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008834:	8c3b      	ldrh	r3, [r7, #32]
 8008836:	425b      	negs	r3, r3
 8008838:	b29b      	uxth	r3, r3
 800883a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800883c:	e0a9      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800883e:	68b8      	ldr	r0, [r7, #8]
 8008840:	f7fd ff72 	bl	8006728 <lv_obj_get_width>
 8008844:	4603      	mov	r3, r0
 8008846:	b29a      	uxth	r2, r3
 8008848:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	b29b      	uxth	r3, r3
 800884e:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008850:	8c3b      	ldrh	r3, [r7, #32]
 8008852:	425b      	negs	r3, r3
 8008854:	b29b      	uxth	r3, r3
 8008856:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008858:	e09b      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = -obj_w_half;
 800885a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800885c:	425b      	negs	r3, r3
 800885e:	b29b      	uxth	r3, r3
 8008860:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008862:	68b8      	ldr	r0, [r7, #8]
 8008864:	f7fd ff82 	bl	800676c <lv_obj_get_height>
 8008868:	4603      	mov	r3, r0
 800886a:	b29a      	uxth	r2, r3
 800886c:	8c3b      	ldrh	r3, [r7, #32]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	b29b      	uxth	r3, r3
 8008872:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008874:	e08d      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008876:	68b8      	ldr	r0, [r7, #8]
 8008878:	f7fd ff56 	bl	8006728 <lv_obj_get_width>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	da00      	bge.n	8008884 <obj_align_mid_core+0x284>
 8008882:	3301      	adds	r3, #1
 8008884:	105b      	asrs	r3, r3, #1
 8008886:	b21b      	sxth	r3, r3
 8008888:	b29a      	uxth	r2, r3
 800888a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	b29b      	uxth	r3, r3
 8008890:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008892:	68b8      	ldr	r0, [r7, #8]
 8008894:	f7fd ff6a 	bl	800676c <lv_obj_get_height>
 8008898:	4603      	mov	r3, r0
 800889a:	b29a      	uxth	r2, r3
 800889c:	8c3b      	ldrh	r3, [r7, #32]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80088a4:	e075      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 80088a6:	68b8      	ldr	r0, [r7, #8]
 80088a8:	f7fd ff3e 	bl	8006728 <lv_obj_get_width>
 80088ac:	4603      	mov	r3, r0
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 80088b8:	68b8      	ldr	r0, [r7, #8]
 80088ba:	f7fd ff57 	bl	800676c <lv_obj_get_height>
 80088be:	4603      	mov	r3, r0
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	8c3b      	ldrh	r3, [r7, #32]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80088ca:	e062      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -obj_w_half;
 80088cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088ce:	425b      	negs	r3, r3
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 80088d4:	8c3b      	ldrh	r3, [r7, #32]
 80088d6:	425b      	negs	r3, r3
 80088d8:	b29b      	uxth	r3, r3
 80088da:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 80088dc:	e059      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -obj_w_half;
 80088de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088e0:	425b      	negs	r3, r3
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80088e6:	68b8      	ldr	r0, [r7, #8]
 80088e8:	f7fd ff40 	bl	800676c <lv_obj_get_height>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da00      	bge.n	80088f4 <obj_align_mid_core+0x2f4>
 80088f2:	3301      	adds	r3, #1
 80088f4:	105b      	asrs	r3, r3, #1
 80088f6:	b21b      	sxth	r3, r3
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	8c3b      	ldrh	r3, [r7, #32]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	b29b      	uxth	r3, r3
 8008900:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008902:	e046      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -obj_w_half;
 8008904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008906:	425b      	negs	r3, r3
 8008908:	b29b      	uxth	r3, r3
 800890a:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 800890c:	68b8      	ldr	r0, [r7, #8]
 800890e:	f7fd ff2d 	bl	800676c <lv_obj_get_height>
 8008912:	4603      	mov	r3, r0
 8008914:	b29a      	uxth	r2, r3
 8008916:	8c3b      	ldrh	r3, [r7, #32]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	b29b      	uxth	r3, r3
 800891c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800891e:	e038      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008920:	68b8      	ldr	r0, [r7, #8]
 8008922:	f7fd ff01 	bl	8006728 <lv_obj_get_width>
 8008926:	4603      	mov	r3, r0
 8008928:	b29a      	uxth	r2, r3
 800892a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	b29b      	uxth	r3, r3
 8008930:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008932:	8c3b      	ldrh	r3, [r7, #32]
 8008934:	425b      	negs	r3, r3
 8008936:	b29b      	uxth	r3, r3
 8008938:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800893a:	e02a      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800893c:	68b8      	ldr	r0, [r7, #8]
 800893e:	f7fd fef3 	bl	8006728 <lv_obj_get_width>
 8008942:	4603      	mov	r3, r0
 8008944:	b29a      	uxth	r2, r3
 8008946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	b29b      	uxth	r3, r3
 800894c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800894e:	68b8      	ldr	r0, [r7, #8]
 8008950:	f7fd ff0c 	bl	800676c <lv_obj_get_height>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	da00      	bge.n	800895c <obj_align_mid_core+0x35c>
 800895a:	3301      	adds	r3, #1
 800895c:	105b      	asrs	r3, r3, #1
 800895e:	b21b      	sxth	r3, r3
 8008960:	b29a      	uxth	r2, r3
 8008962:	8c3b      	ldrh	r3, [r7, #32]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	b29b      	uxth	r3, r3
 8008968:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 800896a:	e012      	b.n	8008992 <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800896c:	68b8      	ldr	r0, [r7, #8]
 800896e:	f7fd fedb 	bl	8006728 <lv_obj_get_width>
 8008972:	4603      	mov	r3, r0
 8008974:	b29a      	uxth	r2, r3
 8008976:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	b29b      	uxth	r3, r3
 800897c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 800897e:	68b8      	ldr	r0, [r7, #8]
 8008980:	f7fd fef4 	bl	800676c <lv_obj_get_height>
 8008984:	4603      	mov	r3, r0
 8008986:	b29a      	uxth	r2, r3
 8008988:	8c3b      	ldrh	r3, [r7, #32]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	b29b      	uxth	r3, r3
 800898e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008990:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f7fd fdec 	bl	8006570 <lv_obj_get_parent>
 8008998:	61f8      	str	r0, [r7, #28]
    lv_coord_t base_abs_x = base->coords.x1;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	8a1b      	ldrh	r3, [r3, #16]
 800899e:	837b      	strh	r3, [r7, #26]
    lv_coord_t base_abs_y = base->coords.y1;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	8a5b      	ldrh	r3, [r3, #18]
 80089a4:	833b      	strh	r3, [r7, #24]
    lv_coord_t par_abs_x  = par->coords.x1;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	8a1b      	ldrh	r3, [r3, #16]
 80089aa:	82fb      	strh	r3, [r7, #22]
    lv_coord_t par_abs_y  = par->coords.y1;
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	8a5b      	ldrh	r3, [r3, #18]
 80089b0:	82bb      	strh	r3, [r7, #20]
    new_x += x_ofs + base_abs_x;
 80089b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80089b4:	8b7b      	ldrh	r3, [r7, #26]
 80089b6:	4413      	add	r3, r2
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089bc:	4413      	add	r3, r2
 80089be:	b29b      	uxth	r3, r3
 80089c0:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y += y_ofs + base_abs_y;
 80089c2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80089c4:	8b3b      	ldrh	r3, [r7, #24]
 80089c6:	4413      	add	r3, r2
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089cc:	4413      	add	r3, r2
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	84bb      	strh	r3, [r7, #36]	; 0x24
    new_x -= par_abs_x;
 80089d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80089d4:	8afb      	ldrh	r3, [r7, #22]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	b29b      	uxth	r3, r3
 80089da:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y -= par_abs_y;
 80089dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80089de:	8abb      	ldrh	r3, [r7, #20]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	84bb      	strh	r3, [r7, #36]	; 0x24
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 80089e6:	79bb      	ldrb	r3, [r7, #6]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00c      	beq.n	8008a06 <obj_align_mid_core+0x406>
 80089ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d008      	beq.n	8008a06 <obj_align_mid_core+0x406>
 80089f4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80089f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80089fc:	4619      	mov	r1, r3
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7fc feba 	bl	8005778 <lv_obj_set_pos>
    else if(x_set) lv_obj_set_x(obj, new_x);
    else if(y_set) lv_obj_set_y(obj, new_y);

}
 8008a04:	e013      	b.n	8008a2e <obj_align_mid_core+0x42e>
    else if(x_set) lv_obj_set_x(obj, new_x);
 8008a06:	79bb      	ldrb	r3, [r7, #6]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d006      	beq.n	8008a1a <obj_align_mid_core+0x41a>
 8008a0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008a10:	4619      	mov	r1, r3
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f7fc ff56 	bl	80058c4 <lv_obj_set_x>
}
 8008a18:	e009      	b.n	8008a2e <obj_align_mid_core+0x42e>
    else if(y_set) lv_obj_set_y(obj, new_y);
 8008a1a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <obj_align_mid_core+0x42e>
 8008a22:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008a26:	4619      	mov	r1, r3
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7fc ff75 	bl	8005918 <lv_obj_set_y>
}
 8008a2e:	bf00      	nop
 8008a30:	3728      	adds	r7, #40	; 0x28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop

08008a38 <trans_create>:
 * @param new_state the new state of the object
 * @return pointer to the allocated `the transaction` variable or `NULL` if no transition created
 */
static lv_style_trans_t * trans_create(lv_obj_t * obj, lv_style_property_t prop, uint8_t part, lv_state_t prev_state,
                                       lv_state_t new_state)
{
 8008a38:	b590      	push	{r4, r7, lr}
 8008a3a:	b08d      	sub	sp, #52	; 0x34
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	4608      	mov	r0, r1
 8008a42:	4611      	mov	r1, r2
 8008a44:	461a      	mov	r2, r3
 8008a46:	4603      	mov	r3, r0
 8008a48:	807b      	strh	r3, [r7, #2]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	707b      	strb	r3, [r7, #1]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	703b      	strb	r3, [r7, #0]
    lv_style_trans_t * tr;
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 8008a52:	787b      	ldrb	r3, [r7, #1]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7fd feaa 	bl	80067b0 <lv_obj_get_style_list>
 8008a5c:	6278      	str	r0, [r7, #36]	; 0x24
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
 8008a5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a60:	f003 f839 	bl	800bad6 <_lv_style_list_get_transition_style>
 8008a64:	6238      	str	r0, [r7, #32]

    bool cache_ori = style_list->ignore_cache;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	795b      	ldrb	r3, [r3, #5]
 8008a6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bf14      	ite	ne
 8008a74:	2301      	movne	r3, #1
 8008a76:	2300      	moveq	r3, #0
 8008a78:	77fb      	strb	r3, [r7, #31]

    /*Get the previous and current values*/
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 8008a7a:	887b      	ldrh	r3, [r7, #2]
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	f300 80b1 	bgt.w	8008be8 <trans_create+0x1b0>
        style_list->skip_trans = 1;
 8008a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a88:	7953      	ldrb	r3, [r2, #5]
 8008a8a:	f043 0301 	orr.w	r3, r3, #1
 8008a8e:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 8008a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a92:	7953      	ldrb	r3, [r2, #5]
 8008a94:	f043 0308 	orr.w	r3, r3, #8
 8008a98:	7153      	strb	r3, [r2, #5]
        obj->state = prev_state;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	783a      	ldrb	r2, [r7, #0]
 8008a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 8008aa2:	887a      	ldrh	r2, [r7, #2]
 8008aa4:	787b      	ldrb	r3, [r7, #1]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7fd fea4 	bl	80067f6 <_lv_obj_get_style_int>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	857b      	strh	r3, [r7, #42]	; 0x2a
        obj->state = new_state;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 8008abc:	887a      	ldrh	r2, [r7, #2]
 8008abe:	787b      	ldrb	r3, [r7, #1]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7fd fe97 	bl	80067f6 <_lv_obj_get_style_int>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	853b      	strh	r3, [r7, #40]	; 0x28
        style_list->skip_trans = 0;
 8008acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ace:	7953      	ldrb	r3, [r2, #5]
 8008ad0:	f36f 0300 	bfc	r3, #0, #1
 8008ad4:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8008ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad8:	7953      	ldrb	r3, [r2, #5]
 8008ada:	7ff9      	ldrb	r1, [r7, #31]
 8008adc:	f361 03c3 	bfi	r3, r1, #3, #1
 8008ae0:	7153      	strb	r3, [r2, #5]

        if(int1 == int2)  return NULL;
 8008ae2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8008ae6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d101      	bne.n	8008af2 <trans_create+0xba>
 8008aee:	2300      	movs	r3, #0
 8008af0:	e1d6      	b.n	8008ea0 <trans_create+0x468>
        obj->state = prev_state;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	783a      	ldrb	r2, [r7, #0]
 8008af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
 8008afa:	887a      	ldrh	r2, [r7, #2]
 8008afc:	787b      	ldrb	r3, [r7, #1]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fd fe78 	bl	80067f6 <_lv_obj_get_style_int>
 8008b06:	4603      	mov	r3, r0
 8008b08:	857b      	strh	r3, [r7, #42]	; 0x2a
        obj->state = new_state;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
 8008b14:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8008b18:	887b      	ldrh	r3, [r7, #2]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6a38      	ldr	r0, [r7, #32]
 8008b1e:	f002 fc71 	bl	800b404 <_lv_style_set_int>

        if(prop == LV_STYLE_RADIUS) {
 8008b22:	887b      	ldrh	r3, [r7, #2]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d13d      	bne.n	8008ba4 <trans_create+0x16c>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
 8008b28:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008b2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d005      	beq.n	8008b40 <trans_create+0x108>
 8008b34:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008b38:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d131      	bne.n	8008ba4 <trans_create+0x16c>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7fd fdf1 	bl	8006728 <lv_obj_get_width>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	da00      	bge.n	8008b4e <trans_create+0x116>
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	105b      	asrs	r3, r3, #1
 8008b50:	837b      	strh	r3, [r7, #26]
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7fd fde8 	bl	8006728 <lv_obj_get_width>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da00      	bge.n	8008b60 <trans_create+0x128>
 8008b5e:	3301      	adds	r3, #1
 8008b60:	105b      	asrs	r3, r3, #1
 8008b62:	833b      	strh	r3, [r7, #24]
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8008b64:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008b68:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d109      	bne.n	8008b84 <trans_create+0x14c>
 8008b70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	bfa8      	it	ge
 8008b80:	4613      	movge	r3, r2
 8008b82:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8008b84:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008b88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d109      	bne.n	8008ba4 <trans_create+0x16c>
 8008b90:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008b94:	1c5a      	adds	r2, r3, #1
 8008b96:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	bfa8      	it	ge
 8008ba0:	4613      	movge	r3, r2
 8008ba2:	853b      	strh	r3, [r7, #40]	; 0x28
            }
        }

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8008ba4:	48b6      	ldr	r0, [pc, #728]	; (8008e80 <trans_create+0x448>)
 8008ba6:	f013 f8ae 	bl	801bd06 <_lv_ll_ins_head>
 8008baa:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 8008bac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bae:	f012 fe51 	bl	801b854 <lv_debug_check_null>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f083 0301 	eor.w	r3, r3, #1
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d008      	beq.n	8008bd0 <trans_create+0x198>
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	f04f 0400 	mov.w	r4, #0
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	48ae      	ldr	r0, [pc, #696]	; (8008e84 <trans_create+0x44c>)
 8008bca:	f012 fe53 	bl	801b874 <lv_debug_log_error>
 8008bce:	e7fe      	b.n	8008bce <trans_create+0x196>
        if(tr == NULL) return NULL;
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <trans_create+0x1a2>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e162      	b.n	8008ea0 <trans_create+0x468>
        tr->start_value._int = int1;
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008bde:	811a      	strh	r2, [r3, #8]
        tr->end_value._int = int2;
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008be4:	819a      	strh	r2, [r3, #12]
 8008be6:	e15a      	b.n	8008e9e <trans_create+0x466>
    }
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8008be8:	887b      	ldrh	r3, [r7, #2]
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	2b0b      	cmp	r3, #11
 8008bf0:	dc6c      	bgt.n	8008ccc <trans_create+0x294>
        style_list->skip_trans = 1;
 8008bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf4:	7953      	ldrb	r3, [r2, #5]
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	7953      	ldrb	r3, [r2, #5]
 8008c00:	f043 0308 	orr.w	r3, r3, #8
 8008c04:	7153      	strb	r3, [r2, #5]
        obj->state = prev_state;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	783a      	ldrb	r2, [r7, #0]
 8008c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 8008c0e:	887a      	ldrh	r2, [r7, #2]
 8008c10:	787b      	ldrb	r3, [r7, #1]
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7fd ff77 	bl	8006b08 <_lv_obj_get_style_color>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	617b      	str	r3, [r7, #20]
        obj->state = new_state;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 8008c28:	887a      	ldrh	r2, [r7, #2]
 8008c2a:	787b      	ldrb	r3, [r7, #1]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7fd ff6a 	bl	8006b08 <_lv_obj_get_style_color>
 8008c34:	4603      	mov	r3, r0
 8008c36:	613b      	str	r3, [r7, #16]
        style_list->skip_trans = 0;
 8008c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3a:	7953      	ldrb	r3, [r2, #5]
 8008c3c:	f36f 0300 	bfc	r3, #0, #1
 8008c40:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8008c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c44:	7953      	ldrb	r3, [r2, #5]
 8008c46:	7ff9      	ldrb	r1, [r7, #31]
 8008c48:	f361 03c3 	bfi	r3, r1, #3, #1
 8008c4c:	7153      	strb	r3, [r2, #5]

        if(c1.full == c2.full) return NULL;
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d101      	bne.n	8008c5a <trans_create+0x222>
 8008c56:	2300      	movs	r3, #0
 8008c58:	e122      	b.n	8008ea0 <trans_create+0x468>
        obj->state = prev_state;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	783a      	ldrb	r2, [r7, #0]
 8008c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
 8008c62:	887a      	ldrh	r2, [r7, #2]
 8008c64:	787b      	ldrb	r3, [r7, #1]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fd ff4d 	bl	8006b08 <_lv_obj_get_style_color>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	617b      	str	r3, [r7, #20]
        obj->state = new_state;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
 8008c7c:	887b      	ldrh	r3, [r7, #2]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	4619      	mov	r1, r3
 8008c82:	6a38      	ldr	r0, [r7, #32]
 8008c84:	f002 fc4c 	bl	800b520 <_lv_style_set_color>

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8008c88:	487d      	ldr	r0, [pc, #500]	; (8008e80 <trans_create+0x448>)
 8008c8a:	f013 f83c 	bl	801bd06 <_lv_ll_ins_head>
 8008c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 8008c90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c92:	f012 fddf 	bl	801b854 <lv_debug_check_null>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f083 0301 	eor.w	r3, r3, #1
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d008      	beq.n	8008cb4 <trans_create+0x27c>
 8008ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca4:	f04f 0400 	mov.w	r4, #0
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4623      	mov	r3, r4
 8008cac:	4875      	ldr	r0, [pc, #468]	; (8008e84 <trans_create+0x44c>)
 8008cae:	f012 fde1 	bl	801b874 <lv_debug_log_error>
 8008cb2:	e7fe      	b.n	8008cb2 <trans_create+0x27a>
        if(tr == NULL) return NULL;
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <trans_create+0x286>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e0f0      	b.n	8008ea0 <trans_create+0x468>
        tr->start_value._color = c1;
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	609a      	str	r2, [r3, #8]
        tr->end_value._color = c2;
 8008cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	60da      	str	r2, [r3, #12]
 8008cca:	e0e8      	b.n	8008e9e <trans_create+0x466>
    }
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8008ccc:	887b      	ldrh	r3, [r7, #2]
 8008cce:	f003 030f 	and.w	r3, r3, #15
 8008cd2:	2b0d      	cmp	r3, #13
 8008cd4:	dc6c      	bgt.n	8008db0 <trans_create+0x378>
        style_list->skip_trans = 1;
 8008cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd8:	7953      	ldrb	r3, [r2, #5]
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 8008ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce2:	7953      	ldrb	r3, [r2, #5]
 8008ce4:	f043 0308 	orr.w	r3, r3, #8
 8008ce8:	7153      	strb	r3, [r2, #5]
        obj->state = prev_state;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	783a      	ldrb	r2, [r7, #0]
 8008cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 8008cf2:	887a      	ldrh	r2, [r7, #2]
 8008cf4:	787b      	ldrb	r3, [r7, #1]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7fd ff70 	bl	8006bde <_lv_obj_get_style_opa>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	77bb      	strb	r3, [r7, #30]
        obj->state = new_state;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 8008d0c:	887a      	ldrh	r2, [r7, #2]
 8008d0e:	787b      	ldrb	r3, [r7, #1]
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fd ff63 	bl	8006bde <_lv_obj_get_style_opa>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	777b      	strb	r3, [r7, #29]
        style_list->skip_trans = 0;
 8008d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1e:	7953      	ldrb	r3, [r2, #5]
 8008d20:	f36f 0300 	bfc	r3, #0, #1
 8008d24:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8008d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d28:	7953      	ldrb	r3, [r2, #5]
 8008d2a:	7ff9      	ldrb	r1, [r7, #31]
 8008d2c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008d30:	7153      	strb	r3, [r2, #5]

        if(o1 == o2) return NULL;
 8008d32:	7fba      	ldrb	r2, [r7, #30]
 8008d34:	7f7b      	ldrb	r3, [r7, #29]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d101      	bne.n	8008d3e <trans_create+0x306>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	e0b0      	b.n	8008ea0 <trans_create+0x468>

        obj->state = prev_state;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	783a      	ldrb	r2, [r7, #0]
 8008d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 8008d46:	887a      	ldrh	r2, [r7, #2]
 8008d48:	787b      	ldrb	r3, [r7, #1]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7fd ff46 	bl	8006bde <_lv_obj_get_style_opa>
 8008d52:	4603      	mov	r3, r0
 8008d54:	77bb      	strb	r3, [r7, #30]
        obj->state = new_state;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
 8008d60:	7fba      	ldrb	r2, [r7, #30]
 8008d62:	887b      	ldrh	r3, [r7, #2]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6a38      	ldr	r0, [r7, #32]
 8008d68:	f002 fc68 	bl	800b63c <_lv_style_set_opa>

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8008d6c:	4844      	ldr	r0, [pc, #272]	; (8008e80 <trans_create+0x448>)
 8008d6e:	f012 ffca 	bl	801bd06 <_lv_ll_ins_head>
 8008d72:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 8008d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d76:	f012 fd6d 	bl	801b854 <lv_debug_check_null>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	f083 0301 	eor.w	r3, r3, #1
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d008      	beq.n	8008d98 <trans_create+0x360>
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	f04f 0400 	mov.w	r4, #0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	4623      	mov	r3, r4
 8008d90:	483c      	ldr	r0, [pc, #240]	; (8008e84 <trans_create+0x44c>)
 8008d92:	f012 fd6f 	bl	801b874 <lv_debug_log_error>
 8008d96:	e7fe      	b.n	8008d96 <trans_create+0x35e>
        if(tr == NULL) return NULL;
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <trans_create+0x36a>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e07e      	b.n	8008ea0 <trans_create+0x468>
        tr->start_value._opa = o1;
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	7fba      	ldrb	r2, [r7, #30]
 8008da6:	721a      	strb	r2, [r3, #8]
        tr->end_value._opa = o2;
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	7f7a      	ldrb	r2, [r7, #29]
 8008dac:	731a      	strb	r2, [r3, #12]
 8008dae:	e076      	b.n	8008e9e <trans_create+0x466>
    }
    else {      /*Ptr*/
        obj->state = prev_state;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	783a      	ldrb	r2, [r7, #0]
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        style_list->skip_trans = 1;
 8008db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dba:	7953      	ldrb	r3, [r2, #5]
 8008dbc:	f043 0301 	orr.w	r3, r3, #1
 8008dc0:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 8008dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc4:	7953      	ldrb	r3, [r2, #5]
 8008dc6:	f043 0308 	orr.w	r3, r3, #8
 8008dca:	7153      	strb	r3, [r2, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8008dcc:	887a      	ldrh	r2, [r7, #2]
 8008dce:	787b      	ldrb	r3, [r7, #1]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7fd ffc0 	bl	8006d58 <_lv_obj_get_style_ptr>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	60fb      	str	r3, [r7, #12]
        obj->state = new_state;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 8008de6:	887a      	ldrh	r2, [r7, #2]
 8008de8:	787b      	ldrb	r3, [r7, #1]
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7fd ffb3 	bl	8006d58 <_lv_obj_get_style_ptr>
 8008df2:	4603      	mov	r3, r0
 8008df4:	60bb      	str	r3, [r7, #8]
        style_list->skip_trans = 0;
 8008df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df8:	7953      	ldrb	r3, [r2, #5]
 8008dfa:	f36f 0300 	bfc	r3, #0, #1
 8008dfe:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8008e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e02:	7953      	ldrb	r3, [r2, #5]
 8008e04:	7ff9      	ldrb	r1, [r7, #31]
 8008e06:	f361 03c3 	bfi	r3, r1, #3, #1
 8008e0a:	7153      	strb	r3, [r2, #5]

        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
 8008e0c:	f107 0108 	add.w	r1, r7, #8
 8008e10:	f107 030c 	add.w	r3, r7, #12
 8008e14:	2204      	movs	r2, #4
 8008e16:	4618      	mov	r0, r3
 8008e18:	f01f fa4e 	bl	80282b8 <memcmp>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <trans_create+0x3ee>
 8008e22:	2300      	movs	r3, #0
 8008e24:	e03c      	b.n	8008ea0 <trans_create+0x468>
        obj->state = prev_state;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	783a      	ldrb	r2, [r7, #0]
 8008e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8008e2e:	887a      	ldrh	r2, [r7, #2]
 8008e30:	787b      	ldrb	r3, [r7, #1]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7fd ff8f 	bl	8006d58 <_lv_obj_get_style_ptr>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	60fb      	str	r3, [r7, #12]
        obj->state = new_state;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	887b      	ldrh	r3, [r7, #2]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6a38      	ldr	r0, [r7, #32]
 8008e50:	f002 fc82 	bl	800b758 <_lv_style_set_ptr>

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8008e54:	480a      	ldr	r0, [pc, #40]	; (8008e80 <trans_create+0x448>)
 8008e56:	f012 ff56 	bl	801bd06 <_lv_ll_ins_head>
 8008e5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 8008e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e5e:	f012 fcf9 	bl	801b854 <lv_debug_check_null>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f083 0301 	eor.w	r3, r3, #1
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00c      	beq.n	8008e88 <trans_create+0x450>
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	f04f 0400 	mov.w	r4, #0
 8008e74:	461a      	mov	r2, r3
 8008e76:	4623      	mov	r3, r4
 8008e78:	4802      	ldr	r0, [pc, #8]	; (8008e84 <trans_create+0x44c>)
 8008e7a:	f012 fcfb 	bl	801b874 <lv_debug_log_error>
 8008e7e:	e7fe      	b.n	8008e7e <trans_create+0x446>
 8008e80:	20020444 	.word	0x20020444
 8008e84:	08028324 	.word	0x08028324
        if(tr == NULL) return NULL;
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <trans_create+0x45a>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e006      	b.n	8008ea0 <trans_create+0x468>
        tr->start_value._ptr = p1;
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	609a      	str	r2, [r3, #8]
        tr->end_value._ptr = p2;
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	60da      	str	r2, [r3, #12]
    }

    return tr;
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3734      	adds	r7, #52	; 0x34
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd90      	pop	{r4, r7, pc}

08008ea8 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" then this. `NULL` is not used
 */
static void trans_del(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_style_trans_t * tr_limit)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	607b      	str	r3, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	72fb      	strb	r3, [r7, #11]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	813b      	strh	r3, [r7, #8]
    lv_style_trans_t * tr;
    lv_style_trans_t * tr_prev;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8008eba:	4826      	ldr	r0, [pc, #152]	; (8008f54 <trans_del+0xac>)
 8008ebc:	f013 f893 	bl	801bfe6 <_lv_ll_get_tail>
 8008ec0:	61f8      	str	r0, [r7, #28]
    while(tr != NULL) {
 8008ec2:	e03d      	b.n	8008f40 <trans_del+0x98>
        if(tr == tr_limit) break;
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d03d      	beq.n	8008f48 <trans_del+0xa0>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8008ecc:	69f9      	ldr	r1, [r7, #28]
 8008ece:	4821      	ldr	r0, [pc, #132]	; (8008f54 <trans_del+0xac>)
 8008ed0:	f013 f8b6 	bl	801c040 <_lv_ll_get_prev>
 8008ed4:	61b8      	str	r0, [r7, #24]

        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d12d      	bne.n	8008f3c <trans_del+0x94>
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	799b      	ldrb	r3, [r3, #6]
 8008ee4:	7afa      	ldrb	r2, [r7, #11]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d002      	beq.n	8008ef0 <trans_del+0x48>
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	2bff      	cmp	r3, #255	; 0xff
 8008eee:	d125      	bne.n	8008f3c <trans_del+0x94>
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	889b      	ldrh	r3, [r3, #4]
 8008ef4:	893a      	ldrh	r2, [r7, #8]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d002      	beq.n	8008f00 <trans_del+0x58>
 8008efa:	893b      	ldrh	r3, [r7, #8]
 8008efc:	2bff      	cmp	r3, #255	; 0xff
 8008efe:	d11d      	bne.n	8008f3c <trans_del+0x94>
            /* Remove the transitioned property from trans. style
             * to allow changing it by normal styles*/
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	799b      	ldrb	r3, [r3, #6]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7fd fc50 	bl	80067b0 <lv_obj_get_style_list>
 8008f10:	6178      	str	r0, [r7, #20]
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 8008f12:	6978      	ldr	r0, [r7, #20]
 8008f14:	f002 fddf 	bl	800bad6 <_lv_style_list_get_transition_style>
 8008f18:	6138      	str	r0, [r7, #16]
            lv_style_remove_prop(style_trans, tr->prop);
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	889b      	ldrh	r3, [r3, #4]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6938      	ldr	r0, [r7, #16]
 8008f22:	f001 ff61 	bl	800ade8 <lv_style_remove_prop>

            lv_anim_del(tr, NULL);
 8008f26:	2100      	movs	r1, #0
 8008f28:	69f8      	ldr	r0, [r7, #28]
 8008f2a:	f011 fbe1 	bl	801a6f0 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8008f2e:	69f9      	ldr	r1, [r7, #28]
 8008f30:	4808      	ldr	r0, [pc, #32]	; (8008f54 <trans_del+0xac>)
 8008f32:	f012 ff97 	bl	801be64 <_lv_ll_remove>
            lv_mem_free(tr);
 8008f36:	69f8      	ldr	r0, [r7, #28]
 8008f38:	f013 fa62 	bl	801c400 <lv_mem_free>
        }
        tr = tr_prev;
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	61fb      	str	r3, [r7, #28]
    while(tr != NULL) {
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1be      	bne.n	8008ec4 <trans_del+0x1c>
    }
}
 8008f46:	e000      	b.n	8008f4a <trans_del+0xa2>
        if(tr == tr_limit) break;
 8008f48:	bf00      	nop
}
 8008f4a:	bf00      	nop
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20020444 	.word	0x20020444

08008f58 <trans_anim_cb>:

static void trans_anim_cb(lv_style_trans_t * tr, lv_anim_value_t v)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	807b      	strh	r3, [r7, #2]
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	799b      	ldrb	r3, [r3, #6]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	f7fd fc1e 	bl	80067b0 <lv_obj_get_style_list>
 8008f74:	6178      	str	r0, [r7, #20]
    lv_style_t * style = _lv_style_list_get_transition_style(list);
 8008f76:	6978      	ldr	r0, [r7, #20]
 8008f78:	f002 fdad 	bl	800bad6 <_lv_style_list_get_transition_style>
 8008f7c:	6138      	str	r0, [r7, #16]

    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	889b      	ldrh	r3, [r3, #4]
 8008f82:	f003 030f 	and.w	r3, r3, #15
 8008f86:	2b08      	cmp	r3, #8
 8008f88:	dc2d      	bgt.n	8008fe6 <trans_anim_cb+0x8e>
        lv_style_int_t x;
        if(v == 0) x = tr->start_value._int;
 8008f8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d103      	bne.n	8008f9a <trans_anim_cb+0x42>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	891b      	ldrh	r3, [r3, #8]
 8008f96:	83fb      	strh	r3, [r7, #30]
 8008f98:	e01c      	b.n	8008fd4 <trans_anim_cb+0x7c>
        else if(v == 255) x = tr->end_value._int;
 8008f9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f9e:	2bff      	cmp	r3, #255	; 0xff
 8008fa0:	d103      	bne.n	8008faa <trans_anim_cb+0x52>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	899b      	ldrh	r3, [r3, #12]
 8008fa6:	83fb      	strh	r3, [r7, #30]
 8008fa8:	e014      	b.n	8008fd4 <trans_anim_cb+0x7c>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008fc0:	1acb      	subs	r3, r1, r3
 8008fc2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8008fc6:	fb01 f303 	mul.w	r3, r1, r3
 8008fca:	121b      	asrs	r3, r3, #8
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	4413      	add	r3, r2
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	83fb      	strh	r3, [r7, #30]
        _lv_style_set_int(style, tr->prop, x);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	889b      	ldrh	r3, [r3, #4]
 8008fd8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6938      	ldr	r0, [r7, #16]
 8008fe0:	f002 fa10 	bl	800b404 <_lv_style_set_int>
 8008fe4:	e067      	b.n	80090b6 <trans_anim_cb+0x15e>
    }
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	889b      	ldrh	r3, [r3, #4]
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	2b0b      	cmp	r3, #11
 8008ff0:	dc21      	bgt.n	8009036 <trans_anim_cb+0xde>
        lv_color_t x;
        if(v <= 0) x = tr->start_value._color;
 8008ff2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	dc03      	bgt.n	8009002 <trans_anim_cb+0xaa>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	e011      	b.n	8009026 <trans_anim_cb+0xce>
        else if(v >= 255) x = tr->end_value._color;
 8009002:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009006:	2bfe      	cmp	r3, #254	; 0xfe
 8009008:	dd03      	ble.n	8009012 <trans_anim_cb+0xba>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	e009      	b.n	8009026 <trans_anim_cb+0xce>
        else x = lv_color_mix(tr->end_value._color, tr->start_value._color, v);
 8009012:	887b      	ldrh	r3, [r7, #2]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6889      	ldr	r1, [r1, #8]
 800901c:	68d8      	ldr	r0, [r3, #12]
 800901e:	f7fa ff61 	bl	8003ee4 <lv_color_mix>
 8009022:	4603      	mov	r3, r0
 8009024:	60fb      	str	r3, [r7, #12]
        _lv_style_set_color(style, tr->prop, x);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	889b      	ldrh	r3, [r3, #4]
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	4619      	mov	r1, r3
 800902e:	6938      	ldr	r0, [r7, #16]
 8009030:	f002 fa76 	bl	800b520 <_lv_style_set_color>
 8009034:	e03f      	b.n	80090b6 <trans_anim_cb+0x15e>
    }
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	889b      	ldrh	r3, [r3, #4]
 800903a:	f003 030f 	and.w	r3, r3, #15
 800903e:	2b0d      	cmp	r3, #13
 8009040:	dc27      	bgt.n	8009092 <trans_anim_cb+0x13a>
        lv_opa_t x;
        if(v <= 0) x = tr->start_value._opa;
 8009042:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009046:	2b00      	cmp	r3, #0
 8009048:	dc03      	bgt.n	8009052 <trans_anim_cb+0xfa>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	7a1b      	ldrb	r3, [r3, #8]
 800904e:	777b      	strb	r3, [r7, #29]
 8009050:	e017      	b.n	8009082 <trans_anim_cb+0x12a>
        else if(v >= 255) x = tr->end_value._opa;
 8009052:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009056:	2bfe      	cmp	r3, #254	; 0xfe
 8009058:	dd03      	ble.n	8009062 <trans_anim_cb+0x10a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7b1b      	ldrb	r3, [r3, #12]
 800905e:	777b      	strb	r3, [r7, #29]
 8009060:	e00f      	b.n	8009082 <trans_anim_cb+0x12a>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	7a1a      	ldrb	r2, [r3, #8]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	7b1b      	ldrb	r3, [r3, #12]
 800906a:	4619      	mov	r1, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	7a1b      	ldrb	r3, [r3, #8]
 8009070:	1acb      	subs	r3, r1, r3
 8009072:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8009076:	fb01 f303 	mul.w	r3, r1, r3
 800907a:	121b      	asrs	r3, r3, #8
 800907c:	b2db      	uxtb	r3, r3
 800907e:	4413      	add	r3, r2
 8009080:	777b      	strb	r3, [r7, #29]
        _lv_style_set_opa(style, tr->prop, x);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	889b      	ldrh	r3, [r3, #4]
 8009086:	7f7a      	ldrb	r2, [r7, #29]
 8009088:	4619      	mov	r1, r3
 800908a:	6938      	ldr	r0, [r7, #16]
 800908c:	f002 fad6 	bl	800b63c <_lv_style_set_opa>
 8009090:	e011      	b.n	80090b6 <trans_anim_cb+0x15e>
    }
    else {
        const void * x;
        if(v < 128) x = tr->start_value._ptr;
 8009092:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009096:	2b7f      	cmp	r3, #127	; 0x7f
 8009098:	dc03      	bgt.n	80090a2 <trans_anim_cb+0x14a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	61bb      	str	r3, [r7, #24]
 80090a0:	e002      	b.n	80090a8 <trans_anim_cb+0x150>
        else x = tr->end_value._ptr;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	61bb      	str	r3, [r7, #24]
        _lv_style_set_ptr(style, tr->prop, x);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	889b      	ldrh	r3, [r3, #4]
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	4619      	mov	r1, r3
 80090b0:	6938      	ldr	r0, [r7, #16]
 80090b2:	f002 fb51 	bl	800b758 <_lv_style_set_ptr>
    }
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	7999      	ldrb	r1, [r3, #6]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	889b      	ldrh	r3, [r3, #4]
 80090c2:	461a      	mov	r2, r3
 80090c4:	f7fc fd8a 	bl	8005bdc <lv_obj_refresh_style>

}
 80090c8:	bf00      	nop
 80090ca:	3720      	adds	r7, #32
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <trans_anim_start_cb>:

static void trans_anim_start_cb(lv_anim_t * a)
{
 80090d0:	b590      	push	{r4, r7, lr}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
    lv_style_trans_t * tr = a->var;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	60fb      	str	r3, [r7, #12]

    lv_style_property_t prop_tmp = tr->prop;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	889b      	ldrh	r3, [r3, #4]
 80090e2:	817b      	strh	r3, [r7, #10]

    /*Start the animation from the current value*/
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 80090e4:	897b      	ldrh	r3, [r7, #10]
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	2b08      	cmp	r3, #8
 80090ec:	dc0c      	bgt.n	8009108 <trans_anim_start_cb+0x38>
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	799b      	ldrb	r3, [r3, #6]
 80090f6:	897a      	ldrh	r2, [r7, #10]
 80090f8:	4619      	mov	r1, r3
 80090fa:	f7fd fb7c 	bl	80067f6 <_lv_obj_get_style_int>
 80090fe:	4603      	mov	r3, r0
 8009100:	461a      	mov	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	811a      	strh	r2, [r3, #8]
 8009106:	e02c      	b.n	8009162 <trans_anim_start_cb+0x92>
    }
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8009108:	897b      	ldrh	r3, [r7, #10]
 800910a:	f003 030f 	and.w	r3, r3, #15
 800910e:	2b0b      	cmp	r3, #11
 8009110:	dc0a      	bgt.n	8009128 <trans_anim_start_cb+0x58>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	799b      	ldrb	r3, [r3, #6]
 800911a:	68fc      	ldr	r4, [r7, #12]
 800911c:	897a      	ldrh	r2, [r7, #10]
 800911e:	4619      	mov	r1, r3
 8009120:	f7fd fcf2 	bl	8006b08 <_lv_obj_get_style_color>
 8009124:	60a0      	str	r0, [r4, #8]
 8009126:	e01c      	b.n	8009162 <trans_anim_start_cb+0x92>
    }
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8009128:	897b      	ldrh	r3, [r7, #10]
 800912a:	f003 030f 	and.w	r3, r3, #15
 800912e:	2b0d      	cmp	r3, #13
 8009130:	dc0c      	bgt.n	800914c <trans_anim_start_cb+0x7c>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	799b      	ldrb	r3, [r3, #6]
 800913a:	897a      	ldrh	r2, [r7, #10]
 800913c:	4619      	mov	r1, r3
 800913e:	f7fd fd4e 	bl	8006bde <_lv_obj_get_style_opa>
 8009142:	4603      	mov	r3, r0
 8009144:	461a      	mov	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	721a      	strb	r2, [r3, #8]
 800914a:	e00a      	b.n	8009162 <trans_anim_start_cb+0x92>
    }
    else {      /*Ptr*/
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6818      	ldr	r0, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	799b      	ldrb	r3, [r3, #6]
 8009154:	897a      	ldrh	r2, [r7, #10]
 8009156:	4619      	mov	r1, r3
 8009158:	f7fd fdfe 	bl	8006d58 <_lv_obj_get_style_ptr>
 800915c:	4602      	mov	r2, r0
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	609a      	str	r2, [r3, #8]
    }

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    tr->prop = 0;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	809a      	strh	r2, [r3, #4]
    /*Delete the relate transition if any*/
    trans_del(tr->obj, tr->part, prop_tmp, tr);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	7999      	ldrb	r1, [r3, #6]
 8009170:	897a      	ldrh	r2, [r7, #10]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f7ff fe98 	bl	8008ea8 <trans_del>

    tr->prop = prop_tmp;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	897a      	ldrh	r2, [r7, #10]
 800917c:	809a      	strh	r2, [r3, #4]

}
 800917e:	bf00      	nop
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	bd90      	pop	{r4, r7, pc}
	...

08009188 <trans_anim_ready_cb>:

static void trans_anim_ready_cb(lv_anim_t * a)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
    lv_style_trans_t * tr = a->var;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	617b      	str	r3, [r7, #20]

    /* Remove the transitioned property from trans. style
     * if there no more transitions for this property
     * It allows changing it by normal styles*/

    bool running = false;
 8009196:	2300      	movs	r3, #0
 8009198:	77fb      	strb	r3, [r7, #31]
    lv_style_trans_t * tr_i;
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800919a:	4824      	ldr	r0, [pc, #144]	; (800922c <trans_anim_ready_cb+0xa4>)
 800919c:	f012 ff10 	bl	801bfc0 <_lv_ll_get_head>
 80091a0:	61b8      	str	r0, [r7, #24]
 80091a2:	e01c      	b.n	80091de <trans_anim_ready_cb+0x56>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d013      	beq.n	80091d4 <trans_anim_ready_cb+0x4c>
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d10d      	bne.n	80091d4 <trans_anim_ready_cb+0x4c>
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	799a      	ldrb	r2, [r3, #6]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	799b      	ldrb	r3, [r3, #6]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d107      	bne.n	80091d4 <trans_anim_ready_cb+0x4c>
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	889a      	ldrh	r2, [r3, #4]
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	889b      	ldrh	r3, [r3, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d101      	bne.n	80091d4 <trans_anim_ready_cb+0x4c>
            running = true;
 80091d0:	2301      	movs	r3, #1
 80091d2:	77fb      	strb	r3, [r7, #31]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80091d4:	69b9      	ldr	r1, [r7, #24]
 80091d6:	4815      	ldr	r0, [pc, #84]	; (800922c <trans_anim_ready_cb+0xa4>)
 80091d8:	f012 ff18 	bl	801c00c <_lv_ll_get_next>
 80091dc:	61b8      	str	r0, [r7, #24]
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1df      	bne.n	80091a4 <trans_anim_ready_cb+0x1c>
        }
    }

    if(!running) {
 80091e4:	7ffb      	ldrb	r3, [r7, #31]
 80091e6:	f083 0301 	eor.w	r3, r3, #1
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d012      	beq.n	8009216 <trans_anim_ready_cb+0x8e>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	799b      	ldrb	r3, [r3, #6]
 80091f8:	4619      	mov	r1, r3
 80091fa:	4610      	mov	r0, r2
 80091fc:	f7fd fad8 	bl	80067b0 <lv_obj_get_style_list>
 8009200:	6138      	str	r0, [r7, #16]
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 8009202:	6938      	ldr	r0, [r7, #16]
 8009204:	f002 fc67 	bl	800bad6 <_lv_style_list_get_transition_style>
 8009208:	60f8      	str	r0, [r7, #12]
        lv_style_remove_prop(style_trans, tr->prop);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	889b      	ldrh	r3, [r3, #4]
 800920e:	4619      	mov	r1, r3
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f001 fde9 	bl	800ade8 <lv_style_remove_prop>
    }

    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8009216:	6979      	ldr	r1, [r7, #20]
 8009218:	4804      	ldr	r0, [pc, #16]	; (800922c <trans_anim_ready_cb+0xa4>)
 800921a:	f012 fe23 	bl	801be64 <_lv_ll_remove>
    lv_mem_free(tr);
 800921e:	6978      	ldr	r0, [r7, #20]
 8009220:	f013 f8ee 	bl	801c400 <lv_mem_free>
}
 8009224:	bf00      	nop
 8009226:	3720      	adds	r7, #32
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20020444 	.word	0x20020444

08009230 <style_prop_is_cacheble>:

    return false;
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	80fb      	strh	r3, [r7, #6]

    switch(prop) {
 800923a:	88fb      	ldrh	r3, [r7, #6]
 800923c:	2b50      	cmp	r3, #80	; 0x50
 800923e:	d054      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 8009240:	2b50      	cmp	r3, #80	; 0x50
 8009242:	dc1d      	bgt.n	8009280 <style_prop_is_cacheble+0x50>
 8009244:	2b18      	cmp	r3, #24
 8009246:	dc0d      	bgt.n	8009264 <style_prop_is_cacheble+0x34>
 8009248:	2b15      	cmp	r3, #21
 800924a:	da4e      	bge.n	80092ea <style_prop_is_cacheble+0xba>
 800924c:	2b07      	cmp	r3, #7
 800924e:	dc05      	bgt.n	800925c <style_prop_is_cacheble+0x2c>
 8009250:	2b04      	cmp	r3, #4
 8009252:	da4a      	bge.n	80092ea <style_prop_is_cacheble+0xba>
 8009254:	3b01      	subs	r3, #1
 8009256:	2b01      	cmp	r3, #1
 8009258:	d849      	bhi.n	80092ee <style_prop_is_cacheble+0xbe>
 800925a:	e046      	b.n	80092ea <style_prop_is_cacheble+0xba>
 800925c:	3b10      	subs	r3, #16
 800925e:	2b03      	cmp	r3, #3
 8009260:	d845      	bhi.n	80092ee <style_prop_is_cacheble+0xbe>
 8009262:	e042      	b.n	80092ea <style_prop_is_cacheble+0xba>
 8009264:	2b33      	cmp	r3, #51	; 0x33
 8009266:	dc06      	bgt.n	8009276 <style_prop_is_cacheble+0x46>
 8009268:	2b30      	cmp	r3, #48	; 0x30
 800926a:	da3e      	bge.n	80092ea <style_prop_is_cacheble+0xba>
 800926c:	2b20      	cmp	r3, #32
 800926e:	d03c      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 8009270:	2b2c      	cmp	r3, #44	; 0x2c
 8009272:	d03a      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 8009274:	e03b      	b.n	80092ee <style_prop_is_cacheble+0xbe>
 8009276:	2b40      	cmp	r3, #64	; 0x40
 8009278:	d037      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 800927a:	2b42      	cmp	r3, #66	; 0x42
 800927c:	d035      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 800927e:	e036      	b.n	80092ee <style_prop_is_cacheble+0xbe>
 8009280:	2bff      	cmp	r3, #255	; 0xff
 8009282:	d032      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 8009284:	2bff      	cmp	r3, #255	; 0xff
 8009286:	dc0f      	bgt.n	80092a8 <style_prop_is_cacheble+0x78>
 8009288:	2b6e      	cmp	r3, #110	; 0x6e
 800928a:	d02e      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 800928c:	2b6e      	cmp	r3, #110	; 0x6e
 800928e:	dc04      	bgt.n	800929a <style_prop_is_cacheble+0x6a>
 8009290:	2b54      	cmp	r3, #84	; 0x54
 8009292:	d02a      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 8009294:	2b60      	cmp	r3, #96	; 0x60
 8009296:	d028      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 8009298:	e029      	b.n	80092ee <style_prop_is_cacheble+0xbe>
 800929a:	2b7f      	cmp	r3, #127	; 0x7f
 800929c:	d025      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 800929e:	2b91      	cmp	r3, #145	; 0x91
 80092a0:	d023      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 80092a2:	2b72      	cmp	r3, #114	; 0x72
 80092a4:	d021      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 80092a6:	e022      	b.n	80092ee <style_prop_is_cacheble+0xbe>
 80092a8:	f248 0283 	movw	r2, #32899	; 0x8083
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d01c      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 80092b0:	f248 0283 	movw	r2, #32899	; 0x8083
 80092b4:	4293      	cmp	r3, r2
 80092b6:	dc0c      	bgt.n	80092d2 <style_prop_is_cacheble+0xa2>
 80092b8:	f248 020c 	movw	r2, #32780	; 0x800c
 80092bc:	4293      	cmp	r3, r2
 80092be:	d014      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 80092c0:	f248 020c 	movw	r2, #32780	; 0x800c
 80092c4:	4293      	cmp	r3, r2
 80092c6:	db12      	blt.n	80092ee <style_prop_is_cacheble+0xbe>
 80092c8:	4a0c      	ldr	r2, [pc, #48]	; (80092fc <style_prop_is_cacheble+0xcc>)
 80092ca:	441a      	add	r2, r3
 80092cc:	2a01      	cmp	r2, #1
 80092ce:	d80e      	bhi.n	80092ee <style_prop_is_cacheble+0xbe>
 80092d0:	e00b      	b.n	80092ea <style_prop_is_cacheble+0xba>
 80092d2:	f248 02a0 	movw	r2, #32928	; 0x80a0
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d007      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 80092da:	f248 02ad 	movw	r2, #32941	; 0x80ad
 80092de:	4293      	cmp	r3, r2
 80092e0:	d003      	beq.n	80092ea <style_prop_is_cacheble+0xba>
 80092e2:	f248 028e 	movw	r2, #32910	; 0x808e
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d101      	bne.n	80092ee <style_prop_is_cacheble+0xbe>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e000      	b.n	80092f0 <style_prop_is_cacheble+0xc0>
            break;
        default:
            return false;
 80092ee:	2300      	movs	r3, #0
    }
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	ffff7f80 	.word	0xffff7f80

08009300 <update_style_cache>:
 * @param obj pointer to an object
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
 800930c:	4613      	mov	r3, r2
 800930e:	803b      	strh	r3, [r7, #0]
    if(style_prop_is_cacheble(prop) == false) return;
 8009310:	883b      	ldrh	r3, [r7, #0]
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff ff8c 	bl	8009230 <style_prop_is_cacheble>
 8009318:	4603      	mov	r3, r0
 800931a:	f083 0301 	eor.w	r3, r3, #1
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	f040 81fa 	bne.w	800971a <update_style_cache+0x41a>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7fd fa40 	bl	80067b0 <lv_obj_get_style_list>
 8009330:	60f8      	str	r0, [r7, #12]

    bool ignore_cache_ori = list->ignore_cache;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	795b      	ldrb	r3, [r3, #5]
 8009336:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b00      	cmp	r3, #0
 800933e:	bf14      	ite	ne
 8009340:	2301      	movne	r3, #1
 8009342:	2300      	moveq	r3, #0
 8009344:	72fb      	strb	r3, [r7, #11]
    list->ignore_cache = 1;
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	7953      	ldrb	r3, [r2, #5]
 800934a:	f043 0308 	orr.w	r3, r3, #8
 800934e:	7153      	strb	r3, [r2, #5]

#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7fa ff77 	bl	8004248 <lv_obj_get_style_opa_scale>
 800935a:	4603      	mov	r3, r0
 800935c:	2bff      	cmp	r3, #255	; 0xff
 800935e:	bf0c      	ite	eq
 8009360:	2301      	moveq	r3, #1
 8009362:	2300      	movne	r3, #0
 8009364:	b2d9      	uxtb	r1, r3
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	7953      	ldrb	r3, [r2, #5]
 800936a:	f361 1345 	bfi	r3, r1, #5, #1
 800936e:	7153      	strb	r3, [r2, #5]
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7fb fb02 	bl	800497e <lv_obj_get_style_text_decor>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	bf0c      	ite	eq
 8009380:	2301      	moveq	r3, #1
 8009382:	2300      	movne	r3, #0
 8009384:	b2d9      	uxtb	r1, r3
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	79d3      	ldrb	r3, [r2, #7]
 800938a:	f361 1386 	bfi	r3, r1, #6, #1
 800938e:	71d3      	strb	r3, [r2, #7]
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7fb fb60 	bl	8004a5a <lv_obj_get_style_text_font>
 800939a:	4602      	mov	r2, r0
 800939c:	4bac      	ldr	r3, [pc, #688]	; (8009650 <update_style_cache+0x350>)
 800939e:	429a      	cmp	r2, r3
 80093a0:	bf0c      	ite	eq
 80093a2:	2301      	moveq	r3, #1
 80093a4:	2300      	movne	r3, #0
 80093a6:	b2d9      	uxtb	r1, r3
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	79d3      	ldrb	r3, [r2, #7]
 80093ac:	f361 13c7 	bfi	r3, r1, #7, #1
 80093b0:	71d3      	strb	r3, [r2, #7]

    list->text_space_zero = 1;
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	79d3      	ldrb	r3, [r2, #7]
 80093b6:	f043 0320 	orr.w	r3, r3, #32
 80093ba:	71d3      	strb	r3, [r2, #7]
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80093bc:	78fb      	ldrb	r3, [r7, #3]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7fb fab8 	bl	8004936 <lv_obj_get_style_text_letter_space>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d107      	bne.n	80093dc <update_style_cache+0xdc>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7fb fac2 	bl	800495a <lv_obj_get_style_text_line_space>
 80093d6:	4603      	mov	r3, r0
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d004      	beq.n	80093e6 <update_style_cache+0xe6>
        list->text_space_zero = 0;
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	79d3      	ldrb	r3, [r2, #7]
 80093e0:	f36f 1345 	bfc	r3, #5, #1
 80093e4:	71d3      	strb	r3, [r2, #7]
    }

    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7fb f83f 	bl	800446e <lv_obj_get_style_bg_opa>
 80093f0:	4603      	mov	r3, r0
 80093f2:	72bb      	strb	r3, [r7, #10]
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 80093f4:	7abb      	ldrb	r3, [r7, #10]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	bf0c      	ite	eq
 80093fa:	2301      	moveq	r3, #1
 80093fc:	2300      	movne	r3, #0
 80093fe:	b2d9      	uxtb	r1, r3
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	7993      	ldrb	r3, [r2, #6]
 8009404:	f361 03c3 	bfi	r3, r1, #3, #1
 8009408:	7193      	strb	r3, [r2, #6]
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
 800940a:	7abb      	ldrb	r3, [r7, #10]
 800940c:	2bff      	cmp	r3, #255	; 0xff
 800940e:	bf0c      	ite	eq
 8009410:	2301      	moveq	r3, #1
 8009412:	2300      	movne	r3, #0
 8009414:	b2d9      	uxtb	r1, r3
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	7993      	ldrb	r3, [r2, #6]
 800941a:	f361 1304 	bfi	r3, r1, #4, #1
 800941e:	7193      	strb	r3, [r2, #6]

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7fb f833 	bl	8004490 <lv_obj_get_style_border_width>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	bf0c      	ite	eq
 8009430:	2301      	moveq	r3, #1
 8009432:	2300      	movne	r3, #0
 8009434:	b2d9      	uxtb	r1, r3
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	7993      	ldrb	r3, [r2, #6]
 800943a:	f361 1345 	bfi	r3, r1, #5, #1
 800943e:	7193      	strb	r3, [r2, #6]
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7fb f834 	bl	80044b2 <lv_obj_get_style_border_side>
 800944a:	4603      	mov	r3, r0
 800944c:	2b0f      	cmp	r3, #15
 800944e:	bf0c      	ite	eq
 8009450:	2301      	moveq	r3, #1
 8009452:	2300      	movne	r3, #0
 8009454:	b2d9      	uxtb	r1, r3
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	7993      	ldrb	r3, [r2, #6]
 800945a:	f361 1386 	bfi	r3, r1, #6, #1
 800945e:	7193      	strb	r3, [r2, #6]
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7fb f848 	bl	80044fa <lv_obj_get_style_border_post>
 800946a:	4603      	mov	r3, r0
 800946c:	f083 0301 	eor.w	r3, r3, #1
 8009470:	b2d9      	uxtb	r1, r3
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	7993      	ldrb	r3, [r2, #6]
 8009476:	f361 13c7 	bfi	r3, r1, #7, #1
 800947a:	7193      	strb	r3, [r2, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7fa fe76 	bl	8004172 <lv_obj_get_style_clip_corner>
 8009486:	4603      	mov	r3, r0
 8009488:	f083 0301 	eor.w	r3, r3, #1
 800948c:	b2d9      	uxtb	r1, r3
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	7953      	ldrb	r3, [r2, #5]
 8009492:	f361 1386 	bfi	r3, r1, #6, #1
 8009496:	7153      	strb	r3, [r2, #5]
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7fb fba2 	bl	8004be6 <lv_obj_get_style_image_recolor_opa>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bf0c      	ite	eq
 80094a8:	2301      	moveq	r3, #1
 80094aa:	2300      	movne	r3, #0
 80094ac:	b2d9      	uxtb	r1, r3
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	79d3      	ldrb	r3, [r2, #7]
 80094b2:	f361 1304 	bfi	r3, r1, #4, #1
 80094b6:	71d3      	strb	r3, [r2, #7]
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7fb f854 	bl	800456a <lv_obj_get_style_outline_width>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bf0c      	ite	eq
 80094c8:	2301      	moveq	r3, #1
 80094ca:	2300      	movne	r3, #0
 80094cc:	b2d9      	uxtb	r1, r3
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	79d3      	ldrb	r3, [r2, #7]
 80094d2:	f361 0300 	bfi	r3, r1, #0, #1
 80094d6:	71d3      	strb	r3, [r2, #7]
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
 80094d8:	78fb      	ldrb	r3, [r7, #3]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7fb f96d 	bl	80047bc <lv_obj_get_style_pattern_image>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	bf0c      	ite	eq
 80094e8:	2301      	moveq	r3, #1
 80094ea:	2300      	movne	r3, #0
 80094ec:	b2d9      	uxtb	r1, r3
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	79d3      	ldrb	r3, [r2, #7]
 80094f2:	f361 0341 	bfi	r3, r1, #1, #1
 80094f6:	71d3      	strb	r3, [r2, #7]
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7fa fe27 	bl	8004150 <lv_obj_get_style_radius>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	bf0c      	ite	eq
 8009508:	2301      	moveq	r3, #1
 800950a:	2300      	movne	r3, #0
 800950c:	b2d9      	uxtb	r1, r3
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	7953      	ldrb	r3, [r2, #5]
 8009512:	f361 1304 	bfi	r3, r1, #4, #1
 8009516:	7153      	strb	r3, [r2, #5]
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7fb f87a 	bl	8004616 <lv_obj_get_style_shadow_width>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	bf0c      	ite	eq
 8009528:	2301      	moveq	r3, #1
 800952a:	2300      	movne	r3, #0
 800952c:	b2d9      	uxtb	r1, r3
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	79d3      	ldrb	r3, [r2, #7]
 8009532:	f361 0382 	bfi	r3, r1, #2, #1
 8009536:	71d3      	strb	r3, [r2, #7]
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7fb f9e9 	bl	8004914 <lv_obj_get_style_value_str>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	bf0c      	ite	eq
 8009548:	2301      	moveq	r3, #1
 800954a:	2300      	movne	r3, #0
 800954c:	b2d9      	uxtb	r1, r3
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	79d3      	ldrb	r3, [r2, #7]
 8009552:	f361 03c3 	bfi	r3, r1, #3, #1
 8009556:	71d3      	strb	r3, [r2, #7]

    list->transform_all_zero  = 1;
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	7953      	ldrb	r3, [r2, #5]
 800955c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009560:	7153      	strb	r3, [r2, #5]
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7fa fe4c 	bl	8004204 <lv_obj_get_style_transform_angle>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d118      	bne.n	80095a4 <update_style_cache+0x2a4>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7fa fe22 	bl	80041c0 <lv_obj_get_style_transform_width>
 800957c:	4603      	mov	r3, r0
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 800957e:	2b00      	cmp	r3, #0
 8009580:	d110      	bne.n	80095a4 <update_style_cache+0x2a4>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7fa fe2b 	bl	80041e2 <lv_obj_get_style_transform_height>
 800958c:	4603      	mov	r3, r0
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 800958e:	2b00      	cmp	r3, #0
 8009590:	d108      	bne.n	80095a4 <update_style_cache+0x2a4>
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
 8009592:	78fb      	ldrb	r3, [r7, #3]
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7fa fe45 	bl	8004226 <lv_obj_get_style_transform_zoom>
 800959c:	4603      	mov	r3, r0
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 800959e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095a2:	d004      	beq.n	80095ae <update_style_cache+0x2ae>
        list->transform_all_zero  = 0;
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	7953      	ldrb	r3, [r2, #5]
 80095a8:	f36f 13c7 	bfc	r3, #7, #1
 80095ac:	7153      	strb	r3, [r2, #5]
    }

    list->pad_all_zero  = 1;
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	7993      	ldrb	r3, [r2, #6]
 80095b2:	f043 0301 	orr.w	r3, r3, #1
 80095b6:	7193      	strb	r3, [r2, #6]
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7fa fe55 	bl	800426c <lv_obj_get_style_pad_top>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d117      	bne.n	80095f8 <update_style_cache+0x2f8>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 80095c8:	78fb      	ldrb	r3, [r7, #3]
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7fa fe5e 	bl	800428e <lv_obj_get_style_pad_bottom>
 80095d2:	4603      	mov	r3, r0
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10f      	bne.n	80095f8 <update_style_cache+0x2f8>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7fa fe67 	bl	80042b0 <lv_obj_get_style_pad_left>
 80095e2:	4603      	mov	r3, r0
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d107      	bne.n	80095f8 <update_style_cache+0x2f8>
       lv_obj_get_style_pad_right(obj, part) != 0) {
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7fa fe70 	bl	80042d2 <lv_obj_get_style_pad_right>
 80095f2:	4603      	mov	r3, r0
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d004      	beq.n	8009602 <update_style_cache+0x302>
        list->pad_all_zero  = 0;
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	7993      	ldrb	r3, [r2, #6]
 80095fc:	f36f 0300 	bfc	r3, #0, #1
 8009600:	7193      	strb	r3, [r2, #6]
    }

    list->margin_all_zero  = 1;
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	7993      	ldrb	r3, [r2, #6]
 8009606:	f043 0302 	orr.w	r3, r3, #2
 800960a:	7193      	strb	r3, [r2, #6]
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7fa fe80 	bl	8004316 <lv_obj_get_style_margin_top>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d11b      	bne.n	8009654 <update_style_cache+0x354>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7fa fe89 	bl	8004338 <lv_obj_get_style_margin_bottom>
 8009626:	4603      	mov	r3, r0
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 8009628:	2b00      	cmp	r3, #0
 800962a:	d113      	bne.n	8009654 <update_style_cache+0x354>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7fa fe92 	bl	800435a <lv_obj_get_style_margin_left>
 8009636:	4603      	mov	r3, r0
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10b      	bne.n	8009654 <update_style_cache+0x354>
       lv_obj_get_style_margin_right(obj, part) != 0) {
 800963c:	78fb      	ldrb	r3, [r7, #3]
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7fa fe9b 	bl	800437c <lv_obj_get_style_margin_right>
 8009646:	4603      	mov	r3, r0
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 8009648:	2b00      	cmp	r3, #0
 800964a:	d008      	beq.n	800965e <update_style_cache+0x35e>
 800964c:	e002      	b.n	8009654 <update_style_cache+0x354>
 800964e:	bf00      	nop
 8009650:	20000020 	.word	0x20000020
        list->margin_all_zero  = 0;
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	7993      	ldrb	r3, [r2, #6]
 8009658:	f36f 0341 	bfc	r3, #1, #1
 800965c:	7193      	strb	r3, [r2, #6]
    }

    list->blend_mode_all_normal = 1;
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	7993      	ldrb	r3, [r2, #6]
 8009662:	f043 0304 	orr.w	r3, r3, #4
 8009666:	7193      	strb	r3, [r2, #6]
#if LV_USE_BLEND_MODES
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7fa fe96 	bl	800439e <lv_obj_get_style_bg_blend_mode>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d13f      	bne.n	80096f8 <update_style_cache+0x3f8>
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7fa ff2a 	bl	80044d6 <lv_obj_get_style_border_blend_mode>
 8009682:	4603      	mov	r3, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009684:	2b00      	cmp	r3, #0
 8009686:	d137      	bne.n	80096f8 <update_style_cache+0x3f8>
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009688:	78fb      	ldrb	r3, [r7, #3]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7fb f850 	bl	8004732 <lv_obj_get_style_pattern_blend_mode>
 8009692:	4603      	mov	r3, r0
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009694:	2b00      	cmp	r3, #0
 8009696:	d12f      	bne.n	80096f8 <update_style_cache+0x3f8>
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7fa ff86 	bl	80045ae <lv_obj_get_style_outline_blend_mode>
 80096a2:	4603      	mov	r3, r0
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d127      	bne.n	80096f8 <update_style_cache+0x3f8>
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80096a8:	78fb      	ldrb	r3, [r7, #3]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7fb f8b8 	bl	8004822 <lv_obj_get_style_value_blend_mode>
 80096b2:	4603      	mov	r3, r0
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d11f      	bne.n	80096f8 <update_style_cache+0x3f8>
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7fb f971 	bl	80049a4 <lv_obj_get_style_text_blend_mode>
 80096c2:	4603      	mov	r3, r0
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d117      	bne.n	80096f8 <update_style_cache+0x3f8>
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7fb f9e7 	bl	8004aa0 <lv_obj_get_style_line_blend_mode>
 80096d2:	4603      	mov	r3, r0
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10f      	bne.n	80096f8 <update_style_cache+0x3f8>
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7fb fa4b 	bl	8004b78 <lv_obj_get_style_image_blend_mode>
 80096e2:	4603      	mov	r3, r0
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d107      	bne.n	80096f8 <update_style_cache+0x3f8>
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
 80096e8:	78fb      	ldrb	r3, [r7, #3]
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7fa ffd6 	bl	800469e <lv_obj_get_style_shadow_blend_mode>
 80096f2:	4603      	mov	r3, r0
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d004      	beq.n	8009702 <update_style_cache+0x402>
        list->blend_mode_all_normal = 0;
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	7993      	ldrb	r3, [r2, #6]
 80096fc:	f36f 0382 	bfc	r3, #2, #1
 8009700:	7193      	strb	r3, [r2, #6]
    }
#endif
    list->ignore_cache = ignore_cache_ori;
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	7953      	ldrb	r3, [r2, #5]
 8009706:	7af9      	ldrb	r1, [r7, #11]
 8009708:	f361 03c3 	bfi	r3, r1, #3, #1
 800970c:	7153      	strb	r3, [r2, #5]
    list->valid_cache = 1;
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	7953      	ldrb	r3, [r2, #5]
 8009712:	f043 0304 	orr.w	r3, r3, #4
 8009716:	7153      	strb	r3, [r2, #5]
 8009718:	e000      	b.n	800971c <update_style_cache+0x41c>
    if(style_prop_is_cacheble(prop) == false) return;
 800971a:	bf00      	nop
}
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop

08009724 <update_style_cache_children>:
 * Update the cache of style list
 * @param obj pointer to an object
 * @param part the part of the object
 */
static void update_style_cache_children(lv_obj_t * obj)
{
 8009724:	b590      	push	{r4, r7, lr}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 800972c:	2300      	movs	r3, #0
 800972e:	75fb      	strb	r3, [r7, #23]
 8009730:	e07d      	b.n	800982e <update_style_cache_children+0x10a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7fd f83a 	bl	80067b0 <lv_obj_get_style_list>
 800973c:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d079      	beq.n	8009838 <update_style_cache_children+0x114>

        bool ignore_cache_ori = list->ignore_cache;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	795b      	ldrb	r3, [r3, #5]
 8009748:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	bf14      	ite	ne
 8009752:	2301      	movne	r3, #1
 8009754:	2300      	moveq	r3, #0
 8009756:	72fb      	strb	r3, [r7, #11]
        list->ignore_cache = 1;
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	7953      	ldrb	r3, [r2, #5]
 800975c:	f043 0308 	orr.w	r3, r3, #8
 8009760:	7153      	strb	r3, [r2, #5]

        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7fa fd6e 	bl	8004248 <lv_obj_get_style_opa_scale>
 800976c:	4603      	mov	r3, r0
 800976e:	2bff      	cmp	r3, #255	; 0xff
 8009770:	bf0c      	ite	eq
 8009772:	2301      	moveq	r3, #1
 8009774:	2300      	movne	r3, #0
 8009776:	b2d9      	uxtb	r1, r3
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	7953      	ldrb	r3, [r2, #5]
 800977c:	f361 1345 	bfi	r3, r1, #5, #1
 8009780:	7153      	strb	r3, [r2, #5]
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8009782:	7dfb      	ldrb	r3, [r7, #23]
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7fb f8f9 	bl	800497e <lv_obj_get_style_text_decor>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	bf0c      	ite	eq
 8009792:	2301      	moveq	r3, #1
 8009794:	2300      	movne	r3, #0
 8009796:	b2d9      	uxtb	r1, r3
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	79d3      	ldrb	r3, [r2, #7]
 800979c:	f361 1386 	bfi	r3, r1, #6, #1
 80097a0:	71d3      	strb	r3, [r2, #7]
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7fb f957 	bl	8004a5a <lv_obj_get_style_text_font>
 80097ac:	4604      	mov	r4, r0
 80097ae:	f014 fc83 	bl	801e0b8 <lv_theme_get_font_normal>
 80097b2:	4603      	mov	r3, r0
 80097b4:	429c      	cmp	r4, r3
 80097b6:	bf0c      	ite	eq
 80097b8:	2301      	moveq	r3, #1
 80097ba:	2300      	movne	r3, #0
 80097bc:	b2d9      	uxtb	r1, r3
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	79d3      	ldrb	r3, [r2, #7]
 80097c2:	f361 13c7 	bfi	r3, r1, #7, #1
 80097c6:	71d3      	strb	r3, [r2, #7]
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7fb fa0a 	bl	8004be6 <lv_obj_get_style_image_recolor_opa>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bf0c      	ite	eq
 80097d8:	2301      	moveq	r3, #1
 80097da:	2300      	movne	r3, #0
 80097dc:	b2d9      	uxtb	r1, r3
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	79d3      	ldrb	r3, [r2, #7]
 80097e2:	f361 1304 	bfi	r3, r1, #4, #1
 80097e6:	71d3      	strb	r3, [r2, #7]

        list->text_space_zero = 1;
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	79d3      	ldrb	r3, [r2, #7]
 80097ec:	f043 0320 	orr.w	r3, r3, #32
 80097f0:	71d3      	strb	r3, [r2, #7]
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7fb f89d 	bl	8004936 <lv_obj_get_style_text_letter_space>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d107      	bne.n	8009812 <update_style_cache_children+0xee>
           lv_obj_get_style_text_line_space(obj, part) != 0) {
 8009802:	7dfb      	ldrb	r3, [r7, #23]
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7fb f8a7 	bl	800495a <lv_obj_get_style_text_line_space>
 800980c:	4603      	mov	r3, r0
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 800980e:	2b00      	cmp	r3, #0
 8009810:	d004      	beq.n	800981c <update_style_cache_children+0xf8>
            list->text_space_zero = 0;
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	79d3      	ldrb	r3, [r2, #7]
 8009816:	f36f 1345 	bfc	r3, #5, #1
 800981a:	71d3      	strb	r3, [r2, #7]
        }

        list->ignore_cache = ignore_cache_ori;
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	7953      	ldrb	r3, [r2, #5]
 8009820:	7af9      	ldrb	r1, [r7, #11]
 8009822:	f361 03c3 	bfi	r3, r1, #3, #1
 8009826:	7153      	strb	r3, [r2, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	3301      	adds	r3, #1
 800982c:	75fb      	strb	r3, [r7, #23]
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	2b40      	cmp	r3, #64	; 0x40
 8009832:	f47f af7e 	bne.w	8009732 <update_style_cache_children+0xe>
 8009836:	e000      	b.n	800983a <update_style_cache_children+0x116>
        if(list == NULL) break;
 8009838:	bf00      	nop
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 800983a:	2100      	movs	r1, #0
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7fc feb5 	bl	80065ac <lv_obj_get_child>
 8009842:	6138      	str	r0, [r7, #16]
    while(child) {
 8009844:	e007      	b.n	8009856 <update_style_cache_children+0x132>
        update_style_cache_children(child);
 8009846:	6938      	ldr	r0, [r7, #16]
 8009848:	f7ff ff6c 	bl	8009724 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 800984c:	6939      	ldr	r1, [r7, #16]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7fc feac 	bl	80065ac <lv_obj_get_child>
 8009854:	6138      	str	r0, [r7, #16]
    while(child) {
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f4      	bne.n	8009846 <update_style_cache_children+0x122>
    }

}
 800985c:	bf00      	nop
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	bd90      	pop	{r4, r7, pc}

08009864 <invalidate_style_cache>:
 * Mark the object and all of it's children's style lists as invalid.
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	70fb      	strb	r3, [r7, #3]
 8009870:	4613      	mov	r3, r2
 8009872:	803b      	strh	r3, [r7, #0]
    if(style_prop_is_cacheble(prop) == false) return;
 8009874:	883b      	ldrh	r3, [r7, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f7ff fcda 	bl	8009230 <style_prop_is_cacheble>
 800987c:	4603      	mov	r3, r0
 800987e:	f083 0301 	eor.w	r3, r3, #1
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d143      	bne.n	8009910 <invalidate_style_cache+0xac>

    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8009888:	2300      	movs	r3, #0
 800988a:	70fb      	strb	r3, [r7, #3]
 800988c:	e010      	b.n	80098b0 <invalidate_style_cache+0x4c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800988e:	78fb      	ldrb	r3, [r7, #3]
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7fc ff8c 	bl	80067b0 <lv_obj_get_style_list>
 8009898:	6138      	str	r0, [r7, #16]
        if(list == NULL) break;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <invalidate_style_cache+0x54>
        list->valid_cache = 0;
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	7953      	ldrb	r3, [r2, #5]
 80098a4:	f36f 0382 	bfc	r3, #2, #1
 80098a8:	7153      	strb	r3, [r2, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	3301      	adds	r3, #1
 80098ae:	70fb      	strb	r3, [r7, #3]
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	2b3f      	cmp	r3, #63	; 0x3f
 80098b4:	d9eb      	bls.n	800988e <invalidate_style_cache+0x2a>
 80098b6:	e000      	b.n	80098ba <invalidate_style_cache+0x56>
        if(list == NULL) break;
 80098b8:	bf00      	nop
    }

    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 80098ba:	2340      	movs	r3, #64	; 0x40
 80098bc:	70fb      	strb	r3, [r7, #3]
 80098be:	e010      	b.n	80098e2 <invalidate_style_cache+0x7e>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7fc ff73 	bl	80067b0 <lv_obj_get_style_list>
 80098ca:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00b      	beq.n	80098ea <invalidate_style_cache+0x86>
        list->valid_cache = 0;
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	7953      	ldrb	r3, [r2, #5]
 80098d6:	f36f 0382 	bfc	r3, #2, #1
 80098da:	7153      	strb	r3, [r2, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 80098dc:	78fb      	ldrb	r3, [r7, #3]
 80098de:	3301      	adds	r3, #1
 80098e0:	70fb      	strb	r3, [r7, #3]
 80098e2:	78fb      	ldrb	r3, [r7, #3]
 80098e4:	2bff      	cmp	r3, #255	; 0xff
 80098e6:	d1eb      	bne.n	80098c0 <invalidate_style_cache+0x5c>
 80098e8:	e000      	b.n	80098ec <invalidate_style_cache+0x88>
        if(list == NULL) break;
 80098ea:	bf00      	nop
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 80098ec:	2100      	movs	r1, #0
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7fc fe5c 	bl	80065ac <lv_obj_get_child>
 80098f4:	6178      	str	r0, [r7, #20]
    while(child) {
 80098f6:	e007      	b.n	8009908 <invalidate_style_cache+0xa4>
        update_style_cache_children(child);
 80098f8:	6978      	ldr	r0, [r7, #20]
 80098fa:	f7ff ff13 	bl	8009724 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 80098fe:	6979      	ldr	r1, [r7, #20]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7fc fe53 	bl	80065ac <lv_obj_get_child>
 8009906:	6178      	str	r0, [r7, #20]
    while(child) {
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1f4      	bne.n	80098f8 <invalidate_style_cache+0x94>
 800990e:	e000      	b.n	8009912 <invalidate_style_cache+0xae>
    if(style_prop_is_cacheble(prop) == false) return;
 8009910:	bf00      	nop
    }
}
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <style_snapshot>:

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
 8009918:	b590      	push	{r4, r7, lr}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	460b      	mov	r3, r1
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	72fb      	strb	r3, [r7, #11]
    _lv_obj_disable_style_caching(obj, true);
 8009926:	2101      	movs	r1, #1
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f7fc fa16 	bl	8005d5a <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
 800992e:	21e0      	movs	r1, #224	; 0xe0
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f013 fa86 	bl	801ce42 <_lv_memset_00>
    lv_draw_rect_dsc_init(&shot->rect);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4618      	mov	r0, r3
 800993a:	f009 fb81 	bl	8013040 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&shot->label);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3368      	adds	r3, #104	; 0x68
 8009942:	4618      	mov	r0, r3
 8009944:	f005 fa6a 	bl	800ee1c <lv_draw_label_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	339c      	adds	r3, #156	; 0x9c
 800994c:	4618      	mov	r0, r3
 800994e:	f004 faaa 	bl	800dea6 <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3390      	adds	r3, #144	; 0x90
 8009956:	4618      	mov	r0, r3
 8009958:	f006 fde5 	bl	8010526 <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	4619      	mov	r1, r3
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f7fc ff25 	bl	80067b0 <lv_obj_get_style_list>
 8009966:	6178      	str	r0, [r7, #20]
    bool trans_ori = list->skip_trans;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	795b      	ldrb	r3, [r3, #5]
 800996c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	bf14      	ite	ne
 8009976:	2301      	movne	r3, #1
 8009978:	2300      	moveq	r3, #0
 800997a:	74fb      	strb	r3, [r7, #19]
    list->skip_trans = 1;
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	7953      	ldrb	r3, [r2, #5]
 8009980:	f043 0301 	orr.w	r3, r3, #1
 8009984:	7153      	strb	r3, [r2, #5]

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	4619      	mov	r1, r3
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7fd fcef 	bl	8007370 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	4619      	mov	r1, r3
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7fd ff3b 	bl	8007818 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80099a8:	7afb      	ldrb	r3, [r7, #11]
 80099aa:	4619      	mov	r1, r3
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f7fd ffb8 	bl	8007922 <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80099b8:	7afb      	ldrb	r3, [r7, #11]
 80099ba:	4619      	mov	r1, r3
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7fe f824 	bl	8007a0a <lv_obj_init_draw_line_dsc>

    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	4619      	mov	r1, r3
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f7fa fc50 	bl	800426c <lv_obj_get_style_pad_top>
 80099cc:	4603      	mov	r3, r0
 80099ce:	461a      	mov	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
 80099d6:	7afb      	ldrb	r3, [r7, #11]
 80099d8:	4619      	mov	r1, r3
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f7fa fc57 	bl	800428e <lv_obj_get_style_pad_bottom>
 80099e0:	4603      	mov	r3, r0
 80099e2:	461a      	mov	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	4619      	mov	r1, r3
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f7fa fc6f 	bl	80042d2 <lv_obj_get_style_pad_right>
 80099f4:	4603      	mov	r3, r0
 80099f6:	461a      	mov	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
 80099fe:	7afb      	ldrb	r3, [r7, #11]
 8009a00:	4619      	mov	r1, r3
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f7fa fc54 	bl	80042b0 <lv_obj_get_style_pad_left>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
 8009a12:	7afb      	ldrb	r3, [r7, #11]
 8009a14:	4619      	mov	r1, r3
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7fa fc6c 	bl	80042f4 <lv_obj_get_style_pad_inner>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	461a      	mov	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
 8009a26:	7afb      	ldrb	r3, [r7, #11]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7fa fc73 	bl	8004316 <lv_obj_get_style_margin_top>
 8009a30:	4603      	mov	r3, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
 8009a3a:	7afb      	ldrb	r3, [r7, #11]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f7fa fc7a 	bl	8004338 <lv_obj_get_style_margin_bottom>
 8009a44:	4603      	mov	r3, r0
 8009a46:	461a      	mov	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
 8009a4e:	7afb      	ldrb	r3, [r7, #11]
 8009a50:	4619      	mov	r1, r3
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f7fa fc81 	bl	800435a <lv_obj_get_style_margin_left>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
 8009a62:	7afb      	ldrb	r3, [r7, #11]
 8009a64:	4619      	mov	r1, r3
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7fa fc88 	bl	800437c <lv_obj_get_style_margin_right>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	461a      	mov	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    shot->size = lv_obj_get_style_size(obj, part);
 8009a76:	7afb      	ldrb	r3, [r7, #11]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f7fa fb8f 	bl	800419e <lv_obj_get_style_size>
 8009a80:	4603      	mov	r3, r0
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
 8009a8a:	7afb      	ldrb	r3, [r7, #11]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f7fa fb96 	bl	80041c0 <lv_obj_get_style_transform_width>
 8009a94:	4603      	mov	r3, r0
 8009a96:	461a      	mov	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
 8009a9e:	7afb      	ldrb	r3, [r7, #11]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f7fa fb9d 	bl	80041e2 <lv_obj_get_style_transform_height>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	461a      	mov	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
 8009ab2:	7afb      	ldrb	r3, [r7, #11]
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f7fa fba4 	bl	8004204 <lv_obj_get_style_transform_angle>
 8009abc:	4603      	mov	r3, r0
 8009abe:	461a      	mov	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
 8009ac6:	7afb      	ldrb	r3, [r7, #11]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f7fa fbab 	bl	8004226 <lv_obj_get_style_transform_zoom>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
 8009ada:	7afb      	ldrb	r3, [r7, #11]
 8009adc:	4619      	mov	r1, r3
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7fb f92c 	bl	8004d3c <lv_obj_get_style_scale_width>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
 8009aee:	7afb      	ldrb	r3, [r7, #11]
 8009af0:	4619      	mov	r1, r3
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7fb f933 	bl	8004d5e <lv_obj_get_style_scale_border_width>
 8009af8:	4603      	mov	r3, r0
 8009afa:	461a      	mov	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
 8009b02:	7afb      	ldrb	r3, [r7, #11]
 8009b04:	4619      	mov	r1, r3
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f7fb f93a 	bl	8004d80 <lv_obj_get_style_scale_end_border_width>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	461a      	mov	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
 8009b16:	7afb      	ldrb	r3, [r7, #11]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f7fb f941 	bl	8004da2 <lv_obj_get_style_scale_end_line_width>
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
 8009b2a:	687c      	ldr	r4, [r7, #4]
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f7fb f947 	bl	8004dc4 <lv_obj_get_style_scale_grad_color>
 8009b36:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
 8009b3a:	687c      	ldr	r4, [r7, #4]
 8009b3c:	7afb      	ldrb	r3, [r7, #11]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7fb f950 	bl	8004de6 <lv_obj_get_style_scale_end_color>
 8009b46:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8009b4a:	7afb      	ldrb	r3, [r7, #11]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f7fa fb7a 	bl	8004248 <lv_obj_get_style_opa_scale>
 8009b54:	4603      	mov	r3, r0
 8009b56:	461a      	mov	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
 8009b5e:	7afb      	ldrb	r3, [r7, #11]
 8009b60:	4619      	mov	r1, r3
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f7fa fb05 	bl	8004172 <lv_obj_get_style_clip_corner>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	f892 30dd 	ldrb.w	r3, [r2, #221]	; 0xdd
 8009b72:	f361 0300 	bfi	r3, r1, #0, #1
 8009b76:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 8009b7a:	7afb      	ldrb	r3, [r7, #11]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7fa fcbb 	bl	80044fa <lv_obj_get_style_border_post>
 8009b84:	4603      	mov	r3, r0
 8009b86:	4619      	mov	r1, r3
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	f892 30dd 	ldrb.w	r3, [r2, #221]	; 0xdd
 8009b8e:	f361 0341 	bfi	r3, r1, #1, #1
 8009b92:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd

    _lv_obj_disable_style_caching(obj, false);
 8009b96:	2100      	movs	r1, #0
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7fc f8de 	bl	8005d5a <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	7953      	ldrb	r3, [r2, #5]
 8009ba2:	7cf9      	ldrb	r1, [r7, #19]
 8009ba4:	f361 0300 	bfi	r3, r1, #0, #1
 8009ba8:	7153      	strb	r3, [r2, #5]
}
 8009baa:	bf00      	nop
 8009bac:	371c      	adds	r7, #28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd90      	pop	{r4, r7, pc}

08009bb2 <style_snapshot_compare>:

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	6039      	str	r1, [r7, #0]
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
 8009bbc:	22e0      	movs	r2, #224	; 0xe0
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f01e fb79 	bl	80282b8 <memcmp>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <style_snapshot_compare+0x1e>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e0ec      	b.n	8009daa <style_snapshot_compare+0x1f8>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f9b3 20b0 	ldrsh.w	r2, [r3, #176]	; 0xb0
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d001      	beq.n	8009be4 <style_snapshot_compare+0x32>
 8009be0:	2302      	movs	r3, #2
 8009be2:	e0e2      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d001      	beq.n	8009bf8 <style_snapshot_compare+0x46>
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	e0d8      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f9b3 20b6 	ldrsh.w	r2, [r3, #182]	; 0xb6
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d001      	beq.n	8009c0c <style_snapshot_compare+0x5a>
 8009c08:	2302      	movs	r3, #2
 8009c0a:	e0ce      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d001      	beq.n	8009c20 <style_snapshot_compare+0x6e>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e0c4      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f9b3 20b0 	ldrsh.w	r2, [r3, #176]	; 0xb0
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d001      	beq.n	8009c34 <style_snapshot_compare+0x82>
 8009c30:	2302      	movs	r3, #2
 8009c32:	e0ba      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f9b3 20b8 	ldrsh.w	r2, [r3, #184]	; 0xb8
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d001      	beq.n	8009c48 <style_snapshot_compare+0x96>
 8009c44:	2302      	movs	r3, #2
 8009c46:	e0b0      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f9b3 20ba 	ldrsh.w	r2, [r3, #186]	; 0xba
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d001      	beq.n	8009c5c <style_snapshot_compare+0xaa>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e0a6      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f9b3 20bc 	ldrsh.w	r2, [r3, #188]	; 0xbc
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d001      	beq.n	8009c70 <style_snapshot_compare+0xbe>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e09c      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f9b3 20be 	ldrsh.w	r2, [r3, #190]	; 0xbe
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d001      	beq.n	8009c84 <style_snapshot_compare+0xd2>
 8009c80:	2302      	movs	r3, #2
 8009c82:	e092      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f9b3 20c0 	ldrsh.w	r2, [r3, #192]	; 0xc0
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d001      	beq.n	8009c98 <style_snapshot_compare+0xe6>
 8009c94:	2302      	movs	r3, #2
 8009c96:	e088      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f9b3 20ba 	ldrsh.w	r2, [r3, #186]	; 0xba
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d001      	beq.n	8009cac <style_snapshot_compare+0xfa>
 8009ca8:	2302      	movs	r3, #2
 8009caa:	e07e      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f9b3 20c4 	ldrsh.w	r2, [r3, #196]	; 0xc4
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d001      	beq.n	8009cc0 <style_snapshot_compare+0x10e>
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e074      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f9b3 20c6 	ldrsh.w	r2, [r3, #198]	; 0xc6
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d001      	beq.n	8009cd4 <style_snapshot_compare+0x122>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	e06a      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f9b3 20c8 	ldrsh.w	r2, [r3, #200]	; 0xc8
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d001      	beq.n	8009ce8 <style_snapshot_compare+0x136>
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e060      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	; 0xca
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d001      	beq.n	8009cfc <style_snapshot_compare+0x14a>
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	e056      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d001      	beq.n	8009d10 <style_snapshot_compare+0x15e>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	e04c      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d001      	beq.n	8009d24 <style_snapshot_compare+0x172>
 8009d20:	2302      	movs	r3, #2
 8009d22:	e042      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d001      	beq.n	8009d34 <style_snapshot_compare+0x182>
 8009d30:	2302      	movs	r3, #2
 8009d32:	e03a      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d001      	beq.n	8009d48 <style_snapshot_compare+0x196>
 8009d44:	2302      	movs	r3, #2
 8009d46:	e030      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d001      	beq.n	8009d58 <style_snapshot_compare+0x1a6>
 8009d54:	2302      	movs	r3, #2
 8009d56:	e028      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d001      	beq.n	8009d6c <style_snapshot_compare+0x1ba>
 8009d68:	2302      	movs	r3, #2
 8009d6a:	e01e      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d001      	beq.n	8009d80 <style_snapshot_compare+0x1ce>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e014      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d001      	beq.n	8009d94 <style_snapshot_compare+0x1e2>
 8009d90:	2302      	movs	r3, #2
 8009d92:	e00a      	b.n	8009daa <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d001      	beq.n	8009da8 <style_snapshot_compare+0x1f6>
 8009da4:	2302      	movs	r3, #2
 8009da6:	e000      	b.n	8009daa <style_snapshot_compare+0x1f8>

    /*If not returned earlier its just a visual difference, a simple redraw is enough*/
    return STYLE_COMPARE_VISUAL_DIFF;
 8009da8:	2301      	movs	r3, #1
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <_lv_memcpy_small>:
{
 8009db2:	b480      	push	{r7}
 8009db4:	b087      	sub	sp, #28
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	613b      	str	r3, [r7, #16]
    while(len) {
 8009dc6:	e00c      	b.n	8009de2 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	781a      	ldrb	r2, [r3, #0]
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	701a      	strb	r2, [r3, #0]
        d8++;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	617b      	str	r3, [r7, #20]
        s8++;
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	613b      	str	r3, [r7, #16]
        len--;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	607b      	str	r3, [r7, #4]
    while(len) {
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1ef      	bne.n	8009dc8 <_lv_memcpy_small+0x16>
    return dst;
 8009de8:	68fb      	ldr	r3, [r7, #12]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <lv_area_copy>:
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8009e00:	2208      	movs	r2, #8
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7ff ffd4 	bl	8009db2 <_lv_memcpy_small>
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <lv_area_get_width>:
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	3301      	adds	r3, #1
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	b21b      	sxth	r3, r3
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <lv_area_get_height>:
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	b21b      	sxth	r3, r3
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <lv_obj_get_style_opa_scale>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	f248 020c 	movw	r2, #32780	; 0x800c
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7fc feab 	bl	8006bde <_lv_obj_get_style_opa>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
 8009e92:	b480      	push	{r7}
 8009e94:	af00      	add	r7, sp, #0
    /*Nothing to do*/
}
 8009e96:	bf00      	nop
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b088      	sub	sp, #32
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d102      	bne.n	8009eb6 <_lv_inv_area+0x16>
 8009eb0:	f010 f8d2 	bl	801a058 <lv_disp_get_default>
 8009eb4:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 80a2 	beq.w	800a002 <_lv_inv_area+0x162>

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d107      	bne.n	8009ed4 <_lv_inv_area+0x34>
        disp->inv_p = 0;
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 8009eca:	f36f 0309 	bfc	r3, #0, #10
 8009ece:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
        return;
 8009ed2:	e099      	b.n	800a008 <_lv_inv_area+0x168>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f010 f8c7 	bl	801a070 <lv_disp_get_hor_res>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	b21b      	sxth	r3, r3
 8009eec:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f010 f8e0 	bl	801a0b4 <lv_disp_get_ver_res>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	b21b      	sxth	r3, r3
 8009efe:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8009f00:	f107 0214 	add.w	r2, r7, #20
 8009f04:	f107 030c 	add.w	r3, r7, #12
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f010 fe48 	bl	801aba0 <_lv_area_intersect>
 8009f10:	4603      	mov	r3, r0
 8009f12:	777b      	strb	r3, [r7, #29]

    /*The area is truncated to the screen*/
    if(suc != false) {
 8009f14:	7f7b      	ldrb	r3, [r7, #29]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d076      	beq.n	800a008 <_lv_inv_area+0x168>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d006      	beq.n	8009f30 <_lv_inv_area+0x90>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	f107 010c 	add.w	r1, r7, #12
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	4798      	blx	r3

        /*Save only if this area is not in one of the saved areas*/
        uint16_t i;
        for(i = 0; i < disp->inv_p; i++) {
 8009f30:	2300      	movs	r3, #0
 8009f32:	83fb      	strh	r3, [r7, #30]
 8009f34:	e011      	b.n	8009f5a <_lv_inv_area+0xba>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 8009f36:	8bfb      	ldrh	r3, [r7, #30]
 8009f38:	330c      	adds	r3, #12
 8009f3a:	00db      	lsls	r3, r3, #3
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	4413      	add	r3, r2
 8009f40:	1d99      	adds	r1, r3, #6
 8009f42:	f107 030c 	add.w	r3, r7, #12
 8009f46:	2200      	movs	r2, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f011 f80d 	bl	801af68 <_lv_area_is_in>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d158      	bne.n	800a006 <_lv_inv_area+0x166>
        for(i = 0; i < disp->inv_p; i++) {
 8009f54:	8bfb      	ldrh	r3, [r7, #30]
 8009f56:	3301      	adds	r3, #1
 8009f58:	83fb      	strh	r3, [r7, #30]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 8009f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	461a      	mov	r2, r3
 8009f68:	8bfb      	ldrh	r3, [r7, #30]
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d3e3      	bcc.n	8009f36 <_lv_inv_area+0x96>
        }

        /*Save the area*/
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 8009f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b1f      	cmp	r3, #31
 8009f7c:	d811      	bhi.n	8009fa2 <_lv_inv_area+0x102>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 8009f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	330c      	adds	r3, #12
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	4413      	add	r3, r2
 8009f92:	3306      	adds	r3, #6
 8009f94:	f107 020c 	add.w	r2, r7, #12
 8009f98:	4611      	mov	r1, r2
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7ff ff2b 	bl	8009df6 <lv_area_copy>
 8009fa0:	e017      	b.n	8009fd2 <_lv_inv_area+0x132>
        }
        else {   /*If no place for the area add the screen*/
            disp->inv_p = 0;
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 8009fa8:	f36f 0309 	bfc	r3, #0, #10
 8009fac:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 8009fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	330c      	adds	r3, #12
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	3306      	adds	r3, #6
 8009fc6:	f107 0214 	add.w	r2, r7, #20
 8009fca:	4611      	mov	r1, r2
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff ff12 	bl	8009df6 <lv_area_copy>
        }
        disp->inv_p++;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 8009fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	3301      	adds	r3, #1
 8009fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fe4:	b299      	uxth	r1, r3
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 8009fec:	f361 0309 	bfi	r3, r1, #0, #10
 8009ff0:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff8:	2103      	movs	r1, #3
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f013 fad2 	bl	801d5a4 <lv_task_set_prio>
 800a000:	e002      	b.n	800a008 <_lv_inv_area+0x168>
    if(!disp) return;
 800a002:	bf00      	nop
 800a004:	e000      	b.n	800a008 <_lv_inv_area+0x168>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800a006:	bf00      	nop
    }
}
 800a008:	3720      	adds	r7, #32
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
	...

0800a010 <_lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * _lv_refr_get_disp_refreshing(void)
{
 800a010:	b480      	push	{r7}
 800a012:	af00      	add	r7, sp, #0
    return disp_refr;
 800a014:	4b03      	ldr	r3, [pc, #12]	; (800a024 <_lv_refr_get_disp_refreshing+0x14>)
 800a016:	681b      	ldr	r3, [r3, #0]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	200177b0 	.word	0x200177b0

0800a028 <_lv_disp_refr_task>:
/**
 * Called periodically to handle the refreshing
 * @param task pointer to the task itself
 */
void _lv_disp_refr_task(lv_task_t * task)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08e      	sub	sp, #56	; 0x38
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("lv_refr_task: started");

    uint32_t start = lv_tick_get();
 800a030:	f010 fa50 	bl	801a4d4 <lv_tick_get>
 800a034:	62b8      	str	r0, [r7, #40]	; 0x28
    uint32_t elaps = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	627b      	str	r3, [r7, #36]	; 0x24

    disp_refr = task->user_data;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	4a82      	ldr	r2, [pc, #520]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a040:	6013      	str	r3, [r2, #0]

#if LV_USE_PERF_MONITOR == 0
    /* Ensure the task does not run again automatically.
     * This is done before refreshing in case refreshing invalidates something else.
     */
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 800a042:	2100      	movs	r1, #0
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f013 faad 	bl	801d5a4 <lv_task_set_prio>
#endif

    /*Do nothing if there is no active screen*/
    if(disp_refr->act_scr == NULL) {
 800a04a:	4b7f      	ldr	r3, [pc, #508]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a050:	2b00      	cmp	r3, #0
 800a052:	d108      	bne.n	800a066 <_lv_disp_refr_task+0x3e>
        disp_refr->inv_p = 0;
 800a054:	4b7c      	ldr	r3, [pc, #496]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a05c:	f36f 0309 	bfc	r3, #0, #10
 800a060:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
        return;
 800a064:	e0ed      	b.n	800a242 <_lv_disp_refr_task+0x21a>
    }

    lv_refr_join_area();
 800a066:	f000 f8f3 	bl	800a250 <lv_refr_join_area>

    lv_refr_areas();
 800a06a:	f000 f995 	bl	800a398 <lv_refr_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 800a06e:	4b76      	ldr	r3, [pc, #472]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 80dc 	beq.w	800a23a <_lv_disp_refr_task+0x212>
        /* In true double buffered mode copy the refreshed areas to the new VDB to keep it up to date.
         * With set_px_cb we don't know anything about the buffer (even it's size) so skip copying.*/
        if(lv_disp_is_true_double_buf(disp_refr)) {
 800a082:	4b71      	ldr	r3, [pc, #452]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f010 f917 	bl	801a2ba <lv_disp_is_true_double_buf>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f000 80a8 	beq.w	800a1e4 <_lv_disp_refr_task+0x1bc>
            if(disp_refr->driver.set_px_cb) {
 800a094:	4b6c      	ldr	r3, [pc, #432]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f040 80a2 	bne.w	800a1e4 <_lv_disp_refr_task+0x1bc>
                LV_LOG_WARN("Can't handle 2 screen sized buffers with set_px_cb. Display is not refreshed.");
            }
            else {
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a0a0:	4b69      	ldr	r3, [pc, #420]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f010 f8a3 	bl	801a1f0 <lv_disp_get_buf>
 800a0aa:	6238      	str	r0, [r7, #32]

                /*Flush the content of the VDB*/
                lv_refr_vdb_flush();
 800a0ac:	f000 fd9e 	bl	800abec <lv_refr_vdb_flush>

                /* With true double buffering the flushing should be only the address change of the
                 * current frame buffer. Wait until the address change is ready and copy the changed
                 * content to the other frame buffer (new active VDB) to keep the buffers synchronized*/
                while(vdb->flushing);
 800a0b0:	bf00      	nop
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1fb      	bne.n	800a0b2 <_lv_disp_refr_task+0x8a>

                lv_color_t * copy_buf = NULL;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61fb      	str	r3, [r7, #28]
#if LV_USE_GPU_STM32_DMA2D
                LV_UNUSED(copy_buf);
#else
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 800a0be:	4b62      	ldr	r3, [pc, #392]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f012 fab1 	bl	801c630 <_lv_mem_buf_get>
 800a0ce:	61f8      	str	r0, [r7, #28]
#endif

                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	61bb      	str	r3, [r7, #24]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d102      	bne.n	800a0e8 <_lv_disp_refr_task+0xc0>
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	e001      	b.n	800a0ec <_lv_disp_refr_task+0xc4>
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	617b      	str	r3, [r7, #20]

                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800a0ee:	4b56      	ldr	r3, [pc, #344]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f00f ffbc 	bl	801a070 <lv_disp_get_hor_res>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	827b      	strh	r3, [r7, #18]
                uint16_t a;
                for(a = 0; a < disp_refr->inv_p; a++) {
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a100:	e05f      	b.n	800a1c2 <_lv_disp_refr_task+0x19a>
                    if(disp_refr->inv_area_joined[a] == 0) {
 800a102:	4b51      	ldr	r3, [pc, #324]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a108:	4413      	add	r3, r2
 800a10a:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d154      	bne.n	800a1bc <_lv_disp_refr_task+0x194>
                        uint32_t start_offs =
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800a112:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a116:	4b4c      	ldr	r3, [pc, #304]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a118:	6819      	ldr	r1, [r3, #0]
 800a11a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a11c:	330c      	adds	r3, #12
 800a11e:	00db      	lsls	r3, r3, #3
 800a120:	440b      	add	r3, r1
 800a122:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a126:	fb03 f202 	mul.w	r2, r3, r2
 800a12a:	4b47      	ldr	r3, [pc, #284]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a12c:	6819      	ldr	r1, [r3, #0]
 800a12e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a130:	330c      	adds	r3, #12
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	440b      	add	r3, r1
 800a136:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a13a:	4413      	add	r3, r2
                        uint32_t start_offs =
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	633b      	str	r3, [r7, #48]	; 0x30
                                                lv_area_get_width(&disp_refr->inv_areas[a]),
                                                lv_area_get_height(&disp_refr->inv_areas[a]));
#else

                        lv_coord_t y;
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800a140:	4b41      	ldr	r3, [pc, #260]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a146:	330c      	adds	r3, #12
 800a148:	00db      	lsls	r3, r3, #3
 800a14a:	4413      	add	r3, r2
 800a14c:	3306      	adds	r3, #6
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff fe5f 	bl	8009e12 <lv_area_get_width>
 800a154:	4603      	mov	r3, r0
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	60fb      	str	r3, [r7, #12]

                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800a15a:	4b3b      	ldr	r3, [pc, #236]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a160:	330c      	adds	r3, #12
 800a162:	00db      	lsls	r3, r3, #3
 800a164:	4413      	add	r3, r2
 800a166:	891b      	ldrh	r3, [r3, #8]
 800a168:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a16a:	e01b      	b.n	800a1a4 <_lv_disp_refr_task+0x17c>
                            /* The frame buffer is probably in an external RAM where sequential access is much faster.
                             * So first copy a line into a buffer and write it back the ext. RAM */
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	4413      	add	r3, r2
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	4619      	mov	r1, r3
 800a176:	69f8      	ldr	r0, [r7, #28]
 800a178:	f012 fbbe 	bl	801c8f8 <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	4413      	add	r3, r2
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	69f9      	ldr	r1, [r7, #28]
 800a186:	4618      	mov	r0, r3
 800a188:	f012 fbb6 	bl	801c8f8 <_lv_memcpy>
                            start_offs += hres * sizeof(lv_color_t);
 800a18c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a194:	4413      	add	r3, r2
 800a196:	633b      	str	r3, [r7, #48]	; 0x30
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800a198:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	3301      	adds	r3, #1
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a1a4:	4b28      	ldr	r3, [pc, #160]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1aa:	330c      	adds	r3, #12
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a1b4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	ddd7      	ble.n	800a16c <_lv_disp_refr_task+0x144>
                for(a = 0; a < disp_refr->inv_p; a++) {
 800a1bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1be:	3301      	adds	r3, #1
 800a1c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a1c2:	4b21      	ldr	r3, [pc, #132]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a1ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d394      	bcc.n	800a102 <_lv_disp_refr_task+0xda>
                        }
#endif
                    }
                }

                if(copy_buf) _lv_mem_buf_release(copy_buf);
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <_lv_disp_refr_task+0x1bc>
 800a1de:	69f8      	ldr	r0, [r7, #28]
 800a1e0:	f012 fb04 	bl	801c7ec <_lv_mem_buf_release>
            }
        } /*End of true double buffer handling*/

        /*Clean up*/
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800a1e4:	4b18      	ldr	r3, [pc, #96]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3366      	adds	r3, #102	; 0x66
 800a1ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f012 fe27 	bl	801ce42 <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800a1f4:	4b14      	ldr	r3, [pc, #80]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a1fc:	2120      	movs	r1, #32
 800a1fe:	4618      	mov	r0, r3
 800a200:	f012 fe1f 	bl	801ce42 <_lv_memset_00>
        disp_refr->inv_p = 0;
 800a204:	4b10      	ldr	r3, [pc, #64]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a20c:	f36f 0309 	bfc	r3, #0, #10
 800a210:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186

        elaps = lv_tick_elaps(start);
 800a214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a216:	f010 f977 	bl	801a508 <lv_tick_elaps>
 800a21a:	6278      	str	r0, [r7, #36]	; 0x24
        /*Call monitor cb if present*/
        if(disp_refr->driver.monitor_cb) {
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d009      	beq.n	800a23a <_lv_disp_refr_task+0x212>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
 800a226:	4b08      	ldr	r3, [pc, #32]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	4a06      	ldr	r2, [pc, #24]	; (800a248 <_lv_disp_refr_task+0x220>)
 800a22e:	6812      	ldr	r2, [r2, #0]
 800a230:	4610      	mov	r0, r2
 800a232:	4a06      	ldr	r2, [pc, #24]	; (800a24c <_lv_disp_refr_task+0x224>)
 800a234:	6812      	ldr	r2, [r2, #0]
 800a236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a238:	4798      	blx	r3
        }
    }

    _lv_mem_buf_free_all();
 800a23a:	f012 fb17 	bl	801c86c <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800a23e:	f00f f8a9 	bl	8019394 <_lv_font_clean_up_fmt_txt>
        lv_obj_align(perf_label, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, 0, 0);
    }
#endif

    LV_LOG_TRACE("lv_refr_task: ready");
}
 800a242:	3738      	adds	r7, #56	; 0x38
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	200177b0 	.word	0x200177b0
 800a24c:	200177ac 	.word	0x200177ac

0800a250 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 800a250:	b5b0      	push	{r4, r5, r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800a256:	2300      	movs	r3, #0
 800a258:	60bb      	str	r3, [r7, #8]
 800a25a:	e08a      	b.n	800a372 <lv_refr_join_area+0x122>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800a25c:	4b4d      	ldr	r3, [pc, #308]	; (800a394 <lv_refr_join_area+0x144>)
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	4413      	add	r3, r2
 800a264:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d17d      	bne.n	800a36a <lv_refr_join_area+0x11a>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
 800a272:	e06e      	b.n	800a352 <lv_refr_join_area+0x102>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800a274:	4b47      	ldr	r3, [pc, #284]	; (800a394 <lv_refr_join_area+0x144>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d15f      	bne.n	800a346 <lv_refr_join_area+0xf6>
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d05b      	beq.n	800a346 <lv_refr_join_area+0xf6>
                continue;
            }

            /*Check if the areas are on each other*/
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800a28e:	4b41      	ldr	r3, [pc, #260]	; (800a394 <lv_refr_join_area+0x144>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	330c      	adds	r3, #12
 800a296:	00db      	lsls	r3, r3, #3
 800a298:	4413      	add	r3, r2
 800a29a:	1d98      	adds	r0, r3, #6
 800a29c:	4b3d      	ldr	r3, [pc, #244]	; (800a394 <lv_refr_join_area+0x144>)
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	330c      	adds	r3, #12
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	3306      	adds	r3, #6
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	f010 fe2e 	bl	801af0c <_lv_area_is_on>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f083 0301 	eor.w	r3, r3, #1
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d146      	bne.n	800a34a <lv_refr_join_area+0xfa>
                continue;
            }

            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800a2bc:	4b35      	ldr	r3, [pc, #212]	; (800a394 <lv_refr_join_area+0x144>)
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	330c      	adds	r3, #12
 800a2c4:	00db      	lsls	r3, r3, #3
 800a2c6:	4413      	add	r3, r2
 800a2c8:	1d99      	adds	r1, r3, #6
 800a2ca:	4b32      	ldr	r3, [pc, #200]	; (800a394 <lv_refr_join_area+0x144>)
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	330c      	adds	r3, #12
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	4413      	add	r3, r2
 800a2d6:	1d9a      	adds	r2, r3, #6
 800a2d8:	463b      	mov	r3, r7
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f010 fcb1 	bl	801ac42 <_lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800a2e0:	463b      	mov	r3, r7
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f010 fc3b 	bl	801ab5e <lv_area_get_size>
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	4b2a      	ldr	r3, [pc, #168]	; (800a394 <lv_refr_join_area+0x144>)
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	4413      	add	r3, r2
 800a2f6:	3306      	adds	r3, #6
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f010 fc30 	bl	801ab5e <lv_area_get_size>
 800a2fe:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800a300:	4b24      	ldr	r3, [pc, #144]	; (800a394 <lv_refr_join_area+0x144>)
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	330c      	adds	r3, #12
 800a308:	00db      	lsls	r3, r3, #3
 800a30a:	4413      	add	r3, r2
 800a30c:	3306      	adds	r3, #6
 800a30e:	4618      	mov	r0, r3
 800a310:	f010 fc25 	bl	801ab5e <lv_area_get_size>
 800a314:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800a316:	442b      	add	r3, r5
 800a318:	429c      	cmp	r4, r3
 800a31a:	d217      	bcs.n	800a34c <lv_refr_join_area+0xfc>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800a31c:	4b1d      	ldr	r3, [pc, #116]	; (800a394 <lv_refr_join_area+0x144>)
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	330c      	adds	r3, #12
 800a324:	00db      	lsls	r3, r3, #3
 800a326:	4413      	add	r3, r2
 800a328:	3306      	adds	r3, #6
 800a32a:	463a      	mov	r2, r7
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff fd61 	bl	8009df6 <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 800a334:	4b17      	ldr	r3, [pc, #92]	; (800a394 <lv_refr_join_area+0x144>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a340:	2201      	movs	r2, #1
 800a342:	701a      	strb	r2, [r3, #0]
 800a344:	e002      	b.n	800a34c <lv_refr_join_area+0xfc>
                continue;
 800a346:	bf00      	nop
 800a348:	e000      	b.n	800a34c <lv_refr_join_area+0xfc>
                continue;
 800a34a:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3301      	adds	r3, #1
 800a350:	60fb      	str	r3, [r7, #12]
 800a352:	4b10      	ldr	r3, [pc, #64]	; (800a394 <lv_refr_join_area+0x144>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a35a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a35e:	b29b      	uxth	r3, r3
 800a360:	461a      	mov	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	4293      	cmp	r3, r2
 800a366:	d385      	bcc.n	800a274 <lv_refr_join_area+0x24>
 800a368:	e000      	b.n	800a36c <lv_refr_join_area+0x11c>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800a36a:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	3301      	adds	r3, #1
 800a370:	60bb      	str	r3, [r7, #8]
 800a372:	4b08      	ldr	r3, [pc, #32]	; (800a394 <lv_refr_join_area+0x144>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a37a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a37e:	b29b      	uxth	r3, r3
 800a380:	461a      	mov	r2, r3
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	4293      	cmp	r3, r2
 800a386:	f4ff af69 	bcc.w	800a25c <lv_refr_join_area+0xc>
            }
        }
    }
}
 800a38a:	bf00      	nop
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bdb0      	pop	{r4, r5, r7, pc}
 800a392:	bf00      	nop
 800a394:	200177b0 	.word	0x200177b0

0800a398 <lv_refr_areas>:

/**
 * Refresh the joined areas
 */
static void lv_refr_areas(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
    px_num = 0;
 800a39e:	4b45      	ldr	r3, [pc, #276]	; (800a4b4 <lv_refr_areas+0x11c>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	601a      	str	r2, [r3, #0]

    if(disp_refr->inv_p == 0) return;
 800a3a4:	4b44      	ldr	r3, [pc, #272]	; (800a4b8 <lv_refr_areas+0x120>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a3ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d07a      	beq.n	800a4ac <lv_refr_areas+0x114>

    /*Find the last area which will be drawn*/
    int32_t i;
    int32_t last_i = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	603b      	str	r3, [r7, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800a3ba:	4b3f      	ldr	r3, [pc, #252]	; (800a4b8 <lv_refr_areas+0x120>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a3c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	607b      	str	r3, [r7, #4]
 800a3cc:	e00e      	b.n	800a3ec <lv_refr_areas+0x54>
        if(disp_refr->inv_area_joined[i] == 0) {
 800a3ce:	4b3a      	ldr	r3, [pc, #232]	; (800a4b8 <lv_refr_areas+0x120>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d102      	bne.n	800a3e6 <lv_refr_areas+0x4e>
            last_i = i;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	603b      	str	r3, [r7, #0]
            break;
 800a3e4:	e005      	b.n	800a3f2 <lv_refr_areas+0x5a>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	607b      	str	r3, [r7, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	daed      	bge.n	800a3ce <lv_refr_areas+0x36>
        }
    }

    disp_refr->driver.buffer->last_area = 0;
 800a3f2:	4b31      	ldr	r3, [pc, #196]	; (800a4b8 <lv_refr_areas+0x120>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a3fc:	f36f 0300 	bfc	r3, #0, #1
 800a400:	f882 3020 	strb.w	r3, [r2, #32]
    disp_refr->driver.buffer->last_part = 0;
 800a404:	4b2c      	ldr	r3, [pc, #176]	; (800a4b8 <lv_refr_areas+0x120>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a40e:	f36f 0341 	bfc	r3, #1, #1
 800a412:	f882 3020 	strb.w	r3, [r2, #32]

    for(i = 0; i < disp_refr->inv_p; i++) {
 800a416:	2300      	movs	r3, #0
 800a418:	607b      	str	r3, [r7, #4]
 800a41a:	e03b      	b.n	800a494 <lv_refr_areas+0xfc>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 800a41c:	4b26      	ldr	r3, [pc, #152]	; (800a4b8 <lv_refr_areas+0x120>)
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4413      	add	r3, r2
 800a424:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d12f      	bne.n	800a48e <lv_refr_areas+0xf6>

            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d108      	bne.n	800a448 <lv_refr_areas+0xb0>
 800a436:	4b20      	ldr	r3, [pc, #128]	; (800a4b8 <lv_refr_areas+0x120>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a440:	f043 0301 	orr.w	r3, r3, #1
 800a444:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
 800a448:	4b1b      	ldr	r3, [pc, #108]	; (800a4b8 <lv_refr_areas+0x120>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a452:	f36f 0341 	bfc	r3, #1, #1
 800a456:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800a45a:	4b17      	ldr	r3, [pc, #92]	; (800a4b8 <lv_refr_areas+0x120>)
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	330c      	adds	r3, #12
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	4413      	add	r3, r2
 800a466:	3306      	adds	r3, #6
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 f827 	bl	800a4bc <lv_refr_area>

            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800a46e:	4b12      	ldr	r3, [pc, #72]	; (800a4b8 <lv_refr_areas+0x120>)
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	330c      	adds	r3, #12
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	4413      	add	r3, r2
 800a47a:	3306      	adds	r3, #6
 800a47c:	4618      	mov	r0, r3
 800a47e:	f010 fb6e 	bl	801ab5e <lv_area_get_size>
 800a482:	4602      	mov	r2, r0
 800a484:	4b0b      	ldr	r3, [pc, #44]	; (800a4b4 <lv_refr_areas+0x11c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4413      	add	r3, r2
 800a48a:	4a0a      	ldr	r2, [pc, #40]	; (800a4b4 <lv_refr_areas+0x11c>)
 800a48c:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	3301      	adds	r3, #1
 800a492:	607b      	str	r3, [r7, #4]
 800a494:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <lv_refr_areas+0x120>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a49c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	dbb8      	blt.n	800a41c <lv_refr_areas+0x84>
 800a4aa:	e000      	b.n	800a4ae <lv_refr_areas+0x116>
    if(disp_refr->inv_p == 0) return;
 800a4ac:	bf00      	nop
        }
    }
}
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	200177ac 	.word	0x200177ac
 800a4b8:	200177b0 	.word	0x200177b0

0800a4bc <lv_refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area(const lv_area_t * area_p)
{
 800a4bc:	b590      	push	{r4, r7, lr}
 800a4be:	b08d      	sub	sp, #52	; 0x34
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
    /*True double buffering: there are two screen sized buffers. Just redraw directly into a
     * buffer*/
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800a4c4:	4b8e      	ldr	r3, [pc, #568]	; (800a700 <lv_refr_area+0x244>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f00f fef6 	bl	801a2ba <lv_disp_is_true_double_buf>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d030      	beq.n	800a536 <lv_refr_area+0x7a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a4d4:	4b8a      	ldr	r3, [pc, #552]	; (800a700 <lv_refr_area+0x244>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f00f fe89 	bl	801a1f0 <lv_disp_get_buf>
 800a4de:	6178      	str	r0, [r7, #20]
        vdb->area.x1        = 0;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	821a      	strh	r2, [r3, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800a4e6:	4b86      	ldr	r3, [pc, #536]	; (800a700 <lv_refr_area+0x244>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f00f fdc0 	bl	801a070 <lv_disp_get_hor_res>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	b21a      	sxth	r2, r3
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	829a      	strh	r2, [r3, #20]
        vdb->area.y1        = 0;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	2200      	movs	r2, #0
 800a502:	825a      	strh	r2, [r3, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800a504:	4b7e      	ldr	r3, [pc, #504]	; (800a700 <lv_refr_area+0x244>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4618      	mov	r0, r3
 800a50a:	f00f fdd3 	bl	801a0b4 <lv_disp_get_ver_res>
 800a50e:	4603      	mov	r3, r0
 800a510:	b29b      	uxth	r3, r3
 800a512:	3b01      	subs	r3, #1
 800a514:	b29b      	uxth	r3, r3
 800a516:	b21a      	sxth	r2, r3
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	82da      	strh	r2, [r3, #22]
        disp_refr->driver.buffer->last_part = 1;
 800a51c:	4b78      	ldr	r3, [pc, #480]	; (800a700 <lv_refr_area+0x244>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a526:	f043 0302 	orr.w	r3, r3, #2
 800a52a:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f8e8 	bl	800a704 <lv_refr_area_part>
 800a534:	e0e1      	b.n	800a6fa <lv_refr_area+0x23e>
    }
    /*The buffer is smaller: refresh the area in parts*/
    else {
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a536:	4b72      	ldr	r3, [pc, #456]	; (800a700 <lv_refr_area+0x244>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f00f fe58 	bl	801a1f0 <lv_disp_get_buf>
 800a540:	6238      	str	r0, [r7, #32]
        /*Calculate the max row num*/
        lv_coord_t w = lv_area_get_width(area_p);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff fc65 	bl	8009e12 <lv_area_get_width>
 800a548:	4603      	mov	r3, r0
 800a54a:	83fb      	strh	r3, [r7, #30]
        lv_coord_t h = lv_area_get_height(area_p);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f7ff fc77 	bl	8009e40 <lv_area_get_height>
 800a552:	4603      	mov	r3, r0
 800a554:	83bb      	strh	r3, [r7, #28]
        lv_coord_t y2 =
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800a55c:	4b68      	ldr	r3, [pc, #416]	; (800a700 <lv_refr_area+0x244>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4618      	mov	r0, r3
 800a562:	f00f fda7 	bl	801a0b4 <lv_disp_get_ver_res>
 800a566:	4603      	mov	r3, r0
        lv_coord_t y2 =
 800a568:	429c      	cmp	r4, r3
 800a56a:	db0a      	blt.n	800a582 <lv_refr_area+0xc6>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800a56c:	4b64      	ldr	r3, [pc, #400]	; (800a700 <lv_refr_area+0x244>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4618      	mov	r0, r3
 800a572:	f00f fd9f 	bl	801a0b4 <lv_disp_get_ver_res>
 800a576:	4603      	mov	r3, r0
 800a578:	b29b      	uxth	r3, r3
 800a57a:	3b01      	subs	r3, #1
 800a57c:	b29b      	uxth	r3, r3
        lv_coord_t y2 =
 800a57e:	b21b      	sxth	r3, r3
 800a580:	e002      	b.n	800a588 <lv_refr_area+0xcc>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a588:	837b      	strh	r3, [r7, #26]

        int32_t max_row = (uint32_t)vdb->size / w;
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	68da      	ldr	r2, [r3, #12]
 800a58e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a592:	fbb2 f3f3 	udiv	r3, r2, r3
 800a596:	62fb      	str	r3, [r7, #44]	; 0x2c

        if(max_row > h) max_row = h;
 800a598:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a59c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	dd02      	ble.n	800a5a8 <lv_refr_area+0xec>
 800a5a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a5a6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*Round down the lines of VDB if rounding is added*/
        if(disp_refr->driver.rounder_cb) {
 800a5a8:	4b55      	ldr	r3, [pc, #340]	; (800a700 <lv_refr_area+0x244>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d034      	beq.n	800a61c <lv_refr_area+0x160>
            lv_area_t tmp;
            tmp.x1 = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	81bb      	strh	r3, [r7, #12]
            tmp.x2 = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	823b      	strh	r3, [r7, #16]
            tmp.y1 = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	81fb      	strh	r3, [r7, #14]

            lv_coord_t h_tmp = max_row;
 800a5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c0:	857b      	strh	r3, [r7, #42]	; 0x2a
            do {
                tmp.y2 = h_tmp - 1;
 800a5c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	b21b      	sxth	r3, r3
 800a5ca:	827b      	strh	r3, [r7, #18]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800a5cc:	4b4c      	ldr	r3, [pc, #304]	; (800a700 <lv_refr_area+0x244>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	4a4b      	ldr	r2, [pc, #300]	; (800a700 <lv_refr_area+0x244>)
 800a5d4:	6812      	ldr	r2, [r2, #0]
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	f107 020c 	add.w	r2, r7, #12
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4798      	blx	r3

                /*If this height fits into `max_row` then fine*/
                if(lv_area_get_height(&tmp) <= max_row) break;
 800a5e0:	f107 030c 	add.w	r3, r7, #12
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7ff fc2b 	bl	8009e40 <lv_area_get_height>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	da0a      	bge.n	800a60a <lv_refr_area+0x14e>

                /*Decrement the height of the area until it fits into `max_row` after rounding*/
                h_tmp--;
 800a5f4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	857b      	strh	r3, [r7, #42]	; 0x2a
            } while(h_tmp > 0);
 800a600:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a604:	2b00      	cmp	r3, #0
 800a606:	dcdc      	bgt.n	800a5c2 <lv_refr_area+0x106>
 800a608:	e000      	b.n	800a60c <lv_refr_area+0x150>
                if(lv_area_get_height(&tmp) <= max_row) break;
 800a60a:	bf00      	nop

            if(h_tmp <= 0) {
 800a60c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a610:	2b00      	cmp	r3, #0
 800a612:	dd71      	ble.n	800a6f8 <lv_refr_area+0x23c>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
                            "small VDB)");
                return;
            }
            else {
                max_row = tmp.y2 + 1;
 800a614:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a618:	3301      	adds	r3, #1
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        /*Always use the full row*/
        lv_coord_t row;
        lv_coord_t row_last = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	885b      	ldrh	r3, [r3, #2]
 800a624:	853b      	strh	r3, [r7, #40]	; 0x28
 800a626:	e03b      	b.n	800a6a0 <lv_refr_area+0x1e4>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800a638:	6a3b      	ldr	r3, [r7, #32]
 800a63a:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a640:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = row + max_row - 1;
 800a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a644:	b29a      	uxth	r2, r3
 800a646:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a648:	4413      	add	r3, r2
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	3b01      	subs	r3, #1
 800a64e:	b29b      	uxth	r3, r3
 800a650:	b21a      	sxth	r2, r3
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	82da      	strh	r2, [r3, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a65c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a660:	429a      	cmp	r2, r3
 800a662:	da02      	bge.n	800a66a <lv_refr_area+0x1ae>
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	8b7a      	ldrh	r2, [r7, #26]
 800a668:	82da      	strh	r2, [r3, #22]
            row_last = vdb->area.y2;
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	8adb      	ldrh	r3, [r3, #22]
 800a66e:	84fb      	strh	r3, [r7, #38]	; 0x26
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 800a670:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a674:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a678:	429a      	cmp	r2, r3
 800a67a:	d108      	bne.n	800a68e <lv_refr_area+0x1d2>
 800a67c:	4b20      	ldr	r3, [pc, #128]	; (800a700 <lv_refr_area+0x244>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a686:	f043 0302 	orr.w	r3, r3, #2
 800a68a:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f838 	bl	800a704 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	b29a      	uxth	r2, r3
 800a698:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a69a:	4413      	add	r3, r2
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	853b      	strh	r3, [r7, #40]	; 0x28
 800a6a0:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800a6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a6:	4413      	add	r3, r2
 800a6a8:	1e5a      	subs	r2, r3, #1
 800a6aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	ddba      	ble.n	800a628 <lv_refr_area+0x16c>
        }

        /*If the last y coordinates are not handled yet ...*/
        if(y2 != row_last) {
 800a6b2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a6b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d01d      	beq.n	800a6fa <lv_refr_area+0x23e>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a6d6:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = y2;
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	8b7a      	ldrh	r2, [r7, #26]
 800a6dc:	82da      	strh	r2, [r3, #22]

            disp_refr->driver.buffer->last_part = 1;
 800a6de:	4b08      	ldr	r3, [pc, #32]	; (800a700 <lv_refr_area+0x244>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685a      	ldr	r2, [r3, #4]
 800a6e4:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a6e8:	f043 0302 	orr.w	r3, r3, #2
 800a6ec:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f807 	bl	800a704 <lv_refr_area_part>
 800a6f6:	e000      	b.n	800a6fa <lv_refr_area+0x23e>
                return;
 800a6f8:	bf00      	nop
        }
    }
}
 800a6fa:	3734      	adds	r7, #52	; 0x34
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd90      	pop	{r4, r7, pc}
 800a700:	200177b0 	.word	0x200177b0

0800a704 <lv_refr_area_part>:
/**
 * Refresh a part of an area which is on the actual Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area_part(const lv_area_t * area_p)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b0ac      	sub	sp, #176	; 0xb0
 800a708:	af02      	add	r7, sp, #8
 800a70a:	6078      	str	r0, [r7, #4]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a70c:	4b80      	ldr	r3, [pc, #512]	; (800a910 <lv_refr_area_part+0x20c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4618      	mov	r0, r3
 800a712:	f00f fd6d 	bl	801a1f0 <lv_disp_get_buf>
 800a716:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /*In non double buffered mode, before rendering the next part wait until the previous image is
     * flushed*/
    if(lv_disp_is_double_buf(disp_refr) == false) {
 800a71a:	4b7d      	ldr	r3, [pc, #500]	; (800a910 <lv_refr_area_part+0x20c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4618      	mov	r0, r3
 800a720:	f00f fdb4 	bl	801a28c <lv_disp_is_double_buf>
 800a724:	4603      	mov	r3, r0
 800a726:	f083 0301 	eor.w	r3, r3, #1
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d011      	beq.n	800a754 <lv_refr_area_part+0x50>
        while(vdb->flushing) {
 800a730:	e00b      	b.n	800a74a <lv_refr_area_part+0x46>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 800a732:	4b77      	ldr	r3, [pc, #476]	; (800a910 <lv_refr_area_part+0x20c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d006      	beq.n	800a74a <lv_refr_area_part+0x46>
 800a73c:	4b74      	ldr	r3, [pc, #464]	; (800a910 <lv_refr_area_part+0x20c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	4a73      	ldr	r2, [pc, #460]	; (800a910 <lv_refr_area_part+0x20c>)
 800a744:	6812      	ldr	r2, [r2, #0]
 800a746:	4610      	mov	r0, r2
 800a748:	4798      	blx	r3
        while(vdb->flushing) {
 800a74a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1ee      	bne.n	800a732 <lv_refr_area_part+0x2e>
        }
    }

    lv_obj_t * top_act_scr = NULL;
 800a754:	2300      	movs	r3, #0
 800a756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    lv_obj_t * top_prev_scr = NULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /*Get the new mask from the original area and the act. VDB
     It will be a part of 'area_p'*/
    lv_area_t start_mask;
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
 800a760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a764:	f103 0210 	add.w	r2, r3, #16
 800a768:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	4618      	mov	r0, r3
 800a770:	f010 fa16 	bl	801aba0 <_lv_area_intersect>

    /*Get the most top object which is not covered by others*/
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800a774:	4b66      	ldr	r3, [pc, #408]	; (800a910 <lv_refr_area_part+0x20c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4618      	mov	r0, r3
 800a77a:	f7f6 fe7e 	bl	800147a <lv_disp_get_scr_act>
 800a77e:	4602      	mov	r2, r0
 800a780:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f000 f8c4 	bl	800a914 <lv_refr_get_top_obj>
 800a78c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if(disp_refr->prev_scr) {
 800a790:	4b5f      	ldr	r3, [pc, #380]	; (800a910 <lv_refr_area_part+0x20c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00a      	beq.n	800a7b0 <lv_refr_area_part+0xac>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
 800a79a:	4b5d      	ldr	r3, [pc, #372]	; (800a910 <lv_refr_area_part+0x20c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f8b4 	bl	800a914 <lv_refr_get_top_obj>
 800a7ac:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    }

    /*Draw a display background if there is no top object*/
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800a7b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d15d      	bne.n	800a874 <lv_refr_area_part+0x170>
 800a7b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d159      	bne.n	800a874 <lv_refr_area_part+0x170>
        if(disp_refr->bg_img) {
 800a7c0:	4b53      	ldr	r3, [pc, #332]	; (800a910 <lv_refr_area_part+0x20c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d03d      	beq.n	800a846 <lv_refr_area_part+0x142>
            lv_draw_img_dsc_t dsc;
            lv_draw_img_dsc_init(&dsc);
 800a7ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f003 fb69 	bl	800dea6 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 800a7d4:	4b4e      	ldr	r3, [pc, #312]	; (800a910 <lv_refr_area_part+0x20c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a7dc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
            lv_img_header_t header;
            lv_res_t res;
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800a7e0:	4b4b      	ldr	r3, [pc, #300]	; (800a910 <lv_refr_area_part+0x20c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7e6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f00d fc4b 	bl	8018088 <lv_img_decoder_get_info>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            if(res == LV_RES_OK) {
 800a7f8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d139      	bne.n	800a874 <lv_refr_area_part+0x170>
                lv_area_t a;
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 800a800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a802:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800a806:	b29b      	uxth	r3, r3
 800a808:	3b01      	subs	r3, #1
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	b21a      	sxth	r2, r3
 800a80e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a812:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800a816:	b29b      	uxth	r3, r3
 800a818:	3b01      	subs	r3, #1
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	b21b      	sxth	r3, r3
 800a81e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	4613      	mov	r3, r2
 800a826:	2200      	movs	r2, #0
 800a828:	2100      	movs	r1, #0
 800a82a:	f010 f961 	bl	801aaf0 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 800a82e:	4b38      	ldr	r3, [pc, #224]	; (800a910 <lv_refr_area_part+0x20c>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a834:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a838:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800a83c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800a840:	f003 fb56 	bl	800def0 <lv_draw_img>
 800a844:	e016      	b.n	800a874 <lv_refr_area_part+0x170>
                LV_LOG_WARN("Can't draw the background image")
            }
        }
        else {
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	4618      	mov	r0, r3
 800a84c:	f008 fbf8 	bl	8013040 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800a850:	4b2f      	ldr	r3, [pc, #188]	; (800a910 <lv_refr_area_part+0x20c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a856:	60fb      	str	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800a858:	4b2d      	ldr	r3, [pc, #180]	; (800a910 <lv_refr_area_part+0x20c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a860:	76bb      	strb	r3, [r7, #26]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800a862:	f107 0208 	add.w	r2, r7, #8
 800a866:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800a86a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a86e:	4618      	mov	r0, r3
 800a870:	f008 fc6a 	bl	8013148 <lv_draw_rect>

        }
    }
    /*Refresh the previous screen if any*/
    if(disp_refr->prev_scr) {
 800a874:	4b26      	ldr	r3, [pc, #152]	; (800a910 <lv_refr_area_part+0x20c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00f      	beq.n	800a89e <lv_refr_area_part+0x19a>
        /*Get the most top object which is not covered by others*/
        if(top_prev_scr == NULL) {
 800a87e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d104      	bne.n	800a890 <lv_refr_area_part+0x18c>
            top_prev_scr = disp_refr->prev_scr;
 800a886:	4b22      	ldr	r3, [pc, #136]	; (800a910 <lv_refr_area_part+0x20c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a88c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        }
        /*Do the refreshing from the top object*/
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 800a890:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a894:	4619      	mov	r1, r3
 800a896:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800a89a:	f000 f895 	bl	800a9c8 <lv_refr_obj_and_children>

    }

    if(top_act_scr == NULL) {
 800a89e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d104      	bne.n	800a8b0 <lv_refr_area_part+0x1ac>
        top_act_scr = disp_refr->act_scr;
 800a8a6:	4b1a      	ldr	r3, [pc, #104]	; (800a910 <lv_refr_area_part+0x20c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }
    /*Do the refreshing from the top object*/
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 800a8b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800a8ba:	f000 f885 	bl	800a9c8 <lv_refr_obj_and_children>

    /*Also refresh top and sys layer unconditionally*/
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 800a8be:	4b14      	ldr	r3, [pc, #80]	; (800a910 <lv_refr_area_part+0x20c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7f6 fe03 	bl	80014ce <lv_disp_get_layer_top>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	f000 f879 	bl	800a9c8 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 800a8d6:	4b0e      	ldr	r3, [pc, #56]	; (800a910 <lv_refr_area_part+0x20c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f6 fe0c 	bl	80014f8 <lv_disp_get_layer_sys>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	f000 f86d 	bl	800a9c8 <lv_refr_obj_and_children>

    /* In true double buffered mode flush only once when all areas were rendered.
     * In normal mode flush after every area */
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 800a8ee:	4b08      	ldr	r3, [pc, #32]	; (800a910 <lv_refr_area_part+0x20c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f00f fce1 	bl	801a2ba <lv_disp_is_true_double_buf>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f083 0301 	eor.w	r3, r3, #1
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <lv_refr_area_part+0x204>
        lv_refr_vdb_flush();
 800a904:	f000 f972 	bl	800abec <lv_refr_vdb_flush>
    }
}
 800a908:	bf00      	nop
 800a90a:	37a8      	adds	r7, #168	; 0xa8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	200177b0 	.word	0x200177b0

0800a914 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	617b      	str	r3, [r7, #20]

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	3310      	adds	r3, #16
 800a926:	2200      	movs	r2, #0
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f010 fb1c 	bl	801af68 <_lv_area_is_in>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d043      	beq.n	800a9be <lv_refr_get_top_obj+0xaa>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a93c:	f003 0310 	and.w	r3, r3, #16
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d13b      	bne.n	800a9be <lv_refr_get_top_obj+0xaa>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	2202      	movs	r2, #2
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	6838      	ldr	r0, [r7, #0]
 800a950:	4798      	blx	r3
 800a952:	4603      	mov	r3, r0
 800a954:	74fb      	strb	r3, [r7, #19]
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 800a956:	7cfb      	ldrb	r3, [r7, #19]
 800a958:	2b03      	cmp	r3, #3
 800a95a:	d101      	bne.n	800a960 <lv_refr_get_top_obj+0x4c>
 800a95c:	2300      	movs	r3, #0
 800a95e:	e02f      	b.n	800a9c0 <lv_refr_get_top_obj+0xac>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
 800a960:	7cfb      	ldrb	r3, [r7, #19]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d108      	bne.n	800a978 <lv_refr_get_top_obj+0x64>
 800a966:	2100      	movs	r1, #0
 800a968:	6838      	ldr	r0, [r7, #0]
 800a96a:	f7ff fa80 	bl	8009e6e <lv_obj_get_style_opa_scale>
 800a96e:	4603      	mov	r3, r0
 800a970:	2bff      	cmp	r3, #255	; 0xff
 800a972:	d001      	beq.n	800a978 <lv_refr_get_top_obj+0x64>
            design_res = LV_DESIGN_RES_NOT_COVER;
 800a974:	2302      	movs	r3, #2
 800a976:	74fb      	strb	r3, [r7, #19]
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	3304      	adds	r3, #4
 800a97c:	4618      	mov	r0, r3
 800a97e:	f011 fb1f 	bl	801bfc0 <_lv_ll_get_head>
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	e00e      	b.n	800a9a4 <lv_refr_get_top_obj+0x90>
            found_p = lv_refr_get_top_obj(area_p, i);
 800a986:	68f9      	ldr	r1, [r7, #12]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f7ff ffc3 	bl	800a914 <lv_refr_get_top_obj>
 800a98e:	6178      	str	r0, [r7, #20]

            /*If a children is ok then break*/
            if(found_p != NULL) {
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10a      	bne.n	800a9ac <lv_refr_get_top_obj+0x98>
        _LV_LL_READ(obj->child_ll, i) {
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	3304      	adds	r3, #4
 800a99a:	68f9      	ldr	r1, [r7, #12]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f011 fb35 	bl	801c00c <_lv_ll_get_next>
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1ed      	bne.n	800a986 <lv_refr_get_top_obj+0x72>
 800a9aa:	e000      	b.n	800a9ae <lv_refr_get_top_obj+0x9a>
                break;
 800a9ac:	bf00      	nop
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d104      	bne.n	800a9be <lv_refr_get_top_obj+0xaa>
            if(design_res == LV_DESIGN_RES_COVER) {
 800a9b4:	7cfb      	ldrb	r3, [r7, #19]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d101      	bne.n	800a9be <lv_refr_get_top_obj+0xaa>
                found_p = obj;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 800a9be:	697b      	ldr	r3, [r7, #20]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <lv_refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj_and_children(lv_obj_t * top_p, const lv_area_t * mask_p)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
    /* Normally always will be a top_obj (at least the screen)
     * but in special cases (e.g. if the screen has alpha) it won't.
     * In this case use the screen directly */
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d105      	bne.n	800a9e4 <lv_refr_obj_and_children+0x1c>
 800a9d8:	4b20      	ldr	r3, [pc, #128]	; (800aa5c <lv_refr_obj_and_children+0x94>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7f6 fd4c 	bl	800147a <lv_disp_get_scr_act>
 800a9e2:	6078      	str	r0, [r7, #4]
    if(top_p == NULL) return;  /*Shouldn't happen*/
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d034      	beq.n	800aa54 <lv_refr_obj_and_children+0x8c>

    /*Refresh the top object and its children*/
    lv_refr_obj(top_p, mask_p);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f837 	bl	800aa60 <lv_refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj */
    lv_obj_t * par;
    lv_obj_t * border_p = top_p;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	613b      	str	r3, [r7, #16]

    par = lv_obj_get_parent(top_p);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7fb fdba 	bl	8006570 <lv_obj_get_parent>
 800a9fc:	6178      	str	r0, [r7, #20]

    /*Do until not reach the screen*/
    while(par != NULL) {
 800a9fe:	e025      	b.n	800aa4c <lv_refr_obj_and_children+0x84>
        /*object before border_p has to be redrawn*/
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	3304      	adds	r3, #4
 800aa04:	6939      	ldr	r1, [r7, #16]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f011 fb1a 	bl	801c040 <_lv_ll_get_prev>
 800aa0c:	60f8      	str	r0, [r7, #12]

        while(i != NULL) {
 800aa0e:	e00a      	b.n	800aa26 <lv_refr_obj_and_children+0x5e>
            /*Refresh the objects*/
            lv_refr_obj(i, mask_p);
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f000 f824 	bl	800aa60 <lv_refr_obj>
            i = _lv_ll_get_prev(&(par->child_ll), i);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	68f9      	ldr	r1, [r7, #12]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f011 fb0e 	bl	801c040 <_lv_ll_get_prev>
 800aa24:	60f8      	str	r0, [r7, #12]
        while(i != NULL) {
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1f1      	bne.n	800aa10 <lv_refr_obj_and_children+0x48>
        }

        /*Call the post draw design function of the parents of the to object*/
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	6a1b      	ldr	r3, [r3, #32]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <lv_refr_obj_and_children+0x78>
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6978      	ldr	r0, [r7, #20]
 800aa3e:	4798      	blx	r3

        /*The new border will be there last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = par;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	613b      	str	r3, [r7, #16]
        /*Go a level deeper*/
        par = lv_obj_get_parent(par);
 800aa44:	6978      	ldr	r0, [r7, #20]
 800aa46:	f7fb fd93 	bl	8006570 <lv_obj_get_parent>
 800aa4a:	6178      	str	r0, [r7, #20]
    while(par != NULL) {
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1d6      	bne.n	800aa00 <lv_refr_obj_and_children+0x38>
 800aa52:	e000      	b.n	800aa56 <lv_refr_obj_and_children+0x8e>
    if(top_p == NULL) return;  /*Shouldn't happen*/
 800aa54:	bf00      	nop
    }
}
 800aa56:	3718      	adds	r7, #24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	200177b0 	.word	0x200177b0

0800aa60 <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08e      	sub	sp, #56	; 0x38
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa70:	f003 0310 	and.w	r3, r3, #16
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f040 80b4 	bne.w	800abe4 <lv_refr_obj+0x184>
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa80:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
 800aa82:	f107 0318 	add.w	r3, r7, #24
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7fb fdc1 	bl	8006610 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800aa8e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	b21b      	sxth	r3, r3
 800aa9c:	833b      	strh	r3, [r7, #24]
    obj_area.y1 -= ext_size;
 800aa9e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	b21b      	sxth	r3, r3
 800aaac:	837b      	strh	r3, [r7, #26]
    obj_area.x2 += ext_size;
 800aaae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aab6:	4413      	add	r3, r2
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	b21b      	sxth	r3, r3
 800aabc:	83bb      	strh	r3, [r7, #28]
    obj_area.y2 += ext_size;
 800aabe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aac6:	4413      	add	r3, r2
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	b21b      	sxth	r3, r3
 800aacc:	83fb      	strh	r3, [r7, #30]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800aace:	f107 0218 	add.w	r2, r7, #24
 800aad2:	f107 0320 	add.w	r3, r7, #32
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	4618      	mov	r0, r3
 800aada:	f010 f861 	bl	801aba0 <_lv_area_intersect>
 800aade:	4603      	mov	r3, r0
 800aae0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 800aae4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d07c      	beq.n	800abe6 <lv_refr_obj+0x186>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a1b      	ldr	r3, [r3, #32]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d006      	beq.n	800ab02 <lv_refr_obj+0xa2>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	f107 0120 	add.w	r1, r7, #32
 800aafc:	2200      	movs	r2, #0
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 800ab02:	f107 0318 	add.w	r3, r7, #24
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7fb fd81 	bl	8006610 <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800ab0e:	f107 0218 	add.w	r2, r7, #24
 800ab12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f010 f841 	bl	801aba0 <_lv_area_intersect>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if(union_ok != false) {
 800ab24:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d04f      	beq.n	800abcc <lv_refr_obj+0x16c>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3304      	adds	r3, #4
 800ab30:	4618      	mov	r0, r3
 800ab32:	f011 fa58 	bl	801bfe6 <_lv_ll_get_tail>
 800ab36:	6378      	str	r0, [r7, #52]	; 0x34
 800ab38:	e045      	b.n	800abc6 <lv_refr_obj+0x166>
                lv_obj_get_coords(child_p, &child_area);
 800ab3a:	f107 0308 	add.w	r3, r7, #8
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab42:	f7fb fd65 	bl	8006610 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
 800ab46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab4a:	867b      	strh	r3, [r7, #50]	; 0x32
                child_area.x1 -= ext_size;
 800ab4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	b21b      	sxth	r3, r3
 800ab5a:	813b      	strh	r3, [r7, #8]
                child_area.y1 -= ext_size;
 800ab5c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	b21b      	sxth	r3, r3
 800ab6a:	817b      	strh	r3, [r7, #10]
                child_area.x2 += ext_size;
 800ab6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab74:	4413      	add	r3, r2
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	b21b      	sxth	r3, r3
 800ab7a:	81bb      	strh	r3, [r7, #12]
                child_area.y2 += ext_size;
 800ab7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab84:	4413      	add	r3, r2
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	b21b      	sxth	r3, r3
 800ab8a:	81fb      	strh	r3, [r7, #14]
                /* Get the union (common parts) of original mask (from obj)
                 * and its child */
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800ab8c:	f107 0208 	add.w	r2, r7, #8
 800ab90:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ab94:	f107 0310 	add.w	r3, r7, #16
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f010 f801 	bl	801aba0 <_lv_area_intersect>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                /*If the parent and the child has common area then refresh the child */
                if(union_ok) {
 800aba4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d005      	beq.n	800abb8 <lv_refr_obj+0x158>
                    /*Refresh the next children*/
                    lv_refr_obj(child_p, &mask_child);
 800abac:	f107 0310 	add.w	r3, r7, #16
 800abb0:	4619      	mov	r1, r3
 800abb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800abb4:	f7ff ff54 	bl	800aa60 <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	3304      	adds	r3, #4
 800abbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800abbe:	4618      	mov	r0, r3
 800abc0:	f011 fa3e 	bl	801c040 <_lv_ll_get_prev>
 800abc4:	6378      	str	r0, [r7, #52]	; 0x34
 800abc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1b6      	bne.n	800ab3a <lv_refr_obj+0xda>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d008      	beq.n	800abe6 <lv_refr_obj+0x186>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	f107 0120 	add.w	r1, r7, #32
 800abdc:	2201      	movs	r2, #1
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	4798      	blx	r3
 800abe2:	e000      	b.n	800abe6 <lv_refr_obj+0x186>
    if(obj->hidden != 0) return;
 800abe4:	bf00      	nop
    }
}
 800abe6:	3738      	adds	r7, #56	; 0x38
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800abf2:	4b37      	ldr	r3, [pc, #220]	; (800acd0 <lv_refr_vdb_flush+0xe4>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f00f fafa 	bl	801a1f0 <lv_disp_get_buf>
 800abfc:	6078      	str	r0, [r7, #4]

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 800abfe:	4b34      	ldr	r3, [pc, #208]	; (800acd0 <lv_refr_vdb_flush+0xe4>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f00f fb42 	bl	801a28c <lv_disp_is_double_buf>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d010      	beq.n	800ac30 <lv_refr_vdb_flush+0x44>
        while(vdb->flushing) {
 800ac0e:	e00b      	b.n	800ac28 <lv_refr_vdb_flush+0x3c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 800ac10:	4b2f      	ldr	r3, [pc, #188]	; (800acd0 <lv_refr_vdb_flush+0xe4>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d006      	beq.n	800ac28 <lv_refr_vdb_flush+0x3c>
 800ac1a:	4b2d      	ldr	r3, [pc, #180]	; (800acd0 <lv_refr_vdb_flush+0xe4>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	4a2b      	ldr	r2, [pc, #172]	; (800acd0 <lv_refr_vdb_flush+0xe4>)
 800ac22:	6812      	ldr	r2, [r2, #0]
 800ac24:	4610      	mov	r0, r2
 800ac26:	4798      	blx	r3
        while(vdb->flushing) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1ef      	bne.n	800ac10 <lv_refr_vdb_flush+0x24>
        }
    }

    vdb->flushing = 1;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	619a      	str	r2, [r3, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 800ac36:	4b26      	ldr	r3, [pc, #152]	; (800acd0 <lv_refr_vdb_flush+0xe4>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00c      	beq.n	800ac62 <lv_refr_vdb_flush+0x76>
 800ac48:	4b21      	ldr	r3, [pc, #132]	; (800acd0 <lv_refr_vdb_flush+0xe4>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	6a1b      	ldr	r3, [r3, #32]
 800ac50:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <lv_refr_vdb_flush+0x76>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	61da      	str	r2, [r3, #28]
 800ac60:	e002      	b.n	800ac68 <lv_refr_vdb_flush+0x7c>
    else vdb->flushing_last = 0;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	61da      	str	r2, [r3, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800ac68:	f7ff f9d2 	bl	800a010 <_lv_refr_get_disp_refreshing>
 800ac6c:	6038      	str	r0, [r7, #0]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d004      	beq.n	800ac80 <lv_refr_vdb_flush+0x94>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d008      	beq.n	800ac9a <lv_refr_vdb_flush+0xae>
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	6838      	ldr	r0, [r7, #0]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	f102 0110 	add.w	r1, r2, #16
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	6892      	ldr	r2, [r2, #8]
 800ac98:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d012      	beq.n	800acc8 <lv_refr_vdb_flush+0xdc>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00e      	beq.n	800acc8 <lv_refr_vdb_flush+0xdc>
        if(vdb->buf_act == vdb->buf1)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689a      	ldr	r2, [r3, #8]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d104      	bne.n	800acc0 <lv_refr_vdb_flush+0xd4>
            vdb->buf_act = vdb->buf2;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	609a      	str	r2, [r3, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 800acbe:	e003      	b.n	800acc8 <lv_refr_vdb_flush+0xdc>
            vdb->buf_act = vdb->buf1;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	609a      	str	r2, [r3, #8]
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	200177b0 	.word	0x200177b0

0800acd4 <_lv_memcpy_small>:
{
 800acd4:	b480      	push	{r7}
 800acd6:	b087      	sub	sp, #28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	613b      	str	r3, [r7, #16]
    while(len) {
 800ace8:	e00c      	b.n	800ad04 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	781a      	ldrb	r2, [r3, #0]
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	701a      	strb	r2, [r3, #0]
        d8++;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	3301      	adds	r3, #1
 800acf6:	617b      	str	r3, [r7, #20]
        s8++;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	3301      	adds	r3, #1
 800acfc:	613b      	str	r3, [r7, #16]
        len--;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	607b      	str	r3, [r7, #4]
    while(len) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1ef      	bne.n	800acea <_lv_memcpy_small+0x16>
    return dst;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	371c      	adds	r7, #28
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <lv_style_list_get_style>:
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
    if(list->has_trans && list->skip_trans) id++;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	791b      	ldrb	r3, [r3, #4]
 800ad28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d009      	beq.n	800ad46 <lv_style_list_get_style+0x2e>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	795b      	ldrb	r3, [r3, #5]
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <lv_style_list_get_style+0x2e>
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	3301      	adds	r3, #1
 800ad44:	70fb      	strb	r3, [r7, #3]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	791b      	ldrb	r3, [r3, #4]
 800ad4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d008      	beq.n	800ad66 <lv_style_list_get_style+0x4e>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	791b      	ldrb	r3, [r3, #4]
 800ad58:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	461a      	mov	r2, r3
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d301      	bcc.n	800ad6a <lv_style_list_get_style+0x52>
 800ad66:	2300      	movs	r3, #0
 800ad68:	e005      	b.n	800ad76 <lv_style_list_get_style+0x5e>
    return list->style_list[id];
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	78fb      	ldrb	r3, [r7, #3]
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	681b      	ldr	r3, [r3, #0]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b082      	sub	sp, #8
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
    _lv_memset_00(style, sizeof(lv_style_t));
 800ad8a:	2104      	movs	r1, #4
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f012 f858 	bl	801ce42 <_lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_DEBUG_STYLE_SENTINEL_VALUE;
#endif
}
 800ad92:	bf00      	nop
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <lv_style_copy>:
 * Copy a style with all its properties
 * @param style_dest pointer to the destination style. (Should be initialized with `lv_style_init()`)
 * @param style_src pointer to the source (to copy )style
 */
void lv_style_copy(lv_style_t * style_dest, const lv_style_t * style_src)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
    if(style_src == NULL) return;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d018      	beq.n	800addc <lv_style_copy+0x42>

    LV_ASSERT_STYLE(style_dest);
    LV_ASSERT_STYLE(style_src);

    if(style_src->map == NULL) return;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d016      	beq.n	800ade0 <lv_style_copy+0x46>

    uint16_t size = _lv_style_get_mem_size(style_src);
 800adb2:	6838      	ldr	r0, [r7, #0]
 800adb4:	f000 fb01 	bl	800b3ba <_lv_style_get_mem_size>
 800adb8:	4603      	mov	r3, r0
 800adba:	81fb      	strh	r3, [r7, #14]
    style_dest->map = lv_mem_alloc(size);
 800adbc:	89fb      	ldrh	r3, [r7, #14]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f011 fad4 	bl	801c36c <lv_mem_alloc>
 800adc4:	4602      	mov	r2, r0
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	601a      	str	r2, [r3, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6818      	ldr	r0, [r3, #0]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	89fa      	ldrh	r2, [r7, #14]
 800add4:	4619      	mov	r1, r3
 800add6:	f011 fd8f 	bl	801c8f8 <_lv_memcpy>
 800adda:	e002      	b.n	800ade2 <lv_style_copy+0x48>
    if(style_src == NULL) return;
 800addc:	bf00      	nop
 800adde:	e000      	b.n	800ade2 <lv_style_copy+0x48>
    if(style_src->map == NULL) return;
 800ade0:	bf00      	nop
}
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <lv_style_remove_prop>:
 * @param prop a style property ORed with a state.
 * E.g. `LV_STYLE_BORDER_WIDTH | (LV_STATE_PRESSED << LV_STYLE_STATE_POS)`
 * @return true: the property was found and removed; false: the property wasn't found
 */
bool lv_style_remove_prop(lv_style_t * style, lv_style_property_t prop)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	460b      	mov	r3, r1
 800adf2:	807b      	strh	r3, [r7, #2]
    if(style == NULL) return false;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <lv_style_remove_prop+0x16>
 800adfa:	2300      	movs	r3, #0
 800adfc:	e049      	b.n	800ae92 <lv_style_remove_prop+0xaa>
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800adfe:	887b      	ldrh	r3, [r7, #2]
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f001 f8c3 	bl	800bf8e <get_property_index>
 800ae08:	61b8      	str	r0, [r7, #24]
    /*The property exists but not sure it's state is the same*/
    if(id >= 0) {
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	db3f      	blt.n	800ae90 <lv_style_remove_prop+0xa8>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f001 f99b 	bl	800c150 <get_style_prop_attr>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	75fb      	strb	r3, [r7, #23]
        attr_goal = (prop >> 8) & 0xFFU;
 800ae1e:	887b      	ldrh	r3, [r7, #2]
 800ae20:	0a1b      	lsrs	r3, r3, #8
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	75bb      	strb	r3, [r7, #22]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800ae26:	7dfa      	ldrb	r2, [r7, #23]
 800ae28:	7dbb      	ldrb	r3, [r7, #22]
 800ae2a:	4053      	eors	r3, r2
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d12c      	bne.n	800ae90 <lv_style_remove_prop+0xa8>
            uint32_t map_size = _lv_style_get_mem_size(style);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fabf 	bl	800b3ba <_lv_style_get_mem_size>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	613b      	str	r3, [r7, #16]
            uint8_t prop_size = get_prop_size(prop);
 800ae40:	887b      	ldrh	r3, [r7, #2]
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	4618      	mov	r0, r3
 800ae46:	f001 f994 	bl	800c172 <get_prop_size>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73fb      	strb	r3, [r7, #15]

            /*Move the props to fill the space of the property to delete*/
            uint32_t i;
            for(i = id; i < map_size - prop_size; i++) {
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	61fb      	str	r3, [r7, #28]
 800ae52:	e00e      	b.n	800ae72 <lv_style_remove_prop+0x8a>
                style->map[i] = style->map[i + prop_size];
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	7bf9      	ldrb	r1, [r7, #15]
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	440b      	add	r3, r1
 800ae5e:	441a      	add	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6819      	ldr	r1, [r3, #0]
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	440b      	add	r3, r1
 800ae68:	7812      	ldrb	r2, [r2, #0]
 800ae6a:	701a      	strb	r2, [r3, #0]
            for(i = id; i < map_size - prop_size; i++) {
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	61fb      	str	r3, [r7, #28]
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	69fa      	ldr	r2, [r7, #28]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d3ea      	bcc.n	800ae54 <lv_style_remove_prop+0x6c>
            }

            style_resize(style, map_size - prop_size);
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f001 f922 	bl	800c0d0 <style_resize>

            return true;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e000      	b.n	800ae92 <lv_style_remove_prop+0xaa>
        }
    }

    return false;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3720      	adds	r7, #32
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
    _lv_memset_00(list, sizeof(lv_style_list_t));
 800aea2:	2108      	movs	r1, #8
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f011 ffcc 	bl	801ce42 <_lv_memset_00>
#if LV_USE_ASSERT_STYLE
    list->sentinel = LV_DEBUG_STYLE_LIST_SENTINEL_VALUE;
#endif
}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <lv_style_list_copy>:
 * Copy a style list with all its styles and local style properties
 * @param list_dest pointer to the destination style list. (should be initialized with `lv_style_list_init()`)
 * @param list_src pointer to the source (to copy) style list.
 */
void lv_style_list_copy(lv_style_list_t * list_dest, const lv_style_list_t * list_src)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
    LV_ASSERT_STYLE_LIST(list_dest);
    LV_ASSERT_STYLE_LIST(list_src);

    _lv_style_list_reset(list_dest);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fa15 	bl	800b2ec <_lv_style_list_reset>

    if(list_src->style_list == NULL) return;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 80ca 	beq.w	800b060 <lv_style_list_copy+0x1ae>

    /*Copy the styles but skip the transitions*/
    if(list_src->has_local == 0) {
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	791b      	ldrb	r3, [r3, #4]
 800aed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d156      	bne.n	800af88 <lv_style_list_copy+0xd6>
        if(list_src->has_trans) {
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	791b      	ldrb	r3, [r3, #4]
 800aede:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d02b      	beq.n	800af40 <lv_style_list_copy+0x8e>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	791b      	ldrb	r3, [r3, #4]
 800aeec:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	3b01      	subs	r3, #1
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4618      	mov	r0, r3
 800aef8:	f011 fa38 	bl	801c36c <lv_mem_alloc>
 800aefc:	4602      	mov	r2, r0
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6818      	ldr	r0, [r3, #0]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	1d19      	adds	r1, r3, #4
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	791b      	ldrb	r3, [r3, #4]
 800af10:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800af14:	b2db      	uxtb	r3, r3
 800af16:	3b01      	subs	r3, #1
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	461a      	mov	r2, r3
 800af1c:	f011 fcec 	bl	801c8f8 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	791b      	ldrb	r3, [r3, #4]
 800af24:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	3b01      	subs	r3, #1
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af32:	b2d9      	uxtb	r1, r3
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	7913      	ldrb	r3, [r2, #4]
 800af38:	f361 0305 	bfi	r3, r1, #0, #6
 800af3c:	7113      	strb	r3, [r2, #4]
 800af3e:	e090      	b.n	800b062 <lv_style_list_copy+0x1b0>
        }
        else {
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	791b      	ldrb	r3, [r3, #4]
 800af44:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4618      	mov	r0, r3
 800af4e:	f011 fa0d 	bl	801c36c <lv_mem_alloc>
 800af52:	4602      	mov	r2, r0
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6818      	ldr	r0, [r3, #0]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	6819      	ldr	r1, [r3, #0]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	791b      	ldrb	r3, [r3, #4]
 800af64:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	461a      	mov	r2, r3
 800af6e:	f011 fcc3 	bl	801c8f8 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	791b      	ldrb	r3, [r3, #4]
 800af76:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800af7a:	b2d9      	uxtb	r1, r3
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	7913      	ldrb	r3, [r2, #4]
 800af80:	f361 0305 	bfi	r3, r1, #0, #6
 800af84:	7113      	strb	r3, [r2, #4]
 800af86:	e06c      	b.n	800b062 <lv_style_list_copy+0x1b0>
        }
    }
    else {
        if(list_src->has_trans) {
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	791b      	ldrb	r3, [r3, #4]
 800af8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	d02c      	beq.n	800aff0 <lv_style_list_copy+0x13e>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	791b      	ldrb	r3, [r3, #4]
 800af9a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	3b02      	subs	r3, #2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4618      	mov	r0, r3
 800afa6:	f011 f9e1 	bl	801c36c <lv_mem_alloc>
 800afaa:	4602      	mov	r2, r0
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6818      	ldr	r0, [r3, #0]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f103 0108 	add.w	r1, r3, #8
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	791b      	ldrb	r3, [r3, #4]
 800afc0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	3b02      	subs	r3, #2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	461a      	mov	r2, r3
 800afcc:	f011 fc94 	bl	801c8f8 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	791b      	ldrb	r3, [r3, #4]
 800afd4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	3b02      	subs	r3, #2
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afe2:	b2d9      	uxtb	r1, r3
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	7913      	ldrb	r3, [r2, #4]
 800afe8:	f361 0305 	bfi	r3, r1, #0, #6
 800afec:	7113      	strb	r3, [r2, #4]
 800afee:	e02a      	b.n	800b046 <lv_style_list_copy+0x194>
        }
        else {
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	791b      	ldrb	r3, [r3, #4]
 800aff4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	3b01      	subs	r3, #1
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4618      	mov	r0, r3
 800b000:	f011 f9b4 	bl	801c36c <lv_mem_alloc>
 800b004:	4602      	mov	r2, r0
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6818      	ldr	r0, [r3, #0]
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	1d19      	adds	r1, r3, #4
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	791b      	ldrb	r3, [r3, #4]
 800b018:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	3b01      	subs	r3, #1
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	461a      	mov	r2, r3
 800b024:	f011 fc68 	bl	801c8f8 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	791b      	ldrb	r3, [r3, #4]
 800b02c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b030:	b2db      	uxtb	r3, r3
 800b032:	3b01      	subs	r3, #1
 800b034:	b2db      	uxtb	r3, r3
 800b036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b03a:	b2d9      	uxtb	r1, r3
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	7913      	ldrb	r3, [r2, #4]
 800b040:	f361 0305 	bfi	r3, r1, #0, #6
 800b044:	7113      	strb	r3, [r2, #4]
        }

        lv_style_t * local_style = get_alloc_local_style(list_dest);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fffe 	bl	800c048 <get_alloc_local_style>
 800b04c:	60f8      	str	r0, [r7, #12]
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 800b04e:	6838      	ldr	r0, [r7, #0]
 800b050:	f000 fffa 	bl	800c048 <get_alloc_local_style>
 800b054:	4603      	mov	r3, r0
 800b056:	4619      	mov	r1, r3
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f7ff fe9e 	bl	800ad9a <lv_style_copy>
 800b05e:	e000      	b.n	800b062 <lv_style_list_copy+0x1b0>
    if(list_src->style_list == NULL) return;
 800b060:	bf00      	nop
    }
}
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <_lv_style_list_add_style>:
 * (It should be static, global or dynamically allocated)
 * @param list pointer to a style list
 * @param style pointer to a style to add
 */
void _lv_style_list_add_style(lv_style_list_t * list, lv_style_t * style)
{
 800b068:	b590      	push	{r4, r7, lr}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list == NULL) return;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d07b      	beq.n	800b170 <_lv_style_list_add_style+0x108>

    /*Remove the style first if already exists*/
    _lv_style_list_remove_style(list, style);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f880 	bl	800b180 <_lv_style_list_remove_style>

    lv_style_t ** new_classes;
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	791b      	ldrb	r3, [r3, #4]
 800b084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d104      	bne.n	800b098 <_lv_style_list_add_style+0x30>
 800b08e:	2004      	movs	r0, #4
 800b090:	f011 f96c 	bl	801c36c <lv_mem_alloc>
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	e00d      	b.n	800b0b4 <_lv_style_list_add_style+0x4c>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	791b      	ldrb	r3, [r3, #4]
 800b0a0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	f011 f9fd 	bl	801c4ac <lv_mem_realloc>
 800b0b2:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(new_classes);
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f010 fbcd 	bl	801b854 <lv_debug_check_null>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	f083 0301 	eor.w	r3, r3, #1
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d008      	beq.n	800b0d8 <_lv_style_list_add_style+0x70>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f04f 0400 	mov.w	r4, #0
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	4623      	mov	r3, r4
 800b0d0:	482a      	ldr	r0, [pc, #168]	; (800b17c <_lv_style_list_add_style+0x114>)
 800b0d2:	f010 fbcf 	bl	801b874 <lv_debug_log_error>
 800b0d6:	e7fe      	b.n	800b0d6 <_lv_style_list_add_style+0x6e>
    if(new_classes == NULL) {
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d04a      	beq.n	800b174 <_lv_style_list_add_style+0x10c>
        return;
    }

    /*Make space for the new style at the beginning. Leave local and trans style if exists*/
    uint8_t i;
    uint8_t first_style = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	72bb      	strb	r3, [r7, #10]
    if(list->has_trans) first_style++;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	791b      	ldrb	r3, [r3, #4]
 800b0e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <_lv_style_list_add_style+0x8e>
 800b0f0:	7abb      	ldrb	r3, [r7, #10]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	72bb      	strb	r3, [r7, #10]
    if(list->has_local) first_style++;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	791b      	ldrb	r3, [r3, #4]
 800b0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <_lv_style_list_add_style+0xa2>
 800b104:	7abb      	ldrb	r3, [r7, #10]
 800b106:	3301      	adds	r3, #1
 800b108:	72bb      	strb	r3, [r7, #10]
    for(i = list->style_cnt; i > first_style; i--) {
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	791b      	ldrb	r3, [r3, #4]
 800b10e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b112:	b2db      	uxtb	r3, r3
 800b114:	72fb      	strb	r3, [r7, #11]
 800b116:	e00f      	b.n	800b138 <_lv_style_list_add_style+0xd0>
        new_classes[i] = new_classes[i - 1];
 800b118:	7afa      	ldrb	r2, [r7, #11]
 800b11a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b11e:	4413      	add	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	441a      	add	r2, r3
 800b126:	7afb      	ldrb	r3, [r7, #11]
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	68f9      	ldr	r1, [r7, #12]
 800b12c:	440b      	add	r3, r1
 800b12e:	6812      	ldr	r2, [r2, #0]
 800b130:	601a      	str	r2, [r3, #0]
    for(i = list->style_cnt; i > first_style; i--) {
 800b132:	7afb      	ldrb	r3, [r7, #11]
 800b134:	3b01      	subs	r3, #1
 800b136:	72fb      	strb	r3, [r7, #11]
 800b138:	7afa      	ldrb	r2, [r7, #11]
 800b13a:	7abb      	ldrb	r3, [r7, #10]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d8eb      	bhi.n	800b118 <_lv_style_list_add_style+0xb0>
    }

    new_classes[first_style] = style;
 800b140:	7abb      	ldrb	r3, [r7, #10]
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	4413      	add	r3, r2
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	601a      	str	r2, [r3, #0]
    list->style_cnt++;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	791b      	ldrb	r3, [r3, #4]
 800b150:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b154:	b2db      	uxtb	r3, r3
 800b156:	3301      	adds	r3, #1
 800b158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b15c:	b2d9      	uxtb	r1, r3
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	7913      	ldrb	r3, [r2, #4]
 800b162:	f361 0305 	bfi	r3, r1, #0, #6
 800b166:	7113      	strb	r3, [r2, #4]
    list->style_list = new_classes;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	e002      	b.n	800b176 <_lv_style_list_add_style+0x10e>
    if(list == NULL) return;
 800b170:	bf00      	nop
 800b172:	e000      	b.n	800b176 <_lv_style_list_add_style+0x10e>
        return;
 800b174:	bf00      	nop
}
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd90      	pop	{r4, r7, pc}
 800b17c:	0802834c 	.word	0x0802834c

0800b180 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	791b      	ldrb	r3, [r3, #4]
 800b18e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b192:	b2db      	uxtb	r3, r3
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 809e 	beq.w	800b2d6 <_lv_style_list_remove_style+0x156>

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
 800b19a:	2300      	movs	r3, #0
 800b19c:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < list->style_cnt; i++) {
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]
 800b1a2:	e00e      	b.n	800b1c2 <_lv_style_list_remove_style+0x42>
        if(list->style_list[i] == style) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4413      	add	r3, r2
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d102      	bne.n	800b1bc <_lv_style_list_remove_style+0x3c>
            found = true;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	73bb      	strb	r3, [r7, #14]
            break;
 800b1ba:	e00b      	b.n	800b1d4 <_lv_style_list_remove_style+0x54>
    for(i = 0; i < list->style_cnt; i++) {
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	73fb      	strb	r3, [r7, #15]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	791b      	ldrb	r3, [r3, #4]
 800b1c6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d3e7      	bcc.n	800b1a4 <_lv_style_list_remove_style+0x24>
        }
    }
    if(found == false) return;
 800b1d4:	7bbb      	ldrb	r3, [r7, #14]
 800b1d6:	f083 0301 	eor.w	r3, r3, #1
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d17c      	bne.n	800b2da <_lv_style_list_remove_style+0x15a>

    if(list->style_cnt == 1) {
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	791b      	ldrb	r3, [r3, #4]
 800b1e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d112      	bne.n	800b214 <_lv_style_list_remove_style+0x94>
        lv_mem_free(list->style_list);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f011 f904 	bl	801c400 <lv_mem_free>
        list->style_list = NULL;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	601a      	str	r2, [r3, #0]
        list->style_cnt = 0;
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	7913      	ldrb	r3, [r2, #4]
 800b202:	f36f 0305 	bfc	r3, #0, #6
 800b206:	7113      	strb	r3, [r2, #4]
        list->has_local = 0;
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	7913      	ldrb	r3, [r2, #4]
 800b20c:	f36f 1386 	bfc	r3, #6, #1
 800b210:	7113      	strb	r3, [r2, #4]
        return;
 800b212:	e065      	b.n	800b2e0 <_lv_style_list_remove_style+0x160>
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	791b      	ldrb	r3, [r3, #4]
 800b218:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	3b01      	subs	r3, #1
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4618      	mov	r0, r3
 800b224:	f011 f8a2 	bl	801c36c <lv_mem_alloc>
 800b228:	60b8      	str	r0, [r7, #8]
    LV_ASSERT_MEM(new_classes);
 800b22a:	68b8      	ldr	r0, [r7, #8]
 800b22c:	f010 fb12 	bl	801b854 <lv_debug_check_null>
 800b230:	4603      	mov	r3, r0
 800b232:	f083 0301 	eor.w	r3, r3, #1
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d008      	beq.n	800b24e <_lv_style_list_remove_style+0xce>
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f04f 0400 	mov.w	r4, #0
 800b242:	461a      	mov	r2, r3
 800b244:	4623      	mov	r3, r4
 800b246:	4828      	ldr	r0, [pc, #160]	; (800b2e8 <_lv_style_list_remove_style+0x168>)
 800b248:	f010 fb14 	bl	801b874 <lv_debug_log_error>
 800b24c:	e7fe      	b.n	800b24c <_lv_style_list_remove_style+0xcc>
    if(new_classes == NULL) {
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d044      	beq.n	800b2de <_lv_style_list_remove_style+0x15e>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]
 800b258:	2300      	movs	r3, #0
 800b25a:	737b      	strb	r3, [r7, #13]
 800b25c:	e01b      	b.n	800b296 <_lv_style_list_remove_style+0x116>
        if(list->style_list[i] == style) continue;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	7bfb      	ldrb	r3, [r7, #15]
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d00e      	beq.n	800b28e <_lv_style_list_remove_style+0x10e>
        new_classes[j] = list->style_list[i];
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	7bfb      	ldrb	r3, [r7, #15]
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	441a      	add	r2, r3
 800b27a:	7b7b      	ldrb	r3, [r7, #13]
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	68b9      	ldr	r1, [r7, #8]
 800b280:	440b      	add	r3, r1
 800b282:	6812      	ldr	r2, [r2, #0]
 800b284:	601a      	str	r2, [r3, #0]
        j++;
 800b286:	7b7b      	ldrb	r3, [r7, #13]
 800b288:	3301      	adds	r3, #1
 800b28a:	737b      	strb	r3, [r7, #13]
 800b28c:	e000      	b.n	800b290 <_lv_style_list_remove_style+0x110>
        if(list->style_list[i] == style) continue;
 800b28e:	bf00      	nop
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	3301      	adds	r3, #1
 800b294:	73fb      	strb	r3, [r7, #15]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	791b      	ldrb	r3, [r3, #4]
 800b29a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d3da      	bcc.n	800b25e <_lv_style_list_remove_style+0xde>

    }

    lv_mem_free(list->style_list);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f011 f8a7 	bl	801c400 <lv_mem_free>

    list->style_cnt--;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	791b      	ldrb	r3, [r3, #4]
 800b2b6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	333f      	adds	r3, #63	; 0x3f
 800b2be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2c2:	b2d9      	uxtb	r1, r3
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	7913      	ldrb	r3, [r2, #4]
 800b2c8:	f361 0305 	bfi	r3, r1, #0, #6
 800b2cc:	7113      	strb	r3, [r2, #4]
    list->style_list = new_classes;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	e004      	b.n	800b2e0 <_lv_style_list_remove_style+0x160>
    if(list->style_cnt == 0) return;
 800b2d6:	bf00      	nop
 800b2d8:	e002      	b.n	800b2e0 <_lv_style_list_remove_style+0x160>
    if(found == false) return;
 800b2da:	bf00      	nop
 800b2dc:	e000      	b.n	800b2e0 <_lv_style_list_remove_style+0x160>
        return;
 800b2de:	bf00      	nop
}
 800b2e0:	3714      	adds	r7, #20
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd90      	pop	{r4, r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	0802834c 	.word	0x0802834c

0800b2ec <_lv_style_list_reset>:
 * Remove all styles added from style list, clear the local style, transition style and free all allocated memories.
 * Leave `ignore_trans` flag as it is.
 * @param list pointer to a style list.
 */
void _lv_style_list_reset(lv_style_list_t * list)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d04b      	beq.n	800b392 <_lv_style_list_reset+0xa6>

    if(list->has_local) {
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	791b      	ldrb	r3, [r3, #4]
 800b2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b302:	b2db      	uxtb	r3, r3
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00c      	beq.n	800b322 <_lv_style_list_reset+0x36>
        lv_style_t * local = lv_style_list_get_local_style(list);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fbc3 	bl	800ba94 <lv_style_list_get_local_style>
 800b30e:	60f8      	str	r0, [r7, #12]
        if(local) {
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d005      	beq.n	800b322 <_lv_style_list_reset+0x36>
            lv_style_reset(local);
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f000 f83f 	bl	800b39a <lv_style_reset>
            lv_mem_free(local);
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	f011 f86f 	bl	801c400 <lv_mem_free>
        }
    }

    if(list->has_trans) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	791b      	ldrb	r3, [r3, #4]
 800b326:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00c      	beq.n	800b34a <_lv_style_list_reset+0x5e>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fbd0 	bl	800bad6 <_lv_style_list_get_transition_style>
 800b336:	60b8      	str	r0, [r7, #8]
        if(trans) {
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d005      	beq.n	800b34a <_lv_style_list_reset+0x5e>
            lv_style_reset(trans);
 800b33e:	68b8      	ldr	r0, [r7, #8]
 800b340:	f000 f82b 	bl	800b39a <lv_style_reset>
            lv_mem_free(trans);
 800b344:	68b8      	ldr	r0, [r7, #8]
 800b346:	f011 f85b 	bl	801c400 <lv_mem_free>
        }
    }

    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	791b      	ldrb	r3, [r3, #4]
 800b34e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b00      	cmp	r3, #0
 800b356:	d004      	beq.n	800b362 <_lv_style_list_reset+0x76>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f011 f84f 	bl	801c400 <lv_mem_free>
    list->style_list = NULL;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	601a      	str	r2, [r3, #0]
    list->style_cnt = 0;
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	7913      	ldrb	r3, [r2, #4]
 800b36c:	f36f 0305 	bfc	r3, #0, #6
 800b370:	7113      	strb	r3, [r2, #4]
    list->has_local = 0;
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	7913      	ldrb	r3, [r2, #4]
 800b376:	f36f 1386 	bfc	r3, #6, #1
 800b37a:	7113      	strb	r3, [r2, #4]
    list->has_trans = 0;
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	7913      	ldrb	r3, [r2, #4]
 800b380:	f36f 13c7 	bfc	r3, #7, #1
 800b384:	7113      	strb	r3, [r2, #4]
    list->skip_trans = 0;
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	7953      	ldrb	r3, [r2, #5]
 800b38a:	f36f 0300 	bfc	r3, #0, #1
 800b38e:	7153      	strb	r3, [r2, #5]
 800b390:	e000      	b.n	800b394 <_lv_style_list_reset+0xa8>
    if(list == NULL) return;
 800b392:	bf00      	nop

    /* Intentionally leave `ignore_trans` as it is,
     * because it's independent from the styles in the list*/
}
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <lv_style_reset>:
/**
 * Clear all properties from a style and all allocated memories.
 * @param style pointer to a style
 */
void lv_style_reset(lv_style_t * style)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b082      	sub	sp, #8
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);

    lv_mem_free(style->map);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f011 f82a 	bl	801c400 <lv_mem_free>
    style->map = NULL;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]
}
 800b3b2:	bf00      	nop
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <_lv_style_get_mem_size>:
 * Get the size of the properties in a style in bytes
 * @param style pointer to a style
 * @return size of the properties in bytes
 */
uint16_t _lv_style_get_mem_size(const lv_style_t * style)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b084      	sub	sp, #16
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);

    if(style->map == NULL) return 0;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <_lv_style_get_mem_size+0x14>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e015      	b.n	800b3fa <_lv_style_get_mem_size+0x40>

    size_t i = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60fb      	str	r3, [r7, #12]
    uint8_t prop_id;
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800b3d2:	e005      	b.n	800b3e0 <_lv_style_get_mem_size+0x26>
        i = get_next_prop_index(prop_id, i);
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	68f9      	ldr	r1, [r7, #12]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f000 fef4 	bl	800c1c6 <get_next_prop_index>
 800b3de:	60f8      	str	r0, [r7, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800b3e0:	68f9      	ldr	r1, [r7, #12]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fea5 	bl	800c132 <get_style_prop_id>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	72fb      	strb	r3, [r7, #11]
 800b3ec:	7afb      	ldrb	r3, [r7, #11]
 800b3ee:	2bff      	cmp	r3, #255	; 0xff
 800b3f0:	d1f0      	bne.n	800b3d4 <_lv_style_get_mem_size+0x1a>
    }

    return i + sizeof(lv_style_property_t);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	3302      	adds	r3, #2
 800b3f8:	b29b      	uxth	r3, r3
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <_lv_style_set_int>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_width()`
 * @note for performance reasons it's not checked if the property really has integer type
 */
void _lv_style_set_int(lv_style_t * style, lv_style_property_t prop, lv_style_int_t value)
{
 800b404:	b590      	push	{r4, r7, lr}
 800b406:	b087      	sub	sp, #28
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	807b      	strh	r3, [r7, #2]
 800b410:	4613      	mov	r3, r2
 800b412:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b414:	887b      	ldrh	r3, [r7, #2]
 800b416:	4619      	mov	r1, r3
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fdb8 	bl	800bf8e <get_property_index>
 800b41e:	6138      	str	r0, [r7, #16]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	db1d      	blt.n	800b462 <_lv_style_set_int+0x5e>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 fe90 	bl	800c150 <get_style_prop_attr>
 800b430:	4603      	mov	r3, r0
 800b432:	73fb      	strb	r3, [r7, #15]
        attr_goal = (prop >> 8) & 0xFFU;
 800b434:	887b      	ldrh	r3, [r7, #2]
 800b436:	0a1b      	lsrs	r3, r3, #8
 800b438:	b29b      	uxth	r3, r3
 800b43a:	73bb      	strb	r3, [r7, #14]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b43c:	7bfa      	ldrb	r2, [r7, #15]
 800b43e:	7bbb      	ldrb	r3, [r7, #14]
 800b440:	4053      	eors	r3, r2
 800b442:	b2db      	uxtb	r3, r3
 800b444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10a      	bne.n	800b462 <_lv_style_set_int+0x5e>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	3302      	adds	r3, #2
 800b454:	4413      	add	r3, r2
 800b456:	4639      	mov	r1, r7
 800b458:	2202      	movs	r2, #2
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff fc3a 	bl	800acd4 <_lv_memcpy_small>
            return;
 800b460:	e059      	b.n	800b516 <_lv_style_set_int+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(lv_style_int_t));
 800b462:	2304      	movs	r3, #4
 800b464:	737b      	strb	r3, [r7, #13]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b466:	23ff      	movs	r3, #255	; 0xff
 800b468:	817b      	strh	r3, [r7, #10]
    uint8_t end_mark_size = sizeof(end_mark);
 800b46a:	2302      	movs	r3, #2
 800b46c:	733b      	strb	r3, [r7, #12]

    uint16_t size = _lv_style_get_mem_size(style);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7ff ffa3 	bl	800b3ba <_lv_style_get_mem_size>
 800b474:	4603      	mov	r3, r0
 800b476:	82fb      	strh	r3, [r7, #22]
    if(size == 0) size += end_mark_size;
 800b478:	8afb      	ldrh	r3, [r7, #22]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d104      	bne.n	800b488 <_lv_style_set_int+0x84>
 800b47e:	7b3b      	ldrb	r3, [r7, #12]
 800b480:	b29a      	uxth	r2, r3
 800b482:	8afb      	ldrh	r3, [r7, #22]
 800b484:	4413      	add	r3, r2
 800b486:	82fb      	strh	r3, [r7, #22]
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
 800b488:	8afb      	ldrh	r3, [r7, #22]
 800b48a:	3304      	adds	r3, #4
 800b48c:	82fb      	strh	r3, [r7, #22]
    style_resize(style, size);
 800b48e:	8afb      	ldrh	r3, [r7, #22]
 800b490:	4619      	mov	r1, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 fe1c 	bl	800c0d0 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f010 f9d9 	bl	801b854 <lv_debug_check_null>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f083 0301 	eor.w	r3, r3, #1
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d009      	beq.n	800b4c2 <_lv_style_set_int+0xbe>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f04f 0400 	mov.w	r4, #0
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	4623      	mov	r3, r4
 800b4ba:	4818      	ldr	r0, [pc, #96]	; (800b51c <_lv_style_set_int+0x118>)
 800b4bc:	f010 f9da 	bl	801b874 <lv_debug_log_error>
 800b4c0:	e7fe      	b.n	800b4c0 <_lv_style_set_int+0xbc>
    if(style == NULL) return;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d025      	beq.n	800b514 <_lv_style_set_int+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	8af9      	ldrh	r1, [r7, #22]
 800b4ce:	7b7b      	ldrb	r3, [r7, #13]
 800b4d0:	1ac9      	subs	r1, r1, r3
 800b4d2:	7b3b      	ldrb	r3, [r7, #12]
 800b4d4:	1acb      	subs	r3, r1, r3
 800b4d6:	4413      	add	r3, r2
 800b4d8:	1cb9      	adds	r1, r7, #2
 800b4da:	2202      	movs	r2, #2
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff fbf9 	bl	800acd4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	8af9      	ldrh	r1, [r7, #22]
 800b4e8:	7b3b      	ldrb	r3, [r7, #12]
 800b4ea:	1acb      	subs	r3, r1, r3
 800b4ec:	3b02      	subs	r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	4639      	mov	r1, r7
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff fbed 	bl	800acd4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	8af9      	ldrh	r1, [r7, #22]
 800b500:	7b3b      	ldrb	r3, [r7, #12]
 800b502:	1acb      	subs	r3, r1, r3
 800b504:	4413      	add	r3, r2
 800b506:	f107 010a 	add.w	r1, r7, #10
 800b50a:	2202      	movs	r2, #2
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7ff fbe1 	bl	800acd4 <_lv_memcpy_small>
 800b512:	e000      	b.n	800b516 <_lv_style_set_int+0x112>
    if(style == NULL) return;
 800b514:	bf00      	nop
}
 800b516:	371c      	adds	r7, #28
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd90      	pop	{r4, r7, pc}
 800b51c:	0802834c 	.word	0x0802834c

0800b520 <_lv_style_set_color>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_color()`
 * @note for performance reasons it's not checked if the property really has color type
 */
void _lv_style_set_color(lv_style_t * style, lv_style_property_t prop, lv_color_t color)
{
 800b520:	b590      	push	{r4, r7, lr}
 800b522:	b089      	sub	sp, #36	; 0x24
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	460b      	mov	r3, r1
 800b52a:	607a      	str	r2, [r7, #4]
 800b52c:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b52e:	897b      	ldrh	r3, [r7, #10]
 800b530:	4619      	mov	r1, r3
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f000 fd2b 	bl	800bf8e <get_property_index>
 800b538:	61b8      	str	r0, [r7, #24]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	db1d      	blt.n	800b57c <_lv_style_set_color+0x5c>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	4619      	mov	r1, r3
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 fe03 	bl	800c150 <get_style_prop_attr>
 800b54a:	4603      	mov	r3, r0
 800b54c:	75fb      	strb	r3, [r7, #23]
        attr_goal = (prop >> 8) & 0xFFU;
 800b54e:	897b      	ldrh	r3, [r7, #10]
 800b550:	0a1b      	lsrs	r3, r3, #8
 800b552:	b29b      	uxth	r3, r3
 800b554:	75bb      	strb	r3, [r7, #22]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b556:	7dfa      	ldrb	r2, [r7, #23]
 800b558:	7dbb      	ldrb	r3, [r7, #22]
 800b55a:	4053      	eors	r3, r2
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10a      	bne.n	800b57c <_lv_style_set_color+0x5c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	3302      	adds	r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	1d39      	adds	r1, r7, #4
 800b572:	2204      	movs	r2, #4
 800b574:	4618      	mov	r0, r3
 800b576:	f7ff fbad 	bl	800acd4 <_lv_memcpy_small>
            return;
 800b57a:	e05a      	b.n	800b632 <_lv_style_set_color+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(lv_color_t));
 800b57c:	2306      	movs	r3, #6
 800b57e:	757b      	strb	r3, [r7, #21]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b580:	23ff      	movs	r3, #255	; 0xff
 800b582:	827b      	strh	r3, [r7, #18]
    uint8_t end_mark_size = sizeof(end_mark);
 800b584:	2302      	movs	r3, #2
 800b586:	753b      	strb	r3, [r7, #20]

    uint16_t size = _lv_style_get_mem_size(style);
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff ff16 	bl	800b3ba <_lv_style_get_mem_size>
 800b58e:	4603      	mov	r3, r0
 800b590:	83fb      	strh	r3, [r7, #30]
    if(size == 0) size += end_mark_size;
 800b592:	8bfb      	ldrh	r3, [r7, #30]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d104      	bne.n	800b5a2 <_lv_style_set_color+0x82>
 800b598:	7d3b      	ldrb	r3, [r7, #20]
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	8bfb      	ldrh	r3, [r7, #30]
 800b59e:	4413      	add	r3, r2
 800b5a0:	83fb      	strh	r3, [r7, #30]

    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
 800b5a2:	8bfb      	ldrh	r3, [r7, #30]
 800b5a4:	3306      	adds	r3, #6
 800b5a6:	83fb      	strh	r3, [r7, #30]
    style_resize(style, size);
 800b5a8:	8bfb      	ldrh	r3, [r7, #30]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f000 fd8f 	bl	800c0d0 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f010 f94c 	bl	801b854 <lv_debug_check_null>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f083 0301 	eor.w	r3, r3, #1
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d009      	beq.n	800b5dc <_lv_style_set_color+0xbc>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f04f 0400 	mov.w	r4, #0
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	4623      	mov	r3, r4
 800b5d4:	4818      	ldr	r0, [pc, #96]	; (800b638 <_lv_style_set_color+0x118>)
 800b5d6:	f010 f94d 	bl	801b874 <lv_debug_log_error>
 800b5da:	e7fe      	b.n	800b5da <_lv_style_set_color+0xba>
    if(style == NULL) return;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d026      	beq.n	800b630 <_lv_style_set_color+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	8bf9      	ldrh	r1, [r7, #30]
 800b5e8:	7d7b      	ldrb	r3, [r7, #21]
 800b5ea:	1ac9      	subs	r1, r1, r3
 800b5ec:	7d3b      	ldrb	r3, [r7, #20]
 800b5ee:	1acb      	subs	r3, r1, r3
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f107 010a 	add.w	r1, r7, #10
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7ff fb6b 	bl	800acd4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	8bf9      	ldrh	r1, [r7, #30]
 800b604:	7d3b      	ldrb	r3, [r7, #20]
 800b606:	1acb      	subs	r3, r1, r3
 800b608:	3b04      	subs	r3, #4
 800b60a:	4413      	add	r3, r2
 800b60c:	1d39      	adds	r1, r7, #4
 800b60e:	2204      	movs	r2, #4
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff fb5f 	bl	800acd4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	8bf9      	ldrh	r1, [r7, #30]
 800b61c:	7d3b      	ldrb	r3, [r7, #20]
 800b61e:	1acb      	subs	r3, r1, r3
 800b620:	4413      	add	r3, r2
 800b622:	f107 0112 	add.w	r1, r7, #18
 800b626:	2202      	movs	r2, #2
 800b628:	4618      	mov	r0, r3
 800b62a:	f7ff fb53 	bl	800acd4 <_lv_memcpy_small>
 800b62e:	e000      	b.n	800b632 <_lv_style_set_color+0x112>
    if(style == NULL) return;
 800b630:	bf00      	nop
}
 800b632:	3724      	adds	r7, #36	; 0x24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd90      	pop	{r4, r7, pc}
 800b638:	0802834c 	.word	0x0802834c

0800b63c <_lv_style_set_opa>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_opa()`
 * @note for performance reasons it's not checked if the property really has opacity type
 */
void _lv_style_set_opa(lv_style_t * style, lv_style_property_t prop, lv_opa_t opa)
{
 800b63c:	b590      	push	{r4, r7, lr}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	807b      	strh	r3, [r7, #2]
 800b648:	4613      	mov	r3, r2
 800b64a:	707b      	strb	r3, [r7, #1]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b64c:	887b      	ldrh	r3, [r7, #2]
 800b64e:	4619      	mov	r1, r3
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fc9c 	bl	800bf8e <get_property_index>
 800b656:	6138      	str	r0, [r7, #16]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	db1d      	blt.n	800b69a <_lv_style_set_opa+0x5e>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fd74 	bl	800c150 <get_style_prop_attr>
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]
        attr_goal = (prop >> 8) & 0xFFU;
 800b66c:	887b      	ldrh	r3, [r7, #2]
 800b66e:	0a1b      	lsrs	r3, r3, #8
 800b670:	b29b      	uxth	r3, r3
 800b672:	73bb      	strb	r3, [r7, #14]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b674:	7bfa      	ldrb	r2, [r7, #15]
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	4053      	eors	r3, r2
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10a      	bne.n	800b69a <_lv_style_set_opa+0x5e>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	3302      	adds	r3, #2
 800b68c:	4413      	add	r3, r2
 800b68e:	1c79      	adds	r1, r7, #1
 800b690:	2201      	movs	r2, #1
 800b692:	4618      	mov	r0, r3
 800b694:	f7ff fb1e 	bl	800acd4 <_lv_memcpy_small>
            return;
 800b698:	e059      	b.n	800b74e <_lv_style_set_opa+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(lv_opa_t));
 800b69a:	2303      	movs	r3, #3
 800b69c:	737b      	strb	r3, [r7, #13]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b69e:	23ff      	movs	r3, #255	; 0xff
 800b6a0:	817b      	strh	r3, [r7, #10]
    uint8_t end_mark_size = sizeof(end_mark);
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	733b      	strb	r3, [r7, #12]

    uint16_t size = _lv_style_get_mem_size(style);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff fe87 	bl	800b3ba <_lv_style_get_mem_size>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	82fb      	strh	r3, [r7, #22]
    if(size == 0) size += end_mark_size;
 800b6b0:	8afb      	ldrh	r3, [r7, #22]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d104      	bne.n	800b6c0 <_lv_style_set_opa+0x84>
 800b6b6:	7b3b      	ldrb	r3, [r7, #12]
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	8afb      	ldrh	r3, [r7, #22]
 800b6bc:	4413      	add	r3, r2
 800b6be:	82fb      	strh	r3, [r7, #22]

    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
 800b6c0:	8afb      	ldrh	r3, [r7, #22]
 800b6c2:	3303      	adds	r3, #3
 800b6c4:	82fb      	strh	r3, [r7, #22]
    style_resize(style, size);
 800b6c6:	8afb      	ldrh	r3, [r7, #22]
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fd00 	bl	800c0d0 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f010 f8bd 	bl	801b854 <lv_debug_check_null>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	f083 0301 	eor.w	r3, r3, #1
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d009      	beq.n	800b6fa <_lv_style_set_opa+0xbe>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f04f 0400 	mov.w	r4, #0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	4623      	mov	r3, r4
 800b6f2:	4818      	ldr	r0, [pc, #96]	; (800b754 <_lv_style_set_opa+0x118>)
 800b6f4:	f010 f8be 	bl	801b874 <lv_debug_log_error>
 800b6f8:	e7fe      	b.n	800b6f8 <_lv_style_set_opa+0xbc>
    if(style == NULL) return;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d025      	beq.n	800b74c <_lv_style_set_opa+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	8af9      	ldrh	r1, [r7, #22]
 800b706:	7b7b      	ldrb	r3, [r7, #13]
 800b708:	1ac9      	subs	r1, r1, r3
 800b70a:	7b3b      	ldrb	r3, [r7, #12]
 800b70c:	1acb      	subs	r3, r1, r3
 800b70e:	4413      	add	r3, r2
 800b710:	1cb9      	adds	r1, r7, #2
 800b712:	2202      	movs	r2, #2
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff fadd 	bl	800acd4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	8af9      	ldrh	r1, [r7, #22]
 800b720:	7b3b      	ldrb	r3, [r7, #12]
 800b722:	1acb      	subs	r3, r1, r3
 800b724:	3b01      	subs	r3, #1
 800b726:	4413      	add	r3, r2
 800b728:	1c79      	adds	r1, r7, #1
 800b72a:	2201      	movs	r2, #1
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff fad1 	bl	800acd4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	8af9      	ldrh	r1, [r7, #22]
 800b738:	7b3b      	ldrb	r3, [r7, #12]
 800b73a:	1acb      	subs	r3, r1, r3
 800b73c:	4413      	add	r3, r2
 800b73e:	f107 010a 	add.w	r1, r7, #10
 800b742:	2202      	movs	r2, #2
 800b744:	4618      	mov	r0, r3
 800b746:	f7ff fac5 	bl	800acd4 <_lv_memcpy_small>
 800b74a:	e000      	b.n	800b74e <_lv_style_set_opa+0x112>
    if(style == NULL) return;
 800b74c:	bf00      	nop
}
 800b74e:	371c      	adds	r7, #28
 800b750:	46bd      	mov	sp, r7
 800b752:	bd90      	pop	{r4, r7, pc}
 800b754:	0802834c 	.word	0x0802834c

0800b758 <_lv_style_set_ptr>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_width()`
 * @note for performance reasons it's not checked if the property is really has pointer type
 */
void _lv_style_set_ptr(lv_style_t * style, lv_style_property_t prop, const void * p)
{
 800b758:	b590      	push	{r4, r7, lr}
 800b75a:	b089      	sub	sp, #36	; 0x24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	460b      	mov	r3, r1
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b766:	897b      	ldrh	r3, [r7, #10]
 800b768:	4619      	mov	r1, r3
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f000 fc0f 	bl	800bf8e <get_property_index>
 800b770:	61b8      	str	r0, [r7, #24]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	2b00      	cmp	r3, #0
 800b776:	db1d      	blt.n	800b7b4 <_lv_style_set_ptr+0x5c>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	4619      	mov	r1, r3
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f000 fce7 	bl	800c150 <get_style_prop_attr>
 800b782:	4603      	mov	r3, r0
 800b784:	75fb      	strb	r3, [r7, #23]
        attr_goal = (prop >> 8) & 0xFFU;
 800b786:	897b      	ldrh	r3, [r7, #10]
 800b788:	0a1b      	lsrs	r3, r3, #8
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	75bb      	strb	r3, [r7, #22]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b78e:	7dfa      	ldrb	r2, [r7, #23]
 800b790:	7dbb      	ldrb	r3, [r7, #22]
 800b792:	4053      	eors	r3, r2
 800b794:	b2db      	uxtb	r3, r3
 800b796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10a      	bne.n	800b7b4 <_lv_style_set_ptr+0x5c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	3302      	adds	r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	1d39      	adds	r1, r7, #4
 800b7aa:	2204      	movs	r2, #4
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7ff fa91 	bl	800acd4 <_lv_memcpy_small>
            return;
 800b7b2:	e05a      	b.n	800b86a <_lv_style_set_ptr+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(const void *));
 800b7b4:	2306      	movs	r3, #6
 800b7b6:	757b      	strb	r3, [r7, #21]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b7b8:	23ff      	movs	r3, #255	; 0xff
 800b7ba:	827b      	strh	r3, [r7, #18]
    uint8_t end_mark_size = sizeof(end_mark);
 800b7bc:	2302      	movs	r3, #2
 800b7be:	753b      	strb	r3, [r7, #20]

    uint16_t size = _lv_style_get_mem_size(style);
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f7ff fdfa 	bl	800b3ba <_lv_style_get_mem_size>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	83fb      	strh	r3, [r7, #30]
    if(size == 0) size += end_mark_size;
 800b7ca:	8bfb      	ldrh	r3, [r7, #30]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d104      	bne.n	800b7da <_lv_style_set_ptr+0x82>
 800b7d0:	7d3b      	ldrb	r3, [r7, #20]
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	8bfb      	ldrh	r3, [r7, #30]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	83fb      	strh	r3, [r7, #30]

    size += sizeof(lv_style_property_t) + sizeof(const void *);
 800b7da:	8bfb      	ldrh	r3, [r7, #30]
 800b7dc:	3306      	adds	r3, #6
 800b7de:	83fb      	strh	r3, [r7, #30]
    style_resize(style, size);
 800b7e0:	8bfb      	ldrh	r3, [r7, #30]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f000 fc73 	bl	800c0d0 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f010 f830 	bl	801b854 <lv_debug_check_null>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f083 0301 	eor.w	r3, r3, #1
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d009      	beq.n	800b814 <_lv_style_set_ptr+0xbc>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f04f 0400 	mov.w	r4, #0
 800b808:	461a      	mov	r2, r3
 800b80a:	4623      	mov	r3, r4
 800b80c:	4818      	ldr	r0, [pc, #96]	; (800b870 <_lv_style_set_ptr+0x118>)
 800b80e:	f010 f831 	bl	801b874 <lv_debug_log_error>
 800b812:	e7fe      	b.n	800b812 <_lv_style_set_ptr+0xba>
    if(style == NULL) return;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d026      	beq.n	800b868 <_lv_style_set_ptr+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	8bf9      	ldrh	r1, [r7, #30]
 800b820:	7d7b      	ldrb	r3, [r7, #21]
 800b822:	1ac9      	subs	r1, r1, r3
 800b824:	7d3b      	ldrb	r3, [r7, #20]
 800b826:	1acb      	subs	r3, r1, r3
 800b828:	4413      	add	r3, r2
 800b82a:	f107 010a 	add.w	r1, r7, #10
 800b82e:	2202      	movs	r2, #2
 800b830:	4618      	mov	r0, r3
 800b832:	f7ff fa4f 	bl	800acd4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	8bf9      	ldrh	r1, [r7, #30]
 800b83c:	7d3b      	ldrb	r3, [r7, #20]
 800b83e:	1acb      	subs	r3, r1, r3
 800b840:	3b04      	subs	r3, #4
 800b842:	4413      	add	r3, r2
 800b844:	1d39      	adds	r1, r7, #4
 800b846:	2204      	movs	r2, #4
 800b848:	4618      	mov	r0, r3
 800b84a:	f7ff fa43 	bl	800acd4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	8bf9      	ldrh	r1, [r7, #30]
 800b854:	7d3b      	ldrb	r3, [r7, #20]
 800b856:	1acb      	subs	r3, r1, r3
 800b858:	4413      	add	r3, r2
 800b85a:	f107 0112 	add.w	r1, r7, #18
 800b85e:	2202      	movs	r2, #2
 800b860:	4618      	mov	r0, r3
 800b862:	f7ff fa37 	bl	800acd4 <_lv_memcpy_small>
 800b866:	e000      	b.n	800b86a <_lv_style_set_ptr+0x112>
    if(style == NULL) return;
 800b868:	bf00      	nop
}
 800b86a:	3724      	adds	r7, #36	; 0x24
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd90      	pop	{r4, r7, pc}
 800b870:	0802834c 	.word	0x0802834c

0800b874 <_lv_style_get_int>:
 * @return the weight of the found property (how well it fits to the style state).
 *         Higher number is means better fit
 *         -1 if the not found (`res` will be undefined)
 */
int16_t _lv_style_get_int(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b088      	sub	sp, #32
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	460b      	mov	r3, r1
 800b87e:	607a      	str	r2, [r7, #4]
 800b880:	817b      	strh	r3, [r7, #10]
    lv_style_int_t * res = (lv_style_int_t *)v_res;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	61fb      	str	r3, [r7, #28]
    LV_ASSERT_STYLE(style);

    if(style == NULL) return -1;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <_lv_style_get_int+0x1e>
 800b88c:	f04f 33ff 	mov.w	r3, #4294967295
 800b890:	e030      	b.n	800b8f4 <_lv_style_get_int+0x80>
    if(style->map == NULL) return -1;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d102      	bne.n	800b8a0 <_lv_style_get_int+0x2c>
 800b89a:	f04f 33ff 	mov.w	r3, #4294967295
 800b89e:	e029      	b.n	800b8f4 <_lv_style_get_int+0x80>

    int32_t id = get_property_index(style, prop);
 800b8a0:	897b      	ldrh	r3, [r7, #10]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 fb72 	bl	800bf8e <get_property_index>
 800b8aa:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	da02      	bge.n	800b8b8 <_lv_style_get_int+0x44>
        return -1;
 800b8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b6:	e01d      	b.n	800b8f4 <_lv_style_get_int+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	3302      	adds	r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	69f8      	ldr	r0, [r7, #28]
 800b8c8:	f7ff fa04 	bl	800acd4 <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f000 fc3d 	bl	800c150 <get_style_prop_attr>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800b8da:	897b      	ldrh	r3, [r7, #10]
 800b8dc:	0a1b      	lsrs	r3, r3, #8
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	b21b      	sxth	r3, r3
 800b8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ea:	b21a      	sxth	r2, r3
 800b8ec:	7dbb      	ldrb	r3, [r7, #22]
 800b8ee:	b21b      	sxth	r3, r3
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	b21b      	sxth	r3, r3
    }
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3720      	adds	r7, #32
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <_lv_style_get_opa>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_style_get_border_opa()`
 * @note for performance reasons it's not checked if the property really has opacity type
 */
int16_t _lv_style_get_opa(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	460b      	mov	r3, r1
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	817b      	strh	r3, [r7, #10]
    lv_opa_t * res = (lv_opa_t *)v_res;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	61fb      	str	r3, [r7, #28]
    LV_ASSERT_STYLE(style);

    if(style == NULL) return -1;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d102      	bne.n	800b91a <_lv_style_get_opa+0x1e>
 800b914:	f04f 33ff 	mov.w	r3, #4294967295
 800b918:	e030      	b.n	800b97c <_lv_style_get_opa+0x80>
    if(style->map == NULL) return -1;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d102      	bne.n	800b928 <_lv_style_get_opa+0x2c>
 800b922:	f04f 33ff 	mov.w	r3, #4294967295
 800b926:	e029      	b.n	800b97c <_lv_style_get_opa+0x80>

    int32_t id = get_property_index(style, prop);
 800b928:	897b      	ldrh	r3, [r7, #10]
 800b92a:	4619      	mov	r1, r3
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f000 fb2e 	bl	800bf8e <get_property_index>
 800b932:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	2b00      	cmp	r3, #0
 800b938:	da02      	bge.n	800b940 <_lv_style_get_opa+0x44>
        return -1;
 800b93a:	f04f 33ff 	mov.w	r3, #4294967295
 800b93e:	e01d      	b.n	800b97c <_lv_style_get_opa+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	3302      	adds	r3, #2
 800b948:	4413      	add	r3, r2
 800b94a:	2201      	movs	r2, #1
 800b94c:	4619      	mov	r1, r3
 800b94e:	69f8      	ldr	r0, [r7, #28]
 800b950:	f7ff f9c0 	bl	800acd4 <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	4619      	mov	r1, r3
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f000 fbf9 	bl	800c150 <get_style_prop_attr>
 800b95e:	4603      	mov	r3, r0
 800b960:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800b962:	897b      	ldrh	r3, [r7, #10]
 800b964:	0a1b      	lsrs	r3, r3, #8
 800b966:	b29b      	uxth	r3, r3
 800b968:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
 800b96c:	b21b      	sxth	r3, r3
 800b96e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b972:	b21a      	sxth	r2, r3
 800b974:	7dbb      	ldrb	r3, [r7, #22]
 800b976:	b21b      	sxth	r3, r3
 800b978:	4013      	ands	r3, r2
 800b97a:	b21b      	sxth	r3, r3
    }
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3720      	adds	r7, #32
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <_lv_style_get_color>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_style_get_border_color()`
 * @note for performance reasons it's not checked if the property really has color type
 */
int16_t _lv_style_get_color(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b088      	sub	sp, #32
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	460b      	mov	r3, r1
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	817b      	strh	r3, [r7, #10]
    lv_color_t * res = (lv_color_t *)v_res;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	61fb      	str	r3, [r7, #28]
    if(style == NULL) return -1;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d102      	bne.n	800b9a2 <_lv_style_get_color+0x1e>
 800b99c:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a0:	e030      	b.n	800ba04 <_lv_style_get_color+0x80>
    if(style->map == NULL) return -1;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d102      	bne.n	800b9b0 <_lv_style_get_color+0x2c>
 800b9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ae:	e029      	b.n	800ba04 <_lv_style_get_color+0x80>
    int32_t id = get_property_index(style, prop);
 800b9b0:	897b      	ldrh	r3, [r7, #10]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 faea 	bl	800bf8e <get_property_index>
 800b9ba:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	da02      	bge.n	800b9c8 <_lv_style_get_color+0x44>
        return -1;
 800b9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c6:	e01d      	b.n	800ba04 <_lv_style_get_color+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	3302      	adds	r3, #2
 800b9d0:	4413      	add	r3, r2
 800b9d2:	2204      	movs	r2, #4
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	69f8      	ldr	r0, [r7, #28]
 800b9d8:	f7ff f97c 	bl	800acd4 <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 fbb5 	bl	800c150 <get_style_prop_attr>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800b9ea:	897b      	ldrh	r3, [r7, #10]
 800b9ec:	0a1b      	lsrs	r3, r3, #8
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800b9f2:	7dfb      	ldrb	r3, [r7, #23]
 800b9f4:	b21b      	sxth	r3, r3
 800b9f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9fa:	b21a      	sxth	r2, r3
 800b9fc:	7dbb      	ldrb	r3, [r7, #22]
 800b9fe:	b21b      	sxth	r3, r3
 800ba00:	4013      	ands	r3, r2
 800ba02:	b21b      	sxth	r3, r3
    }
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3720      	adds	r7, #32
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <_lv_style_get_ptr>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_style_get_text_font()`
 * @note for performance reasons it's not checked if the property really has pointer type
 */
int16_t _lv_style_get_ptr(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	460b      	mov	r3, r1
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	817b      	strh	r3, [r7, #10]
    const void ** res = (const void **)v_res;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	61fb      	str	r3, [r7, #28]
    if(style == NULL) return -1;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d102      	bne.n	800ba2a <_lv_style_get_ptr+0x1e>
 800ba24:	f04f 33ff 	mov.w	r3, #4294967295
 800ba28:	e030      	b.n	800ba8c <_lv_style_get_ptr+0x80>
    if(style->map == NULL) return -1;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d102      	bne.n	800ba38 <_lv_style_get_ptr+0x2c>
 800ba32:	f04f 33ff 	mov.w	r3, #4294967295
 800ba36:	e029      	b.n	800ba8c <_lv_style_get_ptr+0x80>

    int32_t id = get_property_index(style, prop);
 800ba38:	897b      	ldrh	r3, [r7, #10]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 faa6 	bl	800bf8e <get_property_index>
 800ba42:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	da02      	bge.n	800ba50 <_lv_style_get_ptr+0x44>
        return -1;
 800ba4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4e:	e01d      	b.n	800ba8c <_lv_style_get_ptr+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	3302      	adds	r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	69f8      	ldr	r0, [r7, #28]
 800ba60:	f7ff f938 	bl	800acd4 <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	4619      	mov	r1, r3
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f000 fb71 	bl	800c150 <get_style_prop_attr>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800ba72:	897b      	ldrh	r3, [r7, #10]
 800ba74:	0a1b      	lsrs	r3, r3, #8
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
 800ba7c:	b21b      	sxth	r3, r3
 800ba7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba82:	b21a      	sxth	r2, r3
 800ba84:	7dbb      	ldrb	r3, [r7, #22]
 800ba86:	b21b      	sxth	r3, r3
 800ba88:	4013      	ands	r3, r2
 800ba8a:	b21b      	sxth	r3, r3
    }
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3720      	adds	r7, #32
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <lv_style_list_get_local_style>:
 * Get the local style of a style list
 * @param list pointer to a style list where the local property should be set
 * @return pointer to the local style if exists else `NULL`.
 */
lv_style_t * lv_style_list_get_local_style(lv_style_list_t * list)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(!list->has_local) return NULL;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	791b      	ldrb	r3, [r3, #4]
 800baa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d101      	bne.n	800baae <lv_style_list_get_local_style+0x1a>
 800baaa:	2300      	movs	r3, #0
 800baac:	e00d      	b.n	800baca <lv_style_list_get_local_style+0x36>
    if(list->has_trans) return list->style_list[1];
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	791b      	ldrb	r3, [r3, #4]
 800bab2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <lv_style_list_get_local_style+0x30>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	e002      	b.n	800baca <lv_style_list_get_local_style+0x36>
    else return list->style_list[0];
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	370c      	adds	r7, #12
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <_lv_style_list_get_transition_style>:
 * Get the transition style of a style list
 * @param list pointer to a style list where the local property should be set
 * @return pointer to the transition style if exists else `NULL`.
 */
lv_style_t * _lv_style_list_get_transition_style(lv_style_list_t * list)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(!list->has_trans) return NULL;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	791b      	ldrb	r3, [r3, #4]
 800bae2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <_lv_style_list_get_transition_style+0x1a>
 800baec:	2300      	movs	r3, #0
 800baee:	e002      	b.n	800baf6 <_lv_style_list_get_transition_style+0x20>
    return list->style_list[0];
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
	...

0800bb04 <_lv_style_list_add_trans_style>:
 * Allocate the transition style in a style list. If already exists simply return it.
 * @param list pointer to a style list
 * @return the transition style of a style list
 */
lv_style_t * _lv_style_list_add_trans_style(lv_style_list_t * list)
{
 800bb04:	b590      	push	{r4, r7, lr}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	791b      	ldrb	r3, [r3, #4]
 800bb10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d004      	beq.n	800bb24 <_lv_style_list_add_trans_style+0x20>
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff ffdb 	bl	800bad6 <_lv_style_list_get_transition_style>
 800bb20:	4603      	mov	r3, r0
 800bb22:	e03d      	b.n	800bba0 <_lv_style_list_add_trans_style+0x9c>

    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
 800bb24:	2004      	movs	r0, #4
 800bb26:	f010 fc21 	bl	801c36c <lv_mem_alloc>
 800bb2a:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(trans_style);
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f00f fe91 	bl	801b854 <lv_debug_check_null>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f083 0301 	eor.w	r3, r3, #1
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d008      	beq.n	800bb50 <_lv_style_list_add_trans_style+0x4c>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f04f 0400 	mov.w	r4, #0
 800bb44:	461a      	mov	r2, r3
 800bb46:	4623      	mov	r3, r4
 800bb48:	4817      	ldr	r0, [pc, #92]	; (800bba8 <_lv_style_list_add_trans_style+0xa4>)
 800bb4a:	f00f fe93 	bl	801b874 <lv_debug_log_error>
 800bb4e:	e7fe      	b.n	800bb4e <_lv_style_list_add_trans_style+0x4a>
    if(trans_style == NULL) {
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d101      	bne.n	800bb5a <_lv_style_list_add_trans_style+0x56>
        LV_LOG_WARN("lv_style_list_add_trans_style: couldn't create transition style");
        return NULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	e022      	b.n	800bba0 <_lv_style_list_add_trans_style+0x9c>
    }

    lv_style_init(trans_style);
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f7ff f911 	bl	800ad82 <lv_style_init>

    _lv_style_list_add_style(list, trans_style);
 800bb60:	68f9      	ldr	r1, [r7, #12]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f7ff fa80 	bl	800b068 <_lv_style_list_add_style>
    list->has_trans = 1;
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	7913      	ldrb	r3, [r2, #4]
 800bb6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb70:	7113      	strb	r3, [r2, #4]

    /*If the list has local style trans was added after it. But trans should be the first so swap them*/
    if(list->has_local) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	791b      	ldrb	r3, [r3, #4]
 800bb76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00e      	beq.n	800bb9e <_lv_style_list_add_trans_style+0x9a>
        lv_style_t * tmp = list->style_list[0];
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	60bb      	str	r3, [r7, #8]
        list->style_list[0] = list->style_list[1];
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	6852      	ldr	r2, [r2, #4]
 800bb92:	601a      	str	r2, [r3, #0]
        list->style_list[1] = tmp;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	601a      	str	r2, [r3, #0]
    }
    return trans_style;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3714      	adds	r7, #20
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd90      	pop	{r4, r7, pc}
 800bba8:	0802834c 	.word	0x0802834c

0800bbac <_lv_style_list_get_int>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has integer type
 */
lv_res_t _lv_style_list_get_int(lv_style_list_t * list, lv_style_property_t prop, lv_style_int_t * res)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <_lv_style_list_get_int+0x18>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	e06d      	b.n	800bca0 <_lv_style_list_get_int+0xf4>
    if(list->style_list == NULL) return LV_RES_INV;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <_lv_style_list_get_int+0x24>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e067      	b.n	800bca0 <_lv_style_list_get_int+0xf4>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800bbd0:	897b      	ldrh	r3, [r7, #10]
 800bbd2:	0a1b      	lsrs	r3, r3, #8
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	76fb      	strb	r3, [r7, #27]
    int16_t weight_goal = attr;
 800bbd8:	7efb      	ldrb	r3, [r7, #27]
 800bbda:	833b      	strh	r3, [r7, #24]

    int16_t weight = -1;
 800bbdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbe0:	83fb      	strh	r3, [r7, #30]

    lv_style_int_t value_act = 0;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	823b      	strh	r3, [r7, #16]

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	83bb      	strh	r3, [r7, #28]
 800bbea:	e049      	b.n	800bc80 <_lv_style_list_get_int+0xd4>
        /* changed class to _class to allow compilation as c++ */
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800bbec:	8bbb      	ldrh	r3, [r7, #28]
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f7ff f890 	bl	800ad18 <lv_style_list_get_style>
 800bbf8:	6178      	str	r0, [r7, #20]
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
 800bbfa:	f107 0210 	add.w	r2, r7, #16
 800bbfe:	897b      	ldrh	r3, [r7, #10]
 800bc00:	4619      	mov	r1, r3
 800bc02:	6978      	ldr	r0, [r7, #20]
 800bc04:	f7ff fe36 	bl	800b874 <_lv_style_get_int>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	827b      	strh	r3, [r7, #18]

        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800bc0c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800bc10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d105      	bne.n	800bc24 <_lv_style_list_get_int+0x78>
            *res = value_act;
 800bc18:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	801a      	strh	r2, [r3, #0]
            return LV_RES_OK;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e03d      	b.n	800bca0 <_lv_style_list_get_int+0xf4>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	791b      	ldrb	r3, [r3, #4]
 800bc28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d014      	beq.n	800bc5c <_lv_style_list_get_int+0xb0>
 800bc32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	db10      	blt.n	800bc5c <_lv_style_list_get_int+0xb0>
 800bc3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10c      	bne.n	800bc5c <_lv_style_list_get_int+0xb0>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	795b      	ldrb	r3, [r3, #5]
 800bc46:	f003 0301 	and.w	r3, r3, #1
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d105      	bne.n	800bc5c <_lv_style_list_get_int+0xb0>
            *res = value_act;
 800bc50:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	801a      	strh	r2, [r3, #0]
            return LV_RES_OK;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e021      	b.n	800bca0 <_lv_style_list_get_int+0xf4>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800bc5c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800bc60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	dd05      	ble.n	800bc74 <_lv_style_list_get_int+0xc8>
            weight =  weight_act;
 800bc68:	8a7b      	ldrh	r3, [r7, #18]
 800bc6a:	83fb      	strh	r3, [r7, #30]
            *res = value_act;
 800bc6c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	801a      	strh	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bc74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	83bb      	strh	r3, [r7, #28]
 800bc80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	7912      	ldrb	r2, [r2, #4]
 800bc88:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800bc8c:	b2d2      	uxtb	r2, r2
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	dbac      	blt.n	800bbec <_lv_style_list_get_int+0x40>
        }
    }

    if(weight >= 0) return LV_RES_OK;
 800bc92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	db01      	blt.n	800bc9e <_lv_style_list_get_int+0xf2>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e000      	b.n	800bca0 <_lv_style_list_get_int+0xf4>
    else return LV_RES_INV;
 800bc9e:	2300      	movs	r3, #0

}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3720      	adds	r7, #32
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <_lv_style_list_get_color>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has color type
 */
lv_res_t _lv_style_list_get_color(lv_style_list_t * list, lv_style_property_t prop, lv_color_t * res)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b08a      	sub	sp, #40	; 0x28
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <_lv_style_list_get_color+0x18>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	e06c      	b.n	800bd9a <_lv_style_list_get_color+0xf2>
    if(list->style_list == NULL) return LV_RES_INV;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <_lv_style_list_get_color+0x24>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	e066      	b.n	800bd9a <_lv_style_list_get_color+0xf2>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800bccc:	897b      	ldrh	r3, [r7, #10]
 800bcce:	0a1b      	lsrs	r3, r3, #8
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int16_t weight_goal = attr;
 800bcd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bcda:	843b      	strh	r3, [r7, #32]

    int16_t weight = -1;
 800bcdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bce0:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_color_t value_act;
    value_act.full = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	617b      	str	r3, [r7, #20]

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bce6:	2300      	movs	r3, #0
 800bce8:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bcea:	e046      	b.n	800bd7a <_lv_style_list_get_color+0xd2>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800bcec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f7ff f810 	bl	800ad18 <lv_style_list_get_style>
 800bcf8:	61f8      	str	r0, [r7, #28]
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
 800bcfa:	f107 0214 	add.w	r2, r7, #20
 800bcfe:	897b      	ldrh	r3, [r7, #10]
 800bd00:	4619      	mov	r1, r3
 800bd02:	69f8      	ldr	r0, [r7, #28]
 800bd04:	f7ff fe3e 	bl	800b984 <_lv_style_get_color>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	837b      	strh	r3, [r7, #26]
        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800bd0c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800bd10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d104      	bne.n	800bd22 <_lv_style_list_get_color+0x7a>
            *res = value_act;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e03b      	b.n	800bd9a <_lv_style_list_get_color+0xf2>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	791b      	ldrb	r3, [r3, #4]
 800bd26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d013      	beq.n	800bd58 <_lv_style_list_get_color+0xb0>
 800bd30:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	db0f      	blt.n	800bd58 <_lv_style_list_get_color+0xb0>
 800bd38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10b      	bne.n	800bd58 <_lv_style_list_get_color+0xb0>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	795b      	ldrb	r3, [r3, #5]
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d104      	bne.n	800bd58 <_lv_style_list_get_color+0xb0>
            *res = value_act;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800bd54:	2301      	movs	r3, #1
 800bd56:	e020      	b.n	800bd9a <_lv_style_list_get_color+0xf2>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800bd58:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800bd5c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bd60:	429a      	cmp	r2, r3
 800bd62:	dd04      	ble.n	800bd6e <_lv_style_list_get_color+0xc6>
            weight =  weight_act;
 800bd64:	8b7b      	ldrh	r3, [r7, #26]
 800bd66:	84fb      	strh	r3, [r7, #38]	; 0x26
            *res = value_act;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	601a      	str	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bd6e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	3301      	adds	r3, #1
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bd7a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	7912      	ldrb	r2, [r2, #4]
 800bd82:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800bd86:	b2d2      	uxtb	r2, r2
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	dbaf      	blt.n	800bcec <_lv_style_list_get_color+0x44>
        }
    }

    if(weight >= 0)  return LV_RES_OK;
 800bd8c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	db01      	blt.n	800bd98 <_lv_style_list_get_color+0xf0>
 800bd94:	2301      	movs	r3, #1
 800bd96:	e000      	b.n	800bd9a <_lv_style_list_get_color+0xf2>
    else return LV_RES_INV;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3728      	adds	r7, #40	; 0x28
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <_lv_style_list_get_opa>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has opacity type
 */
lv_res_t _lv_style_list_get_opa(lv_style_list_t * list, lv_style_property_t prop, lv_opa_t * res)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b088      	sub	sp, #32
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	60f8      	str	r0, [r7, #12]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <_lv_style_list_get_opa+0x18>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	e06a      	b.n	800be90 <_lv_style_list_get_opa+0xee>
    if(list->style_list == NULL) return LV_RES_INV;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <_lv_style_list_get_opa+0x24>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e064      	b.n	800be90 <_lv_style_list_get_opa+0xee>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800bdc6:	897b      	ldrh	r3, [r7, #10]
 800bdc8:	0a1b      	lsrs	r3, r3, #8
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	76fb      	strb	r3, [r7, #27]
    int16_t weight_goal = attr;
 800bdce:	7efb      	ldrb	r3, [r7, #27]
 800bdd0:	833b      	strh	r3, [r7, #24]

    int16_t weight = -1;
 800bdd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdd6:	83fb      	strh	r3, [r7, #30]

    lv_opa_t value_act = LV_OPA_TRANSP;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	747b      	strb	r3, [r7, #17]

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bddc:	2300      	movs	r3, #0
 800bdde:	83bb      	strh	r3, [r7, #28]
 800bde0:	e046      	b.n	800be70 <_lv_style_list_get_opa+0xce>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800bde2:	8bbb      	ldrh	r3, [r7, #28]
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	4619      	mov	r1, r3
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f7fe ff95 	bl	800ad18 <lv_style_list_get_style>
 800bdee:	6178      	str	r0, [r7, #20]
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
 800bdf0:	f107 0211 	add.w	r2, r7, #17
 800bdf4:	897b      	ldrh	r3, [r7, #10]
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6978      	ldr	r0, [r7, #20]
 800bdfa:	f7ff fd7f 	bl	800b8fc <_lv_style_get_opa>
 800bdfe:	4603      	mov	r3, r0
 800be00:	827b      	strh	r3, [r7, #18]
        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800be02:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800be06:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d104      	bne.n	800be18 <_lv_style_list_get_opa+0x76>
            *res = value_act;
 800be0e:	7c7a      	ldrb	r2, [r7, #17]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	701a      	strb	r2, [r3, #0]
            return LV_RES_OK;
 800be14:	2301      	movs	r3, #1
 800be16:	e03b      	b.n	800be90 <_lv_style_list_get_opa+0xee>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	791b      	ldrb	r3, [r3, #4]
 800be1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be20:	b2db      	uxtb	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d013      	beq.n	800be4e <_lv_style_list_get_opa+0xac>
 800be26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	db0f      	blt.n	800be4e <_lv_style_list_get_opa+0xac>
 800be2e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10b      	bne.n	800be4e <_lv_style_list_get_opa+0xac>
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	795b      	ldrb	r3, [r3, #5]
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	2b00      	cmp	r3, #0
 800be42:	d104      	bne.n	800be4e <_lv_style_list_get_opa+0xac>
            *res = value_act;
 800be44:	7c7a      	ldrb	r2, [r7, #17]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	701a      	strb	r2, [r3, #0]
            return LV_RES_OK;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e020      	b.n	800be90 <_lv_style_list_get_opa+0xee>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800be4e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800be52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800be56:	429a      	cmp	r2, r3
 800be58:	dd04      	ble.n	800be64 <_lv_style_list_get_opa+0xc2>
            weight =  weight_act;
 800be5a:	8a7b      	ldrh	r3, [r7, #18]
 800be5c:	83fb      	strh	r3, [r7, #30]
            *res = value_act;
 800be5e:	7c7a      	ldrb	r2, [r7, #17]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	701a      	strb	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800be64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800be68:	b29b      	uxth	r3, r3
 800be6a:	3301      	adds	r3, #1
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	83bb      	strh	r3, [r7, #28]
 800be70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	7912      	ldrb	r2, [r2, #4]
 800be78:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800be7c:	b2d2      	uxtb	r2, r2
 800be7e:	4293      	cmp	r3, r2
 800be80:	dbaf      	blt.n	800bde2 <_lv_style_list_get_opa+0x40>
        }
    }

    if(weight >= 0)  return LV_RES_OK;
 800be82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800be86:	2b00      	cmp	r3, #0
 800be88:	db01      	blt.n	800be8e <_lv_style_list_get_opa+0xec>
 800be8a:	2301      	movs	r3, #1
 800be8c:	e000      	b.n	800be90 <_lv_style_list_get_opa+0xee>
    else return LV_RES_INV;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3720      	adds	r7, #32
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <_lv_style_list_get_ptr>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has pointer type
 */
lv_res_t _lv_style_list_get_ptr(lv_style_list_t * list, lv_style_property_t prop, const void ** res)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b08a      	sub	sp, #40	; 0x28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	460b      	mov	r3, r1
 800bea2:	607a      	str	r2, [r7, #4]
 800bea4:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d101      	bne.n	800beb0 <_lv_style_list_get_ptr+0x18>
 800beac:	2300      	movs	r3, #0
 800beae:	e06a      	b.n	800bf86 <_lv_style_list_get_ptr+0xee>
    if(list->style_list == NULL) return LV_RES_INV;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <_lv_style_list_get_ptr+0x24>
 800beb8:	2300      	movs	r3, #0
 800beba:	e064      	b.n	800bf86 <_lv_style_list_get_ptr+0xee>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800bebc:	897b      	ldrh	r3, [r7, #10]
 800bebe:	0a1b      	lsrs	r3, r3, #8
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int16_t weight_goal = attr;
 800bec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800beca:	843b      	strh	r3, [r7, #32]

    int16_t weight = -1;
 800becc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bed0:	84fb      	strh	r3, [r7, #38]	; 0x26

    const void * value_act;

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bed2:	2300      	movs	r3, #0
 800bed4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bed6:	e046      	b.n	800bf66 <_lv_style_list_get_ptr+0xce>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800bed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	4619      	mov	r1, r3
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f7fe ff1a 	bl	800ad18 <lv_style_list_get_style>
 800bee4:	61f8      	str	r0, [r7, #28]
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
 800bee6:	f107 0214 	add.w	r2, r7, #20
 800beea:	897b      	ldrh	r3, [r7, #10]
 800beec:	4619      	mov	r1, r3
 800beee:	69f8      	ldr	r0, [r7, #28]
 800bef0:	f7ff fd8c 	bl	800ba0c <_lv_style_get_ptr>
 800bef4:	4603      	mov	r3, r0
 800bef6:	837b      	strh	r3, [r7, #26]
        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800bef8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800befc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d104      	bne.n	800bf0e <_lv_style_list_get_ptr+0x76>
            *res = value_act;
 800bf04:	697a      	ldr	r2, [r7, #20]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e03b      	b.n	800bf86 <_lv_style_list_get_ptr+0xee>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	791b      	ldrb	r3, [r3, #4]
 800bf12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d013      	beq.n	800bf44 <_lv_style_list_get_ptr+0xac>
 800bf1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	db0f      	blt.n	800bf44 <_lv_style_list_get_ptr+0xac>
 800bf24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d10b      	bne.n	800bf44 <_lv_style_list_get_ptr+0xac>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	795b      	ldrb	r3, [r3, #5]
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d104      	bne.n	800bf44 <_lv_style_list_get_ptr+0xac>
            *res = value_act;
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e020      	b.n	800bf86 <_lv_style_list_get_ptr+0xee>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800bf44:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800bf48:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	dd04      	ble.n	800bf5a <_lv_style_list_get_ptr+0xc2>
            weight =  weight_act;
 800bf50:	8b7b      	ldrh	r3, [r7, #26]
 800bf52:	84fb      	strh	r3, [r7, #38]	; 0x26
            *res = value_act;
 800bf54:	697a      	ldr	r2, [r7, #20]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	601a      	str	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bf5a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	3301      	adds	r3, #1
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bf66:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	7912      	ldrb	r2, [r2, #4]
 800bf6e:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800bf72:	b2d2      	uxtb	r2, r2
 800bf74:	4293      	cmp	r3, r2
 800bf76:	dbaf      	blt.n	800bed8 <_lv_style_list_get_ptr+0x40>
        }
    }

    if(weight >= 0)  return LV_RES_OK;
 800bf78:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	db01      	blt.n	800bf84 <_lv_style_list_get_ptr+0xec>
 800bf80:	2301      	movs	r3, #1
 800bf82:	e000      	b.n	800bf86 <_lv_style_list_get_ptr+0xee>
    else return LV_RES_INV;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3728      	adds	r7, #40	; 0x28
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <get_property_index>:
 * @param prop a style property ORed with a state.
 * E.g. `LV_STYLE_TEXT_FONT | (LV_STATE_PRESSED << LV_STYLE_STATE_POS)`
 * @return
 */
LV_ATTRIBUTE_FAST_MEM static inline int32_t get_property_index(const lv_style_t * style, lv_style_property_t prop)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b086      	sub	sp, #24
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	460b      	mov	r3, r1
 800bf98:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_STYLE(style);

    if(style->map == NULL) return -1;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d102      	bne.n	800bfa8 <get_property_index+0x1a>
 800bfa2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa6:	e04b      	b.n	800c040 <get_property_index+0xb2>

    uint8_t id_to_find = prop & 0xFF;
 800bfa8:	887b      	ldrh	r3, [r7, #2]
 800bfaa:	73fb      	strb	r3, [r7, #15]
    lv_style_attr_t attr;
    attr = (prop >> 8) & 0xFF;
 800bfac:	887b      	ldrh	r3, [r7, #2]
 800bfae:	0a1b      	lsrs	r3, r3, #8
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	73bb      	strb	r3, [r7, #14]

    int16_t weight = -1;
 800bfb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfb8:	82fb      	strh	r3, [r7, #22]
    int16_t id_guess = -1;
 800bfba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfbe:	82bb      	strh	r3, [r7, #20]

    size_t i = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	613b      	str	r3, [r7, #16]

    uint8_t prop_id;
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800bfc4:	e031      	b.n	800c02a <get_property_index+0x9c>
        if(prop_id == id_to_find) {
 800bfc6:	7b7a      	ldrb	r2, [r7, #13]
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d127      	bne.n	800c01e <get_property_index+0x90>
            lv_style_attr_t attr_i;
            attr_i = get_style_prop_attr(style, i);
 800bfce:	6939      	ldr	r1, [r7, #16]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f8bd 	bl	800c150 <get_style_prop_attr>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	733b      	strb	r3, [r7, #12]

            /*If the state perfectly matches return this property*/
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 800bfda:	7b3a      	ldrb	r2, [r7, #12]
 800bfdc:	7bbb      	ldrb	r3, [r7, #14]
 800bfde:	4053      	eors	r3, r2
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <get_property_index+0x60>
                return i;
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	e028      	b.n	800c040 <get_property_index+0xb2>
            }
            /* Be sure the property not specifies other state than the requested.
             * E.g. For HOVER+PRESS, HOVER only is OK, but HOVER+FOCUS not*/
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800bfee:	7b3b      	ldrb	r3, [r7, #12]
 800bff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
 800bff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bffa:	43db      	mvns	r3, r3
 800bffc:	4013      	ands	r3, r2
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10d      	bne.n	800c01e <get_property_index+0x90>
                /* Use this property if it describes better the requested state than the current candidate.
                 * E.g. for HOVER+FOCUS+PRESS prefer HOVER+FOCUS over FOCUS*/
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 800c002:	7b3b      	ldrb	r3, [r7, #12]
 800c004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c008:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	dd06      	ble.n	800c01e <get_property_index+0x90>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 800c010:	7b3b      	ldrb	r3, [r7, #12]
 800c012:	b21b      	sxth	r3, r3
 800c014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c018:	82fb      	strh	r3, [r7, #22]
                    id_guess = i;
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	82bb      	strh	r3, [r7, #20]
                }
            }
        }

        i = get_next_prop_index(prop_id, i);
 800c01e:	7b7b      	ldrb	r3, [r7, #13]
 800c020:	6939      	ldr	r1, [r7, #16]
 800c022:	4618      	mov	r0, r3
 800c024:	f000 f8cf 	bl	800c1c6 <get_next_prop_index>
 800c028:	6138      	str	r0, [r7, #16]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800c02a:	6939      	ldr	r1, [r7, #16]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f880 	bl	800c132 <get_style_prop_id>
 800c032:	4603      	mov	r3, r0
 800c034:	737b      	strb	r3, [r7, #13]
 800c036:	7b7b      	ldrb	r3, [r7, #13]
 800c038:	2bff      	cmp	r3, #255	; 0xff
 800c03a:	d1c4      	bne.n	800bfc6 <get_property_index+0x38>
    }

    return id_guess;
 800c03c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
 800c048:	b590      	push	{r4, r7, lr}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	791b      	ldrb	r3, [r3, #4]
 800c054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d009      	beq.n	800c072 <get_alloc_local_style+0x2a>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	791b      	ldrb	r3, [r3, #4]
 800c062:	09db      	lsrs	r3, r3, #7
 800c064:	b2db      	uxtb	r3, r3
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7fe fe55 	bl	800ad18 <lv_style_list_get_style>
 800c06e:	4603      	mov	r3, r0
 800c070:	e027      	b.n	800c0c2 <get_alloc_local_style+0x7a>

    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
 800c072:	2004      	movs	r0, #4
 800c074:	f010 f97a 	bl	801c36c <lv_mem_alloc>
 800c078:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(local_style);
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f00f fbea 	bl	801b854 <lv_debug_check_null>
 800c080:	4603      	mov	r3, r0
 800c082:	f083 0301 	eor.w	r3, r3, #1
 800c086:	b2db      	uxtb	r3, r3
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d008      	beq.n	800c09e <get_alloc_local_style+0x56>
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f04f 0400 	mov.w	r4, #0
 800c092:	461a      	mov	r2, r3
 800c094:	4623      	mov	r3, r4
 800c096:	480d      	ldr	r0, [pc, #52]	; (800c0cc <get_alloc_local_style+0x84>)
 800c098:	f00f fbec 	bl	801b874 <lv_debug_log_error>
 800c09c:	e7fe      	b.n	800c09c <get_alloc_local_style+0x54>
    if(local_style == NULL) {
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d101      	bne.n	800c0a8 <get_alloc_local_style+0x60>
        LV_LOG_WARN("get_local_style: couldn't create local style");
        return NULL;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	e00c      	b.n	800c0c2 <get_alloc_local_style+0x7a>
    }
    lv_style_init(local_style);
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f7fe fe6a 	bl	800ad82 <lv_style_init>

    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
 800c0ae:	68f9      	ldr	r1, [r7, #12]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7fe ffd9 	bl	800b068 <_lv_style_list_add_style>
    list->has_local = 1;
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	7913      	ldrb	r3, [r2, #4]
 800c0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0be:	7113      	strb	r3, [r2, #4]

    return local_style;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3714      	adds	r7, #20
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd90      	pop	{r4, r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	0802834c 	.word	0x0802834c

0800c0d0 <style_resize>:
 * Resizes a style map. Useful entry point for debugging.
 * @param style pointer to the style to be resized.
 * @param size new size
 */
static inline void style_resize(lv_style_t * style, size_t sz)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
    style->map = lv_mem_realloc(style->map, sz);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f010 f9e3 	bl	801c4ac <lv_mem_realloc>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	601a      	str	r2, [r3, #0]
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <get_style_prop>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return property in style->map + idx
 */
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
    lv_style_property_t prop;
    uint8_t * prop_p = (uint8_t *)&prop;
 800c0fe:	f107 030a 	add.w	r3, r7, #10
 800c102:	60fb      	str	r3, [r7, #12]
    prop_p[0] = style->map[idx];
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	4413      	add	r3, r2
 800c10c:	781a      	ldrb	r2, [r3, #0]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	701a      	strb	r2, [r3, #0]
    prop_p[1] = style->map[idx + 1];
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	3301      	adds	r3, #1
 800c11a:	441a      	add	r2, r3
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	3301      	adds	r3, #1
 800c120:	7812      	ldrb	r2, [r2, #0]
 800c122:	701a      	strb	r2, [r3, #0]
    return prop;
 800c124:	897b      	ldrh	r3, [r7, #10]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <get_style_prop_id>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return id of property in style->map + idx
 */
static inline uint8_t get_style_prop_id(const lv_style_t * style, size_t idx)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b082      	sub	sp, #8
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	6039      	str	r1, [r7, #0]
    return get_style_prop(style, idx) & 0xFF;
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7ff ffd8 	bl	800c0f4 <get_style_prop>
 800c144:	4603      	mov	r3, r0
 800c146:	b2db      	uxtb	r3, r3
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <get_style_prop_attr>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline uint8_t get_style_prop_attr(const lv_style_t * style, size_t idx)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7ff ffc9 	bl	800c0f4 <get_style_prop>
 800c162:	4603      	mov	r3, r0
 800c164:	0a1b      	lsrs	r3, r3, #8
 800c166:	b29b      	uxth	r3, r3
 800c168:	b2db      	uxtb	r3, r3
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <get_prop_size>:
 * @param prop_id property id.
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
 800c172:	b480      	push	{r7}
 800c174:	b085      	sub	sp, #20
 800c176:	af00      	add	r7, sp, #0
 800c178:	4603      	mov	r3, r0
 800c17a:	71fb      	strb	r3, [r7, #7]
    prop_id &= 0xF;
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	f003 030f 	and.w	r3, r3, #15
 800c182:	71fb      	strb	r3, [r7, #7]
    size_t size = sizeof(lv_style_property_t);
 800c184:	2302      	movs	r3, #2
 800c186:	60fb      	str	r3, [r7, #12]
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 800c188:	79fb      	ldrb	r3, [r7, #7]
 800c18a:	2b08      	cmp	r3, #8
 800c18c:	d803      	bhi.n	800c196 <get_prop_size+0x24>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3302      	adds	r3, #2
 800c192:	60fb      	str	r3, [r7, #12]
 800c194:	e010      	b.n	800c1b8 <get_prop_size+0x46>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
 800c196:	79fb      	ldrb	r3, [r7, #7]
 800c198:	2b0b      	cmp	r3, #11
 800c19a:	d803      	bhi.n	800c1a4 <get_prop_size+0x32>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	60fb      	str	r3, [r7, #12]
 800c1a2:	e009      	b.n	800c1b8 <get_prop_size+0x46>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 800c1a4:	79fb      	ldrb	r3, [r7, #7]
 800c1a6:	2b0d      	cmp	r3, #13
 800c1a8:	d803      	bhi.n	800c1b2 <get_prop_size+0x40>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	60fb      	str	r3, [r7, #12]
 800c1b0:	e002      	b.n	800c1b8 <get_prop_size+0x46>
    else size += sizeof(const void *);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	60fb      	str	r3, [r7, #12]
    return size;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <get_next_prop_index>:
 * @param prop_id property id.
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b082      	sub	sp, #8
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	6039      	str	r1, [r7, #0]
 800c1d0:	71fb      	strb	r3, [r7, #7]
    return idx + get_prop_size(prop_id);
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7ff ffcc 	bl	800c172 <get_prop_size>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	4413      	add	r3, r2
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	79fb      	ldrb	r3, [r7, #7]
 800c1fc:	fb03 f202 	mul.w	r2, r3, r2
 800c200:	7abb      	ldrb	r3, [r7, #10]
 800c202:	4619      	mov	r1, r3
 800c204:	79fb      	ldrb	r3, [r7, #7]
 800c206:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c20a:	fb03 f301 	mul.w	r3, r3, r1
 800c20e:	4413      	add	r3, r2
 800c210:	461a      	mov	r2, r3
 800c212:	4613      	mov	r3, r2
 800c214:	021b      	lsls	r3, r3, #8
 800c216:	4413      	add	r3, r2
 800c218:	01db      	lsls	r3, r3, #7
 800c21a:	4413      	add	r3, r2
 800c21c:	0ddb      	lsrs	r3, r3, #23
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c222:	7b7b      	ldrb	r3, [r7, #13]
 800c224:	461a      	mov	r2, r3
 800c226:	79fb      	ldrb	r3, [r7, #7]
 800c228:	fb03 f202 	mul.w	r2, r3, r2
 800c22c:	7a7b      	ldrb	r3, [r7, #9]
 800c22e:	4619      	mov	r1, r3
 800c230:	79fb      	ldrb	r3, [r7, #7]
 800c232:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c236:	fb03 f301 	mul.w	r3, r3, r1
 800c23a:	4413      	add	r3, r2
 800c23c:	461a      	mov	r2, r3
 800c23e:	4613      	mov	r3, r2
 800c240:	021b      	lsls	r3, r3, #8
 800c242:	4413      	add	r3, r2
 800c244:	01db      	lsls	r3, r3, #7
 800c246:	4413      	add	r3, r2
 800c248:	0ddb      	lsrs	r3, r3, #23
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c24e:	7b3b      	ldrb	r3, [r7, #12]
 800c250:	461a      	mov	r2, r3
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	fb03 f202 	mul.w	r2, r3, r2
 800c258:	7a3b      	ldrb	r3, [r7, #8]
 800c25a:	4619      	mov	r1, r3
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c262:	fb03 f301 	mul.w	r3, r3, r1
 800c266:	4413      	add	r3, r2
 800c268:	461a      	mov	r2, r3
 800c26a:	4613      	mov	r3, r2
 800c26c:	021b      	lsls	r3, r3, #8
 800c26e:	4413      	add	r3, r2
 800c270:	01db      	lsls	r3, r3, #7
 800c272:	4413      	add	r3, r2
 800c274:	0ddb      	lsrs	r3, r3, #23
 800c276:	b2db      	uxtb	r3, r3
 800c278:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 800c27a:	23ff      	movs	r3, #255	; 0xff
 800c27c:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800c27e:	697b      	ldr	r3, [r7, #20]
}
 800c280:	4618      	mov	r0, r3
 800c282:	371c      	adds	r7, #28
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <lv_color_premult>:

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	460b      	mov	r3, r1
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	72fb      	strb	r3, [r7, #11]
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800c29a:	7bbb      	ldrb	r3, [r7, #14]
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	7afb      	ldrb	r3, [r7, #11]
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	fb12 f303 	smulbb	r3, r2, r3
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	801a      	strh	r2, [r3, #0]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800c2ac:	7b7b      	ldrb	r3, [r7, #13]
 800c2ae:	b299      	uxth	r1, r3
 800c2b0:	7afb      	ldrb	r3, [r7, #11]
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	3302      	adds	r3, #2
 800c2b8:	fb11 f202 	smulbb	r2, r1, r2
 800c2bc:	b292      	uxth	r2, r2
 800c2be:	801a      	strh	r2, [r3, #0]
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800c2c0:	7b3b      	ldrb	r3, [r7, #12]
 800c2c2:	b299      	uxth	r1, r3
 800c2c4:	7afb      	ldrb	r3, [r7, #11]
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	fb11 f202 	smulbb	r2, r1, r2
 800c2d0:	b292      	uxth	r2, r2
 800c2d2:	801a      	strh	r2, [r3, #0]
    out[0] = LV_COLOR_GET_R(c);
    out[1] = LV_COLOR_GET_G(c);
    out[2] = LV_COLOR_GET_B(c);
#endif

}
 800c2d4:	bf00      	nop
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <lv_color_mix_premult>:
 *            Should be modified like mix = `255 - mix`
 * @return the mixed color
 * @note 255 won't give clearly `c1`.
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b087      	sub	sp, #28
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	7abb      	ldrb	r3, [r7, #10]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	79fb      	ldrb	r3, [r7, #7]
 800c2fa:	fb03 f301 	mul.w	r3, r3, r1
 800c2fe:	4413      	add	r3, r2
 800c300:	461a      	mov	r2, r3
 800c302:	4613      	mov	r3, r2
 800c304:	021b      	lsls	r3, r3, #8
 800c306:	4413      	add	r3, r2
 800c308:	01db      	lsls	r3, r3, #7
 800c30a:	4413      	add	r3, r2
 800c30c:	0ddb      	lsrs	r3, r3, #23
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3302      	adds	r3, #2
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	461a      	mov	r2, r3
 800c31a:	7a7b      	ldrb	r3, [r7, #9]
 800c31c:	4619      	mov	r1, r3
 800c31e:	79fb      	ldrb	r3, [r7, #7]
 800c320:	fb03 f301 	mul.w	r3, r3, r1
 800c324:	4413      	add	r3, r2
 800c326:	461a      	mov	r2, r3
 800c328:	4613      	mov	r3, r2
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	4413      	add	r3, r2
 800c32e:	01db      	lsls	r3, r3, #7
 800c330:	4413      	add	r3, r2
 800c332:	0ddb      	lsrs	r3, r3, #23
 800c334:	b2db      	uxtb	r3, r3
 800c336:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3304      	adds	r3, #4
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	461a      	mov	r2, r3
 800c340:	7a3b      	ldrb	r3, [r7, #8]
 800c342:	4619      	mov	r1, r3
 800c344:	79fb      	ldrb	r3, [r7, #7]
 800c346:	fb03 f301 	mul.w	r3, r3, r1
 800c34a:	4413      	add	r3, r2
 800c34c:	461a      	mov	r2, r3
 800c34e:	4613      	mov	r3, r2
 800c350:	021b      	lsls	r3, r3, #8
 800c352:	4413      	add	r3, r2
 800c354:	01db      	lsls	r3, r3, #7
 800c356:	4413      	add	r3, r2
 800c358:	0ddb      	lsrs	r3, r3, #23
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 800c35e:	23ff      	movs	r3, #255	; 0xff
 800c360:	75fb      	strb	r3, [r7, #23]
    LV_COLOR_SET_G(c1, premult_c1[1]);
    LV_COLOR_SET_B(c1, premult_c1[2]);
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
#endif

    return ret;
 800c362:	697b      	ldr	r3, [r7, #20]
}
 800c364:	4618      	mov	r0, r3
 800c366:	371c      	adds	r7, #28
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c37e:	b29a      	uxth	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c386:	b29b      	uxth	r3, r3
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	3301      	adds	r3, #1
 800c38e:	b29b      	uxth	r3, r3
 800c390:	b21b      	sxth	r3, r3
}
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800c39e:	b480      	push	{r7}
 800c3a0:	b083      	sub	sp, #12
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	b21b      	sxth	r3, r3
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <_lv_blend_fill>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,
                                          lv_color_t color, lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_opa_t opa,
                                          lv_blend_mode_t mode)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b092      	sub	sp, #72	; 0x48
 800c3d0:	af04      	add	r7, sp, #16
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
 800c3d8:	603b      	str	r3, [r7, #0]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
 800c3da:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	f240 80bd 	bls.w	800c55e <_lv_blend_fill+0x192>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c3e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	f000 80ba 	beq.w	800c562 <_lv_blend_fill+0x196>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c3ee:	f7fd fe0f 	bl	800a010 <_lv_refr_get_disp_refreshing>
 800c3f2:	6338      	str	r0, [r7, #48]	; 0x30
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c3f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3f6:	f00d fefb 	bl	801a1f0 <lv_disp_get_buf>
 800c3fa:	62f8      	str	r0, [r7, #44]	; 0x2c
    const lv_area_t * disp_area = &vdb->area;
 800c3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fe:	3310      	adds	r3, #16
 800c400:	62bb      	str	r3, [r7, #40]	; 0x28
    lv_color_t * disp_buf = vdb->buf_act;
 800c402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	627b      	str	r3, [r7, #36]	; 0x24

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d004      	beq.n	800c41a <_lv_blend_fill+0x4e>
 800c410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c416:	4610      	mov	r0, r2
 800c418:	4798      	blx	r3

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 800c41a:	f107 0314 	add.w	r3, r7, #20
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	68f9      	ldr	r1, [r7, #12]
 800c422:	4618      	mov	r0, r3
 800c424:	f00e fbbc 	bl	801aba0 <_lv_area_intersect>
 800c428:	4603      	mov	r3, r0
 800c42a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(!is_common) return;
 800c42e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c432:	f083 0301 	eor.w	r3, r3, #1
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f040 8094 	bne.w	800c566 <_lv_blend_fill+0x19a>

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800c43e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c442:	b29a      	uxth	r2, r3
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	b29b      	uxth	r3, r3
 800c450:	b21b      	sxth	r3, r3
 800c452:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 -= disp_area->y1;
 800c454:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c458:	b29a      	uxth	r2, r3
 800c45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c460:	b29b      	uxth	r3, r3
 800c462:	1ad3      	subs	r3, r2, r3
 800c464:	b29b      	uxth	r3, r3
 800c466:	b21b      	sxth	r3, r3
 800c468:	82fb      	strh	r3, [r7, #22]
    draw_area.x2 -= disp_area->x1;
 800c46a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c46e:	b29a      	uxth	r2, r3
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c472:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c476:	b29b      	uxth	r3, r3
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	b21b      	sxth	r3, r3
 800c47e:	833b      	strh	r3, [r7, #24]
    draw_area.y2 -= disp_area->y1;
 800c480:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c484:	b29a      	uxth	r2, r3
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	b29b      	uxth	r3, r3
 800c492:	b21b      	sxth	r3, r3
 800c494:	837b      	strh	r3, [r7, #26]

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d025      	beq.n	800c4e8 <_lv_blend_fill+0x11c>
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	7a1b      	ldrb	r3, [r3, #8]
 800c4a0:	f003 0301 	and.w	r3, r3, #1
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d11e      	bne.n	800c4e8 <_lv_blend_fill+0x11c>
#else
    if(mask)
#endif
    {
        int32_t mask_w = lv_area_get_width(&draw_area);
 800c4aa:	f107 0314 	add.w	r3, r7, #20
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7ff ff5e 	bl	800c370 <lv_area_get_width>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	61fb      	str	r3, [r7, #28]
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c4bc:	e010      	b.n	800c4e0 <_lv_blend_fill+0x114>
 800c4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	2b80      	cmp	r3, #128	; 0x80
 800c4c8:	d901      	bls.n	800c4ce <_lv_blend_fill+0x102>
 800c4ca:	21ff      	movs	r1, #255	; 0xff
 800c4cc:	e000      	b.n	800c4d0 <_lv_blend_fill+0x104>
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	460a      	mov	r2, r1
 800c4d8:	701a      	strb	r2, [r3, #0]
 800c4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4dc:	3301      	adds	r3, #1
 800c4de:	637b      	str	r3, [r7, #52]	; 0x34
 800c4e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	dbea      	blt.n	800c4be <_lv_blend_fill+0xf2>
    }

    if(disp->driver.set_px_cb) {
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00f      	beq.n	800c510 <_lv_blend_fill+0x144>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
 800c4f0:	f107 0214 	add.w	r2, r7, #20
 800c4f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c4f8:	9302      	str	r3, [sp, #8]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c502:	9300      	str	r3, [sp, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c50a:	f000 f907 	bl	800c71c <fill_set_px>
 800c50e:	e02b      	b.n	800c568 <_lv_blend_fill+0x19c>
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
 800c510:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10f      	bne.n	800c538 <_lv_blend_fill+0x16c>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
 800c518:	f107 0214 	add.w	r2, r7, #20
 800c51c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c520:	9302      	str	r3, [sp, #8]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c532:	f000 f98d 	bl	800c850 <fill_normal>
 800c536:	e017      	b.n	800c568 <_lv_blend_fill+0x19c>
    }
#if LV_USE_BLEND_MODES
    else {
        fill_blended(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res, mode);
 800c538:	f107 0214 	add.w	r2, r7, #20
 800c53c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c540:	9303      	str	r3, [sp, #12]
 800c542:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c546:	9302      	str	r3, [sp, #8]
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	9301      	str	r3, [sp, #4]
 800c54c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c558:	f000 fc3c 	bl	800cdd4 <fill_blended>
 800c55c:	e004      	b.n	800c568 <_lv_blend_fill+0x19c>
    if(opa < LV_OPA_MIN) return;
 800c55e:	bf00      	nop
 800c560:	e002      	b.n	800c568 <_lv_blend_fill+0x19c>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c562:	bf00      	nop
 800c564:	e000      	b.n	800c568 <_lv_blend_fill+0x19c>
    if(!is_common) return;
 800c566:	bf00      	nop
    }
#endif
}
 800c568:	3738      	adds	r7, #56	; 0x38
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <_lv_blend_map>:
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_map(const lv_area_t * clip_area, const lv_area_t * map_area,
                                         const lv_color_t * map_buf,
                                         lv_opa_t * mask, lv_draw_mask_res_t mask_res,
                                         lv_opa_t opa, lv_blend_mode_t mode)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b094      	sub	sp, #80	; 0x50
 800c572:	af06      	add	r7, sp, #24
 800c574:	60f8      	str	r0, [r7, #12]
 800c576:	60b9      	str	r1, [r7, #8]
 800c578:	607a      	str	r2, [r7, #4]
 800c57a:	603b      	str	r3, [r7, #0]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
 800c57c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c580:	2b01      	cmp	r3, #1
 800c582:	f240 80c3 	bls.w	800c70c <_lv_blend_map+0x19e>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c586:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f000 80c0 	beq.w	800c710 <_lv_blend_map+0x1a2>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 800c590:	f107 0314 	add.w	r3, r7, #20
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	68f9      	ldr	r1, [r7, #12]
 800c598:	4618      	mov	r0, r3
 800c59a:	f00e fb01 	bl	801aba0 <_lv_area_intersect>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(!is_common) return;
 800c5a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5a8:	f083 0301 	eor.w	r3, r3, #1
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f040 80b0 	bne.w	800c714 <_lv_blend_map+0x1a6>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c5b4:	f7fd fd2c 	bl	800a010 <_lv_refr_get_disp_refreshing>
 800c5b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c5ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5bc:	f00d fe18 	bl	801a1f0 <lv_disp_get_buf>
 800c5c0:	62b8      	str	r0, [r7, #40]	; 0x28
    const lv_area_t * disp_area = &vdb->area;
 800c5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c4:	3310      	adds	r3, #16
 800c5c6:	627b      	str	r3, [r7, #36]	; 0x24
    lv_color_t * disp_buf = vdb->buf_act;
 800c5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	623b      	str	r3, [r7, #32]

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800c5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d004      	beq.n	800c5e0 <_lv_blend_map+0x72>
 800c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5dc:	4610      	mov	r0, r2
 800c5de:	4798      	blx	r3

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800c5e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	b21b      	sxth	r3, r3
 800c5f4:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 -= disp_area->y1;
 800c5f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c602:	b29b      	uxth	r3, r3
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	b29b      	uxth	r3, r3
 800c608:	b21b      	sxth	r3, r3
 800c60a:	82fb      	strh	r3, [r7, #22]
    draw_area.x2 -= disp_area->x1;
 800c60c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c610:	b29a      	uxth	r2, r3
 800c612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c614:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	b21b      	sxth	r3, r3
 800c620:	833b      	strh	r3, [r7, #24]
    draw_area.y2 -= disp_area->y1;
 800c622:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c626:	b29a      	uxth	r2, r3
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c62e:	b29b      	uxth	r3, r3
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	b29b      	uxth	r3, r3
 800c634:	b21b      	sxth	r3, r3
 800c636:	837b      	strh	r3, [r7, #26]

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d025      	beq.n	800c68a <_lv_blend_map+0x11c>
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	7a1b      	ldrb	r3, [r3, #8]
 800c642:	f003 0301 	and.w	r3, r3, #1
 800c646:	b2db      	uxtb	r3, r3
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d11e      	bne.n	800c68a <_lv_blend_map+0x11c>
#else
    if(mask)
#endif
    {
        int32_t mask_w = lv_area_get_width(&draw_area);
 800c64c:	f107 0314 	add.w	r3, r7, #20
 800c650:	4618      	mov	r0, r3
 800c652:	f7ff fe8d 	bl	800c370 <lv_area_get_width>
 800c656:	4603      	mov	r3, r0
 800c658:	61fb      	str	r3, [r7, #28]
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800c65a:	2300      	movs	r3, #0
 800c65c:	637b      	str	r3, [r7, #52]	; 0x34
 800c65e:	e010      	b.n	800c682 <_lv_blend_map+0x114>
 800c660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	4413      	add	r3, r2
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b80      	cmp	r3, #128	; 0x80
 800c66a:	d901      	bls.n	800c670 <_lv_blend_map+0x102>
 800c66c:	21ff      	movs	r1, #255	; 0xff
 800c66e:	e000      	b.n	800c672 <_lv_blend_map+0x104>
 800c670:	2100      	movs	r1, #0
 800c672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c674:	683a      	ldr	r2, [r7, #0]
 800c676:	4413      	add	r3, r2
 800c678:	460a      	mov	r2, r1
 800c67a:	701a      	strb	r2, [r3, #0]
 800c67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c67e:	3301      	adds	r3, #1
 800c680:	637b      	str	r3, [r7, #52]	; 0x34
 800c682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	429a      	cmp	r2, r3
 800c688:	dbea      	blt.n	800c660 <_lv_blend_map+0xf2>
    }
    if(disp->driver.set_px_cb) {
 800c68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d011      	beq.n	800c6b6 <_lv_blend_map+0x148>
        map_set_px(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
 800c692:	f107 0214 	add.w	r2, r7, #20
 800c696:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c69a:	9303      	str	r3, [sp, #12]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	9302      	str	r3, [sp, #8]
 800c6a0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c6a4:	9301      	str	r3, [sp, #4]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	6a39      	ldr	r1, [r7, #32]
 800c6ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6b0:	f000 fca0 	bl	800cff4 <map_set_px>
 800c6b4:	e02f      	b.n	800c716 <_lv_blend_map+0x1a8>
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
 800c6b6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d111      	bne.n	800c6e2 <_lv_blend_map+0x174>
        map_normal(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
 800c6be:	f107 0214 	add.w	r2, r7, #20
 800c6c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c6c6:	9303      	str	r3, [sp, #12]
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	9302      	str	r3, [sp, #8]
 800c6cc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c6d0:	9301      	str	r3, [sp, #4]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	6a39      	ldr	r1, [r7, #32]
 800c6da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6dc:	f000 fd69 	bl	800d1b2 <map_normal>
 800c6e0:	e019      	b.n	800c716 <_lv_blend_map+0x1a8>
    }
#if LV_USE_BLEND_MODES
    else {
        map_blended(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res, mode);
 800c6e2:	f107 0214 	add.w	r2, r7, #20
 800c6e6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c6ea:	9304      	str	r3, [sp, #16]
 800c6ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c6f0:	9303      	str	r3, [sp, #12]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	9302      	str	r3, [sp, #8]
 800c6f6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c6fa:	9301      	str	r3, [sp, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	6a39      	ldr	r1, [r7, #32]
 800c704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c706:	f001 f817 	bl	800d738 <map_blended>
 800c70a:	e004      	b.n	800c716 <_lv_blend_map+0x1a8>
    if(opa < LV_OPA_MIN) return;
 800c70c:	bf00      	nop
 800c70e:	e002      	b.n	800c716 <_lv_blend_map+0x1a8>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c710:	bf00      	nop
 800c712:	e000      	b.n	800c716 <_lv_blend_map+0x1a8>
    if(!is_common) return;
 800c714:	bf00      	nop
    }
#endif
}
 800c716:	3738      	adds	r7, #56	; 0x38
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <fill_set_px>:
 **********************/

static void fill_set_px(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        lv_color_t color, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res)
{
 800c71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c71e:	b08f      	sub	sp, #60	; 0x3c
 800c720:	af04      	add	r7, sp, #16
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c72a:	f7fd fc71 	bl	800a010 <_lv_refr_get_disp_refreshing>
 800c72e:	61b8      	str	r0, [r7, #24]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f7ff fe1d 	bl	800c370 <lv_area_get_width>
 800c736:	4603      	mov	r3, r0
 800c738:	617b      	str	r3, [r7, #20]

    int32_t x;
    int32_t y;

    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800c73a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d131      	bne.n	800c7a6 <fill_set_px+0x8a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c748:	623b      	str	r3, [r7, #32]
 800c74a:	e024      	b.n	800c796 <fill_set_px+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c752:	627b      	str	r3, [r7, #36]	; 0x24
 800c754:	e015      	b.n	800c782 <fill_set_px+0x66>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	695c      	ldr	r4, [r3, #20]
 800c75a:	69b8      	ldr	r0, [r7, #24]
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	b219      	sxth	r1, r3
 800c760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c762:	b21d      	sxth	r5, r3
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	b21b      	sxth	r3, r3
 800c768:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800c76c:	9202      	str	r2, [sp, #8]
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	9201      	str	r2, [sp, #4]
 800c772:	9300      	str	r3, [sp, #0]
 800c774:	462b      	mov	r3, r5
 800c776:	460a      	mov	r2, r1
 800c778:	68b9      	ldr	r1, [r7, #8]
 800c77a:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	3301      	adds	r3, #1
 800c780:	627b      	str	r3, [r7, #36]	; 0x24
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c788:	461a      	mov	r2, r3
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	4293      	cmp	r3, r2
 800c78e:	dde2      	ble.n	800c756 <fill_set_px+0x3a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c790:	6a3b      	ldr	r3, [r7, #32]
 800c792:	3301      	adds	r3, #1
 800c794:	623b      	str	r3, [r7, #32]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c79c:	461a      	mov	r2, r3
 800c79e:	6a3b      	ldr	r3, [r7, #32]
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	ddd3      	ble.n	800c74c <fill_set_px+0x30>
                }
            }
            mask_tmp += draw_area_w;
        }
    }
}
 800c7a4:	e050      	b.n	800c848 <fill_set_px+0x12c>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7ac:	425b      	negs	r3, r3
 800c7ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7b0:	4413      	add	r3, r2
 800c7b2:	61fb      	str	r3, [r7, #28]
        int32_t draw_area_w = lv_area_get_width(draw_area);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff fddb 	bl	800c370 <lv_area_get_width>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	613b      	str	r3, [r7, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c7c4:	623b      	str	r3, [r7, #32]
 800c7c6:	e038      	b.n	800c83a <fill_set_px+0x11e>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c7d0:	e025      	b.n	800c81e <fill_set_px+0x102>
                if(mask_tmp[x]) {
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	69fa      	ldr	r2, [r7, #28]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d01c      	beq.n	800c818 <fill_set_px+0xfc>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	695c      	ldr	r4, [r3, #20]
 800c7e2:	69bd      	ldr	r5, [r7, #24]
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	b21e      	sxth	r6, r3
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	fa0f fc83 	sxth.w	ip, r3
 800c7ee:	6a3b      	ldr	r3, [r7, #32]
 800c7f0:	b21b      	sxth	r3, r3
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800c7f2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800c7f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7f8:	69f8      	ldr	r0, [r7, #28]
 800c7fa:	4401      	add	r1, r0
 800c7fc:	7809      	ldrb	r1, [r1, #0]
 800c7fe:	fb01 f202 	mul.w	r2, r1, r2
 800c802:	0a12      	lsrs	r2, r2, #8
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800c804:	b2d2      	uxtb	r2, r2
 800c806:	9202      	str	r2, [sp, #8]
 800c808:	683a      	ldr	r2, [r7, #0]
 800c80a:	9201      	str	r2, [sp, #4]
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	4663      	mov	r3, ip
 800c810:	4632      	mov	r2, r6
 800c812:	68b9      	ldr	r1, [r7, #8]
 800c814:	4628      	mov	r0, r5
 800c816:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81a:	3301      	adds	r3, #1
 800c81c:	627b      	str	r3, [r7, #36]	; 0x24
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c824:	461a      	mov	r2, r3
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c828:	4293      	cmp	r3, r2
 800c82a:	ddd2      	ble.n	800c7d2 <fill_set_px+0xb6>
            mask_tmp += draw_area_w;
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	4413      	add	r3, r2
 800c832:	61fb      	str	r3, [r7, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c834:	6a3b      	ldr	r3, [r7, #32]
 800c836:	3301      	adds	r3, #1
 800c838:	623b      	str	r3, [r7, #32]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c840:	461a      	mov	r2, r3
 800c842:	6a3b      	ldr	r3, [r7, #32]
 800c844:	4293      	cmp	r3, r2
 800c846:	ddbf      	ble.n	800c7c8 <fill_set_px+0xac>
}
 800c848:	bf00      	nop
 800c84a:	372c      	adds	r7, #44	; 0x2c
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c850 <fill_normal>:
 */
LV_ATTRIBUTE_FAST_MEM static void fill_normal(const lv_area_t * disp_area, lv_color_t * disp_buf,
                                              const lv_area_t * draw_area,
                                              lv_color_t color, lv_opa_t opa,
                                              const lv_opa_t * mask, lv_draw_mask_res_t mask_res)
{
 800c850:	b590      	push	{r4, r7, lr}
 800c852:	b09b      	sub	sp, #108	; 0x6c
 800c854:	af02      	add	r7, sp, #8
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	603b      	str	r3, [r7, #0]

#if LV_USE_GPU || LV_COLOR_SCREEN_TRANSP
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c85e:	f7fd fbd7 	bl	800a010 <_lv_refr_get_disp_refreshing>
 800c862:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f7ff fd83 	bl	800c370 <lv_area_get_width>
 800c86a:	4603      	mov	r3, r0
 800c86c:	63bb      	str	r3, [r7, #56]	; 0x38

    int32_t draw_area_w = lv_area_get_width(draw_area);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7ff fd7e 	bl	800c370 <lv_area_get_width>
 800c874:	4603      	mov	r3, r0
 800c876:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f7ff fd90 	bl	800c39e <lv_area_get_height>
 800c87e:	4603      	mov	r3, r0
 800c880:	633b      	str	r3, [r7, #48]	; 0x30

    /*Create a temp. disp_buf which always point to the first pixel of the destination area*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c888:	461a      	mov	r2, r3
 800c88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88c:	fb03 f302 	mul.w	r3, r3, r2
 800c890:	461a      	mov	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c898:	4413      	add	r3, r2
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	4413      	add	r3, r2
 800c8a0:	65fb      	str	r3, [r7, #92]	; 0x5c

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800c8a2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	f040 80c5 	bne.w	800ca36 <fill_normal+0x1e6>
        if(opa > LV_OPA_MAX) {
 800c8ac:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800c8b0:	2bfd      	cmp	r3, #253	; 0xfd
 800c8b2:	d92a      	bls.n	800c90a <fill_normal+0xba>
            if(lv_area_get_size(draw_area) >= 240) {
                lv_gpu_stm32_dma2d_fill(disp_buf_first, disp_w, color, draw_area_w, draw_area_h);
                return;
            }
#elif LV_USE_GPU
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 800c8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d010      	beq.n	800c8de <fill_normal+0x8e>
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f00e f94e 	bl	801ab5e <lv_area_get_size>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2bf0      	cmp	r3, #240	; 0xf0
 800c8c6:	d90a      	bls.n	800c8de <fill_normal+0x8e>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
 800c8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800c8cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d0:	b21a      	sxth	r2, r3
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68b9      	ldr	r1, [r7, #8]
 800c8da:	47a0      	blx	r4
                return;
 800c8dc:	e277      	b.n	800cdce <fill_normal+0x57e>
            }
#endif
            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
 800c8de:	2300      	movs	r3, #0
 800c8e0:	657b      	str	r3, [r7, #84]	; 0x54
 800c8e2:	e00d      	b.n	800c900 <fill_normal+0xb0>
                lv_color_fill(disp_buf_first, color, draw_area_w);
 800c8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c8ec:	f00e ff02 	bl	801b6f4 <lv_color_fill>
                disp_buf_first += disp_w;
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8f6:	4413      	add	r3, r2
 800c8f8:	65fb      	str	r3, [r7, #92]	; 0x5c
            for(y = 0; y < draw_area_h; y++) {
 800c8fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	657b      	str	r3, [r7, #84]	; 0x54
 800c900:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c904:	429a      	cmp	r2, r3
 800c906:	dbed      	blt.n	800c8e4 <fill_normal+0x94>
 800c908:	e261      	b.n	800cdce <fill_normal+0x57e>
                    return;
                }
                /* Fall down to SW render in case of error */
            }
#elif LV_USE_GPU
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 800c90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d034      	beq.n	800c97c <fill_normal+0x12c>
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f00e f923 	bl	801ab5e <lv_area_get_size>
 800c918:	4603      	mov	r3, r0
 800c91a:	2bf0      	cmp	r3, #240	; 0xf0
 800c91c:	d92e      	bls.n	800c97c <fill_normal+0x12c>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
 800c91e:	2300      	movs	r3, #0
 800c920:	65bb      	str	r3, [r7, #88]	; 0x58
 800c922:	e007      	b.n	800c934 <fill_normal+0xe4>
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	4997      	ldr	r1, [pc, #604]	; (800cb84 <fill_normal+0x334>)
 800c928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c92e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c930:	3301      	adds	r3, #1
 800c932:	65bb      	str	r3, [r7, #88]	; 0x58
 800c934:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c938:	429a      	cmp	r2, r3
 800c93a:	dbf3      	blt.n	800c924 <fill_normal+0xd4>

                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c942:	657b      	str	r3, [r7, #84]	; 0x54
 800c944:	e012      	b.n	800c96c <fill_normal+0x11c>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
 800c946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c948:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800c94a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c94c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c94e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	4613      	mov	r3, r2
 800c956:	4a8b      	ldr	r2, [pc, #556]	; (800cb84 <fill_normal+0x334>)
 800c958:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c95a:	47a0      	blx	r4
                    disp_buf_first += disp_w;
 800c95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c962:	4413      	add	r3, r2
 800c964:	65fb      	str	r3, [r7, #92]	; 0x5c
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c968:	3301      	adds	r3, #1
 800c96a:	657b      	str	r3, [r7, #84]	; 0x54
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c972:	461a      	mov	r2, r3
 800c974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c976:	4293      	cmp	r3, r2
 800c978:	dde5      	ble.n	800c946 <fill_normal+0xf6>
                }
                return;
 800c97a:	e228      	b.n	800cdce <fill_normal+0x57e>
                }

                return;
            }
#endif
            lv_color_t last_dest_color = LV_COLOR_BLACK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800c982:	2300      	movs	r3, #0
 800c984:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c988:	2300      	movs	r3, #0
 800c98a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c98e:	23ff      	movs	r3, #255	; 0xff
 800c990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800c994:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800c998:	461a      	mov	r2, r3
 800c99a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c99c:	6838      	ldr	r0, [r7, #0]
 800c99e:	f7ff fc23 	bl	800c1e8 <lv_color_mix>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	623b      	str	r3, [r7, #32]

            uint16_t color_premult[3];
            lv_color_premult(color, opa, color_premult);
 800c9a6:	f107 0218 	add.w	r2, r7, #24
 800c9aa:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6838      	ldr	r0, [r7, #0]
 800c9b2:	f7ff fc6b 	bl	800c28c <lv_color_premult>
            lv_opa_t opa_inv = 255 - opa;
 800c9b6:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800c9ba:	43db      	mvns	r3, r3
 800c9bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            for(y = 0; y < draw_area_h; y++) {
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	657b      	str	r3, [r7, #84]	; 0x54
 800c9c4:	e032      	b.n	800ca2c <fill_normal+0x1dc>
                for(x = 0; x < draw_area_w; x++) {
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9ca:	e023      	b.n	800ca14 <fill_normal+0x1c4>
                    if(last_dest_color.full != disp_buf_first[x].full) {
 800c9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c9d4:	440b      	add	r3, r1
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d012      	beq.n	800ca02 <fill_normal+0x1b2>
                        last_dest_color = disp_buf_first[x];
 800c9dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c9e2:	4413      	add	r3, r2
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	627b      	str	r3, [r7, #36]	; 0x24
                                                    &last_res_color.ch.alpha);
                        }
                        else
#endif
                        {
                            last_res_color = lv_color_mix_premult(color_premult, disp_buf_first[x], opa_inv);
 800c9e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800c9f4:	f107 0018 	add.w	r0, r7, #24
 800c9f8:	6819      	ldr	r1, [r3, #0]
 800c9fa:	f7ff fc71 	bl	800c2e0 <lv_color_mix_premult>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	623b      	str	r3, [r7, #32]
                        }
                    }
                    disp_buf_first[x] = last_res_color;
 800ca02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca08:	4413      	add	r3, r2
 800ca0a:	6a3a      	ldr	r2, [r7, #32]
 800ca0c:	601a      	str	r2, [r3, #0]
                for(x = 0; x < draw_area_w; x++) {
 800ca0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca10:	3301      	adds	r3, #1
 800ca12:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	dbd7      	blt.n	800c9cc <fill_normal+0x17c>
                }
                disp_buf_first += disp_w;
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca22:	4413      	add	r3, r2
 800ca24:	65fb      	str	r3, [r7, #92]	; 0x5c
            for(y = 0; y < draw_area_h; y++) {
 800ca26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca28:	3301      	adds	r3, #1
 800ca2a:	657b      	str	r3, [r7, #84]	; 0x54
 800ca2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca30:	429a      	cmp	r2, r3
 800ca32:	dbc8      	blt.n	800c9c6 <fill_normal+0x176>
 800ca34:	e1cb      	b.n	800cdce <fill_normal+0x57e>
#endif

        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800ca36:	2300      	movs	r3, #0
 800ca38:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        last_dest_color.full = disp_buf_first[0].full;
 800ca3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	617b      	str	r3, [r7, #20]
        last_res_color.full = disp_buf_first[0].full;
 800ca42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	613b      	str	r3, [r7, #16]

        int32_t x_end4 = draw_area_w - 4;
 800ca48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca4a:	3b04      	subs	r3, #4
 800ca4c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 800ca4e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800ca52:	2bfd      	cmp	r3, #253	; 0xfd
 800ca54:	f240 8144 	bls.w	800cce0 <fill_normal+0x490>
            for(y = 0; y < draw_area_h; y++) {
 800ca58:	2300      	movs	r3, #0
 800ca5a:	657b      	str	r3, [r7, #84]	; 0x54
 800ca5c:	e13a      	b.n	800ccd4 <fill_normal+0x484>
                const lv_opa_t * mask_tmp_x = mask;
 800ca5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca60:	64fb      	str	r3, [r7, #76]	; 0x4c
#else
                    FILL_NORMAL_MASK_PX(x, color)
#endif
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800ca62:	2300      	movs	r3, #0
 800ca64:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca66:	e025      	b.n	800cab4 <fill_normal+0x264>
#if LV_COLOR_SCREEN_TRANSP
                    FILL_NORMAL_MASK_PX_SCR_TRANSP(x, color)
#else
                    FILL_NORMAL_MASK_PX(x, color)
 800ca68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01b      	beq.n	800caa8 <fill_normal+0x258>
 800ca70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	2bff      	cmp	r3, #255	; 0xff
 800ca76:	d106      	bne.n	800ca86 <fill_normal+0x236>
 800ca78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca7e:	4413      	add	r3, r2
 800ca80:	683a      	ldr	r2, [r7, #0]
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	e010      	b.n	800caa8 <fill_normal+0x258>
 800ca86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca8c:	4413      	add	r3, r2
 800ca8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca90:	7810      	ldrb	r0, [r2, #0]
 800ca92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca94:	0092      	lsls	r2, r2, #2
 800ca96:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ca98:	188c      	adds	r4, r1, r2
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	6819      	ldr	r1, [r3, #0]
 800ca9e:	6838      	ldr	r0, [r7, #0]
 800caa0:	f7ff fba2 	bl	800c1e8 <lv_color_mix>
 800caa4:	4603      	mov	r3, r0
 800caa6:	6023      	str	r3, [r4, #0]
 800caa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caaa:	3301      	adds	r3, #1
 800caac:	64fb      	str	r3, [r7, #76]	; 0x4c
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800caae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cab0:	3301      	adds	r3, #1
 800cab2:	65bb      	str	r3, [r7, #88]	; 0x58
 800cab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab8:	429a      	cmp	r2, r3
 800caba:	da04      	bge.n	800cac6 <fill_normal+0x276>
 800cabc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cabe:	f003 0303 	and.w	r3, r3, #3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1d0      	bne.n	800ca68 <fill_normal+0x218>
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
 800cac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cac8:	64bb      	str	r3, [r7, #72]	; 0x48
                for(; x <= x_end4; x += 4) {
 800caca:	e0c5      	b.n	800cc58 <fill_normal+0x408>
                    if(*mask32) {
 800cacc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 80bb 	beq.w	800cc4c <fill_normal+0x3fc>
                        if((*mask32) == 0xFFFFFFFF) {
 800cad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cade:	d11b      	bne.n	800cb18 <fill_normal+0x2c8>
                            disp_buf_first[x] = color;
 800cae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cae6:	4413      	add	r3, r2
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 1] = color;
 800caec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caee:	3301      	adds	r3, #1
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800caf4:	4413      	add	r3, r2
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 2] = color;
 800cafa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cafc:	3302      	adds	r3, #2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb02:	4413      	add	r3, r2
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 3] = color;
 800cb08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb0a:	3303      	adds	r3, #3
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb10:	4413      	add	r3, r2
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	601a      	str	r2, [r3, #0]
 800cb16:	e099      	b.n	800cc4c <fill_normal+0x3fc>
                        }
                        else {
                            mask_tmp_x = (const lv_opa_t *)mask32;
 800cb18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb1a:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x, color)
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x + 1, color)
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x + 2, color)
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x + 3, color)
#else
                            FILL_NORMAL_MASK_PX(x, color)
 800cb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d01b      	beq.n	800cb5c <fill_normal+0x30c>
 800cb24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2bff      	cmp	r3, #255	; 0xff
 800cb2a:	d106      	bne.n	800cb3a <fill_normal+0x2ea>
 800cb2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb32:	4413      	add	r3, r2
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	e010      	b.n	800cb5c <fill_normal+0x30c>
 800cb3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb40:	4413      	add	r3, r2
 800cb42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb44:	7810      	ldrb	r0, [r2, #0]
 800cb46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb48:	0092      	lsls	r2, r2, #2
 800cb4a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cb4c:	188c      	adds	r4, r1, r2
 800cb4e:	4602      	mov	r2, r0
 800cb50:	6819      	ldr	r1, [r3, #0]
 800cb52:	6838      	ldr	r0, [r7, #0]
 800cb54:	f7ff fb48 	bl	800c1e8 <lv_color_mix>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	6023      	str	r3, [r4, #0]
 800cb5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb5e:	3301      	adds	r3, #1
 800cb60:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX(x + 1, color)
 800cb62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d021      	beq.n	800cbae <fill_normal+0x35e>
 800cb6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	2bff      	cmp	r3, #255	; 0xff
 800cb70:	d10a      	bne.n	800cb88 <fill_normal+0x338>
 800cb72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb74:	3301      	adds	r3, #1
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb7a:	4413      	add	r3, r2
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	601a      	str	r2, [r3, #0]
 800cb80:	e015      	b.n	800cbae <fill_normal+0x35e>
 800cb82:	bf00      	nop
 800cb84:	200177b4 	.word	0x200177b4
 800cb88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb90:	4413      	add	r3, r2
 800cb92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb94:	7810      	ldrb	r0, [r2, #0]
 800cb96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb98:	3201      	adds	r2, #1
 800cb9a:	0092      	lsls	r2, r2, #2
 800cb9c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cb9e:	188c      	adds	r4, r1, r2
 800cba0:	4602      	mov	r2, r0
 800cba2:	6819      	ldr	r1, [r3, #0]
 800cba4:	6838      	ldr	r0, [r7, #0]
 800cba6:	f7ff fb1f 	bl	800c1e8 <lv_color_mix>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800cbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d01e      	beq.n	800cbfa <fill_normal+0x3aa>
 800cbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	2bff      	cmp	r3, #255	; 0xff
 800cbc2:	d107      	bne.n	800cbd4 <fill_normal+0x384>
 800cbc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbc6:	3302      	adds	r3, #2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cbcc:	4413      	add	r3, r2
 800cbce:	683a      	ldr	r2, [r7, #0]
 800cbd0:	601a      	str	r2, [r3, #0]
 800cbd2:	e012      	b.n	800cbfa <fill_normal+0x3aa>
 800cbd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbd6:	3302      	adds	r3, #2
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cbdc:	4413      	add	r3, r2
 800cbde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbe0:	7810      	ldrb	r0, [r2, #0]
 800cbe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbe4:	3202      	adds	r2, #2
 800cbe6:	0092      	lsls	r2, r2, #2
 800cbe8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cbea:	188c      	adds	r4, r1, r2
 800cbec:	4602      	mov	r2, r0
 800cbee:	6819      	ldr	r1, [r3, #0]
 800cbf0:	6838      	ldr	r0, [r7, #0]
 800cbf2:	f7ff faf9 	bl	800c1e8 <lv_color_mix>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800cc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d01e      	beq.n	800cc46 <fill_normal+0x3f6>
 800cc08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	2bff      	cmp	r3, #255	; 0xff
 800cc0e:	d107      	bne.n	800cc20 <fill_normal+0x3d0>
 800cc10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc12:	3303      	adds	r3, #3
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc18:	4413      	add	r3, r2
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	e012      	b.n	800cc46 <fill_normal+0x3f6>
 800cc20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc22:	3303      	adds	r3, #3
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc28:	4413      	add	r3, r2
 800cc2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc2c:	7810      	ldrb	r0, [r2, #0]
 800cc2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc30:	3203      	adds	r2, #3
 800cc32:	0092      	lsls	r2, r2, #2
 800cc34:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cc36:	188c      	adds	r4, r1, r2
 800cc38:	4602      	mov	r2, r0
 800cc3a:	6819      	ldr	r1, [r3, #0]
 800cc3c:	6838      	ldr	r0, [r7, #0]
 800cc3e:	f7ff fad3 	bl	800c1e8 <lv_color_mix>
 800cc42:	4603      	mov	r3, r0
 800cc44:	6023      	str	r3, [r4, #0]
 800cc46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc48:	3301      	adds	r3, #1
 800cc4a:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
                        }
                    }
                    mask32++;
 800cc4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc4e:	3304      	adds	r3, #4
 800cc50:	64bb      	str	r3, [r7, #72]	; 0x48
                for(; x <= x_end4; x += 4) {
 800cc52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc54:	3304      	adds	r3, #4
 800cc56:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	f77f af35 	ble.w	800cacc <fill_normal+0x27c>
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
 800cc62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc64:	64fb      	str	r3, [r7, #76]	; 0x4c
                for(; x < draw_area_w ; x++) {
 800cc66:	e025      	b.n	800ccb4 <fill_normal+0x464>
#if LV_COLOR_SCREEN_TRANSP
                    FILL_NORMAL_MASK_PX_SCR_TRANSP(x, color)
#else
                    FILL_NORMAL_MASK_PX(x, color)
 800cc68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d01b      	beq.n	800cca8 <fill_normal+0x458>
 800cc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	2bff      	cmp	r3, #255	; 0xff
 800cc76:	d106      	bne.n	800cc86 <fill_normal+0x436>
 800cc78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc7e:	4413      	add	r3, r2
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	e010      	b.n	800cca8 <fill_normal+0x458>
 800cc86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc8c:	4413      	add	r3, r2
 800cc8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc90:	7810      	ldrb	r0, [r2, #0]
 800cc92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc94:	0092      	lsls	r2, r2, #2
 800cc96:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cc98:	188c      	adds	r4, r1, r2
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	6819      	ldr	r1, [r3, #0]
 800cc9e:	6838      	ldr	r0, [r7, #0]
 800cca0:	f7ff faa2 	bl	800c1e8 <lv_color_mix>
 800cca4:	4603      	mov	r3, r0
 800cca6:	6023      	str	r3, [r4, #0]
 800cca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccaa:	3301      	adds	r3, #1
 800ccac:	64fb      	str	r3, [r7, #76]	; 0x4c
                for(; x < draw_area_w ; x++) {
 800ccae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ccb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	dbd5      	blt.n	800cc68 <fill_normal+0x418>
#endif
                }
#endif
                disp_buf_first += disp_w;
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccc2:	4413      	add	r3, r2
 800ccc4:	65fb      	str	r3, [r7, #92]	; 0x5c
                mask += draw_area_w;
 800ccc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ccca:	4413      	add	r3, r2
 800cccc:	677b      	str	r3, [r7, #116]	; 0x74
            for(y = 0; y < draw_area_h; y++) {
 800ccce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	657b      	str	r3, [r7, #84]	; 0x54
 800ccd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	f6ff aec0 	blt.w	800ca5e <fill_normal+0x20e>
 800ccde:	e076      	b.n	800cdce <fill_normal+0x57e>
            }
        }
        /*Handle opa and mask values too*/
        else {
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 800cce0:	2300      	movs	r3, #0
 800cce2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ccec:	657b      	str	r3, [r7, #84]	; 0x54
 800ccee:	e067      	b.n	800cdc0 <fill_normal+0x570>
                const lv_opa_t * mask_tmp_x = mask;
 800ccf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccf2:	643b      	str	r3, [r7, #64]	; 0x40
                for(x = 0; x < draw_area_w; x++) {
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccf8:	e052      	b.n	800cda0 <fill_normal+0x550>
                    if(*mask_tmp_x) {
 800ccfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d048      	beq.n	800cd94 <fill_normal+0x544>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800cd02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d011      	beq.n	800cd32 <fill_normal+0x4e2>
 800cd0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	2bff      	cmp	r3, #255	; 0xff
 800cd14:	d009      	beq.n	800cd2a <fill_normal+0x4da>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 800cd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800cd20:	fb03 f302 	mul.w	r3, r3, r2
 800cd24:	0a1b      	lsrs	r3, r3, #8
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	e001      	b.n	800cd2e <fill_normal+0x4de>
 800cd2a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800cd2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 800cd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d107      	bne.n	800cd4e <fill_normal+0x4fe>
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cd46:	440b      	add	r3, r1
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d01c      	beq.n	800cd88 <fill_normal+0x538>
                                                        &last_res_color.ch.alpha);
                            }
                            else
#endif
                            {
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 800cd4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cd52:	2bff      	cmp	r3, #255	; 0xff
 800cd54:	d102      	bne.n	800cd5c <fill_normal+0x50c>
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	613b      	str	r3, [r7, #16]
 800cd5a:	e00b      	b.n	800cd74 <fill_normal+0x524>
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 800cd5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd62:	4413      	add	r3, r2
 800cd64:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800cd68:	6819      	ldr	r1, [r3, #0]
 800cd6a:	6838      	ldr	r0, [r7, #0]
 800cd6c:	f7ff fa3c 	bl	800c1e8 <lv_color_mix>
 800cd70:	4603      	mov	r3, r0
 800cd72:	613b      	str	r3, [r7, #16]
                            }
                            last_mask = *mask_tmp_x;
 800cd74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                            last_dest_color.full = disp_buf_first[x].full;
 800cd7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd82:	4413      	add	r3, r2
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	617b      	str	r3, [r7, #20]
                        }
                        disp_buf_first[x] = last_res_color;
 800cd88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd8e:	4413      	add	r3, r2
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	601a      	str	r2, [r3, #0]
                    }
                    mask_tmp_x++;
 800cd94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd96:	3301      	adds	r3, #1
 800cd98:	643b      	str	r3, [r7, #64]	; 0x40
                for(x = 0; x < draw_area_w; x++) {
 800cd9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800cda0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda4:	429a      	cmp	r2, r3
 800cda6:	dba8      	blt.n	800ccfa <fill_normal+0x4aa>
                }
                disp_buf_first += disp_w;
 800cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cdae:	4413      	add	r3, r2
 800cdb0:	65fb      	str	r3, [r7, #92]	; 0x5c
                mask += draw_area_w;
 800cdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cdb6:	4413      	add	r3, r2
 800cdb8:	677b      	str	r3, [r7, #116]	; 0x74
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cdba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	657b      	str	r3, [r7, #84]	; 0x54
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	dd90      	ble.n	800ccf0 <fill_normal+0x4a0>
            }
        }
    }
}
 800cdce:	3764      	adds	r7, #100	; 0x64
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd90      	pop	{r4, r7, pc}

0800cdd4 <fill_blended>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
static void fill_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                         lv_color_t color, lv_opa_t opa,
                         const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b092      	sub	sp, #72	; 0x48
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
 800cde0:	603b      	str	r3, [r7, #0]
    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f7ff fac4 	bl	800c370 <lv_area_get_width>
 800cde8:	4603      	mov	r3, r0
 800cdea:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf6:	fb03 f302 	mul.w	r3, r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	4413      	add	r3, r2
 800ce00:	647b      	str	r3, [r7, #68]	; 0x44

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
 800ce02:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d002      	beq.n	800ce10 <fill_blended+0x3c>
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d003      	beq.n	800ce16 <fill_blended+0x42>
        case LV_BLEND_MODE_SUBTRACTIVE:
            blend_fp = color_blend_true_color_subtractive;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 800ce0e:	e0ea      	b.n	800cfe6 <fill_blended+0x212>
            blend_fp = color_blend_true_color_additive;
 800ce10:	4b76      	ldr	r3, [pc, #472]	; (800cfec <fill_blended+0x218>)
 800ce12:	643b      	str	r3, [r7, #64]	; 0x40
            break;
 800ce14:	e002      	b.n	800ce1c <fill_blended+0x48>
            blend_fp = color_blend_true_color_subtractive;
 800ce16:	4b76      	ldr	r3, [pc, #472]	; (800cff0 <fill_blended+0x21c>)
 800ce18:	643b      	str	r3, [r7, #64]	; 0x40
            break;
 800ce1a:	bf00      	nop

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800ce1c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d158      	bne.n	800ced6 <fill_blended+0x102>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	f887 3020 	strb.w	r3, [r7, #32]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800ce30:	2300      	movs	r3, #0
 800ce32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ce36:	23ff      	movs	r3, #255	; 0xff
 800ce38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800ce3c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ce40:	461a      	mov	r2, r3
 800ce42:	6a39      	ldr	r1, [r7, #32]
 800ce44:	6838      	ldr	r0, [r7, #0]
 800ce46:	f7ff f9cf 	bl	800c1e8 <lv_color_mix>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	61fb      	str	r3, [r7, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ce54:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce56:	e036      	b.n	800cec6 <fill_blended+0xf2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce60:	e022      	b.n	800cea8 <fill_blended+0xd4>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 800ce62:	6a3a      	ldr	r2, [r7, #32]
 800ce64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce6a:	440b      	add	r3, r1
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d011      	beq.n	800ce96 <fill_blended+0xc2>
                    last_dest_color = disp_buf_tmp[x];
 800ce72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce78:	4413      	add	r3, r2
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	623b      	str	r3, [r7, #32]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800ce7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce84:	18d1      	adds	r1, r2, r3
 800ce86:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800ce8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce8c:	6809      	ldr	r1, [r1, #0]
 800ce8e:	6838      	ldr	r0, [r7, #0]
 800ce90:	4798      	blx	r3
 800ce92:	4603      	mov	r3, r0
 800ce94:	61fb      	str	r3, [r7, #28]
                }
                disp_buf_tmp[x] = last_res_color;
 800ce96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce9c:	4413      	add	r3, r2
 800ce9e:	69fa      	ldr	r2, [r7, #28]
 800cea0:	601a      	str	r2, [r3, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800cea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cea4:	3301      	adds	r3, #1
 800cea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	ddd5      	ble.n	800ce62 <fill_blended+0x8e>
            }
            disp_buf_tmp += disp_w;
 800ceb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cebc:	4413      	add	r3, r2
 800cebe:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec2:	3301      	adds	r3, #1
 800cec4:	63bb      	str	r3, [r7, #56]	; 0x38
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cecc:	461a      	mov	r2, r3
 800cece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced0:	4293      	cmp	r3, r2
 800ced2:	ddc1      	ble.n	800ce58 <fill_blended+0x84>
 800ced4:	e087      	b.n	800cfe6 <fill_blended+0x212>
        }
    }
    /*Masked*/
    else {
        /*Get the width of the `draw_area` it will be used to go to the next line of the mask*/
        int32_t draw_area_w = lv_area_get_width(draw_area);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff fa4a 	bl	800c370 <lv_area_get_width>
 800cedc:	4603      	mov	r3, r0
 800cede:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The mask is relative to the clipped area.
         * In the cycles below mask will be indexed from `draw_area.x1`
         * but it corresponds to zero index. So prepare `mask_tmp` accordingly. */
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cee6:	425b      	negs	r3, r3
 800cee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ceea:	4413      	add	r3, r2
 800ceec:	637b      	str	r3, [r7, #52]	; 0x34

        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800ceee:	2300      	movs	r3, #0
 800cef0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        last_dest_color.full = disp_buf_tmp[0].full;
 800cef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	61bb      	str	r3, [r7, #24]
        last_res_color.full = disp_buf_tmp[0].full;
 800cefa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	617b      	str	r3, [r7, #20]

        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cf06:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf08:	e066      	b.n	800cfd8 <fill_blended+0x204>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf12:	e04e      	b.n	800cfb2 <fill_blended+0x1de>
                if(mask_tmp[x] == 0) continue;
 800cf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf18:	4413      	add	r3, r2
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d044      	beq.n	800cfaa <fill_blended+0x1d6>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
 800cf20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf24:	4413      	add	r3, r2
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d107      	bne.n	800cf40 <fill_blended+0x16c>
 800cf30:	69ba      	ldr	r2, [r7, #24]
 800cf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf38:	440b      	add	r3, r1
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d02d      	beq.n	800cf9c <fill_blended+0x1c8>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 800cf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf44:	4413      	add	r3, r2
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2bfc      	cmp	r3, #252	; 0xfc
 800cf4a:	d80b      	bhi.n	800cf64 <fill_blended+0x190>
 800cf4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf50:	4413      	add	r3, r2
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	461a      	mov	r2, r3
 800cf56:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800cf5a:	fb03 f302 	mul.w	r3, r3, r2
 800cf5e:	0a1b      	lsrs	r3, r3, #8
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	e001      	b.n	800cf68 <fill_blended+0x194>
 800cf64:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800cf68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 800cf6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf72:	18d1      	adds	r1, r2, r3
 800cf74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cf78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7a:	6809      	ldr	r1, [r1, #0]
 800cf7c:	6838      	ldr	r0, [r7, #0]
 800cf7e:	4798      	blx	r3
 800cf80:	4603      	mov	r3, r0
 800cf82:	617b      	str	r3, [r7, #20]
                    last_mask = mask_tmp[x];
 800cf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf88:	4413      	add	r3, r2
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    last_dest_color.full = disp_buf_tmp[x].full;
 800cf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf96:	4413      	add	r3, r2
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	61bb      	str	r3, [r7, #24]
                }
                disp_buf_tmp[x] = last_res_color;
 800cf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfa2:	4413      	add	r3, r2
 800cfa4:	697a      	ldr	r2, [r7, #20]
 800cfa6:	601a      	str	r2, [r3, #0]
 800cfa8:	e000      	b.n	800cfac <fill_blended+0x1d8>
                if(mask_tmp[x] == 0) continue;
 800cfaa:	bf00      	nop
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800cfac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfae:	3301      	adds	r3, #1
 800cfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cfb8:	461a      	mov	r2, r3
 800cfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	dda9      	ble.n	800cf14 <fill_blended+0x140>
            }
            disp_buf_tmp += disp_w;
 800cfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfc6:	4413      	add	r3, r2
 800cfc8:	647b      	str	r3, [r7, #68]	; 0x44
            mask_tmp += draw_area_w;
 800cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfce:	4413      	add	r3, r2
 800cfd0:	637b      	str	r3, [r7, #52]	; 0x34
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	dd91      	ble.n	800cf0a <fill_blended+0x136>
        }
    }
}
 800cfe6:	3748      	adds	r7, #72	; 0x48
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	0800d955 	.word	0x0800d955
 800cff0:	0800d9c5 	.word	0x0800d9c5

0800cff4 <map_set_px>:

static void map_set_px(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                       const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                       const lv_opa_t * mask, lv_draw_mask_res_t mask_res)

{
 800cff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cff6:	b091      	sub	sp, #68	; 0x44
 800cff8:	af04      	add	r7, sp, #16
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	607a      	str	r2, [r7, #4]
 800d000:	603b      	str	r3, [r7, #0]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800d002:	f7fd f805 	bl	800a010 <_lv_refr_get_disp_refreshing>
 800d006:	61f8      	str	r0, [r7, #28]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f7ff f9b1 	bl	800c370 <lv_area_get_width>
 800d00e:	4603      	mov	r3, r0
 800d010:	61bb      	str	r3, [r7, #24]

    /*Get the width of the `draw_area` it will be used to go to the next line of the mask*/
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7ff f9ac 	bl	800c370 <lv_area_get_width>
 800d018:	4603      	mov	r3, r0
 800d01a:	617b      	str	r3, [r7, #20]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 800d01c:	6838      	ldr	r0, [r7, #0]
 800d01e:	f7ff f9a7 	bl	800c370 <lv_area_get_width>
 800d022:	4603      	mov	r3, r0
 800d024:	613b      	str	r3, [r7, #16]

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d02c:	461a      	mov	r2, r3
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d034:	4619      	mov	r1, r3
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d03c:	1acb      	subs	r3, r1, r3
 800d03e:	1ad3      	subs	r3, r2, r3
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	fb02 f303 	mul.w	r3, r2, r3
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d04a:	4413      	add	r3, r2
 800d04c:	62fb      	str	r3, [r7, #44]	; 0x2c

    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d054:	461a      	mov	r2, r3
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d05c:	4619      	mov	r1, r3
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d064:	1acb      	subs	r3, r1, r3
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d06c:	4413      	add	r3, r2
 800d06e:	62fb      	str	r3, [r7, #44]	; 0x2c
    map_buf_tmp -= draw_area->x1;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	425b      	negs	r3, r3
 800d07a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d07c:	4413      	add	r3, r2
 800d07e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t x;
    int32_t y;

    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800d080:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d084:	2b01      	cmp	r3, #1
 800d086:	d13a      	bne.n	800d0fe <map_set_px+0x10a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d08e:	627b      	str	r3, [r7, #36]	; 0x24
 800d090:	e02d      	b.n	800d0ee <map_set_px+0xfa>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d098:	62bb      	str	r3, [r7, #40]	; 0x28
 800d09a:	e019      	b.n	800d0d0 <map_set_px+0xdc>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	695c      	ldr	r4, [r3, #20]
 800d0a0:	69f8      	ldr	r0, [r7, #28]
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	b21d      	sxth	r5, r3
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	b21e      	sxth	r6, r3
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ac:	b21b      	sxth	r3, r3
 800d0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b0:	0092      	lsls	r2, r2, #2
 800d0b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0b4:	440a      	add	r2, r1
 800d0b6:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800d0ba:	9102      	str	r1, [sp, #8]
 800d0bc:	6812      	ldr	r2, [r2, #0]
 800d0be:	9201      	str	r2, [sp, #4]
 800d0c0:	9300      	str	r3, [sp, #0]
 800d0c2:	4633      	mov	r3, r6
 800d0c4:	462a      	mov	r2, r5
 800d0c6:	68b9      	ldr	r1, [r7, #8]
 800d0c8:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	ddde      	ble.n	800d09c <map_set_px+0xa8>
            }
            map_buf_tmp += map_w;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0e4:	4413      	add	r3, r2
 800d0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	627b      	str	r3, [r7, #36]	; 0x24
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	ddca      	ble.n	800d092 <map_set_px+0x9e>
            }
            mask_tmp += draw_area_w;
            map_buf_tmp += map_w;
        }
    }
}
 800d0fc:	e055      	b.n	800d1aa <map_set_px+0x1b6>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d104:	425b      	negs	r3, r3
 800d106:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d108:	4413      	add	r3, r2
 800d10a:	623b      	str	r3, [r7, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d112:	627b      	str	r3, [r7, #36]	; 0x24
 800d114:	e042      	b.n	800d19c <map_set_px+0x1a8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d11c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d11e:	e02a      	b.n	800d176 <map_set_px+0x182>
                if(mask_tmp[x]) {
 800d120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d122:	6a3a      	ldr	r2, [r7, #32]
 800d124:	4413      	add	r3, r2
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d021      	beq.n	800d170 <map_set_px+0x17c>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	695c      	ldr	r4, [r3, #20]
 800d130:	69fe      	ldr	r6, [r7, #28]
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	fa0f fc83 	sxth.w	ip, r3
 800d138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13a:	fa0f fe83 	sxth.w	lr, r3
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	b21b      	sxth	r3, r3
 800d142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d144:	0092      	lsls	r2, r2, #2
 800d146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d148:	440a      	add	r2, r1
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800d14a:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800d14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d150:	6a3d      	ldr	r5, [r7, #32]
 800d152:	4428      	add	r0, r5
 800d154:	7800      	ldrb	r0, [r0, #0]
 800d156:	fb00 f101 	mul.w	r1, r0, r1
 800d15a:	0a09      	lsrs	r1, r1, #8
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800d15c:	b2c9      	uxtb	r1, r1
 800d15e:	9102      	str	r1, [sp, #8]
 800d160:	6812      	ldr	r2, [r2, #0]
 800d162:	9201      	str	r2, [sp, #4]
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	4673      	mov	r3, lr
 800d168:	4662      	mov	r2, ip
 800d16a:	68b9      	ldr	r1, [r7, #8]
 800d16c:	4630      	mov	r0, r6
 800d16e:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	3301      	adds	r3, #1
 800d174:	62bb      	str	r3, [r7, #40]	; 0x28
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d17c:	461a      	mov	r2, r3
 800d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d180:	4293      	cmp	r3, r2
 800d182:	ddcd      	ble.n	800d120 <map_set_px+0x12c>
            mask_tmp += draw_area_w;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	6a3a      	ldr	r2, [r7, #32]
 800d188:	4413      	add	r3, r2
 800d18a:	623b      	str	r3, [r7, #32]
            map_buf_tmp += map_w;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d192:	4413      	add	r3, r2
 800d194:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d198:	3301      	adds	r3, #1
 800d19a:	627b      	str	r3, [r7, #36]	; 0x24
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	ddb5      	ble.n	800d116 <map_set_px+0x122>
}
 800d1aa:	bf00      	nop
 800d1ac:	3734      	adds	r7, #52	; 0x34
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1b2 <map_normal>:
 */
LV_ATTRIBUTE_FAST_MEM static void map_normal(const lv_area_t * disp_area, lv_color_t * disp_buf,
                                             const lv_area_t * draw_area,
                                             const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                                             const lv_opa_t * mask, lv_draw_mask_res_t mask_res)
{
 800d1b2:	b5b0      	push	{r4, r5, r7, lr}
 800d1b4:	b094      	sub	sp, #80	; 0x50
 800d1b6:	af02      	add	r7, sp, #8
 800d1b8:	60f8      	str	r0, [r7, #12]
 800d1ba:	60b9      	str	r1, [r7, #8]
 800d1bc:	607a      	str	r2, [r7, #4]
 800d1be:	603b      	str	r3, [r7, #0]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f7ff f8d5 	bl	800c370 <lv_area_get_width>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t draw_area_w = lv_area_get_width(draw_area);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff f8d0 	bl	800c370 <lv_area_get_width>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff f8e2 	bl	800c39e <lv_area_get_height>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	627b      	str	r3, [r7, #36]	; 0x24

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 800d1de:	6838      	ldr	r0, [r7, #0]
 800d1e0:	f7ff f8c6 	bl	800c370 <lv_area_get_width>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	623b      	str	r3, [r7, #32]

    /*Create a temp. disp_buf which always point to first pixel to draw*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f2:	fb03 f302 	mul.w	r3, r3, r2
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1fe:	4413      	add	r3, r2
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	4413      	add	r3, r2
 800d206:	647b      	str	r3, [r7, #68]	; 0x44

    /*Create a temp. map_buf which always point to first pixel to draw from the map*/
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d20e:	461a      	mov	r2, r3
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d216:	4619      	mov	r1, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d21e:	1acb      	subs	r3, r1, r3
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	6a3a      	ldr	r2, [r7, #32]
 800d224:	fb02 f303 	mul.w	r3, r2, r3
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d22c:	4413      	add	r3, r2
 800d22e:	643b      	str	r3, [r7, #64]	; 0x40
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d236:	461a      	mov	r2, r3
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d23e:	4619      	mov	r1, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d246:	1acb      	subs	r3, r1, r3
 800d248:	1ad3      	subs	r3, r2, r3
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d24e:	4413      	add	r3, r2
 800d250:	643b      	str	r3, [r7, #64]	; 0x40

#if LV_COLOR_SCREEN_TRANSP || LV_USE_GPU
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800d252:	f7fc fedd 	bl	800a010 <_lv_refr_get_disp_refreshing>
 800d256:	61f8      	str	r0, [r7, #28]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800d258:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	f040 8082 	bne.w	800d366 <map_normal+0x1b4>
#if LV_USE_GPU
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	d02a      	beq.n	800d2c0 <map_normal+0x10e>
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f00d fc77 	bl	801ab5e <lv_area_get_size>
 800d270:	4603      	mov	r3, r0
 800d272:	2bf0      	cmp	r3, #240	; 0xf0
 800d274:	d924      	bls.n	800d2c0 <map_normal+0x10e>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d27c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d27e:	e017      	b.n	800d2b0 <map_normal+0xfe>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d284:	69f8      	ldr	r0, [r7, #28]
 800d286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d288:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	4613      	mov	r3, r2
 800d290:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d294:	47a0      	blx	r4
                disp_buf_first += disp_w;
 800d296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d298:	009b      	lsls	r3, r3, #2
 800d29a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d29c:	4413      	add	r3, r2
 800d29e:	647b      	str	r3, [r7, #68]	; 0x44
                map_buf_first += map_w;
 800d2a0:	6a3b      	ldr	r3, [r7, #32]
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d2a6:	4413      	add	r3, r2
 800d2a8:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	dde0      	ble.n	800d280 <map_normal+0xce>
            }
            return;
 800d2be:	e238      	b.n	800d732 <map_normal+0x580>
        }
#endif

        if(opa > LV_OPA_MAX) {
 800d2c0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d2c4:	2bfd      	cmp	r3, #253	; 0xfd
 800d2c6:	d91b      	bls.n	800d300 <map_normal+0x14e>
                return;
            }
#endif

            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2cc:	e013      	b.n	800d2f6 <map_normal+0x144>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d2d8:	f00f fb0e 	bl	801c8f8 <_lv_memcpy>
                disp_buf_first += disp_w;
 800d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2e2:	4413      	add	r3, r2
 800d2e4:	647b      	str	r3, [r7, #68]	; 0x44
                map_buf_first += map_w;
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d2ec:	4413      	add	r3, r2
 800d2ee:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	dbe7      	blt.n	800d2ce <map_normal+0x11c>
 800d2fe:	e218      	b.n	800d732 <map_normal+0x580>
            }
#endif

            /*Software rendering*/

            for(y = 0; y < draw_area_h; y++) {
 800d300:	2300      	movs	r3, #0
 800d302:	63bb      	str	r3, [r7, #56]	; 0x38
 800d304:	e02a      	b.n	800d35c <map_normal+0x1aa>
                for(x = 0; x < draw_area_w; x++) {
 800d306:	2300      	movs	r3, #0
 800d308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d30a:	e016      	b.n	800d33a <map_normal+0x188>
                                                &disp_buf_first[x].ch.alpha);
                    }
                    else
#endif
                    {
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 800d30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d312:	4413      	add	r3, r2
 800d314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d316:	0092      	lsls	r2, r2, #2
 800d318:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d31a:	4411      	add	r1, r2
 800d31c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d31e:	0092      	lsls	r2, r2, #2
 800d320:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d322:	1884      	adds	r4, r0, r2
 800d324:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800d328:	6809      	ldr	r1, [r1, #0]
 800d32a:	6818      	ldr	r0, [r3, #0]
 800d32c:	f7fe ff5c 	bl	800c1e8 <lv_color_mix>
 800d330:	4603      	mov	r3, r0
 800d332:	6023      	str	r3, [r4, #0]
                for(x = 0; x < draw_area_w; x++) {
 800d334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d336:	3301      	adds	r3, #1
 800d338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d33a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	429a      	cmp	r2, r3
 800d340:	dbe4      	blt.n	800d30c <map_normal+0x15a>
                    }
                }
                disp_buf_first += disp_w;
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d348:	4413      	add	r3, r2
 800d34a:	647b      	str	r3, [r7, #68]	; 0x44
                map_buf_first += map_w;
 800d34c:	6a3b      	ldr	r3, [r7, #32]
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d352:	4413      	add	r3, r2
 800d354:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800d356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d358:	3301      	adds	r3, #1
 800d35a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d35c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	429a      	cmp	r2, r3
 800d362:	dbd0      	blt.n	800d306 <map_normal+0x154>
 800d364:	e1e5      	b.n	800d732 <map_normal+0x580>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 800d366:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d36a:	2bfd      	cmp	r3, #253	; 0xfd
 800d36c:	f240 8192 	bls.w	800d694 <map_normal+0x4e2>
            /*Go to the first pixel of the row */

            int32_t x_end4 = draw_area_w - 4;
 800d370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d372:	3b04      	subs	r3, #4
 800d374:	617b      	str	r3, [r7, #20]

            for(y = 0; y < draw_area_h; y++) {
 800d376:	2300      	movs	r3, #0
 800d378:	63bb      	str	r3, [r7, #56]	; 0x38
 800d37a:	e185      	b.n	800d688 <map_normal+0x4d6>
                const lv_opa_t * mask_tmp_x = mask;
 800d37c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d37e:	637b      	str	r3, [r7, #52]	; 0x34
#if 0
                for(x = 0; x < draw_area_w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800d380:	2300      	movs	r3, #0
 800d382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d384:	e02d      	b.n	800d3e2 <map_normal+0x230>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
 800d386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d023      	beq.n	800d3d6 <map_normal+0x224>
 800d38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2bff      	cmp	r3, #255	; 0xff
 800d394:	d10a      	bne.n	800d3ac <map_normal+0x1fa>
 800d396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d39c:	441a      	add	r2, r3
 800d39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3a4:	440b      	add	r3, r1
 800d3a6:	6812      	ldr	r2, [r2, #0]
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	e014      	b.n	800d3d6 <map_normal+0x224>
 800d3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3b2:	4413      	add	r3, r2
 800d3b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3b6:	0092      	lsls	r2, r2, #2
 800d3b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3ba:	4411      	add	r1, r2
 800d3bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3be:	7815      	ldrb	r5, [r2, #0]
 800d3c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3c2:	0092      	lsls	r2, r2, #2
 800d3c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d3c6:	1884      	adds	r4, r0, r2
 800d3c8:	462a      	mov	r2, r5
 800d3ca:	6809      	ldr	r1, [r1, #0]
 800d3cc:	6818      	ldr	r0, [r3, #0]
 800d3ce:	f7fe ff0b 	bl	800c1e8 <lv_color_mix>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	6023      	str	r3, [r4, #0]
 800d3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d8:	3301      	adds	r3, #1
 800d3da:	637b      	str	r3, [r7, #52]	; 0x34
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800d3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3de:	3301      	adds	r3, #1
 800d3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	da04      	bge.n	800d3f4 <map_normal+0x242>
 800d3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ec:	f003 0303 	and.w	r3, r3, #3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1c8      	bne.n	800d386 <map_normal+0x1d4>
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
 800d3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f6:	633b      	str	r3, [r7, #48]	; 0x30
                for(; x < x_end4; x += 4) {
 800d3f8:	e0fb      	b.n	800d5f2 <map_normal+0x440>
                    if(*mask32) {
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 80f1 	beq.w	800d5e6 <map_normal+0x434>
                        if((*mask32) == 0xFFFFFFFF) {
 800d404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d40c:	d12e      	bne.n	800d46c <map_normal+0x2ba>
                            disp_buf_first[x] = map_buf_first[x];
 800d40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d414:	441a      	add	r2, r3
 800d416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d41c:	440b      	add	r3, r1
 800d41e:	6812      	ldr	r2, [r2, #0]
 800d420:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 800d422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d424:	3301      	adds	r3, #1
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d42a:	441a      	add	r2, r3
 800d42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42e:	3301      	adds	r3, #1
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d434:	440b      	add	r3, r1
 800d436:	6812      	ldr	r2, [r2, #0]
 800d438:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 800d43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d43c:	3302      	adds	r3, #2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d442:	441a      	add	r2, r3
 800d444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d446:	3302      	adds	r3, #2
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d44c:	440b      	add	r3, r1
 800d44e:	6812      	ldr	r2, [r2, #0]
 800d450:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
 800d452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d454:	3303      	adds	r3, #3
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d45a:	441a      	add	r2, r3
 800d45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45e:	3303      	adds	r3, #3
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d464:	440b      	add	r3, r1
 800d466:	6812      	ldr	r2, [r2, #0]
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	e0bc      	b.n	800d5e6 <map_normal+0x434>
                        }
                        else {
                            mask_tmp_x = (const lv_opa_t *)mask32;
 800d46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46e:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x + 1)
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x + 2)
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x + 3)
#else
                            MAP_NORMAL_MASK_PX(x)
 800d470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d023      	beq.n	800d4c0 <map_normal+0x30e>
 800d478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2bff      	cmp	r3, #255	; 0xff
 800d47e:	d10a      	bne.n	800d496 <map_normal+0x2e4>
 800d480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d486:	441a      	add	r2, r3
 800d488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d48e:	440b      	add	r3, r1
 800d490:	6812      	ldr	r2, [r2, #0]
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	e014      	b.n	800d4c0 <map_normal+0x30e>
 800d496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d49c:	4413      	add	r3, r2
 800d49e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4a0:	0092      	lsls	r2, r2, #2
 800d4a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4a4:	4411      	add	r1, r2
 800d4a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4a8:	7815      	ldrb	r5, [r2, #0]
 800d4aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4ac:	0092      	lsls	r2, r2, #2
 800d4ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d4b0:	1884      	adds	r4, r0, r2
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	6809      	ldr	r1, [r1, #0]
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	f7fe fe96 	bl	800c1e8 <lv_color_mix>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX(x + 1)
 800d4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d028      	beq.n	800d520 <map_normal+0x36e>
 800d4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	2bff      	cmp	r3, #255	; 0xff
 800d4d4:	d10c      	bne.n	800d4f0 <map_normal+0x33e>
 800d4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d8:	3301      	adds	r3, #1
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4de:	441a      	add	r2, r3
 800d4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4e8:	440b      	add	r3, r1
 800d4ea:	6812      	ldr	r2, [r2, #0]
 800d4ec:	601a      	str	r2, [r3, #0]
 800d4ee:	e017      	b.n	800d520 <map_normal+0x36e>
 800d4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4f8:	4413      	add	r3, r2
 800d4fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4fc:	3201      	adds	r2, #1
 800d4fe:	0092      	lsls	r2, r2, #2
 800d500:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d502:	4411      	add	r1, r2
 800d504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d506:	7815      	ldrb	r5, [r2, #0]
 800d508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d50a:	3201      	adds	r2, #1
 800d50c:	0092      	lsls	r2, r2, #2
 800d50e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d510:	1884      	adds	r4, r0, r2
 800d512:	462a      	mov	r2, r5
 800d514:	6809      	ldr	r1, [r1, #0]
 800d516:	6818      	ldr	r0, [r3, #0]
 800d518:	f7fe fe66 	bl	800c1e8 <lv_color_mix>
 800d51c:	4603      	mov	r3, r0
 800d51e:	6023      	str	r3, [r4, #0]
 800d520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d522:	3301      	adds	r3, #1
 800d524:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX(x + 2)
 800d526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d028      	beq.n	800d580 <map_normal+0x3ce>
 800d52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2bff      	cmp	r3, #255	; 0xff
 800d534:	d10c      	bne.n	800d550 <map_normal+0x39e>
 800d536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d538:	3302      	adds	r3, #2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d53e:	441a      	add	r2, r3
 800d540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d542:	3302      	adds	r3, #2
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d548:	440b      	add	r3, r1
 800d54a:	6812      	ldr	r2, [r2, #0]
 800d54c:	601a      	str	r2, [r3, #0]
 800d54e:	e017      	b.n	800d580 <map_normal+0x3ce>
 800d550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d552:	3302      	adds	r3, #2
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d558:	4413      	add	r3, r2
 800d55a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d55c:	3202      	adds	r2, #2
 800d55e:	0092      	lsls	r2, r2, #2
 800d560:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d562:	4411      	add	r1, r2
 800d564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d566:	7815      	ldrb	r5, [r2, #0]
 800d568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d56a:	3202      	adds	r2, #2
 800d56c:	0092      	lsls	r2, r2, #2
 800d56e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d570:	1884      	adds	r4, r0, r2
 800d572:	462a      	mov	r2, r5
 800d574:	6809      	ldr	r1, [r1, #0]
 800d576:	6818      	ldr	r0, [r3, #0]
 800d578:	f7fe fe36 	bl	800c1e8 <lv_color_mix>
 800d57c:	4603      	mov	r3, r0
 800d57e:	6023      	str	r3, [r4, #0]
 800d580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d582:	3301      	adds	r3, #1
 800d584:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX(x + 3)
 800d586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d028      	beq.n	800d5e0 <map_normal+0x42e>
 800d58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	2bff      	cmp	r3, #255	; 0xff
 800d594:	d10c      	bne.n	800d5b0 <map_normal+0x3fe>
 800d596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d598:	3303      	adds	r3, #3
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d59e:	441a      	add	r2, r3
 800d5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a2:	3303      	adds	r3, #3
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5a8:	440b      	add	r3, r1
 800d5aa:	6812      	ldr	r2, [r2, #0]
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	e017      	b.n	800d5e0 <map_normal+0x42e>
 800d5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b2:	3303      	adds	r3, #3
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5b8:	4413      	add	r3, r2
 800d5ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5bc:	3203      	adds	r2, #3
 800d5be:	0092      	lsls	r2, r2, #2
 800d5c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5c2:	4411      	add	r1, r2
 800d5c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5c6:	7815      	ldrb	r5, [r2, #0]
 800d5c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5ca:	3203      	adds	r2, #3
 800d5cc:	0092      	lsls	r2, r2, #2
 800d5ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d5d0:	1884      	adds	r4, r0, r2
 800d5d2:	462a      	mov	r2, r5
 800d5d4:	6809      	ldr	r1, [r1, #0]
 800d5d6:	6818      	ldr	r0, [r3, #0]
 800d5d8:	f7fe fe06 	bl	800c1e8 <lv_color_mix>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	6023      	str	r3, [r4, #0]
 800d5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	637b      	str	r3, [r7, #52]	; 0x34
#endif
                        }
                    }
                    mask32++;
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e8:	3304      	adds	r3, #4
 800d5ea:	633b      	str	r3, [r7, #48]	; 0x30
                for(; x < x_end4; x += 4) {
 800d5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	f6ff aeff 	blt.w	800d3fa <map_normal+0x248>
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
 800d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fe:	637b      	str	r3, [r7, #52]	; 0x34
                for(; x < draw_area_w ; x++) {
 800d600:	e02d      	b.n	800d65e <map_normal+0x4ac>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
 800d602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d023      	beq.n	800d652 <map_normal+0x4a0>
 800d60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	2bff      	cmp	r3, #255	; 0xff
 800d610:	d10a      	bne.n	800d628 <map_normal+0x476>
 800d612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d618:	441a      	add	r2, r3
 800d61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d620:	440b      	add	r3, r1
 800d622:	6812      	ldr	r2, [r2, #0]
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	e014      	b.n	800d652 <map_normal+0x4a0>
 800d628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d62e:	4413      	add	r3, r2
 800d630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d632:	0092      	lsls	r2, r2, #2
 800d634:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d636:	4411      	add	r1, r2
 800d638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d63a:	7815      	ldrb	r5, [r2, #0]
 800d63c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d63e:	0092      	lsls	r2, r2, #2
 800d640:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d642:	1884      	adds	r4, r0, r2
 800d644:	462a      	mov	r2, r5
 800d646:	6809      	ldr	r1, [r1, #0]
 800d648:	6818      	ldr	r0, [r3, #0]
 800d64a:	f7fe fdcd 	bl	800c1e8 <lv_color_mix>
 800d64e:	4603      	mov	r3, r0
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d654:	3301      	adds	r3, #1
 800d656:	637b      	str	r3, [r7, #52]	; 0x34
                for(; x < draw_area_w ; x++) {
 800d658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d65a:	3301      	adds	r3, #1
 800d65c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d65e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	429a      	cmp	r2, r3
 800d664:	dbcd      	blt.n	800d602 <map_normal+0x450>
#endif
                }
#endif
                disp_buf_first += disp_w;
 800d666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d66c:	4413      	add	r3, r2
 800d66e:	647b      	str	r3, [r7, #68]	; 0x44
                mask += draw_area_w;
 800d670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d674:	4413      	add	r3, r2
 800d676:	663b      	str	r3, [r7, #96]	; 0x60
                map_buf_first += map_w;
 800d678:	6a3b      	ldr	r3, [r7, #32]
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d67e:	4413      	add	r3, r2
 800d680:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800d682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d684:	3301      	adds	r3, #1
 800d686:	63bb      	str	r3, [r7, #56]	; 0x38
 800d688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68c:	429a      	cmp	r2, r3
 800d68e:	f6ff ae75 	blt.w	800d37c <map_normal+0x1ca>
 800d692:	e04e      	b.n	800d732 <map_normal+0x580>
            }
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < draw_area_h; y++) {
 800d694:	2300      	movs	r3, #0
 800d696:	63bb      	str	r3, [r7, #56]	; 0x38
 800d698:	e047      	b.n	800d72a <map_normal+0x578>
                for(x = 0; x < draw_area_w; x++) {
 800d69a:	2300      	movs	r3, #0
 800d69c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d69e:	e02f      	b.n	800d700 <map_normal+0x54e>
                    if(mask[x]) {
 800d6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6a4:	4413      	add	r3, r2
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d026      	beq.n	800d6fa <map_normal+0x548>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800d6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6b0:	4413      	add	r3, r2
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2bfc      	cmp	r3, #252	; 0xfc
 800d6b6:	d80a      	bhi.n	800d6ce <map_normal+0x51c>
 800d6b8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d6bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d6c0:	440a      	add	r2, r1
 800d6c2:	7812      	ldrb	r2, [r2, #0]
 800d6c4:	fb02 f303 	mul.w	r3, r2, r3
 800d6c8:	121b      	asrs	r3, r3, #8
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	e001      	b.n	800d6d2 <map_normal+0x520>
 800d6ce:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d6d2:	76fb      	strb	r3, [r7, #27]
                                                    &disp_buf_first[x].ch.alpha);
                        }
                        else
#endif
                        {
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 800d6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6da:	4413      	add	r3, r2
 800d6dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6de:	0092      	lsls	r2, r2, #2
 800d6e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6e2:	4411      	add	r1, r2
 800d6e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6e6:	0092      	lsls	r2, r2, #2
 800d6e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d6ea:	1884      	adds	r4, r0, r2
 800d6ec:	7efa      	ldrb	r2, [r7, #27]
 800d6ee:	6809      	ldr	r1, [r1, #0]
 800d6f0:	6818      	ldr	r0, [r3, #0]
 800d6f2:	f7fe fd79 	bl	800c1e8 <lv_color_mix>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	6023      	str	r3, [r4, #0]
                for(x = 0; x < draw_area_w; x++) {
 800d6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d704:	429a      	cmp	r2, r3
 800d706:	dbcb      	blt.n	800d6a0 <map_normal+0x4ee>
                        }
                    }
                }
                disp_buf_first += disp_w;
 800d708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d70e:	4413      	add	r3, r2
 800d710:	647b      	str	r3, [r7, #68]	; 0x44
                mask += draw_area_w;
 800d712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d714:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d716:	4413      	add	r3, r2
 800d718:	663b      	str	r3, [r7, #96]	; 0x60
                map_buf_first += map_w;
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d720:	4413      	add	r3, r2
 800d722:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800d724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d726:	3301      	adds	r3, #1
 800d728:	63bb      	str	r3, [r7, #56]	; 0x38
 800d72a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72e:	429a      	cmp	r2, r3
 800d730:	dbb3      	blt.n	800d69a <map_normal+0x4e8>
            }
        }
    }
}
 800d732:	3748      	adds	r7, #72	; 0x48
 800d734:	46bd      	mov	sp, r7
 800d736:	bdb0      	pop	{r4, r5, r7, pc}

0800d738 <map_blended>:
#if LV_USE_BLEND_MODES
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
 800d738:	b590      	push	{r4, r7, lr}
 800d73a:	b08f      	sub	sp, #60	; 0x3c
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
 800d744:	603b      	str	r3, [r7, #0]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f7fe fe12 	bl	800c370 <lv_area_get_width>
 800d74c:	4603      	mov	r3, r0
 800d74e:	61fb      	str	r3, [r7, #28]

    /*Get the width of the `draw_area` it will be used to go to the next line of the mask*/
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7fe fe0d 	bl	800c370 <lv_area_get_width>
 800d756:	4603      	mov	r3, r0
 800d758:	61bb      	str	r3, [r7, #24]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 800d75a:	6838      	ldr	r0, [r7, #0]
 800d75c:	f7fe fe08 	bl	800c370 <lv_area_get_width>
 800d760:	4603      	mov	r3, r0
 800d762:	617b      	str	r3, [r7, #20]

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d76a:	461a      	mov	r2, r3
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	fb03 f302 	mul.w	r3, r3, r2
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	4413      	add	r3, r2
 800d778:	637b      	str	r3, [r7, #52]	; 0x34

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d780:	461a      	mov	r2, r3
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d788:	4619      	mov	r1, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d790:	1acb      	subs	r3, r1, r3
 800d792:	1ad3      	subs	r3, r2, r3
 800d794:	697a      	ldr	r2, [r7, #20]
 800d796:	fb02 f303 	mul.w	r3, r2, r3
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d79e:	4413      	add	r3, r2
 800d7a0:	633b      	str	r3, [r7, #48]	; 0x30

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
 800d7a2:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d002      	beq.n	800d7b0 <map_blended+0x78>
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d003      	beq.n	800d7b6 <map_blended+0x7e>
        case LV_BLEND_MODE_SUBTRACTIVE:
            blend_fp = color_blend_true_color_subtractive;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 800d7ae:	e0c9      	b.n	800d944 <map_blended+0x20c>
            blend_fp = color_blend_true_color_additive;
 800d7b0:	4b66      	ldr	r3, [pc, #408]	; (800d94c <map_blended+0x214>)
 800d7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800d7b4:	e002      	b.n	800d7bc <map_blended+0x84>
            blend_fp = color_blend_true_color_subtractive;
 800d7b6:	4b66      	ldr	r3, [pc, #408]	; (800d950 <map_blended+0x218>)
 800d7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800d7ba:	bf00      	nop

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800d7bc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d155      	bne.n	800d870 <map_blended+0x138>
        /*Go to the first px of the row*/
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7da:	1acb      	subs	r3, r1, r3
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7e2:	4413      	add	r3, r2
 800d7e4:	633b      	str	r3, [r7, #48]	; 0x30

        /*The map will be indexed from `draw_area->x1` so compensate it.*/
        map_buf_tmp -= draw_area->x1;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	425b      	negs	r3, r3
 800d7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7f2:	4413      	add	r3, r2
 800d7f4:	633b      	str	r3, [r7, #48]	; 0x30

        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800d7fe:	e02f      	b.n	800d860 <map_blended+0x128>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d806:	62bb      	str	r3, [r7, #40]	; 0x28
 800d808:	e016      	b.n	800d838 <map_blended+0x100>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 800d80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d810:	18d0      	adds	r0, r2, r3
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d818:	18d1      	adds	r1, r2, r3
 800d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d820:	18d4      	adds	r4, r2, r3
 800d822:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	6809      	ldr	r1, [r1, #0]
 800d82a:	6800      	ldr	r0, [r0, #0]
 800d82c:	4798      	blx	r3
 800d82e:	4603      	mov	r3, r0
 800d830:	6023      	str	r3, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d834:	3301      	adds	r3, #1
 800d836:	62bb      	str	r3, [r7, #40]	; 0x28
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d83e:	461a      	mov	r2, r3
 800d840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d842:	4293      	cmp	r3, r2
 800d844:	dde1      	ble.n	800d80a <map_blended+0xd2>
            }
            disp_buf_tmp += disp_w;
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d84c:	4413      	add	r3, r2
 800d84e:	637b      	str	r3, [r7, #52]	; 0x34
            map_buf_tmp += map_w;
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d856:	4413      	add	r3, r2
 800d858:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85c:	3301      	adds	r3, #1
 800d85e:	627b      	str	r3, [r7, #36]	; 0x24
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d866:	461a      	mov	r2, r3
 800d868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86a:	4293      	cmp	r3, r2
 800d86c:	ddc8      	ble.n	800d800 <map_blended+0xc8>
 800d86e:	e069      	b.n	800d944 <map_blended+0x20c>
    /*Masked*/
    else {
        /* The mask is relative to the clipped area.
         * In the cycles below mask will be indexed from `draw_area.x1`
         * but it corresponds to zero index. So prepare `mask_tmp` accordingly. */
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d876:	425b      	negs	r3, r3
 800d878:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d87a:	4413      	add	r3, r2
 800d87c:	623b      	str	r3, [r7, #32]

        map_buf_tmp -= draw_area->x1;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	425b      	negs	r3, r3
 800d888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d88a:	4413      	add	r3, r2
 800d88c:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d894:	627b      	str	r3, [r7, #36]	; 0x24
 800d896:	e04e      	b.n	800d936 <map_blended+0x1fe>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d89e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8a0:	e031      	b.n	800d906 <map_blended+0x1ce>
                if(mask_tmp[x] == 0) continue;
 800d8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a4:	6a3a      	ldr	r2, [r7, #32]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d027      	beq.n	800d8fe <map_blended+0x1c6>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 800d8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b0:	6a3a      	ldr	r2, [r7, #32]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	2bfc      	cmp	r3, #252	; 0xfc
 800d8b8:	d80a      	bhi.n	800d8d0 <map_blended+0x198>
 800d8ba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d8be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8c0:	6a39      	ldr	r1, [r7, #32]
 800d8c2:	440a      	add	r2, r1
 800d8c4:	7812      	ldrb	r2, [r2, #0]
 800d8c6:	fb02 f303 	mul.w	r3, r2, r3
 800d8ca:	121b      	asrs	r3, r3, #8
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	e001      	b.n	800d8d4 <map_blended+0x19c>
 800d8d0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d8d4:	74fb      	strb	r3, [r7, #19]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 800d8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8dc:	18d0      	adds	r0, r2, r3
 800d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8e4:	18d1      	adds	r1, r2, r3
 800d8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8ec:	18d4      	adds	r4, r2, r3
 800d8ee:	7cfa      	ldrb	r2, [r7, #19]
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	6809      	ldr	r1, [r1, #0]
 800d8f4:	6800      	ldr	r0, [r0, #0]
 800d8f6:	4798      	blx	r3
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	6023      	str	r3, [r4, #0]
 800d8fc:	e000      	b.n	800d900 <map_blended+0x1c8>
                if(mask_tmp[x] == 0) continue;
 800d8fe:	bf00      	nop
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d902:	3301      	adds	r3, #1
 800d904:	62bb      	str	r3, [r7, #40]	; 0x28
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d90c:	461a      	mov	r2, r3
 800d90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d910:	4293      	cmp	r3, r2
 800d912:	ddc6      	ble.n	800d8a2 <map_blended+0x16a>
            }
            disp_buf_tmp += disp_w;
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d91a:	4413      	add	r3, r2
 800d91c:	637b      	str	r3, [r7, #52]	; 0x34
            mask_tmp += draw_area_w;
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	6a3a      	ldr	r2, [r7, #32]
 800d922:	4413      	add	r3, r2
 800d924:	623b      	str	r3, [r7, #32]
            map_buf_tmp += map_w;
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d92c:	4413      	add	r3, r2
 800d92e:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	3301      	adds	r3, #1
 800d934:	627b      	str	r3, [r7, #36]	; 0x24
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d93c:	461a      	mov	r2, r3
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d940:	4293      	cmp	r3, r2
 800d942:	dda9      	ble.n	800d898 <map_blended+0x160>
        }
    }
}
 800d944:	373c      	adds	r7, #60	; 0x3c
 800d946:	46bd      	mov	sp, r7
 800d948:	bd90      	pop	{r4, r7, pc}
 800d94a:	bf00      	nop
 800d94c:	0800d955 	.word	0x0800d955
 800d950:	0800d9c5 	.word	0x0800d9c5

0800d954 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	4613      	mov	r3, r2
 800d960:	71fb      	strb	r3, [r7, #7]

    if(opa <= LV_OPA_MIN) return bg;
 800d962:	79fb      	ldrb	r3, [r7, #7]
 800d964:	2b02      	cmp	r3, #2
 800d966:	d801      	bhi.n	800d96c <color_blend_true_color_additive+0x18>
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	e027      	b.n	800d9bc <color_blend_true_color_additive+0x68>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
 800d96c:	7abb      	ldrb	r3, [r7, #10]
 800d96e:	461a      	mov	r2, r3
 800d970:	7bbb      	ldrb	r3, [r7, #14]
 800d972:	4413      	add	r3, r2
 800d974:	617b      	str	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
#elif LV_COLOR_DEPTH == 32
    fg.ch.red = LV_MATH_MIN(tmp, 255);
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2bff      	cmp	r3, #255	; 0xff
 800d97a:	bf28      	it	cs
 800d97c:	23ff      	movcs	r3, #255	; 0xff
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	73bb      	strb	r3, [r7, #14]
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2bff      	cmp	r3, #255	; 0xff
 800d986:	bf28      	it	cs
 800d988:	23ff      	movcs	r3, #255	; 0xff
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	737b      	strb	r3, [r7, #13]
#endif

    tmp = bg.ch.blue + fg.ch.blue;
 800d98e:	7a3b      	ldrb	r3, [r7, #8]
 800d990:	461a      	mov	r2, r3
 800d992:	7b3b      	ldrb	r3, [r7, #12]
 800d994:	4413      	add	r3, r2
 800d996:	617b      	str	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	2bff      	cmp	r3, #255	; 0xff
 800d99c:	bf28      	it	cs
 800d99e:	23ff      	movcs	r3, #255	; 0xff
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	733b      	strb	r3, [r7, #12]
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 800d9a4:	79fb      	ldrb	r3, [r7, #7]
 800d9a6:	2bff      	cmp	r3, #255	; 0xff
 800d9a8:	d101      	bne.n	800d9ae <color_blend_true_color_additive+0x5a>
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	e006      	b.n	800d9bc <color_blend_true_color_additive+0x68>

    return lv_color_mix(fg, bg, opa);
 800d9ae:	79fb      	ldrb	r3, [r7, #7]
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	68b9      	ldr	r1, [r7, #8]
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f7fe fc17 	bl	800c1e8 <lv_color_mix>
 800d9ba:	4603      	mov	r3, r0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3718      	adds	r7, #24
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	71fb      	strb	r3, [r7, #7]

    if(opa <= LV_OPA_MIN) return bg;
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d801      	bhi.n	800d9dc <color_blend_true_color_subtractive+0x18>
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	e029      	b.n	800da30 <color_blend_true_color_subtractive+0x6c>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 800d9dc:	7abb      	ldrb	r3, [r7, #10]
 800d9de:	461a      	mov	r2, r3
 800d9e0:	7bbb      	ldrb	r3, [r7, #14]
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	617b      	str	r3, [r7, #20]
    fg.ch.red = LV_MATH_MAX(tmp, 0);
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	73bb      	strb	r3, [r7, #14]

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 800d9f0:	7a7b      	ldrb	r3, [r7, #9]
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	7b7b      	ldrb	r3, [r7, #13]
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	617b      	str	r3, [r7, #20]
    fg.ch.green = LV_MATH_MAX(tmp, 0);
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800da00:	b2db      	uxtb	r3, r3
 800da02:	737b      	strb	r3, [r7, #13]
    tmp = LV_MATH_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 800da04:	7a3b      	ldrb	r3, [r7, #8]
 800da06:	461a      	mov	r2, r3
 800da08:	7b3b      	ldrb	r3, [r7, #12]
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	617b      	str	r3, [r7, #20]
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800da14:	b2db      	uxtb	r3, r3
 800da16:	733b      	strb	r3, [r7, #12]

    if(opa == LV_OPA_COVER) return fg;
 800da18:	79fb      	ldrb	r3, [r7, #7]
 800da1a:	2bff      	cmp	r3, #255	; 0xff
 800da1c:	d101      	bne.n	800da22 <color_blend_true_color_subtractive+0x5e>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	e006      	b.n	800da30 <color_blend_true_color_subtractive+0x6c>

    return lv_color_mix(fg, bg, opa);
 800da22:	79fb      	ldrb	r3, [r7, #7]
 800da24:	461a      	mov	r2, r3
 800da26:	68b9      	ldr	r1, [r7, #8]
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f7fe fbdd 	bl	800c1e8 <lv_color_mix>
 800da2e:	4603      	mov	r3, r0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3718      	adds	r7, #24
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <lv_color_premult>:
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	460b      	mov	r3, r1
 800da42:	607a      	str	r2, [r7, #4]
 800da44:	72fb      	strb	r3, [r7, #11]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800da46:	7bbb      	ldrb	r3, [r7, #14]
 800da48:	b29a      	uxth	r2, r3
 800da4a:	7afb      	ldrb	r3, [r7, #11]
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	fb12 f303 	smulbb	r3, r2, r3
 800da52:	b29a      	uxth	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	801a      	strh	r2, [r3, #0]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800da58:	7b7b      	ldrb	r3, [r7, #13]
 800da5a:	b299      	uxth	r1, r3
 800da5c:	7afb      	ldrb	r3, [r7, #11]
 800da5e:	b29a      	uxth	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	3302      	adds	r3, #2
 800da64:	fb11 f202 	smulbb	r2, r1, r2
 800da68:	b292      	uxth	r2, r2
 800da6a:	801a      	strh	r2, [r3, #0]
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800da6c:	7b3b      	ldrb	r3, [r7, #12]
 800da6e:	b299      	uxth	r1, r3
 800da70:	7afb      	ldrb	r3, [r7, #11]
 800da72:	b29a      	uxth	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	3304      	adds	r3, #4
 800da78:	fb11 f202 	smulbb	r2, r1, r2
 800da7c:	b292      	uxth	r2, r2
 800da7e:	801a      	strh	r2, [r3, #0]
}
 800da80:	bf00      	nop
 800da82:	3714      	adds	r7, #20
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <lv_color_mix_premult>:
{
 800da8c:	b480      	push	{r7}
 800da8e:	b087      	sub	sp, #28
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	4613      	mov	r3, r2
 800da98:	71fb      	strb	r3, [r7, #7]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	881b      	ldrh	r3, [r3, #0]
 800da9e:	461a      	mov	r2, r3
 800daa0:	7abb      	ldrb	r3, [r7, #10]
 800daa2:	4619      	mov	r1, r3
 800daa4:	79fb      	ldrb	r3, [r7, #7]
 800daa6:	fb03 f301 	mul.w	r3, r3, r1
 800daaa:	4413      	add	r3, r2
 800daac:	461a      	mov	r2, r3
 800daae:	4613      	mov	r3, r2
 800dab0:	021b      	lsls	r3, r3, #8
 800dab2:	4413      	add	r3, r2
 800dab4:	01db      	lsls	r3, r3, #7
 800dab6:	4413      	add	r3, r2
 800dab8:	0ddb      	lsrs	r3, r3, #23
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	3302      	adds	r3, #2
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	461a      	mov	r2, r3
 800dac6:	7a7b      	ldrb	r3, [r7, #9]
 800dac8:	4619      	mov	r1, r3
 800daca:	79fb      	ldrb	r3, [r7, #7]
 800dacc:	fb03 f301 	mul.w	r3, r3, r1
 800dad0:	4413      	add	r3, r2
 800dad2:	461a      	mov	r2, r3
 800dad4:	4613      	mov	r3, r2
 800dad6:	021b      	lsls	r3, r3, #8
 800dad8:	4413      	add	r3, r2
 800dada:	01db      	lsls	r3, r3, #7
 800dadc:	4413      	add	r3, r2
 800dade:	0ddb      	lsrs	r3, r3, #23
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	3304      	adds	r3, #4
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	461a      	mov	r2, r3
 800daec:	7a3b      	ldrb	r3, [r7, #8]
 800daee:	4619      	mov	r1, r3
 800daf0:	79fb      	ldrb	r3, [r7, #7]
 800daf2:	fb03 f301 	mul.w	r3, r3, r1
 800daf6:	4413      	add	r3, r2
 800daf8:	461a      	mov	r2, r3
 800dafa:	4613      	mov	r3, r2
 800dafc:	021b      	lsls	r3, r3, #8
 800dafe:	4413      	add	r3, r2
 800db00:	01db      	lsls	r3, r3, #7
 800db02:	4413      	add	r3, r2
 800db04:	0ddb      	lsrs	r3, r3, #23
 800db06:	b2db      	uxtb	r3, r3
 800db08:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 800db0a:	23ff      	movs	r3, #255	; 0xff
 800db0c:	75fb      	strb	r3, [r7, #23]
    return ret;
 800db0e:	697b      	ldr	r3, [r7, #20]
}
 800db10:	4618      	mov	r0, r3
 800db12:	371c      	adds	r7, #28
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b087      	sub	sp, #28
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	613b      	str	r3, [r7, #16]

    while(len) {
 800db30:	e00c      	b.n	800db4c <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	781a      	ldrb	r2, [r3, #0]
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	701a      	strb	r2, [r3, #0]
        d8++;
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	3301      	adds	r3, #1
 800db3e:	617b      	str	r3, [r7, #20]
        s8++;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	3301      	adds	r3, #1
 800db44:	613b      	str	r3, [r7, #16]
        len--;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	3b01      	subs	r3, #1
 800db4a:	607b      	str	r3, [r7, #4]
    while(len) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1ef      	bne.n	800db32 <_lv_memcpy_small+0x16>
    }

    return dst;
 800db52:	68fb      	ldr	r3, [r7, #12]
}
 800db54:	4618      	mov	r0, r3
 800db56:	371c      	adds	r7, #28
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <lv_area_copy>:
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 800db6a:	2208      	movs	r2, #8
 800db6c:	6839      	ldr	r1, [r7, #0]
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff ffd4 	bl	800db1c <_lv_memcpy_small>
}
 800db74:	bf00      	nop
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <lv_area_get_width>:
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db92:	b29b      	uxth	r3, r3
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	b29b      	uxth	r3, r3
 800db98:	3301      	adds	r3, #1
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	b21b      	sxth	r3, r3
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr

0800dbaa <lv_area_get_height>:
{
 800dbaa:	b480      	push	{r7}
 800dbac:	b083      	sub	sp, #12
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dbb8:	b29a      	uxth	r2, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	b21b      	sxth	r3, r3
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <_lv_img_buf_transform>:
 * @param y the coordinate which color and opa should be get
 * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of the image
 * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 */
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 800dbd8:	b590      	push	{r4, r7, lr}
 800dbda:	b08f      	sub	sp, #60	; 0x3c
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	807b      	strh	r3, [r7, #2]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	803b      	strh	r3, [r7, #0]
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	627b      	str	r3, [r7, #36]	; 0x24

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
 800dbee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800dbf8:	1a9b      	subs	r3, r3, r2
 800dbfa:	623b      	str	r3, [r7, #32]
    int32_t yt = y - dsc->cfg.pivot_y;
 800dbfc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800dc06:	1a9b      	subs	r3, r3, r2
 800dc08:	61fb      	str	r3, [r7, #28]

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	89db      	ldrh	r3, [r3, #14]
 800dc0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc12:	d120      	bne.n	800dc56 <_lv_img_buf_transform+0x7e>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc18:	6a3a      	ldr	r2, [r7, #32]
 800dc1a:	fb02 f203 	mul.w	r2, r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc22:	69f9      	ldr	r1, [r7, #28]
 800dc24:	fb01 f303 	mul.w	r3, r1, r3
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	109a      	asrs	r2, r3, #2
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc30:	4413      	add	r3, r2
 800dc32:	637b      	str	r3, [r7, #52]	; 0x34
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc38:	6a3a      	ldr	r2, [r7, #32]
 800dc3a:	fb02 f203 	mul.w	r2, r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc42:	69f9      	ldr	r1, [r7, #28]
 800dc44:	fb01 f303 	mul.w	r3, r1, r3
 800dc48:	4413      	add	r3, r2
 800dc4a:	109a      	asrs	r2, r3, #2
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc50:	4413      	add	r3, r2
 800dc52:	633b      	str	r3, [r7, #48]	; 0x30
 800dc54:	e04b      	b.n	800dcee <_lv_img_buf_transform+0x116>
    }
    else if(dsc->cfg.angle == 0) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d118      	bne.n	800dc92 <_lv_img_buf_transform+0xba>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc64:	6a3a      	ldr	r2, [r7, #32]
 800dc66:	fb02 f303 	mul.w	r3, r2, r3
 800dc6a:	115b      	asrs	r3, r3, #5
 800dc6c:	623b      	str	r3, [r7, #32]
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc72:	69fa      	ldr	r2, [r7, #28]
 800dc74:	fb02 f303 	mul.w	r3, r2, r3
 800dc78:	115b      	asrs	r3, r3, #5
 800dc7a:	61fb      	str	r3, [r7, #28]
        xs = xt + dsc->tmp.pivot_x_256;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc80:	6a3a      	ldr	r2, [r7, #32]
 800dc82:	4413      	add	r3, r2
 800dc84:	637b      	str	r3, [r7, #52]	; 0x34
        ys = yt + dsc->tmp.pivot_y_256;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc8a:	69fa      	ldr	r2, [r7, #28]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	633b      	str	r3, [r7, #48]	; 0x30
 800dc90:	e02d      	b.n	800dcee <_lv_img_buf_transform+0x116>
    }
    else {
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc96:	6a3a      	ldr	r2, [r7, #32]
 800dc98:	fb02 f303 	mul.w	r3, r2, r3
 800dc9c:	115b      	asrs	r3, r3, #5
 800dc9e:	623b      	str	r3, [r7, #32]
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca4:	69fa      	ldr	r2, [r7, #28]
 800dca6:	fb02 f303 	mul.w	r3, r2, r3
 800dcaa:	115b      	asrs	r3, r3, #5
 800dcac:	61fb      	str	r3, [r7, #28]
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb2:	6a3a      	ldr	r2, [r7, #32]
 800dcb4:	fb02 f203 	mul.w	r2, r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcbc:	69f9      	ldr	r1, [r7, #28]
 800dcbe:	fb01 f303 	mul.w	r3, r1, r3
 800dcc2:	1ad3      	subs	r3, r2, r3
 800dcc4:	129a      	asrs	r2, r3, #10
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcca:	4413      	add	r3, r2
 800dccc:	637b      	str	r3, [r7, #52]	; 0x34
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcd2:	6a3a      	ldr	r2, [r7, #32]
 800dcd4:	fb02 f203 	mul.w	r2, r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcdc:	69f9      	ldr	r1, [r7, #28]
 800dcde:	fb01 f303 	mul.w	r3, r1, r3
 800dce2:	4413      	add	r3, r2
 800dce4:	129a      	asrs	r2, r3, #10
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcea:	4413      	add	r3, r2
 800dcec:	633b      	str	r3, [r7, #48]	; 0x30
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
 800dcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf0:	121b      	asrs	r3, r3, #8
 800dcf2:	61bb      	str	r3, [r7, #24]
    int32_t ys_int = ys >> 8;
 800dcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf6:	121b      	asrs	r3, r3, #8
 800dcf8:	617b      	str	r3, [r7, #20]

    if(xs_int >= dsc->cfg.src_w) return false;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd00:	461a      	mov	r2, r3
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	4293      	cmp	r3, r2
 800dd06:	db01      	blt.n	800dd0c <_lv_img_buf_transform+0x134>
 800dd08:	2300      	movs	r3, #0
 800dd0a:	e0c8      	b.n	800de9e <_lv_img_buf_transform+0x2c6>
    else if(xs_int < 0) return false;
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	da01      	bge.n	800dd16 <_lv_img_buf_transform+0x13e>
 800dd12:	2300      	movs	r3, #0
 800dd14:	e0c3      	b.n	800de9e <_lv_img_buf_transform+0x2c6>

    if(ys_int >= dsc->cfg.src_h) return false;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	4293      	cmp	r3, r2
 800dd22:	db01      	blt.n	800dd28 <_lv_img_buf_transform+0x150>
 800dd24:	2300      	movs	r3, #0
 800dd26:	e0ba      	b.n	800de9e <_lv_img_buf_transform+0x2c6>
    else if(ys_int < 0) return false;
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	da01      	bge.n	800dd32 <_lv_img_buf_transform+0x15a>
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e0b5      	b.n	800de9e <_lv_img_buf_transform+0x2c6>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd38:	f003 0304 	and.w	r3, r3, #4
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d04c      	beq.n	800dddc <_lv_img_buf_transform+0x204>
        if(dsc->tmp.has_alpha == 0) {
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd48:	f003 0302 	and.w	r3, r3, #2
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d11c      	bne.n	800dd8c <_lv_img_buf_transform+0x1b4>
            px_size = LV_COLOR_SIZE >> 3;
 800dd52:	2304      	movs	r3, #4
 800dd54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	fb03 f202 	mul.w	r2, r3, r2
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	4413      	add	r3, r2
 800dd6a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dd6e:	fb02 f303 	mul.w	r3, r2, r3
 800dd72:	62bb      	str	r3, [r7, #40]	; 0x28
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f103 0018 	add.w	r0, r3, #24
 800dd7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	4413      	add	r3, r2
 800dd80:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dd84:	4619      	mov	r1, r3
 800dd86:	f7ff fec9 	bl	800db1c <_lv_memcpy_small>
 800dd8a:	e046      	b.n	800de1a <_lv_img_buf_transform+0x242>
        }
        else {
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 800dd8c:	2304      	movs	r3, #4
 800dd8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	fb03 f202 	mul.w	r2, r3, r2
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	4413      	add	r3, r2
 800dda4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dda8:	fb02 f303 	mul.w	r3, r2, r3
 800ddac:	62bb      	str	r3, [r7, #40]	; 0x28
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f103 0018 	add.w	r0, r3, #24
 800ddb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb8:	18d1      	adds	r1, r2, r3
 800ddba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	f7ff feab 	bl	800db1c <_lv_memcpy_small>
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800ddc6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ddca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddcc:	4413      	add	r3, r2
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd2:	4413      	add	r3, r2
 800ddd4:	781a      	ldrb	r2, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	771a      	strb	r2, [r3, #28]
 800ddda:	e01e      	b.n	800de1a <_lv_img_buf_transform+0x242>
        }
    }
    else {
        pxi = 0; /*unused*/
 800dddc:	2300      	movs	r3, #0
 800ddde:	62bb      	str	r3, [r7, #40]	; 0x28
        px_size = 0;    /*unused*/
 800dde0:	2300      	movs	r3, #0
 800dde2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f103 0020 	add.w	r0, r3, #32
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	b219      	sxth	r1, r3
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	b21a      	sxth	r2, r3
 800ddf4:	687c      	ldr	r4, [r7, #4]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	f008 fed5 	bl	8016ba8 <lv_img_buf_get_px_color>
 800ddfe:	61a0      	str	r0, [r4, #24]
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	3320      	adds	r3, #32
 800de04:	69ba      	ldr	r2, [r7, #24]
 800de06:	b211      	sxth	r1, r2
 800de08:	697a      	ldr	r2, [r7, #20]
 800de0a:	b212      	sxth	r2, r2
 800de0c:	4618      	mov	r0, r3
 800de0e:	f009 f80d 	bl	8016e2c <lv_img_buf_get_px_alpha>
 800de12:	4603      	mov	r3, r0
 800de14:	461a      	mov	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	771a      	strb	r2, [r3, #28]
    }

    if(dsc->tmp.chroma_keyed) {
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de20:	f003 0301 	and.w	r3, r3, #1
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00e      	beq.n	800de48 <_lv_img_buf_transform+0x270>
        lv_color_t ct = LV_COLOR_TRANSP;
 800de2a:	2300      	movs	r3, #0
 800de2c:	733b      	strb	r3, [r7, #12]
 800de2e:	23ff      	movs	r3, #255	; 0xff
 800de30:	737b      	strb	r3, [r7, #13]
 800de32:	2300      	movs	r3, #0
 800de34:	73bb      	strb	r3, [r7, #14]
 800de36:	23ff      	movs	r3, #255	; 0xff
 800de38:	73fb      	strb	r3, [r7, #15]
        if(dsc->res.color.full == ct.full) return false;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	699a      	ldr	r2, [r3, #24]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	429a      	cmp	r2, r3
 800de42:	d101      	bne.n	800de48 <_lv_img_buf_transform+0x270>
 800de44:	2300      	movs	r3, #0
 800de46:	e02a      	b.n	800de9e <_lv_img_buf_transform+0x2c6>
    }

    if(dsc->cfg.antialias == false) return true;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	7d5b      	ldrb	r3, [r3, #21]
 800de4c:	f083 0301 	eor.w	r3, r3, #1
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d001      	beq.n	800de5a <_lv_img_buf_transform+0x282>
 800de56:	2301      	movs	r3, #1
 800de58:	e021      	b.n	800de9e <_lv_img_buf_transform+0x2c6>

    dsc->tmp.xs = xs;
 800de5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de5c:	b21a      	sxth	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    dsc->tmp.ys = ys;
 800de64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de66:	b21a      	sxth	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    dsc->tmp.xs_int = xs_int;
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	b21a      	sxth	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    dsc->tmp.ys_int = ys_int;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	b21a      	sxth	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    dsc->tmp.pxi = pxi;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de86:	64da      	str	r2, [r3, #76]	; 0x4c
    dsc->tmp.px_size = px_size;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800de8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f009 fc02 	bl	801769c <_lv_img_buf_transform_anti_alias>
 800de98:	4603      	mov	r3, r0
 800de9a:	74fb      	strb	r3, [r7, #19]

    return ret;
 800de9c:	7cfb      	ldrb	r3, [r7, #19]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	373c      	adds	r7, #60	; 0x3c
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd90      	pop	{r4, r7, pc}

0800dea6 <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b082      	sub	sp, #8
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800deae:	2114      	movs	r1, #20
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f00e ffc6 	bl	801ce42 <_lv_memset_00>
    dsc->recolor = LV_COLOR_BLACK;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	731a      	strb	r2, [r3, #12]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	735a      	strb	r2, [r3, #13]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	739a      	strb	r2, [r3, #14]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	22ff      	movs	r2, #255	; 0xff
 800decc:	73da      	strb	r2, [r3, #15]
    dsc->opa = LV_OPA_COVER;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	22ff      	movs	r2, #255	; 0xff
 800ded2:	701a      	strb	r2, [r3, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800deda:	811a      	strh	r2, [r3, #8]
    dsc->antialias = LV_ANTIALIAS;
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	7c53      	ldrb	r3, [r2, #17]
 800dee0:	f043 0301 	orr.w	r3, r3, #1
 800dee4:	7453      	strb	r3, [r2, #17]

}
 800dee6:	bf00      	nop
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
	...

0800def0 <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(const lv_area_t * coords, const lv_area_t * mask, const void * src, const lv_draw_img_dsc_t * dsc)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b086      	sub	sp, #24
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
 800defc:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d105      	bne.n	800df10 <lv_draw_img+0x20>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(coords, mask, "No\ndata");
 800df04:	4a0f      	ldr	r2, [pc, #60]	; (800df44 <lv_draw_img+0x54>)
 800df06:	68b9      	ldr	r1, [r7, #8]
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f000 feeb 	bl	800ece4 <show_error>
        return;
 800df0e:	e016      	b.n	800df3e <lv_draw_img+0x4e>
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2b02      	cmp	r3, #2
 800df16:	d911      	bls.n	800df3c <lv_draw_img+0x4c>

    lv_res_t res;
    res = lv_img_draw_core(coords, mask, src, dsc);
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	68b9      	ldr	r1, [r7, #8]
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f000 f8da 	bl	800e0d8 <lv_img_draw_core>
 800df24:	4603      	mov	r3, r0
 800df26:	75fb      	strb	r3, [r7, #23]

    if(res == LV_RES_INV) {
 800df28:	7dfb      	ldrb	r3, [r7, #23]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d107      	bne.n	800df3e <lv_draw_img+0x4e>
        LV_LOG_WARN("Image draw error");
        show_error(coords, mask, "No\ndata");
 800df2e:	4a05      	ldr	r2, [pc, #20]	; (800df44 <lv_draw_img+0x54>)
 800df30:	68b9      	ldr	r1, [r7, #8]
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f000 fed6 	bl	800ece4 <show_error>
        return;
 800df38:	bf00      	nop
 800df3a:	e000      	b.n	800df3e <lv_draw_img+0x4e>
    if(dsc->opa <= LV_OPA_MIN) return;
 800df3c:	bf00      	nop
    }
}
 800df3e:	3718      	adds	r7, #24
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	0802835c 	.word	0x0802835c

0800df48 <lv_img_cf_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	4603      	mov	r3, r0
 800df50:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 800df52:	2300      	movs	r3, #0
 800df54:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800df56:	79fb      	ldrb	r3, [r7, #7]
 800df58:	2b0e      	cmp	r3, #14
 800df5a:	d836      	bhi.n	800dfca <lv_img_cf_get_px_size+0x82>
 800df5c:	a201      	add	r2, pc, #4	; (adr r2, 800df64 <lv_img_cf_get_px_size+0x1c>)
 800df5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df62:	bf00      	nop
 800df64:	0800dfa1 	.word	0x0800dfa1
 800df68:	0800dfa1 	.word	0x0800dfa1
 800df6c:	0800dfcb 	.word	0x0800dfcb
 800df70:	0800dfcb 	.word	0x0800dfcb
 800df74:	0800dfa7 	.word	0x0800dfa7
 800df78:	0800dfad 	.word	0x0800dfad
 800df7c:	0800dfa7 	.word	0x0800dfa7
 800df80:	0800dfb3 	.word	0x0800dfb3
 800df84:	0800dfb9 	.word	0x0800dfb9
 800df88:	0800dfbf 	.word	0x0800dfbf
 800df8c:	0800dfc5 	.word	0x0800dfc5
 800df90:	0800dfb3 	.word	0x0800dfb3
 800df94:	0800dfb9 	.word	0x0800dfb9
 800df98:	0800dfbf 	.word	0x0800dfbf
 800df9c:	0800dfc5 	.word	0x0800dfc5
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW:
            px_size = 0;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	73fb      	strb	r3, [r7, #15]
            break;
 800dfa4:	e014      	b.n	800dfd0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
            px_size = LV_COLOR_SIZE;
 800dfa6:	2320      	movs	r3, #32
 800dfa8:	73fb      	strb	r3, [r7, #15]
            break;
 800dfaa:	e011      	b.n	800dfd0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 800dfac:	2320      	movs	r3, #32
 800dfae:	73fb      	strb	r3, [r7, #15]
            break;
 800dfb0:	e00e      	b.n	800dfd0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT:
            px_size = 1;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	73fb      	strb	r3, [r7, #15]
            break;
 800dfb6:	e00b      	b.n	800dfd0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT:
            px_size = 2;
 800dfb8:	2302      	movs	r3, #2
 800dfba:	73fb      	strb	r3, [r7, #15]
            break;
 800dfbc:	e008      	b.n	800dfd0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT:
            px_size = 4;
 800dfbe:	2304      	movs	r3, #4
 800dfc0:	73fb      	strb	r3, [r7, #15]
            break;
 800dfc2:	e005      	b.n	800dfd0 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            px_size = 8;
 800dfc4:	2308      	movs	r3, #8
 800dfc6:	73fb      	strb	r3, [r7, #15]
            break;
 800dfc8:	e002      	b.n	800dfd0 <lv_img_cf_get_px_size+0x88>
        default:
            px_size = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73fb      	strb	r3, [r7, #15]
            break;
 800dfce:	bf00      	nop
    }

    return px_size;
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3714      	adds	r7, #20
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop

0800dfe0 <lv_img_cf_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 800dfea:	2300      	movs	r3, #0
 800dfec:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800dfee:	79fb      	ldrb	r3, [r7, #7]
 800dff0:	2b03      	cmp	r3, #3
 800dff2:	d004      	beq.n	800dffe <lv_img_cf_is_chroma_keyed+0x1e>
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	db05      	blt.n	800e004 <lv_img_cf_is_chroma_keyed+0x24>
 800dff8:	3b06      	subs	r3, #6
 800dffa:	2b04      	cmp	r3, #4
 800dffc:	d802      	bhi.n	800e004 <lv_img_cf_is_chroma_keyed+0x24>
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT:
            is_chroma_keyed = true;
 800dffe:	2301      	movs	r3, #1
 800e000:	73fb      	strb	r3, [r7, #15]
            break;
 800e002:	e002      	b.n	800e00a <lv_img_cf_is_chroma_keyed+0x2a>

        default:
            is_chroma_keyed = false;
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]
            break;
 800e008:	bf00      	nop
    }

    return is_chroma_keyed;
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3714      	adds	r7, #20
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <lv_img_cf_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_cf_has_alpha(lv_img_cf_t cf)
{
 800e018:	b480      	push	{r7}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	4603      	mov	r3, r0
 800e020:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 800e022:	2300      	movs	r3, #0
 800e024:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800e026:	79fb      	ldrb	r3, [r7, #7]
 800e028:	3b02      	subs	r3, #2
 800e02a:	2b0c      	cmp	r3, #12
 800e02c:	d81f      	bhi.n	800e06e <lv_img_cf_has_alpha+0x56>
 800e02e:	a201      	add	r2, pc, #4	; (adr r2, 800e034 <lv_img_cf_has_alpha+0x1c>)
 800e030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e034:	0800e069 	.word	0x0800e069
 800e038:	0800e06f 	.word	0x0800e06f
 800e03c:	0800e06f 	.word	0x0800e06f
 800e040:	0800e069 	.word	0x0800e069
 800e044:	0800e06f 	.word	0x0800e06f
 800e048:	0800e069 	.word	0x0800e069
 800e04c:	0800e069 	.word	0x0800e069
 800e050:	0800e069 	.word	0x0800e069
 800e054:	0800e069 	.word	0x0800e069
 800e058:	0800e069 	.word	0x0800e069
 800e05c:	0800e069 	.word	0x0800e069
 800e060:	0800e069 	.word	0x0800e069
 800e064:	0800e069 	.word	0x0800e069
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            has_alpha = true;
 800e068:	2301      	movs	r3, #1
 800e06a:	73fb      	strb	r3, [r7, #15]
            break;
 800e06c:	e002      	b.n	800e074 <lv_img_cf_has_alpha+0x5c>
        default:
            has_alpha = false;
 800e06e:	2300      	movs	r3, #0
 800e070:	73fb      	strb	r3, [r7, #15]
            break;
 800e072:	bf00      	nop
    }

    return has_alpha;
 800e074:	7bfb      	ldrb	r3, [r7, #15]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3714      	adds	r7, #20
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop

0800e084 <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 800e08c:	2303      	movs	r3, #3
 800e08e:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d101      	bne.n	800e09a <lv_img_src_get_type+0x16>
 800e096:	7bfb      	ldrb	r3, [r7, #15]
 800e098:	e018      	b.n	800e0cc <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	2b1f      	cmp	r3, #31
 800e0a4:	d907      	bls.n	800e0b6 <lv_img_src_get_type+0x32>
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	b25b      	sxtb	r3, r3
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	db02      	blt.n	800e0b6 <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	73fb      	strb	r3, [r7, #15]
 800e0b4:	e009      	b.n	800e0ca <lv_img_src_get_type+0x46>
    }
    else if(u8_p[0] >= 0x80) {
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	b25b      	sxtb	r3, r3
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	da02      	bge.n	800e0c6 <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 800e0c0:	2302      	movs	r3, #2
 800e0c2:	73fb      	strb	r3, [r7, #15]
 800e0c4:	e001      	b.n	800e0ca <lv_img_src_get_type+0x46>
    }
    else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3714      	adds	r7, #20
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <lv_img_draw_core>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_res_t lv_img_draw_core(const lv_area_t * coords, const lv_area_t * clip_area,
                                                       const void * src,
                                                       const lv_draw_img_dsc_t * draw_dsc)
{
 800e0d8:	b5b0      	push	{r4, r5, r7, lr}
 800e0da:	b09c      	sub	sp, #112	; 0x70
 800e0dc:	af02      	add	r7, sp, #8
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
 800e0e4:	603b      	str	r3, [r7, #0]
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d801      	bhi.n	800e0f2 <lv_img_draw_core+0x1a>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e15a      	b.n	800e3a8 <lv_img_draw_core+0x2d0>

    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	68d9      	ldr	r1, [r3, #12]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f009 fd6c 	bl	8017bd4 <_lv_img_cache_open>
 800e0fc:	65f8      	str	r0, [r7, #92]	; 0x5c

    if(cdsc == NULL) return LV_RES_INV;
 800e0fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e100:	2b00      	cmp	r3, #0
 800e102:	d101      	bne.n	800e108 <lv_img_draw_core+0x30>
 800e104:	2300      	movs	r3, #0
 800e106:	e14f      	b.n	800e3a8 <lv_img_draw_core+0x2d0>

    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800e108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e10a:	7c1b      	ldrb	r3, [r3, #16]
 800e10c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e110:	b2db      	uxtb	r3, r3
 800e112:	4618      	mov	r0, r3
 800e114:	f7ff ff64 	bl	800dfe0 <lv_img_cf_is_chroma_keyed>
 800e118:	4603      	mov	r3, r0
 800e11a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 800e11e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e120:	7c1b      	ldrb	r3, [r3, #16]
 800e122:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e126:	b2db      	uxtb	r3, r3
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff ff75 	bl	800e018 <lv_img_cf_has_alpha>
 800e12e:	4603      	mov	r3, r0
 800e130:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

    if(cdsc->dec_dsc.error_msg != NULL) {
 800e134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e136:	69db      	ldr	r3, [r3, #28]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d007      	beq.n	800e14c <lv_img_draw_core+0x74>
        LV_LOG_WARN("Image draw error");

        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 800e13c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e13e:	69db      	ldr	r3, [r3, #28]
 800e140:	461a      	mov	r2, r3
 800e142:	68b9      	ldr	r1, [r7, #8]
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	f000 fdcd 	bl	800ece4 <show_error>
 800e14a:	e129      	b.n	800e3a0 <lv_img_draw_core+0x2c8>
    }
    /* The decoder could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 800e14c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e14e:	695b      	ldr	r3, [r3, #20]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d07d      	beq.n	800e250 <lv_img_draw_core+0x178>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
 800e154:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e158:	68f9      	ldr	r1, [r7, #12]
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7ff fd00 	bl	800db60 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	885b      	ldrh	r3, [r3, #2]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d104      	bne.n	800e172 <lv_img_draw_core+0x9a>
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	891b      	ldrh	r3, [r3, #8]
 800e16c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e170:	d048      	beq.n	800e204 <lv_img_draw_core+0x12c>
            int32_t w = lv_area_get_width(coords);
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f7ff fd02 	bl	800db7c <lv_area_get_width>
 800e178:	4603      	mov	r3, r0
 800e17a:	647b      	str	r3, [r7, #68]	; 0x44
            int32_t h = lv_area_get_height(coords);
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f7ff fd14 	bl	800dbaa <lv_area_get_height>
 800e182:	4603      	mov	r3, r0
 800e184:	643b      	str	r3, [r7, #64]	; 0x40

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800e186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e188:	b219      	sxth	r1, r3
 800e18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e18c:	b21c      	sxth	r4, r3
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	885b      	ldrh	r3, [r3, #2]
 800e192:	b21d      	sxth	r5, r3
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	891b      	ldrh	r3, [r3, #8]
 800e198:	683a      	ldr	r2, [r7, #0]
 800e19a:	3204      	adds	r2, #4
 800e19c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800e1a0:	9201      	str	r2, [sp, #4]
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	462b      	mov	r3, r5
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	f009 f854 	bl	8017254 <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
 800e1ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	4413      	add	r3, r2
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	b21b      	sxth	r3, r3
 800e1c0:	86bb      	strh	r3, [r7, #52]	; 0x34
            map_area_rot.y1 += coords->y1;
 800e1c2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800e1c6:	b29a      	uxth	r2, r3
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	4413      	add	r3, r2
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	b21b      	sxth	r3, r3
 800e1d6:	86fb      	strh	r3, [r7, #54]	; 0x36
            map_area_rot.x2 += coords->x1;
 800e1d8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	4413      	add	r3, r2
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	b21b      	sxth	r3, r3
 800e1ec:	873b      	strh	r3, [r7, #56]	; 0x38
            map_area_rot.y2 += coords->y1;
 800e1ee:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	4413      	add	r3, r2
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	b21b      	sxth	r3, r3
 800e202:	877b      	strh	r3, [r7, #58]	; 0x3a
        }

        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 800e204:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e20c:	68b9      	ldr	r1, [r7, #8]
 800e20e:	4618      	mov	r0, r3
 800e210:	f00c fcc6 	bl	801aba0 <_lv_area_intersect>
 800e214:	4603      	mov	r3, r0
 800e216:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 800e21a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e21e:	f083 0301 	eor.w	r3, r3, #1
 800e222:	b2db      	uxtb	r3, r3
 800e224:	2b00      	cmp	r3, #0
 800e226:	d004      	beq.n	800e232 <lv_img_draw_core+0x15a>
            draw_cleanup(cdsc);
 800e228:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e22a:	f000 fd8b 	bl	800ed44 <draw_cleanup>
            return LV_RES_OK;
 800e22e:	2301      	movs	r3, #1
 800e230:	e0ba      	b.n	800e3a8 <lv_img_draw_core+0x2d0>
        }

        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 800e232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e234:	695a      	ldr	r2, [r3, #20]
 800e236:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e23a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e23e:	9301      	str	r3, [sp, #4]
 800e240:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f000 f8b1 	bl	800e3b0 <lv_draw_map>
 800e24e:	e0a7      	b.n	800e3a0 <lv_img_draw_core+0x2c8>
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 800e250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	68b9      	ldr	r1, [r7, #8]
 800e258:	4618      	mov	r0, r3
 800e25a:	f00c fca1 	bl	801aba0 <_lv_area_intersect>
 800e25e:	4603      	mov	r3, r0
 800e260:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 800e264:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800e268:	f083 0301 	eor.w	r3, r3, #1
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d004      	beq.n	800e27c <lv_img_draw_core+0x1a4>
            draw_cleanup(cdsc);
 800e272:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e274:	f000 fd66 	bl	800ed44 <draw_cleanup>
            return LV_RES_OK;
 800e278:	2301      	movs	r3, #1
 800e27a:	e095      	b.n	800e3a8 <lv_img_draw_core+0x2d0>
        }

        int32_t width = lv_area_get_width(&mask_com);
 800e27c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e280:	4618      	mov	r0, r3
 800e282:	f7ff fc7b 	bl	800db7c <lv_area_get_width>
 800e286:	4603      	mov	r3, r0
 800e288:	657b      	str	r3, [r7, #84]	; 0x54

        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800e28a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e28e:	4618      	mov	r0, r3
 800e290:	f7ff fc74 	bl	800db7c <lv_area_get_width>
 800e294:	4603      	mov	r3, r0
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	4618      	mov	r0, r3
 800e29a:	f00e f9c9 	bl	801c630 <_lv_mem_buf_get>
 800e29e:	6538      	str	r0, [r7, #80]	; 0x50
                                         LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 800e2a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e2a4:	f107 031c 	add.w	r3, r7, #28
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7ff fc58 	bl	800db60 <lv_area_copy>
        lv_area_set_height(&line, 1);
 800e2b0:	f107 031c 	add.w	r3, r7, #28
 800e2b4:	2101      	movs	r1, #1
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f00c fc39 	bl	801ab2e <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800e2bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2c8:	1ad3      	subs	r3, r2, r3
 800e2ca:	64fb      	str	r3, [r7, #76]	; 0x4c
        int32_t y = mask_com.y1 - coords->y1;
 800e2cc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	667b      	str	r3, [r7, #100]	; 0x64
        int32_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800e2dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e2e0:	663b      	str	r3, [r7, #96]	; 0x60
 800e2e2:	e054      	b.n	800e38e <lv_img_draw_core+0x2b6>
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 800e2e4:	f107 021c 	add.w	r2, r7, #28
 800e2e8:	f107 0314 	add.w	r3, r7, #20
 800e2ec:	68b9      	ldr	r1, [r7, #8]
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f00c fc56 	bl	801aba0 <_lv_area_intersect>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if(union_ok == false) continue;
 800e2fa:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800e2fe:	f083 0301 	eor.w	r3, r3, #1
 800e302:	b2db      	uxtb	r3, r3
 800e304:	2b00      	cmp	r3, #0
 800e306:	d13e      	bne.n	800e386 <lv_img_draw_core+0x2ae>

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800e308:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e30c:	b219      	sxth	r1, r3
 800e30e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e310:	b21a      	sxth	r2, r3
 800e312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e314:	b21c      	sxth	r4, r3
 800e316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	4623      	mov	r3, r4
 800e31c:	f009 ff66 	bl	80181ec <lv_img_decoder_read_line>
 800e320:	4603      	mov	r3, r0
 800e322:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(read_res != LV_RES_OK) {
 800e326:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d00b      	beq.n	800e346 <lv_img_draw_core+0x26e>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800e32e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e330:	4618      	mov	r0, r3
 800e332:	f009 ff87 	bl	8018244 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                _lv_mem_buf_release(buf);
 800e336:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e338:	f00e fa58 	bl	801c7ec <_lv_mem_buf_release>
                draw_cleanup(cdsc);
 800e33c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e33e:	f000 fd01 	bl	800ed44 <draw_cleanup>
                return LV_RES_INV;
 800e342:	2300      	movs	r3, #0
            return LV_RES_OK;
 800e344:	e030      	b.n	800e3a8 <lv_img_draw_core+0x2d0>
            }

            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800e346:	f107 0114 	add.w	r1, r7, #20
 800e34a:	f107 001c 	add.w	r0, r7, #28
 800e34e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e352:	9301      	str	r3, [sp, #4]
 800e354:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e358:	9300      	str	r3, [sp, #0]
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e35e:	f000 f827 	bl	800e3b0 <lv_draw_map>
            line.y1++;
 800e362:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e366:	b29b      	uxth	r3, r3
 800e368:	3301      	adds	r3, #1
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	b21b      	sxth	r3, r3
 800e36e:	83fb      	strh	r3, [r7, #30]
            line.y2++;
 800e370:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e374:	b29b      	uxth	r3, r3
 800e376:	3301      	adds	r3, #1
 800e378:	b29b      	uxth	r3, r3
 800e37a:	b21b      	sxth	r3, r3
 800e37c:	847b      	strh	r3, [r7, #34]	; 0x22
            y++;
 800e37e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e380:	3301      	adds	r3, #1
 800e382:	667b      	str	r3, [r7, #100]	; 0x64
 800e384:	e000      	b.n	800e388 <lv_img_draw_core+0x2b0>
            if(union_ok == false) continue;
 800e386:	bf00      	nop
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800e388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e38a:	3301      	adds	r3, #1
 800e38c:	663b      	str	r3, [r7, #96]	; 0x60
 800e38e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e392:	461a      	mov	r2, r3
 800e394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e396:	4293      	cmp	r3, r2
 800e398:	dda4      	ble.n	800e2e4 <lv_img_draw_core+0x20c>
        }
        _lv_mem_buf_release(buf);
 800e39a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e39c:	f00e fa26 	bl	801c7ec <_lv_mem_buf_release>
    }

    draw_cleanup(cdsc);
 800e3a0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e3a2:	f000 fccf 	bl	800ed44 <draw_cleanup>
    return LV_RES_OK;
 800e3a6:	2301      	movs	r3, #1
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3768      	adds	r7, #104	; 0x68
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bdb0      	pop	{r4, r5, r7, pc}

0800e3b0 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
 800e3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3b2:	b0c3      	sub	sp, #268	; 0x10c
 800e3b4:	af04      	add	r7, sp, #16
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	603b      	str	r3, [r7, #0]
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);
 800e3be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e3c2:	68b9      	ldr	r1, [r7, #8]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7ff fbcb 	bl	800db60 <lv_area_copy>

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800e3ca:	f7fb fe21 	bl	800a010 <_lv_refr_get_disp_refreshing>
 800e3ce:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800e3d2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800e3d6:	f00b ff0b 	bl	801a1f0 <lv_disp_get_buf>
 800e3da:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    const lv_area_t * disp_area = &vdb->area;
 800e3de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e3e2:	3310      	adds	r3, #16
 800e3e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800e3e8:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e3f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	b21b      	sxth	r3, r3
 800e3fe:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    draw_area.y1 -= disp_area->y1;
 800e402:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e406:	b29a      	uxth	r2, r3
 800e408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e40c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e410:	b29b      	uxth	r3, r3
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	b29b      	uxth	r3, r3
 800e416:	b21b      	sxth	r3, r3
 800e418:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    draw_area.x2 -= disp_area->x1;
 800e41c:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 800e420:	b29a      	uxth	r2, r3
 800e422:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	1ad3      	subs	r3, r2, r3
 800e42e:	b29b      	uxth	r3, r3
 800e430:	b21b      	sxth	r3, r3
 800e432:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    draw_area.y2 -= disp_area->y1;
 800e436:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e440:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e444:	b29b      	uxth	r3, r3
 800e446:	1ad3      	subs	r3, r2, r3
 800e448:	b29b      	uxth	r3, r3
 800e44a:	b21b      	sxth	r3, r3
 800e44c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800e450:	f003 fa86 	bl	8011960 <lv_draw_mask_get_cnt>
 800e454:	4603      	mov	r3, r0
 800e456:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 800e45a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d12a      	bne.n	800e4b8 <lv_draw_map+0x108>
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	885b      	ldrh	r3, [r3, #2]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d126      	bne.n	800e4b8 <lv_draw_map+0x108>
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	891b      	ldrh	r3, [r3, #8]
 800e46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e472:	d121      	bne.n	800e4b8 <lv_draw_map+0x108>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800e474:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800e478:	f083 0301 	eor.w	r3, r3, #1
 800e47c:	b2db      	uxtb	r3, r3
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d01a      	beq.n	800e4b8 <lv_draw_map+0x108>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800e482:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800e486:	f083 0301 	eor.w	r3, r3, #1
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d013      	beq.n	800e4b8 <lv_draw_map+0x108>
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	7a9b      	ldrb	r3, [r3, #10]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10f      	bne.n	800e4b8 <lv_draw_map+0x108>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	683a      	ldr	r2, [r7, #0]
 800e49e:	7c12      	ldrb	r2, [r2, #16]
 800e4a0:	9202      	str	r2, [sp, #8]
 800e4a2:	9301      	str	r3, [sp, #4]
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	68f9      	ldr	r1, [r7, #12]
 800e4ae:	68b8      	ldr	r0, [r7, #8]
 800e4b0:	f7fe f85d 	bl	800c56e <_lv_blend_map>
 800e4b4:	f000 bc12 	b.w	800ecdc <lv_draw_map+0x92c>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800e4b8:	2304      	movs	r3, #4
 800e4ba:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
 800e4be:	68f8      	ldr	r0, [r7, #12]
 800e4c0:	f7ff fb5c 	bl	800db7c <lv_area_get_width>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        const uint8_t * map_buf_tmp = map_p;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800e4d0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4dc:	4619      	mov	r1, r3
 800e4de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e4e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4e6:	1acb      	subs	r3, r1, r3
 800e4e8:	1ad3      	subs	r3, r2, r3
 800e4ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e4ee:	fb02 f303 	mul.w	r3, r2, r3
 800e4f2:	f897 20ca 	ldrb.w	r2, [r7, #202]	; 0xca
 800e4f6:	fb02 f303 	mul.w	r3, r2, r3
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e500:	4413      	add	r3, r2
 800e502:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800e506:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800e50a:	461a      	mov	r2, r3
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e512:	4619      	mov	r1, r3
 800e514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e51c:	1acb      	subs	r3, r1, r3
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	f897 20ca 	ldrb.w	r2, [r7, #202]	; 0xca
 800e524:	fb02 f303 	mul.w	r3, r2, r3
 800e528:	461a      	mov	r2, r3
 800e52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e52e:	4413      	add	r3, r2
 800e530:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        lv_color_t c;
        lv_color_t chroma_keyed_color = LV_COLOR_TRANSP;
 800e534:	2300      	movs	r3, #0
 800e536:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 800e53a:	23ff      	movs	r3, #255	; 0xff
 800e53c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 800e540:	2300      	movs	r3, #0
 800e542:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800e546:	23ff      	movs	r3, #255	; 0xff
 800e548:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        uint32_t px_i = 0;
 800e54c:	2300      	movs	r3, #0
 800e54e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 800e552:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800e556:	b29a      	uxth	r2, r3
 800e558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e55c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e560:	b29b      	uxth	r3, r3
 800e562:	4413      	add	r3, r2
 800e564:	b29b      	uxth	r3, r3
 800e566:	b21b      	sxth	r3, r3
 800e568:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800e56c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e570:	b29c      	uxth	r4, r3
 800e572:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e576:	4618      	mov	r0, r3
 800e578:	f7ff fb00 	bl	800db7c <lv_area_get_width>
 800e57c:	4603      	mov	r3, r0
 800e57e:	b29b      	uxth	r3, r3
 800e580:	4423      	add	r3, r4
 800e582:	b29b      	uxth	r3, r3
 800e584:	3b01      	subs	r3, #1
 800e586:	b29b      	uxth	r3, r3
 800e588:	b21b      	sxth	r3, r3
 800e58a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 800e58e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e592:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e596:	b29a      	uxth	r2, r3
 800e598:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	4413      	add	r3, r2
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	b21b      	sxth	r3, r3
 800e5a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        blend_area.y2 = blend_area.y1;
 800e5a8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e5ac:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
 800e5b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7ff faf8 	bl	800dbaa <lv_area_get_height>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);
 800e5c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7ff fad9 	bl	800db7c <lv_area_get_width>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	885b      	ldrh	r3, [r3, #2]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d104      	bne.n	800e5e2 <lv_draw_map+0x232>
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	891b      	ldrh	r3, [r3, #8]
 800e5dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5e0:	d001      	beq.n	800e5e6 <lv_draw_map+0x236>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e000      	b.n	800e5e8 <lv_draw_map+0x238>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800e5ec:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 800e5f8:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f040 8101 	bne.w	800e804 <lv_draw_map+0x454>
 800e602:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800e606:	f083 0301 	eor.w	r3, r3, #1
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f000 80f9 	beq.w	800e804 <lv_draw_map+0x454>
 800e612:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800e616:	f083 0301 	eor.w	r3, r3, #1
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f000 80f1 	beq.w	800e804 <lv_draw_map+0x454>
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	7a9b      	ldrb	r3, [r3, #10]
 800e626:	2b00      	cmp	r3, #0
 800e628:	f040 80ec 	bne.w	800e804 <lv_draw_map+0x454>
 800e62c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800e630:	2b00      	cmp	r3, #0
 800e632:	f000 80e7 	beq.w	800e804 <lv_draw_map+0x454>
                lv_gpu_stm32_dma2d_blend(disp_buf_first, disp_w, (const lv_color_t *)map_buf_tmp, draw_dsc->opa, map_w, draw_area_w,
                                         draw_area_h);
                return;
            }
#endif
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800e636:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800e63a:	f00b fd19 	bl	801a070 <lv_disp_get_hor_res>
 800e63e:	4603      	mov	r3, r0
 800e640:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 800e644:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e648:	4618      	mov	r0, r3
 800e64a:	f00c fa88 	bl	801ab5e <lv_area_get_size>
 800e64e:	4602      	mov	r2, r0
 800e650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e654:	4293      	cmp	r3, r2
 800e656:	d306      	bcc.n	800e666 <lv_draw_map+0x2b6>
 800e658:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e65c:	4618      	mov	r0, r3
 800e65e:	f00c fa7e 	bl	801ab5e <lv_area_get_size>
 800e662:	4603      	mov	r3, r0
 800e664:	e001      	b.n	800e66a <lv_draw_map+0x2ba>
 800e666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e66a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800e66e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	4618      	mov	r0, r3
 800e676:	f00d ffdb 	bl	801c630 <_lv_mem_buf_get>
 800e67a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800e67e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800e682:	f00d ffd5 	bl	801c630 <_lv_mem_buf_get>
 800e686:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

            int32_t x;
            int32_t y;
            for(y = 0; y < draw_area_h; y++) {
 800e68a:	2300      	movs	r3, #0
 800e68c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e690:	e089      	b.n	800e7a6 <lv_draw_map+0x3f6>
                map_px = map_buf_tmp;
 800e692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e696:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800e69a:	2300      	movs	r3, #0
 800e69c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e6a0:	e033      	b.n	800e70a <lv_draw_map+0x35a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800e6a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6a6:	78db      	ldrb	r3, [r3, #3]
 800e6a8:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
                    mask_buf[px_i] = px_opa;
 800e6ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e6b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e6b4:	4413      	add	r3, r2
 800e6b6:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800e6ba:	701a      	strb	r2, [r3, #0]
                    if(px_opa) {
 800e6bc:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d009      	beq.n	800e6d8 <lv_draw_map+0x328>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                        map2[px_i].full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
#elif LV_COLOR_DEPTH == 32
                        map2[px_i].full =  *((uint32_t *)map_px);
 800e6c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e6ce:	4413      	add	r3, r2
 800e6d0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e6d4:	6812      	ldr	r2, [r2, #0]
 800e6d6:	601a      	str	r2, [r3, #0]
#endif
                    }
#if LV_COLOR_DEPTH == 32
                    map2[px_i].ch.alpha = 0xFF;
 800e6d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e6e2:	4413      	add	r3, r2
 800e6e4:	22ff      	movs	r2, #255	; 0xff
 800e6e6:	70da      	strb	r2, [r3, #3]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800e6e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e6f2:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800e6f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e700:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e704:	3301      	adds	r3, #1
 800e706:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e70a:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800e70e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800e712:	429a      	cmp	r2, r3
 800e714:	dbc5      	blt.n	800e6a2 <lv_draw_map+0x2f2>
#endif
                }

                map_buf_tmp += map_w * px_size_byte;
 800e716:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800e71a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e71e:	fb02 f303 	mul.w	r3, r2, r3
 800e722:	461a      	mov	r2, r3
 800e724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e728:	4413      	add	r3, r2
 800e72a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800e72e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e732:	4618      	mov	r0, r3
 800e734:	f7ff fa22 	bl	800db7c <lv_area_get_width>
 800e738:	4603      	mov	r3, r0
 800e73a:	461a      	mov	r2, r3
 800e73c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e740:	4413      	add	r3, r2
 800e742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e746:	429a      	cmp	r2, r3
 800e748:	d908      	bls.n	800e75c <lv_draw_map+0x3ac>
                    blend_area.y2 ++;
 800e74a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800e74e:	b29b      	uxth	r3, r3
 800e750:	3301      	adds	r3, #1
 800e752:	b29b      	uxth	r3, r3
 800e754:	b21b      	sxth	r3, r3
 800e756:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800e75a:	e01f      	b.n	800e79c <lv_draw_map+0x3ec>
                }
                else {
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	683a      	ldr	r2, [r7, #0]
 800e762:	7c12      	ldrb	r2, [r2, #16]
 800e764:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800e768:	9202      	str	r2, [sp, #8]
 800e76a:	9301      	str	r3, [sp, #4]
 800e76c:	2302      	movs	r3, #2
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e774:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e778:	68b8      	ldr	r0, [r7, #8]
 800e77a:	f7fd fef8 	bl	800c56e <_lv_blend_map>

                    blend_area.y1 = blend_area.y2 + 1;
 800e77e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800e782:	b29b      	uxth	r3, r3
 800e784:	3301      	adds	r3, #1
 800e786:	b29b      	uxth	r3, r3
 800e788:	b21b      	sxth	r3, r3
 800e78a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    blend_area.y2 = blend_area.y1;
 800e78e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e792:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

                    px_i = 0;
 800e796:	2300      	movs	r3, #0
 800e798:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            for(y = 0; y < draw_area_h; y++) {
 800e79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e7a6:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800e7aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	f6ff af6f 	blt.w	800e692 <lv_draw_map+0x2e2>
                }
            }
            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
 800e7b4:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800e7b8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d018      	beq.n	800e7f2 <lv_draw_map+0x442>
                blend_area.y2--;
 800e7c0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	3b01      	subs	r3, #1
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	b21b      	sxth	r3, r3
 800e7cc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	683a      	ldr	r2, [r7, #0]
 800e7d6:	7c12      	ldrb	r2, [r2, #16]
 800e7d8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800e7dc:	9202      	str	r2, [sp, #8]
 800e7de:	9301      	str	r3, [sp, #4]
 800e7e0:	2302      	movs	r3, #2
 800e7e2:	9300      	str	r3, [sp, #0]
 800e7e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e7e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e7ec:	68b8      	ldr	r0, [r7, #8]
 800e7ee:	f7fd febe 	bl	800c56e <_lv_blend_map>
            }

            _lv_mem_buf_release(mask_buf);
 800e7f2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800e7f6:	f00d fff9 	bl	801c7ec <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 800e7fa:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800e7fe:	f00d fff5 	bl	801c7ec <_lv_mem_buf_release>
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 800e802:	e26b      	b.n	800ecdc <lv_draw_map+0x92c>
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800e804:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800e808:	f00b fc32 	bl	801a070 <lv_disp_get_hor_res>
 800e80c:	4603      	mov	r3, r0
 800e80e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800e812:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e816:	4618      	mov	r0, r3
 800e818:	f00c f9a1 	bl	801ab5e <lv_area_get_size>
 800e81c:	4602      	mov	r2, r0
 800e81e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e822:	4293      	cmp	r3, r2
 800e824:	d306      	bcc.n	800e834 <lv_draw_map+0x484>
 800e826:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e82a:	4618      	mov	r0, r3
 800e82c:	f00c f997 	bl	801ab5e <lv_area_get_size>
 800e830:	4603      	mov	r3, r0
 800e832:	e001      	b.n	800e838 <lv_draw_map+0x488>
 800e834:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e838:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800e83c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	4618      	mov	r0, r3
 800e844:	f00d fef4 	bl	801c630 <_lv_mem_buf_get>
 800e848:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800e84c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800e850:	f00d feee 	bl	801c630 <_lv_mem_buf_get>
 800e854:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800e858:	f107 0310 	add.w	r3, r7, #16
 800e85c:	2154      	movs	r1, #84	; 0x54
 800e85e:	4618      	mov	r0, r3
 800e860:	f00e faef 	bl	801ce42 <_lv_memset_00>
            if(transform) {
 800e864:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d043      	beq.n	800e8f4 <lv_draw_map+0x544>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
 800e86c:	2304      	movs	r3, #4
 800e86e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800e872:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <lv_draw_map+0x4d2>
 800e87a:	2305      	movs	r3, #5
 800e87c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 800e880:	e006      	b.n	800e890 <lv_draw_map+0x4e0>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800e882:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800e886:	2b00      	cmp	r3, #0
 800e888:	d002      	beq.n	800e890 <lv_draw_map+0x4e0>
 800e88a:	2306      	movs	r3, #6
 800e88c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3

                trans_dsc.cfg.angle = draw_dsc->angle;
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	885b      	ldrh	r3, [r3, #2]
 800e894:	b21b      	sxth	r3, r3
 800e896:	83bb      	strh	r3, [r7, #28]
                trans_dsc.cfg.zoom = draw_dsc->zoom;
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	891b      	ldrh	r3, [r3, #8]
 800e89c:	83fb      	strh	r3, [r7, #30]
                trans_dsc.cfg.src = map_p;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	613b      	str	r3, [r7, #16]
                trans_dsc.cfg.src_w = map_w;
 800e8a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e8a6:	b21b      	sxth	r3, r3
 800e8a8:	82bb      	strh	r3, [r7, #20]
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f7ff f97d 	bl	800dbaa <lv_area_get_height>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	82fb      	strh	r3, [r7, #22]
                trans_dsc.cfg.cf = cf;
 800e8b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800e8b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e8c2:	833b      	strh	r3, [r7, #24]
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e8ca:	837b      	strh	r3, [r7, #26]
                trans_dsc.cfg.color = draw_dsc->recolor;
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	623b      	str	r3, [r7, #32]
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	7c5b      	ldrb	r3, [r3, #17]
 800e8d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bf14      	ite	ne
 800e8e0:	2301      	movne	r3, #1
 800e8e2:	2300      	moveq	r3, #0
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

                _lv_img_buf_transform_init(&trans_dsc);
 800e8ea:	f107 0310 	add.w	r3, r7, #16
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f008 fbae 	bl	8017050 <_lv_img_buf_transform_init>
            }
#endif
            uint16_t recolor_premult[3] = {0};
 800e8f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	601a      	str	r2, [r3, #0]
 800e8fc:	809a      	strh	r2, [r3, #4]
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	7a9b      	ldrb	r3, [r3, #10]
 800e902:	43db      	mvns	r3, r3
 800e904:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
            if(draw_dsc->recolor_opa != 0) {
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	7a9b      	ldrb	r3, [r3, #10]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d007      	beq.n	800e920 <lv_draw_map+0x570>
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	7a99      	ldrb	r1, [r3, #10]
 800e914:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	68d8      	ldr	r0, [r3, #12]
 800e91c:	f7ff f88c 	bl	800da38 <lv_color_premult>
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800e920:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800e924:	2b00      	cmp	r3, #0
 800e926:	d10c      	bne.n	800e942 <lv_draw_map+0x592>
 800e928:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d108      	bne.n	800e942 <lv_draw_map+0x592>
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	885b      	ldrh	r3, [r3, #2]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d104      	bne.n	800e942 <lv_draw_map+0x592>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	891b      	ldrh	r3, [r3, #8]
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800e93c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e940:	d001      	beq.n	800e946 <lv_draw_map+0x596>
 800e942:	2302      	movs	r3, #2
 800e944:	e000      	b.n	800e948 <lv_draw_map+0x598>
 800e946:	2301      	movs	r3, #1
 800e948:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
 800e94c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800e950:	2b00      	cmp	r3, #0
 800e952:	d005      	beq.n	800e960 <lv_draw_map+0x5b0>
                _lv_memset_ff(mask_buf, mask_buf_size);
 800e954:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800e958:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800e95c:	f00e faf1 	bl	801cf42 <_lv_memset_ff>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
 800e960:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e964:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e968:	461a      	mov	r2, r3
 800e96a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e96e:	4413      	add	r3, r2
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800e976:	1a9b      	subs	r3, r3, r2
 800e978:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#endif
            for(y = 0; y < draw_area_h; y++) {
 800e97c:	2300      	movs	r3, #0
 800e97e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e982:	e17c      	b.n	800ec7e <lv_draw_map+0x8ce>
                map_px = map_buf_tmp;
 800e984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                uint32_t px_i_start = px_i;
 800e98c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

#if LV_USE_IMG_TRANSFORM
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 800e994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e99c:	461a      	mov	r2, r3
 800e99e:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800e9a2:	4413      	add	r3, r2
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e9aa:	1a9b      	subs	r3, r3, r2
 800e9ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e9b6:	e0a2      	b.n	800eafe <lv_draw_map+0x74e>

#if LV_USE_IMG_TRANSFORM
                    if(transform) {
 800e9b8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d033      	beq.n	800ea28 <lv_draw_map+0x678>

                        /*Transform*/
                        bool ret;
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 800e9c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	4413      	add	r3, r2
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	b219      	sxth	r1, r3
 800e9d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	4413      	add	r3, r2
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	b21a      	sxth	r2, r3
 800e9e4:	f107 0310 	add.w	r3, r7, #16
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7ff f8f5 	bl	800dbd8 <_lv_img_buf_transform>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                        if(ret == false) {
 800e9f4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800e9f8:	f083 0301 	eor.w	r3, r3, #1
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d007      	beq.n	800ea12 <lv_draw_map+0x662>
                            mask_buf[px_i] = LV_OPA_TRANSP;
 800ea02:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ea06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea0a:	4413      	add	r3, r2
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	701a      	strb	r2, [r3, #0]
                            continue;
 800ea10:	e064      	b.n	800eadc <lv_draw_map+0x72c>
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
 800ea12:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ea16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea1a:	4413      	add	r3, r2
 800ea1c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ea20:	701a      	strb	r2, [r3, #0]
                            c.full = trans_dsc.res.color.full;
 800ea22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea24:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea26:	e043      	b.n	800eab0 <lv_draw_map+0x700>
                    }
                    /*No transform*/
                    else
#endif
                    {
                        if(alpha_byte) {
 800ea28:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d019      	beq.n	800ea64 <lv_draw_map+0x6b4>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800ea30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ea34:	78db      	ldrb	r3, [r3, #3]
 800ea36:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                            mask_buf[px_i] = px_opa;
 800ea3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ea3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea42:	4413      	add	r3, r2
 800ea44:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800ea48:	701a      	strb	r2, [r3, #0]
                            if(px_opa == 0) {
 800ea4a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d10f      	bne.n	800ea72 <lv_draw_map+0x6c2>
#if LV_COLOR_DEPTH == 32
                                map2[px_i].full = 0;
 800ea52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ea5c:	4413      	add	r3, r2
 800ea5e:	2200      	movs	r2, #0
 800ea60:	601a      	str	r2, [r3, #0]
#endif
                                continue;
 800ea62:	e03b      	b.n	800eadc <lv_draw_map+0x72c>
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
 800ea64:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ea68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea6c:	4413      	add	r3, r2
 800ea6e:	22ff      	movs	r2, #255	; 0xff
 800ea70:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
 800ea72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	67bb      	str	r3, [r7, #120]	; 0x78
                        c.ch.alpha = 0xFF;
 800ea7a:	23ff      	movs	r3, #255	; 0xff
 800ea7c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
#endif
                        if(chroma_key) {
 800ea80:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d013      	beq.n	800eab0 <lv_draw_map+0x700>
                            if(c.full == chroma_keyed_color.full) {
 800ea88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ea8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d10f      	bne.n	800eab0 <lv_draw_map+0x700>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 800ea90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ea94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea98:	4413      	add	r3, r2
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	701a      	strb	r2, [r3, #0]
#if LV_COLOR_DEPTH == 32
                                map2[px_i].full = 0;
 800ea9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800eaa8:	4413      	add	r3, r2
 800eaaa:	2200      	movs	r2, #0
 800eaac:	601a      	str	r2, [r3, #0]
#endif
                                continue;
 800eaae:	e015      	b.n	800eadc <lv_draw_map+0x72c>
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	7a9b      	ldrb	r3, [r3, #10]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d009      	beq.n	800eacc <lv_draw_map+0x71c>
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
 800eab8:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800eabc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800eac0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fe ffe2 	bl	800da8c <lv_color_mix_premult>
 800eac8:	4603      	mov	r3, r0
 800eaca:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    map2[px_i].full = c.full;
 800eacc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ead6:	4413      	add	r3, r2
 800ead8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eada:	601a      	str	r2, [r3, #0]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800eadc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eae0:	3301      	adds	r3, #1
 800eae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800eae6:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800eaea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800eaee:	4413      	add	r3, r2
 800eaf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eaf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800eaf8:	3301      	adds	r3, #1
 800eafa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800eafe:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800eb02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eb06:	429a      	cmp	r2, r3
 800eb08:	f6ff af56 	blt.w	800e9b8 <lv_draw_map+0x608>
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
 800eb0c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d04b      	beq.n	800ebac <lv_draw_map+0x7fc>
                    lv_draw_mask_res_t mask_res_sub;
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
 800eb14:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800eb18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eb1c:	18d4      	adds	r4, r2, r3
 800eb1e:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800eb22:	b29a      	uxth	r2, r3
 800eb24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800eb28:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	4413      	add	r3, r2
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	b21d      	sxth	r5, r3
 800eb34:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	4413      	add	r3, r2
 800eb42:	b29a      	uxth	r2, r3
 800eb44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800eb48:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	4413      	add	r3, r2
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	b21e      	sxth	r6, r3
 800eb54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7ff f80f 	bl	800db7c <lv_area_get_width>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	4632      	mov	r2, r6
 800eb62:	4629      	mov	r1, r5
 800eb64:	4620      	mov	r0, r4
 800eb66:	f002 fe5f 	bl	8011828 <lv_draw_mask_apply>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                                                      lv_area_get_width(&draw_area));
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 800eb70:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d112      	bne.n	800eb9e <lv_draw_map+0x7ee>
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 800eb78:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800eb7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eb80:	18d4      	adds	r4, r2, r3
 800eb82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fe fff8 	bl	800db7c <lv_area_get_width>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	4619      	mov	r1, r3
 800eb90:	4620      	mov	r0, r4
 800eb92:	f00e f956 	bl	801ce42 <_lv_memset_00>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800eb96:	2302      	movs	r3, #2
 800eb98:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800eb9c:	e006      	b.n	800ebac <lv_draw_map+0x7fc>
                    }
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
 800eb9e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800eba2:	2b02      	cmp	r3, #2
 800eba4:	d102      	bne.n	800ebac <lv_draw_map+0x7fc>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800eba6:	2302      	movs	r3, #2
 800eba8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
 800ebac:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800ebb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ebb4:	fb02 f303 	mul.w	r3, r2, r3
 800ebb8:	461a      	mov	r2, r3
 800ebba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ebbe:	4413      	add	r3, r2
 800ebc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800ebc4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7fe ffd7 	bl	800db7c <lv_area_get_width>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d908      	bls.n	800ebf2 <lv_draw_map+0x842>
                    blend_area.y2 ++;
 800ebe0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	b21b      	sxth	r3, r3
 800ebec:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800ebf0:	e040      	b.n	800ec74 <lv_draw_map+0x8c4>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	683a      	ldr	r2, [r7, #0]
 800ebf8:	7c12      	ldrb	r2, [r2, #16]
 800ebfa:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800ebfe:	9202      	str	r2, [sp, #8]
 800ec00:	9301      	str	r3, [sp, #4]
 800ec02:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec0c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ec10:	68b8      	ldr	r0, [r7, #8]
 800ec12:	f7fd fcac 	bl	800c56e <_lv_blend_map>

                    blend_area.y1 = blend_area.y2 + 1;
 800ec16:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	b21b      	sxth	r3, r3
 800ec22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    blend_area.y2 = blend_area.y1;
 800ec26:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ec2a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

                    px_i = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ec34:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d10c      	bne.n	800ec56 <lv_draw_map+0x8a6>
 800ec3c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d108      	bne.n	800ec56 <lv_draw_map+0x8a6>
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	885b      	ldrh	r3, [r3, #2]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d104      	bne.n	800ec56 <lv_draw_map+0x8a6>
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	891b      	ldrh	r3, [r3, #8]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ec50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec54:	d001      	beq.n	800ec5a <lv_draw_map+0x8aa>
 800ec56:	2302      	movs	r3, #2
 800ec58:	e000      	b.n	800ec5c <lv_draw_map+0x8ac>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
 800ec60:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d005      	beq.n	800ec74 <lv_draw_map+0x8c4>
                        _lv_memset_ff(mask_buf, mask_buf_size);
 800ec68:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ec6c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ec70:	f00e f967 	bl	801cf42 <_lv_memset_ff>
            for(y = 0; y < draw_area_h; y++) {
 800ec74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec78:	3301      	adds	r3, #1
 800ec7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ec7e:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800ec82:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ec86:	429a      	cmp	r2, r3
 800ec88:	f6ff ae7c 	blt.w	800e984 <lv_draw_map+0x5d4>
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
 800ec8c:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800ec90:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d019      	beq.n	800eccc <lv_draw_map+0x91c>
                blend_area.y2--;
 800ec98:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	b21b      	sxth	r3, r3
 800eca4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	683a      	ldr	r2, [r7, #0]
 800ecae:	7c12      	ldrb	r2, [r2, #16]
 800ecb0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800ecb4:	9202      	str	r2, [sp, #8]
 800ecb6:	9301      	str	r3, [sp, #4]
 800ecb8:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ecc2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ecc6:	68b8      	ldr	r0, [r7, #8]
 800ecc8:	f7fd fc51 	bl	800c56e <_lv_blend_map>
            }

            _lv_mem_buf_release(mask_buf);
 800eccc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ecd0:	f00d fd8c 	bl	801c7ec <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 800ecd4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ecd8:	f00d fd88 	bl	801c7ec <_lv_mem_buf_release>
        }
    }
}
 800ecdc:	bf00      	nop
 800ecde:	37fc      	adds	r7, #252	; 0xfc
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ece4 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b0aa      	sub	sp, #168	; 0xa8
 800ece8:	af02      	add	r7, sp, #8
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800ecf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f004 f9a3 	bl	8013040 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800ecfa:	23ff      	movs	r3, #255	; 0xff
 800ecfc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800ed00:	23ff      	movs	r3, #255	; 0xff
 800ed02:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800ed06:	23ff      	movs	r3, #255	; 0xff
 800ed08:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ed0c:	23ff      	movs	r3, #255	; 0xff
 800ed0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800ed12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ed16:	461a      	mov	r2, r3
 800ed18:	68b9      	ldr	r1, [r7, #8]
 800ed1a:	68f8      	ldr	r0, [r7, #12]
 800ed1c:	f004 fa14 	bl	8013148 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800ed20:	f107 0310 	add.w	r3, r7, #16
 800ed24:	4618      	mov	r0, r3
 800ed26:	f000 f879 	bl	800ee1c <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 800ed2a:	f107 0210 	add.w	r2, r7, #16
 800ed2e:	2300      	movs	r3, #0
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	68b9      	ldr	r1, [r7, #8]
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	f000 f8b4 	bl	800eea4 <lv_draw_label>
}
 800ed3c:	bf00      	nop
 800ed3e:	37a0      	adds	r7, #160	; 0xa0
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <draw_cleanup>:

static void draw_cleanup(lv_img_cache_entry_t * cache)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
#else
    LV_UNUSED(cache);
#endif
}
 800ed4c:	bf00      	nop
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <_lv_memcpy_small>:
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b087      	sub	sp, #28
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	613b      	str	r3, [r7, #16]
    while(len) {
 800ed6c:	e00c      	b.n	800ed88 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	781a      	ldrb	r2, [r3, #0]
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	701a      	strb	r2, [r3, #0]
        d8++;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	617b      	str	r3, [r7, #20]
        s8++;
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	613b      	str	r3, [r7, #16]
        len--;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	3b01      	subs	r3, #1
 800ed86:	607b      	str	r3, [r7, #4]
    while(len) {
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1ef      	bne.n	800ed6e <_lv_memcpy_small+0x16>
    return dst;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	371c      	adds	r7, #28
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr

0800ed9c <lv_area_get_width>:
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800edaa:	b29a      	uxth	r2, r3
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	3301      	adds	r3, #1
 800edba:	b29b      	uxth	r3, r3
 800edbc:	b21b      	sxth	r3, r3
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	370c      	adds	r7, #12
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr

0800edca <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 800edca:	b480      	push	{r7}
 800edcc:	b083      	sub	sp, #12
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 800edd8:	4618      	mov	r0, r3
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 800ede4:	b490      	push	{r4, r7}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	4604      	mov	r4, r0
 800edec:	4608      	mov	r0, r1
 800edee:	4611      	mov	r1, r2
 800edf0:	4622      	mov	r2, r4
 800edf2:	71fa      	strb	r2, [r7, #7]
 800edf4:	4602      	mov	r2, r0
 800edf6:	71ba      	strb	r2, [r7, #6]
 800edf8:	460a      	mov	r2, r1
 800edfa:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 800edfc:	797a      	ldrb	r2, [r7, #5]
 800edfe:	f362 0307 	bfi	r3, r2, #0, #8
 800ee02:	79ba      	ldrb	r2, [r7, #6]
 800ee04:	f362 230f 	bfi	r3, r2, #8, #8
 800ee08:	79fa      	ldrb	r2, [r7, #7]
 800ee0a:	f362 4317 	bfi	r3, r2, #16, #8
 800ee0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3708      	adds	r7, #8
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bc90      	pop	{r4, r7}
 800ee1a:	4770      	bx	lr

0800ee1c <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800ee24:	2128      	movs	r1, #40	; 0x28
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f00e f80b 	bl	801ce42 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	22ff      	movs	r2, #255	; 0xff
 800ee30:	741a      	strb	r2, [r3, #16]
    dsc->color = LV_COLOR_BLACK;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	701a      	strb	r2, [r3, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	705a      	strb	r2, [r3, #1]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2200      	movs	r2, #0
 800ee42:	709a      	strb	r2, [r3, #2]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	22ff      	movs	r2, #255	; 0xff
 800ee48:	70da      	strb	r2, [r3, #3]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a14      	ldr	r2, [pc, #80]	; (800eea0 <lv_draw_label_dsc_init+0x84>)
 800ee4e:	60da      	str	r2, [r3, #12]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee56:	619a      	str	r2, [r3, #24]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee5e:	61da      	str	r2, [r3, #28]
    dsc->sel_color = LV_COLOR_BLACK;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	711a      	strb	r2, [r3, #4]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	715a      	strb	r2, [r3, #5]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	719a      	strb	r2, [r3, #6]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	22ff      	movs	r2, #255	; 0xff
 800ee76:	71da      	strb	r2, [r3, #7]
    dsc->sel_bg_color = LV_COLOR_BLUE;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	22ff      	movs	r2, #255	; 0xff
 800ee7c:	721a      	strb	r2, [r3, #8]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	725a      	strb	r2, [r3, #9]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	729a      	strb	r2, [r3, #10]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	22ff      	movs	r2, #255	; 0xff
 800ee8e:	72da      	strb	r2, [r3, #11]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800ee98:	bf00      	nop
 800ee9a:	3708      	adds	r7, #8
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	20000020 	.word	0x20000020

0800eea4 <lv_draw_label>:
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask,
                                         const lv_draw_label_dsc_t * dsc,
                                         const char * txt,
                                         lv_draw_label_hint_t * hint)
{
 800eea4:	b5b0      	push	{r4, r5, r7, lr}
 800eea6:	b0ce      	sub	sp, #312	; 0x138
 800eea8:	af04      	add	r7, sp, #16
 800eeaa:	f107 040c 	add.w	r4, r7, #12
 800eeae:	6020      	str	r0, [r4, #0]
 800eeb0:	f107 0008 	add.w	r0, r7, #8
 800eeb4:	6001      	str	r1, [r0, #0]
 800eeb6:	1d39      	adds	r1, r7, #4
 800eeb8:	600a      	str	r2, [r1, #0]
 800eeba:	463a      	mov	r2, r7
 800eebc:	6013      	str	r3, [r2, #0]

    if(dsc->opa <= LV_OPA_MIN) return;
 800eebe:	1d3b      	adds	r3, r7, #4
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	7c1b      	ldrb	r3, [r3, #16]
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	f240 8507 	bls.w	800f8d8 <lv_draw_label+0xa34>
    const lv_font_t * font = dsc->font;
 800eeca:	1d3b      	adds	r3, r7, #4
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt[0] == '\0')  return;
 800eed4:	463b      	mov	r3, r7
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f000 84fe 	beq.w	800f8dc <lv_draw_label+0xa38>

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 800eee0:	f107 0208 	add.w	r2, r7, #8
 800eee4:	f107 030c 	add.w	r3, r7, #12
 800eee8:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800eeec:	6812      	ldr	r2, [r2, #0]
 800eeee:	6819      	ldr	r1, [r3, #0]
 800eef0:	f00b fe56 	bl	801aba0 <_lv_area_intersect>
 800eef4:	4603      	mov	r3, r0
 800eef6:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
    if(!clip_ok) return;
 800eefa:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800eefe:	f083 0301 	eor.w	r3, r3, #1
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f040 84eb 	bne.w	800f8e0 <lv_draw_label+0xa3c>

    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
 800ef0a:	1d3b      	adds	r3, r7, #4
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ef12:	f003 0302 	and.w	r3, r3, #2
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d108      	bne.n	800ef2c <lv_draw_label+0x88>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 800ef1a:	f107 030c 	add.w	r3, r7, #12
 800ef1e:	6818      	ldr	r0, [r3, #0]
 800ef20:	f7ff ff3c 	bl	800ed9c <lv_area_get_width>
 800ef24:	4603      	mov	r3, r0
 800ef26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ef2a:	e01f      	b.n	800ef6c <lv_draw_label+0xc8>
    }
    else {
        /*If EXAPND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800ef2c:	1d3b      	adds	r3, r7, #4
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68dc      	ldr	r4, [r3, #12]
 800ef32:	1d3b      	adds	r3, r7, #4
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f9b3 5014 	ldrsh.w	r5, [r3, #20]
 800ef3a:	1d3b      	adds	r3, r7, #4
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ef42:	1d3a      	adds	r2, r7, #4
 800ef44:	6812      	ldr	r2, [r2, #0]
 800ef46:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ef4a:	4639      	mov	r1, r7
 800ef4c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800ef50:	9202      	str	r2, [sp, #8]
 800ef52:	f647 4218 	movw	r2, #31768	; 0x7c18
 800ef56:	9201      	str	r2, [sp, #4]
 800ef58:	9300      	str	r3, [sp, #0]
 800ef5a:	462b      	mov	r3, r5
 800ef5c:	4622      	mov	r2, r4
 800ef5e:	6809      	ldr	r1, [r1, #0]
 800ef60:	f00e fbf0 	bl	801d744 <_lv_txt_get_size>
                         dsc->flag);
        w = p.x;
 800ef64:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ef68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 800ef6c:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800ef70:	f7ff ff2b 	bl	800edca <lv_font_get_line_height>
 800ef74:	4603      	mov	r3, r0
 800ef76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    int32_t line_height = line_height_font + dsc->line_space;
 800ef7a:	1d3b      	adds	r3, r7, #4
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ef82:	461a      	mov	r2, r3
 800ef84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ef88:	4413      	add	r3, r2
 800ef8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /*Init variables for the first line*/
    int32_t line_width = 0;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    lv_point_t pos;
    pos.x = coords->x1;
 800ef94:	f107 030c 	add.w	r3, r7, #12
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef9e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    pos.y = coords->y1;
 800efa2:	f107 030c 	add.w	r3, r7, #12
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800efac:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

    int32_t x_ofs = 0;
 800efb0:	2300      	movs	r3, #0
 800efb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int32_t y_ofs = 0;
 800efb6:	2300      	movs	r3, #0
 800efb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    x_ofs = dsc->ofs_x;
 800efbc:	1d3b      	adds	r3, r7, #4
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800efc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    y_ofs = dsc->ofs_y;
 800efc8:	1d3b      	adds	r3, r7, #4
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800efd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    pos.y += y_ofs;
 800efd4:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800efd8:	b29a      	uxth	r2, r3
 800efda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800efde:	b29b      	uxth	r3, r3
 800efe0:	4413      	add	r3, r2
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	b21b      	sxth	r3, r3
 800efe6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

    uint32_t line_start     = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    int32_t last_line_start = -1;
 800eff0:	f04f 33ff 	mov.w	r3, #4294967295
 800eff4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800eff8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800effc:	2b00      	cmp	r3, #0
 800effe:	d028      	beq.n	800f052 <lv_draw_label+0x1ae>
 800f000:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f004:	2b00      	cmp	r3, #0
 800f006:	d124      	bne.n	800f052 <lv_draw_label+0x1ae>
 800f008:	f107 030c 	add.w	r3, r7, #12
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f012:	2b00      	cmp	r3, #0
 800f014:	da1d      	bge.n	800f052 <lv_draw_label+0x1ae>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800f016:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	f107 020c 	add.w	r2, r7, #12
 800f020:	6812      	ldr	r2, [r2, #0]
 800f022:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f026:	1a9b      	subs	r3, r3, r2
 800f028:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800f02c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800f030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f034:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f038:	005b      	lsls	r3, r3, #1
 800f03a:	429a      	cmp	r2, r3
 800f03c:	dd04      	ble.n	800f048 <lv_draw_label+0x1a4>
            hint->line_start = -1;
 800f03e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f042:	f04f 32ff 	mov.w	r2, #4294967295
 800f046:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 800f048:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 800f052:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f056:	2b00      	cmp	r3, #0
 800f058:	d013      	beq.n	800f082 <lv_draw_label+0x1de>
 800f05a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f05e:	2b00      	cmp	r3, #0
 800f060:	db0f      	blt.n	800f082 <lv_draw_label+0x1de>
        line_start = last_line_start;
 800f062:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f066:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        pos.y += hint->y;
 800f06a:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f06e:	b29a      	uxth	r2, r3
 800f070:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	b29b      	uxth	r3, r3
 800f078:	4413      	add	r3, r2
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	b21b      	sxth	r3, r3
 800f07e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800f082:	463b      	mov	r3, r7
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f08a:	18d0      	adds	r0, r2, r3
 800f08c:	1d3b      	adds	r3, r7, #4
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f094:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f098:	b219      	sxth	r1, r3
 800f09a:	1d3b      	adds	r3, r7, #4
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f0a2:	9300      	str	r3, [sp, #0]
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800f0aa:	f00e fce5 	bl	801da78 <_lv_txt_get_next_line>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f0b4:	4413      	add	r3, r2
 800f0b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /*Go the first visible line*/
    while(pos.y + line_height_font < mask->y1) {
 800f0ba:	e05b      	b.n	800f174 <lv_draw_label+0x2d0>
        /*Go to next line*/
        line_start = line_end;
 800f0bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f0c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800f0c4:	463b      	mov	r3, r7
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f0cc:	18d0      	adds	r0, r2, r3
 800f0ce:	1d3b      	adds	r3, r7, #4
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f0d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f0da:	b219      	sxth	r1, r3
 800f0dc:	1d3b      	adds	r3, r7, #4
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f0e4:	9300      	str	r3, [sp, #0]
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800f0ec:	f00e fcc4 	bl	801da78 <_lv_txt_get_next_line>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        pos.y += line_height;
 800f0fc:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f100:	b29a      	uxth	r2, r3
 800f102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f106:	b29b      	uxth	r3, r3
 800f108:	4413      	add	r3, r2
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	b21b      	sxth	r3, r3
 800f10e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800f112:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f116:	2b00      	cmp	r3, #0
 800f118:	d023      	beq.n	800f162 <lv_draw_label+0x2be>
 800f11a:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f11e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800f122:	db1e      	blt.n	800f162 <lv_draw_label+0x2be>
 800f124:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	da19      	bge.n	800f162 <lv_draw_label+0x2be>
            hint->line_start = line_start;
 800f12e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800f132:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f136:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 800f138:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f13c:	461a      	mov	r2, r3
 800f13e:	f107 030c 	add.w	r3, r7, #12
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f148:	1ad2      	subs	r2, r2, r3
 800f14a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f14e:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 800f150:	f107 030c 	add.w	r3, r7, #12
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f15a:	461a      	mov	r2, r3
 800f15c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f160:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 800f162:	463b      	mov	r3, r7
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f16a:	4413      	add	r3, r2
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f000 83b8 	beq.w	800f8e4 <lv_draw_label+0xa40>
    while(pos.y + line_height_font < mask->y1) {
 800f174:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f178:	461a      	mov	r2, r3
 800f17a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f17e:	4413      	add	r3, r2
 800f180:	f107 0208 	add.w	r2, r7, #8
 800f184:	6812      	ldr	r2, [r2, #0]
 800f186:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f18a:	4293      	cmp	r3, r2
 800f18c:	db96      	blt.n	800f0bc <lv_draw_label+0x218>
    }

    /*Align to middle*/
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800f18e:	1d3b      	adds	r3, r7, #4
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f196:	f003 0304 	and.w	r3, r3, #4
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d033      	beq.n	800f206 <lv_draw_label+0x362>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f19e:	463b      	mov	r3, r7
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f1a6:	18d0      	adds	r0, r2, r3
 800f1a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f1ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f1b0:	1ad1      	subs	r1, r2, r3
 800f1b2:	1d3b      	adds	r3, r7, #4
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f1ba:	1d3b      	adds	r3, r7, #4
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f1c2:	9300      	str	r3, [sp, #0]
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f1ca:	f00e fd13 	bl	801dbf4 <_lv_txt_get_width>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800f1d4:	f107 030c 	add.w	r3, r7, #12
 800f1d8:	6818      	ldr	r0, [r3, #0]
 800f1da:	f7ff fddf 	bl	800ed9c <lv_area_get_width>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	da00      	bge.n	800f1ee <lv_draw_label+0x34a>
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	105b      	asrs	r3, r3, #1
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f1f6:	b29a      	uxth	r2, r3
 800f1f8:	b28b      	uxth	r3, r1
 800f1fa:	4413      	add	r3, r2
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	b21b      	sxth	r3, r3
 800f200:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f204:	e035      	b.n	800f272 <lv_draw_label+0x3ce>

    }
    /*Align to the right*/
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800f206:	1d3b      	adds	r3, r7, #4
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f20e:	f003 0308 	and.w	r3, r3, #8
 800f212:	2b00      	cmp	r3, #0
 800f214:	d02d      	beq.n	800f272 <lv_draw_label+0x3ce>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f216:	463b      	mov	r3, r7
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f21e:	18d0      	adds	r0, r2, r3
 800f220:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f224:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f228:	1ad1      	subs	r1, r2, r3
 800f22a:	1d3b      	adds	r3, r7, #4
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f232:	1d3b      	adds	r3, r7, #4
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	4613      	mov	r3, r2
 800f23e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f242:	f00e fcd7 	bl	801dbf4 <_lv_txt_get_width>
 800f246:	4603      	mov	r3, r0
 800f248:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        pos.x += lv_area_get_width(coords) - line_width;
 800f24c:	f107 030c 	add.w	r3, r7, #12
 800f250:	6818      	ldr	r0, [r3, #0]
 800f252:	f7ff fda3 	bl	800ed9c <lv_area_get_width>
 800f256:	4603      	mov	r3, r0
 800f258:	461a      	mov	r2, r3
 800f25a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f264:	b292      	uxth	r2, r2
 800f266:	b29b      	uxth	r3, r3
 800f268:	4413      	add	r3, r2
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	b21b      	sxth	r3, r3
 800f26e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    }

    lv_opa_t opa = dsc->opa;
 800f272:	1d3b      	adds	r3, r7, #4
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	7c1b      	ldrb	r3, [r3, #16]
 800f278:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

    uint32_t sel_start = dsc->sel_start;
 800f27c:	1d3b      	adds	r3, r7, #4
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	699b      	ldr	r3, [r3, #24]
 800f282:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    uint32_t sel_end = dsc->sel_end;
 800f286:	1d3b      	adds	r3, r7, #4
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	69db      	ldr	r3, [r3, #28]
 800f28c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if(sel_start > sel_end) {
 800f290:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f294:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f298:	429a      	cmp	r2, r3
 800f29a:	d90b      	bls.n	800f2b4 <lv_draw_label+0x410>
        uint32_t tmp = sel_start;
 800f29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        sel_start = sel_end;
 800f2a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f2a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        sel_end = tmp;
 800f2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800f2b4:	1d3b      	adds	r3, r7, #4
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f2bc:	f003 0301 	and.w	r3, r3, #1
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d107      	bne.n	800f2d4 <lv_draw_label+0x430>
 800f2c4:	1d3b      	adds	r3, r7, #4
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f2cc:	f003 0302 	and.w	r3, r3, #2
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d02a      	beq.n	800f32a <lv_draw_label+0x486>
        lv_draw_line_dsc_init(&line_dsc);
 800f2d4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f001 f924 	bl	8010526 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800f2de:	1d3b      	adds	r3, r7, #4
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800f2e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f2ec:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d005      	beq.n	800f300 <lv_draw_label+0x45c>
 800f2f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f2f8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800f2fc:	b21b      	sxth	r3, r3
 800f2fe:	e000      	b.n	800f302 <lv_draw_label+0x45e>
 800f300:	2301      	movs	r3, #1
 800f302:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        line_dsc.opa = dsc->opa;
 800f306:	1d3b      	adds	r3, r7, #4
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	7c1b      	ldrb	r3, [r3, #16]
 800f30c:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
        line_dsc.blend_mode = dsc->blend_mode;
 800f310:	1d3b      	adds	r3, r7, #4
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f318:	f003 0303 	and.w	r3, r3, #3
 800f31c:	b2da      	uxtb	r2, r3
 800f31e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800f322:	f362 0301 	bfi	r3, r2, #0, #2
 800f326:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    }

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 800f32a:	2300      	movs	r3, #0
 800f32c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    uint32_t i;
    uint32_t par_start = 0;
 800f330:	2300      	movs	r3, #0
 800f332:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    lv_color_t recolor;
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800f336:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f33a:	4618      	mov	r0, r3
 800f33c:	f003 fe80 	bl	8013040 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800f340:	1d3b      	adds	r3, r7, #4
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t pos_x_start = pos.x;
 800f348:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f34c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 800f350:	e2b8      	b.n	800f8c4 <lv_draw_label+0xa20>
        pos.x += x_ofs;
 800f352:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f356:	b29a      	uxth	r2, r3
 800f358:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	4413      	add	r3, r2
 800f360:	b29b      	uxth	r3, r3
 800f362:	b21b      	sxth	r3, r3
 800f364:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 800f368:	2300      	movs	r3, #0
 800f36a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
        i         = 0;
 800f36e:	2300      	movs	r3, #0
 800f370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
#if LV_USE_BIDI
        char * bidi_txt = _lv_mem_buf_get(line_end - line_start + 1);
        _lv_bidi_process_paragraph(txt + line_start, bidi_txt, line_end - line_start, dsc->bidi_dir, NULL, 0);
#else
        const char * bidi_txt = txt + line_start;
 800f374:	463b      	mov	r3, r7
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f37c:	4413      	add	r3, r2
 800f37e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
#endif

        while(i < line_end - line_start) {
 800f382:	e162      	b.n	800f64a <lv_draw_label+0x7a6>
            uint32_t logical_char_pos = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f38e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f392:	4293      	cmp	r3, r2
 800f394:	d011      	beq.n	800f3ba <lv_draw_label+0x516>
 800f396:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f39a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d00b      	beq.n	800f3ba <lv_draw_label+0x516>
#if LV_USE_BIDI
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start);
                uint32_t t = _lv_txt_encoded_get_char_id(bidi_txt, i);
                logical_char_pos += _lv_bidi_get_logical_pos(bidi_txt, NULL, line_end - line_start, dsc->bidi_dir, t, NULL);
#else
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800f3a2:	4ba7      	ldr	r3, [pc, #668]	; (800f640 <lv_draw_label+0x79c>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f3aa:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800f3ae:	4411      	add	r1, r2
 800f3b0:	463a      	mov	r2, r7
 800f3b2:	6810      	ldr	r0, [r2, #0]
 800f3b4:	4798      	blx	r3
 800f3b6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
#endif
            }

            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 800f3ba:	4ba2      	ldr	r3, [pc, #648]	; (800f644 <lv_draw_label+0x7a0>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800f3c2:	4611      	mov	r1, r2
 800f3c4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800f3c8:	4798      	blx	r3
 800f3ca:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800f3ce:	4b9d      	ldr	r3, [pc, #628]	; (800f644 <lv_draw_label+0x7a0>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f3d6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800f3da:	440a      	add	r2, r1
 800f3dc:	2100      	movs	r1, #0
 800f3de:	4610      	mov	r0, r2
 800f3e0:	4798      	blx	r3
 800f3e2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

            /*Handle the re-color command*/
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800f3e6:	1d3b      	adds	r3, r7, #4
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f3ee:	f003 0301 	and.w	r3, r3, #1
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f000 8090 	beq.w	800f518 <lv_draw_label+0x674>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800f3f8:	2323      	movs	r3, #35	; 0x23
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f400:	4293      	cmp	r3, r2
 800f402:	d11b      	bne.n	800f43c <lv_draw_label+0x598>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800f404:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d107      	bne.n	800f41c <lv_draw_label+0x578>
                        par_start = i;
 800f40c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f410:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                        cmd_state = CMD_STATE_PAR;
 800f414:	2301      	movs	r3, #1
 800f416:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                        continue;
 800f41a:	e116      	b.n	800f64a <lv_draw_label+0x7a6>
                    }
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
 800f41c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f420:	2b01      	cmp	r3, #1
 800f422:	d103      	bne.n	800f42c <lv_draw_label+0x588>
                        cmd_state = CMD_STATE_WAIT;
 800f424:	2300      	movs	r3, #0
 800f426:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800f42a:	e007      	b.n	800f43c <lv_draw_label+0x598>
                    }
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
 800f42c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f430:	2b02      	cmp	r3, #2
 800f432:	d103      	bne.n	800f43c <lv_draw_label+0x598>
                        cmd_state = CMD_STATE_WAIT;
 800f434:	2300      	movs	r3, #0
 800f436:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                        continue;
 800f43a:	e106      	b.n	800f64a <lv_draw_label+0x7a6>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 800f43c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f440:	2b01      	cmp	r3, #1
 800f442:	d169      	bne.n	800f518 <lv_draw_label+0x674>
                    if(letter == ' ') {
 800f444:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f448:	2b20      	cmp	r3, #32
 800f44a:	f040 80fd 	bne.w	800f648 <lv_draw_label+0x7a4>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800f44e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f452:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f456:	1ad3      	subs	r3, r2, r3
 800f458:	2b07      	cmp	r3, #7
 800f45a:	d154      	bne.n	800f506 <lv_draw_label+0x662>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800f45c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f460:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f464:	18d1      	adds	r1, r2, r3
 800f466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f46a:	2206      	movs	r2, #6
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7ff fc73 	bl	800ed58 <_lv_memcpy_small>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 800f472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f476:	2200      	movs	r2, #0
 800f478:	719a      	strb	r2, [r3, #6]
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800f47a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	4618      	mov	r0, r3
 800f482:	f000 fff3 	bl	801046c <hex_char_to_num>
 800f486:	4603      	mov	r3, r0
 800f488:	011c      	lsls	r4, r3, #4
 800f48a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f48e:	785b      	ldrb	r3, [r3, #1]
 800f490:	4618      	mov	r0, r3
 800f492:	f000 ffeb 	bl	801046c <hex_char_to_num>
 800f496:	4603      	mov	r3, r0
 800f498:	4423      	add	r3, r4
 800f49a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800f49e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4a2:	789b      	ldrb	r3, [r3, #2]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 ffe1 	bl	801046c <hex_char_to_num>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	011c      	lsls	r4, r3, #4
 800f4ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4b2:	78db      	ldrb	r3, [r3, #3]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f000 ffd9 	bl	801046c <hex_char_to_num>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	4423      	add	r3, r4
 800f4be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800f4c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4c6:	791b      	ldrb	r3, [r3, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f000 ffcf 	bl	801046c <hex_char_to_num>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	011c      	lsls	r4, r3, #4
 800f4d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4d6:	795b      	ldrb	r3, [r3, #5]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f000 ffc7 	bl	801046c <hex_char_to_num>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	4423      	add	r3, r4
 800f4e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                            recolor = lv_color_make(r, g, b);
 800f4e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f4f0:	b2d1      	uxtb	r1, r2
 800f4f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f4f6:	b2d2      	uxtb	r2, r2
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7ff fc73 	bl	800ede4 <lv_color_make>
 800f4fe:	4603      	mov	r3, r0
 800f500:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f504:	e004      	b.n	800f510 <lv_draw_label+0x66c>
                        }
                        else {
                            recolor.full = dsc->color.full;
 800f506:	1d3b      	adds	r3, r7, #4
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800f510:	2302      	movs	r3, #2
 800f512:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                    }
                    continue;
 800f516:	e097      	b.n	800f648 <lv_draw_label+0x7a4>
                }
            }

            lv_color_t color = dsc->color;
 800f518:	1d3b      	adds	r3, r7, #4
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	633b      	str	r3, [r7, #48]	; 0x30

            if(cmd_state == CMD_STATE_IN) color = recolor;
 800f520:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f524:	2b02      	cmp	r3, #2
 800f526:	d102      	bne.n	800f52e <lv_draw_label+0x68a>
 800f528:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f52c:	633b      	str	r3, [r7, #48]	; 0x30

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800f52e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f532:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800f536:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800f53a:	f009 fdcb 	bl	80190d4 <lv_font_get_glyph_width>
 800f53e:	4603      	mov	r3, r0
 800f540:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d04b      	beq.n	800f5e8 <lv_draw_label+0x744>
 800f550:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f558:	4293      	cmp	r3, r2
 800f55a:	d045      	beq.n	800f5e8 <lv_draw_label+0x744>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800f55c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f564:	429a      	cmp	r2, r3
 800f566:	d33f      	bcc.n	800f5e8 <lv_draw_label+0x744>
 800f568:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f56c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f570:	429a      	cmp	r2, r3
 800f572:	d239      	bcs.n	800f5e8 <lv_draw_label+0x744>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 800f574:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f578:	f107 0320 	add.w	r3, r7, #32
 800f57c:	801a      	strh	r2, [r3, #0]
                    sel_coords.y1 = pos.y;
 800f57e:	f9b7 20b6 	ldrsh.w	r2, [r7, #182]	; 0xb6
 800f582:	f107 0320 	add.w	r3, r7, #32
 800f586:	805a      	strh	r2, [r3, #2]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800f588:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f592:	b29b      	uxth	r3, r3
 800f594:	4413      	add	r3, r2
 800f596:	b29a      	uxth	r2, r3
 800f598:	1d3b      	adds	r3, r7, #4
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	4413      	add	r3, r2
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	b21a      	sxth	r2, r3
 800f5ac:	f107 0320 	add.w	r3, r7, #32
 800f5b0:	809a      	strh	r2, [r3, #4]
                    sel_coords.y2 = pos.y + line_height - 1;
 800f5b2:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	4413      	add	r3, r2
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	b21a      	sxth	r2, r3
 800f5c8:	f107 0320 	add.w	r3, r7, #32
 800f5cc:	80da      	strh	r2, [r3, #6]
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800f5ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f5d2:	f107 0308 	add.w	r3, r7, #8
 800f5d6:	f107 0020 	add.w	r0, r7, #32
 800f5da:	6819      	ldr	r1, [r3, #0]
 800f5dc:	f003 fdb4 	bl	8013148 <lv_draw_rect>
                    color = dsc->sel_color;
 800f5e0:	1d3b      	adds	r3, r7, #4
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800f5e8:	1d3b      	adds	r3, r7, #4
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f5f0:	f107 0108 	add.w	r1, r7, #8
 800f5f4:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 800f5f8:	9302      	str	r3, [sp, #8]
 800f5fa:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800f5fe:	9301      	str	r3, [sp, #4]
 800f600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f602:	9300      	str	r3, [sp, #0]
 800f604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f608:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f60c:	6809      	ldr	r1, [r1, #0]
 800f60e:	f000 f971 	bl	800f8f4 <lv_draw_letter>

            if(letter_w > 0) {
 800f612:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f616:	2b00      	cmp	r3, #0
 800f618:	dd17      	ble.n	800f64a <lv_draw_label+0x7a6>
                pos.x += letter_w + dsc->letter_space;
 800f61a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f61e:	b29a      	uxth	r2, r3
 800f620:	1d3b      	adds	r3, r7, #4
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f628:	b299      	uxth	r1, r3
 800f62a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f62e:	b29b      	uxth	r3, r3
 800f630:	440b      	add	r3, r1
 800f632:	b29b      	uxth	r3, r3
 800f634:	4413      	add	r3, r2
 800f636:	b29b      	uxth	r3, r3
 800f638:	b21b      	sxth	r3, r3
 800f63a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f63e:	e004      	b.n	800f64a <lv_draw_label+0x7a6>
 800f640:	20000048 	.word	0x20000048
 800f644:	20000044 	.word	0x20000044
                    continue;
 800f648:	bf00      	nop
        while(i < line_end - line_start) {
 800f64a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f64e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f652:	1ad2      	subs	r2, r2, r3
 800f654:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f658:	429a      	cmp	r2, r3
 800f65a:	f63f ae93 	bhi.w	800f384 <lv_draw_label+0x4e0>
            }
        }

        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800f65e:	1d3b      	adds	r3, r7, #4
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f666:	f003 0302 	and.w	r3, r3, #2
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d03a      	beq.n	800f6e4 <lv_draw_label+0x840>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 800f66e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f672:	b21a      	sxth	r2, r3
 800f674:	f107 031c 	add.w	r3, r7, #28
 800f678:	801a      	strh	r2, [r3, #0]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800f67a:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f67e:	b29a      	uxth	r2, r3
 800f680:	1d3b      	adds	r3, r7, #4
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	da00      	bge.n	800f690 <lv_draw_label+0x7ec>
 800f68e:	3301      	adds	r3, #1
 800f690:	105b      	asrs	r3, r3, #1
 800f692:	b21b      	sxth	r3, r3
 800f694:	b29b      	uxth	r3, r3
 800f696:	4413      	add	r3, r2
 800f698:	b29a      	uxth	r2, r3
 800f69a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	da00      	bge.n	800f6a4 <lv_draw_label+0x800>
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	105b      	asrs	r3, r3, #1
 800f6a6:	b21b      	sxth	r3, r3
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	4413      	add	r3, r2
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	b21a      	sxth	r2, r3
 800f6b0:	f107 031c 	add.w	r3, r7, #28
 800f6b4:	805a      	strh	r2, [r3, #2]
            p2.x = pos.x;
 800f6b6:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f6ba:	f107 0318 	add.w	r3, r7, #24
 800f6be:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 800f6c0:	f107 031c 	add.w	r3, r7, #28
 800f6c4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f6c8:	f107 0318 	add.w	r3, r7, #24
 800f6cc:	805a      	strh	r2, [r3, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800f6ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800f6d2:	f107 0208 	add.w	r2, r7, #8
 800f6d6:	f107 0118 	add.w	r1, r7, #24
 800f6da:	f107 001c 	add.w	r0, r7, #28
 800f6de:	6812      	ldr	r2, [r2, #0]
 800f6e0:	f000 ff3f 	bl	8010562 <lv_draw_line>
        }

        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800f6e4:	1d3b      	adds	r3, r7, #4
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f6ec:	f003 0301 	and.w	r3, r3, #1
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d03a      	beq.n	800f76a <lv_draw_label+0x8c6>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 800f6f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f6f8:	b21a      	sxth	r2, r3
 800f6fa:	f107 0314 	add.w	r3, r7, #20
 800f6fe:	801a      	strh	r2, [r3, #0]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800f700:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f704:	b29a      	uxth	r2, r3
 800f706:	1d3b      	adds	r3, r7, #4
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f710:	b29b      	uxth	r3, r3
 800f712:	4413      	add	r3, r2
 800f714:	b29a      	uxth	r2, r3
 800f716:	1d3b      	adds	r3, r7, #4
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f720:	b29b      	uxth	r3, r3
 800f722:	1ad3      	subs	r3, r2, r3
 800f724:	b29a      	uxth	r2, r3
 800f726:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f72a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800f72e:	b29b      	uxth	r3, r3
 800f730:	1ad3      	subs	r3, r2, r3
 800f732:	b29b      	uxth	r3, r3
 800f734:	b21a      	sxth	r2, r3
 800f736:	f107 0314 	add.w	r3, r7, #20
 800f73a:	805a      	strh	r2, [r3, #2]
            p2.x = pos.x;
 800f73c:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f740:	f107 0310 	add.w	r3, r7, #16
 800f744:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 800f746:	f107 0314 	add.w	r3, r7, #20
 800f74a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f74e:	f107 0310 	add.w	r3, r7, #16
 800f752:	805a      	strh	r2, [r3, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800f754:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800f758:	f107 0208 	add.w	r2, r7, #8
 800f75c:	f107 0110 	add.w	r1, r7, #16
 800f760:	f107 0014 	add.w	r0, r7, #20
 800f764:	6812      	ldr	r2, [r2, #0]
 800f766:	f000 fefc 	bl	8010562 <lv_draw_line>
#if LV_USE_BIDI
        _lv_mem_buf_release(bidi_txt);
        bidi_txt = NULL;
#endif
        /*Go to next line*/
        line_start = line_end;
 800f76a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f76e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800f772:	463b      	mov	r3, r7
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f77a:	18d0      	adds	r0, r2, r3
 800f77c:	1d3b      	adds	r3, r7, #4
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f784:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f788:	b219      	sxth	r1, r3
 800f78a:	1d3b      	adds	r3, r7, #4
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	460b      	mov	r3, r1
 800f796:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800f79a:	f00e f96d 	bl	801da78 <_lv_txt_get_next_line>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f7a4:	4413      	add	r3, r2
 800f7a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

        pos.x = coords->x1;
 800f7aa:	f107 030c 	add.w	r3, r7, #12
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7b4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        /*Align to middle*/
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800f7b8:	1d3b      	adds	r3, r7, #4
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f7c0:	f003 0304 	and.w	r3, r3, #4
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d033      	beq.n	800f830 <lv_draw_label+0x98c>
            line_width =
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f7c8:	463b      	mov	r3, r7
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f7d0:	18d0      	adds	r0, r2, r3
 800f7d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f7d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f7da:	1ad1      	subs	r1, r2, r3
 800f7dc:	1d3b      	adds	r3, r7, #4
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f7e4:	1d3b      	adds	r3, r7, #4
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f7ec:	9300      	str	r3, [sp, #0]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f7f4:	f00e f9fe 	bl	801dbf4 <_lv_txt_get_width>
 800f7f8:	4603      	mov	r3, r0
            line_width =
 800f7fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800f7fe:	f107 030c 	add.w	r3, r7, #12
 800f802:	6818      	ldr	r0, [r3, #0]
 800f804:	f7ff faca 	bl	800ed9c <lv_area_get_width>
 800f808:	4603      	mov	r3, r0
 800f80a:	461a      	mov	r2, r3
 800f80c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	2b00      	cmp	r3, #0
 800f814:	da00      	bge.n	800f818 <lv_draw_label+0x974>
 800f816:	3301      	adds	r3, #1
 800f818:	105b      	asrs	r3, r3, #1
 800f81a:	4619      	mov	r1, r3
 800f81c:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f820:	b29a      	uxth	r2, r3
 800f822:	b28b      	uxth	r3, r1
 800f824:	4413      	add	r3, r2
 800f826:	b29b      	uxth	r3, r3
 800f828:	b21b      	sxth	r3, r3
 800f82a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f82e:	e035      	b.n	800f89c <lv_draw_label+0x9f8>

        }
        /*Align to the right*/
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800f830:	1d3b      	adds	r3, r7, #4
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f838:	f003 0308 	and.w	r3, r3, #8
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d02d      	beq.n	800f89c <lv_draw_label+0x9f8>
            line_width =
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f840:	463b      	mov	r3, r7
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f848:	18d0      	adds	r0, r2, r3
 800f84a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f84e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f852:	1ad1      	subs	r1, r2, r3
 800f854:	1d3b      	adds	r3, r7, #4
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f85c:	1d3b      	adds	r3, r7, #4
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	4613      	mov	r3, r2
 800f868:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f86c:	f00e f9c2 	bl	801dbf4 <_lv_txt_get_width>
 800f870:	4603      	mov	r3, r0
            line_width =
 800f872:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            pos.x += lv_area_get_width(coords) - line_width;
 800f876:	f107 030c 	add.w	r3, r7, #12
 800f87a:	6818      	ldr	r0, [r3, #0]
 800f87c:	f7ff fa8e 	bl	800ed9c <lv_area_get_width>
 800f880:	4603      	mov	r3, r0
 800f882:	461a      	mov	r2, r3
 800f884:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f888:	1ad3      	subs	r3, r2, r3
 800f88a:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f88e:	b292      	uxth	r2, r2
 800f890:	b29b      	uxth	r3, r3
 800f892:	4413      	add	r3, r2
 800f894:	b29b      	uxth	r3, r3
 800f896:	b21b      	sxth	r3, r3
 800f898:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        }

        /*Go the next line position*/
        pos.y += line_height;
 800f89c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	4413      	add	r3, r2
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	b21b      	sxth	r3, r3
 800f8ae:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

        if(pos.y > mask->y2) return;
 800f8b2:	f9b7 20b6 	ldrsh.w	r2, [r7, #182]	; 0xb6
 800f8b6:	f107 0308 	add.w	r3, r7, #8
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	dc11      	bgt.n	800f8e8 <lv_draw_label+0xa44>
    while(txt[line_start] != '\0') {
 800f8c4:	463b      	mov	r3, r7
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f8cc:	4413      	add	r3, r2
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	f47f ad3e 	bne.w	800f352 <lv_draw_label+0x4ae>
 800f8d6:	e008      	b.n	800f8ea <lv_draw_label+0xa46>
    if(dsc->opa <= LV_OPA_MIN) return;
 800f8d8:	bf00      	nop
 800f8da:	e006      	b.n	800f8ea <lv_draw_label+0xa46>
    if(txt[0] == '\0')  return;
 800f8dc:	bf00      	nop
 800f8de:	e004      	b.n	800f8ea <lv_draw_label+0xa46>
    if(!clip_ok) return;
 800f8e0:	bf00      	nop
 800f8e2:	e002      	b.n	800f8ea <lv_draw_label+0xa46>
        if(txt[line_start] == '\0') return;
 800f8e4:	bf00      	nop
 800f8e6:	e000      	b.n	800f8ea <lv_draw_label+0xa46>
        if(pos.y > mask->y2) return;
 800f8e8:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 800f8ea:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f8f2:	bf00      	nop

0800f8f4 <lv_draw_letter>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * clip_area,
                                                 const lv_font_t * font_p,
                                                 uint32_t letter,
                                                 lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b090      	sub	sp, #64	; 0x40
 800f8f8:	af04      	add	r7, sp, #16
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	607a      	str	r2, [r7, #4]
 800f900:	603b      	str	r3, [r7, #0]
    if(opa < LV_OPA_MIN) return;
 800f902:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f906:	2b01      	cmp	r3, #1
 800f908:	f240 8094 	bls.w	800fa34 <lv_draw_letter+0x140>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f90c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f910:	2bfd      	cmp	r3, #253	; 0xfd
 800f912:	d902      	bls.n	800f91a <lv_draw_letter+0x26>
 800f914:	23ff      	movs	r3, #255	; 0xff
 800f916:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    if(font_p == NULL) {
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	f000 808b 	beq.w	800fa38 <lv_draw_letter+0x144>
        LV_LOG_WARN("lv_draw_letter: font is NULL");
        return;
    }

    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800f922:	f107 0114 	add.w	r1, r7, #20
 800f926:	2300      	movs	r3, #0
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f009 fbbf 	bl	80190ae <lv_font_get_glyph_dsc>
 800f930:	4603      	mov	r3, r0
 800f932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(g_ret == false)  {
 800f936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f93a:	f083 0301 	eor.w	r3, r3, #1
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	2b00      	cmp	r3, #0
 800f942:	d17b      	bne.n	800fa3c <lv_draw_letter+0x148>
        }
        return;
    }

    /* Don't draw anything if the character is empty. E.g. space */
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800f944:	8b3b      	ldrh	r3, [r7, #24]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d07a      	beq.n	800fa40 <lv_draw_letter+0x14c>
 800f94a:	8afb      	ldrh	r3, [r7, #22]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d077      	beq.n	800fa40 <lv_draw_letter+0x14c>

    int32_t pos_x = pos_p->x + g.ofs_x;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f956:	461a      	mov	r2, r3
 800f958:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f95c:	4413      	add	r3, r2
 800f95e:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f966:	461a      	mov	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f96e:	4619      	mov	r1, r3
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f976:	1acb      	subs	r3, r1, r3
 800f978:	4413      	add	r3, r2
 800f97a:	8b3a      	ldrh	r2, [r7, #24]
 800f97c:	1a9b      	subs	r3, r3, r2
 800f97e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f982:	1a9b      	subs	r3, r3, r2
 800f984:	627b      	str	r3, [r7, #36]	; 0x24

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < clip_area->x1 ||
 800f986:	8afb      	ldrh	r3, [r7, #22]
 800f988:	461a      	mov	r2, r3
 800f98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98c:	4413      	add	r3, r2
 800f98e:	68ba      	ldr	r2, [r7, #8]
 800f990:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f994:	4293      	cmp	r3, r2
 800f996:	db55      	blt.n	800fa44 <lv_draw_letter+0x150>
       pos_x > clip_area->x2 ||
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f99e:	461a      	mov	r2, r3
    if(pos_x + g.box_w < clip_area->x1 ||
 800f9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	dc4e      	bgt.n	800fa44 <lv_draw_letter+0x150>
       pos_y + g.box_h < clip_area->y1 ||
 800f9a6:	8b3b      	ldrh	r3, [r7, #24]
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ac:	4413      	add	r3, r2
 800f9ae:	68ba      	ldr	r2, [r7, #8]
 800f9b0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
       pos_x > clip_area->x2 ||
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	db45      	blt.n	800fa44 <lv_draw_letter+0x150>
       pos_y > clip_area->y2)  {
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f9be:	461a      	mov	r2, r3
       pos_y + g.box_h < clip_area->y1 ||
 800f9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	dc3e      	bgt.n	800fa44 <lv_draw_letter+0x150>
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800f9c6:	6839      	ldr	r1, [r7, #0]
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f009 fb61 	bl	8019090 <lv_font_get_glyph_bitmap>
 800f9ce:	6238      	str	r0, [r7, #32]
    if(map_p == NULL) {
 800f9d0:	6a3b      	ldr	r3, [r7, #32]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d038      	beq.n	800fa48 <lv_draw_letter+0x154>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(font_p->subpx) {
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	7b1b      	ldrb	r3, [r3, #12]
 800f9da:	f003 0303 	and.w	r3, r3, #3
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d013      	beq.n	800fa0c <lv_draw_letter+0x118>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800f9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e6:	b218      	sxth	r0, r3
 800f9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ea:	b219      	sxth	r1, r3
 800f9ec:	f107 0214 	add.w	r2, r7, #20
 800f9f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f9f4:	9303      	str	r3, [sp, #12]
 800f9f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f9fa:	9302      	str	r3, [sp, #8]
 800f9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fe:	9301      	str	r3, [sp, #4]
 800fa00:	6a3b      	ldr	r3, [r7, #32]
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	f000 fa3f 	bl	800fe88 <draw_letter_subpx>
 800fa0a:	e01e      	b.n	800fa4a <lv_draw_letter+0x156>
    }
    else {
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800fa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0e:	b218      	sxth	r0, r3
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	b219      	sxth	r1, r3
 800fa14:	f107 0214 	add.w	r2, r7, #20
 800fa18:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fa1c:	9303      	str	r3, [sp, #12]
 800fa1e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fa22:	9302      	str	r3, [sp, #8]
 800fa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa26:	9301      	str	r3, [sp, #4]
 800fa28:	6a3b      	ldr	r3, [r7, #32]
 800fa2a:	9300      	str	r3, [sp, #0]
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	f000 f80f 	bl	800fa50 <draw_letter_normal>
 800fa32:	e00a      	b.n	800fa4a <lv_draw_letter+0x156>
    if(opa < LV_OPA_MIN) return;
 800fa34:	bf00      	nop
 800fa36:	e008      	b.n	800fa4a <lv_draw_letter+0x156>
        return;
 800fa38:	bf00      	nop
 800fa3a:	e006      	b.n	800fa4a <lv_draw_letter+0x156>
        return;
 800fa3c:	bf00      	nop
 800fa3e:	e004      	b.n	800fa4a <lv_draw_letter+0x156>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800fa40:	bf00      	nop
 800fa42:	e002      	b.n	800fa4a <lv_draw_letter+0x156>
        return;
 800fa44:	bf00      	nop
 800fa46:	e000      	b.n	800fa4a <lv_draw_letter+0x156>
        return;
 800fa48:	bf00      	nop
    }
}
 800fa4a:	3730      	adds	r7, #48	; 0x30
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <draw_letter_normal>:

LV_ATTRIBUTE_FAST_MEM static void draw_letter_normal(lv_coord_t pos_x, lv_coord_t pos_y, lv_font_glyph_dsc_t * g,
                                                     const lv_area_t * clip_area,
                                                     const uint8_t * map_p, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800fa50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa52:	b0a5      	sub	sp, #148	; 0x94
 800fa54:	af04      	add	r7, sp, #16
 800fa56:	60ba      	str	r2, [r7, #8]
 800fa58:	607b      	str	r3, [r7, #4]
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	81fb      	strh	r3, [r7, #14]
 800fa5e:	460b      	mov	r3, r1
 800fa60:	81bb      	strh	r3, [r7, #12]
    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	7a9b      	ldrb	r3, [r3, #10]
 800fa66:	673b      	str	r3, [r7, #112]	; 0x70
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 800fa68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa6a:	2b03      	cmp	r3, #3
 800fa6c:	d101      	bne.n	800fa72 <draw_letter_normal+0x22>
 800fa6e:	2304      	movs	r3, #4
 800fa70:	673b      	str	r3, [r7, #112]	; 0x70

    switch(bpp) {
 800fa72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa74:	3b01      	subs	r3, #1
 800fa76:	2b07      	cmp	r3, #7
 800fa78:	f200 8202 	bhi.w	800fe80 <draw_letter_normal+0x430>
 800fa7c:	a201      	add	r2, pc, #4	; (adr r2, 800fa84 <draw_letter_normal+0x34>)
 800fa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa82:	bf00      	nop
 800fa84:	0800faa5 	.word	0x0800faa5
 800fa88:	0800fab3 	.word	0x0800fab3
 800fa8c:	0800fe81 	.word	0x0800fe81
 800fa90:	0800fac1 	.word	0x0800fac1
 800fa94:	0800fe81 	.word	0x0800fe81
 800fa98:	0800fe81 	.word	0x0800fe81
 800fa9c:	0800fe81 	.word	0x0800fe81
 800faa0:	0800facf 	.word	0x0800facf
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
 800faa4:	4b9f      	ldr	r3, [pc, #636]	; (800fd24 <draw_letter_normal+0x2d4>)
 800faa6:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0x80;
 800faa8:	2380      	movs	r3, #128	; 0x80
 800faaa:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 2;
 800faac:	2302      	movs	r3, #2
 800faae:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800fab0:	e015      	b.n	800fade <draw_letter_normal+0x8e>
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800fab2:	4b9d      	ldr	r3, [pc, #628]	; (800fd28 <draw_letter_normal+0x2d8>)
 800fab4:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0xC0;
 800fab6:	23c0      	movs	r3, #192	; 0xc0
 800fab8:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 4;
 800faba:	2304      	movs	r3, #4
 800fabc:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800fabe:	e00e      	b.n	800fade <draw_letter_normal+0x8e>
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800fac0:	4b9a      	ldr	r3, [pc, #616]	; (800fd2c <draw_letter_normal+0x2dc>)
 800fac2:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0xF0;
 800fac4:	23f0      	movs	r3, #240	; 0xf0
 800fac6:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 16;
 800fac8:	2310      	movs	r3, #16
 800faca:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800facc:	e007      	b.n	800fade <draw_letter_normal+0x8e>
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800face:	4b98      	ldr	r3, [pc, #608]	; (800fd30 <draw_letter_normal+0x2e0>)
 800fad0:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0xFF;
 800fad2:	23ff      	movs	r3, #255	; 0xff
 800fad4:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 256;
 800fad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fada:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;       /*No opa table, pixel value will be used directly*/
 800fadc:	bf00      	nop
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 800fade:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fae2:	2bfc      	cmp	r3, #252	; 0xfc
 800fae4:	d835      	bhi.n	800fb52 <draw_letter_normal+0x102>
        if(prev_opa != opa || prev_bpp != bpp) {
 800fae6:	4b93      	ldr	r3, [pc, #588]	; (800fd34 <draw_letter_normal+0x2e4>)
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 800faee:	429a      	cmp	r2, r3
 800faf0:	d104      	bne.n	800fafc <draw_letter_normal+0xac>
 800faf2:	4b91      	ldr	r3, [pc, #580]	; (800fd38 <draw_letter_normal+0x2e8>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d021      	beq.n	800fb40 <draw_letter_normal+0xf0>
            uint32_t i;
            for(i = 0; i < shades; i++) {
 800fafc:	2300      	movs	r3, #0
 800fafe:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb00:	e01a      	b.n	800fb38 <draw_letter_normal+0xe8>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800fb02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb06:	4413      	add	r3, r2
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	2bff      	cmp	r3, #255	; 0xff
 800fb0c:	d00b      	beq.n	800fb26 <draw_letter_normal+0xd6>
 800fb0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb12:	4413      	add	r3, r2
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	461a      	mov	r2, r3
 800fb18:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fb1c:	fb03 f302 	mul.w	r3, r3, r2
 800fb20:	121b      	asrs	r3, r3, #8
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	e001      	b.n	800fb2a <draw_letter_normal+0xda>
 800fb26:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fb2a:	4984      	ldr	r1, [pc, #528]	; (800fd3c <draw_letter_normal+0x2ec>)
 800fb2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb2e:	440a      	add	r2, r1
 800fb30:	7013      	strb	r3, [r2, #0]
            for(i = 0; i < shades; i++) {
 800fb32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb34:	3301      	adds	r3, #1
 800fb36:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d3e0      	bcc.n	800fb02 <draw_letter_normal+0xb2>
            }
        }
        bpp_opa_table_p = opa_table;
 800fb40:	4b7e      	ldr	r3, [pc, #504]	; (800fd3c <draw_letter_normal+0x2ec>)
 800fb42:	67fb      	str	r3, [r7, #124]	; 0x7c
        prev_opa = opa;
 800fb44:	4a7b      	ldr	r2, [pc, #492]	; (800fd34 <draw_letter_normal+0x2e4>)
 800fb46:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fb4a:	7013      	strb	r3, [r2, #0]
        prev_bpp = bpp;
 800fb4c:	4a7a      	ldr	r2, [pc, #488]	; (800fd38 <draw_letter_normal+0x2e8>)
 800fb4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb50:	6013      	str	r3, [r2, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	885b      	ldrh	r3, [r3, #2]
 800fb56:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t box_h = g->box_h;
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	889b      	ldrh	r3, [r3, #4]
 800fb5c:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800fb5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fb62:	fb02 f303 	mul.w	r3, r2, r3
 800fb66:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Calculate the col/row start/end on the map*/
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	da07      	bge.n	800fb86 <draw_letter_normal+0x136>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb82:	1ad3      	subs	r3, r2, r3
 800fb84:	e000      	b.n	800fb88 <draw_letter_normal+0x138>
 800fb86:	2300      	movs	r3, #0
 800fb88:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800fb8a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fb8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb90:	4413      	add	r3, r2
 800fb92:	687a      	ldr	r2, [r7, #4]
 800fb94:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	dd08      	ble.n	800fbae <draw_letter_normal+0x15e>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fba2:	461a      	mov	r2, r3
 800fba4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fba8:	1ad3      	subs	r3, r2, r3
 800fbaa:	3301      	adds	r3, #1
 800fbac:	e000      	b.n	800fbb0 <draw_letter_normal+0x160>
 800fbae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbb0:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fbb8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	da07      	bge.n	800fbd0 <draw_letter_normal+0x180>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	e000      	b.n	800fbd2 <draw_letter_normal+0x182>
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800fbd4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fbd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbda:	4413      	add	r3, r2
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	dd08      	ble.n	800fbf8 <draw_letter_normal+0x1a8>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fbec:	461a      	mov	r2, r3
 800fbee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fbf2:	1ad3      	subs	r3, r2, r3
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	e000      	b.n	800fbfa <draw_letter_normal+0x1aa>
 800fbf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbfa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800fbfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc00:	fb02 f303 	mul.w	r3, r2, r3
 800fc04:	4619      	mov	r1, r3
 800fc06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fc0a:	fb02 f303 	mul.w	r3, r2, r3
 800fc0e:	440b      	add	r3, r1
 800fc10:	63bb      	str	r3, [r7, #56]	; 0x38
    map_p += bit_ofs >> 3;
 800fc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc14:	08db      	lsrs	r3, r3, #3
 800fc16:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fc1a:	4413      	add	r3, r2
 800fc1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800fc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc22:	f003 0307 	and.w	r3, r3, #7
 800fc26:	65fb      	str	r3, [r7, #92]	; 0x5c

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800fc28:	f7fa f9f2 	bl	800a010 <_lv_refr_get_disp_refreshing>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f00a fa1e 	bl	801a070 <lv_disp_get_hor_res>
 800fc34:	4603      	mov	r3, r0
 800fc36:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800fc38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc3c:	fb02 f203 	mul.w	r2, r2, r3
 800fc40:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800fc44:	4293      	cmp	r3, r2
 800fc46:	bfa8      	it	ge
 800fc48:	4613      	movge	r3, r2
 800fc4a:	633b      	str	r3, [r7, #48]	; 0x30
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800fc4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc4e:	f00c fcef 	bl	801c630 <_lv_mem_buf_get>
 800fc52:	62f8      	str	r0, [r7, #44]	; 0x2c
    int32_t mask_p = 0;
 800fc54:	2300      	movs	r3, #0
 800fc56:	65bb      	str	r3, [r7, #88]	; 0x58

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos_x;
 800fc58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	89fb      	ldrh	r3, [r7, #14]
 800fc5e:	4413      	add	r3, r2
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	b21b      	sxth	r3, r3
 800fc64:	823b      	strh	r3, [r7, #16]
    fill_area.x2 = col_end  + pos_x - 1;
 800fc66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc68:	b29a      	uxth	r2, r3
 800fc6a:	89fb      	ldrh	r3, [r7, #14]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	3b01      	subs	r3, #1
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	b21b      	sxth	r3, r3
 800fc76:	82bb      	strh	r3, [r7, #20]
    fill_area.y1 = row_start + pos_y;
 800fc78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	89bb      	ldrh	r3, [r7, #12]
 800fc7e:	4413      	add	r3, r2
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	b21b      	sxth	r3, r3
 800fc84:	827b      	strh	r3, [r7, #18]
    fill_area.y2 = fill_area.y1;
 800fc86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc8a:	82fb      	strh	r3, [r7, #22]

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800fc8c:	f001 fe68 	bl	8011960 <lv_draw_mask_get_cnt>
 800fc90:	4603      	mov	r3, r0
 800fc92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    uint32_t col_bit_max = 8 - bpp;
 800fc96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc98:	f1c3 0308 	rsb	r3, r3, #8
 800fc9c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800fc9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fca2:	441a      	add	r2, r3
 800fca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fca6:	1ad3      	subs	r3, r2, r3
 800fca8:	461a      	mov	r2, r3
 800fcaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fcac:	fb02 f303 	mul.w	r3, r2, r3
 800fcb0:	623b      	str	r3, [r7, #32]

    for(row = row_start ; row < row_end; row++) {
 800fcb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcb4:	663b      	str	r3, [r7, #96]	; 0x60
 800fcb6:	e0bc      	b.n	800fe32 <draw_letter_normal+0x3e2>
        int32_t mask_p_start = mask_p;
 800fcb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcba:	61fb      	str	r3, [r7, #28]

        bitmask = bitmask_init >> col_bit;
 800fcbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fcbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcc0:	fa22 f303 	lsr.w	r3, r2, r3
 800fcc4:	677b      	str	r3, [r7, #116]	; 0x74
        for(col = col_start; col < col_end; col++) {
 800fcc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcc8:	667b      	str	r3, [r7, #100]	; 0x64
 800fcca:	e048      	b.n	800fd5e <draw_letter_normal+0x30e>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800fccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fcd6:	401a      	ands	r2, r3
 800fcd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fcda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcdc:	1acb      	subs	r3, r1, r3
 800fcde:	fa22 f303 	lsr.w	r3, r2, r3
 800fce2:	76bb      	strb	r3, [r7, #26]
            if(letter_px) {
 800fce4:	7ebb      	ldrb	r3, [r7, #26]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d008      	beq.n	800fcfc <draw_letter_normal+0x2ac>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800fcea:	7ebb      	ldrb	r3, [r7, #26]
 800fcec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fcee:	441a      	add	r2, r3
 800fcf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcf4:	440b      	add	r3, r1
 800fcf6:	7812      	ldrb	r2, [r2, #0]
 800fcf8:	701a      	strb	r2, [r3, #0]
 800fcfa:	e004      	b.n	800fd06 <draw_letter_normal+0x2b6>
            }
            else {
                mask_buf[mask_p] = 0;
 800fcfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd00:	4413      	add	r3, r2
 800fd02:	2200      	movs	r2, #0
 800fd04:	701a      	strb	r2, [r3, #0]
            }

            /*Go to the next column*/
            if(col_bit < col_bit_max) {
 800fd06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d218      	bcs.n	800fd40 <draw_letter_normal+0x2f0>
                col_bit += bpp;
 800fd0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd12:	4413      	add	r3, r2
 800fd14:	65fb      	str	r3, [r7, #92]	; 0x5c
                bitmask = bitmask >> bpp;
 800fd16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fd18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd1a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd1e:	677b      	str	r3, [r7, #116]	; 0x74
 800fd20:	e017      	b.n	800fd52 <draw_letter_normal+0x302>
 800fd22:	bf00      	nop
 800fd24:	080284cc 	.word	0x080284cc
 800fd28:	080284d0 	.word	0x080284d0
 800fd2c:	080284d4 	.word	0x080284d4
 800fd30:	080284e4 	.word	0x080284e4
 800fd34:	20017f34 	.word	0x20017f34
 800fd38:	20017f38 	.word	0x20017f38
 800fd3c:	20017f3c 	.word	0x20017f3c
            }
            else {
                col_bit = 0;
 800fd40:	2300      	movs	r3, #0
 800fd42:	65fb      	str	r3, [r7, #92]	; 0x5c
                bitmask = bitmask_init;
 800fd44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd46:	677b      	str	r3, [r7, #116]	; 0x74
                map_p++;
 800fd48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            }

            /*Next mask byte*/
            mask_p++;
 800fd52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd54:	3301      	adds	r3, #1
 800fd56:	65bb      	str	r3, [r7, #88]	; 0x58
        for(col = col_start; col < col_end; col++) {
 800fd58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	667b      	str	r3, [r7, #100]	; 0x64
 800fd5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd62:	429a      	cmp	r2, r3
 800fd64:	dbb2      	blt.n	800fccc <draw_letter_normal+0x27c>
        }

        /*Apply masks if any*/
        if(other_mask_cnt) {
 800fd66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d023      	beq.n	800fdb6 <draw_letter_normal+0x366>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd72:	18d4      	adds	r4, r2, r3
 800fd74:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 800fd78:	f9b7 6016 	ldrsh.w	r6, [r7, #22]
 800fd7c:	f107 0310 	add.w	r3, r7, #16
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7ff f80b 	bl	800ed9c <lv_area_get_width>
 800fd86:	4603      	mov	r3, r0
 800fd88:	4632      	mov	r2, r6
 800fd8a:	4629      	mov	r1, r5
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f001 fd4b 	bl	8011828 <lv_draw_mask_apply>
 800fd92:	4603      	mov	r3, r0
 800fd94:	76fb      	strb	r3, [r7, #27]
                                                             lv_area_get_width(&fill_area));
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800fd96:	7efb      	ldrb	r3, [r7, #27]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10c      	bne.n	800fdb6 <draw_letter_normal+0x366>
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fda0:	18d4      	adds	r4, r2, r3
 800fda2:	f107 0310 	add.w	r3, r7, #16
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7fe fff8 	bl	800ed9c <lv_area_get_width>
 800fdac:	4603      	mov	r3, r0
 800fdae:	4619      	mov	r1, r3
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f00d f846 	bl	801ce42 <_lv_memset_00>
            }
        }

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800fdb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdba:	1ad3      	subs	r3, r2, r3
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fdc0:	4413      	add	r3, r2
 800fdc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d907      	bls.n	800fdd8 <draw_letter_normal+0x388>
            fill_area.y2 ++;
 800fdc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	3301      	adds	r3, #1
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	b21b      	sxth	r3, r3
 800fdd4:	82fb      	strh	r3, [r7, #22]
 800fdd6:	e01a      	b.n	800fe0e <draw_letter_normal+0x3be>
        }
        else {
            _lv_blend_fill(clip_area, &fill_area,
 800fdd8:	f107 0110 	add.w	r1, r7, #16
 800fddc:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800fde0:	9302      	str	r3, [sp, #8]
 800fde2:	23ff      	movs	r3, #255	; 0xff
 800fde4:	9301      	str	r3, [sp, #4]
 800fde6:	2302      	movs	r3, #2
 800fde8:	9300      	str	r3, [sp, #0]
 800fdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f7fc faeb 	bl	800c3cc <_lv_blend_fill>
                           color, mask_buf, LV_DRAW_MASK_RES_CHANGED, LV_OPA_COVER,
                           blend_mode);

            fill_area.y1 = fill_area.y2 + 1;
 800fdf6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	b21b      	sxth	r3, r3
 800fe02:	827b      	strh	r3, [r7, #18]
            fill_area.y2 = fill_area.y1;
 800fe04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fe08:	82fb      	strh	r3, [r7, #22]
            mask_p = 0;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	65bb      	str	r3, [r7, #88]	; 0x58
        }

        col_bit += col_bit_row_ofs;
 800fe0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe10:	6a3b      	ldr	r3, [r7, #32]
 800fe12:	4413      	add	r3, r2
 800fe14:	65fb      	str	r3, [r7, #92]	; 0x5c
        map_p += (col_bit >> 3);
 800fe16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe18:	08db      	lsrs	r3, r3, #3
 800fe1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fe1e:	4413      	add	r3, r2
 800fe20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        col_bit = col_bit & 0x7;
 800fe24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe26:	f003 0307 	and.w	r3, r3, #7
 800fe2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(row = row_start ; row < row_end; row++) {
 800fe2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe2e:	3301      	adds	r3, #1
 800fe30:	663b      	str	r3, [r7, #96]	; 0x60
 800fe32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe36:	429a      	cmp	r2, r3
 800fe38:	f6ff af3e 	blt.w	800fcb8 <draw_letter_normal+0x268>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800fe3c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800fe40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d017      	beq.n	800fe78 <draw_letter_normal+0x428>
        fill_area.y2--;
 800fe48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	b21b      	sxth	r3, r3
 800fe54:	82fb      	strh	r3, [r7, #22]
        _lv_blend_fill(clip_area, &fill_area,
 800fe56:	f107 0110 	add.w	r1, r7, #16
 800fe5a:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800fe5e:	9302      	str	r3, [sp, #8]
 800fe60:	23ff      	movs	r3, #255	; 0xff
 800fe62:	9301      	str	r3, [sp, #4]
 800fe64:	2302      	movs	r3, #2
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f7fc faac 	bl	800c3cc <_lv_blend_fill>
                       color, mask_buf, LV_DRAW_MASK_RES_CHANGED, LV_OPA_COVER,
                       blend_mode);
        mask_p = 0;
 800fe74:	2300      	movs	r3, #0
 800fe76:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    _lv_mem_buf_release(mask_buf);
 800fe78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe7a:	f00c fcb7 	bl	801c7ec <_lv_mem_buf_release>
 800fe7e:	e000      	b.n	800fe82 <draw_letter_normal+0x432>
            return; /*Invalid bpp. Can't render the letter*/
 800fe80:	bf00      	nop
}
 800fe82:	3784      	adds	r7, #132	; 0x84
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe88 <draw_letter_subpx>:

static void draw_letter_subpx(lv_coord_t pos_x, lv_coord_t pos_y, lv_font_glyph_dsc_t * g, const lv_area_t * clip_area,
                              const uint8_t * map_p, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800fe88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe8a:	b0ab      	sub	sp, #172	; 0xac
 800fe8c:	af04      	add	r7, sp, #16
 800fe8e:	60ba      	str	r2, [r7, #8]
 800fe90:	607b      	str	r3, [r7, #4]
 800fe92:	4603      	mov	r3, r0
 800fe94:	81fb      	strh	r3, [r7, #14]
 800fe96:	460b      	mov	r3, r1
 800fe98:	81bb      	strh	r3, [r7, #12]
#if LV_USE_FONT_SUBPX
    const uint8_t * bpp_opa_table;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	7a9b      	ldrb	r3, [r3, #10]
 800fe9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if(bpp == 3) bpp = 4;
 800fea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fea6:	2b03      	cmp	r3, #3
 800fea8:	d102      	bne.n	800feb0 <draw_letter_subpx+0x28>
 800feaa:	2304      	movs	r3, #4
 800feac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    switch(bpp) {
 800feb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800feb4:	3b01      	subs	r3, #1
 800feb6:	2b07      	cmp	r3, #7
 800feb8:	f200 82d2 	bhi.w	8010460 <draw_letter_subpx+0x5d8>
 800febc:	a201      	add	r2, pc, #4	; (adr r2, 800fec4 <draw_letter_subpx+0x3c>)
 800febe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec2:	bf00      	nop
 800fec4:	0800fee5 	.word	0x0800fee5
 800fec8:	0800fef3 	.word	0x0800fef3
 800fecc:	08010461 	.word	0x08010461
 800fed0:	0800ff01 	.word	0x0800ff01
 800fed4:	08010461 	.word	0x08010461
 800fed8:	08010461 	.word	0x08010461
 800fedc:	08010461 	.word	0x08010461
 800fee0:	0800ff0f 	.word	0x0800ff0f
        case 1:
            bpp_opa_table = _lv_bpp1_opa_table;
 800fee4:	4bb9      	ldr	r3, [pc, #740]	; (80101cc <draw_letter_subpx+0x344>)
 800fee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0x80;
 800feea:	2380      	movs	r3, #128	; 0x80
 800feec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;
 800fef0:	e014      	b.n	800ff1c <draw_letter_subpx+0x94>
        case 2:
            bpp_opa_table = _lv_bpp2_opa_table;
 800fef2:	4bb7      	ldr	r3, [pc, #732]	; (80101d0 <draw_letter_subpx+0x348>)
 800fef4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0xC0;
 800fef8:	23c0      	movs	r3, #192	; 0xc0
 800fefa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;
 800fefe:	e00d      	b.n	800ff1c <draw_letter_subpx+0x94>
        case 4:
            bpp_opa_table = _lv_bpp4_opa_table;
 800ff00:	4bb4      	ldr	r3, [pc, #720]	; (80101d4 <draw_letter_subpx+0x34c>)
 800ff02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0xF0;
 800ff06:	23f0      	movs	r3, #240	; 0xf0
 800ff08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;
 800ff0c:	e006      	b.n	800ff1c <draw_letter_subpx+0x94>
        case 8:
            bpp_opa_table = _lv_bpp8_opa_table;
 800ff0e:	4bb2      	ldr	r3, [pc, #712]	; (80101d8 <draw_letter_subpx+0x350>)
 800ff10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0xFF;
 800ff14:	23ff      	movs	r3, #255	; 0xff
 800ff16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;       /*No opa table, pixel value will be used directly*/
 800ff1a:	bf00      	nop
            return; /*Invalid bpp. Can't render the letter*/
    }

    int32_t col, row;

    int32_t box_w = g->box_w;
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	885b      	ldrh	r3, [r3, #2]
 800ff20:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t box_h = g->box_h;
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	889b      	ldrh	r3, [r3, #4]
 800ff26:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800ff28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff2e:	fb02 f303 	mul.w	r3, r2, r3
 800ff32:	663b      	str	r3, [r7, #96]	; 0x60

    /* Calculate the col/row start/end on the map*/
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff3a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	da0a      	bge.n	800ff58 <draw_letter_subpx+0xd0>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ff4e:	1ad2      	subs	r2, r2, r3
 800ff50:	4613      	mov	r3, r2
 800ff52:	005b      	lsls	r3, r3, #1
 800ff54:	4413      	add	r3, r2
 800ff56:	e000      	b.n	800ff5a <draw_letter_subpx+0xd2>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 800ff5c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ff60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff62:	499e      	ldr	r1, [pc, #632]	; (80101dc <draw_letter_subpx+0x354>)
 800ff64:	fb81 0103 	smull	r0, r1, r1, r3
 800ff68:	17db      	asrs	r3, r3, #31
 800ff6a:	1acb      	subs	r3, r1, r3
 800ff6c:	4413      	add	r3, r2
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ff74:	4293      	cmp	r3, r2
 800ff76:	dd0b      	ble.n	800ff90 <draw_letter_subpx+0x108>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ff7e:	461a      	mov	r2, r3
 800ff80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ff84:	1ad3      	subs	r3, r2, r3
 800ff86:	1c5a      	adds	r2, r3, #1
 800ff88:	4613      	mov	r3, r2
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	4413      	add	r3, r2
 800ff8e:	e000      	b.n	800ff92 <draw_letter_subpx+0x10a>
 800ff90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff92:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ff9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	da07      	bge.n	800ffb2 <draw_letter_subpx+0x12a>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	e000      	b.n	800ffb4 <draw_letter_subpx+0x12c>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800ffb6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ffba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffbc:	4413      	add	r3, r2
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	dd08      	ble.n	800ffda <draw_letter_subpx+0x152>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ffd4:	1ad3      	subs	r3, r2, r3
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	e000      	b.n	800ffdc <draw_letter_subpx+0x154>
 800ffda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffdc:	653b      	str	r3, [r7, #80]	; 0x50

    /*Move on the map too*/
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800ffde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffe0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ffe2:	fb02 f303 	mul.w	r3, r2, r3
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ffee:	fb02 f303 	mul.w	r3, r2, r3
 800fff2:	440b      	add	r3, r1
 800fff4:	64fb      	str	r3, [r7, #76]	; 0x4c
    map_p += bit_ofs >> 3;
 800fff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fff8:	10db      	asrs	r3, r3, #3
 800fffa:	461a      	mov	r2, r3
 800fffc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010000:	4413      	add	r3, r2
 8010002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    uint8_t letter_px;
    lv_opa_t px_opa;
    int32_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8010006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010008:	f003 0307 	and.w	r3, r3, #7
 801000c:	67bb      	str	r3, [r7, #120]	; 0x78

    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 801000e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010010:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010012:	fb02 f303 	mul.w	r3, r2, r3
 8010016:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 801001a:	dc07      	bgt.n	801002c <draw_letter_subpx+0x1a4>
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	885b      	ldrh	r3, [r3, #2]
 8010020:	461a      	mov	r2, r3
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	889b      	ldrh	r3, [r3, #4]
 8010026:	fb03 f302 	mul.w	r3, r3, r2
 801002a:	e001      	b.n	8010030 <draw_letter_subpx+0x1a8>
 801002c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010030:	64bb      	str	r3, [r7, #72]	; 0x48
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8010032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010034:	4618      	mov	r0, r3
 8010036:	f00c fafb 	bl	801c630 <_lv_mem_buf_get>
 801003a:	6478      	str	r0, [r7, #68]	; 0x44
    int32_t mask_p = 0;
 801003c:	2300      	movs	r3, #0
 801003e:	677b      	str	r3, [r7, #116]	; 0x74

    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8010040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4618      	mov	r0, r3
 8010046:	f00c faf3 	bl	801c630 <_lv_mem_buf_get>
 801004a:	6438      	str	r0, [r7, #64]	; 0x40

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 801004c:	f7f9 ffe0 	bl	800a010 <_lv_refr_get_disp_refreshing>
 8010050:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010052:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010054:	f00a f8cc 	bl	801a1f0 <lv_disp_get_buf>
 8010058:	63b8      	str	r0, [r7, #56]	; 0x38

    int32_t vdb_width     = lv_area_get_width(&vdb->area);
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	3310      	adds	r3, #16
 801005e:	4618      	mov	r0, r3
 8010060:	f7fe fe9c 	bl	800ed9c <lv_area_get_width>
 8010064:	4603      	mov	r3, r0
 8010066:	637b      	str	r3, [r7, #52]	; 0x34
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	673b      	str	r3, [r7, #112]	; 0x70

    /*Set a pointer on VDB to the first pixel of the letter*/
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 801006e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010074:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8010078:	1a9b      	subs	r3, r3, r2
 801007a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801007c:	fb02 f203 	mul.w	r2, r2, r3
 8010080:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010084:	4413      	add	r3, r2
 8010086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010088:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 801008c:	1a9b      	subs	r3, r3, r2
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010092:	4413      	add	r3, r2
 8010094:	673b      	str	r3, [r7, #112]	; 0x70

    /*If the letter is partially out of mask the move there on VDB*/
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 8010096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801009a:	fb02 f203 	mul.w	r2, r2, r3
 801009e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100a0:	494e      	ldr	r1, [pc, #312]	; (80101dc <draw_letter_subpx+0x354>)
 80100a2:	fb81 0103 	smull	r0, r1, r1, r3
 80100a6:	17db      	asrs	r3, r3, #31
 80100a8:	1acb      	subs	r3, r1, r3
 80100aa:	4413      	add	r3, r2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80100b0:	4413      	add	r3, r2
 80100b2:	673b      	str	r3, [r7, #112]	; 0x70

    lv_area_t map_area;
    map_area.x1 = col_start / 3 + pos_x;
 80100b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100b6:	4a49      	ldr	r2, [pc, #292]	; (80101dc <draw_letter_subpx+0x354>)
 80100b8:	fb82 1203 	smull	r1, r2, r2, r3
 80100bc:	17db      	asrs	r3, r3, #31
 80100be:	1ad3      	subs	r3, r2, r3
 80100c0:	b29a      	uxth	r2, r3
 80100c2:	89fb      	ldrh	r3, [r7, #14]
 80100c4:	4413      	add	r3, r2
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	b21b      	sxth	r3, r3
 80100ca:	843b      	strh	r3, [r7, #32]
    map_area.x2 = col_end / 3  + pos_x - 1;
 80100cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100ce:	4a43      	ldr	r2, [pc, #268]	; (80101dc <draw_letter_subpx+0x354>)
 80100d0:	fb82 1203 	smull	r1, r2, r2, r3
 80100d4:	17db      	asrs	r3, r3, #31
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	b29a      	uxth	r2, r3
 80100da:	89fb      	ldrh	r3, [r7, #14]
 80100dc:	4413      	add	r3, r2
 80100de:	b29b      	uxth	r3, r3
 80100e0:	3b01      	subs	r3, #1
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	b21b      	sxth	r3, r3
 80100e6:	84bb      	strh	r3, [r7, #36]	; 0x24
    map_area.y1 = row_start + pos_y;
 80100e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	89bb      	ldrh	r3, [r7, #12]
 80100ee:	4413      	add	r3, r2
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	b21b      	sxth	r3, r3
 80100f4:	847b      	strh	r3, [r7, #34]	; 0x22
    map_area.y2 = map_area.y1;
 80100f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80100fa:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 80100fc:	f001 fc30 	bl	8011960 <lv_draw_mask_get_cnt>
 8010100:	4603      	mov	r3, r0
 8010102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    uint8_t font_rgb[3];

#if LV_COLOR_16_SWAP == 0
    uint8_t txt_rgb[3] = {color.ch.red, color.ch.green, color.ch.blue};
 8010106:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 801010a:	763b      	strb	r3, [r7, #24]
 801010c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8010110:	767b      	strb	r3, [r7, #25]
 8010112:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010116:	76bb      	strb	r3, [r7, #26]
#else
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
#endif

    for(row = row_start ; row < row_end; row++) {
 8010118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801011a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801011e:	e176      	b.n	801040e <draw_letter_subpx+0x586>
        uint32_t subpx_cnt = 0;
 8010120:	2300      	movs	r3, #0
 8010122:	66fb      	str	r3, [r7, #108]	; 0x6c
        bitmask = bitmask_init >> col_bit;
 8010124:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801012a:	fa22 f303 	lsr.w	r3, r2, r3
 801012e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int32_t mask_p_start = mask_p;
 8010132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010134:	62fb      	str	r3, [r7, #44]	; 0x2c

        for(col = col_start; col < col_end; col++) {
 8010136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801013c:	e0e0      	b.n	8010300 <draw_letter_subpx+0x478>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
 801013e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	461a      	mov	r2, r3
 8010146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801014a:	401a      	ands	r2, r3
 801014c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801014e:	4259      	negs	r1, r3
 8010150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010154:	1acb      	subs	r3, r1, r3
 8010156:	3308      	adds	r3, #8
 8010158:	fa22 f303 	lsr.w	r3, r2, r3
 801015c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if(letter_px != 0) {
 8010160:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8010164:	2b00      	cmp	r3, #0
 8010166:	d03b      	beq.n	80101e0 <draw_letter_subpx+0x358>
                if(opa == LV_OPA_COVER) {
 8010168:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 801016c:	2bff      	cmp	r3, #255	; 0xff
 801016e:	d10f      	bne.n	8010190 <draw_letter_subpx+0x308>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 8010170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010174:	2b08      	cmp	r3, #8
 8010176:	d006      	beq.n	8010186 <draw_letter_subpx+0x2fe>
 8010178:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801017c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010180:	4413      	add	r3, r2
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	e001      	b.n	801018a <draw_letter_subpx+0x302>
 8010186:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801018a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801018e:	e02a      	b.n	80101e6 <draw_letter_subpx+0x35e>
                }
                else {
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 8010190:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010194:	2b08      	cmp	r3, #8
 8010196:	d108      	bne.n	80101aa <draw_letter_subpx+0x322>
 8010198:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801019c:	f897 20b8 	ldrb.w	r2, [r7, #184]	; 0xb8
 80101a0:	fb02 f303 	mul.w	r3, r2, r3
 80101a4:	0a1b      	lsrs	r3, r3, #8
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	e00c      	b.n	80101c4 <draw_letter_subpx+0x33c>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
 80101aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80101ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80101b2:	4413      	add	r3, r2
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	461a      	mov	r2, r3
 80101b8:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80101bc:	fb03 f302 	mul.w	r3, r3, r2
 80101c0:	0a1b      	lsrs	r3, r3, #8
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 80101c2:	b2db      	uxtb	r3, r3
 80101c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80101c8:	e00d      	b.n	80101e6 <draw_letter_subpx+0x35e>
 80101ca:	bf00      	nop
 80101cc:	080284cc 	.word	0x080284cc
 80101d0:	080284d0 	.word	0x080284d0
 80101d4:	080284d4 	.word	0x080284d4
 80101d8:	080284e4 	.word	0x080284e4
 80101dc:	55555556 	.word	0x55555556
                }
            }
            else {
                px_opa = 0;
 80101e0:	2300      	movs	r3, #0
 80101e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }

            font_rgb[subpx_cnt] = px_opa;
 80101e6:	f107 021c 	add.w	r2, r7, #28
 80101ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ec:	4413      	add	r3, r2
 80101ee:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80101f2:	701a      	strb	r2, [r3, #0]

            subpx_cnt ++;
 80101f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101f6:	3301      	adds	r3, #1
 80101f8:	66fb      	str	r3, [r7, #108]	; 0x6c
            if(subpx_cnt == 3) {
 80101fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101fc:	2b03      	cmp	r3, #3
 80101fe:	d159      	bne.n	80102b4 <draw_letter_subpx+0x42c>
                subpx_cnt = 0;
 8010200:	2300      	movs	r3, #0
 8010202:	66fb      	str	r3, [r7, #108]	; 0x6c

                lv_color_t res_color;
#if LV_COLOR_16_SWAP == 0
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 8010204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010206:	789b      	ldrb	r3, [r3, #2]
 8010208:	743b      	strb	r3, [r7, #16]
 801020a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801020c:	785b      	ldrb	r3, [r3, #1]
 801020e:	747b      	strb	r3, [r7, #17]
 8010210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	74bb      	strb	r3, [r7, #18]

#if LV_FONT_SUBPX_BGR
                res_color.ch.blue = (uint32_t)((uint32_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
                res_color.ch.red = (uint32_t)((uint32_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
#else
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 8010216:	7e3b      	ldrb	r3, [r7, #24]
 8010218:	7f3a      	ldrb	r2, [r7, #28]
 801021a:	fb02 f203 	mul.w	r2, r2, r3
 801021e:	7c3b      	ldrb	r3, [r7, #16]
 8010220:	4619      	mov	r1, r3
 8010222:	7f3b      	ldrb	r3, [r7, #28]
 8010224:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010228:	fb03 f301 	mul.w	r3, r3, r1
 801022c:	4413      	add	r3, r2
 801022e:	0a1b      	lsrs	r3, r3, #8
 8010230:	b2db      	uxtb	r3, r3
 8010232:	75bb      	strb	r3, [r7, #22]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 8010234:	7ebb      	ldrb	r3, [r7, #26]
 8010236:	7fba      	ldrb	r2, [r7, #30]
 8010238:	fb02 f203 	mul.w	r2, r2, r3
 801023c:	7cbb      	ldrb	r3, [r7, #18]
 801023e:	4619      	mov	r1, r3
 8010240:	7fbb      	ldrb	r3, [r7, #30]
 8010242:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010246:	fb03 f301 	mul.w	r3, r3, r1
 801024a:	4413      	add	r3, r2
 801024c:	0a1b      	lsrs	r3, r3, #8
 801024e:	b2db      	uxtb	r3, r3
 8010250:	753b      	strb	r3, [r7, #20]
#endif

#if LV_COLOR_16_SWAP == 0
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 8010252:	7e7b      	ldrb	r3, [r7, #25]
 8010254:	7f7a      	ldrb	r2, [r7, #29]
 8010256:	fb02 f303 	mul.w	r3, r2, r3
 801025a:	7c7a      	ldrb	r2, [r7, #17]
 801025c:	4611      	mov	r1, r2
 801025e:	7f7a      	ldrb	r2, [r7, #29]
 8010260:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8010264:	fb02 f201 	mul.w	r2, r2, r1
 8010268:	4413      	add	r3, r2
 801026a:	0a1b      	lsrs	r3, r3, #8
 801026c:	b2db      	uxtb	r3, r3
 801026e:	757b      	strb	r3, [r7, #21]
                res_color.ch.green_h = green >> 3;
                res_color.ch.green_l = green & 0x7;
#endif

#if LV_COLOR_DEPTH == 32
                res_color.ch.alpha =  0xff;
 8010270:	23ff      	movs	r3, #255	; 0xff
 8010272:	75fb      	strb	r3, [r7, #23]
#endif

                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 8010274:	7f3b      	ldrb	r3, [r7, #28]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d10b      	bne.n	8010292 <draw_letter_subpx+0x40a>
 801027a:	7f7b      	ldrb	r3, [r7, #29]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d108      	bne.n	8010292 <draw_letter_subpx+0x40a>
 8010280:	7fbb      	ldrb	r3, [r7, #30]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d105      	bne.n	8010292 <draw_letter_subpx+0x40a>
 8010286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010288:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801028a:	4413      	add	r3, r2
 801028c:	2200      	movs	r2, #0
 801028e:	701a      	strb	r2, [r3, #0]
 8010290:	e004      	b.n	801029c <draw_letter_subpx+0x414>
                else mask_buf[mask_p] = LV_OPA_COVER;
 8010292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010296:	4413      	add	r3, r2
 8010298:	22ff      	movs	r2, #255	; 0xff
 801029a:	701a      	strb	r2, [r3, #0]
                color_buf[mask_p] = res_color;
 801029c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102a2:	4413      	add	r3, r2
 80102a4:	697a      	ldr	r2, [r7, #20]
 80102a6:	601a      	str	r2, [r3, #0]

                /*Next mask byte*/
                mask_p++;
 80102a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102aa:	3301      	adds	r3, #1
 80102ac:	677b      	str	r3, [r7, #116]	; 0x74
                vdb_buf_tmp++;
 80102ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102b0:	3304      	adds	r3, #4
 80102b2:	673b      	str	r3, [r7, #112]	; 0x70
            }

            /*Go to the next column*/
            if(col_bit < (int32_t)(8 - bpp)) {
 80102b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102b8:	f1c3 0308 	rsb	r3, r3, #8
 80102bc:	461a      	mov	r2, r3
 80102be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102c0:	4293      	cmp	r3, r2
 80102c2:	da0d      	bge.n	80102e0 <draw_letter_subpx+0x458>
                col_bit += bpp;
 80102c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80102c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102ca:	4413      	add	r3, r2
 80102cc:	67bb      	str	r3, [r7, #120]	; 0x78
                bitmask = bitmask >> bpp;
 80102ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80102d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102d6:	fa22 f303 	lsr.w	r3, r2, r3
 80102da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80102de:	e00a      	b.n	80102f6 <draw_letter_subpx+0x46e>
            }
            else {
                col_bit = 0;
 80102e0:	2300      	movs	r3, #0
 80102e2:	67bb      	str	r3, [r7, #120]	; 0x78
                bitmask = bitmask_init;
 80102e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                map_p++;
 80102ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80102f0:	3301      	adds	r3, #1
 80102f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        for(col = col_start; col < col_end; col++) {
 80102f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80102fa:	3301      	adds	r3, #1
 80102fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010300:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010304:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010306:	429a      	cmp	r2, r3
 8010308:	f6ff af19 	blt.w	801013e <draw_letter_subpx+0x2b6>
            }
        }

        /*Apply masks if any*/
        if(other_mask_cnt) {
 801030c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010310:	2b00      	cmp	r3, #0
 8010312:	d025      	beq.n	8010360 <draw_letter_subpx+0x4d8>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
 8010314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010318:	18d4      	adds	r4, r2, r3
 801031a:	f9b7 5020 	ldrsh.w	r5, [r7, #32]
 801031e:	f9b7 6026 	ldrsh.w	r6, [r7, #38]	; 0x26
 8010322:	f107 0320 	add.w	r3, r7, #32
 8010326:	4618      	mov	r0, r3
 8010328:	f7fe fd38 	bl	800ed9c <lv_area_get_width>
 801032c:	4603      	mov	r3, r0
 801032e:	4632      	mov	r2, r6
 8010330:	4629      	mov	r1, r5
 8010332:	4620      	mov	r0, r4
 8010334:	f001 fa78 	bl	8011828 <lv_draw_mask_apply>
 8010338:	4603      	mov	r3, r0
 801033a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                                             lv_area_get_width(&map_area));
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801033e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010342:	2b00      	cmp	r3, #0
 8010344:	d10c      	bne.n	8010360 <draw_letter_subpx+0x4d8>
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
 8010346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010348:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801034a:	18d4      	adds	r4, r2, r3
 801034c:	f107 0320 	add.w	r3, r7, #32
 8010350:	4618      	mov	r0, r3
 8010352:	f7fe fd23 	bl	800ed9c <lv_area_get_width>
 8010356:	4603      	mov	r3, r0
 8010358:	4619      	mov	r1, r3
 801035a:	4620      	mov	r0, r4
 801035c:	f00c fd71 	bl	801ce42 <_lv_memset_00>
            }
        }

        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8010360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010364:	1ad2      	subs	r2, r2, r3
 8010366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010368:	4413      	add	r3, r2
 801036a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801036c:	429a      	cmp	r2, r3
 801036e:	dd07      	ble.n	8010380 <draw_letter_subpx+0x4f8>
            map_area.y2 ++;
 8010370:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010374:	b29b      	uxth	r3, r3
 8010376:	3301      	adds	r3, #1
 8010378:	b29b      	uxth	r3, r3
 801037a:	b21b      	sxth	r3, r3
 801037c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801037e:	e01a      	b.n	80103b6 <draw_letter_subpx+0x52e>
        }
        else {
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 8010380:	f107 0120 	add.w	r1, r7, #32
 8010384:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8010388:	9302      	str	r3, [sp, #8]
 801038a:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 801038e:	9301      	str	r3, [sp, #4]
 8010390:	2302      	movs	r3, #2
 8010392:	9300      	str	r3, [sp, #0]
 8010394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7fc f8e8 	bl	800c56e <_lv_blend_map>

            map_area.y1 = map_area.y2 + 1;
 801039e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	3301      	adds	r3, #1
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	b21b      	sxth	r3, r3
 80103aa:	847b      	strh	r3, [r7, #34]	; 0x22
            map_area.y2 = map_area.y1;
 80103ac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80103b0:	84fb      	strh	r3, [r7, #38]	; 0x26
            mask_p = 0;
 80103b2:	2300      	movs	r3, #0
 80103b4:	677b      	str	r3, [r7, #116]	; 0x74
        }

        col_bit += ((box_w - col_end) + col_start) * bpp;
 80103b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80103b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103ba:	1ad2      	subs	r2, r2, r3
 80103bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103be:	4413      	add	r3, r2
 80103c0:	461a      	mov	r2, r3
 80103c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80103c6:	fb03 f202 	mul.w	r2, r3, r2
 80103ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103cc:	4413      	add	r3, r2
 80103ce:	67bb      	str	r3, [r7, #120]	; 0x78

        map_p += (col_bit >> 3);
 80103d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103d2:	10db      	asrs	r3, r3, #3
 80103d4:	461a      	mov	r2, r3
 80103d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80103da:	4413      	add	r3, r2
 80103dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        col_bit = col_bit & 0x7;
 80103e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103e2:	f003 0307 	and.w	r3, r3, #7
 80103e6:	67bb      	str	r3, [r7, #120]	; 0x78

        /*Next row in VDB*/
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80103e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103ec:	1ad3      	subs	r3, r2, r3
 80103ee:	4a1e      	ldr	r2, [pc, #120]	; (8010468 <draw_letter_subpx+0x5e0>)
 80103f0:	fb82 1203 	smull	r1, r2, r2, r3
 80103f4:	17db      	asrs	r3, r3, #31
 80103f6:	1a9a      	subs	r2, r3, r2
 80103f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103fa:	4413      	add	r3, r2
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010400:	4413      	add	r3, r2
 8010402:	673b      	str	r3, [r7, #112]	; 0x70
    for(row = row_start ; row < row_end; row++) {
 8010404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010408:	3301      	adds	r3, #1
 801040a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801040e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010414:	429a      	cmp	r2, r3
 8010416:	f6ff ae83 	blt.w	8010120 <draw_letter_subpx+0x298>
    }

    /*Flush the last part*/
    if(map_area.y1 != map_area.y2) {
 801041a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801041e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010422:	429a      	cmp	r2, r3
 8010424:	d015      	beq.n	8010452 <draw_letter_subpx+0x5ca>
        map_area.y2--;
 8010426:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801042a:	b29b      	uxth	r3, r3
 801042c:	3b01      	subs	r3, #1
 801042e:	b29b      	uxth	r3, r3
 8010430:	b21b      	sxth	r3, r3
 8010432:	84fb      	strh	r3, [r7, #38]	; 0x26
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 8010434:	f107 0120 	add.w	r1, r7, #32
 8010438:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 801043c:	9302      	str	r3, [sp, #8]
 801043e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8010442:	9301      	str	r3, [sp, #4]
 8010444:	2302      	movs	r3, #2
 8010446:	9300      	str	r3, [sp, #0]
 8010448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801044a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7fc f88e 	bl	800c56e <_lv_blend_map>
    }

    _lv_mem_buf_release(mask_buf);
 8010452:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010454:	f00c f9ca 	bl	801c7ec <_lv_mem_buf_release>
    _lv_mem_buf_release(color_buf);
 8010458:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801045a:	f00c f9c7 	bl	801c7ec <_lv_mem_buf_release>
 801045e:	e000      	b.n	8010462 <draw_letter_subpx+0x5da>
            return; /*Invalid bpp. Can't render the letter*/
 8010460:	bf00      	nop
#else
    LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
#endif
}
 8010462:	379c      	adds	r7, #156	; 0x9c
 8010464:	46bd      	mov	sp, r7
 8010466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010468:	55555556 	.word	0x55555556

0801046c <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 801046c:	b480      	push	{r7}
 801046e:	b085      	sub	sp, #20
 8010470:	af00      	add	r7, sp, #0
 8010472:	4603      	mov	r3, r0
 8010474:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8010476:	2300      	movs	r3, #0
 8010478:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 801047a:	79fb      	ldrb	r3, [r7, #7]
 801047c:	2b2f      	cmp	r3, #47	; 0x2f
 801047e:	d906      	bls.n	801048e <hex_char_to_num+0x22>
 8010480:	79fb      	ldrb	r3, [r7, #7]
 8010482:	2b39      	cmp	r3, #57	; 0x39
 8010484:	d803      	bhi.n	801048e <hex_char_to_num+0x22>
        result = hex - '0';
 8010486:	79fb      	ldrb	r3, [r7, #7]
 8010488:	3b30      	subs	r3, #48	; 0x30
 801048a:	73fb      	strb	r3, [r7, #15]
 801048c:	e02d      	b.n	80104ea <hex_char_to_num+0x7e>
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 801048e:	79fb      	ldrb	r3, [r7, #7]
 8010490:	2b60      	cmp	r3, #96	; 0x60
 8010492:	d902      	bls.n	801049a <hex_char_to_num+0x2e>
 8010494:	79fb      	ldrb	r3, [r7, #7]
 8010496:	3b20      	subs	r3, #32
 8010498:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 801049a:	79fb      	ldrb	r3, [r7, #7]
 801049c:	3b41      	subs	r3, #65	; 0x41
 801049e:	2b05      	cmp	r3, #5
 80104a0:	d820      	bhi.n	80104e4 <hex_char_to_num+0x78>
 80104a2:	a201      	add	r2, pc, #4	; (adr r2, 80104a8 <hex_char_to_num+0x3c>)
 80104a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104a8:	080104c1 	.word	0x080104c1
 80104ac:	080104c7 	.word	0x080104c7
 80104b0:	080104cd 	.word	0x080104cd
 80104b4:	080104d3 	.word	0x080104d3
 80104b8:	080104d9 	.word	0x080104d9
 80104bc:	080104df 	.word	0x080104df
            case 'A':
                result = 10;
 80104c0:	230a      	movs	r3, #10
 80104c2:	73fb      	strb	r3, [r7, #15]
                break;
 80104c4:	e011      	b.n	80104ea <hex_char_to_num+0x7e>
            case 'B':
                result = 11;
 80104c6:	230b      	movs	r3, #11
 80104c8:	73fb      	strb	r3, [r7, #15]
                break;
 80104ca:	e00e      	b.n	80104ea <hex_char_to_num+0x7e>
            case 'C':
                result = 12;
 80104cc:	230c      	movs	r3, #12
 80104ce:	73fb      	strb	r3, [r7, #15]
                break;
 80104d0:	e00b      	b.n	80104ea <hex_char_to_num+0x7e>
            case 'D':
                result = 13;
 80104d2:	230d      	movs	r3, #13
 80104d4:	73fb      	strb	r3, [r7, #15]
                break;
 80104d6:	e008      	b.n	80104ea <hex_char_to_num+0x7e>
            case 'E':
                result = 14;
 80104d8:	230e      	movs	r3, #14
 80104da:	73fb      	strb	r3, [r7, #15]
                break;
 80104dc:	e005      	b.n	80104ea <hex_char_to_num+0x7e>
            case 'F':
                result = 15;
 80104de:	230f      	movs	r3, #15
 80104e0:	73fb      	strb	r3, [r7, #15]
                break;
 80104e2:	e002      	b.n	80104ea <hex_char_to_num+0x7e>
            default:
                result = 0;
 80104e4:	2300      	movs	r3, #0
 80104e6:	73fb      	strb	r3, [r7, #15]
                break;
 80104e8:	bf00      	nop
        }
    }

    return result;
 80104ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3714      	adds	r7, #20
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <lv_area_get_width>:
{
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010506:	b29a      	uxth	r2, r3
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801050e:	b29b      	uxth	r3, r3
 8010510:	1ad3      	subs	r3, r2, r3
 8010512:	b29b      	uxth	r3, r3
 8010514:	3301      	adds	r3, #1
 8010516:	b29b      	uxth	r3, r3
 8010518:	b21b      	sxth	r3, r3
}
 801051a:	4618      	mov	r0, r3
 801051c:	370c      	adds	r7, #12
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr

08010526 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b082      	sub	sp, #8
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 801052e:	210c      	movs	r1, #12
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f00c fc86 	bl	801ce42 <_lv_memset_00>
    dsc->width = 1;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2201      	movs	r2, #1
 801053a:	809a      	strh	r2, [r3, #4]
    dsc->opa = LV_OPA_COVER;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	22ff      	movs	r2, #255	; 0xff
 8010540:	729a      	strb	r2, [r3, #10]
    dsc->color = LV_COLOR_BLACK;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2200      	movs	r2, #0
 8010546:	701a      	strb	r2, [r3, #0]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2200      	movs	r2, #0
 801054c:	705a      	strb	r2, [r3, #1]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2200      	movs	r2, #0
 8010552:	709a      	strb	r2, [r3, #2]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	22ff      	movs	r2, #255	; 0xff
 8010558:	70da      	strb	r2, [r3, #3]
}
 801055a:	bf00      	nop
 801055c:	3708      	adds	r7, #8
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}

08010562 <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 8010562:	b580      	push	{r7, lr}
 8010564:	b0a6      	sub	sp, #152	; 0x98
 8010566:	af00      	add	r7, sp, #0
 8010568:	60f8      	str	r0, [r7, #12]
 801056a:	60b9      	str	r1, [r7, #8]
 801056c:	607a      	str	r2, [r7, #4]
 801056e:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	f000 8179 	beq.w	801086e <lv_draw_line+0x30c>
    if(dsc->opa <= LV_OPA_MIN) return;
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	7a9b      	ldrb	r3, [r3, #10]
 8010580:	2b02      	cmp	r3, #2
 8010582:	f240 8176 	bls.w	8010872 <lv_draw_line+0x310>

    if(point1->x == point2->x && point1->y == point2->y) return;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f9b3 2000 	ldrsh.w	r2, [r3]
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010592:	429a      	cmp	r2, r3
 8010594:	d108      	bne.n	80105a8 <lv_draw_line+0x46>
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	f000 8167 	beq.w	8010876 <lv_draw_line+0x314>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105b4:	4293      	cmp	r3, r2
 80105b6:	bfa8      	it	ge
 80105b8:	4613      	movge	r3, r2
 80105ba:	b21b      	sxth	r3, r3
 80105bc:	b29a      	uxth	r2, r3
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	da00      	bge.n	80105ca <lv_draw_line+0x68>
 80105c8:	3301      	adds	r3, #1
 80105ca:	105b      	asrs	r3, r3, #1
 80105cc:	b21b      	sxth	r3, r3
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	1ad3      	subs	r3, r2, r3
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	b21b      	sxth	r3, r3
 80105d6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105e6:	4293      	cmp	r3, r2
 80105e8:	bfb8      	it	lt
 80105ea:	4613      	movlt	r3, r2
 80105ec:	b21b      	sxth	r3, r3
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	da00      	bge.n	80105fc <lv_draw_line+0x9a>
 80105fa:	3301      	adds	r3, #1
 80105fc:	105b      	asrs	r3, r3, #1
 80105fe:	b21b      	sxth	r3, r3
 8010600:	b29b      	uxth	r3, r3
 8010602:	4413      	add	r3, r2
 8010604:	b29b      	uxth	r3, r3
 8010606:	b21b      	sxth	r3, r3
 8010608:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010618:	4293      	cmp	r3, r2
 801061a:	bfa8      	it	ge
 801061c:	4613      	movge	r3, r2
 801061e:	b21b      	sxth	r3, r3
 8010620:	b29a      	uxth	r2, r3
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010628:	2b00      	cmp	r3, #0
 801062a:	da00      	bge.n	801062e <lv_draw_line+0xcc>
 801062c:	3301      	adds	r3, #1
 801062e:	105b      	asrs	r3, r3, #1
 8010630:	b21b      	sxth	r3, r3
 8010632:	b29b      	uxth	r3, r3
 8010634:	1ad3      	subs	r3, r2, r3
 8010636:	b29b      	uxth	r3, r3
 8010638:	b21b      	sxth	r3, r3
 801063a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801064a:	4293      	cmp	r3, r2
 801064c:	bfb8      	it	lt
 801064e:	4613      	movlt	r3, r2
 8010650:	b21b      	sxth	r3, r3
 8010652:	b29a      	uxth	r2, r3
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	da00      	bge.n	8010660 <lv_draw_line+0xfe>
 801065e:	3301      	adds	r3, #1
 8010660:	105b      	asrs	r3, r3, #1
 8010662:	b21b      	sxth	r3, r3
 8010664:	b29b      	uxth	r3, r3
 8010666:	4413      	add	r3, r2
 8010668:	b29b      	uxth	r3, r3
 801066a:	b21b      	sxth	r3, r3
 801066c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 8010670:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8010674:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	4618      	mov	r0, r3
 801067c:	f00a fa90 	bl	801aba0 <_lv_area_intersect>
 8010680:	4603      	mov	r3, r0
 8010682:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if(!is_common) return;
 8010686:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801068a:	f083 0301 	eor.w	r3, r3, #1
 801068e:	b2db      	uxtb	r3, r3
 8010690:	2b00      	cmp	r3, #0
 8010692:	f040 80f2 	bne.w	801087a <lv_draw_line+0x318>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d107      	bne.n	80106b6 <lv_draw_line+0x154>
 80106a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	68b9      	ldr	r1, [r7, #8]
 80106ae:	68f8      	ldr	r0, [r7, #12]
 80106b0:	f000 f8e7 	bl	8010882 <draw_line_hor>
 80106b4:	e016      	b.n	80106e4 <lv_draw_line+0x182>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d107      	bne.n	80106d6 <lv_draw_line+0x174>
 80106c6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	68b9      	ldr	r1, [r7, #8]
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	f000 faa6 	bl	8010c20 <draw_line_ver>
 80106d4:	e006      	b.n	80106e4 <lv_draw_line+0x182>
    else draw_line_skew(point1, point2, &clip_line, dsc);
 80106d6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	68b9      	ldr	r1, [r7, #8]
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f000 fc3a 	bl	8010f58 <draw_line_skew>

    if(dsc->round_end || dsc->round_start) {
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	7adb      	ldrb	r3, [r3, #11]
 80106e8:	f003 0308 	and.w	r3, r3, #8
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d107      	bne.n	8010702 <lv_draw_line+0x1a0>
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	7adb      	ldrb	r3, [r3, #11]
 80106f6:	f003 0304 	and.w	r3, r3, #4
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f000 80bd 	beq.w	801087c <lv_draw_line+0x31a>
        lv_draw_rect_dsc_t cir_dsc;
        lv_draw_rect_dsc_init(&cir_dsc);
 8010702:	f107 0314 	add.w	r3, r7, #20
 8010706:	4618      	mov	r0, r3
 8010708:	f002 fc9a 	bl	8013040 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	61bb      	str	r3, [r7, #24]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8010712:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010716:	82bb      	strh	r3, [r7, #20]
        cir_dsc.bg_opa = dsc->opa;
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	7a9b      	ldrb	r3, [r3, #10]
 801071c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        int32_t r = (dsc->width >> 1);
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010726:	105b      	asrs	r3, r3, #1
 8010728:	b21b      	sxth	r3, r3
 801072a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010734:	b29b      	uxth	r3, r3
 8010736:	f003 0301 	and.w	r3, r3, #1
 801073a:	2b00      	cmp	r3, #0
 801073c:	bf0c      	ite	eq
 801073e:	2301      	moveq	r3, #1
 8010740:	2300      	movne	r3, #0
 8010742:	b2db      	uxtb	r3, r3
 8010744:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        lv_area_t cir_area;

        if(dsc->round_start) {
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	7adb      	ldrb	r3, [r3, #11]
 801074c:	f003 0304 	and.w	r3, r3, #4
 8010750:	b2db      	uxtb	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d041      	beq.n	80107da <lv_draw_line+0x278>
            cir_area.x1 = point1->x - r;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f9b3 3000 	ldrsh.w	r3, [r3]
 801075c:	b29a      	uxth	r2, r3
 801075e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010762:	b29b      	uxth	r3, r3
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	b29b      	uxth	r3, r3
 8010768:	b21b      	sxth	r3, r3
 801076a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            cir_area.y1 = point1->y - r;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010774:	b29a      	uxth	r2, r3
 8010776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801077a:	b29b      	uxth	r3, r3
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	b29b      	uxth	r3, r3
 8010780:	b21b      	sxth	r3, r3
 8010782:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            cir_area.x2 = point1->x + r - r_corr;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f9b3 3000 	ldrsh.w	r3, [r3]
 801078c:	b29a      	uxth	r2, r3
 801078e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010792:	b29b      	uxth	r3, r3
 8010794:	4413      	add	r3, r2
 8010796:	b29a      	uxth	r2, r3
 8010798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801079c:	b29b      	uxth	r3, r3
 801079e:	1ad3      	subs	r3, r2, r3
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	b21b      	sxth	r3, r3
 80107a4:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
            cir_area.y2 = point1->y + r - r_corr ;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	4413      	add	r3, r2
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107be:	b29b      	uxth	r3, r3
 80107c0:	1ad3      	subs	r3, r2, r3
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	b21b      	sxth	r3, r3
 80107c6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 80107ca:	f107 0214 	add.w	r2, r7, #20
 80107ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80107d2:	6879      	ldr	r1, [r7, #4]
 80107d4:	4618      	mov	r0, r3
 80107d6:	f002 fcb7 	bl	8013148 <lv_draw_rect>
        }

        if(dsc->round_end) {
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	7adb      	ldrb	r3, [r3, #11]
 80107de:	f003 0308 	and.w	r3, r3, #8
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d049      	beq.n	801087c <lv_draw_line+0x31a>
            cir_area.x1 = point2->x - r;
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107ee:	b29a      	uxth	r2, r3
 80107f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	b21b      	sxth	r3, r3
 80107fc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            cir_area.y1 = point2->y - r;
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010806:	b29a      	uxth	r2, r3
 8010808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801080c:	b29b      	uxth	r3, r3
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	b29b      	uxth	r3, r3
 8010812:	b21b      	sxth	r3, r3
 8010814:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            cir_area.x2 = point2->x + r - r_corr;
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801081e:	b29a      	uxth	r2, r3
 8010820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010824:	b29b      	uxth	r3, r3
 8010826:	4413      	add	r3, r2
 8010828:	b29a      	uxth	r2, r3
 801082a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801082e:	b29b      	uxth	r3, r3
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	b29b      	uxth	r3, r3
 8010834:	b21b      	sxth	r3, r3
 8010836:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
            cir_area.y2 = point2->y + r - r_corr ;
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010840:	b29a      	uxth	r2, r3
 8010842:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010846:	b29b      	uxth	r3, r3
 8010848:	4413      	add	r3, r2
 801084a:	b29a      	uxth	r2, r3
 801084c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010850:	b29b      	uxth	r3, r3
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	b29b      	uxth	r3, r3
 8010856:	b21b      	sxth	r3, r3
 8010858:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 801085c:	f107 0214 	add.w	r2, r7, #20
 8010860:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010864:	6879      	ldr	r1, [r7, #4]
 8010866:	4618      	mov	r0, r3
 8010868:	f002 fc6e 	bl	8013148 <lv_draw_rect>
 801086c:	e006      	b.n	801087c <lv_draw_line+0x31a>
    if(dsc->width == 0) return;
 801086e:	bf00      	nop
 8010870:	e004      	b.n	801087c <lv_draw_line+0x31a>
    if(dsc->opa <= LV_OPA_MIN) return;
 8010872:	bf00      	nop
 8010874:	e002      	b.n	801087c <lv_draw_line+0x31a>
    if(point1->x == point2->x && point1->y == point2->y) return;
 8010876:	bf00      	nop
 8010878:	e000      	b.n	801087c <lv_draw_line+0x31a>
    if(!is_common) return;
 801087a:	bf00      	nop
        }
    }
}
 801087c:	3798      	adds	r7, #152	; 0x98
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}

08010882 <draw_line_hor>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
 8010882:	b580      	push	{r7, lr}
 8010884:	b09a      	sub	sp, #104	; 0x68
 8010886:	af04      	add	r7, sp, #16
 8010888:	60f8      	str	r0, [r7, #12]
 801088a:	60b9      	str	r1, [r7, #8]
 801088c:	607a      	str	r2, [r7, #4]
 801088e:	603b      	str	r3, [r7, #0]
    lv_opa_t opa = dsc->opa;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	7a9b      	ldrb	r3, [r3, #10]
 8010894:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8010898:	f7f9 fbba 	bl	800a010 <_lv_refr_get_disp_refreshing>
 801089c:	6478      	str	r0, [r7, #68]	; 0x44
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 801089e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80108a0:	f009 fca6 	bl	801a1f0 <lv_disp_get_buf>
 80108a4:	6438      	str	r0, [r7, #64]	; 0x40

    const lv_area_t * disp_area = &vdb->area;
 80108a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108a8:	3310      	adds	r3, #16
 80108aa:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t w = dsc->width - 1;
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80108b2:	3b01      	subs	r3, #1
 80108b4:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t w_half0 = w >> 1;
 80108b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b8:	105b      	asrs	r3, r3, #1
 80108ba:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80108bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108be:	f003 0301 	and.w	r3, r3, #1
 80108c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108c4:	4413      	add	r3, r2
 80108c6:	633b      	str	r3, [r7, #48]	; 0x30

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d006      	beq.n	80108e0 <draw_line_hor+0x5e>
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d001      	beq.n	80108e0 <draw_line_hor+0x5e>
 80108dc:	2301      	movs	r3, #1
 80108de:	e000      	b.n	80108e2 <draw_line_hor+0x60>
 80108e0:	2300      	movs	r3, #0
 80108e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80108e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108ea:	f003 0301 	and.w	r3, r3, #1
 80108ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    bool simple_mode = true;
 80108f2:	2301      	movs	r3, #1
 80108f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 80108f8:	f001 f832 	bl	8011960 <lv_draw_mask_get_cnt>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d003      	beq.n	801090a <draw_line_hor+0x88>
 8010902:	2300      	movs	r3, #0
 8010904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010908:	e006      	b.n	8010918 <draw_line_hor+0x96>
    else if(dashed) simple_mode = false;
 801090a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801090e:	2b00      	cmp	r3, #0
 8010910:	d002      	beq.n	8010918 <draw_line_hor+0x96>
 8010912:	2300      	movs	r3, #0
 8010914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010924:	4293      	cmp	r3, r2
 8010926:	bfa8      	it	ge
 8010928:	4613      	movge	r3, r2
 801092a:	b21b      	sxth	r3, r3
 801092c:	833b      	strh	r3, [r7, #24]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f9b3 3000 	ldrsh.w	r3, [r3]
 801093a:	4293      	cmp	r3, r2
 801093c:	bfb8      	it	lt
 801093e:	4613      	movlt	r3, r2
 8010940:	b21b      	sxth	r3, r3
 8010942:	b29b      	uxth	r3, r3
 8010944:	3b01      	subs	r3, #1
 8010946:	b29b      	uxth	r3, r3
 8010948:	b21b      	sxth	r3, r3
 801094a:	83bb      	strh	r3, [r7, #28]
    draw_area.y1 = point1->y - w_half1;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010952:	b29a      	uxth	r2, r3
 8010954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010956:	b29b      	uxth	r3, r3
 8010958:	1ad3      	subs	r3, r2, r3
 801095a:	b29b      	uxth	r3, r3
 801095c:	b21b      	sxth	r3, r3
 801095e:	837b      	strh	r3, [r7, #26]
    draw_area.y2 = point1->y + w_half0;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010966:	b29a      	uxth	r2, r3
 8010968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801096a:	b29b      	uxth	r3, r3
 801096c:	4413      	add	r3, r2
 801096e:	b29b      	uxth	r3, r3
 8010970:	b21b      	sxth	r3, r3
 8010972:	83fb      	strh	r3, [r7, #30]

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 8010974:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010978:	2b00      	cmp	r3, #0
 801097a:	d013      	beq.n	80109a4 <draw_line_hor+0x122>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	7adb      	ldrb	r3, [r3, #11]
 8010980:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010984:	b2db      	uxtb	r3, r3
        _lv_blend_fill(clip, &draw_area,
 8010986:	683a      	ldr	r2, [r7, #0]
 8010988:	f107 0118 	add.w	r1, r7, #24
 801098c:	9302      	str	r3, [sp, #8]
 801098e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8010992:	9301      	str	r3, [sp, #4]
 8010994:	2301      	movs	r3, #1
 8010996:	9300      	str	r3, [sp, #0]
 8010998:	2300      	movs	r3, #0
 801099a:	6812      	ldr	r2, [r2, #0]
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7fb fd15 	bl	800c3cc <_lv_blend_fill>
 80109a2:	e13a      	b.n	8010c1a <draw_line_hor+0x398>
    /*If there other mask apply it*/
    else {
        /* Get clipped fill area which is the real draw area.
         * It is always the same or inside `fill_area` */
        bool is_common;
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 80109a4:	f107 0218 	add.w	r2, r7, #24
 80109a8:	f107 0318 	add.w	r3, r7, #24
 80109ac:	6879      	ldr	r1, [r7, #4]
 80109ae:	4618      	mov	r0, r3
 80109b0:	f00a f8f6 	bl	801aba0 <_lv_area_intersect>
 80109b4:	4603      	mov	r3, r0
 80109b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if(!is_common) return;
 80109ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80109be:	f083 0301 	eor.w	r3, r3, #1
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f040 8128 	bne.w	8010c1a <draw_line_hor+0x398>

        /* Now `draw_area` has absolute coordinates.
         * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
        draw_area.x1 -= disp_area->x1;
 80109ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80109ce:	b29a      	uxth	r2, r3
 80109d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	1ad3      	subs	r3, r2, r3
 80109da:	b29b      	uxth	r3, r3
 80109dc:	b21b      	sxth	r3, r3
 80109de:	833b      	strh	r3, [r7, #24]
        draw_area.y1 -= disp_area->y1;
 80109e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	1ad3      	subs	r3, r2, r3
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	b21b      	sxth	r3, r3
 80109f4:	837b      	strh	r3, [r7, #26]
        draw_area.x2 -= disp_area->x1;
 80109f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80109fa:	b29a      	uxth	r2, r3
 80109fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	1ad3      	subs	r3, r2, r3
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	b21b      	sxth	r3, r3
 8010a0a:	83bb      	strh	r3, [r7, #28]
        draw_area.y2 -= disp_area->y1;
 8010a0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010a10:	b29a      	uxth	r2, r3
 8010a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	1ad3      	subs	r3, r2, r3
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	b21b      	sxth	r3, r3
 8010a20:	83fb      	strh	r3, [r7, #30]

        int32_t draw_area_w = lv_area_get_width(&draw_area);
 8010a22:	f107 0318 	add.w	r3, r7, #24
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7ff fd66 	bl	80104f8 <lv_area_get_width>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_area_t fill_area;
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 8010a30:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	4413      	add	r3, r2
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	b21b      	sxth	r3, r3
 8010a44:	823b      	strh	r3, [r7, #16]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 8010a46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010a4a:	b29a      	uxth	r2, r3
 8010a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	4413      	add	r3, r2
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	b21b      	sxth	r3, r3
 8010a5a:	82bb      	strh	r3, [r7, #20]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 8010a5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010a60:	b29a      	uxth	r2, r3
 8010a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	4413      	add	r3, r2
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	b21b      	sxth	r3, r3
 8010a70:	827b      	strh	r3, [r7, #18]
        fill_area.y2 = fill_area.y1;
 8010a72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a76:	82fb      	strh	r3, [r7, #22]

        lv_style_int_t dash_start = 0;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        if(dashed) {
 8010a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d015      	beq.n	8010ab2 <draw_line_hor+0x230>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 8010a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a88:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010a92:	4413      	add	r3, r2
 8010a94:	683a      	ldr	r2, [r7, #0]
 8010a96:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8010a9a:	4611      	mov	r1, r2
 8010a9c:	683a      	ldr	r2, [r7, #0]
 8010a9e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010aa2:	440a      	add	r2, r1
 8010aa4:	fb93 f1f2 	sdiv	r1, r3, r2
 8010aa8:	fb02 f201 	mul.w	r2, r2, r1
 8010aac:	1a9b      	subs	r3, r3, r2
 8010aae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }

        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8010ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f00b fdbb 	bl	801c630 <_lv_mem_buf_get>
 8010aba:	6278      	str	r0, [r7, #36]	; 0x24
        int32_t h;
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010abc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010ac0:	653b      	str	r3, [r7, #80]	; 0x50
 8010ac2:	e0a0      	b.n	8010c06 <draw_line_hor+0x384>
            _lv_memset_ff(mask_buf, draw_area_w);
 8010ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010aca:	f00c fa3a 	bl	801cf42 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8010ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ad0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	4413      	add	r3, r2
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	b219      	sxth	r1, r3
 8010ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ae4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	4413      	add	r3, r2
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	b21a      	sxth	r2, r3
 8010af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af6:	b21b      	sxth	r3, r3
 8010af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010afa:	f000 fe95 	bl	8011828 <lv_draw_mask_apply>
 8010afe:	4603      	mov	r3, r0
 8010b00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            if(dashed) {
 8010b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d056      	beq.n	8010bba <draw_line_hor+0x338>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8010b0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d052      	beq.n	8010bba <draw_line_hor+0x338>
                    lv_style_int_t dash_cnt = dash_start;
 8010b14:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010b18:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                    lv_coord_t i;
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010b22:	e042      	b.n	8010baa <draw_line_hor+0x328>
                        if(dash_cnt <= dsc->dash_width) {
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010b2a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	dc17      	bgt.n	8010b62 <draw_line_hor+0x2e0>
                            int16_t diff = dsc->dash_width - dash_cnt;
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010b38:	b29a      	uxth	r2, r3
 8010b3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010b3e:	1ad3      	subs	r3, r2, r3
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	847b      	strh	r3, [r7, #34]	; 0x22
                            i += diff;
 8010b44:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8010b48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b4a:	4413      	add	r3, r2
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                            dash_cnt += diff;
 8010b52:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8010b56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b58:	4413      	add	r3, r2
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010b60:	e015      	b.n	8010b8e <draw_line_hor+0x30c>
                        }
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8010b62:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010b74:	440b      	add	r3, r1
 8010b76:	429a      	cmp	r2, r3
 8010b78:	db03      	blt.n	8010b82 <draw_line_hor+0x300>
                            dash_cnt = 0;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010b80:	e005      	b.n	8010b8e <draw_line_hor+0x30c>
                        }
                        else {
                            mask_buf[i] = 0x00;
 8010b82:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8010b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b88:	4413      	add	r3, r2
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 8010b8e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	3301      	adds	r3, #1
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010b9c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010baa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8010bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	dcb7      	bgt.n	8010b24 <draw_line_hor+0x2a2>
                        }
                    }

                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010bb4:	2302      	movs	r3, #2
 8010bb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                }
            }

            _lv_blend_fill(clip, &fill_area,
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	7a9b      	ldrb	r3, [r3, #10]
                           dsc->color, mask_buf, mask_res, dsc->opa,
                           dsc->blend_mode);
 8010bbe:	683a      	ldr	r2, [r7, #0]
 8010bc0:	7ad2      	ldrb	r2, [r2, #11]
 8010bc2:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8010bc6:	b2d2      	uxtb	r2, r2
            _lv_blend_fill(clip, &fill_area,
 8010bc8:	4610      	mov	r0, r2
 8010bca:	683a      	ldr	r2, [r7, #0]
 8010bcc:	f107 0110 	add.w	r1, r7, #16
 8010bd0:	9002      	str	r0, [sp, #8]
 8010bd2:	9301      	str	r3, [sp, #4]
 8010bd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010bd8:	9300      	str	r3, [sp, #0]
 8010bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bdc:	6812      	ldr	r2, [r2, #0]
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f7fb fbf4 	bl	800c3cc <_lv_blend_fill>

            fill_area.y1++;
 8010be4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	3301      	adds	r3, #1
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	b21b      	sxth	r3, r3
 8010bf0:	827b      	strh	r3, [r7, #18]
            fill_area.y2++;
 8010bf2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	b21b      	sxth	r3, r3
 8010bfe:	82fb      	strh	r3, [r7, #22]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c02:	3301      	adds	r3, #1
 8010c04:	653b      	str	r3, [r7, #80]	; 0x50
 8010c06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	f77f af58 	ble.w	8010ac4 <draw_line_hor+0x242>
        }
        _lv_mem_buf_release(mask_buf);
 8010c14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c16:	f00b fde9 	bl	801c7ec <_lv_mem_buf_release>
    }
}
 8010c1a:	3758      	adds	r7, #88	; 0x58
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b09a      	sub	sp, #104	; 0x68
 8010c24:	af04      	add	r7, sp, #16
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	60b9      	str	r1, [r7, #8]
 8010c2a:	607a      	str	r2, [r7, #4]
 8010c2c:	603b      	str	r3, [r7, #0]
    lv_opa_t opa = dsc->opa;
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	7a9b      	ldrb	r3, [r3, #10]
 8010c32:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8010c36:	f7f9 f9eb 	bl	800a010 <_lv_refr_get_disp_refreshing>
 8010c3a:	6478      	str	r0, [r7, #68]	; 0x44
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010c3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010c3e:	f009 fad7 	bl	801a1f0 <lv_disp_get_buf>
 8010c42:	6438      	str	r0, [r7, #64]	; 0x40

    const lv_area_t * disp_area = &vdb->area;
 8010c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c46:	3310      	adds	r3, #16
 8010c48:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t w = dsc->width - 1;
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010c50:	3b01      	subs	r3, #1
 8010c52:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t w_half0 = w >> 1;
 8010c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c56:	105b      	asrs	r3, r3, #1
 8010c58:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8010c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5c:	f003 0301 	and.w	r3, r3, #1
 8010c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c62:	4413      	add	r3, r2
 8010c64:	633b      	str	r3, [r7, #48]	; 0x30

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d006      	beq.n	8010c7e <draw_line_ver+0x5e>
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d001      	beq.n	8010c7e <draw_line_ver+0x5e>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	e000      	b.n	8010c80 <draw_line_ver+0x60>
 8010c7e:	2300      	movs	r3, #0
 8010c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c88:	f003 0301 	and.w	r3, r3, #1
 8010c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    bool simple_mode = true;
 8010c90:	2301      	movs	r3, #1
 8010c92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 8010c96:	f000 fe63 	bl	8011960 <lv_draw_mask_get_cnt>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d003      	beq.n	8010ca8 <draw_line_ver+0x88>
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010ca6:	e006      	b.n	8010cb6 <draw_line_ver+0x96>
    else if(dashed) simple_mode = false;
 8010ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d002      	beq.n	8010cb6 <draw_line_ver+0x96>
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    lv_area_t draw_area;
    draw_area.x1 = point1->x - w_half1;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010cbc:	b29a      	uxth	r2, r3
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	b21b      	sxth	r3, r3
 8010cc8:	83bb      	strh	r3, [r7, #28]
    draw_area.x2 = point1->x + w_half0;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010cd0:	b29a      	uxth	r2, r3
 8010cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	4413      	add	r3, r2
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	b21b      	sxth	r3, r3
 8010cdc:	843b      	strh	r3, [r7, #32]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010cea:	4293      	cmp	r3, r2
 8010cec:	bfa8      	it	ge
 8010cee:	4613      	movge	r3, r2
 8010cf0:	b21b      	sxth	r3, r3
 8010cf2:	83fb      	strh	r3, [r7, #30]
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d00:	4293      	cmp	r3, r2
 8010d02:	bfb8      	it	lt
 8010d04:	4613      	movlt	r3, r2
 8010d06:	b21b      	sxth	r3, r3
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	b21b      	sxth	r3, r3
 8010d10:	847b      	strh	r3, [r7, #34]	; 0x22

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 8010d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d013      	beq.n	8010d42 <draw_line_ver+0x122>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	7adb      	ldrb	r3, [r3, #11]
 8010d1e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010d22:	b2db      	uxtb	r3, r3
        _lv_blend_fill(clip, &draw_area,
 8010d24:	683a      	ldr	r2, [r7, #0]
 8010d26:	f107 011c 	add.w	r1, r7, #28
 8010d2a:	9302      	str	r3, [sp, #8]
 8010d2c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8010d30:	9301      	str	r3, [sp, #4]
 8010d32:	2301      	movs	r3, #1
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	2300      	movs	r3, #0
 8010d38:	6812      	ldr	r2, [r2, #0]
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f7fb fb46 	bl	800c3cc <_lv_blend_fill>
 8010d40:	e106      	b.n	8010f50 <draw_line_ver+0x330>
    /*If there other mask apply it*/
    else {
        /* Get clipped fill area which is the real draw area.
         * It is always the same or inside `fill_area` */
        bool is_common;
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 8010d42:	f107 021c 	add.w	r2, r7, #28
 8010d46:	f107 031c 	add.w	r3, r7, #28
 8010d4a:	6879      	ldr	r1, [r7, #4]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f009 ff27 	bl	801aba0 <_lv_area_intersect>
 8010d52:	4603      	mov	r3, r0
 8010d54:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if(!is_common) return;
 8010d58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010d5c:	f083 0301 	eor.w	r3, r3, #1
 8010d60:	b2db      	uxtb	r3, r3
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f040 80f4 	bne.w	8010f50 <draw_line_ver+0x330>

        /* Now `draw_area` has absolute coordinates.
         * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
        draw_area.x1 -= vdb->area.x1;
 8010d68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d70:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	1ad3      	subs	r3, r2, r3
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	b21b      	sxth	r3, r3
 8010d7c:	83bb      	strh	r3, [r7, #28]
        draw_area.y1 -= vdb->area.y1;
 8010d7e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d86:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	1ad3      	subs	r3, r2, r3
 8010d8e:	b29b      	uxth	r3, r3
 8010d90:	b21b      	sxth	r3, r3
 8010d92:	83fb      	strh	r3, [r7, #30]
        draw_area.x2 -= vdb->area.x1;
 8010d94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d98:	b29a      	uxth	r2, r3
 8010d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d9c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	1ad3      	subs	r3, r2, r3
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	b21b      	sxth	r3, r3
 8010da8:	843b      	strh	r3, [r7, #32]
        draw_area.y2 -= vdb->area.y1;
 8010daa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010dae:	b29a      	uxth	r2, r3
 8010db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010db2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	b21b      	sxth	r3, r3
 8010dbe:	847b      	strh	r3, [r7, #34]	; 0x22

        int32_t draw_area_w = lv_area_get_width(&draw_area);
 8010dc0:	f107 031c 	add.w	r3, r7, #28
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7ff fb97 	bl	80104f8 <lv_area_get_width>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_area_t fill_area;
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 8010dce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010dd2:	b29a      	uxth	r2, r3
 8010dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010dda:	b29b      	uxth	r3, r3
 8010ddc:	4413      	add	r3, r2
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	b21b      	sxth	r3, r3
 8010de2:	82bb      	strh	r3, [r7, #20]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 8010de4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	4413      	add	r3, r2
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	b21b      	sxth	r3, r3
 8010df8:	833b      	strh	r3, [r7, #24]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 8010dfa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	4413      	add	r3, r2
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	b21b      	sxth	r3, r3
 8010e0e:	82fb      	strh	r3, [r7, #22]
        fill_area.y2 = fill_area.y1;
 8010e10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010e14:	837b      	strh	r3, [r7, #26]

        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8010e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f00b fc09 	bl	801c630 <_lv_mem_buf_get>
 8010e1e:	6278      	str	r0, [r7, #36]	; 0x24

        lv_style_int_t dash_start = 0;
 8010e20:	2300      	movs	r3, #0
 8010e22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        if(dashed) {
 8010e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d015      	beq.n	8010e5a <draw_line_ver+0x23a>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 8010e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e30:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010e34:	461a      	mov	r2, r3
 8010e36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010e3a:	4413      	add	r3, r2
 8010e3c:	683a      	ldr	r2, [r7, #0]
 8010e3e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8010e42:	4611      	mov	r1, r2
 8010e44:	683a      	ldr	r2, [r7, #0]
 8010e46:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010e4a:	440a      	add	r2, r1
 8010e4c:	fb93 f1f2 	sdiv	r1, r3, r2
 8010e50:	fb02 f201 	mul.w	r2, r2, r1
 8010e54:	1a9b      	subs	r3, r3, r2
 8010e56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }

        lv_style_int_t dash_cnt = dash_start;
 8010e5a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010e5e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        int32_t h;
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010e62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e68:	e069      	b.n	8010f3e <draw_line_ver+0x31e>
            _lv_memset_ff(mask_buf, draw_area_w);
 8010e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e70:	f00c f867 	bl	801cf42 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8010e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e76:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	4413      	add	r3, r2
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	b219      	sxth	r1, r3
 8010e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e8a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	4413      	add	r3, r2
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	b21a      	sxth	r2, r3
 8010e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9c:	b21b      	sxth	r3, r3
 8010e9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ea0:	f000 fcc2 	bl	8011828 <lv_draw_mask_apply>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            if(dashed) {
 8010eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d023      	beq.n	8010efa <draw_line_ver+0x2da>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8010eb2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d018      	beq.n	8010eec <draw_line_ver+0x2cc>
                    if(dash_cnt > dsc->dash_width) {
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010ec0:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	dd02      	ble.n	8010ece <draw_line_ver+0x2ae>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    }

                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8010ece:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010ed8:	4619      	mov	r1, r3
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010ee0:	440b      	add	r3, r1
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	db02      	blt.n	8010eec <draw_line_ver+0x2cc>
                        dash_cnt = 0;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                    }
                }
                dash_cnt ++;
 8010eec:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            _lv_blend_fill(clip, &fill_area,
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	7a9b      	ldrb	r3, [r3, #10]
 8010efe:	683a      	ldr	r2, [r7, #0]
 8010f00:	f107 0014 	add.w	r0, r7, #20
 8010f04:	2100      	movs	r1, #0
 8010f06:	9102      	str	r1, [sp, #8]
 8010f08:	9301      	str	r3, [sp, #4]
 8010f0a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010f0e:	9300      	str	r3, [sp, #0]
 8010f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f12:	6812      	ldr	r2, [r2, #0]
 8010f14:	4601      	mov	r1, r0
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f7fb fa58 	bl	800c3cc <_lv_blend_fill>
                           dsc->color, mask_buf, mask_res, dsc->opa,
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
 8010f1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	3301      	adds	r3, #1
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	b21b      	sxth	r3, r3
 8010f28:	82fb      	strh	r3, [r7, #22]
            fill_area.y2++;
 8010f2a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	3301      	adds	r3, #1
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	b21b      	sxth	r3, r3
 8010f36:	837b      	strh	r3, [r7, #26]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010f42:	461a      	mov	r2, r3
 8010f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f46:	4293      	cmp	r3, r2
 8010f48:	dd8f      	ble.n	8010e6a <draw_line_ver+0x24a>
        }
        _lv_mem_buf_release(mask_buf);
 8010f4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f4c:	f00b fc4e 	bl	801c7ec <_lv_mem_buf_release>
    }
}
 8010f50:	3758      	adds	r7, #88	; 0x58
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
	...

08010f58 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,
                                                 const lv_area_t * clip,
                                                 const lv_draw_line_dsc_t * dsc)
{
 8010f58:	b5b0      	push	{r4, r5, r7, lr}
 8010f5a:	b0d0      	sub	sp, #320	; 0x140
 8010f5c:	af04      	add	r7, sp, #16
 8010f5e:	f107 040c 	add.w	r4, r7, #12
 8010f62:	6020      	str	r0, [r4, #0]
 8010f64:	f107 0008 	add.w	r0, r7, #8
 8010f68:	6001      	str	r1, [r0, #0]
 8010f6a:	1d39      	adds	r1, r7, #4
 8010f6c:	600a      	str	r2, [r1, #0]
 8010f6e:	463a      	mov	r2, r7
 8010f70:	6013      	str	r3, [r2, #0]
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 8010f72:	f107 030c 	add.w	r3, r7, #12
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010f7c:	f107 0308 	add.w	r3, r7, #8
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	da1c      	bge.n	8010fc4 <draw_line_skew+0x6c>
        p1.y = point1->y;
 8010f8a:	f107 030c 	add.w	r3, r7, #12
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010f94:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
        p2.y = point2->y;
 8010f98:	f107 0308 	add.w	r3, r7, #8
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010fa2:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        p1.x = point1->x;
 8010fa6:	f107 030c 	add.w	r3, r7, #12
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fb0:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
        p2.x = point2->x;
 8010fb4:	f107 0308 	add.w	r3, r7, #8
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fbe:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 8010fc2:	e01b      	b.n	8010ffc <draw_line_skew+0xa4>
    }
    else {
        p1.y = point2->y;
 8010fc4:	f107 0308 	add.w	r3, r7, #8
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010fce:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
        p2.y = point1->y;
 8010fd2:	f107 030c 	add.w	r3, r7, #12
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010fdc:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        p1.x = point2->x;
 8010fe0:	f107 0308 	add.w	r3, r7, #8
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fea:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
        p2.x = point1->x;
 8010fee:	f107 030c 	add.w	r3, r7, #12
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ff8:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    }

    int32_t xdiff = p2.x - p1.x;
 8010ffc:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8011000:	461a      	mov	r2, r3
 8011002:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8011006:	1ad3      	subs	r3, r2, r3
 8011008:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    int32_t ydiff = p2.y - p1.y;
 801100c:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011010:	461a      	mov	r2, r3
 8011012:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 801101c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011020:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011024:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011028:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801102c:	2b00      	cmp	r3, #0
 801102e:	bfb8      	it	lt
 8011030:	425b      	neglt	r3, r3
 8011032:	429a      	cmp	r2, r3
 8011034:	bfcc      	ite	gt
 8011036:	2301      	movgt	r3, #1
 8011038:	2300      	movle	r3, #0
 801103a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 801103e:	463b      	mov	r3, r7
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011046:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t wcorr_i = 0;
 801104a:	2300      	movs	r3, #0
 801104c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 8011050:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011054:	2b00      	cmp	r3, #0
 8011056:	d00f      	beq.n	8011078 <draw_line_skew+0x120>
 8011058:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801105c:	2b00      	cmp	r3, #0
 801105e:	bfb8      	it	lt
 8011060:	425b      	neglt	r3, r3
 8011062:	015a      	lsls	r2, r3, #5
 8011064:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011068:	2b00      	cmp	r3, #0
 801106a:	bfb8      	it	lt
 801106c:	425b      	neglt	r3, r3
 801106e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011072:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011076:	e00e      	b.n	8011096 <draw_line_skew+0x13e>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 8011078:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801107c:	2b00      	cmp	r3, #0
 801107e:	bfb8      	it	lt
 8011080:	425b      	neglt	r3, r3
 8011082:	015a      	lsls	r2, r3, #5
 8011084:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011088:	2b00      	cmp	r3, #0
 801108a:	bfb8      	it	lt
 801108c:	425b      	neglt	r3, r3
 801108e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011092:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8011096:	4a7d      	ldr	r2, [pc, #500]	; (801128c <draw_line_skew+0x334>)
 8011098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801109c:	4413      	add	r3, r2
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	461a      	mov	r2, r3
 80110a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80110a6:	fb03 f302 	mul.w	r3, r3, r2
 80110aa:	333f      	adds	r3, #63	; 0x3f
 80110ac:	11db      	asrs	r3, r3, #7
 80110ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t w_half0 = w >> 1;
 80110b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80110b6:	105b      	asrs	r3, r3, #1
 80110b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80110bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80110c0:	f003 0301 	and.w	r3, r3, #1
 80110c4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80110c8:	4413      	add	r3, r2
 80110ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 80110ce:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80110d2:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80110d6:	4293      	cmp	r3, r2
 80110d8:	bfa8      	it	ge
 80110da:	4613      	movge	r3, r2
 80110dc:	b21b      	sxth	r3, r3
 80110de:	b29a      	uxth	r2, r3
 80110e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	1ad3      	subs	r3, r2, r3
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	b21b      	sxth	r3, r3
 80110ec:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 80110f0:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80110f4:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80110f8:	4293      	cmp	r3, r2
 80110fa:	bfb8      	it	lt
 80110fc:	4613      	movlt	r3, r2
 80110fe:	b21b      	sxth	r3, r3
 8011100:	b29a      	uxth	r2, r3
 8011102:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011106:	b29b      	uxth	r3, r3
 8011108:	4413      	add	r3, r2
 801110a:	b29b      	uxth	r3, r3
 801110c:	b21b      	sxth	r3, r3
 801110e:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 8011112:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8011116:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 801111a:	4293      	cmp	r3, r2
 801111c:	bfa8      	it	ge
 801111e:	4613      	movge	r3, r2
 8011120:	b21b      	sxth	r3, r3
 8011122:	b29a      	uxth	r2, r3
 8011124:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011128:	b29b      	uxth	r3, r3
 801112a:	1ad3      	subs	r3, r2, r3
 801112c:	b29b      	uxth	r3, r3
 801112e:	b21b      	sxth	r3, r3
 8011130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 8011134:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8011138:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 801113c:	4293      	cmp	r3, r2
 801113e:	bfb8      	it	lt
 8011140:	4613      	movlt	r3, r2
 8011142:	b21b      	sxth	r3, r3
 8011144:	b29a      	uxth	r2, r3
 8011146:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801114a:	b29b      	uxth	r3, r3
 801114c:	4413      	add	r3, r2
 801114e:	b29b      	uxth	r3, r3
 8011150:	b21b      	sxth	r3, r3
 8011152:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 8011156:	1d3b      	adds	r3, r7, #4
 8011158:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 801115c:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	f009 fd1d 	bl	801aba0 <_lv_area_intersect>
 8011166:	4603      	mov	r3, r0
 8011168:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    if(is_common == false) return;
 801116c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8011170:	f083 0301 	eor.w	r3, r3, #1
 8011174:	b2db      	uxtb	r3, r3
 8011176:	2b00      	cmp	r3, #0
 8011178:	f040 82c1 	bne.w	80116fe <draw_line_skew+0x7a6>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 801117c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011180:	2b00      	cmp	r3, #0
 8011182:	f000 8085 	beq.w	8011290 <draw_line_skew+0x338>
        if(xdiff > 0) {
 8011186:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801118a:	2b00      	cmp	r3, #0
 801118c:	dd3e      	ble.n	801120c <draw_line_skew+0x2b4>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801118e:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 8011192:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8011196:	b29a      	uxth	r2, r3
 8011198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801119c:	b29b      	uxth	r3, r3
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	b21c      	sxth	r4, r3
 80111a4:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 80111a8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80111ac:	b29a      	uxth	r2, r3
 80111ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	1ad3      	subs	r3, r2, r3
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	b21b      	sxth	r3, r3
 80111ba:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80111be:	2200      	movs	r2, #0
 80111c0:	9201      	str	r2, [sp, #4]
 80111c2:	9300      	str	r3, [sp, #0]
 80111c4:	462b      	mov	r3, r5
 80111c6:	4622      	mov	r2, r4
 80111c8:	f000 fbea 	bl	80119a0 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 80111cc:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 80111d0:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80111da:	b29b      	uxth	r3, r3
 80111dc:	4413      	add	r3, r2
 80111de:	b29b      	uxth	r3, r3
 80111e0:	b21c      	sxth	r4, r3
 80111e2:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 80111e6:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	4413      	add	r3, r2
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	b21b      	sxth	r3, r3
 80111f8:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80111fc:	2201      	movs	r2, #1
 80111fe:	9201      	str	r2, [sp, #4]
 8011200:	9300      	str	r3, [sp, #0]
 8011202:	462b      	mov	r3, r5
 8011204:	4622      	mov	r2, r4
 8011206:	f000 fbcb 	bl	80119a0 <lv_draw_mask_line_points_init>
 801120a:	e07f      	b.n	801130c <draw_line_skew+0x3b4>
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801120c:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 8011210:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8011214:	b29a      	uxth	r2, r3
 8011216:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801121a:	b29b      	uxth	r3, r3
 801121c:	4413      	add	r3, r2
 801121e:	b29b      	uxth	r3, r3
 8011220:	b21c      	sxth	r4, r3
 8011222:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 8011226:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 801122a:	b29a      	uxth	r2, r3
 801122c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011230:	b29b      	uxth	r3, r3
 8011232:	4413      	add	r3, r2
 8011234:	b29b      	uxth	r3, r3
 8011236:	b21b      	sxth	r3, r3
 8011238:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 801123c:	2200      	movs	r2, #0
 801123e:	9201      	str	r2, [sp, #4]
 8011240:	9300      	str	r3, [sp, #0]
 8011242:	462b      	mov	r3, r5
 8011244:	4622      	mov	r2, r4
 8011246:	f000 fbab 	bl	80119a0 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801124a:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 801124e:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8011252:	b29a      	uxth	r2, r3
 8011254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011258:	b29b      	uxth	r3, r3
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	b29b      	uxth	r3, r3
 801125e:	b21c      	sxth	r4, r3
 8011260:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 8011264:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011268:	b29a      	uxth	r2, r3
 801126a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801126e:	b29b      	uxth	r3, r3
 8011270:	1ad3      	subs	r3, r2, r3
 8011272:	b29b      	uxth	r3, r3
 8011274:	b21b      	sxth	r3, r3
 8011276:	f107 0074 	add.w	r0, r7, #116	; 0x74
 801127a:	2201      	movs	r2, #1
 801127c:	9201      	str	r2, [sp, #4]
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	462b      	mov	r3, r5
 8011282:	4622      	mov	r2, r4
 8011284:	f000 fb8c 	bl	80119a0 <lv_draw_mask_line_points_init>
 8011288:	e040      	b.n	801130c <draw_line_skew+0x3b4>
 801128a:	bf00      	nop
 801128c:	080285e4 	.word	0x080285e4
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 8011290:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8011294:	b29a      	uxth	r2, r3
 8011296:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801129a:	b29b      	uxth	r3, r3
 801129c:	4413      	add	r3, r2
 801129e:	b29b      	uxth	r3, r3
 80112a0:	b219      	sxth	r1, r3
 80112a2:	f9b7 40da 	ldrsh.w	r4, [r7, #218]	; 0xda
 80112a6:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80112aa:	b29a      	uxth	r2, r3
 80112ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	4413      	add	r3, r2
 80112b4:	b29b      	uxth	r3, r3
 80112b6:	b21d      	sxth	r5, r3
 80112b8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80112bc:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80112c0:	2200      	movs	r2, #0
 80112c2:	9201      	str	r2, [sp, #4]
 80112c4:	9300      	str	r3, [sp, #0]
 80112c6:	462b      	mov	r3, r5
 80112c8:	4622      	mov	r2, r4
 80112ca:	f000 fb69 	bl	80119a0 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 80112ce:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80112d8:	b29b      	uxth	r3, r3
 80112da:	1ad3      	subs	r3, r2, r3
 80112dc:	b29b      	uxth	r3, r3
 80112de:	b219      	sxth	r1, r3
 80112e0:	f9b7 40da 	ldrsh.w	r4, [r7, #218]	; 0xda
 80112e4:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80112e8:	b29a      	uxth	r2, r3
 80112ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80112ee:	b29b      	uxth	r3, r3
 80112f0:	1ad3      	subs	r3, r2, r3
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	b21d      	sxth	r5, r3
 80112f6:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80112fa:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80112fe:	2201      	movs	r2, #1
 8011300:	9201      	str	r2, [sp, #4]
 8011302:	9300      	str	r3, [sp, #0]
 8011304:	462b      	mov	r3, r5
 8011306:	4622      	mov	r2, r4
 8011308:	f000 fb4a 	bl	80119a0 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 801130c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011310:	2100      	movs	r1, #0
 8011312:	4618      	mov	r0, r3
 8011314:	f000 fa56 	bl	80117c4 <lv_draw_mask_add>
 8011318:	4603      	mov	r3, r0
 801131a:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 801131e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011322:	2100      	movs	r1, #0
 8011324:	4618      	mov	r0, r3
 8011326:	f000 fa4d 	bl	80117c4 <lv_draw_mask_add>
 801132a:	4603      	mov	r3, r0
 801132c:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    int16_t mask_top_id = LV_MASK_ID_INV;
 8011330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011334:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 8011338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801133c:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

    if(!dsc->raw_end) {
 8011340:	463b      	mov	r3, r7
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	7adb      	ldrb	r3, [r3, #11]
 8011346:	f003 0310 	and.w	r3, r3, #16
 801134a:	b2db      	uxtb	r3, r3
 801134c:	2b00      	cmp	r3, #0
 801134e:	d14f      	bne.n	80113f0 <draw_line_skew+0x498>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 8011350:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 8011354:	f9b7 40da 	ldrsh.w	r4, [r7, #218]	; 0xda
 8011358:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 801135c:	b29a      	uxth	r2, r3
 801135e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011362:	b29b      	uxth	r3, r3
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	b29b      	uxth	r3, r3
 8011368:	b21d      	sxth	r5, r3
 801136a:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 801136e:	b29a      	uxth	r2, r3
 8011370:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011374:	b29b      	uxth	r3, r3
 8011376:	4413      	add	r3, r2
 8011378:	b29b      	uxth	r3, r3
 801137a:	b21b      	sxth	r3, r3
 801137c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8011380:	2203      	movs	r2, #3
 8011382:	9201      	str	r2, [sp, #4]
 8011384:	9300      	str	r3, [sp, #0]
 8011386:	462b      	mov	r3, r5
 8011388:	4622      	mov	r2, r4
 801138a:	f000 fb09 	bl	80119a0 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 801138e:	f9b7 10d4 	ldrsh.w	r1, [r7, #212]	; 0xd4
 8011392:	f9b7 40d6 	ldrsh.w	r4, [r7, #214]	; 0xd6
 8011396:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 801139a:	b29a      	uxth	r2, r3
 801139c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	1ad3      	subs	r3, r2, r3
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	b21d      	sxth	r5, r3
 80113a8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80113ac:	b29a      	uxth	r2, r3
 80113ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	4413      	add	r3, r2
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	b21b      	sxth	r3, r3
 80113ba:	f107 001c 	add.w	r0, r7, #28
 80113be:	2202      	movs	r2, #2
 80113c0:	9201      	str	r2, [sp, #4]
 80113c2:	9300      	str	r3, [sp, #0]
 80113c4:	462b      	mov	r3, r5
 80113c6:	4622      	mov	r2, r4
 80113c8:	f000 faea 	bl	80119a0 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 80113cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80113d0:	2100      	movs	r1, #0
 80113d2:	4618      	mov	r0, r3
 80113d4:	f000 f9f6 	bl	80117c4 <lv_draw_mask_add>
 80113d8:	4603      	mov	r3, r0
 80113da:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 80113de:	f107 031c 	add.w	r3, r7, #28
 80113e2:	2100      	movs	r1, #0
 80113e4:	4618      	mov	r0, r3
 80113e6:	f000 f9ed 	bl	80117c4 <lv_draw_mask_add>
 80113ea:	4603      	mov	r3, r0
 80113ec:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 80113f0:	f7f8 fe0e 	bl	800a010 <_lv_refr_get_disp_refreshing>
 80113f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80113f8:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80113fc:	f008 fef8 	bl	801a1f0 <lv_disp_get_buf>
 8011400:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8

    const lv_area_t * disp_area = &vdb->area;
 8011404:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011408:	3310      	adds	r3, #16
 801140a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
 801140e:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 8011412:	b29a      	uxth	r2, r3
 8011414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011418:	f9b3 3000 	ldrsh.w	r3, [r3]
 801141c:	b29b      	uxth	r3, r3
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	b29b      	uxth	r3, r3
 8011422:	b21b      	sxth	r3, r3
 8011424:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    draw_area.y1 -= disp_area->y1;
 8011428:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 801142c:	b29a      	uxth	r2, r3
 801142e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011432:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011436:	b29b      	uxth	r3, r3
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	b29b      	uxth	r3, r3
 801143c:	b21b      	sxth	r3, r3
 801143e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    draw_area.x2 -= disp_area->x1;
 8011442:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8011446:	b29a      	uxth	r2, r3
 8011448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011450:	b29b      	uxth	r3, r3
 8011452:	1ad3      	subs	r3, r2, r3
 8011454:	b29b      	uxth	r3, r3
 8011456:	b21b      	sxth	r3, r3
 8011458:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    draw_area.y2 -= disp_area->y1;
 801145c:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8011460:	b29a      	uxth	r2, r3
 8011462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011466:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801146a:	b29b      	uxth	r3, r3
 801146c:	1ad3      	subs	r3, r2, r3
 801146e:	b29b      	uxth	r3, r3
 8011470:	b21b      	sxth	r3, r3
 8011472:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

    /* The real draw area is around the line.
     * It's easy to calculate with steep lines, but the area can be very wide with very flat lines.
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);
 8011476:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801147a:	4618      	mov	r0, r3
 801147c:	f7ff f83c 	bl	80104f8 <lv_area_get_width>
 8011480:	4603      	mov	r3, r0
 8011482:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 8011486:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 801148a:	f008 fdf1 	bl	801a070 <lv_disp_get_hor_res>
 801148e:	4603      	mov	r3, r0
 8011490:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
 8011494:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011498:	4618      	mov	r0, r3
 801149a:	f009 fb60 	bl	801ab5e <lv_area_get_size>
 801149e:	4602      	mov	r2, r0
 80114a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80114a4:	4293      	cmp	r3, r2
 80114a6:	d906      	bls.n	80114b6 <draw_line_skew+0x55e>
 80114a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80114ac:	4618      	mov	r0, r3
 80114ae:	f009 fb56 	bl	801ab5e <lv_area_get_size>
 80114b2:	4603      	mov	r3, r0
 80114b4:	e001      	b.n	80114ba <draw_line_skew+0x562>
 80114b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80114ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 80114be:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80114c2:	f00b f8b5 	bl	801c630 <_lv_mem_buf_get>
 80114c6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 80114ca:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 80114ce:	b29a      	uxth	r2, r3
 80114d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80114d8:	b29b      	uxth	r3, r3
 80114da:	4413      	add	r3, r2
 80114dc:	b29b      	uxth	r3, r3
 80114de:	b21a      	sxth	r2, r3
 80114e0:	f107 0314 	add.w	r3, r7, #20
 80114e4:	801a      	strh	r2, [r3, #0]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 80114e6:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80114ea:	b29a      	uxth	r2, r3
 80114ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	4413      	add	r3, r2
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	b21a      	sxth	r2, r3
 80114fc:	f107 0314 	add.w	r3, r7, #20
 8011500:	809a      	strh	r2, [r3, #4]
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 8011502:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8011506:	b29a      	uxth	r2, r3
 8011508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801150c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011510:	b29b      	uxth	r3, r3
 8011512:	4413      	add	r3, r2
 8011514:	b29b      	uxth	r3, r3
 8011516:	b21a      	sxth	r2, r3
 8011518:	f107 0314 	add.w	r3, r7, #20
 801151c:	805a      	strh	r2, [r3, #2]
    fill_area.y2 = fill_area.y1;
 801151e:	f107 0314 	add.w	r3, r7, #20
 8011522:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011526:	f107 0314 	add.w	r3, r7, #20
 801152a:	80da      	strh	r2, [r3, #6]

    int32_t x = vdb->area.x1 + draw_area.x1;
 801152c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011530:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011534:	461a      	mov	r2, r3
 8011536:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 801153a:	4413      	add	r3, r2
 801153c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    uint32_t mask_p = 0;
 8011540:	2300      	movs	r3, #0
 8011542:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    _lv_memset_ff(mask_buf, mask_buf_size);
 8011546:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801154a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 801154e:	f00b fcf8 	bl	801cf42 <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 8011552:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8011556:	461a      	mov	r2, r3
 8011558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801155c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011560:	4413      	add	r3, r2
 8011562:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8011566:	e076      	b.n	8011656 <draw_line_skew+0x6fe>

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 8011568:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801156c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011570:	18d0      	adds	r0, r2, r3
 8011572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011576:	b219      	sxth	r1, r3
 8011578:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801157c:	b21a      	sxth	r2, r3
 801157e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011582:	b21b      	sxth	r3, r3
 8011584:	f000 f950 	bl	8011828 <lv_draw_mask_apply>
 8011588:	4603      	mov	r3, r0
 801158a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801158e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8011592:	2b00      	cmp	r3, #0
 8011594:	d10a      	bne.n	80115ac <draw_line_skew+0x654>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
 8011596:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801159a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801159e:	4413      	add	r3, r2
 80115a0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80115a4:	4611      	mov	r1, r2
 80115a6:	4618      	mov	r0, r3
 80115a8:	f00b fc4b 	bl	801ce42 <_lv_memset_00>
        }

        mask_p += draw_area_w;
 80115ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80115b0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80115b4:	4413      	add	r3, r2
 80115b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 80115ba:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80115be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80115c2:	4413      	add	r3, r2
 80115c4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d90b      	bls.n	80115e4 <draw_line_skew+0x68c>
            fill_area.y2 ++;
 80115cc:	f107 0314 	add.w	r3, r7, #20
 80115d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	3301      	adds	r3, #1
 80115d8:	b29b      	uxth	r3, r3
 80115da:	b21a      	sxth	r2, r3
 80115dc:	f107 0314 	add.w	r3, r7, #20
 80115e0:	80da      	strh	r2, [r3, #6]
 80115e2:	e033      	b.n	801164c <draw_line_skew+0x6f4>
        }
        else {
            _lv_blend_fill(&fill_area, clip,
 80115e4:	463b      	mov	r3, r7
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	7a9b      	ldrb	r3, [r3, #10]
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
 80115ea:	463a      	mov	r2, r7
 80115ec:	6812      	ldr	r2, [r2, #0]
 80115ee:	7ad2      	ldrb	r2, [r2, #11]
 80115f0:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80115f4:	b2d2      	uxtb	r2, r2
            _lv_blend_fill(&fill_area, clip,
 80115f6:	4614      	mov	r4, r2
 80115f8:	463a      	mov	r2, r7
 80115fa:	6812      	ldr	r2, [r2, #0]
 80115fc:	1d39      	adds	r1, r7, #4
 80115fe:	f107 0014 	add.w	r0, r7, #20
 8011602:	9402      	str	r4, [sp, #8]
 8011604:	9301      	str	r3, [sp, #4]
 8011606:	2302      	movs	r3, #2
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801160e:	6812      	ldr	r2, [r2, #0]
 8011610:	6809      	ldr	r1, [r1, #0]
 8011612:	f7fa fedb 	bl	800c3cc <_lv_blend_fill>

            fill_area.y1 = fill_area.y2 + 1;
 8011616:	f107 0314 	add.w	r3, r7, #20
 801161a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801161e:	b29b      	uxth	r3, r3
 8011620:	3301      	adds	r3, #1
 8011622:	b29b      	uxth	r3, r3
 8011624:	b21a      	sxth	r2, r3
 8011626:	f107 0314 	add.w	r3, r7, #20
 801162a:	805a      	strh	r2, [r3, #2]
            fill_area.y2 = fill_area.y1;
 801162c:	f107 0314 	add.w	r3, r7, #20
 8011630:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011634:	f107 0314 	add.w	r3, r7, #20
 8011638:	80da      	strh	r2, [r3, #6]
            mask_p = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            _lv_memset_ff(mask_buf, mask_buf_size);
 8011640:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011644:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8011648:	f00b fc7b 	bl	801cf42 <_lv_memset_ff>
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 801164c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011650:	3301      	adds	r3, #1
 8011652:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8011656:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801165a:	461a      	mov	r2, r3
 801165c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011660:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011664:	4413      	add	r3, r2
 8011666:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801166a:	429a      	cmp	r2, r3
 801166c:	f77f af7c 	ble.w	8011568 <draw_line_skew+0x610>
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8011670:	f107 0314 	add.w	r3, r7, #20
 8011674:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011678:	f107 0314 	add.w	r3, r7, #20
 801167c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011680:	429a      	cmp	r2, r3
 8011682:	d023      	beq.n	80116cc <draw_line_skew+0x774>
        fill_area.y2--;
 8011684:	f107 0314 	add.w	r3, r7, #20
 8011688:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801168c:	b29b      	uxth	r3, r3
 801168e:	3b01      	subs	r3, #1
 8011690:	b29b      	uxth	r3, r3
 8011692:	b21a      	sxth	r2, r3
 8011694:	f107 0314 	add.w	r3, r7, #20
 8011698:	80da      	strh	r2, [r3, #6]
        _lv_blend_fill(&fill_area, clip,
 801169a:	463b      	mov	r3, r7
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	7a9b      	ldrb	r3, [r3, #10]
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 80116a0:	463a      	mov	r2, r7
 80116a2:	6812      	ldr	r2, [r2, #0]
 80116a4:	7ad2      	ldrb	r2, [r2, #11]
 80116a6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80116aa:	b2d2      	uxtb	r2, r2
        _lv_blend_fill(&fill_area, clip,
 80116ac:	4614      	mov	r4, r2
 80116ae:	463a      	mov	r2, r7
 80116b0:	6812      	ldr	r2, [r2, #0]
 80116b2:	1d39      	adds	r1, r7, #4
 80116b4:	f107 0014 	add.w	r0, r7, #20
 80116b8:	9402      	str	r4, [sp, #8]
 80116ba:	9301      	str	r3, [sp, #4]
 80116bc:	2302      	movs	r3, #2
 80116be:	9300      	str	r3, [sp, #0]
 80116c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116c4:	6812      	ldr	r2, [r2, #0]
 80116c6:	6809      	ldr	r1, [r1, #0]
 80116c8:	f7fa fe80 	bl	800c3cc <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
 80116cc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80116d0:	f00b f88c 	bl	801c7ec <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 80116d4:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 80116d8:	4618      	mov	r0, r3
 80116da:	f000 f8e9 	bl	80118b0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 80116de:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 80116e2:	4618      	mov	r0, r3
 80116e4:	f000 f8e4 	bl	80118b0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 80116e8:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 f8df 	bl	80118b0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 80116f2:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 80116f6:	4618      	mov	r0, r3
 80116f8:	f000 f8da 	bl	80118b0 <lv_draw_mask_remove_id>
 80116fc:	e000      	b.n	8011700 <draw_line_skew+0x7a8>
    if(is_common == false) return;
 80116fe:	bf00      	nop
}
 8011700:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011704:	46bd      	mov	sp, r7
 8011706:	bdb0      	pop	{r4, r5, r7, pc}

08011708 <_lv_memcpy_small>:
{
 8011708:	b480      	push	{r7}
 801170a:	b087      	sub	sp, #28
 801170c:	af00      	add	r7, sp, #0
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	60b9      	str	r1, [r7, #8]
 8011712:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	613b      	str	r3, [r7, #16]
    while(len) {
 801171c:	e00c      	b.n	8011738 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	781a      	ldrb	r2, [r3, #0]
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	701a      	strb	r2, [r3, #0]
        d8++;
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	3301      	adds	r3, #1
 801172a:	617b      	str	r3, [r7, #20]
        s8++;
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	3301      	adds	r3, #1
 8011730:	613b      	str	r3, [r7, #16]
        len--;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	3b01      	subs	r3, #1
 8011736:	607b      	str	r3, [r7, #4]
    while(len) {
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d1ef      	bne.n	801171e <_lv_memcpy_small+0x16>
    return dst;
 801173e:	68fb      	ldr	r3, [r7, #12]
}
 8011740:	4618      	mov	r0, r3
 8011742:	371c      	adds	r7, #28
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <lv_area_copy>:
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8011756:	2208      	movs	r2, #8
 8011758:	6839      	ldr	r1, [r7, #0]
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f7ff ffd4 	bl	8011708 <_lv_memcpy_small>
}
 8011760:	bf00      	nop
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <lv_area_get_width>:
{
 8011768:	b480      	push	{r7}
 801176a:	b083      	sub	sp, #12
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011776:	b29a      	uxth	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801177e:	b29b      	uxth	r3, r3
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	b29b      	uxth	r3, r3
 8011784:	3301      	adds	r3, #1
 8011786:	b29b      	uxth	r3, r3
 8011788:	b21b      	sxth	r3, r3
}
 801178a:	4618      	mov	r0, r3
 801178c:	370c      	adds	r7, #12
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr

08011796 <lv_area_get_height>:
{
 8011796:	b480      	push	{r7}
 8011798:	b083      	sub	sp, #12
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80117a4:	b29a      	uxth	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	3301      	adds	r3, #1
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	b21b      	sxth	r3, r3
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	370c      	adds	r7, #12
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr

080117c4 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 80117c4:	b480      	push	{r7}
 80117c6:	b085      	sub	sp, #20
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80117ce:	2300      	movs	r3, #0
 80117d0:	73fb      	strb	r3, [r7, #15]
 80117d2:	e008      	b.n	80117e6 <lv_draw_mask_add+0x22>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80117d4:	7bfb      	ldrb	r3, [r7, #15]
 80117d6:	4a13      	ldr	r2, [pc, #76]	; (8011824 <lv_draw_mask_add+0x60>)
 80117d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d006      	beq.n	80117ee <lv_draw_mask_add+0x2a>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80117e0:	7bfb      	ldrb	r3, [r7, #15]
 80117e2:	3301      	adds	r3, #1
 80117e4:	73fb      	strb	r3, [r7, #15]
 80117e6:	7bfb      	ldrb	r3, [r7, #15]
 80117e8:	2b0f      	cmp	r3, #15
 80117ea:	d9f3      	bls.n	80117d4 <lv_draw_mask_add+0x10>
 80117ec:	e000      	b.n	80117f0 <lv_draw_mask_add+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80117ee:	bf00      	nop
    }

    if(i >= _LV_MASK_MAX_NUM) {
 80117f0:	7bfb      	ldrb	r3, [r7, #15]
 80117f2:	2b0f      	cmp	r3, #15
 80117f4:	d902      	bls.n	80117fc <lv_draw_mask_add+0x38>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 80117f6:	f04f 33ff 	mov.w	r3, #4294967295
 80117fa:	e00c      	b.n	8011816 <lv_draw_mask_add+0x52>
    }

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 80117fc:	7bfb      	ldrb	r3, [r7, #15]
 80117fe:	4909      	ldr	r1, [pc, #36]	; (8011824 <lv_draw_mask_add+0x60>)
 8011800:	687a      	ldr	r2, [r7, #4]
 8011802:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 8011806:	7bfb      	ldrb	r3, [r7, #15]
 8011808:	4a06      	ldr	r2, [pc, #24]	; (8011824 <lv_draw_mask_add+0x60>)
 801180a:	00db      	lsls	r3, r3, #3
 801180c:	4413      	add	r3, r2
 801180e:	683a      	ldr	r2, [r7, #0]
 8011810:	605a      	str	r2, [r3, #4]

    return i;
 8011812:	7bfb      	ldrb	r3, [r7, #15]
 8011814:	b21b      	sxth	r3, r3
}
 8011816:	4618      	mov	r0, r3
 8011818:	3714      	adds	r7, #20
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr
 8011822:	bf00      	nop
 8011824:	20020474 	.word	0x20020474

08011828 <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 8011828:	b590      	push	{r4, r7, lr}
 801182a:	b08b      	sub	sp, #44	; 0x2c
 801182c:	af02      	add	r7, sp, #8
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	4608      	mov	r0, r1
 8011832:	4611      	mov	r1, r2
 8011834:	461a      	mov	r2, r3
 8011836:	4603      	mov	r3, r0
 8011838:	817b      	strh	r3, [r7, #10]
 801183a:	460b      	mov	r3, r1
 801183c:	813b      	strh	r3, [r7, #8]
 801183e:	4613      	mov	r3, r2
 8011840:	80fb      	strh	r3, [r7, #6]
    bool changed = false;
 8011842:	2300      	movs	r3, #0
 8011844:	77fb      	strb	r3, [r7, #31]
    lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 8011846:	4b19      	ldr	r3, [pc, #100]	; (80118ac <lv_draw_mask_apply+0x84>)
 8011848:	61bb      	str	r3, [r7, #24]

    while(m->param) {
 801184a:	e021      	b.n	8011890 <lv_draw_mask_apply+0x68>
        dsc = m->param;
 801184c:	69bb      	ldr	r3, [r7, #24]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	617b      	str	r3, [r7, #20]
        lv_draw_mask_res_t res = LV_DRAW_MASK_RES_FULL_COVER;
 8011852:	2301      	movs	r3, #1
 8011854:	74fb      	strb	r3, [r7, #19]
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	681c      	ldr	r4, [r3, #0]
 801185a:	69bb      	ldr	r3, [r7, #24]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011862:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011866:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801186a:	9300      	str	r3, [sp, #0]
 801186c:	4603      	mov	r3, r0
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	47a0      	blx	r4
 8011872:	4603      	mov	r3, r0
 8011874:	74fb      	strb	r3, [r7, #19]
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8011876:	7cfb      	ldrb	r3, [r7, #19]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d101      	bne.n	8011880 <lv_draw_mask_apply+0x58>
 801187c:	2300      	movs	r3, #0
 801187e:	e011      	b.n	80118a4 <lv_draw_mask_apply+0x7c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8011880:	7cfb      	ldrb	r3, [r7, #19]
 8011882:	2b02      	cmp	r3, #2
 8011884:	d101      	bne.n	801188a <lv_draw_mask_apply+0x62>
 8011886:	2301      	movs	r3, #1
 8011888:	77fb      	strb	r3, [r7, #31]

        m++;
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	3308      	adds	r3, #8
 801188e:	61bb      	str	r3, [r7, #24]
    while(m->param) {
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d1d9      	bne.n	801184c <lv_draw_mask_apply+0x24>
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 8011898:	7ffb      	ldrb	r3, [r7, #31]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d001      	beq.n	80118a2 <lv_draw_mask_apply+0x7a>
 801189e:	2302      	movs	r3, #2
 80118a0:	e000      	b.n	80118a4 <lv_draw_mask_apply+0x7c>
 80118a2:	2301      	movs	r3, #1
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3724      	adds	r7, #36	; 0x24
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd90      	pop	{r4, r7, pc}
 80118ac:	20020474 	.word	0x20020474

080118b0 <lv_draw_mask_remove_id>:
 * @param id the ID of the mask.  Returned by `lv_draw_mask_add`
 * @return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_id(int16_t id)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b085      	sub	sp, #20
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	4603      	mov	r3, r0
 80118b8:	80fb      	strh	r3, [r7, #6]
    void * p = NULL;
 80118ba:	2300      	movs	r3, #0
 80118bc:	60fb      	str	r3, [r7, #12]

    if(id != LV_MASK_ID_INV) {
 80118be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c6:	d012      	beq.n	80118ee <lv_draw_mask_remove_id+0x3e>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 80118c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118cc:	4a0b      	ldr	r2, [pc, #44]	; (80118fc <lv_draw_mask_remove_id+0x4c>)
 80118ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80118d2:	60fb      	str	r3, [r7, #12]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 80118d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118d8:	4a08      	ldr	r2, [pc, #32]	; (80118fc <lv_draw_mask_remove_id+0x4c>)
 80118da:	2100      	movs	r1, #0
 80118dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 80118e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118e4:	4a05      	ldr	r2, [pc, #20]	; (80118fc <lv_draw_mask_remove_id+0x4c>)
 80118e6:	00db      	lsls	r3, r3, #3
 80118e8:	4413      	add	r3, r2
 80118ea:	2200      	movs	r2, #0
 80118ec:	605a      	str	r2, [r3, #4]
    }

    return p;
 80118ee:	68fb      	ldr	r3, [r7, #12]
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3714      	adds	r7, #20
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr
 80118fc:	20020474 	.word	0x20020474

08011900 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 8011900:	b480      	push	{r7}
 8011902:	b085      	sub	sp, #20
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
    void * p = NULL;
 8011908:	2300      	movs	r3, #0
 801190a:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 801190c:	2300      	movs	r3, #0
 801190e:	72fb      	strb	r3, [r7, #11]
 8011910:	e01a      	b.n	8011948 <lv_draw_mask_remove_custom+0x48>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 8011912:	7afb      	ldrb	r3, [r7, #11]
 8011914:	4a11      	ldr	r2, [pc, #68]	; (801195c <lv_draw_mask_remove_custom+0x5c>)
 8011916:	00db      	lsls	r3, r3, #3
 8011918:	4413      	add	r3, r2
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	429a      	cmp	r2, r3
 8011920:	d10f      	bne.n	8011942 <lv_draw_mask_remove_custom+0x42>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011922:	7afb      	ldrb	r3, [r7, #11]
 8011924:	4a0d      	ldr	r2, [pc, #52]	; (801195c <lv_draw_mask_remove_custom+0x5c>)
 8011926:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801192a:	60fb      	str	r3, [r7, #12]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 801192c:	7afb      	ldrb	r3, [r7, #11]
 801192e:	4a0b      	ldr	r2, [pc, #44]	; (801195c <lv_draw_mask_remove_custom+0x5c>)
 8011930:	2100      	movs	r1, #0
 8011932:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
 8011936:	7afb      	ldrb	r3, [r7, #11]
 8011938:	4a08      	ldr	r2, [pc, #32]	; (801195c <lv_draw_mask_remove_custom+0x5c>)
 801193a:	00db      	lsls	r3, r3, #3
 801193c:	4413      	add	r3, r2
 801193e:	2200      	movs	r2, #0
 8011940:	605a      	str	r2, [r3, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011942:	7afb      	ldrb	r3, [r7, #11]
 8011944:	3301      	adds	r3, #1
 8011946:	72fb      	strb	r3, [r7, #11]
 8011948:	7afb      	ldrb	r3, [r7, #11]
 801194a:	2b0f      	cmp	r3, #15
 801194c:	d9e1      	bls.n	8011912 <lv_draw_mask_remove_custom+0x12>
        }
    }
    return p;
 801194e:	68fb      	ldr	r3, [r7, #12]
}
 8011950:	4618      	mov	r0, r3
 8011952:	3714      	adds	r7, #20
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr
 801195c:	20020474 	.word	0x20020474

08011960 <lv_draw_mask_get_cnt>:
/**
 * Count the currently added masks
 * @return number of active masks
 */
LV_ATTRIBUTE_FAST_MEM uint8_t lv_draw_mask_get_cnt(void)
{
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
    uint8_t cnt = 0;
 8011966:	2300      	movs	r3, #0
 8011968:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 801196a:	2300      	movs	r3, #0
 801196c:	71bb      	strb	r3, [r7, #6]
 801196e:	e00b      	b.n	8011988 <lv_draw_mask_get_cnt+0x28>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 8011970:	79bb      	ldrb	r3, [r7, #6]
 8011972:	4a0a      	ldr	r2, [pc, #40]	; (801199c <lv_draw_mask_get_cnt+0x3c>)
 8011974:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d002      	beq.n	8011982 <lv_draw_mask_get_cnt+0x22>
 801197c:	79fb      	ldrb	r3, [r7, #7]
 801197e:	3301      	adds	r3, #1
 8011980:	71fb      	strb	r3, [r7, #7]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011982:	79bb      	ldrb	r3, [r7, #6]
 8011984:	3301      	adds	r3, #1
 8011986:	71bb      	strb	r3, [r7, #6]
 8011988:	79bb      	ldrb	r3, [r7, #6]
 801198a:	2b0f      	cmp	r3, #15
 801198c:	d9f0      	bls.n	8011970 <lv_draw_mask_get_cnt+0x10>
    }
    return cnt;
 801198e:	79fb      	ldrb	r3, [r7, #7]
}
 8011990:	4618      	mov	r0, r3
 8011992:	370c      	adds	r7, #12
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr
 801199c:	20020474 	.word	0x20020474

080119a0 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b08a      	sub	sp, #40	; 0x28
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	60f8      	str	r0, [r7, #12]
 80119a8:	4608      	mov	r0, r1
 80119aa:	4611      	mov	r1, r2
 80119ac:	461a      	mov	r2, r3
 80119ae:	4603      	mov	r3, r0
 80119b0:	817b      	strh	r3, [r7, #10]
 80119b2:	460b      	mov	r3, r1
 80119b4:	813b      	strh	r3, [r7, #8]
 80119b6:	4613      	mov	r3, r2
 80119b8:	80fb      	strh	r3, [r7, #6]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 80119ba:	212c      	movs	r1, #44	; 0x2c
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f00b fa40 	bl	801ce42 <_lv_memset_00>

    if(p1y > p2y) {
 80119c2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80119c6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80119ca:	429a      	cmp	r2, r3
 80119cc:	dd0b      	ble.n	80119e6 <lv_draw_mask_line_points_init+0x46>
        lv_coord_t t;
        t = p2x;
 80119ce:	88fb      	ldrh	r3, [r7, #6]
 80119d0:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2x = p1x;
 80119d2:	897b      	ldrh	r3, [r7, #10]
 80119d4:	80fb      	strh	r3, [r7, #6]
        p1x = t;
 80119d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80119d8:	817b      	strh	r3, [r7, #10]

        t = p2y;
 80119da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80119dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2y = p1y;
 80119de:	893b      	ldrh	r3, [r7, #8]
 80119e0:	863b      	strh	r3, [r7, #48]	; 0x30
        p1y = t;
 80119e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80119e4:	813b      	strh	r3, [r7, #8]
    }

    param->cfg.p1.x = p1x;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	897a      	ldrh	r2, [r7, #10]
 80119ea:	811a      	strh	r2, [r3, #8]
    param->cfg.p1.y = p1y;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	893a      	ldrh	r2, [r7, #8]
 80119f0:	815a      	strh	r2, [r3, #10]
    param->cfg.p2.x = p2x;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	88fa      	ldrh	r2, [r7, #6]
 80119f6:	819a      	strh	r2, [r3, #12]
    param->cfg.p2.y = p2y;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80119fc:	81da      	strh	r2, [r3, #14]
    param->cfg.side = side;
 80119fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011a02:	f003 0303 	and.w	r3, r3, #3
 8011a06:	b2d9      	uxtb	r1, r3
 8011a08:	68fa      	ldr	r2, [r7, #12]
 8011a0a:	7c13      	ldrb	r3, [r2, #16]
 8011a0c:	f361 0301 	bfi	r3, r1, #0, #2
 8011a10:	7413      	strb	r3, [r2, #16]

    param->origo.x = p1x;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	897a      	ldrh	r2, [r7, #10]
 8011a16:	825a      	strh	r2, [r3, #18]
    param->origo.y = p1y;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	893a      	ldrh	r2, [r7, #8]
 8011a1c:	829a      	strh	r2, [r3, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8011a1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011a22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011a26:	1ad3      	subs	r3, r2, r3
 8011a28:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011a2c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011a30:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8011a34:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011a38:	1acb      	subs	r3, r1, r3
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	bfb8      	it	lt
 8011a3e:	425b      	neglt	r3, r3
 8011a40:	429a      	cmp	r2, r3
 8011a42:	bfcc      	ite	gt
 8011a44:	2301      	movgt	r3, #1
 8011a46:	2300      	movle	r3, #0
 8011a48:	b2d9      	uxtb	r1, r3
 8011a4a:	68fa      	ldr	r2, [r7, #12]
 8011a4c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011a50:	f361 0300 	bfi	r3, r1, #0, #1
 8011a54:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    param->yx_steep = 0;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	61da      	str	r2, [r3, #28]
    param->xy_steep = 0;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	2200      	movs	r2, #0
 8011a62:	619a      	str	r2, [r3, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	4a63      	ldr	r2, [pc, #396]	; (8011bf4 <lv_draw_mask_line_points_init+0x254>)
 8011a68:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	711a      	strb	r2, [r3, #4]

    int32_t dx = p2x - p1x;
 8011a70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011a74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011a78:	1ad3      	subs	r3, r2, r3
 8011a7a:	623b      	str	r3, [r7, #32]
    int32_t dy = p2y - p1y;
 8011a7c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8011a80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011a84:	1ad3      	subs	r3, r2, r3
 8011a86:	61fb      	str	r3, [r7, #28]

    if(param->flat) {
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a8e:	f003 0301 	and.w	r3, r3, #1
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d024      	beq.n	8011ae2 <lv_draw_mask_line_points_init+0x142>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 8011a98:	6a3b      	ldr	r3, [r7, #32]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d00c      	beq.n	8011ab8 <lv_draw_mask_line_points_init+0x118>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8011a9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011aa2:	6a3b      	ldr	r3, [r7, #32]
 8011aa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8011aa8:	617b      	str	r3, [r7, #20]
            param->yx_steep = (m * dy) >> 10;
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	69fa      	ldr	r2, [r7, #28]
 8011aae:	fb02 f303 	mul.w	r3, r2, r3
 8011ab2:	129a      	asrs	r2, r3, #10
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	61da      	str	r2, [r3, #28]
        }

        if(dy) {
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d00c      	beq.n	8011ad8 <lv_draw_mask_line_points_init+0x138>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011abe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	fb92 f3f3 	sdiv	r3, r2, r3
 8011ac8:	617b      	str	r3, [r7, #20]
            param->xy_steep = (m * dx) >> 10;
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	6a3a      	ldr	r2, [r7, #32]
 8011ace:	fb02 f303 	mul.w	r3, r2, r3
 8011ad2:	129a      	asrs	r2, r3, #10
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	619a      	str	r2, [r3, #24]
        }
        param->steep = param->yx_steep;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	69da      	ldr	r2, [r3, #28]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	621a      	str	r2, [r3, #32]
 8011ae0:	e023      	b.n	8011b2a <lv_draw_mask_line_points_init+0x18a>
    }
    else {
        /*Normalize the steep. Delta y should be relative to delta x = 1024*/
        int32_t m;

        if(dy) {
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d00c      	beq.n	8011b02 <lv_draw_mask_line_points_init+0x162>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011ae8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	fb92 f3f3 	sdiv	r3, r2, r3
 8011af2:	61bb      	str	r3, [r7, #24]
            param->xy_steep = (m * dx) >> 10;
 8011af4:	69bb      	ldr	r3, [r7, #24]
 8011af6:	6a3a      	ldr	r2, [r7, #32]
 8011af8:	fb02 f303 	mul.w	r3, r2, r3
 8011afc:	129a      	asrs	r2, r3, #10
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	619a      	str	r2, [r3, #24]
        }

        if(dx) {
 8011b02:	6a3b      	ldr	r3, [r7, #32]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d00c      	beq.n	8011b22 <lv_draw_mask_line_points_init+0x182>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011b08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011b0c:	6a3b      	ldr	r3, [r7, #32]
 8011b0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011b12:	61bb      	str	r3, [r7, #24]
            param->yx_steep = (m * dy) >> 10;
 8011b14:	69bb      	ldr	r3, [r7, #24]
 8011b16:	69fa      	ldr	r2, [r7, #28]
 8011b18:	fb02 f303 	mul.w	r3, r2, r3
 8011b1c:	129a      	asrs	r2, r3, #10
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	61da      	str	r2, [r3, #28]
        }
        param->steep = param->xy_steep;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	699a      	ldr	r2, [r3, #24]
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	621a      	str	r2, [r3, #32]
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	7c1b      	ldrb	r3, [r3, #16]
 8011b2e:	f003 0303 	and.w	r3, r3, #3
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d107      	bne.n	8011b48 <lv_draw_mask_line_points_init+0x1a8>
 8011b38:	68fa      	ldr	r2, [r7, #12]
 8011b3a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011b3e:	f36f 0341 	bfc	r3, #1, #1
 8011b42:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011b46:	e043      	b.n	8011bd0 <lv_draw_mask_line_points_init+0x230>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	7c1b      	ldrb	r3, [r3, #16]
 8011b4c:	f003 0303 	and.w	r3, r3, #3
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d107      	bne.n	8011b66 <lv_draw_mask_line_points_init+0x1c6>
 8011b56:	68fa      	ldr	r2, [r7, #12]
 8011b58:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011b5c:	f043 0302 	orr.w	r3, r3, #2
 8011b60:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011b64:	e034      	b.n	8011bd0 <lv_draw_mask_line_points_init+0x230>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	7c1b      	ldrb	r3, [r3, #16]
 8011b6a:	f003 0303 	and.w	r3, r3, #3
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	2b02      	cmp	r3, #2
 8011b72:	d113      	bne.n	8011b9c <lv_draw_mask_line_points_init+0x1fc>
        if(param->steep > 0) param->inv = 1;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	6a1b      	ldr	r3, [r3, #32]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	dd07      	ble.n	8011b8c <lv_draw_mask_line_points_init+0x1ec>
 8011b7c:	68fa      	ldr	r2, [r7, #12]
 8011b7e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011b82:	f043 0302 	orr.w	r3, r3, #2
 8011b86:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011b8a:	e021      	b.n	8011bd0 <lv_draw_mask_line_points_init+0x230>
        else param->inv = 0;
 8011b8c:	68fa      	ldr	r2, [r7, #12]
 8011b8e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011b92:	f36f 0341 	bfc	r3, #1, #1
 8011b96:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011b9a:	e019      	b.n	8011bd0 <lv_draw_mask_line_points_init+0x230>
    }
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	7c1b      	ldrb	r3, [r3, #16]
 8011ba0:	f003 0303 	and.w	r3, r3, #3
 8011ba4:	b2db      	uxtb	r3, r3
 8011ba6:	2b03      	cmp	r3, #3
 8011ba8:	d112      	bne.n	8011bd0 <lv_draw_mask_line_points_init+0x230>
        if(param->steep > 0) param->inv = 0;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	6a1b      	ldr	r3, [r3, #32]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	dd07      	ble.n	8011bc2 <lv_draw_mask_line_points_init+0x222>
 8011bb2:	68fa      	ldr	r2, [r7, #12]
 8011bb4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011bb8:	f36f 0341 	bfc	r3, #1, #1
 8011bbc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011bc0:	e006      	b.n	8011bd0 <lv_draw_mask_line_points_init+0x230>
        else param->inv = 1;
 8011bc2:	68fa      	ldr	r2, [r7, #12]
 8011bc4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011bc8:	f043 0302 	orr.w	r3, r3, #2
 8011bcc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }

    param->spx = param->steep >> 2;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	6a1b      	ldr	r3, [r3, #32]
 8011bd4:	109a      	asrs	r2, r3, #2
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	625a      	str	r2, [r3, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	6a1b      	ldr	r3, [r3, #32]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	da04      	bge.n	8011bec <lv_draw_mask_line_points_init+0x24c>
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be6:	425a      	negs	r2, r3
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011bec:	bf00      	nop
 8011bee:	3728      	adds	r7, #40	; 0x28
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	08011c91 	.word	0x08011c91

08011bf8 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv: true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b086      	sub	sp, #24
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	4611      	mov	r1, r2
 8011c04:	461a      	mov	r2, r3
 8011c06:	460b      	mov	r3, r1
 8011c08:	80fb      	strh	r3, [r7, #6]
 8011c0a:	4613      	mov	r3, r2
 8011c0c:	717b      	strb	r3, [r7, #5]
    lv_coord_t w = lv_area_get_width(rect);
 8011c0e:	68b8      	ldr	r0, [r7, #8]
 8011c10:	f7ff fdaa 	bl	8011768 <lv_area_get_width>
 8011c14:	4603      	mov	r3, r0
 8011c16:	82fb      	strh	r3, [r7, #22]
    lv_coord_t h = lv_area_get_height(rect);
 8011c18:	68b8      	ldr	r0, [r7, #8]
 8011c1a:	f7ff fdbc 	bl	8011796 <lv_area_get_height>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	82bb      	strh	r3, [r7, #20]
    int32_t short_side = LV_MATH_MIN(w, h);
 8011c22:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8011c26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	bfa8      	it	ge
 8011c2e:	4613      	movge	r3, r2
 8011c30:	b21b      	sxth	r3, r3
 8011c32:	613b      	str	r3, [r7, #16]
    if(radius > short_side >> 1) radius = short_side >> 1;
 8011c34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	105b      	asrs	r3, r3, #1
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	dd02      	ble.n	8011c46 <lv_draw_mask_radius_init+0x4e>
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	105b      	asrs	r3, r3, #1
 8011c44:	80fb      	strh	r3, [r7, #6]

    lv_area_copy(&param->cfg.rect, rect);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	3308      	adds	r3, #8
 8011c4a:	68b9      	ldr	r1, [r7, #8]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7ff fd7d 	bl	801174c <lv_area_copy>
    param->cfg.radius = radius;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	88fa      	ldrh	r2, [r7, #6]
 8011c56:	821a      	strh	r2, [r3, #16]
    param->cfg.outer = inv ? 1 : 0;
 8011c58:	7979      	ldrb	r1, [r7, #5]
 8011c5a:	68fa      	ldr	r2, [r7, #12]
 8011c5c:	7c93      	ldrb	r3, [r2, #18]
 8011c5e:	f361 0300 	bfi	r3, r1, #0, #1
 8011c62:	7493      	strb	r3, [r2, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	4a09      	ldr	r2, [pc, #36]	; (8011c8c <lv_draw_mask_radius_init+0x94>)
 8011c68:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	2202      	movs	r2, #2
 8011c6e:	711a      	strb	r2, [r3, #4]
    param->y_prev = INT32_MIN;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c76:	615a      	str	r2, [r3, #20]
    param->y_prev_x.f = 0;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	835a      	strh	r2, [r3, #26]
    param->y_prev_x.i = 0;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	2200      	movs	r2, #0
 8011c82:	831a      	strh	r2, [r3, #24]
}
 8011c84:	bf00      	nop
 8011c86:	3718      	adds	r7, #24
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	08012611 	.word	0x08012611

08011c90 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b08a      	sub	sp, #40	; 0x28
 8011c94:	af02      	add	r7, sp, #8
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	4608      	mov	r0, r1
 8011c9a:	4611      	mov	r1, r2
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	817b      	strh	r3, [r7, #10]
 8011ca2:	460b      	mov	r3, r1
 8011ca4:	813b      	strh	r3, [r7, #8]
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	80fb      	strh	r3, [r7, #6]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 8011caa:	893a      	ldrh	r2, [r7, #8]
 8011cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	1ad3      	subs	r3, r2, r3
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	813b      	strh	r3, [r7, #8]
    abs_x -= p->origo.x;
 8011cba:	897a      	ldrh	r2, [r7, #10]
 8011cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cbe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	1ad3      	subs	r3, r2, r3
 8011cc6:	b29b      	uxth	r3, r3
 8011cc8:	817b      	strh	r3, [r7, #10]

    /*Handle special cases*/
    if(p->steep == 0) {
 8011cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ccc:	6a1b      	ldr	r3, [r3, #32]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	f040 80a7 	bne.w	8011e22 <lv_draw_mask_line+0x192>
        /*Horizontal*/
        if(p->flat) {
 8011cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cda:	f003 0301 	and.w	r3, r3, #1
 8011cde:	b2db      	uxtb	r3, r3
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d02c      	beq.n	8011d3e <lv_draw_mask_line+0xae>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8011ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce6:	7c1b      	ldrb	r3, [r3, #16]
 8011ce8:	f003 0303 	and.w	r3, r3, #3
 8011cec:	b2db      	uxtb	r3, r3
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d006      	beq.n	8011d00 <lv_draw_mask_line+0x70>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8011cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf4:	7c1b      	ldrb	r3, [r3, #16]
 8011cf6:	f003 0303 	and.w	r3, r3, #3
 8011cfa:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d101      	bne.n	8011d04 <lv_draw_mask_line+0x74>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8011d00:	2301      	movs	r3, #1
 8011d02:	e0b4      	b.n	8011e6e <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8011d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d06:	7c1b      	ldrb	r3, [r3, #16]
 8011d08:	f003 0303 	and.w	r3, r3, #3
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	2b02      	cmp	r3, #2
 8011d10:	d106      	bne.n	8011d20 <lv_draw_mask_line+0x90>
 8011d12:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011d16:	3301      	adds	r3, #1
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	da01      	bge.n	8011d20 <lv_draw_mask_line+0x90>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	e0a6      	b.n	8011e6e <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8011d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d22:	7c1b      	ldrb	r3, [r3, #16]
 8011d24:	f003 0303 	and.w	r3, r3, #3
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	2b03      	cmp	r3, #3
 8011d2c:	d105      	bne.n	8011d3a <lv_draw_mask_line+0xaa>
 8011d2e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	dd01      	ble.n	8011d3a <lv_draw_mask_line+0xaa>
 8011d36:	2301      	movs	r3, #1
 8011d38:	e099      	b.n	8011e6e <lv_draw_mask_line+0x1de>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	e097      	b.n	8011e6e <lv_draw_mask_line+0x1de>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8011d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d40:	7c1b      	ldrb	r3, [r3, #16]
 8011d42:	f003 0303 	and.w	r3, r3, #3
 8011d46:	b2db      	uxtb	r3, r3
 8011d48:	2b02      	cmp	r3, #2
 8011d4a:	d006      	beq.n	8011d5a <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8011d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4e:	7c1b      	ldrb	r3, [r3, #16]
 8011d50:	f003 0303 	and.w	r3, r3, #3
 8011d54:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8011d56:	2b03      	cmp	r3, #3
 8011d58:	d101      	bne.n	8011d5e <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e087      	b.n	8011e6e <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8011d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d60:	7c1b      	ldrb	r3, [r3, #16]
 8011d62:	f003 0303 	and.w	r3, r3, #3
 8011d66:	b2db      	uxtb	r3, r3
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d105      	bne.n	8011d78 <lv_draw_mask_line+0xe8>
 8011d6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	dd01      	ble.n	8011d78 <lv_draw_mask_line+0xe8>
 8011d74:	2301      	movs	r3, #1
 8011d76:	e07a      	b.n	8011e6e <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 8011d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7a:	7c1b      	ldrb	r3, [r3, #16]
 8011d7c:	f003 0303 	and.w	r3, r3, #3
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d125      	bne.n	8011dd2 <lv_draw_mask_line+0x142>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8011d86:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d8e:	4413      	add	r3, r2
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	da01      	bge.n	8011d98 <lv_draw_mask_line+0x108>
 8011d94:	2301      	movs	r3, #1
 8011d96:	e06a      	b.n	8011e6e <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 8011d98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d9c:	425b      	negs	r3, r3
 8011d9e:	617b      	str	r3, [r7, #20]
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	da01      	bge.n	8011daa <lv_draw_mask_line+0x11a>
 8011da6:	2300      	movs	r3, #0
 8011da8:	e061      	b.n	8011e6e <lv_draw_mask_line+0x1de>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	db0e      	blt.n	8011dce <lv_draw_mask_line+0x13e>
 8011db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011db4:	697a      	ldr	r2, [r7, #20]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	da09      	bge.n	8011dce <lv_draw_mask_line+0x13e>
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	68fa      	ldr	r2, [r7, #12]
 8011dbe:	18d0      	adds	r0, r2, r3
 8011dc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	1ad3      	subs	r3, r2, r3
 8011dc8:	4619      	mov	r1, r3
 8011dca:	f00b f83a 	bl	801ce42 <_lv_memset_00>
                    return LV_DRAW_MASK_RES_CHANGED;
 8011dce:	2302      	movs	r3, #2
 8011dd0:	e04d      	b.n	8011e6e <lv_draw_mask_line+0x1de>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 8011dd2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011dda:	4413      	add	r3, r2
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	da01      	bge.n	8011de4 <lv_draw_mask_line+0x154>
 8011de0:	2300      	movs	r3, #0
 8011de2:	e044      	b.n	8011e6e <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 8011de4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011de8:	425b      	negs	r3, r3
 8011dea:	61fb      	str	r3, [r7, #28]
                    if(k < 0) k = 0;
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	da01      	bge.n	8011df6 <lv_draw_mask_line+0x166>
 8011df2:	2300      	movs	r3, #0
 8011df4:	61fb      	str	r3, [r7, #28]
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 8011df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011dfa:	69fa      	ldr	r2, [r7, #28]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	db01      	blt.n	8011e04 <lv_draw_mask_line+0x174>
 8011e00:	2300      	movs	r3, #0
 8011e02:	e034      	b.n	8011e6e <lv_draw_mask_line+0x1de>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	db09      	blt.n	8011e1e <lv_draw_mask_line+0x18e>
 8011e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e0e:	69fa      	ldr	r2, [r7, #28]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	da04      	bge.n	8011e1e <lv_draw_mask_line+0x18e>
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	4619      	mov	r1, r3
 8011e18:	68f8      	ldr	r0, [r7, #12]
 8011e1a:	f00b f812 	bl	801ce42 <_lv_memset_00>
                    return LV_DRAW_MASK_RES_CHANGED;
 8011e1e:	2302      	movs	r3, #2
 8011e20:	e025      	b.n	8011e6e <lv_draw_mask_line+0x1de>
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
 8011e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e28:	f003 0301 	and.w	r3, r3, #1
 8011e2c:	b2db      	uxtb	r3, r3
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00e      	beq.n	8011e50 <lv_draw_mask_line+0x1c0>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 8011e32:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011e36:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011e3a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e40:	9300      	str	r3, [sp, #0]
 8011e42:	4603      	mov	r3, r0
 8011e44:	68f8      	ldr	r0, [r7, #12]
 8011e46:	f000 f816 	bl	8011e76 <line_mask_flat>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	76fb      	strb	r3, [r7, #27]
 8011e4e:	e00d      	b.n	8011e6c <lv_draw_mask_line+0x1dc>
    }
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 8011e50:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011e54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011e58:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5e:	9300      	str	r3, [sp, #0]
 8011e60:	4603      	mov	r3, r0
 8011e62:	68f8      	ldr	r0, [r7, #12]
 8011e64:	f000 f991 	bl	801218a <line_mask_steep>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	76fb      	strb	r3, [r7, #27]
    }

    return res;
 8011e6c:	7efb      	ldrb	r3, [r7, #27]
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3720      	adds	r7, #32
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <line_mask_flat>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
 8011e76:	b590      	push	{r4, r7, lr}
 8011e78:	b08d      	sub	sp, #52	; 0x34
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	60f8      	str	r0, [r7, #12]
 8011e7e:	4608      	mov	r0, r1
 8011e80:	4611      	mov	r1, r2
 8011e82:	461a      	mov	r2, r3
 8011e84:	4603      	mov	r3, r0
 8011e86:	817b      	strh	r3, [r7, #10]
 8011e88:	460b      	mov	r3, r1
 8011e8a:	813b      	strh	r3, [r7, #8]
 8011e8c:	4613      	mov	r3, r2
 8011e8e:	80fb      	strh	r3, [r7, #6]
    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 8011e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e92:	69db      	ldr	r3, [r3, #28]
 8011e94:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011e98:	fb02 f303 	mul.w	r3, r2, r3
 8011e9c:	129b      	asrs	r3, r3, #10
 8011e9e:	61fb      	str	r3, [r7, #28]

    if(p->yx_steep > 0) {
 8011ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ea2:	69db      	ldr	r3, [r3, #28]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	dd10      	ble.n	8011eca <line_mask_flat+0x54>
        if(y_at_x > abs_y) {
 8011ea8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011eac:	69fa      	ldr	r2, [r7, #28]
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	dd1c      	ble.n	8011eec <line_mask_flat+0x76>
            if(p->inv) {
 8011eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011eb8:	f003 0302 	and.w	r3, r3, #2
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d001      	beq.n	8011ec6 <line_mask_flat+0x50>
                return LV_DRAW_MASK_RES_FULL_COVER;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	e15d      	b.n	8012182 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	e15b      	b.n	8012182 <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
 8011eca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011ece:	69fa      	ldr	r2, [r7, #28]
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	da0b      	bge.n	8011eec <line_mask_flat+0x76>
            if(p->inv) {
 8011ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011eda:	f003 0302 	and.w	r3, r3, #2
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d001      	beq.n	8011ee8 <line_mask_flat+0x72>
                return LV_DRAW_MASK_RES_FULL_COVER;
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	e14c      	b.n	8012182 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	e14a      	b.n	8012182 <line_mask_flat+0x30c>
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 8011eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eee:	69db      	ldr	r3, [r3, #28]
 8011ef0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011ef4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011ef8:	440a      	add	r2, r1
 8011efa:	fb02 f303 	mul.w	r3, r2, r3
 8011efe:	129b      	asrs	r3, r3, #10
 8011f00:	61fb      	str	r3, [r7, #28]
    if(p->yx_steep > 0) {
 8011f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f04:	69db      	ldr	r3, [r3, #28]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	dd10      	ble.n	8011f2c <line_mask_flat+0xb6>
        if(y_at_x < abs_y) {
 8011f0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011f0e:	69fa      	ldr	r2, [r7, #28]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	da1c      	bge.n	8011f4e <line_mask_flat+0xd8>
            if(p->inv) {
 8011f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f1a:	f003 0302 	and.w	r3, r3, #2
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d001      	beq.n	8011f28 <line_mask_flat+0xb2>
                return LV_DRAW_MASK_RES_TRANSP;
 8011f24:	2300      	movs	r3, #0
 8011f26:	e12c      	b.n	8012182 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8011f28:	2301      	movs	r3, #1
 8011f2a:	e12a      	b.n	8012182 <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
 8011f2c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011f30:	69fa      	ldr	r2, [r7, #28]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	dd0b      	ble.n	8011f4e <line_mask_flat+0xd8>
            if(p->inv) {
 8011f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f3c:	f003 0302 	and.w	r3, r3, #2
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d001      	beq.n	8011f4a <line_mask_flat+0xd4>
                return LV_DRAW_MASK_RES_TRANSP;
 8011f46:	2300      	movs	r3, #0
 8011f48:	e11b      	b.n	8012182 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	e119      	b.n	8012182 <line_mask_flat+0x30c>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
 8011f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f50:	69db      	ldr	r3, [r3, #28]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	dd09      	ble.n	8011f6a <line_mask_flat+0xf4>
 8011f56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011f5a:	021b      	lsls	r3, r3, #8
 8011f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f5e:	6992      	ldr	r2, [r2, #24]
 8011f60:	fb02 f303 	mul.w	r3, r2, r3
 8011f64:	129b      	asrs	r3, r3, #10
 8011f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f68:	e009      	b.n	8011f7e <line_mask_flat+0x108>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8011f6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011f6e:	3301      	adds	r3, #1
 8011f70:	021b      	lsls	r3, r3, #8
 8011f72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f74:	6992      	ldr	r2, [r2, #24]
 8011f76:	fb02 f303 	mul.w	r3, r2, r3
 8011f7a:	129b      	asrs	r3, r3, #10
 8011f7c:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t xei = xe >> 8;
 8011f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f80:	121b      	asrs	r3, r3, #8
 8011f82:	61bb      	str	r3, [r7, #24]
    int32_t xef = xe & 0xFF;
 8011f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	617b      	str	r3, [r7, #20]

    int32_t px_h;
    if(xef == 0) px_h = 255;
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d102      	bne.n	8011f96 <line_mask_flat+0x120>
 8011f90:	23ff      	movs	r3, #255	; 0xff
 8011f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f94:	e00a      	b.n	8011fac <line_mask_flat+0x136>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8011f9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011fa0:	fb02 f303 	mul.w	r3, r2, r3
 8011fa4:	121b      	asrs	r3, r3, #8
 8011fa6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8011faa:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t k = xei - abs_x;
 8011fac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011fb0:	69ba      	ldr	r2, [r7, #24]
 8011fb2:	1ad3      	subs	r3, r2, r3
 8011fb4:	627b      	str	r3, [r7, #36]	; 0x24
    lv_opa_t m;

    if(xef) {
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d06c      	beq.n	8012096 <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	db2c      	blt.n	801201c <line_mask_flat+0x1a6>
 8011fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	da27      	bge.n	801201c <line_mask_flat+0x1a6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8011fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fd4:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8011fd8:	fb02 f303 	mul.w	r3, r2, r3
 8011fdc:	125b      	asrs	r3, r3, #9
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	43db      	mvns	r3, r3
 8011fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 8011fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011fec:	f003 0302 	and.w	r3, r3, #2
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d004      	beq.n	8012000 <line_mask_flat+0x18a>
 8011ff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011ffa:	43db      	mvns	r3, r3
 8011ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012002:	68fa      	ldr	r2, [r7, #12]
 8012004:	4413      	add	r3, r2
 8012006:	7818      	ldrb	r0, [r3, #0]
 8012008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200a:	68fa      	ldr	r2, [r7, #12]
 801200c:	18d4      	adds	r4, r2, r3
 801200e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012012:	4619      	mov	r1, r3
 8012014:	f000 ff09 	bl	8012e2a <mask_mix>
 8012018:	4603      	mov	r3, r0
 801201a:	7023      	strb	r3, [r4, #0]
        }
        k++;
 801201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201e:	3301      	adds	r3, #1
 8012020:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while(px_h > p->spx) {
 8012022:	e038      	b.n	8012096 <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 8012024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012026:	2b00      	cmp	r3, #0
 8012028:	db28      	blt.n	801207c <line_mask_flat+0x206>
 801202a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012030:	429a      	cmp	r2, r3
 8012032:	da23      	bge.n	801207c <line_mask_flat+0x206>
            m = px_h - (p->spx >> 1);
 8012034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012036:	b2da      	uxtb	r2, r3
 8012038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801203c:	105b      	asrs	r3, r3, #1
 801203e:	b2db      	uxtb	r3, r3
 8012040:	1ad3      	subs	r3, r2, r3
 8012042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 8012046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801204c:	f003 0302 	and.w	r3, r3, #2
 8012050:	b2db      	uxtb	r3, r3
 8012052:	2b00      	cmp	r3, #0
 8012054:	d004      	beq.n	8012060 <line_mask_flat+0x1ea>
 8012056:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801205a:	43db      	mvns	r3, r3
 801205c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012062:	68fa      	ldr	r2, [r7, #12]
 8012064:	4413      	add	r3, r2
 8012066:	7818      	ldrb	r0, [r3, #0]
 8012068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206a:	68fa      	ldr	r2, [r7, #12]
 801206c:	18d4      	adds	r4, r2, r3
 801206e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012072:	4619      	mov	r1, r3
 8012074:	f000 fed9 	bl	8012e2a <mask_mix>
 8012078:	4603      	mov	r3, r0
 801207a:	7023      	strb	r3, [r4, #0]
        }
        px_h -= p->spx;
 801207c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	62bb      	str	r3, [r7, #40]	; 0x28
        k++;
 8012086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012088:	3301      	adds	r3, #1
 801208a:	627b      	str	r3, [r7, #36]	; 0x24
        if(k >= len) break;
 801208c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012092:	429a      	cmp	r2, r3
 8012094:	da05      	bge.n	80120a2 <line_mask_flat+0x22c>
    while(px_h > p->spx) {
 8012096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801209a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801209c:	429a      	cmp	r2, r3
 801209e:	dcc1      	bgt.n	8012024 <line_mask_flat+0x1ae>
 80120a0:	e000      	b.n	80120a4 <line_mask_flat+0x22e>
        if(k >= len) break;
 80120a2:	bf00      	nop
    }

    if(k < len && k >= 0) {
 80120a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120aa:	429a      	cmp	r2, r3
 80120ac:	da34      	bge.n	8012118 <line_mask_flat+0x2a2>
 80120ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	db31      	blt.n	8012118 <line_mask_flat+0x2a2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 80120b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120b6:	699b      	ldr	r3, [r3, #24]
 80120b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120ba:	fb02 f303 	mul.w	r3, r2, r3
 80120be:	129b      	asrs	r3, r3, #10
 80120c0:	613b      	str	r3, [r7, #16]
        m = (x_inters * px_h) >> 9;
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120c6:	fb02 f303 	mul.w	r3, r2, r3
 80120ca:	125b      	asrs	r3, r3, #9
 80120cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->yx_steep < 0) m = 255 - m;
 80120d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120d2:	69db      	ldr	r3, [r3, #28]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	da04      	bge.n	80120e2 <line_mask_flat+0x26c>
 80120d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80120dc:	43db      	mvns	r3, r3
 80120de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->inv) m = 255 - m;
 80120e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120e8:	f003 0302 	and.w	r3, r3, #2
 80120ec:	b2db      	uxtb	r3, r3
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d004      	beq.n	80120fc <line_mask_flat+0x286>
 80120f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80120f6:	43db      	mvns	r3, r3
 80120f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        mask_buf[k] = mask_mix(mask_buf[k], m);
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	68fa      	ldr	r2, [r7, #12]
 8012100:	4413      	add	r3, r2
 8012102:	7818      	ldrb	r0, [r3, #0]
 8012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012106:	68fa      	ldr	r2, [r7, #12]
 8012108:	18d4      	adds	r4, r2, r3
 801210a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801210e:	4619      	mov	r1, r3
 8012110:	f000 fe8b 	bl	8012e2a <mask_mix>
 8012114:	4603      	mov	r3, r0
 8012116:	7023      	strb	r3, [r4, #0]
    }

    if(p->inv) {
 8012118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801211a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801211e:	f003 0302 	and.w	r3, r3, #2
 8012122:	b2db      	uxtb	r3, r3
 8012124:	2b00      	cmp	r3, #0
 8012126:	d014      	beq.n	8012152 <line_mask_flat+0x2dc>
        k = xei - abs_x;
 8012128:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801212c:	69ba      	ldr	r2, [r7, #24]
 801212e:	1ad3      	subs	r3, r2, r3
 8012130:	627b      	str	r3, [r7, #36]	; 0x24
        if(k > len) {
 8012132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012138:	429a      	cmp	r2, r3
 801213a:	dd01      	ble.n	8012140 <line_mask_flat+0x2ca>
            return LV_DRAW_MASK_RES_TRANSP;
 801213c:	2300      	movs	r3, #0
 801213e:	e020      	b.n	8012182 <line_mask_flat+0x30c>
        }
        if(k >= 0) {
 8012140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012142:	2b00      	cmp	r3, #0
 8012144:	db1c      	blt.n	8012180 <line_mask_flat+0x30a>
            _lv_memset_00(&mask_buf[0], k);
 8012146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012148:	4619      	mov	r1, r3
 801214a:	68f8      	ldr	r0, [r7, #12]
 801214c:	f00a fe79 	bl	801ce42 <_lv_memset_00>
 8012150:	e016      	b.n	8012180 <line_mask_flat+0x30a>
        }
    }
    else {
        k++;
 8012152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012154:	3301      	adds	r3, #1
 8012156:	627b      	str	r3, [r7, #36]	; 0x24
        if(k < 0) {
 8012158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215a:	2b00      	cmp	r3, #0
 801215c:	da01      	bge.n	8012162 <line_mask_flat+0x2ec>
            return LV_DRAW_MASK_RES_TRANSP;
 801215e:	2300      	movs	r3, #0
 8012160:	e00f      	b.n	8012182 <line_mask_flat+0x30c>
        }
        if(k <= len) {
 8012162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012168:	429a      	cmp	r2, r3
 801216a:	dc09      	bgt.n	8012180 <line_mask_flat+0x30a>
            _lv_memset_00(&mask_buf[k], len - k);
 801216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216e:	68fa      	ldr	r2, [r7, #12]
 8012170:	18d0      	adds	r0, r2, r3
 8012172:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	4619      	mov	r1, r3
 801217c:	f00a fe61 	bl	801ce42 <_lv_memset_00>
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8012180:	2302      	movs	r3, #2
}
 8012182:	4618      	mov	r0, r3
 8012184:	3734      	adds	r7, #52	; 0x34
 8012186:	46bd      	mov	sp, r7
 8012188:	bd90      	pop	{r4, r7, pc}

0801218a <line_mask_steep>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_steep(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                                lv_coord_t len,
                                                                lv_draw_mask_line_param_t * p)
{
 801218a:	b590      	push	{r4, r7, lr}
 801218c:	b091      	sub	sp, #68	; 0x44
 801218e:	af00      	add	r7, sp, #0
 8012190:	60f8      	str	r0, [r7, #12]
 8012192:	4608      	mov	r0, r1
 8012194:	4611      	mov	r1, r2
 8012196:	461a      	mov	r2, r3
 8012198:	4603      	mov	r3, r0
 801219a:	817b      	strh	r3, [r7, #10]
 801219c:	460b      	mov	r3, r1
 801219e:	813b      	strh	r3, [r7, #8]
 80121a0:	4613      	mov	r3, r2
 80121a2:	80fb      	strh	r3, [r7, #6]
    int32_t k;
    int32_t x_at_y;
    /* At the beginning of the mask if the limit line is greater then the mask's y.
     * Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 80121a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121a6:	699b      	ldr	r3, [r3, #24]
 80121a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80121ac:	fb02 f303 	mul.w	r3, r2, r3
 80121b0:	129b      	asrs	r3, r3, #10
 80121b2:	63bb      	str	r3, [r7, #56]	; 0x38
    if(p->xy_steep > 0) x_at_y++;
 80121b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121b6:	699b      	ldr	r3, [r3, #24]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	dd02      	ble.n	80121c2 <line_mask_steep+0x38>
 80121bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121be:	3301      	adds	r3, #1
 80121c0:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y < abs_x) {
 80121c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80121c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121c8:	429a      	cmp	r2, r3
 80121ca:	da0b      	bge.n	80121e4 <line_mask_steep+0x5a>
        if(p->inv) {
 80121cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121d2:	f003 0302 	and.w	r3, r3, #2
 80121d6:	b2db      	uxtb	r3, r3
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d001      	beq.n	80121e0 <line_mask_steep+0x56>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80121dc:	2301      	movs	r3, #1
 80121de:	e213      	b.n	8012608 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_TRANSP;
 80121e0:	2300      	movs	r3, #0
 80121e2:	e211      	b.n	8012608 <line_mask_steep+0x47e>
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * (abs_y)) >> 10;
 80121e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121e6:	699b      	ldr	r3, [r3, #24]
 80121e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80121ec:	fb02 f303 	mul.w	r3, r2, r3
 80121f0:	129b      	asrs	r3, r3, #10
 80121f2:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y > abs_x + len) {
 80121f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80121f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121fc:	4413      	add	r3, r2
 80121fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012200:	429a      	cmp	r2, r3
 8012202:	dd0b      	ble.n	801221c <line_mask_steep+0x92>
        if(p->inv) {
 8012204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801220a:	f003 0302 	and.w	r3, r3, #2
 801220e:	b2db      	uxtb	r3, r3
 8012210:	2b00      	cmp	r3, #0
 8012212:	d001      	beq.n	8012218 <line_mask_steep+0x8e>
            return LV_DRAW_MASK_RES_TRANSP;
 8012214:	2300      	movs	r3, #0
 8012216:	e1f7      	b.n	8012608 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012218:	2301      	movs	r3, #1
 801221a:	e1f5      	b.n	8012608 <line_mask_steep+0x47e>
        }
    }

    /*X start*/
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 801221c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012220:	021b      	lsls	r3, r3, #8
 8012222:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012224:	6992      	ldr	r2, [r2, #24]
 8012226:	fb02 f303 	mul.w	r3, r2, r3
 801222a:	129b      	asrs	r3, r3, #10
 801222c:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xsi = xs >> 8;
 801222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012230:	121b      	asrs	r3, r3, #8
 8012232:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t xsf = xs & 0xFF;
 8012234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012236:	b2db      	uxtb	r3, r3
 8012238:	633b      	str	r3, [r7, #48]	; 0x30

    /*X end*/
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 801223a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801223e:	3301      	adds	r3, #1
 8012240:	021b      	lsls	r3, r3, #8
 8012242:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012244:	6992      	ldr	r2, [r2, #24]
 8012246:	fb02 f303 	mul.w	r3, r2, r3
 801224a:	129b      	asrs	r3, r3, #10
 801224c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t xei = xe >> 8;
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	121b      	asrs	r3, r3, #8
 8012252:	623b      	str	r3, [r7, #32]
    int32_t xef = xe & 0xFF;
 8012254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012256:	b2db      	uxtb	r3, r3
 8012258:	61fb      	str	r3, [r7, #28]

    lv_opa_t m;

    k = xsi - abs_x;
 801225a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801225e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012260:	1ad3      	subs	r3, r2, r3
 8012262:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 8012264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012266:	6a3b      	ldr	r3, [r7, #32]
 8012268:	429a      	cmp	r2, r3
 801226a:	d00d      	beq.n	8012288 <line_mask_steep+0xfe>
 801226c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801226e:	699b      	ldr	r3, [r3, #24]
 8012270:	2b00      	cmp	r3, #0
 8012272:	da09      	bge.n	8012288 <line_mask_steep+0xfe>
 8012274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012276:	2b00      	cmp	r3, #0
 8012278:	d106      	bne.n	8012288 <line_mask_steep+0xfe>
        xsf = 0xFF;
 801227a:	23ff      	movs	r3, #255	; 0xff
 801227c:	633b      	str	r3, [r7, #48]	; 0x30
        xsi = xei;
 801227e:	6a3b      	ldr	r3, [r7, #32]
 8012280:	637b      	str	r3, [r7, #52]	; 0x34
        k--;
 8012282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012284:	3b01      	subs	r3, #1
 8012286:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if(xsi == xei) {
 8012288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801228a:	6a3b      	ldr	r3, [r7, #32]
 801228c:	429a      	cmp	r2, r3
 801228e:	d165      	bne.n	801235c <line_mask_steep+0x1d2>
        if(k >= 0 && k < len) {
 8012290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012292:	2b00      	cmp	r3, #0
 8012294:	db25      	blt.n	80122e2 <line_mask_steep+0x158>
 8012296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801229a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801229c:	429a      	cmp	r2, r3
 801229e:	da20      	bge.n	80122e2 <line_mask_steep+0x158>
            m = (xsf + xef) >> 1;
 80122a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122a2:	69fb      	ldr	r3, [r7, #28]
 80122a4:	4413      	add	r3, r2
 80122a6:	105b      	asrs	r3, r3, #1
 80122a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(p->inv) m = 255 - m;
 80122ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122b2:	f003 0302 	and.w	r3, r3, #2
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d004      	beq.n	80122c6 <line_mask_steep+0x13c>
 80122bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122c0:	43db      	mvns	r3, r3
 80122c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80122c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122c8:	68fa      	ldr	r2, [r7, #12]
 80122ca:	4413      	add	r3, r2
 80122cc:	7818      	ldrb	r0, [r3, #0]
 80122ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122d0:	68fa      	ldr	r2, [r7, #12]
 80122d2:	18d4      	adds	r4, r2, r3
 80122d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122d8:	4619      	mov	r1, r3
 80122da:	f000 fda6 	bl	8012e2a <mask_mix>
 80122de:	4603      	mov	r3, r0
 80122e0:	7023      	strb	r3, [r4, #0]
        }
        k++;
 80122e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122e4:	3301      	adds	r3, #1
 80122e6:	63fb      	str	r3, [r7, #60]	; 0x3c

        if(p->inv) {
 80122e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122ee:	f003 0302 	and.w	r3, r3, #2
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d015      	beq.n	8012324 <line_mask_steep+0x19a>
            k = xsi - abs_x;
 80122f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80122fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122fe:	1ad3      	subs	r3, r2, r3
 8012300:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k >= len) {
 8012302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012308:	429a      	cmp	r2, r3
 801230a:	db01      	blt.n	8012310 <line_mask_steep+0x186>
                return LV_DRAW_MASK_RES_TRANSP;
 801230c:	2300      	movs	r3, #0
 801230e:	e17b      	b.n	8012608 <line_mask_steep+0x47e>
            }
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
 8012310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012312:	2b00      	cmp	r3, #0
 8012314:	f2c0 8177 	blt.w	8012606 <line_mask_steep+0x47c>
 8012318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801231a:	4619      	mov	r1, r3
 801231c:	68f8      	ldr	r0, [r7, #12]
 801231e:	f00a fd90 	bl	801ce42 <_lv_memset_00>
 8012322:	e170      	b.n	8012606 <line_mask_steep+0x47c>

        }
        else {
            if(k > len) k = len;
 8012324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801232a:	429a      	cmp	r2, r3
 801232c:	dd02      	ble.n	8012334 <line_mask_steep+0x1aa>
 801232e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012332:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8012334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012336:	2b00      	cmp	r3, #0
 8012338:	d101      	bne.n	801233e <line_mask_steep+0x1b4>
 801233a:	2300      	movs	r3, #0
 801233c:	e164      	b.n	8012608 <line_mask_steep+0x47e>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 801233e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012340:	2b00      	cmp	r3, #0
 8012342:	f340 8160 	ble.w	8012606 <line_mask_steep+0x47c>
 8012346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	18d0      	adds	r0, r2, r3
 801234c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012352:	1ad3      	subs	r3, r2, r3
 8012354:	4619      	mov	r1, r3
 8012356:	f00a fd74 	bl	801ce42 <_lv_memset_00>
 801235a:	e154      	b.n	8012606 <line_mask_steep+0x47c>
        }

    }
    else {
        int32_t y_inters;
        if(p->xy_steep < 0) {
 801235c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801235e:	699b      	ldr	r3, [r3, #24]
 8012360:	2b00      	cmp	r3, #0
 8012362:	f280 80a7 	bge.w	80124b4 <line_mask_steep+0x32a>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 8012366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012368:	69db      	ldr	r3, [r3, #28]
 801236a:	425b      	negs	r3, r3
 801236c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801236e:	fb02 f303 	mul.w	r3, r2, r3
 8012372:	129b      	asrs	r3, r3, #10
 8012374:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8012376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012378:	2b00      	cmp	r3, #0
 801237a:	db26      	blt.n	80123ca <line_mask_steep+0x240>
 801237c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012382:	429a      	cmp	r2, r3
 8012384:	da21      	bge.n	80123ca <line_mask_steep+0x240>
                m = (y_inters * xsf) >> 9;
 8012386:	69bb      	ldr	r3, [r7, #24]
 8012388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801238a:	fb02 f303 	mul.w	r3, r2, r3
 801238e:	125b      	asrs	r3, r3, #9
 8012390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801239a:	f003 0302 	and.w	r3, r3, #2
 801239e:	b2db      	uxtb	r3, r3
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d004      	beq.n	80123ae <line_mask_steep+0x224>
 80123a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123a8:	43db      	mvns	r3, r3
 80123aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80123ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123b0:	68fa      	ldr	r2, [r7, #12]
 80123b2:	4413      	add	r3, r2
 80123b4:	7818      	ldrb	r0, [r3, #0]
 80123b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123b8:	68fa      	ldr	r2, [r7, #12]
 80123ba:	18d4      	adds	r4, r2, r3
 80123bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123c0:	4619      	mov	r1, r3
 80123c2:	f000 fd32 	bl	8012e2a <mask_mix>
 80123c6:	4603      	mov	r3, r0
 80123c8:	7023      	strb	r3, [r4, #0]
            }
            k--;
 80123ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123cc:	3b01      	subs	r3, #1
 80123ce:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 80123d0:	69bb      	ldr	r3, [r7, #24]
 80123d2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80123d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80123d8:	6992      	ldr	r2, [r2, #24]
 80123da:	4252      	negs	r2, r2
 80123dc:	fb02 f303 	mul.w	r3, r2, r3
 80123e0:	129b      	asrs	r3, r3, #10
 80123e2:	613b      	str	r3, [r7, #16]

            if(k >= 0 && k < len) {
 80123e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	db2a      	blt.n	8012440 <line_mask_steep+0x2b6>
 80123ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80123f0:	429a      	cmp	r2, r3
 80123f2:	da25      	bge.n	8012440 <line_mask_steep+0x2b6>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 80123f4:	69bb      	ldr	r3, [r7, #24]
 80123f6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80123fa:	693a      	ldr	r2, [r7, #16]
 80123fc:	fb02 f303 	mul.w	r3, r2, r3
 8012400:	125b      	asrs	r3, r3, #9
 8012402:	b2db      	uxtb	r3, r3
 8012404:	43db      	mvns	r3, r3
 8012406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 801240a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801240c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012410:	f003 0302 	and.w	r3, r3, #2
 8012414:	b2db      	uxtb	r3, r3
 8012416:	2b00      	cmp	r3, #0
 8012418:	d004      	beq.n	8012424 <line_mask_steep+0x29a>
 801241a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801241e:	43db      	mvns	r3, r3
 8012420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	4413      	add	r3, r2
 801242a:	7818      	ldrb	r0, [r3, #0]
 801242c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801242e:	68fa      	ldr	r2, [r7, #12]
 8012430:	18d4      	adds	r4, r2, r3
 8012432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012436:	4619      	mov	r1, r3
 8012438:	f000 fcf7 	bl	8012e2a <mask_mix>
 801243c:	4603      	mov	r3, r0
 801243e:	7023      	strb	r3, [r4, #0]
            }

            k += 2;
 8012440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012442:	3302      	adds	r3, #2
 8012444:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8012446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801244c:	f003 0302 	and.w	r3, r3, #2
 8012450:	b2db      	uxtb	r3, r3
 8012452:	2b00      	cmp	r3, #0
 8012454:	d018      	beq.n	8012488 <line_mask_steep+0x2fe>
                k = xsi - abs_x - 1;
 8012456:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801245a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801245c:	1ad3      	subs	r3, r2, r3
 801245e:	3b01      	subs	r3, #1
 8012460:	63fb      	str	r3, [r7, #60]	; 0x3c

                if(k > len) k = len;
 8012462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012466:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012468:	429a      	cmp	r2, r3
 801246a:	dd03      	ble.n	8012474 <line_mask_steep+0x2ea>
 801246c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012472:	e0c8      	b.n	8012606 <line_mask_steep+0x47c>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 8012474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012476:	2b00      	cmp	r3, #0
 8012478:	f340 80c5 	ble.w	8012606 <line_mask_steep+0x47c>
 801247c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801247e:	4619      	mov	r1, r3
 8012480:	68f8      	ldr	r0, [r7, #12]
 8012482:	f00a fcde 	bl	801ce42 <_lv_memset_00>
 8012486:	e0be      	b.n	8012606 <line_mask_steep+0x47c>

            }
            else {
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8012488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801248c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801248e:	429a      	cmp	r2, r3
 8012490:	dd01      	ble.n	8012496 <line_mask_steep+0x30c>
 8012492:	2301      	movs	r3, #1
 8012494:	e0b8      	b.n	8012608 <line_mask_steep+0x47e>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
 8012496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012498:	2b00      	cmp	r3, #0
 801249a:	f2c0 80b4 	blt.w	8012606 <line_mask_steep+0x47c>
 801249e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124a0:	68fa      	ldr	r2, [r7, #12]
 80124a2:	18d0      	adds	r0, r2, r3
 80124a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80124a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124aa:	1ad3      	subs	r3, r2, r3
 80124ac:	4619      	mov	r1, r3
 80124ae:	f00a fcc8 	bl	801ce42 <_lv_memset_00>
 80124b2:	e0a8      	b.n	8012606 <line_mask_steep+0x47c>
            }

        }
        else {
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 80124b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80124ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80124bc:	69d2      	ldr	r2, [r2, #28]
 80124be:	fb02 f303 	mul.w	r3, r2, r3
 80124c2:	129b      	asrs	r3, r3, #10
 80124c4:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 80124c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	db2a      	blt.n	8012522 <line_mask_steep+0x398>
 80124cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80124d2:	429a      	cmp	r2, r3
 80124d4:	da25      	bge.n	8012522 <line_mask_steep+0x398>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 80124d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80124dc:	69ba      	ldr	r2, [r7, #24]
 80124de:	fb02 f303 	mul.w	r3, r2, r3
 80124e2:	125b      	asrs	r3, r3, #9
 80124e4:	b2db      	uxtb	r3, r3
 80124e6:	43db      	mvns	r3, r3
 80124e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 80124ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124f2:	f003 0302 	and.w	r3, r3, #2
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d004      	beq.n	8012506 <line_mask_steep+0x37c>
 80124fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012500:	43db      	mvns	r3, r3
 8012502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012508:	68fa      	ldr	r2, [r7, #12]
 801250a:	4413      	add	r3, r2
 801250c:	7818      	ldrb	r0, [r3, #0]
 801250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012510:	68fa      	ldr	r2, [r7, #12]
 8012512:	18d4      	adds	r4, r2, r3
 8012514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012518:	4619      	mov	r1, r3
 801251a:	f000 fc86 	bl	8012e2a <mask_mix>
 801251e:	4603      	mov	r3, r0
 8012520:	7023      	strb	r3, [r4, #0]
            }

            k++;
 8012522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012524:	3301      	adds	r3, #1
 8012526:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8012528:	69bb      	ldr	r3, [r7, #24]
 801252a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801252e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012530:	6992      	ldr	r2, [r2, #24]
 8012532:	fb02 f303 	mul.w	r3, r2, r3
 8012536:	129b      	asrs	r3, r3, #10
 8012538:	617b      	str	r3, [r7, #20]
            if(k >= 0 && k < len) {
 801253a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801253c:	2b00      	cmp	r3, #0
 801253e:	db28      	blt.n	8012592 <line_mask_steep+0x408>
 8012540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012546:	429a      	cmp	r2, r3
 8012548:	da23      	bge.n	8012592 <line_mask_steep+0x408>
                m = ((255 - y_inters) * x_inters) >> 9;
 801254a:	69bb      	ldr	r3, [r7, #24]
 801254c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012550:	697a      	ldr	r2, [r7, #20]
 8012552:	fb02 f303 	mul.w	r3, r2, r3
 8012556:	125b      	asrs	r3, r3, #9
 8012558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 801255c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801255e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012562:	f003 0302 	and.w	r3, r3, #2
 8012566:	b2db      	uxtb	r3, r3
 8012568:	2b00      	cmp	r3, #0
 801256a:	d004      	beq.n	8012576 <line_mask_steep+0x3ec>
 801256c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012570:	43db      	mvns	r3, r3
 8012572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012578:	68fa      	ldr	r2, [r7, #12]
 801257a:	4413      	add	r3, r2
 801257c:	7818      	ldrb	r0, [r3, #0]
 801257e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012580:	68fa      	ldr	r2, [r7, #12]
 8012582:	18d4      	adds	r4, r2, r3
 8012584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012588:	4619      	mov	r1, r3
 801258a:	f000 fc4e 	bl	8012e2a <mask_mix>
 801258e:	4603      	mov	r3, r0
 8012590:	7023      	strb	r3, [r4, #0]
            }
            k++;
 8012592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012594:	3301      	adds	r3, #1
 8012596:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8012598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801259a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801259e:	f003 0302 	and.w	r3, r3, #2
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d014      	beq.n	80125d2 <line_mask_steep+0x448>
                k = xsi - abs_x;
 80125a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80125ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 80125b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125b8:	429a      	cmp	r2, r3
 80125ba:	dd01      	ble.n	80125c0 <line_mask_steep+0x436>
 80125bc:	2300      	movs	r3, #0
 80125be:	e023      	b.n	8012608 <line_mask_steep+0x47e>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 80125c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	db1f      	blt.n	8012606 <line_mask_steep+0x47c>
 80125c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125c8:	4619      	mov	r1, r3
 80125ca:	68f8      	ldr	r0, [r7, #12]
 80125cc:	f00a fc39 	bl	801ce42 <_lv_memset_00>
 80125d0:	e019      	b.n	8012606 <line_mask_steep+0x47c>

            }
            else {
                if(k > len) k = len;
 80125d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125d8:	429a      	cmp	r2, r3
 80125da:	dd02      	ble.n	80125e2 <line_mask_steep+0x458>
 80125dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 80125e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d101      	bne.n	80125ec <line_mask_steep+0x462>
 80125e8:	2300      	movs	r3, #0
 80125ea:	e00d      	b.n	8012608 <line_mask_steep+0x47e>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 80125ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	dd09      	ble.n	8012606 <line_mask_steep+0x47c>
 80125f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125f4:	68fa      	ldr	r2, [r7, #12]
 80125f6:	18d0      	adds	r0, r2, r3
 80125f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80125fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125fe:	1ad3      	subs	r3, r2, r3
 8012600:	4619      	mov	r1, r3
 8012602:	f00a fc1e 	bl	801ce42 <_lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8012606:	2302      	movs	r3, #2
}
 8012608:	4618      	mov	r0, r3
 801260a:	3744      	adds	r7, #68	; 0x44
 801260c:	46bd      	mov	sp, r7
 801260e:	bd90      	pop	{r4, r7, pc}

08012610 <lv_draw_mask_radius>:
}

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                    lv_coord_t abs_y, lv_coord_t len,
                                                                    lv_draw_mask_radius_param_t * p)
{
 8012610:	b590      	push	{r4, r7, lr}
 8012612:	b0a3      	sub	sp, #140	; 0x8c
 8012614:	af00      	add	r7, sp, #0
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	4608      	mov	r0, r1
 801261a:	4611      	mov	r1, r2
 801261c:	461a      	mov	r2, r3
 801261e:	4603      	mov	r3, r0
 8012620:	817b      	strh	r3, [r7, #10]
 8012622:	460b      	mov	r3, r1
 8012624:	813b      	strh	r3, [r7, #8]
 8012626:	4613      	mov	r3, r2
 8012628:	80fb      	strh	r3, [r7, #6]
    bool outer = p->cfg.outer;
 801262a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801262e:	7c9b      	ldrb	r3, [r3, #18]
 8012630:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8012634:	b2db      	uxtb	r3, r3
 8012636:	2b00      	cmp	r3, #0
 8012638:	bf14      	ite	ne
 801263a:	2301      	movne	r3, #1
 801263c:	2300      	moveq	r3, #0
 801263e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    int32_t radius = p->cfg.radius;
 8012642:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012646:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801264a:	653b      	str	r3, [r7, #80]	; 0x50
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);
 801264c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012650:	f103 0208 	add.w	r2, r3, #8
 8012654:	f107 0320 	add.w	r3, r7, #32
 8012658:	4611      	mov	r1, r2
 801265a:	4618      	mov	r0, r3
 801265c:	f7ff f876 	bl	801174c <lv_area_copy>

    if(outer == false) {
 8012660:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012664:	f083 0301 	eor.w	r3, r3, #1
 8012668:	b2db      	uxtb	r3, r3
 801266a:	2b00      	cmp	r3, #0
 801266c:	d00d      	beq.n	801268a <lv_draw_mask_radius+0x7a>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 801266e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012672:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012676:	429a      	cmp	r2, r3
 8012678:	db05      	blt.n	8012686 <lv_draw_mask_radius+0x76>
 801267a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801267e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012682:	429a      	cmp	r2, r3
 8012684:	dd0f      	ble.n	80126a6 <lv_draw_mask_radius+0x96>
            return LV_DRAW_MASK_RES_TRANSP;
 8012686:	2300      	movs	r3, #0
 8012688:	e3cb      	b.n	8012e22 <lv_draw_mask_radius+0x812>
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 801268a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801268e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012692:	429a      	cmp	r2, r3
 8012694:	db05      	blt.n	80126a2 <lv_draw_mask_radius+0x92>
 8012696:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801269a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801269e:	429a      	cmp	r2, r3
 80126a0:	dd01      	ble.n	80126a6 <lv_draw_mask_radius+0x96>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80126a2:	2301      	movs	r3, #1
 80126a4:	e3bd      	b.n	8012e22 <lv_draw_mask_radius+0x812>
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80126a6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80126aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80126ae:	4619      	mov	r1, r3
 80126b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126b2:	440b      	add	r3, r1
 80126b4:	429a      	cmp	r2, r3
 80126b6:	db0b      	blt.n	80126d0 <lv_draw_mask_radius+0xc0>
 80126b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80126bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126c0:	441a      	add	r2, r3
 80126c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80126c6:	4619      	mov	r1, r3
 80126c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126ca:	1acb      	subs	r3, r1, r3
 80126cc:	429a      	cmp	r2, r3
 80126ce:	dd13      	ble.n	80126f8 <lv_draw_mask_radius+0xe8>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80126d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80126d4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80126d8:	4619      	mov	r1, r3
 80126da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126dc:	440b      	add	r3, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80126de:	429a      	cmp	r2, r3
 80126e0:	f2c0 8090 	blt.w	8012804 <lv_draw_mask_radius+0x1f4>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80126e4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80126e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80126ec:	4619      	mov	r1, r3
 80126ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126f0:	1acb      	subs	r3, r1, r3
 80126f2:	429a      	cmp	r2, r3
 80126f4:	f300 8086 	bgt.w	8012804 <lv_draw_mask_radius+0x1f4>
        if(outer == false) {
 80126f8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80126fc:	f083 0301 	eor.w	r3, r3, #1
 8012700:	b2db      	uxtb	r3, r3
 8012702:	2b00      	cmp	r3, #0
 8012704:	d03d      	beq.n	8012782 <lv_draw_mask_radius+0x172>
            /*Remove the edges*/
            int32_t last =  rect.x1 - abs_x;
 8012706:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801270a:	461a      	mov	r2, r3
 801270c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	62fb      	str	r3, [r7, #44]	; 0x2c
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8012714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801271a:	429a      	cmp	r2, r3
 801271c:	dd01      	ble.n	8012722 <lv_draw_mask_radius+0x112>
 801271e:	2300      	movs	r3, #0
 8012720:	e37f      	b.n	8012e22 <lv_draw_mask_radius+0x812>
            if(last >= 0) {
 8012722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012724:	2b00      	cmp	r3, #0
 8012726:	db04      	blt.n	8012732 <lv_draw_mask_radius+0x122>
                _lv_memset_00(&mask_buf[0], last);
 8012728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272a:	4619      	mov	r1, r3
 801272c:	68f8      	ldr	r0, [r7, #12]
 801272e:	f00a fb88 	bl	801ce42 <_lv_memset_00>
            }

            int32_t first = rect.x2 - abs_x + 1;
 8012732:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012736:	461a      	mov	r2, r3
 8012738:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	3301      	adds	r3, #1
 8012740:	62bb      	str	r3, [r7, #40]	; 0x28
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8012742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012744:	2b00      	cmp	r3, #0
 8012746:	dc01      	bgt.n	801274c <lv_draw_mask_radius+0x13c>
 8012748:	2300      	movs	r3, #0
 801274a:	e36a      	b.n	8012e22 <lv_draw_mask_radius+0x812>
            else if(first < len) {
 801274c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012752:	429a      	cmp	r2, r3
 8012754:	da09      	bge.n	801276a <lv_draw_mask_radius+0x15a>
                _lv_memset_00(&mask_buf[first], len - first);
 8012756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	18d0      	adds	r0, r2, r3
 801275c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012762:	1ad3      	subs	r3, r2, r3
 8012764:	4619      	mov	r1, r3
 8012766:	f00a fb6c 	bl	801ce42 <_lv_memset_00>
            }
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 801276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276c:	2b00      	cmp	r3, #0
 801276e:	d106      	bne.n	801277e <lv_draw_mask_radius+0x16e>
 8012770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012776:	429a      	cmp	r2, r3
 8012778:	d101      	bne.n	801277e <lv_draw_mask_radius+0x16e>
 801277a:	2301      	movs	r3, #1
 801277c:	e351      	b.n	8012e22 <lv_draw_mask_radius+0x812>
            else return LV_DRAW_MASK_RES_CHANGED;
 801277e:	2302      	movs	r3, #2
 8012780:	e34f      	b.n	8012e22 <lv_draw_mask_radius+0x812>
        }
        else {
            int32_t first = rect.x1 - abs_x;
 8012782:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012786:	461a      	mov	r2, r3
 8012788:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801278c:	1ad3      	subs	r3, r2, r3
 801278e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            if(first < 0) first = 0;
 8012792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012796:	2b00      	cmp	r3, #0
 8012798:	da02      	bge.n	80127a0 <lv_draw_mask_radius+0x190>
 801279a:	2300      	movs	r3, #0
 801279c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            if(first <= len) {
 80127a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80127a8:	429a      	cmp	r2, r3
 80127aa:	dc29      	bgt.n	8012800 <lv_draw_mask_radius+0x1f0>
                int32_t last =  rect.x2 - abs_x - first + 1;
 80127ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80127b0:	461a      	mov	r2, r3
 80127b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80127b6:	1ad2      	subs	r2, r2, r3
 80127b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127bc:	1ad3      	subs	r3, r2, r3
 80127be:	3301      	adds	r3, #1
 80127c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                if(first + last > len) last = len - first;
 80127c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80127c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80127cc:	441a      	add	r2, r3
 80127ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127d2:	429a      	cmp	r2, r3
 80127d4:	dd06      	ble.n	80127e4 <lv_draw_mask_radius+0x1d4>
 80127d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80127da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127de:	1ad3      	subs	r3, r2, r3
 80127e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                if(last >= 0) {
 80127e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	db09      	blt.n	8012800 <lv_draw_mask_radius+0x1f0>
                    _lv_memset_00(&mask_buf[first], last);
 80127ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127f0:	68fa      	ldr	r2, [r7, #12]
 80127f2:	4413      	add	r3, r2
 80127f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80127f8:	4611      	mov	r1, r2
 80127fa:	4618      	mov	r0, r3
 80127fc:	f00a fb21 	bl	801ce42 <_lv_memset_00>
                }
            }
        }
        return LV_DRAW_MASK_RES_CHANGED;
 8012800:	2302      	movs	r3, #2
 8012802:	e30e      	b.n	8012e22 <lv_draw_mask_radius+0x812>
    }

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 8012804:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012808:	461a      	mov	r2, r3
 801280a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w = lv_area_get_width(&rect);
 8012812:	f107 0320 	add.w	r3, r7, #32
 8012816:	4618      	mov	r0, r3
 8012818:	f7fe ffa6 	bl	8011768 <lv_area_get_width>
 801281c:	4603      	mov	r3, r0
 801281e:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t h = lv_area_get_height(&rect);
 8012820:	f107 0320 	add.w	r3, r7, #32
 8012824:	4618      	mov	r0, r3
 8012826:	f7fe ffb6 	bl	8011796 <lv_area_get_height>
 801282a:	4603      	mov	r3, r0
 801282c:	647b      	str	r3, [r7, #68]	; 0x44
    abs_x -= rect.x1;
 801282e:	897a      	ldrh	r2, [r7, #10]
 8012830:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012834:	b29b      	uxth	r3, r3
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	b29b      	uxth	r3, r3
 801283a:	817b      	strh	r3, [r7, #10]
    abs_y -= rect.y1;
 801283c:	893a      	ldrh	r2, [r7, #8]
 801283e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012842:	b29b      	uxth	r3, r3
 8012844:	1ad3      	subs	r3, r2, r3
 8012846:	b29b      	uxth	r3, r3
 8012848:	813b      	strh	r3, [r7, #8]

    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 801284a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801284e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012852:	461a      	mov	r2, r3
 8012854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012858:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801285c:	fb03 f302 	mul.w	r3, r3, r2
 8012860:	643b      	str	r3, [r7, #64]	; 0x40

    /*Handle corner areas*/
    if(abs_y < radius || abs_y > h - radius - 1) {
 8012862:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012866:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012868:	429a      	cmp	r2, r3
 801286a:	dc08      	bgt.n	801287e <lv_draw_mask_radius+0x26e>
 801286c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012870:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012874:	1acb      	subs	r3, r1, r3
 8012876:	3b01      	subs	r3, #1
 8012878:	429a      	cmp	r2, r3
 801287a:	f340 82d1 	ble.w	8012e20 <lv_draw_mask_radius+0x810>

        uint32_t sqrt_mask;
        if(radius <= 32) sqrt_mask = 0x200;
 801287e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012880:	2b20      	cmp	r3, #32
 8012882:	dc02      	bgt.n	801288a <lv_draw_mask_radius+0x27a>
 8012884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012888:	67fb      	str	r3, [r7, #124]	; 0x7c
        if(radius <= 256) sqrt_mask = 0x800;
 801288a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801288c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012890:	dc03      	bgt.n	801289a <lv_draw_mask_radius+0x28a>
 8012892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012896:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012898:	e002      	b.n	80128a0 <lv_draw_mask_radius+0x290>
        else sqrt_mask = 0x8000;
 801289a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801289e:	67fb      	str	r3, [r7, #124]	; 0x7c

        lv_sqrt_res_t x0;
        lv_sqrt_res_t x1;
        /* y = 0 should mean the top of the circle */
        int32_t y;
        if(abs_y < radius) {
 80128a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80128a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80128a6:	429a      	cmp	r2, r3
 80128a8:	dd3d      	ble.n	8012926 <lv_draw_mask_radius+0x316>
            y = radius - abs_y;
 80128aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80128ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Get the x intersection points for `abs_y` and `abs_y-1`
             * Use the circle's equation x = sqrt(r^2 - y^2)
             * Try to use the values from the previous run*/
            if(y == p->y_prev) {
 80128b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80128b8:	695b      	ldr	r3, [r3, #20]
 80128ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80128bc:	429a      	cmp	r2, r3
 80128be:	d108      	bne.n	80128d2 <lv_draw_mask_radius+0x2c2>
                x0.f = p->y_prev_x.f;
 80128c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80128c4:	8b5b      	ldrh	r3, [r3, #26]
 80128c6:	83fb      	strh	r3, [r7, #30]
                x0.i = p->y_prev_x.i;
 80128c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80128cc:	8b1b      	ldrh	r3, [r3, #24]
 80128ce:	83bb      	strh	r3, [r7, #28]
 80128d0:	e00c      	b.n	80128ec <lv_draw_mask_radius+0x2dc>
            }
            else {
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 80128d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80128d6:	fb02 f303 	mul.w	r3, r2, r3
 80128da:	461a      	mov	r2, r3
 80128dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128de:	1a9b      	subs	r3, r3, r2
 80128e0:	f107 011c 	add.w	r1, r7, #28
 80128e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80128e6:	4618      	mov	r0, r3
 80128e8:	f009 fcee 	bl	801c2c8 <_lv_sqrt>
            }
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 80128ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128ee:	3b01      	subs	r3, #1
 80128f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80128f2:	3a01      	subs	r2, #1
 80128f4:	fb02 f303 	mul.w	r3, r2, r3
 80128f8:	461a      	mov	r2, r3
 80128fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128fc:	1a9b      	subs	r3, r3, r2
 80128fe:	f107 0118 	add.w	r1, r7, #24
 8012902:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012904:	4618      	mov	r0, r3
 8012906:	f009 fcdf 	bl	801c2c8 <_lv_sqrt>
            p->y_prev = y - 1;
 801290a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801290c:	1e5a      	subs	r2, r3, #1
 801290e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012912:	615a      	str	r2, [r3, #20]
            p->y_prev_x.f = x1.f;
 8012914:	8b7a      	ldrh	r2, [r7, #26]
 8012916:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801291a:	835a      	strh	r2, [r3, #26]
            p->y_prev_x.i = x1.i;
 801291c:	8b3a      	ldrh	r2, [r7, #24]
 801291e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012922:	831a      	strh	r2, [r3, #24]
 8012924:	e03f      	b.n	80129a6 <lv_draw_mask_radius+0x396>
        }
        else {
            y = radius - (h - abs_y) + 1;
 8012926:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801292a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801292c:	1ad3      	subs	r3, r2, r3
 801292e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012930:	1ad3      	subs	r3, r2, r3
 8012932:	3301      	adds	r3, #1
 8012934:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Get the x intersection points for `abs_y` and `abs_y-1`
             * Use the circle's equation x = sqrt(r^2 - y^2)
             * Try to use the values from the previous run*/
            if((y - 1) == p->y_prev) {
 8012936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012938:	1e5a      	subs	r2, r3, #1
 801293a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801293e:	695b      	ldr	r3, [r3, #20]
 8012940:	429a      	cmp	r2, r3
 8012942:	d108      	bne.n	8012956 <lv_draw_mask_radius+0x346>
                x1.f = p->y_prev_x.f;
 8012944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012948:	8b5b      	ldrh	r3, [r3, #26]
 801294a:	837b      	strh	r3, [r7, #26]
                x1.i = p->y_prev_x.i;
 801294c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012950:	8b1b      	ldrh	r3, [r3, #24]
 8012952:	833b      	strh	r3, [r7, #24]
 8012954:	e00e      	b.n	8012974 <lv_draw_mask_radius+0x364>
            }
            else {
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 8012956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012958:	3b01      	subs	r3, #1
 801295a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801295c:	3a01      	subs	r2, #1
 801295e:	fb02 f303 	mul.w	r3, r2, r3
 8012962:	461a      	mov	r2, r3
 8012964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012966:	1a9b      	subs	r3, r3, r2
 8012968:	f107 0118 	add.w	r1, r7, #24
 801296c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801296e:	4618      	mov	r0, r3
 8012970:	f009 fcaa 	bl	801c2c8 <_lv_sqrt>
            }

            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 8012974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012976:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012978:	fb02 f303 	mul.w	r3, r2, r3
 801297c:	461a      	mov	r2, r3
 801297e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012980:	1a9b      	subs	r3, r3, r2
 8012982:	f107 011c 	add.w	r1, r7, #28
 8012986:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012988:	4618      	mov	r0, r3
 801298a:	f009 fc9d 	bl	801c2c8 <_lv_sqrt>
            p->y_prev = y;
 801298e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012992:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012994:	615a      	str	r2, [r3, #20]
            p->y_prev_x.f = x0.f;
 8012996:	8bfa      	ldrh	r2, [r7, #30]
 8012998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801299c:	835a      	strh	r2, [r3, #26]
            p->y_prev_x.i = x0.i;
 801299e:	8bba      	ldrh	r2, [r7, #28]
 80129a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80129a4:	831a      	strh	r2, [r3, #24]
        }

        /* If x1 is on the next round coordinate (e.g. x0: 3.5, x1:4.0)
         * then treat x1 as x1: 3.99 to handle them as they were on the same pixel*/
        if(x0.i == x1.i - 1 && x1.f == 0) {
 80129a6:	8bbb      	ldrh	r3, [r7, #28]
 80129a8:	461a      	mov	r2, r3
 80129aa:	8b3b      	ldrh	r3, [r7, #24]
 80129ac:	3b01      	subs	r3, #1
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d108      	bne.n	80129c4 <lv_draw_mask_radius+0x3b4>
 80129b2:	8b7b      	ldrh	r3, [r7, #26]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d105      	bne.n	80129c4 <lv_draw_mask_radius+0x3b4>
            x1.i--;
 80129b8:	8b3b      	ldrh	r3, [r7, #24]
 80129ba:	3b01      	subs	r3, #1
 80129bc:	b29b      	uxth	r3, r3
 80129be:	833b      	strh	r3, [r7, #24]
            x1.f = 0xFF;
 80129c0:	23ff      	movs	r3, #255	; 0xff
 80129c2:	837b      	strh	r3, [r7, #26]
        }

        /*If the two x intersections are on the same x then just get average of the fractions*/
        if(x0.i == x1.i) {
 80129c4:	8bba      	ldrh	r2, [r7, #28]
 80129c6:	8b3b      	ldrh	r3, [r7, #24]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	f040 80a9 	bne.w	8012b20 <lv_draw_mask_radius+0x510>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 80129ce:	8bfb      	ldrh	r3, [r7, #30]
 80129d0:	461a      	mov	r2, r3
 80129d2:	8b7b      	ldrh	r3, [r7, #26]
 80129d4:	4413      	add	r3, r2
 80129d6:	105b      	asrs	r3, r3, #1
 80129d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            if(outer) m = 255 - m;
 80129dc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d004      	beq.n	80129ee <lv_draw_mask_radius+0x3de>
 80129e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80129e8:	43db      	mvns	r3, r3
 80129ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            int32_t ofs = radius - x0.i - 1;
 80129ee:	8bbb      	ldrh	r3, [r7, #28]
 80129f0:	461a      	mov	r2, r3
 80129f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129f4:	1a9b      	subs	r3, r3, r2
 80129f6:	3b01      	subs	r3, #1
 80129f8:	63bb      	str	r3, [r7, #56]	; 0x38

            /*Left corner*/
            int32_t kl = k + ofs;
 80129fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80129fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129fe:	4413      	add	r3, r2
 8012a00:	637b      	str	r3, [r7, #52]	; 0x34

            if(kl >= 0 && kl < len) {
 8012a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	db12      	blt.n	8012a2e <lv_draw_mask_radius+0x41e>
 8012a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	da0d      	bge.n	8012a2e <lv_draw_mask_radius+0x41e>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8012a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	4413      	add	r3, r2
 8012a18:	7818      	ldrb	r0, [r3, #0]
 8012a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	18d4      	adds	r4, r2, r3
 8012a20:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012a24:	4619      	mov	r1, r3
 8012a26:	f000 fa00 	bl	8012e2a <mask_mix>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	7023      	strb	r3, [r4, #0]
            }

            /*Right corner*/
            int32_t kr = k + (w - ofs - 1);
 8012a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a32:	1ad3      	subs	r3, r2, r3
 8012a34:	3b01      	subs	r3, #1
 8012a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012a38:	4413      	add	r3, r2
 8012a3a:	633b      	str	r3, [r7, #48]	; 0x30
            if(kr >= 0 && kr < len) {
 8012a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	db12      	blt.n	8012a68 <lv_draw_mask_radius+0x458>
 8012a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	da0d      	bge.n	8012a68 <lv_draw_mask_radius+0x458>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8012a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a4e:	68fa      	ldr	r2, [r7, #12]
 8012a50:	4413      	add	r3, r2
 8012a52:	7818      	ldrb	r0, [r3, #0]
 8012a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a56:	68fa      	ldr	r2, [r7, #12]
 8012a58:	18d4      	adds	r4, r2, r3
 8012a5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012a5e:	4619      	mov	r1, r3
 8012a60:	f000 f9e3 	bl	8012e2a <mask_mix>
 8012a64:	4603      	mov	r3, r0
 8012a66:	7023      	strb	r3, [r4, #0]
            }

            /*Clear the unused parts*/
            if(outer == false) {
 8012a68:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012a6c:	f083 0301 	eor.w	r3, r3, #1
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d027      	beq.n	8012ac6 <lv_draw_mask_radius+0x4b6>
                kr++;
 8012a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a78:	3301      	adds	r3, #1
 8012a7a:	633b      	str	r3, [r7, #48]	; 0x30
                if(kl > len)  {
 8012a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a82:	429a      	cmp	r2, r3
 8012a84:	dd01      	ble.n	8012a8a <lv_draw_mask_radius+0x47a>
                    return LV_DRAW_MASK_RES_TRANSP;
 8012a86:	2300      	movs	r3, #0
 8012a88:	e1cb      	b.n	8012e22 <lv_draw_mask_radius+0x812>
                }
                if(kl >= 0) {
 8012a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	db04      	blt.n	8012a9a <lv_draw_mask_radius+0x48a>
                    _lv_memset_00(&mask_buf[0], kl);
 8012a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a92:	4619      	mov	r1, r3
 8012a94:	68f8      	ldr	r0, [r7, #12]
 8012a96:	f00a f9d4 	bl	801ce42 <_lv_memset_00>
                }
                if(kr < 0) {
 8012a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	da01      	bge.n	8012aa4 <lv_draw_mask_radius+0x494>
                    return LV_DRAW_MASK_RES_TRANSP;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	e1be      	b.n	8012e22 <lv_draw_mask_radius+0x812>
                }
                if(kr <= len) {
 8012aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	f300 81b8 	bgt.w	8012e20 <lv_draw_mask_radius+0x810>
                    _lv_memset_00(&mask_buf[kr], len - kr);
 8012ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab2:	68fa      	ldr	r2, [r7, #12]
 8012ab4:	18d0      	adds	r0, r2, r3
 8012ab6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012abc:	1ad3      	subs	r3, r2, r3
 8012abe:	4619      	mov	r1, r3
 8012ac0:	f00a f9bf 	bl	801ce42 <_lv_memset_00>
 8012ac4:	e1ac      	b.n	8012e20 <lv_draw_mask_radius+0x810>
                }
            }
            else {
                kl++;
 8012ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ac8:	3301      	adds	r3, #1
 8012aca:	637b      	str	r3, [r7, #52]	; 0x34
                int32_t first = kl;
 8012acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ace:	673b      	str	r3, [r7, #112]	; 0x70
                if(first < 0) first = 0;
 8012ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	da01      	bge.n	8012ada <lv_draw_mask_radius+0x4ca>
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	673b      	str	r3, [r7, #112]	; 0x70

                int32_t len_tmp = kr - first;
 8012ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ade:	1ad3      	subs	r3, r2, r3
 8012ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
                if(len_tmp + first > len) len_tmp = len - first;
 8012ae2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ae6:	441a      	add	r2, r3
 8012ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	dd04      	ble.n	8012afa <lv_draw_mask_radius+0x4ea>
 8012af0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012af4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012af6:	1ad3      	subs	r3, r2, r3
 8012af8:	66fb      	str	r3, [r7, #108]	; 0x6c
                if(first < len && len_tmp >= 0) {
 8012afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012afe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012b00:	429a      	cmp	r2, r3
 8012b02:	f280 818d 	bge.w	8012e20 <lv_draw_mask_radius+0x810>
 8012b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	f2c0 8189 	blt.w	8012e20 <lv_draw_mask_radius+0x810>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 8012b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b10:	68fa      	ldr	r2, [r7, #12]
 8012b12:	4413      	add	r3, r2
 8012b14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012b16:	4611      	mov	r1, r2
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f00a f992 	bl	801ce42 <_lv_memset_00>
 8012b1e:	e17f      	b.n	8012e20 <lv_draw_mask_radius+0x810>
                }
            }
        }
        /*Multiple pixels are affected. Get y intersection of the pixels*/
        else {
            int32_t ofs = radius - (x0.i + 1);
 8012b20:	8bbb      	ldrh	r3, [r7, #28]
 8012b22:	3301      	adds	r3, #1
 8012b24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b26:	1ad3      	subs	r3, r2, r3
 8012b28:	63fb      	str	r3, [r7, #60]	; 0x3c
            int32_t kl = k + ofs;
 8012b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b2e:	4413      	add	r3, r2
 8012b30:	66bb      	str	r3, [r7, #104]	; 0x68
            int32_t kr = k + (w - ofs - 1);
 8012b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b36:	1ad3      	subs	r3, r2, r3
 8012b38:	3b01      	subs	r3, #1
 8012b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b3c:	4413      	add	r3, r2
 8012b3e:	667b      	str	r3, [r7, #100]	; 0x64

            if(outer) {
 8012b40:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d027      	beq.n	8012b98 <lv_draw_mask_radius+0x588>
                int32_t first = kl + 1;
 8012b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	663b      	str	r3, [r7, #96]	; 0x60
                if(first < 0) first = 0;
 8012b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	da01      	bge.n	8012b58 <lv_draw_mask_radius+0x548>
 8012b54:	2300      	movs	r3, #0
 8012b56:	663b      	str	r3, [r7, #96]	; 0x60

                int32_t len_tmp = kr - first;
 8012b58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b5c:	1ad3      	subs	r3, r2, r3
 8012b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
                if(len_tmp + first > len) len_tmp = len - first;
 8012b60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b64:	441a      	add	r2, r3
 8012b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	dd04      	ble.n	8012b78 <lv_draw_mask_radius+0x568>
 8012b6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b74:	1ad3      	subs	r3, r2, r3
 8012b76:	65fb      	str	r3, [r7, #92]	; 0x5c
                if(first < len && len_tmp >= 0) {
 8012b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	da0a      	bge.n	8012b98 <lv_draw_mask_radius+0x588>
 8012b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	db07      	blt.n	8012b98 <lv_draw_mask_radius+0x588>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 8012b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b8a:	68fa      	ldr	r2, [r7, #12]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012b90:	4611      	mov	r1, r2
 8012b92:	4618      	mov	r0, r3
 8012b94:	f00a f955 	bl	801ce42 <_lv_memset_00>
                }
            }

            uint32_t i = x0.i + 1;
 8012b98:	8bbb      	ldrh	r3, [r7, #28]
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	65bb      	str	r3, [r7, #88]	; 0x58
            lv_opa_t m;
            lv_sqrt_res_t y_prev;
            lv_sqrt_res_t y_next;

            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 8012b9e:	8bbb      	ldrh	r3, [r7, #28]
 8012ba0:	8bba      	ldrh	r2, [r7, #28]
 8012ba2:	fb02 f303 	mul.w	r3, r2, r3
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012baa:	1a9b      	subs	r3, r3, r2
 8012bac:	f107 0114 	add.w	r1, r7, #20
 8012bb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f009 fb88 	bl	801c2c8 <_lv_sqrt>

            if(y_prev.f == 0) {
 8012bb8:	8afb      	ldrh	r3, [r7, #22]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d105      	bne.n	8012bca <lv_draw_mask_radius+0x5ba>
                y_prev.i--;
 8012bbe:	8abb      	ldrh	r3, [r7, #20]
 8012bc0:	3b01      	subs	r3, #1
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	82bb      	strh	r3, [r7, #20]
                y_prev.f = 0xFF;
 8012bc6:	23ff      	movs	r3, #255	; 0xff
 8012bc8:	82fb      	strh	r3, [r7, #22]
            }

            /*The first y intersection is special as it might be in the previous line*/
            if(y_prev.i >= y) {
 8012bca:	8abb      	ldrh	r3, [r7, #20]
 8012bcc:	461a      	mov	r2, r3
 8012bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012bd0:	4293      	cmp	r3, r2
 8012bd2:	f300 80ae 	bgt.w	8012d32 <lv_draw_mask_radius+0x722>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 8012bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012bda:	fb02 f303 	mul.w	r3, r2, r3
 8012bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012be0:	1ad3      	subs	r3, r2, r3
 8012be2:	f107 0110 	add.w	r1, r7, #16
 8012be6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012be8:	4618      	mov	r0, r3
 8012bea:	f009 fb6d 	bl	801c2c8 <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 8012bee:	8bfb      	ldrh	r3, [r7, #30]
 8012bf0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012bf4:	8a7a      	ldrh	r2, [r7, #18]
 8012bf6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8012bfa:	fb02 f303 	mul.w	r3, r2, r3
 8012bfe:	125b      	asrs	r3, r3, #9
 8012c00:	b2db      	uxtb	r3, r3
 8012c02:	43db      	mvns	r3, r3
 8012c04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(outer) m = 255 - m;
 8012c08:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d004      	beq.n	8012c1a <lv_draw_mask_radius+0x60a>
 8012c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c14:	43db      	mvns	r3, r3
 8012c16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8012c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	db12      	blt.n	8012c46 <lv_draw_mask_radius+0x636>
 8012c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012c26:	429a      	cmp	r2, r3
 8012c28:	da0d      	bge.n	8012c46 <lv_draw_mask_radius+0x636>
 8012c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	4413      	add	r3, r2
 8012c30:	7818      	ldrb	r0, [r3, #0]
 8012c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c34:	68fa      	ldr	r2, [r7, #12]
 8012c36:	18d4      	adds	r4, r2, r3
 8012c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	f000 f8f4 	bl	8012e2a <mask_mix>
 8012c42:	4603      	mov	r3, r0
 8012c44:	7023      	strb	r3, [r4, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8012c46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	db12      	blt.n	8012c72 <lv_draw_mask_radius+0x662>
 8012c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012c52:	429a      	cmp	r2, r3
 8012c54:	da0d      	bge.n	8012c72 <lv_draw_mask_radius+0x662>
 8012c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c58:	68fa      	ldr	r2, [r7, #12]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	7818      	ldrb	r0, [r3, #0]
 8012c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c60:	68fa      	ldr	r2, [r7, #12]
 8012c62:	18d4      	adds	r4, r2, r3
 8012c64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c68:	4619      	mov	r1, r3
 8012c6a:	f000 f8de 	bl	8012e2a <mask_mix>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	7023      	strb	r3, [r4, #0]
                kl--;
 8012c72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c74:	3b01      	subs	r3, #1
 8012c76:	66bb      	str	r3, [r7, #104]	; 0x68
                kr++;
 8012c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c7a:	3301      	adds	r3, #1
 8012c7c:	667b      	str	r3, [r7, #100]	; 0x64
                y_prev.f = y_next.f;
 8012c7e:	8a7b      	ldrh	r3, [r7, #18]
 8012c80:	82fb      	strh	r3, [r7, #22]
                i++;
 8012c82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c84:	3301      	adds	r3, #1
 8012c86:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /*Set all points which are crossed by the circle*/
            for(; i <= x1.i; i++) {
 8012c88:	e053      	b.n	8012d32 <lv_draw_mask_radius+0x722>
                /* These values are very close to each other. It's enough to approximate sqrt
                 * The non-approximated version is lv_sqrt(r2 - (i * i), &y_next, sqrt_mask); */
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 8012c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012c8e:	fb02 f303 	mul.w	r3, r2, r3
 8012c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c94:	1ad2      	subs	r2, r2, r3
 8012c96:	f107 0114 	add.w	r1, r7, #20
 8012c9a:	f107 0310 	add.w	r3, r7, #16
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f000 f8e7 	bl	8012e72 <sqrt_approx>

                m = (y_prev.f + y_next.f) >> 1;
 8012ca4:	8afb      	ldrh	r3, [r7, #22]
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	8a7b      	ldrh	r3, [r7, #18]
 8012caa:	4413      	add	r3, r2
 8012cac:	105b      	asrs	r3, r3, #1
 8012cae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(outer) m = 255 - m;
 8012cb2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d004      	beq.n	8012cc4 <lv_draw_mask_radius+0x6b4>
 8012cba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cbe:	43db      	mvns	r3, r3
 8012cc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8012cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	db12      	blt.n	8012cf0 <lv_draw_mask_radius+0x6e0>
 8012cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012cce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	da0d      	bge.n	8012cf0 <lv_draw_mask_radius+0x6e0>
 8012cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012cd6:	68fa      	ldr	r2, [r7, #12]
 8012cd8:	4413      	add	r3, r2
 8012cda:	7818      	ldrb	r0, [r3, #0]
 8012cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012cde:	68fa      	ldr	r2, [r7, #12]
 8012ce0:	18d4      	adds	r4, r2, r3
 8012ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	f000 f89f 	bl	8012e2a <mask_mix>
 8012cec:	4603      	mov	r3, r0
 8012cee:	7023      	strb	r3, [r4, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8012cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	db12      	blt.n	8012d1c <lv_draw_mask_radius+0x70c>
 8012cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012cfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	da0d      	bge.n	8012d1c <lv_draw_mask_radius+0x70c>
 8012d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d02:	68fa      	ldr	r2, [r7, #12]
 8012d04:	4413      	add	r3, r2
 8012d06:	7818      	ldrb	r0, [r3, #0]
 8012d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d0a:	68fa      	ldr	r2, [r7, #12]
 8012d0c:	18d4      	adds	r4, r2, r3
 8012d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d12:	4619      	mov	r1, r3
 8012d14:	f000 f889 	bl	8012e2a <mask_mix>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	7023      	strb	r3, [r4, #0]
                kl--;
 8012d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d1e:	3b01      	subs	r3, #1
 8012d20:	66bb      	str	r3, [r7, #104]	; 0x68
                kr++;
 8012d22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d24:	3301      	adds	r3, #1
 8012d26:	667b      	str	r3, [r7, #100]	; 0x64
                y_prev.f = y_next.f;
 8012d28:	8a7b      	ldrh	r3, [r7, #18]
 8012d2a:	82fb      	strh	r3, [r7, #22]
            for(; i <= x1.i; i++) {
 8012d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d2e:	3301      	adds	r3, #1
 8012d30:	65bb      	str	r3, [r7, #88]	; 0x58
 8012d32:	8b3b      	ldrh	r3, [r7, #24]
 8012d34:	461a      	mov	r2, r3
 8012d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d38:	4293      	cmp	r3, r2
 8012d3a:	d9a6      	bls.n	8012c8a <lv_draw_mask_radius+0x67a>
            }

            /*If the last pixel was left in its middle therefore
             * the circle still has parts on the next one*/
            if(y_prev.f) {
 8012d3c:	8afb      	ldrh	r3, [r7, #22]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d041      	beq.n	8012dc6 <lv_draw_mask_radius+0x7b6>
                m = (y_prev.f * x1.f) >> 9;
 8012d42:	8afb      	ldrh	r3, [r7, #22]
 8012d44:	8b7a      	ldrh	r2, [r7, #26]
 8012d46:	fb02 f303 	mul.w	r3, r2, r3
 8012d4a:	125b      	asrs	r3, r3, #9
 8012d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(outer) m = 255 - m;
 8012d50:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d004      	beq.n	8012d62 <lv_draw_mask_radius+0x752>
 8012d58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d5c:	43db      	mvns	r3, r3
 8012d5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8012d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	db12      	blt.n	8012d8e <lv_draw_mask_radius+0x77e>
 8012d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	da0d      	bge.n	8012d8e <lv_draw_mask_radius+0x77e>
 8012d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d74:	68fa      	ldr	r2, [r7, #12]
 8012d76:	4413      	add	r3, r2
 8012d78:	7818      	ldrb	r0, [r3, #0]
 8012d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	18d4      	adds	r4, r2, r3
 8012d80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d84:	4619      	mov	r1, r3
 8012d86:	f000 f850 	bl	8012e2a <mask_mix>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	7023      	strb	r3, [r4, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8012d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	db12      	blt.n	8012dba <lv_draw_mask_radius+0x7aa>
 8012d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	da0d      	bge.n	8012dba <lv_draw_mask_radius+0x7aa>
 8012d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012da0:	68fa      	ldr	r2, [r7, #12]
 8012da2:	4413      	add	r3, r2
 8012da4:	7818      	ldrb	r0, [r3, #0]
 8012da6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012da8:	68fa      	ldr	r2, [r7, #12]
 8012daa:	18d4      	adds	r4, r2, r3
 8012dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012db0:	4619      	mov	r1, r3
 8012db2:	f000 f83a 	bl	8012e2a <mask_mix>
 8012db6:	4603      	mov	r3, r0
 8012db8:	7023      	strb	r3, [r4, #0]
                kl--;
 8012dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012dbc:	3b01      	subs	r3, #1
 8012dbe:	66bb      	str	r3, [r7, #104]	; 0x68
                kr++;
 8012dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	667b      	str	r3, [r7, #100]	; 0x64
            }

            if(outer == 0) {
 8012dc6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012dca:	f083 0301 	eor.w	r3, r3, #1
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d025      	beq.n	8012e20 <lv_draw_mask_radius+0x810>
                kl++;
 8012dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012dd6:	3301      	adds	r3, #1
 8012dd8:	66bb      	str	r3, [r7, #104]	; 0x68
                if(kl > len) {
 8012dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012de0:	429a      	cmp	r2, r3
 8012de2:	dd01      	ble.n	8012de8 <lv_draw_mask_radius+0x7d8>
                    return LV_DRAW_MASK_RES_TRANSP;
 8012de4:	2300      	movs	r3, #0
 8012de6:	e01c      	b.n	8012e22 <lv_draw_mask_radius+0x812>
                }
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
 8012de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	db04      	blt.n	8012df8 <lv_draw_mask_radius+0x7e8>
 8012dee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012df0:	4619      	mov	r1, r3
 8012df2:	68f8      	ldr	r0, [r7, #12]
 8012df4:	f00a f825 	bl	801ce42 <_lv_memset_00>

                if(kr < 0) {
 8012df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	da01      	bge.n	8012e02 <lv_draw_mask_radius+0x7f2>
                    return LV_DRAW_MASK_RES_TRANSP;
 8012dfe:	2300      	movs	r3, #0
                    return LV_DRAW_MASK_RES_TRANSP;
 8012e00:	e00f      	b.n	8012e22 <lv_draw_mask_radius+0x812>
                }
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 8012e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	da09      	bge.n	8012e20 <lv_draw_mask_radius+0x810>
 8012e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e0e:	68fa      	ldr	r2, [r7, #12]
 8012e10:	18d0      	adds	r0, r2, r3
 8012e12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e18:	1ad3      	subs	r3, r2, r3
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	f00a f811 	bl	801ce42 <_lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8012e20:	2302      	movs	r3, #2
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	378c      	adds	r7, #140	; 0x8c
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd90      	pop	{r4, r7, pc}

08012e2a <mask_mix>:

    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
 8012e2a:	b480      	push	{r7}
 8012e2c:	b083      	sub	sp, #12
 8012e2e:	af00      	add	r7, sp, #0
 8012e30:	4603      	mov	r3, r0
 8012e32:	460a      	mov	r2, r1
 8012e34:	71fb      	strb	r3, [r7, #7]
 8012e36:	4613      	mov	r3, r2
 8012e38:	71bb      	strb	r3, [r7, #6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8012e3a:	79bb      	ldrb	r3, [r7, #6]
 8012e3c:	2bfc      	cmp	r3, #252	; 0xfc
 8012e3e:	d901      	bls.n	8012e44 <mask_mix+0x1a>
 8012e40:	79fb      	ldrb	r3, [r7, #7]
 8012e42:	e010      	b.n	8012e66 <mask_mix+0x3c>
    if(mask_new <= LV_OPA_MIN) return 0;
 8012e44:	79bb      	ldrb	r3, [r7, #6]
 8012e46:	2b02      	cmp	r3, #2
 8012e48:	d801      	bhi.n	8012e4e <mask_mix+0x24>
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e00b      	b.n	8012e66 <mask_mix+0x3c>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 8012e4e:	79fb      	ldrb	r3, [r7, #7]
 8012e50:	79ba      	ldrb	r2, [r7, #6]
 8012e52:	fb02 f303 	mul.w	r3, r2, r3
 8012e56:	461a      	mov	r2, r3
 8012e58:	4613      	mov	r3, r2
 8012e5a:	021b      	lsls	r3, r3, #8
 8012e5c:	4413      	add	r3, r2
 8012e5e:	01db      	lsls	r3, r3, #7
 8012e60:	4413      	add	r3, r2
 8012e62:	0ddb      	lsrs	r3, r3, #23
 8012e64:	b2db      	uxtb	r3, r3
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	370c      	adds	r7, #12
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e70:	4770      	bx	lr

08012e72 <sqrt_approx>:
 * @param q store the result here
 * @param ref the reference point (already calculated sqrt)
 * @param x the value which sqrt should be approximated
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
 8012e72:	b480      	push	{r7}
 8012e74:	b089      	sub	sp, #36	; 0x24
 8012e76:	af00      	add	r7, sp, #0
 8012e78:	60f8      	str	r0, [r7, #12]
 8012e7a:	60b9      	str	r1, [r7, #8]
 8012e7c:	607a      	str	r2, [r7, #4]
    x = x << 8; /*Upscale for extra precision*/
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	021b      	lsls	r3, r3, #8
 8012e82:	607b      	str	r3, [r7, #4]

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	881b      	ldrh	r3, [r3, #0]
 8012e88:	011b      	lsls	r3, r3, #4
 8012e8a:	68ba      	ldr	r2, [r7, #8]
 8012e8c:	8852      	ldrh	r2, [r2, #2]
 8012e8e:	0912      	lsrs	r2, r2, #4
 8012e90:	b292      	uxth	r2, r2
 8012e92:	4413      	add	r3, r2
 8012e94:	61fb      	str	r3, [r7, #28]
    uint32_t raw2 = raw * raw;
 8012e96:	69fb      	ldr	r3, [r7, #28]
 8012e98:	69fa      	ldr	r2, [r7, #28]
 8012e9a:	fb02 f303 	mul.w	r3, r2, r3
 8012e9e:	61bb      	str	r3, [r7, #24]

    int32_t d = x - raw2;
 8012ea0:	687a      	ldr	r2, [r7, #4]
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	1ad3      	subs	r3, r2, r3
 8012ea6:	617b      	str	r3, [r7, #20]
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 8012ea8:	69fb      	ldr	r3, [r7, #28]
 8012eaa:	005b      	lsls	r3, r3, #1
 8012eac:	461a      	mov	r2, r3
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	4413      	add	r3, r2
 8012eba:	617b      	str	r3, [r7, #20]

    q->i = d >> 4;
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	111b      	asrs	r3, r3, #4
 8012ec0:	b29a      	uxth	r2, r3
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	801a      	strh	r2, [r3, #0]
    q->f = (d & 0xF) << 4;
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	011b      	lsls	r3, r3, #4
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	805a      	strh	r2, [r3, #2]
}
 8012ed4:	bf00      	nop
 8012ed6:	3724      	adds	r7, #36	; 0x24
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr

08012ee0 <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b087      	sub	sp, #28
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	60f8      	str	r0, [r7, #12]
 8012ee8:	60b9      	str	r1, [r7, #8]
 8012eea:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	613b      	str	r3, [r7, #16]

    while(len) {
 8012ef4:	e00c      	b.n	8012f10 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	781a      	ldrb	r2, [r3, #0]
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	701a      	strb	r2, [r3, #0]
        d8++;
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	3301      	adds	r3, #1
 8012f02:	617b      	str	r3, [r7, #20]
        s8++;
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	3301      	adds	r3, #1
 8012f08:	613b      	str	r3, [r7, #16]
        len--;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	3b01      	subs	r3, #1
 8012f0e:	607b      	str	r3, [r7, #4]
    while(len) {
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d1ef      	bne.n	8012ef6 <_lv_memcpy_small+0x16>
    }

    return dst;
 8012f16:	68fb      	ldr	r3, [r7, #12]
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	371c      	adds	r7, #28
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f22:	4770      	bx	lr

08012f24 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8012f2e:	2208      	movs	r2, #8
 8012f30:	6839      	ldr	r1, [r7, #0]
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f7ff ffd4 	bl	8012ee0 <_lv_memcpy_small>
}
 8012f38:	bf00      	nop
 8012f3a:	3708      	adds	r7, #8
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8012f40:	b480      	push	{r7}
 8012f42:	b083      	sub	sp, #12
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012f4e:	b29a      	uxth	r2, r3
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	1ad3      	subs	r3, r2, r3
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	b29b      	uxth	r3, r3
 8012f60:	b21b      	sxth	r3, r3
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	370c      	adds	r7, #12
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr

08012f6e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8012f6e:	b480      	push	{r7}
 8012f70:	b083      	sub	sp, #12
 8012f72:	af00      	add	r7, sp, #0
 8012f74:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012f7c:	b29a      	uxth	r2, r3
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	1ad3      	subs	r3, r2, r3
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	b21b      	sxth	r3, r3
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	370c      	adds	r7, #12
 8012f94:	46bd      	mov	sp, r7
 8012f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9a:	4770      	bx	lr

08012f9c <lv_color_mix>:
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b087      	sub	sp, #28
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	60f8      	str	r0, [r7, #12]
 8012fa4:	60b9      	str	r1, [r7, #8]
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	71fb      	strb	r3, [r7, #7]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8012faa:	7bbb      	ldrb	r3, [r7, #14]
 8012fac:	461a      	mov	r2, r3
 8012fae:	79fb      	ldrb	r3, [r7, #7]
 8012fb0:	fb03 f202 	mul.w	r2, r3, r2
 8012fb4:	7abb      	ldrb	r3, [r7, #10]
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012fbe:	fb03 f301 	mul.w	r3, r3, r1
 8012fc2:	4413      	add	r3, r2
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	4613      	mov	r3, r2
 8012fc8:	021b      	lsls	r3, r3, #8
 8012fca:	4413      	add	r3, r2
 8012fcc:	01db      	lsls	r3, r3, #7
 8012fce:	4413      	add	r3, r2
 8012fd0:	0ddb      	lsrs	r3, r3, #23
 8012fd2:	b2db      	uxtb	r3, r3
 8012fd4:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8012fd6:	7b7b      	ldrb	r3, [r7, #13]
 8012fd8:	461a      	mov	r2, r3
 8012fda:	79fb      	ldrb	r3, [r7, #7]
 8012fdc:	fb03 f202 	mul.w	r2, r3, r2
 8012fe0:	7a7b      	ldrb	r3, [r7, #9]
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	79fb      	ldrb	r3, [r7, #7]
 8012fe6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012fea:	fb03 f301 	mul.w	r3, r3, r1
 8012fee:	4413      	add	r3, r2
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	4613      	mov	r3, r2
 8012ff4:	021b      	lsls	r3, r3, #8
 8012ff6:	4413      	add	r3, r2
 8012ff8:	01db      	lsls	r3, r3, #7
 8012ffa:	4413      	add	r3, r2
 8012ffc:	0ddb      	lsrs	r3, r3, #23
 8012ffe:	b2db      	uxtb	r3, r3
 8013000:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8013002:	7b3b      	ldrb	r3, [r7, #12]
 8013004:	461a      	mov	r2, r3
 8013006:	79fb      	ldrb	r3, [r7, #7]
 8013008:	fb03 f202 	mul.w	r2, r3, r2
 801300c:	7a3b      	ldrb	r3, [r7, #8]
 801300e:	4619      	mov	r1, r3
 8013010:	79fb      	ldrb	r3, [r7, #7]
 8013012:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8013016:	fb03 f301 	mul.w	r3, r3, r1
 801301a:	4413      	add	r3, r2
 801301c:	461a      	mov	r2, r3
 801301e:	4613      	mov	r3, r2
 8013020:	021b      	lsls	r3, r3, #8
 8013022:	4413      	add	r3, r2
 8013024:	01db      	lsls	r3, r3, #7
 8013026:	4413      	add	r3, r2
 8013028:	0ddb      	lsrs	r3, r3, #23
 801302a:	b2db      	uxtb	r3, r3
 801302c:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 801302e:	23ff      	movs	r3, #255	; 0xff
 8013030:	75fb      	strb	r3, [r7, #23]
    return ret;
 8013032:	697b      	ldr	r3, [r7, #20]
}
 8013034:	4618      	mov	r0, r3
 8013036:	371c      	adds	r7, #28
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr

08013040 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8013048:	2168      	movs	r1, #104	; 0x68
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f009 fef9 	bl	801ce42 <_lv_memset_00>
    dsc->bg_color = LV_COLOR_WHITE;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	22ff      	movs	r2, #255	; 0xff
 8013054:	711a      	strb	r2, [r3, #4]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	22ff      	movs	r2, #255	; 0xff
 801305a:	715a      	strb	r2, [r3, #5]
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	22ff      	movs	r2, #255	; 0xff
 8013060:	719a      	strb	r2, [r3, #6]
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	22ff      	movs	r2, #255	; 0xff
 8013066:	71da      	strb	r2, [r3, #7]
    dsc->bg_grad_color = LV_COLOR_BLACK;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2200      	movs	r2, #0
 801306c:	721a      	strb	r2, [r3, #8]
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2200      	movs	r2, #0
 8013072:	725a      	strb	r2, [r3, #9]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2200      	movs	r2, #0
 8013078:	729a      	strb	r2, [r3, #10]
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	22ff      	movs	r2, #255	; 0xff
 801307e:	72da      	strb	r2, [r3, #11]
    dsc->border_color = LV_COLOR_BLACK;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2200      	movs	r2, #0
 8013084:	751a      	strb	r2, [r3, #20]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2200      	movs	r2, #0
 801308a:	755a      	strb	r2, [r3, #21]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2200      	movs	r2, #0
 8013090:	759a      	strb	r2, [r3, #22]
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	22ff      	movs	r2, #255	; 0xff
 8013096:	75da      	strb	r2, [r3, #23]
    dsc->pattern_recolor = LV_COLOR_BLACK;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2200      	movs	r2, #0
 801309c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2200      	movs	r2, #0
 80130a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2200      	movs	r2, #0
 80130ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	22ff      	movs	r2, #255	; 0xff
 80130b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    dsc->value_color = LV_COLOR_BLACK;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2200      	movs	r2, #0
 80130bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2200      	movs	r2, #0
 80130c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2200      	movs	r2, #0
 80130cc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	22ff      	movs	r2, #255	; 0xff
 80130d4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    dsc->shadow_color = LV_COLOR_BLACK;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2200      	movs	r2, #0
 80130dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2200      	movs	r2, #0
 80130e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2200      	movs	r2, #0
 80130ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	22ff      	movs	r2, #255	; 0xff
 80130f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    dsc->bg_grad_color_stop = 0xFF;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	22ff      	movs	r2, #255	; 0xff
 80130fc:	821a      	strh	r2, [r3, #16]
    dsc->bg_opa = LV_OPA_COVER;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	22ff      	movs	r2, #255	; 0xff
 8013102:	749a      	strb	r2, [r3, #18]
    dsc->outline_opa = LV_OPA_COVER;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	22ff      	movs	r2, #255	; 0xff
 8013108:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dsc->border_opa = LV_OPA_COVER;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	22ff      	movs	r2, #255	; 0xff
 8013110:	771a      	strb	r2, [r3, #28]
    dsc->pattern_opa = LV_OPA_COVER;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	22ff      	movs	r2, #255	; 0xff
 8013116:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	4a09      	ldr	r2, [pc, #36]	; (8013144 <lv_draw_rect_dsc_init+0x104>)
 801311e:	641a      	str	r2, [r3, #64]	; 0x40
    dsc->value_opa = LV_OPA_COVER;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	22ff      	movs	r2, #255	; 0xff
 8013124:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	4a06      	ldr	r2, [pc, #24]	; (8013144 <lv_draw_rect_dsc_init+0x104>)
 801312c:	651a      	str	r2, [r3, #80]	; 0x50
    dsc->shadow_opa = LV_OPA_COVER;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	22ff      	movs	r2, #255	; 0xff
 8013132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    dsc->border_side = LV_BORDER_SIDE_FULL;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	220f      	movs	r2, #15
 801313a:	835a      	strh	r2, [r3, #26]

}
 801313c:	bf00      	nop
 801313e:	3708      	adds	r7, #8
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	20000020 	.word	0x20000020

08013148 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b084      	sub	sp, #16
 801314c:	af00      	add	r7, sp, #0
 801314e:	60f8      	str	r0, [r7, #12]
 8013150:	60b9      	str	r1, [r7, #8]
 8013152:	607a      	str	r2, [r7, #4]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f7ff ff0a 	bl	8012f6e <lv_area_get_height>
 801315a:	4603      	mov	r3, r0
 801315c:	2b00      	cmp	r3, #0
 801315e:	dd24      	ble.n	80131aa <lv_draw_rect+0x62>
 8013160:	68f8      	ldr	r0, [r7, #12]
 8013162:	f7ff feed 	bl	8012f40 <lv_area_get_width>
 8013166:	4603      	mov	r3, r0
 8013168:	2b00      	cmp	r3, #0
 801316a:	dd1e      	ble.n	80131aa <lv_draw_rect+0x62>
#if LV_USE_SHADOW
    draw_shadow(coords, clip, dsc);
 801316c:	687a      	ldr	r2, [r7, #4]
 801316e:	68b9      	ldr	r1, [r7, #8]
 8013170:	68f8      	ldr	r0, [r7, #12]
 8013172:	f000 ff08 	bl	8013f86 <draw_shadow>
#endif

    draw_bg(coords, clip, dsc);
 8013176:	687a      	ldr	r2, [r7, #4]
 8013178:	68b9      	ldr	r1, [r7, #8]
 801317a:	68f8      	ldr	r0, [r7, #12]
 801317c:	f000 f819 	bl	80131b2 <draw_bg>

#if LV_USE_PATTERN
    draw_pattern(coords, clip, dsc);
 8013180:	687a      	ldr	r2, [r7, #4]
 8013182:	68b9      	ldr	r1, [r7, #8]
 8013184:	68f8      	ldr	r0, [r7, #12]
 8013186:	f002 fdd5 	bl	8015d34 <draw_pattern>
#endif
    draw_border(coords, clip, dsc);
 801318a:	687a      	ldr	r2, [r7, #4]
 801318c:	68b9      	ldr	r1, [r7, #8]
 801318e:	68f8      	ldr	r0, [r7, #12]
 8013190:	f000 fbf6 	bl	8013980 <draw_border>

#if LV_USE_VALUE_STR
    draw_value_str(coords, clip, dsc);
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	68b9      	ldr	r1, [r7, #8]
 8013198:	68f8      	ldr	r0, [r7, #12]
 801319a:	f002 ffe5 	bl	8016168 <draw_value_str>
#endif

#if LV_USE_OUTLINE
    draw_outline(coords, clip, dsc);
 801319e:	687a      	ldr	r2, [r7, #4]
 80131a0:	68b9      	ldr	r1, [r7, #8]
 80131a2:	68f8      	ldr	r0, [r7, #12]
 80131a4:	f002 fd23 	bl	8015bee <draw_outline>
 80131a8:	e000      	b.n	80131ac <lv_draw_rect+0x64>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 80131aa:	bf00      	nop
#endif

    LV_ASSERT_MEM_INTEGRITY();
}
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <draw_bg>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_bg(const lv_area_t * coords, const lv_area_t * clip,
                                          const lv_draw_rect_dsc_t * dsc)
{
 80131b2:	b590      	push	{r4, r7, lr}
 80131b4:	b0ad      	sub	sp, #180	; 0xb4
 80131b6:	af04      	add	r7, sp, #16
 80131b8:	60f8      	str	r0, [r7, #12]
 80131ba:	60b9      	str	r1, [r7, #8]
 80131bc:	607a      	str	r2, [r7, #4]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	7c9b      	ldrb	r3, [r3, #18]
 80131c2:	2b02      	cmp	r3, #2
 80131c4:	f240 83d6 	bls.w	8013974 <draw_bg+0x7c2>

    lv_area_t coords_bg;
    lv_area_copy(&coords_bg, coords);
 80131c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80131cc:	68f9      	ldr	r1, [r7, #12]
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7ff fea8 	bl	8012f24 <lv_area_copy>

    /*If the border fully covers make the bg area 1px smaller to avoid artifacts on the corners*/
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80131da:	2b01      	cmp	r3, #1
 80131dc:	dd4a      	ble.n	8013274 <draw_bg+0xc2>
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	7f1b      	ldrb	r3, [r3, #28]
 80131e2:	2bfc      	cmp	r3, #252	; 0xfc
 80131e4:	d946      	bls.n	8013274 <draw_bg+0xc2>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d041      	beq.n	8013274 <draw_bg+0xc2>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 80131f0:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80131f4:	b29a      	uxth	r2, r3
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80131fc:	b29b      	uxth	r3, r3
 80131fe:	109b      	asrs	r3, r3, #2
 8013200:	b29b      	uxth	r3, r3
 8013202:	f003 0301 	and.w	r3, r3, #1
 8013206:	b29b      	uxth	r3, r3
 8013208:	4413      	add	r3, r2
 801320a:	b29b      	uxth	r3, r3
 801320c:	b21b      	sxth	r3, r3
 801320e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8013212:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013216:	b29a      	uxth	r2, r3
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801321e:	b29b      	uxth	r3, r3
 8013220:	105b      	asrs	r3, r3, #1
 8013222:	b29b      	uxth	r3, r3
 8013224:	f003 0301 	and.w	r3, r3, #1
 8013228:	b29b      	uxth	r3, r3
 801322a:	4413      	add	r3, r2
 801322c:	b29b      	uxth	r3, r3
 801322e:	b21b      	sxth	r3, r3
 8013230:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8013234:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013238:	b29a      	uxth	r2, r3
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013240:	b29b      	uxth	r3, r3
 8013242:	10db      	asrs	r3, r3, #3
 8013244:	b29b      	uxth	r3, r3
 8013246:	f003 0301 	and.w	r3, r3, #1
 801324a:	b29b      	uxth	r3, r3
 801324c:	1ad3      	subs	r3, r2, r3
 801324e:	b29b      	uxth	r3, r3
 8013250:	b21b      	sxth	r3, r3
 8013252:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8013256:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801325a:	b29a      	uxth	r2, r3
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013262:	b29b      	uxth	r3, r3
 8013264:	f003 0301 	and.w	r3, r3, #1
 8013268:	b29b      	uxth	r3, r3
 801326a:	1ad3      	subs	r3, r2, r3
 801326c:	b29b      	uxth	r3, r3
 801326e:	b21b      	sxth	r3, r3
 8013270:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    lv_opa_t opa = dsc->bg_opa;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	7c9b      	ldrb	r3, [r3, #18]
 8013278:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801327c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013280:	2bfd      	cmp	r3, #253	; 0xfd
 8013282:	d902      	bls.n	801328a <draw_bg+0xd8>
 8013284:	23ff      	movs	r3, #255	; 0xff
 8013286:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 801328a:	f7f6 fec1 	bl	800a010 <_lv_refr_get_disp_refreshing>
 801328e:	67b8      	str	r0, [r7, #120]	; 0x78
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8013290:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8013292:	f006 ffad 	bl	801a1f0 <lv_disp_get_buf>
 8013296:	6778      	str	r0, [r7, #116]	; 0x74

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 8013298:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801329c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80132a0:	68ba      	ldr	r2, [r7, #8]
 80132a2:	4618      	mov	r0, r3
 80132a4:	f007 fc7c 	bl	801aba0 <_lv_area_intersect>
 80132a8:	4603      	mov	r3, r0
 80132aa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(is_common == false) return;
 80132ae:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80132b2:	f083 0301 	eor.w	r3, r3, #1
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	f040 835d 	bne.w	8013978 <draw_bg+0x7c6>

    const lv_area_t * disp_area = &vdb->area;
 80132be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132c0:	3310      	adds	r3, #16
 80132c2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 80132c4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80132c8:	b29a      	uxth	r2, r3
 80132ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80132cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	1ad3      	subs	r3, r2, r3
 80132d4:	b29b      	uxth	r3, r3
 80132d6:	b21b      	sxth	r3, r3
 80132d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    draw_area.y1 -= disp_area->y1;
 80132dc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80132e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	b21b      	sxth	r3, r3
 80132f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    draw_area.x2 -= disp_area->x1;
 80132f4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80132f8:	b29a      	uxth	r2, r3
 80132fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80132fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013300:	b29b      	uxth	r3, r3
 8013302:	1ad3      	subs	r3, r2, r3
 8013304:	b29b      	uxth	r3, r3
 8013306:	b21b      	sxth	r3, r3
 8013308:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    draw_area.y2 -= disp_area->y1;
 801330c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013310:	b29a      	uxth	r2, r3
 8013312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013314:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013318:	b29b      	uxth	r3, r3
 801331a:	1ad3      	subs	r3, r2, r3
 801331c:	b29b      	uxth	r3, r3
 801331e:	b21b      	sxth	r3, r3
 8013320:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    int32_t draw_area_w = lv_area_get_width(&draw_area);
 8013324:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013328:	4618      	mov	r0, r3
 801332a:	f7ff fe09 	bl	8012f40 <lv_area_get_width>
 801332e:	4603      	mov	r3, r0
 8013330:	66bb      	str	r3, [r7, #104]	; 0x68

    /*Create a mask if there is a radius*/
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8013332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013334:	4618      	mov	r0, r3
 8013336:	f009 f97b 	bl	801c630 <_lv_mem_buf_get>
 801333a:	6678      	str	r0, [r7, #100]	; 0x64

    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	7b1b      	ldrb	r3, [r3, #12]
 8013340:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	685a      	ldr	r2, [r3, #4]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	689b      	ldr	r3, [r3, #8]
 801334c:	429a      	cmp	r2, r3
 801334e:	d102      	bne.n	8013356 <draw_bg+0x1a4>
 8013350:	2300      	movs	r3, #0
 8013352:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 8013356:	f7fe fb03 	bl	8011960 <lv_draw_mask_get_cnt>
 801335a:	4603      	mov	r3, r0
 801335c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    bool simple_mode = true;
 8013360:	2301      	movs	r3, #1
 8013362:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
    if(other_mask_cnt) simple_mode = false;
 8013366:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801336a:	2b00      	cmp	r3, #0
 801336c:	d003      	beq.n	8013376 <draw_bg+0x1c4>
 801336e:	2300      	movs	r3, #0
 8013370:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8013374:	e006      	b.n	8013384 <draw_bg+0x1d2>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 8013376:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 801337a:	2b02      	cmp	r3, #2
 801337c:	d102      	bne.n	8013384 <draw_bg+0x1d2>
 801337e:	2300      	movs	r3, #0
 8013380:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    int16_t mask_rout_id = LV_MASK_ID_INV;
 8013384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013388:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

    int32_t coords_w = lv_area_get_width(&coords_bg);
 801338c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013390:	4618      	mov	r0, r3
 8013392:	f7ff fdd5 	bl	8012f40 <lv_area_get_width>
 8013396:	4603      	mov	r3, r0
 8013398:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t coords_h = lv_area_get_height(&coords_bg);
 801339a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801339e:	4618      	mov	r0, r3
 80133a0:	f7ff fde5 	bl	8012f6e <lv_area_get_height>
 80133a4:	4603      	mov	r3, r0
 80133a6:	65bb      	str	r3, [r7, #88]	; 0x58

    /*Get the real radius*/
    int32_t rout = dsc->radius;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 80133b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80133b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133b6:	4293      	cmp	r3, r2
 80133b8:	bfa8      	it	ge
 80133ba:	4613      	movge	r3, r2
 80133bc:	657b      	str	r3, [r7, #84]	; 0x54
    if(rout > short_side >> 1) rout = short_side >> 1;
 80133be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133c0:	105b      	asrs	r3, r3, #1
 80133c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80133c6:	429a      	cmp	r2, r3
 80133c8:	dd03      	ble.n	80133d2 <draw_bg+0x220>
 80133ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133cc:	105b      	asrs	r3, r3, #1
 80133ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /*Most simple case: just a plain rectangle*/
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 80133d2:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d018      	beq.n	801340c <draw_bg+0x25a>
 80133da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d114      	bne.n	801340c <draw_bg+0x25a>
 80133e2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d110      	bne.n	801340c <draw_bg+0x25a>
        _lv_blend_fill(clip, &coords_bg,
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	7cdb      	ldrb	r3, [r3, #19]
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80133f4:	9302      	str	r3, [sp, #8]
 80133f6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80133fa:	9301      	str	r3, [sp, #4]
 80133fc:	2301      	movs	r3, #1
 80133fe:	9300      	str	r3, [sp, #0]
 8013400:	2300      	movs	r3, #0
 8013402:	6852      	ldr	r2, [r2, #4]
 8013404:	68b8      	ldr	r0, [r7, #8]
 8013406:	f7f8 ffe1 	bl	800c3cc <_lv_blend_fill>
 801340a:	e2aa      	b.n	8013962 <draw_bg+0x7b0>
                       dsc->bg_blend_mode);
    }
    /*More complex case: there is a radius, gradient or other mask.*/
    else {
        lv_draw_mask_radius_param_t mask_rout_param;
        if(rout > 0) {
 801340c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013410:	2b00      	cmp	r3, #0
 8013412:	dd12      	ble.n	801343a <draw_bg+0x288>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 8013414:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013418:	b21a      	sxth	r2, r3
 801341a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801341e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013422:	2300      	movs	r3, #0
 8013424:	f7fe fbe8 	bl	8011bf8 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8013428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801342c:	2100      	movs	r1, #0
 801342e:	4618      	mov	r0, r3
 8013430:	f7fe f9c8 	bl	80117c4 <lv_draw_mask_add>
 8013434:	4603      	mov	r3, r0
 8013436:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        }

        /*Draw the background line by line*/
        int32_t h;
        lv_draw_mask_res_t mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801343a:	2301      	movs	r3, #1
 801343c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        lv_color_t grad_color = dsc->bg_color;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	623b      	str	r3, [r7, #32]

        lv_color_t * grad_map = NULL;
 8013446:	2300      	movs	r3, #0
 8013448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /*In case of horizontal gradient pre-compute a line with a gradient*/
        if(grad_dir == LV_GRAD_DIR_HOR) {
 801344c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013450:	2b02      	cmp	r3, #2
 8013452:	d125      	bne.n	80134a0 <draw_bg+0x2ee>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 8013454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013456:	009b      	lsls	r3, r3, #2
 8013458:	4618      	mov	r0, r3
 801345a:	f009 f8e9 	bl	801c630 <_lv_mem_buf_get>
 801345e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

            int32_t i;
            for(i = 0; i < coords_w; i++) {
 8013462:	2300      	movs	r3, #0
 8013464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013468:	e015      	b.n	8013496 <draw_bg+0x2e4>
                grad_map[i] = grad_get(dsc, coords_w, i);
 801346a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801346c:	b219      	sxth	r1, r3
 801346e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013472:	b218      	sxth	r0, r3
 8013474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801347e:	18d4      	adds	r4, r2, r3
 8013480:	4602      	mov	r2, r0
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f000 fd28 	bl	8013ed8 <grad_get>
 8013488:	4603      	mov	r3, r0
 801348a:	6023      	str	r3, [r4, #0]
            for(i = 0; i < coords_w; i++) {
 801348c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013490:	3301      	adds	r3, #1
 8013492:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013496:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801349a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801349c:	429a      	cmp	r2, r3
 801349e:	dbe4      	blt.n	801346a <draw_bg+0x2b8>
            }
        }

        bool split = false;
 80134a0:	2300      	movs	r3, #0
 80134a2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 80134a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7ff fd48 	bl	8012f40 <lv_area_get_width>
 80134b0:	4603      	mov	r3, r0
 80134b2:	461a      	mov	r2, r3
 80134b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80134b8:	005b      	lsls	r3, r3, #1
 80134ba:	1ad3      	subs	r3, r2, r3
 80134bc:	2b32      	cmp	r3, #50	; 0x32
 80134be:	dd02      	ble.n	80134c6 <draw_bg+0x314>
 80134c0:	2301      	movs	r3, #1
 80134c2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

        lv_opa_t opa2;

        lv_area_t fill_area;
        fill_area.x1 = coords_bg.x1;
 80134c6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80134ca:	833b      	strh	r3, [r7, #24]
        fill_area.x2 = coords_bg.x2;
 80134cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80134d0:	83bb      	strh	r3, [r7, #28]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 80134d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80134d8:	b29a      	uxth	r2, r3
 80134da:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80134de:	b29b      	uxth	r3, r3
 80134e0:	4413      	add	r3, r2
 80134e2:	b29b      	uxth	r3, r3
 80134e4:	b21b      	sxth	r3, r3
 80134e6:	837b      	strh	r3, [r7, #26]
        fill_area.y2 = fill_area.y1;
 80134e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80134ec:	83fb      	strh	r3, [r7, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80134ee:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80134f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80134f6:	e18c      	b.n	8013812 <draw_bg+0x660>
            int32_t y = h + vdb->area.y1;
 80134f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80134fa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80134fe:	461a      	mov	r2, r3
 8013500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013504:	4413      	add	r3, r2
 8013506:	653b      	str	r3, [r7, #80]	; 0x50

            opa2 = opa;
 8013508:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801350c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

            /*In not corner areas apply the mask only if required*/
            if(y > coords_bg.y1 + rout + 1 &&
 8013510:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013514:	461a      	mov	r2, r3
 8013516:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801351a:	4413      	add	r3, r2
 801351c:	3301      	adds	r3, #1
 801351e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013520:	429a      	cmp	r2, r3
 8013522:	dd37      	ble.n	8013594 <draw_bg+0x3e2>
               y < coords_bg.y2 - rout - 1) {
 8013524:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013528:	461a      	mov	r2, r3
 801352a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801352e:	1ad3      	subs	r3, r2, r3
 8013530:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 8013532:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013534:	429a      	cmp	r2, r3
 8013536:	da2d      	bge.n	8013594 <draw_bg+0x3e2>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8013538:	2301      	movs	r3, #1
 801353a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                if(simple_mode == false) {
 801353e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8013542:	f083 0301 	eor.w	r3, r3, #1
 8013546:	b2db      	uxtb	r3, r3
 8013548:	2b00      	cmp	r3, #0
 801354a:	d046      	beq.n	80135da <draw_bg+0x428>
                    _lv_memset(mask_buf, opa, draw_area_w);
 801354c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801354e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013552:	4619      	mov	r1, r3
 8013554:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8013556:	f009 fbe7 	bl	801cd28 <_lv_memset>
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 801355a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801355c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013560:	b29a      	uxth	r2, r3
 8013562:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8013566:	b29b      	uxth	r3, r3
 8013568:	4413      	add	r3, r2
 801356a:	b29b      	uxth	r3, r3
 801356c:	b219      	sxth	r1, r3
 801356e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013570:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013574:	b29a      	uxth	r2, r3
 8013576:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801357a:	b29b      	uxth	r3, r3
 801357c:	4413      	add	r3, r2
 801357e:	b29b      	uxth	r3, r3
 8013580:	b21a      	sxth	r2, r3
 8013582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013584:	b21b      	sxth	r3, r3
 8013586:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8013588:	f7fe f94e 	bl	8011828 <lv_draw_mask_apply>
 801358c:	4603      	mov	r3, r0
 801358e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                if(simple_mode == false) {
 8013592:	e022      	b.n	80135da <draw_bg+0x428>
                }
            }
            /*In corner areas apply the mask anyway*/
            else {
                _lv_memset(mask_buf, opa, draw_area_w);
 8013594:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013596:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801359a:	4619      	mov	r1, r3
 801359c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801359e:	f009 fbc3 	bl	801cd28 <_lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 80135a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80135a4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80135a8:	b29a      	uxth	r2, r3
 80135aa:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	4413      	add	r3, r2
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	b219      	sxth	r1, r3
 80135b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80135b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80135bc:	b29a      	uxth	r2, r3
 80135be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	4413      	add	r3, r2
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	b21a      	sxth	r2, r3
 80135ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80135cc:	b21b      	sxth	r3, r3
 80135ce:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80135d0:	f7fe f92a 	bl	8011828 <lv_draw_mask_apply>
 80135d4:	4603      	mov	r3, r0
 80135d6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }

            /*If mask will taken into account its base opacity was already set by memset above*/
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
 80135da:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80135de:	2b02      	cmp	r3, #2
 80135e0:	d102      	bne.n	80135e8 <draw_bg+0x436>
                opa2 = LV_OPA_COVER;
 80135e2:	23ff      	movs	r3, #255	; 0xff
 80135e4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
            }

            /*Get the current line color*/
            if(grad_dir == LV_GRAD_DIR_VER) {
 80135e8:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d114      	bne.n	801361a <draw_bg+0x468>
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 80135f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7ff fcba 	bl	8012f6e <lv_area_get_height>
 80135fa:	4603      	mov	r3, r0
 80135fc:	4619      	mov	r1, r3
 80135fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013600:	b29a      	uxth	r2, r3
 8013602:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013606:	b29b      	uxth	r3, r3
 8013608:	1ad3      	subs	r3, r2, r3
 801360a:	b29b      	uxth	r3, r3
 801360c:	b21b      	sxth	r3, r3
 801360e:	461a      	mov	r2, r3
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f000 fc61 	bl	8013ed8 <grad_get>
 8013616:	4603      	mov	r3, r0
 8013618:	623b      	str	r3, [r7, #32]
            }

            /* If there is not other mask and drawing the corner area split the drawing to corner and middle areas
             * because it the middle mask shouldn't be taken into account (therefore its faster)*/
            if(simple_mode && split &&
 801361a:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 801361e:	2b00      	cmp	r3, #0
 8013620:	f000 809e 	beq.w	8013760 <draw_bg+0x5ae>
 8013624:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013628:	2b00      	cmp	r3, #0
 801362a:	f000 8099 	beq.w	8013760 <draw_bg+0x5ae>
               (y < coords_bg.y1 + rout + 1 ||
 801362e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013632:	461a      	mov	r2, r3
 8013634:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013638:	4413      	add	r3, r2
 801363a:	3301      	adds	r3, #1
            if(simple_mode && split &&
 801363c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801363e:	429a      	cmp	r2, r3
 8013640:	db0a      	blt.n	8013658 <draw_bg+0x4a6>
                y > coords_bg.y2 - rout - 1)) {
 8013642:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013646:	461a      	mov	r2, r3
 8013648:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801364c:	1ad3      	subs	r3, r2, r3
 801364e:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
 8013650:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013652:	429a      	cmp	r2, r3
 8013654:	f340 8084 	ble.w	8013760 <draw_bg+0x5ae>

                /*Left part*/
                lv_area_t fill_area2;
                fill_area2.x1 = coords_bg.x1;
 8013658:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801365c:	823b      	strh	r3, [r7, #16]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 801365e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8013662:	b29a      	uxth	r2, r3
 8013664:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013668:	b29b      	uxth	r3, r3
 801366a:	4413      	add	r3, r2
 801366c:	b29b      	uxth	r3, r3
 801366e:	3b01      	subs	r3, #1
 8013670:	b29b      	uxth	r3, r3
 8013672:	b21b      	sxth	r3, r3
 8013674:	82bb      	strh	r3, [r7, #20]
                fill_area2.y1 = fill_area.y1;
 8013676:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801367a:	827b      	strh	r3, [r7, #18]
                fill_area2.y2 = fill_area.y2;
 801367c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013680:	82fb      	strh	r3, [r7, #22]

                _lv_blend_fill(clip, &fill_area2,
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	7cdb      	ldrb	r3, [r3, #19]
 8013686:	f107 0110 	add.w	r1, r7, #16
 801368a:	9302      	str	r3, [sp, #8]
 801368c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013690:	9301      	str	r3, [sp, #4]
 8013692:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013696:	9300      	str	r3, [sp, #0]
 8013698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801369a:	6a3a      	ldr	r2, [r7, #32]
 801369c:	68b8      	ldr	r0, [r7, #8]
 801369e:	f7f8 fe95 	bl	800c3cc <_lv_blend_fill>
                               grad_color, mask_buf, mask_res, opa2, dsc->bg_blend_mode);

                /*Center part*/
                if(grad_dir == LV_GRAD_DIR_VER) {
 80136a2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	d122      	bne.n	80136f0 <draw_bg+0x53e>
                    fill_area2.x1 = coords_bg.x1 + rout;
 80136aa:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80136ae:	b29a      	uxth	r2, r3
 80136b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80136b4:	b29b      	uxth	r3, r3
 80136b6:	4413      	add	r3, r2
 80136b8:	b29b      	uxth	r3, r3
 80136ba:	b21b      	sxth	r3, r3
 80136bc:	823b      	strh	r3, [r7, #16]
                    fill_area2.x2 = coords_bg.x2 - rout;
 80136be:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80136c2:	b29a      	uxth	r2, r3
 80136c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80136c8:	b29b      	uxth	r3, r3
 80136ca:	1ad3      	subs	r3, r2, r3
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	b21b      	sxth	r3, r3
 80136d0:	82bb      	strh	r3, [r7, #20]
                    _lv_blend_fill(clip, &fill_area2,
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	7cdb      	ldrb	r3, [r3, #19]
 80136d6:	f107 0110 	add.w	r1, r7, #16
 80136da:	9302      	str	r3, [sp, #8]
 80136dc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80136e0:	9301      	str	r3, [sp, #4]
 80136e2:	2301      	movs	r3, #1
 80136e4:	9300      	str	r3, [sp, #0]
 80136e6:	2300      	movs	r3, #0
 80136e8:	6a3a      	ldr	r2, [r7, #32]
 80136ea:	68b8      	ldr	r0, [r7, #8]
 80136ec:	f7f8 fe6e 	bl	800c3cc <_lv_blend_fill>
                                   grad_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);
                }

                /*Right part*/
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 80136f0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80136f4:	b29a      	uxth	r2, r3
 80136f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80136fa:	b29b      	uxth	r3, r3
 80136fc:	1ad3      	subs	r3, r2, r3
 80136fe:	b29b      	uxth	r3, r3
 8013700:	3301      	adds	r3, #1
 8013702:	b29b      	uxth	r3, r3
 8013704:	b21b      	sxth	r3, r3
 8013706:	823b      	strh	r3, [r7, #16]
                fill_area2.x2 = coords_bg.x2;
 8013708:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801370c:	82bb      	strh	r3, [r7, #20]

                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 801370e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013712:	461a      	mov	r2, r3
 8013714:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013718:	1ad3      	subs	r3, r2, r3
 801371a:	1c5a      	adds	r2, r3, #1
 801371c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801371e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013722:	4619      	mov	r1, r3
 8013724:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8013728:	440b      	add	r3, r1
 801372a:	1ad3      	subs	r3, r2, r3
 801372c:	67fb      	str	r3, [r7, #124]	; 0x7c
                if(mask_ofs < 0) mask_ofs = 0;
 801372e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013730:	2b00      	cmp	r3, #0
 8013732:	da01      	bge.n	8013738 <draw_bg+0x586>
 8013734:	2300      	movs	r3, #0
 8013736:	67fb      	str	r3, [r7, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2,
 8013738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801373a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801373c:	441a      	add	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	7cdb      	ldrb	r3, [r3, #19]
 8013742:	f107 0110 	add.w	r1, r7, #16
 8013746:	9302      	str	r3, [sp, #8]
 8013748:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801374c:	9301      	str	r3, [sp, #4]
 801374e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013752:	9300      	str	r3, [sp, #0]
 8013754:	4613      	mov	r3, r2
 8013756:	6a3a      	ldr	r2, [r7, #32]
 8013758:	68b8      	ldr	r0, [r7, #8]
 801375a:	f7f8 fe37 	bl	800c3cc <_lv_blend_fill>
                y > coords_bg.y2 - rout - 1)) {
 801375e:	e045      	b.n	80137ec <draw_bg+0x63a>
                               grad_color, mask_buf + mask_ofs, mask_res, opa2, dsc->bg_blend_mode);

            }
            else {
                if(grad_dir == LV_GRAD_DIR_HOR) {
 8013760:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013764:	2b02      	cmp	r3, #2
 8013766:	d111      	bne.n	801378c <draw_bg+0x5da>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	7cdb      	ldrb	r3, [r3, #19]
 801376c:	f107 0118 	add.w	r1, r7, #24
 8013770:	9302      	str	r3, [sp, #8]
 8013772:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013776:	9301      	str	r3, [sp, #4]
 8013778:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801377c:	9300      	str	r3, [sp, #0]
 801377e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013780:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013784:	68b8      	ldr	r0, [r7, #8]
 8013786:	f7f8 fef2 	bl	800c56e <_lv_blend_map>
 801378a:	e02f      	b.n	80137ec <draw_bg+0x63a>
                }
                else if(grad_dir == LV_GRAD_DIR_VER) {
 801378c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013790:	2b01      	cmp	r3, #1
 8013792:	d110      	bne.n	80137b6 <draw_bg+0x604>
                    _lv_blend_fill(clip, &fill_area,
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	7cdb      	ldrb	r3, [r3, #19]
 8013798:	f107 0118 	add.w	r1, r7, #24
 801379c:	9302      	str	r3, [sp, #8]
 801379e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80137a2:	9301      	str	r3, [sp, #4]
 80137a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80137a8:	9300      	str	r3, [sp, #0]
 80137aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137ac:	6a3a      	ldr	r2, [r7, #32]
 80137ae:	68b8      	ldr	r0, [r7, #8]
 80137b0:	f7f8 fe0c 	bl	800c3cc <_lv_blend_fill>
 80137b4:	e01a      	b.n	80137ec <draw_bg+0x63a>
                                   grad_color, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
                }
                else if(other_mask_cnt != 0 || !split) {
 80137b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d106      	bne.n	80137cc <draw_bg+0x61a>
 80137be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80137c2:	f083 0301 	eor.w	r3, r3, #1
 80137c6:	b2db      	uxtb	r3, r3
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d00f      	beq.n	80137ec <draw_bg+0x63a>
                    _lv_blend_fill(clip, &fill_area,
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	7cdb      	ldrb	r3, [r3, #19]
 80137d0:	f107 0118 	add.w	r1, r7, #24
 80137d4:	9302      	str	r3, [sp, #8]
 80137d6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80137da:	9301      	str	r3, [sp, #4]
 80137dc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80137e0:	9300      	str	r3, [sp, #0]
 80137e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137e4:	6a3a      	ldr	r2, [r7, #32]
 80137e6:	68b8      	ldr	r0, [r7, #8]
 80137e8:	f7f8 fdf0 	bl	800c3cc <_lv_blend_fill>
                                   grad_color, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
                }
            }
            fill_area.y1++;
 80137ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80137f0:	b29b      	uxth	r3, r3
 80137f2:	3301      	adds	r3, #1
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	b21b      	sxth	r3, r3
 80137f8:	837b      	strh	r3, [r7, #26]
            fill_area.y2++;
 80137fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80137fe:	b29b      	uxth	r3, r3
 8013800:	3301      	adds	r3, #1
 8013802:	b29b      	uxth	r3, r3
 8013804:	b21b      	sxth	r3, r3
 8013806:	83fb      	strh	r3, [r7, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8013808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801380c:	3301      	adds	r3, #1
 801380e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013812:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013816:	461a      	mov	r2, r3
 8013818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801381c:	4293      	cmp	r3, r2
 801381e:	f77f ae6b 	ble.w	80134f8 <draw_bg+0x346>
        }

        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 8013822:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013826:	2b00      	cmp	r3, #0
 8013828:	f040 8093 	bne.w	8013952 <draw_bg+0x7a0>
 801382c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013830:	2b00      	cmp	r3, #0
 8013832:	f040 808e 	bne.w	8013952 <draw_bg+0x7a0>
 8013836:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801383a:	2b00      	cmp	r3, #0
 801383c:	f000 8089 	beq.w	8013952 <draw_bg+0x7a0>
            /*Central part*/
            fill_area.x1 = coords_bg.x1 + rout;
 8013840:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8013844:	b29a      	uxth	r2, r3
 8013846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801384a:	b29b      	uxth	r3, r3
 801384c:	4413      	add	r3, r2
 801384e:	b29b      	uxth	r3, r3
 8013850:	b21b      	sxth	r3, r3
 8013852:	833b      	strh	r3, [r7, #24]
            fill_area.x2 = coords_bg.x2 - rout;
 8013854:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013858:	b29a      	uxth	r2, r3
 801385a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801385e:	b29b      	uxth	r3, r3
 8013860:	1ad3      	subs	r3, r2, r3
 8013862:	b29b      	uxth	r3, r3
 8013864:	b21b      	sxth	r3, r3
 8013866:	83bb      	strh	r3, [r7, #28]
            fill_area.y1 = coords_bg.y1;
 8013868:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801386c:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = coords_bg.y1 + rout;
 801386e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013872:	b29a      	uxth	r2, r3
 8013874:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013878:	b29b      	uxth	r3, r3
 801387a:	4413      	add	r3, r2
 801387c:	b29b      	uxth	r3, r3
 801387e:	b21b      	sxth	r3, r3
 8013880:	83fb      	strh	r3, [r7, #30]

            _lv_blend_fill(clip, &fill_area,
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	7cdb      	ldrb	r3, [r3, #19]
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	f107 0118 	add.w	r1, r7, #24
 801388c:	9302      	str	r3, [sp, #8]
 801388e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013892:	9301      	str	r3, [sp, #4]
 8013894:	2301      	movs	r3, #1
 8013896:	9300      	str	r3, [sp, #0]
 8013898:	2300      	movs	r3, #0
 801389a:	6852      	ldr	r2, [r2, #4]
 801389c:	68b8      	ldr	r0, [r7, #8]
 801389e:	f7f8 fd95 	bl	800c3cc <_lv_blend_fill>
                           dsc->bg_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);

            fill_area.y1 = coords_bg.y2 - rout;
 80138a2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80138a6:	b29a      	uxth	r2, r3
 80138a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	1ad3      	subs	r3, r2, r3
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	b21b      	sxth	r3, r3
 80138b4:	837b      	strh	r3, [r7, #26]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 80138b6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80138ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80138be:	429a      	cmp	r2, r3
 80138c0:	dc06      	bgt.n	80138d0 <draw_bg+0x71e>
 80138c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	3301      	adds	r3, #1
 80138ca:	b29b      	uxth	r3, r3
 80138cc:	b21b      	sxth	r3, r3
 80138ce:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = coords_bg.y2;
 80138d0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80138d4:	83fb      	strh	r3, [r7, #30]

            _lv_blend_fill(clip, &fill_area,
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	7cdb      	ldrb	r3, [r3, #19]
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	f107 0118 	add.w	r1, r7, #24
 80138e0:	9302      	str	r3, [sp, #8]
 80138e2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	2301      	movs	r3, #1
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	2300      	movs	r3, #0
 80138ee:	6852      	ldr	r2, [r2, #4]
 80138f0:	68b8      	ldr	r0, [r7, #8]
 80138f2:	f7f8 fd6b 	bl	800c3cc <_lv_blend_fill>
                           dsc->bg_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);

            fill_area.x1 = coords_bg.x1;
 80138f6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80138fa:	833b      	strh	r3, [r7, #24]
            fill_area.x2 = coords_bg.x2;
 80138fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013900:	83bb      	strh	r3, [r7, #28]
            fill_area.y1 = coords_bg.y1 + rout + 1;
 8013902:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013906:	b29a      	uxth	r2, r3
 8013908:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801390c:	b29b      	uxth	r3, r3
 801390e:	4413      	add	r3, r2
 8013910:	b29b      	uxth	r3, r3
 8013912:	3301      	adds	r3, #1
 8013914:	b29b      	uxth	r3, r3
 8013916:	b21b      	sxth	r3, r3
 8013918:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = coords_bg.y2 - rout - 1;
 801391a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801391e:	b29a      	uxth	r2, r3
 8013920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013924:	b29b      	uxth	r3, r3
 8013926:	1ad3      	subs	r3, r2, r3
 8013928:	b29b      	uxth	r3, r3
 801392a:	3b01      	subs	r3, #1
 801392c:	b29b      	uxth	r3, r3
 801392e:	b21b      	sxth	r3, r3
 8013930:	83fb      	strh	r3, [r7, #30]

            _lv_blend_fill(clip, &fill_area,
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	7cdb      	ldrb	r3, [r3, #19]
 8013936:	687a      	ldr	r2, [r7, #4]
 8013938:	f107 0118 	add.w	r1, r7, #24
 801393c:	9302      	str	r3, [sp, #8]
 801393e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013942:	9301      	str	r3, [sp, #4]
 8013944:	2301      	movs	r3, #1
 8013946:	9300      	str	r3, [sp, #0]
 8013948:	2300      	movs	r3, #0
 801394a:	6852      	ldr	r2, [r2, #4]
 801394c:	68b8      	ldr	r0, [r7, #8]
 801394e:	f7f8 fd3d 	bl	800c3cc <_lv_blend_fill>
                           dsc->bg_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);

        }

        if(grad_map) _lv_mem_buf_release(grad_map);
 8013952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013956:	2b00      	cmp	r3, #0
 8013958:	d003      	beq.n	8013962 <draw_bg+0x7b0>
 801395a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801395e:	f008 ff45 	bl	801c7ec <_lv_mem_buf_release>
    }

    lv_draw_mask_remove_id(mask_rout_id);
 8013962:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8013966:	4618      	mov	r0, r3
 8013968:	f7fd ffa2 	bl	80118b0 <lv_draw_mask_remove_id>

    _lv_mem_buf_release(mask_buf);
 801396c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801396e:	f008 ff3d 	bl	801c7ec <_lv_mem_buf_release>
 8013972:	e002      	b.n	801397a <draw_bg+0x7c8>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8013974:	bf00      	nop
 8013976:	e000      	b.n	801397a <draw_bg+0x7c8>
    if(is_common == false) return;
 8013978:	bf00      	nop

}
 801397a:	37a4      	adds	r7, #164	; 0xa4
 801397c:	46bd      	mov	sp, r7
 801397e:	bd90      	pop	{r4, r7, pc}

08013980 <draw_border>:

LV_ATTRIBUTE_FAST_MEM static void draw_border(const lv_area_t * coords, const lv_area_t * clip,
                                              const lv_draw_rect_dsc_t * dsc)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b0b0      	sub	sp, #192	; 0xc0
 8013984:	af04      	add	r7, sp, #16
 8013986:	60f8      	str	r0, [r7, #12]
 8013988:	60b9      	str	r1, [r7, #8]
 801398a:	607a      	str	r2, [r7, #4]
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	7f1b      	ldrb	r3, [r3, #28]
 8013990:	2b02      	cmp	r3, #2
 8013992:	f240 8295 	bls.w	8013ec0 <draw_border+0x540>
    if(dsc->border_width == 0) return;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801399c:	2b00      	cmp	r3, #0
 801399e:	f000 8291 	beq.w	8013ec4 <draw_border+0x544>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	f000 828d 	beq.w	8013ec8 <draw_border+0x548>
    if(dsc->border_post) return;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	7f9b      	ldrb	r3, [r3, #30]
 80139b2:	f003 0301 	and.w	r3, r3, #1
 80139b6:	b2db      	uxtb	r3, r3
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	f040 8287 	bne.w	8013ecc <draw_border+0x54c>

    int32_t coords_w = lv_area_get_width(coords);
 80139be:	68f8      	ldr	r0, [r7, #12]
 80139c0:	f7ff fabe 	bl	8012f40 <lv_area_get_width>
 80139c4:	4603      	mov	r3, r0
 80139c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int32_t coords_h = lv_area_get_height(coords);
 80139ca:	68f8      	ldr	r0, [r7, #12]
 80139cc:	f7ff facf 	bl	8012f6e <lv_area_get_height>
 80139d0:	4603      	mov	r3, r0
 80139d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /*Get the real radius*/
    int32_t rout = dsc->radius;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 80139e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80139e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80139e8:	4293      	cmp	r3, r2
 80139ea:	bfa8      	it	ge
 80139ec:	4613      	movge	r3, r2
 80139ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if(rout > short_side >> 1) rout = short_side >> 1;
 80139f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80139f6:	105b      	asrs	r3, r3, #1
 80139f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80139fc:	429a      	cmp	r2, r3
 80139fe:	dd04      	ble.n	8013a0a <draw_border+0x8a>
 8013a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013a04:	105b      	asrs	r3, r3, #1
 8013a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /*Get the inner area*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 8013a0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013a0e:	68f9      	ldr	r1, [r7, #12]
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7ff fa87 	bl	8012f24 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 8013a16:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8013a1a:	b29a      	uxth	r2, r3
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	f003 0304 	and.w	r3, r3, #4
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d004      	beq.n	8013a36 <draw_border+0xb6>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013a32:	b29b      	uxth	r3, r3
 8013a34:	e00a      	b.n	8013a4c <draw_border+0xcc>
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013a3c:	b299      	uxth	r1, r3
 8013a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	440b      	add	r3, r1
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	425b      	negs	r3, r3
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	4413      	add	r3, r2
 8013a4e:	b29b      	uxth	r3, r3
 8013a50:	b21b      	sxth	r3, r3
 8013a52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8013a56:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 8013a5a:	b29a      	uxth	r2, r3
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	f003 0308 	and.w	r3, r3, #8
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d004      	beq.n	8013a76 <draw_border+0xf6>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013a72:	b29b      	uxth	r3, r3
 8013a74:	e00a      	b.n	8013a8c <draw_border+0x10c>
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013a7c:	b299      	uxth	r1, r3
 8013a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	440b      	add	r3, r1
 8013a86:	b29b      	uxth	r3, r3
 8013a88:	425b      	negs	r3, r3
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	1ad3      	subs	r3, r2, r3
 8013a8e:	b29b      	uxth	r3, r3
 8013a90:	b21b      	sxth	r3, r3
 8013a92:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8013a96:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8013a9a:	b29a      	uxth	r2, r3
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	f003 0302 	and.w	r3, r3, #2
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d004      	beq.n	8013ab6 <draw_border+0x136>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	e00a      	b.n	8013acc <draw_border+0x14c>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013abc:	b299      	uxth	r1, r3
 8013abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013ac2:	b29b      	uxth	r3, r3
 8013ac4:	440b      	add	r3, r1
 8013ac6:	b29b      	uxth	r3, r3
 8013ac8:	425b      	negs	r3, r3
 8013aca:	b29b      	uxth	r3, r3
 8013acc:	4413      	add	r3, r2
 8013ace:	b29b      	uxth	r3, r3
 8013ad0:	b21b      	sxth	r3, r3
 8013ad2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8013ad6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8013ada:	b29a      	uxth	r2, r3
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	f003 0301 	and.w	r3, r3, #1
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d004      	beq.n	8013af6 <draw_border+0x176>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	e00a      	b.n	8013b0c <draw_border+0x18c>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013afc:	b299      	uxth	r1, r3
 8013afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	440b      	add	r3, r1
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	425b      	negs	r3, r3
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	1ad3      	subs	r3, r2, r3
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	b21b      	sxth	r3, r3
 8013b12:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013b1c:	2b0f      	cmp	r3, #15
 8013b1e:	d115      	bne.n	8013b4c <draw_border+0x1cc>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	7f1b      	ldrb	r3, [r3, #28]
 8013b2a:	687a      	ldr	r2, [r7, #4]
 8013b2c:	7f52      	ldrb	r2, [r2, #29]
 8013b2e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8013b32:	9203      	str	r2, [sp, #12]
 8013b34:	9302      	str	r3, [sp, #8]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	695b      	ldr	r3, [r3, #20]
 8013b3a:	9301      	str	r3, [sp, #4]
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	9300      	str	r3, [sp, #0]
 8013b40:	460b      	mov	r3, r1
 8013b42:	68ba      	ldr	r2, [r7, #8]
 8013b44:	68f9      	ldr	r1, [r7, #12]
 8013b46:	f002 fbc5 	bl	80162d4 <draw_full_border>
 8013b4a:	e1c2      	b.n	8013ed2 <draw_border+0x552>
                         dsc->border_blend_mode);
    }
    else {
        lv_opa_t opa = dsc->border_opa;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	7f1b      	ldrb	r3, [r3, #28]
 8013b50:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8013b54:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8013b58:	2bfd      	cmp	r3, #253	; 0xfd
 8013b5a:	d902      	bls.n	8013b62 <draw_border+0x1e2>
 8013b5c:	23ff      	movs	r3, #255	; 0xff
 8013b5e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8013b62:	f7f6 fa55 	bl	800a010 <_lv_refr_get_disp_refreshing>
 8013b66:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8013b6a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8013b6e:	f006 fb3f 	bl	801a1f0 <lv_disp_get_buf>
 8013b72:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

        /* Get clipped fill area which is the real draw area.
         * It is always the same or inside `fill_area` */
        lv_area_t draw_area;
        bool is_common;
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 8013b76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013b7a:	68ba      	ldr	r2, [r7, #8]
 8013b7c:	68f9      	ldr	r1, [r7, #12]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f007 f80e 	bl	801aba0 <_lv_area_intersect>
 8013b84:	4603      	mov	r3, r0
 8013b86:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
        if(is_common == false) return;
 8013b8a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8013b8e:	f083 0301 	eor.w	r3, r3, #1
 8013b92:	b2db      	uxtb	r3, r3
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	f040 819b 	bne.w	8013ed0 <draw_border+0x550>

        const lv_area_t * disp_area = &vdb->area;
 8013b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b9e:	3310      	adds	r3, #16
 8013ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        /* Now `draw_area` has absolute coordinates.
         * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
        draw_area.x1 -= disp_area->x1;
 8013ba4:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8013ba8:	b29a      	uxth	r2, r3
 8013baa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013bb2:	b29b      	uxth	r3, r3
 8013bb4:	1ad3      	subs	r3, r2, r3
 8013bb6:	b29b      	uxth	r3, r3
 8013bb8:	b21b      	sxth	r3, r3
 8013bba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        draw_area.y1 -= disp_area->y1;
 8013bbe:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013bc2:	b29a      	uxth	r2, r3
 8013bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013bc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	1ad3      	subs	r3, r2, r3
 8013bd0:	b29b      	uxth	r3, r3
 8013bd2:	b21b      	sxth	r3, r3
 8013bd4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        draw_area.x2 -= disp_area->x1;
 8013bd8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8013bdc:	b29a      	uxth	r2, r3
 8013bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013be6:	b29b      	uxth	r3, r3
 8013be8:	1ad3      	subs	r3, r2, r3
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	b21b      	sxth	r3, r3
 8013bee:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        draw_area.y2 -= disp_area->y1;
 8013bf2:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8013bf6:	b29a      	uxth	r2, r3
 8013bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013bfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	1ad3      	subs	r3, r2, r3
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	b21b      	sxth	r3, r3
 8013c08:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        int32_t draw_area_w = lv_area_get_width(&draw_area);
 8013c0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7ff f995 	bl	8012f40 <lv_area_get_width>
 8013c16:	4603      	mov	r3, r0
 8013c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /*Create a mask if there is a radius*/
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8013c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013c20:	4618      	mov	r0, r3
 8013c22:	f008 fd05 	bl	801c630 <_lv_mem_buf_get>
 8013c26:	67f8      	str	r0, [r7, #124]	; 0x7c

        /*Create mask for the outer area*/
        int16_t mask_rout_id = LV_MASK_ID_INV;
 8013c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c2c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        lv_draw_mask_radius_param_t mask_rout_param;
        if(rout > 0) {
 8013c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	dd11      	ble.n	8013c5c <draw_border+0x2dc>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 8013c38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013c3c:	b21a      	sxth	r2, r3
 8013c3e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8013c42:	2300      	movs	r3, #0
 8013c44:	68f9      	ldr	r1, [r7, #12]
 8013c46:	f7fd ffd7 	bl	8011bf8 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8013c4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013c4e:	2100      	movs	r1, #0
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7fd fdb7 	bl	80117c4 <lv_draw_mask_add>
 8013c56:	4603      	mov	r3, r0
 8013c58:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        }

        /*Create mask for the inner mask*/
        int32_t rin = rout - dsc->border_width;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013c62:	461a      	mov	r2, r3
 8013c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013c68:	1a9b      	subs	r3, r3, r2
 8013c6a:	67bb      	str	r3, [r7, #120]	; 0x78
        if(rin < 0) rin = 0;
 8013c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	da01      	bge.n	8013c76 <draw_border+0x2f6>
 8013c72:	2300      	movs	r3, #0
 8013c74:	67bb      	str	r3, [r7, #120]	; 0x78
        lv_draw_mask_radius_param_t mask_rin_param;
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 8013c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	1ad3      	subs	r3, r2, r3
 8013c86:	b29b      	uxth	r3, r3
 8013c88:	b21a      	sxth	r2, r3
 8013c8a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8013c8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013c92:	2301      	movs	r3, #1
 8013c94:	f7fd ffb0 	bl	8011bf8 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8013c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c9c:	2100      	movs	r1, #0
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7fd fd90 	bl	80117c4 <lv_draw_mask_add>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013cb0:	3b01      	subs	r3, #1
 8013cb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	bfb8      	it	lt
 8013cba:	4613      	movlt	r3, r2
 8013cbc:	673b      	str	r3, [r7, #112]	; 0x70

        int32_t h;
        lv_draw_mask_res_t mask_res;
        lv_area_t fill_area;

        lv_color_t color = dsc->border_color;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	695b      	ldr	r3, [r3, #20]
 8013cc2:	61bb      	str	r3, [r7, #24]
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	7f5b      	ldrb	r3, [r3, #29]
 8013cc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        fill_area.x1 = coords->x1;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013cd2:	83bb      	strh	r3, [r7, #28]
        fill_area.x2 = coords->x2;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013cda:	843b      	strh	r3, [r7, #32]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8013cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ce0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013ce4:	b29a      	uxth	r2, r3
 8013ce6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	4413      	add	r3, r2
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	b21b      	sxth	r3, r3
 8013cf2:	83fb      	strh	r3, [r7, #30]
        fill_area.y2 = fill_area.y1;
 8013cf4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013cf8:	847b      	strh	r3, [r7, #34]	; 0x22

        uint32_t buf_ofs = 0;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013d06:	2b04      	cmp	r3, #4
 8013d08:	d10a      	bne.n	8013d20 <draw_border+0x3a0>
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d10:	b29a      	uxth	r2, r3
 8013d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d14:	b29b      	uxth	r3, r3
 8013d16:	4413      	add	r3, r2
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	b21b      	sxth	r3, r3
 8013d1c:	843b      	strh	r3, [r7, #32]
 8013d1e:	e017      	b.n	8013d50 <draw_border+0x3d0>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013d26:	2b08      	cmp	r3, #8
 8013d28:	d112      	bne.n	8013d50 <draw_border+0x3d0>
            fill_area.x1 = coords->x2 - corner_size;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013d30:	b29a      	uxth	r2, r3
 8013d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d34:	b29b      	uxth	r3, r3
 8013d36:	1ad3      	subs	r3, r2, r3
 8013d38:	b29b      	uxth	r3, r3
 8013d3a:	b21b      	sxth	r3, r3
 8013d3c:	83bb      	strh	r3, [r7, #28]
            buf_ofs = fill_area.x1 - coords->x1;
 8013d3e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8013d42:	461a      	mov	r2, r3
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d4a:	1ad3      	subs	r3, r2, r3
 8013d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        }

        volatile bool top_only = false;
 8013d50:	2300      	movs	r3, #0
 8013d52:	75fb      	strb	r3, [r7, #23]
        volatile bool bottom_only = false;
 8013d54:	2300      	movs	r3, #0
 8013d56:	75bb      	strb	r3, [r7, #22]
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013d5e:	2b02      	cmp	r3, #2
 8013d60:	d101      	bne.n	8013d66 <draw_border+0x3e6>
 8013d62:	2301      	movs	r3, #1
 8013d64:	75fb      	strb	r3, [r7, #23]
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	d101      	bne.n	8013d74 <draw_border+0x3f4>
 8013d70:	2301      	movs	r3, #1
 8013d72:	75bb      	strb	r3, [r7, #22]
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013d7a:	2b03      	cmp	r3, #3
 8013d7c:	d103      	bne.n	8013d86 <draw_border+0x406>
            top_only = true;
 8013d7e:	2301      	movs	r3, #1
 8013d80:	75fb      	strb	r3, [r7, #23]
            bottom_only = true;
 8013d82:	2301      	movs	r3, #1
 8013d84:	75bb      	strb	r3, [r7, #22]
        }

        volatile bool normal = !top_only && !bottom_only ? true : false;
 8013d86:	7dfb      	ldrb	r3, [r7, #23]
 8013d88:	b2db      	uxtb	r3, r3
 8013d8a:	f083 0301 	eor.w	r3, r3, #1
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d008      	beq.n	8013da6 <draw_border+0x426>
 8013d94:	7dbb      	ldrb	r3, [r7, #22]
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	f083 0301 	eor.w	r3, r3, #1
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d001      	beq.n	8013da6 <draw_border+0x426>
 8013da2:	2301      	movs	r3, #1
 8013da4:	e000      	b.n	8013da8 <draw_border+0x428>
 8013da6:	2300      	movs	r3, #0
 8013da8:	f003 0301 	and.w	r3, r3, #1
 8013dac:	b2db      	uxtb	r3, r3
 8013dae:	757b      	strb	r3, [r7, #21]

        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8013db0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013db4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013db8:	e06d      	b.n	8013e96 <draw_border+0x516>
            if(normal ||
 8013dba:	7d7b      	ldrb	r3, [r7, #21]
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d11d      	bne.n	8013dfe <draw_border+0x47e>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 8013dc2:	7dfb      	ldrb	r3, [r7, #23]
 8013dc4:	b2db      	uxtb	r3, r3
            if(normal ||
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d00a      	beq.n	8013de0 <draw_border+0x460>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 8013dca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013dce:	461a      	mov	r2, r3
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013dda:	440b      	add	r3, r1
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	dd0e      	ble.n	8013dfe <draw_border+0x47e>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 8013de0:	7dbb      	ldrb	r3, [r7, #22]
 8013de2:	b2db      	uxtb	r3, r3
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d043      	beq.n	8013e70 <draw_border+0x4f0>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 8013de8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013dec:	461a      	mov	r2, r3
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013df4:	4619      	mov	r1, r3
 8013df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013df8:	1acb      	subs	r3, r1, r3
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	db38      	blt.n	8013e70 <draw_border+0x4f0>
                _lv_memset_ff(mask_buf, draw_area_w);
 8013dfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013e02:	4619      	mov	r1, r3
 8013e04:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013e06:	f009 f89c 	bl	801cf42 <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8013e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e0e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013e12:	b29a      	uxth	r2, r3
 8013e14:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	4413      	add	r3, r2
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	b219      	sxth	r1, r3
 8013e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013e28:	b29a      	uxth	r2, r3
 8013e2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	4413      	add	r3, r2
 8013e32:	b29b      	uxth	r3, r3
 8013e34:	b21a      	sxth	r2, r3
 8013e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013e3a:	b21b      	sxth	r3, r3
 8013e3c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013e3e:	f7fd fcf3 	bl	8011828 <lv_draw_mask_apply>
 8013e42:	4603      	mov	r3, r0
 8013e44:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 8013e48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013e4e:	441a      	add	r2, r3
 8013e50:	f107 011c 	add.w	r1, r7, #28
 8013e54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013e58:	9302      	str	r3, [sp, #8]
 8013e5a:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8013e5e:	9301      	str	r3, [sp, #4]
 8013e60:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8013e64:	9300      	str	r3, [sp, #0]
 8013e66:	4613      	mov	r3, r2
 8013e68:	69ba      	ldr	r2, [r7, #24]
 8013e6a:	68b8      	ldr	r0, [r7, #8]
 8013e6c:	f7f8 faae 	bl	800c3cc <_lv_blend_fill>
            }
            fill_area.y1++;
 8013e70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013e74:	b29b      	uxth	r3, r3
 8013e76:	3301      	adds	r3, #1
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	b21b      	sxth	r3, r3
 8013e7c:	83fb      	strh	r3, [r7, #30]
            fill_area.y2++;
 8013e7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	3301      	adds	r3, #1
 8013e86:	b29b      	uxth	r3, r3
 8013e88:	b21b      	sxth	r3, r3
 8013e8a:	847b      	strh	r3, [r7, #34]	; 0x22
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8013e8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013e90:	3301      	adds	r3, #1
 8013e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013e96:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8013e9a:	461a      	mov	r2, r3
 8013e9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	dd8a      	ble.n	8013dba <draw_border+0x43a>

        }
        lv_draw_mask_remove_id(mask_rin_id);
 8013ea4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7fd fd01 	bl	80118b0 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 8013eae:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7fd fcfc 	bl	80118b0 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
 8013eb8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013eba:	f008 fc97 	bl	801c7ec <_lv_mem_buf_release>
 8013ebe:	e008      	b.n	8013ed2 <draw_border+0x552>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 8013ec0:	bf00      	nop
 8013ec2:	e006      	b.n	8013ed2 <draw_border+0x552>
    if(dsc->border_width == 0) return;
 8013ec4:	bf00      	nop
 8013ec6:	e004      	b.n	8013ed2 <draw_border+0x552>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 8013ec8:	bf00      	nop
 8013eca:	e002      	b.n	8013ed2 <draw_border+0x552>
    if(dsc->border_post) return;
 8013ecc:	bf00      	nop
 8013ece:	e000      	b.n	8013ed2 <draw_border+0x552>
        if(is_common == false) return;
 8013ed0:	bf00      	nop
    }
}
 8013ed2:	37b0      	adds	r7, #176	; 0xb0
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <grad_get>:

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b086      	sub	sp, #24
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	807b      	strh	r3, [r7, #2]
 8013ee4:	4613      	mov	r3, r2
 8013ee6:	803b      	strh	r3, [r7, #0]
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013eee:	461a      	mov	r2, r3
 8013ef0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013ef4:	fb03 f302 	mul.w	r3, r3, r2
 8013ef8:	121b      	asrs	r3, r3, #8
 8013efa:	617b      	str	r3, [r7, #20]
    if(i <= min) return dsc->bg_color;
 8013efc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013f00:	697a      	ldr	r2, [r7, #20]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	db02      	blt.n	8013f0c <grad_get+0x34>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	e038      	b.n	8013f7e <grad_get+0xa6>

    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013f12:	461a      	mov	r2, r3
 8013f14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013f18:	fb03 f302 	mul.w	r3, r3, r2
 8013f1c:	121b      	asrs	r3, r3, #8
 8013f1e:	613b      	str	r3, [r7, #16]
    if(i >= max) return dsc->bg_grad_color;
 8013f20:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013f24:	693a      	ldr	r2, [r7, #16]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	dc02      	bgt.n	8013f30 <grad_get+0x58>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	689b      	ldr	r3, [r3, #8]
 8013f2e:	e026      	b.n	8013f7e <grad_get+0xa6>

    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013f36:	461a      	mov	r2, r3
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013f3e:	1ad3      	subs	r3, r2, r3
 8013f40:	60fb      	str	r3, [r7, #12]
    d = (s * d) >> 8;
 8013f42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013f46:	68fa      	ldr	r2, [r7, #12]
 8013f48:	fb02 f303 	mul.w	r3, r2, r3
 8013f4c:	121b      	asrs	r3, r3, #8
 8013f4e:	60fb      	str	r3, [r7, #12]
    i -= min;
 8013f50:	883a      	ldrh	r2, [r7, #0]
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	1ad3      	subs	r3, r2, r3
 8013f58:	b29b      	uxth	r3, r3
 8013f5a:	803b      	strh	r3, [r7, #0]
    lv_opa_t mix = (i * 255) / d;
 8013f5c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013f60:	4613      	mov	r3, r2
 8013f62:	021b      	lsls	r3, r3, #8
 8013f64:	1a9a      	subs	r2, r3, r2
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	fb92 f3f3 	sdiv	r3, r2, r3
 8013f6c:	72fb      	strb	r3, [r7, #11]
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
 8013f6e:	7afa      	ldrb	r2, [r7, #11]
 8013f70:	6879      	ldr	r1, [r7, #4]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6849      	ldr	r1, [r1, #4]
 8013f76:	6898      	ldr	r0, [r3, #8]
 8013f78:	f7ff f810 	bl	8012f9c <lv_color_mix>
 8013f7c:	4603      	mov	r3, r0
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3718      	adds	r7, #24
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}

08013f86 <draw_shadow>:

#if LV_USE_SHADOW
LV_ATTRIBUTE_FAST_MEM static void draw_shadow(const lv_area_t * coords, const lv_area_t * clip,
                                              const lv_draw_rect_dsc_t * dsc)
{
 8013f86:	b590      	push	{r4, r7, lr}
 8013f88:	b0cb      	sub	sp, #300	; 0x12c
 8013f8a:	af04      	add	r7, sp, #16
 8013f8c:	f107 030c 	add.w	r3, r7, #12
 8013f90:	6018      	str	r0, [r3, #0]
 8013f92:	f107 0308 	add.w	r3, r7, #8
 8013f96:	6019      	str	r1, [r3, #0]
 8013f98:	1d3b      	adds	r3, r7, #4
 8013f9a:	601a      	str	r2, [r3, #0]
    /*Check whether the shadow is visible*/
    if(dsc->shadow_width == 0) return;
 8013f9c:	1d3b      	adds	r3, r7, #4
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	f001 832a 	beq.w	80155fe <draw_shadow+0x1678>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 8013faa:	1d3b      	adds	r3, r7, #4
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013fb2:	2b02      	cmp	r3, #2
 8013fb4:	f241 8325 	bls.w	8015602 <draw_shadow+0x167c>

    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 8013fb8:	1d3b      	adds	r3, r7, #4
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013fc0:	2b01      	cmp	r3, #1
 8013fc2:	d112      	bne.n	8013fea <draw_shadow+0x64>
 8013fc4:	1d3b      	adds	r3, r7, #4
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d10c      	bne.n	8013fea <draw_shadow+0x64>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 8013fd0:	1d3b      	adds	r3, r7, #4
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d106      	bne.n	8013fea <draw_shadow+0x64>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 8013fdc:	1d3b      	adds	r3, r7, #4
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	f341 830e 	ble.w	8015606 <draw_shadow+0x1680>
        return;
    }

    int32_t sw = dsc->shadow_width;
 8013fea:	1d3b      	adds	r3, r7, #4
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ff2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    lv_area_t sh_rect_area;
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 8013ff6:	f107 030c 	add.w	r3, r7, #12
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014000:	b29a      	uxth	r2, r3
 8014002:	1d3b      	adds	r3, r7, #4
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 801400a:	b29b      	uxth	r3, r3
 801400c:	4413      	add	r3, r2
 801400e:	b29a      	uxth	r2, r3
 8014010:	1d3b      	adds	r3, r7, #4
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014018:	b29b      	uxth	r3, r3
 801401a:	1ad3      	subs	r3, r2, r3
 801401c:	b29b      	uxth	r3, r3
 801401e:	b21b      	sxth	r3, r3
 8014020:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 8014024:	f107 030c 	add.w	r3, r7, #12
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801402e:	b29a      	uxth	r2, r3
 8014030:	1d3b      	adds	r3, r7, #4
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8014038:	b29b      	uxth	r3, r3
 801403a:	4413      	add	r3, r2
 801403c:	b29a      	uxth	r2, r3
 801403e:	1d3b      	adds	r3, r7, #4
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014046:	b29b      	uxth	r3, r3
 8014048:	4413      	add	r3, r2
 801404a:	b29b      	uxth	r3, r3
 801404c:	b21b      	sxth	r3, r3
 801404e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8014052:	f107 030c 	add.w	r3, r7, #12
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801405c:	b29a      	uxth	r2, r3
 801405e:	1d3b      	adds	r3, r7, #4
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8014066:	b29b      	uxth	r3, r3
 8014068:	4413      	add	r3, r2
 801406a:	b29a      	uxth	r2, r3
 801406c:	1d3b      	adds	r3, r7, #4
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014074:	b29b      	uxth	r3, r3
 8014076:	1ad3      	subs	r3, r2, r3
 8014078:	b29b      	uxth	r3, r3
 801407a:	b21b      	sxth	r3, r3
 801407c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 8014080:	f107 030c 	add.w	r3, r7, #12
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801408a:	b29a      	uxth	r2, r3
 801408c:	1d3b      	adds	r3, r7, #4
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8014094:	b29b      	uxth	r3, r3
 8014096:	4413      	add	r3, r2
 8014098:	b29a      	uxth	r2, r3
 801409a:	1d3b      	adds	r3, r7, #4
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	4413      	add	r3, r2
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	b21b      	sxth	r3, r3
 80140aa:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

    lv_area_t sh_area;
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 80140ae:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 80140b2:	b29a      	uxth	r2, r3
 80140b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	da00      	bge.n	80140be <draw_shadow+0x138>
 80140bc:	3301      	adds	r3, #1
 80140be:	105b      	asrs	r3, r3, #1
 80140c0:	425b      	negs	r3, r3
 80140c2:	b29b      	uxth	r3, r3
 80140c4:	4413      	add	r3, r2
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	3b01      	subs	r3, #1
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	b21b      	sxth	r3, r3
 80140ce:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 80140d2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80140dc:	2b00      	cmp	r3, #0
 80140de:	da00      	bge.n	80140e2 <draw_shadow+0x15c>
 80140e0:	3301      	adds	r3, #1
 80140e2:	105b      	asrs	r3, r3, #1
 80140e4:	b29b      	uxth	r3, r3
 80140e6:	4413      	add	r3, r2
 80140e8:	b29b      	uxth	r3, r3
 80140ea:	3301      	adds	r3, #1
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	b21b      	sxth	r3, r3
 80140f0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 80140f4:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 80140f8:	b29a      	uxth	r2, r3
 80140fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80140fe:	2b00      	cmp	r3, #0
 8014100:	da00      	bge.n	8014104 <draw_shadow+0x17e>
 8014102:	3301      	adds	r3, #1
 8014104:	105b      	asrs	r3, r3, #1
 8014106:	425b      	negs	r3, r3
 8014108:	b29b      	uxth	r3, r3
 801410a:	4413      	add	r3, r2
 801410c:	b29b      	uxth	r3, r3
 801410e:	3b01      	subs	r3, #1
 8014110:	b29b      	uxth	r3, r3
 8014112:	b21b      	sxth	r3, r3
 8014114:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 8014118:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801411c:	b29a      	uxth	r2, r3
 801411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014122:	2b00      	cmp	r3, #0
 8014124:	da00      	bge.n	8014128 <draw_shadow+0x1a2>
 8014126:	3301      	adds	r3, #1
 8014128:	105b      	asrs	r3, r3, #1
 801412a:	b29b      	uxth	r3, r3
 801412c:	4413      	add	r3, r2
 801412e:	b29b      	uxth	r3, r3
 8014130:	3301      	adds	r3, #1
 8014132:	b29b      	uxth	r3, r3
 8014134:	b21b      	sxth	r3, r3
 8014136:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

    lv_opa_t opa = dsc->shadow_opa;
 801413a:	1d3b      	adds	r3, r7, #4
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014142:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8014146:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801414a:	2bfd      	cmp	r3, #253	; 0xfd
 801414c:	d902      	bls.n	8014154 <draw_shadow+0x1ce>
 801414e:	23ff      	movs	r3, #255	; 0xff
 8014150:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8014154:	f7f5 ff5c 	bl	800a010 <_lv_refr_get_disp_refreshing>
 8014158:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 801415c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8014160:	f006 f846 	bl	801a1f0 <lv_disp_get_buf>
 8014164:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 8014168:	f107 0308 	add.w	r3, r7, #8
 801416c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8014170:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8014174:	681a      	ldr	r2, [r3, #0]
 8014176:	f006 fd13 	bl	801aba0 <_lv_area_intersect>
 801417a:	4603      	mov	r3, r0
 801417c:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
    if(is_common == false) return;
 8014180:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8014184:	f083 0301 	eor.w	r3, r3, #1
 8014188:	b2db      	uxtb	r3, r3
 801418a:	2b00      	cmp	r3, #0
 801418c:	f041 823d 	bne.w	801560a <draw_shadow+0x1684>

    const lv_area_t * disp_area = &vdb->area;
 8014190:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014194:	3310      	adds	r3, #16
 8014196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 801419a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801419e:	b29a      	uxth	r2, r3
 80141a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141a8:	b29b      	uxth	r3, r3
 80141aa:	1ad3      	subs	r3, r2, r3
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	b21b      	sxth	r3, r3
 80141b0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    draw_area.y1 -= disp_area->y1;
 80141b4:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 80141b8:	b29a      	uxth	r2, r3
 80141ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80141c2:	b29b      	uxth	r3, r3
 80141c4:	1ad3      	subs	r3, r2, r3
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	b21b      	sxth	r3, r3
 80141ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    draw_area.x2 -= disp_area->x1;
 80141ce:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80141d2:	b29a      	uxth	r2, r3
 80141d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141dc:	b29b      	uxth	r3, r3
 80141de:	1ad3      	subs	r3, r2, r3
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	b21b      	sxth	r3, r3
 80141e4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    draw_area.y2 -= disp_area->y1;
 80141e8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80141ec:	b29a      	uxth	r2, r3
 80141ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	1ad3      	subs	r3, r2, r3
 80141fa:	b29b      	uxth	r3, r3
 80141fc:	b21b      	sxth	r3, r3
 80141fe:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

    /*Consider 1 px smaller bg to be sure the edge will be covered by the shadow*/
    lv_area_t bg_coords;
    lv_area_copy(&bg_coords, coords);
 8014202:	f107 030c 	add.w	r3, r7, #12
 8014206:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801420a:	6819      	ldr	r1, [r3, #0]
 801420c:	4610      	mov	r0, r2
 801420e:	f7fe fe89 	bl	8012f24 <lv_area_copy>
    bg_coords.x1 += 1;
 8014212:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8014216:	b29b      	uxth	r3, r3
 8014218:	3301      	adds	r3, #1
 801421a:	b29b      	uxth	r3, r3
 801421c:	b21b      	sxth	r3, r3
 801421e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    bg_coords.y1 += 1;
 8014222:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8014226:	b29b      	uxth	r3, r3
 8014228:	3301      	adds	r3, #1
 801422a:	b29b      	uxth	r3, r3
 801422c:	b21b      	sxth	r3, r3
 801422e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    bg_coords.x2 -= 1;
 8014232:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8014236:	b29b      	uxth	r3, r3
 8014238:	3b01      	subs	r3, #1
 801423a:	b29b      	uxth	r3, r3
 801423c:	b21b      	sxth	r3, r3
 801423e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    bg_coords.y2 -= 1;
 8014242:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8014246:	b29b      	uxth	r3, r3
 8014248:	3b01      	subs	r3, #1
 801424a:	b29b      	uxth	r3, r3
 801424c:	b21b      	sxth	r3, r3
 801424e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

    /*Get the real radius*/
    int32_t r_bg = dsc->radius;
 8014252:	1d3b      	adds	r3, r7, #4
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	f9b3 3000 	ldrsh.w	r3, [r3]
 801425a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 801425e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014262:	4618      	mov	r0, r3
 8014264:	f7fe fe6c 	bl	8012f40 <lv_area_get_width>
 8014268:	4603      	mov	r3, r0
 801426a:	461c      	mov	r4, r3
 801426c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014270:	4618      	mov	r0, r3
 8014272:	f7fe fe7c 	bl	8012f6e <lv_area_get_height>
 8014276:	4603      	mov	r3, r0
 8014278:	429c      	cmp	r4, r3
 801427a:	da06      	bge.n	801428a <draw_shadow+0x304>
 801427c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014280:	4618      	mov	r0, r3
 8014282:	f7fe fe5d 	bl	8012f40 <lv_area_get_width>
 8014286:	4603      	mov	r3, r0
 8014288:	e005      	b.n	8014296 <draw_shadow+0x310>
 801428a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801428e:	4618      	mov	r0, r3
 8014290:	f7fe fe6d 	bl	8012f6e <lv_area_get_height>
 8014294:	4603      	mov	r3, r0
 8014296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 801429a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801429e:	105b      	asrs	r3, r3, #1
 80142a0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80142a4:	429a      	cmp	r2, r3
 80142a6:	dd04      	ble.n	80142b2 <draw_shadow+0x32c>
 80142a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80142ac:	105b      	asrs	r3, r3, #1
 80142ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    int32_t r_sh = dsc->radius;
 80142b2:	1d3b      	adds	r3, r7, #4
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80142ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
 80142be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7fe fe3c 	bl	8012f40 <lv_area_get_width>
 80142c8:	4603      	mov	r3, r0
 80142ca:	461c      	mov	r4, r3
 80142cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7fe fe4c 	bl	8012f6e <lv_area_get_height>
 80142d6:	4603      	mov	r3, r0
 80142d8:	429c      	cmp	r4, r3
 80142da:	da06      	bge.n	80142ea <draw_shadow+0x364>
 80142dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7fe fe2d 	bl	8012f40 <lv_area_get_width>
 80142e6:	4603      	mov	r3, r0
 80142e8:	e005      	b.n	80142f6 <draw_shadow+0x370>
 80142ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7fe fe3d 	bl	8012f6e <lv_area_get_height>
 80142f4:	4603      	mov	r3, r0
 80142f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 80142fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80142fe:	105b      	asrs	r3, r3, #1
 8014300:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8014304:	429a      	cmp	r2, r3
 8014306:	dd04      	ble.n	8014312 <draw_shadow+0x38c>
 8014308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801430c:	105b      	asrs	r3, r3, #1
 801430e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    int32_t corner_size = sw  + r_sh;
 8014312:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8014316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801431a:	4413      	add	r3, r2
 801431c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            sh_cache_size = corner_size;
            sh_cache_r = r_sh;
        }
    }
#else
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 8014320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014324:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014328:	fb02 f303 	mul.w	r3, r2, r3
 801432c:	005b      	lsls	r3, r3, #1
 801432e:	4618      	mov	r0, r3
 8014330:	f008 f97e 	bl	801c630 <_lv_mem_buf_get>
 8014334:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 8014338:	1d3b      	adds	r3, r7, #4
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8014340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014344:	b21b      	sxth	r3, r3
 8014346:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 801434a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801434e:	f001 f961 	bl	8015614 <shadow_draw_corner_buf>
#endif

    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 8014352:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8014356:	b29c      	uxth	r4, r3
 8014358:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801435c:	4618      	mov	r0, r3
 801435e:	f7fe fe06 	bl	8012f6e <lv_area_get_height>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	da00      	bge.n	801436a <draw_shadow+0x3e4>
 8014368:	3301      	adds	r3, #1
 801436a:	105b      	asrs	r3, r3, #1
 801436c:	b21b      	sxth	r3, r3
 801436e:	b29b      	uxth	r3, r3
 8014370:	4423      	add	r3, r4
 8014372:	b29b      	uxth	r3, r3
 8014374:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 8014378:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801437c:	b29c      	uxth	r4, r3
 801437e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014382:	4618      	mov	r0, r3
 8014384:	f7fe fddc 	bl	8012f40 <lv_area_get_width>
 8014388:	4603      	mov	r3, r0
 801438a:	2b00      	cmp	r3, #0
 801438c:	da00      	bge.n	8014390 <draw_shadow+0x40a>
 801438e:	3301      	adds	r3, #1
 8014390:	105b      	asrs	r3, r3, #1
 8014392:	b21b      	sxth	r3, r3
 8014394:	b29b      	uxth	r3, r3
 8014396:	4423      	add	r3, r4
 8014398:	b29b      	uxth	r3, r3
 801439a:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

    bool simple_mode = true;
 801439e:	2301      	movs	r3, #1
 80143a0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 80143a4:	f7fd fadc 	bl	8011960 <lv_draw_mask_get_cnt>
 80143a8:	4603      	mov	r3, r0
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d003      	beq.n	80143b6 <draw_shadow+0x430>
 80143ae:	2300      	movs	r3, #0
 80143b0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 80143b4:	e018      	b.n	80143e8 <draw_shadow+0x462>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
 80143b6:	1d3b      	adds	r3, r7, #4
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d105      	bne.n	80143ce <draw_shadow+0x448>
 80143c2:	1d3b      	adds	r3, r7, #4
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d003      	beq.n	80143d6 <draw_shadow+0x450>
 80143ce:	2300      	movs	r3, #0
 80143d0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 80143d4:	e008      	b.n	80143e8 <draw_shadow+0x462>
    else if(dsc->shadow_spread != 0) simple_mode = false;
 80143d6:	1d3b      	adds	r3, r7, #4
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d002      	beq.n	80143e8 <draw_shadow+0x462>
 80143e2:	2300      	movs	r3, #0
 80143e4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

    /*Create a mask*/
    lv_draw_mask_res_t mask_res;
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
 80143e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7fe fda7 	bl	8012f40 <lv_area_get_width>
 80143f2:	4603      	mov	r3, r0
 80143f4:	4618      	mov	r0, r3
 80143f6:	f008 f91b 	bl	801c630 <_lv_mem_buf_get>
 80143fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 80143fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014402:	b21a      	sxth	r2, r3
 8014404:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014408:	f107 0068 	add.w	r0, r7, #104	; 0x68
 801440c:	2301      	movs	r3, #1
 801440e:	f7fd fbf3 	bl	8011bf8 <lv_draw_mask_radius_init>

    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8014412:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014416:	2100      	movs	r1, #0
 8014418:	4618      	mov	r0, r3
 801441a:	f7fd f9d3 	bl	80117c4 <lv_draw_mask_add>
 801441e:	4603      	mov	r3, r0
 8014420:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    lv_area_t a;

    /*Draw the top right corner*/
    int32_t y;
    lv_opa_t * sh_buf_tmp;
    a.x2 = sh_area.x2;
 8014424:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8014428:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 801442c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8014430:	b29a      	uxth	r2, r3
 8014432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014436:	b29b      	uxth	r3, r3
 8014438:	1ad3      	subs	r3, r2, r3
 801443a:	b29b      	uxth	r3, r3
 801443c:	3301      	adds	r3, #1
 801443e:	b29b      	uxth	r3, r3
 8014440:	b21b      	sxth	r3, r3
 8014442:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.y1 = sh_area.y1;
 8014446:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801444a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = a.y1 + corner_size - 1;
 801444e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8014452:	b29a      	uxth	r2, r3
 8014454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014458:	b29b      	uxth	r3, r3
 801445a:	4413      	add	r3, r2
 801445c:	b29b      	uxth	r3, r3
 801445e:	3b01      	subs	r3, #1
 8014460:	b29b      	uxth	r3, r3
 8014462:	b21b      	sxth	r3, r3
 8014464:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    lv_area_t ca;
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 8014468:	f107 0308 	add.w	r3, r7, #8
 801446c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014470:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014474:	681a      	ldr	r2, [r3, #0]
 8014476:	f006 fb93 	bl	801aba0 <_lv_area_intersect>
 801447a:	4603      	mov	r3, r0
 801447c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014480:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014484:	2b00      	cmp	r3, #0
 8014486:	f000 80bf 	beq.w	8014608 <draw_shadow+0x682>
 801448a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801448e:	b21a      	sxth	r2, r3
 8014490:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014494:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014498:	4618      	mov	r0, r3
 801449a:	f006 fd65 	bl	801af68 <_lv_area_is_in>
 801449e:	4603      	mov	r3, r0
 80144a0:	f083 0301 	eor.w	r3, r3, #1
 80144a4:	b2db      	uxtb	r3, r3
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	f000 80ae 	beq.w	8014608 <draw_shadow+0x682>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y2 > h_half) ca.y2 = h_half;
 80144ac:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80144b0:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 80144b4:	429a      	cmp	r2, r3
 80144b6:	da03      	bge.n	80144c0 <draw_shadow+0x53a>
 80144b8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80144bc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 80144c0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80144c4:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80144c8:	429a      	cmp	r2, r3
 80144ca:	db06      	blt.n	80144da <draw_shadow+0x554>
 80144cc:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80144d0:	3301      	adds	r3, #1
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	b21b      	sxth	r3, r3
 80144d6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        lv_coord_t h = lv_area_get_height(&ca);
 80144da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80144de:	4618      	mov	r0, r3
 80144e0:	f7fe fd45 	bl	8012f6e <lv_area_get_height>
 80144e4:	4603      	mov	r3, r0
 80144e6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
        lv_coord_t w = lv_area_get_width(&ca);
 80144ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7fe fd26 	bl	8012f40 <lv_area_get_width>
 80144f4:	4603      	mov	r3, r0
 80144f6:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        if(w > 0) {
 80144fa:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 80144fe:	2b00      	cmp	r3, #0
 8014500:	f340 8082 	ble.w	8014608 <draw_shadow+0x682>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8014504:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014508:	461a      	mov	r2, r3
 801450a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801450e:	1ad3      	subs	r3, r2, r3
 8014510:	461a      	mov	r2, r3
 8014512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014516:	4413      	add	r3, r2
 8014518:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 801451c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8014520:	461a      	mov	r2, r3
 8014522:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8014526:	1ad3      	subs	r3, r2, r3
 8014528:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801452c:	fb02 f303 	mul.w	r3, r2, r3
 8014530:	461a      	mov	r2, r3
 8014532:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014536:	4413      	add	r3, r2
 8014538:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 801453c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014540:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014544:	4611      	mov	r1, r2
 8014546:	4618      	mov	r0, r3
 8014548:	f7fe fcec 	bl	8012f24 <lv_area_copy>
            fa.y2 = fa.y1;
 801454c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8014550:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            for(y = 0; y < h; y++) {
 8014554:	2300      	movs	r3, #0
 8014556:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801455a:	e04f      	b.n	80145fc <draw_shadow+0x676>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 801455c:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8014560:	461a      	mov	r2, r3
 8014562:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014566:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801456a:	f008 f9c5 	bl	801c8f8 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 801456e:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	; 0x50
 8014572:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8014576:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 801457a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801457e:	f7fd f953 	bl	8011828 <lv_draw_mask_apply>
 8014582:	4603      	mov	r3, r0
 8014584:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014588:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 801458c:	2b01      	cmp	r3, #1
 801458e:	d102      	bne.n	8014596 <draw_shadow+0x610>
 8014590:	2302      	movs	r3, #2
 8014592:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8014596:	1d3b      	adds	r3, r7, #4
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801459e:	1d3a      	adds	r2, r7, #4
 80145a0:	6812      	ldr	r2, [r2, #0]
 80145a2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80145a6:	f107 0008 	add.w	r0, r7, #8
 80145aa:	9302      	str	r3, [sp, #8]
 80145ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80145b0:	9301      	str	r3, [sp, #4]
 80145b2:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80145b6:	9300      	str	r3, [sp, #0]
 80145b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80145bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80145be:	6800      	ldr	r0, [r0, #0]
 80145c0:	f7f7 ff04 	bl	800c3cc <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1++;
 80145c4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	3301      	adds	r3, #1
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	b21b      	sxth	r3, r3
 80145d0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                fa.y2++;
 80145d4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80145d8:	b29b      	uxth	r3, r3
 80145da:	3301      	adds	r3, #1
 80145dc:	b29b      	uxth	r3, r3
 80145de:	b21b      	sxth	r3, r3
 80145e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                sh_buf_tmp += corner_size;
 80145e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80145e8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80145ec:	4413      	add	r3, r2
 80145ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 80145f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80145f6:	3301      	adds	r3, #1
 80145f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80145fc:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	; 0xca
 8014600:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014604:	429a      	cmp	r2, r3
 8014606:	dba9      	blt.n	801455c <draw_shadow+0x5d6>
            }
        }
    }

    /*Draw the bottom right corner*/
    a.x2 = sh_area.x2;
 8014608:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 801460c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 8014610:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8014614:	b29a      	uxth	r2, r3
 8014616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801461a:	b29b      	uxth	r3, r3
 801461c:	1ad3      	subs	r3, r2, r3
 801461e:	b29b      	uxth	r3, r3
 8014620:	3301      	adds	r3, #1
 8014622:	b29b      	uxth	r3, r3
 8014624:	b21b      	sxth	r3, r3
 8014626:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.y1 = sh_area.y2 - corner_size + 1;
 801462a:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 801462e:	b29a      	uxth	r2, r3
 8014630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014634:	b29b      	uxth	r3, r3
 8014636:	1ad3      	subs	r3, r2, r3
 8014638:	b29b      	uxth	r3, r3
 801463a:	3301      	adds	r3, #1
 801463c:	b29b      	uxth	r3, r3
 801463e:	b21b      	sxth	r3, r3
 8014640:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2;
 8014644:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014648:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 801464c:	f107 0308 	add.w	r3, r7, #8
 8014650:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014654:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	f006 faa1 	bl	801aba0 <_lv_area_intersect>
 801465e:	4603      	mov	r3, r0
 8014660:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014664:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014668:	2b00      	cmp	r3, #0
 801466a:	f000 80c2 	beq.w	80147f2 <draw_shadow+0x86c>
 801466e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014672:	b21a      	sxth	r2, r3
 8014674:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014678:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801467c:	4618      	mov	r0, r3
 801467e:	f006 fc73 	bl	801af68 <_lv_area_is_in>
 8014682:	4603      	mov	r3, r0
 8014684:	f083 0301 	eor.w	r3, r3, #1
 8014688:	b2db      	uxtb	r3, r3
 801468a:	2b00      	cmp	r3, #0
 801468c:	f000 80b1 	beq.w	80147f2 <draw_shadow+0x86c>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 8014690:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8014694:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8014698:	429a      	cmp	r2, r3
 801469a:	db06      	blt.n	80146aa <draw_shadow+0x724>
 801469c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80146a0:	3301      	adds	r3, #1
 80146a2:	b29b      	uxth	r3, r3
 80146a4:	b21b      	sxth	r3, r3
 80146a6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 80146aa:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80146ae:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80146b2:	429a      	cmp	r2, r3
 80146b4:	db06      	blt.n	80146c4 <draw_shadow+0x73e>
 80146b6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80146ba:	3301      	adds	r3, #1
 80146bc:	b29b      	uxth	r3, r3
 80146be:	b21b      	sxth	r3, r3
 80146c0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        lv_coord_t h = lv_area_get_height(&ca);
 80146c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7fe fc50 	bl	8012f6e <lv_area_get_height>
 80146ce:	4603      	mov	r3, r0
 80146d0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        lv_coord_t w = lv_area_get_width(&ca);
 80146d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80146d8:	4618      	mov	r0, r3
 80146da:	f7fe fc31 	bl	8012f40 <lv_area_get_width>
 80146de:	4603      	mov	r3, r0
 80146e0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

        if(w > 0) {
 80146e4:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	f340 8082 	ble.w	80147f2 <draw_shadow+0x86c>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 80146ee:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80146f2:	461a      	mov	r2, r3
 80146f4:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80146f8:	1ad3      	subs	r3, r2, r3
 80146fa:	461a      	mov	r2, r3
 80146fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014700:	4413      	add	r3, r2
 8014702:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8014706:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801470a:	461a      	mov	r2, r3
 801470c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014710:	1ad3      	subs	r3, r2, r3
 8014712:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014716:	fb02 f303 	mul.w	r3, r2, r3
 801471a:	461a      	mov	r2, r3
 801471c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014720:	4413      	add	r3, r2
 8014722:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014726:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801472a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801472e:	4611      	mov	r1, r2
 8014730:	4618      	mov	r0, r3
 8014732:	f7fe fbf7 	bl	8012f24 <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 8014736:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801473a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

            for(y = 0; y < h; y++) {
 801473e:	2300      	movs	r3, #0
 8014740:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014744:	e04f      	b.n	80147e6 <draw_shadow+0x860>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014746:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 801474a:	461a      	mov	r2, r3
 801474c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014750:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014754:	f008 f8d0 	bl	801c8f8 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014758:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
 801475c:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8014760:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8014764:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014768:	f7fd f85e 	bl	8011828 <lv_draw_mask_apply>
 801476c:	4603      	mov	r3, r0
 801476e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014772:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014776:	2b01      	cmp	r3, #1
 8014778:	d102      	bne.n	8014780 <draw_shadow+0x7fa>
 801477a:	2302      	movs	r3, #2
 801477c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8014780:	1d3b      	adds	r3, r7, #4
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014788:	1d3a      	adds	r2, r7, #4
 801478a:	6812      	ldr	r2, [r2, #0]
 801478c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8014790:	f107 0008 	add.w	r0, r7, #8
 8014794:	9302      	str	r3, [sp, #8]
 8014796:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801479a:	9301      	str	r3, [sp, #4]
 801479c:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80147a0:	9300      	str	r3, [sp, #0]
 80147a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80147a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80147a8:	6800      	ldr	r0, [r0, #0]
 80147aa:	f7f7 fe0f 	bl	800c3cc <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1--;
 80147ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	3b01      	subs	r3, #1
 80147b6:	b29b      	uxth	r3, r3
 80147b8:	b21b      	sxth	r3, r3
 80147ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fa.y2--;
 80147be:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	3b01      	subs	r3, #1
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	b21b      	sxth	r3, r3
 80147ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                sh_buf_tmp += corner_size;
 80147ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80147d2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80147d6:	4413      	add	r3, r2
 80147d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 80147dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80147e0:	3301      	adds	r3, #1
 80147e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80147e6:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 80147ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80147ee:	429a      	cmp	r2, r3
 80147f0:	dba9      	blt.n	8014746 <draw_shadow+0x7c0>
            }
        }
    }

    /*Fill the right side*/
    a.x2 = sh_area.x2;
 80147f2:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80147f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 80147fa:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80147fe:	b29a      	uxth	r2, r3
 8014800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014804:	b29b      	uxth	r3, r3
 8014806:	1ad3      	subs	r3, r2, r3
 8014808:	b29b      	uxth	r3, r3
 801480a:	3301      	adds	r3, #1
 801480c:	b29b      	uxth	r3, r3
 801480e:	b21b      	sxth	r3, r3
 8014810:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.y1 = sh_area.y1 + corner_size;
 8014814:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8014818:	b29a      	uxth	r2, r3
 801481a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801481e:	b29b      	uxth	r3, r3
 8014820:	4413      	add	r3, r2
 8014822:	b29b      	uxth	r3, r3
 8014824:	b21b      	sxth	r3, r3
 8014826:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2 - corner_size;
 801482a:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 801482e:	b29a      	uxth	r2, r3
 8014830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014834:	b29b      	uxth	r3, r3
 8014836:	1ad3      	subs	r3, r2, r3
 8014838:	b29b      	uxth	r3, r3
 801483a:	b21b      	sxth	r3, r3
 801483c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014840:	f107 0308 	add.w	r3, r7, #8
 8014844:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014848:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801484c:	681a      	ldr	r2, [r3, #0]
 801484e:	f006 f9a7 	bl	801aba0 <_lv_area_intersect>
 8014852:	4603      	mov	r3, r0
 8014854:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014858:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 801485c:	2b00      	cmp	r3, #0
 801485e:	f000 80bd 	beq.w	80149dc <draw_shadow+0xa56>
 8014862:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014866:	b21a      	sxth	r2, r3
 8014868:	f107 0184 	add.w	r1, r7, #132	; 0x84
 801486c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014870:	4618      	mov	r0, r3
 8014872:	f006 fb79 	bl	801af68 <_lv_area_is_in>
 8014876:	4603      	mov	r3, r0
 8014878:	f083 0301 	eor.w	r3, r3, #1
 801487c:	b2db      	uxtb	r3, r3
 801487e:	2b00      	cmp	r3, #0
 8014880:	f000 80ac 	beq.w	80149dc <draw_shadow+0xa56>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
 8014884:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8014888:	2b00      	cmp	r3, #0
 801488a:	d00c      	beq.n	80148a6 <draw_shadow+0x920>
 801488c:	f107 030c 	add.w	r3, r7, #12
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014896:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801489a:	4293      	cmp	r3, r2
 801489c:	bfb8      	it	lt
 801489e:	4613      	movlt	r3, r2
 80148a0:	b21b      	sxth	r3, r3
 80148a2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 80148a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7fe fb48 	bl	8012f40 <lv_area_get_width>
 80148b0:	4603      	mov	r3, r0
 80148b2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        if(w > 0) {
 80148b6:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	f340 808e 	ble.w	80149dc <draw_shadow+0xa56>
            lv_coord_t h = lv_area_get_height(&ca);
 80148c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7fe fb52 	bl	8012f6e <lv_area_get_height>
 80148ca:	4603      	mov	r3, r0
 80148cc:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

            /*The last line of the shadow is repeated on the side*/
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 80148d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148d4:	3b01      	subs	r3, #1
 80148d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80148da:	fb02 f303 	mul.w	r3, r2, r3
 80148de:	461a      	mov	r2, r3
 80148e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80148e4:	4413      	add	r3, r2
 80148e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += ca.x1 - a.x1;
 80148ea:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80148ee:	461a      	mov	r2, r3
 80148f0:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80148f4:	1ad3      	subs	r3, r2, r3
 80148f6:	461a      	mov	r2, r3
 80148f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80148fc:	4413      	add	r3, r2
 80148fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014902:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014906:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801490a:	4611      	mov	r1, r2
 801490c:	4618      	mov	r0, r3
 801490e:	f7fe fb09 	bl	8012f24 <lv_area_copy>
            fa.y2 = fa.y1;
 8014912:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8014916:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801491a:	2301      	movs	r3, #1
 801491c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            for(y = 0; y < h; y++) {
 8014920:	2300      	movs	r3, #0
 8014922:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014926:	e053      	b.n	80149d0 <draw_shadow+0xa4a>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014928:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 801492c:	461a      	mov	r2, r3
 801492e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014932:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014936:	f007 ffdf 	bl	801c8f8 <_lv_memcpy>

                if(simple_mode) {
 801493a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 801493e:	2b00      	cmp	r3, #0
 8014940:	d003      	beq.n	801494a <draw_shadow+0x9c4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014942:	2302      	movs	r3, #2
 8014944:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8014948:	e013      	b.n	8014972 <draw_shadow+0x9ec>
                }
                else {
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 801494a:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	; 0x40
 801494e:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8014952:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8014956:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801495a:	f7fc ff65 	bl	8011828 <lv_draw_mask_apply>
 801495e:	4603      	mov	r3, r0
 8014960:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014964:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014968:	2b01      	cmp	r3, #1
 801496a:	d102      	bne.n	8014972 <draw_shadow+0x9ec>
 801496c:	2302      	movs	r3, #2
 801496e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                }

                _lv_blend_fill(clip, &fa,
 8014972:	1d3b      	adds	r3, r7, #4
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801497a:	1d3a      	adds	r2, r7, #4
 801497c:	6812      	ldr	r2, [r2, #0]
 801497e:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8014982:	1d3a      	adds	r2, r7, #4
 8014984:	6812      	ldr	r2, [r2, #0]
 8014986:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801498a:	f107 0008 	add.w	r0, r7, #8
 801498e:	9102      	str	r1, [sp, #8]
 8014990:	9301      	str	r3, [sp, #4]
 8014992:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014996:	9300      	str	r3, [sp, #0]
 8014998:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801499c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801499e:	4621      	mov	r1, r4
 80149a0:	6800      	ldr	r0, [r0, #0]
 80149a2:	f7f7 fd13 	bl	800c3cc <_lv_blend_fill>
                               dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->shadow_blend_mode);
                fa.y1++;
 80149a6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80149aa:	b29b      	uxth	r3, r3
 80149ac:	3301      	adds	r3, #1
 80149ae:	b29b      	uxth	r3, r3
 80149b0:	b21b      	sxth	r3, r3
 80149b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                fa.y2++;
 80149b6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	3301      	adds	r3, #1
 80149be:	b29b      	uxth	r3, r3
 80149c0:	b21b      	sxth	r3, r3
 80149c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for(y = 0; y < h; y++) {
 80149c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80149ca:	3301      	adds	r3, #1
 80149cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80149d0:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 80149d4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80149d8:	429a      	cmp	r2, r3
 80149da:	dba5      	blt.n	8014928 <draw_shadow+0x9a2>
            }
        }
    }

    /*Invert the shadow corner buffer and draw the corners on the left*/
    sh_buf_tmp = sh_buf ;
 80149dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80149e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    for(y = 0; y < corner_size; y++) {
 80149e4:	2300      	movs	r3, #0
 80149e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80149ea:	e043      	b.n	8014a74 <draw_shadow+0xaee>
        int32_t x;
        for(x = 0; x < corner_size / 2; x++) {
 80149ec:	2300      	movs	r3, #0
 80149ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80149f2:	e028      	b.n	8014a46 <draw_shadow+0xac0>
            lv_opa_t tmp = sh_buf_tmp[x];
 80149f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80149f8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80149fc:	4413      	add	r3, r2
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
 8014a04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014a0c:	1ad3      	subs	r3, r2, r3
 8014a0e:	3b01      	subs	r3, #1
 8014a10:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014a14:	441a      	add	r2, r3
 8014a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014a1a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014a1e:	440b      	add	r3, r1
 8014a20:	7812      	ldrb	r2, [r2, #0]
 8014a22:	701a      	strb	r2, [r3, #0]
            sh_buf_tmp[corner_size - x - 1] = tmp;
 8014a24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014a2c:	1ad3      	subs	r3, r2, r3
 8014a2e:	3b01      	subs	r3, #1
 8014a30:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014a34:	4413      	add	r3, r2
 8014a36:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8014a3a:	701a      	strb	r2, [r3, #0]
        for(x = 0; x < corner_size / 2; x++) {
 8014a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014a40:	3301      	adds	r3, #1
 8014a42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	da00      	bge.n	8014a50 <draw_shadow+0xaca>
 8014a4e:	3301      	adds	r3, #1
 8014a50:	105b      	asrs	r3, r3, #1
 8014a52:	461a      	mov	r2, r3
 8014a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014a58:	4293      	cmp	r3, r2
 8014a5a:	dbcb      	blt.n	80149f4 <draw_shadow+0xa6e>
        }
        sh_buf_tmp += corner_size;
 8014a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a60:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014a64:	4413      	add	r3, r2
 8014a66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    for(y = 0; y < corner_size; y++) {
 8014a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014a6e:	3301      	adds	r3, #1
 8014a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014a74:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	dbb5      	blt.n	80149ec <draw_shadow+0xa66>
    }

    /*Draw the top left corner*/
    a.x1 = sh_area.x1;
 8014a80:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8014a84:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = a.x1 + corner_size - 1;
 8014a88:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014a8c:	b29a      	uxth	r2, r3
 8014a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	4413      	add	r3, r2
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	3b01      	subs	r3, #1
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	b21b      	sxth	r3, r3
 8014a9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1;
 8014aa2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8014aa6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = a.y1 + corner_size - 1;
 8014aaa:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8014aae:	b29a      	uxth	r2, r3
 8014ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	4413      	add	r3, r2
 8014ab8:	b29b      	uxth	r3, r3
 8014aba:	3b01      	subs	r3, #1
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	b21b      	sxth	r3, r3
 8014ac0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014ac4:	f107 0308 	add.w	r3, r7, #8
 8014ac8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014acc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014ad0:	681a      	ldr	r2, [r3, #0]
 8014ad2:	f006 f865 	bl	801aba0 <_lv_area_intersect>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014adc:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	f000 80b8 	beq.w	8014c56 <draw_shadow+0xcd0>
 8014ae6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014aea:	b21a      	sxth	r2, r3
 8014aec:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014af0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014af4:	4618      	mov	r0, r3
 8014af6:	f006 fa37 	bl	801af68 <_lv_area_is_in>
 8014afa:	4603      	mov	r3, r0
 8014afc:	f083 0301 	eor.w	r3, r3, #1
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	f000 80a7 	beq.w	8014c56 <draw_shadow+0xcd0>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y2 > h_half) ca.y2 = h_half;
 8014b08:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014b0c:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8014b10:	429a      	cmp	r2, r3
 8014b12:	da03      	bge.n	8014b1c <draw_shadow+0xb96>
 8014b14:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8014b18:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        if(ca.x2 > w_half) ca.x2 = w_half;
 8014b1c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8014b20:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8014b24:	429a      	cmp	r2, r3
 8014b26:	da03      	bge.n	8014b30 <draw_shadow+0xbaa>
 8014b28:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8014b2c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

        lv_coord_t h = lv_area_get_height(&ca);
 8014b30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014b34:	4618      	mov	r0, r3
 8014b36:	f7fe fa1a 	bl	8012f6e <lv_area_get_height>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        lv_coord_t w = lv_area_get_width(&ca);
 8014b40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014b44:	4618      	mov	r0, r3
 8014b46:	f7fe f9fb 	bl	8012f40 <lv_area_get_width>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        if(w > 0) {
 8014b50:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	dd7e      	ble.n	8014c56 <draw_shadow+0xcd0>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8014b58:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014b5c:	461a      	mov	r2, r3
 8014b5e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014b62:	1ad3      	subs	r3, r2, r3
 8014b64:	461a      	mov	r2, r3
 8014b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014b6a:	4413      	add	r3, r2
 8014b6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8014b70:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8014b74:	461a      	mov	r2, r3
 8014b76:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8014b7a:	1ad3      	subs	r3, r2, r3
 8014b7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014b80:	fb02 f303 	mul.w	r3, r2, r3
 8014b84:	461a      	mov	r2, r3
 8014b86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014b8a:	4413      	add	r3, r2
 8014b8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014b90:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014b94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014b98:	4611      	mov	r1, r2
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7fe f9c2 	bl	8012f24 <lv_area_copy>
            fa.y2 = fa.y1;
 8014ba0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8014ba4:	87fb      	strh	r3, [r7, #62]	; 0x3e

            for(y = 0; y < h; y++) {
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014bac:	e04d      	b.n	8014c4a <draw_shadow+0xcc4>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014bae:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8014bb2:	461a      	mov	r2, r3
 8014bb4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014bb8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014bbc:	f007 fe9c 	bl	801c8f8 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014bc0:	f9b7 1038 	ldrsh.w	r1, [r7, #56]	; 0x38
 8014bc4:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8014bc8:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8014bcc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014bd0:	f7fc fe2a 	bl	8011828 <lv_draw_mask_apply>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014bda:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014bde:	2b01      	cmp	r3, #1
 8014be0:	d102      	bne.n	8014be8 <draw_shadow+0xc62>
 8014be2:	2302      	movs	r3, #2
 8014be4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8014be8:	1d3b      	adds	r3, r7, #4
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014bf0:	1d3a      	adds	r2, r7, #4
 8014bf2:	6812      	ldr	r2, [r2, #0]
 8014bf4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8014bf8:	f107 0008 	add.w	r0, r7, #8
 8014bfc:	9302      	str	r3, [sp, #8]
 8014bfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014c02:	9301      	str	r3, [sp, #4]
 8014c04:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014c08:	9300      	str	r3, [sp, #0]
 8014c0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014c0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014c10:	6800      	ldr	r0, [r0, #0]
 8014c12:	f7f7 fbdb 	bl	800c3cc <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1++;
 8014c16:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	3301      	adds	r3, #1
 8014c1e:	b29b      	uxth	r3, r3
 8014c20:	b21b      	sxth	r3, r3
 8014c22:	877b      	strh	r3, [r7, #58]	; 0x3a
                fa.y2++;
 8014c24:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8014c28:	b29b      	uxth	r3, r3
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	b29b      	uxth	r3, r3
 8014c2e:	b21b      	sxth	r3, r3
 8014c30:	87fb      	strh	r3, [r7, #62]	; 0x3e
                sh_buf_tmp += corner_size;
 8014c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014c36:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014c3a:	4413      	add	r3, r2
 8014c3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 8014c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014c44:	3301      	adds	r3, #1
 8014c46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014c4a:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8014c4e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014c52:	429a      	cmp	r2, r3
 8014c54:	dbab      	blt.n	8014bae <draw_shadow+0xc28>
            }
        }
    }

    /*Draw the bottom left corner*/
    a.x1 = sh_area.x1;
 8014c56:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8014c5a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = a.x1 + corner_size - 1;
 8014c5e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014c62:	b29a      	uxth	r2, r3
 8014c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014c68:	b29b      	uxth	r3, r3
 8014c6a:	4413      	add	r3, r2
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	3b01      	subs	r3, #1
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	b21b      	sxth	r3, r3
 8014c74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 8014c78:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	1ad3      	subs	r3, r2, r3
 8014c86:	b29b      	uxth	r3, r3
 8014c88:	3301      	adds	r3, #1
 8014c8a:	b29b      	uxth	r3, r3
 8014c8c:	b21b      	sxth	r3, r3
 8014c8e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2;
 8014c92:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014c96:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014c9a:	f107 0308 	add.w	r3, r7, #8
 8014c9e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014ca2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014ca6:	681a      	ldr	r2, [r3, #0]
 8014ca8:	f005 ff7a 	bl	801aba0 <_lv_area_intersect>
 8014cac:	4603      	mov	r3, r0
 8014cae:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014cb2:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	f000 80bb 	beq.w	8014e32 <draw_shadow+0xeac>
 8014cbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014cc0:	b21a      	sxth	r2, r3
 8014cc2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014cc6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f006 f94c 	bl	801af68 <_lv_area_is_in>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	f083 0301 	eor.w	r3, r3, #1
 8014cd6:	b2db      	uxtb	r3, r3
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	f000 80aa 	beq.w	8014e32 <draw_shadow+0xeac>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 8014cde:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8014ce2:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	db06      	blt.n	8014cf8 <draw_shadow+0xd72>
 8014cea:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8014cee:	3301      	adds	r3, #1
 8014cf0:	b29b      	uxth	r3, r3
 8014cf2:	b21b      	sxth	r3, r3
 8014cf4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        if(ca.x2 > w_half) ca.x2 = w_half;
 8014cf8:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8014cfc:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8014d00:	429a      	cmp	r2, r3
 8014d02:	da03      	bge.n	8014d0c <draw_shadow+0xd86>
 8014d04:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8014d08:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        lv_coord_t h = lv_area_get_height(&ca);
 8014d0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014d10:	4618      	mov	r0, r3
 8014d12:	f7fe f92c 	bl	8012f6e <lv_area_get_height>
 8014d16:	4603      	mov	r3, r0
 8014d18:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        lv_coord_t w = lv_area_get_width(&ca);
 8014d1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7fe f90d 	bl	8012f40 <lv_area_get_width>
 8014d26:	4603      	mov	r3, r0
 8014d28:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8

        if(w > 0) {
 8014d2c:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	dd7e      	ble.n	8014e32 <draw_shadow+0xeac>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8014d34:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014d38:	461a      	mov	r2, r3
 8014d3a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014d3e:	1ad3      	subs	r3, r2, r3
 8014d40:	461a      	mov	r2, r3
 8014d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014d46:	4413      	add	r3, r2
 8014d48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8014d4c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8014d50:	461a      	mov	r2, r3
 8014d52:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014d56:	1ad3      	subs	r3, r2, r3
 8014d58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014d5c:	fb02 f303 	mul.w	r3, r2, r3
 8014d60:	461a      	mov	r2, r3
 8014d62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014d66:	4413      	add	r3, r2
 8014d68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014d6c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014d70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014d74:	4611      	mov	r1, r2
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7fe f8d4 	bl	8012f24 <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 8014d7c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014d80:	867b      	strh	r3, [r7, #50]	; 0x32

            for(y = 0; y < h; y++) {
 8014d82:	2300      	movs	r3, #0
 8014d84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014d88:	e04d      	b.n	8014e26 <draw_shadow+0xea0>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014d8a:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 8014d8e:	461a      	mov	r2, r3
 8014d90:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014d94:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014d98:	f007 fdae 	bl	801c8f8 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014d9c:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8014da0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8014da4:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 8014da8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014dac:	f7fc fd3c 	bl	8011828 <lv_draw_mask_apply>
 8014db0:	4603      	mov	r3, r0
 8014db2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014db6:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014dba:	2b01      	cmp	r3, #1
 8014dbc:	d102      	bne.n	8014dc4 <draw_shadow+0xe3e>
 8014dbe:	2302      	movs	r3, #2
 8014dc0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8014dc4:	1d3b      	adds	r3, r7, #4
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014dcc:	1d3a      	adds	r2, r7, #4
 8014dce:	6812      	ldr	r2, [r2, #0]
 8014dd0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014dd4:	f107 0008 	add.w	r0, r7, #8
 8014dd8:	9302      	str	r3, [sp, #8]
 8014dda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014dde:	9301      	str	r3, [sp, #4]
 8014de0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014de4:	9300      	str	r3, [sp, #0]
 8014de6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014dea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014dec:	6800      	ldr	r0, [r0, #0]
 8014dee:	f7f7 faed 	bl	800c3cc <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1--;
 8014df2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8014df6:	b29b      	uxth	r3, r3
 8014df8:	3b01      	subs	r3, #1
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	b21b      	sxth	r3, r3
 8014dfe:	867b      	strh	r3, [r7, #50]	; 0x32
                fa.y2--;
 8014e00:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014e04:	b29b      	uxth	r3, r3
 8014e06:	3b01      	subs	r3, #1
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	b21b      	sxth	r3, r3
 8014e0c:	86fb      	strh	r3, [r7, #54]	; 0x36
                sh_buf_tmp += corner_size;
 8014e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e12:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014e16:	4413      	add	r3, r2
 8014e18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 8014e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014e20:	3301      	adds	r3, #1
 8014e22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014e26:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	; 0xba
 8014e2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	dbab      	blt.n	8014d8a <draw_shadow+0xe04>
            }
        }
    }

    /*Fill the left side*/
    a.x1 = sh_area.x1;
 8014e32:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8014e36:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = a.x1 + corner_size - 1;
 8014e3a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014e3e:	b29a      	uxth	r2, r3
 8014e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	4413      	add	r3, r2
 8014e48:	b29b      	uxth	r3, r3
 8014e4a:	3b01      	subs	r3, #1
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	b21b      	sxth	r3, r3
 8014e50:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1 + corner_size;
 8014e54:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8014e58:	b29a      	uxth	r2, r3
 8014e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	4413      	add	r3, r2
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	b21b      	sxth	r3, r3
 8014e66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2 - corner_size;
 8014e6a:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014e6e:	b29a      	uxth	r2, r3
 8014e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e74:	b29b      	uxth	r3, r3
 8014e76:	1ad3      	subs	r3, r2, r3
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	b21b      	sxth	r3, r3
 8014e7c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014e80:	f107 0308 	add.w	r3, r7, #8
 8014e84:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014e88:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014e8c:	681a      	ldr	r2, [r3, #0]
 8014e8e:	f005 fe87 	bl	801aba0 <_lv_area_intersect>
 8014e92:	4603      	mov	r3, r0
 8014e94:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014e98:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	f000 80b7 	beq.w	8015010 <draw_shadow+0x108a>
 8014ea2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014ea6:	b21a      	sxth	r2, r3
 8014ea8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014eac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f006 f859 	bl	801af68 <_lv_area_is_in>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	f083 0301 	eor.w	r3, r3, #1
 8014ebc:	b2db      	uxtb	r3, r3
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	f000 80a6 	beq.w	8015010 <draw_shadow+0x108a>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
 8014ec4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d00c      	beq.n	8014ee6 <draw_shadow+0xf60>
 8014ecc:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 8014ed0:	f107 030c 	add.w	r3, r7, #12
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014eda:	4293      	cmp	r3, r2
 8014edc:	bfa8      	it	ge
 8014ede:	4613      	movge	r3, r2
 8014ee0:	b21b      	sxth	r3, r3
 8014ee2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        /*Draw vertical lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 8014ee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7fe f828 	bl	8012f40 <lv_area_get_width>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        if(w > 0) {
 8014ef6:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	f340 8088 	ble.w	8015010 <draw_shadow+0x108a>
            lv_coord_t h = lv_area_get_height(&ca);
 8014f00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7fe f832 	bl	8012f6e <lv_area_get_height>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
            /*The last line of the shadow is repeated on the side*/
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 8014f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014f14:	3b01      	subs	r3, #1
 8014f16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014f1a:	fb02 f303 	mul.w	r3, r2, r3
 8014f1e:	461a      	mov	r2, r3
 8014f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014f24:	4413      	add	r3, r2
 8014f26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += ca.x1 - a.x1;
 8014f2a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014f2e:	461a      	mov	r2, r3
 8014f30:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014f34:	1ad3      	subs	r3, r2, r3
 8014f36:	461a      	mov	r2, r3
 8014f38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014f3c:	4413      	add	r3, r2
 8014f3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014f42:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014f4a:	4611      	mov	r1, r2
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7fd ffe9 	bl	8012f24 <lv_area_copy>
            fa.y2 = fa.y1;
 8014f52:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8014f56:	85fb      	strh	r3, [r7, #46]	; 0x2e
            for(y = 0; y < h; y++) {
 8014f58:	2300      	movs	r3, #0
 8014f5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014f5e:	e051      	b.n	8015004 <draw_shadow+0x107e>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014f60:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8014f64:	461a      	mov	r2, r3
 8014f66:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014f6a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014f6e:	f007 fcc3 	bl	801c8f8 <_lv_memcpy>
                if(simple_mode) {
 8014f72:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d003      	beq.n	8014f82 <draw_shadow+0xffc>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014f7a:	2302      	movs	r3, #2
 8014f7c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8014f80:	e013      	b.n	8014faa <draw_shadow+0x1024>
                }
                else {
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014f82:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8014f86:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8014f8a:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8014f8e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014f92:	f7fc fc49 	bl	8011828 <lv_draw_mask_apply>
 8014f96:	4603      	mov	r3, r0
 8014f98:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014f9c:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014fa0:	2b01      	cmp	r3, #1
 8014fa2:	d102      	bne.n	8014faa <draw_shadow+0x1024>
 8014fa4:	2302      	movs	r3, #2
 8014fa6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                }

                _lv_blend_fill(clip, &fa,
 8014faa:	1d3b      	adds	r3, r7, #4
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014fb2:	1d3a      	adds	r2, r7, #4
 8014fb4:	6812      	ldr	r2, [r2, #0]
 8014fb6:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8014fba:	1d3a      	adds	r2, r7, #4
 8014fbc:	6812      	ldr	r2, [r2, #0]
 8014fbe:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8014fc2:	f107 0008 	add.w	r0, r7, #8
 8014fc6:	9102      	str	r1, [sp, #8]
 8014fc8:	9301      	str	r3, [sp, #4]
 8014fca:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014fce:	9300      	str	r3, [sp, #0]
 8014fd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014fd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014fd6:	4621      	mov	r1, r4
 8014fd8:	6800      	ldr	r0, [r0, #0]
 8014fda:	f7f7 f9f7 	bl	800c3cc <_lv_blend_fill>
                               dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->shadow_blend_mode);
                fa.y1++;
 8014fde:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8014fe2:	b29b      	uxth	r3, r3
 8014fe4:	3301      	adds	r3, #1
 8014fe6:	b29b      	uxth	r3, r3
 8014fe8:	b21b      	sxth	r3, r3
 8014fea:	857b      	strh	r3, [r7, #42]	; 0x2a
                fa.y2++;
 8014fec:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8014ff0:	b29b      	uxth	r3, r3
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	b21b      	sxth	r3, r3
 8014ff8:	85fb      	strh	r3, [r7, #46]	; 0x2e
            for(y = 0; y < h; y++) {
 8014ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ffe:	3301      	adds	r3, #1
 8015000:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015004:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 8015008:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801500c:	429a      	cmp	r2, r3
 801500e:	dba7      	blt.n	8014f60 <draw_shadow+0xfda>
            }
        }
    }

    /*Fill the top side*/
    a.x1 = sh_area.x1 + corner_size;
 8015010:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8015014:	b29a      	uxth	r2, r3
 8015016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801501a:	b29b      	uxth	r3, r3
 801501c:	4413      	add	r3, r2
 801501e:	b29b      	uxth	r3, r3
 8015020:	b21b      	sxth	r3, r3
 8015022:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = sh_area.x2 - corner_size;
 8015026:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 801502a:	b29a      	uxth	r2, r3
 801502c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015030:	b29b      	uxth	r3, r3
 8015032:	1ad3      	subs	r3, r2, r3
 8015034:	b29b      	uxth	r3, r3
 8015036:	b21b      	sxth	r3, r3
 8015038:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1;
 801503c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8015040:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y1 + corner_size - 1;
 8015044:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8015048:	b29a      	uxth	r2, r3
 801504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801504e:	b29b      	uxth	r3, r3
 8015050:	4413      	add	r3, r2
 8015052:	b29b      	uxth	r3, r3
 8015054:	3b01      	subs	r3, #1
 8015056:	b29b      	uxth	r3, r3
 8015058:	b21b      	sxth	r3, r3
 801505a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 801505e:	f107 0308 	add.w	r3, r7, #8
 8015062:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8015066:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	f005 fd98 	bl	801aba0 <_lv_area_intersect>
 8015070:	4603      	mov	r3, r0
 8015072:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8015076:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 801507a:	2b00      	cmp	r3, #0
 801507c:	f000 80cd 	beq.w	801521a <draw_shadow+0x1294>
 8015080:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8015084:	b21a      	sxth	r2, r3
 8015086:	f107 0184 	add.w	r1, r7, #132	; 0x84
 801508a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801508e:	4618      	mov	r0, r3
 8015090:	f005 ff6a 	bl	801af68 <_lv_area_is_in>
 8015094:	4603      	mov	r3, r0
 8015096:	f083 0301 	eor.w	r3, r3, #1
 801509a:	b2db      	uxtb	r3, r3
 801509c:	2b00      	cmp	r3, #0
 801509e:	f000 80bc 	beq.w	801521a <draw_shadow+0x1294>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
 80150a2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d00c      	beq.n	80150c4 <draw_shadow+0x113e>
 80150aa:	f107 030c 	add.w	r3, r7, #12
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80150b4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80150b8:	4293      	cmp	r3, r2
 80150ba:	bfa8      	it	ge
 80150bc:	4613      	movge	r3, r2
 80150be:	b21b      	sxth	r3, r3
 80150c0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 80150c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7fd ff39 	bl	8012f40 <lv_area_get_width>
 80150ce:	4603      	mov	r3, r0
 80150d0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
        lv_coord_t h = lv_area_get_height(&ca);
 80150d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80150d8:	4618      	mov	r0, r3
 80150da:	f7fd ff48 	bl	8012f6e <lv_area_get_height>
 80150de:	4603      	mov	r3, r0
 80150e0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        sh_buf_tmp = sh_buf + corner_size - 1;
 80150e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80150e8:	3b01      	subs	r3, #1
 80150ea:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80150ee:	4413      	add	r3, r2
 80150f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 80150f4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80150f8:	461a      	mov	r2, r3
 80150fa:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80150fe:	1ad3      	subs	r3, r2, r3
 8015100:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015104:	fb02 f303 	mul.w	r3, r2, r3
 8015108:	461a      	mov	r2, r3
 801510a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801510e:	4413      	add	r3, r2
 8015110:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        lv_area_t fa;
        lv_area_copy(&fa, &ca);
 8015114:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015118:	f107 0320 	add.w	r3, r7, #32
 801511c:	4611      	mov	r1, r2
 801511e:	4618      	mov	r0, r3
 8015120:	f7fd ff00 	bl	8012f24 <lv_area_copy>
        fa.y2 = fa.y1;
 8015124:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015128:	84fb      	strh	r3, [r7, #38]	; 0x26
        mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801512a:	2301      	movs	r3, #1
 801512c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
        for(y = 0; y < h; y++) {
 8015130:	2300      	movs	r3, #0
 8015132:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015136:	e06a      	b.n	801520e <draw_shadow+0x1288>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 8015138:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801513c:	781b      	ldrb	r3, [r3, #0]
 801513e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 8015142:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8015146:	2bff      	cmp	r3, #255	; 0xff
 8015148:	d103      	bne.n	8015152 <draw_shadow+0x11cc>
 801514a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801514e:	2bff      	cmp	r3, #255	; 0xff
 8015150:	d008      	beq.n	8015164 <draw_shadow+0x11de>
 8015152:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015156:	f897 20fb 	ldrb.w	r2, [r7, #251]	; 0xfb
 801515a:	fb02 f303 	mul.w	r3, r2, r3
 801515e:	121b      	asrs	r3, r3, #8
 8015160:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

            _lv_memset(mask_buf, opa_tmp, w);
 8015164:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 8015168:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 801516c:	4619      	mov	r1, r3
 801516e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015172:	f007 fdd9 	bl	801cd28 <_lv_memset>

            if(simple_mode) {
 8015176:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 801517a:	2b00      	cmp	r3, #0
 801517c:	d003      	beq.n	8015186 <draw_shadow+0x1200>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
 801517e:	2302      	movs	r3, #2
 8015180:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8015184:	e013      	b.n	80151ae <draw_shadow+0x1228>
            }
            else {
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8015186:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 801518a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801518e:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 8015192:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015196:	f7fc fb47 	bl	8011828 <lv_draw_mask_apply>
 801519a:	4603      	mov	r3, r0
 801519c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80151a0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80151a4:	2b01      	cmp	r3, #1
 80151a6:	d102      	bne.n	80151ae <draw_shadow+0x1228>
 80151a8:	2302      	movs	r3, #2
 80151aa:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            }

            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80151ae:	1d3b      	adds	r3, r7, #4
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80151b6:	1d3a      	adds	r2, r7, #4
 80151b8:	6812      	ldr	r2, [r2, #0]
 80151ba:	f107 0120 	add.w	r1, r7, #32
 80151be:	f107 0008 	add.w	r0, r7, #8
 80151c2:	9302      	str	r3, [sp, #8]
 80151c4:	23ff      	movs	r3, #255	; 0xff
 80151c6:	9301      	str	r3, [sp, #4]
 80151c8:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80151cc:	9300      	str	r3, [sp, #0]
 80151ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80151d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80151d4:	6800      	ldr	r0, [r0, #0]
 80151d6:	f7f7 f8f9 	bl	800c3cc <_lv_blend_fill>
                           mask_res, LV_OPA_COVER, dsc->shadow_blend_mode);
            fa.y1++;
 80151da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80151de:	b29b      	uxth	r3, r3
 80151e0:	3301      	adds	r3, #1
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	b21b      	sxth	r3, r3
 80151e6:	847b      	strh	r3, [r7, #34]	; 0x22
            fa.y2++;
 80151e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80151ec:	b29b      	uxth	r3, r3
 80151ee:	3301      	adds	r3, #1
 80151f0:	b29b      	uxth	r3, r3
 80151f2:	b21b      	sxth	r3, r3
 80151f4:	84fb      	strh	r3, [r7, #38]	; 0x26
            sh_buf_tmp += corner_size;
 80151f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80151fa:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80151fe:	4413      	add	r3, r2
 8015200:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        for(y = 0; y < h; y++) {
 8015204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015208:	3301      	adds	r3, #1
 801520a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801520e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8015212:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8015216:	429a      	cmp	r2, r3
 8015218:	db8e      	blt.n	8015138 <draw_shadow+0x11b2>
        }
    }

    /*Fill the bottom side*/
    a.x1 = sh_area.x1 + corner_size;
 801521a:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801521e:	b29a      	uxth	r2, r3
 8015220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015224:	b29b      	uxth	r3, r3
 8015226:	4413      	add	r3, r2
 8015228:	b29b      	uxth	r3, r3
 801522a:	b21b      	sxth	r3, r3
 801522c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = sh_area.x2 - corner_size;
 8015230:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8015234:	b29a      	uxth	r2, r3
 8015236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801523a:	b29b      	uxth	r3, r3
 801523c:	1ad3      	subs	r3, r2, r3
 801523e:	b29b      	uxth	r3, r3
 8015240:	b21b      	sxth	r3, r3
 8015242:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 8015246:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 801524a:	b29a      	uxth	r2, r3
 801524c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015250:	b29b      	uxth	r3, r3
 8015252:	1ad3      	subs	r3, r2, r3
 8015254:	b29b      	uxth	r3, r3
 8015256:	3301      	adds	r3, #1
 8015258:	b29b      	uxth	r3, r3
 801525a:	b21b      	sxth	r3, r3
 801525c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2;
 8015260:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8015264:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8015268:	f107 0308 	add.w	r3, r7, #8
 801526c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8015270:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8015274:	681a      	ldr	r2, [r3, #0]
 8015276:	f005 fc93 	bl	801aba0 <_lv_area_intersect>
 801527a:	4603      	mov	r3, r0
 801527c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8015280:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8015284:	2b00      	cmp	r3, #0
 8015286:	f000 80da 	beq.w	801543e <draw_shadow+0x14b8>
 801528a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801528e:	b21a      	sxth	r2, r3
 8015290:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8015294:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015298:	4618      	mov	r0, r3
 801529a:	f005 fe65 	bl	801af68 <_lv_area_is_in>
 801529e:	4603      	mov	r3, r0
 80152a0:	f083 0301 	eor.w	r3, r3, #1
 80152a4:	b2db      	uxtb	r3, r3
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	f000 80c9 	beq.w	801543e <draw_shadow+0x14b8>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
 80152ac:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d00c      	beq.n	80152ce <draw_shadow+0x1348>
 80152b4:	f107 030c 	add.w	r3, r7, #12
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80152be:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80152c2:	4293      	cmp	r3, r2
 80152c4:	bfb8      	it	lt
 80152c6:	4613      	movlt	r3, r2
 80152c8:	b21b      	sxth	r3, r3
 80152ca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 80152ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80152d2:	4618      	mov	r0, r3
 80152d4:	f7fd fe34 	bl	8012f40 <lv_area_get_width>
 80152d8:	4603      	mov	r3, r0
 80152da:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        lv_coord_t h = lv_area_get_height(&ca);
 80152de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fd fe43 	bl	8012f6e <lv_area_get_height>
 80152e8:	4603      	mov	r3, r0
 80152ea:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        sh_buf_tmp = sh_buf + corner_size - 1;
 80152ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80152f2:	3b01      	subs	r3, #1
 80152f4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80152f8:	4413      	add	r3, r2
 80152fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 80152fe:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8015302:	461a      	mov	r2, r3
 8015304:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8015308:	1ad3      	subs	r3, r2, r3
 801530a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801530e:	fb02 f303 	mul.w	r3, r2, r3
 8015312:	461a      	mov	r2, r3
 8015314:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015318:	4413      	add	r3, r2
 801531a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        lv_area_t fa;
        lv_area_copy(&fa, &ca);
 801531e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015322:	f107 0318 	add.w	r3, r7, #24
 8015326:	4611      	mov	r1, r2
 8015328:	4618      	mov	r0, r3
 801532a:	f7fd fdfb 	bl	8012f24 <lv_area_copy>
        fa.y1 = fa.y2;
 801532e:	f107 0318 	add.w	r3, r7, #24
 8015332:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015336:	f107 0318 	add.w	r3, r7, #24
 801533a:	805a      	strh	r2, [r3, #2]
        for(y = 0; y < h; y++) {
 801533c:	2300      	movs	r3, #0
 801533e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015342:	e076      	b.n	8015432 <draw_shadow+0x14ac>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 8015344:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 801534e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8015352:	2bff      	cmp	r3, #255	; 0xff
 8015354:	d103      	bne.n	801535e <draw_shadow+0x13d8>
 8015356:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801535a:	2bff      	cmp	r3, #255	; 0xff
 801535c:	d008      	beq.n	8015370 <draw_shadow+0x13ea>
 801535e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015362:	f897 20fa 	ldrb.w	r2, [r7, #250]	; 0xfa
 8015366:	fb02 f303 	mul.w	r3, r2, r3
 801536a:	121b      	asrs	r3, r3, #8
 801536c:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa

            _lv_memset(mask_buf, opa_tmp, w);
 8015370:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8015374:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8015378:	4619      	mov	r1, r3
 801537a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801537e:	f007 fcd3 	bl	801cd28 <_lv_memset>
            if(simple_mode) {
 8015382:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8015386:	2b00      	cmp	r3, #0
 8015388:	d003      	beq.n	8015392 <draw_shadow+0x140c>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
 801538a:	2302      	movs	r3, #2
 801538c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8015390:	e017      	b.n	80153c2 <draw_shadow+0x143c>
            }
            else {
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8015392:	f107 0318 	add.w	r3, r7, #24
 8015396:	f9b3 1000 	ldrsh.w	r1, [r3]
 801539a:	f107 0318 	add.w	r3, r7, #24
 801539e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80153a2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80153a6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80153aa:	f7fc fa3d 	bl	8011828 <lv_draw_mask_apply>
 80153ae:	4603      	mov	r3, r0
 80153b0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80153b4:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80153b8:	2b01      	cmp	r3, #1
 80153ba:	d102      	bne.n	80153c2 <draw_shadow+0x143c>
 80153bc:	2302      	movs	r3, #2
 80153be:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            }

            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80153c2:	1d3b      	adds	r3, r7, #4
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80153ca:	1d3a      	adds	r2, r7, #4
 80153cc:	6812      	ldr	r2, [r2, #0]
 80153ce:	f107 0118 	add.w	r1, r7, #24
 80153d2:	f107 0008 	add.w	r0, r7, #8
 80153d6:	9302      	str	r3, [sp, #8]
 80153d8:	23ff      	movs	r3, #255	; 0xff
 80153da:	9301      	str	r3, [sp, #4]
 80153dc:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80153e0:	9300      	str	r3, [sp, #0]
 80153e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80153e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80153e8:	6800      	ldr	r0, [r0, #0]
 80153ea:	f7f6 ffef 	bl	800c3cc <_lv_blend_fill>
                           mask_res, LV_OPA_COVER, dsc->shadow_blend_mode);
            fa.y1--;
 80153ee:	f107 0318 	add.w	r3, r7, #24
 80153f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80153f6:	b29b      	uxth	r3, r3
 80153f8:	3b01      	subs	r3, #1
 80153fa:	b29b      	uxth	r3, r3
 80153fc:	b21a      	sxth	r2, r3
 80153fe:	f107 0318 	add.w	r3, r7, #24
 8015402:	805a      	strh	r2, [r3, #2]
            fa.y2--;
 8015404:	f107 0318 	add.w	r3, r7, #24
 8015408:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801540c:	b29b      	uxth	r3, r3
 801540e:	3b01      	subs	r3, #1
 8015410:	b29b      	uxth	r3, r3
 8015412:	b21a      	sxth	r2, r3
 8015414:	f107 0318 	add.w	r3, r7, #24
 8015418:	80da      	strh	r2, [r3, #6]
            sh_buf_tmp += corner_size;
 801541a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801541e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8015422:	4413      	add	r3, r2
 8015424:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        for(y = 0; y < h; y++) {
 8015428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801542c:	3301      	adds	r3, #1
 801542e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015432:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8015436:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801543a:	429a      	cmp	r2, r3
 801543c:	db82      	blt.n	8015344 <draw_shadow+0x13be>
        }
    }

    /*Draw the middle area*/
    a.x1 = sh_area.x1 + corner_size;
 801543e:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8015442:	b29a      	uxth	r2, r3
 8015444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015448:	b29b      	uxth	r3, r3
 801544a:	4413      	add	r3, r2
 801544c:	b29b      	uxth	r3, r3
 801544e:	b21b      	sxth	r3, r3
 8015450:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = sh_area.x2 - corner_size;
 8015454:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8015458:	b29a      	uxth	r2, r3
 801545a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801545e:	b29b      	uxth	r3, r3
 8015460:	1ad3      	subs	r3, r2, r3
 8015462:	b29b      	uxth	r3, r3
 8015464:	b21b      	sxth	r3, r3
 8015466:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1 + corner_size;
 801546a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801546e:	b29a      	uxth	r2, r3
 8015470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015474:	b29b      	uxth	r3, r3
 8015476:	4413      	add	r3, r2
 8015478:	b29b      	uxth	r3, r3
 801547a:	b21b      	sxth	r3, r3
 801547c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2 - corner_size;
 8015480:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8015484:	b29a      	uxth	r2, r3
 8015486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801548a:	b29b      	uxth	r3, r3
 801548c:	1ad3      	subs	r3, r2, r3
 801548e:	b29b      	uxth	r3, r3
 8015490:	b21b      	sxth	r3, r3
 8015492:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8015496:	f107 0308 	add.w	r3, r7, #8
 801549a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801549e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	f005 fb7c 	bl	801aba0 <_lv_area_intersect>
 80154a8:	4603      	mov	r3, r0
 80154aa:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80154ae:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	f000 8095 	beq.w	80155e2 <draw_shadow+0x165c>
 80154b8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80154bc:	f083 0301 	eor.w	r3, r3, #1
 80154c0:	b2db      	uxtb	r3, r3
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	f000 808d 	beq.w	80155e2 <draw_shadow+0x165c>
 80154c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80154cc:	b21a      	sxth	r2, r3
 80154ce:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80154d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80154d6:	4618      	mov	r0, r3
 80154d8:	f005 fd46 	bl	801af68 <_lv_area_is_in>
 80154dc:	4603      	mov	r3, r0
 80154de:	f083 0301 	eor.w	r3, r3, #1
 80154e2:	b2db      	uxtb	r3, r3
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d07c      	beq.n	80155e2 <draw_shadow+0x165c>
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 80154e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7fd fd27 	bl	8012f40 <lv_area_get_width>
 80154f2:	4603      	mov	r3, r0
 80154f4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        lv_coord_t h = lv_area_get_height(&ca);
 80154f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80154fc:	4618      	mov	r0, r3
 80154fe:	f7fd fd36 	bl	8012f6e <lv_area_get_height>
 8015502:	4603      	mov	r3, r0
 8015504:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8

        lv_area_t fa;
        lv_area_copy(&fa, &ca);
 8015508:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801550c:	f107 0310 	add.w	r3, r7, #16
 8015510:	4611      	mov	r1, r2
 8015512:	4618      	mov	r0, r3
 8015514:	f7fd fd06 	bl	8012f24 <lv_area_copy>
        fa.y2 = fa.y1;
 8015518:	f107 0310 	add.w	r3, r7, #16
 801551c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015520:	f107 0310 	add.w	r3, r7, #16
 8015524:	80da      	strh	r2, [r3, #6]
        for(y = 0; y < h; y++) {
 8015526:	2300      	movs	r3, #0
 8015528:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801552c:	e053      	b.n	80155d6 <draw_shadow+0x1650>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
 801552e:	1d3b      	adds	r3, r7, #4
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015536:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801553a:	4619      	mov	r1, r3
 801553c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015540:	f007 fbf2 	bl	801cd28 <_lv_memset>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8015544:	f107 0310 	add.w	r3, r7, #16
 8015548:	f9b3 1000 	ldrsh.w	r1, [r3]
 801554c:	f107 0310 	add.w	r3, r7, #16
 8015550:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015554:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8015558:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801555c:	f7fc f964 	bl	8011828 <lv_draw_mask_apply>
 8015560:	4603      	mov	r3, r0
 8015562:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8015566:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 801556a:	2b01      	cmp	r3, #1
 801556c:	d102      	bne.n	8015574 <draw_shadow+0x15ee>
 801556e:	2302      	movs	r3, #2
 8015570:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8015574:	1d3b      	adds	r3, r7, #4
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801557c:	1d3a      	adds	r2, r7, #4
 801557e:	6812      	ldr	r2, [r2, #0]
 8015580:	f107 0110 	add.w	r1, r7, #16
 8015584:	f107 0008 	add.w	r0, r7, #8
 8015588:	9302      	str	r3, [sp, #8]
 801558a:	23ff      	movs	r3, #255	; 0xff
 801558c:	9301      	str	r3, [sp, #4]
 801558e:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8015592:	9300      	str	r3, [sp, #0]
 8015594:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015598:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801559a:	6800      	ldr	r0, [r0, #0]
 801559c:	f7f6 ff16 	bl	800c3cc <_lv_blend_fill>
                           mask_res, LV_OPA_COVER, dsc->shadow_blend_mode);
            fa.y1++;
 80155a0:	f107 0310 	add.w	r3, r7, #16
 80155a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80155a8:	b29b      	uxth	r3, r3
 80155aa:	3301      	adds	r3, #1
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	b21a      	sxth	r2, r3
 80155b0:	f107 0310 	add.w	r3, r7, #16
 80155b4:	805a      	strh	r2, [r3, #2]
            fa.y2++;
 80155b6:	f107 0310 	add.w	r3, r7, #16
 80155ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80155be:	b29b      	uxth	r3, r3
 80155c0:	3301      	adds	r3, #1
 80155c2:	b29b      	uxth	r3, r3
 80155c4:	b21a      	sxth	r2, r3
 80155c6:	f107 0310 	add.w	r3, r7, #16
 80155ca:	80da      	strh	r2, [r3, #6]
        for(y = 0; y < h; y++) {
 80155cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80155d0:	3301      	adds	r3, #1
 80155d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80155d6:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 80155da:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80155de:	429a      	cmp	r2, r3
 80155e0:	dba5      	blt.n	801552e <draw_shadow+0x15a8>
        }
    }

    lv_draw_mask_remove_id(mask_rout_id);
 80155e2:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7fc f962 	bl	80118b0 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 80155ec:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80155f0:	f007 f8fc 	bl	801c7ec <_lv_mem_buf_release>
    _lv_mem_buf_release(sh_buf);
 80155f4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80155f8:	f007 f8f8 	bl	801c7ec <_lv_mem_buf_release>
 80155fc:	e006      	b.n	801560c <draw_shadow+0x1686>
    if(dsc->shadow_width == 0) return;
 80155fe:	bf00      	nop
 8015600:	e004      	b.n	801560c <draw_shadow+0x1686>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 8015602:	bf00      	nop
 8015604:	e002      	b.n	801560c <draw_shadow+0x1686>
        return;
 8015606:	bf00      	nop
 8015608:	e000      	b.n	801560c <draw_shadow+0x1686>
    if(is_common == false) return;
 801560a:	bf00      	nop
}
 801560c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8015610:	46bd      	mov	sp, r7
 8015612:	bd90      	pop	{r4, r7, pc}

08015614 <shadow_draw_corner_buf>:
 * @param sw shadow width
 * @param r radius
 */
LV_ATTRIBUTE_FAST_MEM static void shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, lv_coord_t sw,
                                                         lv_coord_t r)
{
 8015614:	b590      	push	{r4, r7, lr}
 8015616:	b09d      	sub	sp, #116	; 0x74
 8015618:	af02      	add	r7, sp, #8
 801561a:	60f8      	str	r0, [r7, #12]
 801561c:	60b9      	str	r1, [r7, #8]
 801561e:	4611      	mov	r1, r2
 8015620:	461a      	mov	r2, r3
 8015622:	460b      	mov	r3, r1
 8015624:	80fb      	strh	r3, [r7, #6]
 8015626:	4613      	mov	r3, r2
 8015628:	80bb      	strh	r3, [r7, #4]
    int32_t sw_ori = sw;
 801562a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801562e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t size = sw_ori  + r;
 8015630:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015636:	4413      	add	r3, r2
 8015638:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t sh_area;
    lv_area_copy(&sh_area, coords);
 801563a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801563e:	68f9      	ldr	r1, [r7, #12]
 8015640:	4618      	mov	r0, r3
 8015642:	f7fd fc6f 	bl	8012f24 <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8015646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801564a:	2b00      	cmp	r3, #0
 801564c:	da00      	bge.n	8015650 <shadow_draw_corner_buf+0x3c>
 801564e:	3301      	adds	r3, #1
 8015650:	105b      	asrs	r3, r3, #1
 8015652:	b21b      	sxth	r3, r3
 8015654:	b29a      	uxth	r2, r3
 8015656:	88bb      	ldrh	r3, [r7, #4]
 8015658:	4413      	add	r3, r2
 801565a:	b29a      	uxth	r2, r3
 801565c:	88fb      	ldrh	r3, [r7, #6]
 801565e:	f003 0301 	and.w	r3, r3, #1
 8015662:	2b00      	cmp	r3, #0
 8015664:	bf0c      	ite	eq
 8015666:	2301      	moveq	r3, #1
 8015668:	2300      	movne	r3, #0
 801566a:	b2db      	uxtb	r3, r3
 801566c:	b29b      	uxth	r3, r3
 801566e:	1ad3      	subs	r3, r2, r3
 8015670:	b29b      	uxth	r3, r3
 8015672:	3b01      	subs	r3, #1
 8015674:	b29b      	uxth	r3, r3
 8015676:	b21b      	sxth	r3, r3
 8015678:	86bb      	strh	r3, [r7, #52]	; 0x34
    sh_area.y1 = sw / 2 + 1;
 801567a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801567e:	2b00      	cmp	r3, #0
 8015680:	da00      	bge.n	8015684 <shadow_draw_corner_buf+0x70>
 8015682:	3301      	adds	r3, #1
 8015684:	105b      	asrs	r3, r3, #1
 8015686:	b21b      	sxth	r3, r3
 8015688:	b29b      	uxth	r3, r3
 801568a:	3301      	adds	r3, #1
 801568c:	b29b      	uxth	r3, r3
 801568e:	b21b      	sxth	r3, r3
 8015690:	867b      	strh	r3, [r7, #50]	; 0x32

    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 8015692:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8015696:	b29c      	uxth	r4, r3
 8015698:	68f8      	ldr	r0, [r7, #12]
 801569a:	f7fd fc51 	bl	8012f40 <lv_area_get_width>
 801569e:	4603      	mov	r3, r0
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	1ae3      	subs	r3, r4, r3
 80156a4:	b29b      	uxth	r3, r3
 80156a6:	b21b      	sxth	r3, r3
 80156a8:	863b      	strh	r3, [r7, #48]	; 0x30
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 80156aa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80156ae:	b29c      	uxth	r4, r3
 80156b0:	68f8      	ldr	r0, [r7, #12]
 80156b2:	f7fd fc5c 	bl	8012f6e <lv_area_get_height>
 80156b6:	4603      	mov	r3, r0
 80156b8:	b29b      	uxth	r3, r3
 80156ba:	4423      	add	r3, r4
 80156bc:	b29b      	uxth	r3, r3
 80156be:	b21b      	sxth	r3, r3
 80156c0:	86fb      	strh	r3, [r7, #54]	; 0x36

    lv_draw_mask_radius_param_t mask_param;
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 80156c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80156c6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80156ca:	f107 0014 	add.w	r0, r7, #20
 80156ce:	2300      	movs	r3, #0
 80156d0:	f7fc fa92 	bl	8011bf8 <lv_draw_mask_radius_init>

#if SHADOW_ENHANCE
    /*Set half shadow width width because blur will be repeated*/
    if(sw_ori == 1) sw = 1;
 80156d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156d6:	2b01      	cmp	r3, #1
 80156d8:	d102      	bne.n	80156e0 <shadow_draw_corner_buf+0xcc>
 80156da:	2301      	movs	r3, #1
 80156dc:	80fb      	strh	r3, [r7, #6]
 80156de:	e002      	b.n	80156e6 <shadow_draw_corner_buf+0xd2>
    else sw = sw_ori >> 1;
 80156e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156e2:	105b      	asrs	r3, r3, #1
 80156e4:	80fb      	strh	r3, [r7, #6]
#endif

    int32_t y;
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 80156e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80156e8:	4618      	mov	r0, r3
 80156ea:	f006 ffa1 	bl	801c630 <_lv_mem_buf_get>
 80156ee:	6478      	str	r0, [r7, #68]	; 0x44
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 80156f4:	2300      	movs	r3, #0
 80156f6:	667b      	str	r3, [r7, #100]	; 0x64
 80156f8:	e062      	b.n	80157c0 <shadow_draw_corner_buf+0x1ac>
        _lv_memset_ff(mask_line, size);
 80156fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80156fc:	4619      	mov	r1, r3
 80156fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015700:	f007 fc1f 	bl	801cf42 <_lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 8015704:	697c      	ldr	r4, [r7, #20]
 8015706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015708:	b21a      	sxth	r2, r3
 801570a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801570c:	b219      	sxth	r1, r3
 801570e:	f107 0314 	add.w	r3, r7, #20
 8015712:	9300      	str	r3, [sp, #0]
 8015714:	460b      	mov	r3, r1
 8015716:	2100      	movs	r1, #0
 8015718:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801571a:	47a0      	blx	r4
 801571c:	4603      	mov	r3, r0
 801571e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8015722:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015726:	2b00      	cmp	r3, #0
 8015728:	d106      	bne.n	8015738 <shadow_draw_corner_buf+0x124>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 801572a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801572c:	005b      	lsls	r3, r3, #1
 801572e:	4619      	mov	r1, r3
 8015730:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8015732:	f007 fb86 	bl	801ce42 <_lv_memset_00>
 8015736:	e03b      	b.n	80157b0 <shadow_draw_corner_buf+0x19c>
        }
        else {
            int32_t i;
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 8015738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801573a:	781b      	ldrb	r3, [r3, #0]
 801573c:	019a      	lsls	r2, r3, #6
 801573e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015742:	fb92 f3f3 	sdiv	r3, r2, r3
 8015746:	b29a      	uxth	r2, r3
 8015748:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801574a:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801574c:	2301      	movs	r3, #1
 801574e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015750:	e02a      	b.n	80157a8 <shadow_draw_corner_buf+0x194>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 8015752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015756:	4413      	add	r3, r2
 8015758:	781a      	ldrb	r2, [r3, #0]
 801575a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801575c:	3b01      	subs	r3, #1
 801575e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015760:	440b      	add	r3, r1
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	429a      	cmp	r2, r3
 8015766:	d10d      	bne.n	8015784 <shadow_draw_corner_buf+0x170>
 8015768:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801576a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801576e:	4413      	add	r3, r2
 8015770:	005b      	lsls	r3, r3, #1
 8015772:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015774:	441a      	add	r2, r3
 8015776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015778:	005b      	lsls	r3, r3, #1
 801577a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801577c:	440b      	add	r3, r1
 801577e:	8812      	ldrh	r2, [r2, #0]
 8015780:	801a      	strh	r2, [r3, #0]
 8015782:	e00e      	b.n	80157a2 <shadow_draw_corner_buf+0x18e>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8015784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015788:	4413      	add	r3, r2
 801578a:	781b      	ldrb	r3, [r3, #0]
 801578c:	019a      	lsls	r2, r3, #6
 801578e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015792:	fb92 f1f3 	sdiv	r1, r2, r3
 8015796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015798:	005b      	lsls	r3, r3, #1
 801579a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801579c:	4413      	add	r3, r2
 801579e:	b28a      	uxth	r2, r1
 80157a0:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 80157a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157a4:	3301      	adds	r3, #1
 80157a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80157a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80157aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157ac:	429a      	cmp	r2, r3
 80157ae:	dbd0      	blt.n	8015752 <shadow_draw_corner_buf+0x13e>
            }
        }

        sh_ups_tmp_buf += size;
 80157b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157b2:	005b      	lsls	r3, r3, #1
 80157b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80157b6:	4413      	add	r3, r2
 80157b8:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 80157ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80157bc:	3301      	adds	r3, #1
 80157be:	667b      	str	r3, [r7, #100]	; 0x64
 80157c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80157c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157c4:	429a      	cmp	r2, r3
 80157c6:	db98      	blt.n	80156fa <shadow_draw_corner_buf+0xe6>
    }
    _lv_mem_buf_release(mask_line);
 80157c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80157ca:	f007 f80f 	bl	801c7ec <_lv_mem_buf_release>

    if(sw == 1) {
 80157ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80157d2:	2b01      	cmp	r3, #1
 80157d4:	d11b      	bne.n	801580e <shadow_draw_corner_buf+0x1fa>
        int32_t i;
        lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 80157d6:	68bb      	ldr	r3, [r7, #8]
 80157d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(i = 0; i < size * size; i++) {
 80157da:	2300      	movs	r3, #0
 80157dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80157de:	e00e      	b.n	80157fe <shadow_draw_corner_buf+0x1ea>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 80157e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80157e2:	005b      	lsls	r3, r3, #1
 80157e4:	68ba      	ldr	r2, [r7, #8]
 80157e6:	4413      	add	r3, r2
 80157e8:	881b      	ldrh	r3, [r3, #0]
 80157ea:	099b      	lsrs	r3, r3, #6
 80157ec:	b299      	uxth	r1, r3
 80157ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80157f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80157f2:	4413      	add	r3, r2
 80157f4:	b2ca      	uxtb	r2, r1
 80157f6:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < size * size; i++) {
 80157f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80157fa:	3301      	adds	r3, #1
 80157fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80157fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015802:	fb02 f303 	mul.w	r3, r2, r3
 8015806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015808:	429a      	cmp	r2, r3
 801580a:	dbe9      	blt.n	80157e0 <shadow_draw_corner_buf+0x1cc>
        }
        return;
 801580c:	e079      	b.n	8015902 <shadow_draw_corner_buf+0x2ee>
    }

    shadow_blur_corner(size, sw, sh_buf);
 801580e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015810:	b21b      	sxth	r3, r3
 8015812:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8015816:	68ba      	ldr	r2, [r7, #8]
 8015818:	4618      	mov	r0, r3
 801581a:	f000 f875 	bl	8015908 <shadow_blur_corner>
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
    for(x = 0; x < size * size; x++) {
        res_buf[x] = sh_buf[x];
    }
#else
    sw += sw_ori & 1;
 801581e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015820:	b29b      	uxth	r3, r3
 8015822:	f003 0301 	and.w	r3, r3, #1
 8015826:	b29a      	uxth	r2, r3
 8015828:	88fb      	ldrh	r3, [r7, #6]
 801582a:	4413      	add	r3, r2
 801582c:	b29b      	uxth	r3, r3
 801582e:	80fb      	strh	r3, [r7, #6]
    if(sw > 1) {
 8015830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015834:	2b01      	cmp	r3, #1
 8015836:	dd4b      	ble.n	80158d0 <shadow_draw_corner_buf+0x2bc>
        uint32_t i;
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	881b      	ldrh	r3, [r3, #0]
 801583c:	019a      	lsls	r2, r3, #6
 801583e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015842:	fb92 f3f3 	sdiv	r3, r2, r3
 8015846:	b29a      	uxth	r2, r3
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	801a      	strh	r2, [r3, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 801584c:	2301      	movs	r3, #1
 801584e:	657b      	str	r3, [r7, #84]	; 0x54
 8015850:	e02f      	b.n	80158b2 <shadow_draw_corner_buf+0x29e>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 8015852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015854:	005b      	lsls	r3, r3, #1
 8015856:	68ba      	ldr	r2, [r7, #8]
 8015858:	4413      	add	r3, r2
 801585a:	881a      	ldrh	r2, [r3, #0]
 801585c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801585e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015862:	440b      	add	r3, r1
 8015864:	005b      	lsls	r3, r3, #1
 8015866:	68b9      	ldr	r1, [r7, #8]
 8015868:	440b      	add	r3, r1
 801586a:	881b      	ldrh	r3, [r3, #0]
 801586c:	429a      	cmp	r2, r3
 801586e:	d10d      	bne.n	801588c <shadow_draw_corner_buf+0x278>
 8015870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015872:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015876:	4413      	add	r3, r2
 8015878:	005b      	lsls	r3, r3, #1
 801587a:	68ba      	ldr	r2, [r7, #8]
 801587c:	441a      	add	r2, r3
 801587e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015880:	005b      	lsls	r3, r3, #1
 8015882:	68b9      	ldr	r1, [r7, #8]
 8015884:	440b      	add	r3, r1
 8015886:	8812      	ldrh	r2, [r2, #0]
 8015888:	801a      	strh	r2, [r3, #0]
 801588a:	e00f      	b.n	80158ac <shadow_draw_corner_buf+0x298>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801588c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801588e:	005b      	lsls	r3, r3, #1
 8015890:	68ba      	ldr	r2, [r7, #8]
 8015892:	4413      	add	r3, r2
 8015894:	881b      	ldrh	r3, [r3, #0]
 8015896:	019a      	lsls	r2, r3, #6
 8015898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801589c:	fb92 f1f3 	sdiv	r1, r2, r3
 80158a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158a2:	005b      	lsls	r3, r3, #1
 80158a4:	68ba      	ldr	r2, [r7, #8]
 80158a6:	4413      	add	r3, r2
 80158a8:	b28a      	uxth	r2, r1
 80158aa:	801a      	strh	r2, [r3, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 80158ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158ae:	3301      	adds	r3, #1
 80158b0:	657b      	str	r3, [r7, #84]	; 0x54
 80158b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80158b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80158b6:	fb02 f303 	mul.w	r3, r2, r3
 80158ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80158bc:	429a      	cmp	r2, r3
 80158be:	d3c8      	bcc.n	8015852 <shadow_draw_corner_buf+0x23e>
        }

        shadow_blur_corner(size, sw, sh_buf);
 80158c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80158c2:	b21b      	sxth	r3, r3
 80158c4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80158c8:	68ba      	ldr	r2, [r7, #8]
 80158ca:	4618      	mov	r0, r3
 80158cc:	f000 f81c 	bl	8015908 <shadow_blur_corner>
    }
    int32_t x;
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	643b      	str	r3, [r7, #64]	; 0x40
    for(x = 0; x < size * size; x++) {
 80158d4:	2300      	movs	r3, #0
 80158d6:	653b      	str	r3, [r7, #80]	; 0x50
 80158d8:	e00c      	b.n	80158f4 <shadow_draw_corner_buf+0x2e0>
        res_buf[x] = sh_buf[x];
 80158da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158dc:	005b      	lsls	r3, r3, #1
 80158de:	68ba      	ldr	r2, [r7, #8]
 80158e0:	4413      	add	r3, r2
 80158e2:	8819      	ldrh	r1, [r3, #0]
 80158e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80158e8:	4413      	add	r3, r2
 80158ea:	b2ca      	uxtb	r2, r1
 80158ec:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < size * size; x++) {
 80158ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158f0:	3301      	adds	r3, #1
 80158f2:	653b      	str	r3, [r7, #80]	; 0x50
 80158f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80158f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80158f8:	fb02 f303 	mul.w	r3, r2, r3
 80158fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80158fe:	429a      	cmp	r2, r3
 8015900:	dbeb      	blt.n	80158da <shadow_draw_corner_buf+0x2c6>
    }
#endif

}
 8015902:	376c      	adds	r7, #108	; 0x6c
 8015904:	46bd      	mov	sp, r7
 8015906:	bd90      	pop	{r4, r7, pc}

08015908 <shadow_blur_corner>:

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b090      	sub	sp, #64	; 0x40
 801590c:	af00      	add	r7, sp, #0
 801590e:	4603      	mov	r3, r0
 8015910:	603a      	str	r2, [r7, #0]
 8015912:	80fb      	strh	r3, [r7, #6]
 8015914:	460b      	mov	r3, r1
 8015916:	80bb      	strh	r3, [r7, #4]
    int32_t s_left = sw >> 1;
 8015918:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801591c:	105b      	asrs	r3, r3, #1
 801591e:	b21b      	sxth	r3, r3
 8015920:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t s_right = (sw >> 1);
 8015922:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015926:	105b      	asrs	r3, r3, #1
 8015928:	b21b      	sxth	r3, r3
 801592a:	613b      	str	r3, [r7, #16]
    if((sw & 1) == 0) s_left--;
 801592c:	88bb      	ldrh	r3, [r7, #4]
 801592e:	f003 0301 	and.w	r3, r3, #1
 8015932:	2b00      	cmp	r3, #0
 8015934:	d102      	bne.n	801593c <shadow_blur_corner+0x34>
 8015936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015938:	3b01      	subs	r3, #1
 801593a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
 801593c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015940:	005b      	lsls	r3, r3, #1
 8015942:	4618      	mov	r0, r3
 8015944:	f006 fe74 	bl	801c630 <_lv_mem_buf_get>
 8015948:	60f8      	str	r0, [r7, #12]

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	633b      	str	r3, [r7, #48]	; 0x30

    for(y = 0; y < size; y++) {
 801594e:	2300      	movs	r3, #0
 8015950:	637b      	str	r3, [r7, #52]	; 0x34
 8015952:	e060      	b.n	8015a16 <shadow_blur_corner+0x10e>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8015954:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015958:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801595c:	4413      	add	r3, r2
 801595e:	005b      	lsls	r3, r3, #1
 8015960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015962:	4413      	add	r3, r2
 8015964:	881b      	ldrh	r3, [r3, #0]
 8015966:	461a      	mov	r2, r3
 8015968:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801596c:	fb03 f302 	mul.w	r3, r3, r2
 8015970:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(x = size - 1; x >= 0; x--) {
 8015972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015976:	3b01      	subs	r3, #1
 8015978:	63bb      	str	r3, [r7, #56]	; 0x38
 801597a:	e038      	b.n	80159ee <shadow_blur_corner+0xe6>
            sh_ups_blur_buf[x] = v;
 801597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801597e:	005b      	lsls	r3, r3, #1
 8015980:	68fa      	ldr	r2, [r7, #12]
 8015982:	4413      	add	r3, r2
 8015984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015986:	b292      	uxth	r2, r2
 8015988:	801a      	strh	r2, [r3, #0]

            /*Forget the right pixel*/
            uint32_t right_val = 0;
 801598a:	2300      	movs	r3, #0
 801598c:	62bb      	str	r3, [r7, #40]	; 0x28
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 801598e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015990:	693b      	ldr	r3, [r7, #16]
 8015992:	441a      	add	r2, r3
 8015994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015998:	429a      	cmp	r2, r3
 801599a:	da07      	bge.n	80159ac <shadow_blur_corner+0xa4>
 801599c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801599e:	693b      	ldr	r3, [r7, #16]
 80159a0:	4413      	add	r3, r2
 80159a2:	005b      	lsls	r3, r3, #1
 80159a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159a6:	4413      	add	r3, r2
 80159a8:	881b      	ldrh	r3, [r3, #0]
 80159aa:	62bb      	str	r3, [r7, #40]	; 0x28
            v -= right_val;
 80159ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b0:	1ad3      	subs	r3, r2, r3
 80159b2:	62fb      	str	r3, [r7, #44]	; 0x2c

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 80159b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159b8:	1ad3      	subs	r3, r2, r3
 80159ba:	3b01      	subs	r3, #1
 80159bc:	2b00      	cmp	r3, #0
 80159be:	da03      	bge.n	80159c8 <shadow_blur_corner+0xc0>
 80159c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c2:	881b      	ldrh	r3, [r3, #0]
 80159c4:	627b      	str	r3, [r7, #36]	; 0x24
 80159c6:	e00b      	b.n	80159e0 <shadow_blur_corner+0xd8>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 80159c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159cc:	1ad3      	subs	r3, r2, r3
 80159ce:	461a      	mov	r2, r3
 80159d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80159d4:	4413      	add	r3, r2
 80159d6:	005b      	lsls	r3, r3, #1
 80159d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159da:	4413      	add	r3, r2
 80159dc:	881b      	ldrh	r3, [r3, #0]
 80159de:	627b      	str	r3, [r7, #36]	; 0x24
            v += left_val;
 80159e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e4:	4413      	add	r3, r2
 80159e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(x = size - 1; x >= 0; x--) {
 80159e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159ea:	3b01      	subs	r3, #1
 80159ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80159ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	dac3      	bge.n	801597c <shadow_blur_corner+0x74>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 80159f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80159f8:	005b      	lsls	r3, r3, #1
 80159fa:	461a      	mov	r2, r3
 80159fc:	68f9      	ldr	r1, [r7, #12]
 80159fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a00:	f006 ff7a 	bl	801c8f8 <_lv_memcpy>
        sh_ups_tmp_buf += size;
 8015a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a08:	005b      	lsls	r3, r3, #1
 8015a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a0c:	4413      	add	r3, r2
 8015a0e:	633b      	str	r3, [r7, #48]	; 0x30
    for(y = 0; y < size; y++) {
 8015a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a12:	3301      	adds	r3, #1
 8015a14:	637b      	str	r3, [r7, #52]	; 0x34
 8015a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	db99      	blt.n	8015954 <shadow_blur_corner+0x4c>
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	881b      	ldrh	r3, [r3, #0]
 8015a24:	461a      	mov	r2, r3
 8015a26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a2e:	b29a      	uxth	r2, r3
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 8015a34:	2301      	movs	r3, #1
 8015a36:	623b      	str	r3, [r7, #32]
 8015a38:	e02f      	b.n	8015a9a <shadow_blur_corner+0x192>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 8015a3a:	6a3b      	ldr	r3, [r7, #32]
 8015a3c:	005b      	lsls	r3, r3, #1
 8015a3e:	683a      	ldr	r2, [r7, #0]
 8015a40:	4413      	add	r3, r2
 8015a42:	881a      	ldrh	r2, [r3, #0]
 8015a44:	6a39      	ldr	r1, [r7, #32]
 8015a46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015a4a:	440b      	add	r3, r1
 8015a4c:	005b      	lsls	r3, r3, #1
 8015a4e:	6839      	ldr	r1, [r7, #0]
 8015a50:	440b      	add	r3, r1
 8015a52:	881b      	ldrh	r3, [r3, #0]
 8015a54:	429a      	cmp	r2, r3
 8015a56:	d10d      	bne.n	8015a74 <shadow_blur_corner+0x16c>
 8015a58:	6a3a      	ldr	r2, [r7, #32]
 8015a5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015a5e:	4413      	add	r3, r2
 8015a60:	005b      	lsls	r3, r3, #1
 8015a62:	683a      	ldr	r2, [r7, #0]
 8015a64:	441a      	add	r2, r3
 8015a66:	6a3b      	ldr	r3, [r7, #32]
 8015a68:	005b      	lsls	r3, r3, #1
 8015a6a:	6839      	ldr	r1, [r7, #0]
 8015a6c:	440b      	add	r3, r1
 8015a6e:	8812      	ldrh	r2, [r2, #0]
 8015a70:	801a      	strh	r2, [r3, #0]
 8015a72:	e00f      	b.n	8015a94 <shadow_blur_corner+0x18c>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 8015a74:	6a3b      	ldr	r3, [r7, #32]
 8015a76:	005b      	lsls	r3, r3, #1
 8015a78:	683a      	ldr	r2, [r7, #0]
 8015a7a:	4413      	add	r3, r2
 8015a7c:	881b      	ldrh	r3, [r3, #0]
 8015a7e:	461a      	mov	r2, r3
 8015a80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015a84:	fb92 f1f3 	sdiv	r1, r2, r3
 8015a88:	6a3b      	ldr	r3, [r7, #32]
 8015a8a:	005b      	lsls	r3, r3, #1
 8015a8c:	683a      	ldr	r2, [r7, #0]
 8015a8e:	4413      	add	r3, r2
 8015a90:	b28a      	uxth	r2, r1
 8015a92:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 8015a94:	6a3b      	ldr	r3, [r7, #32]
 8015a96:	3301      	adds	r3, #1
 8015a98:	623b      	str	r3, [r7, #32]
 8015a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015aa2:	fb02 f303 	mul.w	r3, r2, r3
 8015aa6:	6a3a      	ldr	r2, [r7, #32]
 8015aa8:	429a      	cmp	r2, r3
 8015aaa:	d3c6      	bcc.n	8015a3a <shadow_blur_corner+0x132>
    }

    for(x = 0; x < size; x++) {
 8015aac:	2300      	movs	r3, #0
 8015aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ab0:	e090      	b.n	8015bd4 <shadow_blur_corner+0x2cc>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8015ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ab4:	005b      	lsls	r3, r3, #1
 8015ab6:	683a      	ldr	r2, [r7, #0]
 8015ab8:	4413      	add	r3, r2
 8015aba:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8015abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015abe:	881b      	ldrh	r3, [r3, #0]
 8015ac0:	461a      	mov	r2, r3
 8015ac2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015ac6:	fb03 f302 	mul.w	r3, r3, r2
 8015aca:	61fb      	str	r3, [r7, #28]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8015acc:	2300      	movs	r3, #0
 8015ace:	637b      	str	r3, [r7, #52]	; 0x34
 8015ad0:	e05b      	b.n	8015b8a <shadow_blur_corner+0x282>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 8015ad2:	69fb      	ldr	r3, [r7, #28]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	db03      	blt.n	8015ae0 <shadow_blur_corner+0x1d8>
 8015ad8:	69fb      	ldr	r3, [r7, #28]
 8015ada:	119b      	asrs	r3, r3, #6
 8015adc:	b299      	uxth	r1, r3
 8015ade:	e000      	b.n	8015ae2 <shadow_blur_corner+0x1da>
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ae4:	005b      	lsls	r3, r3, #1
 8015ae6:	68fa      	ldr	r2, [r7, #12]
 8015ae8:	4413      	add	r3, r2
 8015aea:	460a      	mov	r2, r1
 8015aec:	801a      	strh	r2, [r3, #0]

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 8015aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015af0:	693b      	ldr	r3, [r7, #16]
 8015af2:	1ad3      	subs	r3, r2, r3
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	dc03      	bgt.n	8015b00 <shadow_blur_corner+0x1f8>
 8015af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015afa:	881b      	ldrh	r3, [r3, #0]
 8015afc:	61bb      	str	r3, [r7, #24]
 8015afe:	e00d      	b.n	8015b1c <shadow_blur_corner+0x214>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 8015b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	1ad3      	subs	r3, r2, r3
 8015b06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015b0a:	fb02 f203 	mul.w	r2, r2, r3
 8015b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b10:	4413      	add	r3, r2
 8015b12:	005b      	lsls	r3, r3, #1
 8015b14:	683a      	ldr	r2, [r7, #0]
 8015b16:	4413      	add	r3, r2
 8015b18:	881b      	ldrh	r3, [r3, #0]
 8015b1a:	61bb      	str	r3, [r7, #24]
            v -= top_val;
 8015b1c:	69fa      	ldr	r2, [r7, #28]
 8015b1e:	69bb      	ldr	r3, [r7, #24]
 8015b20:	1ad3      	subs	r3, r2, r3
 8015b22:	61fb      	str	r3, [r7, #28]

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8015b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b28:	4413      	add	r3, r2
 8015b2a:	1c5a      	adds	r2, r3, #1
 8015b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b30:	429a      	cmp	r2, r3
 8015b32:	da0f      	bge.n	8015b54 <shadow_blur_corner+0x24c>
 8015b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b38:	4413      	add	r3, r2
 8015b3a:	3301      	adds	r3, #1
 8015b3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015b40:	fb02 f203 	mul.w	r2, r2, r3
 8015b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b46:	4413      	add	r3, r2
 8015b48:	005b      	lsls	r3, r3, #1
 8015b4a:	683a      	ldr	r2, [r7, #0]
 8015b4c:	4413      	add	r3, r2
 8015b4e:	881b      	ldrh	r3, [r3, #0]
 8015b50:	617b      	str	r3, [r7, #20]
 8015b52:	e00d      	b.n	8015b70 <shadow_blur_corner+0x268>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8015b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b58:	3b01      	subs	r3, #1
 8015b5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015b5e:	fb02 f203 	mul.w	r2, r2, r3
 8015b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b64:	4413      	add	r3, r2
 8015b66:	005b      	lsls	r3, r3, #1
 8015b68:	683a      	ldr	r2, [r7, #0]
 8015b6a:	4413      	add	r3, r2
 8015b6c:	881b      	ldrh	r3, [r3, #0]
 8015b6e:	617b      	str	r3, [r7, #20]
            v += bottom_val;
 8015b70:	69fa      	ldr	r2, [r7, #28]
 8015b72:	697b      	ldr	r3, [r7, #20]
 8015b74:	4413      	add	r3, r2
 8015b76:	61fb      	str	r3, [r7, #28]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8015b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b7a:	3301      	adds	r3, #1
 8015b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8015b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b82:	005b      	lsls	r3, r3, #1
 8015b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b86:	4413      	add	r3, r2
 8015b88:	633b      	str	r3, [r7, #48]	; 0x30
 8015b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015b90:	429a      	cmp	r2, r3
 8015b92:	db9e      	blt.n	8015ad2 <shadow_blur_corner+0x1ca>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8015b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b96:	005b      	lsls	r3, r3, #1
 8015b98:	683a      	ldr	r2, [r7, #0]
 8015b9a:	4413      	add	r3, r2
 8015b9c:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8015ba2:	e00f      	b.n	8015bc4 <shadow_blur_corner+0x2bc>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 8015ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	68fa      	ldr	r2, [r7, #12]
 8015baa:	4413      	add	r3, r2
 8015bac:	881a      	ldrh	r2, [r3, #0]
 8015bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb0:	801a      	strh	r2, [r3, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8015bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8015bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015bbc:	005b      	lsls	r3, r3, #1
 8015bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015bc0:	4413      	add	r3, r2
 8015bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8015bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	dbea      	blt.n	8015ba4 <shadow_blur_corner+0x29c>
    for(x = 0; x < size; x++) {
 8015bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bd0:	3301      	adds	r3, #1
 8015bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015bda:	429a      	cmp	r2, r3
 8015bdc:	f6ff af69 	blt.w	8015ab2 <shadow_blur_corner+0x1aa>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
 8015be0:	68f8      	ldr	r0, [r7, #12]
 8015be2:	f006 fe03 	bl	801c7ec <_lv_mem_buf_release>
}
 8015be6:	bf00      	nop
 8015be8:	3740      	adds	r7, #64	; 0x40
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}

08015bee <draw_outline>:

#endif

#if LV_USE_OUTLINE
static void draw_outline(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8015bee:	b590      	push	{r4, r7, lr}
 8015bf0:	b08f      	sub	sp, #60	; 0x3c
 8015bf2:	af04      	add	r7, sp, #16
 8015bf4:	60f8      	str	r0, [r7, #12]
 8015bf6:	60b9      	str	r1, [r7, #8]
 8015bf8:	607a      	str	r2, [r7, #4]
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c00:	2b02      	cmp	r3, #2
 8015c02:	f240 8091 	bls.w	8015d28 <draw_outline+0x13a>
    if(dsc->outline_width == 0) return;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	f000 808d 	beq.w	8015d2c <draw_outline+0x13e>

    lv_opa_t opa = dsc->outline_opa;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8015c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c20:	2bfd      	cmp	r3, #253	; 0xfd
 8015c22:	d902      	bls.n	8015c2a <draw_outline+0x3c>
 8015c24:	23ff      	movs	r3, #255	; 0xff
 8015c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /*Get the inner radius*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 8015c2a:	f107 031c 	add.w	r3, r7, #28
 8015c2e:	68f9      	ldr	r1, [r7, #12]
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7fd f977 	bl	8012f24 <lv_area_copy>
    area_inner.x1 -= dsc->outline_pad;
 8015c36:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8015c3a:	b29a      	uxth	r2, r3
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015c42:	b29b      	uxth	r3, r3
 8015c44:	1ad3      	subs	r3, r2, r3
 8015c46:	b29b      	uxth	r3, r3
 8015c48:	b21b      	sxth	r3, r3
 8015c4a:	83bb      	strh	r3, [r7, #28]
    area_inner.y1 -= dsc->outline_pad;
 8015c4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015c50:	b29a      	uxth	r2, r3
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015c58:	b29b      	uxth	r3, r3
 8015c5a:	1ad3      	subs	r3, r2, r3
 8015c5c:	b29b      	uxth	r3, r3
 8015c5e:	b21b      	sxth	r3, r3
 8015c60:	83fb      	strh	r3, [r7, #30]
    area_inner.x2 += dsc->outline_pad;
 8015c62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c66:	b29a      	uxth	r2, r3
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015c6e:	b29b      	uxth	r3, r3
 8015c70:	4413      	add	r3, r2
 8015c72:	b29b      	uxth	r3, r3
 8015c74:	b21b      	sxth	r3, r3
 8015c76:	843b      	strh	r3, [r7, #32]
    area_inner.y2 += dsc->outline_pad;
 8015c78:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015c7c:	b29a      	uxth	r2, r3
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015c84:	b29b      	uxth	r3, r3
 8015c86:	4413      	add	r3, r2
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	b21b      	sxth	r3, r3
 8015c8c:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_area_t area_outer;
    lv_area_copy(&area_outer, &area_inner);
 8015c8e:	f107 021c 	add.w	r2, r7, #28
 8015c92:	f107 0314 	add.w	r3, r7, #20
 8015c96:	4611      	mov	r1, r2
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7fd f943 	bl	8012f24 <lv_area_copy>

    area_outer.x1 -= dsc->outline_width;
 8015c9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015ca2:	b29a      	uxth	r2, r3
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015caa:	b29b      	uxth	r3, r3
 8015cac:	1ad3      	subs	r3, r2, r3
 8015cae:	b29b      	uxth	r3, r3
 8015cb0:	b21b      	sxth	r3, r3
 8015cb2:	82bb      	strh	r3, [r7, #20]
    area_outer.x2 += dsc->outline_width;
 8015cb4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8015cb8:	b29a      	uxth	r2, r3
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	4413      	add	r3, r2
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	b21b      	sxth	r3, r3
 8015cc8:	833b      	strh	r3, [r7, #24]
    area_outer.y1 -= dsc->outline_width;
 8015cca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015cce:	b29a      	uxth	r2, r3
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	1ad3      	subs	r3, r2, r3
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	b21b      	sxth	r3, r3
 8015cde:	82fb      	strh	r3, [r7, #22]
    area_outer.y2 += dsc->outline_width;
 8015ce0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015ce4:	b29a      	uxth	r2, r3
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015cec:	b29b      	uxth	r3, r3
 8015cee:	4413      	add	r3, r2
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	b21b      	sxth	r3, r3
 8015cf4:	837b      	strh	r3, [r7, #26]

    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	f9b3 4000 	ldrsh.w	r4, [r3]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d02:	687a      	ldr	r2, [r7, #4]
 8015d04:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8015d08:	f107 0114 	add.w	r1, r7, #20
 8015d0c:	f107 001c 	add.w	r0, r7, #28
 8015d10:	9203      	str	r2, [sp, #12]
 8015d12:	9302      	str	r3, [sp, #8]
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	6a1b      	ldr	r3, [r3, #32]
 8015d18:	9301      	str	r3, [sp, #4]
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	9300      	str	r3, [sp, #0]
 8015d1e:	4623      	mov	r3, r4
 8015d20:	68ba      	ldr	r2, [r7, #8]
 8015d22:	f000 fad7 	bl	80162d4 <draw_full_border>
 8015d26:	e002      	b.n	8015d2e <draw_outline+0x140>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 8015d28:	bf00      	nop
 8015d2a:	e000      	b.n	8015d2e <draw_outline+0x140>
    if(dsc->outline_width == 0) return;
 8015d2c:	bf00      	nop
                     dsc->outline_blend_mode);
}
 8015d2e:	372c      	adds	r7, #44	; 0x2c
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd90      	pop	{r4, r7, pc}

08015d34 <draw_pattern>:
#endif

#if LV_USE_PATTERN
static void draw_pattern(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8015d34:	b5b0      	push	{r4, r5, r7, lr}
 8015d36:	b0ac      	sub	sp, #176	; 0xb0
 8015d38:	af04      	add	r7, sp, #16
 8015d3a:	60f8      	str	r0, [r7, #12]
 8015d3c:	60b9      	str	r1, [r7, #8]
 8015d3e:	607a      	str	r2, [r7, #4]
    if(dsc->pattern_image == NULL) return;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	f000 8205 	beq.w	8016154 <draw_pattern+0x420>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015d50:	2b02      	cmp	r3, #2
 8015d52:	f240 8201 	bls.w	8016158 <draw_pattern+0x424>

    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7f8 f992 	bl	800e084 <lv_img_src_get_type>
 8015d60:	4603      	mov	r3, r0
 8015d62:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    lv_draw_img_dsc_t img_dsc;
    lv_draw_label_dsc_t label_dsc;
    int32_t img_w;
    int32_t img_h;

    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 8015d66:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8015d6a:	2b01      	cmp	r3, #1
 8015d6c:	d003      	beq.n	8015d76 <draw_pattern+0x42>
 8015d6e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d12e      	bne.n	8015dd4 <draw_pattern+0xa0>
        lv_img_header_t header;
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d7a:	f107 0218 	add.w	r2, r7, #24
 8015d7e:	4611      	mov	r1, r2
 8015d80:	4618      	mov	r0, r3
 8015d82:	f002 f981 	bl	8018088 <lv_img_decoder_get_info>
 8015d86:	4603      	mov	r3, r0
 8015d88:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        if(res != LV_RES_OK) {
 8015d8c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8015d90:	2b01      	cmp	r3, #1
 8015d92:	f040 81e3 	bne.w	801615c <draw_pattern+0x428>
            LV_LOG_WARN("draw_img: can't get image info");
            return;
        }

        img_w = header.w;
 8015d96:	69bb      	ldr	r3, [r7, #24]
 8015d98:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015d9c:	b29b      	uxth	r3, r3
 8015d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        img_h = header.h;
 8015da2:	8b7b      	ldrh	r3, [r7, #26]
 8015da4:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8015da8:	b29b      	uxth	r3, r3
 8015daa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        lv_draw_img_dsc_init(&img_dsc);
 8015dae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015db2:	4618      	mov	r0, r3
 8015db4:	f7f8 f877 	bl	800dea6 <lv_draw_img_dsc_init>
        img_dsc.opa = dsc->pattern_opa;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015dbe:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015dc8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        img_dsc.recolor = dsc->pattern_recolor;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dd0:	677b      	str	r3, [r7, #116]	; 0x74
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 8015dd2:	e036      	b.n	8015e42 <draw_pattern+0x10e>
    }
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8015dd4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8015dd8:	2b02      	cmp	r3, #2
 8015dda:	d12b      	bne.n	8015e34 <draw_pattern+0x100>
        lv_draw_label_dsc_init(&label_dsc);
 8015ddc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7f9 f81b 	bl	800ee1c <lv_draw_label_dsc_init>
        label_dsc.color = dsc->pattern_recolor;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dea:	643b      	str	r3, [r7, #64]	; 0x40
        label_dsc.font = dsc->pattern_font;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015df0:	64fb      	str	r3, [r7, #76]	; 0x4c
        label_dsc.opa = dsc->pattern_opa;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015df8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        lv_point_t s;
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8015e00:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8015e02:	f9b7 5054 	ldrsh.w	r5, [r7, #84]	; 0x54
 8015e06:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8015e0a:	f107 0014 	add.w	r0, r7, #20
 8015e0e:	2200      	movs	r2, #0
 8015e10:	9202      	str	r2, [sp, #8]
 8015e12:	f647 4218 	movw	r2, #31768	; 0x7c18
 8015e16:	9201      	str	r2, [sp, #4]
 8015e18:	9300      	str	r3, [sp, #0]
 8015e1a:	462b      	mov	r3, r5
 8015e1c:	4622      	mov	r2, r4
 8015e1e:	f007 fc91 	bl	801d744 <_lv_txt_get_size>
                         LV_TXT_FLAG_NONE);
        img_w = s.x;
 8015e22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        img_h = s.y;
 8015e2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015e2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015e32:	e006      	b.n	8015e42 <draw_pattern+0x10e>

    }
    else {
        /*Trigger the error handler of image drawer*/
        LV_LOG_WARN("lv_img_design: image source type is unknown");
        lv_draw_img(coords, clip, NULL, NULL);
 8015e34:	2300      	movs	r3, #0
 8015e36:	2200      	movs	r2, #0
 8015e38:	68b9      	ldr	r1, [r7, #8]
 8015e3a:	68f8      	ldr	r0, [r7, #12]
 8015e3c:	f7f8 f858 	bl	800def0 <lv_draw_img>
        return;
 8015e40:	e18f      	b.n	8016162 <draw_pattern+0x42e>
    }

    /*Can't draw zero sized images*/
    if(img_w == 0 || img_h == 0) return;
 8015e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	f000 818a 	beq.w	8016160 <draw_pattern+0x42c>
 8015e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	f000 8185 	beq.w	8016160 <draw_pattern+0x42c>

    lv_area_t coords_tmp;
    lv_draw_mask_radius_param_t radius_mask_param;

    if(dsc->pattern_repeat) {
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8015e5c:	f003 0301 	and.w	r3, r3, #1
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	f000 80c8 	beq.w	8015ff8 <draw_pattern+0x2c4>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015e6e:	f107 001c 	add.w	r0, r7, #28
 8015e72:	2300      	movs	r3, #0
 8015e74:	68f9      	ldr	r1, [r7, #12]
 8015e76:	f7fb febf 	bl	8011bf8 <lv_draw_mask_radius_init>
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 8015e7a:	f107 031c 	add.w	r3, r7, #28
 8015e7e:	2100      	movs	r1, #0
 8015e80:	4618      	mov	r0, r3
 8015e82:	f7fb fc9f 	bl	80117c4 <lv_draw_mask_add>
 8015e86:	4603      	mov	r3, r0
 8015e88:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Align the pattern to the middle*/
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
 8015e8c:	68f8      	ldr	r0, [r7, #12]
 8015e8e:	f7fd f857 	bl	8012f40 <lv_area_get_width>
 8015e92:	4603      	mov	r3, r0
 8015e94:	461c      	mov	r4, r3
 8015e96:	68f8      	ldr	r0, [r7, #12]
 8015e98:	f7fd f852 	bl	8012f40 <lv_area_get_width>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	461a      	mov	r2, r3
 8015ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015ea4:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ea8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015eac:	fb02 f303 	mul.w	r3, r2, r3
 8015eb0:	1ae3      	subs	r3, r4, r3
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	da00      	bge.n	8015eb8 <draw_pattern+0x184>
 8015eb6:	3301      	adds	r3, #1
 8015eb8:	105b      	asrs	r3, r3, #1
 8015eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
 8015ebe:	68f8      	ldr	r0, [r7, #12]
 8015ec0:	f7fd f855 	bl	8012f6e <lv_area_get_height>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	461c      	mov	r4, r3
 8015ec8:	68f8      	ldr	r0, [r7, #12]
 8015eca:	f7fd f850 	bl	8012f6e <lv_area_get_height>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	461a      	mov	r2, r3
 8015ed2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015ed6:	fb92 f3f3 	sdiv	r3, r2, r3
 8015eda:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015ede:	fb02 f303 	mul.w	r3, r2, r3
 8015ee2:	1ae3      	subs	r3, r4, r3
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	da00      	bge.n	8015eea <draw_pattern+0x1b6>
 8015ee8:	3301      	adds	r3, #1
 8015eea:	105b      	asrs	r3, r3, #1
 8015eec:	67fb      	str	r3, [r7, #124]	; 0x7c

        coords_tmp.y1 = coords->y1 - ofs_y;
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015ef4:	b29a      	uxth	r2, r3
 8015ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	1ad3      	subs	r3, r2, r3
 8015efc:	b29b      	uxth	r3, r3
 8015efe:	b21b      	sxth	r3, r3
 8015f00:	877b      	strh	r3, [r7, #58]	; 0x3a
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 8015f02:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8015f06:	b29a      	uxth	r2, r3
 8015f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015f0c:	b29b      	uxth	r3, r3
 8015f0e:	4413      	add	r3, r2
 8015f10:	b29b      	uxth	r3, r3
 8015f12:	3b01      	subs	r3, #1
 8015f14:	b29b      	uxth	r3, r3
 8015f16:	b21b      	sxth	r3, r3
 8015f18:	87fb      	strh	r3, [r7, #62]	; 0x3e
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 8015f1a:	e060      	b.n	8015fde <draw_pattern+0x2aa>
            coords_tmp.x1 = coords->x1 - ofs_x;
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f22:	b29a      	uxth	r2, r3
 8015f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015f28:	b29b      	uxth	r3, r3
 8015f2a:	1ad3      	subs	r3, r2, r3
 8015f2c:	b29b      	uxth	r3, r3
 8015f2e:	b21b      	sxth	r3, r3
 8015f30:	873b      	strh	r3, [r7, #56]	; 0x38
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8015f32:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8015f36:	b29a      	uxth	r2, r3
 8015f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f3c:	b29b      	uxth	r3, r3
 8015f3e:	4413      	add	r3, r2
 8015f40:	b29b      	uxth	r3, r3
 8015f42:	3b01      	subs	r3, #1
 8015f44:	b29b      	uxth	r3, r3
 8015f46:	b21b      	sxth	r3, r3
 8015f48:	87bb      	strh	r3, [r7, #60]	; 0x3c
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 8015f4a:	e02d      	b.n	8015fa8 <draw_pattern+0x274>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 8015f4c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8015f50:	2b02      	cmp	r3, #2
 8015f52:	d10c      	bne.n	8015f6e <draw_pattern+0x23a>
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8015f58:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015f5c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8015f60:	2300      	movs	r3, #0
 8015f62:	9300      	str	r3, [sp, #0]
 8015f64:	460b      	mov	r3, r1
 8015f66:	68b9      	ldr	r1, [r7, #8]
 8015f68:	f7f8 ff9c 	bl	800eea4 <lv_draw_label>
 8015f6c:	e008      	b.n	8015f80 <draw_pattern+0x24c>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015f72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015f76:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8015f7a:	68b9      	ldr	r1, [r7, #8]
 8015f7c:	f7f7 ffb8 	bl	800def0 <lv_draw_img>
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 8015f80:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8015f84:	b29a      	uxth	r2, r3
 8015f86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f8a:	b29b      	uxth	r3, r3
 8015f8c:	4413      	add	r3, r2
 8015f8e:	b29b      	uxth	r3, r3
 8015f90:	b21b      	sxth	r3, r3
 8015f92:	873b      	strh	r3, [r7, #56]	; 0x38
 8015f94:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8015f98:	b29a      	uxth	r2, r3
 8015f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f9e:	b29b      	uxth	r3, r3
 8015fa0:	4413      	add	r3, r2
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	b21b      	sxth	r3, r3
 8015fa6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015fa8:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	ddca      	ble.n	8015f4c <draw_pattern+0x218>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 8015fb6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8015fba:	b29a      	uxth	r2, r3
 8015fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	4413      	add	r3, r2
 8015fc4:	b29b      	uxth	r3, r3
 8015fc6:	b21b      	sxth	r3, r3
 8015fc8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015fca:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015fce:	b29a      	uxth	r2, r3
 8015fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015fd4:	b29b      	uxth	r3, r3
 8015fd6:	4413      	add	r3, r2
 8015fd8:	b29b      	uxth	r3, r3
 8015fda:	b21b      	sxth	r3, r3
 8015fdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8015fde:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	dd97      	ble.n	8015f1c <draw_pattern+0x1e8>
            }
        }
        lv_draw_mask_remove_id(radius_mask_id);
 8015fec:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f7fb fc5d 	bl	80118b0 <lv_draw_mask_remove_id>
 8015ff6:	e0b4      	b.n	8016162 <draw_pattern+0x42e>
    }
    else {
        int32_t obj_w = lv_area_get_width(coords);
 8015ff8:	68f8      	ldr	r0, [r7, #12]
 8015ffa:	f7fc ffa1 	bl	8012f40 <lv_area_get_width>
 8015ffe:	4603      	mov	r3, r0
 8016000:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        int32_t obj_h = lv_area_get_height(coords);
 8016004:	68f8      	ldr	r0, [r7, #12]
 8016006:	f7fc ffb2 	bl	8012f6e <lv_area_get_height>
 801600a:	4603      	mov	r3, r0
 801600c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016016:	b29a      	uxth	r2, r3
 8016018:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801601c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016020:	1acb      	subs	r3, r1, r3
 8016022:	2b00      	cmp	r3, #0
 8016024:	da00      	bge.n	8016028 <draw_pattern+0x2f4>
 8016026:	3301      	adds	r3, #1
 8016028:	105b      	asrs	r3, r3, #1
 801602a:	b29b      	uxth	r3, r3
 801602c:	4413      	add	r3, r2
 801602e:	b29b      	uxth	r3, r3
 8016030:	b21b      	sxth	r3, r3
 8016032:	873b      	strh	r3, [r7, #56]	; 0x38
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801603a:	b29a      	uxth	r2, r3
 801603c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8016040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016044:	1acb      	subs	r3, r1, r3
 8016046:	2b00      	cmp	r3, #0
 8016048:	da00      	bge.n	801604c <draw_pattern+0x318>
 801604a:	3301      	adds	r3, #1
 801604c:	105b      	asrs	r3, r3, #1
 801604e:	b29b      	uxth	r3, r3
 8016050:	4413      	add	r3, r2
 8016052:	b29b      	uxth	r3, r3
 8016054:	b21b      	sxth	r3, r3
 8016056:	877b      	strh	r3, [r7, #58]	; 0x3a
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8016058:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801605c:	b29a      	uxth	r2, r3
 801605e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016062:	b29b      	uxth	r3, r3
 8016064:	4413      	add	r3, r2
 8016066:	b29b      	uxth	r3, r3
 8016068:	3b01      	subs	r3, #1
 801606a:	b29b      	uxth	r3, r3
 801606c:	b21b      	sxth	r3, r3
 801606e:	87bb      	strh	r3, [r7, #60]	; 0x3c
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 8016070:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8016074:	b29a      	uxth	r2, r3
 8016076:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801607a:	b29b      	uxth	r3, r3
 801607c:	4413      	add	r3, r2
 801607e:	b29b      	uxth	r3, r3
 8016080:	3b01      	subs	r3, #1
 8016082:	b29b      	uxth	r3, r3
 8016084:	b21b      	sxth	r3, r3
 8016086:	87fb      	strh	r3, [r7, #62]	; 0x3e

        /* If the (obj_h - img_h) is odd there is a rounding error when divided by 2.
         * It's better round up in case of symbols because probably there is some extra space in the bottom
         * due to the base line of font*/
        if(src_type == LV_IMG_SRC_SYMBOL) {
 8016088:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801608c:	2b02      	cmp	r3, #2
 801608e:	d11c      	bne.n	80160ca <draw_pattern+0x396>
            int32_t y_corr = (obj_h - img_h) & 0x1;
 8016090:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016098:	1ad3      	subs	r3, r2, r3
 801609a:	f003 0301 	and.w	r3, r3, #1
 801609e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            coords_tmp.y1 += y_corr;
 80160a2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80160a6:	b29a      	uxth	r2, r3
 80160a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	4413      	add	r3, r2
 80160b0:	b29b      	uxth	r3, r3
 80160b2:	b21b      	sxth	r3, r3
 80160b4:	877b      	strh	r3, [r7, #58]	; 0x3a
            coords_tmp.y2 += y_corr;
 80160b6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80160ba:	b29a      	uxth	r2, r3
 80160bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80160c0:	b29b      	uxth	r3, r3
 80160c2:	4413      	add	r3, r2
 80160c4:	b29b      	uxth	r3, r3
 80160c6:	b21b      	sxth	r3, r3
 80160c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }

        int16_t radius_mask_id = LV_MASK_ID_INV;
 80160ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80160ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80160d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80160dc:	68f9      	ldr	r1, [r7, #12]
 80160de:	4618      	mov	r0, r3
 80160e0:	f004 ff42 	bl	801af68 <_lv_area_is_in>
 80160e4:	4603      	mov	r3, r0
 80160e6:	f083 0301 	eor.w	r3, r3, #1
 80160ea:	b2db      	uxtb	r3, r3
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d011      	beq.n	8016114 <draw_pattern+0x3e0>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80160f6:	f107 001c 	add.w	r0, r7, #28
 80160fa:	2300      	movs	r3, #0
 80160fc:	68f9      	ldr	r1, [r7, #12]
 80160fe:	f7fb fd7b 	bl	8011bf8 <lv_draw_mask_radius_init>
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 8016102:	f107 031c 	add.w	r3, r7, #28
 8016106:	2100      	movs	r1, #0
 8016108:	4618      	mov	r0, r3
 801610a:	f7fb fb5b 	bl	80117c4 <lv_draw_mask_add>
 801610e:	4603      	mov	r3, r0
 8016110:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        }

        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 8016114:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8016118:	2b02      	cmp	r3, #2
 801611a:	d10c      	bne.n	8016136 <draw_pattern+0x402>
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016120:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016124:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016128:	2300      	movs	r3, #0
 801612a:	9300      	str	r3, [sp, #0]
 801612c:	460b      	mov	r3, r1
 801612e:	68b9      	ldr	r1, [r7, #8]
 8016130:	f7f8 feb8 	bl	800eea4 <lv_draw_label>
 8016134:	e008      	b.n	8016148 <draw_pattern+0x414>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801613a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801613e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016142:	68b9      	ldr	r1, [r7, #8]
 8016144:	f7f7 fed4 	bl	800def0 <lv_draw_img>

        lv_draw_mask_remove_id(radius_mask_id);
 8016148:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801614c:	4618      	mov	r0, r3
 801614e:	f7fb fbaf 	bl	80118b0 <lv_draw_mask_remove_id>
 8016152:	e006      	b.n	8016162 <draw_pattern+0x42e>
    if(dsc->pattern_image == NULL) return;
 8016154:	bf00      	nop
 8016156:	e004      	b.n	8016162 <draw_pattern+0x42e>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
 8016158:	bf00      	nop
 801615a:	e002      	b.n	8016162 <draw_pattern+0x42e>
            return;
 801615c:	bf00      	nop
 801615e:	e000      	b.n	8016162 <draw_pattern+0x42e>
    if(img_w == 0 || img_h == 0) return;
 8016160:	bf00      	nop
    }
}
 8016162:	37a0      	adds	r7, #160	; 0xa0
 8016164:	46bd      	mov	sp, r7
 8016166:	bdb0      	pop	{r4, r5, r7, pc}

08016168 <draw_value_str>:
#endif

#if LV_USE_VALUE_STR
static void draw_value_str(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8016168:	b590      	push	{r4, r7, lr}
 801616a:	b099      	sub	sp, #100	; 0x64
 801616c:	af04      	add	r7, sp, #16
 801616e:	60f8      	str	r0, [r7, #12]
 8016170:	60b9      	str	r1, [r7, #8]
 8016172:	607a      	str	r2, [r7, #4]
    if(dsc->value_str == NULL) return;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016178:	2b00      	cmp	r3, #0
 801617a:	f000 80a5 	beq.w	80162c8 <draw_value_str+0x160>
    if(dsc->value_opa <= LV_OPA_MIN) return;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016184:	2b02      	cmp	r3, #2
 8016186:	f240 80a1 	bls.w	80162cc <draw_value_str+0x164>

#if LV_USE_ARABIC_PERSIAN_CHARS == 0
    const char * str = dsc->value_str;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801618e:	64fb      	str	r3, [r7, #76]	; 0x4c
    char * str = _lv_mem_buf_get(str_len + 1);
    _lv_txt_ap_proc(dsc->value_str, str);
#endif

    lv_point_t s;
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f9b3 4060 	ldrsh.w	r4, [r3, #96]	; 0x60
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 80161a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80161a4:	2200      	movs	r2, #0
 80161a6:	9202      	str	r2, [sp, #8]
 80161a8:	f647 4218 	movw	r2, #31768	; 0x7c18
 80161ac:	9201      	str	r2, [sp, #4]
 80161ae:	9300      	str	r3, [sp, #0]
 80161b0:	4623      	mov	r3, r4
 80161b2:	460a      	mov	r2, r1
 80161b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80161b6:	f007 fac5 	bl	801d744 <_lv_txt_get_size>
                     LV_TXT_FLAG_NONE);

    lv_area_t value_area;
    value_area.x1 = 0;
 80161ba:	2300      	movs	r3, #0
 80161bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    value_area.y1 = 0;
 80161c0:	2300      	movs	r3, #0
 80161c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    value_area.x2 = s.x - 1;
 80161c6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	3b01      	subs	r3, #1
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	b21b      	sxth	r3, r3
 80161d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    value_area.y2 = s.y - 1;
 80161d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80161da:	b29b      	uxth	r3, r3
 80161dc:	3b01      	subs	r3, #1
 80161de:	b29b      	uxth	r3, r3
 80161e0:	b21b      	sxth	r3, r3
 80161e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_point_t p_align;
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 80161ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80161f0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80161f4:	68f8      	ldr	r0, [r7, #12]
 80161f6:	f004 ff55 	bl	801b0a4 <_lv_area_align>

    value_area.x1 += p_align.x + dsc->value_ofs_x;
 80161fa:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80161fe:	b29a      	uxth	r2, r3
 8016200:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8016204:	b299      	uxth	r1, r3
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 801620c:	b29b      	uxth	r3, r3
 801620e:	440b      	add	r3, r1
 8016210:	b29b      	uxth	r3, r3
 8016212:	4413      	add	r3, r2
 8016214:	b29b      	uxth	r3, r3
 8016216:	b21b      	sxth	r3, r3
 8016218:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 801621c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8016220:	b29a      	uxth	r2, r3
 8016222:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8016226:	b299      	uxth	r1, r3
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 801622e:	b29b      	uxth	r3, r3
 8016230:	440b      	add	r3, r1
 8016232:	b29b      	uxth	r3, r3
 8016234:	4413      	add	r3, r2
 8016236:	b29b      	uxth	r3, r3
 8016238:	b21b      	sxth	r3, r3
 801623a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    value_area.x2 += p_align.x + dsc->value_ofs_x;
 801623e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8016242:	b29a      	uxth	r2, r3
 8016244:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8016248:	b299      	uxth	r1, r3
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8016250:	b29b      	uxth	r3, r3
 8016252:	440b      	add	r3, r1
 8016254:	b29b      	uxth	r3, r3
 8016256:	4413      	add	r3, r2
 8016258:	b29b      	uxth	r3, r3
 801625a:	b21b      	sxth	r3, r3
 801625c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    value_area.y2 += p_align.y + dsc->value_ofs_y;
 8016260:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8016264:	b29a      	uxth	r2, r3
 8016266:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801626a:	b299      	uxth	r1, r3
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8016272:	b29b      	uxth	r3, r3
 8016274:	440b      	add	r3, r1
 8016276:	b29b      	uxth	r3, r3
 8016278:	4413      	add	r3, r2
 801627a:	b29b      	uxth	r3, r3
 801627c:	b21b      	sxth	r3, r3
 801627e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 8016282:	f107 0314 	add.w	r3, r7, #20
 8016286:	4618      	mov	r0, r3
 8016288:	f7f8 fdc8 	bl	800ee1c <lv_draw_label_dsc_init>
    label_dsc.font = dsc->value_font;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016290:	623b      	str	r3, [r7, #32]
    label_dsc.letter_space = dsc->value_letter_space;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 8016298:	853b      	strh	r3, [r7, #40]	; 0x28
    label_dsc.line_space = dsc->value_line_space;
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 80162a0:	84fb      	strh	r3, [r7, #38]	; 0x26
    label_dsc.color = dsc->value_color;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162a6:	617b      	str	r3, [r7, #20]
    label_dsc.opa = dsc->value_opa;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80162ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 80162b2:	f107 0214 	add.w	r2, r7, #20
 80162b6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80162ba:	2300      	movs	r3, #0
 80162bc:	9300      	str	r3, [sp, #0]
 80162be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162c0:	68b9      	ldr	r1, [r7, #8]
 80162c2:	f7f8 fdef 	bl	800eea4 <lv_draw_label>
 80162c6:	e002      	b.n	80162ce <draw_value_str+0x166>
    if(dsc->value_str == NULL) return;
 80162c8:	bf00      	nop
 80162ca:	e000      	b.n	80162ce <draw_value_str+0x166>
    if(dsc->value_opa <= LV_OPA_MIN) return;
 80162cc:	bf00      	nop

#if LV_USE_ARABIC_PERSIAN_CHARS
    _lv_mem_buf_release(str);
#endif
}
 80162ce:	3754      	adds	r7, #84	; 0x54
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd90      	pop	{r4, r7, pc}

080162d4 <draw_full_border>:
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b0b8      	sub	sp, #224	; 0xe0
 80162d8:	af04      	add	r7, sp, #16
 80162da:	60f8      	str	r0, [r7, #12]
 80162dc:	60b9      	str	r1, [r7, #8]
 80162de:	607a      	str	r2, [r7, #4]
 80162e0:	807b      	strh	r3, [r7, #2]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 80162e2:	f7fb fb3d 	bl	8011960 <lv_draw_mask_get_cnt>
 80162e6:	4603      	mov	r3, r0
 80162e8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    bool simple_mode = true;
 80162ec:	2301      	movs	r3, #1
 80162ee:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    if(other_mask_cnt) simple_mode = false;
 80162f2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d002      	beq.n	8016300 <draw_full_border+0x2c>
 80162fa:	2300      	movs	r3, #0
 80162fc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

    int32_t inner_w = lv_area_get_width(area_inner);
 8016300:	68f8      	ldr	r0, [r7, #12]
 8016302:	f7fc fe1d 	bl	8012f40 <lv_area_get_width>
 8016306:	4603      	mov	r3, r0
 8016308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    int32_t inner_h = lv_area_get_height(area_inner);
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	f7fc fe2e 	bl	8012f6e <lv_area_get_height>
 8016312:	4603      	mov	r3, r0
 8016314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801631e:	b29a      	uxth	r2, r3
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016326:	b29b      	uxth	r3, r3
 8016328:	1ad3      	subs	r3, r2, r3
 801632a:	b29b      	uxth	r3, r3
 801632c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

    int32_t coords_out_w = lv_area_get_width(area_outer);
 8016330:	68b8      	ldr	r0, [r7, #8]
 8016332:	f7fc fe05 	bl	8012f40 <lv_area_get_width>
 8016336:	4603      	mov	r3, r0
 8016338:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    int32_t coords_out_h = lv_area_get_height(area_outer);
 801633c:	68b8      	ldr	r0, [r7, #8]
 801633e:	f7fc fe16 	bl	8012f6e <lv_area_get_height>
 8016342:	4603      	mov	r3, r0
 8016344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
 8016348:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 801634c:	2b00      	cmp	r3, #0
 801634e:	d020      	beq.n	8016392 <draw_full_border+0xbe>
        rin = radius;
 8016350:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016354:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
 8016358:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801635c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016360:	4293      	cmp	r3, r2
 8016362:	bfa8      	it	ge
 8016364:	4613      	movge	r3, r2
 8016366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        if(rin > short_side >> 1) rin = short_side >> 1;
 801636a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801636e:	105b      	asrs	r3, r3, #1
 8016370:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8016374:	429a      	cmp	r2, r3
 8016376:	dd04      	ble.n	8016382 <draw_full_border+0xae>
 8016378:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801637c:	105b      	asrs	r3, r3, #1
 801637e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

        /*Get the outer area*/
        rout = rin + border_width;
 8016382:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8016386:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801638a:	4413      	add	r3, r2
 801638c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016390:	e026      	b.n	80163e0 <draw_full_border+0x10c>
    }
    else {
        rout = radius;
 8016392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
 801639a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801639e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80163a2:	4293      	cmp	r3, r2
 80163a4:	bfa8      	it	ge
 80163a6:	4613      	movge	r3, r2
 80163a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        if(rout > short_side >> 1) rout = short_side >> 1;
 80163ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80163b0:	105b      	asrs	r3, r3, #1
 80163b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80163b6:	429a      	cmp	r2, r3
 80163b8:	dd04      	ble.n	80163c4 <draw_full_border+0xf0>
 80163ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80163be:	105b      	asrs	r3, r3, #1
 80163c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        /*Get the outer area*/
        rin = rout - border_width;
 80163c4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80163c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80163cc:	1ad3      	subs	r3, r2, r3
 80163ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        if(rin < 0) rin = 0;
 80163d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	da02      	bge.n	80163e0 <draw_full_border+0x10c>
 80163da:	2300      	movs	r3, #0
 80163dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 80163e0:	f7f3 fe16 	bl	800a010 <_lv_refr_get_disp_refreshing>
 80163e4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80163e8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80163ec:	f003 ff00 	bl	801a1f0 <lv_disp_get_buf>
 80163f0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 80163f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	68b9      	ldr	r1, [r7, #8]
 80163fc:	4618      	mov	r0, r3
 80163fe:	f004 fbcf 	bl	801aba0 <_lv_area_intersect>
 8016402:	4603      	mov	r3, r0
 8016404:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    if(is_common == false) return;
 8016408:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801640c:	f083 0301 	eor.w	r3, r3, #1
 8016410:	b2db      	uxtb	r3, r3
 8016412:	2b00      	cmp	r3, #0
 8016414:	f040 8350 	bne.w	8016ab8 <draw_full_border+0x7e4>

    const lv_area_t * disp_area = &vdb->area;
 8016418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801641c:	3310      	adds	r3, #16
 801641e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 8016422:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016426:	b29a      	uxth	r2, r3
 8016428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801642c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016430:	b29b      	uxth	r3, r3
 8016432:	1ad3      	subs	r3, r2, r3
 8016434:	b29b      	uxth	r3, r3
 8016436:	b21b      	sxth	r3, r3
 8016438:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    draw_area.y1 -= disp_area->y1;
 801643c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016440:	b29a      	uxth	r2, r3
 8016442:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016446:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801644a:	b29b      	uxth	r3, r3
 801644c:	1ad3      	subs	r3, r2, r3
 801644e:	b29b      	uxth	r3, r3
 8016450:	b21b      	sxth	r3, r3
 8016452:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    draw_area.x2 -= disp_area->x1;
 8016456:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801645a:	b29a      	uxth	r2, r3
 801645c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016464:	b29b      	uxth	r3, r3
 8016466:	1ad3      	subs	r3, r2, r3
 8016468:	b29b      	uxth	r3, r3
 801646a:	b21b      	sxth	r3, r3
 801646c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    draw_area.y2 -= disp_area->y1;
 8016470:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8016474:	b29a      	uxth	r2, r3
 8016476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801647a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801647e:	b29b      	uxth	r3, r3
 8016480:	1ad3      	subs	r3, r2, r3
 8016482:	b29b      	uxth	r3, r3
 8016484:	b21b      	sxth	r3, r3
 8016486:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    int32_t draw_area_w = lv_area_get_width(&draw_area);
 801648a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801648e:	4618      	mov	r0, r3
 8016490:	f7fc fd56 	bl	8012f40 <lv_area_get_width>
 8016494:	4603      	mov	r3, r0
 8016496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 801649a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801649e:	b21a      	sxth	r2, r3
 80164a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80164a4:	2301      	movs	r3, #1
 80164a6:	68f9      	ldr	r1, [r7, #12]
 80164a8:	f7fb fba6 	bl	8011bf8 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 80164ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80164b0:	2100      	movs	r1, #0
 80164b2:	4618      	mov	r0, r3
 80164b4:	f7fb f986 	bl	80117c4 <lv_draw_mask_add>
 80164b8:	4603      	mov	r3, r0
 80164ba:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 80164be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80164c2:	b21a      	sxth	r2, r3
 80164c4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80164c8:	2300      	movs	r3, #0
 80164ca:	68b9      	ldr	r1, [r7, #8]
 80164cc:	f7fb fb94 	bl	8011bf8 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 80164d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80164d4:	2100      	movs	r1, #0
 80164d6:	4618      	mov	r0, r3
 80164d8:	f7fb f974 	bl	80117c4 <lv_draw_mask_add>
 80164dc:	4603      	mov	r3, r0
 80164de:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 80164e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80164e6:	4618      	mov	r0, r3
 80164e8:	f006 f8a2 	bl	801c630 <_lv_mem_buf_get>
 80164ec:	67b8      	str	r0, [r7, #120]	; 0x78

    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 80164ee:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80164f2:	3b01      	subs	r3, #1
 80164f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80164f8:	4293      	cmp	r3, r2
 80164fa:	bfb8      	it	lt
 80164fc:	4613      	movlt	r3, r2
 80164fe:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
 8016500:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8016504:	2b00      	cmp	r3, #0
 8016506:	f000 825d 	beq.w	80169c4 <draw_full_border+0x6f0>
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 801650a:	68bb      	ldr	r3, [r7, #8]
 801650c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016510:	461a      	mov	r2, r3
 8016512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016516:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801651a:	1ad3      	subs	r3, r2, r3
 801651c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801651e:	4413      	add	r3, r2
 8016520:	66fb      	str	r3, [r7, #108]	; 0x6c

        fill_area.x1 = area_outer->x1;
 8016522:	68bb      	ldr	r3, [r7, #8]
 8016524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016528:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x2;
 801652a:	68bb      	ldr	r3, [r7, #8]
 801652c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016530:	853b      	strh	r3, [r7, #40]	; 0x28
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8016532:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016536:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801653a:	b29a      	uxth	r2, r3
 801653c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016540:	b29b      	uxth	r3, r3
 8016542:	4413      	add	r3, r2
 8016544:	b29b      	uxth	r3, r3
 8016546:	b21b      	sxth	r3, r3
 8016548:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = fill_area.y1;
 801654a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801654e:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 8016550:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016554:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016558:	e0d1      	b.n	80166fe <draw_full_border+0x42a>
            _lv_memset_ff(mask_buf, draw_area_w);
 801655a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801655e:	4619      	mov	r1, r3
 8016560:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016562:	f006 fcee 	bl	801cf42 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8016566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801656a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801656e:	b29a      	uxth	r2, r3
 8016570:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016574:	b29b      	uxth	r3, r3
 8016576:	4413      	add	r3, r2
 8016578:	b29b      	uxth	r3, r3
 801657a:	b219      	sxth	r1, r3
 801657c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016580:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016584:	b29a      	uxth	r2, r3
 8016586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801658a:	b29b      	uxth	r3, r3
 801658c:	4413      	add	r3, r2
 801658e:	b29b      	uxth	r3, r3
 8016590:	b21a      	sxth	r2, r3
 8016592:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016596:	b21b      	sxth	r3, r3
 8016598:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801659a:	f7fb f945 	bl	8011828 <lv_draw_mask_apply>
 801659e:	4603      	mov	r3, r0
 80165a0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            lv_area_t fill_area2;
            fill_area2.y1 = fill_area.y1;
 80165a4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80165a8:	83fb      	strh	r3, [r7, #30]
            fill_area2.y2 = fill_area.y2;
 80165aa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80165ae:	847b      	strh	r3, [r7, #34]	; 0x22

            fill_area2.x1 = area_outer->x1;
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165b6:	83bb      	strh	r3, [r7, #28]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 80165b8:	68bb      	ldr	r3, [r7, #8]
 80165ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165be:	b29a      	uxth	r2, r3
 80165c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80165c4:	b29b      	uxth	r3, r3
 80165c6:	4413      	add	r3, r2
 80165c8:	b29b      	uxth	r3, r3
 80165ca:	3b01      	subs	r3, #1
 80165cc:	b29b      	uxth	r3, r3
 80165ce:	b21b      	sxth	r3, r3
 80165d0:	843b      	strh	r3, [r7, #32]

            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 80165d2:	f107 011c 	add.w	r1, r7, #28
 80165d6:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80165da:	9302      	str	r3, [sp, #8]
 80165dc:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80165e0:	9301      	str	r3, [sp, #4]
 80165e2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80165e6:	9300      	str	r3, [sp, #0]
 80165e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80165ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f7f5 feec 	bl	800c3cc <_lv_blend_fill>

            /*Draw the top horizontal line*/
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 80165f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80165f8:	461a      	mov	r2, r3
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016600:	4619      	mov	r1, r3
 8016602:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8016606:	440b      	add	r3, r1
 8016608:	429a      	cmp	r2, r3
 801660a:	da25      	bge.n	8016658 <draw_full_border+0x384>
                fill_area2.x1 = area_outer->x1 + rout;
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016612:	b29a      	uxth	r2, r3
 8016614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016618:	b29b      	uxth	r3, r3
 801661a:	4413      	add	r3, r2
 801661c:	b29b      	uxth	r3, r3
 801661e:	b21b      	sxth	r3, r3
 8016620:	83bb      	strh	r3, [r7, #28]
                fill_area2.x2 = area_outer->x2 - rout;
 8016622:	68bb      	ldr	r3, [r7, #8]
 8016624:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016628:	b29a      	uxth	r2, r3
 801662a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801662e:	b29b      	uxth	r3, r3
 8016630:	1ad3      	subs	r3, r2, r3
 8016632:	b29b      	uxth	r3, r3
 8016634:	b21b      	sxth	r3, r3
 8016636:	843b      	strh	r3, [r7, #32]

                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 8016638:	f107 011c 	add.w	r1, r7, #28
 801663c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016640:	9302      	str	r3, [sp, #8]
 8016642:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016646:	9301      	str	r3, [sp, #4]
 8016648:	2301      	movs	r3, #1
 801664a:	9300      	str	r3, [sp, #0]
 801664c:	2300      	movs	r3, #0
 801664e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016652:	6878      	ldr	r0, [r7, #4]
 8016654:	f7f5 feba 	bl	800c3cc <_lv_blend_fill>
            }

            fill_area2.x1 = area_outer->x2 - rout + 1;
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801665e:	b29a      	uxth	r2, r3
 8016660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016664:	b29b      	uxth	r3, r3
 8016666:	1ad3      	subs	r3, r2, r3
 8016668:	b29b      	uxth	r3, r3
 801666a:	3301      	adds	r3, #1
 801666c:	b29b      	uxth	r3, r3
 801666e:	b21b      	sxth	r3, r3
 8016670:	83bb      	strh	r3, [r7, #28]
            fill_area2.x2 = area_outer->x2;
 8016672:	68bb      	ldr	r3, [r7, #8]
 8016674:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016678:	843b      	strh	r3, [r7, #32]

            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 801667a:	68bb      	ldr	r3, [r7, #8]
 801667c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016680:	461a      	mov	r2, r3
 8016682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016686:	1ad3      	subs	r3, r2, r3
 8016688:	1c5a      	adds	r2, r3, #1
 801668a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801668e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016692:	4619      	mov	r1, r3
 8016694:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016698:	440b      	add	r3, r1
 801669a:	1ad3      	subs	r3, r2, r3
 801669c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if(mask_ofs < 0) mask_ofs = 0;
 80166a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	da02      	bge.n	80166ae <draw_full_border+0x3da>
 80166a8:	2300      	movs	r3, #0
 80166aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 80166ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80166b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80166b4:	441a      	add	r2, r3
 80166b6:	f107 011c 	add.w	r1, r7, #28
 80166ba:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80166be:	9302      	str	r3, [sp, #8]
 80166c0:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80166c4:	9301      	str	r3, [sp, #4]
 80166c6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80166ca:	9300      	str	r3, [sp, #0]
 80166cc:	4613      	mov	r3, r2
 80166ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80166d2:	6878      	ldr	r0, [r7, #4]
 80166d4:	f7f5 fe7a 	bl	800c3cc <_lv_blend_fill>

            fill_area.y1++;
 80166d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80166dc:	b29b      	uxth	r3, r3
 80166de:	3301      	adds	r3, #1
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	b21b      	sxth	r3, r3
 80166e4:	84fb      	strh	r3, [r7, #38]	; 0x26
            fill_area.y2++;
 80166e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	3301      	adds	r3, #1
 80166ee:	b29b      	uxth	r3, r3
 80166f0:	b21b      	sxth	r3, r3
 80166f2:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 80166f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80166f8:	3301      	adds	r3, #1
 80166fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80166fe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016704:	429a      	cmp	r2, r3
 8016706:	f77f af28 	ble.w	801655a <draw_full_border+0x286>
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 801670a:	68bb      	ldr	r3, [r7, #8]
 801670c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016710:	461a      	mov	r2, r3
 8016712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016716:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801671a:	1ad2      	subs	r2, r2, r3
 801671c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801671e:	1ad3      	subs	r3, r2, r3
 8016720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 8016724:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801672a:	429a      	cmp	r2, r3
 801672c:	dc03      	bgt.n	8016736 <draw_full_border+0x462>
 801672e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016730:	3301      	adds	r3, #1
 8016732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 8016736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801673a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801673e:	b29a      	uxth	r2, r3
 8016740:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016744:	b29b      	uxth	r3, r3
 8016746:	4413      	add	r3, r2
 8016748:	b29b      	uxth	r3, r3
 801674a:	b21b      	sxth	r3, r3
 801674c:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = fill_area.y1;
 801674e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016752:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 8016754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801675c:	e0d1      	b.n	8016902 <draw_full_border+0x62e>
            _lv_memset_ff(mask_buf, draw_area_w);
 801675e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016762:	4619      	mov	r1, r3
 8016764:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016766:	f006 fbec 	bl	801cf42 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 801676a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801676e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016772:	b29a      	uxth	r2, r3
 8016774:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016778:	b29b      	uxth	r3, r3
 801677a:	4413      	add	r3, r2
 801677c:	b29b      	uxth	r3, r3
 801677e:	b219      	sxth	r1, r3
 8016780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016784:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016788:	b29a      	uxth	r2, r3
 801678a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801678e:	b29b      	uxth	r3, r3
 8016790:	4413      	add	r3, r2
 8016792:	b29b      	uxth	r3, r3
 8016794:	b21a      	sxth	r2, r3
 8016796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801679a:	b21b      	sxth	r3, r3
 801679c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801679e:	f7fb f843 	bl	8011828 <lv_draw_mask_apply>
 80167a2:	4603      	mov	r3, r0
 80167a4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            lv_area_t fill_area2;
            fill_area2.x1 = area_outer->x1;
 80167a8:	68bb      	ldr	r3, [r7, #8]
 80167aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167ae:	82bb      	strh	r3, [r7, #20]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167b6:	b29a      	uxth	r2, r3
 80167b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80167bc:	b29b      	uxth	r3, r3
 80167be:	4413      	add	r3, r2
 80167c0:	b29b      	uxth	r3, r3
 80167c2:	3b01      	subs	r3, #1
 80167c4:	b29b      	uxth	r3, r3
 80167c6:	b21b      	sxth	r3, r3
 80167c8:	833b      	strh	r3, [r7, #24]
            fill_area2.y1 = fill_area.y1;
 80167ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80167ce:	82fb      	strh	r3, [r7, #22]
            fill_area2.y2 = fill_area.y2;
 80167d0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80167d4:	837b      	strh	r3, [r7, #26]

            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 80167d6:	f107 0114 	add.w	r1, r7, #20
 80167da:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80167de:	9302      	str	r3, [sp, #8]
 80167e0:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80167e4:	9301      	str	r3, [sp, #4]
 80167e6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80167ea:	9300      	str	r3, [sp, #0]
 80167ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80167ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f7f5 fdea 	bl	800c3cc <_lv_blend_fill>

            /*Draw the bottom horizontal line*/
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 80167f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80167fc:	461a      	mov	r2, r3
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016804:	4619      	mov	r1, r3
 8016806:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801680a:	1acb      	subs	r3, r1, r3
 801680c:	429a      	cmp	r2, r3
 801680e:	dd25      	ble.n	801685c <draw_full_border+0x588>
                fill_area2.x1 = area_outer->x1 + rout;
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016816:	b29a      	uxth	r2, r3
 8016818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801681c:	b29b      	uxth	r3, r3
 801681e:	4413      	add	r3, r2
 8016820:	b29b      	uxth	r3, r3
 8016822:	b21b      	sxth	r3, r3
 8016824:	82bb      	strh	r3, [r7, #20]
                fill_area2.x2 = area_outer->x2 - rout;
 8016826:	68bb      	ldr	r3, [r7, #8]
 8016828:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801682c:	b29a      	uxth	r2, r3
 801682e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016832:	b29b      	uxth	r3, r3
 8016834:	1ad3      	subs	r3, r2, r3
 8016836:	b29b      	uxth	r3, r3
 8016838:	b21b      	sxth	r3, r3
 801683a:	833b      	strh	r3, [r7, #24]

                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 801683c:	f107 0114 	add.w	r1, r7, #20
 8016840:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016844:	9302      	str	r3, [sp, #8]
 8016846:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 801684a:	9301      	str	r3, [sp, #4]
 801684c:	2301      	movs	r3, #1
 801684e:	9300      	str	r3, [sp, #0]
 8016850:	2300      	movs	r3, #0
 8016852:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016856:	6878      	ldr	r0, [r7, #4]
 8016858:	f7f5 fdb8 	bl	800c3cc <_lv_blend_fill>
            }
            fill_area2.x1 = area_outer->x2 - rout + 1;
 801685c:	68bb      	ldr	r3, [r7, #8]
 801685e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016862:	b29a      	uxth	r2, r3
 8016864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016868:	b29b      	uxth	r3, r3
 801686a:	1ad3      	subs	r3, r2, r3
 801686c:	b29b      	uxth	r3, r3
 801686e:	3301      	adds	r3, #1
 8016870:	b29b      	uxth	r3, r3
 8016872:	b21b      	sxth	r3, r3
 8016874:	82bb      	strh	r3, [r7, #20]
            fill_area2.x2 = area_outer->x2;
 8016876:	68bb      	ldr	r3, [r7, #8]
 8016878:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801687c:	833b      	strh	r3, [r7, #24]

            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 801687e:	68bb      	ldr	r3, [r7, #8]
 8016880:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016884:	461a      	mov	r2, r3
 8016886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801688a:	1ad3      	subs	r3, r2, r3
 801688c:	1c5a      	adds	r2, r3, #1
 801688e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016892:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016896:	4619      	mov	r1, r3
 8016898:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801689c:	440b      	add	r3, r1
 801689e:	1ad3      	subs	r3, r2, r3
 80168a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            if(mask_ofs < 0) mask_ofs = 0;
 80168a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	da02      	bge.n	80168b2 <draw_full_border+0x5de>
 80168ac:	2300      	movs	r3, #0
 80168ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 80168b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80168b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80168b8:	441a      	add	r2, r3
 80168ba:	f107 0114 	add.w	r1, r7, #20
 80168be:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80168c2:	9302      	str	r3, [sp, #8]
 80168c4:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80168c8:	9301      	str	r3, [sp, #4]
 80168ca:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80168ce:	9300      	str	r3, [sp, #0]
 80168d0:	4613      	mov	r3, r2
 80168d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f7f5 fd78 	bl	800c3cc <_lv_blend_fill>

            fill_area.y1++;
 80168dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80168e0:	b29b      	uxth	r3, r3
 80168e2:	3301      	adds	r3, #1
 80168e4:	b29b      	uxth	r3, r3
 80168e6:	b21b      	sxth	r3, r3
 80168e8:	84fb      	strh	r3, [r7, #38]	; 0x26
            fill_area.y2++;
 80168ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80168ee:	b29b      	uxth	r3, r3
 80168f0:	3301      	adds	r3, #1
 80168f2:	b29b      	uxth	r3, r3
 80168f4:	b21b      	sxth	r3, r3
 80168f6:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 80168f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80168fc:	3301      	adds	r3, #1
 80168fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016902:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8016906:	461a      	mov	r2, r3
 8016908:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801690c:	4293      	cmp	r3, r2
 801690e:	f77f af26 	ble.w	801675e <draw_full_border+0x48a>
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 8016912:	68bb      	ldr	r3, [r7, #8]
 8016914:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016918:	b29a      	uxth	r2, r3
 801691a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801691c:	b29b      	uxth	r3, r3
 801691e:	4413      	add	r3, r2
 8016920:	b29b      	uxth	r3, r3
 8016922:	3301      	adds	r3, #1
 8016924:	b29b      	uxth	r3, r3
 8016926:	b21b      	sxth	r3, r3
 8016928:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016930:	b29a      	uxth	r2, r3
 8016932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016934:	b29b      	uxth	r3, r3
 8016936:	1ad3      	subs	r3, r2, r3
 8016938:	b29b      	uxth	r3, r3
 801693a:	3b01      	subs	r3, #1
 801693c:	b29b      	uxth	r3, r3
 801693e:	b21b      	sxth	r3, r3
 8016940:	857b      	strh	r3, [r7, #42]	; 0x2a

        fill_area.x1 = area_outer->x1;
 8016942:	68bb      	ldr	r3, [r7, #8]
 8016944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016948:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x1 + border_width - 1;
 801694a:	68bb      	ldr	r3, [r7, #8]
 801694c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016950:	b29a      	uxth	r2, r3
 8016952:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016956:	4413      	add	r3, r2
 8016958:	b29b      	uxth	r3, r3
 801695a:	3b01      	subs	r3, #1
 801695c:	b29b      	uxth	r3, r3
 801695e:	b21b      	sxth	r3, r3
 8016960:	853b      	strh	r3, [r7, #40]	; 0x28
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 8016962:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8016966:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 801696a:	9302      	str	r3, [sp, #8]
 801696c:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016970:	9301      	str	r3, [sp, #4]
 8016972:	2301      	movs	r3, #1
 8016974:	9300      	str	r3, [sp, #0]
 8016976:	2300      	movs	r3, #0
 8016978:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f7f5 fd25 	bl	800c3cc <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
 8016982:	68bb      	ldr	r3, [r7, #8]
 8016984:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016988:	b29a      	uxth	r2, r3
 801698a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801698e:	1ad3      	subs	r3, r2, r3
 8016990:	b29b      	uxth	r3, r3
 8016992:	3301      	adds	r3, #1
 8016994:	b29b      	uxth	r3, r3
 8016996:	b21b      	sxth	r3, r3
 8016998:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x2;
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169a0:	853b      	strh	r3, [r7, #40]	; 0x28

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 80169a2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80169a6:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80169aa:	9302      	str	r3, [sp, #8]
 80169ac:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80169b0:	9301      	str	r3, [sp, #4]
 80169b2:	2301      	movs	r3, #1
 80169b4:	9300      	str	r3, [sp, #0]
 80169b6:	2300      	movs	r3, #0
 80169b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f7f5 fd05 	bl	800c3cc <_lv_blend_fill>
 80169c2:	e06b      	b.n	8016a9c <draw_full_border+0x7c8>
    }
    /*Process line by line if there is other mask too*/
    else {
        fill_area.x1 = area_outer->x1;
 80169c4:	68bb      	ldr	r3, [r7, #8]
 80169c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169ca:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x2;
 80169cc:	68bb      	ldr	r3, [r7, #8]
 80169ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169d2:	853b      	strh	r3, [r7, #40]	; 0x28
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 80169d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80169d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80169dc:	b29a      	uxth	r2, r3
 80169de:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	4413      	add	r3, r2
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	b21b      	sxth	r3, r3
 80169ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = fill_area.y1;
 80169ec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80169f0:	857b      	strh	r3, [r7, #42]	; 0x2a

        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80169f2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80169f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80169fa:	e048      	b.n	8016a8e <draw_full_border+0x7ba>
            _lv_memset_ff(mask_buf, draw_area_w);
 80169fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016a00:	4619      	mov	r1, r3
 8016a02:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016a04:	f006 fa9d 	bl	801cf42 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8016a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a0c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016a10:	b29a      	uxth	r2, r3
 8016a12:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016a16:	b29b      	uxth	r3, r3
 8016a18:	4413      	add	r3, r2
 8016a1a:	b29b      	uxth	r3, r3
 8016a1c:	b219      	sxth	r1, r3
 8016a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a22:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016a26:	b29a      	uxth	r2, r3
 8016a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016a2c:	b29b      	uxth	r3, r3
 8016a2e:	4413      	add	r3, r2
 8016a30:	b29b      	uxth	r3, r3
 8016a32:	b21a      	sxth	r2, r3
 8016a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016a38:	b21b      	sxth	r3, r3
 8016a3a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016a3c:	f7fa fef4 	bl	8011828 <lv_draw_mask_apply>
 8016a40:	4603      	mov	r3, r0
 8016a42:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 8016a46:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8016a4a:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016a4e:	9302      	str	r3, [sp, #8]
 8016a50:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016a54:	9301      	str	r3, [sp, #4]
 8016a56:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016a5a:	9300      	str	r3, [sp, #0]
 8016a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016a5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016a62:	6878      	ldr	r0, [r7, #4]
 8016a64:	f7f5 fcb2 	bl	800c3cc <_lv_blend_fill>
            fill_area.y1++;
 8016a68:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016a6c:	b29b      	uxth	r3, r3
 8016a6e:	3301      	adds	r3, #1
 8016a70:	b29b      	uxth	r3, r3
 8016a72:	b21b      	sxth	r3, r3
 8016a74:	84fb      	strh	r3, [r7, #38]	; 0x26
            fill_area.y2++;
 8016a76:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	b21b      	sxth	r3, r3
 8016a82:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8016a84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016a88:	3301      	adds	r3, #1
 8016a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016a8e:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8016a92:	461a      	mov	r2, r3
 8016a94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016a98:	4293      	cmp	r3, r2
 8016a9a:	ddaf      	ble.n	80169fc <draw_full_border+0x728>

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
 8016a9c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f7fa ff05 	bl	80118b0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 8016aa6:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f7fa ff00 	bl	80118b0 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 8016ab0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016ab2:	f005 fe9b 	bl	801c7ec <_lv_mem_buf_release>
 8016ab6:	e000      	b.n	8016aba <draw_full_border+0x7e6>
    if(is_common == false) return;
 8016ab8:	bf00      	nop
}
 8016aba:	37d0      	adds	r7, #208	; 0xd0
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}

08016ac0 <lv_color_mix>:
{
 8016ac0:	b480      	push	{r7}
 8016ac2:	b087      	sub	sp, #28
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	60f8      	str	r0, [r7, #12]
 8016ac8:	60b9      	str	r1, [r7, #8]
 8016aca:	4613      	mov	r3, r2
 8016acc:	71fb      	strb	r3, [r7, #7]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016ace:	7bbb      	ldrb	r3, [r7, #14]
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	79fb      	ldrb	r3, [r7, #7]
 8016ad4:	fb03 f202 	mul.w	r2, r3, r2
 8016ad8:	7abb      	ldrb	r3, [r7, #10]
 8016ada:	4619      	mov	r1, r3
 8016adc:	79fb      	ldrb	r3, [r7, #7]
 8016ade:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016ae2:	fb03 f301 	mul.w	r3, r3, r1
 8016ae6:	4413      	add	r3, r2
 8016ae8:	461a      	mov	r2, r3
 8016aea:	4613      	mov	r3, r2
 8016aec:	021b      	lsls	r3, r3, #8
 8016aee:	4413      	add	r3, r2
 8016af0:	01db      	lsls	r3, r3, #7
 8016af2:	4413      	add	r3, r2
 8016af4:	0ddb      	lsrs	r3, r3, #23
 8016af6:	b2db      	uxtb	r3, r3
 8016af8:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8016afa:	7b7b      	ldrb	r3, [r7, #13]
 8016afc:	461a      	mov	r2, r3
 8016afe:	79fb      	ldrb	r3, [r7, #7]
 8016b00:	fb03 f202 	mul.w	r2, r3, r2
 8016b04:	7a7b      	ldrb	r3, [r7, #9]
 8016b06:	4619      	mov	r1, r3
 8016b08:	79fb      	ldrb	r3, [r7, #7]
 8016b0a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016b0e:	fb03 f301 	mul.w	r3, r3, r1
 8016b12:	4413      	add	r3, r2
 8016b14:	461a      	mov	r2, r3
 8016b16:	4613      	mov	r3, r2
 8016b18:	021b      	lsls	r3, r3, #8
 8016b1a:	4413      	add	r3, r2
 8016b1c:	01db      	lsls	r3, r3, #7
 8016b1e:	4413      	add	r3, r2
 8016b20:	0ddb      	lsrs	r3, r3, #23
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8016b26:	7b3b      	ldrb	r3, [r7, #12]
 8016b28:	461a      	mov	r2, r3
 8016b2a:	79fb      	ldrb	r3, [r7, #7]
 8016b2c:	fb03 f202 	mul.w	r2, r3, r2
 8016b30:	7a3b      	ldrb	r3, [r7, #8]
 8016b32:	4619      	mov	r1, r3
 8016b34:	79fb      	ldrb	r3, [r7, #7]
 8016b36:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016b3a:	fb03 f301 	mul.w	r3, r3, r1
 8016b3e:	4413      	add	r3, r2
 8016b40:	461a      	mov	r2, r3
 8016b42:	4613      	mov	r3, r2
 8016b44:	021b      	lsls	r3, r3, #8
 8016b46:	4413      	add	r3, r2
 8016b48:	01db      	lsls	r3, r3, #7
 8016b4a:	4413      	add	r3, r2
 8016b4c:	0ddb      	lsrs	r3, r3, #23
 8016b4e:	b2db      	uxtb	r3, r3
 8016b50:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 8016b52:	23ff      	movs	r3, #255	; 0xff
 8016b54:	75fb      	strb	r3, [r7, #23]
    return ret;
 8016b56:	697b      	ldr	r3, [r7, #20]
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	371c      	adds	r7, #28
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b62:	4770      	bx	lr

08016b64 <_lv_memcpy_small>:
{
 8016b64:	b480      	push	{r7}
 8016b66:	b087      	sub	sp, #28
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	60f8      	str	r0, [r7, #12]
 8016b6c:	60b9      	str	r1, [r7, #8]
 8016b6e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	613b      	str	r3, [r7, #16]
    while(len) {
 8016b78:	e00c      	b.n	8016b94 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	781a      	ldrb	r2, [r3, #0]
 8016b7e:	697b      	ldr	r3, [r7, #20]
 8016b80:	701a      	strb	r2, [r3, #0]
        d8++;
 8016b82:	697b      	ldr	r3, [r7, #20]
 8016b84:	3301      	adds	r3, #1
 8016b86:	617b      	str	r3, [r7, #20]
        s8++;
 8016b88:	693b      	ldr	r3, [r7, #16]
 8016b8a:	3301      	adds	r3, #1
 8016b8c:	613b      	str	r3, [r7, #16]
        len--;
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	3b01      	subs	r3, #1
 8016b92:	607b      	str	r3, [r7, #4]
    while(len) {
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d1ef      	bne.n	8016b7a <_lv_memcpy_small+0x16>
    return dst;
 8016b9a:	68fb      	ldr	r3, [r7, #12]
}
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	371c      	adds	r7, #28
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba6:	4770      	bx	lr

08016ba8 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b090      	sub	sp, #64	; 0x40
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	60f8      	str	r0, [r7, #12]
 8016bb0:	607b      	str	r3, [r7, #4]
 8016bb2:	460b      	mov	r3, r1
 8016bb4:	817b      	strh	r3, [r7, #10]
 8016bb6:	4613      	mov	r3, r2
 8016bb8:	813b      	strh	r3, [r7, #8]
    lv_color_t p_color = LV_COLOR_BLACK;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	753b      	strb	r3, [r7, #20]
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	757b      	strb	r3, [r7, #21]
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	75bb      	strb	r3, [r7, #22]
 8016bc6:	23ff      	movs	r3, #255	; 0xff
 8016bc8:	75fb      	strb	r3, [r7, #23]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	689b      	ldr	r3, [r3, #8]
 8016bce:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	781b      	ldrb	r3, [r3, #0]
 8016bd4:	f003 031f 	and.w	r3, r3, #31
 8016bd8:	b2db      	uxtb	r3, r3
 8016bda:	2b04      	cmp	r3, #4
 8016bdc:	d00d      	beq.n	8016bfa <lv_img_buf_get_px_color+0x52>
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	781b      	ldrb	r3, [r3, #0]
 8016be2:	f003 031f 	and.w	r3, r3, #31
 8016be6:	b2db      	uxtb	r3, r3
 8016be8:	2b06      	cmp	r3, #6
 8016bea:	d006      	beq.n	8016bfa <lv_img_buf_get_px_color+0x52>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	781b      	ldrb	r3, [r3, #0]
 8016bf0:	f003 031f 	and.w	r3, r3, #31
 8016bf4:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8016bf6:	2b05      	cmp	r3, #5
 8016bf8:	d127      	bne.n	8016c4a <lv_img_buf_get_px_color+0xa2>
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	781b      	ldrb	r3, [r3, #0]
 8016bfe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8016c02:	b2db      	uxtb	r3, r3
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7f7 f99f 	bl	800df48 <lv_img_cf_get_px_size>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	08db      	lsrs	r3, r3, #3
 8016c0e:	77fb      	strb	r3, [r7, #31]
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016c18:	b29b      	uxth	r3, r3
 8016c1a:	461a      	mov	r2, r3
 8016c1c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8016c20:	fb03 f202 	mul.w	r2, r3, r2
 8016c24:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016c28:	4413      	add	r3, r2
 8016c2a:	7ffa      	ldrb	r2, [r7, #31]
 8016c2c:	fb02 f303 	mul.w	r3, r2, r3
 8016c30:	61bb      	str	r3, [r7, #24]
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 8016c32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016c34:	69bb      	ldr	r3, [r7, #24]
 8016c36:	18d1      	adds	r1, r2, r3
 8016c38:	f107 0314 	add.w	r3, r7, #20
 8016c3c:	2204      	movs	r2, #4
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f7ff ff90 	bl	8016b64 <_lv_memcpy_small>
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
 8016c44:	23ff      	movs	r3, #255	; 0xff
 8016c46:	75fb      	strb	r3, [r7, #23]
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8016c48:	e0eb      	b.n	8016e22 <lv_img_buf_get_px_color+0x27a>
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	781b      	ldrb	r3, [r3, #0]
 8016c4e:	f003 031f 	and.w	r3, r3, #31
 8016c52:	b2db      	uxtb	r3, r3
 8016c54:	2b07      	cmp	r3, #7
 8016c56:	d131      	bne.n	8016cbc <lv_img_buf_get_px_color+0x114>
        buf_u8 += 4 * 2;
 8016c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c5a:	3308      	adds	r3, #8
 8016c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t bit = x & 0x7;
 8016c5e:	897b      	ldrh	r3, [r7, #10]
 8016c60:	b2db      	uxtb	r3, r3
 8016c62:	f003 0307 	and.w	r3, r3, #7
 8016c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        x           = x >> 3;
 8016c6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016c6e:	10db      	asrs	r3, r3, #3
 8016c70:	817b      	strh	r3, [r7, #10]

        /* Get the current pixel.
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	3307      	adds	r3, #7
 8016c7e:	10db      	asrs	r3, r3, #3
 8016c80:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016c84:	fb02 f203 	mul.w	r2, r2, r3
 8016c88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016c8c:	4413      	add	r3, r2
 8016c8e:	623b      	str	r3, [r7, #32]
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8016c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016c92:	6a3b      	ldr	r3, [r7, #32]
 8016c94:	4413      	add	r3, r2
 8016c96:	781b      	ldrb	r3, [r3, #0]
 8016c98:	4619      	mov	r1, r3
 8016c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c9e:	f1c3 0307 	rsb	r3, r3, #7
 8016ca2:	2201      	movs	r2, #1
 8016ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8016ca8:	ea01 0203 	and.w	r2, r1, r3
 8016cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016cb0:	f1c3 0307 	rsb	r3, r3, #7
 8016cb4:	fa42 f303 	asr.w	r3, r2, r3
 8016cb8:	617b      	str	r3, [r7, #20]
 8016cba:	e0b2      	b.n	8016e22 <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	781b      	ldrb	r3, [r3, #0]
 8016cc0:	f003 031f 	and.w	r3, r3, #31
 8016cc4:	b2db      	uxtb	r3, r3
 8016cc6:	2b08      	cmp	r3, #8
 8016cc8:	d133      	bne.n	8016d32 <lv_img_buf_get_px_color+0x18a>
        buf_u8 += 4 * 4;
 8016cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ccc:	3310      	adds	r3, #16
 8016cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t bit = (x & 0x3) * 2;
 8016cd0:	897b      	ldrh	r3, [r7, #10]
 8016cd2:	b2db      	uxtb	r3, r3
 8016cd4:	f003 0303 	and.w	r3, r3, #3
 8016cd8:	b2db      	uxtb	r3, r3
 8016cda:	005b      	lsls	r3, r3, #1
 8016cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        x           = x >> 2;
 8016ce0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016ce4:	109b      	asrs	r3, r3, #2
 8016ce6:	817b      	strh	r3, [r7, #10]

        /* Get the current pixel.
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016cf0:	b29b      	uxth	r3, r3
 8016cf2:	3303      	adds	r3, #3
 8016cf4:	109b      	asrs	r3, r3, #2
 8016cf6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016cfa:	fb02 f203 	mul.w	r2, r2, r3
 8016cfe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016d02:	4413      	add	r3, r2
 8016d04:	62bb      	str	r3, [r7, #40]	; 0x28
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 8016d06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d0a:	4413      	add	r3, r2
 8016d0c:	781b      	ldrb	r3, [r3, #0]
 8016d0e:	4619      	mov	r1, r3
 8016d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d14:	f1c3 0306 	rsb	r3, r3, #6
 8016d18:	2203      	movs	r2, #3
 8016d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8016d1e:	ea01 0203 	and.w	r2, r1, r3
 8016d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d26:	f1c3 0306 	rsb	r3, r3, #6
 8016d2a:	fa42 f303 	asr.w	r3, r2, r3
 8016d2e:	617b      	str	r3, [r7, #20]
 8016d30:	e077      	b.n	8016e22 <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	781b      	ldrb	r3, [r3, #0]
 8016d36:	f003 031f 	and.w	r3, r3, #31
 8016d3a:	b2db      	uxtb	r3, r3
 8016d3c:	2b09      	cmp	r3, #9
 8016d3e:	d133      	bne.n	8016da8 <lv_img_buf_get_px_color+0x200>
        buf_u8 += 4 * 16;
 8016d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d42:	3340      	adds	r3, #64	; 0x40
 8016d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t bit = (x & 0x1) * 4;
 8016d46:	897b      	ldrh	r3, [r7, #10]
 8016d48:	b2db      	uxtb	r3, r3
 8016d4a:	f003 0301 	and.w	r3, r3, #1
 8016d4e:	b2db      	uxtb	r3, r3
 8016d50:	009b      	lsls	r3, r3, #2
 8016d52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        x           = x >> 1;
 8016d56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016d5a:	105b      	asrs	r3, r3, #1
 8016d5c:	817b      	strh	r3, [r7, #10]

        /* Get the current pixel.
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016d66:	b29b      	uxth	r3, r3
 8016d68:	3301      	adds	r3, #1
 8016d6a:	105b      	asrs	r3, r3, #1
 8016d6c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016d70:	fb02 f203 	mul.w	r2, r2, r3
 8016d74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016d78:	4413      	add	r3, r2
 8016d7a:	633b      	str	r3, [r7, #48]	; 0x30
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8016d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d80:	4413      	add	r3, r2
 8016d82:	781b      	ldrb	r3, [r3, #0]
 8016d84:	4619      	mov	r1, r3
 8016d86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d8a:	f1c3 0304 	rsb	r3, r3, #4
 8016d8e:	220f      	movs	r2, #15
 8016d90:	fa02 f303 	lsl.w	r3, r2, r3
 8016d94:	ea01 0203 	and.w	r2, r1, r3
 8016d98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d9c:	f1c3 0304 	rsb	r3, r3, #4
 8016da0:	fa42 f303 	asr.w	r3, r2, r3
 8016da4:	617b      	str	r3, [r7, #20]
 8016da6:	e03c      	b.n	8016e22 <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	781b      	ldrb	r3, [r3, #0]
 8016dac:	f003 031f 	and.w	r3, r3, #31
 8016db0:	b2db      	uxtb	r3, r3
 8016db2:	2b0a      	cmp	r3, #10
 8016db4:	d117      	bne.n	8016de6 <lv_img_buf_get_px_color+0x23e>
        buf_u8 += 4 * 256;
 8016db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint32_t px  = dsc->header.w * y + x;
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016dc6:	b29b      	uxth	r3, r3
 8016dc8:	461a      	mov	r2, r3
 8016dca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8016dce:	fb03 f202 	mul.w	r2, r3, r2
 8016dd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016dd6:	4413      	add	r3, r2
 8016dd8:	63bb      	str	r3, [r7, #56]	; 0x38
        p_color.full = buf_u8[px];
 8016dda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dde:	4413      	add	r3, r2
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	617b      	str	r3, [r7, #20]
 8016de4:	e01d      	b.n	8016e22 <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	781b      	ldrb	r3, [r3, #0]
 8016dea:	f003 031f 	and.w	r3, r3, #31
 8016dee:	b2db      	uxtb	r3, r3
 8016df0:	2b0b      	cmp	r3, #11
 8016df2:	d014      	beq.n	8016e1e <lv_img_buf_get_px_color+0x276>
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	781b      	ldrb	r3, [r3, #0]
 8016df8:	f003 031f 	and.w	r3, r3, #31
 8016dfc:	b2db      	uxtb	r3, r3
 8016dfe:	2b0c      	cmp	r3, #12
 8016e00:	d00d      	beq.n	8016e1e <lv_img_buf_get_px_color+0x276>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	781b      	ldrb	r3, [r3, #0]
 8016e06:	f003 031f 	and.w	r3, r3, #31
 8016e0a:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8016e0c:	2b0d      	cmp	r3, #13
 8016e0e:	d006      	beq.n	8016e1e <lv_img_buf_get_px_color+0x276>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	781b      	ldrb	r3, [r3, #0]
 8016e14:	f003 031f 	and.w	r3, r3, #31
 8016e18:	b2db      	uxtb	r3, r3
 8016e1a:	2b0e      	cmp	r3, #14
 8016e1c:	d101      	bne.n	8016e22 <lv_img_buf_get_px_color+0x27a>
        p_color = color;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	617b      	str	r3, [r7, #20]
    }
    return p_color;
 8016e22:	697b      	ldr	r3, [r7, #20]
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3740      	adds	r7, #64	; 0x40
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}

08016e2c <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 8016e2c:	b490      	push	{r4, r7}
 8016e2e:	b092      	sub	sp, #72	; 0x48
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
 8016e34:	460b      	mov	r3, r1
 8016e36:	807b      	strh	r3, [r7, #2]
 8016e38:	4613      	mov	r3, r2
 8016e3a:	803b      	strh	r3, [r7, #0]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	689b      	ldr	r3, [r3, #8]
 8016e40:	647b      	str	r3, [r7, #68]	; 0x44

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	781b      	ldrb	r3, [r3, #0]
 8016e46:	f003 031f 	and.w	r3, r3, #31
 8016e4a:	b2db      	uxtb	r3, r3
 8016e4c:	2b05      	cmp	r3, #5
 8016e4e:	d114      	bne.n	8016e7a <lv_img_buf_get_px_alpha+0x4e>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016e58:	b29b      	uxth	r3, r3
 8016e5a:	461a      	mov	r2, r3
 8016e5c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016e60:	fb03 f202 	mul.w	r2, r3, r2
 8016e64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016e68:	4413      	add	r3, r2
 8016e6a:	009b      	lsls	r3, r3, #2
 8016e6c:	623b      	str	r3, [r7, #32]
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8016e6e:	6a3b      	ldr	r3, [r7, #32]
 8016e70:	3303      	adds	r3, #3
 8016e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e74:	4413      	add	r3, r2
 8016e76:	781b      	ldrb	r3, [r3, #0]
 8016e78:	e0e1      	b.n	801703e <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	781b      	ldrb	r3, [r3, #0]
 8016e7e:	f003 031f 	and.w	r3, r3, #31
 8016e82:	b2db      	uxtb	r3, r3
 8016e84:	2b0b      	cmp	r3, #11
 8016e86:	d136      	bne.n	8016ef6 <lv_img_buf_get_px_alpha+0xca>
        uint8_t bit = x & 0x7;
 8016e88:	887b      	ldrh	r3, [r7, #2]
 8016e8a:	b2db      	uxtb	r3, r3
 8016e8c:	f003 0307 	and.w	r3, r3, #7
 8016e90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        x           = x >> 3;
 8016e94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016e98:	10db      	asrs	r3, r3, #3
 8016e9a:	807b      	strh	r3, [r7, #2]

        /* Get the current pixel.
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016ea4:	b29b      	uxth	r3, r3
 8016ea6:	3307      	adds	r3, #7
 8016ea8:	10db      	asrs	r3, r3, #3
 8016eaa:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016eae:	fb02 f203 	mul.w	r2, r2, r3
 8016eb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016eb6:	4413      	add	r3, r2
 8016eb8:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8016eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ebe:	4413      	add	r3, r2
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	4619      	mov	r1, r3
 8016ec4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8016ec8:	f1c3 0307 	rsb	r3, r3, #7
 8016ecc:	2201      	movs	r2, #1
 8016ece:	fa02 f303 	lsl.w	r3, r2, r3
 8016ed2:	ea01 0203 	and.w	r2, r1, r3
 8016ed6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8016eda:	f1c3 0307 	rsb	r3, r3, #7
 8016ede:	fa42 f303 	asr.w	r3, r2, r3
 8016ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 8016ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d001      	beq.n	8016ef2 <lv_img_buf_get_px_alpha+0xc6>
 8016eee:	2300      	movs	r3, #0
 8016ef0:	e0a5      	b.n	801703e <lv_img_buf_get_px_alpha+0x212>
 8016ef2:	23ff      	movs	r3, #255	; 0xff
 8016ef4:	e0a3      	b.n	801703e <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	781b      	ldrb	r3, [r3, #0]
 8016efa:	f003 031f 	and.w	r3, r3, #31
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	2b0c      	cmp	r3, #12
 8016f02:	d13b      	bne.n	8016f7c <lv_img_buf_get_px_alpha+0x150>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8016f04:	4b50      	ldr	r3, [pc, #320]	; (8017048 <lv_img_buf_get_px_alpha+0x21c>)
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	61fb      	str	r3, [r7, #28]

        uint8_t bit = (x & 0x3) * 2;
 8016f0a:	887b      	ldrh	r3, [r7, #2]
 8016f0c:	b2db      	uxtb	r3, r3
 8016f0e:	f003 0303 	and.w	r3, r3, #3
 8016f12:	b2db      	uxtb	r3, r3
 8016f14:	005b      	lsls	r3, r3, #1
 8016f16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        x           = x >> 2;
 8016f1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016f1e:	109b      	asrs	r3, r3, #2
 8016f20:	807b      	strh	r3, [r7, #2]

        /* Get the current pixel.
         * dsc->header.w + 4 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016f2a:	b29b      	uxth	r3, r3
 8016f2c:	3303      	adds	r3, #3
 8016f2e:	109b      	asrs	r3, r3, #2
 8016f30:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016f34:	fb02 f203 	mul.w	r2, r2, r3
 8016f38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016f3c:	4413      	add	r3, r2
 8016f3e:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 8016f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f44:	4413      	add	r3, r2
 8016f46:	781b      	ldrb	r3, [r3, #0]
 8016f48:	4619      	mov	r1, r3
 8016f4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016f4e:	f1c3 0306 	rsb	r3, r3, #6
 8016f52:	2203      	movs	r2, #3
 8016f54:	fa02 f303 	lsl.w	r3, r2, r3
 8016f58:	ea01 0203 	and.w	r2, r1, r3
 8016f5c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016f60:	f1c3 0306 	rsb	r3, r3, #6
 8016f64:	fa42 f303 	asr.w	r3, r2, r3
 8016f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        return opa_table[px_opa];
 8016f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016f74:	4413      	add	r3, r2
 8016f76:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8016f7a:	e060      	b.n	801703e <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	781b      	ldrb	r3, [r3, #0]
 8016f80:	f003 031f 	and.w	r3, r3, #31
 8016f84:	b2db      	uxtb	r3, r3
 8016f86:	2b0d      	cmp	r3, #13
 8016f88:	d13e      	bne.n	8017008 <lv_img_buf_get_px_alpha+0x1dc>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 8016f8a:	4b30      	ldr	r3, [pc, #192]	; (801704c <lv_img_buf_get_px_alpha+0x220>)
 8016f8c:	f107 040c 	add.w	r4, r7, #12
 8016f90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                       68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                      };

        uint8_t bit = (x & 0x1) * 4;
 8016f96:	887b      	ldrh	r3, [r7, #2]
 8016f98:	b2db      	uxtb	r3, r3
 8016f9a:	f003 0301 	and.w	r3, r3, #1
 8016f9e:	b2db      	uxtb	r3, r3
 8016fa0:	009b      	lsls	r3, r3, #2
 8016fa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        x           = x >> 1;
 8016fa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016faa:	105b      	asrs	r3, r3, #1
 8016fac:	807b      	strh	r3, [r7, #2]

        /* Get the current pixel.
         * dsc->header.w + 1 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016fb6:	b29b      	uxth	r3, r3
 8016fb8:	3301      	adds	r3, #1
 8016fba:	105b      	asrs	r3, r3, #1
 8016fbc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016fc0:	fb02 f203 	mul.w	r2, r2, r3
 8016fc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016fc8:	4413      	add	r3, r2
 8016fca:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8016fcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fd0:	4413      	add	r3, r2
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	4619      	mov	r1, r3
 8016fd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016fda:	f1c3 0304 	rsb	r3, r3, #4
 8016fde:	220f      	movs	r2, #15
 8016fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8016fe4:	ea01 0203 	and.w	r2, r1, r3
 8016fe8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016fec:	f1c3 0304 	rsb	r3, r3, #4
 8016ff0:	fa42 f303 	asr.w	r3, r2, r3
 8016ff4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        return opa_table[px_opa];
 8016ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016ffc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017000:	4413      	add	r3, r2
 8017002:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8017006:	e01a      	b.n	801703e <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	f003 031f 	and.w	r3, r3, #31
 8017010:	b2db      	uxtb	r3, r3
 8017012:	2b0e      	cmp	r3, #14
 8017014:	d112      	bne.n	801703c <lv_img_buf_get_px_alpha+0x210>
        uint32_t px = dsc->header.w * y + x;
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801701e:	b29b      	uxth	r3, r3
 8017020:	461a      	mov	r2, r3
 8017022:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017026:	fb03 f202 	mul.w	r2, r3, r2
 801702a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801702e:	4413      	add	r3, r2
 8017030:	643b      	str	r3, [r7, #64]	; 0x40
        return buf_u8[px];
 8017032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017036:	4413      	add	r3, r2
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	e000      	b.n	801703e <lv_img_buf_get_px_alpha+0x212>
    }

    return LV_OPA_COVER;
 801703c:	23ff      	movs	r3, #255	; 0xff
}
 801703e:	4618      	mov	r0, r3
 8017040:	3748      	adds	r7, #72	; 0x48
 8017042:	46bd      	mov	sp, r7
 8017044:	bc90      	pop	{r4, r7}
 8017046:	4770      	bx	lr
 8017048:	08028364 	.word	0x08028364
 801704c:	08028368 	.word	0x08028368

08017050 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b08a      	sub	sp, #40	; 0x28
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801705e:	021a      	lsls	r2, r3, #8
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	62da      	str	r2, [r3, #44]	; 0x2c
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801706a:	021a      	lsls	r2, r3, #8
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	631a      	str	r2, [r3, #48]	; 0x30

    int32_t angle_low = dsc->cfg.angle / 10;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8017076:	4a76      	ldr	r2, [pc, #472]	; (8017250 <_lv_img_buf_transform_init+0x200>)
 8017078:	fb82 1203 	smull	r1, r2, r2, r3
 801707c:	1092      	asrs	r2, r2, #2
 801707e:	17db      	asrs	r3, r3, #31
 8017080:	1ad3      	subs	r3, r2, r3
 8017082:	b21b      	sxth	r3, r3
 8017084:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t angle_high = angle_low + 1;
 8017086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017088:	3301      	adds	r3, #1
 801708a:	623b      	str	r3, [r7, #32]
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8017092:	4619      	mov	r1, r3
 8017094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017096:	f06f 0209 	mvn.w	r2, #9
 801709a:	fb02 f303 	mul.w	r3, r2, r3
 801709e:	440b      	add	r3, r1
 80170a0:	61fb      	str	r3, [r7, #28]

    int32_t s1 = _lv_trigo_sin(-angle_low);
 80170a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a4:	b29b      	uxth	r3, r3
 80170a6:	425b      	negs	r3, r3
 80170a8:	b29b      	uxth	r3, r3
 80170aa:	b21b      	sxth	r3, r3
 80170ac:	4618      	mov	r0, r3
 80170ae:	f005 f89b 	bl	801c1e8 <_lv_trigo_sin>
 80170b2:	4603      	mov	r3, r0
 80170b4:	61bb      	str	r3, [r7, #24]
    int32_t s2 = _lv_trigo_sin(-angle_high);
 80170b6:	6a3b      	ldr	r3, [r7, #32]
 80170b8:	b29b      	uxth	r3, r3
 80170ba:	425b      	negs	r3, r3
 80170bc:	b29b      	uxth	r3, r3
 80170be:	b21b      	sxth	r3, r3
 80170c0:	4618      	mov	r0, r3
 80170c2:	f005 f891 	bl	801c1e8 <_lv_trigo_sin>
 80170c6:	4603      	mov	r3, r0
 80170c8:	617b      	str	r3, [r7, #20]

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
 80170ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80170d2:	b29b      	uxth	r3, r3
 80170d4:	b21b      	sxth	r3, r3
 80170d6:	4618      	mov	r0, r3
 80170d8:	f005 f886 	bl	801c1e8 <_lv_trigo_sin>
 80170dc:	4603      	mov	r3, r0
 80170de:	613b      	str	r3, [r7, #16]
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
 80170e0:	6a3b      	ldr	r3, [r7, #32]
 80170e2:	b29b      	uxth	r3, r3
 80170e4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80170e8:	b29b      	uxth	r3, r3
 80170ea:	b21b      	sxth	r3, r3
 80170ec:	4618      	mov	r0, r3
 80170ee:	f005 f87b 	bl	801c1e8 <_lv_trigo_sin>
 80170f2:	4603      	mov	r3, r0
 80170f4:	60fb      	str	r3, [r7, #12]

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80170f6:	69fb      	ldr	r3, [r7, #28]
 80170f8:	f1c3 030a 	rsb	r3, r3, #10
 80170fc:	69ba      	ldr	r2, [r7, #24]
 80170fe:	fb02 f203 	mul.w	r2, r2, r3
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	69f9      	ldr	r1, [r7, #28]
 8017106:	fb01 f303 	mul.w	r3, r1, r3
 801710a:	4413      	add	r3, r2
 801710c:	4a50      	ldr	r2, [pc, #320]	; (8017250 <_lv_img_buf_transform_init+0x200>)
 801710e:	fb82 1203 	smull	r1, r2, r2, r3
 8017112:	1092      	asrs	r2, r2, #2
 8017114:	17db      	asrs	r3, r3, #31
 8017116:	1ad2      	subs	r2, r2, r3
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	635a      	str	r2, [r3, #52]	; 0x34
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801711c:	69fb      	ldr	r3, [r7, #28]
 801711e:	f1c3 030a 	rsb	r3, r3, #10
 8017122:	693a      	ldr	r2, [r7, #16]
 8017124:	fb02 f203 	mul.w	r2, r2, r3
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	69f9      	ldr	r1, [r7, #28]
 801712c:	fb01 f303 	mul.w	r3, r1, r3
 8017130:	4413      	add	r3, r2
 8017132:	4a47      	ldr	r2, [pc, #284]	; (8017250 <_lv_img_buf_transform_init+0x200>)
 8017134:	fb82 1203 	smull	r1, r2, r2, r3
 8017138:	1092      	asrs	r2, r2, #2
 801713a:	17db      	asrs	r3, r3, #31
 801713c:	1ad2      	subs	r2, r2, r3
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	639a      	str	r2, [r3, #56]	; 0x38

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017146:	115a      	asrs	r2, r3, #5
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	635a      	str	r2, [r3, #52]	; 0x34
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017150:	115a      	asrs	r2, r3, #5
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	639a      	str	r2, [r3, #56]	; 0x38

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	7d1b      	ldrb	r3, [r3, #20]
 801715a:	4618      	mov	r0, r3
 801715c:	f7f6 ff40 	bl	800dfe0 <lv_img_cf_is_chroma_keyed>
 8017160:	4603      	mov	r3, r0
 8017162:	4619      	mov	r1, r3
 8017164:	687a      	ldr	r2, [r7, #4]
 8017166:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 801716a:	f361 0300 	bfi	r3, r1, #0, #1
 801716e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	7d1b      	ldrb	r3, [r3, #20]
 8017176:	4618      	mov	r0, r3
 8017178:	f7f6 ff4e 	bl	800e018 <lv_img_cf_has_alpha>
 801717c:	4603      	mov	r3, r0
 801717e:	4619      	mov	r1, r3
 8017180:	687a      	ldr	r2, [r7, #4]
 8017182:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8017186:	f361 0341 	bfi	r3, r1, #1, #1
 801718a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	7d1b      	ldrb	r3, [r3, #20]
 8017192:	2b04      	cmp	r3, #4
 8017194:	d007      	beq.n	80171a6 <_lv_img_buf_transform_init+0x156>
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	7d1b      	ldrb	r3, [r3, #20]
 801719a:	2b05      	cmp	r3, #5
 801719c:	d003      	beq.n	80171a6 <_lv_img_buf_transform_init+0x156>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	7d1b      	ldrb	r3, [r3, #20]
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80171a2:	2b06      	cmp	r3, #6
 80171a4:	d107      	bne.n	80171b6 <_lv_img_buf_transform_init+0x166>
        dsc->tmp.native_color = 1;
 80171a6:	687a      	ldr	r2, [r7, #4]
 80171a8:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80171ac:	f043 0304 	orr.w	r3, r3, #4
 80171b0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 80171b4:	e006      	b.n	80171c4 <_lv_img_buf_transform_init+0x174>
    }
    else {
        dsc->tmp.native_color = 0;
 80171b6:	687a      	ldr	r2, [r7, #4]
 80171b8:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80171bc:	f36f 0382 	bfc	r3, #2, #1
 80171c0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	681a      	ldr	r2, [r3, #0]
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	629a      	str	r2, [r3, #40]	; 0x28
    dsc->tmp.img_dsc.header.always_zero = 0;
 80171cc:	687a      	ldr	r2, [r7, #4]
 80171ce:	f892 3020 	ldrb.w	r3, [r2, #32]
 80171d2:	f36f 1347 	bfc	r3, #5, #3
 80171d6:	f882 3020 	strb.w	r3, [r2, #32]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	7d1b      	ldrb	r3, [r3, #20]
 80171de:	f003 031f 	and.w	r3, r3, #31
 80171e2:	b2d9      	uxtb	r1, r3
 80171e4:	687a      	ldr	r2, [r7, #4]
 80171e6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80171ea:	f361 0304 	bfi	r3, r1, #0, #5
 80171ee:	f882 3020 	strb.w	r3, [r2, #32]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80171f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80171fc:	b299      	uxth	r1, r3
 80171fe:	687a      	ldr	r2, [r7, #4]
 8017200:	6a13      	ldr	r3, [r2, #32]
 8017202:	f361 2394 	bfi	r3, r1, #10, #11
 8017206:	6213      	str	r3, [r2, #32]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801720e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017212:	b299      	uxth	r1, r3
 8017214:	687a      	ldr	r2, [r7, #4]
 8017216:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8017218:	f361 134f 	bfi	r3, r1, #5, #11
 801721c:	8453      	strh	r3, [r2, #34]	; 0x22

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	89db      	ldrh	r3, [r3, #14]
 8017222:	085b      	lsrs	r3, r3, #1
 8017224:	b29b      	uxth	r3, r3
 8017226:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801722a:	687a      	ldr	r2, [r7, #4]
 801722c:	89d2      	ldrh	r2, [r2, #14]
 801722e:	fb93 f3f2 	sdiv	r3, r3, r2
 8017232:	461a      	mov	r2, r3
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	641a      	str	r2, [r3, #64]	; 0x40

    dsc->res.opa = LV_OPA_COVER;
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	22ff      	movs	r2, #255	; 0xff
 801723c:	771a      	strb	r2, [r3, #28]
    dsc->res.color = dsc->cfg.color;
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	687a      	ldr	r2, [r7, #4]
 8017242:	6912      	ldr	r2, [r2, #16]
 8017244:	619a      	str	r2, [r3, #24]
}
 8017246:	bf00      	nop
 8017248:	3728      	adds	r7, #40	; 0x28
 801724a:	46bd      	mov	sp, r7
 801724c:	bd80      	pop	{r7, pc}
 801724e:	bf00      	nop
 8017250:	66666667 	.word	0x66666667

08017254 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b092      	sub	sp, #72	; 0x48
 8017258:	af00      	add	r7, sp, #0
 801725a:	60f8      	str	r0, [r7, #12]
 801725c:	4608      	mov	r0, r1
 801725e:	4611      	mov	r1, r2
 8017260:	461a      	mov	r2, r3
 8017262:	4603      	mov	r3, r0
 8017264:	817b      	strh	r3, [r7, #10]
 8017266:	460b      	mov	r3, r1
 8017268:	813b      	strh	r3, [r7, #8]
 801726a:	4613      	mov	r3, r2
 801726c:	80fb      	strh	r3, [r7, #6]
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 801726e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d117      	bne.n	80172a6 <_lv_img_buf_get_transformed_area+0x52>
 8017276:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801727a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801727e:	d112      	bne.n	80172a6 <_lv_img_buf_get_transformed_area+0x52>
        res->x1 = 0;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	2200      	movs	r2, #0
 8017284:	801a      	strh	r2, [r3, #0]
        res->y1 = 0;
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	2200      	movs	r2, #0
 801728a:	805a      	strh	r2, [r3, #2]
        res->x2 = w - 1;
 801728c:	897b      	ldrh	r3, [r7, #10]
 801728e:	3b01      	subs	r3, #1
 8017290:	b29b      	uxth	r3, r3
 8017292:	b21a      	sxth	r2, r3
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	809a      	strh	r2, [r3, #4]
        res->y2 = h - 1;
 8017298:	893b      	ldrh	r3, [r7, #8]
 801729a:	3b01      	subs	r3, #1
 801729c:	b29b      	uxth	r3, r3
 801729e:	b21a      	sxth	r2, r3
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	80da      	strh	r2, [r3, #6]
        return;
 80172a4:	e1f6      	b.n	8017694 <_lv_img_buf_get_transformed_area+0x440>
    }

    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 80172a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80172a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172ac:	425b      	negs	r3, r3
 80172ae:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80172b2:	fb02 f303 	mul.w	r3, r2, r3
 80172b6:	121b      	asrs	r3, r3, #8
 80172b8:	b29b      	uxth	r3, r3
 80172ba:	3b01      	subs	r3, #1
 80172bc:	b29b      	uxth	r3, r3
 80172be:	b21a      	sxth	r2, r3
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	801a      	strh	r2, [r3, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 80172c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80172c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80172ca:	425b      	negs	r3, r3
 80172cc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80172d0:	fb02 f303 	mul.w	r3, r2, r3
 80172d4:	121b      	asrs	r3, r3, #8
 80172d6:	b29b      	uxth	r3, r3
 80172d8:	3b01      	subs	r3, #1
 80172da:	b29b      	uxth	r3, r3
 80172dc:	b21a      	sxth	r2, r3
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	805a      	strh	r2, [r3, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 80172e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80172e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80172e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80172ec:	1a9b      	subs	r3, r3, r2
 80172ee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80172f2:	fb02 f303 	mul.w	r3, r2, r3
 80172f6:	121b      	asrs	r3, r3, #8
 80172f8:	b29b      	uxth	r3, r3
 80172fa:	3302      	adds	r3, #2
 80172fc:	b29b      	uxth	r3, r3
 80172fe:	b21a      	sxth	r2, r3
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	809a      	strh	r2, [r3, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 8017304:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801730a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801730e:	1a9b      	subs	r3, r3, r2
 8017310:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8017314:	fb02 f303 	mul.w	r3, r2, r3
 8017318:	121b      	asrs	r3, r3, #8
 801731a:	b29b      	uxth	r3, r3
 801731c:	3302      	adds	r3, #2
 801731e:	b29b      	uxth	r3, r3
 8017320:	b21a      	sxth	r2, r3
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	80da      	strh	r2, [r3, #6]

    if(angle == 0) {
 8017326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d134      	bne.n	8017398 <_lv_img_buf_get_transformed_area+0x144>
        res->x1 += pivot->x;
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017334:	b29a      	uxth	r2, r3
 8017336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017338:	f9b3 3000 	ldrsh.w	r3, [r3]
 801733c:	b29b      	uxth	r3, r3
 801733e:	4413      	add	r3, r2
 8017340:	b29b      	uxth	r3, r3
 8017342:	b21a      	sxth	r2, r3
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	801a      	strh	r2, [r3, #0]
        res->y1 += pivot->y;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801734e:	b29a      	uxth	r2, r3
 8017350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017352:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017356:	b29b      	uxth	r3, r3
 8017358:	4413      	add	r3, r2
 801735a:	b29b      	uxth	r3, r3
 801735c:	b21a      	sxth	r2, r3
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	805a      	strh	r2, [r3, #2]
        res->x2 += pivot->x;
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017368:	b29a      	uxth	r2, r3
 801736a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801736c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017370:	b29b      	uxth	r3, r3
 8017372:	4413      	add	r3, r2
 8017374:	b29b      	uxth	r3, r3
 8017376:	b21a      	sxth	r2, r3
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	809a      	strh	r2, [r3, #4]
        res->y2 += pivot->y;
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017382:	b29a      	uxth	r2, r3
 8017384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017386:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801738a:	b29b      	uxth	r3, r3
 801738c:	4413      	add	r3, r2
 801738e:	b29b      	uxth	r3, r3
 8017390:	b21a      	sxth	r2, r3
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	80da      	strh	r2, [r3, #6]
        return;
 8017396:	e17d      	b.n	8017694 <_lv_img_buf_get_transformed_area+0x440>
    }

    int32_t angle_low = angle / 10;
 8017398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801739c:	4ab6      	ldr	r2, [pc, #728]	; (8017678 <_lv_img_buf_get_transformed_area+0x424>)
 801739e:	fb82 1203 	smull	r1, r2, r2, r3
 80173a2:	1092      	asrs	r2, r2, #2
 80173a4:	17db      	asrs	r3, r3, #31
 80173a6:	1ad3      	subs	r3, r2, r3
 80173a8:	b21b      	sxth	r3, r3
 80173aa:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t angle_high = angle_low + 1;
 80173ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173ae:	3301      	adds	r3, #1
 80173b0:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t angle_rem = angle  - (angle_low * 10);
 80173b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80173b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173b8:	f06f 0109 	mvn.w	r1, #9
 80173bc:	fb01 f303 	mul.w	r3, r1, r3
 80173c0:	4413      	add	r3, r2
 80173c2:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t s1 = _lv_trigo_sin(angle_low);
 80173c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173c6:	b21b      	sxth	r3, r3
 80173c8:	4618      	mov	r0, r3
 80173ca:	f004 ff0d 	bl	801c1e8 <_lv_trigo_sin>
 80173ce:	4603      	mov	r3, r0
 80173d0:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t s2 = _lv_trigo_sin(angle_high);
 80173d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80173d4:	b21b      	sxth	r3, r3
 80173d6:	4618      	mov	r0, r3
 80173d8:	f004 ff06 	bl	801c1e8 <_lv_trigo_sin>
 80173dc:	4603      	mov	r3, r0
 80173de:	637b      	str	r3, [r7, #52]	; 0x34

    int32_t c1 = _lv_trigo_sin(angle_low + 90);
 80173e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	335a      	adds	r3, #90	; 0x5a
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	b21b      	sxth	r3, r3
 80173ea:	4618      	mov	r0, r3
 80173ec:	f004 fefc 	bl	801c1e8 <_lv_trigo_sin>
 80173f0:	4603      	mov	r3, r0
 80173f2:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
 80173f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	335a      	adds	r3, #90	; 0x5a
 80173fa:	b29b      	uxth	r3, r3
 80173fc:	b21b      	sxth	r3, r3
 80173fe:	4618      	mov	r0, r3
 8017400:	f004 fef2 	bl	801c1e8 <_lv_trigo_sin>
 8017404:	4603      	mov	r3, r0
 8017406:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8017408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801740a:	f1c3 030a 	rsb	r3, r3, #10
 801740e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017410:	fb02 f203 	mul.w	r2, r2, r3
 8017414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017416:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017418:	fb01 f303 	mul.w	r3, r1, r3
 801741c:	4413      	add	r3, r2
 801741e:	4a96      	ldr	r2, [pc, #600]	; (8017678 <_lv_img_buf_get_transformed_area+0x424>)
 8017420:	fb82 1203 	smull	r1, r2, r2, r3
 8017424:	1092      	asrs	r2, r2, #2
 8017426:	17db      	asrs	r3, r3, #31
 8017428:	1ad3      	subs	r3, r2, r3
 801742a:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801742c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801742e:	f1c3 030a 	rsb	r3, r3, #10
 8017432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017434:	fb02 f203 	mul.w	r2, r2, r3
 8017438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801743a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801743c:	fb01 f303 	mul.w	r3, r1, r3
 8017440:	4413      	add	r3, r2
 8017442:	4a8d      	ldr	r2, [pc, #564]	; (8017678 <_lv_img_buf_get_transformed_area+0x424>)
 8017444:	fb82 1203 	smull	r1, r2, r2, r3
 8017448:	1092      	asrs	r2, r2, #2
 801744a:	17db      	asrs	r3, r3, #31
 801744c:	1ad3      	subs	r3, r2, r3
 801744e:	627b      	str	r3, [r7, #36]	; 0x24

    /*Use smaller value to avoid overflow*/
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8017450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017452:	115b      	asrs	r3, r3, #5
 8017454:	62bb      	str	r3, [r7, #40]	; 0x28
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8017456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017458:	115b      	asrs	r3, r3, #5
 801745a:	627b      	str	r3, [r7, #36]	; 0x24
    lv_point_t rb;

    lv_coord_t xt;
    lv_coord_t yt;

    xt = res->x1;
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	881b      	ldrh	r3, [r3, #0]
 8017460:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y1;
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	885b      	ldrh	r3, [r3, #2]
 8017466:	843b      	strh	r3, [r7, #32]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8017468:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801746c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801746e:	fb02 f203 	mul.w	r2, r2, r3
 8017472:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017478:	fb01 f303 	mul.w	r3, r1, r3
 801747c:	1ad3      	subs	r3, r2, r3
 801747e:	129b      	asrs	r3, r3, #10
 8017480:	b29a      	uxth	r2, r3
 8017482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017488:	b29b      	uxth	r3, r3
 801748a:	4413      	add	r3, r2
 801748c:	b29b      	uxth	r3, r3
 801748e:	b21b      	sxth	r3, r3
 8017490:	83bb      	strh	r3, [r7, #28]
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8017492:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017498:	fb02 f203 	mul.w	r2, r2, r3
 801749c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80174a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80174a2:	fb01 f303 	mul.w	r3, r1, r3
 80174a6:	4413      	add	r3, r2
 80174a8:	129b      	asrs	r3, r3, #10
 80174aa:	b29a      	uxth	r2, r3
 80174ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80174b2:	b29b      	uxth	r3, r3
 80174b4:	4413      	add	r3, r2
 80174b6:	b29b      	uxth	r3, r3
 80174b8:	b21b      	sxth	r3, r3
 80174ba:	83fb      	strh	r3, [r7, #30]

    xt = res->x2;
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	889b      	ldrh	r3, [r3, #4]
 80174c0:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y1;
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	885b      	ldrh	r3, [r3, #2]
 80174c6:	843b      	strh	r3, [r7, #32]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80174c8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80174cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174ce:	fb02 f203 	mul.w	r2, r2, r3
 80174d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80174d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80174d8:	fb01 f303 	mul.w	r3, r1, r3
 80174dc:	1ad3      	subs	r3, r2, r3
 80174de:	129b      	asrs	r3, r3, #10
 80174e0:	b29a      	uxth	r2, r3
 80174e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174e8:	b29b      	uxth	r3, r3
 80174ea:	4413      	add	r3, r2
 80174ec:	b29b      	uxth	r3, r3
 80174ee:	b21b      	sxth	r3, r3
 80174f0:	833b      	strh	r3, [r7, #24]
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80174f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80174f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80174f8:	fb02 f203 	mul.w	r2, r2, r3
 80174fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017502:	fb01 f303 	mul.w	r3, r1, r3
 8017506:	4413      	add	r3, r2
 8017508:	129b      	asrs	r3, r3, #10
 801750a:	b29a      	uxth	r2, r3
 801750c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801750e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017512:	b29b      	uxth	r3, r3
 8017514:	4413      	add	r3, r2
 8017516:	b29b      	uxth	r3, r3
 8017518:	b21b      	sxth	r3, r3
 801751a:	837b      	strh	r3, [r7, #26]

    xt = res->x1;
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	881b      	ldrh	r3, [r3, #0]
 8017520:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y2;
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	88db      	ldrh	r3, [r3, #6]
 8017526:	843b      	strh	r3, [r7, #32]
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8017528:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801752c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801752e:	fb02 f203 	mul.w	r2, r2, r3
 8017532:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017538:	fb01 f303 	mul.w	r3, r1, r3
 801753c:	1ad3      	subs	r3, r2, r3
 801753e:	129b      	asrs	r3, r3, #10
 8017540:	b29a      	uxth	r2, r3
 8017542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017548:	b29b      	uxth	r3, r3
 801754a:	4413      	add	r3, r2
 801754c:	b29b      	uxth	r3, r3
 801754e:	b21b      	sxth	r3, r3
 8017550:	82bb      	strh	r3, [r7, #20]
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8017552:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017558:	fb02 f203 	mul.w	r2, r2, r3
 801755c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017562:	fb01 f303 	mul.w	r3, r1, r3
 8017566:	4413      	add	r3, r2
 8017568:	129b      	asrs	r3, r3, #10
 801756a:	b29a      	uxth	r2, r3
 801756c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801756e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017572:	b29b      	uxth	r3, r3
 8017574:	4413      	add	r3, r2
 8017576:	b29b      	uxth	r3, r3
 8017578:	b21b      	sxth	r3, r3
 801757a:	82fb      	strh	r3, [r7, #22]

    xt = res->x2;
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	889b      	ldrh	r3, [r3, #4]
 8017580:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y2;
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	88db      	ldrh	r3, [r3, #6]
 8017586:	843b      	strh	r3, [r7, #32]
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8017588:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801758c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801758e:	fb02 f203 	mul.w	r2, r2, r3
 8017592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017598:	fb01 f303 	mul.w	r3, r1, r3
 801759c:	1ad3      	subs	r3, r2, r3
 801759e:	129b      	asrs	r3, r3, #10
 80175a0:	b29a      	uxth	r2, r3
 80175a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175a8:	b29b      	uxth	r3, r3
 80175aa:	4413      	add	r3, r2
 80175ac:	b29b      	uxth	r3, r3
 80175ae:	b21b      	sxth	r3, r3
 80175b0:	823b      	strh	r3, [r7, #16]
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80175b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80175b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175b8:	fb02 f203 	mul.w	r2, r2, r3
 80175bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80175c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175c2:	fb01 f303 	mul.w	r3, r1, r3
 80175c6:	4413      	add	r3, r2
 80175c8:	129b      	asrs	r3, r3, #10
 80175ca:	b29a      	uxth	r2, r3
 80175cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80175d2:	b29b      	uxth	r3, r3
 80175d4:	4413      	add	r3, r2
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	b21b      	sxth	r3, r3
 80175da:	827b      	strh	r3, [r7, #18]

    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 80175dc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80175e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80175e4:	4293      	cmp	r3, r2
 80175e6:	bfa8      	it	ge
 80175e8:	4613      	movge	r3, r2
 80175ea:	b21a      	sxth	r2, r3
 80175ec:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80175f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80175f4:	428b      	cmp	r3, r1
 80175f6:	bfa8      	it	ge
 80175f8:	460b      	movge	r3, r1
 80175fa:	b21b      	sxth	r3, r3
 80175fc:	4293      	cmp	r3, r2
 80175fe:	bfa8      	it	ge
 8017600:	4613      	movge	r3, r2
 8017602:	b21a      	sxth	r2, r3
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	801a      	strh	r2, [r3, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 8017608:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801760c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017610:	4293      	cmp	r3, r2
 8017612:	bfb8      	it	lt
 8017614:	4613      	movlt	r3, r2
 8017616:	b21a      	sxth	r2, r3
 8017618:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801761c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017620:	428b      	cmp	r3, r1
 8017622:	bfb8      	it	lt
 8017624:	460b      	movlt	r3, r1
 8017626:	b21b      	sxth	r3, r3
 8017628:	4293      	cmp	r3, r2
 801762a:	bfb8      	it	lt
 801762c:	4613      	movlt	r3, r2
 801762e:	b21a      	sxth	r2, r3
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	809a      	strh	r2, [r3, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 8017634:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8017638:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801763c:	4293      	cmp	r3, r2
 801763e:	bfa8      	it	ge
 8017640:	4613      	movge	r3, r2
 8017642:	b21a      	sxth	r2, r3
 8017644:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8017648:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801764c:	428b      	cmp	r3, r1
 801764e:	bfa8      	it	ge
 8017650:	460b      	movge	r3, r1
 8017652:	b21b      	sxth	r3, r3
 8017654:	4293      	cmp	r3, r2
 8017656:	bfa8      	it	ge
 8017658:	4613      	movge	r3, r2
 801765a:	b21a      	sxth	r2, r3
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	805a      	strh	r2, [r3, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 8017660:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8017664:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017668:	4293      	cmp	r3, r2
 801766a:	bfb8      	it	lt
 801766c:	4613      	movlt	r3, r2
 801766e:	b21a      	sxth	r2, r3
 8017670:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8017674:	e002      	b.n	801767c <_lv_img_buf_get_transformed_area+0x428>
 8017676:	bf00      	nop
 8017678:	66666667 	.word	0x66666667
 801767c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017680:	428b      	cmp	r3, r1
 8017682:	bfb8      	it	lt
 8017684:	460b      	movlt	r3, r1
 8017686:	b21b      	sxth	r3, r3
 8017688:	4293      	cmp	r3, r2
 801768a:	bfb8      	it	lt
 801768c:	4613      	movlt	r3, r2
 801768e:	b21a      	sxth	r2, r3
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	80da      	strh	r2, [r3, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 8017694:	3748      	adds	r7, #72	; 0x48
 8017696:	46bd      	mov	sp, r7
 8017698:	bd80      	pop	{r7, pc}
 801769a:	bf00      	nop

0801769c <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
 801769c:	b590      	push	{r4, r7, lr}
 801769e:	b093      	sub	sp, #76	; 0x4c
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
    const uint8_t * src_u8 = dsc->cfg.src;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	633b      	str	r3, [r7, #48]	; 0x30

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80176b0:	b29b      	uxth	r3, r3
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    int ys_fract = dsc->tmp.ys & 0xff;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80176bc:	b29b      	uxth	r3, r3
 80176be:	b2db      	uxtb	r3, r3
 80176c0:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
 80176c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c4:	2b6f      	cmp	r3, #111	; 0x6f
 80176c6:	dc12      	bgt.n	80176ee <_lv_img_buf_transform_anti_alias+0x52>
        xn = - 1;
 80176c8:	f04f 33ff 	mov.w	r3, #4294967295
 80176cc:	647b      	str	r3, [r7, #68]	; 0x44
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80176d4:	461a      	mov	r2, r3
 80176d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176d8:	4413      	add	r3, r2
 80176da:	2b00      	cmp	r3, #0
 80176dc:	da01      	bge.n	80176e2 <_lv_img_buf_transform_anti_alias+0x46>
 80176de:	2300      	movs	r3, #0
 80176e0:	647b      	str	r3, [r7, #68]	; 0x44
        xr = xs_fract + 0x80;
 80176e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176e4:	b2db      	uxtb	r3, r3
 80176e6:	3b80      	subs	r3, #128	; 0x80
 80176e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80176ec:	e01d      	b.n	801772a <_lv_img_buf_transform_anti_alias+0x8e>
    }
    else if(xs_fract > 0x90) {
 80176ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176f0:	2b90      	cmp	r3, #144	; 0x90
 80176f2:	dd15      	ble.n	8017720 <_lv_img_buf_transform_anti_alias+0x84>
        xn =  1;
 80176f4:	2301      	movs	r3, #1
 80176f6:	647b      	str	r3, [r7, #68]	; 0x44
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80176fe:	461a      	mov	r2, r3
 8017700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017702:	4413      	add	r3, r2
 8017704:	687a      	ldr	r2, [r7, #4]
 8017706:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801770a:	4293      	cmp	r3, r2
 801770c:	db01      	blt.n	8017712 <_lv_img_buf_transform_anti_alias+0x76>
 801770e:	2300      	movs	r3, #0
 8017710:	647b      	str	r3, [r7, #68]	; 0x44
        xr = (0xFF - xs_fract) + 0x80;
 8017712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017714:	b2db      	uxtb	r3, r3
 8017716:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801771a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801771e:	e004      	b.n	801772a <_lv_img_buf_transform_anti_alias+0x8e>
    }
    else {
        xn = 0;
 8017720:	2300      	movs	r3, #0
 8017722:	647b      	str	r3, [r7, #68]	; 0x44
        xr = 0xFF;
 8017724:	23ff      	movs	r3, #255	; 0xff
 8017726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
 801772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801772c:	2b6f      	cmp	r3, #111	; 0x6f
 801772e:	dc12      	bgt.n	8017756 <_lv_img_buf_transform_anti_alias+0xba>
        yn = - 1;
 8017730:	f04f 33ff 	mov.w	r3, #4294967295
 8017734:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 801773c:	461a      	mov	r2, r3
 801773e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017740:	4413      	add	r3, r2
 8017742:	2b00      	cmp	r3, #0
 8017744:	da01      	bge.n	801774a <_lv_img_buf_transform_anti_alias+0xae>
 8017746:	2300      	movs	r3, #0
 8017748:	63fb      	str	r3, [r7, #60]	; 0x3c

        yr = ys_fract + 0x80;
 801774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801774c:	b2db      	uxtb	r3, r3
 801774e:	3b80      	subs	r3, #128	; 0x80
 8017750:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8017754:	e01d      	b.n	8017792 <_lv_img_buf_transform_anti_alias+0xf6>
    }
    else if(ys_fract > 0x90) {
 8017756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017758:	2b90      	cmp	r3, #144	; 0x90
 801775a:	dd15      	ble.n	8017788 <_lv_img_buf_transform_anti_alias+0xec>
        yn =  1;
 801775c:	2301      	movs	r3, #1
 801775e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017766:	461a      	mov	r2, r3
 8017768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801776a:	4413      	add	r3, r2
 801776c:	687a      	ldr	r2, [r7, #4]
 801776e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8017772:	4293      	cmp	r3, r2
 8017774:	db01      	blt.n	801777a <_lv_img_buf_transform_anti_alias+0xde>
 8017776:	2300      	movs	r3, #0
 8017778:	63fb      	str	r3, [r7, #60]	; 0x3c

        yr = (0xFF - ys_fract) + 0x80;
 801777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801777c:	b2db      	uxtb	r3, r3
 801777e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8017782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8017786:	e004      	b.n	8017792 <_lv_img_buf_transform_anti_alias+0xf6>
    }
    else {
        yn = 0;
 8017788:	2300      	movs	r3, #0
 801778a:	63fb      	str	r3, [r7, #60]	; 0x3c
        yr = 0xFF;
 801778c:	23ff      	movs	r3, #255	; 0xff
 801778e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }

    lv_color_t c00 = dsc->res.color;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	699b      	ldr	r3, [r3, #24]
 8017796:	623b      	str	r3, [r7, #32]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	7f1b      	ldrb	r3, [r3, #28]
 801779c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    lv_opa_t a10 = 0;
 80177a0:	2300      	movs	r3, #0
 80177a2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    lv_opa_t a01 = 0;
 80177a6:	2300      	movs	r3, #0
 80177a8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    lv_opa_t a11 = 0;
 80177ac:	2300      	movs	r3, #0
 80177ae:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

    if(dsc->tmp.native_color) {
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80177b8:	f003 0304 	and.w	r3, r3, #4
 80177bc:	b2db      	uxtb	r3, r3
 80177be:	2b00      	cmp	r3, #0
 80177c0:	f000 80a2 	beq.w	8017908 <_lv_img_buf_transform_anti_alias+0x26c>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80177c8:	687a      	ldr	r2, [r7, #4]
 80177ca:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80177ce:	4611      	mov	r1, r2
 80177d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80177d2:	fb02 f201 	mul.w	r2, r2, r1
 80177d6:	4413      	add	r3, r2
 80177d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177da:	18d1      	adds	r1, r2, r3
 80177dc:	f107 031c 	add.w	r3, r7, #28
 80177e0:	2204      	movs	r2, #4
 80177e2:	4618      	mov	r0, r3
 80177e4:	f7ff f9be 	bl	8016b64 <_lv_memcpy_small>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80177ec:	687a      	ldr	r2, [r7, #4]
 80177ee:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80177f2:	4611      	mov	r1, r2
 80177f4:	687a      	ldr	r2, [r7, #4]
 80177f6:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80177fa:	fb02 f201 	mul.w	r2, r2, r1
 80177fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017800:	fb01 f202 	mul.w	r2, r1, r2
 8017804:	4413      	add	r3, r2
 8017806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017808:	18d1      	adds	r1, r2, r3
 801780a:	f107 0318 	add.w	r3, r7, #24
 801780e:	2204      	movs	r2, #4
 8017810:	4618      	mov	r0, r3
 8017812:	f7ff f9a7 	bl	8016b64 <_lv_memcpy_small>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017820:	4619      	mov	r1, r3
 8017822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017824:	fb03 f301 	mul.w	r3, r3, r1
 8017828:	4618      	mov	r0, r3
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017830:	4619      	mov	r1, r3
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017838:	fb03 f301 	mul.w	r3, r3, r1
 801783c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801783e:	fb01 f303 	mul.w	r3, r1, r3
 8017842:	4403      	add	r3, r0
 8017844:	4413      	add	r3, r2
 8017846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017848:	18d1      	adds	r1, r2, r3
 801784a:	f107 0314 	add.w	r3, r7, #20
 801784e:	2204      	movs	r2, #4
 8017850:	4618      	mov	r0, r3
 8017852:	f7ff f987 	bl	8016b64 <_lv_memcpy_small>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801785c:	f003 0302 	and.w	r3, r3, #2
 8017860:	b2db      	uxtb	r3, r3
 8017862:	2b00      	cmp	r3, #0
 8017864:	f000 80e2 	beq.w	8017a2c <_lv_img_buf_transform_anti_alias+0x390>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801786c:	687a      	ldr	r2, [r7, #4]
 801786e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017872:	4611      	mov	r1, r2
 8017874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017876:	fb02 f201 	mul.w	r2, r2, r1
 801787a:	4413      	add	r3, r2
 801787c:	687a      	ldr	r2, [r7, #4]
 801787e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017882:	4413      	add	r3, r2
 8017884:	3b01      	subs	r3, #1
 8017886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017888:	4413      	add	r3, r2
 801788a:	781b      	ldrb	r3, [r3, #0]
 801788c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017894:	687a      	ldr	r2, [r7, #4]
 8017896:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801789a:	4611      	mov	r1, r2
 801789c:	687a      	ldr	r2, [r7, #4]
 801789e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80178a2:	fb02 f201 	mul.w	r2, r2, r1
 80178a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80178a8:	fb01 f202 	mul.w	r2, r1, r2
 80178ac:	4413      	add	r3, r2
 80178ae:	687a      	ldr	r2, [r7, #4]
 80178b0:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80178b4:	4413      	add	r3, r2
 80178b6:	3b01      	subs	r3, #1
 80178b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178ba:	4413      	add	r3, r2
 80178bc:	781b      	ldrb	r3, [r3, #0]
 80178be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80178cc:	4619      	mov	r1, r3
 80178ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80178d0:	fb03 f301 	mul.w	r3, r3, r1
 80178d4:	4618      	mov	r0, r3
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80178dc:	4619      	mov	r1, r3
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80178e4:	fb03 f301 	mul.w	r3, r3, r1
 80178e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80178ea:	fb01 f303 	mul.w	r3, r1, r3
 80178ee:	4403      	add	r3, r0
 80178f0:	4413      	add	r3, r2
 80178f2:	687a      	ldr	r2, [r7, #4]
 80178f4:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80178f8:	4413      	add	r3, r2
 80178fa:	3b01      	subs	r3, #1
 80178fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178fe:	4413      	add	r3, r2
 8017900:	781b      	ldrb	r3, [r3, #0]
 8017902:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8017906:	e091      	b.n	8017a2c <_lv_img_buf_transform_anti_alias+0x390>
        }
    }
    else {
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f103 0020 	add.w	r0, r3, #32
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017914:	b29a      	uxth	r2, r3
 8017916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017918:	b29b      	uxth	r3, r3
 801791a:	4413      	add	r3, r2
 801791c:	b29b      	uxth	r3, r3
 801791e:	b219      	sxth	r1, r3
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	691b      	ldr	r3, [r3, #16]
 801792a:	f7ff f93d 	bl	8016ba8 <lv_img_buf_get_px_color>
 801792e:	4603      	mov	r3, r0
 8017930:	61fb      	str	r3, [r7, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	f103 0020 	add.w	r0, r3, #32
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	; 0x48
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017944:	b29a      	uxth	r2, r3
 8017946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017948:	b29b      	uxth	r3, r3
 801794a:	4413      	add	r3, r2
 801794c:	b29b      	uxth	r3, r3
 801794e:	b21a      	sxth	r2, r3
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	691b      	ldr	r3, [r3, #16]
 8017954:	f7ff f928 	bl	8016ba8 <lv_img_buf_get_px_color>
 8017958:	4603      	mov	r3, r0
 801795a:	61bb      	str	r3, [r7, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f103 0020 	add.w	r0, r3, #32
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017968:	b29a      	uxth	r2, r3
 801796a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801796c:	b29b      	uxth	r3, r3
 801796e:	4413      	add	r3, r2
 8017970:	b29b      	uxth	r3, r3
 8017972:	b219      	sxth	r1, r3
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 801797a:	b29a      	uxth	r2, r3
 801797c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801797e:	b29b      	uxth	r3, r3
 8017980:	4413      	add	r3, r2
 8017982:	b29b      	uxth	r3, r3
 8017984:	b21a      	sxth	r2, r3
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	691b      	ldr	r3, [r3, #16]
 801798a:	f7ff f90d 	bl	8016ba8 <lv_img_buf_get_px_color>
 801798e:	4603      	mov	r3, r0
 8017990:	617b      	str	r3, [r7, #20]

        if(dsc->tmp.has_alpha) {
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017998:	f003 0302 	and.w	r3, r3, #2
 801799c:	b2db      	uxtb	r3, r3
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d044      	beq.n	8017a2c <_lv_img_buf_transform_anti_alias+0x390>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	f103 0020 	add.w	r0, r3, #32
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80179ae:	b29a      	uxth	r2, r3
 80179b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80179b2:	b29b      	uxth	r3, r3
 80179b4:	4413      	add	r3, r2
 80179b6:	b29b      	uxth	r3, r3
 80179b8:	b219      	sxth	r1, r3
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80179c0:	461a      	mov	r2, r3
 80179c2:	f7ff fa33 	bl	8016e2c <lv_img_buf_get_px_alpha>
 80179c6:	4603      	mov	r3, r0
 80179c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f103 0020 	add.w	r0, r3, #32
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	; 0x48
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80179de:	b29a      	uxth	r2, r3
 80179e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	4413      	add	r3, r2
 80179e6:	b29b      	uxth	r3, r3
 80179e8:	b21b      	sxth	r3, r3
 80179ea:	461a      	mov	r2, r3
 80179ec:	f7ff fa1e 	bl	8016e2c <lv_img_buf_get_px_alpha>
 80179f0:	4603      	mov	r3, r0
 80179f2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	f103 0020 	add.w	r0, r3, #32
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017a02:	b29a      	uxth	r2, r3
 8017a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a06:	b29b      	uxth	r3, r3
 8017a08:	4413      	add	r3, r2
 8017a0a:	b29b      	uxth	r3, r3
 8017a0c:	b219      	sxth	r1, r3
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017a14:	b29a      	uxth	r2, r3
 8017a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a18:	b29b      	uxth	r3, r3
 8017a1a:	4413      	add	r3, r2
 8017a1c:	b29b      	uxth	r3, r3
 8017a1e:	b21b      	sxth	r3, r3
 8017a20:	461a      	mov	r2, r3
 8017a22:	f7ff fa03 	bl	8016e2c <lv_img_buf_get_px_alpha>
 8017a26:	4603      	mov	r3, r0
 8017a28:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        }
    }

    lv_opa_t xr0 = xr;
 8017a2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017a30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    lv_opa_t xr1 = xr;
 8017a34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017a38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if(dsc->tmp.has_alpha) {
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017a42:	f003 0302 	and.w	r3, r3, #2
 8017a46:	b2db      	uxtb	r3, r3
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d06b      	beq.n	8017b24 <_lv_img_buf_transform_anti_alias+0x488>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 8017a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a50:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8017a54:	fb02 f203 	mul.w	r2, r2, r3
 8017a58:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8017a5c:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8017a60:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8017a64:	fb01 f303 	mul.w	r3, r1, r3
 8017a68:	4413      	add	r3, r2
 8017a6a:	121b      	asrs	r3, r3, #8
 8017a6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 8017a70:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017a74:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8017a78:	fb02 f203 	mul.w	r2, r2, r3
 8017a7c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017a80:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8017a84:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8017a88:	fb01 f303 	mul.w	r3, r1, r3
 8017a8c:	4413      	add	r3, r2
 8017a8e:	121b      	asrs	r3, r3, #8
 8017a90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 8017a94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017a98:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8017a9c:	fb02 f203 	mul.w	r2, r2, r3
 8017aa0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017aa4:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8017aa8:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8017aac:	fb01 f303 	mul.w	r3, r1, r3
 8017ab0:	4413      	add	r3, r2
 8017ab2:	121b      	asrs	r3, r3, #8
 8017ab4:	b2da      	uxtb	r2, r3
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	771a      	strb	r2, [r3, #28]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 8017aba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017abe:	2b02      	cmp	r3, #2
 8017ac0:	d805      	bhi.n	8017ace <_lv_img_buf_transform_anti_alias+0x432>
 8017ac2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017ac6:	2b02      	cmp	r3, #2
 8017ac8:	d801      	bhi.n	8017ace <_lv_img_buf_transform_anti_alias+0x432>
 8017aca:	2300      	movs	r3, #0
 8017acc:	e07d      	b.n	8017bca <_lv_img_buf_transform_anti_alias+0x52e>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 8017ace:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ad2:	2b02      	cmp	r3, #2
 8017ad4:	d802      	bhi.n	8017adc <_lv_img_buf_transform_anti_alias+0x440>
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 8017adc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017ae0:	2b02      	cmp	r3, #2
 8017ae2:	d802      	bhi.n	8017aea <_lv_img_buf_transform_anti_alias+0x44e>
 8017ae4:	23ff      	movs	r3, #255	; 0xff
 8017ae6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
 8017aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017aee:	2b02      	cmp	r3, #2
 8017af0:	d802      	bhi.n	8017af8 <_lv_img_buf_transform_anti_alias+0x45c>
 8017af2:	2300      	movs	r3, #0
 8017af4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 8017af8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8017afc:	2b02      	cmp	r3, #2
 8017afe:	d802      	bhi.n	8017b06 <_lv_img_buf_transform_anti_alias+0x46a>
 8017b00:	23ff      	movs	r3, #255	; 0xff
 8017b02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 8017b06:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017b0a:	2b02      	cmp	r3, #2
 8017b0c:	d802      	bhi.n	8017b14 <_lv_img_buf_transform_anti_alias+0x478>
 8017b0e:	2300      	movs	r3, #0
 8017b10:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 8017b14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017b18:	2b02      	cmp	r3, #2
 8017b1a:	d80e      	bhi.n	8017b3a <_lv_img_buf_transform_anti_alias+0x49e>
 8017b1c:	23ff      	movs	r3, #255	; 0xff
 8017b1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8017b22:	e00a      	b.n	8017b3a <_lv_img_buf_transform_anti_alias+0x49e>
    }
    else {
        xr0 = xr;
 8017b24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        xr1 = xr;
 8017b2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017b30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        dsc->res.opa = LV_OPA_COVER;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	22ff      	movs	r2, #255	; 0xff
 8017b38:	771a      	strb	r2, [r3, #28]
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 8017b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d102      	bne.n	8017b48 <_lv_img_buf_transform_anti_alias+0x4ac>
 8017b42:	69fb      	ldr	r3, [r7, #28]
 8017b44:	613b      	str	r3, [r7, #16]
 8017b46:	e00f      	b.n	8017b68 <_lv_img_buf_transform_anti_alias+0x4cc>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 8017b48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017b4c:	2bff      	cmp	r3, #255	; 0xff
 8017b4e:	d102      	bne.n	8017b56 <_lv_img_buf_transform_anti_alias+0x4ba>
 8017b50:	6a3b      	ldr	r3, [r7, #32]
 8017b52:	613b      	str	r3, [r7, #16]
 8017b54:	e008      	b.n	8017b68 <_lv_img_buf_transform_anti_alias+0x4cc>
    else c0 = lv_color_mix(c00, c01, xr0);
 8017b56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017b5a:	461a      	mov	r2, r3
 8017b5c:	69f9      	ldr	r1, [r7, #28]
 8017b5e:	6a38      	ldr	r0, [r7, #32]
 8017b60:	f7fe ffae 	bl	8016ac0 <lv_color_mix>
 8017b64:	4603      	mov	r3, r0
 8017b66:	613b      	str	r3, [r7, #16]

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 8017b68:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d102      	bne.n	8017b76 <_lv_img_buf_transform_anti_alias+0x4da>
 8017b70:	697b      	ldr	r3, [r7, #20]
 8017b72:	60fb      	str	r3, [r7, #12]
 8017b74:	e00f      	b.n	8017b96 <_lv_img_buf_transform_anti_alias+0x4fa>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 8017b76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017b7a:	2bff      	cmp	r3, #255	; 0xff
 8017b7c:	d102      	bne.n	8017b84 <_lv_img_buf_transform_anti_alias+0x4e8>
 8017b7e:	69bb      	ldr	r3, [r7, #24]
 8017b80:	60fb      	str	r3, [r7, #12]
 8017b82:	e008      	b.n	8017b96 <_lv_img_buf_transform_anti_alias+0x4fa>
    else c1 = lv_color_mix(c10, c11, xr1);
 8017b84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017b88:	461a      	mov	r2, r3
 8017b8a:	6979      	ldr	r1, [r7, #20]
 8017b8c:	69b8      	ldr	r0, [r7, #24]
 8017b8e:	f7fe ff97 	bl	8016ac0 <lv_color_mix>
 8017b92:	4603      	mov	r3, r0
 8017b94:	60fb      	str	r3, [r7, #12]

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 8017b96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d103      	bne.n	8017ba6 <_lv_img_buf_transform_anti_alias+0x50a>
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	68fa      	ldr	r2, [r7, #12]
 8017ba2:	619a      	str	r2, [r3, #24]
 8017ba4:	e010      	b.n	8017bc8 <_lv_img_buf_transform_anti_alias+0x52c>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 8017ba6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017baa:	2bff      	cmp	r3, #255	; 0xff
 8017bac:	d103      	bne.n	8017bb6 <_lv_img_buf_transform_anti_alias+0x51a>
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	693a      	ldr	r2, [r7, #16]
 8017bb2:	619a      	str	r2, [r3, #24]
 8017bb4:	e008      	b.n	8017bc8 <_lv_img_buf_transform_anti_alias+0x52c>
    else dsc->res.color = lv_color_mix(c0, c1, yr);
 8017bb6:	687c      	ldr	r4, [r7, #4]
 8017bb8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017bbc:	461a      	mov	r2, r3
 8017bbe:	68f9      	ldr	r1, [r7, #12]
 8017bc0:	6938      	ldr	r0, [r7, #16]
 8017bc2:	f7fe ff7d 	bl	8016ac0 <lv_color_mix>
 8017bc6:	61a0      	str	r0, [r4, #24]

    return true;
 8017bc8:	2301      	movs	r3, #1
}
 8017bca:	4618      	mov	r0, r3
 8017bcc:	374c      	adds	r7, #76	; 0x4c
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	bd90      	pop	{r4, r7, pc}
	...

08017bd4 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b088      	sub	sp, #32
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
 8017bdc:	6039      	str	r1, [r7, #0]
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
 8017bde:	2300      	movs	r3, #0
 8017be0:	61fb      	str	r3, [r7, #28]

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
 8017be2:	4b87      	ldr	r3, [pc, #540]	; (8017e00 <_lv_img_cache_open+0x22c>)
 8017be4:	881b      	ldrh	r3, [r3, #0]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d101      	bne.n	8017bee <_lv_img_cache_open+0x1a>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
 8017bea:	2300      	movs	r3, #0
 8017bec:	e104      	b.n	8017df8 <_lv_img_cache_open+0x224>
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8017bee:	4b85      	ldr	r3, [pc, #532]	; (8017e04 <_lv_img_cache_open+0x230>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	617b      	str	r3, [r7, #20]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	837b      	strh	r3, [r7, #26]
 8017bf8:	e021      	b.n	8017c3e <_lv_img_cache_open+0x6a>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8017bfa:	8b7a      	ldrh	r2, [r7, #26]
 8017bfc:	4613      	mov	r3, r2
 8017bfe:	009b      	lsls	r3, r3, #2
 8017c00:	4413      	add	r3, r2
 8017c02:	00db      	lsls	r3, r3, #3
 8017c04:	461a      	mov	r2, r3
 8017c06:	697b      	ldr	r3, [r7, #20]
 8017c08:	4413      	add	r3, r2
 8017c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c0c:	4a7e      	ldr	r2, [pc, #504]	; (8017e08 <_lv_img_cache_open+0x234>)
 8017c0e:	4293      	cmp	r3, r2
 8017c10:	db12      	blt.n	8017c38 <_lv_img_cache_open+0x64>
            cache[i].life -= LV_IMG_CACHE_AGING;
 8017c12:	8b7a      	ldrh	r2, [r7, #26]
 8017c14:	4613      	mov	r3, r2
 8017c16:	009b      	lsls	r3, r3, #2
 8017c18:	4413      	add	r3, r2
 8017c1a:	00db      	lsls	r3, r3, #3
 8017c1c:	461a      	mov	r2, r3
 8017c1e:	697b      	ldr	r3, [r7, #20]
 8017c20:	4413      	add	r3, r2
 8017c22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017c24:	8b7a      	ldrh	r2, [r7, #26]
 8017c26:	4613      	mov	r3, r2
 8017c28:	009b      	lsls	r3, r3, #2
 8017c2a:	4413      	add	r3, r2
 8017c2c:	00db      	lsls	r3, r3, #3
 8017c2e:	461a      	mov	r2, r3
 8017c30:	697b      	ldr	r3, [r7, #20]
 8017c32:	4413      	add	r3, r2
 8017c34:	1e4a      	subs	r2, r1, #1
 8017c36:	625a      	str	r2, [r3, #36]	; 0x24
    for(i = 0; i < entry_cnt; i++) {
 8017c38:	8b7b      	ldrh	r3, [r7, #26]
 8017c3a:	3301      	adds	r3, #1
 8017c3c:	837b      	strh	r3, [r7, #26]
 8017c3e:	4b70      	ldr	r3, [pc, #448]	; (8017e00 <_lv_img_cache_open+0x22c>)
 8017c40:	881b      	ldrh	r3, [r3, #0]
 8017c42:	8b7a      	ldrh	r2, [r7, #26]
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d3d8      	bcc.n	8017bfa <_lv_img_cache_open+0x26>
        }
    }

    for(i = 0; i < entry_cnt; i++) {
 8017c48:	2300      	movs	r3, #0
 8017c4a:	837b      	strh	r3, [r7, #26]
 8017c4c:	e064      	b.n	8017d18 <_lv_img_cache_open+0x144>
        bool match = false;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	767b      	strb	r3, [r7, #25]
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
 8017c52:	8b7a      	ldrh	r2, [r7, #26]
 8017c54:	4613      	mov	r3, r2
 8017c56:	009b      	lsls	r3, r3, #2
 8017c58:	4413      	add	r3, r2
 8017c5a:	00db      	lsls	r3, r3, #3
 8017c5c:	461a      	mov	r2, r3
 8017c5e:	697b      	ldr	r3, [r7, #20]
 8017c60:	4413      	add	r3, r2
 8017c62:	685b      	ldr	r3, [r3, #4]
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7f6 fa0d 	bl	800e084 <lv_img_src_get_type>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	74fb      	strb	r3, [r7, #19]
        if(src_type == LV_IMG_SRC_VARIABLE) {
 8017c6e:	7cfb      	ldrb	r3, [r7, #19]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d11a      	bne.n	8017caa <_lv_img_cache_open+0xd6>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
 8017c74:	8b7a      	ldrh	r2, [r7, #26]
 8017c76:	4613      	mov	r3, r2
 8017c78:	009b      	lsls	r3, r3, #2
 8017c7a:	4413      	add	r3, r2
 8017c7c:	00db      	lsls	r3, r3, #3
 8017c7e:	461a      	mov	r2, r3
 8017c80:	697b      	ldr	r3, [r7, #20]
 8017c82:	4413      	add	r3, r2
 8017c84:	685b      	ldr	r3, [r3, #4]
 8017c86:	687a      	ldr	r2, [r7, #4]
 8017c88:	429a      	cmp	r2, r3
 8017c8a:	d123      	bne.n	8017cd4 <_lv_img_cache_open+0x100>
 8017c8c:	8b7a      	ldrh	r2, [r7, #26]
 8017c8e:	4613      	mov	r3, r2
 8017c90:	009b      	lsls	r3, r3, #2
 8017c92:	4413      	add	r3, r2
 8017c94:	00db      	lsls	r3, r3, #3
 8017c96:	461a      	mov	r2, r3
 8017c98:	697b      	ldr	r3, [r7, #20]
 8017c9a:	4413      	add	r3, r2
 8017c9c:	689a      	ldr	r2, [r3, #8]
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	429a      	cmp	r2, r3
 8017ca2:	d117      	bne.n	8017cd4 <_lv_img_cache_open+0x100>
 8017ca4:	2301      	movs	r3, #1
 8017ca6:	767b      	strb	r3, [r7, #25]
 8017ca8:	e014      	b.n	8017cd4 <_lv_img_cache_open+0x100>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
 8017caa:	7cfb      	ldrb	r3, [r7, #19]
 8017cac:	2b01      	cmp	r3, #1
 8017cae:	d111      	bne.n	8017cd4 <_lv_img_cache_open+0x100>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
 8017cb0:	8b7a      	ldrh	r2, [r7, #26]
 8017cb2:	4613      	mov	r3, r2
 8017cb4:	009b      	lsls	r3, r3, #2
 8017cb6:	4413      	add	r3, r2
 8017cb8:	00db      	lsls	r3, r3, #3
 8017cba:	461a      	mov	r2, r3
 8017cbc:	697b      	ldr	r3, [r7, #20]
 8017cbe:	4413      	add	r3, r2
 8017cc0:	685b      	ldr	r3, [r3, #4]
 8017cc2:	6879      	ldr	r1, [r7, #4]
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7e8 fa9f 	bl	8000208 <strcmp>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d101      	bne.n	8017cd4 <_lv_img_cache_open+0x100>
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	767b      	strb	r3, [r7, #25]
        }

        if(match) {
 8017cd4:	7e7b      	ldrb	r3, [r7, #25]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d01b      	beq.n	8017d12 <_lv_img_cache_open+0x13e>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
 8017cda:	8b7a      	ldrh	r2, [r7, #26]
 8017cdc:	4613      	mov	r3, r2
 8017cde:	009b      	lsls	r3, r3, #2
 8017ce0:	4413      	add	r3, r2
 8017ce2:	00db      	lsls	r3, r3, #3
 8017ce4:	461a      	mov	r2, r3
 8017ce6:	697b      	ldr	r3, [r7, #20]
 8017ce8:	4413      	add	r3, r2
 8017cea:	61fb      	str	r3, [r7, #28]
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8017cec:	69fb      	ldr	r3, [r7, #28]
 8017cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cf0:	461a      	mov	r2, r3
 8017cf2:	69fb      	ldr	r3, [r7, #28]
 8017cf4:	699b      	ldr	r3, [r3, #24]
 8017cf6:	4413      	add	r3, r2
 8017cf8:	461a      	mov	r2, r3
 8017cfa:	69fb      	ldr	r3, [r7, #28]
 8017cfc:	625a      	str	r2, [r3, #36]	; 0x24
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 8017cfe:	69fb      	ldr	r3, [r7, #28]
 8017d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017d06:	dd0d      	ble.n	8017d24 <_lv_img_cache_open+0x150>
 8017d08:	69fb      	ldr	r3, [r7, #28]
 8017d0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017d0e:	625a      	str	r2, [r3, #36]	; 0x24
            LV_LOG_TRACE("image draw: image found in the cache");
            break;
 8017d10:	e008      	b.n	8017d24 <_lv_img_cache_open+0x150>
    for(i = 0; i < entry_cnt; i++) {
 8017d12:	8b7b      	ldrh	r3, [r7, #26]
 8017d14:	3301      	adds	r3, #1
 8017d16:	837b      	strh	r3, [r7, #26]
 8017d18:	4b39      	ldr	r3, [pc, #228]	; (8017e00 <_lv_img_cache_open+0x22c>)
 8017d1a:	881b      	ldrh	r3, [r3, #0]
 8017d1c:	8b7a      	ldrh	r2, [r7, #26]
 8017d1e:	429a      	cmp	r2, r3
 8017d20:	d395      	bcc.n	8017c4e <_lv_img_cache_open+0x7a>
 8017d22:	e000      	b.n	8017d26 <_lv_img_cache_open+0x152>
            break;
 8017d24:	bf00      	nop
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
 8017d26:	69fb      	ldr	r3, [r7, #28]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d001      	beq.n	8017d30 <_lv_img_cache_open+0x15c>
 8017d2c:	69fb      	ldr	r3, [r7, #28]
 8017d2e:	e063      	b.n	8017df8 <_lv_img_cache_open+0x224>

    /*Find an entry to reuse. Select the entry with the least life*/
    cached_src = &cache[0];
 8017d30:	697b      	ldr	r3, [r7, #20]
 8017d32:	61fb      	str	r3, [r7, #28]
    for(i = 1; i < entry_cnt; i++) {
 8017d34:	2301      	movs	r3, #1
 8017d36:	837b      	strh	r3, [r7, #26]
 8017d38:	e018      	b.n	8017d6c <_lv_img_cache_open+0x198>
        if(cache[i].life < cached_src->life) {
 8017d3a:	8b7a      	ldrh	r2, [r7, #26]
 8017d3c:	4613      	mov	r3, r2
 8017d3e:	009b      	lsls	r3, r3, #2
 8017d40:	4413      	add	r3, r2
 8017d42:	00db      	lsls	r3, r3, #3
 8017d44:	461a      	mov	r2, r3
 8017d46:	697b      	ldr	r3, [r7, #20]
 8017d48:	4413      	add	r3, r2
 8017d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017d4c:	69fb      	ldr	r3, [r7, #28]
 8017d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d50:	429a      	cmp	r2, r3
 8017d52:	da08      	bge.n	8017d66 <_lv_img_cache_open+0x192>
            cached_src = &cache[i];
 8017d54:	8b7a      	ldrh	r2, [r7, #26]
 8017d56:	4613      	mov	r3, r2
 8017d58:	009b      	lsls	r3, r3, #2
 8017d5a:	4413      	add	r3, r2
 8017d5c:	00db      	lsls	r3, r3, #3
 8017d5e:	461a      	mov	r2, r3
 8017d60:	697b      	ldr	r3, [r7, #20]
 8017d62:	4413      	add	r3, r2
 8017d64:	61fb      	str	r3, [r7, #28]
    for(i = 1; i < entry_cnt; i++) {
 8017d66:	8b7b      	ldrh	r3, [r7, #26]
 8017d68:	3301      	adds	r3, #1
 8017d6a:	837b      	strh	r3, [r7, #26]
 8017d6c:	4b24      	ldr	r3, [pc, #144]	; (8017e00 <_lv_img_cache_open+0x22c>)
 8017d6e:	881b      	ldrh	r3, [r3, #0]
 8017d70:	8b7a      	ldrh	r2, [r7, #26]
 8017d72:	429a      	cmp	r2, r3
 8017d74:	d3e1      	bcc.n	8017d3a <_lv_img_cache_open+0x166>
        }
    }

    /*Close the decoder to reuse if it was opened (has a valid source)*/
    if(cached_src->dec_dsc.src) {
 8017d76:	69fb      	ldr	r3, [r7, #28]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d003      	beq.n	8017d86 <_lv_img_cache_open+0x1b2>
        lv_img_decoder_close(&cached_src->dec_dsc);
 8017d7e:	69fb      	ldr	r3, [r7, #28]
 8017d80:	4618      	mov	r0, r3
 8017d82:	f000 fa5f 	bl	8018244 <lv_img_decoder_close>
#else
    cached_src = &cache_temp;
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start;
    t_start                          = lv_tick_get();
 8017d86:	f002 fba5 	bl	801a4d4 <lv_tick_get>
 8017d8a:	60f8      	str	r0, [r7, #12]
    cached_src->dec_dsc.time_to_open = 0;
 8017d8c:	69fb      	ldr	r3, [r7, #28]
 8017d8e:	2200      	movs	r2, #0
 8017d90:	619a      	str	r2, [r3, #24]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 8017d92:	69fb      	ldr	r3, [r7, #28]
 8017d94:	683a      	ldr	r2, [r7, #0]
 8017d96:	6879      	ldr	r1, [r7, #4]
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f000 f9b7 	bl	801810c <lv_img_decoder_open>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	72fb      	strb	r3, [r7, #11]
    if(open_res == LV_RES_INV) {
 8017da2:	7afb      	ldrb	r3, [r7, #11]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d112      	bne.n	8017dce <_lv_img_cache_open+0x1fa>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_img_decoder_close(&cached_src->dec_dsc);
 8017da8:	69fb      	ldr	r3, [r7, #28]
 8017daa:	4618      	mov	r0, r3
 8017dac:	f000 fa4a 	bl	8018244 <lv_img_decoder_close>
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8017db0:	69fb      	ldr	r3, [r7, #28]
 8017db2:	2124      	movs	r1, #36	; 0x24
 8017db4:	4618      	mov	r0, r3
 8017db6:	f005 f844 	bl	801ce42 <_lv_memset_00>
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
 8017dba:	2128      	movs	r1, #40	; 0x28
 8017dbc:	69f8      	ldr	r0, [r7, #28]
 8017dbe:	f005 f840 	bl	801ce42 <_lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 8017dc2:	69fb      	ldr	r3, [r7, #28]
 8017dc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017dc8:	625a      	str	r2, [r3, #36]	; 0x24
        return NULL;
 8017dca:	2300      	movs	r3, #0
 8017dcc:	e014      	b.n	8017df8 <_lv_img_cache_open+0x224>
    }

    cached_src->life = 0;
 8017dce:	69fb      	ldr	r3, [r7, #28]
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 8017dd4:	69fb      	ldr	r3, [r7, #28]
 8017dd6:	699b      	ldr	r3, [r3, #24]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d105      	bne.n	8017de8 <_lv_img_cache_open+0x214>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8017ddc:	68f8      	ldr	r0, [r7, #12]
 8017dde:	f002 fb93 	bl	801a508 <lv_tick_elaps>
 8017de2:	4602      	mov	r2, r0
 8017de4:	69fb      	ldr	r3, [r7, #28]
 8017de6:	619a      	str	r2, [r3, #24]
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8017de8:	69fb      	ldr	r3, [r7, #28]
 8017dea:	699b      	ldr	r3, [r3, #24]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d102      	bne.n	8017df6 <_lv_img_cache_open+0x222>
 8017df0:	69fb      	ldr	r3, [r7, #28]
 8017df2:	2201      	movs	r2, #1
 8017df4:	619a      	str	r2, [r3, #24]

    return cached_src;
 8017df6:	69fb      	ldr	r3, [r7, #28]
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	3720      	adds	r7, #32
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}
 8017e00:	2001803c 	.word	0x2001803c
 8017e04:	20020460 	.word	0x20020460
 8017e08:	80000002 	.word	0x80000002

08017e0c <lv_img_cache_set_size>:
 * More cached images mean more opened image at same time which might mean more memory usage.
 * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 * @param new_entry_cnt number of image to cache
 */
void lv_img_cache_set_size(uint16_t new_entry_cnt)
{
 8017e0c:	b590      	push	{r4, r7, lr}
 8017e0e:	b085      	sub	sp, #20
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	4603      	mov	r3, r0
 8017e14:	80fb      	strh	r3, [r7, #6]
#if LV_IMG_CACHE_DEF_SIZE == 0
    LV_UNUSED(new_entry_cnt);
    LV_LOG_WARN("Can't change cache size because it's disabled by LV_IMG_CACHE_DEF_SIZE = 0");
#else
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8017e16:	4b2e      	ldr	r3, [pc, #184]	; (8017ed0 <lv_img_cache_set_size+0xc4>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d007      	beq.n	8017e2e <lv_img_cache_set_size+0x22>
        /*Clean the cache before free it*/
        lv_img_cache_invalidate_src(NULL);
 8017e1e:	2000      	movs	r0, #0
 8017e20:	f000 f85c 	bl	8017edc <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8017e24:	4b2a      	ldr	r3, [pc, #168]	; (8017ed0 <lv_img_cache_set_size+0xc4>)
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f004 fae9 	bl	801c400 <lv_mem_free>
    }

    /*Reallocate the cache*/
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 8017e2e:	88fa      	ldrh	r2, [r7, #6]
 8017e30:	4613      	mov	r3, r2
 8017e32:	009b      	lsls	r3, r3, #2
 8017e34:	4413      	add	r3, r2
 8017e36:	00db      	lsls	r3, r3, #3
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f004 fa97 	bl	801c36c <lv_mem_alloc>
 8017e3e:	4602      	mov	r2, r0
 8017e40:	4b23      	ldr	r3, [pc, #140]	; (8017ed0 <lv_img_cache_set_size+0xc4>)
 8017e42:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
 8017e44:	4b22      	ldr	r3, [pc, #136]	; (8017ed0 <lv_img_cache_set_size+0xc4>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	4618      	mov	r0, r3
 8017e4a:	f003 fd03 	bl	801b854 <lv_debug_check_null>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	f083 0301 	eor.w	r3, r3, #1
 8017e54:	b2db      	uxtb	r3, r3
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d009      	beq.n	8017e6e <lv_img_cache_set_size+0x62>
 8017e5a:	4b1d      	ldr	r3, [pc, #116]	; (8017ed0 <lv_img_cache_set_size+0xc4>)
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	f04f 0400 	mov.w	r4, #0
 8017e62:	461a      	mov	r2, r3
 8017e64:	4623      	mov	r3, r4
 8017e66:	481b      	ldr	r0, [pc, #108]	; (8017ed4 <lv_img_cache_set_size+0xc8>)
 8017e68:	f003 fd04 	bl	801b874 <lv_debug_log_error>
 8017e6c:	e7fe      	b.n	8017e6c <lv_img_cache_set_size+0x60>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 8017e6e:	4b18      	ldr	r3, [pc, #96]	; (8017ed0 <lv_img_cache_set_size+0xc4>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d103      	bne.n	8017e7e <lv_img_cache_set_size+0x72>
        entry_cnt = 0;
 8017e76:	4b18      	ldr	r3, [pc, #96]	; (8017ed8 <lv_img_cache_set_size+0xcc>)
 8017e78:	2200      	movs	r2, #0
 8017e7a:	801a      	strh	r2, [r3, #0]
        return;
 8017e7c:	e025      	b.n	8017eca <lv_img_cache_set_size+0xbe>
    }
    entry_cnt = new_entry_cnt;
 8017e7e:	4a16      	ldr	r2, [pc, #88]	; (8017ed8 <lv_img_cache_set_size+0xcc>)
 8017e80:	88fb      	ldrh	r3, [r7, #6]
 8017e82:	8013      	strh	r3, [r2, #0]

    /*Clean the cache*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8017e84:	2300      	movs	r3, #0
 8017e86:	81fb      	strh	r3, [r7, #14]
 8017e88:	e01a      	b.n	8017ec0 <lv_img_cache_set_size+0xb4>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8017e8a:	4b11      	ldr	r3, [pc, #68]	; (8017ed0 <lv_img_cache_set_size+0xc4>)
 8017e8c:	6819      	ldr	r1, [r3, #0]
 8017e8e:	89fa      	ldrh	r2, [r7, #14]
 8017e90:	4613      	mov	r3, r2
 8017e92:	009b      	lsls	r3, r3, #2
 8017e94:	4413      	add	r3, r2
 8017e96:	00db      	lsls	r3, r3, #3
 8017e98:	440b      	add	r3, r1
 8017e9a:	2124      	movs	r1, #36	; 0x24
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f004 ffd0 	bl	801ce42 <_lv_memset_00>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
 8017ea2:	4b0b      	ldr	r3, [pc, #44]	; (8017ed0 <lv_img_cache_set_size+0xc4>)
 8017ea4:	6819      	ldr	r1, [r3, #0]
 8017ea6:	89fa      	ldrh	r2, [r7, #14]
 8017ea8:	4613      	mov	r3, r2
 8017eaa:	009b      	lsls	r3, r3, #2
 8017eac:	4413      	add	r3, r2
 8017eae:	00db      	lsls	r3, r3, #3
 8017eb0:	440b      	add	r3, r1
 8017eb2:	2128      	movs	r1, #40	; 0x28
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f004 ffc4 	bl	801ce42 <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
 8017eba:	89fb      	ldrh	r3, [r7, #14]
 8017ebc:	3301      	adds	r3, #1
 8017ebe:	81fb      	strh	r3, [r7, #14]
 8017ec0:	4b05      	ldr	r3, [pc, #20]	; (8017ed8 <lv_img_cache_set_size+0xcc>)
 8017ec2:	881b      	ldrh	r3, [r3, #0]
 8017ec4:	89fa      	ldrh	r2, [r7, #14]
 8017ec6:	429a      	cmp	r2, r3
 8017ec8:	d3df      	bcc.n	8017e8a <lv_img_cache_set_size+0x7e>
    }
#endif
}
 8017eca:	3714      	adds	r7, #20
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd90      	pop	{r4, r7, pc}
 8017ed0:	20020460 	.word	0x20020460
 8017ed4:	08028378 	.word	0x08028378
 8017ed8:	2001803c 	.word	0x2001803c

08017edc <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b084      	sub	sp, #16
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8017ee4:	4b27      	ldr	r3, [pc, #156]	; (8017f84 <lv_img_cache_invalidate_src+0xa8>)
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	60bb      	str	r3, [r7, #8]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8017eea:	2300      	movs	r3, #0
 8017eec:	81fb      	strh	r3, [r7, #14]
 8017eee:	e03f      	b.n	8017f70 <lv_img_cache_invalidate_src+0x94>
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8017ef0:	89fa      	ldrh	r2, [r7, #14]
 8017ef2:	4613      	mov	r3, r2
 8017ef4:	009b      	lsls	r3, r3, #2
 8017ef6:	4413      	add	r3, r2
 8017ef8:	00db      	lsls	r3, r3, #3
 8017efa:	461a      	mov	r2, r3
 8017efc:	68bb      	ldr	r3, [r7, #8]
 8017efe:	4413      	add	r3, r2
 8017f00:	685b      	ldr	r3, [r3, #4]
 8017f02:	687a      	ldr	r2, [r7, #4]
 8017f04:	429a      	cmp	r2, r3
 8017f06:	d002      	beq.n	8017f0e <lv_img_cache_invalidate_src+0x32>
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d12d      	bne.n	8017f6a <lv_img_cache_invalidate_src+0x8e>
            if(cache[i].dec_dsc.src != NULL) {
 8017f0e:	89fa      	ldrh	r2, [r7, #14]
 8017f10:	4613      	mov	r3, r2
 8017f12:	009b      	lsls	r3, r3, #2
 8017f14:	4413      	add	r3, r2
 8017f16:	00db      	lsls	r3, r3, #3
 8017f18:	461a      	mov	r2, r3
 8017f1a:	68bb      	ldr	r3, [r7, #8]
 8017f1c:	4413      	add	r3, r2
 8017f1e:	685b      	ldr	r3, [r3, #4]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d00a      	beq.n	8017f3a <lv_img_cache_invalidate_src+0x5e>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8017f24:	89fa      	ldrh	r2, [r7, #14]
 8017f26:	4613      	mov	r3, r2
 8017f28:	009b      	lsls	r3, r3, #2
 8017f2a:	4413      	add	r3, r2
 8017f2c:	00db      	lsls	r3, r3, #3
 8017f2e:	461a      	mov	r2, r3
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	4413      	add	r3, r2
 8017f34:	4618      	mov	r0, r3
 8017f36:	f000 f985 	bl	8018244 <lv_img_decoder_close>
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8017f3a:	89fa      	ldrh	r2, [r7, #14]
 8017f3c:	4613      	mov	r3, r2
 8017f3e:	009b      	lsls	r3, r3, #2
 8017f40:	4413      	add	r3, r2
 8017f42:	00db      	lsls	r3, r3, #3
 8017f44:	461a      	mov	r2, r3
 8017f46:	68bb      	ldr	r3, [r7, #8]
 8017f48:	4413      	add	r3, r2
 8017f4a:	2124      	movs	r1, #36	; 0x24
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	f004 ff78 	bl	801ce42 <_lv_memset_00>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
 8017f52:	89fa      	ldrh	r2, [r7, #14]
 8017f54:	4613      	mov	r3, r2
 8017f56:	009b      	lsls	r3, r3, #2
 8017f58:	4413      	add	r3, r2
 8017f5a:	00db      	lsls	r3, r3, #3
 8017f5c:	461a      	mov	r2, r3
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	4413      	add	r3, r2
 8017f62:	2128      	movs	r1, #40	; 0x28
 8017f64:	4618      	mov	r0, r3
 8017f66:	f004 ff6c 	bl	801ce42 <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
 8017f6a:	89fb      	ldrh	r3, [r7, #14]
 8017f6c:	3301      	adds	r3, #1
 8017f6e:	81fb      	strh	r3, [r7, #14]
 8017f70:	4b05      	ldr	r3, [pc, #20]	; (8017f88 <lv_img_cache_invalidate_src+0xac>)
 8017f72:	881b      	ldrh	r3, [r3, #0]
 8017f74:	89fa      	ldrh	r2, [r7, #14]
 8017f76:	429a      	cmp	r2, r3
 8017f78:	d3ba      	bcc.n	8017ef0 <lv_img_cache_invalidate_src+0x14>
        }
    }
#endif
}
 8017f7a:	bf00      	nop
 8017f7c:	3710      	adds	r7, #16
 8017f7e:	46bd      	mov	sp, r7
 8017f80:	bd80      	pop	{r7, pc}
 8017f82:	bf00      	nop
 8017f84:	20020460 	.word	0x20020460
 8017f88:	2001803c 	.word	0x2001803c

08017f8c <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8017f8c:	b490      	push	{r4, r7}
 8017f8e:	b082      	sub	sp, #8
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	4604      	mov	r4, r0
 8017f94:	4608      	mov	r0, r1
 8017f96:	4611      	mov	r1, r2
 8017f98:	4622      	mov	r2, r4
 8017f9a:	71fa      	strb	r2, [r7, #7]
 8017f9c:	4602      	mov	r2, r0
 8017f9e:	71ba      	strb	r2, [r7, #6]
 8017fa0:	460a      	mov	r2, r1
 8017fa2:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 8017fa4:	797a      	ldrb	r2, [r7, #5]
 8017fa6:	f362 0307 	bfi	r3, r2, #0, #8
 8017faa:	79ba      	ldrb	r2, [r7, #6]
 8017fac:	f362 230f 	bfi	r3, r2, #8, #8
 8017fb0:	79fa      	ldrb	r2, [r7, #7]
 8017fb2:	f362 4317 	bfi	r3, r2, #16, #8
 8017fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3708      	adds	r7, #8
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bc90      	pop	{r4, r7}
 8017fc2:	4770      	bx	lr

08017fc4 <_lv_memcpy_small>:
{
 8017fc4:	b480      	push	{r7}
 8017fc6:	b087      	sub	sp, #28
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	60f8      	str	r0, [r7, #12]
 8017fcc:	60b9      	str	r1, [r7, #8]
 8017fce:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8017fd4:	68bb      	ldr	r3, [r7, #8]
 8017fd6:	613b      	str	r3, [r7, #16]
    while(len) {
 8017fd8:	e00c      	b.n	8017ff4 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8017fda:	693b      	ldr	r3, [r7, #16]
 8017fdc:	781a      	ldrb	r2, [r3, #0]
 8017fde:	697b      	ldr	r3, [r7, #20]
 8017fe0:	701a      	strb	r2, [r3, #0]
        d8++;
 8017fe2:	697b      	ldr	r3, [r7, #20]
 8017fe4:	3301      	adds	r3, #1
 8017fe6:	617b      	str	r3, [r7, #20]
        s8++;
 8017fe8:	693b      	ldr	r3, [r7, #16]
 8017fea:	3301      	adds	r3, #1
 8017fec:	613b      	str	r3, [r7, #16]
        len--;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	3b01      	subs	r3, #1
 8017ff2:	607b      	str	r3, [r7, #4]
    while(len) {
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d1ef      	bne.n	8017fda <_lv_memcpy_small+0x16>
    return dst;
 8017ffa:	68fb      	ldr	r3, [r7, #12]
}
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	371c      	adds	r7, #28
 8018000:	46bd      	mov	sp, r7
 8018002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018006:	4770      	bx	lr

08018008 <_lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 * */
void _lv_img_decoder_init(void)
{
 8018008:	b590      	push	{r4, r7, lr}
 801800a:	b083      	sub	sp, #12
 801800c:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 801800e:	2110      	movs	r1, #16
 8018010:	4817      	ldr	r0, [pc, #92]	; (8018070 <_lv_img_decoder_init+0x68>)
 8018012:	f003 fe5f 	bl	801bcd4 <_lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 8018016:	f000 f93b 	bl	8018290 <lv_img_decoder_create>
 801801a:	6078      	str	r0, [r7, #4]
    if(decoder == NULL) {
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d111      	bne.n	8018046 <_lv_img_decoder_init+0x3e>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        LV_ASSERT_MEM(decoder);
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f003 fc16 	bl	801b854 <lv_debug_check_null>
 8018028:	4603      	mov	r3, r0
 801802a:	f083 0301 	eor.w	r3, r3, #1
 801802e:	b2db      	uxtb	r3, r3
 8018030:	2b00      	cmp	r3, #0
 8018032:	d019      	beq.n	8018068 <_lv_img_decoder_init+0x60>
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	f04f 0400 	mov.w	r4, #0
 801803a:	461a      	mov	r2, r3
 801803c:	4623      	mov	r3, r4
 801803e:	480d      	ldr	r0, [pc, #52]	; (8018074 <_lv_img_decoder_init+0x6c>)
 8018040:	f003 fc18 	bl	801b874 <lv_debug_log_error>
 8018044:	e7fe      	b.n	8018044 <_lv_img_decoder_init+0x3c>
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8018046:	490c      	ldr	r1, [pc, #48]	; (8018078 <_lv_img_decoder_init+0x70>)
 8018048:	6878      	ldr	r0, [r7, #4]
 801804a:	f000 f94d 	bl	80182e8 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 801804e:	490b      	ldr	r1, [pc, #44]	; (801807c <_lv_img_decoder_init+0x74>)
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f000 f957 	bl	8018304 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8018056:	490a      	ldr	r1, [pc, #40]	; (8018080 <_lv_img_decoder_init+0x78>)
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f000 f961 	bl	8018320 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 801805e:	4909      	ldr	r1, [pc, #36]	; (8018084 <_lv_img_decoder_init+0x7c>)
 8018060:	6878      	ldr	r0, [r7, #4]
 8018062:	f000 f96b 	bl	801833c <lv_img_decoder_set_close_cb>
 8018066:	e000      	b.n	801806a <_lv_img_decoder_init+0x62>
        return;
 8018068:	bf00      	nop
}
 801806a:	370c      	adds	r7, #12
 801806c:	46bd      	mov	sp, r7
 801806e:	bd90      	pop	{r4, r7, pc}
 8018070:	200203ac 	.word	0x200203ac
 8018074:	08028388 	.word	0x08028388
 8018078:	08018359 	.word	0x08018359
 801807c:	08018475 	.word	0x08018475
 8018080:	0801881d 	.word	0x0801881d
 8018084:	08018941 	.word	0x08018941

08018088 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const char * src, lv_img_header_t * header)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b084      	sub	sp, #16
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
 8018090:	6039      	str	r1, [r7, #0]
    header->always_zero = 0;
 8018092:	683a      	ldr	r2, [r7, #0]
 8018094:	7813      	ldrb	r3, [r2, #0]
 8018096:	f36f 1347 	bfc	r3, #5, #3
 801809a:	7013      	strb	r3, [r2, #0]
    header->h = 0;
 801809c:	683a      	ldr	r2, [r7, #0]
 801809e:	8853      	ldrh	r3, [r2, #2]
 80180a0:	f36f 134f 	bfc	r3, #5, #11
 80180a4:	8053      	strh	r3, [r2, #2]
    header->w = 0;
 80180a6:	683a      	ldr	r2, [r7, #0]
 80180a8:	6813      	ldr	r3, [r2, #0]
 80180aa:	f36f 2394 	bfc	r3, #10, #11
 80180ae:	6013      	str	r3, [r2, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
 80180b0:	683a      	ldr	r2, [r7, #0]
 80180b2:	7813      	ldrb	r3, [r2, #0]
 80180b4:	f36f 0304 	bfc	r3, #0, #5
 80180b8:	7013      	strb	r3, [r2, #0]

    lv_res_t res = LV_RES_INV;
 80180ba:	2300      	movs	r3, #0
 80180bc:	73fb      	strb	r3, [r7, #15]
    lv_img_decoder_t * d;
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80180be:	4812      	ldr	r0, [pc, #72]	; (8018108 <lv_img_decoder_get_info+0x80>)
 80180c0:	f003 ff7e 	bl	801bfc0 <_lv_ll_get_head>
 80180c4:	60b8      	str	r0, [r7, #8]
 80180c6:	e015      	b.n	80180f4 <lv_img_decoder_get_info+0x6c>
        res = LV_RES_INV;
 80180c8:	2300      	movs	r3, #0
 80180ca:	73fb      	strb	r3, [r7, #15]
        if(d->info_cb) {
 80180cc:	68bb      	ldr	r3, [r7, #8]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d00a      	beq.n	80180ea <lv_img_decoder_get_info+0x62>
            res = d->info_cb(d, src, header);
 80180d4:	68bb      	ldr	r3, [r7, #8]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	683a      	ldr	r2, [r7, #0]
 80180da:	6879      	ldr	r1, [r7, #4]
 80180dc:	68b8      	ldr	r0, [r7, #8]
 80180de:	4798      	blx	r3
 80180e0:	4603      	mov	r3, r0
 80180e2:	73fb      	strb	r3, [r7, #15]
            if(res == LV_RES_OK) break;
 80180e4:	7bfb      	ldrb	r3, [r7, #15]
 80180e6:	2b01      	cmp	r3, #1
 80180e8:	d008      	beq.n	80180fc <lv_img_decoder_get_info+0x74>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80180ea:	68b9      	ldr	r1, [r7, #8]
 80180ec:	4806      	ldr	r0, [pc, #24]	; (8018108 <lv_img_decoder_get_info+0x80>)
 80180ee:	f003 ff8d 	bl	801c00c <_lv_ll_get_next>
 80180f2:	60b8      	str	r0, [r7, #8]
 80180f4:	68bb      	ldr	r3, [r7, #8]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d1e6      	bne.n	80180c8 <lv_img_decoder_get_info+0x40>
 80180fa:	e000      	b.n	80180fe <lv_img_decoder_get_info+0x76>
            if(res == LV_RES_OK) break;
 80180fc:	bf00      	nop
        }
    }

    return res;
 80180fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8018100:	4618      	mov	r0, r3
 8018102:	3710      	adds	r7, #16
 8018104:	46bd      	mov	sp, r7
 8018106:	bd80      	pop	{r7, pc}
 8018108:	200203ac 	.word	0x200203ac

0801810c <lv_img_decoder_open>:
 * @param color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return LV_RES_OK: opened the image. `dsc->img_data` and `dsc->header` are set.
 *         LV_RES_INV: none of the registered image decoders were able to open the image.
 */
lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, lv_color_t color)
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b088      	sub	sp, #32
 8018110:	af00      	add	r7, sp, #0
 8018112:	60f8      	str	r0, [r7, #12]
 8018114:	60b9      	str	r1, [r7, #8]
 8018116:	607a      	str	r2, [r7, #4]
    dsc->color     = color;
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	687a      	ldr	r2, [r7, #4]
 801811c:	609a      	str	r2, [r3, #8]
    dsc->src_type  = lv_img_src_get_type(src);
 801811e:	68b8      	ldr	r0, [r7, #8]
 8018120:	f7f5 ffb0 	bl	800e084 <lv_img_src_get_type>
 8018124:	4603      	mov	r3, r0
 8018126:	461a      	mov	r2, r3
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	731a      	strb	r2, [r3, #12]
    dsc->user_data = NULL;
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	2200      	movs	r2, #0
 8018130:	621a      	str	r2, [r3, #32]

    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	7b1b      	ldrb	r3, [r3, #12]
 8018136:	2b01      	cmp	r3, #1
 8018138:	d112      	bne.n	8018160 <lv_img_decoder_open+0x54>
        size_t fnlen = strlen(src);
 801813a:	68b8      	ldr	r0, [r7, #8]
 801813c:	f7e8 f86e 	bl	800021c <strlen>
 8018140:	6178      	str	r0, [r7, #20]
        dsc->src = lv_mem_alloc(fnlen + 1);
 8018142:	697b      	ldr	r3, [r7, #20]
 8018144:	3301      	adds	r3, #1
 8018146:	4618      	mov	r0, r3
 8018148:	f004 f910 	bl	801c36c <lv_mem_alloc>
 801814c:	4602      	mov	r2, r0
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	605a      	str	r2, [r3, #4]
        strcpy((char *)dsc->src, src);
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	685b      	ldr	r3, [r3, #4]
 8018156:	68b9      	ldr	r1, [r7, #8]
 8018158:	4618      	mov	r0, r3
 801815a:	f010 f8c4 	bl	80282e6 <strcpy>
 801815e:	e002      	b.n	8018166 <lv_img_decoder_open+0x5a>
    }
    else {
        dsc->src       = src;
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	68ba      	ldr	r2, [r7, #8]
 8018164:	605a      	str	r2, [r3, #4]
    }

    lv_res_t res = LV_RES_INV;
 8018166:	2300      	movs	r3, #0
 8018168:	77fb      	strb	r3, [r7, #31]

    lv_img_decoder_t * d;
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 801816a:	481f      	ldr	r0, [pc, #124]	; (80181e8 <lv_img_decoder_open+0xdc>)
 801816c:	f003 ff28 	bl	801bfc0 <_lv_ll_get_head>
 8018170:	61b8      	str	r0, [r7, #24]
 8018172:	e02f      	b.n	80181d4 <lv_img_decoder_open+0xc8>
        /*Info an Open callbacks are required*/
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8018174:	69bb      	ldr	r3, [r7, #24]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d023      	beq.n	80181c4 <lv_img_decoder_open+0xb8>
 801817c:	69bb      	ldr	r3, [r7, #24]
 801817e:	685b      	ldr	r3, [r3, #4]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d01f      	beq.n	80181c4 <lv_img_decoder_open+0xb8>

        res = d->info_cb(d, src, &dsc->header);
 8018184:	69bb      	ldr	r3, [r7, #24]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	68fa      	ldr	r2, [r7, #12]
 801818a:	3210      	adds	r2, #16
 801818c:	68b9      	ldr	r1, [r7, #8]
 801818e:	69b8      	ldr	r0, [r7, #24]
 8018190:	4798      	blx	r3
 8018192:	4603      	mov	r3, r0
 8018194:	77fb      	strb	r3, [r7, #31]
        if(res != LV_RES_OK) continue;
 8018196:	7ffb      	ldrb	r3, [r7, #31]
 8018198:	2b01      	cmp	r3, #1
 801819a:	d115      	bne.n	80181c8 <lv_img_decoder_open+0xbc>

        dsc->error_msg = NULL;
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	2200      	movs	r2, #0
 80181a0:	61da      	str	r2, [r3, #28]
        dsc->img_data  = NULL;
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	2200      	movs	r2, #0
 80181a6:	615a      	str	r2, [r3, #20]
        dsc->decoder   = d;
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	69ba      	ldr	r2, [r7, #24]
 80181ac:	601a      	str	r2, [r3, #0]

        res = d->open_cb(d, dsc);
 80181ae:	69bb      	ldr	r3, [r7, #24]
 80181b0:	685b      	ldr	r3, [r3, #4]
 80181b2:	68f9      	ldr	r1, [r7, #12]
 80181b4:	69b8      	ldr	r0, [r7, #24]
 80181b6:	4798      	blx	r3
 80181b8:	4603      	mov	r3, r0
 80181ba:	77fb      	strb	r3, [r7, #31]

        /*Opened successfully. It is a good decoder to for this image source*/
        if(res == LV_RES_OK) break;
 80181bc:	7ffb      	ldrb	r3, [r7, #31]
 80181be:	2b01      	cmp	r3, #1
 80181c0:	d00c      	beq.n	80181dc <lv_img_decoder_open+0xd0>
 80181c2:	e002      	b.n	80181ca <lv_img_decoder_open+0xbe>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 80181c4:	bf00      	nop
 80181c6:	e000      	b.n	80181ca <lv_img_decoder_open+0xbe>
        if(res != LV_RES_OK) continue;
 80181c8:	bf00      	nop
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80181ca:	69b9      	ldr	r1, [r7, #24]
 80181cc:	4806      	ldr	r0, [pc, #24]	; (80181e8 <lv_img_decoder_open+0xdc>)
 80181ce:	f003 ff1d 	bl	801c00c <_lv_ll_get_next>
 80181d2:	61b8      	str	r0, [r7, #24]
 80181d4:	69bb      	ldr	r3, [r7, #24]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d1cc      	bne.n	8018174 <lv_img_decoder_open+0x68>
 80181da:	e000      	b.n	80181de <lv_img_decoder_open+0xd2>
        if(res == LV_RES_OK) break;
 80181dc:	bf00      	nop
    }

    return res;
 80181de:	7ffb      	ldrb	r3, [r7, #31]
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	3720      	adds	r7, #32
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd80      	pop	{r7, pc}
 80181e8:	200203ac 	.word	0x200203ac

080181ec <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 80181ec:	b590      	push	{r4, r7, lr}
 80181ee:	b089      	sub	sp, #36	; 0x24
 80181f0:	af02      	add	r7, sp, #8
 80181f2:	60f8      	str	r0, [r7, #12]
 80181f4:	4608      	mov	r0, r1
 80181f6:	4611      	mov	r1, r2
 80181f8:	461a      	mov	r2, r3
 80181fa:	4603      	mov	r3, r0
 80181fc:	817b      	strh	r3, [r7, #10]
 80181fe:	460b      	mov	r3, r1
 8018200:	813b      	strh	r3, [r7, #8]
 8018202:	4613      	mov	r3, r2
 8018204:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 8018206:	2300      	movs	r3, #0
 8018208:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	689b      	ldr	r3, [r3, #8]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d012      	beq.n	801823a <lv_img_decoder_read_line+0x4e>
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	689c      	ldr	r4, [r3, #8]
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	6818      	ldr	r0, [r3, #0]
 801821e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8018222:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018228:	9301      	str	r3, [sp, #4]
 801822a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801822e:	9300      	str	r3, [sp, #0]
 8018230:	460b      	mov	r3, r1
 8018232:	68f9      	ldr	r1, [r7, #12]
 8018234:	47a0      	blx	r4
 8018236:	4603      	mov	r3, r0
 8018238:	75fb      	strb	r3, [r7, #23]

    return res;
 801823a:	7dfb      	ldrb	r3, [r7, #23]
}
 801823c:	4618      	mov	r0, r3
 801823e:	371c      	adds	r7, #28
 8018240:	46bd      	mov	sp, r7
 8018242:	bd90      	pop	{r4, r7, pc}

08018244 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b082      	sub	sp, #8
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d018      	beq.n	8018286 <lv_img_decoder_close+0x42>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	68db      	ldr	r3, [r3, #12]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d007      	beq.n	801826e <lv_img_decoder_close+0x2a>
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	68db      	ldr	r3, [r3, #12]
 8018264:	687a      	ldr	r2, [r7, #4]
 8018266:	6812      	ldr	r2, [r2, #0]
 8018268:	6879      	ldr	r1, [r7, #4]
 801826a:	4610      	mov	r0, r2
 801826c:	4798      	blx	r3

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	7b1b      	ldrb	r3, [r3, #12]
 8018272:	2b01      	cmp	r3, #1
 8018274:	d107      	bne.n	8018286 <lv_img_decoder_close+0x42>
            lv_mem_free(dsc->src);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	685b      	ldr	r3, [r3, #4]
 801827a:	4618      	mov	r0, r3
 801827c:	f004 f8c0 	bl	801c400 <lv_mem_free>
            dsc->src = NULL;
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	2200      	movs	r2, #0
 8018284:	605a      	str	r2, [r3, #4]
        }
    }
}
 8018286:	bf00      	nop
 8018288:	3708      	adds	r7, #8
 801828a:	46bd      	mov	sp, r7
 801828c:	bd80      	pop	{r7, pc}
	...

08018290 <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 8018290:	b590      	push	{r4, r7, lr}
 8018292:	b083      	sub	sp, #12
 8018294:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 8018296:	4812      	ldr	r0, [pc, #72]	; (80182e0 <lv_img_decoder_create+0x50>)
 8018298:	f003 fd35 	bl	801bd06 <_lv_ll_ins_head>
 801829c:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MEM(decoder);
 801829e:	6878      	ldr	r0, [r7, #4]
 80182a0:	f003 fad8 	bl	801b854 <lv_debug_check_null>
 80182a4:	4603      	mov	r3, r0
 80182a6:	f083 0301 	eor.w	r3, r3, #1
 80182aa:	b2db      	uxtb	r3, r3
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d008      	beq.n	80182c2 <lv_img_decoder_create+0x32>
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	f04f 0400 	mov.w	r4, #0
 80182b6:	461a      	mov	r2, r3
 80182b8:	4623      	mov	r3, r4
 80182ba:	480a      	ldr	r0, [pc, #40]	; (80182e4 <lv_img_decoder_create+0x54>)
 80182bc:	f003 fada 	bl	801b874 <lv_debug_log_error>
 80182c0:	e7fe      	b.n	80182c0 <lv_img_decoder_create+0x30>
    if(decoder == NULL) return NULL;
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d101      	bne.n	80182cc <lv_img_decoder_create+0x3c>
 80182c8:	2300      	movs	r3, #0
 80182ca:	e004      	b.n	80182d6 <lv_img_decoder_create+0x46>

    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 80182cc:	2110      	movs	r1, #16
 80182ce:	6878      	ldr	r0, [r7, #4]
 80182d0:	f004 fdb7 	bl	801ce42 <_lv_memset_00>

    return decoder;
 80182d4:	687b      	ldr	r3, [r7, #4]
}
 80182d6:	4618      	mov	r0, r3
 80182d8:	370c      	adds	r7, #12
 80182da:	46bd      	mov	sp, r7
 80182dc:	bd90      	pop	{r4, r7, pc}
 80182de:	bf00      	nop
 80182e0:	200203ac 	.word	0x200203ac
 80182e4:	08028388 	.word	0x08028388

080182e8 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 80182e8:	b480      	push	{r7}
 80182ea:	b083      	sub	sp, #12
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
 80182f0:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	683a      	ldr	r2, [r7, #0]
 80182f6:	601a      	str	r2, [r3, #0]
}
 80182f8:	bf00      	nop
 80182fa:	370c      	adds	r7, #12
 80182fc:	46bd      	mov	sp, r7
 80182fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018302:	4770      	bx	lr

08018304 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8018304:	b480      	push	{r7}
 8018306:	b083      	sub	sp, #12
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
 801830c:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	683a      	ldr	r2, [r7, #0]
 8018312:	605a      	str	r2, [r3, #4]
}
 8018314:	bf00      	nop
 8018316:	370c      	adds	r7, #12
 8018318:	46bd      	mov	sp, r7
 801831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801831e:	4770      	bx	lr

08018320 <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 8018320:	b480      	push	{r7}
 8018322:	b083      	sub	sp, #12
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
 8018328:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	683a      	ldr	r2, [r7, #0]
 801832e:	609a      	str	r2, [r3, #8]
}
 8018330:	bf00      	nop
 8018332:	370c      	adds	r7, #12
 8018334:	46bd      	mov	sp, r7
 8018336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801833a:	4770      	bx	lr

0801833c <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 801833c:	b480      	push	{r7}
 801833e:	b083      	sub	sp, #12
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
 8018344:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	683a      	ldr	r2, [r7, #0]
 801834a:	60da      	str	r2, [r3, #12]
}
 801834c:	bf00      	nop
 801834e:	370c      	adds	r7, #12
 8018350:	46bd      	mov	sp, r7
 8018352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018356:	4770      	bx	lr

08018358 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b088      	sub	sp, #32
 801835c:	af00      	add	r7, sp, #0
 801835e:	60f8      	str	r0, [r7, #12]
 8018360:	60b9      	str	r1, [r7, #8]
 8018362:	607a      	str	r2, [r7, #4]
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8018364:	68b8      	ldr	r0, [r7, #8]
 8018366:	f7f5 fe8d 	bl	800e084 <lv_img_src_get_type>
 801836a:	4603      	mov	r3, r0
 801836c:	77fb      	strb	r3, [r7, #31]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801836e:	7ffb      	ldrb	r3, [r7, #31]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d12c      	bne.n	80183ce <lv_img_decoder_built_in_info+0x76>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8018374:	68bb      	ldr	r3, [r7, #8]
 8018376:	781b      	ldrb	r3, [r3, #0]
 8018378:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801837c:	b2db      	uxtb	r3, r3
 801837e:	777b      	strb	r3, [r7, #29]
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8018380:	7f7b      	ldrb	r3, [r7, #29]
 8018382:	2b03      	cmp	r3, #3
 8018384:	d902      	bls.n	801838c <lv_img_decoder_built_in_info+0x34>
 8018386:	7f7b      	ldrb	r3, [r7, #29]
 8018388:	2b0e      	cmp	r3, #14
 801838a:	d901      	bls.n	8018390 <lv_img_decoder_built_in_info+0x38>
 801838c:	2300      	movs	r3, #0
 801838e:	e06d      	b.n	801846c <lv_img_decoder_built_in_info+0x114>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8018390:	68bb      	ldr	r3, [r7, #8]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018398:	b299      	uxth	r1, r3
 801839a:	687a      	ldr	r2, [r7, #4]
 801839c:	6813      	ldr	r3, [r2, #0]
 801839e:	f361 2394 	bfi	r3, r1, #10, #11
 80183a2:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80183a4:	68bb      	ldr	r3, [r7, #8]
 80183a6:	885b      	ldrh	r3, [r3, #2]
 80183a8:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80183ac:	b299      	uxth	r1, r3
 80183ae:	687a      	ldr	r2, [r7, #4]
 80183b0:	8853      	ldrh	r3, [r2, #2]
 80183b2:	f361 134f 	bfi	r3, r1, #5, #11
 80183b6:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80183b8:	68bb      	ldr	r3, [r7, #8]
 80183ba:	781b      	ldrb	r3, [r3, #0]
 80183bc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80183c0:	b2d9      	uxtb	r1, r3
 80183c2:	687a      	ldr	r2, [r7, #4]
 80183c4:	7813      	ldrb	r3, [r2, #0]
 80183c6:	f361 0304 	bfi	r3, r1, #0, #5
 80183ca:	7013      	strb	r3, [r2, #0]
 80183cc:	e04d      	b.n	801846a <lv_img_decoder_built_in_info+0x112>
    }
#if LV_USE_FILESYSTEM
    else if(src_type == LV_IMG_SRC_FILE) {
 80183ce:	7ffb      	ldrb	r3, [r7, #31]
 80183d0:	2b01      	cmp	r3, #1
 80183d2:	d132      	bne.n	801843a <lv_img_decoder_built_in_info+0xe2>
        lv_fs_file_t file;
        lv_fs_res_t res;
        uint32_t rn;
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 80183d4:	f107 0314 	add.w	r3, r7, #20
 80183d8:	2202      	movs	r2, #2
 80183da:	68b9      	ldr	r1, [r7, #8]
 80183dc:	4618      	mov	r0, r3
 80183de:	f003 fae3 	bl	801b9a8 <lv_fs_open>
 80183e2:	4603      	mov	r3, r0
 80183e4:	77bb      	strb	r3, [r7, #30]
        if(res == LV_FS_RES_OK) {
 80183e6:	7fbb      	ldrb	r3, [r7, #30]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d116      	bne.n	801841a <lv_img_decoder_built_in_info+0xc2>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 80183ec:	f107 0310 	add.w	r3, r7, #16
 80183f0:	f107 0014 	add.w	r0, r7, #20
 80183f4:	2204      	movs	r2, #4
 80183f6:	6879      	ldr	r1, [r7, #4]
 80183f8:	f003 fba2 	bl	801bb40 <lv_fs_read>
 80183fc:	4603      	mov	r3, r0
 80183fe:	77bb      	strb	r3, [r7, #30]
            lv_fs_close(&file);
 8018400:	f107 0314 	add.w	r3, r7, #20
 8018404:	4618      	mov	r0, r3
 8018406:	f003 fb6f 	bl	801bae8 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 801840a:	7fbb      	ldrb	r3, [r7, #30]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d102      	bne.n	8018416 <lv_img_decoder_built_in_info+0xbe>
 8018410:	693b      	ldr	r3, [r7, #16]
 8018412:	2b04      	cmp	r3, #4
 8018414:	d001      	beq.n	801841a <lv_img_decoder_built_in_info+0xc2>
                LV_LOG_WARN("Image get info get read file header");
                return LV_RES_INV;
 8018416:	2300      	movs	r3, #0
 8018418:	e028      	b.n	801846c <lv_img_decoder_built_in_info+0x114>
            }
        }

        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	781b      	ldrb	r3, [r3, #0]
 801841e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018422:	b2db      	uxtb	r3, r3
 8018424:	2b03      	cmp	r3, #3
 8018426:	d906      	bls.n	8018436 <lv_img_decoder_built_in_info+0xde>
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	781b      	ldrb	r3, [r3, #0]
 801842c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018430:	b2db      	uxtb	r3, r3
 8018432:	2b0e      	cmp	r3, #14
 8018434:	d919      	bls.n	801846a <lv_img_decoder_built_in_info+0x112>
 8018436:	2300      	movs	r3, #0
 8018438:	e018      	b.n	801846c <lv_img_decoder_built_in_info+0x114>

    }
#endif
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 801843a:	7ffb      	ldrb	r3, [r7, #31]
 801843c:	2b02      	cmp	r3, #2
 801843e:	d112      	bne.n	8018466 <lv_img_decoder_built_in_info+0x10e>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         * function*/
        header->w = 1;
 8018440:	687a      	ldr	r2, [r7, #4]
 8018442:	6813      	ldr	r3, [r2, #0]
 8018444:	2101      	movs	r1, #1
 8018446:	f361 2394 	bfi	r3, r1, #10, #11
 801844a:	6013      	str	r3, [r2, #0]
        header->h = 1;
 801844c:	687a      	ldr	r2, [r7, #4]
 801844e:	8853      	ldrh	r3, [r2, #2]
 8018450:	2101      	movs	r1, #1
 8018452:	f361 134f 	bfi	r3, r1, #5, #11
 8018456:	8053      	strh	r3, [r2, #2]
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8018458:	687a      	ldr	r2, [r7, #4]
 801845a:	7813      	ldrb	r3, [r2, #0]
 801845c:	210b      	movs	r1, #11
 801845e:	f361 0304 	bfi	r3, r1, #0, #5
 8018462:	7013      	strb	r3, [r2, #0]
 8018464:	e001      	b.n	801846a <lv_img_decoder_built_in_info+0x112>
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 8018466:	2300      	movs	r3, #0
 8018468:	e000      	b.n	801846c <lv_img_decoder_built_in_info+0x114>
    }
    return LV_RES_OK;
 801846a:	2301      	movs	r3, #1
}
 801846c:	4618      	mov	r0, r3
 801846e:	3720      	adds	r7, #32
 8018470:	46bd      	mov	sp, r7
 8018472:	bd80      	pop	{r7, pc}

08018474 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `style` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8018474:	b5b0      	push	{r4, r5, r7, lr}
 8018476:	b08e      	sub	sp, #56	; 0x38
 8018478:	af00      	add	r7, sp, #0
 801847a:	6078      	str	r0, [r7, #4]
 801847c:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801847e:	683b      	ldr	r3, [r7, #0]
 8018480:	7b1b      	ldrb	r3, [r3, #12]
 8018482:	2b01      	cmp	r3, #1
 8018484:	d17b      	bne.n	801857e <lv_img_decoder_built_in_open+0x10a>
#if LV_USE_FILESYSTEM

        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8018486:	683b      	ldr	r3, [r7, #0]
 8018488:	685b      	ldr	r3, [r3, #4]
 801848a:	4618      	mov	r0, r3
 801848c:	f003 fbd0 	bl	801bc30 <lv_fs_get_ext>
 8018490:	4603      	mov	r3, r0
 8018492:	49a4      	ldr	r1, [pc, #656]	; (8018724 <lv_img_decoder_built_in_open+0x2b0>)
 8018494:	4618      	mov	r0, r3
 8018496:	f7e7 feb7 	bl	8000208 <strcmp>
 801849a:	4603      	mov	r3, r0
 801849c:	2b00      	cmp	r3, #0
 801849e:	d001      	beq.n	80184a4 <lv_img_decoder_built_in_open+0x30>
 80184a0:	2300      	movs	r3, #0
 80184a2:	e1b6      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 80184a4:	683b      	ldr	r3, [r7, #0]
 80184a6:	6859      	ldr	r1, [r3, #4]
 80184a8:	f107 0310 	add.w	r3, r7, #16
 80184ac:	2202      	movs	r2, #2
 80184ae:	4618      	mov	r0, r3
 80184b0:	f003 fa7a 	bl	801b9a8 <lv_fs_open>
 80184b4:	4603      	mov	r3, r0
 80184b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(res != LV_FS_RES_OK) {
 80184ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d001      	beq.n	80184c6 <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 80184c2:	2300      	movs	r3, #0
 80184c4:	e1a5      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 80184c6:	683b      	ldr	r3, [r7, #0]
 80184c8:	6a1b      	ldr	r3, [r3, #32]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d126      	bne.n	801851c <lv_img_decoder_built_in_open+0xa8>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80184ce:	200c      	movs	r0, #12
 80184d0:	f003 ff4c 	bl	801c36c <lv_mem_alloc>
 80184d4:	4602      	mov	r2, r0
 80184d6:	683b      	ldr	r3, [r7, #0]
 80184d8:	621a      	str	r2, [r3, #32]
            LV_ASSERT_MEM(dsc->user_data);
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	6a1b      	ldr	r3, [r3, #32]
 80184de:	4618      	mov	r0, r3
 80184e0:	f003 f9b8 	bl	801b854 <lv_debug_check_null>
 80184e4:	4603      	mov	r3, r0
 80184e6:	f083 0301 	eor.w	r3, r3, #1
 80184ea:	b2db      	uxtb	r3, r3
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d009      	beq.n	8018504 <lv_img_decoder_built_in_open+0x90>
 80184f0:	683b      	ldr	r3, [r7, #0]
 80184f2:	6a1b      	ldr	r3, [r3, #32]
 80184f4:	f04f 0400 	mov.w	r4, #0
 80184f8:	461a      	mov	r2, r3
 80184fa:	4623      	mov	r3, r4
 80184fc:	488a      	ldr	r0, [pc, #552]	; (8018728 <lv_img_decoder_built_in_open+0x2b4>)
 80184fe:	f003 f9b9 	bl	801b874 <lv_debug_log_error>
 8018502:	e7fe      	b.n	8018502 <lv_img_decoder_built_in_open+0x8e>
            if(dsc->user_data == NULL) {
 8018504:	683b      	ldr	r3, [r7, #0]
 8018506:	6a1b      	ldr	r3, [r3, #32]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d101      	bne.n	8018510 <lv_img_decoder_built_in_open+0x9c>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                return LV_RES_INV;
 801850c:	2300      	movs	r3, #0
 801850e:	e180      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>
            }
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8018510:	683b      	ldr	r3, [r7, #0]
 8018512:	6a1b      	ldr	r3, [r3, #32]
 8018514:	210c      	movs	r1, #12
 8018516:	4618      	mov	r0, r3
 8018518:	f004 fc93 	bl	801ce42 <_lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	6a1b      	ldr	r3, [r3, #32]
 8018520:	62bb      	str	r3, [r7, #40]	; 0x28
        user_data->f = lv_mem_alloc(sizeof(f));
 8018522:	2008      	movs	r0, #8
 8018524:	f003 ff22 	bl	801c36c <lv_mem_alloc>
 8018528:	4602      	mov	r2, r0
 801852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801852c:	601a      	str	r2, [r3, #0]
        LV_ASSERT_MEM(user_data->f);
 801852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	4618      	mov	r0, r3
 8018534:	f003 f98e 	bl	801b854 <lv_debug_check_null>
 8018538:	4603      	mov	r3, r0
 801853a:	f083 0301 	eor.w	r3, r3, #1
 801853e:	b2db      	uxtb	r3, r3
 8018540:	2b00      	cmp	r3, #0
 8018542:	d009      	beq.n	8018558 <lv_img_decoder_built_in_open+0xe4>
 8018544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	f04f 0400 	mov.w	r4, #0
 801854c:	461a      	mov	r2, r3
 801854e:	4623      	mov	r3, r4
 8018550:	4875      	ldr	r0, [pc, #468]	; (8018728 <lv_img_decoder_built_in_open+0x2b4>)
 8018552:	f003 f98f 	bl	801b874 <lv_debug_log_error>
 8018556:	e7fe      	b.n	8018556 <lv_img_decoder_built_in_open+0xe2>
        if(user_data->f == NULL) {
 8018558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d105      	bne.n	801856c <lv_img_decoder_built_in_open+0xf8>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8018560:	6839      	ldr	r1, [r7, #0]
 8018562:	6878      	ldr	r0, [r7, #4]
 8018564:	f000 f9ec 	bl	8018940 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8018568:	2300      	movs	r3, #0
 801856a:	e152      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>
        }

        _lv_memcpy_small(user_data->f, &f, sizeof(f));
 801856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	f107 0110 	add.w	r1, r7, #16
 8018574:	2208      	movs	r2, #8
 8018576:	4618      	mov	r0, r3
 8018578:	f7ff fd24 	bl	8017fc4 <_lv_memcpy_small>
 801857c:	e00a      	b.n	8018594 <lv_img_decoder_built_in_open+0x120>
#else
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
        return LV_RES_INV;
#endif
    }
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	7b1b      	ldrb	r3, [r3, #12]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d106      	bne.n	8018594 <lv_img_decoder_built_in_open+0x120>
        /*The variables should have valid data*/
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8018586:	683b      	ldr	r3, [r7, #0]
 8018588:	685b      	ldr	r3, [r3, #4]
 801858a:	689b      	ldr	r3, [r3, #8]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d101      	bne.n	8018594 <lv_img_decoder_built_in_open+0x120>
            return LV_RES_INV;
 8018590:	2300      	movs	r3, #0
 8018592:	e13e      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>
        }
    }

    lv_img_cf_t cf = dsc->header.cf;
 8018594:	683b      	ldr	r3, [r7, #0]
 8018596:	7c1b      	ldrb	r3, [r3, #16]
 8018598:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801859c:	b2db      	uxtb	r3, r3
 801859e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80185a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185a6:	2b04      	cmp	r3, #4
 80185a8:	d007      	beq.n	80185ba <lv_img_decoder_built_in_open+0x146>
 80185aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185ae:	2b05      	cmp	r3, #5
 80185b0:	d003      	beq.n	80185ba <lv_img_decoder_built_in_open+0x146>
 80185b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185b6:	2b06      	cmp	r3, #6
 80185b8:	d10f      	bne.n	80185da <lv_img_decoder_built_in_open+0x166>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80185ba:	683b      	ldr	r3, [r7, #0]
 80185bc:	7b1b      	ldrb	r3, [r3, #12]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d106      	bne.n	80185d0 <lv_img_decoder_built_in_open+0x15c>
            /* In case of uncompressed formats the image stored in the ROM/RAM.
             * So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 80185c2:	683b      	ldr	r3, [r7, #0]
 80185c4:	685b      	ldr	r3, [r3, #4]
 80185c6:	689a      	ldr	r2, [r3, #8]
 80185c8:	683b      	ldr	r3, [r7, #0]
 80185ca:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 80185cc:	2301      	movs	r3, #1
 80185ce:	e120      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>
        }
        else {
            /*If it's a file it need to be read line by line later*/
            dsc->img_data = NULL;
 80185d0:	683b      	ldr	r3, [r7, #0]
 80185d2:	2200      	movs	r2, #0
 80185d4:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 80185d6:	2301      	movs	r3, #1
 80185d8:	e11b      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 80185da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185de:	2b07      	cmp	r3, #7
 80185e0:	d00c      	beq.n	80185fc <lv_img_decoder_built_in_open+0x188>
 80185e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185e6:	2b08      	cmp	r3, #8
 80185e8:	d008      	beq.n	80185fc <lv_img_decoder_built_in_open+0x188>
 80185ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185ee:	2b09      	cmp	r3, #9
 80185f0:	d004      	beq.n	80185fc <lv_img_decoder_built_in_open+0x188>
 80185f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185f6:	2b0a      	cmp	r3, #10
 80185f8:	f040 80f1 	bne.w	80187de <lv_img_decoder_built_in_open+0x36a>
            cf == LV_IMG_CF_INDEXED_8BIT) {

#if LV_IMG_CF_INDEXED
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 80185fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018600:	4618      	mov	r0, r3
 8018602:	f7f5 fca1 	bl	800df48 <lv_img_cf_get_px_size>
 8018606:	4603      	mov	r3, r0
 8018608:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t palette_size = 1 << px_size;
 801860c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018610:	2201      	movs	r2, #1
 8018612:	fa02 f303 	lsl.w	r3, r2, r3
 8018616:	623b      	str	r3, [r7, #32]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	6a1b      	ldr	r3, [r3, #32]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d12a      	bne.n	8018676 <lv_img_decoder_built_in_open+0x202>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8018620:	200c      	movs	r0, #12
 8018622:	f003 fea3 	bl	801c36c <lv_mem_alloc>
 8018626:	4602      	mov	r2, r0
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	621a      	str	r2, [r3, #32]
            LV_ASSERT_MEM(dsc->user_data);
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	6a1b      	ldr	r3, [r3, #32]
 8018630:	4618      	mov	r0, r3
 8018632:	f003 f90f 	bl	801b854 <lv_debug_check_null>
 8018636:	4603      	mov	r3, r0
 8018638:	f083 0301 	eor.w	r3, r3, #1
 801863c:	b2db      	uxtb	r3, r3
 801863e:	2b00      	cmp	r3, #0
 8018640:	d009      	beq.n	8018656 <lv_img_decoder_built_in_open+0x1e2>
 8018642:	683b      	ldr	r3, [r7, #0]
 8018644:	6a1b      	ldr	r3, [r3, #32]
 8018646:	f04f 0400 	mov.w	r4, #0
 801864a:	461a      	mov	r2, r3
 801864c:	4623      	mov	r3, r4
 801864e:	4836      	ldr	r0, [pc, #216]	; (8018728 <lv_img_decoder_built_in_open+0x2b4>)
 8018650:	f003 f910 	bl	801b874 <lv_debug_log_error>
 8018654:	e7fe      	b.n	8018654 <lv_img_decoder_built_in_open+0x1e0>
            if(dsc->user_data == NULL) {
 8018656:	683b      	ldr	r3, [r7, #0]
 8018658:	6a1b      	ldr	r3, [r3, #32]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d105      	bne.n	801866a <lv_img_decoder_built_in_open+0x1f6>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_img_decoder_built_in_close(decoder, dsc);
 801865e:	6839      	ldr	r1, [r7, #0]
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f000 f96d 	bl	8018940 <lv_img_decoder_built_in_close>
                return LV_RES_INV;
 8018666:	2300      	movs	r3, #0
 8018668:	e0d3      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>
            }
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 801866a:	683b      	ldr	r3, [r7, #0]
 801866c:	6a1b      	ldr	r3, [r3, #32]
 801866e:	210c      	movs	r1, #12
 8018670:	4618      	mov	r0, r3
 8018672:	f004 fbe6 	bl	801ce42 <_lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018676:	683b      	ldr	r3, [r7, #0]
 8018678:	6a1b      	ldr	r3, [r3, #32]
 801867a:	61fb      	str	r3, [r7, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 801867c:	6a3b      	ldr	r3, [r7, #32]
 801867e:	009b      	lsls	r3, r3, #2
 8018680:	4618      	mov	r0, r3
 8018682:	f003 fe73 	bl	801c36c <lv_mem_alloc>
 8018686:	4602      	mov	r2, r0
 8018688:	69fb      	ldr	r3, [r7, #28]
 801868a:	605a      	str	r2, [r3, #4]
        LV_ASSERT_MEM(user_data->palette);
 801868c:	69fb      	ldr	r3, [r7, #28]
 801868e:	685b      	ldr	r3, [r3, #4]
 8018690:	4618      	mov	r0, r3
 8018692:	f003 f8df 	bl	801b854 <lv_debug_check_null>
 8018696:	4603      	mov	r3, r0
 8018698:	f083 0301 	eor.w	r3, r3, #1
 801869c:	b2db      	uxtb	r3, r3
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d009      	beq.n	80186b6 <lv_img_decoder_built_in_open+0x242>
 80186a2:	69fb      	ldr	r3, [r7, #28]
 80186a4:	685b      	ldr	r3, [r3, #4]
 80186a6:	f04f 0400 	mov.w	r4, #0
 80186aa:	461a      	mov	r2, r3
 80186ac:	4623      	mov	r3, r4
 80186ae:	481e      	ldr	r0, [pc, #120]	; (8018728 <lv_img_decoder_built_in_open+0x2b4>)
 80186b0:	f003 f8e0 	bl	801b874 <lv_debug_log_error>
 80186b4:	e7fe      	b.n	80186b4 <lv_img_decoder_built_in_open+0x240>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 80186b6:	6a38      	ldr	r0, [r7, #32]
 80186b8:	f003 fe58 	bl	801c36c <lv_mem_alloc>
 80186bc:	4602      	mov	r2, r0
 80186be:	69fb      	ldr	r3, [r7, #28]
 80186c0:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MEM(user_data->opa);
 80186c2:	69fb      	ldr	r3, [r7, #28]
 80186c4:	689b      	ldr	r3, [r3, #8]
 80186c6:	4618      	mov	r0, r3
 80186c8:	f003 f8c4 	bl	801b854 <lv_debug_check_null>
 80186cc:	4603      	mov	r3, r0
 80186ce:	f083 0301 	eor.w	r3, r3, #1
 80186d2:	b2db      	uxtb	r3, r3
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d009      	beq.n	80186ec <lv_img_decoder_built_in_open+0x278>
 80186d8:	69fb      	ldr	r3, [r7, #28]
 80186da:	689b      	ldr	r3, [r3, #8]
 80186dc:	f04f 0400 	mov.w	r4, #0
 80186e0:	461a      	mov	r2, r3
 80186e2:	4623      	mov	r3, r4
 80186e4:	4810      	ldr	r0, [pc, #64]	; (8018728 <lv_img_decoder_built_in_open+0x2b4>)
 80186e6:	f003 f8c5 	bl	801b874 <lv_debug_log_error>
 80186ea:	e7fe      	b.n	80186ea <lv_img_decoder_built_in_open+0x276>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 80186ec:	69fb      	ldr	r3, [r7, #28]
 80186ee:	685b      	ldr	r3, [r3, #4]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d003      	beq.n	80186fc <lv_img_decoder_built_in_open+0x288>
 80186f4:	69fb      	ldr	r3, [r7, #28]
 80186f6:	689b      	ldr	r3, [r3, #8]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d105      	bne.n	8018708 <lv_img_decoder_built_in_open+0x294>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 80186fc:	6839      	ldr	r1, [r7, #0]
 80186fe:	6878      	ldr	r0, [r7, #4]
 8018700:	f000 f91e 	bl	8018940 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8018704:	2300      	movs	r3, #0
 8018706:	e084      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	7b1b      	ldrb	r3, [r3, #12]
 801870c:	2b01      	cmp	r3, #1
 801870e:	d130      	bne.n	8018772 <lv_img_decoder_built_in_open+0x2fe>
            /*Read the palette from file*/
#if LV_USE_FILESYSTEM
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 8018710:	69fb      	ldr	r3, [r7, #28]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	2104      	movs	r1, #4
 8018716:	4618      	mov	r0, r3
 8018718:	f003 fa48 	bl	801bbac <lv_fs_seek>
            lv_color32_t cur_color;
            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 801871c:	2300      	movs	r3, #0
 801871e:	637b      	str	r3, [r7, #52]	; 0x34
 8018720:	e022      	b.n	8018768 <lv_img_decoder_built_in_open+0x2f4>
 8018722:	bf00      	nop
 8018724:	08028398 	.word	0x08028398
 8018728:	08028388 	.word	0x08028388
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	6818      	ldr	r0, [r3, #0]
 8018730:	f107 010c 	add.w	r1, r7, #12
 8018734:	2300      	movs	r3, #0
 8018736:	2204      	movs	r2, #4
 8018738:	f003 fa02 	bl	801bb40 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 801873c:	7bb8      	ldrb	r0, [r7, #14]
 801873e:	7b79      	ldrb	r1, [r7, #13]
 8018740:	7b3d      	ldrb	r5, [r7, #12]
 8018742:	69fb      	ldr	r3, [r7, #28]
 8018744:	685a      	ldr	r2, [r3, #4]
 8018746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018748:	009b      	lsls	r3, r3, #2
 801874a:	18d4      	adds	r4, r2, r3
 801874c:	462a      	mov	r2, r5
 801874e:	f7ff fc1d 	bl	8017f8c <lv_color_make>
 8018752:	4603      	mov	r3, r0
 8018754:	6023      	str	r3, [r4, #0]
                user_data->opa[i]     = cur_color.ch.alpha;
 8018756:	69fb      	ldr	r3, [r7, #28]
 8018758:	689a      	ldr	r2, [r3, #8]
 801875a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801875c:	4413      	add	r3, r2
 801875e:	7bfa      	ldrb	r2, [r7, #15]
 8018760:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8018762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018764:	3301      	adds	r3, #1
 8018766:	637b      	str	r3, [r7, #52]	; 0x34
 8018768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801876a:	6a3b      	ldr	r3, [r7, #32]
 801876c:	429a      	cmp	r2, r3
 801876e:	d3dd      	bcc.n	801872c <lv_img_decoder_built_in_open+0x2b8>
 8018770:	e030      	b.n	80187d4 <lv_img_decoder_built_in_open+0x360>
            return LV_RES_INV;
#endif
        }
        else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8018772:	683b      	ldr	r3, [r7, #0]
 8018774:	685b      	ldr	r3, [r3, #4]
 8018776:	689b      	ldr	r3, [r3, #8]
 8018778:	61bb      	str	r3, [r7, #24]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 801877a:	2300      	movs	r3, #0
 801877c:	633b      	str	r3, [r7, #48]	; 0x30
 801877e:	e025      	b.n	80187cc <lv_img_decoder_built_in_open+0x358>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8018780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018782:	009b      	lsls	r3, r3, #2
 8018784:	69ba      	ldr	r2, [r7, #24]
 8018786:	4413      	add	r3, r2
 8018788:	7898      	ldrb	r0, [r3, #2]
 801878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801878c:	009b      	lsls	r3, r3, #2
 801878e:	69ba      	ldr	r2, [r7, #24]
 8018790:	4413      	add	r3, r2
 8018792:	7859      	ldrb	r1, [r3, #1]
 8018794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018796:	009b      	lsls	r3, r3, #2
 8018798:	69ba      	ldr	r2, [r7, #24]
 801879a:	4413      	add	r3, r2
 801879c:	781d      	ldrb	r5, [r3, #0]
 801879e:	69fb      	ldr	r3, [r7, #28]
 80187a0:	685a      	ldr	r2, [r3, #4]
 80187a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187a4:	009b      	lsls	r3, r3, #2
 80187a6:	18d4      	adds	r4, r2, r3
 80187a8:	462a      	mov	r2, r5
 80187aa:	f7ff fbef 	bl	8017f8c <lv_color_make>
 80187ae:	4603      	mov	r3, r0
 80187b0:	6023      	str	r3, [r4, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 80187b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b4:	009b      	lsls	r3, r3, #2
 80187b6:	69ba      	ldr	r2, [r7, #24]
 80187b8:	441a      	add	r2, r3
 80187ba:	69fb      	ldr	r3, [r7, #28]
 80187bc:	6899      	ldr	r1, [r3, #8]
 80187be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c0:	440b      	add	r3, r1
 80187c2:	78d2      	ldrb	r2, [r2, #3]
 80187c4:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 80187c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c8:	3301      	adds	r3, #1
 80187ca:	633b      	str	r3, [r7, #48]	; 0x30
 80187cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187ce:	6a3b      	ldr	r3, [r7, #32]
 80187d0:	429a      	cmp	r2, r3
 80187d2:	d3d5      	bcc.n	8018780 <lv_img_decoder_built_in_open+0x30c>
            }
        }

        dsc->img_data = NULL;
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	2200      	movs	r2, #0
 80187d8:	615a      	str	r2, [r3, #20]
        return LV_RES_OK;
 80187da:	2301      	movs	r3, #1
 80187dc:	e019      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>
        LV_LOG_WARN("Indexed (palette) images are not enabled in lv_conf.h. See LV_IMG_CF_INDEXED");
        return LV_RES_INV;
#endif
    }
    /*Alpha indexed images. */
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 80187de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187e2:	2b0b      	cmp	r3, #11
 80187e4:	d00b      	beq.n	80187fe <lv_img_decoder_built_in_open+0x38a>
 80187e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187ea:	2b0c      	cmp	r3, #12
 80187ec:	d007      	beq.n	80187fe <lv_img_decoder_built_in_open+0x38a>
 80187ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187f2:	2b0d      	cmp	r3, #13
 80187f4:	d003      	beq.n	80187fe <lv_img_decoder_built_in_open+0x38a>
 80187f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187fa:	2b0e      	cmp	r3, #14
 80187fc:	d104      	bne.n	8018808 <lv_img_decoder_built_in_open+0x394>
            cf == LV_IMG_CF_ALPHA_8BIT) {
#if LV_IMG_CF_ALPHA
        dsc->img_data = NULL;
 80187fe:	683b      	ldr	r3, [r7, #0]
 8018800:	2200      	movs	r2, #0
 8018802:	615a      	str	r2, [r3, #20]
        return LV_RES_OK; /*Nothing to process*/
 8018804:	2301      	movs	r3, #1
 8018806:	e004      	b.n	8018812 <lv_img_decoder_built_in_open+0x39e>
#endif
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 8018808:	6839      	ldr	r1, [r7, #0]
 801880a:	6878      	ldr	r0, [r7, #4]
 801880c:	f000 f898 	bl	8018940 <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format")
        return LV_RES_INV;
 8018810:	2300      	movs	r3, #0
    }
}
 8018812:	4618      	mov	r0, r3
 8018814:	3738      	adds	r7, #56	; 0x38
 8018816:	46bd      	mov	sp, r7
 8018818:	bdb0      	pop	{r4, r5, r7, pc}
 801881a:	bf00      	nop

0801881c <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b088      	sub	sp, #32
 8018820:	af02      	add	r7, sp, #8
 8018822:	60f8      	str	r0, [r7, #12]
 8018824:	60b9      	str	r1, [r7, #8]
 8018826:	4611      	mov	r1, r2
 8018828:	461a      	mov	r2, r3
 801882a:	460b      	mov	r3, r1
 801882c:	80fb      	strh	r3, [r7, #6]
 801882e:	4613      	mov	r3, r2
 8018830:	80bb      	strh	r3, [r7, #4]
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;
 8018832:	2300      	movs	r3, #0
 8018834:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8018836:	68bb      	ldr	r3, [r7, #8]
 8018838:	7c1b      	ldrb	r3, [r3, #16]
 801883a:	f003 031f 	and.w	r3, r3, #31
 801883e:	b2db      	uxtb	r3, r3
 8018840:	2b04      	cmp	r3, #4
 8018842:	d00d      	beq.n	8018860 <lv_img_decoder_built_in_read_line+0x44>
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	7c1b      	ldrb	r3, [r3, #16]
 8018848:	f003 031f 	and.w	r3, r3, #31
 801884c:	b2db      	uxtb	r3, r3
 801884e:	2b05      	cmp	r3, #5
 8018850:	d006      	beq.n	8018860 <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8018852:	68bb      	ldr	r3, [r7, #8]
 8018854:	7c1b      	ldrb	r3, [r3, #16]
 8018856:	f003 031f 	and.w	r3, r3, #31
 801885a:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 801885c:	2b06      	cmp	r3, #6
 801885e:	d112      	bne.n	8018886 <lv_img_decoder_built_in_read_line+0x6a>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018860:	68bb      	ldr	r3, [r7, #8]
 8018862:	7b1b      	ldrb	r3, [r3, #12]
 8018864:	2b01      	cmp	r3, #1
 8018866:	d166      	bne.n	8018936 <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8018868:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 801886c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8018870:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018876:	9300      	str	r3, [sp, #0]
 8018878:	4603      	mov	r3, r0
 801887a:	68b8      	ldr	r0, [r7, #8]
 801887c:	f000 f895 	bl	80189aa <lv_img_decoder_built_in_line_true_color>
 8018880:	4603      	mov	r3, r0
 8018882:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018884:	e057      	b.n	8018936 <lv_img_decoder_built_in_read_line+0x11a>
        }
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	7c1b      	ldrb	r3, [r3, #16]
 801888a:	f003 031f 	and.w	r3, r3, #31
 801888e:	b2db      	uxtb	r3, r3
 8018890:	2b0b      	cmp	r3, #11
 8018892:	d014      	beq.n	80188be <lv_img_decoder_built_in_read_line+0xa2>
 8018894:	68bb      	ldr	r3, [r7, #8]
 8018896:	7c1b      	ldrb	r3, [r3, #16]
 8018898:	f003 031f 	and.w	r3, r3, #31
 801889c:	b2db      	uxtb	r3, r3
 801889e:	2b0c      	cmp	r3, #12
 80188a0:	d00d      	beq.n	80188be <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 80188a2:	68bb      	ldr	r3, [r7, #8]
 80188a4:	7c1b      	ldrb	r3, [r3, #16]
 80188a6:	f003 031f 	and.w	r3, r3, #31
 80188aa:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 80188ac:	2b0d      	cmp	r3, #13
 80188ae:	d006      	beq.n	80188be <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 80188b0:	68bb      	ldr	r3, [r7, #8]
 80188b2:	7c1b      	ldrb	r3, [r3, #16]
 80188b4:	f003 031f 	and.w	r3, r3, #31
 80188b8:	b2db      	uxtb	r3, r3
 80188ba:	2b0e      	cmp	r3, #14
 80188bc:	d10e      	bne.n	80188dc <lv_img_decoder_built_in_read_line+0xc0>

        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 80188be:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80188c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80188c6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80188ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188cc:	9300      	str	r3, [sp, #0]
 80188ce:	4603      	mov	r3, r0
 80188d0:	68b8      	ldr	r0, [r7, #8]
 80188d2:	f000 f8cb 	bl	8018a6c <lv_img_decoder_built_in_line_alpha>
 80188d6:	4603      	mov	r3, r0
 80188d8:	75fb      	strb	r3, [r7, #23]
 80188da:	e02c      	b.n	8018936 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	7c1b      	ldrb	r3, [r3, #16]
 80188e0:	f003 031f 	and.w	r3, r3, #31
 80188e4:	b2db      	uxtb	r3, r3
 80188e6:	2b07      	cmp	r3, #7
 80188e8:	d014      	beq.n	8018914 <lv_img_decoder_built_in_read_line+0xf8>
 80188ea:	68bb      	ldr	r3, [r7, #8]
 80188ec:	7c1b      	ldrb	r3, [r3, #16]
 80188ee:	f003 031f 	and.w	r3, r3, #31
 80188f2:	b2db      	uxtb	r3, r3
 80188f4:	2b08      	cmp	r3, #8
 80188f6:	d00d      	beq.n	8018914 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80188f8:	68bb      	ldr	r3, [r7, #8]
 80188fa:	7c1b      	ldrb	r3, [r3, #16]
 80188fc:	f003 031f 	and.w	r3, r3, #31
 8018900:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8018902:	2b09      	cmp	r3, #9
 8018904:	d006      	beq.n	8018914 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8018906:	68bb      	ldr	r3, [r7, #8]
 8018908:	7c1b      	ldrb	r3, [r3, #16]
 801890a:	f003 031f 	and.w	r3, r3, #31
 801890e:	b2db      	uxtb	r3, r3
 8018910:	2b0a      	cmp	r3, #10
 8018912:	d10e      	bne.n	8018932 <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8018914:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8018918:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801891c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018922:	9300      	str	r3, [sp, #0]
 8018924:	4603      	mov	r3, r0
 8018926:	68b8      	ldr	r0, [r7, #8]
 8018928:	f000 fa42 	bl	8018db0 <lv_img_decoder_built_in_line_indexed>
 801892c:	4603      	mov	r3, r0
 801892e:	75fb      	strb	r3, [r7, #23]
 8018930:	e001      	b.n	8018936 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 8018932:	2300      	movs	r3, #0
 8018934:	e000      	b.n	8018938 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 8018936:	7dfb      	ldrb	r3, [r7, #23]
}
 8018938:	4618      	mov	r0, r3
 801893a:	3718      	adds	r7, #24
 801893c:	46bd      	mov	sp, r7
 801893e:	bd80      	pop	{r7, pc}

08018940 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b084      	sub	sp, #16
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
 8018948:	6039      	str	r1, [r7, #0]
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	6a1b      	ldr	r3, [r3, #32]
 801894e:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d025      	beq.n	80189a2 <lv_img_decoder_built_in_close+0x62>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d009      	beq.n	8018972 <lv_img_decoder_built_in_close+0x32>
            lv_fs_close(user_data->f);
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	4618      	mov	r0, r3
 8018964:	f003 f8c0 	bl	801bae8 <lv_fs_close>
            lv_mem_free(user_data->f);
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	4618      	mov	r0, r3
 801896e:	f003 fd47 	bl	801c400 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	685b      	ldr	r3, [r3, #4]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d004      	beq.n	8018984 <lv_img_decoder_built_in_close+0x44>
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	685b      	ldr	r3, [r3, #4]
 801897e:	4618      	mov	r0, r3
 8018980:	f003 fd3e 	bl	801c400 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	689b      	ldr	r3, [r3, #8]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d004      	beq.n	8018996 <lv_img_decoder_built_in_close+0x56>
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	689b      	ldr	r3, [r3, #8]
 8018990:	4618      	mov	r0, r3
 8018992:	f003 fd35 	bl	801c400 <lv_mem_free>

        lv_mem_free(user_data);
 8018996:	68f8      	ldr	r0, [r7, #12]
 8018998:	f003 fd32 	bl	801c400 <lv_mem_free>

        dsc->user_data = NULL;
 801899c:	683b      	ldr	r3, [r7, #0]
 801899e:	2200      	movs	r2, #0
 80189a0:	621a      	str	r2, [r3, #32]
    }
}
 80189a2:	bf00      	nop
 80189a4:	3710      	adds	r7, #16
 80189a6:	46bd      	mov	sp, r7
 80189a8:	bd80      	pop	{r7, pc}

080189aa <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 80189aa:	b580      	push	{r7, lr}
 80189ac:	b08a      	sub	sp, #40	; 0x28
 80189ae:	af00      	add	r7, sp, #0
 80189b0:	60f8      	str	r0, [r7, #12]
 80189b2:	4608      	mov	r0, r1
 80189b4:	4611      	mov	r1, r2
 80189b6:	461a      	mov	r2, r3
 80189b8:	4603      	mov	r3, r0
 80189ba:	817b      	strh	r3, [r7, #10]
 80189bc:	460b      	mov	r3, r1
 80189be:	813b      	strh	r3, [r7, #8]
 80189c0:	4613      	mov	r3, r2
 80189c2:	80fb      	strh	r3, [r7, #6]
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	6a1b      	ldr	r3, [r3, #32]
 80189c8:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	7c1b      	ldrb	r3, [r3, #16]
 80189ce:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80189d2:	b2db      	uxtb	r3, r3
 80189d4:	4618      	mov	r0, r3
 80189d6:	f7f5 fab7 	bl	800df48 <lv_img_cf_get_px_size>
 80189da:	4603      	mov	r3, r0
 80189dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 80189e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80189e4:	68fa      	ldr	r2, [r7, #12]
 80189e6:	6912      	ldr	r2, [r2, #16]
 80189e8:	f3c2 228a 	ubfx	r2, r2, #10, #11
 80189ec:	b292      	uxth	r2, r2
 80189ee:	fb02 f203 	mul.w	r2, r2, r3
 80189f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80189f6:	4413      	add	r3, r2
 80189f8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80189fc:	fb02 f303 	mul.w	r3, r2, r3
 8018a00:	10db      	asrs	r3, r3, #3
 8018a02:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8018a04:	69fb      	ldr	r3, [r7, #28]
 8018a06:	3304      	adds	r3, #4
 8018a08:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(user_data->f, pos);
 8018a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	69f9      	ldr	r1, [r7, #28]
 8018a10:	4618      	mov	r0, r3
 8018a12:	f003 f8cb 	bl	801bbac <lv_fs_seek>
 8018a16:	4603      	mov	r3, r0
 8018a18:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8018a1a:	7efb      	ldrb	r3, [r7, #27]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d001      	beq.n	8018a24 <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8018a20:	2300      	movs	r3, #0
 8018a22:	e01e      	b.n	8018a62 <lv_img_decoder_built_in_line_true_color+0xb8>
    }
    uint32_t btr = len * (px_size >> 3);
 8018a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018a28:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8018a2c:	08d2      	lsrs	r2, r2, #3
 8018a2e:	b2d2      	uxtb	r2, r2
 8018a30:	fb02 f303 	mul.w	r3, r2, r3
 8018a34:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 8018a36:	2300      	movs	r3, #0
 8018a38:	613b      	str	r3, [r7, #16]
    res = lv_fs_read(user_data->f, buf, btr, &br);
 8018a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a3c:	6818      	ldr	r0, [r3, #0]
 8018a3e:	f107 0310 	add.w	r3, r7, #16
 8018a42:	697a      	ldr	r2, [r7, #20]
 8018a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018a46:	f003 f87b 	bl	801bb40 <lv_fs_read>
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK || btr != br) {
 8018a4e:	7efb      	ldrb	r3, [r7, #27]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d103      	bne.n	8018a5c <lv_img_decoder_built_in_line_true_color+0xb2>
 8018a54:	693b      	ldr	r3, [r7, #16]
 8018a56:	697a      	ldr	r2, [r7, #20]
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d001      	beq.n	8018a60 <lv_img_decoder_built_in_line_true_color+0xb6>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	e000      	b.n	8018a62 <lv_img_decoder_built_in_line_true_color+0xb8>
    }

    return LV_RES_OK;
 8018a60:	2301      	movs	r3, #1
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
 8018a62:	4618      	mov	r0, r3
 8018a64:	3728      	adds	r7, #40	; 0x28
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bd80      	pop	{r7, pc}
	...

08018a6c <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8018a6c:	b590      	push	{r4, r7, lr}
 8018a6e:	b097      	sub	sp, #92	; 0x5c
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	60f8      	str	r0, [r7, #12]
 8018a74:	4608      	mov	r0, r1
 8018a76:	4611      	mov	r1, r2
 8018a78:	461a      	mov	r2, r3
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	817b      	strh	r3, [r7, #10]
 8018a7e:	460b      	mov	r3, r1
 8018a80:	813b      	strh	r3, [r7, #8]
 8018a82:	4613      	mov	r3, r2
 8018a84:	80fb      	strh	r3, [r7, #6]

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8018a86:	2300      	movs	r3, #0
 8018a88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8018a8c:	23ff      	movs	r3, #255	; 0xff
 8018a8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8018a92:	4bab      	ldr	r3, [pc, #684]	; (8018d40 <lv_img_decoder_built_in_line_alpha+0x2d4>)
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	62bb      	str	r3, [r7, #40]	; 0x28
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8018a98:	4baa      	ldr	r3, [pc, #680]	; (8018d44 <lv_img_decoder_built_in_line_alpha+0x2d8>)
 8018a9a:	f107 0418 	add.w	r4, r7, #24
 8018a9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	689b      	ldr	r3, [r3, #8]
 8018aa8:	617b      	str	r3, [r7, #20]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8018aaa:	2300      	movs	r3, #0
 8018aac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018ab0:	e00e      	b.n	8018ad0 <lv_img_decoder_built_in_line_alpha+0x64>
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 8018ab2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8018ab6:	009b      	lsls	r3, r3, #2
 8018ab8:	461a      	mov	r2, r3
 8018aba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018abc:	4413      	add	r3, r2
 8018abe:	697a      	ldr	r2, [r7, #20]
 8018ac0:	601a      	str	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8018ac2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8018ac6:	b29b      	uxth	r3, r3
 8018ac8:	3301      	adds	r3, #1
 8018aca:	b29b      	uxth	r3, r3
 8018acc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018ad0:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8018ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018ad8:	429a      	cmp	r2, r3
 8018ada:	dbea      	blt.n	8018ab2 <lv_img_decoder_built_in_line_alpha+0x46>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 8018adc:	2300      	movs	r3, #0
 8018ade:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	7c1b      	ldrb	r3, [r3, #16]
 8018ae4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018ae8:	b2db      	uxtb	r3, r3
 8018aea:	4618      	mov	r0, r3
 8018aec:	f7f5 fa2c 	bl	800df48 <lv_img_cf_get_px_size>
 8018af0:	4603      	mov	r3, r0
 8018af2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8018af6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018afa:	2201      	movs	r2, #1
 8018afc:	fa02 f303 	lsl.w	r3, r2, r3
 8018b00:	b29b      	uxth	r3, r3
 8018b02:	3b01      	subs	r3, #1
 8018b04:	87bb      	strh	r3, [r7, #60]	; 0x3c

    lv_coord_t w = 0;
 8018b06:	2300      	movs	r3, #0
 8018b08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint32_t ofs = 0;
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	64bb      	str	r3, [r7, #72]	; 0x48
    int8_t pos   = 0;
 8018b10:	2300      	movs	r3, #0
 8018b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    switch(dsc->header.cf) {
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	7c1b      	ldrb	r3, [r3, #16]
 8018b1a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018b1e:	b2db      	uxtb	r3, r3
 8018b20:	3b0b      	subs	r3, #11
 8018b22:	2b03      	cmp	r3, #3
 8018b24:	f200 80c1 	bhi.w	8018caa <lv_img_decoder_built_in_line_alpha+0x23e>
 8018b28:	a201      	add	r2, pc, #4	; (adr r2, 8018b30 <lv_img_decoder_built_in_line_alpha+0xc4>)
 8018b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b2e:	bf00      	nop
 8018b30:	08018b41 	.word	0x08018b41
 8018b34:	08018ba7 	.word	0x08018ba7
 8018b38:	08018c11 	.word	0x08018c11
 8018b3c:	08018c7b 	.word	0x08018c7b
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	691b      	ldr	r3, [r3, #16]
 8018b44:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018b48:	b29b      	uxth	r3, r3
 8018b4a:	10db      	asrs	r3, r3, #3
 8018b4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(dsc->header.w & 0x7) w++;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	691b      	ldr	r3, [r3, #16]
 8018b54:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018b58:	b29b      	uxth	r3, r3
 8018b5a:	f003 0307 	and.w	r3, r3, #7
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d006      	beq.n	8018b70 <lv_img_decoder_built_in_line_alpha+0x104>
 8018b62:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018b66:	b29b      	uxth	r3, r3
 8018b68:	3301      	adds	r3, #1
 8018b6a:	b29b      	uxth	r3, r3
 8018b6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 3); /*First pixel*/
 8018b70:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018b74:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018b78:	fb02 f303 	mul.w	r3, r2, r3
 8018b7c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018b80:	10d2      	asrs	r2, r2, #3
 8018b82:	b212      	sxth	r2, r2
 8018b84:	4413      	add	r3, r2
 8018b86:	461a      	mov	r2, r3
 8018b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018b8a:	4413      	add	r3, r2
 8018b8c:	64bb      	str	r3, [r7, #72]	; 0x48
            pos       = 7 - (x & 0x7);
 8018b8e:	897b      	ldrh	r3, [r7, #10]
 8018b90:	b25b      	sxtb	r3, r3
 8018b92:	43db      	mvns	r3, r3
 8018b94:	b25b      	sxtb	r3, r3
 8018b96:	f003 0307 	and.w	r3, r3, #7
 8018b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha1_opa_table;
 8018b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018ba2:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8018ba4:	e081      	b.n	8018caa <lv_img_decoder_built_in_line_alpha+0x23e>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	691b      	ldr	r3, [r3, #16]
 8018baa:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018bae:	b29b      	uxth	r3, r3
 8018bb0:	109b      	asrs	r3, r3, #2
 8018bb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(dsc->header.w & 0x3) w++;
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	691b      	ldr	r3, [r3, #16]
 8018bba:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018bbe:	b29b      	uxth	r3, r3
 8018bc0:	f003 0303 	and.w	r3, r3, #3
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d006      	beq.n	8018bd6 <lv_img_decoder_built_in_line_alpha+0x16a>
 8018bc8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018bcc:	b29b      	uxth	r3, r3
 8018bce:	3301      	adds	r3, #1
 8018bd0:	b29b      	uxth	r3, r3
 8018bd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 2); /*First pixel*/
 8018bd6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018bda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018bde:	fb02 f303 	mul.w	r3, r2, r3
 8018be2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018be6:	1092      	asrs	r2, r2, #2
 8018be8:	b212      	sxth	r2, r2
 8018bea:	4413      	add	r3, r2
 8018bec:	461a      	mov	r2, r3
 8018bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018bf0:	4413      	add	r3, r2
 8018bf2:	64bb      	str	r3, [r7, #72]	; 0x48
            pos       = 6 - ((x & 0x3) * 2);
 8018bf4:	897b      	ldrh	r3, [r7, #10]
 8018bf6:	43db      	mvns	r3, r3
 8018bf8:	b2db      	uxtb	r3, r3
 8018bfa:	f003 0303 	and.w	r3, r3, #3
 8018bfe:	b2db      	uxtb	r3, r3
 8018c00:	005b      	lsls	r3, r3, #1
 8018c02:	b2db      	uxtb	r3, r3
 8018c04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha2_opa_table;
 8018c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018c0c:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8018c0e:	e04c      	b.n	8018caa <lv_img_decoder_built_in_line_alpha+0x23e>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	691b      	ldr	r3, [r3, #16]
 8018c14:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018c18:	b29b      	uxth	r3, r3
 8018c1a:	105b      	asrs	r3, r3, #1
 8018c1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(dsc->header.w & 0x1) w++;
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	691b      	ldr	r3, [r3, #16]
 8018c24:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018c28:	b29b      	uxth	r3, r3
 8018c2a:	f003 0301 	and.w	r3, r3, #1
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d006      	beq.n	8018c40 <lv_img_decoder_built_in_line_alpha+0x1d4>
 8018c32:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018c36:	b29b      	uxth	r3, r3
 8018c38:	3301      	adds	r3, #1
 8018c3a:	b29b      	uxth	r3, r3
 8018c3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 1); /*First pixel*/
 8018c40:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018c44:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018c48:	fb02 f303 	mul.w	r3, r2, r3
 8018c4c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018c50:	1052      	asrs	r2, r2, #1
 8018c52:	b212      	sxth	r2, r2
 8018c54:	4413      	add	r3, r2
 8018c56:	461a      	mov	r2, r3
 8018c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018c5a:	4413      	add	r3, r2
 8018c5c:	64bb      	str	r3, [r7, #72]	; 0x48
            pos       = 4 - ((x & 0x1) * 4);
 8018c5e:	897b      	ldrh	r3, [r7, #10]
 8018c60:	f003 0301 	and.w	r3, r3, #1
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d101      	bne.n	8018c6c <lv_img_decoder_built_in_line_alpha+0x200>
 8018c68:	2304      	movs	r3, #4
 8018c6a:	e000      	b.n	8018c6e <lv_img_decoder_built_in_line_alpha+0x202>
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha4_opa_table;
 8018c72:	f107 0318 	add.w	r3, r7, #24
 8018c76:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8018c78:	e017      	b.n	8018caa <lv_img_decoder_built_in_line_alpha+0x23e>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	691b      	ldr	r3, [r3, #16]
 8018c7e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018c82:	b29b      	uxth	r3, r3
 8018c84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + x;  /*First pixel*/
 8018c88:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018c8c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018c90:	fb02 f203 	mul.w	r2, r2, r3
 8018c94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018c98:	4413      	add	r3, r2
 8018c9a:	461a      	mov	r2, r3
 8018c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018c9e:	4413      	add	r3, r2
 8018ca0:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 0;
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8018ca8:	bf00      	nop
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	6a1b      	ldr	r3, [r3, #32]
 8018cae:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 8018cb0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	f003 fcbb 	bl	801c630 <_lv_mem_buf_get>
 8018cba:	6378      	str	r0, [r7, #52]	; 0x34
#endif

    const uint8_t * data_tmp = NULL;
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	643b      	str	r3, [r7, #64]	; 0x40
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	7b1b      	ldrb	r3, [r3, #12]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d108      	bne.n	8018cda <lv_img_decoder_built_in_line_alpha+0x26e>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	685b      	ldr	r3, [r3, #4]
 8018ccc:	633b      	str	r3, [r7, #48]	; 0x30

        data_tmp = img_dsc->data + ofs;
 8018cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cd0:	689a      	ldr	r2, [r3, #8]
 8018cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018cd4:	4413      	add	r3, r2
 8018cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8018cd8:	e011      	b.n	8018cfe <lv_img_decoder_built_in_line_alpha+0x292>
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8018cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cdc:	681a      	ldr	r2, [r3, #0]
 8018cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ce0:	3304      	adds	r3, #4
 8018ce2:	4619      	mov	r1, r3
 8018ce4:	4610      	mov	r0, r2
 8018ce6:	f002 ff61 	bl	801bbac <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8018cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cec:	6818      	ldr	r0, [r3, #0]
 8018cee:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018cf6:	f002 ff23 	bl	801bb40 <lv_fs_read>
        data_tmp = fs_buf;
 8018cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cfc:	643b      	str	r3, [r7, #64]	; 0x40
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    for(i = 0; i < len; i++) {
 8018cfe:	2300      	movs	r3, #0
 8018d00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018d04:	e046      	b.n	8018d94 <lv_img_decoder_built_in_line_alpha+0x328>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8018d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d08:	781b      	ldrb	r3, [r3, #0]
 8018d0a:	4619      	mov	r1, r3
 8018d0c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8018d0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8018d12:	fa02 f303 	lsl.w	r3, r2, r3
 8018d16:	ea01 0203 	and.w	r2, r1, r3
 8018d1a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8018d1e:	fa42 f303 	asr.w	r3, r2, r3
 8018d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	7c1b      	ldrb	r3, [r3, #16]
 8018d2a:	f003 031f 	and.w	r3, r3, #31
 8018d2e:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8018d30:	2b0e      	cmp	r3, #14
 8018d32:	d009      	beq.n	8018d48 <lv_img_decoder_built_in_line_alpha+0x2dc>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8018d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018d3a:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8018d3c:	781b      	ldrb	r3, [r3, #0]
 8018d3e:	e005      	b.n	8018d4c <lv_img_decoder_built_in_line_alpha+0x2e0>
 8018d40:	0802839c 	.word	0x0802839c
 8018d44:	080283a0 	.word	0x080283a0
 8018d48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d4c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8018d50:	0092      	lsls	r2, r2, #2
 8018d52:	3203      	adds	r2, #3
 8018d54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8018d56:	440a      	add	r2, r1
 8018d58:	7013      	strb	r3, [r2, #0]

        pos -= px_size;
 8018d5a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8018d5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018d62:	1ad3      	subs	r3, r2, r3
 8018d64:	b2db      	uxtb	r3, r3
 8018d66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(pos < 0) {
 8018d6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	da09      	bge.n	8018d86 <lv_img_decoder_built_in_line_alpha+0x31a>
            pos = 8 - px_size;
 8018d72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018d76:	f1c3 0308 	rsb	r3, r3, #8
 8018d7a:	b2db      	uxtb	r3, r3
 8018d7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            data_tmp++;
 8018d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d82:	3301      	adds	r3, #1
 8018d84:	643b      	str	r3, [r7, #64]	; 0x40
    for(i = 0; i < len; i++) {
 8018d86:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8018d8a:	b29b      	uxth	r3, r3
 8018d8c:	3301      	adds	r3, #1
 8018d8e:	b29b      	uxth	r3, r3
 8018d90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018d94:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8018d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018d9c:	429a      	cmp	r2, r3
 8018d9e:	dbb2      	blt.n	8018d06 <lv_img_decoder_built_in_line_alpha+0x29a>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 8018da0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018da2:	f003 fd23 	bl	801c7ec <_lv_mem_buf_release>
#endif
    return LV_RES_OK;
 8018da6:	2301      	movs	r3, #1

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 8018da8:	4618      	mov	r0, r3
 8018daa:	375c      	adds	r7, #92	; 0x5c
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd90      	pop	{r4, r7, pc}

08018db0 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b08e      	sub	sp, #56	; 0x38
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	60f8      	str	r0, [r7, #12]
 8018db8:	4608      	mov	r0, r1
 8018dba:	4611      	mov	r1, r2
 8018dbc:	461a      	mov	r2, r3
 8018dbe:	4603      	mov	r3, r0
 8018dc0:	817b      	strh	r3, [r7, #10]
 8018dc2:	460b      	mov	r3, r1
 8018dc4:	813b      	strh	r3, [r7, #8]
 8018dc6:	4613      	mov	r3, r2
 8018dc8:	80fb      	strh	r3, [r7, #6]

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	7c1b      	ldrb	r3, [r3, #16]
 8018dce:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018dd2:	b2db      	uxtb	r3, r3
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f7f5 f8b7 	bl	800df48 <lv_img_cf_get_px_size>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8018de0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8018de4:	2201      	movs	r2, #1
 8018de6:	fa02 f303 	lsl.w	r3, r2, r3
 8018dea:	b29b      	uxth	r3, r3
 8018dec:	3b01      	subs	r3, #1
 8018dee:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t w = 0;
 8018df0:	2300      	movs	r3, #0
 8018df2:	86fb      	strh	r3, [r7, #54]	; 0x36
    int8_t pos   = 0;
 8018df4:	2300      	movs	r3, #0
 8018df6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint32_t ofs = 0;
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	633b      	str	r3, [r7, #48]	; 0x30
    switch(dsc->header.cf) {
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	7c1b      	ldrb	r3, [r3, #16]
 8018e02:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018e06:	b2db      	uxtb	r3, r3
 8018e08:	3b07      	subs	r3, #7
 8018e0a:	2b03      	cmp	r3, #3
 8018e0c:	f200 80be 	bhi.w	8018f8c <lv_img_decoder_built_in_line_indexed+0x1dc>
 8018e10:	a201      	add	r2, pc, #4	; (adr r2, 8018e18 <lv_img_decoder_built_in_line_indexed+0x68>)
 8018e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e16:	bf00      	nop
 8018e18:	08018e29 	.word	0x08018e29
 8018e1c:	08018e8b 	.word	0x08018e8b
 8018e20:	08018ef1 	.word	0x08018ef1
 8018e24:	08018f57 	.word	0x08018f57
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	691b      	ldr	r3, [r3, #16]
 8018e2c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018e30:	b29b      	uxth	r3, r3
 8018e32:	10db      	asrs	r3, r3, #3
 8018e34:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(dsc->header.w & 0x7) w++;
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	691b      	ldr	r3, [r3, #16]
 8018e3a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018e3e:	b29b      	uxth	r3, r3
 8018e40:	f003 0307 	and.w	r3, r3, #7
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d005      	beq.n	8018e54 <lv_img_decoder_built_in_line_indexed+0xa4>
 8018e48:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018e4c:	b29b      	uxth	r3, r3
 8018e4e:	3301      	adds	r3, #1
 8018e50:	b29b      	uxth	r3, r3
 8018e52:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 3); /*First pixel*/
 8018e54:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018e58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018e5c:	fb02 f303 	mul.w	r3, r2, r3
 8018e60:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018e64:	10d2      	asrs	r2, r2, #3
 8018e66:	b212      	sxth	r2, r2
 8018e68:	4413      	add	r3, r2
 8018e6a:	461a      	mov	r2, r3
 8018e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e6e:	4413      	add	r3, r2
 8018e70:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 8;                /*Skip the palette*/
 8018e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e74:	3308      	adds	r3, #8
 8018e76:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 7 - (x & 0x7);
 8018e78:	897b      	ldrh	r3, [r7, #10]
 8018e7a:	b25b      	sxtb	r3, r3
 8018e7c:	43db      	mvns	r3, r3
 8018e7e:	b25b      	sxtb	r3, r3
 8018e80:	f003 0307 	and.w	r3, r3, #7
 8018e84:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8018e88:	e080      	b.n	8018f8c <lv_img_decoder_built_in_line_indexed+0x1dc>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	691b      	ldr	r3, [r3, #16]
 8018e8e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018e92:	b29b      	uxth	r3, r3
 8018e94:	109b      	asrs	r3, r3, #2
 8018e96:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(dsc->header.w & 0x3) w++;
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	691b      	ldr	r3, [r3, #16]
 8018e9c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018ea0:	b29b      	uxth	r3, r3
 8018ea2:	f003 0303 	and.w	r3, r3, #3
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d005      	beq.n	8018eb6 <lv_img_decoder_built_in_line_indexed+0x106>
 8018eaa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	3301      	adds	r3, #1
 8018eb2:	b29b      	uxth	r3, r3
 8018eb4:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 2); /*First pixel*/
 8018eb6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018eba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018ebe:	fb02 f303 	mul.w	r3, r2, r3
 8018ec2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018ec6:	1092      	asrs	r2, r2, #2
 8018ec8:	b212      	sxth	r2, r2
 8018eca:	4413      	add	r3, r2
 8018ecc:	461a      	mov	r2, r3
 8018ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ed0:	4413      	add	r3, r2
 8018ed2:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 16;               /*Skip the palette*/
 8018ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ed6:	3310      	adds	r3, #16
 8018ed8:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 6 - ((x & 0x3) * 2);
 8018eda:	897b      	ldrh	r3, [r7, #10]
 8018edc:	43db      	mvns	r3, r3
 8018ede:	b2db      	uxtb	r3, r3
 8018ee0:	f003 0303 	and.w	r3, r3, #3
 8018ee4:	b2db      	uxtb	r3, r3
 8018ee6:	005b      	lsls	r3, r3, #1
 8018ee8:	b2db      	uxtb	r3, r3
 8018eea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8018eee:	e04d      	b.n	8018f8c <lv_img_decoder_built_in_line_indexed+0x1dc>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	691b      	ldr	r3, [r3, #16]
 8018ef4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018ef8:	b29b      	uxth	r3, r3
 8018efa:	105b      	asrs	r3, r3, #1
 8018efc:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(dsc->header.w & 0x1) w++;
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	691b      	ldr	r3, [r3, #16]
 8018f02:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018f06:	b29b      	uxth	r3, r3
 8018f08:	f003 0301 	and.w	r3, r3, #1
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d005      	beq.n	8018f1c <lv_img_decoder_built_in_line_indexed+0x16c>
 8018f10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018f14:	b29b      	uxth	r3, r3
 8018f16:	3301      	adds	r3, #1
 8018f18:	b29b      	uxth	r3, r3
 8018f1a:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 1); /*First pixel*/
 8018f1c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018f20:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018f24:	fb02 f303 	mul.w	r3, r2, r3
 8018f28:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018f2c:	1052      	asrs	r2, r2, #1
 8018f2e:	b212      	sxth	r2, r2
 8018f30:	4413      	add	r3, r2
 8018f32:	461a      	mov	r2, r3
 8018f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f36:	4413      	add	r3, r2
 8018f38:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 64;               /*Skip the palette*/
 8018f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f3c:	3340      	adds	r3, #64	; 0x40
 8018f3e:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 4 - ((x & 0x1) * 4);
 8018f40:	897b      	ldrh	r3, [r7, #10]
 8018f42:	f003 0301 	and.w	r3, r3, #1
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d101      	bne.n	8018f4e <lv_img_decoder_built_in_line_indexed+0x19e>
 8018f4a:	2304      	movs	r3, #4
 8018f4c:	e000      	b.n	8018f50 <lv_img_decoder_built_in_line_indexed+0x1a0>
 8018f4e:	2300      	movs	r3, #0
 8018f50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8018f54:	e01a      	b.n	8018f8c <lv_img_decoder_built_in_line_indexed+0x1dc>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	691b      	ldr	r3, [r3, #16]
 8018f5a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018f5e:	b29b      	uxth	r3, r3
 8018f60:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + x;  /*First pixel*/
 8018f62:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018f66:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018f6a:	fb02 f203 	mul.w	r2, r2, r3
 8018f6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018f72:	4413      	add	r3, r2
 8018f74:	461a      	mov	r2, r3
 8018f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f78:	4413      	add	r3, r2
 8018f7a:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 1024;       /*Skip the palette*/
 8018f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018f82:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 0;
 8018f84:	2300      	movs	r3, #0
 8018f86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8018f8a:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	6a1b      	ldr	r3, [r3, #32]
 8018f90:	623b      	str	r3, [r7, #32]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 8018f92:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018f96:	4618      	mov	r0, r3
 8018f98:	f003 fb4a 	bl	801c630 <_lv_mem_buf_get>
 8018f9c:	61f8      	str	r0, [r7, #28]
#endif
    const uint8_t * data_tmp = NULL;
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	7b1b      	ldrb	r3, [r3, #12]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d108      	bne.n	8018fbc <lv_img_decoder_built_in_line_indexed+0x20c>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	685b      	ldr	r3, [r3, #4]
 8018fae:	61bb      	str	r3, [r7, #24]
        data_tmp                     = img_dsc->data + ofs;
 8018fb0:	69bb      	ldr	r3, [r7, #24]
 8018fb2:	689a      	ldr	r2, [r3, #8]
 8018fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb6:	4413      	add	r3, r2
 8018fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018fba:	e011      	b.n	8018fe0 <lv_img_decoder_built_in_line_indexed+0x230>
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8018fbc:	6a3b      	ldr	r3, [r7, #32]
 8018fbe:	681a      	ldr	r2, [r3, #0]
 8018fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fc2:	3304      	adds	r3, #4
 8018fc4:	4619      	mov	r1, r3
 8018fc6:	4610      	mov	r0, r2
 8018fc8:	f002 fdf0 	bl	801bbac <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8018fcc:	6a3b      	ldr	r3, [r7, #32]
 8018fce:	6818      	ldr	r0, [r3, #0]
 8018fd0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	69f9      	ldr	r1, [r7, #28]
 8018fd8:	f002 fdb2 	bl	801bb40 <lv_fs_read>
        data_tmp = fs_buf;
 8018fdc:	69fb      	ldr	r3, [r7, #28]
 8018fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8018fe4:	e045      	b.n	8019072 <lv_img_decoder_built_in_line_indexed+0x2c2>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8018fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fe8:	781b      	ldrb	r3, [r3, #0]
 8018fea:	4619      	mov	r1, r3
 8018fec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018fee:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8018ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8018ff6:	ea01 0203 	and.w	r2, r1, r3
 8018ffa:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8018ffe:	fa42 f303 	asr.w	r3, r2, r3
 8019002:	75fb      	strb	r3, [r7, #23]

        lv_color_t color = user_data->palette[val_act];
 8019004:	6a3b      	ldr	r3, [r7, #32]
 8019006:	685a      	ldr	r2, [r3, #4]
 8019008:	7dfb      	ldrb	r3, [r7, #23]
 801900a:	009b      	lsls	r3, r3, #2
 801900c:	4413      	add	r3, r2
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	613b      	str	r3, [r7, #16]
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
 8019012:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019016:	009b      	lsls	r3, r3, #2
 8019018:	461a      	mov	r2, r3
 801901a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801901c:	4413      	add	r3, r2
 801901e:	693a      	ldr	r2, [r7, #16]
 8019020:	601a      	str	r2, [r3, #0]
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8019022:	6a3b      	ldr	r3, [r7, #32]
 8019024:	689a      	ldr	r2, [r3, #8]
 8019026:	7dfb      	ldrb	r3, [r7, #23]
 8019028:	441a      	add	r2, r3
 801902a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801902e:	009b      	lsls	r3, r3, #2
 8019030:	3303      	adds	r3, #3
 8019032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019034:	440b      	add	r3, r1
 8019036:	7812      	ldrb	r2, [r2, #0]
 8019038:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 801903a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801903e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8019042:	1ad3      	subs	r3, r2, r3
 8019044:	b2db      	uxtb	r3, r3
 8019046:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(pos < 0) {
 801904a:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 801904e:	2b00      	cmp	r3, #0
 8019050:	da09      	bge.n	8019066 <lv_img_decoder_built_in_line_indexed+0x2b6>
            pos = 8 - px_size;
 8019052:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8019056:	f1c3 0308 	rsb	r3, r3, #8
 801905a:	b2db      	uxtb	r3, r3
 801905c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            data_tmp++;
 8019060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019062:	3301      	adds	r3, #1
 8019064:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(i = 0; i < len; i++) {
 8019066:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801906a:	b29b      	uxth	r3, r3
 801906c:	3301      	adds	r3, #1
 801906e:	b29b      	uxth	r3, r3
 8019070:	857b      	strh	r3, [r7, #42]	; 0x2a
 8019072:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8019076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801907a:	429a      	cmp	r2, r3
 801907c:	dbb3      	blt.n	8018fe6 <lv_img_decoder_built_in_line_indexed+0x236>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 801907e:	69f8      	ldr	r0, [r7, #28]
 8019080:	f003 fbb4 	bl	801c7ec <_lv_mem_buf_release>
#endif
    return LV_RES_OK;
 8019084:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 8019086:	4618      	mov	r0, r3
 8019088:	3738      	adds	r7, #56	; 0x38
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}
 801908e:	bf00      	nop

08019090 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b082      	sub	sp, #8
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
 8019098:	6039      	str	r1, [r7, #0]
    return font_p->get_glyph_bitmap(font_p, letter);
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	685b      	ldr	r3, [r3, #4]
 801909e:	6839      	ldr	r1, [r7, #0]
 80190a0:	6878      	ldr	r0, [r7, #4]
 80190a2:	4798      	blx	r3
 80190a4:	4603      	mov	r3, r0
}
 80190a6:	4618      	mov	r0, r3
 80190a8:	3708      	adds	r7, #8
 80190aa:	46bd      	mov	sp, r7
 80190ac:	bd80      	pop	{r7, pc}

080190ae <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 80190ae:	b590      	push	{r4, r7, lr}
 80190b0:	b085      	sub	sp, #20
 80190b2:	af00      	add	r7, sp, #0
 80190b4:	60f8      	str	r0, [r7, #12]
 80190b6:	60b9      	str	r1, [r7, #8]
 80190b8:	607a      	str	r2, [r7, #4]
 80190ba:	603b      	str	r3, [r7, #0]
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	681c      	ldr	r4, [r3, #0]
 80190c0:	683b      	ldr	r3, [r7, #0]
 80190c2:	687a      	ldr	r2, [r7, #4]
 80190c4:	68b9      	ldr	r1, [r7, #8]
 80190c6:	68f8      	ldr	r0, [r7, #12]
 80190c8:	47a0      	blx	r4
 80190ca:	4603      	mov	r3, r0
}
 80190cc:	4618      	mov	r0, r3
 80190ce:	3714      	adds	r7, #20
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd90      	pop	{r4, r7, pc}

080190d4 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b088      	sub	sp, #32
 80190d8:	af00      	add	r7, sp, #0
 80190da:	60f8      	str	r0, [r7, #12]
 80190dc:	60b9      	str	r1, [r7, #8]
 80190de:	607a      	str	r2, [r7, #4]
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 80190e0:	f107 0110 	add.w	r1, r7, #16
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	68ba      	ldr	r2, [r7, #8]
 80190e8:	68f8      	ldr	r0, [r7, #12]
 80190ea:	f7ff ffe0 	bl	80190ae <lv_font_get_glyph_dsc>
 80190ee:	4603      	mov	r3, r0
 80190f0:	77fb      	strb	r3, [r7, #31]
    if(ret) return g.adv_w;
 80190f2:	7ffb      	ldrb	r3, [r7, #31]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d001      	beq.n	80190fc <lv_font_get_glyph_width+0x28>
 80190f8:	8a3b      	ldrh	r3, [r7, #16]
 80190fa:	e000      	b.n	80190fe <lv_font_get_glyph_width+0x2a>
    else return 0;
 80190fc:	2300      	movs	r3, #0
}
 80190fe:	4618      	mov	r0, r3
 8019100:	3720      	adds	r7, #32
 8019102:	46bd      	mov	sp, r7
 8019104:	bd80      	pop	{r7, pc}
	...

08019108 <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter an unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 8019108:	b5b0      	push	{r4, r5, r7, lr}
 801910a:	b08c      	sub	sp, #48	; 0x30
 801910c:	af02      	add	r7, sp, #8
 801910e:	6078      	str	r0, [r7, #4]
 8019110:	6039      	str	r1, [r7, #0]
    if(unicode_letter == '\t') unicode_letter = ' ';
 8019112:	683b      	ldr	r3, [r7, #0]
 8019114:	2b09      	cmp	r3, #9
 8019116:	d101      	bne.n	801911c <lv_font_get_bitmap_fmt_txt+0x14>
 8019118:	2320      	movs	r3, #32
 801911a:	603b      	str	r3, [r7, #0]

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	691b      	ldr	r3, [r3, #16]
 8019120:	623b      	str	r3, [r7, #32]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8019122:	6839      	ldr	r1, [r7, #0]
 8019124:	6878      	ldr	r0, [r7, #4]
 8019126:	f000 f947 	bl	80193b8 <get_glyph_dsc_id>
 801912a:	61f8      	str	r0, [r7, #28]
    if(!gid) return NULL;
 801912c:	69fb      	ldr	r3, [r7, #28]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d101      	bne.n	8019136 <lv_font_get_bitmap_fmt_txt+0x2e>
 8019132:	2300      	movs	r3, #0
 8019134:	e09b      	b.n	801926e <lv_font_get_bitmap_fmt_txt+0x166>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8019136:	6a3b      	ldr	r3, [r7, #32]
 8019138:	685a      	ldr	r2, [r3, #4]
 801913a:	69fb      	ldr	r3, [r7, #28]
 801913c:	00db      	lsls	r3, r3, #3
 801913e:	4413      	add	r3, r2
 8019140:	61bb      	str	r3, [r7, #24]

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 8019142:	6a3b      	ldr	r3, [r7, #32]
 8019144:	7cdb      	ldrb	r3, [r3, #19]
 8019146:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801914a:	b2db      	uxtb	r3, r3
 801914c:	2b00      	cmp	r3, #0
 801914e:	d107      	bne.n	8019160 <lv_font_get_bitmap_fmt_txt+0x58>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8019150:	6a3b      	ldr	r3, [r7, #32]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	69ba      	ldr	r2, [r7, #24]
 8019156:	6812      	ldr	r2, [r2, #0]
 8019158:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801915c:	4413      	add	r3, r2
 801915e:	e086      	b.n	801926e <lv_font_get_bitmap_fmt_txt+0x166>
    }
    /*Handle compressed bitmap*/
    else {
#if LV_USE_FONT_COMPRESSED
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
 8019160:	69bb      	ldr	r3, [r7, #24]
 8019162:	791b      	ldrb	r3, [r3, #4]
 8019164:	461a      	mov	r2, r3
 8019166:	69bb      	ldr	r3, [r7, #24]
 8019168:	795b      	ldrb	r3, [r3, #5]
 801916a:	fb03 f302 	mul.w	r3, r3, r2
 801916e:	617b      	str	r3, [r7, #20]
        if(gsize == 0) return NULL;
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d101      	bne.n	801917a <lv_font_get_bitmap_fmt_txt+0x72>
 8019176:	2300      	movs	r3, #0
 8019178:	e079      	b.n	801926e <lv_font_get_bitmap_fmt_txt+0x166>

        uint32_t buf_size = gsize;
 801917a:	697b      	ldr	r3, [r7, #20]
 801917c:	627b      	str	r3, [r7, #36]	; 0x24
        /*Compute memory size needed to hold decompressed glyph, rounding up*/
        switch(fdsc->bpp) {
 801917e:	6a3b      	ldr	r3, [r7, #32]
 8019180:	7cdb      	ldrb	r3, [r3, #19]
 8019182:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8019186:	b2db      	uxtb	r3, r3
 8019188:	3b01      	subs	r3, #1
 801918a:	2b03      	cmp	r3, #3
 801918c:	d81e      	bhi.n	80191cc <lv_font_get_bitmap_fmt_txt+0xc4>
 801918e:	a201      	add	r2, pc, #4	; (adr r2, 8019194 <lv_font_get_bitmap_fmt_txt+0x8c>)
 8019190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019194:	080191a5 	.word	0x080191a5
 8019198:	080191af 	.word	0x080191af
 801919c:	080191b9 	.word	0x080191b9
 80191a0:	080191c3 	.word	0x080191c3
            case 1:
                buf_size = (gsize + 7) >> 3;
 80191a4:	697b      	ldr	r3, [r7, #20]
 80191a6:	3307      	adds	r3, #7
 80191a8:	08db      	lsrs	r3, r3, #3
 80191aa:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80191ac:	e00e      	b.n	80191cc <lv_font_get_bitmap_fmt_txt+0xc4>
            case 2:
                buf_size = (gsize + 3) >> 2;
 80191ae:	697b      	ldr	r3, [r7, #20]
 80191b0:	3303      	adds	r3, #3
 80191b2:	089b      	lsrs	r3, r3, #2
 80191b4:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80191b6:	e009      	b.n	80191cc <lv_font_get_bitmap_fmt_txt+0xc4>
            case 3:
                buf_size = (gsize + 1) >> 1;
 80191b8:	697b      	ldr	r3, [r7, #20]
 80191ba:	3301      	adds	r3, #1
 80191bc:	085b      	lsrs	r3, r3, #1
 80191be:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80191c0:	e004      	b.n	80191cc <lv_font_get_bitmap_fmt_txt+0xc4>
            case 4:
                buf_size = (gsize + 1) >> 1;
 80191c2:	697b      	ldr	r3, [r7, #20]
 80191c4:	3301      	adds	r3, #1
 80191c6:	085b      	lsrs	r3, r3, #1
 80191c8:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80191ca:	bf00      	nop
        }

        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
 80191cc:	4b2a      	ldr	r3, [pc, #168]	; (8019278 <lv_font_get_bitmap_fmt_txt+0x170>)
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	4618      	mov	r0, r3
 80191d2:	f003 fa0f 	bl	801c5f4 <_lv_mem_get_size>
 80191d6:	4602      	mov	r2, r0
 80191d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191da:	4293      	cmp	r3, r2
 80191dc:	d920      	bls.n	8019220 <lv_font_get_bitmap_fmt_txt+0x118>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
 80191de:	4b26      	ldr	r3, [pc, #152]	; (8019278 <lv_font_get_bitmap_fmt_txt+0x170>)
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80191e4:	4618      	mov	r0, r3
 80191e6:	f003 f961 	bl	801c4ac <lv_mem_realloc>
 80191ea:	6138      	str	r0, [r7, #16]
            LV_ASSERT_MEM(tmp);
 80191ec:	6938      	ldr	r0, [r7, #16]
 80191ee:	f002 fb31 	bl	801b854 <lv_debug_check_null>
 80191f2:	4603      	mov	r3, r0
 80191f4:	f083 0301 	eor.w	r3, r3, #1
 80191f8:	b2db      	uxtb	r3, r3
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d008      	beq.n	8019210 <lv_font_get_bitmap_fmt_txt+0x108>
 80191fe:	693b      	ldr	r3, [r7, #16]
 8019200:	f04f 0400 	mov.w	r4, #0
 8019204:	461a      	mov	r2, r3
 8019206:	4623      	mov	r3, r4
 8019208:	481c      	ldr	r0, [pc, #112]	; (801927c <lv_font_get_bitmap_fmt_txt+0x174>)
 801920a:	f002 fb33 	bl	801b874 <lv_debug_log_error>
 801920e:	e7fe      	b.n	801920e <lv_font_get_bitmap_fmt_txt+0x106>
            if(tmp == NULL) return NULL;
 8019210:	693b      	ldr	r3, [r7, #16]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d101      	bne.n	801921a <lv_font_get_bitmap_fmt_txt+0x112>
 8019216:	2300      	movs	r3, #0
 8019218:	e029      	b.n	801926e <lv_font_get_bitmap_fmt_txt+0x166>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
 801921a:	4a17      	ldr	r2, [pc, #92]	; (8019278 <lv_font_get_bitmap_fmt_txt+0x170>)
 801921c:	693b      	ldr	r3, [r7, #16]
 801921e:	6013      	str	r3, [r2, #0]
        }

        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 8019220:	6a3b      	ldr	r3, [r7, #32]
 8019222:	7cdb      	ldrb	r3, [r3, #19]
 8019224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019228:	b2db      	uxtb	r3, r3
 801922a:	2b40      	cmp	r3, #64	; 0x40
 801922c:	bf0c      	ite	eq
 801922e:	2301      	moveq	r3, #1
 8019230:	2300      	movne	r3, #0
 8019232:	73fb      	strb	r3, [r7, #15]
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8019234:	6a3b      	ldr	r3, [r7, #32]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	69ba      	ldr	r2, [r7, #24]
 801923a:	6812      	ldr	r2, [r2, #0]
 801923c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019240:	1898      	adds	r0, r3, r2
 8019242:	4b0d      	ldr	r3, [pc, #52]	; (8019278 <lv_font_get_bitmap_fmt_txt+0x170>)
 8019244:	6819      	ldr	r1, [r3, #0]
 8019246:	69bb      	ldr	r3, [r7, #24]
 8019248:	791b      	ldrb	r3, [r3, #4]
 801924a:	b21a      	sxth	r2, r3
 801924c:	69bb      	ldr	r3, [r7, #24]
 801924e:	795b      	ldrb	r3, [r3, #5]
 8019250:	b21c      	sxth	r4, r3
                   (uint8_t)fdsc->bpp, prefilter);
 8019252:	6a3b      	ldr	r3, [r7, #32]
 8019254:	7cdb      	ldrb	r3, [r3, #19]
 8019256:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801925a:	b2db      	uxtb	r3, r3
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 801925c:	461d      	mov	r5, r3
 801925e:	7bfb      	ldrb	r3, [r7, #15]
 8019260:	9301      	str	r3, [sp, #4]
 8019262:	9500      	str	r5, [sp, #0]
 8019264:	4623      	mov	r3, r4
 8019266:	f000 fac9 	bl	80197fc <decompress>
        return LV_GC_ROOT(_lv_font_decompr_buf);
 801926a:	4b03      	ldr	r3, [pc, #12]	; (8019278 <lv_font_get_bitmap_fmt_txt+0x170>)
 801926c:	681b      	ldr	r3, [r3, #0]
#endif
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
 801926e:	4618      	mov	r0, r3
 8019270:	3728      	adds	r7, #40	; 0x28
 8019272:	46bd      	mov	sp, r7
 8019274:	bdb0      	pop	{r4, r5, r7, pc}
 8019276:	bf00      	nop
 8019278:	20020390 	.word	0x20020390
 801927c:	080283b0 	.word	0x080283b0

08019280 <lv_font_get_glyph_dsc_fmt_txt>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                   uint32_t unicode_letter_next)
{
 8019280:	b580      	push	{r7, lr}
 8019282:	b08c      	sub	sp, #48	; 0x30
 8019284:	af00      	add	r7, sp, #0
 8019286:	60f8      	str	r0, [r7, #12]
 8019288:	60b9      	str	r1, [r7, #8]
 801928a:	607a      	str	r2, [r7, #4]
 801928c:	603b      	str	r3, [r7, #0]
    bool is_tab = false;
 801928e:	2300      	movs	r3, #0
 8019290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(unicode_letter == '\t') {
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	2b09      	cmp	r3, #9
 8019298:	d104      	bne.n	80192a4 <lv_font_get_glyph_dsc_fmt_txt+0x24>
        unicode_letter = ' ';
 801929a:	2320      	movs	r3, #32
 801929c:	607b      	str	r3, [r7, #4]
        is_tab = true;
 801929e:	2301      	movs	r3, #1
 80192a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	691b      	ldr	r3, [r3, #16]
 80192a8:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80192aa:	6879      	ldr	r1, [r7, #4]
 80192ac:	68f8      	ldr	r0, [r7, #12]
 80192ae:	f000 f883 	bl	80193b8 <get_glyph_dsc_id>
 80192b2:	6238      	str	r0, [r7, #32]
    if(!gid) return false;
 80192b4:	6a3b      	ldr	r3, [r7, #32]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d101      	bne.n	80192be <lv_font_get_glyph_dsc_fmt_txt+0x3e>
 80192ba:	2300      	movs	r3, #0
 80192bc:	e066      	b.n	801938c <lv_font_get_glyph_dsc_fmt_txt+0x10c>

    int8_t kvalue = 0;
 80192be:	2300      	movs	r3, #0
 80192c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(fdsc->kern_dsc) {
 80192c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192c6:	68db      	ldr	r3, [r3, #12]
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d00f      	beq.n	80192ec <lv_font_get_glyph_dsc_fmt_txt+0x6c>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 80192cc:	6839      	ldr	r1, [r7, #0]
 80192ce:	68f8      	ldr	r0, [r7, #12]
 80192d0:	f000 f872 	bl	80193b8 <get_glyph_dsc_id>
 80192d4:	61f8      	str	r0, [r7, #28]
        if(gid_next) {
 80192d6:	69fb      	ldr	r3, [r7, #28]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d007      	beq.n	80192ec <lv_font_get_glyph_dsc_fmt_txt+0x6c>
            kvalue = get_kern_value(font, gid, gid_next);
 80192dc:	69fa      	ldr	r2, [r7, #28]
 80192de:	6a39      	ldr	r1, [r7, #32]
 80192e0:	68f8      	ldr	r0, [r7, #12]
 80192e2:	f000 f99b 	bl	801961c <get_kern_value>
 80192e6:	4603      	mov	r3, r0
 80192e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 80192ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ee:	685a      	ldr	r2, [r3, #4]
 80192f0:	6a3b      	ldr	r3, [r7, #32]
 80192f2:	00db      	lsls	r3, r3, #3
 80192f4:	4413      	add	r3, r2
 80192f6:	61bb      	str	r3, [r7, #24]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80192f8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80192fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192fe:	8a12      	ldrh	r2, [r2, #16]
 8019300:	fb02 f303 	mul.w	r3, r2, r3
 8019304:	111b      	asrs	r3, r3, #4
 8019306:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w;
 8019308:	69bb      	ldr	r3, [r7, #24]
 801930a:	885b      	ldrh	r3, [r3, #2]
 801930c:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8019310:	b29b      	uxth	r3, r3
 8019312:	62bb      	str	r3, [r7, #40]	; 0x28
    if(is_tab) adv_w *= 2;
 8019314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019318:	2b00      	cmp	r3, #0
 801931a:	d002      	beq.n	8019322 <lv_font_get_glyph_dsc_fmt_txt+0xa2>
 801931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801931e:	005b      	lsls	r3, r3, #1
 8019320:	62bb      	str	r3, [r7, #40]	; 0x28

    adv_w += kv;
 8019322:	697b      	ldr	r3, [r7, #20]
 8019324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019326:	4413      	add	r3, r2
 8019328:	62bb      	str	r3, [r7, #40]	; 0x28
    adv_w  = (adv_w + (1 << 3)) >> 4;
 801932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801932c:	3308      	adds	r3, #8
 801932e:	091b      	lsrs	r3, r3, #4
 8019330:	62bb      	str	r3, [r7, #40]	; 0x28

    dsc_out->adv_w = adv_w;
 8019332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019334:	b29a      	uxth	r2, r3
 8019336:	68bb      	ldr	r3, [r7, #8]
 8019338:	801a      	strh	r2, [r3, #0]
    dsc_out->box_h = gdsc->box_h;
 801933a:	69bb      	ldr	r3, [r7, #24]
 801933c:	795b      	ldrb	r3, [r3, #5]
 801933e:	b29a      	uxth	r2, r3
 8019340:	68bb      	ldr	r3, [r7, #8]
 8019342:	809a      	strh	r2, [r3, #4]
    dsc_out->box_w = gdsc->box_w;
 8019344:	69bb      	ldr	r3, [r7, #24]
 8019346:	791b      	ldrb	r3, [r3, #4]
 8019348:	b29a      	uxth	r2, r3
 801934a:	68bb      	ldr	r3, [r7, #8]
 801934c:	805a      	strh	r2, [r3, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 801934e:	69bb      	ldr	r3, [r7, #24]
 8019350:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8019354:	b21a      	sxth	r2, r3
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	80da      	strh	r2, [r3, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 801935a:	69bb      	ldr	r3, [r7, #24]
 801935c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8019360:	b21a      	sxth	r2, r3
 8019362:	68bb      	ldr	r3, [r7, #8]
 8019364:	811a      	strh	r2, [r3, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8019366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019368:	7cdb      	ldrb	r3, [r3, #19]
 801936a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801936e:	b2db      	uxtb	r3, r3
 8019370:	461a      	mov	r2, r3
 8019372:	68bb      	ldr	r3, [r7, #8]
 8019374:	729a      	strb	r2, [r3, #10]

    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8019376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801937a:	2b00      	cmp	r3, #0
 801937c:	d005      	beq.n	801938a <lv_font_get_glyph_dsc_fmt_txt+0x10a>
 801937e:	68bb      	ldr	r3, [r7, #8]
 8019380:	885b      	ldrh	r3, [r3, #2]
 8019382:	005b      	lsls	r3, r3, #1
 8019384:	b29a      	uxth	r2, r3
 8019386:	68bb      	ldr	r3, [r7, #8]
 8019388:	805a      	strh	r2, [r3, #2]

    return true;
 801938a:	2301      	movs	r3, #1
}
 801938c:	4618      	mov	r0, r3
 801938e:	3730      	adds	r7, #48	; 0x30
 8019390:	46bd      	mov	sp, r7
 8019392:	bd80      	pop	{r7, pc}

08019394 <_lv_font_clean_up_fmt_txt>:

/**
 * Free the allocated memories.
 */
void _lv_font_clean_up_fmt_txt(void)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
 8019398:	4b06      	ldr	r3, [pc, #24]	; (80193b4 <_lv_font_clean_up_fmt_txt+0x20>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	2b00      	cmp	r3, #0
 801939e:	d007      	beq.n	80193b0 <_lv_font_clean_up_fmt_txt+0x1c>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
 80193a0:	4b04      	ldr	r3, [pc, #16]	; (80193b4 <_lv_font_clean_up_fmt_txt+0x20>)
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	4618      	mov	r0, r3
 80193a6:	f003 f82b 	bl	801c400 <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
 80193aa:	4b02      	ldr	r3, [pc, #8]	; (80193b4 <_lv_font_clean_up_fmt_txt+0x20>)
 80193ac:	2200      	movs	r2, #0
 80193ae:	601a      	str	r2, [r3, #0]
    }
}
 80193b0:	bf00      	nop
 80193b2:	bd80      	pop	{r7, pc}
 80193b4:	20020390 	.word	0x20020390

080193b8 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 80193b8:	b590      	push	{r4, r7, lr}
 80193ba:	b091      	sub	sp, #68	; 0x44
 80193bc:	af02      	add	r7, sp, #8
 80193be:	6078      	str	r0, [r7, #4]
 80193c0:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d101      	bne.n	80193cc <get_glyph_dsc_id+0x14>
 80193c8:	2300      	movs	r3, #0
 80193ca:	e121      	b.n	8019610 <get_glyph_dsc_id+0x258>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	691b      	ldr	r3, [r3, #16]
 80193d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Check the cache first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 80193d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193d4:	695b      	ldr	r3, [r3, #20]
 80193d6:	683a      	ldr	r2, [r7, #0]
 80193d8:	429a      	cmp	r2, r3
 80193da:	d102      	bne.n	80193e2 <get_glyph_dsc_id+0x2a>
 80193dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193de:	699b      	ldr	r3, [r3, #24]
 80193e0:	e116      	b.n	8019610 <get_glyph_dsc_id+0x258>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 80193e2:	2300      	movs	r3, #0
 80193e4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80193e6:	e102      	b.n	80195ee <get_glyph_dsc_id+0x236>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80193e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193ea:	6899      	ldr	r1, [r3, #8]
 80193ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80193ee:	4613      	mov	r3, r2
 80193f0:	009b      	lsls	r3, r3, #2
 80193f2:	4413      	add	r3, r2
 80193f4:	009b      	lsls	r3, r3, #2
 80193f6:	440b      	add	r3, r1
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	683a      	ldr	r2, [r7, #0]
 80193fc:	1ad3      	subs	r3, r2, r3
 80193fe:	62bb      	str	r3, [r7, #40]	; 0x28
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8019400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019402:	6899      	ldr	r1, [r3, #8]
 8019404:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019406:	4613      	mov	r3, r2
 8019408:	009b      	lsls	r3, r3, #2
 801940a:	4413      	add	r3, r2
 801940c:	009b      	lsls	r3, r3, #2
 801940e:	440b      	add	r3, r1
 8019410:	889b      	ldrh	r3, [r3, #4]
 8019412:	461a      	mov	r2, r3
 8019414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019416:	4293      	cmp	r3, r2
 8019418:	d903      	bls.n	8019422 <get_glyph_dsc_id+0x6a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801941a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801941c:	3301      	adds	r3, #1
 801941e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8019420:	e0e5      	b.n	80195ee <get_glyph_dsc_id+0x236>
        uint32_t glyph_id = 0;
 8019422:	2300      	movs	r3, #0
 8019424:	633b      	str	r3, [r7, #48]	; 0x30
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8019426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019428:	6899      	ldr	r1, [r3, #8]
 801942a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801942c:	4613      	mov	r3, r2
 801942e:	009b      	lsls	r3, r3, #2
 8019430:	4413      	add	r3, r2
 8019432:	009b      	lsls	r3, r3, #2
 8019434:	440b      	add	r3, r1
 8019436:	7c9b      	ldrb	r3, [r3, #18]
 8019438:	2b02      	cmp	r3, #2
 801943a:	d10d      	bne.n	8019458 <get_glyph_dsc_id+0xa0>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801943e:	6899      	ldr	r1, [r3, #8]
 8019440:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019442:	4613      	mov	r3, r2
 8019444:	009b      	lsls	r3, r3, #2
 8019446:	4413      	add	r3, r2
 8019448:	009b      	lsls	r3, r3, #2
 801944a:	440b      	add	r3, r1
 801944c:	88db      	ldrh	r3, [r3, #6]
 801944e:	461a      	mov	r2, r3
 8019450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019452:	4413      	add	r3, r2
 8019454:	633b      	str	r3, [r7, #48]	; 0x30
 8019456:	e0c2      	b.n	80195de <get_glyph_dsc_id+0x226>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8019458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801945a:	6899      	ldr	r1, [r3, #8]
 801945c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801945e:	4613      	mov	r3, r2
 8019460:	009b      	lsls	r3, r3, #2
 8019462:	4413      	add	r3, r2
 8019464:	009b      	lsls	r3, r3, #2
 8019466:	440b      	add	r3, r1
 8019468:	7c9b      	ldrb	r3, [r3, #18]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d11a      	bne.n	80194a4 <get_glyph_dsc_id+0xec>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 801946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019470:	6899      	ldr	r1, [r3, #8]
 8019472:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019474:	4613      	mov	r3, r2
 8019476:	009b      	lsls	r3, r3, #2
 8019478:	4413      	add	r3, r2
 801947a:	009b      	lsls	r3, r3, #2
 801947c:	440b      	add	r3, r1
 801947e:	68db      	ldr	r3, [r3, #12]
 8019480:	613b      	str	r3, [r7, #16]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8019482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019484:	6899      	ldr	r1, [r3, #8]
 8019486:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019488:	4613      	mov	r3, r2
 801948a:	009b      	lsls	r3, r3, #2
 801948c:	4413      	add	r3, r2
 801948e:	009b      	lsls	r3, r3, #2
 8019490:	440b      	add	r3, r1
 8019492:	88db      	ldrh	r3, [r3, #6]
 8019494:	4619      	mov	r1, r3
 8019496:	693a      	ldr	r2, [r7, #16]
 8019498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801949a:	4413      	add	r3, r2
 801949c:	781b      	ldrb	r3, [r3, #0]
 801949e:	440b      	add	r3, r1
 80194a0:	633b      	str	r3, [r7, #48]	; 0x30
 80194a2:	e09c      	b.n	80195de <get_glyph_dsc_id+0x226>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80194a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194a6:	6899      	ldr	r1, [r3, #8]
 80194a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80194aa:	4613      	mov	r3, r2
 80194ac:	009b      	lsls	r3, r3, #2
 80194ae:	4413      	add	r3, r2
 80194b0:	009b      	lsls	r3, r3, #2
 80194b2:	440b      	add	r3, r1
 80194b4:	7c9b      	ldrb	r3, [r3, #18]
 80194b6:	2b03      	cmp	r3, #3
 80194b8:	d13c      	bne.n	8019534 <get_glyph_dsc_id+0x17c>
            uint16_t key = rcp;
 80194ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194bc:	b29b      	uxth	r3, r3
 80194be:	81fb      	strh	r3, [r7, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80194c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194c2:	6899      	ldr	r1, [r3, #8]
 80194c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80194c6:	4613      	mov	r3, r2
 80194c8:	009b      	lsls	r3, r3, #2
 80194ca:	4413      	add	r3, r2
 80194cc:	009b      	lsls	r3, r3, #2
 80194ce:	440b      	add	r3, r1
 80194d0:	689c      	ldr	r4, [r3, #8]
 80194d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194d4:	6899      	ldr	r1, [r3, #8]
 80194d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80194d8:	4613      	mov	r3, r2
 80194da:	009b      	lsls	r3, r3, #2
 80194dc:	4413      	add	r3, r2
 80194de:	009b      	lsls	r3, r3, #2
 80194e0:	440b      	add	r3, r1
 80194e2:	8a1b      	ldrh	r3, [r3, #16]
 80194e4:	461a      	mov	r2, r3
 80194e6:	f107 000e 	add.w	r0, r7, #14
 80194ea:	4b4b      	ldr	r3, [pc, #300]	; (8019618 <get_glyph_dsc_id+0x260>)
 80194ec:	9300      	str	r3, [sp, #0]
 80194ee:	2302      	movs	r3, #2
 80194f0:	4621      	mov	r1, r4
 80194f2:	f004 fd79 	bl	801dfe8 <_lv_utils_bsearch>
 80194f6:	61b8      	str	r0, [r7, #24]
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 80194f8:	69bb      	ldr	r3, [r7, #24]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d06f      	beq.n	80195de <get_glyph_dsc_id+0x226>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80194fe:	69b9      	ldr	r1, [r7, #24]
 8019500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019502:	6898      	ldr	r0, [r3, #8]
 8019504:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019506:	4613      	mov	r3, r2
 8019508:	009b      	lsls	r3, r3, #2
 801950a:	4413      	add	r3, r2
 801950c:	009b      	lsls	r3, r3, #2
 801950e:	4403      	add	r3, r0
 8019510:	689b      	ldr	r3, [r3, #8]
 8019512:	1acb      	subs	r3, r1, r3
 8019514:	105b      	asrs	r3, r3, #1
 8019516:	617b      	str	r3, [r7, #20]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8019518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801951a:	6899      	ldr	r1, [r3, #8]
 801951c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801951e:	4613      	mov	r3, r2
 8019520:	009b      	lsls	r3, r3, #2
 8019522:	4413      	add	r3, r2
 8019524:	009b      	lsls	r3, r3, #2
 8019526:	440b      	add	r3, r1
 8019528:	88db      	ldrh	r3, [r3, #6]
 801952a:	461a      	mov	r2, r3
 801952c:	697b      	ldr	r3, [r7, #20]
 801952e:	4413      	add	r3, r2
 8019530:	633b      	str	r3, [r7, #48]	; 0x30
 8019532:	e054      	b.n	80195de <get_glyph_dsc_id+0x226>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8019534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019536:	6899      	ldr	r1, [r3, #8]
 8019538:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801953a:	4613      	mov	r3, r2
 801953c:	009b      	lsls	r3, r3, #2
 801953e:	4413      	add	r3, r2
 8019540:	009b      	lsls	r3, r3, #2
 8019542:	440b      	add	r3, r1
 8019544:	7c9b      	ldrb	r3, [r3, #18]
 8019546:	2b01      	cmp	r3, #1
 8019548:	d149      	bne.n	80195de <get_glyph_dsc_id+0x226>
            uint16_t key = rcp;
 801954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801954c:	b29b      	uxth	r3, r3
 801954e:	81bb      	strh	r3, [r7, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8019550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019552:	6899      	ldr	r1, [r3, #8]
 8019554:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019556:	4613      	mov	r3, r2
 8019558:	009b      	lsls	r3, r3, #2
 801955a:	4413      	add	r3, r2
 801955c:	009b      	lsls	r3, r3, #2
 801955e:	440b      	add	r3, r1
 8019560:	689c      	ldr	r4, [r3, #8]
 8019562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019564:	6899      	ldr	r1, [r3, #8]
 8019566:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019568:	4613      	mov	r3, r2
 801956a:	009b      	lsls	r3, r3, #2
 801956c:	4413      	add	r3, r2
 801956e:	009b      	lsls	r3, r3, #2
 8019570:	440b      	add	r3, r1
 8019572:	8a1b      	ldrh	r3, [r3, #16]
 8019574:	461a      	mov	r2, r3
 8019576:	f107 000c 	add.w	r0, r7, #12
 801957a:	4b27      	ldr	r3, [pc, #156]	; (8019618 <get_glyph_dsc_id+0x260>)
 801957c:	9300      	str	r3, [sp, #0]
 801957e:	2302      	movs	r3, #2
 8019580:	4621      	mov	r1, r4
 8019582:	f004 fd31 	bl	801dfe8 <_lv_utils_bsearch>
 8019586:	6278      	str	r0, [r7, #36]	; 0x24
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 8019588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801958a:	2b00      	cmp	r3, #0
 801958c:	d027      	beq.n	80195de <get_glyph_dsc_id+0x226>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801958e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019592:	6898      	ldr	r0, [r3, #8]
 8019594:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019596:	4613      	mov	r3, r2
 8019598:	009b      	lsls	r3, r3, #2
 801959a:	4413      	add	r3, r2
 801959c:	009b      	lsls	r3, r3, #2
 801959e:	4403      	add	r3, r0
 80195a0:	689b      	ldr	r3, [r3, #8]
 80195a2:	1acb      	subs	r3, r1, r3
 80195a4:	105b      	asrs	r3, r3, #1
 80195a6:	623b      	str	r3, [r7, #32]
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 80195a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195aa:	6899      	ldr	r1, [r3, #8]
 80195ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80195ae:	4613      	mov	r3, r2
 80195b0:	009b      	lsls	r3, r3, #2
 80195b2:	4413      	add	r3, r2
 80195b4:	009b      	lsls	r3, r3, #2
 80195b6:	440b      	add	r3, r1
 80195b8:	68db      	ldr	r3, [r3, #12]
 80195ba:	61fb      	str	r3, [r7, #28]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80195bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195be:	6899      	ldr	r1, [r3, #8]
 80195c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80195c2:	4613      	mov	r3, r2
 80195c4:	009b      	lsls	r3, r3, #2
 80195c6:	4413      	add	r3, r2
 80195c8:	009b      	lsls	r3, r3, #2
 80195ca:	440b      	add	r3, r1
 80195cc:	88db      	ldrh	r3, [r3, #6]
 80195ce:	4619      	mov	r1, r3
 80195d0:	6a3b      	ldr	r3, [r7, #32]
 80195d2:	005b      	lsls	r3, r3, #1
 80195d4:	69fa      	ldr	r2, [r7, #28]
 80195d6:	4413      	add	r3, r2
 80195d8:	881b      	ldrh	r3, [r3, #0]
 80195da:	440b      	add	r3, r1
 80195dc:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }

        /*Update the cache*/
        fdsc->last_letter = letter;
 80195de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195e0:	683a      	ldr	r2, [r7, #0]
 80195e2:	615a      	str	r2, [r3, #20]
        fdsc->last_glyph_id = glyph_id;
 80195e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195e8:	619a      	str	r2, [r3, #24]
        return glyph_id;
 80195ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195ec:	e010      	b.n	8019610 <get_glyph_dsc_id+0x258>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80195ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f0:	8a5b      	ldrh	r3, [r3, #18]
 80195f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80195f6:	b29b      	uxth	r3, r3
 80195f8:	461a      	mov	r2, r3
 80195fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80195fc:	4293      	cmp	r3, r2
 80195fe:	f4ff aef3 	bcc.w	80193e8 <get_glyph_dsc_id+0x30>
    }

    fdsc->last_letter = letter;
 8019602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019604:	683a      	ldr	r2, [r7, #0]
 8019606:	615a      	str	r2, [r3, #20]
    fdsc->last_glyph_id = 0;
 8019608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801960a:	2200      	movs	r2, #0
 801960c:	619a      	str	r2, [r3, #24]
    return 0;
 801960e:	2300      	movs	r3, #0

}
 8019610:	4618      	mov	r0, r3
 8019612:	373c      	adds	r7, #60	; 0x3c
 8019614:	46bd      	mov	sp, r7
 8019616:	bd90      	pop	{r4, r7, pc}
 8019618:	08019dcd 	.word	0x08019dcd

0801961c <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b094      	sub	sp, #80	; 0x50
 8019620:	af02      	add	r7, sp, #8
 8019622:	60f8      	str	r0, [r7, #12]
 8019624:	60b9      	str	r1, [r7, #8]
 8019626:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	691b      	ldr	r3, [r3, #16]
 801962c:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 801962e:	2300      	movs	r3, #0
 8019630:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 8019634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019636:	7cdb      	ldrb	r3, [r3, #19]
 8019638:	f003 0320 	and.w	r3, r3, #32
 801963c:	b2db      	uxtb	r3, r3
 801963e:	2b00      	cmp	r3, #0
 8019640:	d160      	bne.n	8019704 <get_kern_value+0xe8>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8019642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019644:	68db      	ldr	r3, [r3, #12]
 8019646:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 8019648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801964a:	7adb      	ldrb	r3, [r3, #11]
 801964c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019650:	b2db      	uxtb	r3, r3
 8019652:	2b00      	cmp	r3, #0
 8019654:	d129      	bne.n	80196aa <get_kern_value+0x8e>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint16_t * g_ids = kdsc->glyph_ids;
 8019656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	b29b      	uxth	r3, r3
 8019660:	021b      	lsls	r3, r3, #8
 8019662:	b29a      	uxth	r2, r3
 8019664:	68bb      	ldr	r3, [r7, #8]
 8019666:	b29b      	uxth	r3, r3
 8019668:	4413      	add	r3, r2
 801966a:	b29b      	uxth	r3, r3
 801966c:	837b      	strh	r3, [r7, #26]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 801966e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019670:	689b      	ldr	r3, [r3, #8]
 8019672:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8019676:	461a      	mov	r2, r3
 8019678:	f107 001a 	add.w	r0, r7, #26
 801967c:	4b39      	ldr	r3, [pc, #228]	; (8019764 <get_kern_value+0x148>)
 801967e:	9300      	str	r3, [sp, #0]
 8019680:	2302      	movs	r3, #2
 8019682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019684:	f004 fcb0 	bl	801dfe8 <_lv_utils_bsearch>
 8019688:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801968a:	6a3b      	ldr	r3, [r7, #32]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d063      	beq.n	8019758 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 8019690:	6a3a      	ldr	r2, [r7, #32]
 8019692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019694:	1ad3      	subs	r3, r2, r3
 8019696:	105b      	asrs	r3, r3, #1
 8019698:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 801969a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801969c:	685a      	ldr	r2, [r3, #4]
 801969e:	69fb      	ldr	r3, [r7, #28]
 80196a0:	4413      	add	r3, r2
 80196a2:	781b      	ldrb	r3, [r3, #0]
 80196a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80196a8:	e056      	b.n	8019758 <get_kern_value+0x13c>
            }
        }
        else if(kdsc->glyph_ids_size == 1) {
 80196aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196ac:	7adb      	ldrb	r3, [r3, #11]
 80196ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80196b2:	b2db      	uxtb	r3, r3
 80196b4:	2b40      	cmp	r3, #64	; 0x40
 80196b6:	d14f      	bne.n	8019758 <get_kern_value+0x13c>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint32_t * g_ids = kdsc->glyph_ids;
 80196b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	041a      	lsls	r2, r3, #16
 80196c2:	68bb      	ldr	r3, [r7, #8]
 80196c4:	4413      	add	r3, r2
 80196c6:	617b      	str	r3, [r7, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 80196c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196ca:	689b      	ldr	r3, [r3, #8]
 80196cc:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80196d0:	461a      	mov	r2, r3
 80196d2:	f107 0014 	add.w	r0, r7, #20
 80196d6:	4b24      	ldr	r3, [pc, #144]	; (8019768 <get_kern_value+0x14c>)
 80196d8:	9300      	str	r3, [sp, #0]
 80196da:	2304      	movs	r3, #4
 80196dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80196de:	f004 fc83 	bl	801dfe8 <_lv_utils_bsearch>
 80196e2:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 80196e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d036      	beq.n	8019758 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 80196ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196ee:	1ad3      	subs	r3, r2, r3
 80196f0:	109b      	asrs	r3, r3, #2
 80196f2:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 80196f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196f6:	685a      	ldr	r2, [r3, #4]
 80196f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196fa:	4413      	add	r3, r2
 80196fc:	781b      	ldrb	r3, [r3, #0]
 80196fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019702:	e029      	b.n	8019758 <get_kern_value+0x13c>
            /*Invalid value*/
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 8019704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019706:	68db      	ldr	r3, [r3, #12]
 8019708:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 801970a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801970c:	685a      	ldr	r2, [r3, #4]
 801970e:	68bb      	ldr	r3, [r7, #8]
 8019710:	4413      	add	r3, r2
 8019712:	781b      	ldrb	r3, [r3, #0]
 8019714:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8019718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801971a:	689a      	ldr	r2, [r3, #8]
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	4413      	add	r3, r2
 8019720:	781b      	ldrb	r3, [r3, #0]
 8019722:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 8019726:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801972a:	2b00      	cmp	r3, #0
 801972c:	d014      	beq.n	8019758 <get_kern_value+0x13c>
 801972e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8019732:	2b00      	cmp	r3, #0
 8019734:	d010      	beq.n	8019758 <get_kern_value+0x13c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8019736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801973e:	3a01      	subs	r2, #1
 8019740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019742:	7b49      	ldrb	r1, [r1, #13]
 8019744:	fb01 f102 	mul.w	r1, r1, r2
 8019748:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 801974c:	3a01      	subs	r2, #1
 801974e:	440a      	add	r2, r1
 8019750:	4413      	add	r3, r2
 8019752:	781b      	ldrb	r3, [r3, #0]
 8019754:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 8019758:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 801975c:	4618      	mov	r0, r3
 801975e:	3748      	adds	r7, #72	; 0x48
 8019760:	46bd      	mov	sp, r7
 8019762:	bd80      	pop	{r7, pc}
 8019764:	0801976d 	.word	0x0801976d
 8019768:	080197b5 	.word	0x080197b5

0801976c <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 801976c:	b480      	push	{r7}
 801976e:	b085      	sub	sp, #20
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]
 8019774:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 801977a:	683b      	ldr	r3, [r7, #0]
 801977c:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	781a      	ldrb	r2, [r3, #0]
 8019782:	68bb      	ldr	r3, [r7, #8]
 8019784:	781b      	ldrb	r3, [r3, #0]
 8019786:	429a      	cmp	r2, r3
 8019788:	d006      	beq.n	8019798 <kern_pair_8_compare+0x2c>
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	781b      	ldrb	r3, [r3, #0]
 801978e:	461a      	mov	r2, r3
 8019790:	68bb      	ldr	r3, [r7, #8]
 8019792:	781b      	ldrb	r3, [r3, #0]
 8019794:	1ad3      	subs	r3, r2, r3
 8019796:	e007      	b.n	80197a8 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	3301      	adds	r3, #1
 801979c:	781b      	ldrb	r3, [r3, #0]
 801979e:	461a      	mov	r2, r3
 80197a0:	68bb      	ldr	r3, [r7, #8]
 80197a2:	3301      	adds	r3, #1
 80197a4:	781b      	ldrb	r3, [r3, #0]
 80197a6:	1ad3      	subs	r3, r2, r3

}
 80197a8:	4618      	mov	r0, r3
 80197aa:	3714      	adds	r7, #20
 80197ac:	46bd      	mov	sp, r7
 80197ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b2:	4770      	bx	lr

080197b4 <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 80197b4:	b480      	push	{r7}
 80197b6:	b085      	sub	sp, #20
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]
 80197bc:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 80197c2:	683b      	ldr	r3, [r7, #0]
 80197c4:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	881a      	ldrh	r2, [r3, #0]
 80197ca:	68bb      	ldr	r3, [r7, #8]
 80197cc:	881b      	ldrh	r3, [r3, #0]
 80197ce:	429a      	cmp	r2, r3
 80197d0:	d006      	beq.n	80197e0 <kern_pair_16_compare+0x2c>
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	881b      	ldrh	r3, [r3, #0]
 80197d6:	461a      	mov	r2, r3
 80197d8:	68bb      	ldr	r3, [r7, #8]
 80197da:	881b      	ldrh	r3, [r3, #0]
 80197dc:	1ad3      	subs	r3, r2, r3
 80197de:	e007      	b.n	80197f0 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	3302      	adds	r3, #2
 80197e4:	881b      	ldrh	r3, [r3, #0]
 80197e6:	461a      	mov	r2, r3
 80197e8:	68bb      	ldr	r3, [r7, #8]
 80197ea:	3302      	adds	r3, #2
 80197ec:	881b      	ldrh	r3, [r3, #0]
 80197ee:	1ad3      	subs	r3, r2, r3
}
 80197f0:	4618      	mov	r0, r3
 80197f2:	3714      	adds	r7, #20
 80197f4:	46bd      	mov	sp, r7
 80197f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197fa:	4770      	bx	lr

080197fc <decompress>:
 * @param px_num number of pixels in the glyph (width * height)
 * @param bpp bit per pixel (bpp = 3 will be converted to bpp = 4)
 * @param prefilter true: the lines are XORed
 */
static void decompress(const uint8_t * in, uint8_t * out, lv_coord_t w, lv_coord_t h, uint8_t bpp, bool prefilter)
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b08a      	sub	sp, #40	; 0x28
 8019800:	af00      	add	r7, sp, #0
 8019802:	60f8      	str	r0, [r7, #12]
 8019804:	60b9      	str	r1, [r7, #8]
 8019806:	4611      	mov	r1, r2
 8019808:	461a      	mov	r2, r3
 801980a:	460b      	mov	r3, r1
 801980c:	80fb      	strh	r3, [r7, #6]
 801980e:	4613      	mov	r3, r2
 8019810:	80bb      	strh	r3, [r7, #4]
    uint32_t wrp = 0;
 8019812:	2300      	movs	r3, #0
 8019814:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t wr_size = bpp;
 8019816:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801981a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(bpp == 3) wr_size = 4;
 801981e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019822:	2b03      	cmp	r3, #3
 8019824:	d102      	bne.n	801982c <decompress+0x30>
 8019826:	2304      	movs	r3, #4
 8019828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    rle_init(in, bpp);
 801982c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019830:	4619      	mov	r1, r3
 8019832:	68f8      	ldr	r0, [r7, #12]
 8019834:	f000 f9c4 	bl	8019bc0 <rle_init>

    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 8019838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801983c:	4618      	mov	r0, r3
 801983e:	f002 fef7 	bl	801c630 <_lv_mem_buf_get>
 8019842:	6178      	str	r0, [r7, #20]

    uint8_t * line_buf2 = NULL;
 8019844:	2300      	movs	r3, #0
 8019846:	61fb      	str	r3, [r7, #28]

    if(prefilter) {
 8019848:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801984c:	2b00      	cmp	r3, #0
 801984e:	d005      	beq.n	801985c <decompress+0x60>
        line_buf2 = _lv_mem_buf_get(w);
 8019850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019854:	4618      	mov	r0, r3
 8019856:	f002 feeb 	bl	801c630 <_lv_mem_buf_get>
 801985a:	61f8      	str	r0, [r7, #28]
    }

    decompress_line(line_buf1, w);
 801985c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019860:	4619      	mov	r1, r3
 8019862:	6978      	ldr	r0, [r7, #20]
 8019864:	f000 f898 	bl	8019998 <decompress_line>

    lv_coord_t y;
    lv_coord_t x;

    for(x = 0; x < w; x++) {
 8019868:	2300      	movs	r3, #0
 801986a:	833b      	strh	r3, [r7, #24]
 801986c:	e015      	b.n	801989a <decompress+0x9e>
        bits_write(out, wrp, line_buf1[x], bpp);
 801986e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019872:	697a      	ldr	r2, [r7, #20]
 8019874:	4413      	add	r3, r2
 8019876:	781a      	ldrb	r2, [r3, #0]
 8019878:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801987c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801987e:	68b8      	ldr	r0, [r7, #8]
 8019880:	f000 f922 	bl	8019ac8 <bits_write>
        wrp += wr_size;
 8019884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801988a:	4413      	add	r3, r2
 801988c:	627b      	str	r3, [r7, #36]	; 0x24
    for(x = 0; x < w; x++) {
 801988e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019892:	b29b      	uxth	r3, r3
 8019894:	3301      	adds	r3, #1
 8019896:	b29b      	uxth	r3, r3
 8019898:	833b      	strh	r3, [r7, #24]
 801989a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801989e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80198a2:	429a      	cmp	r2, r3
 80198a4:	dbe3      	blt.n	801986e <decompress+0x72>
    }

    for(y = 1; y < h; y++) {
 80198a6:	2301      	movs	r3, #1
 80198a8:	837b      	strh	r3, [r7, #26]
 80198aa:	e065      	b.n	8019978 <decompress+0x17c>
        if(prefilter) {
 80198ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d036      	beq.n	8019922 <decompress+0x126>
            decompress_line(line_buf2, w);
 80198b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80198b8:	4619      	mov	r1, r3
 80198ba:	69f8      	ldr	r0, [r7, #28]
 80198bc:	f000 f86c 	bl	8019998 <decompress_line>

            for(x = 0; x < w; x++) {
 80198c0:	2300      	movs	r3, #0
 80198c2:	833b      	strh	r3, [r7, #24]
 80198c4:	e026      	b.n	8019914 <decompress+0x118>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 80198c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80198ca:	69fa      	ldr	r2, [r7, #28]
 80198cc:	4413      	add	r3, r2
 80198ce:	7819      	ldrb	r1, [r3, #0]
 80198d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80198d4:	697a      	ldr	r2, [r7, #20]
 80198d6:	4413      	add	r3, r2
 80198d8:	781a      	ldrb	r2, [r3, #0]
 80198da:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80198de:	6978      	ldr	r0, [r7, #20]
 80198e0:	4403      	add	r3, r0
 80198e2:	404a      	eors	r2, r1
 80198e4:	b2d2      	uxtb	r2, r2
 80198e6:	701a      	strb	r2, [r3, #0]
                bits_write(out, wrp, line_buf1[x], bpp);
 80198e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80198ec:	697a      	ldr	r2, [r7, #20]
 80198ee:	4413      	add	r3, r2
 80198f0:	781a      	ldrb	r2, [r3, #0]
 80198f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80198f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80198f8:	68b8      	ldr	r0, [r7, #8]
 80198fa:	f000 f8e5 	bl	8019ac8 <bits_write>
                wrp += wr_size;
 80198fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019904:	4413      	add	r3, r2
 8019906:	627b      	str	r3, [r7, #36]	; 0x24
            for(x = 0; x < w; x++) {
 8019908:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801990c:	b29b      	uxth	r3, r3
 801990e:	3301      	adds	r3, #1
 8019910:	b29b      	uxth	r3, r3
 8019912:	833b      	strh	r3, [r7, #24]
 8019914:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8019918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801991c:	429a      	cmp	r2, r3
 801991e:	dbd2      	blt.n	80198c6 <decompress+0xca>
 8019920:	e024      	b.n	801996c <decompress+0x170>
            }
        }
        else {
            decompress_line(line_buf1, w);
 8019922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019926:	4619      	mov	r1, r3
 8019928:	6978      	ldr	r0, [r7, #20]
 801992a:	f000 f835 	bl	8019998 <decompress_line>

            for(x = 0; x < w; x++) {
 801992e:	2300      	movs	r3, #0
 8019930:	833b      	strh	r3, [r7, #24]
 8019932:	e015      	b.n	8019960 <decompress+0x164>
                bits_write(out, wrp, line_buf1[x], bpp);
 8019934:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019938:	697a      	ldr	r2, [r7, #20]
 801993a:	4413      	add	r3, r2
 801993c:	781a      	ldrb	r2, [r3, #0]
 801993e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019944:	68b8      	ldr	r0, [r7, #8]
 8019946:	f000 f8bf 	bl	8019ac8 <bits_write>
                wrp += wr_size;
 801994a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801994e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019950:	4413      	add	r3, r2
 8019952:	627b      	str	r3, [r7, #36]	; 0x24
            for(x = 0; x < w; x++) {
 8019954:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019958:	b29b      	uxth	r3, r3
 801995a:	3301      	adds	r3, #1
 801995c:	b29b      	uxth	r3, r3
 801995e:	833b      	strh	r3, [r7, #24]
 8019960:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8019964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019968:	429a      	cmp	r2, r3
 801996a:	dbe3      	blt.n	8019934 <decompress+0x138>
    for(y = 1; y < h; y++) {
 801996c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019970:	b29b      	uxth	r3, r3
 8019972:	3301      	adds	r3, #1
 8019974:	b29b      	uxth	r3, r3
 8019976:	837b      	strh	r3, [r7, #26]
 8019978:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801997c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8019980:	429a      	cmp	r2, r3
 8019982:	db93      	blt.n	80198ac <decompress+0xb0>
            }
        }
    }

    _lv_mem_buf_release(line_buf1);
 8019984:	6978      	ldr	r0, [r7, #20]
 8019986:	f002 ff31 	bl	801c7ec <_lv_mem_buf_release>
    _lv_mem_buf_release(line_buf2);
 801998a:	69f8      	ldr	r0, [r7, #28]
 801998c:	f002 ff2e 	bl	801c7ec <_lv_mem_buf_release>
}
 8019990:	bf00      	nop
 8019992:	3728      	adds	r7, #40	; 0x28
 8019994:	46bd      	mov	sp, r7
 8019996:	bd80      	pop	{r7, pc}

08019998 <decompress_line>:
 * Decompress one line. Store one pixel per byte
 * @param out output buffer
 * @param w width of the line in pixel count
 */
static inline void decompress_line(uint8_t * out, lv_coord_t w)
{
 8019998:	b590      	push	{r4, r7, lr}
 801999a:	b085      	sub	sp, #20
 801999c:	af00      	add	r7, sp, #0
 801999e:	6078      	str	r0, [r7, #4]
 80199a0:	460b      	mov	r3, r1
 80199a2:	807b      	strh	r3, [r7, #2]
    lv_coord_t i;
    for(i = 0; i < w; i++) {
 80199a4:	2300      	movs	r3, #0
 80199a6:	81fb      	strh	r3, [r7, #14]
 80199a8:	e00d      	b.n	80199c6 <decompress_line+0x2e>
        out[i] = rle_next();
 80199aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	18d4      	adds	r4, r2, r3
 80199b2:	f000 f92f 	bl	8019c14 <rle_next>
 80199b6:	4603      	mov	r3, r0
 80199b8:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < w; i++) {
 80199ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80199be:	b29b      	uxth	r3, r3
 80199c0:	3301      	adds	r3, #1
 80199c2:	b29b      	uxth	r3, r3
 80199c4:	81fb      	strh	r3, [r7, #14]
 80199c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80199ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80199ce:	429a      	cmp	r2, r3
 80199d0:	dbeb      	blt.n	80199aa <decompress_line+0x12>
    }
}
 80199d2:	bf00      	nop
 80199d4:	3714      	adds	r7, #20
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bd90      	pop	{r4, r7, pc}
	...

080199dc <get_bits>:
 * @param bit_pos index of the first bit to read.
 * @param len number of bits to read (must be <= 8).
 * @return the read bits
 */
static inline uint8_t get_bits(const uint8_t * in, uint32_t bit_pos, uint8_t len)
{
 80199dc:	b480      	push	{r7}
 80199de:	b089      	sub	sp, #36	; 0x24
 80199e0:	af00      	add	r7, sp, #0
 80199e2:	60f8      	str	r0, [r7, #12]
 80199e4:	60b9      	str	r1, [r7, #8]
 80199e6:	4613      	mov	r3, r2
 80199e8:	71fb      	strb	r3, [r7, #7]
    uint8_t bit_mask;
    switch(len) {
 80199ea:	79fb      	ldrb	r3, [r7, #7]
 80199ec:	3b01      	subs	r3, #1
 80199ee:	2b07      	cmp	r3, #7
 80199f0:	d821      	bhi.n	8019a36 <get_bits+0x5a>
 80199f2:	a201      	add	r2, pc, #4	; (adr r2, 80199f8 <get_bits+0x1c>)
 80199f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199f8:	08019a19 	.word	0x08019a19
 80199fc:	08019a1f 	.word	0x08019a1f
 8019a00:	08019a25 	.word	0x08019a25
 8019a04:	08019a2b 	.word	0x08019a2b
 8019a08:	08019a37 	.word	0x08019a37
 8019a0c:	08019a37 	.word	0x08019a37
 8019a10:	08019a37 	.word	0x08019a37
 8019a14:	08019a31 	.word	0x08019a31
        case 1:
            bit_mask = 0x1;
 8019a18:	2301      	movs	r3, #1
 8019a1a:	77fb      	strb	r3, [r7, #31]
            break;
 8019a1c:	e012      	b.n	8019a44 <get_bits+0x68>
        case 2:
            bit_mask = 0x3;
 8019a1e:	2303      	movs	r3, #3
 8019a20:	77fb      	strb	r3, [r7, #31]
            break;
 8019a22:	e00f      	b.n	8019a44 <get_bits+0x68>
        case 3:
            bit_mask = 0x7;
 8019a24:	2307      	movs	r3, #7
 8019a26:	77fb      	strb	r3, [r7, #31]
            break;
 8019a28:	e00c      	b.n	8019a44 <get_bits+0x68>
        case 4:
            bit_mask = 0xF;
 8019a2a:	230f      	movs	r3, #15
 8019a2c:	77fb      	strb	r3, [r7, #31]
            break;
 8019a2e:	e009      	b.n	8019a44 <get_bits+0x68>
        case 8:
            bit_mask = 0xFF;
 8019a30:	23ff      	movs	r3, #255	; 0xff
 8019a32:	77fb      	strb	r3, [r7, #31]
            break;
 8019a34:	e006      	b.n	8019a44 <get_bits+0x68>
        default:
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8019a36:	79fb      	ldrb	r3, [r7, #7]
 8019a38:	2201      	movs	r2, #1
 8019a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	3b01      	subs	r3, #1
 8019a42:	77fb      	strb	r3, [r7, #31]
    }

    uint32_t byte_pos = bit_pos >> 3;
 8019a44:	68bb      	ldr	r3, [r7, #8]
 8019a46:	08db      	lsrs	r3, r3, #3
 8019a48:	61bb      	str	r3, [r7, #24]
    bit_pos = bit_pos & 0x7;
 8019a4a:	68bb      	ldr	r3, [r7, #8]
 8019a4c:	f003 0307 	and.w	r3, r3, #7
 8019a50:	60bb      	str	r3, [r7, #8]

    if(bit_pos + len >= 8) {
 8019a52:	79fa      	ldrb	r2, [r7, #7]
 8019a54:	68bb      	ldr	r3, [r7, #8]
 8019a56:	4413      	add	r3, r2
 8019a58:	2b07      	cmp	r3, #7
 8019a5a:	d91d      	bls.n	8019a98 <get_bits+0xbc>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8019a5c:	68fa      	ldr	r2, [r7, #12]
 8019a5e:	69bb      	ldr	r3, [r7, #24]
 8019a60:	4413      	add	r3, r2
 8019a62:	781b      	ldrb	r3, [r3, #0]
 8019a64:	b29b      	uxth	r3, r3
 8019a66:	021b      	lsls	r3, r3, #8
 8019a68:	b29a      	uxth	r2, r3
 8019a6a:	69bb      	ldr	r3, [r7, #24]
 8019a6c:	3301      	adds	r3, #1
 8019a6e:	68f9      	ldr	r1, [r7, #12]
 8019a70:	440b      	add	r3, r1
 8019a72:	781b      	ldrb	r3, [r3, #0]
 8019a74:	b29b      	uxth	r3, r3
 8019a76:	4413      	add	r3, r2
 8019a78:	82fb      	strh	r3, [r7, #22]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8019a7a:	8afa      	ldrh	r2, [r7, #22]
 8019a7c:	79fb      	ldrb	r3, [r7, #7]
 8019a7e:	4259      	negs	r1, r3
 8019a80:	68bb      	ldr	r3, [r7, #8]
 8019a82:	1acb      	subs	r3, r1, r3
 8019a84:	3310      	adds	r3, #16
 8019a86:	fa42 f303 	asr.w	r3, r2, r3
 8019a8a:	b25a      	sxtb	r2, r3
 8019a8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019a90:	4013      	ands	r3, r2
 8019a92:	b25b      	sxtb	r3, r3
 8019a94:	b2db      	uxtb	r3, r3
 8019a96:	e011      	b.n	8019abc <get_bits+0xe0>
    }
    else {
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8019a98:	68fa      	ldr	r2, [r7, #12]
 8019a9a:	69bb      	ldr	r3, [r7, #24]
 8019a9c:	4413      	add	r3, r2
 8019a9e:	781b      	ldrb	r3, [r3, #0]
 8019aa0:	4619      	mov	r1, r3
 8019aa2:	79fb      	ldrb	r3, [r7, #7]
 8019aa4:	425a      	negs	r2, r3
 8019aa6:	68bb      	ldr	r3, [r7, #8]
 8019aa8:	1ad3      	subs	r3, r2, r3
 8019aaa:	3308      	adds	r3, #8
 8019aac:	fa41 f303 	asr.w	r3, r1, r3
 8019ab0:	b25a      	sxtb	r2, r3
 8019ab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019ab6:	4013      	ands	r3, r2
 8019ab8:	b25b      	sxtb	r3, r3
 8019aba:	b2db      	uxtb	r3, r3
    }
}
 8019abc:	4618      	mov	r0, r3
 8019abe:	3724      	adds	r7, #36	; 0x24
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac6:	4770      	bx	lr

08019ac8 <bits_write>:
 * @param val value to write
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static inline void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
 8019ac8:	b480      	push	{r7}
 8019aca:	b087      	sub	sp, #28
 8019acc:	af00      	add	r7, sp, #0
 8019ace:	60f8      	str	r0, [r7, #12]
 8019ad0:	60b9      	str	r1, [r7, #8]
 8019ad2:	4611      	mov	r1, r2
 8019ad4:	461a      	mov	r2, r3
 8019ad6:	460b      	mov	r3, r1
 8019ad8:	71fb      	strb	r3, [r7, #7]
 8019ada:	4613      	mov	r3, r2
 8019adc:	71bb      	strb	r3, [r7, #6]
    if(len == 3) {
 8019ade:	79bb      	ldrb	r3, [r7, #6]
 8019ae0:	2b03      	cmp	r3, #3
 8019ae2:	d12f      	bne.n	8019b44 <bits_write+0x7c>
        len = 4;
 8019ae4:	2304      	movs	r3, #4
 8019ae6:	71bb      	strb	r3, [r7, #6]
        switch(val) {
 8019ae8:	79fb      	ldrb	r3, [r7, #7]
 8019aea:	2b07      	cmp	r3, #7
 8019aec:	d82a      	bhi.n	8019b44 <bits_write+0x7c>
 8019aee:	a201      	add	r2, pc, #4	; (adr r2, 8019af4 <bits_write+0x2c>)
 8019af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019af4:	08019b15 	.word	0x08019b15
 8019af8:	08019b1b 	.word	0x08019b1b
 8019afc:	08019b21 	.word	0x08019b21
 8019b00:	08019b27 	.word	0x08019b27
 8019b04:	08019b2d 	.word	0x08019b2d
 8019b08:	08019b33 	.word	0x08019b33
 8019b0c:	08019b39 	.word	0x08019b39
 8019b10:	08019b3f 	.word	0x08019b3f
            case 0:
                val = 0;
 8019b14:	2300      	movs	r3, #0
 8019b16:	71fb      	strb	r3, [r7, #7]
                break;
 8019b18:	e014      	b.n	8019b44 <bits_write+0x7c>
            case 1:
                val = 2;
 8019b1a:	2302      	movs	r3, #2
 8019b1c:	71fb      	strb	r3, [r7, #7]
                break;
 8019b1e:	e011      	b.n	8019b44 <bits_write+0x7c>
            case 2:
                val = 4;
 8019b20:	2304      	movs	r3, #4
 8019b22:	71fb      	strb	r3, [r7, #7]
                break;
 8019b24:	e00e      	b.n	8019b44 <bits_write+0x7c>
            case 3:
                val = 6;
 8019b26:	2306      	movs	r3, #6
 8019b28:	71fb      	strb	r3, [r7, #7]
                break;
 8019b2a:	e00b      	b.n	8019b44 <bits_write+0x7c>
            case 4:
                val = 9;
 8019b2c:	2309      	movs	r3, #9
 8019b2e:	71fb      	strb	r3, [r7, #7]
                break;
 8019b30:	e008      	b.n	8019b44 <bits_write+0x7c>
            case 5:
                val = 11;
 8019b32:	230b      	movs	r3, #11
 8019b34:	71fb      	strb	r3, [r7, #7]
                break;
 8019b36:	e005      	b.n	8019b44 <bits_write+0x7c>
            case 6:
                val = 13;
 8019b38:	230d      	movs	r3, #13
 8019b3a:	71fb      	strb	r3, [r7, #7]
                break;
 8019b3c:	e002      	b.n	8019b44 <bits_write+0x7c>
            case 7:
                val = 15;
 8019b3e:	230f      	movs	r3, #15
 8019b40:	71fb      	strb	r3, [r7, #7]
                break;
 8019b42:	bf00      	nop
        }
    }

    uint16_t byte_pos = bit_pos >> 3;
 8019b44:	68bb      	ldr	r3, [r7, #8]
 8019b46:	08db      	lsrs	r3, r3, #3
 8019b48:	82fb      	strh	r3, [r7, #22]
    bit_pos = bit_pos & 0x7;
 8019b4a:	68bb      	ldr	r3, [r7, #8]
 8019b4c:	f003 0307 	and.w	r3, r3, #7
 8019b50:	60bb      	str	r3, [r7, #8]
    bit_pos = 8 - bit_pos - len;
 8019b52:	79bb      	ldrb	r3, [r7, #6]
 8019b54:	425a      	negs	r2, r3
 8019b56:	68bb      	ldr	r3, [r7, #8]
 8019b58:	1ad3      	subs	r3, r2, r3
 8019b5a:	3308      	adds	r3, #8
 8019b5c:	60bb      	str	r3, [r7, #8]

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8019b5e:	79bb      	ldrb	r3, [r7, #6]
 8019b60:	2201      	movs	r2, #1
 8019b62:	fa02 f303 	lsl.w	r3, r2, r3
 8019b66:	b2db      	uxtb	r3, r3
 8019b68:	3b01      	subs	r3, #1
 8019b6a:	757b      	strb	r3, [r7, #21]
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8019b6c:	8afb      	ldrh	r3, [r7, #22]
 8019b6e:	68fa      	ldr	r2, [r7, #12]
 8019b70:	4413      	add	r3, r2
 8019b72:	781b      	ldrb	r3, [r3, #0]
 8019b74:	b25a      	sxtb	r2, r3
 8019b76:	7d7b      	ldrb	r3, [r7, #21]
 8019b78:	43d9      	mvns	r1, r3
 8019b7a:	68bb      	ldr	r3, [r7, #8]
 8019b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8019b80:	b25b      	sxtb	r3, r3
 8019b82:	4013      	ands	r3, r2
 8019b84:	b259      	sxtb	r1, r3
 8019b86:	8afb      	ldrh	r3, [r7, #22]
 8019b88:	68fa      	ldr	r2, [r7, #12]
 8019b8a:	4413      	add	r3, r2
 8019b8c:	b2ca      	uxtb	r2, r1
 8019b8e:	701a      	strb	r2, [r3, #0]
    out[byte_pos] |= (val << bit_pos);
 8019b90:	8afb      	ldrh	r3, [r7, #22]
 8019b92:	68fa      	ldr	r2, [r7, #12]
 8019b94:	4413      	add	r3, r2
 8019b96:	781b      	ldrb	r3, [r3, #0]
 8019b98:	b25a      	sxtb	r2, r3
 8019b9a:	79f9      	ldrb	r1, [r7, #7]
 8019b9c:	68bb      	ldr	r3, [r7, #8]
 8019b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8019ba2:	b25b      	sxtb	r3, r3
 8019ba4:	4313      	orrs	r3, r2
 8019ba6:	b259      	sxtb	r1, r3
 8019ba8:	8afb      	ldrh	r3, [r7, #22]
 8019baa:	68fa      	ldr	r2, [r7, #12]
 8019bac:	4413      	add	r3, r2
 8019bae:	b2ca      	uxtb	r2, r1
 8019bb0:	701a      	strb	r2, [r3, #0]
}
 8019bb2:	bf00      	nop
 8019bb4:	371c      	adds	r7, #28
 8019bb6:	46bd      	mov	sp, r7
 8019bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bbc:	4770      	bx	lr
 8019bbe:	bf00      	nop

08019bc0 <rle_init>:

static inline void rle_init(const uint8_t * in,  uint8_t bpp)
{
 8019bc0:	b480      	push	{r7}
 8019bc2:	b083      	sub	sp, #12
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	6078      	str	r0, [r7, #4]
 8019bc8:	460b      	mov	r3, r1
 8019bca:	70fb      	strb	r3, [r7, #3]
    rle_in = in;
 8019bcc:	4a0b      	ldr	r2, [pc, #44]	; (8019bfc <rle_init+0x3c>)
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	6013      	str	r3, [r2, #0]
    rle_bpp = bpp;
 8019bd2:	4a0b      	ldr	r2, [pc, #44]	; (8019c00 <rle_init+0x40>)
 8019bd4:	78fb      	ldrb	r3, [r7, #3]
 8019bd6:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
 8019bd8:	4b0a      	ldr	r3, [pc, #40]	; (8019c04 <rle_init+0x44>)
 8019bda:	2200      	movs	r2, #0
 8019bdc:	701a      	strb	r2, [r3, #0]
    rle_rdp = 0;
 8019bde:	4b0a      	ldr	r3, [pc, #40]	; (8019c08 <rle_init+0x48>)
 8019be0:	2200      	movs	r2, #0
 8019be2:	601a      	str	r2, [r3, #0]
    rle_prev_v = 0;
 8019be4:	4b09      	ldr	r3, [pc, #36]	; (8019c0c <rle_init+0x4c>)
 8019be6:	2200      	movs	r2, #0
 8019be8:	701a      	strb	r2, [r3, #0]
    rle_cnt = 0;
 8019bea:	4b09      	ldr	r3, [pc, #36]	; (8019c10 <rle_init+0x50>)
 8019bec:	2200      	movs	r2, #0
 8019bee:	701a      	strb	r2, [r3, #0]
}
 8019bf0:	bf00      	nop
 8019bf2:	370c      	adds	r7, #12
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bfa:	4770      	bx	lr
 8019bfc:	20018044 	.word	0x20018044
 8019c00:	20018048 	.word	0x20018048
 8019c04:	2001804b 	.word	0x2001804b
 8019c08:	20018040 	.word	0x20018040
 8019c0c:	20018049 	.word	0x20018049
 8019c10:	2001804a 	.word	0x2001804a

08019c14 <rle_next>:

static inline uint8_t rle_next(void)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b082      	sub	sp, #8
 8019c18:	af00      	add	r7, sp, #0
    uint8_t v = 0;
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	71bb      	strb	r3, [r7, #6]
    uint8_t ret = 0;
 8019c1e:	2300      	movs	r3, #0
 8019c20:	71fb      	strb	r3, [r7, #7]

    if(rle_state == RLE_STATE_SINGLE) {
 8019c22:	4b64      	ldr	r3, [pc, #400]	; (8019db4 <rle_next+0x1a0>)
 8019c24:	781b      	ldrb	r3, [r3, #0]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d125      	bne.n	8019c76 <rle_next+0x62>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8019c2a:	4b63      	ldr	r3, [pc, #396]	; (8019db8 <rle_next+0x1a4>)
 8019c2c:	6818      	ldr	r0, [r3, #0]
 8019c2e:	4b63      	ldr	r3, [pc, #396]	; (8019dbc <rle_next+0x1a8>)
 8019c30:	6819      	ldr	r1, [r3, #0]
 8019c32:	4b63      	ldr	r3, [pc, #396]	; (8019dc0 <rle_next+0x1ac>)
 8019c34:	781b      	ldrb	r3, [r3, #0]
 8019c36:	461a      	mov	r2, r3
 8019c38:	f7ff fed0 	bl	80199dc <get_bits>
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	71fb      	strb	r3, [r7, #7]
        if(rle_rdp != 0 && rle_prev_v == ret) {
 8019c40:	4b5e      	ldr	r3, [pc, #376]	; (8019dbc <rle_next+0x1a8>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d00a      	beq.n	8019c5e <rle_next+0x4a>
 8019c48:	4b5e      	ldr	r3, [pc, #376]	; (8019dc4 <rle_next+0x1b0>)
 8019c4a:	781b      	ldrb	r3, [r3, #0]
 8019c4c:	79fa      	ldrb	r2, [r7, #7]
 8019c4e:	429a      	cmp	r2, r3
 8019c50:	d105      	bne.n	8019c5e <rle_next+0x4a>
            rle_cnt = 0;
 8019c52:	4b5d      	ldr	r3, [pc, #372]	; (8019dc8 <rle_next+0x1b4>)
 8019c54:	2200      	movs	r2, #0
 8019c56:	701a      	strb	r2, [r3, #0]
            rle_state = RLE_STATE_REPEATE;
 8019c58:	4b56      	ldr	r3, [pc, #344]	; (8019db4 <rle_next+0x1a0>)
 8019c5a:	2201      	movs	r2, #1
 8019c5c:	701a      	strb	r2, [r3, #0]
        }

        rle_prev_v = ret;
 8019c5e:	4a59      	ldr	r2, [pc, #356]	; (8019dc4 <rle_next+0x1b0>)
 8019c60:	79fb      	ldrb	r3, [r7, #7]
 8019c62:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
 8019c64:	4b56      	ldr	r3, [pc, #344]	; (8019dc0 <rle_next+0x1ac>)
 8019c66:	781b      	ldrb	r3, [r3, #0]
 8019c68:	461a      	mov	r2, r3
 8019c6a:	4b54      	ldr	r3, [pc, #336]	; (8019dbc <rle_next+0x1a8>)
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	4413      	add	r3, r2
 8019c70:	4a52      	ldr	r2, [pc, #328]	; (8019dbc <rle_next+0x1a8>)
 8019c72:	6013      	str	r3, [r2, #0]
 8019c74:	e099      	b.n	8019daa <rle_next+0x196>
    }
    else if(rle_state == RLE_STATE_REPEATE) {
 8019c76:	4b4f      	ldr	r3, [pc, #316]	; (8019db4 <rle_next+0x1a0>)
 8019c78:	781b      	ldrb	r3, [r3, #0]
 8019c7a:	2b01      	cmp	r3, #1
 8019c7c:	d16b      	bne.n	8019d56 <rle_next+0x142>
        v = get_bits(rle_in, rle_rdp, 1);
 8019c7e:	4b4e      	ldr	r3, [pc, #312]	; (8019db8 <rle_next+0x1a4>)
 8019c80:	6818      	ldr	r0, [r3, #0]
 8019c82:	4b4e      	ldr	r3, [pc, #312]	; (8019dbc <rle_next+0x1a8>)
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	2201      	movs	r2, #1
 8019c88:	4619      	mov	r1, r3
 8019c8a:	f7ff fea7 	bl	80199dc <get_bits>
 8019c8e:	4603      	mov	r3, r0
 8019c90:	71bb      	strb	r3, [r7, #6]
        rle_cnt++;
 8019c92:	4b4d      	ldr	r3, [pc, #308]	; (8019dc8 <rle_next+0x1b4>)
 8019c94:	781b      	ldrb	r3, [r3, #0]
 8019c96:	3301      	adds	r3, #1
 8019c98:	b2da      	uxtb	r2, r3
 8019c9a:	4b4b      	ldr	r3, [pc, #300]	; (8019dc8 <rle_next+0x1b4>)
 8019c9c:	701a      	strb	r2, [r3, #0]
        rle_rdp += 1;
 8019c9e:	4b47      	ldr	r3, [pc, #284]	; (8019dbc <rle_next+0x1a8>)
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	3301      	adds	r3, #1
 8019ca4:	4a45      	ldr	r2, [pc, #276]	; (8019dbc <rle_next+0x1a8>)
 8019ca6:	6013      	str	r3, [r2, #0]
        if(v == 1) {
 8019ca8:	79bb      	ldrb	r3, [r7, #6]
 8019caa:	2b01      	cmp	r3, #1
 8019cac:	d139      	bne.n	8019d22 <rle_next+0x10e>
            ret = rle_prev_v;
 8019cae:	4b45      	ldr	r3, [pc, #276]	; (8019dc4 <rle_next+0x1b0>)
 8019cb0:	781b      	ldrb	r3, [r3, #0]
 8019cb2:	71fb      	strb	r3, [r7, #7]
            if(rle_cnt == 11) {
 8019cb4:	4b44      	ldr	r3, [pc, #272]	; (8019dc8 <rle_next+0x1b4>)
 8019cb6:	781b      	ldrb	r3, [r3, #0]
 8019cb8:	2b0b      	cmp	r3, #11
 8019cba:	d176      	bne.n	8019daa <rle_next+0x196>
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 8019cbc:	4b3e      	ldr	r3, [pc, #248]	; (8019db8 <rle_next+0x1a4>)
 8019cbe:	6818      	ldr	r0, [r3, #0]
 8019cc0:	4b3e      	ldr	r3, [pc, #248]	; (8019dbc <rle_next+0x1a8>)
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	2206      	movs	r2, #6
 8019cc6:	4619      	mov	r1, r3
 8019cc8:	f7ff fe88 	bl	80199dc <get_bits>
 8019ccc:	4603      	mov	r3, r0
 8019cce:	461a      	mov	r2, r3
 8019cd0:	4b3d      	ldr	r3, [pc, #244]	; (8019dc8 <rle_next+0x1b4>)
 8019cd2:	701a      	strb	r2, [r3, #0]
                rle_rdp += 6;
 8019cd4:	4b39      	ldr	r3, [pc, #228]	; (8019dbc <rle_next+0x1a8>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	3306      	adds	r3, #6
 8019cda:	4a38      	ldr	r2, [pc, #224]	; (8019dbc <rle_next+0x1a8>)
 8019cdc:	6013      	str	r3, [r2, #0]
                if(rle_cnt != 0) {
 8019cde:	4b3a      	ldr	r3, [pc, #232]	; (8019dc8 <rle_next+0x1b4>)
 8019ce0:	781b      	ldrb	r3, [r3, #0]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d003      	beq.n	8019cee <rle_next+0xda>
                    rle_state = RLE_STATE_COUNTER;
 8019ce6:	4b33      	ldr	r3, [pc, #204]	; (8019db4 <rle_next+0x1a0>)
 8019ce8:	2202      	movs	r2, #2
 8019cea:	701a      	strb	r2, [r3, #0]
 8019cec:	e05d      	b.n	8019daa <rle_next+0x196>
                }
                else {
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8019cee:	4b32      	ldr	r3, [pc, #200]	; (8019db8 <rle_next+0x1a4>)
 8019cf0:	6818      	ldr	r0, [r3, #0]
 8019cf2:	4b32      	ldr	r3, [pc, #200]	; (8019dbc <rle_next+0x1a8>)
 8019cf4:	6819      	ldr	r1, [r3, #0]
 8019cf6:	4b32      	ldr	r3, [pc, #200]	; (8019dc0 <rle_next+0x1ac>)
 8019cf8:	781b      	ldrb	r3, [r3, #0]
 8019cfa:	461a      	mov	r2, r3
 8019cfc:	f7ff fe6e 	bl	80199dc <get_bits>
 8019d00:	4603      	mov	r3, r0
 8019d02:	71fb      	strb	r3, [r7, #7]
                    rle_prev_v = ret;
 8019d04:	4a2f      	ldr	r2, [pc, #188]	; (8019dc4 <rle_next+0x1b0>)
 8019d06:	79fb      	ldrb	r3, [r7, #7]
 8019d08:	7013      	strb	r3, [r2, #0]
                    rle_rdp += rle_bpp;
 8019d0a:	4b2d      	ldr	r3, [pc, #180]	; (8019dc0 <rle_next+0x1ac>)
 8019d0c:	781b      	ldrb	r3, [r3, #0]
 8019d0e:	461a      	mov	r2, r3
 8019d10:	4b2a      	ldr	r3, [pc, #168]	; (8019dbc <rle_next+0x1a8>)
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	4413      	add	r3, r2
 8019d16:	4a29      	ldr	r2, [pc, #164]	; (8019dbc <rle_next+0x1a8>)
 8019d18:	6013      	str	r3, [r2, #0]
                    rle_state = RLE_STATE_SINGLE;
 8019d1a:	4b26      	ldr	r3, [pc, #152]	; (8019db4 <rle_next+0x1a0>)
 8019d1c:	2200      	movs	r2, #0
 8019d1e:	701a      	strb	r2, [r3, #0]
 8019d20:	e043      	b.n	8019daa <rle_next+0x196>
                }
            }
        }
        else {
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8019d22:	4b25      	ldr	r3, [pc, #148]	; (8019db8 <rle_next+0x1a4>)
 8019d24:	6818      	ldr	r0, [r3, #0]
 8019d26:	4b25      	ldr	r3, [pc, #148]	; (8019dbc <rle_next+0x1a8>)
 8019d28:	6819      	ldr	r1, [r3, #0]
 8019d2a:	4b25      	ldr	r3, [pc, #148]	; (8019dc0 <rle_next+0x1ac>)
 8019d2c:	781b      	ldrb	r3, [r3, #0]
 8019d2e:	461a      	mov	r2, r3
 8019d30:	f7ff fe54 	bl	80199dc <get_bits>
 8019d34:	4603      	mov	r3, r0
 8019d36:	71fb      	strb	r3, [r7, #7]
            rle_prev_v = ret;
 8019d38:	4a22      	ldr	r2, [pc, #136]	; (8019dc4 <rle_next+0x1b0>)
 8019d3a:	79fb      	ldrb	r3, [r7, #7]
 8019d3c:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
 8019d3e:	4b20      	ldr	r3, [pc, #128]	; (8019dc0 <rle_next+0x1ac>)
 8019d40:	781b      	ldrb	r3, [r3, #0]
 8019d42:	461a      	mov	r2, r3
 8019d44:	4b1d      	ldr	r3, [pc, #116]	; (8019dbc <rle_next+0x1a8>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	4413      	add	r3, r2
 8019d4a:	4a1c      	ldr	r2, [pc, #112]	; (8019dbc <rle_next+0x1a8>)
 8019d4c:	6013      	str	r3, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
 8019d4e:	4b19      	ldr	r3, [pc, #100]	; (8019db4 <rle_next+0x1a0>)
 8019d50:	2200      	movs	r2, #0
 8019d52:	701a      	strb	r2, [r3, #0]
 8019d54:	e029      	b.n	8019daa <rle_next+0x196>
        }

    }
    else if(rle_state == RLE_STATE_COUNTER) {
 8019d56:	4b17      	ldr	r3, [pc, #92]	; (8019db4 <rle_next+0x1a0>)
 8019d58:	781b      	ldrb	r3, [r3, #0]
 8019d5a:	2b02      	cmp	r3, #2
 8019d5c:	d125      	bne.n	8019daa <rle_next+0x196>
        ret = rle_prev_v;
 8019d5e:	4b19      	ldr	r3, [pc, #100]	; (8019dc4 <rle_next+0x1b0>)
 8019d60:	781b      	ldrb	r3, [r3, #0]
 8019d62:	71fb      	strb	r3, [r7, #7]
        rle_cnt--;
 8019d64:	4b18      	ldr	r3, [pc, #96]	; (8019dc8 <rle_next+0x1b4>)
 8019d66:	781b      	ldrb	r3, [r3, #0]
 8019d68:	3b01      	subs	r3, #1
 8019d6a:	b2da      	uxtb	r2, r3
 8019d6c:	4b16      	ldr	r3, [pc, #88]	; (8019dc8 <rle_next+0x1b4>)
 8019d6e:	701a      	strb	r2, [r3, #0]
        if(rle_cnt == 0) {
 8019d70:	4b15      	ldr	r3, [pc, #84]	; (8019dc8 <rle_next+0x1b4>)
 8019d72:	781b      	ldrb	r3, [r3, #0]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d118      	bne.n	8019daa <rle_next+0x196>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8019d78:	4b0f      	ldr	r3, [pc, #60]	; (8019db8 <rle_next+0x1a4>)
 8019d7a:	6818      	ldr	r0, [r3, #0]
 8019d7c:	4b0f      	ldr	r3, [pc, #60]	; (8019dbc <rle_next+0x1a8>)
 8019d7e:	6819      	ldr	r1, [r3, #0]
 8019d80:	4b0f      	ldr	r3, [pc, #60]	; (8019dc0 <rle_next+0x1ac>)
 8019d82:	781b      	ldrb	r3, [r3, #0]
 8019d84:	461a      	mov	r2, r3
 8019d86:	f7ff fe29 	bl	80199dc <get_bits>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	71fb      	strb	r3, [r7, #7]
            rle_prev_v = ret;
 8019d8e:	4a0d      	ldr	r2, [pc, #52]	; (8019dc4 <rle_next+0x1b0>)
 8019d90:	79fb      	ldrb	r3, [r7, #7]
 8019d92:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
 8019d94:	4b0a      	ldr	r3, [pc, #40]	; (8019dc0 <rle_next+0x1ac>)
 8019d96:	781b      	ldrb	r3, [r3, #0]
 8019d98:	461a      	mov	r2, r3
 8019d9a:	4b08      	ldr	r3, [pc, #32]	; (8019dbc <rle_next+0x1a8>)
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	4413      	add	r3, r2
 8019da0:	4a06      	ldr	r2, [pc, #24]	; (8019dbc <rle_next+0x1a8>)
 8019da2:	6013      	str	r3, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
 8019da4:	4b03      	ldr	r3, [pc, #12]	; (8019db4 <rle_next+0x1a0>)
 8019da6:	2200      	movs	r2, #0
 8019da8:	701a      	strb	r2, [r3, #0]
        }
    }

    return ret;
 8019daa:	79fb      	ldrb	r3, [r7, #7]
}
 8019dac:	4618      	mov	r0, r3
 8019dae:	3708      	adds	r7, #8
 8019db0:	46bd      	mov	sp, r7
 8019db2:	bd80      	pop	{r7, pc}
 8019db4:	2001804b 	.word	0x2001804b
 8019db8:	20018044 	.word	0x20018044
 8019dbc:	20018040 	.word	0x20018040
 8019dc0:	20018048 	.word	0x20018048
 8019dc4:	20018049 	.word	0x20018049
 8019dc8:	2001804a 	.word	0x2001804a

08019dcc <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 8019dcc:	b480      	push	{r7}
 8019dce:	b083      	sub	sp, #12
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	6078      	str	r0, [r7, #4]
 8019dd4:	6039      	str	r1, [r7, #0]
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	881b      	ldrh	r3, [r3, #0]
 8019dda:	461a      	mov	r2, r3
 8019ddc:	683b      	ldr	r3, [r7, #0]
 8019dde:	881b      	ldrh	r3, [r3, #0]
 8019de0:	1ad3      	subs	r3, r2, r3
}
 8019de2:	4618      	mov	r0, r3
 8019de4:	370c      	adds	r7, #12
 8019de6:	46bd      	mov	sp, r7
 8019de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dec:	4770      	bx	lr

08019dee <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8019dee:	b580      	push	{r7, lr}
 8019df0:	b082      	sub	sp, #8
 8019df2:	af00      	add	r7, sp, #0
 8019df4:	6078      	str	r0, [r7, #4]
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 8019df6:	2134      	movs	r1, #52	; 0x34
 8019df8:	6878      	ldr	r0, [r7, #4]
 8019dfa:	f003 f822 	bl	801ce42 <_lv_memset_00>

    driver->flush_cb         = NULL;
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	2200      	movs	r2, #0
 8019e02:	60da      	str	r2, [r3, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019e0a:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8019e12:	805a      	strh	r2, [r3, #2]
    driver->buffer           = NULL;
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	2200      	movs	r2, #0
 8019e18:	605a      	str	r2, [r3, #4]
    driver->rotated          = 0;
 8019e1a:	687a      	ldr	r2, [r7, #4]
 8019e1c:	7a13      	ldrb	r3, [r2, #8]
 8019e1e:	f36f 0341 	bfc	r3, #1, #1
 8019e22:	7213      	strb	r3, [r2, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	2200      	movs	r2, #0
 8019e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	22ff      	movs	r2, #255	; 0xff
 8019e30:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	2200      	movs	r2, #0
 8019e38:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	22ff      	movs	r2, #255	; 0xff
 8019e40:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    driver->dpi = LV_DPI;
 8019e44:	687a      	ldr	r2, [r7, #4]
 8019e46:	8913      	ldrh	r3, [r2, #8]
 8019e48:	2182      	movs	r1, #130	; 0x82
 8019e4a:	f361 038b 	bfi	r3, r1, #2, #10
 8019e4e:	8113      	strh	r3, [r2, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 8019e50:	687a      	ldr	r2, [r7, #4]
 8019e52:	7a13      	ldrb	r3, [r2, #8]
 8019e54:	f043 0301 	orr.w	r3, r3, #1
 8019e58:	7213      	strb	r3, [r2, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	2200      	movs	r2, #0
 8019e5e:	629a      	str	r2, [r3, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	2200      	movs	r2, #0
 8019e64:	62da      	str	r2, [r3, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	2200      	movs	r2, #0
 8019e6a:	615a      	str	r2, [r3, #20]
}
 8019e6c:	bf00      	nop
 8019e6e:	3708      	adds	r7, #8
 8019e70:	46bd      	mov	sp, r7
 8019e72:	bd80      	pop	{r7, pc}

08019e74 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8019e74:	b580      	push	{r7, lr}
 8019e76:	b084      	sub	sp, #16
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	60f8      	str	r0, [r7, #12]
 8019e7c:	60b9      	str	r1, [r7, #8]
 8019e7e:	607a      	str	r2, [r7, #4]
 8019e80:	603b      	str	r3, [r7, #0]
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
 8019e82:	2124      	movs	r1, #36	; 0x24
 8019e84:	68f8      	ldr	r0, [r7, #12]
 8019e86:	f002 ffdc 	bl	801ce42 <_lv_memset_00>

    disp_buf->buf1    = buf1;
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	68ba      	ldr	r2, [r7, #8]
 8019e8e:	601a      	str	r2, [r3, #0]
    disp_buf->buf2    = buf2;
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	687a      	ldr	r2, [r7, #4]
 8019e94:	605a      	str	r2, [r3, #4]
    disp_buf->buf_act = disp_buf->buf1;
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	681a      	ldr	r2, [r3, #0]
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	609a      	str	r2, [r3, #8]
    disp_buf->size    = size_in_px_cnt;
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	683a      	ldr	r2, [r7, #0]
 8019ea2:	60da      	str	r2, [r3, #12]
}
 8019ea4:	bf00      	nop
 8019ea6:	3710      	adds	r7, #16
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bd80      	pop	{r7, pc}

08019eac <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8019eac:	b590      	push	{r4, r7, lr}
 8019eae:	b085      	sub	sp, #20
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8019eb4:	4864      	ldr	r0, [pc, #400]	; (801a048 <lv_disp_drv_register+0x19c>)
 8019eb6:	f001 ff26 	bl	801bd06 <_lv_ll_ins_head>
 8019eba:	60f8      	str	r0, [r7, #12]
    if(!disp) {
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d113      	bne.n	8019eea <lv_disp_drv_register+0x3e>
        LV_ASSERT_MEM(disp);
 8019ec2:	68f8      	ldr	r0, [r7, #12]
 8019ec4:	f001 fcc6 	bl	801b854 <lv_debug_check_null>
 8019ec8:	4603      	mov	r3, r0
 8019eca:	f083 0301 	eor.w	r3, r3, #1
 8019ece:	b2db      	uxtb	r3, r3
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d008      	beq.n	8019ee6 <lv_disp_drv_register+0x3a>
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	f04f 0400 	mov.w	r4, #0
 8019eda:	461a      	mov	r2, r3
 8019edc:	4623      	mov	r3, r4
 8019ede:	485b      	ldr	r0, [pc, #364]	; (801a04c <lv_disp_drv_register+0x1a0>)
 8019ee0:	f001 fcc8 	bl	801b874 <lv_debug_log_error>
 8019ee4:	e7fe      	b.n	8019ee4 <lv_disp_drv_register+0x38>
        return NULL;
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	e0aa      	b.n	801a040 <lv_disp_drv_register+0x194>
    }

    _lv_memset_00(disp, sizeof(lv_disp_t));
 8019eea:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8019eee:	68f8      	ldr	r0, [r7, #12]
 8019ef0:	f002 ffa7 	bl	801ce42 <_lv_memset_00>
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	2234      	movs	r2, #52	; 0x34
 8019ef8:	6879      	ldr	r1, [r7, #4]
 8019efa:	4618      	mov	r0, r3
 8019efc:	f002 fcfc 	bl	801c8f8 <_lv_memcpy>

    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	3338      	adds	r3, #56	; 0x38
 8019f04:	214c      	movs	r1, #76	; 0x4c
 8019f06:	4618      	mov	r0, r3
 8019f08:	f001 fee4 	bl	801bcd4 <_lv_ll_init>
    disp->last_activity_time = 0;
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	2200      	movs	r2, #0
 8019f10:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    if(disp_def == NULL) disp_def = disp;
 8019f14:	4b4e      	ldr	r3, [pc, #312]	; (801a050 <lv_disp_drv_register+0x1a4>)
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d102      	bne.n	8019f22 <lv_disp_drv_register+0x76>
 8019f1c:	4a4c      	ldr	r2, [pc, #304]	; (801a050 <lv_disp_drv_register+0x1a4>)
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	6013      	str	r3, [r2, #0]

    lv_disp_t * disp_def_tmp = disp_def;
 8019f22:	4b4b      	ldr	r3, [pc, #300]	; (801a050 <lv_disp_drv_register+0x1a4>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	60bb      	str	r3, [r7, #8]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8019f28:	4a49      	ldr	r2, [pc, #292]	; (801a050 <lv_disp_drv_register+0x1a4>)
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	6013      	str	r3, [r2, #0]
                                        new display*/
    /*Create a refresh task*/
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	2203      	movs	r2, #3
 8019f32:	211e      	movs	r1, #30
 8019f34:	4847      	ldr	r0, [pc, #284]	; (801a054 <lv_disp_drv_register+0x1a8>)
 8019f36:	f003 fa6b 	bl	801d410 <lv_task_create>
 8019f3a:	4602      	mov	r2, r0
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	635a      	str	r2, [r3, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f44:	4618      	mov	r0, r3
 8019f46:	f001 fc85 	bl	801b854 <lv_debug_check_null>
 8019f4a:	4603      	mov	r3, r0
 8019f4c:	f083 0301 	eor.w	r3, r3, #1
 8019f50:	b2db      	uxtb	r3, r3
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d009      	beq.n	8019f6a <lv_disp_drv_register+0xbe>
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f5a:	f04f 0400 	mov.w	r4, #0
 8019f5e:	461a      	mov	r2, r3
 8019f60:	4623      	mov	r3, r4
 8019f62:	483a      	ldr	r0, [pc, #232]	; (801a04c <lv_disp_drv_register+0x1a0>)
 8019f64:	f001 fc86 	bl	801b874 <lv_debug_log_error>
 8019f68:	e7fe      	b.n	8019f68 <lv_disp_drv_register+0xbc>
    if(disp->refr_task == NULL) return NULL;
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d101      	bne.n	8019f76 <lv_disp_drv_register+0xca>
 8019f72:	2300      	movs	r3, #0
 8019f74:	e064      	b.n	801a040 <lv_disp_drv_register+0x194>

    disp->inv_p = 0;
 8019f76:	68fa      	ldr	r2, [r7, #12]
 8019f78:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 8019f7c:	f36f 0309 	bfc	r3, #0, #10
 8019f80:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
    disp->last_activity_time = 0;
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	2200      	movs	r2, #0
 8019f88:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    disp->bg_color = LV_COLOR_WHITE;
 8019f8c:	68fb      	ldr	r3, [r7, #12]
 8019f8e:	22ff      	movs	r2, #255	; 0xff
 8019f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8019f94:	68fb      	ldr	r3, [r7, #12]
 8019f96:	22ff      	movs	r2, #255	; 0xff
 8019f98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	22ff      	movs	r2, #255	; 0xff
 8019fa0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	22ff      	movs	r2, #255	; 0xff
 8019fa8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    disp->bg_img = NULL;
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	661a      	str	r2, [r3, #96]	; 0x60
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	22ff      	movs	r2, #255	; 0xff
 8019fb6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
#endif

    disp->prev_scr  = NULL;
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	2200      	movs	r2, #0
 8019fbe:	649a      	str	r2, [r3, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8019fc0:	2100      	movs	r1, #0
 8019fc2:	2000      	movs	r0, #0
 8019fc4:	f7ea ff82 	bl	8004ecc <lv_obj_create>
 8019fc8:	4602      	mov	r2, r0
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	645a      	str	r2, [r3, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8019fce:	2100      	movs	r1, #0
 8019fd0:	2000      	movs	r0, #0
 8019fd2:	f7ea ff7b 	bl	8004ecc <lv_obj_create>
 8019fd6:	4602      	mov	r2, r0
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	651a      	str	r2, [r3, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 8019fdc:	2100      	movs	r1, #0
 8019fde:	2000      	movs	r0, #0
 8019fe0:	f7ea ff74 	bl	8004ecc <lv_obj_create>
 8019fe4:	4602      	mov	r2, r0
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	655a      	str	r2, [r3, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019fee:	2100      	movs	r1, #0
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f7eb fdde 	bl	8005bb2 <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019ffa:	2100      	movs	r1, #0
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	f7eb fdd8 	bl	8005bb2 <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a006:	2100      	movs	r1, #0
 801a008:	4618      	mov	r0, r3
 801a00a:	f7eb fee5 	bl	8005dd8 <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
 801a00e:	68fb      	ldr	r3, [r7, #12]
 801a010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a012:	2100      	movs	r1, #0
 801a014:	4618      	mov	r0, r3
 801a016:	f7eb fedf 	bl	8005dd8 <lv_obj_set_click>

    lv_obj_invalidate(disp->act_scr);
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a01e:	4618      	mov	r0, r3
 801a020:	f7eb fa86 	bl	8005530 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 801a024:	4a0a      	ldr	r2, [pc, #40]	; (801a050 <lv_disp_drv_register+0x1a4>)
 801a026:	68bb      	ldr	r3, [r7, #8]
 801a028:	6013      	str	r3, [r2, #0]

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a02e:	4618      	mov	r0, r3
 801a030:	f003 fb06 	bl	801d640 <lv_task_ready>

    /*Can't handle this case later so add an error*/
    if(lv_disp_is_true_double_buf(disp) && disp->driver.set_px_cb) {
 801a034:	68f8      	ldr	r0, [r7, #12]
 801a036:	f000 f940 	bl	801a2ba <lv_disp_is_true_double_buf>
 801a03a:	4603      	mov	r3, r0
 801a03c:	2b00      	cmp	r3, #0
        LV_LOG_ERROR("Can't handle 2 screen sized buffers with set_px_cb. Display will not be refreshed.");
    }

    return disp;
 801a03e:	68fb      	ldr	r3, [r7, #12]
}
 801a040:	4618      	mov	r0, r3
 801a042:	3714      	adds	r7, #20
 801a044:	46bd      	mov	sp, r7
 801a046:	bd90      	pop	{r4, r7, pc}
 801a048:	200203a0 	.word	0x200203a0
 801a04c:	080283c0 	.word	0x080283c0
 801a050:	2001804c 	.word	0x2001804c
 801a054:	0800a029 	.word	0x0800a029

0801a058 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 801a058:	b480      	push	{r7}
 801a05a:	af00      	add	r7, sp, #0
    return disp_def;
 801a05c:	4b03      	ldr	r3, [pc, #12]	; (801a06c <lv_disp_get_default+0x14>)
 801a05e:	681b      	ldr	r3, [r3, #0]
}
 801a060:	4618      	mov	r0, r3
 801a062:	46bd      	mov	sp, r7
 801a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a068:	4770      	bx	lr
 801a06a:	bf00      	nop
 801a06c:	2001804c 	.word	0x2001804c

0801a070 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b082      	sub	sp, #8
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d102      	bne.n	801a084 <lv_disp_get_hor_res+0x14>
 801a07e:	f7ff ffeb 	bl	801a058 <lv_disp_get_default>
 801a082:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d102      	bne.n	801a090 <lv_disp_get_hor_res+0x20>
        return LV_HOR_RES_MAX;
 801a08a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a08e:	e00d      	b.n	801a0ac <lv_disp_get_hor_res+0x3c>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	7a1b      	ldrb	r3, [r3, #8]
 801a094:	f003 0302 	and.w	r3, r3, #2
 801a098:	b2db      	uxtb	r3, r3
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d103      	bne.n	801a0a6 <lv_disp_get_hor_res+0x36>
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a0a4:	e002      	b.n	801a0ac <lv_disp_get_hor_res+0x3c>
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	3708      	adds	r7, #8
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	bd80      	pop	{r7, pc}

0801a0b4 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 801a0b4:	b580      	push	{r7, lr}
 801a0b6:	b082      	sub	sp, #8
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d102      	bne.n	801a0c8 <lv_disp_get_ver_res+0x14>
 801a0c2:	f7ff ffc9 	bl	801a058 <lv_disp_get_default>
 801a0c6:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d102      	bne.n	801a0d4 <lv_disp_get_ver_res+0x20>
        return LV_VER_RES_MAX;
 801a0ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 801a0d2:	e00d      	b.n	801a0f0 <lv_disp_get_ver_res+0x3c>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	7a1b      	ldrb	r3, [r3, #8]
 801a0d8:	f003 0302 	and.w	r3, r3, #2
 801a0dc:	b2db      	uxtb	r3, r3
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d103      	bne.n	801a0ea <lv_disp_get_ver_res+0x36>
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a0e8:	e002      	b.n	801a0f0 <lv_disp_get_ver_res+0x3c>
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	3708      	adds	r7, #8
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	bd80      	pop	{r7, pc}

0801a0f8 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b082      	sub	sp, #8
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d102      	bne.n	801a10c <lv_disp_get_dpi+0x14>
 801a106:	f7ff ffa7 	bl	801a058 <lv_disp_get_default>
 801a10a:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d101      	bne.n	801a116 <lv_disp_get_dpi+0x1e>
 801a112:	2382      	movs	r3, #130	; 0x82
 801a114:	e005      	b.n	801a122 <lv_disp_get_dpi+0x2a>
    return disp->driver.dpi;
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	891b      	ldrh	r3, [r3, #8]
 801a11a:	f3c3 0389 	ubfx	r3, r3, #2, #10
 801a11e:	b29b      	uxth	r3, r3
 801a120:	b21b      	sxth	r3, r3
}
 801a122:	4618      	mov	r0, r3
 801a124:	3708      	adds	r7, #8
 801a126:	46bd      	mov	sp, r7
 801a128:	bd80      	pop	{r7, pc}

0801a12a <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
 801a12a:	b580      	push	{r7, lr}
 801a12c:	b084      	sub	sp, #16
 801a12e:	af00      	add	r7, sp, #0
 801a130:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d102      	bne.n	801a13e <lv_disp_get_size_category+0x14>
 801a138:	f7ff ff8e 	bl	801a058 <lv_disp_get_default>
 801a13c:	6078      	str	r0, [r7, #4]

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d103      	bne.n	801a14c <lv_disp_get_size_category+0x22>
 801a144:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a148:	60fb      	str	r3, [r7, #12]
 801a14a:	e004      	b.n	801a156 <lv_disp_get_size_category+0x2c>
    else w = lv_disp_get_hor_res(disp);
 801a14c:	6878      	ldr	r0, [r7, #4]
 801a14e:	f7ff ff8f 	bl	801a070 <lv_disp_get_hor_res>
 801a152:	4603      	mov	r3, r0
 801a154:	60fb      	str	r3, [r7, #12]

    uint32_t dpi = lv_disp_get_dpi(disp);
 801a156:	6878      	ldr	r0, [r7, #4]
 801a158:	f7ff ffce 	bl	801a0f8 <lv_disp_get_dpi>
 801a15c:	4603      	mov	r3, r0
 801a15e:	60bb      	str	r3, [r7, #8]

    w = w * 10 / dpi;
 801a160:	68fa      	ldr	r2, [r7, #12]
 801a162:	4613      	mov	r3, r2
 801a164:	009b      	lsls	r3, r3, #2
 801a166:	4413      	add	r3, r2
 801a168:	005b      	lsls	r3, r3, #1
 801a16a:	461a      	mov	r2, r3
 801a16c:	68bb      	ldr	r3, [r7, #8]
 801a16e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a172:	60fb      	str	r3, [r7, #12]

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	2b1d      	cmp	r3, #29
 801a178:	d801      	bhi.n	801a17e <lv_disp_get_size_category+0x54>
 801a17a:	2300      	movs	r3, #0
 801a17c:	e00a      	b.n	801a194 <lv_disp_get_size_category+0x6a>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	2b31      	cmp	r3, #49	; 0x31
 801a182:	d801      	bhi.n	801a188 <lv_disp_get_size_category+0x5e>
 801a184:	2301      	movs	r3, #1
 801a186:	e005      	b.n	801a194 <lv_disp_get_size_category+0x6a>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	2b45      	cmp	r3, #69	; 0x45
 801a18c:	d801      	bhi.n	801a192 <lv_disp_get_size_category+0x68>
 801a18e:	2302      	movs	r3, #2
 801a190:	e000      	b.n	801a194 <lv_disp_get_size_category+0x6a>
    else return LV_DISP_SIZE_EXTRA_LARGE;
 801a192:	2303      	movs	r3, #3
}
 801a194:	4618      	mov	r0, r3
 801a196:	3710      	adds	r7, #16
 801a198:	46bd      	mov	sp, r7
 801a19a:	bd80      	pop	{r7, pc}

0801a19c <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 801a19c:	b480      	push	{r7}
 801a19e:	b083      	sub	sp, #12
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	6078      	str	r0, [r7, #4]
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	685b      	ldr	r3, [r3, #4]
 801a1a8:	2200      	movs	r2, #0
 801a1aa:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	685b      	ldr	r3, [r3, #4]
 801a1b0:	2200      	movs	r2, #0
 801a1b2:	61da      	str	r2, [r3, #28]
}
 801a1b4:	bf00      	nop
 801a1b6:	370c      	adds	r7, #12
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1be:	4770      	bx	lr

0801a1c0 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b082      	sub	sp, #8
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
    if(disp == NULL)
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d104      	bne.n	801a1d8 <lv_disp_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 801a1ce:	4807      	ldr	r0, [pc, #28]	; (801a1ec <lv_disp_get_next+0x2c>)
 801a1d0:	f001 fef6 	bl	801bfc0 <_lv_ll_get_head>
 801a1d4:	4603      	mov	r3, r0
 801a1d6:	e004      	b.n	801a1e2 <lv_disp_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 801a1d8:	6879      	ldr	r1, [r7, #4]
 801a1da:	4804      	ldr	r0, [pc, #16]	; (801a1ec <lv_disp_get_next+0x2c>)
 801a1dc:	f001 ff16 	bl	801c00c <_lv_ll_get_next>
 801a1e0:	4603      	mov	r3, r0
}
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	3708      	adds	r7, #8
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	bd80      	pop	{r7, pc}
 801a1ea:	bf00      	nop
 801a1ec:	200203a0 	.word	0x200203a0

0801a1f0 <lv_disp_get_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
 801a1f0:	b480      	push	{r7}
 801a1f2:	b083      	sub	sp, #12
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
    return disp->driver.buffer;
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	685b      	ldr	r3, [r3, #4]
}
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	370c      	adds	r7, #12
 801a200:	46bd      	mov	sp, r7
 801a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a206:	4770      	bx	lr

0801a208 <lv_disp_get_inv_buf_size>:
/**
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
 801a208:	b480      	push	{r7}
 801a20a:	b083      	sub	sp, #12
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	6078      	str	r0, [r7, #4]
    return disp->inv_p;
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 801a216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a21a:	b29b      	uxth	r3, r3
}
 801a21c:	4618      	mov	r0, r3
 801a21e:	370c      	adds	r7, #12
 801a220:	46bd      	mov	sp, r7
 801a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a226:	4770      	bx	lr

0801a228 <_lv_disp_pop_from_inv_buf>:
/**
 * Pop (delete) the last 'num' invalidated areas from the buffer
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{
 801a228:	b480      	push	{r7}
 801a22a:	b083      	sub	sp, #12
 801a22c:	af00      	add	r7, sp, #0
 801a22e:	6078      	str	r0, [r7, #4]
 801a230:	460b      	mov	r3, r1
 801a232:	807b      	strh	r3, [r7, #2]

    if(disp->inv_p < num)
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 801a23a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a23e:	b29b      	uxth	r3, r3
 801a240:	461a      	mov	r2, r3
 801a242:	887b      	ldrh	r3, [r7, #2]
 801a244:	429a      	cmp	r2, r3
 801a246:	da07      	bge.n	801a258 <_lv_disp_pop_from_inv_buf+0x30>
        disp->inv_p = 0;
 801a248:	687a      	ldr	r2, [r7, #4]
 801a24a:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 801a24e:	f36f 0309 	bfc	r3, #0, #10
 801a252:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
    else
        disp->inv_p -= num;
}
 801a256:	e013      	b.n	801a280 <_lv_disp_pop_from_inv_buf+0x58>
        disp->inv_p -= num;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 801a25e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a262:	b29b      	uxth	r3, r3
 801a264:	461a      	mov	r2, r3
 801a266:	887b      	ldrh	r3, [r7, #2]
 801a268:	1ad3      	subs	r3, r2, r3
 801a26a:	b29b      	uxth	r3, r3
 801a26c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a270:	b299      	uxth	r1, r3
 801a272:	687a      	ldr	r2, [r7, #4]
 801a274:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 801a278:	f361 0309 	bfi	r3, r1, #0, #10
 801a27c:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
}
 801a280:	bf00      	nop
 801a282:	370c      	adds	r7, #12
 801a284:	46bd      	mov	sp, r7
 801a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a28a:	4770      	bx	lr

0801a28c <lv_disp_is_double_buf>:
 * Check the driver configuration if it's double buffered (both `buf1` and `buf2` are set)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
 801a28c:	b480      	push	{r7}
 801a28e:	b083      	sub	sp, #12
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	685b      	ldr	r3, [r3, #4]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d006      	beq.n	801a2ac <lv_disp_is_double_buf+0x20>
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	685b      	ldr	r3, [r3, #4]
 801a2a2:	685b      	ldr	r3, [r3, #4]
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d001      	beq.n	801a2ac <lv_disp_is_double_buf+0x20>
        return true;
 801a2a8:	2301      	movs	r3, #1
 801a2aa:	e000      	b.n	801a2ae <lv_disp_is_double_buf+0x22>
    else
        return false;
 801a2ac:	2300      	movs	r3, #0
}
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	370c      	adds	r7, #12
 801a2b2:	46bd      	mov	sp, r7
 801a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2b8:	4770      	bx	lr

0801a2ba <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 801a2ba:	b580      	push	{r7, lr}
 801a2bc:	b084      	sub	sp, #16
 801a2be:	af00      	add	r7, sp, #0
 801a2c0:	6078      	str	r0, [r7, #4]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2c8:	461a      	mov	r2, r3
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a2d0:	fb03 f302 	mul.w	r3, r3, r2
 801a2d4:	60fb      	str	r3, [r7, #12]

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 801a2d6:	6878      	ldr	r0, [r7, #4]
 801a2d8:	f7ff ffd8 	bl	801a28c <lv_disp_is_double_buf>
 801a2dc:	4603      	mov	r3, r0
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d007      	beq.n	801a2f2 <lv_disp_is_true_double_buf+0x38>
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	685b      	ldr	r3, [r3, #4]
 801a2e6:	68db      	ldr	r3, [r3, #12]
 801a2e8:	68fa      	ldr	r2, [r7, #12]
 801a2ea:	429a      	cmp	r2, r3
 801a2ec:	d101      	bne.n	801a2f2 <lv_disp_is_true_double_buf+0x38>
        return true;
 801a2ee:	2301      	movs	r3, #1
 801a2f0:	e000      	b.n	801a2f4 <lv_disp_is_true_double_buf+0x3a>
    }
    else {
        return false;
 801a2f2:	2300      	movs	r3, #0
    }
}
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	3710      	adds	r7, #16
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bd80      	pop	{r7, pc}

0801a2fc <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b082      	sub	sp, #8
 801a300:	af00      	add	r7, sp, #0
 801a302:	6078      	str	r0, [r7, #4]
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
 801a304:	211c      	movs	r1, #28
 801a306:	6878      	ldr	r0, [r7, #4]
 801a308:	f002 fd9b 	bl	801ce42 <_lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	2200      	movs	r2, #0
 801a310:	701a      	strb	r2, [r3, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	220a      	movs	r2, #10
 801a316:	751a      	strb	r2, [r3, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	220a      	movs	r2, #10
 801a31c:	755a      	strb	r2, [r3, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a324:	831a      	strh	r2, [r3, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	2264      	movs	r2, #100	; 0x64
 801a32a:	835a      	strh	r2, [r3, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	2232      	movs	r2, #50	; 0x32
 801a330:	75da      	strb	r2, [r3, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	2203      	movs	r2, #3
 801a336:	759a      	strb	r2, [r3, #22]
}
 801a338:	bf00      	nop
 801a33a:	3708      	adds	r7, #8
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}

0801a340 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 801a340:	b590      	push	{r4, r7, lr}
 801a342:	b085      	sub	sp, #20
 801a344:	af00      	add	r7, sp, #0
 801a346:	6078      	str	r0, [r7, #4]

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	68db      	ldr	r3, [r3, #12]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d104      	bne.n	801a35a <lv_indev_drv_register+0x1a>
 801a350:	f7ff fe82 	bl	801a058 <lv_disp_get_default>
 801a354:	4602      	mov	r2, r0
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	60da      	str	r2, [r3, #12]

    if(driver->disp == NULL) {
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	68db      	ldr	r3, [r3, #12]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d101      	bne.n	801a366 <lv_indev_drv_register+0x26>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
 801a362:	2300      	movs	r3, #0
 801a364:	e03e      	b.n	801a3e4 <lv_indev_drv_register+0xa4>
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 801a366:	4821      	ldr	r0, [pc, #132]	; (801a3ec <lv_indev_drv_register+0xac>)
 801a368:	f001 fccd 	bl	801bd06 <_lv_ll_ins_head>
 801a36c:	60f8      	str	r0, [r7, #12]
    if(!indev) {
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	2b00      	cmp	r3, #0
 801a372:	d113      	bne.n	801a39c <lv_indev_drv_register+0x5c>
        LV_ASSERT_MEM(indev);
 801a374:	68f8      	ldr	r0, [r7, #12]
 801a376:	f001 fa6d 	bl	801b854 <lv_debug_check_null>
 801a37a:	4603      	mov	r3, r0
 801a37c:	f083 0301 	eor.w	r3, r3, #1
 801a380:	b2db      	uxtb	r3, r3
 801a382:	2b00      	cmp	r3, #0
 801a384:	d008      	beq.n	801a398 <lv_indev_drv_register+0x58>
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	f04f 0400 	mov.w	r4, #0
 801a38c:	461a      	mov	r2, r3
 801a38e:	4623      	mov	r3, r4
 801a390:	4817      	ldr	r0, [pc, #92]	; (801a3f0 <lv_indev_drv_register+0xb0>)
 801a392:	f001 fa6f 	bl	801b874 <lv_debug_log_error>
 801a396:	e7fe      	b.n	801a396 <lv_indev_drv_register+0x56>
        return NULL;
 801a398:	2300      	movs	r3, #0
 801a39a:	e023      	b.n	801a3e4 <lv_indev_drv_register+0xa4>
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
 801a39c:	2160      	movs	r1, #96	; 0x60
 801a39e:	68f8      	ldr	r0, [r7, #12]
 801a3a0:	f002 fd4f 	bl	801ce42 <_lv_memset_00>
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	221c      	movs	r2, #28
 801a3a8:	6879      	ldr	r1, [r7, #4]
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	f002 faa4 	bl	801c8f8 <_lv_memcpy>

    indev->proc.reset_query = 1;
 801a3b0:	68fa      	ldr	r2, [r7, #12]
 801a3b2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 801a3b6:	f043 0302 	orr.w	r3, r3, #2
 801a3ba:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    indev->cursor           = NULL;
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	655a      	str	r2, [r3, #84]	; 0x54
    indev->group            = NULL;
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	659a      	str	r2, [r3, #88]	; 0x58
    indev->btn_points       = NULL;
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	65da      	str	r2, [r3, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	2204      	movs	r2, #4
 801a3d4:	211e      	movs	r1, #30
 801a3d6:	4807      	ldr	r0, [pc, #28]	; (801a3f4 <lv_indev_drv_register+0xb4>)
 801a3d8:	f003 f81a 	bl	801d410 <lv_task_create>
 801a3dc:	4602      	mov	r2, r0
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	611a      	str	r2, [r3, #16]

    return indev;
 801a3e2:	68fb      	ldr	r3, [r7, #12]
}
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	3714      	adds	r7, #20
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	bd90      	pop	{r4, r7, pc}
 801a3ec:	20020394 	.word	0x20020394
 801a3f0:	080283d0 	.word	0x080283d0
 801a3f4:	08001b21 	.word	0x08001b21

0801a3f8 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 801a3f8:	b580      	push	{r7, lr}
 801a3fa:	b082      	sub	sp, #8
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d104      	bne.n	801a410 <lv_indev_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801a406:	4807      	ldr	r0, [pc, #28]	; (801a424 <lv_indev_get_next+0x2c>)
 801a408:	f001 fdda 	bl	801bfc0 <_lv_ll_get_head>
 801a40c:	4603      	mov	r3, r0
 801a40e:	e004      	b.n	801a41a <lv_indev_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801a410:	6879      	ldr	r1, [r7, #4]
 801a412:	4804      	ldr	r0, [pc, #16]	; (801a424 <lv_indev_get_next+0x2c>)
 801a414:	f001 fdfa 	bl	801c00c <_lv_ll_get_next>
 801a418:	4603      	mov	r3, r0
}
 801a41a:	4618      	mov	r0, r3
 801a41c:	3708      	adds	r7, #8
 801a41e:	46bd      	mov	sp, r7
 801a420:	bd80      	pop	{r7, pc}
 801a422:	bf00      	nop
 801a424:	20020394 	.word	0x20020394

0801a428 <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 801a428:	b580      	push	{r7, lr}
 801a42a:	b084      	sub	sp, #16
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]
 801a430:	6039      	str	r1, [r7, #0]
    bool cont = false;
 801a432:	2300      	movs	r3, #0
 801a434:	73fb      	strb	r3, [r7, #15]

    _lv_memset_00(data, sizeof(lv_indev_data_t));
 801a436:	2110      	movs	r1, #16
 801a438:	6838      	ldr	r0, [r7, #0]
 801a43a:	f002 fd02 	bl	801ce42 <_lv_memset_00>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	781b      	ldrb	r3, [r3, #0]
 801a442:	2b01      	cmp	r3, #1
 801a444:	d10a      	bne.n	801a45c <_lv_indev_read+0x34>
        data->point.x = indev->proc.types.pointer.act_point.x;
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 801a44c:	683b      	ldr	r3, [r7, #0]
 801a44e:	801a      	strh	r2, [r3, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	805a      	strh	r2, [r3, #2]
 801a45a:	e012      	b.n	801a482 <_lv_indev_read+0x5a>
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	781b      	ldrb	r3, [r3, #0]
 801a460:	2b02      	cmp	r3, #2
 801a462:	d104      	bne.n	801a46e <_lv_indev_read+0x46>
        data->key = indev->proc.types.keypad.last_key;
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a468:	683b      	ldr	r3, [r7, #0]
 801a46a:	605a      	str	r2, [r3, #4]
 801a46c:	e009      	b.n	801a482 <_lv_indev_read+0x5a>
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	781b      	ldrb	r3, [r3, #0]
 801a472:	2b04      	cmp	r3, #4
 801a474:	d105      	bne.n	801a482 <_lv_indev_read+0x5a>
        data->key = LV_KEY_ENTER;
 801a476:	683b      	ldr	r3, [r7, #0]
 801a478:	220a      	movs	r2, #10
 801a47a:	605a      	str	r2, [r3, #4]
        data->enc_diff = 0;
 801a47c:	683b      	ldr	r3, [r7, #0]
 801a47e:	2200      	movs	r2, #0
 801a480:	819a      	strh	r2, [r3, #12]
    }

    if(indev->driver.read_cb) {
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	685b      	ldr	r3, [r3, #4]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d007      	beq.n	801a49a <_lv_indev_read+0x72>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	685b      	ldr	r3, [r3, #4]
 801a48e:	687a      	ldr	r2, [r7, #4]
 801a490:	6839      	ldr	r1, [r7, #0]
 801a492:	4610      	mov	r0, r2
 801a494:	4798      	blx	r3
 801a496:	4603      	mov	r3, r0
 801a498:	73fb      	strb	r3, [r7, #15]
    }
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
 801a49a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a49c:	4618      	mov	r0, r3
 801a49e:	3710      	adds	r7, #16
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	bd80      	pop	{r7, pc}

0801a4a4 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 801a4a4:	b480      	push	{r7}
 801a4a6:	b083      	sub	sp, #12
 801a4a8:	af00      	add	r7, sp, #0
 801a4aa:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 801a4ac:	4b07      	ldr	r3, [pc, #28]	; (801a4cc <lv_tick_inc+0x28>)
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 801a4b2:	4b07      	ldr	r3, [pc, #28]	; (801a4d0 <lv_tick_inc+0x2c>)
 801a4b4:	681a      	ldr	r2, [r3, #0]
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	4413      	add	r3, r2
 801a4ba:	4a05      	ldr	r2, [pc, #20]	; (801a4d0 <lv_tick_inc+0x2c>)
 801a4bc:	6013      	str	r3, [r2, #0]
}
 801a4be:	bf00      	nop
 801a4c0:	370c      	adds	r7, #12
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c8:	4770      	bx	lr
 801a4ca:	bf00      	nop
 801a4cc:	20018054 	.word	0x20018054
 801a4d0:	20018050 	.word	0x20018050

0801a4d4 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 801a4d4:	b480      	push	{r7}
 801a4d6:	b083      	sub	sp, #12
 801a4d8:	af00      	add	r7, sp, #0
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
 801a4da:	4b09      	ldr	r3, [pc, #36]	; (801a500 <lv_tick_get+0x2c>)
 801a4dc:	2201      	movs	r2, #1
 801a4de:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 801a4e0:	4b08      	ldr	r3, [pc, #32]	; (801a504 <lv_tick_get+0x30>)
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
 801a4e6:	4b06      	ldr	r3, [pc, #24]	; (801a500 <lv_tick_get+0x2c>)
 801a4e8:	781b      	ldrb	r3, [r3, #0]
 801a4ea:	b2db      	uxtb	r3, r3
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d0f4      	beq.n	801a4da <lv_tick_get+0x6>

    return result;
 801a4f0:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	370c      	adds	r7, #12
 801a4f6:	46bd      	mov	sp, r7
 801a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4fc:	4770      	bx	lr
 801a4fe:	bf00      	nop
 801a500:	20018054 	.word	0x20018054
 801a504:	20018050 	.word	0x20018050

0801a508 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801a508:	b580      	push	{r7, lr}
 801a50a:	b084      	sub	sp, #16
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 801a510:	f7ff ffe0 	bl	801a4d4 <lv_tick_get>
 801a514:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 801a516:	68fa      	ldr	r2, [r7, #12]
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	429a      	cmp	r2, r3
 801a51c:	d304      	bcc.n	801a528 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 801a51e:	68fa      	ldr	r2, [r7, #12]
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	1ad3      	subs	r3, r2, r3
 801a524:	607b      	str	r3, [r7, #4]
 801a526:	e006      	b.n	801a536 <lv_tick_elaps+0x2e>
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	425b      	negs	r3, r3
 801a52c:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 801a52e:	687a      	ldr	r2, [r7, #4]
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	4413      	add	r3, r2
 801a534:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 801a536:	687b      	ldr	r3, [r7, #4]
}
 801a538:	4618      	mov	r0, r3
 801a53a:	3710      	adds	r7, #16
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd80      	pop	{r7, pc}

0801a540 <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 801a540:	b480      	push	{r7}
 801a542:	b087      	sub	sp, #28
 801a544:	af00      	add	r7, sp, #0
 801a546:	60f8      	str	r0, [r7, #12]
 801a548:	60b9      	str	r1, [r7, #8]
 801a54a:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 801a550:	68bb      	ldr	r3, [r7, #8]
 801a552:	613b      	str	r3, [r7, #16]

    while(len) {
 801a554:	e00c      	b.n	801a570 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 801a556:	693b      	ldr	r3, [r7, #16]
 801a558:	781a      	ldrb	r2, [r3, #0]
 801a55a:	697b      	ldr	r3, [r7, #20]
 801a55c:	701a      	strb	r2, [r3, #0]
        d8++;
 801a55e:	697b      	ldr	r3, [r7, #20]
 801a560:	3301      	adds	r3, #1
 801a562:	617b      	str	r3, [r7, #20]
        s8++;
 801a564:	693b      	ldr	r3, [r7, #16]
 801a566:	3301      	adds	r3, #1
 801a568:	613b      	str	r3, [r7, #16]
        len--;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	3b01      	subs	r3, #1
 801a56e:	607b      	str	r3, [r7, #4]
    while(len) {
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d1ef      	bne.n	801a556 <_lv_memcpy_small+0x16>
    }

    return dst;
 801a576:	68fb      	ldr	r3, [r7, #12]
}
 801a578:	4618      	mov	r0, r3
 801a57a:	371c      	adds	r7, #28
 801a57c:	46bd      	mov	sp, r7
 801a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a582:	4770      	bx	lr

0801a584 <_lv_anim_core_init>:

/**
 * Init. the animation module
 */
void _lv_anim_core_init(void)
{
 801a584:	b580      	push	{r7, lr}
 801a586:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 801a588:	2144      	movs	r1, #68	; 0x44
 801a58a:	480c      	ldr	r0, [pc, #48]	; (801a5bc <_lv_anim_core_init+0x38>)
 801a58c:	f001 fba2 	bl	801bcd4 <_lv_ll_init>
    last_task_run = lv_tick_get();
 801a590:	f7ff ffa0 	bl	801a4d4 <lv_tick_get>
 801a594:	4602      	mov	r2, r0
 801a596:	4b0a      	ldr	r3, [pc, #40]	; (801a5c0 <_lv_anim_core_init+0x3c>)
 801a598:	601a      	str	r2, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 801a59a:	2300      	movs	r3, #0
 801a59c:	2204      	movs	r2, #4
 801a59e:	211e      	movs	r1, #30
 801a5a0:	4808      	ldr	r0, [pc, #32]	; (801a5c4 <_lv_anim_core_init+0x40>)
 801a5a2:	f002 ff35 	bl	801d410 <lv_task_create>
 801a5a6:	4602      	mov	r2, r0
 801a5a8:	4b07      	ldr	r3, [pc, #28]	; (801a5c8 <_lv_anim_core_init+0x44>)
 801a5aa:	601a      	str	r2, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
 801a5ac:	f000 fa52 	bl	801aa54 <anim_mark_list_change>
    anim_list_changed = false; /*The list has not actually changed*/
 801a5b0:	4b06      	ldr	r3, [pc, #24]	; (801a5cc <_lv_anim_core_init+0x48>)
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	701a      	strb	r2, [r3, #0]
}
 801a5b6:	bf00      	nop
 801a5b8:	bd80      	pop	{r7, pc}
 801a5ba:	bf00      	nop
 801a5bc:	20020464 	.word	0x20020464
 801a5c0:	20018058 	.word	0x20018058
 801a5c4:	0801a7bd 	.word	0x0801a7bd
 801a5c8:	20018060 	.word	0x20018060
 801a5cc:	2001805c 	.word	0x2001805c

0801a5d0 <lv_anim_init>:
 * lv_anim_init(&a);
 * lv_anim_set_...(&a);
 * @param a pointer to an `lv_anim_t` variable to initialize
 */
void lv_anim_init(lv_anim_t * a)
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	b082      	sub	sp, #8
 801a5d4:	af00      	add	r7, sp, #0
 801a5d6:	6078      	str	r0, [r7, #4]
    _lv_memset_00(a, sizeof(lv_anim_t));
 801a5d8:	2144      	movs	r1, #68	; 0x44
 801a5da:	6878      	ldr	r0, [r7, #4]
 801a5dc:	f002 fc31 	bl	801ce42 <_lv_memset_00>
    a->time    = 500;
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801a5e6:	625a      	str	r2, [r3, #36]	; 0x24
    a->start   = 0;
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	619a      	str	r2, [r3, #24]
    a->end     = 100;
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	2264      	movs	r2, #100	; 0x64
 801a5f2:	621a      	str	r2, [r3, #32]
    _lv_memcpy_small(&a->path, &lv_anim_path_def, sizeof(lv_anim_path_cb_t));
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	3310      	adds	r3, #16
 801a5f8:	2204      	movs	r2, #4
 801a5fa:	4909      	ldr	r1, [pc, #36]	; (801a620 <lv_anim_init+0x50>)
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	f7ff ff9f 	bl	801a540 <_lv_memcpy_small>
    a->repeat_cnt = 1;
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	2201      	movs	r2, #1
 801a606:	871a      	strh	r2, [r3, #56]	; 0x38
    a->early_apply = 1;
 801a608:	687a      	ldr	r2, [r7, #4]
 801a60a:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 801a60e:	f043 0301 	orr.w	r3, r3, #1
 801a612:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
}
 801a616:	bf00      	nop
 801a618:	3708      	adds	r7, #8
 801a61a:	46bd      	mov	sp, r7
 801a61c:	bd80      	pop	{r7, pc}
 801a61e:	bf00      	nop
 801a620:	0802ba14 	.word	0x0802ba14

0801a624 <lv_anim_start>:
/**
 * Create an animation
 * @param a an initialized 'anim_t' variable. Not required after call.
 */
void lv_anim_start(lv_anim_t * a)
{
 801a624:	b590      	push	{r4, r7, lr}
 801a626:	b085      	sub	sp, #20
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("animation create started")
    /* Do not let two animations for the same 'var' with the same 'fp'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	685b      	ldr	r3, [r3, #4]
 801a630:	2b00      	cmp	r3, #0
 801a632:	d007      	beq.n	801a644 <lv_anim_start+0x20>
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	681a      	ldr	r2, [r3, #0]
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	685b      	ldr	r3, [r3, #4]
 801a63c:	4619      	mov	r1, r3
 801a63e:	4610      	mov	r0, r2
 801a640:	f000 f856 	bl	801a6f0 <lv_anim_del>

    /*If the list is empty the anim task was suspended and it's last run measure is invalid*/
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 801a644:	4827      	ldr	r0, [pc, #156]	; (801a6e4 <lv_anim_start+0xc0>)
 801a646:	f001 fd75 	bl	801c134 <_lv_ll_is_empty>
 801a64a:	4603      	mov	r3, r0
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d005      	beq.n	801a65c <lv_anim_start+0x38>
        last_task_run = lv_tick_get() - 1;
 801a650:	f7ff ff40 	bl	801a4d4 <lv_tick_get>
 801a654:	4603      	mov	r3, r0
 801a656:	3b01      	subs	r3, #1
 801a658:	4a23      	ldr	r2, [pc, #140]	; (801a6e8 <lv_anim_start+0xc4>)
 801a65a:	6013      	str	r3, [r2, #0]
    }

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801a65c:	4821      	ldr	r0, [pc, #132]	; (801a6e4 <lv_anim_start+0xc0>)
 801a65e:	f001 fb52 	bl	801bd06 <_lv_ll_ins_head>
 801a662:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(new_anim);
 801a664:	68f8      	ldr	r0, [r7, #12]
 801a666:	f001 f8f5 	bl	801b854 <lv_debug_check_null>
 801a66a:	4603      	mov	r3, r0
 801a66c:	f083 0301 	eor.w	r3, r3, #1
 801a670:	b2db      	uxtb	r3, r3
 801a672:	2b00      	cmp	r3, #0
 801a674:	d008      	beq.n	801a688 <lv_anim_start+0x64>
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	f04f 0400 	mov.w	r4, #0
 801a67c:	461a      	mov	r2, r3
 801a67e:	4623      	mov	r3, r4
 801a680:	481a      	ldr	r0, [pc, #104]	; (801a6ec <lv_anim_start+0xc8>)
 801a682:	f001 f8f7 	bl	801b874 <lv_debug_log_error>
 801a686:	e7fe      	b.n	801a686 <lv_anim_start+0x62>
    if(new_anim == NULL) return;
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d025      	beq.n	801a6da <lv_anim_start+0xb6>

    /*Initialize the animation descriptor*/
    a->time_orig = a->time;
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a692:	461a      	mov	r2, r3
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	63da      	str	r2, [r3, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 801a698:	2244      	movs	r2, #68	; 0x44
 801a69a:	6879      	ldr	r1, [r7, #4]
 801a69c:	68f8      	ldr	r0, [r7, #12]
 801a69e:	f002 f92b 	bl	801c8f8 <_lv_memcpy>

    /*Set the start value*/
    if(new_anim->early_apply) {
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801a6a8:	f003 0301 	and.w	r3, r3, #1
 801a6ac:	b2db      	uxtb	r3, r3
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d010      	beq.n	801a6d4 <lv_anim_start+0xb0>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
 801a6b2:	68fb      	ldr	r3, [r7, #12]
 801a6b4:	685b      	ldr	r3, [r3, #4]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d00c      	beq.n	801a6d4 <lv_anim_start+0xb0>
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d008      	beq.n	801a6d4 <lv_anim_start+0xb0>
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	685b      	ldr	r3, [r3, #4]
 801a6c6:	68fa      	ldr	r2, [r7, #12]
 801a6c8:	6810      	ldr	r0, [r2, #0]
 801a6ca:	68fa      	ldr	r2, [r7, #12]
 801a6cc:	6992      	ldr	r2, [r2, #24]
 801a6ce:	b212      	sxth	r2, r2
 801a6d0:	4611      	mov	r1, r2
 801a6d2:	4798      	blx	r3
    }

    /* Creating an animation changed the linked list.
     * It's important if it happens in a ready callback. (see `anim_task`)*/
    anim_mark_list_change();
 801a6d4:	f000 f9be 	bl	801aa54 <anim_mark_list_change>
 801a6d8:	e000      	b.n	801a6dc <lv_anim_start+0xb8>
    if(new_anim == NULL) return;
 801a6da:	bf00      	nop

    LV_LOG_TRACE("animation created")
}
 801a6dc:	3714      	adds	r7, #20
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bd90      	pop	{r4, r7, pc}
 801a6e2:	bf00      	nop
 801a6e4:	20020464 	.word	0x20020464
 801a6e8:	20018058 	.word	0x20018058
 801a6ec:	080283e0 	.word	0x080283e0

0801a6f0 <lv_anim_del>:
 * @param exec_cb a function pointer which is animating 'var',
 *           or NULL to delete all the animations of 'var'
 * @return true: at least 1 animation is deleted, false: no animation is deleted
 */
bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 801a6f0:	b580      	push	{r7, lr}
 801a6f2:	b086      	sub	sp, #24
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
 801a6f8:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	74fb      	strb	r3, [r7, #19]
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801a6fe:	4816      	ldr	r0, [pc, #88]	; (801a758 <lv_anim_del+0x68>)
 801a700:	f001 fc5e 	bl	801bfc0 <_lv_ll_get_head>
 801a704:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801a706:	e01e      	b.n	801a746 <lv_anim_del+0x56>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801a708:	6979      	ldr	r1, [r7, #20]
 801a70a:	4813      	ldr	r0, [pc, #76]	; (801a758 <lv_anim_del+0x68>)
 801a70c:	f001 fc7e 	bl	801c00c <_lv_ll_get_next>
 801a710:	60f8      	str	r0, [r7, #12]

        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 801a712:	697b      	ldr	r3, [r7, #20]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	687a      	ldr	r2, [r7, #4]
 801a718:	429a      	cmp	r2, r3
 801a71a:	d112      	bne.n	801a742 <lv_anim_del+0x52>
 801a71c:	697b      	ldr	r3, [r7, #20]
 801a71e:	685b      	ldr	r3, [r3, #4]
 801a720:	683a      	ldr	r2, [r7, #0]
 801a722:	429a      	cmp	r2, r3
 801a724:	d002      	beq.n	801a72c <lv_anim_del+0x3c>
 801a726:	683b      	ldr	r3, [r7, #0]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d10a      	bne.n	801a742 <lv_anim_del+0x52>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801a72c:	6979      	ldr	r1, [r7, #20]
 801a72e:	480a      	ldr	r0, [pc, #40]	; (801a758 <lv_anim_del+0x68>)
 801a730:	f001 fb98 	bl	801be64 <_lv_ll_remove>
            lv_mem_free(a);
 801a734:	6978      	ldr	r0, [r7, #20]
 801a736:	f001 fe63 	bl	801c400 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
 801a73a:	f000 f98b 	bl	801aa54 <anim_mark_list_change>
                                         the linked list*/
            del = true;
 801a73e:	2301      	movs	r3, #1
 801a740:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 801a746:	697b      	ldr	r3, [r7, #20]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d1dd      	bne.n	801a708 <lv_anim_del+0x18>
    }

    return del;
 801a74c:	7cfb      	ldrb	r3, [r7, #19]
}
 801a74e:	4618      	mov	r0, r3
 801a750:	3718      	adds	r7, #24
 801a752:	46bd      	mov	sp, r7
 801a754:	bd80      	pop	{r7, pc}
 801a756:	bf00      	nop
 801a758:	20020464 	.word	0x20020464

0801a75c <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_path_t * path, const lv_anim_t * a)
{
 801a75c:	b480      	push	{r7}
 801a75e:	b085      	sub	sp, #20
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]
 801a764:	6039      	str	r1, [r7, #0]
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 801a766:	683b      	ldr	r3, [r7, #0]
 801a768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a76a:	683b      	ldr	r3, [r7, #0]
 801a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a76e:	429a      	cmp	r2, r3
 801a770:	d103      	bne.n	801a77a <lv_anim_path_linear+0x1e>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 801a772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a776:	60fb      	str	r3, [r7, #12]
 801a778:	e007      	b.n	801a78a <lv_anim_path_linear+0x2e>
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 801a77a:	683b      	ldr	r3, [r7, #0]
 801a77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a77e:	029a      	lsls	r2, r3, #10
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a784:	fb92 f3f3 	sdiv	r3, r2, r3
 801a788:	60fb      	str	r3, [r7, #12]
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 801a78a:	683b      	ldr	r3, [r7, #0]
 801a78c:	6a1a      	ldr	r2, [r3, #32]
 801a78e:	683b      	ldr	r3, [r7, #0]
 801a790:	699b      	ldr	r3, [r3, #24]
 801a792:	1ad3      	subs	r3, r2, r3
 801a794:	68fa      	ldr	r2, [r7, #12]
 801a796:	fb02 f303 	mul.w	r3, r2, r3
 801a79a:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 801a79c:	68bb      	ldr	r3, [r7, #8]
 801a79e:	129b      	asrs	r3, r3, #10
 801a7a0:	60bb      	str	r3, [r7, #8]
    new_value += a->start;
 801a7a2:	683b      	ldr	r3, [r7, #0]
 801a7a4:	699b      	ldr	r3, [r3, #24]
 801a7a6:	68ba      	ldr	r2, [r7, #8]
 801a7a8:	4413      	add	r3, r2
 801a7aa:	60bb      	str	r3, [r7, #8]

    return (lv_anim_value_t)new_value;
 801a7ac:	68bb      	ldr	r3, [r7, #8]
 801a7ae:	b21b      	sxth	r3, r3
}
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	3714      	adds	r7, #20
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ba:	4770      	bx	lr

0801a7bc <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 801a7bc:	b580      	push	{r7, lr}
 801a7be:	b086      	sub	sp, #24
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	6078      	str	r0, [r7, #4]
    (void)param;

    lv_anim_t * a;
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 801a7c4:	4854      	ldr	r0, [pc, #336]	; (801a918 <anim_task+0x15c>)
 801a7c6:	f001 fbfb 	bl	801bfc0 <_lv_ll_get_head>
 801a7ca:	6178      	str	r0, [r7, #20]
 801a7cc:	e00b      	b.n	801a7e6 <anim_task+0x2a>
        a->has_run = 0;
 801a7ce:	697a      	ldr	r2, [r7, #20]
 801a7d0:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801a7d4:	f36f 0341 	bfc	r3, #1, #1
 801a7d8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 801a7dc:	6979      	ldr	r1, [r7, #20]
 801a7de:	484e      	ldr	r0, [pc, #312]	; (801a918 <anim_task+0x15c>)
 801a7e0:	f001 fc14 	bl	801c00c <_lv_ll_get_next>
 801a7e4:	6178      	str	r0, [r7, #20]
 801a7e6:	697b      	ldr	r3, [r7, #20]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d1f0      	bne.n	801a7ce <anim_task+0x12>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 801a7ec:	4b4b      	ldr	r3, [pc, #300]	; (801a91c <anim_task+0x160>)
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	f7ff fe89 	bl	801a508 <lv_tick_elaps>
 801a7f6:	60f8      	str	r0, [r7, #12]

    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801a7f8:	4847      	ldr	r0, [pc, #284]	; (801a918 <anim_task+0x15c>)
 801a7fa:	f001 fbe1 	bl	801bfc0 <_lv_ll_get_head>
 801a7fe:	6178      	str	r0, [r7, #20]

    while(a != NULL) {
 801a800:	e07d      	b.n	801a8fe <anim_task+0x142>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 801a802:	4b47      	ldr	r3, [pc, #284]	; (801a920 <anim_task+0x164>)
 801a804:	2200      	movs	r2, #0
 801a806:	701a      	strb	r2, [r3, #0]

        if(!a->has_run) {
 801a808:	697b      	ldr	r3, [r7, #20]
 801a80a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a80e:	f003 0302 	and.w	r3, r3, #2
 801a812:	b2db      	uxtb	r3, r3
 801a814:	2b00      	cmp	r3, #0
 801a816:	d164      	bne.n	801a8e2 <anim_task+0x126>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
 801a818:	697a      	ldr	r2, [r7, #20]
 801a81a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801a81e:	f043 0302 	orr.w	r3, r3, #2
 801a822:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

            /*The animation will run now for the first time. Call `start_cb`*/
            int32_t new_act_time = a->act_time + elaps;
 801a826:	697b      	ldr	r3, [r7, #20]
 801a828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a82a:	461a      	mov	r2, r3
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	4413      	add	r3, r2
 801a830:	60bb      	str	r3, [r7, #8]
            if(a->act_time <= 0 && new_act_time >= 0) {
 801a832:	697b      	ldr	r3, [r7, #20]
 801a834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a836:	2b00      	cmp	r3, #0
 801a838:	dc0a      	bgt.n	801a850 <anim_task+0x94>
 801a83a:	68bb      	ldr	r3, [r7, #8]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	db07      	blt.n	801a850 <anim_task+0x94>
                if(a->start_cb) a->start_cb(a);
 801a840:	697b      	ldr	r3, [r7, #20]
 801a842:	689b      	ldr	r3, [r3, #8]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d003      	beq.n	801a850 <anim_task+0x94>
 801a848:	697b      	ldr	r3, [r7, #20]
 801a84a:	689b      	ldr	r3, [r3, #8]
 801a84c:	6978      	ldr	r0, [r7, #20]
 801a84e:	4798      	blx	r3
            }
            a->act_time += elaps;
 801a850:	697b      	ldr	r3, [r7, #20]
 801a852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a854:	461a      	mov	r2, r3
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	4413      	add	r3, r2
 801a85a:	461a      	mov	r2, r3
 801a85c:	697b      	ldr	r3, [r7, #20]
 801a85e:	629a      	str	r2, [r3, #40]	; 0x28
            if(a->act_time >= 0) {
 801a860:	697b      	ldr	r3, [r7, #20]
 801a862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a864:	2b00      	cmp	r3, #0
 801a866:	db3c      	blt.n	801a8e2 <anim_task+0x126>
                if(a->act_time > a->time) a->act_time = a->time;
 801a868:	697b      	ldr	r3, [r7, #20]
 801a86a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a86c:	697b      	ldr	r3, [r7, #20]
 801a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a870:	429a      	cmp	r2, r3
 801a872:	dd03      	ble.n	801a87c <anim_task+0xc0>
 801a874:	697b      	ldr	r3, [r7, #20]
 801a876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a878:	697b      	ldr	r3, [r7, #20]
 801a87a:	629a      	str	r2, [r3, #40]	; 0x28

                int32_t new_value;
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 801a87c:	697b      	ldr	r3, [r7, #20]
 801a87e:	691b      	ldr	r3, [r3, #16]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d009      	beq.n	801a898 <anim_task+0xdc>
 801a884:	697b      	ldr	r3, [r7, #20]
 801a886:	691b      	ldr	r3, [r3, #16]
 801a888:	697a      	ldr	r2, [r7, #20]
 801a88a:	3210      	adds	r2, #16
 801a88c:	6979      	ldr	r1, [r7, #20]
 801a88e:	4610      	mov	r0, r2
 801a890:	4798      	blx	r3
 801a892:	4603      	mov	r3, r0
 801a894:	613b      	str	r3, [r7, #16]
 801a896:	e007      	b.n	801a8a8 <anim_task+0xec>
                else new_value = lv_anim_path_linear(&a->path, a);
 801a898:	697b      	ldr	r3, [r7, #20]
 801a89a:	3310      	adds	r3, #16
 801a89c:	6979      	ldr	r1, [r7, #20]
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7ff ff5c 	bl	801a75c <lv_anim_path_linear>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	613b      	str	r3, [r7, #16]

                if(new_value != a->current) {
 801a8a8:	697b      	ldr	r3, [r7, #20]
 801a8aa:	69db      	ldr	r3, [r3, #28]
 801a8ac:	693a      	ldr	r2, [r7, #16]
 801a8ae:	429a      	cmp	r2, r3
 801a8b0:	d00e      	beq.n	801a8d0 <anim_task+0x114>
                    a->current = new_value;
 801a8b2:	697b      	ldr	r3, [r7, #20]
 801a8b4:	693a      	ldr	r2, [r7, #16]
 801a8b6:	61da      	str	r2, [r3, #28]
                    /*Apply the calculated value*/
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 801a8b8:	697b      	ldr	r3, [r7, #20]
 801a8ba:	685b      	ldr	r3, [r3, #4]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d007      	beq.n	801a8d0 <anim_task+0x114>
 801a8c0:	697b      	ldr	r3, [r7, #20]
 801a8c2:	685b      	ldr	r3, [r3, #4]
 801a8c4:	697a      	ldr	r2, [r7, #20]
 801a8c6:	6812      	ldr	r2, [r2, #0]
 801a8c8:	6939      	ldr	r1, [r7, #16]
 801a8ca:	b209      	sxth	r1, r1
 801a8cc:	4610      	mov	r0, r2
 801a8ce:	4798      	blx	r3
                }

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 801a8d0:	697b      	ldr	r3, [r7, #20]
 801a8d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a8d4:	697b      	ldr	r3, [r7, #20]
 801a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8d8:	429a      	cmp	r2, r3
 801a8da:	db02      	blt.n	801a8e2 <anim_task+0x126>
                    anim_ready_handler(a);
 801a8dc:	6978      	ldr	r0, [r7, #20]
 801a8de:	f000 f821 	bl	801a924 <anim_ready_handler>
            }
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 801a8e2:	4b0f      	ldr	r3, [pc, #60]	; (801a920 <anim_task+0x164>)
 801a8e4:	781b      	ldrb	r3, [r3, #0]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d004      	beq.n	801a8f4 <anim_task+0x138>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801a8ea:	480b      	ldr	r0, [pc, #44]	; (801a918 <anim_task+0x15c>)
 801a8ec:	f001 fb68 	bl	801bfc0 <_lv_ll_get_head>
 801a8f0:	6178      	str	r0, [r7, #20]
 801a8f2:	e004      	b.n	801a8fe <anim_task+0x142>
        else
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801a8f4:	6979      	ldr	r1, [r7, #20]
 801a8f6:	4808      	ldr	r0, [pc, #32]	; (801a918 <anim_task+0x15c>)
 801a8f8:	f001 fb88 	bl	801c00c <_lv_ll_get_next>
 801a8fc:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801a8fe:	697b      	ldr	r3, [r7, #20]
 801a900:	2b00      	cmp	r3, #0
 801a902:	f47f af7e 	bne.w	801a802 <anim_task+0x46>
    }

    last_task_run = lv_tick_get();
 801a906:	f7ff fde5 	bl	801a4d4 <lv_tick_get>
 801a90a:	4602      	mov	r2, r0
 801a90c:	4b03      	ldr	r3, [pc, #12]	; (801a91c <anim_task+0x160>)
 801a90e:	601a      	str	r2, [r3, #0]
}
 801a910:	bf00      	nop
 801a912:	3718      	adds	r7, #24
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}
 801a918:	20020464 	.word	0x20020464
 801a91c:	20018058 	.word	0x20018058
 801a920:	2001805c 	.word	0x2001805c

0801a924 <anim_ready_handler>:
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 * @return true: animation delete occurred and the `LV_GC_ROOT(_lv_anim_ll)` has changed
 * */
static bool anim_ready_handler(lv_anim_t * a)
{
 801a924:	b580      	push	{r7, lr}
 801a926:	b094      	sub	sp, #80	; 0x50
 801a928:	af00      	add	r7, sp, #0
 801a92a:	6078      	str	r0, [r7, #4]
    /*In the end of a forward anim decrement repeat cnt.*/
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a932:	f003 0301 	and.w	r3, r3, #1
 801a936:	b2db      	uxtb	r3, r3
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d10f      	bne.n	801a95c <anim_ready_handler+0x38>
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801a940:	2b00      	cmp	r3, #0
 801a942:	d00b      	beq.n	801a95c <anim_ready_handler+0x38>
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801a948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a94c:	4293      	cmp	r3, r2
 801a94e:	d005      	beq.n	801a95c <anim_ready_handler+0x38>
        a->repeat_cnt--;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801a954:	3b01      	subs	r3, #1
 801a956:	b29a      	uxth	r2, r3
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    /*Delete the animation if
     * - no repeat left and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801a960:	2b00      	cmp	r3, #0
 801a962:	d128      	bne.n	801a9b6 <anim_ready_handler+0x92>
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d00b      	beq.n	801a984 <anim_ready_handler+0x60>
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a970:	2b00      	cmp	r3, #0
 801a972:	d020      	beq.n	801a9b6 <anim_ready_handler+0x92>
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a97a:	f003 0301 	and.w	r3, r3, #1
 801a97e:	b2db      	uxtb	r3, r3
 801a980:	2b00      	cmp	r3, #0
 801a982:	d018      	beq.n	801a9b6 <anim_ready_handler+0x92>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
 801a984:	f107 0308 	add.w	r3, r7, #8
 801a988:	2244      	movs	r2, #68	; 0x44
 801a98a:	6879      	ldr	r1, [r7, #4]
 801a98c:	4618      	mov	r0, r3
 801a98e:	f001 ffb3 	bl	801c8f8 <_lv_memcpy>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801a992:	6879      	ldr	r1, [r7, #4]
 801a994:	482d      	ldr	r0, [pc, #180]	; (801aa4c <anim_ready_handler+0x128>)
 801a996:	f001 fa65 	bl	801be64 <_lv_ll_remove>
        lv_mem_free(a);
 801a99a:	6878      	ldr	r0, [r7, #4]
 801a99c:	f001 fd30 	bl	801c400 <lv_mem_free>
        /*Flag that the list has changed */
        anim_mark_list_change();
 801a9a0:	f000 f858 	bl	801aa54 <anim_mark_list_change>

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 801a9a4:	697b      	ldr	r3, [r7, #20]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d049      	beq.n	801aa3e <anim_ready_handler+0x11a>
 801a9aa:	697b      	ldr	r3, [r7, #20]
 801a9ac:	f107 0208 	add.w	r2, r7, #8
 801a9b0:	4610      	mov	r0, r2
 801a9b2:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 801a9b4:	e043      	b.n	801aa3e <anim_ready_handler+0x11a>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a9ba:	425a      	negs	r2, r3
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	629a      	str	r2, [r3, #40]	; 0x28
        /*Swap the start and end values in play back mode*/
        if(a->playback_time != 0) {
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d03b      	beq.n	801aa40 <anim_ready_handler+0x11c>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a9ce:	f003 0301 	and.w	r3, r3, #1
 801a9d2:	b2db      	uxtb	r3, r3
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d104      	bne.n	801a9e2 <anim_ready_handler+0xbe>
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9dc:	425a      	negs	r2, r3
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	629a      	str	r2, [r3, #40]	; 0x28

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a9e8:	f003 0301 	and.w	r3, r3, #1
 801a9ec:	b2db      	uxtb	r3, r3
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	bf0c      	ite	eq
 801a9f2:	2301      	moveq	r3, #1
 801a9f4:	2300      	movne	r3, #0
 801a9f6:	b2d9      	uxtb	r1, r3
 801a9f8:	687a      	ldr	r2, [r7, #4]
 801a9fa:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801a9fe:	f361 0300 	bfi	r3, r1, #0, #1
 801aa02:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	699b      	ldr	r3, [r3, #24]
 801aa0a:	64fb      	str	r3, [r7, #76]	; 0x4c
            a->start = a->end;
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	6a1a      	ldr	r2, [r3, #32]
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	619a      	str	r2, [r3, #24]
            a->end   = tmp;
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801aa18:	621a      	str	r2, [r3, #32]

            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801aa20:	f003 0301 	and.w	r3, r3, #1
 801aa24:	b2db      	uxtb	r3, r3
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d103      	bne.n	801aa32 <anim_ready_handler+0x10e>
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa2e:	461a      	mov	r2, r3
 801aa30:	e002      	b.n	801aa38 <anim_ready_handler+0x114>
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa36:	461a      	mov	r2, r3
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	625a      	str	r2, [r3, #36]	; 0x24
 801aa3c:	e000      	b.n	801aa40 <anim_ready_handler+0x11c>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 801aa3e:	bf00      	nop
        }
    }

    return anim_list_changed;
 801aa40:	4b03      	ldr	r3, [pc, #12]	; (801aa50 <anim_ready_handler+0x12c>)
 801aa42:	781b      	ldrb	r3, [r3, #0]
}
 801aa44:	4618      	mov	r0, r3
 801aa46:	3750      	adds	r7, #80	; 0x50
 801aa48:	46bd      	mov	sp, r7
 801aa4a:	bd80      	pop	{r7, pc}
 801aa4c:	20020464 	.word	0x20020464
 801aa50:	2001805c 	.word	0x2001805c

0801aa54 <anim_mark_list_change>:
static void anim_mark_list_change(void)
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	af00      	add	r7, sp, #0
    anim_list_changed = true;
 801aa58:	4b0b      	ldr	r3, [pc, #44]	; (801aa88 <anim_mark_list_change+0x34>)
 801aa5a:	2201      	movs	r2, #1
 801aa5c:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801aa5e:	480b      	ldr	r0, [pc, #44]	; (801aa8c <anim_mark_list_change+0x38>)
 801aa60:	f001 faae 	bl	801bfc0 <_lv_ll_get_head>
 801aa64:	4603      	mov	r3, r0
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d106      	bne.n	801aa78 <anim_mark_list_change+0x24>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
 801aa6a:	4b09      	ldr	r3, [pc, #36]	; (801aa90 <anim_mark_list_change+0x3c>)
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	2100      	movs	r1, #0
 801aa70:	4618      	mov	r0, r3
 801aa72:	f002 fd97 	bl	801d5a4 <lv_task_set_prio>
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
}
 801aa76:	e005      	b.n	801aa84 <anim_mark_list_change+0x30>
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 801aa78:	4b05      	ldr	r3, [pc, #20]	; (801aa90 <anim_mark_list_change+0x3c>)
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	2104      	movs	r1, #4
 801aa7e:	4618      	mov	r0, r3
 801aa80:	f002 fd90 	bl	801d5a4 <lv_task_set_prio>
}
 801aa84:	bf00      	nop
 801aa86:	bd80      	pop	{r7, pc}
 801aa88:	2001805c 	.word	0x2001805c
 801aa8c:	20020464 	.word	0x20020464
 801aa90:	20018060 	.word	0x20018060

0801aa94 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801aa94:	b480      	push	{r7}
 801aa96:	b083      	sub	sp, #12
 801aa98:	af00      	add	r7, sp, #0
 801aa9a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aaa2:	b29a      	uxth	r2, r3
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aaaa:	b29b      	uxth	r3, r3
 801aaac:	1ad3      	subs	r3, r2, r3
 801aaae:	b29b      	uxth	r3, r3
 801aab0:	3301      	adds	r3, #1
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	b21b      	sxth	r3, r3
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	370c      	adds	r7, #12
 801aaba:	46bd      	mov	sp, r7
 801aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac0:	4770      	bx	lr

0801aac2 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801aac2:	b480      	push	{r7}
 801aac4:	b083      	sub	sp, #12
 801aac6:	af00      	add	r7, sp, #0
 801aac8:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aad0:	b29a      	uxth	r2, r3
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aad8:	b29b      	uxth	r3, r3
 801aada:	1ad3      	subs	r3, r2, r3
 801aadc:	b29b      	uxth	r3, r3
 801aade:	3301      	adds	r3, #1
 801aae0:	b29b      	uxth	r3, r3
 801aae2:	b21b      	sxth	r3, r3
}
 801aae4:	4618      	mov	r0, r3
 801aae6:	370c      	adds	r7, #12
 801aae8:	46bd      	mov	sp, r7
 801aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaee:	4770      	bx	lr

0801aaf0 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 801aaf0:	b480      	push	{r7}
 801aaf2:	b085      	sub	sp, #20
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	60f8      	str	r0, [r7, #12]
 801aaf8:	4608      	mov	r0, r1
 801aafa:	4611      	mov	r1, r2
 801aafc:	461a      	mov	r2, r3
 801aafe:	4603      	mov	r3, r0
 801ab00:	817b      	strh	r3, [r7, #10]
 801ab02:	460b      	mov	r3, r1
 801ab04:	813b      	strh	r3, [r7, #8]
 801ab06:	4613      	mov	r3, r2
 801ab08:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	897a      	ldrh	r2, [r7, #10]
 801ab0e:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	893a      	ldrh	r2, [r7, #8]
 801ab14:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	88fa      	ldrh	r2, [r7, #6]
 801ab1a:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	8b3a      	ldrh	r2, [r7, #24]
 801ab20:	80da      	strh	r2, [r3, #6]
}
 801ab22:	bf00      	nop
 801ab24:	3714      	adds	r7, #20
 801ab26:	46bd      	mov	sp, r7
 801ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2c:	4770      	bx	lr

0801ab2e <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 801ab2e:	b480      	push	{r7}
 801ab30:	b083      	sub	sp, #12
 801ab32:	af00      	add	r7, sp, #0
 801ab34:	6078      	str	r0, [r7, #4]
 801ab36:	460b      	mov	r3, r1
 801ab38:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ab40:	b29a      	uxth	r2, r3
 801ab42:	887b      	ldrh	r3, [r7, #2]
 801ab44:	4413      	add	r3, r2
 801ab46:	b29b      	uxth	r3, r3
 801ab48:	3b01      	subs	r3, #1
 801ab4a:	b29b      	uxth	r3, r3
 801ab4c:	b21a      	sxth	r2, r3
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	80da      	strh	r2, [r3, #6]
}
 801ab52:	bf00      	nop
 801ab54:	370c      	adds	r7, #12
 801ab56:	46bd      	mov	sp, r7
 801ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab5c:	4770      	bx	lr

0801ab5e <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 801ab5e:	b480      	push	{r7}
 801ab60:	b085      	sub	sp, #20
 801ab62:	af00      	add	r7, sp, #0
 801ab64:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ab6c:	461a      	mov	r2, r3
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab74:	1ad3      	subs	r3, r2, r3
 801ab76:	3301      	adds	r3, #1
 801ab78:	461a      	mov	r2, r3
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ab80:	4619      	mov	r1, r3
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ab88:	1acb      	subs	r3, r1, r3
 801ab8a:	3301      	adds	r3, #1
 801ab8c:	fb03 f302 	mul.w	r3, r3, r2
 801ab90:	60fb      	str	r3, [r7, #12]

    return size;
 801ab92:	68fb      	ldr	r3, [r7, #12]
}
 801ab94:	4618      	mov	r0, r3
 801ab96:	3714      	adds	r7, #20
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab9e:	4770      	bx	lr

0801aba0 <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801aba0:	b480      	push	{r7}
 801aba2:	b087      	sub	sp, #28
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	60f8      	str	r0, [r7, #12]
 801aba8:	60b9      	str	r1, [r7, #8]
 801abaa:	607a      	str	r2, [r7, #4]
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	f9b3 2000 	ldrsh.w	r2, [r3]
 801abb2:	68bb      	ldr	r3, [r7, #8]
 801abb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801abb8:	4293      	cmp	r3, r2
 801abba:	bfb8      	it	lt
 801abbc:	4613      	movlt	r3, r2
 801abbe:	b21a      	sxth	r2, r3
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801abca:	68bb      	ldr	r3, [r7, #8]
 801abcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801abd0:	4293      	cmp	r3, r2
 801abd2:	bfb8      	it	lt
 801abd4:	4613      	movlt	r3, r2
 801abd6:	b21a      	sxth	r2, r3
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801abe2:	68bb      	ldr	r3, [r7, #8]
 801abe4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801abe8:	4293      	cmp	r3, r2
 801abea:	bfa8      	it	ge
 801abec:	4613      	movge	r3, r2
 801abee:	b21a      	sxth	r2, r3
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ac00:	4293      	cmp	r3, r2
 801ac02:	bfa8      	it	ge
 801ac04:	4613      	movge	r3, r2
 801ac06:	b21a      	sxth	r2, r3
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 801ac0c:	2301      	movs	r3, #1
 801ac0e:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ac1c:	429a      	cmp	r2, r3
 801ac1e:	dc07      	bgt.n	801ac30 <_lv_area_intersect+0x90>
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ac2c:	429a      	cmp	r2, r3
 801ac2e:	dd01      	ble.n	801ac34 <_lv_area_intersect+0x94>
        union_ok = false;
 801ac30:	2300      	movs	r3, #0
 801ac32:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 801ac34:	7dfb      	ldrb	r3, [r7, #23]
}
 801ac36:	4618      	mov	r0, r3
 801ac38:	371c      	adds	r7, #28
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac40:	4770      	bx	lr

0801ac42 <_lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801ac42:	b480      	push	{r7}
 801ac44:	b085      	sub	sp, #20
 801ac46:	af00      	add	r7, sp, #0
 801ac48:	60f8      	str	r0, [r7, #12]
 801ac4a:	60b9      	str	r1, [r7, #8]
 801ac4c:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac54:	68bb      	ldr	r3, [r7, #8]
 801ac56:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ac5a:	4293      	cmp	r3, r2
 801ac5c:	bfa8      	it	ge
 801ac5e:	4613      	movge	r3, r2
 801ac60:	b21a      	sxth	r2, r3
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ac72:	4293      	cmp	r3, r2
 801ac74:	bfa8      	it	ge
 801ac76:	4613      	movge	r3, r2
 801ac78:	b21a      	sxth	r2, r3
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ac84:	68bb      	ldr	r3, [r7, #8]
 801ac86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ac8a:	4293      	cmp	r3, r2
 801ac8c:	bfb8      	it	lt
 801ac8e:	4613      	movlt	r3, r2
 801ac90:	b21a      	sxth	r2, r3
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ac9c:	68bb      	ldr	r3, [r7, #8]
 801ac9e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aca2:	4293      	cmp	r3, r2
 801aca4:	bfb8      	it	lt
 801aca6:	4613      	movlt	r3, r2
 801aca8:	b21a      	sxth	r2, r3
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	80da      	strh	r2, [r3, #6]
}
 801acae:	bf00      	nop
 801acb0:	3714      	adds	r7, #20
 801acb2:	46bd      	mov	sp, r7
 801acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acb8:	4770      	bx	lr

0801acba <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 801acba:	b580      	push	{r7, lr}
 801acbc:	b088      	sub	sp, #32
 801acbe:	af00      	add	r7, sp, #0
 801acc0:	60f8      	str	r0, [r7, #12]
 801acc2:	60b9      	str	r1, [r7, #8]
 801acc4:	4613      	mov	r3, r2
 801acc6:	80fb      	strh	r3, [r7, #6]
    /*First check the basic area*/
    bool is_on_rect = false;
 801acc8:	2300      	movs	r3, #0
 801acca:	77fb      	strb	r3, [r7, #31]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 801accc:	68bb      	ldr	r3, [r7, #8]
 801acce:	f9b3 2000 	ldrsh.w	r2, [r3]
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801acd8:	429a      	cmp	r2, r3
 801acda:	db19      	blt.n	801ad10 <_lv_area_is_point_on+0x56>
 801acdc:	68bb      	ldr	r3, [r7, #8]
 801acde:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ace2:	68fb      	ldr	r3, [r7, #12]
 801ace4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ace8:	429a      	cmp	r2, r3
 801acea:	dc11      	bgt.n	801ad10 <_lv_area_is_point_on+0x56>
 801acec:	68bb      	ldr	r3, [r7, #8]
 801acee:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801acf8:	429a      	cmp	r2, r3
 801acfa:	db09      	blt.n	801ad10 <_lv_area_is_point_on+0x56>
 801acfc:	68bb      	ldr	r3, [r7, #8]
 801acfe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ad08:	429a      	cmp	r2, r3
 801ad0a:	dc01      	bgt.n	801ad10 <_lv_area_is_point_on+0x56>
        is_on_rect = true;
 801ad0c:	2301      	movs	r3, #1
 801ad0e:	77fb      	strb	r3, [r7, #31]
    }
    if(!is_on_rect)
 801ad10:	7ffb      	ldrb	r3, [r7, #31]
 801ad12:	f083 0301 	eor.w	r3, r3, #1
 801ad16:	b2db      	uxtb	r3, r3
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d001      	beq.n	801ad20 <_lv_area_is_point_on+0x66>
        return false;
 801ad1c:	2300      	movs	r3, #0
 801ad1e:	e0f1      	b.n	801af04 <_lv_area_is_point_on+0x24a>
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 801ad20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	dc01      	bgt.n	801ad2c <_lv_area_is_point_on+0x72>
        /*No radius, it is within the rectangle*/
        return true;
 801ad28:	2301      	movs	r3, #1
 801ad2a:	e0eb      	b.n	801af04 <_lv_area_is_point_on+0x24a>
    }
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 801ad2c:	68f8      	ldr	r0, [r7, #12]
 801ad2e:	f7ff feb1 	bl	801aa94 <lv_area_get_width>
 801ad32:	4603      	mov	r3, r0
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	da00      	bge.n	801ad3a <_lv_area_is_point_on+0x80>
 801ad38:	3301      	adds	r3, #1
 801ad3a:	105b      	asrs	r3, r3, #1
 801ad3c:	83bb      	strh	r3, [r7, #28]
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 801ad3e:	68f8      	ldr	r0, [r7, #12]
 801ad40:	f7ff febf 	bl	801aac2 <lv_area_get_height>
 801ad44:	4603      	mov	r3, r0
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	da00      	bge.n	801ad4c <_lv_area_is_point_on+0x92>
 801ad4a:	3301      	adds	r3, #1
 801ad4c:	105b      	asrs	r3, r3, #1
 801ad4e:	837b      	strh	r3, [r7, #26]
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
 801ad50:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801ad54:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801ad58:	4293      	cmp	r3, r2
 801ad5a:	bfa8      	it	ge
 801ad5c:	4613      	movge	r3, r2
 801ad5e:	833b      	strh	r3, [r7, #24]
    if(radius > max_radius)
 801ad60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801ad64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	dd01      	ble.n	801ad70 <_lv_area_is_point_on+0xb6>
        radius = max_radius;
 801ad6c:	8b3b      	ldrh	r3, [r7, #24]
 801ad6e:	80fb      	strh	r3, [r7, #6]

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ad76:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x1 + radius;
 801ad78:	68fb      	ldr	r3, [r7, #12]
 801ad7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ad7e:	b29a      	uxth	r2, r3
 801ad80:	88fb      	ldrh	r3, [r7, #6]
 801ad82:	4413      	add	r3, r2
 801ad84:	b29b      	uxth	r3, r3
 801ad86:	b21b      	sxth	r3, r3
 801ad88:	82bb      	strh	r3, [r7, #20]
    corner_area.y1 = a_p->y1;
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ad90:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 801ad92:	68fb      	ldr	r3, [r7, #12]
 801ad94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ad98:	b29a      	uxth	r2, r3
 801ad9a:	88fb      	ldrh	r3, [r7, #6]
 801ad9c:	4413      	add	r3, r2
 801ad9e:	b29b      	uxth	r3, r3
 801ada0:	b21b      	sxth	r3, r3
 801ada2:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801ada4:	f107 0310 	add.w	r3, r7, #16
 801ada8:	2200      	movs	r2, #0
 801adaa:	68b9      	ldr	r1, [r7, #8]
 801adac:	4618      	mov	r0, r3
 801adae:	f7ff ff84 	bl	801acba <_lv_area_is_point_on>
 801adb2:	4603      	mov	r3, r0
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d017      	beq.n	801ade8 <_lv_area_is_point_on+0x12e>
        corner_area.x2 += radius;
 801adb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801adbc:	b29a      	uxth	r2, r3
 801adbe:	88fb      	ldrh	r3, [r7, #6]
 801adc0:	4413      	add	r3, r2
 801adc2:	b29b      	uxth	r3, r3
 801adc4:	b21b      	sxth	r3, r3
 801adc6:	82bb      	strh	r3, [r7, #20]
        corner_area.y2 += radius;
 801adc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801adcc:	b29a      	uxth	r2, r3
 801adce:	88fb      	ldrh	r3, [r7, #6]
 801add0:	4413      	add	r3, r2
 801add2:	b29b      	uxth	r3, r3
 801add4:	b21b      	sxth	r3, r3
 801add6:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 801add8:	f107 0310 	add.w	r3, r7, #16
 801addc:	68b9      	ldr	r1, [r7, #8]
 801adde:	4618      	mov	r0, r3
 801ade0:	f000 fbe2 	bl	801b5a8 <lv_point_within_circle>
 801ade4:	4603      	mov	r3, r0
 801ade6:	e08d      	b.n	801af04 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom left*/
    corner_area.y1 = a_p->y2 - radius;
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801adee:	b29a      	uxth	r2, r3
 801adf0:	88fb      	ldrh	r3, [r7, #6]
 801adf2:	1ad3      	subs	r3, r2, r3
 801adf4:	b29b      	uxth	r3, r3
 801adf6:	b21b      	sxth	r3, r3
 801adf8:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y2;
 801adfa:	68fb      	ldr	r3, [r7, #12]
 801adfc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ae00:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801ae02:	f107 0310 	add.w	r3, r7, #16
 801ae06:	2200      	movs	r2, #0
 801ae08:	68b9      	ldr	r1, [r7, #8]
 801ae0a:	4618      	mov	r0, r3
 801ae0c:	f7ff ff55 	bl	801acba <_lv_area_is_point_on>
 801ae10:	4603      	mov	r3, r0
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d017      	beq.n	801ae46 <_lv_area_is_point_on+0x18c>
        corner_area.x2 += radius;
 801ae16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ae1a:	b29a      	uxth	r2, r3
 801ae1c:	88fb      	ldrh	r3, [r7, #6]
 801ae1e:	4413      	add	r3, r2
 801ae20:	b29b      	uxth	r3, r3
 801ae22:	b21b      	sxth	r3, r3
 801ae24:	82bb      	strh	r3, [r7, #20]
        corner_area.y1 -= radius;
 801ae26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ae2a:	b29a      	uxth	r2, r3
 801ae2c:	88fb      	ldrh	r3, [r7, #6]
 801ae2e:	1ad3      	subs	r3, r2, r3
 801ae30:	b29b      	uxth	r3, r3
 801ae32:	b21b      	sxth	r3, r3
 801ae34:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 801ae36:	f107 0310 	add.w	r3, r7, #16
 801ae3a:	68b9      	ldr	r1, [r7, #8]
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	f000 fbb3 	bl	801b5a8 <lv_point_within_circle>
 801ae42:	4603      	mov	r3, r0
 801ae44:	e05e      	b.n	801af04 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom right*/
    corner_area.x1 = a_p->x2 - radius;
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ae4c:	b29a      	uxth	r2, r3
 801ae4e:	88fb      	ldrh	r3, [r7, #6]
 801ae50:	1ad3      	subs	r3, r2, r3
 801ae52:	b29b      	uxth	r3, r3
 801ae54:	b21b      	sxth	r3, r3
 801ae56:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x2;
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ae5e:	82bb      	strh	r3, [r7, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801ae60:	f107 0310 	add.w	r3, r7, #16
 801ae64:	2200      	movs	r2, #0
 801ae66:	68b9      	ldr	r1, [r7, #8]
 801ae68:	4618      	mov	r0, r3
 801ae6a:	f7ff ff26 	bl	801acba <_lv_area_is_point_on>
 801ae6e:	4603      	mov	r3, r0
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d017      	beq.n	801aea4 <_lv_area_is_point_on+0x1ea>
        corner_area.x1 -= radius;
 801ae74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801ae78:	b29a      	uxth	r2, r3
 801ae7a:	88fb      	ldrh	r3, [r7, #6]
 801ae7c:	1ad3      	subs	r3, r2, r3
 801ae7e:	b29b      	uxth	r3, r3
 801ae80:	b21b      	sxth	r3, r3
 801ae82:	823b      	strh	r3, [r7, #16]
        corner_area.y1 -= radius;
 801ae84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ae88:	b29a      	uxth	r2, r3
 801ae8a:	88fb      	ldrh	r3, [r7, #6]
 801ae8c:	1ad3      	subs	r3, r2, r3
 801ae8e:	b29b      	uxth	r3, r3
 801ae90:	b21b      	sxth	r3, r3
 801ae92:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 801ae94:	f107 0310 	add.w	r3, r7, #16
 801ae98:	68b9      	ldr	r1, [r7, #8]
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f000 fb84 	bl	801b5a8 <lv_point_within_circle>
 801aea0:	4603      	mov	r3, r0
 801aea2:	e02f      	b.n	801af04 <_lv_area_is_point_on+0x24a>
    }
    /*Top right*/
    corner_area.y1 = a_p->y1;
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aeaa:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aeb2:	b29a      	uxth	r2, r3
 801aeb4:	88fb      	ldrh	r3, [r7, #6]
 801aeb6:	4413      	add	r3, r2
 801aeb8:	b29b      	uxth	r3, r3
 801aeba:	b21b      	sxth	r3, r3
 801aebc:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801aebe:	f107 0310 	add.w	r3, r7, #16
 801aec2:	2200      	movs	r2, #0
 801aec4:	68b9      	ldr	r1, [r7, #8]
 801aec6:	4618      	mov	r0, r3
 801aec8:	f7ff fef7 	bl	801acba <_lv_area_is_point_on>
 801aecc:	4603      	mov	r3, r0
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d017      	beq.n	801af02 <_lv_area_is_point_on+0x248>
        corner_area.x1 -= radius;
 801aed2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801aed6:	b29a      	uxth	r2, r3
 801aed8:	88fb      	ldrh	r3, [r7, #6]
 801aeda:	1ad3      	subs	r3, r2, r3
 801aedc:	b29b      	uxth	r3, r3
 801aede:	b21b      	sxth	r3, r3
 801aee0:	823b      	strh	r3, [r7, #16]
        corner_area.y2 += radius;
 801aee2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801aee6:	b29a      	uxth	r2, r3
 801aee8:	88fb      	ldrh	r3, [r7, #6]
 801aeea:	4413      	add	r3, r2
 801aeec:	b29b      	uxth	r3, r3
 801aeee:	b21b      	sxth	r3, r3
 801aef0:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 801aef2:	f107 0310 	add.w	r3, r7, #16
 801aef6:	68b9      	ldr	r1, [r7, #8]
 801aef8:	4618      	mov	r0, r3
 801aefa:	f000 fb55 	bl	801b5a8 <lv_point_within_circle>
 801aefe:	4603      	mov	r3, r0
 801af00:	e000      	b.n	801af04 <_lv_area_is_point_on+0x24a>
    }
    /*Not within corners*/
    return true;
 801af02:	2301      	movs	r3, #1
}
 801af04:	4618      	mov	r0, r3
 801af06:	3720      	adds	r7, #32
 801af08:	46bd      	mov	sp, r7
 801af0a:	bd80      	pop	{r7, pc}

0801af0c <_lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801af0c:	b480      	push	{r7}
 801af0e:	b083      	sub	sp, #12
 801af10:	af00      	add	r7, sp, #0
 801af12:	6078      	str	r0, [r7, #4]
 801af14:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af1c:	683b      	ldr	r3, [r7, #0]
 801af1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801af22:	429a      	cmp	r2, r3
 801af24:	dc19      	bgt.n	801af5a <_lv_area_is_on+0x4e>
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801af2c:	683b      	ldr	r3, [r7, #0]
 801af2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af32:	429a      	cmp	r2, r3
 801af34:	db11      	blt.n	801af5a <_lv_area_is_on+0x4e>
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801af3c:	683b      	ldr	r3, [r7, #0]
 801af3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801af42:	429a      	cmp	r2, r3
 801af44:	dc09      	bgt.n	801af5a <_lv_area_is_on+0x4e>
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801af4c:	683b      	ldr	r3, [r7, #0]
 801af4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801af52:	429a      	cmp	r2, r3
 801af54:	db01      	blt.n	801af5a <_lv_area_is_on+0x4e>
        return true;
 801af56:	2301      	movs	r3, #1
 801af58:	e000      	b.n	801af5c <_lv_area_is_on+0x50>
    }
    else {
        return false;
 801af5a:	2300      	movs	r3, #0
    }
}
 801af5c:	4618      	mov	r0, r3
 801af5e:	370c      	adds	r7, #12
 801af60:	46bd      	mov	sp, r7
 801af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af66:	4770      	bx	lr

0801af68 <_lv_area_is_in>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `ain_p` is fully inside `aholder_p`
 */
bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b086      	sub	sp, #24
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	60f8      	str	r0, [r7, #12]
 801af70:	60b9      	str	r1, [r7, #8]
 801af72:	4613      	mov	r3, r2
 801af74:	80fb      	strh	r3, [r7, #6]
    bool is_in = false;
 801af76:	2300      	movs	r3, #0
 801af78:	75fb      	strb	r3, [r7, #23]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af80:	68bb      	ldr	r3, [r7, #8]
 801af82:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af86:	429a      	cmp	r2, r3
 801af88:	db19      	blt.n	801afbe <_lv_area_is_in+0x56>
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801af90:	68bb      	ldr	r3, [r7, #8]
 801af92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801af96:	429a      	cmp	r2, r3
 801af98:	db11      	blt.n	801afbe <_lv_area_is_in+0x56>
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801afa0:	68bb      	ldr	r3, [r7, #8]
 801afa2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801afa6:	429a      	cmp	r2, r3
 801afa8:	dc09      	bgt.n	801afbe <_lv_area_is_in+0x56>
       ain_p->y2 <= aholder_p->y2) {
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801afb0:	68bb      	ldr	r3, [r7, #8]
 801afb2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801afb6:	429a      	cmp	r2, r3
 801afb8:	dc01      	bgt.n	801afbe <_lv_area_is_in+0x56>
        is_in = true;
 801afba:	2301      	movs	r3, #1
 801afbc:	75fb      	strb	r3, [r7, #23]
    }

    if(!is_in) return false;
 801afbe:	7dfb      	ldrb	r3, [r7, #23]
 801afc0:	f083 0301 	eor.w	r3, r3, #1
 801afc4:	b2db      	uxtb	r3, r3
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d001      	beq.n	801afce <_lv_area_is_in+0x66>
 801afca:	2300      	movs	r3, #0
 801afcc:	e066      	b.n	801b09c <_lv_area_is_in+0x134>
    if(radius == 0) return true;
 801afce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d101      	bne.n	801afda <_lv_area_is_in+0x72>
 801afd6:	2301      	movs	r3, #1
 801afd8:	e060      	b.n	801b09c <_lv_area_is_in+0x134>

    /*Check if the corner points are inside the radius or not*/
    lv_point_t p;

    p.x = ain_p->x1;
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801afe0:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801afe8:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801afea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801afee:	f107 0310 	add.w	r3, r7, #16
 801aff2:	4619      	mov	r1, r3
 801aff4:	68b8      	ldr	r0, [r7, #8]
 801aff6:	f7ff fe60 	bl	801acba <_lv_area_is_point_on>
 801affa:	4603      	mov	r3, r0
 801affc:	f083 0301 	eor.w	r3, r3, #1
 801b000:	b2db      	uxtb	r3, r3
 801b002:	2b00      	cmp	r3, #0
 801b004:	d001      	beq.n	801b00a <_lv_area_is_in+0xa2>
 801b006:	2300      	movs	r3, #0
 801b008:	e048      	b.n	801b09c <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b010:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b018:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b01a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b01e:	f107 0310 	add.w	r3, r7, #16
 801b022:	4619      	mov	r1, r3
 801b024:	68b8      	ldr	r0, [r7, #8]
 801b026:	f7ff fe48 	bl	801acba <_lv_area_is_point_on>
 801b02a:	4603      	mov	r3, r0
 801b02c:	f083 0301 	eor.w	r3, r3, #1
 801b030:	b2db      	uxtb	r3, r3
 801b032:	2b00      	cmp	r3, #0
 801b034:	d001      	beq.n	801b03a <_lv_area_is_in+0xd2>
 801b036:	2300      	movs	r3, #0
 801b038:	e030      	b.n	801b09c <_lv_area_is_in+0x134>

    p.x = ain_p->x1;
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b040:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b048:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b04a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b04e:	f107 0310 	add.w	r3, r7, #16
 801b052:	4619      	mov	r1, r3
 801b054:	68b8      	ldr	r0, [r7, #8]
 801b056:	f7ff fe30 	bl	801acba <_lv_area_is_point_on>
 801b05a:	4603      	mov	r3, r0
 801b05c:	f083 0301 	eor.w	r3, r3, #1
 801b060:	b2db      	uxtb	r3, r3
 801b062:	2b00      	cmp	r3, #0
 801b064:	d001      	beq.n	801b06a <_lv_area_is_in+0x102>
 801b066:	2300      	movs	r3, #0
 801b068:	e018      	b.n	801b09c <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b070:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b078:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b07a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b07e:	f107 0310 	add.w	r3, r7, #16
 801b082:	4619      	mov	r1, r3
 801b084:	68b8      	ldr	r0, [r7, #8]
 801b086:	f7ff fe18 	bl	801acba <_lv_area_is_point_on>
 801b08a:	4603      	mov	r3, r0
 801b08c:	f083 0301 	eor.w	r3, r3, #1
 801b090:	b2db      	uxtb	r3, r3
 801b092:	2b00      	cmp	r3, #0
 801b094:	d001      	beq.n	801b09a <_lv_area_is_in+0x132>
 801b096:	2300      	movs	r3, #0
 801b098:	e000      	b.n	801b09c <_lv_area_is_in+0x134>

    return true;
 801b09a:	2301      	movs	r3, #1
}
 801b09c:	4618      	mov	r0, r3
 801b09e:	3718      	adds	r7, #24
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	bd80      	pop	{r7, pc}

0801b0a4 <_lv_area_align>:
 * @param to_align the area to align
 * @param align `LV_ALIGN_...`
 * @param res x/y coordinates where `to_align` align area should be placed
 */
void _lv_area_align(const lv_area_t * base, const lv_area_t * to_align, lv_align_t align, lv_point_t * res)
{
 801b0a4:	b590      	push	{r4, r7, lr}
 801b0a6:	b085      	sub	sp, #20
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	60f8      	str	r0, [r7, #12]
 801b0ac:	60b9      	str	r1, [r7, #8]
 801b0ae:	603b      	str	r3, [r7, #0]
 801b0b0:	4613      	mov	r3, r2
 801b0b2:	71fb      	strb	r3, [r7, #7]

    switch(align) {
 801b0b4:	79fb      	ldrb	r3, [r7, #7]
 801b0b6:	2b14      	cmp	r3, #20
 801b0b8:	f200 8257 	bhi.w	801b56a <_lv_area_align+0x4c6>
 801b0bc:	a201      	add	r2, pc, #4	; (adr r2, 801b0c4 <_lv_area_align+0x20>)
 801b0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b0c2:	bf00      	nop
 801b0c4:	0801b119 	.word	0x0801b119
 801b0c8:	0801b17f 	.word	0x0801b17f
 801b0cc:	0801b18d 	.word	0x0801b18d
 801b0d0:	0801b1c7 	.word	0x0801b1c7
 801b0d4:	0801b1ed 	.word	0x0801b1ed
 801b0d8:	0801b213 	.word	0x0801b213
 801b0dc:	0801b265 	.word	0x0801b265
 801b0e0:	0801b2a3 	.word	0x0801b2a3
 801b0e4:	0801b2dd 	.word	0x0801b2dd
 801b0e8:	0801b32f 	.word	0x0801b32f
 801b0ec:	0801b34b 	.word	0x0801b34b
 801b0f0:	0801b393 	.word	0x0801b393
 801b0f4:	0801b3c7 	.word	0x0801b3c7
 801b0f8:	0801b3dd 	.word	0x0801b3dd
 801b0fc:	0801b41f 	.word	0x0801b41f
 801b100:	0801b44d 	.word	0x0801b44d
 801b104:	0801b469 	.word	0x0801b469
 801b108:	0801b4b1 	.word	0x0801b4b1
 801b10c:	0801b4e5 	.word	0x0801b4e5
 801b110:	0801b4fb 	.word	0x0801b4fb
 801b114:	0801b53d 	.word	0x0801b53d
        case LV_ALIGN_CENTER:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b118:	68f8      	ldr	r0, [r7, #12]
 801b11a:	f7ff fcbb 	bl	801aa94 <lv_area_get_width>
 801b11e:	4603      	mov	r3, r0
 801b120:	2b00      	cmp	r3, #0
 801b122:	da00      	bge.n	801b126 <_lv_area_align+0x82>
 801b124:	3301      	adds	r3, #1
 801b126:	105b      	asrs	r3, r3, #1
 801b128:	b21b      	sxth	r3, r3
 801b12a:	b29c      	uxth	r4, r3
 801b12c:	68b8      	ldr	r0, [r7, #8]
 801b12e:	f7ff fcb1 	bl	801aa94 <lv_area_get_width>
 801b132:	4603      	mov	r3, r0
 801b134:	2b00      	cmp	r3, #0
 801b136:	da00      	bge.n	801b13a <_lv_area_align+0x96>
 801b138:	3301      	adds	r3, #1
 801b13a:	105b      	asrs	r3, r3, #1
 801b13c:	b21b      	sxth	r3, r3
 801b13e:	b29b      	uxth	r3, r3
 801b140:	1ae3      	subs	r3, r4, r3
 801b142:	b29b      	uxth	r3, r3
 801b144:	b21a      	sxth	r2, r3
 801b146:	683b      	ldr	r3, [r7, #0]
 801b148:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b14a:	68f8      	ldr	r0, [r7, #12]
 801b14c:	f7ff fcb9 	bl	801aac2 <lv_area_get_height>
 801b150:	4603      	mov	r3, r0
 801b152:	2b00      	cmp	r3, #0
 801b154:	da00      	bge.n	801b158 <_lv_area_align+0xb4>
 801b156:	3301      	adds	r3, #1
 801b158:	105b      	asrs	r3, r3, #1
 801b15a:	b21b      	sxth	r3, r3
 801b15c:	b29c      	uxth	r4, r3
 801b15e:	68b8      	ldr	r0, [r7, #8]
 801b160:	f7ff fcaf 	bl	801aac2 <lv_area_get_height>
 801b164:	4603      	mov	r3, r0
 801b166:	2b00      	cmp	r3, #0
 801b168:	da00      	bge.n	801b16c <_lv_area_align+0xc8>
 801b16a:	3301      	adds	r3, #1
 801b16c:	105b      	asrs	r3, r3, #1
 801b16e:	b21b      	sxth	r3, r3
 801b170:	b29b      	uxth	r3, r3
 801b172:	1ae3      	subs	r3, r4, r3
 801b174:	b29b      	uxth	r3, r3
 801b176:	b21a      	sxth	r2, r3
 801b178:	683b      	ldr	r3, [r7, #0]
 801b17a:	805a      	strh	r2, [r3, #2]
            break;
 801b17c:	e1f5      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_TOP_LEFT:
            res->x = 0;
 801b17e:	683b      	ldr	r3, [r7, #0]
 801b180:	2200      	movs	r2, #0
 801b182:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b184:	683b      	ldr	r3, [r7, #0]
 801b186:	2200      	movs	r2, #0
 801b188:	805a      	strh	r2, [r3, #2]
            break;
 801b18a:	e1ee      	b.n	801b56a <_lv_area_align+0x4c6>
        case LV_ALIGN_IN_TOP_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b18c:	68f8      	ldr	r0, [r7, #12]
 801b18e:	f7ff fc81 	bl	801aa94 <lv_area_get_width>
 801b192:	4603      	mov	r3, r0
 801b194:	2b00      	cmp	r3, #0
 801b196:	da00      	bge.n	801b19a <_lv_area_align+0xf6>
 801b198:	3301      	adds	r3, #1
 801b19a:	105b      	asrs	r3, r3, #1
 801b19c:	b21b      	sxth	r3, r3
 801b19e:	b29c      	uxth	r4, r3
 801b1a0:	68b8      	ldr	r0, [r7, #8]
 801b1a2:	f7ff fc77 	bl	801aa94 <lv_area_get_width>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	da00      	bge.n	801b1ae <_lv_area_align+0x10a>
 801b1ac:	3301      	adds	r3, #1
 801b1ae:	105b      	asrs	r3, r3, #1
 801b1b0:	b21b      	sxth	r3, r3
 801b1b2:	b29b      	uxth	r3, r3
 801b1b4:	1ae3      	subs	r3, r4, r3
 801b1b6:	b29b      	uxth	r3, r3
 801b1b8:	b21a      	sxth	r2, r3
 801b1ba:	683b      	ldr	r3, [r7, #0]
 801b1bc:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b1be:	683b      	ldr	r3, [r7, #0]
 801b1c0:	2200      	movs	r2, #0
 801b1c2:	805a      	strh	r2, [r3, #2]
            break;
 801b1c4:	e1d1      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_TOP_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b1c6:	68f8      	ldr	r0, [r7, #12]
 801b1c8:	f7ff fc64 	bl	801aa94 <lv_area_get_width>
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	b29c      	uxth	r4, r3
 801b1d0:	68b8      	ldr	r0, [r7, #8]
 801b1d2:	f7ff fc5f 	bl	801aa94 <lv_area_get_width>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	b29b      	uxth	r3, r3
 801b1da:	1ae3      	subs	r3, r4, r3
 801b1dc:	b29b      	uxth	r3, r3
 801b1de:	b21a      	sxth	r2, r3
 801b1e0:	683b      	ldr	r3, [r7, #0]
 801b1e2:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b1e4:	683b      	ldr	r3, [r7, #0]
 801b1e6:	2200      	movs	r2, #0
 801b1e8:	805a      	strh	r2, [r3, #2]
            break;
 801b1ea:	e1be      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            res->x = 0;
 801b1ec:	683b      	ldr	r3, [r7, #0]
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b1f2:	68f8      	ldr	r0, [r7, #12]
 801b1f4:	f7ff fc65 	bl	801aac2 <lv_area_get_height>
 801b1f8:	4603      	mov	r3, r0
 801b1fa:	b29c      	uxth	r4, r3
 801b1fc:	68b8      	ldr	r0, [r7, #8]
 801b1fe:	f7ff fc60 	bl	801aac2 <lv_area_get_height>
 801b202:	4603      	mov	r3, r0
 801b204:	b29b      	uxth	r3, r3
 801b206:	1ae3      	subs	r3, r4, r3
 801b208:	b29b      	uxth	r3, r3
 801b20a:	b21a      	sxth	r2, r3
 801b20c:	683b      	ldr	r3, [r7, #0]
 801b20e:	805a      	strh	r2, [r3, #2]
            break;
 801b210:	e1ab      	b.n	801b56a <_lv_area_align+0x4c6>
        case LV_ALIGN_IN_BOTTOM_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b212:	68f8      	ldr	r0, [r7, #12]
 801b214:	f7ff fc3e 	bl	801aa94 <lv_area_get_width>
 801b218:	4603      	mov	r3, r0
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	da00      	bge.n	801b220 <_lv_area_align+0x17c>
 801b21e:	3301      	adds	r3, #1
 801b220:	105b      	asrs	r3, r3, #1
 801b222:	b21b      	sxth	r3, r3
 801b224:	b29c      	uxth	r4, r3
 801b226:	68b8      	ldr	r0, [r7, #8]
 801b228:	f7ff fc34 	bl	801aa94 <lv_area_get_width>
 801b22c:	4603      	mov	r3, r0
 801b22e:	2b00      	cmp	r3, #0
 801b230:	da00      	bge.n	801b234 <_lv_area_align+0x190>
 801b232:	3301      	adds	r3, #1
 801b234:	105b      	asrs	r3, r3, #1
 801b236:	b21b      	sxth	r3, r3
 801b238:	b29b      	uxth	r3, r3
 801b23a:	1ae3      	subs	r3, r4, r3
 801b23c:	b29b      	uxth	r3, r3
 801b23e:	b21a      	sxth	r2, r3
 801b240:	683b      	ldr	r3, [r7, #0]
 801b242:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b244:	68f8      	ldr	r0, [r7, #12]
 801b246:	f7ff fc3c 	bl	801aac2 <lv_area_get_height>
 801b24a:	4603      	mov	r3, r0
 801b24c:	b29c      	uxth	r4, r3
 801b24e:	68b8      	ldr	r0, [r7, #8]
 801b250:	f7ff fc37 	bl	801aac2 <lv_area_get_height>
 801b254:	4603      	mov	r3, r0
 801b256:	b29b      	uxth	r3, r3
 801b258:	1ae3      	subs	r3, r4, r3
 801b25a:	b29b      	uxth	r3, r3
 801b25c:	b21a      	sxth	r2, r3
 801b25e:	683b      	ldr	r3, [r7, #0]
 801b260:	805a      	strh	r2, [r3, #2]
            break;
 801b262:	e182      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b264:	68f8      	ldr	r0, [r7, #12]
 801b266:	f7ff fc15 	bl	801aa94 <lv_area_get_width>
 801b26a:	4603      	mov	r3, r0
 801b26c:	b29c      	uxth	r4, r3
 801b26e:	68b8      	ldr	r0, [r7, #8]
 801b270:	f7ff fc10 	bl	801aa94 <lv_area_get_width>
 801b274:	4603      	mov	r3, r0
 801b276:	b29b      	uxth	r3, r3
 801b278:	1ae3      	subs	r3, r4, r3
 801b27a:	b29b      	uxth	r3, r3
 801b27c:	b21a      	sxth	r2, r3
 801b27e:	683b      	ldr	r3, [r7, #0]
 801b280:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b282:	68f8      	ldr	r0, [r7, #12]
 801b284:	f7ff fc1d 	bl	801aac2 <lv_area_get_height>
 801b288:	4603      	mov	r3, r0
 801b28a:	b29c      	uxth	r4, r3
 801b28c:	68b8      	ldr	r0, [r7, #8]
 801b28e:	f7ff fc18 	bl	801aac2 <lv_area_get_height>
 801b292:	4603      	mov	r3, r0
 801b294:	b29b      	uxth	r3, r3
 801b296:	1ae3      	subs	r3, r4, r3
 801b298:	b29b      	uxth	r3, r3
 801b29a:	b21a      	sxth	r2, r3
 801b29c:	683b      	ldr	r3, [r7, #0]
 801b29e:	805a      	strh	r2, [r3, #2]
            break;
 801b2a0:	e163      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_LEFT_MID:
            res->x = 0;
 801b2a2:	683b      	ldr	r3, [r7, #0]
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b2a8:	68f8      	ldr	r0, [r7, #12]
 801b2aa:	f7ff fc0a 	bl	801aac2 <lv_area_get_height>
 801b2ae:	4603      	mov	r3, r0
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	da00      	bge.n	801b2b6 <_lv_area_align+0x212>
 801b2b4:	3301      	adds	r3, #1
 801b2b6:	105b      	asrs	r3, r3, #1
 801b2b8:	b21b      	sxth	r3, r3
 801b2ba:	b29c      	uxth	r4, r3
 801b2bc:	68b8      	ldr	r0, [r7, #8]
 801b2be:	f7ff fc00 	bl	801aac2 <lv_area_get_height>
 801b2c2:	4603      	mov	r3, r0
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	da00      	bge.n	801b2ca <_lv_area_align+0x226>
 801b2c8:	3301      	adds	r3, #1
 801b2ca:	105b      	asrs	r3, r3, #1
 801b2cc:	b21b      	sxth	r3, r3
 801b2ce:	b29b      	uxth	r3, r3
 801b2d0:	1ae3      	subs	r3, r4, r3
 801b2d2:	b29b      	uxth	r3, r3
 801b2d4:	b21a      	sxth	r2, r3
 801b2d6:	683b      	ldr	r3, [r7, #0]
 801b2d8:	805a      	strh	r2, [r3, #2]
            break;
 801b2da:	e146      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_RIGHT_MID:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b2dc:	68f8      	ldr	r0, [r7, #12]
 801b2de:	f7ff fbd9 	bl	801aa94 <lv_area_get_width>
 801b2e2:	4603      	mov	r3, r0
 801b2e4:	b29c      	uxth	r4, r3
 801b2e6:	68b8      	ldr	r0, [r7, #8]
 801b2e8:	f7ff fbd4 	bl	801aa94 <lv_area_get_width>
 801b2ec:	4603      	mov	r3, r0
 801b2ee:	b29b      	uxth	r3, r3
 801b2f0:	1ae3      	subs	r3, r4, r3
 801b2f2:	b29b      	uxth	r3, r3
 801b2f4:	b21a      	sxth	r2, r3
 801b2f6:	683b      	ldr	r3, [r7, #0]
 801b2f8:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b2fa:	68f8      	ldr	r0, [r7, #12]
 801b2fc:	f7ff fbe1 	bl	801aac2 <lv_area_get_height>
 801b300:	4603      	mov	r3, r0
 801b302:	2b00      	cmp	r3, #0
 801b304:	da00      	bge.n	801b308 <_lv_area_align+0x264>
 801b306:	3301      	adds	r3, #1
 801b308:	105b      	asrs	r3, r3, #1
 801b30a:	b21b      	sxth	r3, r3
 801b30c:	b29c      	uxth	r4, r3
 801b30e:	68b8      	ldr	r0, [r7, #8]
 801b310:	f7ff fbd7 	bl	801aac2 <lv_area_get_height>
 801b314:	4603      	mov	r3, r0
 801b316:	2b00      	cmp	r3, #0
 801b318:	da00      	bge.n	801b31c <_lv_area_align+0x278>
 801b31a:	3301      	adds	r3, #1
 801b31c:	105b      	asrs	r3, r3, #1
 801b31e:	b21b      	sxth	r3, r3
 801b320:	b29b      	uxth	r3, r3
 801b322:	1ae3      	subs	r3, r4, r3
 801b324:	b29b      	uxth	r3, r3
 801b326:	b21a      	sxth	r2, r3
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	805a      	strh	r2, [r3, #2]
            break;
 801b32c:	e11d      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_TOP_LEFT:
            res->x = 0;
 801b32e:	683b      	ldr	r3, [r7, #0]
 801b330:	2200      	movs	r2, #0
 801b332:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 801b334:	68b8      	ldr	r0, [r7, #8]
 801b336:	f7ff fbc4 	bl	801aac2 <lv_area_get_height>
 801b33a:	4603      	mov	r3, r0
 801b33c:	b29b      	uxth	r3, r3
 801b33e:	425b      	negs	r3, r3
 801b340:	b29b      	uxth	r3, r3
 801b342:	b21a      	sxth	r2, r3
 801b344:	683b      	ldr	r3, [r7, #0]
 801b346:	805a      	strh	r2, [r3, #2]
            break;
 801b348:	e10f      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_TOP_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b34a:	68f8      	ldr	r0, [r7, #12]
 801b34c:	f7ff fba2 	bl	801aa94 <lv_area_get_width>
 801b350:	4603      	mov	r3, r0
 801b352:	2b00      	cmp	r3, #0
 801b354:	da00      	bge.n	801b358 <_lv_area_align+0x2b4>
 801b356:	3301      	adds	r3, #1
 801b358:	105b      	asrs	r3, r3, #1
 801b35a:	b21b      	sxth	r3, r3
 801b35c:	b29c      	uxth	r4, r3
 801b35e:	68b8      	ldr	r0, [r7, #8]
 801b360:	f7ff fb98 	bl	801aa94 <lv_area_get_width>
 801b364:	4603      	mov	r3, r0
 801b366:	2b00      	cmp	r3, #0
 801b368:	da00      	bge.n	801b36c <_lv_area_align+0x2c8>
 801b36a:	3301      	adds	r3, #1
 801b36c:	105b      	asrs	r3, r3, #1
 801b36e:	b21b      	sxth	r3, r3
 801b370:	b29b      	uxth	r3, r3
 801b372:	1ae3      	subs	r3, r4, r3
 801b374:	b29b      	uxth	r3, r3
 801b376:	b21a      	sxth	r2, r3
 801b378:	683b      	ldr	r3, [r7, #0]
 801b37a:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 801b37c:	68b8      	ldr	r0, [r7, #8]
 801b37e:	f7ff fba0 	bl	801aac2 <lv_area_get_height>
 801b382:	4603      	mov	r3, r0
 801b384:	b29b      	uxth	r3, r3
 801b386:	425b      	negs	r3, r3
 801b388:	b29b      	uxth	r3, r3
 801b38a:	b21a      	sxth	r2, r3
 801b38c:	683b      	ldr	r3, [r7, #0]
 801b38e:	805a      	strh	r2, [r3, #2]
            break;
 801b390:	e0eb      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_TOP_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b392:	68f8      	ldr	r0, [r7, #12]
 801b394:	f7ff fb7e 	bl	801aa94 <lv_area_get_width>
 801b398:	4603      	mov	r3, r0
 801b39a:	b29c      	uxth	r4, r3
 801b39c:	68b8      	ldr	r0, [r7, #8]
 801b39e:	f7ff fb79 	bl	801aa94 <lv_area_get_width>
 801b3a2:	4603      	mov	r3, r0
 801b3a4:	b29b      	uxth	r3, r3
 801b3a6:	1ae3      	subs	r3, r4, r3
 801b3a8:	b29b      	uxth	r3, r3
 801b3aa:	b21a      	sxth	r2, r3
 801b3ac:	683b      	ldr	r3, [r7, #0]
 801b3ae:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 801b3b0:	68b8      	ldr	r0, [r7, #8]
 801b3b2:	f7ff fb86 	bl	801aac2 <lv_area_get_height>
 801b3b6:	4603      	mov	r3, r0
 801b3b8:	b29b      	uxth	r3, r3
 801b3ba:	425b      	negs	r3, r3
 801b3bc:	b29b      	uxth	r3, r3
 801b3be:	b21a      	sxth	r2, r3
 801b3c0:	683b      	ldr	r3, [r7, #0]
 801b3c2:	805a      	strh	r2, [r3, #2]
            break;
 801b3c4:	e0d1      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            res->x = 0;
 801b3c6:	683b      	ldr	r3, [r7, #0]
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base);
 801b3cc:	68f8      	ldr	r0, [r7, #12]
 801b3ce:	f7ff fb78 	bl	801aac2 <lv_area_get_height>
 801b3d2:	4603      	mov	r3, r0
 801b3d4:	461a      	mov	r2, r3
 801b3d6:	683b      	ldr	r3, [r7, #0]
 801b3d8:	805a      	strh	r2, [r3, #2]
            break;
 801b3da:	e0c6      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_BOTTOM_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b3dc:	68f8      	ldr	r0, [r7, #12]
 801b3de:	f7ff fb59 	bl	801aa94 <lv_area_get_width>
 801b3e2:	4603      	mov	r3, r0
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	da00      	bge.n	801b3ea <_lv_area_align+0x346>
 801b3e8:	3301      	adds	r3, #1
 801b3ea:	105b      	asrs	r3, r3, #1
 801b3ec:	b21b      	sxth	r3, r3
 801b3ee:	b29c      	uxth	r4, r3
 801b3f0:	68b8      	ldr	r0, [r7, #8]
 801b3f2:	f7ff fb4f 	bl	801aa94 <lv_area_get_width>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	da00      	bge.n	801b3fe <_lv_area_align+0x35a>
 801b3fc:	3301      	adds	r3, #1
 801b3fe:	105b      	asrs	r3, r3, #1
 801b400:	b21b      	sxth	r3, r3
 801b402:	b29b      	uxth	r3, r3
 801b404:	1ae3      	subs	r3, r4, r3
 801b406:	b29b      	uxth	r3, r3
 801b408:	b21a      	sxth	r2, r3
 801b40a:	683b      	ldr	r3, [r7, #0]
 801b40c:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base);
 801b40e:	68f8      	ldr	r0, [r7, #12]
 801b410:	f7ff fb57 	bl	801aac2 <lv_area_get_height>
 801b414:	4603      	mov	r3, r0
 801b416:	461a      	mov	r2, r3
 801b418:	683b      	ldr	r3, [r7, #0]
 801b41a:	805a      	strh	r2, [r3, #2]
            break;
 801b41c:	e0a5      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b41e:	68f8      	ldr	r0, [r7, #12]
 801b420:	f7ff fb38 	bl	801aa94 <lv_area_get_width>
 801b424:	4603      	mov	r3, r0
 801b426:	b29c      	uxth	r4, r3
 801b428:	68b8      	ldr	r0, [r7, #8]
 801b42a:	f7ff fb33 	bl	801aa94 <lv_area_get_width>
 801b42e:	4603      	mov	r3, r0
 801b430:	b29b      	uxth	r3, r3
 801b432:	1ae3      	subs	r3, r4, r3
 801b434:	b29b      	uxth	r3, r3
 801b436:	b21a      	sxth	r2, r3
 801b438:	683b      	ldr	r3, [r7, #0]
 801b43a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base);
 801b43c:	68f8      	ldr	r0, [r7, #12]
 801b43e:	f7ff fb40 	bl	801aac2 <lv_area_get_height>
 801b442:	4603      	mov	r3, r0
 801b444:	461a      	mov	r2, r3
 801b446:	683b      	ldr	r3, [r7, #0]
 801b448:	805a      	strh	r2, [r3, #2]
            break;
 801b44a:	e08e      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_LEFT_TOP:
            res->x = -lv_area_get_width(to_align);
 801b44c:	68b8      	ldr	r0, [r7, #8]
 801b44e:	f7ff fb21 	bl	801aa94 <lv_area_get_width>
 801b452:	4603      	mov	r3, r0
 801b454:	b29b      	uxth	r3, r3
 801b456:	425b      	negs	r3, r3
 801b458:	b29b      	uxth	r3, r3
 801b45a:	b21a      	sxth	r2, r3
 801b45c:	683b      	ldr	r3, [r7, #0]
 801b45e:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b460:	683b      	ldr	r3, [r7, #0]
 801b462:	2200      	movs	r2, #0
 801b464:	805a      	strh	r2, [r3, #2]
            break;
 801b466:	e080      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_LEFT_MID:
            res->x = -lv_area_get_width(to_align);
 801b468:	68b8      	ldr	r0, [r7, #8]
 801b46a:	f7ff fb13 	bl	801aa94 <lv_area_get_width>
 801b46e:	4603      	mov	r3, r0
 801b470:	b29b      	uxth	r3, r3
 801b472:	425b      	negs	r3, r3
 801b474:	b29b      	uxth	r3, r3
 801b476:	b21a      	sxth	r2, r3
 801b478:	683b      	ldr	r3, [r7, #0]
 801b47a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b47c:	68f8      	ldr	r0, [r7, #12]
 801b47e:	f7ff fb20 	bl	801aac2 <lv_area_get_height>
 801b482:	4603      	mov	r3, r0
 801b484:	2b00      	cmp	r3, #0
 801b486:	da00      	bge.n	801b48a <_lv_area_align+0x3e6>
 801b488:	3301      	adds	r3, #1
 801b48a:	105b      	asrs	r3, r3, #1
 801b48c:	b21b      	sxth	r3, r3
 801b48e:	b29c      	uxth	r4, r3
 801b490:	68b8      	ldr	r0, [r7, #8]
 801b492:	f7ff fb16 	bl	801aac2 <lv_area_get_height>
 801b496:	4603      	mov	r3, r0
 801b498:	2b00      	cmp	r3, #0
 801b49a:	da00      	bge.n	801b49e <_lv_area_align+0x3fa>
 801b49c:	3301      	adds	r3, #1
 801b49e:	105b      	asrs	r3, r3, #1
 801b4a0:	b21b      	sxth	r3, r3
 801b4a2:	b29b      	uxth	r3, r3
 801b4a4:	1ae3      	subs	r3, r4, r3
 801b4a6:	b29b      	uxth	r3, r3
 801b4a8:	b21a      	sxth	r2, r3
 801b4aa:	683b      	ldr	r3, [r7, #0]
 801b4ac:	805a      	strh	r2, [r3, #2]
            break;
 801b4ae:	e05c      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            res->x = -lv_area_get_width(to_align);
 801b4b0:	68b8      	ldr	r0, [r7, #8]
 801b4b2:	f7ff faef 	bl	801aa94 <lv_area_get_width>
 801b4b6:	4603      	mov	r3, r0
 801b4b8:	b29b      	uxth	r3, r3
 801b4ba:	425b      	negs	r3, r3
 801b4bc:	b29b      	uxth	r3, r3
 801b4be:	b21a      	sxth	r2, r3
 801b4c0:	683b      	ldr	r3, [r7, #0]
 801b4c2:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b4c4:	68f8      	ldr	r0, [r7, #12]
 801b4c6:	f7ff fafc 	bl	801aac2 <lv_area_get_height>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	b29c      	uxth	r4, r3
 801b4ce:	68b8      	ldr	r0, [r7, #8]
 801b4d0:	f7ff faf7 	bl	801aac2 <lv_area_get_height>
 801b4d4:	4603      	mov	r3, r0
 801b4d6:	b29b      	uxth	r3, r3
 801b4d8:	1ae3      	subs	r3, r4, r3
 801b4da:	b29b      	uxth	r3, r3
 801b4dc:	b21a      	sxth	r2, r3
 801b4de:	683b      	ldr	r3, [r7, #0]
 801b4e0:	805a      	strh	r2, [r3, #2]
            break;
 801b4e2:	e042      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_RIGHT_TOP:
            res->x = lv_area_get_width(base);
 801b4e4:	68f8      	ldr	r0, [r7, #12]
 801b4e6:	f7ff fad5 	bl	801aa94 <lv_area_get_width>
 801b4ea:	4603      	mov	r3, r0
 801b4ec:	461a      	mov	r2, r3
 801b4ee:	683b      	ldr	r3, [r7, #0]
 801b4f0:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b4f2:	683b      	ldr	r3, [r7, #0]
 801b4f4:	2200      	movs	r2, #0
 801b4f6:	805a      	strh	r2, [r3, #2]
            break;
 801b4f8:	e037      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_RIGHT_MID:
            res->x = lv_area_get_width(base);
 801b4fa:	68f8      	ldr	r0, [r7, #12]
 801b4fc:	f7ff faca 	bl	801aa94 <lv_area_get_width>
 801b500:	4603      	mov	r3, r0
 801b502:	461a      	mov	r2, r3
 801b504:	683b      	ldr	r3, [r7, #0]
 801b506:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b508:	68f8      	ldr	r0, [r7, #12]
 801b50a:	f7ff fada 	bl	801aac2 <lv_area_get_height>
 801b50e:	4603      	mov	r3, r0
 801b510:	2b00      	cmp	r3, #0
 801b512:	da00      	bge.n	801b516 <_lv_area_align+0x472>
 801b514:	3301      	adds	r3, #1
 801b516:	105b      	asrs	r3, r3, #1
 801b518:	b21b      	sxth	r3, r3
 801b51a:	b29c      	uxth	r4, r3
 801b51c:	68b8      	ldr	r0, [r7, #8]
 801b51e:	f7ff fad0 	bl	801aac2 <lv_area_get_height>
 801b522:	4603      	mov	r3, r0
 801b524:	2b00      	cmp	r3, #0
 801b526:	da00      	bge.n	801b52a <_lv_area_align+0x486>
 801b528:	3301      	adds	r3, #1
 801b52a:	105b      	asrs	r3, r3, #1
 801b52c:	b21b      	sxth	r3, r3
 801b52e:	b29b      	uxth	r3, r3
 801b530:	1ae3      	subs	r3, r4, r3
 801b532:	b29b      	uxth	r3, r3
 801b534:	b21a      	sxth	r2, r3
 801b536:	683b      	ldr	r3, [r7, #0]
 801b538:	805a      	strh	r2, [r3, #2]
            break;
 801b53a:	e016      	b.n	801b56a <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            res->x = lv_area_get_width(base);
 801b53c:	68f8      	ldr	r0, [r7, #12]
 801b53e:	f7ff faa9 	bl	801aa94 <lv_area_get_width>
 801b542:	4603      	mov	r3, r0
 801b544:	461a      	mov	r2, r3
 801b546:	683b      	ldr	r3, [r7, #0]
 801b548:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b54a:	68f8      	ldr	r0, [r7, #12]
 801b54c:	f7ff fab9 	bl	801aac2 <lv_area_get_height>
 801b550:	4603      	mov	r3, r0
 801b552:	b29c      	uxth	r4, r3
 801b554:	68b8      	ldr	r0, [r7, #8]
 801b556:	f7ff fab4 	bl	801aac2 <lv_area_get_height>
 801b55a:	4603      	mov	r3, r0
 801b55c:	b29b      	uxth	r3, r3
 801b55e:	1ae3      	subs	r3, r4, r3
 801b560:	b29b      	uxth	r3, r3
 801b562:	b21a      	sxth	r2, r3
 801b564:	683b      	ldr	r3, [r7, #0]
 801b566:	805a      	strh	r2, [r3, #2]
            break;
 801b568:	bf00      	nop
    }

    res->x += base->x1;
 801b56a:	683b      	ldr	r3, [r7, #0]
 801b56c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b570:	b29a      	uxth	r2, r3
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b578:	b29b      	uxth	r3, r3
 801b57a:	4413      	add	r3, r2
 801b57c:	b29b      	uxth	r3, r3
 801b57e:	b21a      	sxth	r2, r3
 801b580:	683b      	ldr	r3, [r7, #0]
 801b582:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
 801b584:	683b      	ldr	r3, [r7, #0]
 801b586:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b58a:	b29a      	uxth	r2, r3
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b592:	b29b      	uxth	r3, r3
 801b594:	4413      	add	r3, r2
 801b596:	b29b      	uxth	r3, r3
 801b598:	b21a      	sxth	r2, r3
 801b59a:	683b      	ldr	r3, [r7, #0]
 801b59c:	805a      	strh	r2, [r3, #2]
}
 801b59e:	bf00      	nop
 801b5a0:	3714      	adds	r7, #20
 801b5a2:	46bd      	mov	sp, r7
 801b5a4:	bd90      	pop	{r4, r7, pc}
 801b5a6:	bf00      	nop

0801b5a8 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 801b5a8:	b480      	push	{r7}
 801b5aa:	b089      	sub	sp, #36	; 0x24
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]
 801b5b0:	6039      	str	r1, [r7, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b5b8:	461a      	mov	r2, r3
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b5c0:	1ad3      	subs	r3, r2, r3
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	da00      	bge.n	801b5c8 <lv_point_within_circle+0x20>
 801b5c6:	3301      	adds	r3, #1
 801b5c8:	105b      	asrs	r3, r3, #1
 801b5ca:	83fb      	strh	r3, [r7, #30]

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b5d2:	b29a      	uxth	r2, r3
 801b5d4:	8bfb      	ldrh	r3, [r7, #30]
 801b5d6:	4413      	add	r3, r2
 801b5d8:	b29b      	uxth	r3, r3
 801b5da:	83bb      	strh	r3, [r7, #28]
    lv_coord_t cy = area->y1 + r;
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b5e2:	b29a      	uxth	r2, r3
 801b5e4:	8bfb      	ldrh	r3, [r7, #30]
 801b5e6:	4413      	add	r3, r2
 801b5e8:	b29b      	uxth	r3, r3
 801b5ea:	837b      	strh	r3, [r7, #26]

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
 801b5ec:	683b      	ldr	r3, [r7, #0]
 801b5ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b5f2:	b29a      	uxth	r2, r3
 801b5f4:	8bbb      	ldrh	r3, [r7, #28]
 801b5f6:	1ad3      	subs	r3, r2, r3
 801b5f8:	b29b      	uxth	r3, r3
 801b5fa:	833b      	strh	r3, [r7, #24]
    lv_coord_t py = p->y - cy;
 801b5fc:	683b      	ldr	r3, [r7, #0]
 801b5fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b602:	b29a      	uxth	r2, r3
 801b604:	8b7b      	ldrh	r3, [r7, #26]
 801b606:	1ad3      	subs	r3, r2, r3
 801b608:	b29b      	uxth	r3, r3
 801b60a:	82fb      	strh	r3, [r7, #22]

    uint32_t r_sqrd = r * r;
 801b60c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b610:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801b614:	fb02 f303 	mul.w	r3, r2, r3
 801b618:	613b      	str	r3, [r7, #16]
    uint32_t dist = (px * px) + (py * py);
 801b61a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801b61e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801b622:	fb02 f203 	mul.w	r2, r2, r3
 801b626:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b62a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801b62e:	fb01 f303 	mul.w	r3, r1, r3
 801b632:	4413      	add	r3, r2
 801b634:	60fb      	str	r3, [r7, #12]

    if(dist <= r_sqrd)
 801b636:	68fa      	ldr	r2, [r7, #12]
 801b638:	693b      	ldr	r3, [r7, #16]
 801b63a:	429a      	cmp	r2, r3
 801b63c:	d801      	bhi.n	801b642 <lv_point_within_circle+0x9a>
        return true;
 801b63e:	2301      	movs	r3, #1
 801b640:	e000      	b.n	801b644 <lv_point_within_circle+0x9c>
    else
        return false;
 801b642:	2300      	movs	r3, #0
}
 801b644:	4618      	mov	r0, r3
 801b646:	3724      	adds	r7, #36	; 0x24
 801b648:	46bd      	mov	sp, r7
 801b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b64e:	4770      	bx	lr

0801b650 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801b650:	b480      	push	{r7}
 801b652:	b087      	sub	sp, #28
 801b654:	af00      	add	r7, sp, #0
 801b656:	60f8      	str	r0, [r7, #12]
 801b658:	60b9      	str	r1, [r7, #8]
 801b65a:	4613      	mov	r3, r2
 801b65c:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801b65e:	7bbb      	ldrb	r3, [r7, #14]
 801b660:	461a      	mov	r2, r3
 801b662:	79fb      	ldrb	r3, [r7, #7]
 801b664:	fb03 f202 	mul.w	r2, r3, r2
 801b668:	7abb      	ldrb	r3, [r7, #10]
 801b66a:	4619      	mov	r1, r3
 801b66c:	79fb      	ldrb	r3, [r7, #7]
 801b66e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801b672:	fb03 f301 	mul.w	r3, r3, r1
 801b676:	4413      	add	r3, r2
 801b678:	461a      	mov	r2, r3
 801b67a:	4613      	mov	r3, r2
 801b67c:	021b      	lsls	r3, r3, #8
 801b67e:	4413      	add	r3, r2
 801b680:	01db      	lsls	r3, r3, #7
 801b682:	4413      	add	r3, r2
 801b684:	0ddb      	lsrs	r3, r3, #23
 801b686:	b2db      	uxtb	r3, r3
 801b688:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801b68a:	7b7b      	ldrb	r3, [r7, #13]
 801b68c:	461a      	mov	r2, r3
 801b68e:	79fb      	ldrb	r3, [r7, #7]
 801b690:	fb03 f202 	mul.w	r2, r3, r2
 801b694:	7a7b      	ldrb	r3, [r7, #9]
 801b696:	4619      	mov	r1, r3
 801b698:	79fb      	ldrb	r3, [r7, #7]
 801b69a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801b69e:	fb03 f301 	mul.w	r3, r3, r1
 801b6a2:	4413      	add	r3, r2
 801b6a4:	461a      	mov	r2, r3
 801b6a6:	4613      	mov	r3, r2
 801b6a8:	021b      	lsls	r3, r3, #8
 801b6aa:	4413      	add	r3, r2
 801b6ac:	01db      	lsls	r3, r3, #7
 801b6ae:	4413      	add	r3, r2
 801b6b0:	0ddb      	lsrs	r3, r3, #23
 801b6b2:	b2db      	uxtb	r3, r3
 801b6b4:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801b6b6:	7b3b      	ldrb	r3, [r7, #12]
 801b6b8:	461a      	mov	r2, r3
 801b6ba:	79fb      	ldrb	r3, [r7, #7]
 801b6bc:	fb03 f202 	mul.w	r2, r3, r2
 801b6c0:	7a3b      	ldrb	r3, [r7, #8]
 801b6c2:	4619      	mov	r1, r3
 801b6c4:	79fb      	ldrb	r3, [r7, #7]
 801b6c6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801b6ca:	fb03 f301 	mul.w	r3, r3, r1
 801b6ce:	4413      	add	r3, r2
 801b6d0:	461a      	mov	r2, r3
 801b6d2:	4613      	mov	r3, r2
 801b6d4:	021b      	lsls	r3, r3, #8
 801b6d6:	4413      	add	r3, r2
 801b6d8:	01db      	lsls	r3, r3, #7
 801b6da:	4413      	add	r3, r2
 801b6dc:	0ddb      	lsrs	r3, r3, #23
 801b6de:	b2db      	uxtb	r3, r3
 801b6e0:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 801b6e2:	23ff      	movs	r3, #255	; 0xff
 801b6e4:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801b6e6:	697b      	ldr	r3, [r7, #20]
}
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	371c      	adds	r7, #28
 801b6ec:	46bd      	mov	sp, r7
 801b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6f2:	4770      	bx	lr

0801b6f4 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 801b6f4:	b480      	push	{r7}
 801b6f6:	b085      	sub	sp, #20
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	60f8      	str	r0, [r7, #12]
 801b6fc:	60b9      	str	r1, [r7, #8]
 801b6fe:	607a      	str	r2, [r7, #4]
        *buf = color;
        buf++;
        px_num --;
    }
#else
    while(px_num > 16) {
 801b700:	e062      	b.n	801b7c8 <lv_color_fill+0xd4>
        *buf = color;
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	68ba      	ldr	r2, [r7, #8]
 801b706:	601a      	str	r2, [r3, #0]
        buf++;
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	3304      	adds	r3, #4
 801b70c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	68ba      	ldr	r2, [r7, #8]
 801b712:	601a      	str	r2, [r3, #0]
        buf++;
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	3304      	adds	r3, #4
 801b718:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b71a:	68fb      	ldr	r3, [r7, #12]
 801b71c:	68ba      	ldr	r2, [r7, #8]
 801b71e:	601a      	str	r2, [r3, #0]
        buf++;
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	3304      	adds	r3, #4
 801b724:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	68ba      	ldr	r2, [r7, #8]
 801b72a:	601a      	str	r2, [r3, #0]
        buf++;
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	3304      	adds	r3, #4
 801b730:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	68ba      	ldr	r2, [r7, #8]
 801b736:	601a      	str	r2, [r3, #0]
        buf++;
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	3304      	adds	r3, #4
 801b73c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	68ba      	ldr	r2, [r7, #8]
 801b742:	601a      	str	r2, [r3, #0]
        buf++;
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	3304      	adds	r3, #4
 801b748:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	68ba      	ldr	r2, [r7, #8]
 801b74e:	601a      	str	r2, [r3, #0]
        buf++;
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	3304      	adds	r3, #4
 801b754:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b756:	68fb      	ldr	r3, [r7, #12]
 801b758:	68ba      	ldr	r2, [r7, #8]
 801b75a:	601a      	str	r2, [r3, #0]
        buf++;
 801b75c:	68fb      	ldr	r3, [r7, #12]
 801b75e:	3304      	adds	r3, #4
 801b760:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	68ba      	ldr	r2, [r7, #8]
 801b766:	601a      	str	r2, [r3, #0]
        buf++;
 801b768:	68fb      	ldr	r3, [r7, #12]
 801b76a:	3304      	adds	r3, #4
 801b76c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	68ba      	ldr	r2, [r7, #8]
 801b772:	601a      	str	r2, [r3, #0]
        buf++;
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	3304      	adds	r3, #4
 801b778:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	68ba      	ldr	r2, [r7, #8]
 801b77e:	601a      	str	r2, [r3, #0]
        buf++;
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	3304      	adds	r3, #4
 801b784:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	68ba      	ldr	r2, [r7, #8]
 801b78a:	601a      	str	r2, [r3, #0]
        buf++;
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	3304      	adds	r3, #4
 801b790:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	68ba      	ldr	r2, [r7, #8]
 801b796:	601a      	str	r2, [r3, #0]
        buf++;
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	3304      	adds	r3, #4
 801b79c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	68ba      	ldr	r2, [r7, #8]
 801b7a2:	601a      	str	r2, [r3, #0]
        buf++;
 801b7a4:	68fb      	ldr	r3, [r7, #12]
 801b7a6:	3304      	adds	r3, #4
 801b7a8:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b7aa:	68fb      	ldr	r3, [r7, #12]
 801b7ac:	68ba      	ldr	r2, [r7, #8]
 801b7ae:	601a      	str	r2, [r3, #0]
        buf++;
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	3304      	adds	r3, #4
 801b7b4:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	68ba      	ldr	r2, [r7, #8]
 801b7ba:	601a      	str	r2, [r3, #0]
        buf++;
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	3304      	adds	r3, #4
 801b7c0:	60fb      	str	r3, [r7, #12]

        px_num -= 16;
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	3b10      	subs	r3, #16
 801b7c6:	607b      	str	r3, [r7, #4]
    while(px_num > 16) {
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	2b10      	cmp	r3, #16
 801b7cc:	d899      	bhi.n	801b702 <lv_color_fill+0xe>
    }
    while(px_num) {
 801b7ce:	e008      	b.n	801b7e2 <lv_color_fill+0xee>
        *buf = color;
 801b7d0:	68fb      	ldr	r3, [r7, #12]
 801b7d2:	68ba      	ldr	r2, [r7, #8]
 801b7d4:	601a      	str	r2, [r3, #0]
        buf++;
 801b7d6:	68fb      	ldr	r3, [r7, #12]
 801b7d8:	3304      	adds	r3, #4
 801b7da:	60fb      	str	r3, [r7, #12]
        px_num --;
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	3b01      	subs	r3, #1
 801b7e0:	607b      	str	r3, [r7, #4]
    while(px_num) {
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d1f3      	bne.n	801b7d0 <lv_color_fill+0xdc>
    }
#endif
}
 801b7e8:	bf00      	nop
 801b7ea:	3714      	adds	r7, #20
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f2:	4770      	bx	lr

0801b7f4 <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b082      	sub	sp, #8
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	6078      	str	r0, [r7, #4]
 801b7fc:	460a      	mov	r2, r1
 801b7fe:	70fa      	strb	r2, [r7, #3]
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
 801b800:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 801b804:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 801b808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801b80c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801b810:	78fa      	ldrb	r2, [r7, #3]
 801b812:	6879      	ldr	r1, [r7, #4]
 801b814:	4618      	mov	r0, r3
 801b816:	f7ff ff1b 	bl	801b650 <lv_color_mix>
 801b81a:	4603      	mov	r3, r0
}
 801b81c:	4618      	mov	r0, r3
 801b81e:	3708      	adds	r7, #8
 801b820:	46bd      	mov	sp, r7
 801b822:	bd80      	pop	{r7, pc}

0801b824 <lv_color_darken>:

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
 801b824:	b580      	push	{r7, lr}
 801b826:	b082      	sub	sp, #8
 801b828:	af00      	add	r7, sp, #0
 801b82a:	6078      	str	r0, [r7, #4]
 801b82c:	460a      	mov	r2, r1
 801b82e:	70fa      	strb	r2, [r7, #3]
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
 801b830:	f36f 0307 	bfc	r3, #0, #8
 801b834:	f36f 230f 	bfc	r3, #8, #8
 801b838:	f36f 4317 	bfc	r3, #16, #8
 801b83c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801b840:	78fa      	ldrb	r2, [r7, #3]
 801b842:	6879      	ldr	r1, [r7, #4]
 801b844:	4618      	mov	r0, r3
 801b846:	f7ff ff03 	bl	801b650 <lv_color_mix>
 801b84a:	4603      	mov	r3, r0
}
 801b84c:	4618      	mov	r0, r3
 801b84e:	3708      	adds	r7, #8
 801b850:	46bd      	mov	sp, r7
 801b852:	bd80      	pop	{r7, pc}

0801b854 <lv_debug_check_null>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

bool lv_debug_check_null(const void * p)
{
 801b854:	b480      	push	{r7}
 801b856:	b083      	sub	sp, #12
 801b858:	af00      	add	r7, sp, #0
 801b85a:	6078      	str	r0, [r7, #4]
    if(p) return true;
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d001      	beq.n	801b866 <lv_debug_check_null+0x12>
 801b862:	2301      	movs	r3, #1
 801b864:	e000      	b.n	801b868 <lv_debug_check_null+0x14>

    return false;
 801b866:	2300      	movs	r3, #0
}
 801b868:	4618      	mov	r0, r3
 801b86a:	370c      	adds	r7, #12
 801b86c:	46bd      	mov	sp, r7
 801b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b872:	4770      	bx	lr

0801b874 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
 801b874:	b580      	push	{r7, lr}
 801b876:	b0c8      	sub	sp, #288	; 0x120
 801b878:	af00      	add	r7, sp, #0
 801b87a:	f107 010c 	add.w	r1, r7, #12
 801b87e:	6008      	str	r0, [r1, #0]
 801b880:	4639      	mov	r1, r7
 801b882:	e9c1 2300 	strd	r2, r3, [r1]
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
 801b886:	f107 030c 	add.w	r3, r7, #12
 801b88a:	6818      	ldr	r0, [r3, #0]
 801b88c:	f7e4 fcc6 	bl	800021c <strlen>
 801b890:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    uint32_t value_len = sizeof(unsigned long int);
 801b894:	2304      	movs	r3, #4
 801b896:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    if(msg_len < 230) {
 801b89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b89e:	2be5      	cmp	r3, #229	; 0xe5
 801b8a0:	d871      	bhi.n	801b986 <lv_debug_log_error+0x112>
        char buf[255];
        char * bufp = buf;
 801b8a2:	f107 0310 	add.w	r3, r7, #16
 801b8a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        /*Add the function name*/
        _lv_memcpy(bufp, msg, msg_len);
 801b8aa:	f107 030c 	add.w	r3, r7, #12
 801b8ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b8b2:	6819      	ldr	r1, [r3, #0]
 801b8b4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801b8b8:	f001 f81e 	bl	801c8f8 <_lv_memcpy>
        bufp += msg_len;
 801b8bc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801b8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b8c4:	4413      	add	r3, r2
 801b8c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        /*Add value in hey*/
        *bufp = ' ';
 801b8ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b8ce:	2220      	movs	r2, #32
 801b8d0:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801b8d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b8d6:	3301      	adds	r3, #1
 801b8d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = '(';
 801b8dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b8e0:	2228      	movs	r2, #40	; 0x28
 801b8e2:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801b8e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b8e8:	3301      	adds	r3, #1
 801b8ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = '0';
 801b8ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b8f2:	2230      	movs	r2, #48	; 0x30
 801b8f4:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801b8f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b8fa:	3301      	adds	r3, #1
 801b8fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = 'x';
 801b900:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b904:	2278      	movs	r2, #120	; 0x78
 801b906:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801b908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b90c:	3301      	adds	r3, #1
 801b90e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        int8_t i;
        for(i = value_len * 2 - 1; i >= 0; i--) {
 801b912:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b916:	b2db      	uxtb	r3, r3
 801b918:	005b      	lsls	r3, r3, #1
 801b91a:	b2db      	uxtb	r3, r3
 801b91c:	3b01      	subs	r3, #1
 801b91e:	b2db      	uxtb	r3, r3
 801b920:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 801b924:	e01e      	b.n	801b964 <lv_debug_log_error+0xf0>
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
 801b926:	463b      	mov	r3, r7
 801b928:	681a      	ldr	r2, [r3, #0]
 801b92a:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 801b92e:	009b      	lsls	r3, r3, #2
 801b930:	fa22 f303 	lsr.w	r3, r2, r3
 801b934:	b2db      	uxtb	r3, r3
 801b936:	f003 030f 	and.w	r3, r3, #15
 801b93a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

            *bufp = hex[x];
 801b93e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 801b942:	4a13      	ldr	r2, [pc, #76]	; (801b990 <lv_debug_log_error+0x11c>)
 801b944:	5cd2      	ldrb	r2, [r2, r3]
 801b946:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b94a:	701a      	strb	r2, [r3, #0]
            bufp++;
 801b94c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b950:	3301      	adds	r3, #1
 801b952:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for(i = value_len * 2 - 1; i >= 0; i--) {
 801b956:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 801b95a:	b2db      	uxtb	r3, r3
 801b95c:	3b01      	subs	r3, #1
 801b95e:	b2db      	uxtb	r3, r3
 801b960:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 801b964:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 801b968:	2b00      	cmp	r3, #0
 801b96a:	dadc      	bge.n	801b926 <lv_debug_log_error+0xb2>
        }

        *bufp = ')';
 801b96c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b970:	2229      	movs	r2, #41	; 0x29
 801b972:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801b974:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b978:	3301      	adds	r3, #1
 801b97a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        *bufp = '\0';
 801b97e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b982:	2200      	movs	r2, #0
 801b984:	701a      	strb	r2, [r3, #0]
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
 801b986:	bf00      	nop
 801b988:	f507 7790 	add.w	r7, r7, #288	; 0x120
 801b98c:	46bd      	mov	sp, r7
 801b98e:	bd80      	pop	{r7, pc}
 801b990:	0802ba1c 	.word	0x0802ba1c

0801b994 <_lv_fs_init>:

/**
 * Initialize the File system interface
 */
void _lv_fs_init(void)
{
 801b994:	b580      	push	{r7, lr}
 801b996:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 801b998:	2144      	movs	r1, #68	; 0x44
 801b99a:	4802      	ldr	r0, [pc, #8]	; (801b9a4 <_lv_fs_init+0x10>)
 801b99c:	f000 f99a 	bl	801bcd4 <_lv_ll_init>
}
 801b9a0:	bf00      	nop
 801b9a2:	bd80      	pop	{r7, pc}
 801b9a4:	20020438 	.word	0x20020438

0801b9a8 <lv_fs_open>:
 * @param path path to the file beginning with the driver letter (e.g. S:/folder/file.txt)
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 801b9a8:	b590      	push	{r4, r7, lr}
 801b9aa:	b089      	sub	sp, #36	; 0x24
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	60f8      	str	r0, [r7, #12]
 801b9b0:	60b9      	str	r1, [r7, #8]
 801b9b2:	4613      	mov	r3, r2
 801b9b4:	71fb      	strb	r3, [r7, #7]
    file_p->drv    = NULL;
 801b9b6:	68fb      	ldr	r3, [r7, #12]
 801b9b8:	2200      	movs	r2, #0
 801b9ba:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	2200      	movs	r2, #0
 801b9c0:	601a      	str	r2, [r3, #0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 801b9c2:	68bb      	ldr	r3, [r7, #8]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d101      	bne.n	801b9cc <lv_fs_open+0x24>
 801b9c8:	230b      	movs	r3, #11
 801b9ca:	e086      	b.n	801bada <lv_fs_open+0x132>

    char letter = path[0];
 801b9cc:	68bb      	ldr	r3, [r7, #8]
 801b9ce:	781b      	ldrb	r3, [r3, #0]
 801b9d0:	77fb      	strb	r3, [r7, #31]

    file_p->drv = lv_fs_get_drv(letter);
 801b9d2:	7ffb      	ldrb	r3, [r7, #31]
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	f000 f90b 	bl	801bbf0 <lv_fs_get_drv>
 801b9da:	4602      	mov	r2, r0
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	605a      	str	r2, [r3, #4]

    if(file_p->drv == NULL) {
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	685b      	ldr	r3, [r3, #4]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d101      	bne.n	801b9ec <lv_fs_open+0x44>
        return LV_FS_RES_NOT_EX;
 801b9e8:	2303      	movs	r3, #3
 801b9ea:	e076      	b.n	801bada <lv_fs_open+0x132>
    }

    if(file_p->drv->ready_cb != NULL) {
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	685b      	ldr	r3, [r3, #4]
 801b9f0:	689b      	ldr	r3, [r3, #8]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d011      	beq.n	801ba1a <lv_fs_open+0x72>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	685b      	ldr	r3, [r3, #4]
 801b9fa:	689b      	ldr	r3, [r3, #8]
 801b9fc:	68fa      	ldr	r2, [r7, #12]
 801b9fe:	6852      	ldr	r2, [r2, #4]
 801ba00:	4610      	mov	r0, r2
 801ba02:	4798      	blx	r3
 801ba04:	4603      	mov	r3, r0
 801ba06:	f083 0301 	eor.w	r3, r3, #1
 801ba0a:	b2db      	uxtb	r3, r3
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d004      	beq.n	801ba1a <lv_fs_open+0x72>
            file_p->drv = NULL;
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	2200      	movs	r2, #0
 801ba14:	605a      	str	r2, [r3, #4]
            return LV_FS_RES_HW_ERR;
 801ba16:	2301      	movs	r3, #1
 801ba18:	e05f      	b.n	801bada <lv_fs_open+0x132>
        }
    }

    if(file_p->drv->open_cb == NULL) {
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	685b      	ldr	r3, [r3, #4]
 801ba1e:	68db      	ldr	r3, [r3, #12]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d104      	bne.n	801ba2e <lv_fs_open+0x86>
        file_p->drv = NULL;
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	2200      	movs	r2, #0
 801ba28:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_NOT_IMP;
 801ba2a:	2309      	movs	r3, #9
 801ba2c:	e055      	b.n	801bada <lv_fs_open+0x132>
    }

    const char * real_path = lv_fs_get_real_path(path);
 801ba2e:	68b8      	ldr	r0, [r7, #8]
 801ba30:	f000 f92e 	bl	801bc90 <lv_fs_get_real_path>
 801ba34:	61b8      	str	r0, [r7, #24]

    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	685b      	ldr	r3, [r3, #4]
 801ba3a:	885b      	ldrh	r3, [r3, #2]
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d10a      	bne.n	801ba56 <lv_fs_open+0xae>
        /*Pass file_d's address to open_cb, so the implementor can allocate memory byself*/
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	685b      	ldr	r3, [r3, #4]
 801ba44:	68dc      	ldr	r4, [r3, #12]
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	6858      	ldr	r0, [r3, #4]
 801ba4a:	68f9      	ldr	r1, [r7, #12]
 801ba4c:	79fb      	ldrb	r3, [r7, #7]
 801ba4e:	69ba      	ldr	r2, [r7, #24]
 801ba50:	47a0      	blx	r4
 801ba52:	4603      	mov	r3, r0
 801ba54:	e041      	b.n	801bada <lv_fs_open+0x132>
    }

    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	685b      	ldr	r3, [r3, #4]
 801ba5a:	885b      	ldrh	r3, [r3, #2]
 801ba5c:	4618      	mov	r0, r3
 801ba5e:	f000 fc85 	bl	801c36c <lv_mem_alloc>
 801ba62:	4602      	mov	r2, r0
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MEM(file_p->file_d);
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	4618      	mov	r0, r3
 801ba6e:	f7ff fef1 	bl	801b854 <lv_debug_check_null>
 801ba72:	4603      	mov	r3, r0
 801ba74:	f083 0301 	eor.w	r3, r3, #1
 801ba78:	b2db      	uxtb	r3, r3
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d009      	beq.n	801ba92 <lv_fs_open+0xea>
 801ba7e:	68fb      	ldr	r3, [r7, #12]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	f04f 0400 	mov.w	r4, #0
 801ba86:	461a      	mov	r2, r3
 801ba88:	4623      	mov	r3, r4
 801ba8a:	4816      	ldr	r0, [pc, #88]	; (801bae4 <lv_fs_open+0x13c>)
 801ba8c:	f7ff fef2 	bl	801b874 <lv_debug_log_error>
 801ba90:	e7fe      	b.n	801ba90 <lv_fs_open+0xe8>
    if(file_p->file_d == NULL) {
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d104      	bne.n	801baa4 <lv_fs_open+0xfc>
        file_p->drv = NULL;
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 801baa0:	230a      	movs	r3, #10
 801baa2:	e01a      	b.n	801bada <lv_fs_open+0x132>
    }

    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	685b      	ldr	r3, [r3, #4]
 801baa8:	68dc      	ldr	r4, [r3, #12]
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	6858      	ldr	r0, [r3, #4]
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	6819      	ldr	r1, [r3, #0]
 801bab2:	79fb      	ldrb	r3, [r7, #7]
 801bab4:	69ba      	ldr	r2, [r7, #24]
 801bab6:	47a0      	blx	r4
 801bab8:	4603      	mov	r3, r0
 801baba:	75fb      	strb	r3, [r7, #23]

    if(res != LV_FS_RES_OK) {
 801babc:	7dfb      	ldrb	r3, [r7, #23]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	d00a      	beq.n	801bad8 <lv_fs_open+0x130>
        lv_mem_free(file_p->file_d);
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	4618      	mov	r0, r3
 801bac8:	f000 fc9a 	bl	801c400 <lv_mem_free>
        file_p->file_d = NULL;
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	2200      	movs	r2, #0
 801bad0:	601a      	str	r2, [r3, #0]
        file_p->drv    = NULL;
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	2200      	movs	r2, #0
 801bad6:	605a      	str	r2, [r3, #4]
    }

    return res;
 801bad8:	7dfb      	ldrb	r3, [r7, #23]
}
 801bada:	4618      	mov	r0, r3
 801badc:	3724      	adds	r7, #36	; 0x24
 801bade:	46bd      	mov	sp, r7
 801bae0:	bd90      	pop	{r4, r7, pc}
 801bae2:	bf00      	nop
 801bae4:	080283f0 	.word	0x080283f0

0801bae8 <lv_fs_close>:
 * Close an already opened file
 * @param file_p pointer to a lv_fs_file_t variable
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 801bae8:	b580      	push	{r7, lr}
 801baea:	b084      	sub	sp, #16
 801baec:	af00      	add	r7, sp, #0
 801baee:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	685b      	ldr	r3, [r3, #4]
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d101      	bne.n	801bafc <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 801baf8:	230b      	movs	r3, #11
 801bafa:	e01d      	b.n	801bb38 <lv_fs_close+0x50>
    }

    if(file_p->drv->close_cb == NULL) {
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	685b      	ldr	r3, [r3, #4]
 801bb00:	691b      	ldr	r3, [r3, #16]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d101      	bne.n	801bb0a <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 801bb06:	2309      	movs	r3, #9
 801bb08:	e016      	b.n	801bb38 <lv_fs_close+0x50>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	685b      	ldr	r3, [r3, #4]
 801bb0e:	691b      	ldr	r3, [r3, #16]
 801bb10:	687a      	ldr	r2, [r7, #4]
 801bb12:	6850      	ldr	r0, [r2, #4]
 801bb14:	687a      	ldr	r2, [r7, #4]
 801bb16:	6812      	ldr	r2, [r2, #0]
 801bb18:	4611      	mov	r1, r2
 801bb1a:	4798      	blx	r3
 801bb1c:	4603      	mov	r3, r0
 801bb1e:	73fb      	strb	r3, [r7, #15]

    lv_mem_free(file_p->file_d); /*Clean up*/
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	4618      	mov	r0, r3
 801bb26:	f000 fc6b 	bl	801c400 <lv_mem_free>
    file_p->file_d = NULL;
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	2200      	movs	r2, #0
 801bb2e:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	2200      	movs	r2, #0
 801bb34:	605a      	str	r2, [r3, #4]

    return res;
 801bb36:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb38:	4618      	mov	r0, r3
 801bb3a:	3710      	adds	r7, #16
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	bd80      	pop	{r7, pc}

0801bb40 <lv_fs_read>:
 * @param btr Bytes To Read
 * @param br the number of real read bytes (Bytes Read). NULL if unused.
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 801bb40:	b590      	push	{r4, r7, lr}
 801bb42:	b089      	sub	sp, #36	; 0x24
 801bb44:	af02      	add	r7, sp, #8
 801bb46:	60f8      	str	r0, [r7, #12]
 801bb48:	60b9      	str	r1, [r7, #8]
 801bb4a:	607a      	str	r2, [r7, #4]
 801bb4c:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 801bb4e:	683b      	ldr	r3, [r7, #0]
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	d002      	beq.n	801bb5a <lv_fs_read+0x1a>
 801bb54:	683b      	ldr	r3, [r7, #0]
 801bb56:	2200      	movs	r2, #0
 801bb58:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	685b      	ldr	r3, [r3, #4]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d101      	bne.n	801bb66 <lv_fs_read+0x26>
 801bb62:	230b      	movs	r3, #11
 801bb64:	e01e      	b.n	801bba4 <lv_fs_read+0x64>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	685b      	ldr	r3, [r3, #4]
 801bb6a:	699b      	ldr	r3, [r3, #24]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d101      	bne.n	801bb74 <lv_fs_read+0x34>
 801bb70:	2309      	movs	r3, #9
 801bb72:	e017      	b.n	801bba4 <lv_fs_read+0x64>

    uint32_t br_tmp = 0;
 801bb74:	2300      	movs	r3, #0
 801bb76:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	685b      	ldr	r3, [r3, #4]
 801bb7c:	699c      	ldr	r4, [r3, #24]
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	6858      	ldr	r0, [r3, #4]
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	6819      	ldr	r1, [r3, #0]
 801bb86:	f107 0310 	add.w	r3, r7, #16
 801bb8a:	9300      	str	r3, [sp, #0]
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	68ba      	ldr	r2, [r7, #8]
 801bb90:	47a0      	blx	r4
 801bb92:	4603      	mov	r3, r0
 801bb94:	75fb      	strb	r3, [r7, #23]
    if(br != NULL) *br = br_tmp;
 801bb96:	683b      	ldr	r3, [r7, #0]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d002      	beq.n	801bba2 <lv_fs_read+0x62>
 801bb9c:	693a      	ldr	r2, [r7, #16]
 801bb9e:	683b      	ldr	r3, [r7, #0]
 801bba0:	601a      	str	r2, [r3, #0]

    return res;
 801bba2:	7dfb      	ldrb	r3, [r7, #23]
}
 801bba4:	4618      	mov	r0, r3
 801bba6:	371c      	adds	r7, #28
 801bba8:	46bd      	mov	sp, r7
 801bbaa:	bd90      	pop	{r4, r7, pc}

0801bbac <lv_fs_seek>:
 * @param file_p pointer to a lv_fs_file_t variable
 * @param pos the new position expressed in bytes index (0: start of file)
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos)
{
 801bbac:	b580      	push	{r7, lr}
 801bbae:	b084      	sub	sp, #16
 801bbb0:	af00      	add	r7, sp, #0
 801bbb2:	6078      	str	r0, [r7, #4]
 801bbb4:	6039      	str	r1, [r7, #0]
    if(file_p->drv == NULL) {
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	685b      	ldr	r3, [r3, #4]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d101      	bne.n	801bbc2 <lv_fs_seek+0x16>
        return LV_FS_RES_INV_PARAM;
 801bbbe:	230b      	movs	r3, #11
 801bbc0:	e012      	b.n	801bbe8 <lv_fs_seek+0x3c>
    }

    if(file_p->drv->seek_cb == NULL) {
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	685b      	ldr	r3, [r3, #4]
 801bbc6:	6a1b      	ldr	r3, [r3, #32]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d101      	bne.n	801bbd0 <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 801bbcc:	2309      	movs	r3, #9
 801bbce:	e00b      	b.n	801bbe8 <lv_fs_seek+0x3c>
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	685b      	ldr	r3, [r3, #4]
 801bbd4:	6a1b      	ldr	r3, [r3, #32]
 801bbd6:	687a      	ldr	r2, [r7, #4]
 801bbd8:	6850      	ldr	r0, [r2, #4]
 801bbda:	687a      	ldr	r2, [r7, #4]
 801bbdc:	6811      	ldr	r1, [r2, #0]
 801bbde:	683a      	ldr	r2, [r7, #0]
 801bbe0:	4798      	blx	r3
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	73fb      	strb	r3, [r7, #15]

    return res;
 801bbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 801bbe8:	4618      	mov	r0, r3
 801bbea:	3710      	adds	r7, #16
 801bbec:	46bd      	mov	sp, r7
 801bbee:	bd80      	pop	{r7, pc}

0801bbf0 <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 801bbf0:	b580      	push	{r7, lr}
 801bbf2:	b084      	sub	sp, #16
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	4603      	mov	r3, r0
 801bbf8:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t * drv;

    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 801bbfa:	480c      	ldr	r0, [pc, #48]	; (801bc2c <lv_fs_get_drv+0x3c>)
 801bbfc:	f000 f9e0 	bl	801bfc0 <_lv_ll_get_head>
 801bc00:	60f8      	str	r0, [r7, #12]
 801bc02:	e00b      	b.n	801bc1c <lv_fs_get_drv+0x2c>
        if(drv->letter == letter) {
 801bc04:	68fb      	ldr	r3, [r7, #12]
 801bc06:	781b      	ldrb	r3, [r3, #0]
 801bc08:	79fa      	ldrb	r2, [r7, #7]
 801bc0a:	429a      	cmp	r2, r3
 801bc0c:	d101      	bne.n	801bc12 <lv_fs_get_drv+0x22>
            return drv;
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	e008      	b.n	801bc24 <lv_fs_get_drv+0x34>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 801bc12:	68f9      	ldr	r1, [r7, #12]
 801bc14:	4805      	ldr	r0, [pc, #20]	; (801bc2c <lv_fs_get_drv+0x3c>)
 801bc16:	f000 f9f9 	bl	801c00c <_lv_ll_get_next>
 801bc1a:	60f8      	str	r0, [r7, #12]
 801bc1c:	68fb      	ldr	r3, [r7, #12]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d1f0      	bne.n	801bc04 <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 801bc22:	2300      	movs	r3, #0
}
 801bc24:	4618      	mov	r0, r3
 801bc26:	3710      	adds	r7, #16
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	bd80      	pop	{r7, pc}
 801bc2c:	20020438 	.word	0x20020438

0801bc30 <lv_fs_get_ext>:
 * Return with the extension of the filename
 * @param fn string with a filename
 * @return pointer to the beginning extension or empty string if no extension
 */
const char * lv_fs_get_ext(const char * fn)
{
 801bc30:	b580      	push	{r7, lr}
 801bc32:	b084      	sub	sp, #16
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 801bc38:	6878      	ldr	r0, [r7, #4]
 801bc3a:	f7e4 faef 	bl	800021c <strlen>
 801bc3e:	60f8      	str	r0, [r7, #12]
 801bc40:	e01b      	b.n	801bc7a <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 801bc42:	687a      	ldr	r2, [r7, #4]
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	4413      	add	r3, r2
 801bc48:	781b      	ldrb	r3, [r3, #0]
 801bc4a:	2b2e      	cmp	r3, #46	; 0x2e
 801bc4c:	d104      	bne.n	801bc58 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	3301      	adds	r3, #1
 801bc52:	687a      	ldr	r2, [r7, #4]
 801bc54:	4413      	add	r3, r2
 801bc56:	e014      	b.n	801bc82 <lv_fs_get_ext+0x52>
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
 801bc58:	687a      	ldr	r2, [r7, #4]
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	4413      	add	r3, r2
 801bc5e:	781b      	ldrb	r3, [r3, #0]
 801bc60:	2b2f      	cmp	r3, #47	; 0x2f
 801bc62:	d005      	beq.n	801bc70 <lv_fs_get_ext+0x40>
 801bc64:	687a      	ldr	r2, [r7, #4]
 801bc66:	68fb      	ldr	r3, [r7, #12]
 801bc68:	4413      	add	r3, r2
 801bc6a:	781b      	ldrb	r3, [r3, #0]
 801bc6c:	2b5c      	cmp	r3, #92	; 0x5c
 801bc6e:	d101      	bne.n	801bc74 <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 801bc70:	4b06      	ldr	r3, [pc, #24]	; (801bc8c <lv_fs_get_ext+0x5c>)
 801bc72:	e006      	b.n	801bc82 <lv_fs_get_ext+0x52>
    for(i = strlen(fn); i > 0; i--) {
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	3b01      	subs	r3, #1
 801bc78:	60fb      	str	r3, [r7, #12]
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	d1e0      	bne.n	801bc42 <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name. */
 801bc80:	4b02      	ldr	r3, [pc, #8]	; (801bc8c <lv_fs_get_ext+0x5c>)
}
 801bc82:	4618      	mov	r0, r3
 801bc84:	3710      	adds	r7, #16
 801bc86:	46bd      	mov	sp, r7
 801bc88:	bd80      	pop	{r7, pc}
 801bc8a:	bf00      	nop
 801bc8c:	08028400 	.word	0x08028400

0801bc90 <lv_fs_get_real_path>:
 * Leave the driver letters and / or \ letters from beginning of the path
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 801bc90:	b480      	push	{r7}
 801bc92:	b083      	sub	sp, #12
 801bc94:	af00      	add	r7, sp, #0
 801bc96:	6078      	str	r0, [r7, #4]
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	3301      	adds	r3, #1
 801bc9c:	607b      	str	r3, [r7, #4]

    while(*path != '\0') {
 801bc9e:	e00e      	b.n	801bcbe <lv_fs_get_real_path+0x2e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	781b      	ldrb	r3, [r3, #0]
 801bca4:	2b3a      	cmp	r3, #58	; 0x3a
 801bca6:	d007      	beq.n	801bcb8 <lv_fs_get_real_path+0x28>
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	781b      	ldrb	r3, [r3, #0]
 801bcac:	2b5c      	cmp	r3, #92	; 0x5c
 801bcae:	d003      	beq.n	801bcb8 <lv_fs_get_real_path+0x28>
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	781b      	ldrb	r3, [r3, #0]
 801bcb4:	2b2f      	cmp	r3, #47	; 0x2f
 801bcb6:	d106      	bne.n	801bcc6 <lv_fs_get_real_path+0x36>
            path++;
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	3301      	adds	r3, #1
 801bcbc:	607b      	str	r3, [r7, #4]
    while(*path != '\0') {
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	781b      	ldrb	r3, [r3, #0]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d1ec      	bne.n	801bca0 <lv_fs_get_real_path+0x10>
        else {
            break;
        }
    }

    return path;
 801bcc6:	687b      	ldr	r3, [r7, #4]
}
 801bcc8:	4618      	mov	r0, r3
 801bcca:	370c      	adds	r7, #12
 801bccc:	46bd      	mov	sp, r7
 801bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcd2:	4770      	bx	lr

0801bcd4 <_lv_ll_init>:
 * Initialize linked list
 * @param ll_dsc pointer to ll_dsc variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 801bcd4:	b480      	push	{r7}
 801bcd6:	b083      	sub	sp, #12
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	6078      	str	r0, [r7, #4]
 801bcdc:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	2200      	movs	r2, #0
 801bce2:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	2200      	movs	r2, #0
 801bce8:	609a      	str	r2, [r3, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 801bcea:	683b      	ldr	r3, [r7, #0]
 801bcec:	3303      	adds	r3, #3
 801bcee:	f023 0303 	bic.w	r3, r3, #3
 801bcf2:	603b      	str	r3, [r7, #0]
#endif

    ll_p->n_size = node_size;
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	683a      	ldr	r2, [r7, #0]
 801bcf8:	601a      	str	r2, [r3, #0]
}
 801bcfa:	bf00      	nop
 801bcfc:	370c      	adds	r7, #12
 801bcfe:	46bd      	mov	sp, r7
 801bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd04:	4770      	bx	lr

0801bd06 <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 801bd06:	b580      	push	{r7, lr}
 801bd08:	b084      	sub	sp, #16
 801bd0a:	af00      	add	r7, sp, #0
 801bd0c:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	3308      	adds	r3, #8
 801bd14:	4618      	mov	r0, r3
 801bd16:	f000 fb29 	bl	801c36c <lv_mem_alloc>
 801bd1a:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801bd1c:	68fb      	ldr	r3, [r7, #12]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d020      	beq.n	801bd64 <_lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 801bd22:	2200      	movs	r2, #0
 801bd24:	68f9      	ldr	r1, [r7, #12]
 801bd26:	6878      	ldr	r0, [r7, #4]
 801bd28:	f000 fa1e 	bl	801c168 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	685b      	ldr	r3, [r3, #4]
 801bd30:	461a      	mov	r2, r3
 801bd32:	68f9      	ldr	r1, [r7, #12]
 801bd34:	6878      	ldr	r0, [r7, #4]
 801bd36:	f000 fa36 	bl	801c1a6 <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	685b      	ldr	r3, [r3, #4]
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d006      	beq.n	801bd50 <_lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	685b      	ldr	r3, [r3, #4]
 801bd46:	68fa      	ldr	r2, [r7, #12]
 801bd48:	4619      	mov	r1, r3
 801bd4a:	6878      	ldr	r0, [r7, #4]
 801bd4c:	f000 fa0c 	bl	801c168 <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	68fa      	ldr	r2, [r7, #12]
 801bd54:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	689b      	ldr	r3, [r3, #8]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d102      	bne.n	801bd64 <_lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	68fa      	ldr	r2, [r7, #12]
 801bd62:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 801bd64:	68fb      	ldr	r3, [r7, #12]
}
 801bd66:	4618      	mov	r0, r3
 801bd68:	3710      	adds	r7, #16
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	bd80      	pop	{r7, pc}

0801bd6e <_lv_ll_ins_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the new head
 */
void * _lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act)
{
 801bd6e:	b580      	push	{r7, lr}
 801bd70:	b084      	sub	sp, #16
 801bd72:	af00      	add	r7, sp, #0
 801bd74:	6078      	str	r0, [r7, #4]
 801bd76:	6039      	str	r1, [r7, #0]
    lv_ll_node_t * n_new;

    if(NULL == ll_p || NULL == n_act) return NULL;
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d002      	beq.n	801bd84 <_lv_ll_ins_prev+0x16>
 801bd7e:	683b      	ldr	r3, [r7, #0]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d101      	bne.n	801bd88 <_lv_ll_ins_prev+0x1a>
 801bd84:	2300      	movs	r3, #0
 801bd86:	e035      	b.n	801bdf4 <_lv_ll_ins_prev+0x86>

    if(_lv_ll_get_head(ll_p) == n_act) {
 801bd88:	6878      	ldr	r0, [r7, #4]
 801bd8a:	f000 f919 	bl	801bfc0 <_lv_ll_get_head>
 801bd8e:	4602      	mov	r2, r0
 801bd90:	683b      	ldr	r3, [r7, #0]
 801bd92:	4293      	cmp	r3, r2
 801bd94:	d108      	bne.n	801bda8 <_lv_ll_ins_prev+0x3a>
        n_new = _lv_ll_ins_head(ll_p);
 801bd96:	6878      	ldr	r0, [r7, #4]
 801bd98:	f7ff ffb5 	bl	801bd06 <_lv_ll_ins_head>
 801bd9c:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d126      	bne.n	801bdf2 <_lv_ll_ins_prev+0x84>
 801bda4:	2300      	movs	r3, #0
 801bda6:	e025      	b.n	801bdf4 <_lv_ll_ins_prev+0x86>
    }
    else {
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	3308      	adds	r3, #8
 801bdae:	4618      	mov	r0, r3
 801bdb0:	f000 fadc 	bl	801c36c <lv_mem_alloc>
 801bdb4:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d101      	bne.n	801bdc0 <_lv_ll_ins_prev+0x52>
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	e019      	b.n	801bdf4 <_lv_ll_ins_prev+0x86>

        lv_ll_node_t * n_prev;
        n_prev = _lv_ll_get_prev(ll_p, n_act);
 801bdc0:	6839      	ldr	r1, [r7, #0]
 801bdc2:	6878      	ldr	r0, [r7, #4]
 801bdc4:	f000 f93c 	bl	801c040 <_lv_ll_get_prev>
 801bdc8:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_new);
 801bdca:	68fa      	ldr	r2, [r7, #12]
 801bdcc:	68b9      	ldr	r1, [r7, #8]
 801bdce:	6878      	ldr	r0, [r7, #4]
 801bdd0:	f000 f9e9 	bl	801c1a6 <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 801bdd4:	68ba      	ldr	r2, [r7, #8]
 801bdd6:	68f9      	ldr	r1, [r7, #12]
 801bdd8:	6878      	ldr	r0, [r7, #4]
 801bdda:	f000 f9c5 	bl	801c168 <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 801bdde:	68fa      	ldr	r2, [r7, #12]
 801bde0:	6839      	ldr	r1, [r7, #0]
 801bde2:	6878      	ldr	r0, [r7, #4]
 801bde4:	f000 f9c0 	bl	801c168 <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 801bde8:	683a      	ldr	r2, [r7, #0]
 801bdea:	68f9      	ldr	r1, [r7, #12]
 801bdec:	6878      	ldr	r0, [r7, #4]
 801bdee:	f000 f9da 	bl	801c1a6 <node_set_next>
    }

    return n_new;
 801bdf2:	68fb      	ldr	r3, [r7, #12]
}
 801bdf4:	4618      	mov	r0, r3
 801bdf6:	3710      	adds	r7, #16
 801bdf8:	46bd      	mov	sp, r7
 801bdfa:	bd80      	pop	{r7, pc}

0801bdfc <_lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * _lv_ll_ins_tail(lv_ll_t * ll_p)
{
 801bdfc:	b580      	push	{r7, lr}
 801bdfe:	b084      	sub	sp, #16
 801be00:	af00      	add	r7, sp, #0
 801be02:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	3308      	adds	r3, #8
 801be0a:	4618      	mov	r0, r3
 801be0c:	f000 faae 	bl	801c36c <lv_mem_alloc>
 801be10:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	2b00      	cmp	r3, #0
 801be16:	d020      	beq.n	801be5a <_lv_ll_ins_tail+0x5e>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 801be18:	2200      	movs	r2, #0
 801be1a:	68f9      	ldr	r1, [r7, #12]
 801be1c:	6878      	ldr	r0, [r7, #4]
 801be1e:	f000 f9c2 	bl	801c1a6 <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	689b      	ldr	r3, [r3, #8]
 801be26:	461a      	mov	r2, r3
 801be28:	68f9      	ldr	r1, [r7, #12]
 801be2a:	6878      	ldr	r0, [r7, #4]
 801be2c:	f000 f99c 	bl	801c168 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	689b      	ldr	r3, [r3, #8]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d006      	beq.n	801be46 <_lv_ll_ins_tail+0x4a>
            node_set_next(ll_p, ll_p->tail, n_new);
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	689b      	ldr	r3, [r3, #8]
 801be3c:	68fa      	ldr	r2, [r7, #12]
 801be3e:	4619      	mov	r1, r3
 801be40:	6878      	ldr	r0, [r7, #4]
 801be42:	f000 f9b0 	bl	801c1a6 <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	68fa      	ldr	r2, [r7, #12]
 801be4a:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	685b      	ldr	r3, [r3, #4]
 801be50:	2b00      	cmp	r3, #0
 801be52:	d102      	bne.n	801be5a <_lv_ll_ins_tail+0x5e>
            ll_p->head = n_new;
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	68fa      	ldr	r2, [r7, #12]
 801be58:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 801be5a:	68fb      	ldr	r3, [r7, #12]
}
 801be5c:	4618      	mov	r0, r3
 801be5e:	3710      	adds	r7, #16
 801be60:	46bd      	mov	sp, r7
 801be62:	bd80      	pop	{r7, pc}

0801be64 <_lv_ll_remove>:
 * It does not free the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)
{
 801be64:	b580      	push	{r7, lr}
 801be66:	b084      	sub	sp, #16
 801be68:	af00      	add	r7, sp, #0
 801be6a:	6078      	str	r0, [r7, #4]
 801be6c:	6039      	str	r1, [r7, #0]
    if(_lv_ll_get_head(ll_p) == node_p) {
 801be6e:	6878      	ldr	r0, [r7, #4]
 801be70:	f000 f8a6 	bl	801bfc0 <_lv_ll_get_head>
 801be74:	4602      	mov	r2, r0
 801be76:	683b      	ldr	r3, [r7, #0]
 801be78:	4293      	cmp	r3, r2
 801be7a:	d116      	bne.n	801beaa <_lv_ll_remove+0x46>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 801be7c:	6839      	ldr	r1, [r7, #0]
 801be7e:	6878      	ldr	r0, [r7, #4]
 801be80:	f000 f8c4 	bl	801c00c <_lv_ll_get_next>
 801be84:	4602      	mov	r2, r0
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	685b      	ldr	r3, [r3, #4]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d103      	bne.n	801be9a <_lv_ll_remove+0x36>
            ll_p->tail = NULL;
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	2200      	movs	r2, #0
 801be96:	609a      	str	r2, [r3, #8]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);

        node_set_next(ll_p, n_prev, n_next);
        node_set_prev(ll_p, n_next, n_prev);
    }
}
 801be98:	e039      	b.n	801bf0e <_lv_ll_remove+0xaa>
            node_set_prev(ll_p, ll_p->head, NULL);
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	685b      	ldr	r3, [r3, #4]
 801be9e:	2200      	movs	r2, #0
 801bea0:	4619      	mov	r1, r3
 801bea2:	6878      	ldr	r0, [r7, #4]
 801bea4:	f000 f960 	bl	801c168 <node_set_prev>
}
 801bea8:	e031      	b.n	801bf0e <_lv_ll_remove+0xaa>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 801beaa:	6878      	ldr	r0, [r7, #4]
 801beac:	f000 f89b 	bl	801bfe6 <_lv_ll_get_tail>
 801beb0:	4602      	mov	r2, r0
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	4293      	cmp	r3, r2
 801beb6:	d116      	bne.n	801bee6 <_lv_ll_remove+0x82>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 801beb8:	6839      	ldr	r1, [r7, #0]
 801beba:	6878      	ldr	r0, [r7, #4]
 801bebc:	f000 f8c0 	bl	801c040 <_lv_ll_get_prev>
 801bec0:	4602      	mov	r2, r0
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	689b      	ldr	r3, [r3, #8]
 801beca:	2b00      	cmp	r3, #0
 801becc:	d103      	bne.n	801bed6 <_lv_ll_remove+0x72>
            ll_p->head = NULL;
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	2200      	movs	r2, #0
 801bed2:	605a      	str	r2, [r3, #4]
}
 801bed4:	e01b      	b.n	801bf0e <_lv_ll_remove+0xaa>
            node_set_next(ll_p, ll_p->tail, NULL);
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	689b      	ldr	r3, [r3, #8]
 801beda:	2200      	movs	r2, #0
 801bedc:	4619      	mov	r1, r3
 801bede:	6878      	ldr	r0, [r7, #4]
 801bee0:	f000 f961 	bl	801c1a6 <node_set_next>
}
 801bee4:	e013      	b.n	801bf0e <_lv_ll_remove+0xaa>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 801bee6:	6839      	ldr	r1, [r7, #0]
 801bee8:	6878      	ldr	r0, [r7, #4]
 801beea:	f000 f8a9 	bl	801c040 <_lv_ll_get_prev>
 801beee:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 801bef0:	6839      	ldr	r1, [r7, #0]
 801bef2:	6878      	ldr	r0, [r7, #4]
 801bef4:	f000 f88a 	bl	801c00c <_lv_ll_get_next>
 801bef8:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_next);
 801befa:	68ba      	ldr	r2, [r7, #8]
 801befc:	68f9      	ldr	r1, [r7, #12]
 801befe:	6878      	ldr	r0, [r7, #4]
 801bf00:	f000 f951 	bl	801c1a6 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 801bf04:	68fa      	ldr	r2, [r7, #12]
 801bf06:	68b9      	ldr	r1, [r7, #8]
 801bf08:	6878      	ldr	r0, [r7, #4]
 801bf0a:	f000 f92d 	bl	801c168 <node_set_prev>
}
 801bf0e:	bf00      	nop
 801bf10:	3710      	adds	r7, #16
 801bf12:	46bd      	mov	sp, r7
 801bf14:	bd80      	pop	{r7, pc}

0801bf16 <_lv_ll_chg_list>:
 * @param node pointer to a node
 * @param head true: be the head in the new list
 *             false be the head in the new list
 */
void _lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, bool head)
{
 801bf16:	b580      	push	{r7, lr}
 801bf18:	b084      	sub	sp, #16
 801bf1a:	af00      	add	r7, sp, #0
 801bf1c:	60f8      	str	r0, [r7, #12]
 801bf1e:	60b9      	str	r1, [r7, #8]
 801bf20:	607a      	str	r2, [r7, #4]
 801bf22:	70fb      	strb	r3, [r7, #3]
    _lv_ll_remove(ll_ori_p, node);
 801bf24:	6879      	ldr	r1, [r7, #4]
 801bf26:	68f8      	ldr	r0, [r7, #12]
 801bf28:	f7ff ff9c 	bl	801be64 <_lv_ll_remove>

    if(head) {
 801bf2c:	78fb      	ldrb	r3, [r7, #3]
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	d021      	beq.n	801bf76 <_lv_ll_chg_list+0x60>
        /*Set node as head*/
        node_set_prev(ll_new_p, node, NULL);
 801bf32:	2200      	movs	r2, #0
 801bf34:	6879      	ldr	r1, [r7, #4]
 801bf36:	68b8      	ldr	r0, [r7, #8]
 801bf38:	f000 f916 	bl	801c168 <node_set_prev>
        node_set_next(ll_new_p, node, ll_new_p->head);
 801bf3c:	68bb      	ldr	r3, [r7, #8]
 801bf3e:	685b      	ldr	r3, [r3, #4]
 801bf40:	461a      	mov	r2, r3
 801bf42:	6879      	ldr	r1, [r7, #4]
 801bf44:	68b8      	ldr	r0, [r7, #8]
 801bf46:	f000 f92e 	bl	801c1a6 <node_set_next>

        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 801bf4a:	68bb      	ldr	r3, [r7, #8]
 801bf4c:	685b      	ldr	r3, [r3, #4]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d006      	beq.n	801bf60 <_lv_ll_chg_list+0x4a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 801bf52:	68bb      	ldr	r3, [r7, #8]
 801bf54:	685b      	ldr	r3, [r3, #4]
 801bf56:	687a      	ldr	r2, [r7, #4]
 801bf58:	4619      	mov	r1, r3
 801bf5a:	68b8      	ldr	r0, [r7, #8]
 801bf5c:	f000 f904 	bl	801c168 <node_set_prev>
        }

        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 801bf60:	68bb      	ldr	r3, [r7, #8]
 801bf62:	687a      	ldr	r2, [r7, #4]
 801bf64:	605a      	str	r2, [r3, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 801bf66:	68bb      	ldr	r3, [r7, #8]
 801bf68:	689b      	ldr	r3, [r3, #8]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d124      	bne.n	801bfb8 <_lv_ll_chg_list+0xa2>
            ll_new_p->tail = node;
 801bf6e:	68bb      	ldr	r3, [r7, #8]
 801bf70:	687a      	ldr	r2, [r7, #4]
 801bf72:	609a      	str	r2, [r3, #8]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
            ll_new_p->head = node;
        }
    }
}
 801bf74:	e020      	b.n	801bfb8 <_lv_ll_chg_list+0xa2>
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 801bf76:	68bb      	ldr	r3, [r7, #8]
 801bf78:	689b      	ldr	r3, [r3, #8]
 801bf7a:	461a      	mov	r2, r3
 801bf7c:	6879      	ldr	r1, [r7, #4]
 801bf7e:	68b8      	ldr	r0, [r7, #8]
 801bf80:	f000 f8f2 	bl	801c168 <node_set_prev>
        node_set_next(ll_new_p, node, NULL);
 801bf84:	2200      	movs	r2, #0
 801bf86:	6879      	ldr	r1, [r7, #4]
 801bf88:	68b8      	ldr	r0, [r7, #8]
 801bf8a:	f000 f90c 	bl	801c1a6 <node_set_next>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 801bf8e:	68bb      	ldr	r3, [r7, #8]
 801bf90:	689b      	ldr	r3, [r3, #8]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d006      	beq.n	801bfa4 <_lv_ll_chg_list+0x8e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 801bf96:	68bb      	ldr	r3, [r7, #8]
 801bf98:	689b      	ldr	r3, [r3, #8]
 801bf9a:	687a      	ldr	r2, [r7, #4]
 801bf9c:	4619      	mov	r1, r3
 801bf9e:	68b8      	ldr	r0, [r7, #8]
 801bfa0:	f000 f901 	bl	801c1a6 <node_set_next>
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 801bfa4:	68bb      	ldr	r3, [r7, #8]
 801bfa6:	687a      	ldr	r2, [r7, #4]
 801bfa8:	609a      	str	r2, [r3, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 801bfaa:	68bb      	ldr	r3, [r7, #8]
 801bfac:	685b      	ldr	r3, [r3, #4]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d102      	bne.n	801bfb8 <_lv_ll_chg_list+0xa2>
            ll_new_p->head = node;
 801bfb2:	68bb      	ldr	r3, [r7, #8]
 801bfb4:	687a      	ldr	r2, [r7, #4]
 801bfb6:	605a      	str	r2, [r3, #4]
}
 801bfb8:	bf00      	nop
 801bfba:	3710      	adds	r7, #16
 801bfbc:	46bd      	mov	sp, r7
 801bfbe:	bd80      	pop	{r7, pc}

0801bfc0 <_lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_head(const lv_ll_t * ll_p)
{
 801bfc0:	b480      	push	{r7}
 801bfc2:	b085      	sub	sp, #20
 801bfc4:	af00      	add	r7, sp, #0
 801bfc6:	6078      	str	r0, [r7, #4]
    void * head = NULL;
 801bfc8:	2300      	movs	r3, #0
 801bfca:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d002      	beq.n	801bfd8 <_lv_ll_get_head+0x18>
        head = ll_p->head;
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	685b      	ldr	r3, [r3, #4]
 801bfd6:	60fb      	str	r3, [r7, #12]
    }

    return head;
 801bfd8:	68fb      	ldr	r3, [r7, #12]
}
 801bfda:	4618      	mov	r0, r3
 801bfdc:	3714      	adds	r7, #20
 801bfde:	46bd      	mov	sp, r7
 801bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe4:	4770      	bx	lr

0801bfe6 <_lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_tail(const lv_ll_t * ll_p)
{
 801bfe6:	b480      	push	{r7}
 801bfe8:	b085      	sub	sp, #20
 801bfea:	af00      	add	r7, sp, #0
 801bfec:	6078      	str	r0, [r7, #4]
    void * tail = NULL;
 801bfee:	2300      	movs	r3, #0
 801bff0:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d002      	beq.n	801bffe <_lv_ll_get_tail+0x18>
        tail = ll_p->tail;
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	689b      	ldr	r3, [r3, #8]
 801bffc:	60fb      	str	r3, [r7, #12]
    }

    return tail;
 801bffe:	68fb      	ldr	r3, [r7, #12]
}
 801c000:	4618      	mov	r0, r3
 801c002:	3714      	adds	r7, #20
 801c004:	46bd      	mov	sp, r7
 801c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c00a:	4770      	bx	lr

0801c00c <_lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 801c00c:	b480      	push	{r7}
 801c00e:	b085      	sub	sp, #20
 801c010:	af00      	add	r7, sp, #0
 801c012:	6078      	str	r0, [r7, #4]
 801c014:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return NULL;
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d101      	bne.n	801c020 <_lv_ll_get_next+0x14>
 801c01c:	2300      	movs	r3, #0
 801c01e:	e009      	b.n	801c034 <_lv_ll_get_next+0x28>

    /* Pointer to the next node is stored in the end of this node.
     * Go there and return the address found there */
    const lv_ll_node_t * n_act_d = n_act;
 801c020:	683b      	ldr	r3, [r7, #0]
 801c022:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	3304      	adds	r3, #4
 801c02a:	68fa      	ldr	r2, [r7, #12]
 801c02c:	4413      	add	r3, r2
 801c02e:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	681b      	ldr	r3, [r3, #0]
}
 801c034:	4618      	mov	r0, r3
 801c036:	3714      	adds	r7, #20
 801c038:	46bd      	mov	sp, r7
 801c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c03e:	4770      	bx	lr

0801c040 <_lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 801c040:	b480      	push	{r7}
 801c042:	b085      	sub	sp, #20
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
 801c048:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return NULL;
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d101      	bne.n	801c054 <_lv_ll_get_prev+0x14>
 801c050:	2300      	movs	r3, #0
 801c052:	e008      	b.n	801c066 <_lv_ll_get_prev+0x26>

    /* Pointer to the prev. node is stored in the end of this node.
     * Go there and return the address found there */
    const lv_ll_node_t * n_act_d = n_act;
 801c054:	683b      	ldr	r3, [r7, #0]
 801c056:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	68fa      	ldr	r2, [r7, #12]
 801c05e:	4413      	add	r3, r2
 801c060:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 801c062:	68fb      	ldr	r3, [r7, #12]
 801c064:	681b      	ldr	r3, [r3, #0]
}
 801c066:	4618      	mov	r0, r3
 801c068:	3714      	adds	r7, #20
 801c06a:	46bd      	mov	sp, r7
 801c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c070:	4770      	bx	lr

0801c072 <_lv_ll_get_len>:
 * Return the length of the linked list.
 * @param ll_p pointer to linked list
 * @return length of the linked list
 */
uint32_t _lv_ll_get_len(const lv_ll_t * ll_p)
{
 801c072:	b580      	push	{r7, lr}
 801c074:	b084      	sub	sp, #16
 801c076:	af00      	add	r7, sp, #0
 801c078:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 801c07a:	2300      	movs	r3, #0
 801c07c:	60fb      	str	r3, [r7, #12]
    void * node;

    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 801c07e:	6878      	ldr	r0, [r7, #4]
 801c080:	f7ff ff9e 	bl	801bfc0 <_lv_ll_get_head>
 801c084:	60b8      	str	r0, [r7, #8]
 801c086:	e007      	b.n	801c098 <_lv_ll_get_len+0x26>
        len++;
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	3301      	adds	r3, #1
 801c08c:	60fb      	str	r3, [r7, #12]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 801c08e:	68b9      	ldr	r1, [r7, #8]
 801c090:	6878      	ldr	r0, [r7, #4]
 801c092:	f7ff ffbb 	bl	801c00c <_lv_ll_get_next>
 801c096:	60b8      	str	r0, [r7, #8]
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d1f4      	bne.n	801c088 <_lv_ll_get_len+0x16>
    }

    return len;
 801c09e:	68fb      	ldr	r3, [r7, #12]
}
 801c0a0:	4618      	mov	r0, r3
 801c0a2:	3710      	adds	r7, #16
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	bd80      	pop	{r7, pc}

0801c0a8 <_lv_ll_move_before>:
 * @param ll_p pointer to a linked list
 * @param n_act pointer to node to move
 * @param n_after pointer to a node which should be after `n_act`
 */
void _lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after)
{
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	b086      	sub	sp, #24
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	60f8      	str	r0, [r7, #12]
 801c0b0:	60b9      	str	r1, [r7, #8]
 801c0b2:	607a      	str	r2, [r7, #4]
    if(n_act == n_after) return; /*Can't move before itself*/
 801c0b4:	68ba      	ldr	r2, [r7, #8]
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	429a      	cmp	r2, r3
 801c0ba:	d035      	beq.n	801c128 <_lv_ll_move_before+0x80>

    void * n_before;
    if(n_after != NULL)
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d005      	beq.n	801c0ce <_lv_ll_move_before+0x26>
        n_before = _lv_ll_get_prev(ll_p, n_after);
 801c0c2:	6879      	ldr	r1, [r7, #4]
 801c0c4:	68f8      	ldr	r0, [r7, #12]
 801c0c6:	f7ff ffbb 	bl	801c040 <_lv_ll_get_prev>
 801c0ca:	6178      	str	r0, [r7, #20]
 801c0cc:	e003      	b.n	801c0d6 <_lv_ll_move_before+0x2e>
    else
        n_before = _lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
 801c0ce:	68f8      	ldr	r0, [r7, #12]
 801c0d0:	f7ff ff89 	bl	801bfe6 <_lv_ll_get_tail>
 801c0d4:	6178      	str	r0, [r7, #20]

    if(n_act == n_before) return; /*Already before `n_after`*/
 801c0d6:	68ba      	ldr	r2, [r7, #8]
 801c0d8:	697b      	ldr	r3, [r7, #20]
 801c0da:	429a      	cmp	r2, r3
 801c0dc:	d026      	beq.n	801c12c <_lv_ll_move_before+0x84>

    /*It's much easier to remove from the list and add again*/
    _lv_ll_remove(ll_p, n_act);
 801c0de:	68b9      	ldr	r1, [r7, #8]
 801c0e0:	68f8      	ldr	r0, [r7, #12]
 801c0e2:	f7ff febf 	bl	801be64 <_lv_ll_remove>

    /*Add again by setting the prev. and next nodes*/
    node_set_next(ll_p, n_before, n_act);
 801c0e6:	68ba      	ldr	r2, [r7, #8]
 801c0e8:	6979      	ldr	r1, [r7, #20]
 801c0ea:	68f8      	ldr	r0, [r7, #12]
 801c0ec:	f000 f85b 	bl	801c1a6 <node_set_next>
    node_set_prev(ll_p, n_act, n_before);
 801c0f0:	697a      	ldr	r2, [r7, #20]
 801c0f2:	68b9      	ldr	r1, [r7, #8]
 801c0f4:	68f8      	ldr	r0, [r7, #12]
 801c0f6:	f000 f837 	bl	801c168 <node_set_prev>
    node_set_prev(ll_p, n_after, n_act);
 801c0fa:	68ba      	ldr	r2, [r7, #8]
 801c0fc:	6879      	ldr	r1, [r7, #4]
 801c0fe:	68f8      	ldr	r0, [r7, #12]
 801c100:	f000 f832 	bl	801c168 <node_set_prev>
    node_set_next(ll_p, n_act, n_after);
 801c104:	687a      	ldr	r2, [r7, #4]
 801c106:	68b9      	ldr	r1, [r7, #8]
 801c108:	68f8      	ldr	r0, [r7, #12]
 801c10a:	f000 f84c 	bl	801c1a6 <node_set_next>

    /*If `n_act` was moved before NULL then it become the new tail*/
    if(n_after == NULL) ll_p->tail = n_act;
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	2b00      	cmp	r3, #0
 801c112:	d102      	bne.n	801c11a <_lv_ll_move_before+0x72>
 801c114:	68fb      	ldr	r3, [r7, #12]
 801c116:	68ba      	ldr	r2, [r7, #8]
 801c118:	609a      	str	r2, [r3, #8]

    /*If `n_act` was moved before `NULL` then it's the new head*/
    if(n_before == NULL) ll_p->head = n_act;
 801c11a:	697b      	ldr	r3, [r7, #20]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d106      	bne.n	801c12e <_lv_ll_move_before+0x86>
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	68ba      	ldr	r2, [r7, #8]
 801c124:	605a      	str	r2, [r3, #4]
 801c126:	e002      	b.n	801c12e <_lv_ll_move_before+0x86>
    if(n_act == n_after) return; /*Can't move before itself*/
 801c128:	bf00      	nop
 801c12a:	e000      	b.n	801c12e <_lv_ll_move_before+0x86>
    if(n_act == n_before) return; /*Already before `n_after`*/
 801c12c:	bf00      	nop
}
 801c12e:	3718      	adds	r7, #24
 801c130:	46bd      	mov	sp, r7
 801c132:	bd80      	pop	{r7, pc}

0801c134 <_lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool _lv_ll_is_empty(lv_ll_t * ll_p)
{
 801c134:	b480      	push	{r7}
 801c136:	b083      	sub	sp, #12
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d101      	bne.n	801c146 <_lv_ll_is_empty+0x12>
 801c142:	2301      	movs	r3, #1
 801c144:	e00a      	b.n	801c15c <_lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	685b      	ldr	r3, [r3, #4]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d105      	bne.n	801c15a <_lv_ll_is_empty+0x26>
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	689b      	ldr	r3, [r3, #8]
 801c152:	2b00      	cmp	r3, #0
 801c154:	d101      	bne.n	801c15a <_lv_ll_is_empty+0x26>
 801c156:	2301      	movs	r3, #1
 801c158:	e000      	b.n	801c15c <_lv_ll_is_empty+0x28>

    return false;
 801c15a:	2300      	movs	r3, #0
}
 801c15c:	4618      	mov	r0, r3
 801c15e:	370c      	adds	r7, #12
 801c160:	46bd      	mov	sp, r7
 801c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c166:	4770      	bx	lr

0801c168 <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 801c168:	b480      	push	{r7}
 801c16a:	b089      	sub	sp, #36	; 0x24
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	60f8      	str	r0, [r7, #12]
 801c170:	60b9      	str	r1, [r7, #8]
 801c172:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801c174:	68bb      	ldr	r3, [r7, #8]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d00f      	beq.n	801c19a <node_set_prev+0x32>

    uint8_t * act8 = (uint8_t *) act;
 801c17a:	68bb      	ldr	r3, [r7, #8]
 801c17c:	61fb      	str	r3, [r7, #28]

    act8 += LL_PREV_P_OFFSET(ll_p);
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	69fa      	ldr	r2, [r7, #28]
 801c184:	4413      	add	r3, r2
 801c186:	61fb      	str	r3, [r7, #28]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 801c188:	69fb      	ldr	r3, [r7, #28]
 801c18a:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;
 801c18c:	1d3b      	adds	r3, r7, #4
 801c18e:	617b      	str	r3, [r7, #20]

    *act_node_p = *prev_node_p;
 801c190:	697b      	ldr	r3, [r7, #20]
 801c192:	681a      	ldr	r2, [r3, #0]
 801c194:	69bb      	ldr	r3, [r7, #24]
 801c196:	601a      	str	r2, [r3, #0]
 801c198:	e000      	b.n	801c19c <node_set_prev+0x34>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801c19a:	bf00      	nop
}
 801c19c:	3724      	adds	r7, #36	; 0x24
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1a4:	4770      	bx	lr

0801c1a6 <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 801c1a6:	b480      	push	{r7}
 801c1a8:	b089      	sub	sp, #36	; 0x24
 801c1aa:	af00      	add	r7, sp, #0
 801c1ac:	60f8      	str	r0, [r7, #12]
 801c1ae:	60b9      	str	r1, [r7, #8]
 801c1b0:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801c1b2:	68bb      	ldr	r3, [r7, #8]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d010      	beq.n	801c1da <node_set_next+0x34>
    uint8_t * act8 = (uint8_t *) act;
 801c1b8:	68bb      	ldr	r3, [r7, #8]
 801c1ba:	61fb      	str	r3, [r7, #28]

    act8 += LL_NEXT_P_OFFSET(ll_p);
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	3304      	adds	r3, #4
 801c1c2:	69fa      	ldr	r2, [r7, #28]
 801c1c4:	4413      	add	r3, r2
 801c1c6:	61fb      	str	r3, [r7, #28]
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 801c1c8:	69fb      	ldr	r3, [r7, #28]
 801c1ca:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;
 801c1cc:	1d3b      	adds	r3, r7, #4
 801c1ce:	617b      	str	r3, [r7, #20]

    *act_node_p = *next_node_p;
 801c1d0:	697b      	ldr	r3, [r7, #20]
 801c1d2:	681a      	ldr	r2, [r3, #0]
 801c1d4:	69bb      	ldr	r3, [r7, #24]
 801c1d6:	601a      	str	r2, [r3, #0]
 801c1d8:	e000      	b.n	801c1dc <node_set_next+0x36>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801c1da:	bf00      	nop
}
 801c1dc:	3724      	adds	r7, #36	; 0x24
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1e4:	4770      	bx	lr
	...

0801c1e8 <_lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
 801c1e8:	b480      	push	{r7}
 801c1ea:	b085      	sub	sp, #20
 801c1ec:	af00      	add	r7, sp, #0
 801c1ee:	4603      	mov	r3, r0
 801c1f0:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 801c1f2:	2300      	movs	r3, #0
 801c1f4:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 801c1f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c1fa:	4a31      	ldr	r2, [pc, #196]	; (801c2c0 <_lv_trigo_sin+0xd8>)
 801c1fc:	fb82 1203 	smull	r1, r2, r2, r3
 801c200:	441a      	add	r2, r3
 801c202:	1211      	asrs	r1, r2, #8
 801c204:	17da      	asrs	r2, r3, #31
 801c206:	1a8a      	subs	r2, r1, r2
 801c208:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801c20c:	fb01 f202 	mul.w	r2, r1, r2
 801c210:	1a9b      	subs	r3, r3, r2
 801c212:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 801c214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c218:	2b00      	cmp	r3, #0
 801c21a:	da04      	bge.n	801c226 <_lv_trigo_sin+0x3e>
 801c21c:	88fb      	ldrh	r3, [r7, #6]
 801c21e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801c222:	b29b      	uxth	r3, r3
 801c224:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 801c226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c22a:	2b59      	cmp	r3, #89	; 0x59
 801c22c:	dc06      	bgt.n	801c23c <_lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 801c22e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c232:	4a24      	ldr	r2, [pc, #144]	; (801c2c4 <_lv_trigo_sin+0xdc>)
 801c234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c238:	81fb      	strh	r3, [r7, #14]
 801c23a:	e038      	b.n	801c2ae <_lv_trigo_sin+0xc6>
    }
    else if(angle >= 90 && angle < 180) {
 801c23c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c240:	2b59      	cmp	r3, #89	; 0x59
 801c242:	dd0f      	ble.n	801c264 <_lv_trigo_sin+0x7c>
 801c244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c248:	2bb3      	cmp	r3, #179	; 0xb3
 801c24a:	dc0b      	bgt.n	801c264 <_lv_trigo_sin+0x7c>
        angle = 180 - angle;
 801c24c:	88fb      	ldrh	r3, [r7, #6]
 801c24e:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 801c252:	b29b      	uxth	r3, r3
 801c254:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 801c256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c25a:	4a1a      	ldr	r2, [pc, #104]	; (801c2c4 <_lv_trigo_sin+0xdc>)
 801c25c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c260:	81fb      	strh	r3, [r7, #14]
 801c262:	e024      	b.n	801c2ae <_lv_trigo_sin+0xc6>
    }
    else if(angle >= 180 && angle < 270) {
 801c264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c268:	2bb3      	cmp	r3, #179	; 0xb3
 801c26a:	dd12      	ble.n	801c292 <_lv_trigo_sin+0xaa>
 801c26c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c270:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c274:	da0d      	bge.n	801c292 <_lv_trigo_sin+0xaa>
        angle = angle - 180;
 801c276:	88fb      	ldrh	r3, [r7, #6]
 801c278:	3bb4      	subs	r3, #180	; 0xb4
 801c27a:	b29b      	uxth	r3, r3
 801c27c:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801c27e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c282:	4a10      	ldr	r2, [pc, #64]	; (801c2c4 <_lv_trigo_sin+0xdc>)
 801c284:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801c288:	b29b      	uxth	r3, r3
 801c28a:	425b      	negs	r3, r3
 801c28c:	b29b      	uxth	r3, r3
 801c28e:	81fb      	strh	r3, [r7, #14]
 801c290:	e00d      	b.n	801c2ae <_lv_trigo_sin+0xc6>
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 801c292:	88fb      	ldrh	r3, [r7, #6]
 801c294:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801c298:	b29b      	uxth	r3, r3
 801c29a:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801c29c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c2a0:	4a08      	ldr	r2, [pc, #32]	; (801c2c4 <_lv_trigo_sin+0xdc>)
 801c2a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801c2a6:	b29b      	uxth	r3, r3
 801c2a8:	425b      	negs	r3, r3
 801c2aa:	b29b      	uxth	r3, r3
 801c2ac:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 801c2ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801c2b2:	4618      	mov	r0, r3
 801c2b4:	3714      	adds	r7, #20
 801c2b6:	46bd      	mov	sp, r7
 801c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2bc:	4770      	bx	lr
 801c2be:	bf00      	nop
 801c2c0:	b60b60b7 	.word	0xb60b60b7
 801c2c4:	0802ba30 	.word	0x0802ba30

0801c2c8 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
 801c2c8:	b480      	push	{r7}
 801c2ca:	b087      	sub	sp, #28
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	60f8      	str	r0, [r7, #12]
 801c2d0:	60b9      	str	r1, [r7, #8]
 801c2d2:	607a      	str	r2, [r7, #4]
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	021b      	lsls	r3, r3, #8
 801c2d8:	60fb      	str	r3, [r7, #12]

    uint32_t root = 0;
 801c2da:	2300      	movs	r3, #0
 801c2dc:	617b      	str	r3, [r7, #20]
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 801c2de:	697a      	ldr	r2, [r7, #20]
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	4413      	add	r3, r2
 801c2e4:	613b      	str	r3, [r7, #16]
        if(trial * trial <= x) root = trial;
 801c2e6:	693b      	ldr	r3, [r7, #16]
 801c2e8:	693a      	ldr	r2, [r7, #16]
 801c2ea:	fb02 f303 	mul.w	r3, r2, r3
 801c2ee:	68fa      	ldr	r2, [r7, #12]
 801c2f0:	429a      	cmp	r2, r3
 801c2f2:	d301      	bcc.n	801c2f8 <_lv_sqrt+0x30>
 801c2f4:	693b      	ldr	r3, [r7, #16]
 801c2f6:	617b      	str	r3, [r7, #20]
        mask = mask >> 1;
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	085b      	lsrs	r3, r3, #1
 801c2fc:	607b      	str	r3, [r7, #4]
    } while(mask);
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d1ec      	bne.n	801c2de <_lv_sqrt+0x16>

    q->i = root >> 4;
 801c304:	697b      	ldr	r3, [r7, #20]
 801c306:	091b      	lsrs	r3, r3, #4
 801c308:	b29a      	uxth	r2, r3
 801c30a:	68bb      	ldr	r3, [r7, #8]
 801c30c:	801a      	strh	r2, [r3, #0]
    q->f = (root & 0xf) << 4;
 801c30e:	697b      	ldr	r3, [r7, #20]
 801c310:	b29b      	uxth	r3, r3
 801c312:	011b      	lsls	r3, r3, #4
 801c314:	b29b      	uxth	r3, r3
 801c316:	b2db      	uxtb	r3, r3
 801c318:	b29a      	uxth	r2, r3
 801c31a:	68bb      	ldr	r3, [r7, #8]
 801c31c:	805a      	strh	r2, [r3, #2]
}
 801c31e:	bf00      	nop
 801c320:	371c      	adds	r7, #28
 801c322:	46bd      	mov	sp, r7
 801c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c328:	4770      	bx	lr
	...

0801c32c <_lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void _lv_mem_init(void)
{
 801c32c:	b480      	push	{r7}
 801c32e:	b083      	sub	sp, #12
 801c330:	af00      	add	r7, sp, #0
#if LV_MEM_CUSTOM == 0

#if LV_MEM_ADR == 0
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_MEM_ATTR MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    work_mem = (uint8_t *)work_mem_int;
 801c332:	4b0c      	ldr	r3, [pc, #48]	; (801c364 <_lv_mem_init+0x38>)
 801c334:	4a0c      	ldr	r2, [pc, #48]	; (801c368 <_lv_mem_init+0x3c>)
 801c336:	601a      	str	r2, [r3, #0]
#else
    work_mem = (uint8_t *)LV_MEM_ADR;
#endif

    lv_mem_ent_t * full = (lv_mem_ent_t *)work_mem;
 801c338:	4b0a      	ldr	r3, [pc, #40]	; (801c364 <_lv_mem_init+0x38>)
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	607b      	str	r3, [r7, #4]
    full->header.s.used = 0;
 801c33e:	687a      	ldr	r2, [r7, #4]
 801c340:	7813      	ldrb	r3, [r2, #0]
 801c342:	f36f 0300 	bfc	r3, #0, #1
 801c346:	7013      	strb	r3, [r2, #0]
    /*The total mem size reduced by the first header and the close patterns */
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 801c348:	687a      	ldr	r2, [r7, #4]
 801c34a:	6813      	ldr	r3, [r2, #0]
 801c34c:	f647 71fc 	movw	r1, #32764	; 0x7ffc
 801c350:	f361 035f 	bfi	r3, r1, #1, #31
 801c354:	6013      	str	r3, [r2, #0]
#endif
}
 801c356:	bf00      	nop
 801c358:	370c      	adds	r7, #12
 801c35a:	46bd      	mov	sp, r7
 801c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c360:	4770      	bx	lr
 801c362:	bf00      	nop
 801c364:	20018064 	.word	0x20018064
 801c368:	20018090 	.word	0x20018090

0801c36c <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 801c36c:	b580      	push	{r7, lr}
 801c36e:	b084      	sub	sp, #16
 801c370:	af00      	add	r7, sp, #0
 801c372:	6078      	str	r0, [r7, #4]
    if(size == 0) {
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d101      	bne.n	801c37e <lv_mem_alloc+0x12>
        return &zero_mem;
 801c37a:	4b1e      	ldr	r3, [pc, #120]	; (801c3f4 <lv_mem_alloc+0x88>)
 801c37c:	e035      	b.n	801c3ea <lv_mem_alloc+0x7e>
    }

    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	3303      	adds	r3, #3
 801c382:	f023 0303 	bic.w	r3, r3, #3
 801c386:	607b      	str	r3, [r7, #4]
    void * alloc = NULL;
 801c388:	2300      	movs	r3, #0
 801c38a:	60fb      	str	r3, [r7, #12]

#if LV_MEM_CUSTOM == 0
    /*Use the built-in allocators*/
    lv_mem_ent_t * e = NULL;
 801c38c:	2300      	movs	r3, #0
 801c38e:	60bb      	str	r3, [r7, #8]

    /* Search for a appropriate entry*/
    do {
        /* Get the next entry*/
        e = ent_get_next(e);
 801c390:	68b8      	ldr	r0, [r7, #8]
 801c392:	f000 fe5f 	bl	801d054 <ent_get_next>
 801c396:	60b8      	str	r0, [r7, #8]

        /*If there is next entry then try to allocate there*/
        if(e != NULL) {
 801c398:	68bb      	ldr	r3, [r7, #8]
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	d004      	beq.n	801c3a8 <lv_mem_alloc+0x3c>
            alloc = ent_alloc(e, size);
 801c39e:	6879      	ldr	r1, [r7, #4]
 801c3a0:	68b8      	ldr	r0, [r7, #8]
 801c3a2:	f000 fe83 	bl	801d0ac <ent_alloc>
 801c3a6:	60f8      	str	r0, [r7, #12]
        }
        /* End if there is not next entry OR the alloc. is successful*/
    } while(e != NULL && alloc == NULL);
 801c3a8:	68bb      	ldr	r3, [r7, #8]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d002      	beq.n	801c3b4 <lv_mem_alloc+0x48>
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d0ed      	beq.n	801c390 <lv_mem_alloc+0x24>

#if LV_MEM_ADD_JUNK
    if(alloc != NULL) _lv_memset(alloc, 0xaa, size);
#endif

    if(alloc == NULL) {
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d016      	beq.n	801c3e8 <lv_mem_alloc+0x7c>
        LV_LOG_WARN("Couldn't allocate memory");
    }
    else {
#if LV_MEM_CUSTOM == 0
        /* just a safety check, should always be true */
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	4a0e      	ldr	r2, [pc, #56]	; (801c3f8 <lv_mem_alloc+0x8c>)
 801c3be:	6812      	ldr	r2, [r2, #0]
 801c3c0:	4293      	cmp	r3, r2
 801c3c2:	d911      	bls.n	801c3e8 <lv_mem_alloc+0x7c>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	4a0c      	ldr	r2, [pc, #48]	; (801c3f8 <lv_mem_alloc+0x8c>)
 801c3c8:	6812      	ldr	r2, [r2, #0]
 801c3ca:	1a9a      	subs	r2, r3, r2
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	441a      	add	r2, r3
 801c3d0:	4b0a      	ldr	r3, [pc, #40]	; (801c3fc <lv_mem_alloc+0x90>)
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	429a      	cmp	r2, r3
 801c3d6:	d907      	bls.n	801c3e8 <lv_mem_alloc+0x7c>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	4a07      	ldr	r2, [pc, #28]	; (801c3f8 <lv_mem_alloc+0x8c>)
 801c3dc:	6812      	ldr	r2, [r2, #0]
 801c3de:	1a9a      	subs	r2, r3, r2
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	4413      	add	r3, r2
 801c3e4:	4a05      	ldr	r2, [pc, #20]	; (801c3fc <lv_mem_alloc+0x90>)
 801c3e6:	6013      	str	r3, [r2, #0]
            }
        }
#endif
    }

    return alloc;
 801c3e8:	68fb      	ldr	r3, [r7, #12]
}
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	3710      	adds	r7, #16
 801c3ee:	46bd      	mov	sp, r7
 801c3f0:	bd80      	pop	{r7, pc}
 801c3f2:	bf00      	nop
 801c3f4:	20018068 	.word	0x20018068
 801c3f8:	20018064 	.word	0x20018064
 801c3fc:	2001806c 	.word	0x2001806c

0801c400 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
 801c400:	b580      	push	{r7, lr}
 801c402:	b084      	sub	sp, #16
 801c404:	af00      	add	r7, sp, #0
 801c406:	6078      	str	r0, [r7, #4]
    if(data == &zero_mem) return;
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	4a26      	ldr	r2, [pc, #152]	; (801c4a4 <lv_mem_free+0xa4>)
 801c40c:	4293      	cmp	r3, r2
 801c40e:	d040      	beq.n	801c492 <lv_mem_free+0x92>
    if(data == NULL) return;
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d03f      	beq.n	801c496 <lv_mem_free+0x96>
    _lv_memset((void *)data, 0xbb, _lv_mem_get_size(data));
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	3b04      	subs	r3, #4
 801c41a:	60bb      	str	r3, [r7, #8]
    e->header.s.used = 0;
 801c41c:	68ba      	ldr	r2, [r7, #8]
 801c41e:	7813      	ldrb	r3, [r2, #0]
 801c420:	f36f 0300 	bfc	r3, #0, #1
 801c424:	7013      	strb	r3, [r2, #0]
#endif

#if LV_MEM_CUSTOM == 0
#if LV_MEM_AUTO_DEFRAG
    static uint16_t full_defrag_cnt = 0;
    full_defrag_cnt++;
 801c426:	4b20      	ldr	r3, [pc, #128]	; (801c4a8 <lv_mem_free+0xa8>)
 801c428:	881b      	ldrh	r3, [r3, #0]
 801c42a:	3301      	adds	r3, #1
 801c42c:	b29a      	uxth	r2, r3
 801c42e:	4b1e      	ldr	r3, [pc, #120]	; (801c4a8 <lv_mem_free+0xa8>)
 801c430:	801a      	strh	r2, [r3, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 801c432:	4b1d      	ldr	r3, [pc, #116]	; (801c4a8 <lv_mem_free+0xa8>)
 801c434:	881b      	ldrh	r3, [r3, #0]
 801c436:	2b0f      	cmp	r3, #15
 801c438:	d825      	bhi.n	801c486 <lv_mem_free+0x86>
        /* Make a simple defrag.
         * Join the following free entries after this*/
        lv_mem_ent_t * e_next;
        e_next = ent_get_next(e);
 801c43a:	68b8      	ldr	r0, [r7, #8]
 801c43c:	f000 fe0a 	bl	801d054 <ent_get_next>
 801c440:	60f8      	str	r0, [r7, #12]
        while(e_next != NULL) {
 801c442:	e01c      	b.n	801c47e <lv_mem_free+0x7e>
            if(e_next->header.s.used == 0) {
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	781b      	ldrb	r3, [r3, #0]
 801c448:	f003 0301 	and.w	r3, r3, #1
 801c44c:	b2db      	uxtb	r3, r3
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d123      	bne.n	801c49a <lv_mem_free+0x9a>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 801c452:	68bb      	ldr	r3, [r7, #8]
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c45a:	461a      	mov	r2, r3
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c464:	4413      	add	r3, r2
 801c466:	3304      	adds	r3, #4
 801c468:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c46c:	68ba      	ldr	r2, [r7, #8]
 801c46e:	6813      	ldr	r3, [r2, #0]
 801c470:	f361 035f 	bfi	r3, r1, #1, #31
 801c474:	6013      	str	r3, [r2, #0]
            }
            else {
                break;
            }
            e_next = ent_get_next(e_next);
 801c476:	68f8      	ldr	r0, [r7, #12]
 801c478:	f000 fdec 	bl	801d054 <ent_get_next>
 801c47c:	60f8      	str	r0, [r7, #12]
        while(e_next != NULL) {
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d1df      	bne.n	801c444 <lv_mem_free+0x44>
 801c484:	e00a      	b.n	801c49c <lv_mem_free+0x9c>
        }
    }
    else {
        full_defrag_cnt = 0;
 801c486:	4b08      	ldr	r3, [pc, #32]	; (801c4a8 <lv_mem_free+0xa8>)
 801c488:	2200      	movs	r2, #0
 801c48a:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
 801c48c:	f000 f863 	bl	801c556 <lv_mem_defrag>
 801c490:	e004      	b.n	801c49c <lv_mem_free+0x9c>
    if(data == &zero_mem) return;
 801c492:	bf00      	nop
 801c494:	e002      	b.n	801c49c <lv_mem_free+0x9c>
    if(data == NULL) return;
 801c496:	bf00      	nop
 801c498:	e000      	b.n	801c49c <lv_mem_free+0x9c>
                break;
 801c49a:	bf00      	nop
    LV_MEM_CUSTOM_FREE(e);
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
 801c49c:	3710      	adds	r7, #16
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	bd80      	pop	{r7, pc}
 801c4a2:	bf00      	nop
 801c4a4:	20018068 	.word	0x20018068
 801c4a8:	20020090 	.word	0x20020090

0801c4ac <lv_mem_realloc>:
 */

#if LV_ENABLE_GC == 0

void * lv_mem_realloc(void * data_p, size_t new_size)
{
 801c4ac:	b580      	push	{r7, lr}
 801c4ae:	b086      	sub	sp, #24
 801c4b0:	af00      	add	r7, sp, #0
 801c4b2:	6078      	str	r0, [r7, #4]
 801c4b4:	6039      	str	r1, [r7, #0]
    /*Round the size up to ALIGN_MASK*/
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 801c4b6:	683b      	ldr	r3, [r7, #0]
 801c4b8:	3303      	adds	r3, #3
 801c4ba:	f023 0303 	bic.w	r3, r3, #3
 801c4be:	603b      	str	r3, [r7, #0]

    /*data_p could be previously freed pointer (in this case it is invalid)*/
    if(data_p != NULL) {
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d00b      	beq.n	801c4de <lv_mem_realloc+0x32>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	3b04      	subs	r3, #4
 801c4ca:	617b      	str	r3, [r7, #20]
        if(e->header.s.used == 0) {
 801c4cc:	697b      	ldr	r3, [r7, #20]
 801c4ce:	781b      	ldrb	r3, [r3, #0]
 801c4d0:	f003 0301 	and.w	r3, r3, #1
 801c4d4:	b2db      	uxtb	r3, r3
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d101      	bne.n	801c4de <lv_mem_realloc+0x32>
            data_p = NULL;
 801c4da:	2300      	movs	r3, #0
 801c4dc:	607b      	str	r3, [r7, #4]
        }
    }

    uint32_t old_size = _lv_mem_get_size(data_p);
 801c4de:	6878      	ldr	r0, [r7, #4]
 801c4e0:	f000 f888 	bl	801c5f4 <_lv_mem_get_size>
 801c4e4:	6138      	str	r0, [r7, #16]
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 801c4e6:	693a      	ldr	r2, [r7, #16]
 801c4e8:	683b      	ldr	r3, [r7, #0]
 801c4ea:	429a      	cmp	r2, r3
 801c4ec:	d101      	bne.n	801c4f2 <lv_mem_realloc+0x46>
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	e02d      	b.n	801c54e <lv_mem_realloc+0xa2>

#if LV_MEM_CUSTOM == 0
    /* Truncate the memory if the new size is smaller. */
    if(new_size < old_size) {
 801c4f2:	683a      	ldr	r2, [r7, #0]
 801c4f4:	693b      	ldr	r3, [r7, #16]
 801c4f6:	429a      	cmp	r2, r3
 801c4f8:	d209      	bcs.n	801c50e <lv_mem_realloc+0x62>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	3b04      	subs	r3, #4
 801c4fe:	60bb      	str	r3, [r7, #8]
        ent_trunc(e, new_size);
 801c500:	6839      	ldr	r1, [r7, #0]
 801c502:	68b8      	ldr	r0, [r7, #8]
 801c504:	f000 fdf9 	bl	801d0fa <ent_trunc>
        return &e->first_data;
 801c508:	68bb      	ldr	r3, [r7, #8]
 801c50a:	3304      	adds	r3, #4
 801c50c:	e01f      	b.n	801c54e <lv_mem_realloc+0xa2>
    }
#endif

    void * new_p;
    new_p = lv_mem_alloc(new_size);
 801c50e:	6838      	ldr	r0, [r7, #0]
 801c510:	f7ff ff2c 	bl	801c36c <lv_mem_alloc>
 801c514:	60f8      	str	r0, [r7, #12]
    if(new_p == NULL) {
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d101      	bne.n	801c520 <lv_mem_realloc+0x74>
        LV_LOG_WARN("Couldn't allocate memory");
        return NULL;
 801c51c:	2300      	movs	r3, #0
 801c51e:	e016      	b.n	801c54e <lv_mem_realloc+0xa2>
    }

    if(data_p != NULL) {
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	2b00      	cmp	r3, #0
 801c524:	d012      	beq.n	801c54c <lv_mem_realloc+0xa0>
        /*Copy the old data to the new. Use the smaller size*/
        if(old_size != 0 && new_size != 0) {
 801c526:	693b      	ldr	r3, [r7, #16]
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d00c      	beq.n	801c546 <lv_mem_realloc+0x9a>
 801c52c:	683b      	ldr	r3, [r7, #0]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d009      	beq.n	801c546 <lv_mem_realloc+0x9a>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 801c532:	693a      	ldr	r2, [r7, #16]
 801c534:	683b      	ldr	r3, [r7, #0]
 801c536:	4293      	cmp	r3, r2
 801c538:	bf28      	it	cs
 801c53a:	4613      	movcs	r3, r2
 801c53c:	461a      	mov	r2, r3
 801c53e:	6879      	ldr	r1, [r7, #4]
 801c540:	68f8      	ldr	r0, [r7, #12]
 801c542:	f000 f9d9 	bl	801c8f8 <_lv_memcpy>
        }
        lv_mem_free(data_p);
 801c546:	6878      	ldr	r0, [r7, #4]
 801c548:	f7ff ff5a 	bl	801c400 <lv_mem_free>
    }

    return new_p;
 801c54c:	68fb      	ldr	r3, [r7, #12]
}
 801c54e:	4618      	mov	r0, r3
 801c550:	3718      	adds	r7, #24
 801c552:	46bd      	mov	sp, r7
 801c554:	bd80      	pop	{r7, pc}

0801c556 <lv_mem_defrag>:

/**
 * Join the adjacent free memory blocks
 */
void lv_mem_defrag(void)
{
 801c556:	b580      	push	{r7, lr}
 801c558:	b082      	sub	sp, #8
 801c55a:	af00      	add	r7, sp, #0
#if LV_MEM_CUSTOM == 0
    lv_mem_ent_t * e_free;
    lv_mem_ent_t * e_next;
    e_free = ent_get_next(NULL);
 801c55c:	2000      	movs	r0, #0
 801c55e:	f000 fd79 	bl	801d054 <ent_get_next>
 801c562:	6078      	str	r0, [r7, #4]

    while(1) {
        /*Search the next free entry*/
        while(e_free != NULL) {
 801c564:	e00a      	b.n	801c57c <lv_mem_defrag+0x26>
            if(e_free->header.s.used != 0) {
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	781b      	ldrb	r3, [r3, #0]
 801c56a:	f003 0301 	and.w	r3, r3, #1
 801c56e:	b2db      	uxtb	r3, r3
 801c570:	2b00      	cmp	r3, #0
 801c572:	d007      	beq.n	801c584 <lv_mem_defrag+0x2e>
                e_free = ent_get_next(e_free);
 801c574:	6878      	ldr	r0, [r7, #4]
 801c576:	f000 fd6d 	bl	801d054 <ent_get_next>
 801c57a:	6078      	str	r0, [r7, #4]
        while(e_free != NULL) {
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d1f1      	bne.n	801c566 <lv_mem_defrag+0x10>
 801c582:	e000      	b.n	801c586 <lv_mem_defrag+0x30>
            }
            else {
                break;
 801c584:	bf00      	nop
            }
        }

        if(e_free == NULL) return;
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d02c      	beq.n	801c5e6 <lv_mem_defrag+0x90>

        /*Joint the following free entries to the free*/
        e_next = ent_get_next(e_free);
 801c58c:	6878      	ldr	r0, [r7, #4]
 801c58e:	f000 fd61 	bl	801d054 <ent_get_next>
 801c592:	6038      	str	r0, [r7, #0]
        while(e_next != NULL) {
 801c594:	e01c      	b.n	801c5d0 <lv_mem_defrag+0x7a>
            if(e_next->header.s.used == 0) {
 801c596:	683b      	ldr	r3, [r7, #0]
 801c598:	781b      	ldrb	r3, [r3, #0]
 801c59a:	f003 0301 	and.w	r3, r3, #1
 801c59e:	b2db      	uxtb	r3, r3
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d119      	bne.n	801c5d8 <lv_mem_defrag+0x82>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c5ac:	461a      	mov	r2, r3
 801c5ae:	683b      	ldr	r3, [r7, #0]
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c5b6:	4413      	add	r3, r2
 801c5b8:	3304      	adds	r3, #4
 801c5ba:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c5be:	687a      	ldr	r2, [r7, #4]
 801c5c0:	6813      	ldr	r3, [r2, #0]
 801c5c2:	f361 035f 	bfi	r3, r1, #1, #31
 801c5c6:	6013      	str	r3, [r2, #0]
            }
            else {
                break;
            }

            e_next = ent_get_next(e_next);
 801c5c8:	6838      	ldr	r0, [r7, #0]
 801c5ca:	f000 fd43 	bl	801d054 <ent_get_next>
 801c5ce:	6038      	str	r0, [r7, #0]
        while(e_next != NULL) {
 801c5d0:	683b      	ldr	r3, [r7, #0]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d1df      	bne.n	801c596 <lv_mem_defrag+0x40>
 801c5d6:	e000      	b.n	801c5da <lv_mem_defrag+0x84>
                break;
 801c5d8:	bf00      	nop
        }

        if(e_next == NULL) return;
 801c5da:	683b      	ldr	r3, [r7, #0]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d004      	beq.n	801c5ea <lv_mem_defrag+0x94>

        /*Continue from the lastly checked entry*/
        e_free = e_next;
 801c5e0:	683b      	ldr	r3, [r7, #0]
 801c5e2:	607b      	str	r3, [r7, #4]
        while(e_free != NULL) {
 801c5e4:	e7ca      	b.n	801c57c <lv_mem_defrag+0x26>
        if(e_free == NULL) return;
 801c5e6:	bf00      	nop
 801c5e8:	e000      	b.n	801c5ec <lv_mem_defrag+0x96>
        if(e_next == NULL) return;
 801c5ea:	bf00      	nop
    }
#endif
}
 801c5ec:	3708      	adds	r7, #8
 801c5ee:	46bd      	mov	sp, r7
 801c5f0:	bd80      	pop	{r7, pc}
	...

0801c5f4 <_lv_mem_get_size>:
 */

#if LV_ENABLE_GC == 0

uint32_t _lv_mem_get_size(const void * data)
{
 801c5f4:	b480      	push	{r7}
 801c5f6:	b085      	sub	sp, #20
 801c5f8:	af00      	add	r7, sp, #0
 801c5fa:	6078      	str	r0, [r7, #4]
    if(data == NULL) return 0;
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d101      	bne.n	801c606 <_lv_mem_get_size+0x12>
 801c602:	2300      	movs	r3, #0
 801c604:	e00c      	b.n	801c620 <_lv_mem_get_size+0x2c>
    if(data == &zero_mem) return 0;
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	4a08      	ldr	r2, [pc, #32]	; (801c62c <_lv_mem_get_size+0x38>)
 801c60a:	4293      	cmp	r3, r2
 801c60c:	d101      	bne.n	801c612 <_lv_mem_get_size+0x1e>
 801c60e:	2300      	movs	r3, #0
 801c610:	e006      	b.n	801c620 <_lv_mem_get_size+0x2c>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	3b04      	subs	r3, #4
 801c616:	60fb      	str	r3, [r7, #12]

    return e->header.s.d_size;
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	f3c3 035e 	ubfx	r3, r3, #1, #31
}
 801c620:	4618      	mov	r0, r3
 801c622:	3714      	adds	r7, #20
 801c624:	46bd      	mov	sp, r7
 801c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c62a:	4770      	bx	lr
 801c62c:	20018068 	.word	0x20018068

0801c630 <_lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * _lv_mem_buf_get(uint32_t size)
{
 801c630:	b580      	push	{r7, lr}
 801c632:	b084      	sub	sp, #16
 801c634:	af00      	add	r7, sp, #0
 801c636:	6078      	str	r0, [r7, #4]
    if(size == 0) return NULL;
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d101      	bne.n	801c642 <_lv_mem_buf_get+0x12>
 801c63e:	2300      	movs	r3, #0
 801c640:	e0c8      	b.n	801c7d4 <_lv_mem_buf_get+0x1a4>

    /*Try small static buffers first*/
    uint8_t i;
    if(size <= MEM_BUF_SMALL_SIZE) {
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	2b10      	cmp	r3, #16
 801c646:	d81f      	bhi.n	801c688 <_lv_mem_buf_get+0x58>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801c648:	2300      	movs	r3, #0
 801c64a:	73fb      	strb	r3, [r7, #15]
 801c64c:	e019      	b.n	801c682 <_lv_mem_buf_get+0x52>
            if(mem_buf_small[i].used == 0) {
 801c64e:	7bfb      	ldrb	r3, [r7, #15]
 801c650:	4a62      	ldr	r2, [pc, #392]	; (801c7dc <_lv_mem_buf_get+0x1ac>)
 801c652:	00db      	lsls	r3, r3, #3
 801c654:	4413      	add	r3, r2
 801c656:	799b      	ldrb	r3, [r3, #6]
 801c658:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c65c:	b2db      	uxtb	r3, r3
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d10c      	bne.n	801c67c <_lv_mem_buf_get+0x4c>
                mem_buf_small[i].used = 1;
 801c662:	7bfb      	ldrb	r3, [r7, #15]
 801c664:	4a5d      	ldr	r2, [pc, #372]	; (801c7dc <_lv_mem_buf_get+0x1ac>)
 801c666:	00db      	lsls	r3, r3, #3
 801c668:	4413      	add	r3, r2
 801c66a:	799a      	ldrb	r2, [r3, #6]
 801c66c:	f042 0201 	orr.w	r2, r2, #1
 801c670:	719a      	strb	r2, [r3, #6]
                return mem_buf_small[i].p;
 801c672:	7bfb      	ldrb	r3, [r7, #15]
 801c674:	4a59      	ldr	r2, [pc, #356]	; (801c7dc <_lv_mem_buf_get+0x1ac>)
 801c676:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c67a:	e0ab      	b.n	801c7d4 <_lv_mem_buf_get+0x1a4>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801c67c:	7bfb      	ldrb	r3, [r7, #15]
 801c67e:	3301      	adds	r3, #1
 801c680:	73fb      	strb	r3, [r7, #15]
 801c682:	7bfb      	ldrb	r3, [r7, #15]
 801c684:	2b01      	cmp	r3, #1
 801c686:	d9e2      	bls.n	801c64e <_lv_mem_buf_get+0x1e>
            }
        }
    }

    /*Try to find a free buffer with suitable size */
    int8_t i_guess = -1;
 801c688:	23ff      	movs	r3, #255	; 0xff
 801c68a:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c68c:	2300      	movs	r3, #0
 801c68e:	73fb      	strb	r3, [r7, #15]
 801c690:	e041      	b.n	801c716 <_lv_mem_buf_get+0xe6>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 801c692:	7bfb      	ldrb	r3, [r7, #15]
 801c694:	4a52      	ldr	r2, [pc, #328]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c696:	00db      	lsls	r3, r3, #3
 801c698:	4413      	add	r3, r2
 801c69a:	799b      	ldrb	r3, [r3, #6]
 801c69c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c6a0:	b2db      	uxtb	r3, r3
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d134      	bne.n	801c710 <_lv_mem_buf_get+0xe0>
 801c6a6:	7bfb      	ldrb	r3, [r7, #15]
 801c6a8:	4a4d      	ldr	r2, [pc, #308]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c6aa:	00db      	lsls	r3, r3, #3
 801c6ac:	4413      	add	r3, r2
 801c6ae:	889b      	ldrh	r3, [r3, #4]
 801c6b0:	461a      	mov	r2, r3
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	4293      	cmp	r3, r2
 801c6b6:	d82b      	bhi.n	801c710 <_lv_mem_buf_get+0xe0>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
 801c6b8:	7bfb      	ldrb	r3, [r7, #15]
 801c6ba:	4a49      	ldr	r2, [pc, #292]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c6bc:	00db      	lsls	r3, r3, #3
 801c6be:	4413      	add	r3, r2
 801c6c0:	889b      	ldrh	r3, [r3, #4]
 801c6c2:	461a      	mov	r2, r3
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	4293      	cmp	r3, r2
 801c6c8:	d10c      	bne.n	801c6e4 <_lv_mem_buf_get+0xb4>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 801c6ca:	7bfb      	ldrb	r3, [r7, #15]
 801c6cc:	4a44      	ldr	r2, [pc, #272]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c6ce:	00db      	lsls	r3, r3, #3
 801c6d0:	4413      	add	r3, r2
 801c6d2:	799a      	ldrb	r2, [r3, #6]
 801c6d4:	f042 0201 	orr.w	r2, r2, #1
 801c6d8:	719a      	strb	r2, [r3, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
 801c6da:	7bfb      	ldrb	r3, [r7, #15]
 801c6dc:	4a40      	ldr	r2, [pc, #256]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c6de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c6e2:	e077      	b.n	801c7d4 <_lv_mem_buf_get+0x1a4>
            }
            else if(i_guess < 0) {
 801c6e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	da02      	bge.n	801c6f2 <_lv_mem_buf_get+0xc2>
                i_guess = i;
 801c6ec:	7bfb      	ldrb	r3, [r7, #15]
 801c6ee:	73bb      	strb	r3, [r7, #14]
 801c6f0:	e00e      	b.n	801c710 <_lv_mem_buf_get+0xe0>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
 801c6f2:	7bfb      	ldrb	r3, [r7, #15]
 801c6f4:	4a3a      	ldr	r2, [pc, #232]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c6f6:	00db      	lsls	r3, r3, #3
 801c6f8:	4413      	add	r3, r2
 801c6fa:	889a      	ldrh	r2, [r3, #4]
 801c6fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c700:	4937      	ldr	r1, [pc, #220]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c702:	00db      	lsls	r3, r3, #3
 801c704:	440b      	add	r3, r1
 801c706:	889b      	ldrh	r3, [r3, #4]
 801c708:	429a      	cmp	r2, r3
 801c70a:	d201      	bcs.n	801c710 <_lv_mem_buf_get+0xe0>
                i_guess = i;
 801c70c:	7bfb      	ldrb	r3, [r7, #15]
 801c70e:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c710:	7bfb      	ldrb	r3, [r7, #15]
 801c712:	3301      	adds	r3, #1
 801c714:	73fb      	strb	r3, [r7, #15]
 801c716:	7bfb      	ldrb	r3, [r7, #15]
 801c718:	2b0f      	cmp	r3, #15
 801c71a:	d9ba      	bls.n	801c692 <_lv_mem_buf_get+0x62>
            }
        }
    }

    if(i_guess >= 0) {
 801c71c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c720:	2b00      	cmp	r3, #0
 801c722:	db0e      	blt.n	801c742 <_lv_mem_buf_get+0x112>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 801c724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c728:	4a2d      	ldr	r2, [pc, #180]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c72a:	00db      	lsls	r3, r3, #3
 801c72c:	4413      	add	r3, r2
 801c72e:	799a      	ldrb	r2, [r3, #6]
 801c730:	f042 0201 	orr.w	r2, r2, #1
 801c734:	719a      	strb	r2, [r3, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
 801c736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c73a:	4a29      	ldr	r2, [pc, #164]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c73c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c740:	e048      	b.n	801c7d4 <_lv_mem_buf_get+0x1a4>
    }

    /*Reallocate a free buffer*/
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c742:	2300      	movs	r3, #0
 801c744:	73fb      	strb	r3, [r7, #15]
 801c746:	e03a      	b.n	801c7be <_lv_mem_buf_get+0x18e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 801c748:	7bfb      	ldrb	r3, [r7, #15]
 801c74a:	4a25      	ldr	r2, [pc, #148]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c74c:	00db      	lsls	r3, r3, #3
 801c74e:	4413      	add	r3, r2
 801c750:	799b      	ldrb	r3, [r3, #6]
 801c752:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c756:	b2db      	uxtb	r3, r3
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d12d      	bne.n	801c7b8 <_lv_mem_buf_get+0x188>
            /*if this fails you probably need to increase your LV_MEM_SIZE/heap size*/
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
 801c75c:	7bfb      	ldrb	r3, [r7, #15]
 801c75e:	4a20      	ldr	r2, [pc, #128]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c760:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c764:	6879      	ldr	r1, [r7, #4]
 801c766:	4618      	mov	r0, r3
 801c768:	f7ff fea0 	bl	801c4ac <lv_mem_realloc>
 801c76c:	60b8      	str	r0, [r7, #8]
            if(buf == NULL) {
 801c76e:	68bb      	ldr	r3, [r7, #8]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d107      	bne.n	801c784 <_lv_mem_buf_get+0x154>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
 801c774:	f04f 0200 	mov.w	r2, #0
 801c778:	f04f 0300 	mov.w	r3, #0
 801c77c:	4819      	ldr	r0, [pc, #100]	; (801c7e4 <_lv_mem_buf_get+0x1b4>)
 801c77e:	f7ff f879 	bl	801b874 <lv_debug_log_error>
 801c782:	e7fe      	b.n	801c782 <_lv_mem_buf_get+0x152>
                return NULL;
            }
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 801c784:	7bfb      	ldrb	r3, [r7, #15]
 801c786:	4a16      	ldr	r2, [pc, #88]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c788:	00db      	lsls	r3, r3, #3
 801c78a:	4413      	add	r3, r2
 801c78c:	799a      	ldrb	r2, [r3, #6]
 801c78e:	f042 0201 	orr.w	r2, r2, #1
 801c792:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
 801c794:	7bfb      	ldrb	r3, [r7, #15]
 801c796:	687a      	ldr	r2, [r7, #4]
 801c798:	b291      	uxth	r1, r2
 801c79a:	4a11      	ldr	r2, [pc, #68]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c79c:	00db      	lsls	r3, r3, #3
 801c79e:	4413      	add	r3, r2
 801c7a0:	460a      	mov	r2, r1
 801c7a2:	809a      	strh	r2, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
 801c7a4:	7bfb      	ldrb	r3, [r7, #15]
 801c7a6:	490e      	ldr	r1, [pc, #56]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c7a8:	68ba      	ldr	r2, [r7, #8]
 801c7aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
 801c7ae:	7bfb      	ldrb	r3, [r7, #15]
 801c7b0:	4a0b      	ldr	r2, [pc, #44]	; (801c7e0 <_lv_mem_buf_get+0x1b0>)
 801c7b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c7b6:	e00d      	b.n	801c7d4 <_lv_mem_buf_get+0x1a4>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c7b8:	7bfb      	ldrb	r3, [r7, #15]
 801c7ba:	3301      	adds	r3, #1
 801c7bc:	73fb      	strb	r3, [r7, #15]
 801c7be:	7bfb      	ldrb	r3, [r7, #15]
 801c7c0:	2b0f      	cmp	r3, #15
 801c7c2:	d9c1      	bls.n	801c748 <_lv_mem_buf_get+0x118>
        }
    }

    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
 801c7c4:	f04f 0200 	mov.w	r2, #0
 801c7c8:	f04f 0300 	mov.w	r3, #0
 801c7cc:	4806      	ldr	r0, [pc, #24]	; (801c7e8 <_lv_mem_buf_get+0x1b8>)
 801c7ce:	f7ff f851 	bl	801b874 <lv_debug_log_error>
 801c7d2:	e7fe      	b.n	801c7d2 <_lv_mem_buf_get+0x1a2>
    return NULL;
}
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	3710      	adds	r7, #16
 801c7d8:	46bd      	mov	sp, r7
 801c7da:	bd80      	pop	{r7, pc}
 801c7dc:	20000034 	.word	0x20000034
 801c7e0:	200203b8 	.word	0x200203b8
 801c7e4:	08028404 	.word	0x08028404
 801c7e8:	08028458 	.word	0x08028458

0801c7ec <_lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void _lv_mem_buf_release(void * p)
{
 801c7ec:	b480      	push	{r7}
 801c7ee:	b085      	sub	sp, #20
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    /*Try small static buffers first*/
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	73fb      	strb	r3, [r7, #15]
 801c7f8:	e012      	b.n	801c820 <_lv_mem_buf_release+0x34>
        if(mem_buf_small[i].p == p) {
 801c7fa:	7bfb      	ldrb	r3, [r7, #15]
 801c7fc:	4a19      	ldr	r2, [pc, #100]	; (801c864 <_lv_mem_buf_release+0x78>)
 801c7fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c802:	687a      	ldr	r2, [r7, #4]
 801c804:	429a      	cmp	r2, r3
 801c806:	d108      	bne.n	801c81a <_lv_mem_buf_release+0x2e>
            mem_buf_small[i].used = 0;
 801c808:	7bfb      	ldrb	r3, [r7, #15]
 801c80a:	4a16      	ldr	r2, [pc, #88]	; (801c864 <_lv_mem_buf_release+0x78>)
 801c80c:	00db      	lsls	r3, r3, #3
 801c80e:	4413      	add	r3, r2
 801c810:	799a      	ldrb	r2, [r3, #6]
 801c812:	f36f 0200 	bfc	r2, #0, #1
 801c816:	719a      	strb	r2, [r3, #6]
            return;
 801c818:	e01e      	b.n	801c858 <_lv_mem_buf_release+0x6c>
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801c81a:	7bfb      	ldrb	r3, [r7, #15]
 801c81c:	3301      	adds	r3, #1
 801c81e:	73fb      	strb	r3, [r7, #15]
 801c820:	7bfb      	ldrb	r3, [r7, #15]
 801c822:	2b01      	cmp	r3, #1
 801c824:	d9e9      	bls.n	801c7fa <_lv_mem_buf_release+0xe>
        }
    }

    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c826:	2300      	movs	r3, #0
 801c828:	73fb      	strb	r3, [r7, #15]
 801c82a:	e012      	b.n	801c852 <_lv_mem_buf_release+0x66>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
 801c82c:	7bfb      	ldrb	r3, [r7, #15]
 801c82e:	4a0e      	ldr	r2, [pc, #56]	; (801c868 <_lv_mem_buf_release+0x7c>)
 801c830:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c834:	687a      	ldr	r2, [r7, #4]
 801c836:	429a      	cmp	r2, r3
 801c838:	d108      	bne.n	801c84c <_lv_mem_buf_release+0x60>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 801c83a:	7bfb      	ldrb	r3, [r7, #15]
 801c83c:	4a0a      	ldr	r2, [pc, #40]	; (801c868 <_lv_mem_buf_release+0x7c>)
 801c83e:	00db      	lsls	r3, r3, #3
 801c840:	4413      	add	r3, r2
 801c842:	799a      	ldrb	r2, [r3, #6]
 801c844:	f36f 0200 	bfc	r2, #0, #1
 801c848:	719a      	strb	r2, [r3, #6]
            return;
 801c84a:	e005      	b.n	801c858 <_lv_mem_buf_release+0x6c>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c84c:	7bfb      	ldrb	r3, [r7, #15]
 801c84e:	3301      	adds	r3, #1
 801c850:	73fb      	strb	r3, [r7, #15]
 801c852:	7bfb      	ldrb	r3, [r7, #15]
 801c854:	2b0f      	cmp	r3, #15
 801c856:	d9e9      	bls.n	801c82c <_lv_mem_buf_release+0x40>
        }
    }

    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
}
 801c858:	3714      	adds	r7, #20
 801c85a:	46bd      	mov	sp, r7
 801c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c860:	4770      	bx	lr
 801c862:	bf00      	nop
 801c864:	20000034 	.word	0x20000034
 801c868:	200203b8 	.word	0x200203b8

0801c86c <_lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void _lv_mem_buf_free_all(void)
{
 801c86c:	b580      	push	{r7, lr}
 801c86e:	b082      	sub	sp, #8
 801c870:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801c872:	2300      	movs	r3, #0
 801c874:	71fb      	strb	r3, [r7, #7]
 801c876:	e00a      	b.n	801c88e <_lv_mem_buf_free_all+0x22>
        mem_buf_small[i].used = 0;
 801c878:	79fb      	ldrb	r3, [r7, #7]
 801c87a:	4a1d      	ldr	r2, [pc, #116]	; (801c8f0 <_lv_mem_buf_free_all+0x84>)
 801c87c:	00db      	lsls	r3, r3, #3
 801c87e:	4413      	add	r3, r2
 801c880:	799a      	ldrb	r2, [r3, #6]
 801c882:	f36f 0200 	bfc	r2, #0, #1
 801c886:	719a      	strb	r2, [r3, #6]
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801c888:	79fb      	ldrb	r3, [r7, #7]
 801c88a:	3301      	adds	r3, #1
 801c88c:	71fb      	strb	r3, [r7, #7]
 801c88e:	79fb      	ldrb	r3, [r7, #7]
 801c890:	2b01      	cmp	r3, #1
 801c892:	d9f1      	bls.n	801c878 <_lv_mem_buf_free_all+0xc>
    }

    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c894:	2300      	movs	r3, #0
 801c896:	71fb      	strb	r3, [r7, #7]
 801c898:	e022      	b.n	801c8e0 <_lv_mem_buf_free_all+0x74>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
 801c89a:	79fb      	ldrb	r3, [r7, #7]
 801c89c:	4a15      	ldr	r2, [pc, #84]	; (801c8f4 <_lv_mem_buf_free_all+0x88>)
 801c89e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d019      	beq.n	801c8da <_lv_mem_buf_free_all+0x6e>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
 801c8a6:	79fb      	ldrb	r3, [r7, #7]
 801c8a8:	4a12      	ldr	r2, [pc, #72]	; (801c8f4 <_lv_mem_buf_free_all+0x88>)
 801c8aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f7ff fda6 	bl	801c400 <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 801c8b4:	79fb      	ldrb	r3, [r7, #7]
 801c8b6:	4a0f      	ldr	r2, [pc, #60]	; (801c8f4 <_lv_mem_buf_free_all+0x88>)
 801c8b8:	2100      	movs	r1, #0
 801c8ba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 801c8be:	79fb      	ldrb	r3, [r7, #7]
 801c8c0:	4a0c      	ldr	r2, [pc, #48]	; (801c8f4 <_lv_mem_buf_free_all+0x88>)
 801c8c2:	00db      	lsls	r3, r3, #3
 801c8c4:	4413      	add	r3, r2
 801c8c6:	799a      	ldrb	r2, [r3, #6]
 801c8c8:	f36f 0200 	bfc	r2, #0, #1
 801c8cc:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
 801c8ce:	79fb      	ldrb	r3, [r7, #7]
 801c8d0:	4a08      	ldr	r2, [pc, #32]	; (801c8f4 <_lv_mem_buf_free_all+0x88>)
 801c8d2:	00db      	lsls	r3, r3, #3
 801c8d4:	4413      	add	r3, r2
 801c8d6:	2200      	movs	r2, #0
 801c8d8:	809a      	strh	r2, [r3, #4]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c8da:	79fb      	ldrb	r3, [r7, #7]
 801c8dc:	3301      	adds	r3, #1
 801c8de:	71fb      	strb	r3, [r7, #7]
 801c8e0:	79fb      	ldrb	r3, [r7, #7]
 801c8e2:	2b0f      	cmp	r3, #15
 801c8e4:	d9d9      	bls.n	801c89a <_lv_mem_buf_free_all+0x2e>
        }
    }
}
 801c8e6:	bf00      	nop
 801c8e8:	3708      	adds	r7, #8
 801c8ea:	46bd      	mov	sp, r7
 801c8ec:	bd80      	pop	{r7, pc}
 801c8ee:	bf00      	nop
 801c8f0:	20000034 	.word	0x20000034
 801c8f4:	200203b8 	.word	0x200203b8

0801c8f8 <_lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * _lv_memcpy(void * dst, const void * src, size_t len)
{
 801c8f8:	b480      	push	{r7}
 801c8fa:	b08b      	sub	sp, #44	; 0x2c
 801c8fc:	af00      	add	r7, sp, #0
 801c8fe:	60f8      	str	r0, [r7, #12]
 801c900:	60b9      	str	r1, [r7, #8]
 801c902:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = dst;
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	627b      	str	r3, [r7, #36]	; 0x24
    const uint8_t * s8 = src;
 801c908:	68bb      	ldr	r3, [r7, #8]
 801c90a:	623b      	str	r3, [r7, #32]

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 801c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c90e:	f003 0303 	and.w	r3, r3, #3
 801c912:	61fb      	str	r3, [r7, #28]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 801c914:	6a3b      	ldr	r3, [r7, #32]
 801c916:	f003 0303 	and.w	r3, r3, #3
 801c91a:	613b      	str	r3, [r7, #16]

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 801c91c:	693a      	ldr	r2, [r7, #16]
 801c91e:	69fb      	ldr	r3, [r7, #28]
 801c920:	429a      	cmp	r2, r3
 801c922:	f000 815b 	beq.w	801cbdc <_lv_memcpy+0x2e4>
        while(len > 32) {
 801c926:	e142      	b.n	801cbae <_lv_memcpy+0x2b6>
            REPEAT8(COPY8);
 801c928:	6a3b      	ldr	r3, [r7, #32]
 801c92a:	781a      	ldrb	r2, [r3, #0]
 801c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c92e:	701a      	strb	r2, [r3, #0]
 801c930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c932:	3301      	adds	r3, #1
 801c934:	627b      	str	r3, [r7, #36]	; 0x24
 801c936:	6a3b      	ldr	r3, [r7, #32]
 801c938:	3301      	adds	r3, #1
 801c93a:	623b      	str	r3, [r7, #32]
 801c93c:	6a3b      	ldr	r3, [r7, #32]
 801c93e:	781a      	ldrb	r2, [r3, #0]
 801c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c942:	701a      	strb	r2, [r3, #0]
 801c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c946:	3301      	adds	r3, #1
 801c948:	627b      	str	r3, [r7, #36]	; 0x24
 801c94a:	6a3b      	ldr	r3, [r7, #32]
 801c94c:	3301      	adds	r3, #1
 801c94e:	623b      	str	r3, [r7, #32]
 801c950:	6a3b      	ldr	r3, [r7, #32]
 801c952:	781a      	ldrb	r2, [r3, #0]
 801c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c956:	701a      	strb	r2, [r3, #0]
 801c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c95a:	3301      	adds	r3, #1
 801c95c:	627b      	str	r3, [r7, #36]	; 0x24
 801c95e:	6a3b      	ldr	r3, [r7, #32]
 801c960:	3301      	adds	r3, #1
 801c962:	623b      	str	r3, [r7, #32]
 801c964:	6a3b      	ldr	r3, [r7, #32]
 801c966:	781a      	ldrb	r2, [r3, #0]
 801c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c96a:	701a      	strb	r2, [r3, #0]
 801c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c96e:	3301      	adds	r3, #1
 801c970:	627b      	str	r3, [r7, #36]	; 0x24
 801c972:	6a3b      	ldr	r3, [r7, #32]
 801c974:	3301      	adds	r3, #1
 801c976:	623b      	str	r3, [r7, #32]
 801c978:	6a3b      	ldr	r3, [r7, #32]
 801c97a:	781a      	ldrb	r2, [r3, #0]
 801c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c97e:	701a      	strb	r2, [r3, #0]
 801c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c982:	3301      	adds	r3, #1
 801c984:	627b      	str	r3, [r7, #36]	; 0x24
 801c986:	6a3b      	ldr	r3, [r7, #32]
 801c988:	3301      	adds	r3, #1
 801c98a:	623b      	str	r3, [r7, #32]
 801c98c:	6a3b      	ldr	r3, [r7, #32]
 801c98e:	781a      	ldrb	r2, [r3, #0]
 801c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c992:	701a      	strb	r2, [r3, #0]
 801c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c996:	3301      	adds	r3, #1
 801c998:	627b      	str	r3, [r7, #36]	; 0x24
 801c99a:	6a3b      	ldr	r3, [r7, #32]
 801c99c:	3301      	adds	r3, #1
 801c99e:	623b      	str	r3, [r7, #32]
 801c9a0:	6a3b      	ldr	r3, [r7, #32]
 801c9a2:	781a      	ldrb	r2, [r3, #0]
 801c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9a6:	701a      	strb	r2, [r3, #0]
 801c9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9aa:	3301      	adds	r3, #1
 801c9ac:	627b      	str	r3, [r7, #36]	; 0x24
 801c9ae:	6a3b      	ldr	r3, [r7, #32]
 801c9b0:	3301      	adds	r3, #1
 801c9b2:	623b      	str	r3, [r7, #32]
 801c9b4:	6a3b      	ldr	r3, [r7, #32]
 801c9b6:	781a      	ldrb	r2, [r3, #0]
 801c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9ba:	701a      	strb	r2, [r3, #0]
 801c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9be:	3301      	adds	r3, #1
 801c9c0:	627b      	str	r3, [r7, #36]	; 0x24
 801c9c2:	6a3b      	ldr	r3, [r7, #32]
 801c9c4:	3301      	adds	r3, #1
 801c9c6:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 801c9c8:	6a3b      	ldr	r3, [r7, #32]
 801c9ca:	781a      	ldrb	r2, [r3, #0]
 801c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9ce:	701a      	strb	r2, [r3, #0]
 801c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9d2:	3301      	adds	r3, #1
 801c9d4:	627b      	str	r3, [r7, #36]	; 0x24
 801c9d6:	6a3b      	ldr	r3, [r7, #32]
 801c9d8:	3301      	adds	r3, #1
 801c9da:	623b      	str	r3, [r7, #32]
 801c9dc:	6a3b      	ldr	r3, [r7, #32]
 801c9de:	781a      	ldrb	r2, [r3, #0]
 801c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9e2:	701a      	strb	r2, [r3, #0]
 801c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9e6:	3301      	adds	r3, #1
 801c9e8:	627b      	str	r3, [r7, #36]	; 0x24
 801c9ea:	6a3b      	ldr	r3, [r7, #32]
 801c9ec:	3301      	adds	r3, #1
 801c9ee:	623b      	str	r3, [r7, #32]
 801c9f0:	6a3b      	ldr	r3, [r7, #32]
 801c9f2:	781a      	ldrb	r2, [r3, #0]
 801c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9f6:	701a      	strb	r2, [r3, #0]
 801c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9fa:	3301      	adds	r3, #1
 801c9fc:	627b      	str	r3, [r7, #36]	; 0x24
 801c9fe:	6a3b      	ldr	r3, [r7, #32]
 801ca00:	3301      	adds	r3, #1
 801ca02:	623b      	str	r3, [r7, #32]
 801ca04:	6a3b      	ldr	r3, [r7, #32]
 801ca06:	781a      	ldrb	r2, [r3, #0]
 801ca08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca0a:	701a      	strb	r2, [r3, #0]
 801ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca0e:	3301      	adds	r3, #1
 801ca10:	627b      	str	r3, [r7, #36]	; 0x24
 801ca12:	6a3b      	ldr	r3, [r7, #32]
 801ca14:	3301      	adds	r3, #1
 801ca16:	623b      	str	r3, [r7, #32]
 801ca18:	6a3b      	ldr	r3, [r7, #32]
 801ca1a:	781a      	ldrb	r2, [r3, #0]
 801ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca1e:	701a      	strb	r2, [r3, #0]
 801ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca22:	3301      	adds	r3, #1
 801ca24:	627b      	str	r3, [r7, #36]	; 0x24
 801ca26:	6a3b      	ldr	r3, [r7, #32]
 801ca28:	3301      	adds	r3, #1
 801ca2a:	623b      	str	r3, [r7, #32]
 801ca2c:	6a3b      	ldr	r3, [r7, #32]
 801ca2e:	781a      	ldrb	r2, [r3, #0]
 801ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca32:	701a      	strb	r2, [r3, #0]
 801ca34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca36:	3301      	adds	r3, #1
 801ca38:	627b      	str	r3, [r7, #36]	; 0x24
 801ca3a:	6a3b      	ldr	r3, [r7, #32]
 801ca3c:	3301      	adds	r3, #1
 801ca3e:	623b      	str	r3, [r7, #32]
 801ca40:	6a3b      	ldr	r3, [r7, #32]
 801ca42:	781a      	ldrb	r2, [r3, #0]
 801ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca46:	701a      	strb	r2, [r3, #0]
 801ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca4a:	3301      	adds	r3, #1
 801ca4c:	627b      	str	r3, [r7, #36]	; 0x24
 801ca4e:	6a3b      	ldr	r3, [r7, #32]
 801ca50:	3301      	adds	r3, #1
 801ca52:	623b      	str	r3, [r7, #32]
 801ca54:	6a3b      	ldr	r3, [r7, #32]
 801ca56:	781a      	ldrb	r2, [r3, #0]
 801ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca5a:	701a      	strb	r2, [r3, #0]
 801ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca5e:	3301      	adds	r3, #1
 801ca60:	627b      	str	r3, [r7, #36]	; 0x24
 801ca62:	6a3b      	ldr	r3, [r7, #32]
 801ca64:	3301      	adds	r3, #1
 801ca66:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 801ca68:	6a3b      	ldr	r3, [r7, #32]
 801ca6a:	781a      	ldrb	r2, [r3, #0]
 801ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca6e:	701a      	strb	r2, [r3, #0]
 801ca70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca72:	3301      	adds	r3, #1
 801ca74:	627b      	str	r3, [r7, #36]	; 0x24
 801ca76:	6a3b      	ldr	r3, [r7, #32]
 801ca78:	3301      	adds	r3, #1
 801ca7a:	623b      	str	r3, [r7, #32]
 801ca7c:	6a3b      	ldr	r3, [r7, #32]
 801ca7e:	781a      	ldrb	r2, [r3, #0]
 801ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca82:	701a      	strb	r2, [r3, #0]
 801ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca86:	3301      	adds	r3, #1
 801ca88:	627b      	str	r3, [r7, #36]	; 0x24
 801ca8a:	6a3b      	ldr	r3, [r7, #32]
 801ca8c:	3301      	adds	r3, #1
 801ca8e:	623b      	str	r3, [r7, #32]
 801ca90:	6a3b      	ldr	r3, [r7, #32]
 801ca92:	781a      	ldrb	r2, [r3, #0]
 801ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca96:	701a      	strb	r2, [r3, #0]
 801ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca9a:	3301      	adds	r3, #1
 801ca9c:	627b      	str	r3, [r7, #36]	; 0x24
 801ca9e:	6a3b      	ldr	r3, [r7, #32]
 801caa0:	3301      	adds	r3, #1
 801caa2:	623b      	str	r3, [r7, #32]
 801caa4:	6a3b      	ldr	r3, [r7, #32]
 801caa6:	781a      	ldrb	r2, [r3, #0]
 801caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caaa:	701a      	strb	r2, [r3, #0]
 801caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caae:	3301      	adds	r3, #1
 801cab0:	627b      	str	r3, [r7, #36]	; 0x24
 801cab2:	6a3b      	ldr	r3, [r7, #32]
 801cab4:	3301      	adds	r3, #1
 801cab6:	623b      	str	r3, [r7, #32]
 801cab8:	6a3b      	ldr	r3, [r7, #32]
 801caba:	781a      	ldrb	r2, [r3, #0]
 801cabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cabe:	701a      	strb	r2, [r3, #0]
 801cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cac2:	3301      	adds	r3, #1
 801cac4:	627b      	str	r3, [r7, #36]	; 0x24
 801cac6:	6a3b      	ldr	r3, [r7, #32]
 801cac8:	3301      	adds	r3, #1
 801caca:	623b      	str	r3, [r7, #32]
 801cacc:	6a3b      	ldr	r3, [r7, #32]
 801cace:	781a      	ldrb	r2, [r3, #0]
 801cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cad2:	701a      	strb	r2, [r3, #0]
 801cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cad6:	3301      	adds	r3, #1
 801cad8:	627b      	str	r3, [r7, #36]	; 0x24
 801cada:	6a3b      	ldr	r3, [r7, #32]
 801cadc:	3301      	adds	r3, #1
 801cade:	623b      	str	r3, [r7, #32]
 801cae0:	6a3b      	ldr	r3, [r7, #32]
 801cae2:	781a      	ldrb	r2, [r3, #0]
 801cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cae6:	701a      	strb	r2, [r3, #0]
 801cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caea:	3301      	adds	r3, #1
 801caec:	627b      	str	r3, [r7, #36]	; 0x24
 801caee:	6a3b      	ldr	r3, [r7, #32]
 801caf0:	3301      	adds	r3, #1
 801caf2:	623b      	str	r3, [r7, #32]
 801caf4:	6a3b      	ldr	r3, [r7, #32]
 801caf6:	781a      	ldrb	r2, [r3, #0]
 801caf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cafa:	701a      	strb	r2, [r3, #0]
 801cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cafe:	3301      	adds	r3, #1
 801cb00:	627b      	str	r3, [r7, #36]	; 0x24
 801cb02:	6a3b      	ldr	r3, [r7, #32]
 801cb04:	3301      	adds	r3, #1
 801cb06:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 801cb08:	6a3b      	ldr	r3, [r7, #32]
 801cb0a:	781a      	ldrb	r2, [r3, #0]
 801cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb0e:	701a      	strb	r2, [r3, #0]
 801cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb12:	3301      	adds	r3, #1
 801cb14:	627b      	str	r3, [r7, #36]	; 0x24
 801cb16:	6a3b      	ldr	r3, [r7, #32]
 801cb18:	3301      	adds	r3, #1
 801cb1a:	623b      	str	r3, [r7, #32]
 801cb1c:	6a3b      	ldr	r3, [r7, #32]
 801cb1e:	781a      	ldrb	r2, [r3, #0]
 801cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb22:	701a      	strb	r2, [r3, #0]
 801cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb26:	3301      	adds	r3, #1
 801cb28:	627b      	str	r3, [r7, #36]	; 0x24
 801cb2a:	6a3b      	ldr	r3, [r7, #32]
 801cb2c:	3301      	adds	r3, #1
 801cb2e:	623b      	str	r3, [r7, #32]
 801cb30:	6a3b      	ldr	r3, [r7, #32]
 801cb32:	781a      	ldrb	r2, [r3, #0]
 801cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb36:	701a      	strb	r2, [r3, #0]
 801cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb3a:	3301      	adds	r3, #1
 801cb3c:	627b      	str	r3, [r7, #36]	; 0x24
 801cb3e:	6a3b      	ldr	r3, [r7, #32]
 801cb40:	3301      	adds	r3, #1
 801cb42:	623b      	str	r3, [r7, #32]
 801cb44:	6a3b      	ldr	r3, [r7, #32]
 801cb46:	781a      	ldrb	r2, [r3, #0]
 801cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb4a:	701a      	strb	r2, [r3, #0]
 801cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb4e:	3301      	adds	r3, #1
 801cb50:	627b      	str	r3, [r7, #36]	; 0x24
 801cb52:	6a3b      	ldr	r3, [r7, #32]
 801cb54:	3301      	adds	r3, #1
 801cb56:	623b      	str	r3, [r7, #32]
 801cb58:	6a3b      	ldr	r3, [r7, #32]
 801cb5a:	781a      	ldrb	r2, [r3, #0]
 801cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb5e:	701a      	strb	r2, [r3, #0]
 801cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb62:	3301      	adds	r3, #1
 801cb64:	627b      	str	r3, [r7, #36]	; 0x24
 801cb66:	6a3b      	ldr	r3, [r7, #32]
 801cb68:	3301      	adds	r3, #1
 801cb6a:	623b      	str	r3, [r7, #32]
 801cb6c:	6a3b      	ldr	r3, [r7, #32]
 801cb6e:	781a      	ldrb	r2, [r3, #0]
 801cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb72:	701a      	strb	r2, [r3, #0]
 801cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb76:	3301      	adds	r3, #1
 801cb78:	627b      	str	r3, [r7, #36]	; 0x24
 801cb7a:	6a3b      	ldr	r3, [r7, #32]
 801cb7c:	3301      	adds	r3, #1
 801cb7e:	623b      	str	r3, [r7, #32]
 801cb80:	6a3b      	ldr	r3, [r7, #32]
 801cb82:	781a      	ldrb	r2, [r3, #0]
 801cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb86:	701a      	strb	r2, [r3, #0]
 801cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb8a:	3301      	adds	r3, #1
 801cb8c:	627b      	str	r3, [r7, #36]	; 0x24
 801cb8e:	6a3b      	ldr	r3, [r7, #32]
 801cb90:	3301      	adds	r3, #1
 801cb92:	623b      	str	r3, [r7, #32]
 801cb94:	6a3b      	ldr	r3, [r7, #32]
 801cb96:	781a      	ldrb	r2, [r3, #0]
 801cb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb9a:	701a      	strb	r2, [r3, #0]
 801cb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb9e:	3301      	adds	r3, #1
 801cba0:	627b      	str	r3, [r7, #36]	; 0x24
 801cba2:	6a3b      	ldr	r3, [r7, #32]
 801cba4:	3301      	adds	r3, #1
 801cba6:	623b      	str	r3, [r7, #32]
            len -= 32;
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	3b20      	subs	r3, #32
 801cbac:	607b      	str	r3, [r7, #4]
        while(len > 32) {
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	2b20      	cmp	r3, #32
 801cbb2:	f63f aeb9 	bhi.w	801c928 <_lv_memcpy+0x30>
        }
        while(len) {
 801cbb6:	e00c      	b.n	801cbd2 <_lv_memcpy+0x2da>
            COPY8
 801cbb8:	6a3b      	ldr	r3, [r7, #32]
 801cbba:	781a      	ldrb	r2, [r3, #0]
 801cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbbe:	701a      	strb	r2, [r3, #0]
 801cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbc2:	3301      	adds	r3, #1
 801cbc4:	627b      	str	r3, [r7, #36]	; 0x24
 801cbc6:	6a3b      	ldr	r3, [r7, #32]
 801cbc8:	3301      	adds	r3, #1
 801cbca:	623b      	str	r3, [r7, #32]
            len--;
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	3b01      	subs	r3, #1
 801cbd0:	607b      	str	r3, [r7, #4]
        while(len) {
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d1ef      	bne.n	801cbb8 <_lv_memcpy+0x2c0>
        }
        return dst;
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	e09f      	b.n	801cd1c <_lv_memcpy+0x424>
    }

    /*Make the memories aligned*/
    if(d_align) {
 801cbdc:	69fb      	ldr	r3, [r7, #28]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d01a      	beq.n	801cc18 <_lv_memcpy+0x320>
        d_align = ALIGN_MASK + 1 - d_align;
 801cbe2:	69fb      	ldr	r3, [r7, #28]
 801cbe4:	f1c3 0304 	rsb	r3, r3, #4
 801cbe8:	61fb      	str	r3, [r7, #28]
        while(d_align && len) {
 801cbea:	e00f      	b.n	801cc0c <_lv_memcpy+0x314>
            COPY8;
 801cbec:	6a3b      	ldr	r3, [r7, #32]
 801cbee:	781a      	ldrb	r2, [r3, #0]
 801cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbf2:	701a      	strb	r2, [r3, #0]
 801cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbf6:	3301      	adds	r3, #1
 801cbf8:	627b      	str	r3, [r7, #36]	; 0x24
 801cbfa:	6a3b      	ldr	r3, [r7, #32]
 801cbfc:	3301      	adds	r3, #1
 801cbfe:	623b      	str	r3, [r7, #32]
            d_align--;
 801cc00:	69fb      	ldr	r3, [r7, #28]
 801cc02:	3b01      	subs	r3, #1
 801cc04:	61fb      	str	r3, [r7, #28]
            len--;
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	3b01      	subs	r3, #1
 801cc0a:	607b      	str	r3, [r7, #4]
        while(d_align && len) {
 801cc0c:	69fb      	ldr	r3, [r7, #28]
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d002      	beq.n	801cc18 <_lv_memcpy+0x320>
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d1e9      	bne.n	801cbec <_lv_memcpy+0x2f4>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 801cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc1a:	61bb      	str	r3, [r7, #24]
    const uint32_t * s32 = (uint32_t *)s8;
 801cc1c:	6a3b      	ldr	r3, [r7, #32]
 801cc1e:	617b      	str	r3, [r7, #20]
    while(len > 32) {
 801cc20:	e052      	b.n	801ccc8 <_lv_memcpy+0x3d0>
        REPEAT8(COPY32)
 801cc22:	697b      	ldr	r3, [r7, #20]
 801cc24:	681a      	ldr	r2, [r3, #0]
 801cc26:	69bb      	ldr	r3, [r7, #24]
 801cc28:	601a      	str	r2, [r3, #0]
 801cc2a:	69bb      	ldr	r3, [r7, #24]
 801cc2c:	3304      	adds	r3, #4
 801cc2e:	61bb      	str	r3, [r7, #24]
 801cc30:	697b      	ldr	r3, [r7, #20]
 801cc32:	3304      	adds	r3, #4
 801cc34:	617b      	str	r3, [r7, #20]
 801cc36:	697b      	ldr	r3, [r7, #20]
 801cc38:	681a      	ldr	r2, [r3, #0]
 801cc3a:	69bb      	ldr	r3, [r7, #24]
 801cc3c:	601a      	str	r2, [r3, #0]
 801cc3e:	69bb      	ldr	r3, [r7, #24]
 801cc40:	3304      	adds	r3, #4
 801cc42:	61bb      	str	r3, [r7, #24]
 801cc44:	697b      	ldr	r3, [r7, #20]
 801cc46:	3304      	adds	r3, #4
 801cc48:	617b      	str	r3, [r7, #20]
 801cc4a:	697b      	ldr	r3, [r7, #20]
 801cc4c:	681a      	ldr	r2, [r3, #0]
 801cc4e:	69bb      	ldr	r3, [r7, #24]
 801cc50:	601a      	str	r2, [r3, #0]
 801cc52:	69bb      	ldr	r3, [r7, #24]
 801cc54:	3304      	adds	r3, #4
 801cc56:	61bb      	str	r3, [r7, #24]
 801cc58:	697b      	ldr	r3, [r7, #20]
 801cc5a:	3304      	adds	r3, #4
 801cc5c:	617b      	str	r3, [r7, #20]
 801cc5e:	697b      	ldr	r3, [r7, #20]
 801cc60:	681a      	ldr	r2, [r3, #0]
 801cc62:	69bb      	ldr	r3, [r7, #24]
 801cc64:	601a      	str	r2, [r3, #0]
 801cc66:	69bb      	ldr	r3, [r7, #24]
 801cc68:	3304      	adds	r3, #4
 801cc6a:	61bb      	str	r3, [r7, #24]
 801cc6c:	697b      	ldr	r3, [r7, #20]
 801cc6e:	3304      	adds	r3, #4
 801cc70:	617b      	str	r3, [r7, #20]
 801cc72:	697b      	ldr	r3, [r7, #20]
 801cc74:	681a      	ldr	r2, [r3, #0]
 801cc76:	69bb      	ldr	r3, [r7, #24]
 801cc78:	601a      	str	r2, [r3, #0]
 801cc7a:	69bb      	ldr	r3, [r7, #24]
 801cc7c:	3304      	adds	r3, #4
 801cc7e:	61bb      	str	r3, [r7, #24]
 801cc80:	697b      	ldr	r3, [r7, #20]
 801cc82:	3304      	adds	r3, #4
 801cc84:	617b      	str	r3, [r7, #20]
 801cc86:	697b      	ldr	r3, [r7, #20]
 801cc88:	681a      	ldr	r2, [r3, #0]
 801cc8a:	69bb      	ldr	r3, [r7, #24]
 801cc8c:	601a      	str	r2, [r3, #0]
 801cc8e:	69bb      	ldr	r3, [r7, #24]
 801cc90:	3304      	adds	r3, #4
 801cc92:	61bb      	str	r3, [r7, #24]
 801cc94:	697b      	ldr	r3, [r7, #20]
 801cc96:	3304      	adds	r3, #4
 801cc98:	617b      	str	r3, [r7, #20]
 801cc9a:	697b      	ldr	r3, [r7, #20]
 801cc9c:	681a      	ldr	r2, [r3, #0]
 801cc9e:	69bb      	ldr	r3, [r7, #24]
 801cca0:	601a      	str	r2, [r3, #0]
 801cca2:	69bb      	ldr	r3, [r7, #24]
 801cca4:	3304      	adds	r3, #4
 801cca6:	61bb      	str	r3, [r7, #24]
 801cca8:	697b      	ldr	r3, [r7, #20]
 801ccaa:	3304      	adds	r3, #4
 801ccac:	617b      	str	r3, [r7, #20]
 801ccae:	697b      	ldr	r3, [r7, #20]
 801ccb0:	681a      	ldr	r2, [r3, #0]
 801ccb2:	69bb      	ldr	r3, [r7, #24]
 801ccb4:	601a      	str	r2, [r3, #0]
 801ccb6:	69bb      	ldr	r3, [r7, #24]
 801ccb8:	3304      	adds	r3, #4
 801ccba:	61bb      	str	r3, [r7, #24]
 801ccbc:	697b      	ldr	r3, [r7, #20]
 801ccbe:	3304      	adds	r3, #4
 801ccc0:	617b      	str	r3, [r7, #20]
        len -= 32;
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	3b20      	subs	r3, #32
 801ccc6:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	2b20      	cmp	r3, #32
 801cccc:	d8a9      	bhi.n	801cc22 <_lv_memcpy+0x32a>
    }

    while(len > 4) {
 801ccce:	e00c      	b.n	801ccea <_lv_memcpy+0x3f2>
        COPY32;
 801ccd0:	697b      	ldr	r3, [r7, #20]
 801ccd2:	681a      	ldr	r2, [r3, #0]
 801ccd4:	69bb      	ldr	r3, [r7, #24]
 801ccd6:	601a      	str	r2, [r3, #0]
 801ccd8:	69bb      	ldr	r3, [r7, #24]
 801ccda:	3304      	adds	r3, #4
 801ccdc:	61bb      	str	r3, [r7, #24]
 801ccde:	697b      	ldr	r3, [r7, #20]
 801cce0:	3304      	adds	r3, #4
 801cce2:	617b      	str	r3, [r7, #20]
        len -= 4;
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	3b04      	subs	r3, #4
 801cce8:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	2b04      	cmp	r3, #4
 801ccee:	d8ef      	bhi.n	801ccd0 <_lv_memcpy+0x3d8>
    }

    d8 = (uint8_t *)d32;
 801ccf0:	69bb      	ldr	r3, [r7, #24]
 801ccf2:	627b      	str	r3, [r7, #36]	; 0x24
    s8 = (const uint8_t *)s32;
 801ccf4:	697b      	ldr	r3, [r7, #20]
 801ccf6:	623b      	str	r3, [r7, #32]
    while(len) {
 801ccf8:	e00c      	b.n	801cd14 <_lv_memcpy+0x41c>
        COPY8
 801ccfa:	6a3b      	ldr	r3, [r7, #32]
 801ccfc:	781a      	ldrb	r2, [r3, #0]
 801ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd00:	701a      	strb	r2, [r3, #0]
 801cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd04:	3301      	adds	r3, #1
 801cd06:	627b      	str	r3, [r7, #36]	; 0x24
 801cd08:	6a3b      	ldr	r3, [r7, #32]
 801cd0a:	3301      	adds	r3, #1
 801cd0c:	623b      	str	r3, [r7, #32]
        len--;
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	3b01      	subs	r3, #1
 801cd12:	607b      	str	r3, [r7, #4]
    while(len) {
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	d1ef      	bne.n	801ccfa <_lv_memcpy+0x402>
    }

    return dst;
 801cd1a:	68fb      	ldr	r3, [r7, #12]
}
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	372c      	adds	r7, #44	; 0x2c
 801cd20:	46bd      	mov	sp, r7
 801cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd26:	4770      	bx	lr

0801cd28 <_lv_memset>:
 * @param dst pointer to the destination buffer
 * @param v value to set [0..255]
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void _lv_memset(void * dst, uint8_t v, size_t len)
{
 801cd28:	b480      	push	{r7}
 801cd2a:	b089      	sub	sp, #36	; 0x24
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	60f8      	str	r0, [r7, #12]
 801cd30:	460b      	mov	r3, r1
 801cd32:	607a      	str	r2, [r7, #4]
 801cd34:	72fb      	strb	r3, [r7, #11]

    uint8_t * d8 = (uint8_t *) dst;
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	61fb      	str	r3, [r7, #28]

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801cd3a:	69fb      	ldr	r3, [r7, #28]
 801cd3c:	f003 0303 	and.w	r3, r3, #3
 801cd40:	61bb      	str	r3, [r7, #24]

    /*Make the address aligned*/
    if(d_align) {
 801cd42:	69bb      	ldr	r3, [r7, #24]
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d016      	beq.n	801cd76 <_lv_memset+0x4e>
        d_align = ALIGN_MASK + 1 - d_align;
 801cd48:	69bb      	ldr	r3, [r7, #24]
 801cd4a:	f1c3 0304 	rsb	r3, r3, #4
 801cd4e:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 801cd50:	e00b      	b.n	801cd6a <_lv_memset+0x42>
            SET8(v);
 801cd52:	69fb      	ldr	r3, [r7, #28]
 801cd54:	7afa      	ldrb	r2, [r7, #11]
 801cd56:	701a      	strb	r2, [r3, #0]
 801cd58:	69fb      	ldr	r3, [r7, #28]
 801cd5a:	3301      	adds	r3, #1
 801cd5c:	61fb      	str	r3, [r7, #28]
            len--;
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	3b01      	subs	r3, #1
 801cd62:	607b      	str	r3, [r7, #4]
            d_align--;
 801cd64:	69bb      	ldr	r3, [r7, #24]
 801cd66:	3b01      	subs	r3, #1
 801cd68:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 801cd6a:	69bb      	ldr	r3, [r7, #24]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d002      	beq.n	801cd76 <_lv_memset+0x4e>
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d1ed      	bne.n	801cd52 <_lv_memset+0x2a>
        }
    }

    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
 801cd76:	7afa      	ldrb	r2, [r7, #11]
 801cd78:	7afb      	ldrb	r3, [r7, #11]
 801cd7a:	021b      	lsls	r3, r3, #8
 801cd7c:	441a      	add	r2, r3
 801cd7e:	7afb      	ldrb	r3, [r7, #11]
 801cd80:	041b      	lsls	r3, r3, #16
 801cd82:	441a      	add	r2, r3
 801cd84:	7afb      	ldrb	r3, [r7, #11]
 801cd86:	061b      	lsls	r3, r3, #24
 801cd88:	4413      	add	r3, r2
 801cd8a:	613b      	str	r3, [r7, #16]

    uint32_t * d32 = (uint32_t *)d8;
 801cd8c:	69fb      	ldr	r3, [r7, #28]
 801cd8e:	617b      	str	r3, [r7, #20]

    while(len > 32) {
 801cd90:	e032      	b.n	801cdf8 <_lv_memset+0xd0>
        REPEAT8(SET32(v32));
 801cd92:	697b      	ldr	r3, [r7, #20]
 801cd94:	693a      	ldr	r2, [r7, #16]
 801cd96:	601a      	str	r2, [r3, #0]
 801cd98:	697b      	ldr	r3, [r7, #20]
 801cd9a:	3304      	adds	r3, #4
 801cd9c:	617b      	str	r3, [r7, #20]
 801cd9e:	697b      	ldr	r3, [r7, #20]
 801cda0:	693a      	ldr	r2, [r7, #16]
 801cda2:	601a      	str	r2, [r3, #0]
 801cda4:	697b      	ldr	r3, [r7, #20]
 801cda6:	3304      	adds	r3, #4
 801cda8:	617b      	str	r3, [r7, #20]
 801cdaa:	697b      	ldr	r3, [r7, #20]
 801cdac:	693a      	ldr	r2, [r7, #16]
 801cdae:	601a      	str	r2, [r3, #0]
 801cdb0:	697b      	ldr	r3, [r7, #20]
 801cdb2:	3304      	adds	r3, #4
 801cdb4:	617b      	str	r3, [r7, #20]
 801cdb6:	697b      	ldr	r3, [r7, #20]
 801cdb8:	693a      	ldr	r2, [r7, #16]
 801cdba:	601a      	str	r2, [r3, #0]
 801cdbc:	697b      	ldr	r3, [r7, #20]
 801cdbe:	3304      	adds	r3, #4
 801cdc0:	617b      	str	r3, [r7, #20]
 801cdc2:	697b      	ldr	r3, [r7, #20]
 801cdc4:	693a      	ldr	r2, [r7, #16]
 801cdc6:	601a      	str	r2, [r3, #0]
 801cdc8:	697b      	ldr	r3, [r7, #20]
 801cdca:	3304      	adds	r3, #4
 801cdcc:	617b      	str	r3, [r7, #20]
 801cdce:	697b      	ldr	r3, [r7, #20]
 801cdd0:	693a      	ldr	r2, [r7, #16]
 801cdd2:	601a      	str	r2, [r3, #0]
 801cdd4:	697b      	ldr	r3, [r7, #20]
 801cdd6:	3304      	adds	r3, #4
 801cdd8:	617b      	str	r3, [r7, #20]
 801cdda:	697b      	ldr	r3, [r7, #20]
 801cddc:	693a      	ldr	r2, [r7, #16]
 801cdde:	601a      	str	r2, [r3, #0]
 801cde0:	697b      	ldr	r3, [r7, #20]
 801cde2:	3304      	adds	r3, #4
 801cde4:	617b      	str	r3, [r7, #20]
 801cde6:	697b      	ldr	r3, [r7, #20]
 801cde8:	693a      	ldr	r2, [r7, #16]
 801cdea:	601a      	str	r2, [r3, #0]
 801cdec:	697b      	ldr	r3, [r7, #20]
 801cdee:	3304      	adds	r3, #4
 801cdf0:	617b      	str	r3, [r7, #20]
        len -= 32;
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	3b20      	subs	r3, #32
 801cdf6:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	2b20      	cmp	r3, #32
 801cdfc:	d8c9      	bhi.n	801cd92 <_lv_memset+0x6a>
    }

    while(len > 4) {
 801cdfe:	e008      	b.n	801ce12 <_lv_memset+0xea>
        SET32(v32);
 801ce00:	697b      	ldr	r3, [r7, #20]
 801ce02:	693a      	ldr	r2, [r7, #16]
 801ce04:	601a      	str	r2, [r3, #0]
 801ce06:	697b      	ldr	r3, [r7, #20]
 801ce08:	3304      	adds	r3, #4
 801ce0a:	617b      	str	r3, [r7, #20]
        len -= 4;
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	3b04      	subs	r3, #4
 801ce10:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	2b04      	cmp	r3, #4
 801ce16:	d8f3      	bhi.n	801ce00 <_lv_memset+0xd8>
    }

    d8 = (uint8_t *)d32;
 801ce18:	697b      	ldr	r3, [r7, #20]
 801ce1a:	61fb      	str	r3, [r7, #28]
    while(len) {
 801ce1c:	e008      	b.n	801ce30 <_lv_memset+0x108>
        SET8(v);
 801ce1e:	69fb      	ldr	r3, [r7, #28]
 801ce20:	7afa      	ldrb	r2, [r7, #11]
 801ce22:	701a      	strb	r2, [r3, #0]
 801ce24:	69fb      	ldr	r3, [r7, #28]
 801ce26:	3301      	adds	r3, #1
 801ce28:	61fb      	str	r3, [r7, #28]
        len--;
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	3b01      	subs	r3, #1
 801ce2e:	607b      	str	r3, [r7, #4]
    while(len) {
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d1f3      	bne.n	801ce1e <_lv_memset+0xf6>
    }
}
 801ce36:	bf00      	nop
 801ce38:	3724      	adds	r7, #36	; 0x24
 801ce3a:	46bd      	mov	sp, r7
 801ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce40:	4770      	bx	lr

0801ce42 <_lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void _lv_memset_00(void * dst, size_t len)
{
 801ce42:	b480      	push	{r7}
 801ce44:	b087      	sub	sp, #28
 801ce46:	af00      	add	r7, sp, #0
 801ce48:	6078      	str	r0, [r7, #4]
 801ce4a:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *) dst;
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801ce50:	697b      	ldr	r3, [r7, #20]
 801ce52:	f003 0303 	and.w	r3, r3, #3
 801ce56:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 801ce58:	693b      	ldr	r3, [r7, #16]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d016      	beq.n	801ce8c <_lv_memset_00+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 801ce5e:	693b      	ldr	r3, [r7, #16]
 801ce60:	f1c3 0304 	rsb	r3, r3, #4
 801ce64:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801ce66:	e00b      	b.n	801ce80 <_lv_memset_00+0x3e>
            SET8(0);
 801ce68:	697b      	ldr	r3, [r7, #20]
 801ce6a:	2200      	movs	r2, #0
 801ce6c:	701a      	strb	r2, [r3, #0]
 801ce6e:	697b      	ldr	r3, [r7, #20]
 801ce70:	3301      	adds	r3, #1
 801ce72:	617b      	str	r3, [r7, #20]
            len--;
 801ce74:	683b      	ldr	r3, [r7, #0]
 801ce76:	3b01      	subs	r3, #1
 801ce78:	603b      	str	r3, [r7, #0]
            d_align--;
 801ce7a:	693b      	ldr	r3, [r7, #16]
 801ce7c:	3b01      	subs	r3, #1
 801ce7e:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801ce80:	693b      	ldr	r3, [r7, #16]
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d002      	beq.n	801ce8c <_lv_memset_00+0x4a>
 801ce86:	683b      	ldr	r3, [r7, #0]
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d1ed      	bne.n	801ce68 <_lv_memset_00+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 801ce8c:	697b      	ldr	r3, [r7, #20]
 801ce8e:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 801ce90:	e032      	b.n	801cef8 <_lv_memset_00+0xb6>
        REPEAT8(SET32(0));
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	2200      	movs	r2, #0
 801ce96:	601a      	str	r2, [r3, #0]
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	3304      	adds	r3, #4
 801ce9c:	60fb      	str	r3, [r7, #12]
 801ce9e:	68fb      	ldr	r3, [r7, #12]
 801cea0:	2200      	movs	r2, #0
 801cea2:	601a      	str	r2, [r3, #0]
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	3304      	adds	r3, #4
 801cea8:	60fb      	str	r3, [r7, #12]
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	2200      	movs	r2, #0
 801ceae:	601a      	str	r2, [r3, #0]
 801ceb0:	68fb      	ldr	r3, [r7, #12]
 801ceb2:	3304      	adds	r3, #4
 801ceb4:	60fb      	str	r3, [r7, #12]
 801ceb6:	68fb      	ldr	r3, [r7, #12]
 801ceb8:	2200      	movs	r2, #0
 801ceba:	601a      	str	r2, [r3, #0]
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	3304      	adds	r3, #4
 801cec0:	60fb      	str	r3, [r7, #12]
 801cec2:	68fb      	ldr	r3, [r7, #12]
 801cec4:	2200      	movs	r2, #0
 801cec6:	601a      	str	r2, [r3, #0]
 801cec8:	68fb      	ldr	r3, [r7, #12]
 801ceca:	3304      	adds	r3, #4
 801cecc:	60fb      	str	r3, [r7, #12]
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	2200      	movs	r2, #0
 801ced2:	601a      	str	r2, [r3, #0]
 801ced4:	68fb      	ldr	r3, [r7, #12]
 801ced6:	3304      	adds	r3, #4
 801ced8:	60fb      	str	r3, [r7, #12]
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	2200      	movs	r2, #0
 801cede:	601a      	str	r2, [r3, #0]
 801cee0:	68fb      	ldr	r3, [r7, #12]
 801cee2:	3304      	adds	r3, #4
 801cee4:	60fb      	str	r3, [r7, #12]
 801cee6:	68fb      	ldr	r3, [r7, #12]
 801cee8:	2200      	movs	r2, #0
 801ceea:	601a      	str	r2, [r3, #0]
 801ceec:	68fb      	ldr	r3, [r7, #12]
 801ceee:	3304      	adds	r3, #4
 801cef0:	60fb      	str	r3, [r7, #12]
        len -= 32;
 801cef2:	683b      	ldr	r3, [r7, #0]
 801cef4:	3b20      	subs	r3, #32
 801cef6:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 801cef8:	683b      	ldr	r3, [r7, #0]
 801cefa:	2b20      	cmp	r3, #32
 801cefc:	d8c9      	bhi.n	801ce92 <_lv_memset_00+0x50>
    }

    while(len > 4) {
 801cefe:	e008      	b.n	801cf12 <_lv_memset_00+0xd0>
        SET32(0);
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	2200      	movs	r2, #0
 801cf04:	601a      	str	r2, [r3, #0]
 801cf06:	68fb      	ldr	r3, [r7, #12]
 801cf08:	3304      	adds	r3, #4
 801cf0a:	60fb      	str	r3, [r7, #12]
        len -= 4;
 801cf0c:	683b      	ldr	r3, [r7, #0]
 801cf0e:	3b04      	subs	r3, #4
 801cf10:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 801cf12:	683b      	ldr	r3, [r7, #0]
 801cf14:	2b04      	cmp	r3, #4
 801cf16:	d8f3      	bhi.n	801cf00 <_lv_memset_00+0xbe>
    }

    d8 = (uint8_t *)d32;
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	617b      	str	r3, [r7, #20]
    while(len) {
 801cf1c:	e008      	b.n	801cf30 <_lv_memset_00+0xee>
        SET8(0);
 801cf1e:	697b      	ldr	r3, [r7, #20]
 801cf20:	2200      	movs	r2, #0
 801cf22:	701a      	strb	r2, [r3, #0]
 801cf24:	697b      	ldr	r3, [r7, #20]
 801cf26:	3301      	adds	r3, #1
 801cf28:	617b      	str	r3, [r7, #20]
        len--;
 801cf2a:	683b      	ldr	r3, [r7, #0]
 801cf2c:	3b01      	subs	r3, #1
 801cf2e:	603b      	str	r3, [r7, #0]
    while(len) {
 801cf30:	683b      	ldr	r3, [r7, #0]
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	d1f3      	bne.n	801cf1e <_lv_memset_00+0xdc>
    }
}
 801cf36:	bf00      	nop
 801cf38:	371c      	adds	r7, #28
 801cf3a:	46bd      	mov	sp, r7
 801cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf40:	4770      	bx	lr

0801cf42 <_lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void _lv_memset_ff(void * dst, size_t len)
{
 801cf42:	b480      	push	{r7}
 801cf44:	b087      	sub	sp, #28
 801cf46:	af00      	add	r7, sp, #0
 801cf48:	6078      	str	r0, [r7, #4]
 801cf4a:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *) dst;
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801cf50:	697b      	ldr	r3, [r7, #20]
 801cf52:	f003 0303 	and.w	r3, r3, #3
 801cf56:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 801cf58:	693b      	ldr	r3, [r7, #16]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d016      	beq.n	801cf8c <_lv_memset_ff+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 801cf5e:	693b      	ldr	r3, [r7, #16]
 801cf60:	f1c3 0304 	rsb	r3, r3, #4
 801cf64:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801cf66:	e00b      	b.n	801cf80 <_lv_memset_ff+0x3e>
            SET8(0xFF);
 801cf68:	697b      	ldr	r3, [r7, #20]
 801cf6a:	22ff      	movs	r2, #255	; 0xff
 801cf6c:	701a      	strb	r2, [r3, #0]
 801cf6e:	697b      	ldr	r3, [r7, #20]
 801cf70:	3301      	adds	r3, #1
 801cf72:	617b      	str	r3, [r7, #20]
            len--;
 801cf74:	683b      	ldr	r3, [r7, #0]
 801cf76:	3b01      	subs	r3, #1
 801cf78:	603b      	str	r3, [r7, #0]
            d_align--;
 801cf7a:	693b      	ldr	r3, [r7, #16]
 801cf7c:	3b01      	subs	r3, #1
 801cf7e:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801cf80:	693b      	ldr	r3, [r7, #16]
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	d002      	beq.n	801cf8c <_lv_memset_ff+0x4a>
 801cf86:	683b      	ldr	r3, [r7, #0]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d1ed      	bne.n	801cf68 <_lv_memset_ff+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 801cf8c:	697b      	ldr	r3, [r7, #20]
 801cf8e:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 801cf90:	e03a      	b.n	801d008 <_lv_memset_ff+0xc6>
        REPEAT8(SET32(0xFFFFFFFF));
 801cf92:	68fb      	ldr	r3, [r7, #12]
 801cf94:	f04f 32ff 	mov.w	r2, #4294967295
 801cf98:	601a      	str	r2, [r3, #0]
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	3304      	adds	r3, #4
 801cf9e:	60fb      	str	r3, [r7, #12]
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	f04f 32ff 	mov.w	r2, #4294967295
 801cfa6:	601a      	str	r2, [r3, #0]
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	3304      	adds	r3, #4
 801cfac:	60fb      	str	r3, [r7, #12]
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	f04f 32ff 	mov.w	r2, #4294967295
 801cfb4:	601a      	str	r2, [r3, #0]
 801cfb6:	68fb      	ldr	r3, [r7, #12]
 801cfb8:	3304      	adds	r3, #4
 801cfba:	60fb      	str	r3, [r7, #12]
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	f04f 32ff 	mov.w	r2, #4294967295
 801cfc2:	601a      	str	r2, [r3, #0]
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	3304      	adds	r3, #4
 801cfc8:	60fb      	str	r3, [r7, #12]
 801cfca:	68fb      	ldr	r3, [r7, #12]
 801cfcc:	f04f 32ff 	mov.w	r2, #4294967295
 801cfd0:	601a      	str	r2, [r3, #0]
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	3304      	adds	r3, #4
 801cfd6:	60fb      	str	r3, [r7, #12]
 801cfd8:	68fb      	ldr	r3, [r7, #12]
 801cfda:	f04f 32ff 	mov.w	r2, #4294967295
 801cfde:	601a      	str	r2, [r3, #0]
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	3304      	adds	r3, #4
 801cfe4:	60fb      	str	r3, [r7, #12]
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	f04f 32ff 	mov.w	r2, #4294967295
 801cfec:	601a      	str	r2, [r3, #0]
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	3304      	adds	r3, #4
 801cff2:	60fb      	str	r3, [r7, #12]
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	f04f 32ff 	mov.w	r2, #4294967295
 801cffa:	601a      	str	r2, [r3, #0]
 801cffc:	68fb      	ldr	r3, [r7, #12]
 801cffe:	3304      	adds	r3, #4
 801d000:	60fb      	str	r3, [r7, #12]
        len -= 32;
 801d002:	683b      	ldr	r3, [r7, #0]
 801d004:	3b20      	subs	r3, #32
 801d006:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 801d008:	683b      	ldr	r3, [r7, #0]
 801d00a:	2b20      	cmp	r3, #32
 801d00c:	d8c1      	bhi.n	801cf92 <_lv_memset_ff+0x50>
    }

    while(len > 4) {
 801d00e:	e009      	b.n	801d024 <_lv_memset_ff+0xe2>
        SET32(0xFFFFFFFF);
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	f04f 32ff 	mov.w	r2, #4294967295
 801d016:	601a      	str	r2, [r3, #0]
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	3304      	adds	r3, #4
 801d01c:	60fb      	str	r3, [r7, #12]
        len -= 4;
 801d01e:	683b      	ldr	r3, [r7, #0]
 801d020:	3b04      	subs	r3, #4
 801d022:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 801d024:	683b      	ldr	r3, [r7, #0]
 801d026:	2b04      	cmp	r3, #4
 801d028:	d8f2      	bhi.n	801d010 <_lv_memset_ff+0xce>
    }

    d8 = (uint8_t *)d32;
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	617b      	str	r3, [r7, #20]
    while(len) {
 801d02e:	e008      	b.n	801d042 <_lv_memset_ff+0x100>
        SET8(0xFF);
 801d030:	697b      	ldr	r3, [r7, #20]
 801d032:	22ff      	movs	r2, #255	; 0xff
 801d034:	701a      	strb	r2, [r3, #0]
 801d036:	697b      	ldr	r3, [r7, #20]
 801d038:	3301      	adds	r3, #1
 801d03a:	617b      	str	r3, [r7, #20]
        len--;
 801d03c:	683b      	ldr	r3, [r7, #0]
 801d03e:	3b01      	subs	r3, #1
 801d040:	603b      	str	r3, [r7, #0]
    while(len) {
 801d042:	683b      	ldr	r3, [r7, #0]
 801d044:	2b00      	cmp	r3, #0
 801d046:	d1f3      	bne.n	801d030 <_lv_memset_ff+0xee>
    }
}
 801d048:	bf00      	nop
 801d04a:	371c      	adds	r7, #28
 801d04c:	46bd      	mov	sp, r7
 801d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d052:	4770      	bx	lr

0801d054 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 801d054:	b480      	push	{r7}
 801d056:	b085      	sub	sp, #20
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
    lv_mem_ent_t * next_e = NULL;
 801d05c:	2300      	movs	r3, #0
 801d05e:	60fb      	str	r3, [r7, #12]

    if(act_e == NULL) { /*NULL means: get the first entry*/
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	2b00      	cmp	r3, #0
 801d064:	d103      	bne.n	801d06e <ent_get_next+0x1a>
        next_e = (lv_mem_ent_t *)work_mem;
 801d066:	4b10      	ldr	r3, [pc, #64]	; (801d0a8 <ent_get_next+0x54>)
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	60fb      	str	r3, [r7, #12]
 801d06c:	e014      	b.n	801d098 <ent_get_next+0x44>
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	3304      	adds	r3, #4
 801d072:	60bb      	str	r3, [r7, #8]
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d07c:	461a      	mov	r2, r3
 801d07e:	68bb      	ldr	r3, [r7, #8]
 801d080:	4413      	add	r3, r2
 801d082:	60fb      	str	r3, [r7, #12]

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	1d1a      	adds	r2, r3, #4
 801d088:	4b07      	ldr	r3, [pc, #28]	; (801d0a8 <ent_get_next+0x54>)
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801d090:	429a      	cmp	r2, r3
 801d092:	d301      	bcc.n	801d098 <ent_get_next+0x44>
 801d094:	2300      	movs	r3, #0
 801d096:	60fb      	str	r3, [r7, #12]
    }

    return next_e;
 801d098:	68fb      	ldr	r3, [r7, #12]
}
 801d09a:	4618      	mov	r0, r3
 801d09c:	3714      	adds	r7, #20
 801d09e:	46bd      	mov	sp, r7
 801d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0a4:	4770      	bx	lr
 801d0a6:	bf00      	nop
 801d0a8:	20018064 	.word	0x20018064

0801d0ac <ent_alloc>:
 * @param e try to allocate to this entry
 * @param size size of the new memory in bytes
 * @return pointer to the allocated memory or NULL if not enough memory in the entry
 */
static void * ent_alloc(lv_mem_ent_t * e, size_t size)
{
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b084      	sub	sp, #16
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	6078      	str	r0, [r7, #4]
 801d0b4:	6039      	str	r1, [r7, #0]
    void * alloc = NULL;
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	60fb      	str	r3, [r7, #12]
    /*If the memory is free and big enough then use it */
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	781b      	ldrb	r3, [r3, #0]
 801d0be:	f003 0301 	and.w	r3, r3, #1
 801d0c2:	b2db      	uxtb	r3, r3
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d113      	bne.n	801d0f0 <ent_alloc+0x44>
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d0d0:	461a      	mov	r2, r3
 801d0d2:	683b      	ldr	r3, [r7, #0]
 801d0d4:	4293      	cmp	r3, r2
 801d0d6:	d80b      	bhi.n	801d0f0 <ent_alloc+0x44>
        /*Truncate the entry to the desired size */
        ent_trunc(e, size);
 801d0d8:	6839      	ldr	r1, [r7, #0]
 801d0da:	6878      	ldr	r0, [r7, #4]
 801d0dc:	f000 f80d 	bl	801d0fa <ent_trunc>
        e->header.s.used = 1;
 801d0e0:	687a      	ldr	r2, [r7, #4]
 801d0e2:	7813      	ldrb	r3, [r2, #0]
 801d0e4:	f043 0301 	orr.w	r3, r3, #1
 801d0e8:	7013      	strb	r3, [r2, #0]

        /*Save the allocated data*/
        alloc = &e->first_data;
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	3304      	adds	r3, #4
 801d0ee:	60fb      	str	r3, [r7, #12]
    }

    return alloc;
 801d0f0:	68fb      	ldr	r3, [r7, #12]
}
 801d0f2:	4618      	mov	r0, r3
 801d0f4:	3710      	adds	r7, #16
 801d0f6:	46bd      	mov	sp, r7
 801d0f8:	bd80      	pop	{r7, pc}

0801d0fa <ent_trunc>:
 * Truncate the data of entry to the given size
 * @param e Pointer to an entry
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
 801d0fa:	b480      	push	{r7}
 801d0fc:	b085      	sub	sp, #20
 801d0fe:	af00      	add	r7, sp, #0
 801d100:	6078      	str	r0, [r7, #4]
 801d102:	6039      	str	r1, [r7, #0]
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 801d104:	683b      	ldr	r3, [r7, #0]
 801d106:	3303      	adds	r3, #3
 801d108:	f023 0303 	bic.w	r3, r3, #3
 801d10c:	603b      	str	r3, [r7, #0]

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d116:	461a      	mov	r2, r3
 801d118:	683b      	ldr	r3, [r7, #0]
 801d11a:	3304      	adds	r3, #4
 801d11c:	429a      	cmp	r2, r3
 801d11e:	d104      	bne.n	801d12a <ent_trunc+0x30>
        size = e->header.s.d_size;
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	681b      	ldr	r3, [r3, #0]
 801d124:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d128:	603b      	str	r3, [r7, #0]
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d132:	461a      	mov	r2, r3
 801d134:	683b      	ldr	r3, [r7, #0]
 801d136:	4293      	cmp	r3, r2
 801d138:	d022      	beq.n	801d180 <ent_trunc+0x86>
        uint8_t * e_data             = &e->first_data;
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	3304      	adds	r3, #4
 801d13e:	60fb      	str	r3, [r7, #12]
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 801d140:	68fa      	ldr	r2, [r7, #12]
 801d142:	683b      	ldr	r3, [r7, #0]
 801d144:	4413      	add	r3, r2
 801d146:	60bb      	str	r3, [r7, #8]
        after_new_e->header.s.used   = 0;
 801d148:	68ba      	ldr	r2, [r7, #8]
 801d14a:	7813      	ldrb	r3, [r2, #0]
 801d14c:	f36f 0300 	bfc	r3, #0, #1
 801d150:	7013      	strb	r3, [r2, #0]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	681b      	ldr	r3, [r3, #0]
 801d156:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d15a:	461a      	mov	r2, r3
 801d15c:	683b      	ldr	r3, [r7, #0]
 801d15e:	1ad3      	subs	r3, r2, r3
 801d160:	3b04      	subs	r3, #4
 801d162:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d166:	68ba      	ldr	r2, [r7, #8]
 801d168:	6813      	ldr	r3, [r2, #0]
 801d16a:	f361 035f 	bfi	r3, r1, #1, #31
 801d16e:	6013      	str	r3, [r2, #0]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
 801d170:	683b      	ldr	r3, [r7, #0]
 801d172:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d176:	687a      	ldr	r2, [r7, #4]
 801d178:	6813      	ldr	r3, [r2, #0]
 801d17a:	f361 035f 	bfi	r3, r1, #1, #31
 801d17e:	6013      	str	r3, [r2, #0]
    }
}
 801d180:	bf00      	nop
 801d182:	3714      	adds	r7, #20
 801d184:	46bd      	mov	sp, r7
 801d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d18a:	4770      	bx	lr

0801d18c <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
 801d18c:	b580      	push	{r7, lr}
 801d18e:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 801d190:	2118      	movs	r1, #24
 801d192:	4804      	ldr	r0, [pc, #16]	; (801d1a4 <_lv_task_core_init+0x18>)
 801d194:	f7fe fd9e 	bl	801bcd4 <_lv_ll_init>

    /*Initially enable the lv_task handling*/
    lv_task_enable(true);
 801d198:	2001      	movs	r0, #1
 801d19a:	f000 fa63 	bl	801d664 <lv_task_enable>
}
 801d19e:	bf00      	nop
 801d1a0:	bd80      	pop	{r7, pc}
 801d1a2:	bf00      	nop
 801d1a4:	20020384 	.word	0x20020384

0801d1a8 <lv_task_handler>:
/**
 * Call it periodically to handle lv_tasks.
 * @return the time after which it must be called again
 */
LV_ATTRIBUTE_TASK_HANDLER uint32_t lv_task_handler(void)
{
 801d1a8:	b580      	push	{r7, lr}
 801d1aa:	b088      	sub	sp, #32
 801d1ac:	af00      	add	r7, sp, #0
    LV_LOG_TRACE("lv_task_handler started");

    /*Avoid concurrent running of the task handler*/
    static bool already_running = false;
    if(already_running) return 1;
 801d1ae:	4b8e      	ldr	r3, [pc, #568]	; (801d3e8 <lv_task_handler+0x240>)
 801d1b0:	781b      	ldrb	r3, [r3, #0]
 801d1b2:	2b00      	cmp	r3, #0
 801d1b4:	d001      	beq.n	801d1ba <lv_task_handler+0x12>
 801d1b6:	2301      	movs	r3, #1
 801d1b8:	e112      	b.n	801d3e0 <lv_task_handler+0x238>
    already_running = true;
 801d1ba:	4b8b      	ldr	r3, [pc, #556]	; (801d3e8 <lv_task_handler+0x240>)
 801d1bc:	2201      	movs	r2, #1
 801d1be:	701a      	strb	r2, [r3, #0]

    if(lv_task_run == false) {
 801d1c0:	4b8a      	ldr	r3, [pc, #552]	; (801d3ec <lv_task_handler+0x244>)
 801d1c2:	781b      	ldrb	r3, [r3, #0]
 801d1c4:	f083 0301 	eor.w	r3, r3, #1
 801d1c8:	b2db      	uxtb	r3, r3
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d004      	beq.n	801d1d8 <lv_task_handler+0x30>
        already_running = false; /*Release mutex*/
 801d1ce:	4b86      	ldr	r3, [pc, #536]	; (801d3e8 <lv_task_handler+0x240>)
 801d1d0:	2200      	movs	r2, #0
 801d1d2:	701a      	strb	r2, [r3, #0]
        return 1;
 801d1d4:	2301      	movs	r3, #1
 801d1d6:	e103      	b.n	801d3e0 <lv_task_handler+0x238>
    }

    static uint32_t idle_period_start = 0;
    static uint32_t busy_time         = 0;

    uint32_t handler_start = lv_tick_get();
 801d1d8:	f7fd f97c 	bl	801a4d4 <lv_tick_get>
 801d1dc:	60f8      	str	r0, [r7, #12]

    /* Run all task from the highest to the lowest priority
     * If a lower priority task is executed check task again from the highest priority
     * but on the priority of executed tasks don't run tasks before the executed*/
    lv_task_t * task_interrupter = NULL;
 801d1de:	2300      	movs	r3, #0
 801d1e0:	61fb      	str	r3, [r7, #28]
    lv_task_t * next;
    bool end_flag;
    do {
        end_flag                 = true;
 801d1e2:	2301      	movs	r3, #1
 801d1e4:	75fb      	strb	r3, [r7, #23]
        task_deleted             = false;
 801d1e6:	4b82      	ldr	r3, [pc, #520]	; (801d3f0 <lv_task_handler+0x248>)
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	701a      	strb	r2, [r3, #0]
        task_created             = false;
 801d1ec:	4b81      	ldr	r3, [pc, #516]	; (801d3f4 <lv_task_handler+0x24c>)
 801d1ee:	2200      	movs	r2, #0
 801d1f0:	701a      	strb	r2, [r3, #0]
        task_list_changed        = false;
 801d1f2:	4b81      	ldr	r3, [pc, #516]	; (801d3f8 <lv_task_handler+0x250>)
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801d1f8:	4880      	ldr	r0, [pc, #512]	; (801d3fc <lv_task_handler+0x254>)
 801d1fa:	f7fe fee1 	bl	801bfc0 <_lv_ll_get_head>
 801d1fe:	4602      	mov	r2, r0
 801d200:	4b7f      	ldr	r3, [pc, #508]	; (801d400 <lv_task_handler+0x258>)
 801d202:	601a      	str	r2, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 801d204:	e086      	b.n	801d314 <lv_task_handler+0x16c>
            /* The task might be deleted if it runs only once ('once = 1')
             * So get next element until the current is surely valid*/
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 801d206:	4b7e      	ldr	r3, [pc, #504]	; (801d400 <lv_task_handler+0x258>)
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	4619      	mov	r1, r3
 801d20c:	487b      	ldr	r0, [pc, #492]	; (801d3fc <lv_task_handler+0x254>)
 801d20e:	f7fe fefd 	bl	801c00c <_lv_ll_get_next>
 801d212:	61b8      	str	r0, [r7, #24]

            /*We reach priority of the turned off task. There is nothing more to do.*/
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
 801d214:	4b7a      	ldr	r3, [pc, #488]	; (801d400 <lv_task_handler+0x258>)
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	7d1b      	ldrb	r3, [r3, #20]
 801d21a:	f003 0307 	and.w	r3, r3, #7
 801d21e:	b2db      	uxtb	r3, r3
 801d220:	2b00      	cmp	r3, #0
 801d222:	d07d      	beq.n	801d320 <lv_task_handler+0x178>
                break;
            }

            /*Here is the interrupter task. Don't execute it again.*/
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 801d224:	4b76      	ldr	r3, [pc, #472]	; (801d400 <lv_task_handler+0x258>)
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	69fa      	ldr	r2, [r7, #28]
 801d22a:	429a      	cmp	r2, r3
 801d22c:	d105      	bne.n	801d23a <lv_task_handler+0x92>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 801d22e:	2300      	movs	r3, #0
 801d230:	61fb      	str	r3, [r7, #28]
                                            the interrupter is not interesting anymore*/
                LV_GC_ROOT(_lv_task_act) = next;
 801d232:	4a73      	ldr	r2, [pc, #460]	; (801d400 <lv_task_handler+0x258>)
 801d234:	69bb      	ldr	r3, [r7, #24]
 801d236:	6013      	str	r3, [r2, #0]
                continue; /*Load the next task*/
 801d238:	e06c      	b.n	801d314 <lv_task_handler+0x16c>
            }

            /*Just try to run the tasks with highest priority.*/
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
 801d23a:	4b71      	ldr	r3, [pc, #452]	; (801d400 <lv_task_handler+0x258>)
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	7d1b      	ldrb	r3, [r3, #20]
 801d240:	f003 0307 	and.w	r3, r3, #7
 801d244:	b2db      	uxtb	r3, r3
 801d246:	2b05      	cmp	r3, #5
 801d248:	d105      	bne.n	801d256 <lv_task_handler+0xae>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 801d24a:	4b6d      	ldr	r3, [pc, #436]	; (801d400 <lv_task_handler+0x258>)
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	4618      	mov	r0, r3
 801d250:	f000 fa18 	bl	801d684 <lv_task_exec>
 801d254:	e047      	b.n	801d2e6 <lv_task_handler+0x13e>
            }
            /*Tasks with higher priority than the interrupted shall be run in every case*/
            else if(task_interrupter) {
 801d256:	69fb      	ldr	r3, [r7, #28]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d028      	beq.n	801d2ae <lv_task_handler+0x106>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
 801d25c:	4b68      	ldr	r3, [pc, #416]	; (801d400 <lv_task_handler+0x258>)
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	7d1b      	ldrb	r3, [r3, #20]
 801d262:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d266:	b2da      	uxtb	r2, r3
 801d268:	69fb      	ldr	r3, [r7, #28]
 801d26a:	7d1b      	ldrb	r3, [r3, #20]
 801d26c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d270:	b2db      	uxtb	r3, r3
 801d272:	429a      	cmp	r2, r3
 801d274:	d937      	bls.n	801d2e6 <lv_task_handler+0x13e>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 801d276:	4b62      	ldr	r3, [pc, #392]	; (801d400 <lv_task_handler+0x258>)
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	4618      	mov	r0, r3
 801d27c:	f000 fa02 	bl	801d684 <lv_task_exec>
 801d280:	4603      	mov	r3, r0
 801d282:	2b00      	cmp	r3, #0
 801d284:	d02f      	beq.n	801d2e6 <lv_task_handler+0x13e>
                        if(!task_created && !task_deleted) {
 801d286:	4b5b      	ldr	r3, [pc, #364]	; (801d3f4 <lv_task_handler+0x24c>)
 801d288:	781b      	ldrb	r3, [r3, #0]
 801d28a:	f083 0301 	eor.w	r3, r3, #1
 801d28e:	b2db      	uxtb	r3, r3
 801d290:	2b00      	cmp	r3, #0
 801d292:	d028      	beq.n	801d2e6 <lv_task_handler+0x13e>
 801d294:	4b56      	ldr	r3, [pc, #344]	; (801d3f0 <lv_task_handler+0x248>)
 801d296:	781b      	ldrb	r3, [r3, #0]
 801d298:	f083 0301 	eor.w	r3, r3, #1
 801d29c:	b2db      	uxtb	r3, r3
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d021      	beq.n	801d2e6 <lv_task_handler+0x13e>
                            /*Check all tasks again from the highest priority */
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
 801d2a2:	4b57      	ldr	r3, [pc, #348]	; (801d400 <lv_task_handler+0x258>)
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	61fb      	str	r3, [r7, #28]
                            end_flag = false;
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	75fb      	strb	r3, [r7, #23]
                            break;
 801d2ac:	e039      	b.n	801d322 <lv_task_handler+0x17a>
                }
            }
            /* It is no interrupter task or we already reached it earlier.
             * Just run the remaining tasks*/
            else {
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 801d2ae:	4b54      	ldr	r3, [pc, #336]	; (801d400 <lv_task_handler+0x258>)
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	4618      	mov	r0, r3
 801d2b4:	f000 f9e6 	bl	801d684 <lv_task_exec>
 801d2b8:	4603      	mov	r3, r0
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d013      	beq.n	801d2e6 <lv_task_handler+0x13e>
                    if(!task_created && !task_deleted) {
 801d2be:	4b4d      	ldr	r3, [pc, #308]	; (801d3f4 <lv_task_handler+0x24c>)
 801d2c0:	781b      	ldrb	r3, [r3, #0]
 801d2c2:	f083 0301 	eor.w	r3, r3, #1
 801d2c6:	b2db      	uxtb	r3, r3
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d00c      	beq.n	801d2e6 <lv_task_handler+0x13e>
 801d2cc:	4b48      	ldr	r3, [pc, #288]	; (801d3f0 <lv_task_handler+0x248>)
 801d2ce:	781b      	ldrb	r3, [r3, #0]
 801d2d0:	f083 0301 	eor.w	r3, r3, #1
 801d2d4:	b2db      	uxtb	r3, r3
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d005      	beq.n	801d2e6 <lv_task_handler+0x13e>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 801d2da:	4b49      	ldr	r3, [pc, #292]	; (801d400 <lv_task_handler+0x258>)
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	61fb      	str	r3, [r7, #28]
                        end_flag         = false;
 801d2e0:	2300      	movs	r3, #0
 801d2e2:	75fb      	strb	r3, [r7, #23]
                        break;
 801d2e4:	e01d      	b.n	801d322 <lv_task_handler+0x17a>
                    }
                }
            }

            /*If a task was created or deleted then this or the next item might be corrupted*/
            if(task_created || task_deleted) {
 801d2e6:	4b43      	ldr	r3, [pc, #268]	; (801d3f4 <lv_task_handler+0x24c>)
 801d2e8:	781b      	ldrb	r3, [r3, #0]
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	d103      	bne.n	801d2f6 <lv_task_handler+0x14e>
 801d2ee:	4b40      	ldr	r3, [pc, #256]	; (801d3f0 <lv_task_handler+0x248>)
 801d2f0:	781b      	ldrb	r3, [r3, #0]
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d002      	beq.n	801d2fc <lv_task_handler+0x154>
                task_interrupter = NULL;
 801d2f6:	2300      	movs	r3, #0
 801d2f8:	61fb      	str	r3, [r7, #28]
                break;
 801d2fa:	e012      	b.n	801d322 <lv_task_handler+0x17a>
            }

            if(task_list_changed) {
 801d2fc:	4b3e      	ldr	r3, [pc, #248]	; (801d3f8 <lv_task_handler+0x250>)
 801d2fe:	781b      	ldrb	r3, [r3, #0]
 801d300:	2b00      	cmp	r3, #0
 801d302:	d004      	beq.n	801d30e <lv_task_handler+0x166>
                task_interrupter = NULL;
 801d304:	2300      	movs	r3, #0
 801d306:	61fb      	str	r3, [r7, #28]
                end_flag = false;
 801d308:	2300      	movs	r3, #0
 801d30a:	75fb      	strb	r3, [r7, #23]
                break;
 801d30c:	e009      	b.n	801d322 <lv_task_handler+0x17a>
            }

            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 801d30e:	4a3c      	ldr	r2, [pc, #240]	; (801d400 <lv_task_handler+0x258>)
 801d310:	69bb      	ldr	r3, [r7, #24]
 801d312:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 801d314:	4b3a      	ldr	r3, [pc, #232]	; (801d400 <lv_task_handler+0x258>)
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	2b00      	cmp	r3, #0
 801d31a:	f47f af74 	bne.w	801d206 <lv_task_handler+0x5e>
 801d31e:	e000      	b.n	801d322 <lv_task_handler+0x17a>
                break;
 801d320:	bf00      	nop
        }
    } while(!end_flag);
 801d322:	7dfb      	ldrb	r3, [r7, #23]
 801d324:	f083 0301 	eor.w	r3, r3, #1
 801d328:	b2db      	uxtb	r3, r3
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	f47f af59 	bne.w	801d1e2 <lv_task_handler+0x3a>

    uint32_t time_till_next = LV_NO_TASK_READY;
 801d330:	f04f 33ff 	mov.w	r3, #4294967295
 801d334:	613b      	str	r3, [r7, #16]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801d336:	4831      	ldr	r0, [pc, #196]	; (801d3fc <lv_task_handler+0x254>)
 801d338:	f7fe fe42 	bl	801bfc0 <_lv_ll_get_head>
 801d33c:	61b8      	str	r0, [r7, #24]
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 801d33e:	e00e      	b.n	801d35e <lv_task_handler+0x1b6>
        uint32_t delay = lv_task_time_remaining(next);
 801d340:	69b8      	ldr	r0, [r7, #24]
 801d342:	f000 f9d9 	bl	801d6f8 <lv_task_time_remaining>
 801d346:	60b8      	str	r0, [r7, #8]
        if(delay < time_till_next)
 801d348:	68ba      	ldr	r2, [r7, #8]
 801d34a:	693b      	ldr	r3, [r7, #16]
 801d34c:	429a      	cmp	r2, r3
 801d34e:	d201      	bcs.n	801d354 <lv_task_handler+0x1ac>
            time_till_next = delay;
 801d350:	68bb      	ldr	r3, [r7, #8]
 801d352:	613b      	str	r3, [r7, #16]

        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 801d354:	69b9      	ldr	r1, [r7, #24]
 801d356:	4829      	ldr	r0, [pc, #164]	; (801d3fc <lv_task_handler+0x254>)
 801d358:	f7fe fe58 	bl	801c00c <_lv_ll_get_next>
 801d35c:	61b8      	str	r0, [r7, #24]
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 801d35e:	69bb      	ldr	r3, [r7, #24]
 801d360:	2b00      	cmp	r3, #0
 801d362:	d006      	beq.n	801d372 <lv_task_handler+0x1ca>
 801d364:	69bb      	ldr	r3, [r7, #24]
 801d366:	7d1b      	ldrb	r3, [r3, #20]
 801d368:	f003 0307 	and.w	r3, r3, #7
 801d36c:	b2db      	uxtb	r3, r3
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d1e6      	bne.n	801d340 <lv_task_handler+0x198>
    }

    busy_time += lv_tick_elaps(handler_start);
 801d372:	68f8      	ldr	r0, [r7, #12]
 801d374:	f7fd f8c8 	bl	801a508 <lv_tick_elaps>
 801d378:	4602      	mov	r2, r0
 801d37a:	4b22      	ldr	r3, [pc, #136]	; (801d404 <lv_task_handler+0x25c>)
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	4413      	add	r3, r2
 801d380:	4a20      	ldr	r2, [pc, #128]	; (801d404 <lv_task_handler+0x25c>)
 801d382:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 801d384:	4b20      	ldr	r3, [pc, #128]	; (801d408 <lv_task_handler+0x260>)
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	4618      	mov	r0, r3
 801d38a:	f7fd f8bd 	bl	801a508 <lv_tick_elaps>
 801d38e:	6078      	str	r0, [r7, #4]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801d396:	d31f      	bcc.n	801d3d8 <lv_task_handler+0x230>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 801d398:	4b1a      	ldr	r3, [pc, #104]	; (801d404 <lv_task_handler+0x25c>)
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	2264      	movs	r2, #100	; 0x64
 801d39e:	fb02 f203 	mul.w	r2, r2, r3
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 801d3a8:	b2da      	uxtb	r2, r3
 801d3aa:	4b18      	ldr	r3, [pc, #96]	; (801d40c <lv_task_handler+0x264>)
 801d3ac:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 801d3ae:	4b17      	ldr	r3, [pc, #92]	; (801d40c <lv_task_handler+0x264>)
 801d3b0:	781b      	ldrb	r3, [r3, #0]
 801d3b2:	2b64      	cmp	r3, #100	; 0x64
 801d3b4:	d805      	bhi.n	801d3c2 <lv_task_handler+0x21a>
 801d3b6:	4b15      	ldr	r3, [pc, #84]	; (801d40c <lv_task_handler+0x264>)
 801d3b8:	781b      	ldrb	r3, [r3, #0]
 801d3ba:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 801d3be:	b2db      	uxtb	r3, r3
 801d3c0:	e000      	b.n	801d3c4 <lv_task_handler+0x21c>
 801d3c2:	2300      	movs	r3, #0
 801d3c4:	4a11      	ldr	r2, [pc, #68]	; (801d40c <lv_task_handler+0x264>)
 801d3c6:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 801d3c8:	4b0e      	ldr	r3, [pc, #56]	; (801d404 <lv_task_handler+0x25c>)
 801d3ca:	2200      	movs	r2, #0
 801d3cc:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 801d3ce:	f7fd f881 	bl	801a4d4 <lv_tick_get>
 801d3d2:	4602      	mov	r2, r0
 801d3d4:	4b0c      	ldr	r3, [pc, #48]	; (801d408 <lv_task_handler+0x260>)
 801d3d6:	601a      	str	r2, [r3, #0]
    }

    already_running = false; /*Release the mutex*/
 801d3d8:	4b03      	ldr	r3, [pc, #12]	; (801d3e8 <lv_task_handler+0x240>)
 801d3da:	2200      	movs	r2, #0
 801d3dc:	701a      	strb	r2, [r3, #0]

    LV_LOG_TRACE("lv_task_handler ready");
    return time_till_next;
 801d3de:	693b      	ldr	r3, [r7, #16]
}
 801d3e0:	4618      	mov	r0, r3
 801d3e2:	3720      	adds	r7, #32
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	bd80      	pop	{r7, pc}
 801d3e8:	20020097 	.word	0x20020097
 801d3ec:	20020092 	.word	0x20020092
 801d3f0:	20020094 	.word	0x20020094
 801d3f4:	20020096 	.word	0x20020096
 801d3f8:	20020095 	.word	0x20020095
 801d3fc:	20020384 	.word	0x20020384
 801d400:	20020454 	.word	0x20020454
 801d404:	20020098 	.word	0x20020098
 801d408:	2002009c 	.word	0x2002009c
 801d40c:	20020093 	.word	0x20020093

0801d410 <lv_task_create>:
 * @param prio priority of the task (LV_TASK_PRIO_OFF means the task is stopped)
 * @param user_data custom parameter
 * @return pointer to the new task
 */
lv_task_t * lv_task_create(lv_task_cb_t task_xcb, uint32_t period, lv_task_prio_t prio, void * user_data)
{
 801d410:	b590      	push	{r4, r7, lr}
 801d412:	b087      	sub	sp, #28
 801d414:	af00      	add	r7, sp, #0
 801d416:	60f8      	str	r0, [r7, #12]
 801d418:	60b9      	str	r1, [r7, #8]
 801d41a:	603b      	str	r3, [r7, #0]
 801d41c:	4613      	mov	r3, r2
 801d41e:	71fb      	strb	r3, [r7, #7]
    lv_task_t * new_task = NULL;
 801d420:	2300      	movs	r3, #0
 801d422:	617b      	str	r3, [r7, #20]
    lv_task_t * tmp;

    /*Create task lists in order of priority from high to low*/
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801d424:	484a      	ldr	r0, [pc, #296]	; (801d550 <lv_task_create+0x140>)
 801d426:	f7fe fdcb 	bl	801bfc0 <_lv_ll_get_head>
 801d42a:	6138      	str	r0, [r7, #16]

    /*It's the first task*/
    if(NULL == tmp) {
 801d42c:	693b      	ldr	r3, [r7, #16]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d11a      	bne.n	801d468 <lv_task_create+0x58>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 801d432:	4847      	ldr	r0, [pc, #284]	; (801d550 <lv_task_create+0x140>)
 801d434:	f7fe fc67 	bl	801bd06 <_lv_ll_ins_head>
 801d438:	6178      	str	r0, [r7, #20]
        LV_ASSERT_MEM(new_task);
 801d43a:	6978      	ldr	r0, [r7, #20]
 801d43c:	f7fe fa0a 	bl	801b854 <lv_debug_check_null>
 801d440:	4603      	mov	r3, r0
 801d442:	f083 0301 	eor.w	r3, r3, #1
 801d446:	b2db      	uxtb	r3, r3
 801d448:	2b00      	cmp	r3, #0
 801d44a:	d008      	beq.n	801d45e <lv_task_create+0x4e>
 801d44c:	697b      	ldr	r3, [r7, #20]
 801d44e:	f04f 0400 	mov.w	r4, #0
 801d452:	461a      	mov	r2, r3
 801d454:	4623      	mov	r3, r4
 801d456:	483f      	ldr	r0, [pc, #252]	; (801d554 <lv_task_create+0x144>)
 801d458:	f7fe fa0c 	bl	801b874 <lv_debug_log_error>
 801d45c:	e7fe      	b.n	801d45c <lv_task_create+0x4c>
        if(new_task == NULL) return NULL;
 801d45e:	697b      	ldr	r3, [r7, #20]
 801d460:	2b00      	cmp	r3, #0
 801d462:	d14e      	bne.n	801d502 <lv_task_create+0xf2>
 801d464:	2300      	movs	r3, #0
 801d466:	e06e      	b.n	801d546 <lv_task_create+0x136>
    }
    /*Insert the new task to proper place according to its priority*/
    else {
        do {
            if(tmp->prio <= prio) {
 801d468:	693b      	ldr	r3, [r7, #16]
 801d46a:	7d1b      	ldrb	r3, [r3, #20]
 801d46c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d470:	b2db      	uxtb	r3, r3
 801d472:	461a      	mov	r2, r3
 801d474:	79fb      	ldrb	r3, [r7, #7]
 801d476:	429a      	cmp	r2, r3
 801d478:	dc1b      	bgt.n	801d4b2 <lv_task_create+0xa2>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 801d47a:	6939      	ldr	r1, [r7, #16]
 801d47c:	4834      	ldr	r0, [pc, #208]	; (801d550 <lv_task_create+0x140>)
 801d47e:	f7fe fc76 	bl	801bd6e <_lv_ll_ins_prev>
 801d482:	6178      	str	r0, [r7, #20]
                LV_ASSERT_MEM(new_task);
 801d484:	6978      	ldr	r0, [r7, #20]
 801d486:	f7fe f9e5 	bl	801b854 <lv_debug_check_null>
 801d48a:	4603      	mov	r3, r0
 801d48c:	f083 0301 	eor.w	r3, r3, #1
 801d490:	b2db      	uxtb	r3, r3
 801d492:	2b00      	cmp	r3, #0
 801d494:	d008      	beq.n	801d4a8 <lv_task_create+0x98>
 801d496:	697b      	ldr	r3, [r7, #20]
 801d498:	f04f 0400 	mov.w	r4, #0
 801d49c:	461a      	mov	r2, r3
 801d49e:	4623      	mov	r3, r4
 801d4a0:	482c      	ldr	r0, [pc, #176]	; (801d554 <lv_task_create+0x144>)
 801d4a2:	f7fe f9e7 	bl	801b874 <lv_debug_log_error>
 801d4a6:	e7fe      	b.n	801d4a6 <lv_task_create+0x96>
                if(new_task == NULL) return NULL;
 801d4a8:	697b      	ldr	r3, [r7, #20]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d10a      	bne.n	801d4c4 <lv_task_create+0xb4>
 801d4ae:	2300      	movs	r3, #0
 801d4b0:	e049      	b.n	801d546 <lv_task_create+0x136>
                break;
            }
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 801d4b2:	6939      	ldr	r1, [r7, #16]
 801d4b4:	4826      	ldr	r0, [pc, #152]	; (801d550 <lv_task_create+0x140>)
 801d4b6:	f7fe fda9 	bl	801c00c <_lv_ll_get_next>
 801d4ba:	6138      	str	r0, [r7, #16]
        } while(tmp != NULL);
 801d4bc:	693b      	ldr	r3, [r7, #16]
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d1d2      	bne.n	801d468 <lv_task_create+0x58>
 801d4c2:	e000      	b.n	801d4c6 <lv_task_create+0xb6>
                break;
 801d4c4:	bf00      	nop

        /*Only too high priority tasks were found. Add the task to the end*/
        if(tmp == NULL) {
 801d4c6:	693b      	ldr	r3, [r7, #16]
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	d11a      	bne.n	801d502 <lv_task_create+0xf2>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 801d4cc:	4820      	ldr	r0, [pc, #128]	; (801d550 <lv_task_create+0x140>)
 801d4ce:	f7fe fc95 	bl	801bdfc <_lv_ll_ins_tail>
 801d4d2:	6178      	str	r0, [r7, #20]
            LV_ASSERT_MEM(new_task);
 801d4d4:	6978      	ldr	r0, [r7, #20]
 801d4d6:	f7fe f9bd 	bl	801b854 <lv_debug_check_null>
 801d4da:	4603      	mov	r3, r0
 801d4dc:	f083 0301 	eor.w	r3, r3, #1
 801d4e0:	b2db      	uxtb	r3, r3
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d008      	beq.n	801d4f8 <lv_task_create+0xe8>
 801d4e6:	697b      	ldr	r3, [r7, #20]
 801d4e8:	f04f 0400 	mov.w	r4, #0
 801d4ec:	461a      	mov	r2, r3
 801d4ee:	4623      	mov	r3, r4
 801d4f0:	4818      	ldr	r0, [pc, #96]	; (801d554 <lv_task_create+0x144>)
 801d4f2:	f7fe f9bf 	bl	801b874 <lv_debug_log_error>
 801d4f6:	e7fe      	b.n	801d4f6 <lv_task_create+0xe6>
            if(new_task == NULL) return NULL;
 801d4f8:	697b      	ldr	r3, [r7, #20]
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	d101      	bne.n	801d502 <lv_task_create+0xf2>
 801d4fe:	2300      	movs	r3, #0
 801d500:	e021      	b.n	801d546 <lv_task_create+0x136>
        }
    }
    task_list_changed = true;
 801d502:	4b15      	ldr	r3, [pc, #84]	; (801d558 <lv_task_create+0x148>)
 801d504:	2201      	movs	r2, #1
 801d506:	701a      	strb	r2, [r3, #0]

    new_task->period  = period;
 801d508:	697b      	ldr	r3, [r7, #20]
 801d50a:	68ba      	ldr	r2, [r7, #8]
 801d50c:	601a      	str	r2, [r3, #0]
    new_task->task_cb = task_xcb;
 801d50e:	697b      	ldr	r3, [r7, #20]
 801d510:	68fa      	ldr	r2, [r7, #12]
 801d512:	609a      	str	r2, [r3, #8]
    new_task->prio    = prio;
 801d514:	79fb      	ldrb	r3, [r7, #7]
 801d516:	f003 0307 	and.w	r3, r3, #7
 801d51a:	b2d9      	uxtb	r1, r3
 801d51c:	697a      	ldr	r2, [r7, #20]
 801d51e:	7d13      	ldrb	r3, [r2, #20]
 801d520:	f361 0302 	bfi	r3, r1, #0, #3
 801d524:	7513      	strb	r3, [r2, #20]

    new_task->repeat_count = -1;
 801d526:	697b      	ldr	r3, [r7, #20]
 801d528:	f04f 32ff 	mov.w	r2, #4294967295
 801d52c:	611a      	str	r2, [r3, #16]
    new_task->last_run = lv_tick_get();
 801d52e:	f7fc ffd1 	bl	801a4d4 <lv_tick_get>
 801d532:	4602      	mov	r2, r0
 801d534:	697b      	ldr	r3, [r7, #20]
 801d536:	605a      	str	r2, [r3, #4]

    new_task->user_data = user_data;
 801d538:	697b      	ldr	r3, [r7, #20]
 801d53a:	683a      	ldr	r2, [r7, #0]
 801d53c:	60da      	str	r2, [r3, #12]

    task_created = true;
 801d53e:	4b07      	ldr	r3, [pc, #28]	; (801d55c <lv_task_create+0x14c>)
 801d540:	2201      	movs	r2, #1
 801d542:	701a      	strb	r2, [r3, #0]

    return new_task;
 801d544:	697b      	ldr	r3, [r7, #20]
}
 801d546:	4618      	mov	r0, r3
 801d548:	371c      	adds	r7, #28
 801d54a:	46bd      	mov	sp, r7
 801d54c:	bd90      	pop	{r4, r7, pc}
 801d54e:	bf00      	nop
 801d550:	20020384 	.word	0x20020384
 801d554:	08028488 	.word	0x08028488
 801d558:	20020095 	.word	0x20020095
 801d55c:	20020096 	.word	0x20020096

0801d560 <lv_task_del>:
/**
 * Delete a lv_task
 * @param task pointer to task created by task
 */
void lv_task_del(lv_task_t * task)
{
 801d560:	b580      	push	{r7, lr}
 801d562:	b082      	sub	sp, #8
 801d564:	af00      	add	r7, sp, #0
 801d566:	6078      	str	r0, [r7, #4]
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
 801d568:	6879      	ldr	r1, [r7, #4]
 801d56a:	480a      	ldr	r0, [pc, #40]	; (801d594 <lv_task_del+0x34>)
 801d56c:	f7fe fc7a 	bl	801be64 <_lv_ll_remove>
    task_list_changed = true;
 801d570:	4b09      	ldr	r3, [pc, #36]	; (801d598 <lv_task_del+0x38>)
 801d572:	2201      	movs	r2, #1
 801d574:	701a      	strb	r2, [r3, #0]

    lv_mem_free(task);
 801d576:	6878      	ldr	r0, [r7, #4]
 801d578:	f7fe ff42 	bl	801c400 <lv_mem_free>

    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 801d57c:	4b07      	ldr	r3, [pc, #28]	; (801d59c <lv_task_del+0x3c>)
 801d57e:	681b      	ldr	r3, [r3, #0]
 801d580:	687a      	ldr	r2, [r7, #4]
 801d582:	429a      	cmp	r2, r3
 801d584:	d102      	bne.n	801d58c <lv_task_del+0x2c>
 801d586:	4b06      	ldr	r3, [pc, #24]	; (801d5a0 <lv_task_del+0x40>)
 801d588:	2201      	movs	r2, #1
 801d58a:	701a      	strb	r2, [r3, #0]
}
 801d58c:	bf00      	nop
 801d58e:	3708      	adds	r7, #8
 801d590:	46bd      	mov	sp, r7
 801d592:	bd80      	pop	{r7, pc}
 801d594:	20020384 	.word	0x20020384
 801d598:	20020095 	.word	0x20020095
 801d59c:	20020454 	.word	0x20020454
 801d5a0:	20020094 	.word	0x20020094

0801d5a4 <lv_task_set_prio>:
 * Set new priority for a lv_task
 * @param task pointer to a lv_task
 * @param prio the new priority
 */
void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio)
{
 801d5a4:	b580      	push	{r7, lr}
 801d5a6:	b084      	sub	sp, #16
 801d5a8:	af00      	add	r7, sp, #0
 801d5aa:	6078      	str	r0, [r7, #4]
 801d5ac:	460b      	mov	r3, r1
 801d5ae:	70fb      	strb	r3, [r7, #3]
    if(task->prio == prio) return;
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	7d1b      	ldrb	r3, [r3, #20]
 801d5b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d5b8:	b2db      	uxtb	r3, r3
 801d5ba:	461a      	mov	r2, r3
 801d5bc:	78fb      	ldrb	r3, [r7, #3]
 801d5be:	429a      	cmp	r2, r3
 801d5c0:	d036      	beq.n	801d630 <lv_task_set_prio+0x8c>

    /*Find the tasks with new priority*/
    lv_task_t * i;
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 801d5c2:	481d      	ldr	r0, [pc, #116]	; (801d638 <lv_task_set_prio+0x94>)
 801d5c4:	f7fe fcfc 	bl	801bfc0 <_lv_ll_get_head>
 801d5c8:	60f8      	str	r0, [r7, #12]
 801d5ca:	e017      	b.n	801d5fc <lv_task_set_prio+0x58>
        if(i->prio <= prio) {
 801d5cc:	68fb      	ldr	r3, [r7, #12]
 801d5ce:	7d1b      	ldrb	r3, [r3, #20]
 801d5d0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d5d4:	b2db      	uxtb	r3, r3
 801d5d6:	461a      	mov	r2, r3
 801d5d8:	78fb      	ldrb	r3, [r7, #3]
 801d5da:	429a      	cmp	r2, r3
 801d5dc:	dc09      	bgt.n	801d5f2 <lv_task_set_prio+0x4e>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 801d5de:	68fa      	ldr	r2, [r7, #12]
 801d5e0:	687b      	ldr	r3, [r7, #4]
 801d5e2:	429a      	cmp	r2, r3
 801d5e4:	d00e      	beq.n	801d604 <lv_task_set_prio+0x60>
 801d5e6:	68fa      	ldr	r2, [r7, #12]
 801d5e8:	6879      	ldr	r1, [r7, #4]
 801d5ea:	4813      	ldr	r0, [pc, #76]	; (801d638 <lv_task_set_prio+0x94>)
 801d5ec:	f7fe fd5c 	bl	801c0a8 <_lv_ll_move_before>
            break;
 801d5f0:	e008      	b.n	801d604 <lv_task_set_prio+0x60>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 801d5f2:	68f9      	ldr	r1, [r7, #12]
 801d5f4:	4810      	ldr	r0, [pc, #64]	; (801d638 <lv_task_set_prio+0x94>)
 801d5f6:	f7fe fd09 	bl	801c00c <_lv_ll_get_next>
 801d5fa:	60f8      	str	r0, [r7, #12]
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	d1e4      	bne.n	801d5cc <lv_task_set_prio+0x28>
 801d602:	e000      	b.n	801d606 <lv_task_set_prio+0x62>
            break;
 801d604:	bf00      	nop
        }
    }

    /*There was no such a low priority so far then add the node to the tail*/
    if(i == NULL) {
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d104      	bne.n	801d616 <lv_task_set_prio+0x72>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 801d60c:	2200      	movs	r2, #0
 801d60e:	6879      	ldr	r1, [r7, #4]
 801d610:	4809      	ldr	r0, [pc, #36]	; (801d638 <lv_task_set_prio+0x94>)
 801d612:	f7fe fd49 	bl	801c0a8 <_lv_ll_move_before>
    }
    task_list_changed = true;
 801d616:	4b09      	ldr	r3, [pc, #36]	; (801d63c <lv_task_set_prio+0x98>)
 801d618:	2201      	movs	r2, #1
 801d61a:	701a      	strb	r2, [r3, #0]

    task->prio = prio;
 801d61c:	78fb      	ldrb	r3, [r7, #3]
 801d61e:	f003 0307 	and.w	r3, r3, #7
 801d622:	b2d9      	uxtb	r1, r3
 801d624:	687a      	ldr	r2, [r7, #4]
 801d626:	7d13      	ldrb	r3, [r2, #20]
 801d628:	f361 0302 	bfi	r3, r1, #0, #3
 801d62c:	7513      	strb	r3, [r2, #20]
 801d62e:	e000      	b.n	801d632 <lv_task_set_prio+0x8e>
    if(task->prio == prio) return;
 801d630:	bf00      	nop
}
 801d632:	3710      	adds	r7, #16
 801d634:	46bd      	mov	sp, r7
 801d636:	bd80      	pop	{r7, pc}
 801d638:	20020384 	.word	0x20020384
 801d63c:	20020095 	.word	0x20020095

0801d640 <lv_task_ready>:
/**
 * Make a lv_task ready. It will not wait its period.
 * @param task pointer to a lv_task.
 */
void lv_task_ready(lv_task_t * task)
{
 801d640:	b580      	push	{r7, lr}
 801d642:	b082      	sub	sp, #8
 801d644:	af00      	add	r7, sp, #0
 801d646:	6078      	str	r0, [r7, #4]
    task->last_run = lv_tick_get() - task->period - 1;
 801d648:	f7fc ff44 	bl	801a4d4 <lv_tick_get>
 801d64c:	4602      	mov	r2, r0
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	1ad3      	subs	r3, r2, r3
 801d654:	1e5a      	subs	r2, r3, #1
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	605a      	str	r2, [r3, #4]
}
 801d65a:	bf00      	nop
 801d65c:	3708      	adds	r7, #8
 801d65e:	46bd      	mov	sp, r7
 801d660:	bd80      	pop	{r7, pc}
	...

0801d664 <lv_task_enable>:
/**
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
 801d664:	b480      	push	{r7}
 801d666:	b083      	sub	sp, #12
 801d668:	af00      	add	r7, sp, #0
 801d66a:	4603      	mov	r3, r0
 801d66c:	71fb      	strb	r3, [r7, #7]
    lv_task_run = en;
 801d66e:	4a04      	ldr	r2, [pc, #16]	; (801d680 <lv_task_enable+0x1c>)
 801d670:	79fb      	ldrb	r3, [r7, #7]
 801d672:	7013      	strb	r3, [r2, #0]
}
 801d674:	bf00      	nop
 801d676:	370c      	adds	r7, #12
 801d678:	46bd      	mov	sp, r7
 801d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d67e:	4770      	bx	lr
 801d680:	20020092 	.word	0x20020092

0801d684 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 801d684:	b580      	push	{r7, lr}
 801d686:	b084      	sub	sp, #16
 801d688:	af00      	add	r7, sp, #0
 801d68a:	6078      	str	r0, [r7, #4]
    bool exec = false;
 801d68c:	2300      	movs	r3, #0
 801d68e:	73fb      	strb	r3, [r7, #15]

    if(lv_task_time_remaining(task) == 0) {
 801d690:	6878      	ldr	r0, [r7, #4]
 801d692:	f000 f831 	bl	801d6f8 <lv_task_time_remaining>
 801d696:	4603      	mov	r3, r0
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d125      	bne.n	801d6e8 <lv_task_exec+0x64>
        task->last_run = lv_tick_get();
 801d69c:	f7fc ff1a 	bl	801a4d4 <lv_tick_get>
 801d6a0:	4602      	mov	r2, r0
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	605a      	str	r2, [r3, #4]
        if(task->task_cb) task->task_cb(task);
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	689b      	ldr	r3, [r3, #8]
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d003      	beq.n	801d6b6 <lv_task_exec+0x32>
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	689b      	ldr	r3, [r3, #8]
 801d6b2:	6878      	ldr	r0, [r7, #4]
 801d6b4:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 801d6b6:	4b0f      	ldr	r3, [pc, #60]	; (801d6f4 <lv_task_exec+0x70>)
 801d6b8:	781b      	ldrb	r3, [r3, #0]
 801d6ba:	f083 0301 	eor.w	r3, r3, #1
 801d6be:	b2db      	uxtb	r3, r3
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d00f      	beq.n	801d6e4 <lv_task_exec+0x60>
            if(task->repeat_count > 0) {
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	691b      	ldr	r3, [r3, #16]
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	dd04      	ble.n	801d6d6 <lv_task_exec+0x52>
                task->repeat_count--;
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	691b      	ldr	r3, [r3, #16]
 801d6d0:	1e5a      	subs	r2, r3, #1
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	611a      	str	r2, [r3, #16]
            }
            if(task->repeat_count == 0) {
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	691b      	ldr	r3, [r3, #16]
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d102      	bne.n	801d6e4 <lv_task_exec+0x60>
                lv_task_del(task);
 801d6de:	6878      	ldr	r0, [r7, #4]
 801d6e0:	f7ff ff3e 	bl	801d560 <lv_task_del>
            }
        }
        exec = true;
 801d6e4:	2301      	movs	r3, #1
 801d6e6:	73fb      	strb	r3, [r7, #15]
    }

    return exec;
 801d6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	3710      	adds	r7, #16
 801d6ee:	46bd      	mov	sp, r7
 801d6f0:	bd80      	pop	{r7, pc}
 801d6f2:	bf00      	nop
 801d6f4:	20020094 	.word	0x20020094

0801d6f8 <lv_task_time_remaining>:
 * Find out how much time remains before a task must be run.
 * @param task pointer to lv_task
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
 801d6f8:	b580      	push	{r7, lr}
 801d6fa:	b084      	sub	sp, #16
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	6078      	str	r0, [r7, #4]
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	685b      	ldr	r3, [r3, #4]
 801d704:	4618      	mov	r0, r3
 801d706:	f7fc feff 	bl	801a508 <lv_tick_elaps>
 801d70a:	60f8      	str	r0, [r7, #12]
    if(elp >= task->period)
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	681b      	ldr	r3, [r3, #0]
 801d710:	68fa      	ldr	r2, [r7, #12]
 801d712:	429a      	cmp	r2, r3
 801d714:	d301      	bcc.n	801d71a <lv_task_time_remaining+0x22>
        return 0;
 801d716:	2300      	movs	r3, #0
 801d718:	e003      	b.n	801d722 <lv_task_time_remaining+0x2a>
    return task->period - elp;
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	681a      	ldr	r2, [r3, #0]
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	1ad3      	subs	r3, r2, r3
}
 801d722:	4618      	mov	r0, r3
 801d724:	3710      	adds	r7, #16
 801d726:	46bd      	mov	sp, r7
 801d728:	bd80      	pop	{r7, pc}

0801d72a <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 801d72a:	b480      	push	{r7}
 801d72c:	b083      	sub	sp, #12
 801d72e:	af00      	add	r7, sp, #0
 801d730:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 801d738:	4618      	mov	r0, r3
 801d73a:	370c      	adds	r7, #12
 801d73c:	46bd      	mov	sp, r7
 801d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d742:	4770      	bx	lr

0801d744 <_lv_txt_get_size>:
 * @param max_width max with of the text (break the lines to fit this size) Set CORD_MAX to avoid
 * line breaks
 */
void _lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                      lv_coord_t line_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 801d744:	b580      	push	{r7, lr}
 801d746:	b08a      	sub	sp, #40	; 0x28
 801d748:	af02      	add	r7, sp, #8
 801d74a:	60f8      	str	r0, [r7, #12]
 801d74c:	60b9      	str	r1, [r7, #8]
 801d74e:	607a      	str	r2, [r7, #4]
 801d750:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 801d752:	68fb      	ldr	r3, [r7, #12]
 801d754:	2200      	movs	r2, #0
 801d756:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	2200      	movs	r2, #0
 801d75c:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 801d75e:	68bb      	ldr	r3, [r7, #8]
 801d760:	2b00      	cmp	r3, #0
 801d762:	f000 80a0 	beq.w	801d8a6 <_lv_txt_get_size+0x162>
    if(font == NULL) return;
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	2b00      	cmp	r3, #0
 801d76a:	f000 809e 	beq.w	801d8aa <_lv_txt_get_size+0x166>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801d76e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801d772:	f003 0302 	and.w	r3, r3, #2
 801d776:	2b00      	cmp	r3, #0
 801d778:	d002      	beq.n	801d780 <_lv_txt_get_size+0x3c>
 801d77a:	f647 4318 	movw	r3, #31768	; 0x7c18
 801d77e:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 801d780:	2300      	movs	r3, #0
 801d782:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 801d784:	2300      	movs	r3, #0
 801d786:	61bb      	str	r3, [r7, #24]
    uint16_t letter_height = lv_font_get_line_height(font);
 801d788:	6878      	ldr	r0, [r7, #4]
 801d78a:	f7ff ffce 	bl	801d72a <lv_font_get_line_height>
 801d78e:	4603      	mov	r3, r0
 801d790:	82fb      	strh	r3, [r7, #22]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 801d792:	e04f      	b.n	801d834 <_lv_txt_get_size+0xf0>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 801d794:	68ba      	ldr	r2, [r7, #8]
 801d796:	69fb      	ldr	r3, [r7, #28]
 801d798:	18d0      	adds	r0, r2, r3
 801d79a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801d79e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801d7a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801d7a6:	9300      	str	r3, [sp, #0]
 801d7a8:	460b      	mov	r3, r1
 801d7aa:	6879      	ldr	r1, [r7, #4]
 801d7ac:	f000 f964 	bl	801da78 <_lv_txt_get_next_line>
 801d7b0:	4602      	mov	r2, r0
 801d7b2:	69bb      	ldr	r3, [r7, #24]
 801d7b4:	4413      	add	r3, r2
 801d7b6:	61bb      	str	r3, [r7, #24]

        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d7be:	461a      	mov	r2, r3
 801d7c0:	8afb      	ldrh	r3, [r7, #22]
 801d7c2:	441a      	add	r2, r3
 801d7c4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d7c8:	4413      	add	r3, r2
 801d7ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d7ce:	d26e      	bcs.n	801d8ae <_lv_txt_get_size+0x16a>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
            return;
        }
        else {
            size_res->y += letter_height;
 801d7d0:	68fb      	ldr	r3, [r7, #12]
 801d7d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d7d6:	b29a      	uxth	r2, r3
 801d7d8:	8afb      	ldrh	r3, [r7, #22]
 801d7da:	4413      	add	r3, r2
 801d7dc:	b29b      	uxth	r3, r3
 801d7de:	b21a      	sxth	r2, r3
 801d7e0:	68fb      	ldr	r3, [r7, #12]
 801d7e2:	805a      	strh	r2, [r3, #2]
            size_res->y += line_space;
 801d7e4:	68fb      	ldr	r3, [r7, #12]
 801d7e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d7ea:	b29a      	uxth	r2, r3
 801d7ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801d7ee:	4413      	add	r3, r2
 801d7f0:	b29b      	uxth	r3, r3
 801d7f2:	b21a      	sxth	r2, r3
 801d7f4:	68fb      	ldr	r3, [r7, #12]
 801d7f6:	805a      	strh	r2, [r3, #2]
        }

        /*Calculate the longest line*/
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 801d7f8:	68ba      	ldr	r2, [r7, #8]
 801d7fa:	69fb      	ldr	r3, [r7, #28]
 801d7fc:	18d0      	adds	r0, r2, r3
 801d7fe:	69ba      	ldr	r2, [r7, #24]
 801d800:	69fb      	ldr	r3, [r7, #28]
 801d802:	1ad1      	subs	r1, r2, r3
 801d804:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801d808:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801d80c:	9300      	str	r3, [sp, #0]
 801d80e:	4613      	mov	r3, r2
 801d810:	687a      	ldr	r2, [r7, #4]
 801d812:	f000 f9ef 	bl	801dbf4 <_lv_txt_get_width>
 801d816:	4603      	mov	r3, r0
 801d818:	82bb      	strh	r3, [r7, #20]
                                                       flag);

        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 801d81a:	68fb      	ldr	r3, [r7, #12]
 801d81c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d820:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d824:	4293      	cmp	r3, r2
 801d826:	bfb8      	it	lt
 801d828:	4613      	movlt	r3, r2
 801d82a:	b21a      	sxth	r2, r3
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 801d830:	69bb      	ldr	r3, [r7, #24]
 801d832:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 801d834:	68ba      	ldr	r2, [r7, #8]
 801d836:	69fb      	ldr	r3, [r7, #28]
 801d838:	4413      	add	r3, r2
 801d83a:	781b      	ldrb	r3, [r3, #0]
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d1a9      	bne.n	801d794 <_lv_txt_get_size+0x50>
    }

    /*Make the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 801d840:	69fb      	ldr	r3, [r7, #28]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d01a      	beq.n	801d87c <_lv_txt_get_size+0x138>
 801d846:	69fb      	ldr	r3, [r7, #28]
 801d848:	3b01      	subs	r3, #1
 801d84a:	68ba      	ldr	r2, [r7, #8]
 801d84c:	4413      	add	r3, r2
 801d84e:	781b      	ldrb	r3, [r3, #0]
 801d850:	2b0a      	cmp	r3, #10
 801d852:	d006      	beq.n	801d862 <_lv_txt_get_size+0x11e>
 801d854:	69fb      	ldr	r3, [r7, #28]
 801d856:	3b01      	subs	r3, #1
 801d858:	68ba      	ldr	r2, [r7, #8]
 801d85a:	4413      	add	r3, r2
 801d85c:	781b      	ldrb	r3, [r3, #0]
 801d85e:	2b0d      	cmp	r3, #13
 801d860:	d10c      	bne.n	801d87c <_lv_txt_get_size+0x138>
        size_res->y += letter_height + line_space;
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d868:	b29a      	uxth	r2, r3
 801d86a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 801d86c:	8afb      	ldrh	r3, [r7, #22]
 801d86e:	440b      	add	r3, r1
 801d870:	b29b      	uxth	r3, r3
 801d872:	4413      	add	r3, r2
 801d874:	b29b      	uxth	r3, r3
 801d876:	b21a      	sxth	r2, r3
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d882:	2b00      	cmp	r3, #0
 801d884:	d104      	bne.n	801d890 <_lv_txt_get_size+0x14c>
        size_res->y = letter_height;
 801d886:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	805a      	strh	r2, [r3, #2]
 801d88e:	e00f      	b.n	801d8b0 <_lv_txt_get_size+0x16c>
    else
        size_res->y -= line_space;
 801d890:	68fb      	ldr	r3, [r7, #12]
 801d892:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d896:	b29a      	uxth	r2, r3
 801d898:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801d89a:	1ad3      	subs	r3, r2, r3
 801d89c:	b29b      	uxth	r3, r3
 801d89e:	b21a      	sxth	r2, r3
 801d8a0:	68fb      	ldr	r3, [r7, #12]
 801d8a2:	805a      	strh	r2, [r3, #2]
 801d8a4:	e004      	b.n	801d8b0 <_lv_txt_get_size+0x16c>
    if(text == NULL) return;
 801d8a6:	bf00      	nop
 801d8a8:	e002      	b.n	801d8b0 <_lv_txt_get_size+0x16c>
    if(font == NULL) return;
 801d8aa:	bf00      	nop
 801d8ac:	e000      	b.n	801d8b0 <_lv_txt_get_size+0x16c>
            return;
 801d8ae:	bf00      	nop
}
 801d8b0:	3720      	adds	r7, #32
 801d8b2:	46bd      	mov	sp, r7
 801d8b4:	bd80      	pop	{r7, pc}
	...

0801d8b8 <lv_txt_get_next_word>:
 * @return the index of the first char of the next word (in byte index not letter index. With UTF-8 they are different)
 */
static uint32_t lv_txt_get_next_word(const char * txt, const lv_font_t * font,
                                     lv_coord_t letter_space, lv_coord_t max_width,
                                     lv_txt_flag_t flag, uint32_t * word_w_ptr, lv_txt_cmd_state_t * cmd_state, bool force)
{
 801d8b8:	b580      	push	{r7, lr}
 801d8ba:	b08e      	sub	sp, #56	; 0x38
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	60f8      	str	r0, [r7, #12]
 801d8c0:	60b9      	str	r1, [r7, #8]
 801d8c2:	4611      	mov	r1, r2
 801d8c4:	461a      	mov	r2, r3
 801d8c6:	460b      	mov	r3, r1
 801d8c8:	80fb      	strh	r3, [r7, #6]
 801d8ca:	4613      	mov	r3, r2
 801d8cc:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL || txt[0] == '\0') return 0;
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d003      	beq.n	801d8dc <lv_txt_get_next_word+0x24>
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	781b      	ldrb	r3, [r3, #0]
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d101      	bne.n	801d8e0 <lv_txt_get_next_word+0x28>
 801d8dc:	2300      	movs	r3, #0
 801d8de:	e0c4      	b.n	801da6a <lv_txt_get_next_word+0x1b2>
    if(font == NULL) return 0;
 801d8e0:	68bb      	ldr	r3, [r7, #8]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d101      	bne.n	801d8ea <lv_txt_get_next_word+0x32>
 801d8e6:	2300      	movs	r3, #0
 801d8e8:	e0bf      	b.n	801da6a <lv_txt_get_next_word+0x1b2>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801d8ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801d8ee:	f003 0302 	and.w	r3, r3, #2
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d002      	beq.n	801d8fc <lv_txt_get_next_word+0x44>
 801d8f6:	f647 4318 	movw	r3, #31768	; 0x7c18
 801d8fa:	80bb      	strh	r3, [r7, #4]

    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 801d8fc:	2300      	movs	r3, #0
 801d8fe:	637b      	str	r3, [r7, #52]	; 0x34
 801d900:	2300      	movs	r3, #0
 801d902:	617b      	str	r3, [r7, #20]
 801d904:	2300      	movs	r3, #0
 801d906:	613b      	str	r3, [r7, #16]
    uint32_t letter = 0;      /* Letter at i */
 801d908:	2300      	movs	r3, #0
 801d90a:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t letter_next = 0; /* Letter at i_next */
 801d90c:	2300      	movs	r3, #0
 801d90e:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t letter_w;
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
 801d910:	2300      	movs	r3, #0
 801d912:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
 801d914:	2300      	movs	r3, #0
 801d916:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
 801d918:	f04f 33ff 	mov.w	r3, #4294967295
 801d91c:	623b      	str	r3, [r7, #32]
    uint32_t break_letter_count = 0; /* Number of characters up to the long word break point */
 801d91e:	2300      	movs	r3, #0
 801d920:	61fb      	str	r3, [r7, #28]

    letter = _lv_txt_encoded_next(txt, &i_next);
 801d922:	4b54      	ldr	r3, [pc, #336]	; (801da74 <lv_txt_get_next_word+0x1bc>)
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	f107 0214 	add.w	r2, r7, #20
 801d92a:	4611      	mov	r1, r2
 801d92c:	68f8      	ldr	r0, [r7, #12]
 801d92e:	4798      	blx	r3
 801d930:	6338      	str	r0, [r7, #48]	; 0x30
    i_next_next = i_next;
 801d932:	697b      	ldr	r3, [r7, #20]
 801d934:	613b      	str	r3, [r7, #16]

    /* Obtain the full word, regardless if it fits or not in max_width */
    while(txt[i] != '\0') {
 801d936:	e074      	b.n	801da22 <lv_txt_get_next_word+0x16a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 801d938:	4b4e      	ldr	r3, [pc, #312]	; (801da74 <lv_txt_get_next_word+0x1bc>)
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	f107 0210 	add.w	r2, r7, #16
 801d940:	4611      	mov	r1, r2
 801d942:	68f8      	ldr	r0, [r7, #12]
 801d944:	4798      	blx	r3
 801d946:	62f8      	str	r0, [r7, #44]	; 0x2c
        word_len++;
 801d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d94a:	3301      	adds	r3, #1
 801d94c:	627b      	str	r3, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801d94e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801d952:	f003 0301 	and.w	r3, r3, #1
 801d956:	2b00      	cmp	r3, #0
 801d958:	d00d      	beq.n	801d976 <lv_txt_get_next_word+0xbe>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 801d95a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d95c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d95e:	f000 f9af 	bl	801dcc0 <_lv_txt_is_cmd>
 801d962:	4603      	mov	r3, r0
 801d964:	2b00      	cmp	r3, #0
 801d966:	d006      	beq.n	801d976 <lv_txt_get_next_word+0xbe>
                i = i_next;
 801d968:	697b      	ldr	r3, [r7, #20]
 801d96a:	637b      	str	r3, [r7, #52]	; 0x34
                i_next = i_next_next;
 801d96c:	693b      	ldr	r3, [r7, #16]
 801d96e:	617b      	str	r3, [r7, #20]
                letter = letter_next;
 801d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d972:	633b      	str	r3, [r7, #48]	; 0x30
                continue;   /*Skip the letter is it is part of a command*/
 801d974:	e055      	b.n	801da22 <lv_txt_get_next_word+0x16a>
            }
        }

        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801d976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d978:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d97a:	68b8      	ldr	r0, [r7, #8]
 801d97c:	f7fb fbaa 	bl	80190d4 <lv_font_get_glyph_width>
 801d980:	4603      	mov	r3, r0
 801d982:	837b      	strh	r3, [r7, #26]
        cur_w += letter_w;
 801d984:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801d986:	8b7b      	ldrh	r3, [r7, #26]
 801d988:	4413      	add	r3, r2
 801d98a:	b29b      	uxth	r3, r3
 801d98c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if(letter_w > 0) {
 801d98e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801d992:	2b00      	cmp	r3, #0
 801d994:	dd04      	ble.n	801d9a0 <lv_txt_get_next_word+0xe8>
            cur_w += letter_space;
 801d996:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801d998:	88fb      	ldrh	r3, [r7, #6]
 801d99a:	4413      	add	r3, r2
 801d99c:	b29b      	uxth	r3, r3
 801d99e:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        /* Test if this character fits within max_width */
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 801d9a0:	6a3b      	ldr	r3, [r7, #32]
 801d9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d9a6:	d10d      	bne.n	801d9c4 <lv_txt_get_next_word+0x10c>
 801d9a8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801d9ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d9b0:	1ad2      	subs	r2, r2, r3
 801d9b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801d9b6:	429a      	cmp	r2, r3
 801d9b8:	dd04      	ble.n	801d9c4 <lv_txt_get_next_word+0x10c>
            break_index = i;
 801d9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9bc:	623b      	str	r3, [r7, #32]
            break_letter_count = word_len - 1;
 801d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9c0:	3b01      	subs	r3, #1
 801d9c2:	61fb      	str	r3, [r7, #28]
            /* break_index is now pointing at the character that doesn't fit */
        }

        /*Check for new line chars and breakchars*/
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 801d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9c6:	2b0a      	cmp	r3, #10
 801d9c8:	d008      	beq.n	801d9dc <lv_txt_get_next_word+0x124>
 801d9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9cc:	2b0d      	cmp	r3, #13
 801d9ce:	d005      	beq.n	801d9dc <lv_txt_get_next_word+0x124>
 801d9d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d9d2:	f000 fae5 	bl	801dfa0 <is_break_char>
 801d9d6:	4603      	mov	r3, r0
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d011      	beq.n	801da00 <lv_txt_get_next_word+0x148>
            /* Update the output width on the first character if it fits.
             * Must do this here in case first letter is a break character. */
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 801d9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d10a      	bne.n	801d9f8 <lv_txt_get_next_word+0x140>
 801d9e2:	6a3b      	ldr	r3, [r7, #32]
 801d9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d9e8:	d106      	bne.n	801d9f8 <lv_txt_get_next_word+0x140>
 801d9ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d003      	beq.n	801d9f8 <lv_txt_get_next_word+0x140>
 801d9f0:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801d9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d9f6:	601a      	str	r2, [r3, #0]
            word_len--;
 801d9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9fa:	3b01      	subs	r3, #1
 801d9fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801d9fe:	e016      	b.n	801da2e <lv_txt_get_next_word+0x176>
        }

        /* Update the output width */
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 801da00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da02:	2b00      	cmp	r3, #0
 801da04:	d007      	beq.n	801da16 <lv_txt_get_next_word+0x15e>
 801da06:	6a3b      	ldr	r3, [r7, #32]
 801da08:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da0c:	d103      	bne.n	801da16 <lv_txt_get_next_word+0x15e>
 801da0e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801da12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da14:	601a      	str	r2, [r3, #0]

        i = i_next;
 801da16:	697b      	ldr	r3, [r7, #20]
 801da18:	637b      	str	r3, [r7, #52]	; 0x34
        i_next = i_next_next;
 801da1a:	693b      	ldr	r3, [r7, #16]
 801da1c:	617b      	str	r3, [r7, #20]
        letter = letter_next;
 801da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da20:	633b      	str	r3, [r7, #48]	; 0x30
    while(txt[i] != '\0') {
 801da22:	68fa      	ldr	r2, [r7, #12]
 801da24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da26:	4413      	add	r3, r2
 801da28:	781b      	ldrb	r3, [r3, #0]
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	d184      	bne.n	801d938 <lv_txt_get_next_word+0x80>
    }

    /* Entire Word fits in the provided space */
    if(break_index == NO_BREAK_FOUND) {
 801da2e:	6a3b      	ldr	r3, [r7, #32]
 801da30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da34:	d10c      	bne.n	801da50 <lv_txt_get_next_word+0x198>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 801da36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d005      	beq.n	801da48 <lv_txt_get_next_word+0x190>
 801da3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da3e:	2b0d      	cmp	r3, #13
 801da40:	d104      	bne.n	801da4c <lv_txt_get_next_word+0x194>
 801da42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da44:	2b0a      	cmp	r3, #10
 801da46:	d101      	bne.n	801da4c <lv_txt_get_next_word+0x194>
 801da48:	697b      	ldr	r3, [r7, #20]
 801da4a:	637b      	str	r3, [r7, #52]	; 0x34
        return i;
 801da4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da4e:	e00c      	b.n	801da6a <lv_txt_get_next_word+0x1b2>
            // However, in current usage, this doesn't impact anything.
        }
    }
    return i;
#else
    if(force) return break_index;
 801da50:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801da54:	2b00      	cmp	r3, #0
 801da56:	d001      	beq.n	801da5c <lv_txt_get_next_word+0x1a4>
 801da58:	6a3b      	ldr	r3, [r7, #32]
 801da5a:	e006      	b.n	801da6a <lv_txt_get_next_word+0x1b2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
 801da5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da5e:	2b00      	cmp	r3, #0
 801da60:	d002      	beq.n	801da68 <lv_txt_get_next_word+0x1b0>
 801da62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da64:	2200      	movs	r2, #0
 801da66:	601a      	str	r2, [r3, #0]
    (void) break_letter_count;
    return 0;
 801da68:	2300      	movs	r3, #0
#endif
}
 801da6a:	4618      	mov	r0, r3
 801da6c:	3738      	adds	r7, #56	; 0x38
 801da6e:	46bd      	mov	sp, r7
 801da70:	bd80      	pop	{r7, pc}
 801da72:	bf00      	nop
 801da74:	20000044 	.word	0x20000044

0801da78 <_lv_txt_get_next_line>:
 * @param flags settings for the text from 'txt_flag_type' enum
 * @return the index of the first char of the new line (in byte index not letter index. With UTF-8 they are different)
 */
uint32_t _lv_txt_get_next_line(const char * txt, const lv_font_t * font,
                               lv_coord_t letter_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 801da78:	b580      	push	{r7, lr}
 801da7a:	b08e      	sub	sp, #56	; 0x38
 801da7c:	af04      	add	r7, sp, #16
 801da7e:	60f8      	str	r0, [r7, #12]
 801da80:	60b9      	str	r1, [r7, #8]
 801da82:	4611      	mov	r1, r2
 801da84:	461a      	mov	r2, r3
 801da86:	460b      	mov	r3, r1
 801da88:	80fb      	strh	r3, [r7, #6]
 801da8a:	4613      	mov	r3, r2
 801da8c:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL) return 0;
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	2b00      	cmp	r3, #0
 801da92:	d101      	bne.n	801da98 <_lv_txt_get_next_line+0x20>
 801da94:	2300      	movs	r3, #0
 801da96:	e0a7      	b.n	801dbe8 <_lv_txt_get_next_line+0x170>
    if(font == NULL) return 0;
 801da98:	68bb      	ldr	r3, [r7, #8]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d101      	bne.n	801daa2 <_lv_txt_get_next_line+0x2a>
 801da9e:	2300      	movs	r3, #0
 801daa0:	e0a2      	b.n	801dbe8 <_lv_txt_get_next_line+0x170>

    /* If max_width doesn't mater simply find the new line character
     * without thinking about word wrapping*/
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
 801daa2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801daa6:	f003 0302 	and.w	r3, r3, #2
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d105      	bne.n	801daba <_lv_txt_get_next_line+0x42>
 801daae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801dab2:	f003 0310 	and.w	r3, r3, #16
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d022      	beq.n	801db00 <_lv_txt_get_next_line+0x88>
        uint32_t i;
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 801daba:	2300      	movs	r3, #0
 801dabc:	627b      	str	r3, [r7, #36]	; 0x24
 801dabe:	e002      	b.n	801dac6 <_lv_txt_get_next_line+0x4e>
 801dac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dac2:	3301      	adds	r3, #1
 801dac4:	627b      	str	r3, [r7, #36]	; 0x24
 801dac6:	68fa      	ldr	r2, [r7, #12]
 801dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daca:	4413      	add	r3, r2
 801dacc:	781b      	ldrb	r3, [r3, #0]
 801dace:	2b0a      	cmp	r3, #10
 801dad0:	d00b      	beq.n	801daea <_lv_txt_get_next_line+0x72>
 801dad2:	68fa      	ldr	r2, [r7, #12]
 801dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dad6:	4413      	add	r3, r2
 801dad8:	781b      	ldrb	r3, [r3, #0]
 801dada:	2b0d      	cmp	r3, #13
 801dadc:	d005      	beq.n	801daea <_lv_txt_get_next_line+0x72>
 801dade:	68fa      	ldr	r2, [r7, #12]
 801dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dae2:	4413      	add	r3, r2
 801dae4:	781b      	ldrb	r3, [r3, #0]
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d1ea      	bne.n	801dac0 <_lv_txt_get_next_line+0x48>
            /*Just find the new line chars or string ends by incrementing `i`*/
        }
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 801daea:	68fa      	ldr	r2, [r7, #12]
 801daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daee:	4413      	add	r3, r2
 801daf0:	781b      	ldrb	r3, [r3, #0]
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d002      	beq.n	801dafc <_lv_txt_get_next_line+0x84>
 801daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daf8:	3301      	adds	r3, #1
 801dafa:	627b      	str	r3, [r7, #36]	; 0x24
        return i;
 801dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dafe:	e073      	b.n	801dbe8 <_lv_txt_get_next_line+0x170>
    }

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801db00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801db04:	f003 0302 	and.w	r3, r3, #2
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d002      	beq.n	801db12 <_lv_txt_get_next_line+0x9a>
 801db0c:	f647 4318 	movw	r3, #31768	; 0x7c18
 801db10:	80bb      	strh	r3, [r7, #4]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801db12:	2300      	movs	r3, #0
 801db14:	77fb      	strb	r3, [r7, #31]
    uint32_t i = 0;                                        /* Iterating index into txt */
 801db16:	2300      	movs	r3, #0
 801db18:	61bb      	str	r3, [r7, #24]

    while(txt[i] != '\0' && max_width > 0) {
 801db1a:	e04e      	b.n	801dbba <_lv_txt_get_next_line+0x142>
        uint32_t word_w = 0;
 801db1c:	2300      	movs	r3, #0
 801db1e:	617b      	str	r3, [r7, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 801db20:	69bb      	ldr	r3, [r7, #24]
 801db22:	68fa      	ldr	r2, [r7, #12]
 801db24:	18d0      	adds	r0, r2, r3
 801db26:	69bb      	ldr	r3, [r7, #24]
 801db28:	2b00      	cmp	r3, #0
 801db2a:	bf0c      	ite	eq
 801db2c:	2301      	moveq	r3, #1
 801db2e:	2300      	movne	r3, #0
 801db30:	b2db      	uxtb	r3, r3
 801db32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801db36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801db3a:	9303      	str	r3, [sp, #12]
 801db3c:	f107 031f 	add.w	r3, r7, #31
 801db40:	9302      	str	r3, [sp, #8]
 801db42:	f107 0314 	add.w	r3, r7, #20
 801db46:	9301      	str	r3, [sp, #4]
 801db48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801db4c:	9300      	str	r3, [sp, #0]
 801db4e:	460b      	mov	r3, r1
 801db50:	68b9      	ldr	r1, [r7, #8]
 801db52:	f7ff feb1 	bl	801d8b8 <lv_txt_get_next_word>
 801db56:	6238      	str	r0, [r7, #32]
        max_width -= word_w;
 801db58:	88ba      	ldrh	r2, [r7, #4]
 801db5a:	697b      	ldr	r3, [r7, #20]
 801db5c:	b29b      	uxth	r3, r3
 801db5e:	1ad3      	subs	r3, r2, r3
 801db60:	b29b      	uxth	r3, r3
 801db62:	80bb      	strh	r3, [r7, #4]

        if(advance == 0) {
 801db64:	6a3b      	ldr	r3, [r7, #32]
 801db66:	2b00      	cmp	r3, #0
 801db68:	d10a      	bne.n	801db80 <_lv_txt_get_next_line+0x108>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 801db6a:	69bb      	ldr	r3, [r7, #24]
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d12f      	bne.n	801dbd0 <_lv_txt_get_next_line+0x158>
 801db70:	4b1f      	ldr	r3, [pc, #124]	; (801dbf0 <_lv_txt_get_next_line+0x178>)
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	f107 0218 	add.w	r2, r7, #24
 801db78:	4611      	mov	r1, r2
 801db7a:	68f8      	ldr	r0, [r7, #12]
 801db7c:	4798      	blx	r3
            break;
 801db7e:	e027      	b.n	801dbd0 <_lv_txt_get_next_line+0x158>
        }

        i += advance;
 801db80:	69ba      	ldr	r2, [r7, #24]
 801db82:	6a3b      	ldr	r3, [r7, #32]
 801db84:	4413      	add	r3, r2
 801db86:	61bb      	str	r3, [r7, #24]

        if(txt[0] == '\n' || txt[0] == '\r') break;
 801db88:	68fb      	ldr	r3, [r7, #12]
 801db8a:	781b      	ldrb	r3, [r3, #0]
 801db8c:	2b0a      	cmp	r3, #10
 801db8e:	d01f      	beq.n	801dbd0 <_lv_txt_get_next_line+0x158>
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	781b      	ldrb	r3, [r3, #0]
 801db94:	2b0d      	cmp	r3, #13
 801db96:	d01b      	beq.n	801dbd0 <_lv_txt_get_next_line+0x158>

        if(txt[i] == '\n' || txt[i] == '\r') {
 801db98:	69bb      	ldr	r3, [r7, #24]
 801db9a:	68fa      	ldr	r2, [r7, #12]
 801db9c:	4413      	add	r3, r2
 801db9e:	781b      	ldrb	r3, [r3, #0]
 801dba0:	2b0a      	cmp	r3, #10
 801dba2:	d005      	beq.n	801dbb0 <_lv_txt_get_next_line+0x138>
 801dba4:	69bb      	ldr	r3, [r7, #24]
 801dba6:	68fa      	ldr	r2, [r7, #12]
 801dba8:	4413      	add	r3, r2
 801dbaa:	781b      	ldrb	r3, [r3, #0]
 801dbac:	2b0d      	cmp	r3, #13
 801dbae:	d104      	bne.n	801dbba <_lv_txt_get_next_line+0x142>
            i++;  /* Include the following newline in the current line */
 801dbb0:	69bb      	ldr	r3, [r7, #24]
 801dbb2:	3301      	adds	r3, #1
 801dbb4:	61bb      	str	r3, [r7, #24]
            break;
 801dbb6:	bf00      	nop
 801dbb8:	e00b      	b.n	801dbd2 <_lv_txt_get_next_line+0x15a>
    while(txt[i] != '\0' && max_width > 0) {
 801dbba:	69bb      	ldr	r3, [r7, #24]
 801dbbc:	68fa      	ldr	r2, [r7, #12]
 801dbbe:	4413      	add	r3, r2
 801dbc0:	781b      	ldrb	r3, [r3, #0]
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	d005      	beq.n	801dbd2 <_lv_txt_get_next_line+0x15a>
 801dbc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	dca6      	bgt.n	801db1c <_lv_txt_get_next_line+0xa4>
 801dbce:	e000      	b.n	801dbd2 <_lv_txt_get_next_line+0x15a>
            break;
 801dbd0:	bf00      	nop
        }

    }

    /* Always step at least one to avoid infinite loops */
    if(i == 0) {
 801dbd2:	69bb      	ldr	r3, [r7, #24]
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d106      	bne.n	801dbe6 <_lv_txt_get_next_line+0x16e>
        _lv_txt_encoded_next(txt, &i);
 801dbd8:	4b05      	ldr	r3, [pc, #20]	; (801dbf0 <_lv_txt_get_next_line+0x178>)
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	f107 0218 	add.w	r2, r7, #24
 801dbe0:	4611      	mov	r1, r2
 801dbe2:	68f8      	ldr	r0, [r7, #12]
 801dbe4:	4798      	blx	r3
    }

    return i;
 801dbe6:	69bb      	ldr	r3, [r7, #24]
}
 801dbe8:	4618      	mov	r0, r3
 801dbea:	3728      	adds	r7, #40	; 0x28
 801dbec:	46bd      	mov	sp, r7
 801dbee:	bd80      	pop	{r7, pc}
 801dbf0:	20000044 	.word	0x20000044

0801dbf4 <_lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t _lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                             lv_txt_flag_t flag)
{
 801dbf4:	b580      	push	{r7, lr}
 801dbf6:	b08a      	sub	sp, #40	; 0x28
 801dbf8:	af00      	add	r7, sp, #0
 801dbfa:	60f8      	str	r0, [r7, #12]
 801dbfc:	60b9      	str	r1, [r7, #8]
 801dbfe:	607a      	str	r2, [r7, #4]
 801dc00:	807b      	strh	r3, [r7, #2]
    if(txt == NULL) return 0;
 801dc02:	68fb      	ldr	r3, [r7, #12]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d101      	bne.n	801dc0c <_lv_txt_get_width+0x18>
 801dc08:	2300      	movs	r3, #0
 801dc0a:	e053      	b.n	801dcb4 <_lv_txt_get_width+0xc0>
    if(font == NULL) return 0;
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d101      	bne.n	801dc16 <_lv_txt_get_width+0x22>
 801dc12:	2300      	movs	r3, #0
 801dc14:	e04e      	b.n	801dcb4 <_lv_txt_get_width+0xc0>

    uint32_t i                   = 0;
 801dc16:	2300      	movs	r3, #0
 801dc18:	617b      	str	r3, [r7, #20]
    lv_coord_t width             = 0;
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801dc1e:	2300      	movs	r3, #0
 801dc20:	74fb      	strb	r3, [r7, #19]

    if(length != 0) {
 801dc22:	68bb      	ldr	r3, [r7, #8]
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d043      	beq.n	801dcb0 <_lv_txt_get_width+0xbc>
        while(i < length) {
 801dc28:	e035      	b.n	801dc96 <_lv_txt_get_width+0xa2>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 801dc2a:	4b24      	ldr	r3, [pc, #144]	; (801dcbc <_lv_txt_get_width+0xc8>)
 801dc2c:	681b      	ldr	r3, [r3, #0]
 801dc2e:	f107 0214 	add.w	r2, r7, #20
 801dc32:	4611      	mov	r1, r2
 801dc34:	68f8      	ldr	r0, [r7, #12]
 801dc36:	4798      	blx	r3
 801dc38:	6238      	str	r0, [r7, #32]
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 801dc3a:	4b20      	ldr	r3, [pc, #128]	; (801dcbc <_lv_txt_get_width+0xc8>)
 801dc3c:	681b      	ldr	r3, [r3, #0]
 801dc3e:	697a      	ldr	r2, [r7, #20]
 801dc40:	68f9      	ldr	r1, [r7, #12]
 801dc42:	440a      	add	r2, r1
 801dc44:	2100      	movs	r1, #0
 801dc46:	4610      	mov	r0, r2
 801dc48:	4798      	blx	r3
 801dc4a:	61f8      	str	r0, [r7, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801dc4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801dc50:	f003 0301 	and.w	r3, r3, #1
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d009      	beq.n	801dc6c <_lv_txt_get_width+0x78>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 801dc58:	f107 0313 	add.w	r3, r7, #19
 801dc5c:	6a39      	ldr	r1, [r7, #32]
 801dc5e:	4618      	mov	r0, r3
 801dc60:	f000 f82e 	bl	801dcc0 <_lv_txt_is_cmd>
 801dc64:	4603      	mov	r3, r0
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d000      	beq.n	801dc6c <_lv_txt_get_width+0x78>
                    continue;
 801dc6a:	e014      	b.n	801dc96 <_lv_txt_get_width+0xa2>
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 801dc6c:	69fa      	ldr	r2, [r7, #28]
 801dc6e:	6a39      	ldr	r1, [r7, #32]
 801dc70:	6878      	ldr	r0, [r7, #4]
 801dc72:	f7fb fa2f 	bl	80190d4 <lv_font_get_glyph_width>
 801dc76:	4603      	mov	r3, r0
 801dc78:	837b      	strh	r3, [r7, #26]
            if(char_width > 0) {
 801dc7a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	dd09      	ble.n	801dc96 <_lv_txt_get_width+0xa2>
                width += char_width;
 801dc82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dc84:	8b7b      	ldrh	r3, [r7, #26]
 801dc86:	4413      	add	r3, r2
 801dc88:	b29b      	uxth	r3, r3
 801dc8a:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 801dc8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dc8e:	887b      	ldrh	r3, [r7, #2]
 801dc90:	4413      	add	r3, r2
 801dc92:	b29b      	uxth	r3, r3
 801dc94:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 801dc96:	697b      	ldr	r3, [r7, #20]
 801dc98:	68ba      	ldr	r2, [r7, #8]
 801dc9a:	429a      	cmp	r2, r3
 801dc9c:	d8c5      	bhi.n	801dc2a <_lv_txt_get_width+0x36>
            }
        }

        if(width > 0) {
 801dc9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	dd04      	ble.n	801dcb0 <_lv_txt_get_width+0xbc>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 801dca6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dca8:	887b      	ldrh	r3, [r7, #2]
 801dcaa:	1ad3      	subs	r3, r2, r3
 801dcac:	b29b      	uxth	r3, r3
 801dcae:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned */
        }
    }

    return width;
 801dcb0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 801dcb4:	4618      	mov	r0, r3
 801dcb6:	3728      	adds	r7, #40	; 0x28
 801dcb8:	46bd      	mov	sp, r7
 801dcba:	bd80      	pop	{r7, pc}
 801dcbc:	20000044 	.word	0x20000044

0801dcc0 <_lv_txt_is_cmd>:
 * @param c the current character
 * @return true: the character is part of a command and should not be written,
 *         false: the character should be written
 */
bool _lv_txt_is_cmd(lv_txt_cmd_state_t * state, uint32_t c)
{
 801dcc0:	b480      	push	{r7}
 801dcc2:	b085      	sub	sp, #20
 801dcc4:	af00      	add	r7, sp, #0
 801dcc6:	6078      	str	r0, [r7, #4]
 801dcc8:	6039      	str	r1, [r7, #0]
    bool ret = false;
 801dcca:	2300      	movs	r3, #0
 801dccc:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 801dcce:	2323      	movs	r3, #35	; 0x23
 801dcd0:	461a      	mov	r2, r3
 801dcd2:	683b      	ldr	r3, [r7, #0]
 801dcd4:	4293      	cmp	r3, r2
 801dcd6:	d11a      	bne.n	801dd0e <_lv_txt_is_cmd+0x4e>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	781b      	ldrb	r3, [r3, #0]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d105      	bne.n	801dcec <_lv_txt_is_cmd+0x2c>
            *state = LV_TXT_CMD_STATE_PAR;
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	2201      	movs	r2, #1
 801dce4:	701a      	strb	r2, [r3, #0]
            ret    = true;
 801dce6:	2301      	movs	r3, #1
 801dce8:	73fb      	strb	r3, [r7, #15]
 801dcea:	e010      	b.n	801dd0e <_lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char */
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	781b      	ldrb	r3, [r3, #0]
 801dcf0:	2b01      	cmp	r3, #1
 801dcf2:	d103      	bne.n	801dcfc <_lv_txt_is_cmd+0x3c>
            *state = LV_TXT_CMD_STATE_WAIT;
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	2200      	movs	r2, #0
 801dcf8:	701a      	strb	r2, [r3, #0]
 801dcfa:	e008      	b.n	801dd0e <_lv_txt_is_cmd+0x4e>
        }
        /*Command end */
        else if(*state == LV_TXT_CMD_STATE_IN) {
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	781b      	ldrb	r3, [r3, #0]
 801dd00:	2b02      	cmp	r3, #2
 801dd02:	d104      	bne.n	801dd0e <_lv_txt_is_cmd+0x4e>
            *state = LV_TXT_CMD_STATE_WAIT;
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	2200      	movs	r2, #0
 801dd08:	701a      	strb	r2, [r3, #0]
            ret    = true;
 801dd0a:	2301      	movs	r3, #1
 801dd0c:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TXT_CMD_STATE_PAR) {
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	781b      	ldrb	r3, [r3, #0]
 801dd12:	2b01      	cmp	r3, #1
 801dd14:	d107      	bne.n	801dd26 <_lv_txt_is_cmd+0x66>
        if(c == ' ') {
 801dd16:	683b      	ldr	r3, [r7, #0]
 801dd18:	2b20      	cmp	r3, #32
 801dd1a:	d102      	bne.n	801dd22 <_lv_txt_is_cmd+0x62>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	2202      	movs	r2, #2
 801dd20:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 801dd22:	2301      	movs	r3, #1
 801dd24:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 801dd26:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd28:	4618      	mov	r0, r3
 801dd2a:	3714      	adds	r7, #20
 801dd2c:	46bd      	mov	sp, r7
 801dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd32:	4770      	bx	lr

0801dd34 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 801dd34:	b480      	push	{r7}
 801dd36:	b085      	sub	sp, #20
 801dd38:	af00      	add	r7, sp, #0
 801dd3a:	6078      	str	r0, [r7, #4]
 801dd3c:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     * */

    uint32_t result = 0;
 801dd3e:	2300      	movs	r3, #0
 801dd40:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 801dd42:	2300      	movs	r3, #0
 801dd44:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 801dd46:	683b      	ldr	r3, [r7, #0]
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d102      	bne.n	801dd52 <lv_txt_utf8_next+0x1e>
 801dd4c:	f107 0308 	add.w	r3, r7, #8
 801dd50:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 801dd52:	683b      	ldr	r3, [r7, #0]
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	687a      	ldr	r2, [r7, #4]
 801dd58:	4413      	add	r3, r2
 801dd5a:	781b      	ldrb	r3, [r3, #0]
 801dd5c:	b25b      	sxtb	r3, r3
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	db0b      	blt.n	801dd7a <lv_txt_utf8_next+0x46>
        result = txt[*i];
 801dd62:	683b      	ldr	r3, [r7, #0]
 801dd64:	681b      	ldr	r3, [r3, #0]
 801dd66:	687a      	ldr	r2, [r7, #4]
 801dd68:	4413      	add	r3, r2
 801dd6a:	781b      	ldrb	r3, [r3, #0]
 801dd6c:	60fb      	str	r3, [r7, #12]
        (*i)++;
 801dd6e:	683b      	ldr	r3, [r7, #0]
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	1c5a      	adds	r2, r3, #1
 801dd74:	683b      	ldr	r3, [r7, #0]
 801dd76:	601a      	str	r2, [r3, #0]
 801dd78:	e0ea      	b.n	801df50 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if((txt[*i] & 0xE0) == 0xC0) {
 801dd7a:	683b      	ldr	r3, [r7, #0]
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	687a      	ldr	r2, [r7, #4]
 801dd80:	4413      	add	r3, r2
 801dd82:	781b      	ldrb	r3, [r3, #0]
 801dd84:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801dd88:	2bc0      	cmp	r3, #192	; 0xc0
 801dd8a:	d128      	bne.n	801ddde <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 801dd8c:	683b      	ldr	r3, [r7, #0]
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	687a      	ldr	r2, [r7, #4]
 801dd92:	4413      	add	r3, r2
 801dd94:	781b      	ldrb	r3, [r3, #0]
 801dd96:	019b      	lsls	r3, r3, #6
 801dd98:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801dd9c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801dd9e:	683b      	ldr	r3, [r7, #0]
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	1c5a      	adds	r2, r3, #1
 801dda4:	683b      	ldr	r3, [r7, #0]
 801dda6:	601a      	str	r2, [r3, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801dda8:	683b      	ldr	r3, [r7, #0]
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	687a      	ldr	r2, [r7, #4]
 801ddae:	4413      	add	r3, r2
 801ddb0:	781b      	ldrb	r3, [r3, #0]
 801ddb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ddb6:	2b80      	cmp	r3, #128	; 0x80
 801ddb8:	d001      	beq.n	801ddbe <lv_txt_utf8_next+0x8a>
 801ddba:	2300      	movs	r3, #0
 801ddbc:	e0c9      	b.n	801df52 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 801ddbe:	683b      	ldr	r3, [r7, #0]
 801ddc0:	681b      	ldr	r3, [r3, #0]
 801ddc2:	687a      	ldr	r2, [r7, #4]
 801ddc4:	4413      	add	r3, r2
 801ddc6:	781b      	ldrb	r3, [r3, #0]
 801ddc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ddcc:	68fa      	ldr	r2, [r7, #12]
 801ddce:	4413      	add	r3, r2
 801ddd0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801ddd2:	683b      	ldr	r3, [r7, #0]
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	1c5a      	adds	r2, r3, #1
 801ddd8:	683b      	ldr	r3, [r7, #0]
 801ddda:	601a      	str	r2, [r3, #0]
 801dddc:	e0b8      	b.n	801df50 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if((txt[*i] & 0xF0) == 0xE0) {
 801ddde:	683b      	ldr	r3, [r7, #0]
 801dde0:	681b      	ldr	r3, [r3, #0]
 801dde2:	687a      	ldr	r2, [r7, #4]
 801dde4:	4413      	add	r3, r2
 801dde6:	781b      	ldrb	r3, [r3, #0]
 801dde8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ddec:	2be0      	cmp	r3, #224	; 0xe0
 801ddee:	d142      	bne.n	801de76 <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 801ddf0:	683b      	ldr	r3, [r7, #0]
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	687a      	ldr	r2, [r7, #4]
 801ddf6:	4413      	add	r3, r2
 801ddf8:	781b      	ldrb	r3, [r3, #0]
 801ddfa:	031b      	lsls	r3, r3, #12
 801ddfc:	b29b      	uxth	r3, r3
 801ddfe:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801de00:	683b      	ldr	r3, [r7, #0]
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	1c5a      	adds	r2, r3, #1
 801de06:	683b      	ldr	r3, [r7, #0]
 801de08:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801de0a:	683b      	ldr	r3, [r7, #0]
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	687a      	ldr	r2, [r7, #4]
 801de10:	4413      	add	r3, r2
 801de12:	781b      	ldrb	r3, [r3, #0]
 801de14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801de18:	2b80      	cmp	r3, #128	; 0x80
 801de1a:	d001      	beq.n	801de20 <lv_txt_utf8_next+0xec>
 801de1c:	2300      	movs	r3, #0
 801de1e:	e098      	b.n	801df52 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801de20:	683b      	ldr	r3, [r7, #0]
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	687a      	ldr	r2, [r7, #4]
 801de26:	4413      	add	r3, r2
 801de28:	781b      	ldrb	r3, [r3, #0]
 801de2a:	019b      	lsls	r3, r3, #6
 801de2c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 801de30:	68fa      	ldr	r2, [r7, #12]
 801de32:	4413      	add	r3, r2
 801de34:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801de36:	683b      	ldr	r3, [r7, #0]
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	1c5a      	adds	r2, r3, #1
 801de3c:	683b      	ldr	r3, [r7, #0]
 801de3e:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801de40:	683b      	ldr	r3, [r7, #0]
 801de42:	681b      	ldr	r3, [r3, #0]
 801de44:	687a      	ldr	r2, [r7, #4]
 801de46:	4413      	add	r3, r2
 801de48:	781b      	ldrb	r3, [r3, #0]
 801de4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801de4e:	2b80      	cmp	r3, #128	; 0x80
 801de50:	d001      	beq.n	801de56 <lv_txt_utf8_next+0x122>
 801de52:	2300      	movs	r3, #0
 801de54:	e07d      	b.n	801df52 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 801de56:	683b      	ldr	r3, [r7, #0]
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	687a      	ldr	r2, [r7, #4]
 801de5c:	4413      	add	r3, r2
 801de5e:	781b      	ldrb	r3, [r3, #0]
 801de60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801de64:	68fa      	ldr	r2, [r7, #12]
 801de66:	4413      	add	r3, r2
 801de68:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801de6a:	683b      	ldr	r3, [r7, #0]
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	1c5a      	adds	r2, r3, #1
 801de70:	683b      	ldr	r3, [r7, #0]
 801de72:	601a      	str	r2, [r3, #0]
 801de74:	e06c      	b.n	801df50 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if((txt[*i] & 0xF8) == 0xF0) {
 801de76:	683b      	ldr	r3, [r7, #0]
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	687a      	ldr	r2, [r7, #4]
 801de7c:	4413      	add	r3, r2
 801de7e:	781b      	ldrb	r3, [r3, #0]
 801de80:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801de84:	2bf0      	cmp	r3, #240	; 0xf0
 801de86:	d15e      	bne.n	801df46 <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801de88:	683b      	ldr	r3, [r7, #0]
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	687a      	ldr	r2, [r7, #4]
 801de8e:	4413      	add	r3, r2
 801de90:	781b      	ldrb	r3, [r3, #0]
 801de92:	049b      	lsls	r3, r3, #18
 801de94:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 801de98:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801de9a:	683b      	ldr	r3, [r7, #0]
 801de9c:	681b      	ldr	r3, [r3, #0]
 801de9e:	1c5a      	adds	r2, r3, #1
 801dea0:	683b      	ldr	r3, [r7, #0]
 801dea2:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801dea4:	683b      	ldr	r3, [r7, #0]
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	687a      	ldr	r2, [r7, #4]
 801deaa:	4413      	add	r3, r2
 801deac:	781b      	ldrb	r3, [r3, #0]
 801deae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801deb2:	2b80      	cmp	r3, #128	; 0x80
 801deb4:	d001      	beq.n	801deba <lv_txt_utf8_next+0x186>
 801deb6:	2300      	movs	r3, #0
 801deb8:	e04b      	b.n	801df52 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 801deba:	683b      	ldr	r3, [r7, #0]
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	687a      	ldr	r2, [r7, #4]
 801dec0:	4413      	add	r3, r2
 801dec2:	781b      	ldrb	r3, [r3, #0]
 801dec4:	031b      	lsls	r3, r3, #12
 801dec6:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 801deca:	68fa      	ldr	r2, [r7, #12]
 801decc:	4413      	add	r3, r2
 801dece:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801ded0:	683b      	ldr	r3, [r7, #0]
 801ded2:	681b      	ldr	r3, [r3, #0]
 801ded4:	1c5a      	adds	r2, r3, #1
 801ded6:	683b      	ldr	r3, [r7, #0]
 801ded8:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801deda:	683b      	ldr	r3, [r7, #0]
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	687a      	ldr	r2, [r7, #4]
 801dee0:	4413      	add	r3, r2
 801dee2:	781b      	ldrb	r3, [r3, #0]
 801dee4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801dee8:	2b80      	cmp	r3, #128	; 0x80
 801deea:	d001      	beq.n	801def0 <lv_txt_utf8_next+0x1bc>
 801deec:	2300      	movs	r3, #0
 801deee:	e030      	b.n	801df52 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	687a      	ldr	r2, [r7, #4]
 801def6:	4413      	add	r3, r2
 801def8:	781b      	ldrb	r3, [r3, #0]
 801defa:	019b      	lsls	r3, r3, #6
 801defc:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 801df00:	68fa      	ldr	r2, [r7, #12]
 801df02:	4413      	add	r3, r2
 801df04:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801df06:	683b      	ldr	r3, [r7, #0]
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	1c5a      	adds	r2, r3, #1
 801df0c:	683b      	ldr	r3, [r7, #0]
 801df0e:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801df10:	683b      	ldr	r3, [r7, #0]
 801df12:	681b      	ldr	r3, [r3, #0]
 801df14:	687a      	ldr	r2, [r7, #4]
 801df16:	4413      	add	r3, r2
 801df18:	781b      	ldrb	r3, [r3, #0]
 801df1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801df1e:	2b80      	cmp	r3, #128	; 0x80
 801df20:	d001      	beq.n	801df26 <lv_txt_utf8_next+0x1f2>
 801df22:	2300      	movs	r3, #0
 801df24:	e015      	b.n	801df52 <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 801df26:	683b      	ldr	r3, [r7, #0]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	687a      	ldr	r2, [r7, #4]
 801df2c:	4413      	add	r3, r2
 801df2e:	781b      	ldrb	r3, [r3, #0]
 801df30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801df34:	68fa      	ldr	r2, [r7, #12]
 801df36:	4413      	add	r3, r2
 801df38:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801df3a:	683b      	ldr	r3, [r7, #0]
 801df3c:	681b      	ldr	r3, [r3, #0]
 801df3e:	1c5a      	adds	r2, r3, #1
 801df40:	683b      	ldr	r3, [r7, #0]
 801df42:	601a      	str	r2, [r3, #0]
 801df44:	e004      	b.n	801df50 <lv_txt_utf8_next+0x21c>
        }
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 801df46:	683b      	ldr	r3, [r7, #0]
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	1c5a      	adds	r2, r3, #1
 801df4c:	683b      	ldr	r3, [r7, #0]
 801df4e:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 801df50:	68fb      	ldr	r3, [r7, #12]
}
 801df52:	4618      	mov	r0, r3
 801df54:	3714      	adds	r7, #20
 801df56:	46bd      	mov	sp, r7
 801df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df5c:	4770      	bx	lr
	...

0801df60 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 801df60:	b580      	push	{r7, lr}
 801df62:	b084      	sub	sp, #16
 801df64:	af00      	add	r7, sp, #0
 801df66:	6078      	str	r0, [r7, #4]
 801df68:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 801df6a:	2300      	movs	r3, #0
 801df6c:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 801df6e:	2300      	movs	r3, #0
 801df70:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 801df72:	e009      	b.n	801df88 <lv_txt_utf8_get_char_id+0x28>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 801df74:	4b09      	ldr	r3, [pc, #36]	; (801df9c <lv_txt_utf8_get_char_id+0x3c>)
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	f107 0208 	add.w	r2, r7, #8
 801df7c:	4611      	mov	r1, r2
 801df7e:	6878      	ldr	r0, [r7, #4]
 801df80:	4798      	blx	r3
        char_cnt++;
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	3301      	adds	r3, #1
 801df86:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 801df88:	68bb      	ldr	r3, [r7, #8]
 801df8a:	683a      	ldr	r2, [r7, #0]
 801df8c:	429a      	cmp	r2, r3
 801df8e:	d8f1      	bhi.n	801df74 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 801df90:	68fb      	ldr	r3, [r7, #12]
}
 801df92:	4618      	mov	r0, r3
 801df94:	3710      	adds	r7, #16
 801df96:	46bd      	mov	sp, r7
 801df98:	bd80      	pop	{r7, pc}
 801df9a:	bf00      	nop
 801df9c:	20000044 	.word	0x20000044

0801dfa0 <is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool is_break_char(uint32_t letter)
{
 801dfa0:	b480      	push	{r7}
 801dfa2:	b085      	sub	sp, #20
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 801dfa8:	2300      	movs	r3, #0
 801dfaa:	73bb      	strb	r3, [r7, #14]

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801dfac:	2300      	movs	r3, #0
 801dfae:	73fb      	strb	r3, [r7, #15]
 801dfb0:	e00c      	b.n	801dfcc <is_break_char+0x2c>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801dfb2:	7bfb      	ldrb	r3, [r7, #15]
 801dfb4:	4a0b      	ldr	r2, [pc, #44]	; (801dfe4 <is_break_char+0x44>)
 801dfb6:	5cd3      	ldrb	r3, [r2, r3]
 801dfb8:	461a      	mov	r2, r3
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	4293      	cmp	r3, r2
 801dfbe:	d102      	bne.n	801dfc6 <is_break_char+0x26>
            ret = true; /*If match then it is break char*/
 801dfc0:	2301      	movs	r3, #1
 801dfc2:	73bb      	strb	r3, [r7, #14]
            break;
 801dfc4:	e007      	b.n	801dfd6 <is_break_char+0x36>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801dfc6:	7bfb      	ldrb	r3, [r7, #15]
 801dfc8:	3301      	adds	r3, #1
 801dfca:	73fb      	strb	r3, [r7, #15]
 801dfcc:	7bfb      	ldrb	r3, [r7, #15]
 801dfce:	4a05      	ldr	r2, [pc, #20]	; (801dfe4 <is_break_char+0x44>)
 801dfd0:	5cd3      	ldrb	r3, [r2, r3]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d1ed      	bne.n	801dfb2 <is_break_char+0x12>
        }
    }

    return ret;
 801dfd6:	7bbb      	ldrb	r3, [r7, #14]
}
 801dfd8:	4618      	mov	r0, r3
 801dfda:	3714      	adds	r7, #20
 801dfdc:	46bd      	mov	sp, r7
 801dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfe2:	4770      	bx	lr
 801dfe4:	080284a8 	.word	0x080284a8

0801dfe8 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 801dfe8:	b580      	push	{r7, lr}
 801dfea:	b086      	sub	sp, #24
 801dfec:	af00      	add	r7, sp, #0
 801dfee:	60f8      	str	r0, [r7, #12]
 801dff0:	60b9      	str	r1, [r7, #8]
 801dff2:	607a      	str	r2, [r7, #4]
 801dff4:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 801dff6:	68bb      	ldr	r3, [r7, #8]
 801dff8:	617b      	str	r3, [r7, #20]
 801dffa:	e02d      	b.n	801e058 <_lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	085b      	lsrs	r3, r3, #1
 801e000:	683a      	ldr	r2, [r7, #0]
 801e002:	fb02 f303 	mul.w	r3, r2, r3
 801e006:	697a      	ldr	r2, [r7, #20]
 801e008:	4413      	add	r3, r2
 801e00a:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 801e00c:	6a3b      	ldr	r3, [r7, #32]
 801e00e:	6979      	ldr	r1, [r7, #20]
 801e010:	68f8      	ldr	r0, [r7, #12]
 801e012:	4798      	blx	r3
 801e014:	6138      	str	r0, [r7, #16]
 801e016:	693b      	ldr	r3, [r7, #16]
 801e018:	2b00      	cmp	r3, #0
 801e01a:	dd12      	ble.n	801e042 <_lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	085b      	lsrs	r3, r3, #1
 801e020:	687a      	ldr	r2, [r7, #4]
 801e022:	f002 0201 	and.w	r2, r2, #1
 801e026:	2a00      	cmp	r2, #0
 801e028:	bf0c      	ite	eq
 801e02a:	2201      	moveq	r2, #1
 801e02c:	2200      	movne	r2, #0
 801e02e:	b2d2      	uxtb	r2, r2
 801e030:	1a9b      	subs	r3, r3, r2
 801e032:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 801e034:	697a      	ldr	r2, [r7, #20]
 801e036:	683b      	ldr	r3, [r7, #0]
 801e038:	4413      	add	r3, r2
 801e03a:	617b      	str	r3, [r7, #20]
 801e03c:	697b      	ldr	r3, [r7, #20]
 801e03e:	60bb      	str	r3, [r7, #8]
 801e040:	e00a      	b.n	801e058 <_lv_utils_bsearch+0x70>
        }
        else if(c < 0) {
 801e042:	693b      	ldr	r3, [r7, #16]
 801e044:	2b00      	cmp	r3, #0
 801e046:	da05      	bge.n	801e054 <_lv_utils_bsearch+0x6c>
            n /= 2;
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	085b      	lsrs	r3, r3, #1
 801e04c:	607b      	str	r3, [r7, #4]
            middle = base;
 801e04e:	68bb      	ldr	r3, [r7, #8]
 801e050:	617b      	str	r3, [r7, #20]
 801e052:	e001      	b.n	801e058 <_lv_utils_bsearch+0x70>
        }
        else {
            return (char *)middle;
 801e054:	697b      	ldr	r3, [r7, #20]
 801e056:	e003      	b.n	801e060 <_lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	d1ce      	bne.n	801dffc <_lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 801e05e:	2300      	movs	r3, #0
}
 801e060:	4618      	mov	r0, r3
 801e062:	3718      	adds	r7, #24
 801e064:	46bd      	mov	sp, r7
 801e066:	bd80      	pop	{r7, pc}

0801e068 <lv_theme_set_act>:
 * Set a theme for the system.
 * From now, all the created objects will use styles from this theme by default
 * @param th pointer to theme (return value of: 'lv_theme_init_xxx()')
 */
void lv_theme_set_act(lv_theme_t * th)
{
 801e068:	b480      	push	{r7}
 801e06a:	b083      	sub	sp, #12
 801e06c:	af00      	add	r7, sp, #0
 801e06e:	6078      	str	r0, [r7, #4]
    act_theme = th;
 801e070:	4a04      	ldr	r2, [pc, #16]	; (801e084 <lv_theme_set_act+0x1c>)
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	6013      	str	r3, [r2, #0]
}
 801e076:	bf00      	nop
 801e078:	370c      	adds	r7, #12
 801e07a:	46bd      	mov	sp, r7
 801e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e080:	4770      	bx	lr
 801e082:	bf00      	nop
 801e084:	200200a0 	.word	0x200200a0

0801e088 <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
 801e088:	b580      	push	{r7, lr}
 801e08a:	b082      	sub	sp, #8
 801e08c:	af00      	add	r7, sp, #0
 801e08e:	6078      	str	r0, [r7, #4]
 801e090:	460b      	mov	r3, r1
 801e092:	807b      	strh	r3, [r7, #2]
    /* Remove the existing styles from all part of the object. */
    clear_styles(obj, name);
 801e094:	887b      	ldrh	r3, [r7, #2]
 801e096:	4619      	mov	r1, r3
 801e098:	6878      	ldr	r0, [r7, #4]
 801e09a:	f000 f847 	bl	801e12c <clear_styles>

    /*Apply the theme including the base theme(s)*/

    apply_theme(act_theme, obj, name);
 801e09e:	4b05      	ldr	r3, [pc, #20]	; (801e0b4 <lv_theme_apply+0x2c>)
 801e0a0:	681b      	ldr	r3, [r3, #0]
 801e0a2:	887a      	ldrh	r2, [r7, #2]
 801e0a4:	6879      	ldr	r1, [r7, #4]
 801e0a6:	4618      	mov	r0, r3
 801e0a8:	f000 f812 	bl	801e0d0 <apply_theme>
}
 801e0ac:	bf00      	nop
 801e0ae:	3708      	adds	r7, #8
 801e0b0:	46bd      	mov	sp, r7
 801e0b2:	bd80      	pop	{r7, pc}
 801e0b4:	200200a0 	.word	0x200200a0

0801e0b8 <lv_theme_get_font_normal>:
/**
 * Get the normal font of the theme
 * @return pointer to the font
 */
const lv_font_t * lv_theme_get_font_normal(void)
{
 801e0b8:	b480      	push	{r7}
 801e0ba:	af00      	add	r7, sp, #0
    return act_theme->font_normal;
 801e0bc:	4b03      	ldr	r3, [pc, #12]	; (801e0cc <lv_theme_get_font_normal+0x14>)
 801e0be:	681b      	ldr	r3, [r3, #0]
 801e0c0:	699b      	ldr	r3, [r3, #24]
}
 801e0c2:	4618      	mov	r0, r3
 801e0c4:	46bd      	mov	sp, r7
 801e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0ca:	4770      	bx	lr
 801e0cc:	200200a0 	.word	0x200200a0

0801e0d0 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 801e0d0:	b580      	push	{r7, lr}
 801e0d2:	b084      	sub	sp, #16
 801e0d4:	af00      	add	r7, sp, #0
 801e0d6:	60f8      	str	r0, [r7, #12]
 801e0d8:	60b9      	str	r1, [r7, #8]
 801e0da:	4613      	mov	r3, r2
 801e0dc:	80fb      	strh	r3, [r7, #6]
    if(th->base) {
 801e0de:	68fb      	ldr	r3, [r7, #12]
 801e0e0:	689b      	ldr	r3, [r3, #8]
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d006      	beq.n	801e0f4 <apply_theme+0x24>
        apply_theme(th->base, obj, name);
 801e0e6:	68fb      	ldr	r3, [r7, #12]
 801e0e8:	689b      	ldr	r3, [r3, #8]
 801e0ea:	88fa      	ldrh	r2, [r7, #6]
 801e0ec:	68b9      	ldr	r1, [r7, #8]
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	f7ff ffee 	bl	801e0d0 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
 801e0f4:	68fb      	ldr	r3, [r7, #12]
 801e0f6:	685b      	ldr	r3, [r3, #4]
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d006      	beq.n	801e10a <apply_theme+0x3a>
        th->apply_xcb(obj, name);
 801e0fc:	68fb      	ldr	r3, [r7, #12]
 801e0fe:	685b      	ldr	r3, [r3, #4]
 801e100:	88fa      	ldrh	r2, [r7, #6]
 801e102:	4611      	mov	r1, r2
 801e104:	68b8      	ldr	r0, [r7, #8]
 801e106:	4798      	blx	r3
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
 801e108:	e00a      	b.n	801e120 <apply_theme+0x50>
    else if(th->apply_cb) {
 801e10a:	68fb      	ldr	r3, [r7, #12]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d006      	beq.n	801e120 <apply_theme+0x50>
        th->apply_cb(act_theme, obj, name);
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	4a04      	ldr	r2, [pc, #16]	; (801e128 <apply_theme+0x58>)
 801e118:	6810      	ldr	r0, [r2, #0]
 801e11a:	88fa      	ldrh	r2, [r7, #6]
 801e11c:	68b9      	ldr	r1, [r7, #8]
 801e11e:	4798      	blx	r3
}
 801e120:	bf00      	nop
 801e122:	3710      	adds	r7, #16
 801e124:	46bd      	mov	sp, r7
 801e126:	bd80      	pop	{r7, pc}
 801e128:	200200a0 	.word	0x200200a0

0801e12c <clear_styles>:

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
 801e12c:	b580      	push	{r7, lr}
 801e12e:	b082      	sub	sp, #8
 801e130:	af00      	add	r7, sp, #0
 801e132:	6078      	str	r0, [r7, #4]
 801e134:	460b      	mov	r3, r1
 801e136:	807b      	strh	r3, [r7, #2]
    switch(name) {
 801e138:	887b      	ldrh	r3, [r7, #2]
 801e13a:	2b28      	cmp	r3, #40	; 0x28
 801e13c:	f200 81d2 	bhi.w	801e4e4 <clear_styles+0x3b8>
 801e140:	a201      	add	r2, pc, #4	; (adr r2, 801e148 <clear_styles+0x1c>)
 801e142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e146:	bf00      	nop
 801e148:	0801e4e5 	.word	0x0801e4e5
 801e14c:	0801e1ed 	.word	0x0801e1ed
 801e150:	0801e1f7 	.word	0x0801e1f7
 801e154:	0801e297 	.word	0x0801e297
 801e158:	0801e239 	.word	0x0801e239
 801e15c:	0801e20b 	.word	0x0801e20b
 801e160:	0801e215 	.word	0x0801e215
 801e164:	0801e48d 	.word	0x0801e48d
 801e168:	0801e265 	.word	0x0801e265
 801e16c:	0801e2d5 	.word	0x0801e2d5
 801e170:	0801e3df 	.word	0x0801e3df
 801e174:	0801e201 	.word	0x0801e201
 801e178:	0801e4af 	.word	0x0801e4af
 801e17c:	0801e3bd 	.word	0x0801e3bd
 801e180:	0801e4cb 	.word	0x0801e4cb
 801e184:	0801e26f 	.word	0x0801e26f
 801e188:	0801e279 	.word	0x0801e279
 801e18c:	0801e227 	.word	0x0801e227
 801e190:	0801e283 	.word	0x0801e283
 801e194:	0801e303 	.word	0x0801e303
 801e198:	0801e28d 	.word	0x0801e28d
 801e19c:	0801e399 	.word	0x0801e399
 801e1a0:	0801e3b3 	.word	0x0801e3b3
 801e1a4:	0801e4c1 	.word	0x0801e4c1
 801e1a8:	0801e2e7 	.word	0x0801e2e7
 801e1ac:	0801e2f1 	.word	0x0801e2f1
 801e1b0:	0801e38f 	.word	0x0801e38f
 801e1b4:	0801e30d 	.word	0x0801e30d
 801e1b8:	0801e37d 	.word	0x0801e37d
 801e1bc:	0801e2bb 	.word	0x0801e2bb
 801e1c0:	0801e471 	.word	0x0801e471
 801e1c4:	0801e483 	.word	0x0801e483
 801e1c8:	0801e2a9 	.word	0x0801e2a9
 801e1cc:	0801e24b 	.word	0x0801e24b
 801e1d0:	0801e3f9 	.word	0x0801e3f9
 801e1d4:	0801e327 	.word	0x0801e327
 801e1d8:	0801e351 	.word	0x0801e351
 801e1dc:	0801e44f 	.word	0x0801e44f
 801e1e0:	0801e363 	.word	0x0801e363
 801e1e4:	0801e423 	.word	0x0801e423
 801e1e8:	0801e445 	.word	0x0801e445
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 801e1ec:	2100      	movs	r1, #0
 801e1ee:	6878      	ldr	r0, [r7, #4]
 801e1f0:	f7e7 fcc2 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e1f4:	e177      	b.n	801e4e6 <clear_styles+0x3ba>
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 801e1f6:	2100      	movs	r1, #0
 801e1f8:	6878      	ldr	r0, [r7, #4]
 801e1fa:	f7e7 fcbd 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e1fe:	e172      	b.n	801e4e6 <clear_styles+0x3ba>
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 801e200:	2100      	movs	r1, #0
 801e202:	6878      	ldr	r0, [r7, #4]
 801e204:	f7e7 fcb8 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e208:	e16d      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e20a:	2100      	movs	r1, #0
 801e20c:	6878      	ldr	r0, [r7, #4]
 801e20e:	f7e7 fcb3 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e212:	e168      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
 801e214:	2100      	movs	r1, #0
 801e216:	6878      	ldr	r0, [r7, #4]
 801e218:	f7e7 fcae 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
 801e21c:	2101      	movs	r1, #1
 801e21e:	6878      	ldr	r0, [r7, #4]
 801e220:	f7e7 fcaa 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e224:	e15f      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
 801e226:	2100      	movs	r1, #0
 801e228:	6878      	ldr	r0, [r7, #4]
 801e22a:	f7e7 fca5 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
 801e22e:	2101      	movs	r1, #1
 801e230:	6878      	ldr	r0, [r7, #4]
 801e232:	f7e7 fca1 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e236:	e156      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
 801e238:	2100      	movs	r1, #0
 801e23a:	6878      	ldr	r0, [r7, #4]
 801e23c:	f7e7 fc9c 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
 801e240:	2101      	movs	r1, #1
 801e242:	6878      	ldr	r0, [r7, #4]
 801e244:	f7e7 fc98 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e248:	e14d      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
 801e24a:	2100      	movs	r1, #0
 801e24c:	6878      	ldr	r0, [r7, #4]
 801e24e:	f7e7 fc93 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
 801e252:	2101      	movs	r1, #1
 801e254:	6878      	ldr	r0, [r7, #4]
 801e256:	f7e7 fc8f 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
 801e25a:	2102      	movs	r1, #2
 801e25c:	6878      	ldr	r0, [r7, #4]
 801e25e:	f7e7 fc8b 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e262:	e140      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
 801e264:	2100      	movs	r1, #0
 801e266:	6878      	ldr	r0, [r7, #4]
 801e268:	f7e7 fc86 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e26c:	e13b      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
 801e26e:	2100      	movs	r1, #0
 801e270:	6878      	ldr	r0, [r7, #4]
 801e272:	f7e7 fc81 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e276:	e136      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
 801e278:	2100      	movs	r1, #0
 801e27a:	6878      	ldr	r0, [r7, #4]
 801e27c:	f7e7 fc7c 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e280:	e131      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
 801e282:	2100      	movs	r1, #0
 801e284:	6878      	ldr	r0, [r7, #4]
 801e286:	f7e7 fc77 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e28a:	e12c      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
 801e28c:	2100      	movs	r1, #0
 801e28e:	6878      	ldr	r0, [r7, #4]
 801e290:	f7e7 fc72 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e294:	e127      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
 801e296:	2100      	movs	r1, #0
 801e298:	6878      	ldr	r0, [r7, #4]
 801e29a:	f7e7 fc6d 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
 801e29e:	2101      	movs	r1, #1
 801e2a0:	6878      	ldr	r0, [r7, #4]
 801e2a2:	f7e7 fc69 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e2a6:	e11e      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
 801e2a8:	2100      	movs	r1, #0
 801e2aa:	6878      	ldr	r0, [r7, #4]
 801e2ac:	f7e7 fc64 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
 801e2b0:	2101      	movs	r1, #1
 801e2b2:	6878      	ldr	r0, [r7, #4]
 801e2b4:	f7e7 fc60 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e2b8:	e115      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
 801e2ba:	2100      	movs	r1, #0
 801e2bc:	6878      	ldr	r0, [r7, #4]
 801e2be:	f7e7 fc5b 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
 801e2c2:	2101      	movs	r1, #1
 801e2c4:	6878      	ldr	r0, [r7, #4]
 801e2c6:	f7e7 fc57 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
 801e2ca:	2102      	movs	r1, #2
 801e2cc:	6878      	ldr	r0, [r7, #4]
 801e2ce:	f7e7 fc53 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e2d2:	e108      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
 801e2d4:	2100      	movs	r1, #0
 801e2d6:	6878      	ldr	r0, [r7, #4]
 801e2d8:	f7e7 fc4e 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
 801e2dc:	2140      	movs	r1, #64	; 0x40
 801e2de:	6878      	ldr	r0, [r7, #4]
 801e2e0:	f7e7 fc4a 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e2e4:	e0ff      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
 801e2e6:	2100      	movs	r1, #0
 801e2e8:	6878      	ldr	r0, [r7, #4]
 801e2ea:	f7e7 fc45 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e2ee:	e0fa      	b.n	801e4e6 <clear_styles+0x3ba>

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
 801e2f0:	2140      	movs	r1, #64	; 0x40
 801e2f2:	6878      	ldr	r0, [r7, #4]
 801e2f4:	f7e7 fc40 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
 801e2f8:	2141      	movs	r1, #65	; 0x41
 801e2fa:	6878      	ldr	r0, [r7, #4]
 801e2fc:	f7e7 fc3c 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e300:	e0f1      	b.n	801e4e6 <clear_styles+0x3ba>

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
 801e302:	2100      	movs	r1, #0
 801e304:	6878      	ldr	r0, [r7, #4]
 801e306:	f7e7 fc37 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e30a:	e0ec      	b.n	801e4e6 <clear_styles+0x3ba>
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
 801e30c:	2100      	movs	r1, #0
 801e30e:	6878      	ldr	r0, [r7, #4]
 801e310:	f7e7 fc32 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 801e314:	2140      	movs	r1, #64	; 0x40
 801e316:	6878      	ldr	r0, [r7, #4]
 801e318:	f7e7 fc2e 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
 801e31c:	2101      	movs	r1, #1
 801e31e:	6878      	ldr	r0, [r7, #4]
 801e320:	f7e7 fc2a 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e324:	e0df      	b.n	801e4e6 <clear_styles+0x3ba>
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
 801e326:	2100      	movs	r1, #0
 801e328:	6878      	ldr	r0, [r7, #4]
 801e32a:	f7e7 fc25 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
 801e32e:	2140      	movs	r1, #64	; 0x40
 801e330:	6878      	ldr	r0, [r7, #4]
 801e332:	f7e7 fc21 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
 801e336:	2141      	movs	r1, #65	; 0x41
 801e338:	6878      	ldr	r0, [r7, #4]
 801e33a:	f7e7 fc1d 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
 801e33e:	2143      	movs	r1, #67	; 0x43
 801e340:	6878      	ldr	r0, [r7, #4]
 801e342:	f7e7 fc19 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
 801e346:	2142      	movs	r1, #66	; 0x42
 801e348:	6878      	ldr	r0, [r7, #4]
 801e34a:	f7e7 fc15 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e34e:	e0ca      	b.n	801e4e6 <clear_styles+0x3ba>

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
 801e350:	2100      	movs	r1, #0
 801e352:	6878      	ldr	r0, [r7, #4]
 801e354:	f7e7 fc10 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 801e358:	2140      	movs	r1, #64	; 0x40
 801e35a:	6878      	ldr	r0, [r7, #4]
 801e35c:	f7e7 fc0c 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e360:	e0c1      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
 801e362:	2100      	movs	r1, #0
 801e364:	6878      	ldr	r0, [r7, #4]
 801e366:	f7e7 fc07 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
 801e36a:	2101      	movs	r1, #1
 801e36c:	6878      	ldr	r0, [r7, #4]
 801e36e:	f7e7 fc03 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
 801e372:	2102      	movs	r1, #2
 801e374:	6878      	ldr	r0, [r7, #4]
 801e376:	f7e7 fbff 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e37a:	e0b4      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
 801e37c:	2100      	movs	r1, #0
 801e37e:	6878      	ldr	r0, [r7, #4]
 801e380:	f7e7 fbfa 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
 801e384:	2103      	movs	r1, #3
 801e386:	6878      	ldr	r0, [r7, #4]
 801e388:	f7e7 fbf6 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e38c:	e0ab      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
 801e38e:	2100      	movs	r1, #0
 801e390:	6878      	ldr	r0, [r7, #4]
 801e392:	f7e7 fbf1 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e396:	e0a6      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
 801e398:	2100      	movs	r1, #0
 801e39a:	6878      	ldr	r0, [r7, #4]
 801e39c:	f7e7 fbec 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
 801e3a0:	2140      	movs	r1, #64	; 0x40
 801e3a2:	6878      	ldr	r0, [r7, #4]
 801e3a4:	f7e7 fbe8 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
 801e3a8:	2101      	movs	r1, #1
 801e3aa:	6878      	ldr	r0, [r7, #4]
 801e3ac:	f7e7 fbe4 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e3b0:	e099      	b.n	801e4e6 <clear_styles+0x3ba>

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e3b2:	2100      	movs	r1, #0
 801e3b4:	6878      	ldr	r0, [r7, #4]
 801e3b6:	f7e7 fbdf 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e3ba:	e094      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
 801e3bc:	2100      	movs	r1, #0
 801e3be:	6878      	ldr	r0, [r7, #4]
 801e3c0:	f7e7 fbda 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
 801e3c4:	2140      	movs	r1, #64	; 0x40
 801e3c6:	6878      	ldr	r0, [r7, #4]
 801e3c8:	f7e7 fbd6 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 801e3cc:	2141      	movs	r1, #65	; 0x41
 801e3ce:	6878      	ldr	r0, [r7, #4]
 801e3d0:	f7e7 fbd2 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
 801e3d4:	2142      	movs	r1, #66	; 0x42
 801e3d6:	6878      	ldr	r0, [r7, #4]
 801e3d8:	f7e7 fbce 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e3dc:	e083      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
 801e3de:	2100      	movs	r1, #0
 801e3e0:	6878      	ldr	r0, [r7, #4]
 801e3e2:	f7e7 fbc9 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
 801e3e6:	2101      	movs	r1, #1
 801e3e8:	6878      	ldr	r0, [r7, #4]
 801e3ea:	f7e7 fbc5 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
 801e3ee:	2102      	movs	r1, #2
 801e3f0:	6878      	ldr	r0, [r7, #4]
 801e3f2:	f7e7 fbc1 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e3f6:	e076      	b.n	801e4e6 <clear_styles+0x3ba>
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
 801e3f8:	2100      	movs	r1, #0
 801e3fa:	6878      	ldr	r0, [r7, #4]
 801e3fc:	f7e7 fbbc 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
 801e400:	2101      	movs	r1, #1
 801e402:	6878      	ldr	r0, [r7, #4]
 801e404:	f7e7 fbb8 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
 801e408:	2102      	movs	r1, #2
 801e40a:	6878      	ldr	r0, [r7, #4]
 801e40c:	f7e7 fbb4 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
 801e410:	2103      	movs	r1, #3
 801e412:	6878      	ldr	r0, [r7, #4]
 801e414:	f7e7 fbb0 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
 801e418:	2104      	movs	r1, #4
 801e41a:	6878      	ldr	r0, [r7, #4]
 801e41c:	f7e7 fbac 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e420:	e061      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
 801e422:	2100      	movs	r1, #0
 801e424:	6878      	ldr	r0, [r7, #4]
 801e426:	f7e7 fba7 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
 801e42a:	2142      	movs	r1, #66	; 0x42
 801e42c:	6878      	ldr	r0, [r7, #4]
 801e42e:	f7e7 fba3 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 801e432:	2141      	movs	r1, #65	; 0x41
 801e434:	6878      	ldr	r0, [r7, #4]
 801e436:	f7e7 fb9f 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
 801e43a:	2140      	movs	r1, #64	; 0x40
 801e43c:	6878      	ldr	r0, [r7, #4]
 801e43e:	f7e7 fb9b 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e442:	e050      	b.n	801e4e6 <clear_styles+0x3ba>

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e444:	2100      	movs	r1, #0
 801e446:	6878      	ldr	r0, [r7, #4]
 801e448:	f7e7 fb96 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e44c:	e04b      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
 801e44e:	2100      	movs	r1, #0
 801e450:	6878      	ldr	r0, [r7, #4]
 801e452:	f7e7 fb91 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
 801e456:	2104      	movs	r1, #4
 801e458:	6878      	ldr	r0, [r7, #4]
 801e45a:	f7e7 fb8d 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 801e45e:	2103      	movs	r1, #3
 801e460:	6878      	ldr	r0, [r7, #4]
 801e462:	f7e7 fb89 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
 801e466:	2101      	movs	r1, #1
 801e468:	6878      	ldr	r0, [r7, #4]
 801e46a:	f7e7 fb85 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e46e:	e03a      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
 801e470:	2100      	movs	r1, #0
 801e472:	6878      	ldr	r0, [r7, #4]
 801e474:	f7e7 fb80 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
 801e478:	2103      	movs	r1, #3
 801e47a:	6878      	ldr	r0, [r7, #4]
 801e47c:	f7e7 fb7c 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e480:	e031      	b.n	801e4e6 <clear_styles+0x3ba>

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e482:	2100      	movs	r1, #0
 801e484:	6878      	ldr	r0, [r7, #4]
 801e486:	f7e7 fb77 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e48a:	e02c      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
 801e48c:	2100      	movs	r1, #0
 801e48e:	6878      	ldr	r0, [r7, #4]
 801e490:	f7e7 fb72 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
 801e494:	2103      	movs	r1, #3
 801e496:	6878      	ldr	r0, [r7, #4]
 801e498:	f7e7 fb6e 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
 801e49c:	2101      	movs	r1, #1
 801e49e:	6878      	ldr	r0, [r7, #4]
 801e4a0:	f7e7 fb6a 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 801e4a4:	2102      	movs	r1, #2
 801e4a6:	6878      	ldr	r0, [r7, #4]
 801e4a8:	f7e7 fb66 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e4ac:	e01b      	b.n	801e4e6 <clear_styles+0x3ba>
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
 801e4ae:	2100      	movs	r1, #0
 801e4b0:	6878      	ldr	r0, [r7, #4]
 801e4b2:	f7e7 fb61 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
 801e4b6:	2101      	movs	r1, #1
 801e4b8:	6878      	ldr	r0, [r7, #4]
 801e4ba:	f7e7 fb5d 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e4be:	e012      	b.n	801e4e6 <clear_styles+0x3ba>
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
 801e4c0:	2100      	movs	r1, #0
 801e4c2:	6878      	ldr	r0, [r7, #4]
 801e4c4:	f7e7 fb58 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e4c8:	e00d      	b.n	801e4e6 <clear_styles+0x3ba>
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
 801e4ca:	2100      	movs	r1, #0
 801e4cc:	6878      	ldr	r0, [r7, #4]
 801e4ce:	f7e7 fb53 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
 801e4d2:	2101      	movs	r1, #1
 801e4d4:	6878      	ldr	r0, [r7, #4]
 801e4d6:	f7e7 fb4f 	bl	8005b78 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
 801e4da:	2102      	movs	r1, #2
 801e4dc:	6878      	ldr	r0, [r7, #4]
 801e4de:	f7e7 fb4b 	bl	8005b78 <lv_obj_clean_style_list>
            break;
 801e4e2:	e000      	b.n	801e4e6 <clear_styles+0x3ba>
#endif
        default:
            break;
 801e4e4:	bf00      	nop
    }

}
 801e4e6:	bf00      	nop
 801e4e8:	3708      	adds	r7, #8
 801e4ea:	46bd      	mov	sp, r7
 801e4ec:	bd80      	pop	{r7, pc}
 801e4ee:	bf00      	nop

0801e4f0 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801e4f0:	b480      	push	{r7}
 801e4f2:	b087      	sub	sp, #28
 801e4f4:	af00      	add	r7, sp, #0
 801e4f6:	60f8      	str	r0, [r7, #12]
 801e4f8:	60b9      	str	r1, [r7, #8]
 801e4fa:	4613      	mov	r3, r2
 801e4fc:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801e4fe:	7bbb      	ldrb	r3, [r7, #14]
 801e500:	461a      	mov	r2, r3
 801e502:	79fb      	ldrb	r3, [r7, #7]
 801e504:	fb03 f202 	mul.w	r2, r3, r2
 801e508:	7abb      	ldrb	r3, [r7, #10]
 801e50a:	4619      	mov	r1, r3
 801e50c:	79fb      	ldrb	r3, [r7, #7]
 801e50e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e512:	fb03 f301 	mul.w	r3, r3, r1
 801e516:	4413      	add	r3, r2
 801e518:	461a      	mov	r2, r3
 801e51a:	4613      	mov	r3, r2
 801e51c:	021b      	lsls	r3, r3, #8
 801e51e:	4413      	add	r3, r2
 801e520:	01db      	lsls	r3, r3, #7
 801e522:	4413      	add	r3, r2
 801e524:	0ddb      	lsrs	r3, r3, #23
 801e526:	b2db      	uxtb	r3, r3
 801e528:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801e52a:	7b7b      	ldrb	r3, [r7, #13]
 801e52c:	461a      	mov	r2, r3
 801e52e:	79fb      	ldrb	r3, [r7, #7]
 801e530:	fb03 f202 	mul.w	r2, r3, r2
 801e534:	7a7b      	ldrb	r3, [r7, #9]
 801e536:	4619      	mov	r1, r3
 801e538:	79fb      	ldrb	r3, [r7, #7]
 801e53a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e53e:	fb03 f301 	mul.w	r3, r3, r1
 801e542:	4413      	add	r3, r2
 801e544:	461a      	mov	r2, r3
 801e546:	4613      	mov	r3, r2
 801e548:	021b      	lsls	r3, r3, #8
 801e54a:	4413      	add	r3, r2
 801e54c:	01db      	lsls	r3, r3, #7
 801e54e:	4413      	add	r3, r2
 801e550:	0ddb      	lsrs	r3, r3, #23
 801e552:	b2db      	uxtb	r3, r3
 801e554:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801e556:	7b3b      	ldrb	r3, [r7, #12]
 801e558:	461a      	mov	r2, r3
 801e55a:	79fb      	ldrb	r3, [r7, #7]
 801e55c:	fb03 f202 	mul.w	r2, r3, r2
 801e560:	7a3b      	ldrb	r3, [r7, #8]
 801e562:	4619      	mov	r1, r3
 801e564:	79fb      	ldrb	r3, [r7, #7]
 801e566:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e56a:	fb03 f301 	mul.w	r3, r3, r1
 801e56e:	4413      	add	r3, r2
 801e570:	461a      	mov	r2, r3
 801e572:	4613      	mov	r3, r2
 801e574:	021b      	lsls	r3, r3, #8
 801e576:	4413      	add	r3, r2
 801e578:	01db      	lsls	r3, r3, #7
 801e57a:	4413      	add	r3, r2
 801e57c:	0ddb      	lsrs	r3, r3, #23
 801e57e:	b2db      	uxtb	r3, r3
 801e580:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 801e582:	23ff      	movs	r3, #255	; 0xff
 801e584:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801e586:	697b      	ldr	r3, [r7, #20]
}
 801e588:	4618      	mov	r0, r3
 801e58a:	371c      	adds	r7, #28
 801e58c:	46bd      	mov	sp, r7
 801e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e592:	4770      	bx	lr

0801e594 <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801e594:	b490      	push	{r4, r7}
 801e596:	b082      	sub	sp, #8
 801e598:	af00      	add	r7, sp, #0
 801e59a:	4604      	mov	r4, r0
 801e59c:	4608      	mov	r0, r1
 801e59e:	4611      	mov	r1, r2
 801e5a0:	4622      	mov	r2, r4
 801e5a2:	71fa      	strb	r2, [r7, #7]
 801e5a4:	4602      	mov	r2, r0
 801e5a6:	71ba      	strb	r2, [r7, #6]
 801e5a8:	460a      	mov	r2, r1
 801e5aa:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 801e5ac:	797a      	ldrb	r2, [r7, #5]
 801e5ae:	f362 0307 	bfi	r3, r2, #0, #8
 801e5b2:	79ba      	ldrb	r2, [r7, #6]
 801e5b4:	f362 230f 	bfi	r3, r2, #8, #8
 801e5b8:	79fa      	ldrb	r2, [r7, #7]
 801e5ba:	f362 4317 	bfi	r3, r2, #16, #8
 801e5be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 801e5c2:	4618      	mov	r0, r3
 801e5c4:	3708      	adds	r7, #8
 801e5c6:	46bd      	mov	sp, r7
 801e5c8:	bc90      	pop	{r4, r7}
 801e5ca:	4770      	bx	lr

0801e5cc <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 801e5cc:	b580      	push	{r7, lr}
 801e5ce:	b082      	sub	sp, #8
 801e5d0:	af00      	add	r7, sp, #0
 801e5d2:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	0c1b      	lsrs	r3, r3, #16
 801e5d8:	b2d8      	uxtb	r0, r3
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	0a1b      	lsrs	r3, r3, #8
 801e5de:	b2db      	uxtb	r3, r3
 801e5e0:	687a      	ldr	r2, [r7, #4]
 801e5e2:	b2d2      	uxtb	r2, r2
 801e5e4:	4619      	mov	r1, r3
 801e5e6:	f7ff ffd5 	bl	801e594 <lv_color_make>
 801e5ea:	4603      	mov	r3, r0
}
 801e5ec:	4618      	mov	r0, r3
 801e5ee:	3708      	adds	r7, #8
 801e5f0:	46bd      	mov	sp, r7
 801e5f2:	bd80      	pop	{r7, pc}

0801e5f4 <lv_color_hex3>:

static inline lv_color_t lv_color_hex3(uint32_t c)
{
 801e5f4:	b580      	push	{r7, lr}
 801e5f6:	b082      	sub	sp, #8
 801e5f8:	af00      	add	r7, sp, #0
 801e5fa:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	091b      	lsrs	r3, r3, #4
 801e600:	b2db      	uxtb	r3, r3
 801e602:	f023 030f 	bic.w	r3, r3, #15
 801e606:	b2da      	uxtb	r2, r3
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	0a1b      	lsrs	r3, r3, #8
 801e60c:	b2db      	uxtb	r3, r3
 801e60e:	f003 030f 	and.w	r3, r3, #15
 801e612:	b2db      	uxtb	r3, r3
 801e614:	4313      	orrs	r3, r2
 801e616:	b2d8      	uxtb	r0, r3
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	b2db      	uxtb	r3, r3
 801e61c:	f023 030f 	bic.w	r3, r3, #15
 801e620:	b2da      	uxtb	r2, r3
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	091b      	lsrs	r3, r3, #4
 801e626:	b2db      	uxtb	r3, r3
 801e628:	f003 030f 	and.w	r3, r3, #15
 801e62c:	b2db      	uxtb	r3, r3
 801e62e:	4313      	orrs	r3, r2
 801e630:	b2d9      	uxtb	r1, r3
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	b2db      	uxtb	r3, r3
 801e636:	f003 030f 	and.w	r3, r3, #15
 801e63a:	b2da      	uxtb	r2, r3
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	b2db      	uxtb	r3, r3
 801e640:	011b      	lsls	r3, r3, #4
 801e642:	b2db      	uxtb	r3, r3
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 801e644:	4313      	orrs	r3, r2
 801e646:	b2db      	uxtb	r3, r3
 801e648:	461a      	mov	r2, r3
 801e64a:	f7ff ffa3 	bl	801e594 <lv_color_make>
 801e64e:	4603      	mov	r3, r0
}
 801e650:	4618      	mov	r0, r3
 801e652:	3708      	adds	r7, #8
 801e654:	46bd      	mov	sp, r7
 801e656:	bd80      	pop	{r7, pc}

0801e658 <lv_style_set_radius>:
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 801e658:	b580      	push	{r7, lr}
 801e65a:	b082      	sub	sp, #8
 801e65c:	af00      	add	r7, sp, #0
 801e65e:	6078      	str	r0, [r7, #4]
 801e660:	460b      	mov	r3, r1
 801e662:	70fb      	strb	r3, [r7, #3]
 801e664:	4613      	mov	r3, r2
 801e666:	803b      	strh	r3, [r7, #0]
 801e668:	78fb      	ldrb	r3, [r7, #3]
 801e66a:	021b      	lsls	r3, r3, #8
 801e66c:	b21b      	sxth	r3, r3
 801e66e:	f043 0301 	orr.w	r3, r3, #1
 801e672:	b21b      	sxth	r3, r3
 801e674:	b29b      	uxth	r3, r3
 801e676:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e67a:	4619      	mov	r1, r3
 801e67c:	6878      	ldr	r0, [r7, #4]
 801e67e:	f7ec fec1 	bl	800b404 <_lv_style_set_int>
 801e682:	bf00      	nop
 801e684:	3708      	adds	r7, #8
 801e686:	46bd      	mov	sp, r7
 801e688:	bd80      	pop	{r7, pc}

0801e68a <lv_style_set_clip_corner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 801e68a:	b580      	push	{r7, lr}
 801e68c:	b082      	sub	sp, #8
 801e68e:	af00      	add	r7, sp, #0
 801e690:	6078      	str	r0, [r7, #4]
 801e692:	460b      	mov	r3, r1
 801e694:	70fb      	strb	r3, [r7, #3]
 801e696:	4613      	mov	r3, r2
 801e698:	70bb      	strb	r3, [r7, #2]
 801e69a:	78fb      	ldrb	r3, [r7, #3]
 801e69c:	021b      	lsls	r3, r3, #8
 801e69e:	b21b      	sxth	r3, r3
 801e6a0:	f043 0302 	orr.w	r3, r3, #2
 801e6a4:	b21b      	sxth	r3, r3
 801e6a6:	b29b      	uxth	r3, r3
 801e6a8:	78ba      	ldrb	r2, [r7, #2]
 801e6aa:	b212      	sxth	r2, r2
 801e6ac:	4619      	mov	r1, r3
 801e6ae:	6878      	ldr	r0, [r7, #4]
 801e6b0:	f7ec fea8 	bl	800b404 <_lv_style_set_int>
 801e6b4:	bf00      	nop
 801e6b6:	3708      	adds	r7, #8
 801e6b8:	46bd      	mov	sp, r7
 801e6ba:	bd80      	pop	{r7, pc}

0801e6bc <lv_style_set_size>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 801e6bc:	b580      	push	{r7, lr}
 801e6be:	b082      	sub	sp, #8
 801e6c0:	af00      	add	r7, sp, #0
 801e6c2:	6078      	str	r0, [r7, #4]
 801e6c4:	460b      	mov	r3, r1
 801e6c6:	70fb      	strb	r3, [r7, #3]
 801e6c8:	4613      	mov	r3, r2
 801e6ca:	803b      	strh	r3, [r7, #0]
 801e6cc:	78fb      	ldrb	r3, [r7, #3]
 801e6ce:	021b      	lsls	r3, r3, #8
 801e6d0:	b21b      	sxth	r3, r3
 801e6d2:	f043 0303 	orr.w	r3, r3, #3
 801e6d6:	b21b      	sxth	r3, r3
 801e6d8:	b29b      	uxth	r3, r3
 801e6da:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e6de:	4619      	mov	r1, r3
 801e6e0:	6878      	ldr	r0, [r7, #4]
 801e6e2:	f7ec fe8f 	bl	800b404 <_lv_style_set_int>
 801e6e6:	bf00      	nop
 801e6e8:	3708      	adds	r7, #8
 801e6ea:	46bd      	mov	sp, r7
 801e6ec:	bd80      	pop	{r7, pc}

0801e6ee <lv_style_set_transform_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 801e6ee:	b580      	push	{r7, lr}
 801e6f0:	b082      	sub	sp, #8
 801e6f2:	af00      	add	r7, sp, #0
 801e6f4:	6078      	str	r0, [r7, #4]
 801e6f6:	460b      	mov	r3, r1
 801e6f8:	70fb      	strb	r3, [r7, #3]
 801e6fa:	4613      	mov	r3, r2
 801e6fc:	803b      	strh	r3, [r7, #0]
 801e6fe:	78fb      	ldrb	r3, [r7, #3]
 801e700:	021b      	lsls	r3, r3, #8
 801e702:	b21b      	sxth	r3, r3
 801e704:	f043 0304 	orr.w	r3, r3, #4
 801e708:	b21b      	sxth	r3, r3
 801e70a:	b29b      	uxth	r3, r3
 801e70c:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e710:	4619      	mov	r1, r3
 801e712:	6878      	ldr	r0, [r7, #4]
 801e714:	f7ec fe76 	bl	800b404 <_lv_style_set_int>
 801e718:	bf00      	nop
 801e71a:	3708      	adds	r7, #8
 801e71c:	46bd      	mov	sp, r7
 801e71e:	bd80      	pop	{r7, pc}

0801e720 <lv_style_set_pad_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801e720:	b580      	push	{r7, lr}
 801e722:	b082      	sub	sp, #8
 801e724:	af00      	add	r7, sp, #0
 801e726:	6078      	str	r0, [r7, #4]
 801e728:	460b      	mov	r3, r1
 801e72a:	70fb      	strb	r3, [r7, #3]
 801e72c:	4613      	mov	r3, r2
 801e72e:	803b      	strh	r3, [r7, #0]
 801e730:	78fb      	ldrb	r3, [r7, #3]
 801e732:	021b      	lsls	r3, r3, #8
 801e734:	b21b      	sxth	r3, r3
 801e736:	f043 0310 	orr.w	r3, r3, #16
 801e73a:	b21b      	sxth	r3, r3
 801e73c:	b29b      	uxth	r3, r3
 801e73e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e742:	4619      	mov	r1, r3
 801e744:	6878      	ldr	r0, [r7, #4]
 801e746:	f7ec fe5d 	bl	800b404 <_lv_style_set_int>
 801e74a:	bf00      	nop
 801e74c:	3708      	adds	r7, #8
 801e74e:	46bd      	mov	sp, r7
 801e750:	bd80      	pop	{r7, pc}

0801e752 <lv_style_set_pad_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801e752:	b580      	push	{r7, lr}
 801e754:	b082      	sub	sp, #8
 801e756:	af00      	add	r7, sp, #0
 801e758:	6078      	str	r0, [r7, #4]
 801e75a:	460b      	mov	r3, r1
 801e75c:	70fb      	strb	r3, [r7, #3]
 801e75e:	4613      	mov	r3, r2
 801e760:	803b      	strh	r3, [r7, #0]
 801e762:	78fb      	ldrb	r3, [r7, #3]
 801e764:	021b      	lsls	r3, r3, #8
 801e766:	b21b      	sxth	r3, r3
 801e768:	f043 0311 	orr.w	r3, r3, #17
 801e76c:	b21b      	sxth	r3, r3
 801e76e:	b29b      	uxth	r3, r3
 801e770:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e774:	4619      	mov	r1, r3
 801e776:	6878      	ldr	r0, [r7, #4]
 801e778:	f7ec fe44 	bl	800b404 <_lv_style_set_int>
 801e77c:	bf00      	nop
 801e77e:	3708      	adds	r7, #8
 801e780:	46bd      	mov	sp, r7
 801e782:	bd80      	pop	{r7, pc}

0801e784 <lv_style_set_pad_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801e784:	b580      	push	{r7, lr}
 801e786:	b082      	sub	sp, #8
 801e788:	af00      	add	r7, sp, #0
 801e78a:	6078      	str	r0, [r7, #4]
 801e78c:	460b      	mov	r3, r1
 801e78e:	70fb      	strb	r3, [r7, #3]
 801e790:	4613      	mov	r3, r2
 801e792:	803b      	strh	r3, [r7, #0]
 801e794:	78fb      	ldrb	r3, [r7, #3]
 801e796:	021b      	lsls	r3, r3, #8
 801e798:	b21b      	sxth	r3, r3
 801e79a:	f043 0312 	orr.w	r3, r3, #18
 801e79e:	b21b      	sxth	r3, r3
 801e7a0:	b29b      	uxth	r3, r3
 801e7a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e7a6:	4619      	mov	r1, r3
 801e7a8:	6878      	ldr	r0, [r7, #4]
 801e7aa:	f7ec fe2b 	bl	800b404 <_lv_style_set_int>
 801e7ae:	bf00      	nop
 801e7b0:	3708      	adds	r7, #8
 801e7b2:	46bd      	mov	sp, r7
 801e7b4:	bd80      	pop	{r7, pc}

0801e7b6 <lv_style_set_pad_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801e7b6:	b580      	push	{r7, lr}
 801e7b8:	b082      	sub	sp, #8
 801e7ba:	af00      	add	r7, sp, #0
 801e7bc:	6078      	str	r0, [r7, #4]
 801e7be:	460b      	mov	r3, r1
 801e7c0:	70fb      	strb	r3, [r7, #3]
 801e7c2:	4613      	mov	r3, r2
 801e7c4:	803b      	strh	r3, [r7, #0]
 801e7c6:	78fb      	ldrb	r3, [r7, #3]
 801e7c8:	021b      	lsls	r3, r3, #8
 801e7ca:	b21b      	sxth	r3, r3
 801e7cc:	f043 0313 	orr.w	r3, r3, #19
 801e7d0:	b21b      	sxth	r3, r3
 801e7d2:	b29b      	uxth	r3, r3
 801e7d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e7d8:	4619      	mov	r1, r3
 801e7da:	6878      	ldr	r0, [r7, #4]
 801e7dc:	f7ec fe12 	bl	800b404 <_lv_style_set_int>
 801e7e0:	bf00      	nop
 801e7e2:	3708      	adds	r7, #8
 801e7e4:	46bd      	mov	sp, r7
 801e7e6:	bd80      	pop	{r7, pc}

0801e7e8 <lv_style_set_pad_inner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801e7e8:	b580      	push	{r7, lr}
 801e7ea:	b082      	sub	sp, #8
 801e7ec:	af00      	add	r7, sp, #0
 801e7ee:	6078      	str	r0, [r7, #4]
 801e7f0:	460b      	mov	r3, r1
 801e7f2:	70fb      	strb	r3, [r7, #3]
 801e7f4:	4613      	mov	r3, r2
 801e7f6:	803b      	strh	r3, [r7, #0]
 801e7f8:	78fb      	ldrb	r3, [r7, #3]
 801e7fa:	021b      	lsls	r3, r3, #8
 801e7fc:	b21b      	sxth	r3, r3
 801e7fe:	f043 0314 	orr.w	r3, r3, #20
 801e802:	b21b      	sxth	r3, r3
 801e804:	b29b      	uxth	r3, r3
 801e806:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e80a:	4619      	mov	r1, r3
 801e80c:	6878      	ldr	r0, [r7, #4]
 801e80e:	f7ec fdf9 	bl	800b404 <_lv_style_set_int>
 801e812:	bf00      	nop
 801e814:	3708      	adds	r7, #8
 801e816:	46bd      	mov	sp, r7
 801e818:	bd80      	pop	{r7, pc}

0801e81a <lv_style_set_margin_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801e81a:	b580      	push	{r7, lr}
 801e81c:	b082      	sub	sp, #8
 801e81e:	af00      	add	r7, sp, #0
 801e820:	6078      	str	r0, [r7, #4]
 801e822:	460b      	mov	r3, r1
 801e824:	70fb      	strb	r3, [r7, #3]
 801e826:	4613      	mov	r3, r2
 801e828:	803b      	strh	r3, [r7, #0]
 801e82a:	78fb      	ldrb	r3, [r7, #3]
 801e82c:	021b      	lsls	r3, r3, #8
 801e82e:	b21b      	sxth	r3, r3
 801e830:	f043 0315 	orr.w	r3, r3, #21
 801e834:	b21b      	sxth	r3, r3
 801e836:	b29b      	uxth	r3, r3
 801e838:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e83c:	4619      	mov	r1, r3
 801e83e:	6878      	ldr	r0, [r7, #4]
 801e840:	f7ec fde0 	bl	800b404 <_lv_style_set_int>
 801e844:	bf00      	nop
 801e846:	3708      	adds	r7, #8
 801e848:	46bd      	mov	sp, r7
 801e84a:	bd80      	pop	{r7, pc}

0801e84c <lv_style_set_margin_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801e84c:	b580      	push	{r7, lr}
 801e84e:	b082      	sub	sp, #8
 801e850:	af00      	add	r7, sp, #0
 801e852:	6078      	str	r0, [r7, #4]
 801e854:	460b      	mov	r3, r1
 801e856:	70fb      	strb	r3, [r7, #3]
 801e858:	4613      	mov	r3, r2
 801e85a:	803b      	strh	r3, [r7, #0]
 801e85c:	78fb      	ldrb	r3, [r7, #3]
 801e85e:	021b      	lsls	r3, r3, #8
 801e860:	b21b      	sxth	r3, r3
 801e862:	f043 0316 	orr.w	r3, r3, #22
 801e866:	b21b      	sxth	r3, r3
 801e868:	b29b      	uxth	r3, r3
 801e86a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e86e:	4619      	mov	r1, r3
 801e870:	6878      	ldr	r0, [r7, #4]
 801e872:	f7ec fdc7 	bl	800b404 <_lv_style_set_int>
 801e876:	bf00      	nop
 801e878:	3708      	adds	r7, #8
 801e87a:	46bd      	mov	sp, r7
 801e87c:	bd80      	pop	{r7, pc}

0801e87e <lv_style_set_margin_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 801e87e:	b580      	push	{r7, lr}
 801e880:	b082      	sub	sp, #8
 801e882:	af00      	add	r7, sp, #0
 801e884:	6078      	str	r0, [r7, #4]
 801e886:	460b      	mov	r3, r1
 801e888:	70fb      	strb	r3, [r7, #3]
 801e88a:	4613      	mov	r3, r2
 801e88c:	803b      	strh	r3, [r7, #0]
 801e88e:	78fb      	ldrb	r3, [r7, #3]
 801e890:	021b      	lsls	r3, r3, #8
 801e892:	b21b      	sxth	r3, r3
 801e894:	f043 0317 	orr.w	r3, r3, #23
 801e898:	b21b      	sxth	r3, r3
 801e89a:	b29b      	uxth	r3, r3
 801e89c:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e8a0:	4619      	mov	r1, r3
 801e8a2:	6878      	ldr	r0, [r7, #4]
 801e8a4:	f7ec fdae 	bl	800b404 <_lv_style_set_int>
 801e8a8:	bf00      	nop
 801e8aa:	3708      	adds	r7, #8
 801e8ac:	46bd      	mov	sp, r7
 801e8ae:	bd80      	pop	{r7, pc}

0801e8b0 <lv_style_set_margin_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 801e8b0:	b580      	push	{r7, lr}
 801e8b2:	b082      	sub	sp, #8
 801e8b4:	af00      	add	r7, sp, #0
 801e8b6:	6078      	str	r0, [r7, #4]
 801e8b8:	460b      	mov	r3, r1
 801e8ba:	70fb      	strb	r3, [r7, #3]
 801e8bc:	4613      	mov	r3, r2
 801e8be:	803b      	strh	r3, [r7, #0]
 801e8c0:	78fb      	ldrb	r3, [r7, #3]
 801e8c2:	021b      	lsls	r3, r3, #8
 801e8c4:	b21b      	sxth	r3, r3
 801e8c6:	f043 0318 	orr.w	r3, r3, #24
 801e8ca:	b21b      	sxth	r3, r3
 801e8cc:	b29b      	uxth	r3, r3
 801e8ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e8d2:	4619      	mov	r1, r3
 801e8d4:	6878      	ldr	r0, [r7, #4]
 801e8d6:	f7ec fd95 	bl	800b404 <_lv_style_set_int>
 801e8da:	bf00      	nop
 801e8dc:	3708      	adds	r7, #8
 801e8de:	46bd      	mov	sp, r7
 801e8e0:	bd80      	pop	{r7, pc}

0801e8e2 <lv_style_set_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 801e8e2:	b580      	push	{r7, lr}
 801e8e4:	b084      	sub	sp, #16
 801e8e6:	af00      	add	r7, sp, #0
 801e8e8:	60f8      	str	r0, [r7, #12]
 801e8ea:	460b      	mov	r3, r1
 801e8ec:	607a      	str	r2, [r7, #4]
 801e8ee:	72fb      	strb	r3, [r7, #11]
 801e8f0:	7afb      	ldrb	r3, [r7, #11]
 801e8f2:	021b      	lsls	r3, r3, #8
 801e8f4:	b21b      	sxth	r3, r3
 801e8f6:	f043 0329 	orr.w	r3, r3, #41	; 0x29
 801e8fa:	b21b      	sxth	r3, r3
 801e8fc:	b29b      	uxth	r3, r3
 801e8fe:	687a      	ldr	r2, [r7, #4]
 801e900:	4619      	mov	r1, r3
 801e902:	68f8      	ldr	r0, [r7, #12]
 801e904:	f7ec fe0c 	bl	800b520 <_lv_style_set_color>
 801e908:	bf00      	nop
 801e90a:	3710      	adds	r7, #16
 801e90c:	46bd      	mov	sp, r7
 801e90e:	bd80      	pop	{r7, pc}

0801e910 <lv_style_set_bg_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 801e910:	b580      	push	{r7, lr}
 801e912:	b082      	sub	sp, #8
 801e914:	af00      	add	r7, sp, #0
 801e916:	6078      	str	r0, [r7, #4]
 801e918:	460b      	mov	r3, r1
 801e91a:	70fb      	strb	r3, [r7, #3]
 801e91c:	4613      	mov	r3, r2
 801e91e:	70bb      	strb	r3, [r7, #2]
 801e920:	78fb      	ldrb	r3, [r7, #3]
 801e922:	021b      	lsls	r3, r3, #8
 801e924:	b21b      	sxth	r3, r3
 801e926:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 801e92a:	b21b      	sxth	r3, r3
 801e92c:	b29b      	uxth	r3, r3
 801e92e:	78ba      	ldrb	r2, [r7, #2]
 801e930:	4619      	mov	r1, r3
 801e932:	6878      	ldr	r0, [r7, #4]
 801e934:	f7ec fe82 	bl	800b63c <_lv_style_set_opa>
 801e938:	bf00      	nop
 801e93a:	3708      	adds	r7, #8
 801e93c:	46bd      	mov	sp, r7
 801e93e:	bd80      	pop	{r7, pc}

0801e940 <lv_style_set_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 801e940:	b580      	push	{r7, lr}
 801e942:	b082      	sub	sp, #8
 801e944:	af00      	add	r7, sp, #0
 801e946:	6078      	str	r0, [r7, #4]
 801e948:	460b      	mov	r3, r1
 801e94a:	70fb      	strb	r3, [r7, #3]
 801e94c:	4613      	mov	r3, r2
 801e94e:	803b      	strh	r3, [r7, #0]
 801e950:	78fb      	ldrb	r3, [r7, #3]
 801e952:	021b      	lsls	r3, r3, #8
 801e954:	b21b      	sxth	r3, r3
 801e956:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801e95a:	b21b      	sxth	r3, r3
 801e95c:	b29b      	uxth	r3, r3
 801e95e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e962:	4619      	mov	r1, r3
 801e964:	6878      	ldr	r0, [r7, #4]
 801e966:	f7ec fd4d 	bl	800b404 <_lv_style_set_int>
 801e96a:	bf00      	nop
 801e96c:	3708      	adds	r7, #8
 801e96e:	46bd      	mov	sp, r7
 801e970:	bd80      	pop	{r7, pc}

0801e972 <lv_style_set_border_side>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 801e972:	b580      	push	{r7, lr}
 801e974:	b082      	sub	sp, #8
 801e976:	af00      	add	r7, sp, #0
 801e978:	6078      	str	r0, [r7, #4]
 801e97a:	460b      	mov	r3, r1
 801e97c:	70fb      	strb	r3, [r7, #3]
 801e97e:	4613      	mov	r3, r2
 801e980:	70bb      	strb	r3, [r7, #2]
 801e982:	78fb      	ldrb	r3, [r7, #3]
 801e984:	021b      	lsls	r3, r3, #8
 801e986:	b21b      	sxth	r3, r3
 801e988:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 801e98c:	b21b      	sxth	r3, r3
 801e98e:	b29b      	uxth	r3, r3
 801e990:	78ba      	ldrb	r2, [r7, #2]
 801e992:	b212      	sxth	r2, r2
 801e994:	4619      	mov	r1, r3
 801e996:	6878      	ldr	r0, [r7, #4]
 801e998:	f7ec fd34 	bl	800b404 <_lv_style_set_int>
 801e99c:	bf00      	nop
 801e99e:	3708      	adds	r7, #8
 801e9a0:	46bd      	mov	sp, r7
 801e9a2:	bd80      	pop	{r7, pc}

0801e9a4 <lv_style_set_border_post>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 801e9a4:	b580      	push	{r7, lr}
 801e9a6:	b082      	sub	sp, #8
 801e9a8:	af00      	add	r7, sp, #0
 801e9aa:	6078      	str	r0, [r7, #4]
 801e9ac:	460b      	mov	r3, r1
 801e9ae:	70fb      	strb	r3, [r7, #3]
 801e9b0:	4613      	mov	r3, r2
 801e9b2:	70bb      	strb	r3, [r7, #2]
 801e9b4:	78fb      	ldrb	r3, [r7, #3]
 801e9b6:	021b      	lsls	r3, r3, #8
 801e9b8:	b21b      	sxth	r3, r3
 801e9ba:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 801e9be:	b21b      	sxth	r3, r3
 801e9c0:	b29b      	uxth	r3, r3
 801e9c2:	78ba      	ldrb	r2, [r7, #2]
 801e9c4:	b212      	sxth	r2, r2
 801e9c6:	4619      	mov	r1, r3
 801e9c8:	6878      	ldr	r0, [r7, #4]
 801e9ca:	f7ec fd1b 	bl	800b404 <_lv_style_set_int>
 801e9ce:	bf00      	nop
 801e9d0:	3708      	adds	r7, #8
 801e9d2:	46bd      	mov	sp, r7
 801e9d4:	bd80      	pop	{r7, pc}

0801e9d6 <lv_style_set_border_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 801e9d6:	b580      	push	{r7, lr}
 801e9d8:	b084      	sub	sp, #16
 801e9da:	af00      	add	r7, sp, #0
 801e9dc:	60f8      	str	r0, [r7, #12]
 801e9de:	460b      	mov	r3, r1
 801e9e0:	607a      	str	r2, [r7, #4]
 801e9e2:	72fb      	strb	r3, [r7, #11]
 801e9e4:	7afb      	ldrb	r3, [r7, #11]
 801e9e6:	021b      	lsls	r3, r3, #8
 801e9e8:	b21b      	sxth	r3, r3
 801e9ea:	f043 0339 	orr.w	r3, r3, #57	; 0x39
 801e9ee:	b21b      	sxth	r3, r3
 801e9f0:	b29b      	uxth	r3, r3
 801e9f2:	687a      	ldr	r2, [r7, #4]
 801e9f4:	4619      	mov	r1, r3
 801e9f6:	68f8      	ldr	r0, [r7, #12]
 801e9f8:	f7ec fd92 	bl	800b520 <_lv_style_set_color>
 801e9fc:	bf00      	nop
 801e9fe:	3710      	adds	r7, #16
 801ea00:	46bd      	mov	sp, r7
 801ea02:	bd80      	pop	{r7, pc}

0801ea04 <lv_style_set_border_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
 801ea04:	b580      	push	{r7, lr}
 801ea06:	b082      	sub	sp, #8
 801ea08:	af00      	add	r7, sp, #0
 801ea0a:	6078      	str	r0, [r7, #4]
 801ea0c:	460b      	mov	r3, r1
 801ea0e:	70fb      	strb	r3, [r7, #3]
 801ea10:	4613      	mov	r3, r2
 801ea12:	70bb      	strb	r3, [r7, #2]
 801ea14:	78fb      	ldrb	r3, [r7, #3]
 801ea16:	021b      	lsls	r3, r3, #8
 801ea18:	b21b      	sxth	r3, r3
 801ea1a:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 801ea1e:	b21b      	sxth	r3, r3
 801ea20:	b29b      	uxth	r3, r3
 801ea22:	78ba      	ldrb	r2, [r7, #2]
 801ea24:	4619      	mov	r1, r3
 801ea26:	6878      	ldr	r0, [r7, #4]
 801ea28:	f7ec fe08 	bl	800b63c <_lv_style_set_opa>
 801ea2c:	bf00      	nop
 801ea2e:	3708      	adds	r7, #8
 801ea30:	46bd      	mov	sp, r7
 801ea32:	bd80      	pop	{r7, pc}

0801ea34 <lv_style_set_outline_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 801ea34:	b580      	push	{r7, lr}
 801ea36:	b082      	sub	sp, #8
 801ea38:	af00      	add	r7, sp, #0
 801ea3a:	6078      	str	r0, [r7, #4]
 801ea3c:	460b      	mov	r3, r1
 801ea3e:	70fb      	strb	r3, [r7, #3]
 801ea40:	4613      	mov	r3, r2
 801ea42:	803b      	strh	r3, [r7, #0]
 801ea44:	78fb      	ldrb	r3, [r7, #3]
 801ea46:	021b      	lsls	r3, r3, #8
 801ea48:	b21b      	sxth	r3, r3
 801ea4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ea4e:	b21b      	sxth	r3, r3
 801ea50:	b29b      	uxth	r3, r3
 801ea52:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ea56:	4619      	mov	r1, r3
 801ea58:	6878      	ldr	r0, [r7, #4]
 801ea5a:	f7ec fcd3 	bl	800b404 <_lv_style_set_int>
 801ea5e:	bf00      	nop
 801ea60:	3708      	adds	r7, #8
 801ea62:	46bd      	mov	sp, r7
 801ea64:	bd80      	pop	{r7, pc}

0801ea66 <lv_style_set_outline_pad>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 801ea66:	b580      	push	{r7, lr}
 801ea68:	b082      	sub	sp, #8
 801ea6a:	af00      	add	r7, sp, #0
 801ea6c:	6078      	str	r0, [r7, #4]
 801ea6e:	460b      	mov	r3, r1
 801ea70:	70fb      	strb	r3, [r7, #3]
 801ea72:	4613      	mov	r3, r2
 801ea74:	803b      	strh	r3, [r7, #0]
 801ea76:	78fb      	ldrb	r3, [r7, #3]
 801ea78:	021b      	lsls	r3, r3, #8
 801ea7a:	b21b      	sxth	r3, r3
 801ea7c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 801ea80:	b21b      	sxth	r3, r3
 801ea82:	b29b      	uxth	r3, r3
 801ea84:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ea88:	4619      	mov	r1, r3
 801ea8a:	6878      	ldr	r0, [r7, #4]
 801ea8c:	f7ec fcba 	bl	800b404 <_lv_style_set_int>
 801ea90:	bf00      	nop
 801ea92:	3708      	adds	r7, #8
 801ea94:	46bd      	mov	sp, r7
 801ea96:	bd80      	pop	{r7, pc}

0801ea98 <lv_style_set_outline_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 801ea98:	b580      	push	{r7, lr}
 801ea9a:	b084      	sub	sp, #16
 801ea9c:	af00      	add	r7, sp, #0
 801ea9e:	60f8      	str	r0, [r7, #12]
 801eaa0:	460b      	mov	r3, r1
 801eaa2:	607a      	str	r2, [r7, #4]
 801eaa4:	72fb      	strb	r3, [r7, #11]
 801eaa6:	7afb      	ldrb	r3, [r7, #11]
 801eaa8:	021b      	lsls	r3, r3, #8
 801eaaa:	b21b      	sxth	r3, r3
 801eaac:	f043 0349 	orr.w	r3, r3, #73	; 0x49
 801eab0:	b21b      	sxth	r3, r3
 801eab2:	b29b      	uxth	r3, r3
 801eab4:	687a      	ldr	r2, [r7, #4]
 801eab6:	4619      	mov	r1, r3
 801eab8:	68f8      	ldr	r0, [r7, #12]
 801eaba:	f7ec fd31 	bl	800b520 <_lv_style_set_color>
 801eabe:	bf00      	nop
 801eac0:	3710      	adds	r7, #16
 801eac2:	46bd      	mov	sp, r7
 801eac4:	bd80      	pop	{r7, pc}

0801eac6 <lv_style_set_outline_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 801eac6:	b580      	push	{r7, lr}
 801eac8:	b082      	sub	sp, #8
 801eaca:	af00      	add	r7, sp, #0
 801eacc:	6078      	str	r0, [r7, #4]
 801eace:	460b      	mov	r3, r1
 801ead0:	70fb      	strb	r3, [r7, #3]
 801ead2:	4613      	mov	r3, r2
 801ead4:	70bb      	strb	r3, [r7, #2]
 801ead6:	78fb      	ldrb	r3, [r7, #3]
 801ead8:	021b      	lsls	r3, r3, #8
 801eada:	b21b      	sxth	r3, r3
 801eadc:	f043 034c 	orr.w	r3, r3, #76	; 0x4c
 801eae0:	b21b      	sxth	r3, r3
 801eae2:	b29b      	uxth	r3, r3
 801eae4:	78ba      	ldrb	r2, [r7, #2]
 801eae6:	4619      	mov	r1, r3
 801eae8:	6878      	ldr	r0, [r7, #4]
 801eaea:	f7ec fda7 	bl	800b63c <_lv_style_set_opa>
 801eaee:	bf00      	nop
 801eaf0:	3708      	adds	r7, #8
 801eaf2:	46bd      	mov	sp, r7
 801eaf4:	bd80      	pop	{r7, pc}

0801eaf6 <lv_style_set_shadow_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 801eaf6:	b580      	push	{r7, lr}
 801eaf8:	b082      	sub	sp, #8
 801eafa:	af00      	add	r7, sp, #0
 801eafc:	6078      	str	r0, [r7, #4]
 801eafe:	460b      	mov	r3, r1
 801eb00:	70fb      	strb	r3, [r7, #3]
 801eb02:	4613      	mov	r3, r2
 801eb04:	803b      	strh	r3, [r7, #0]
 801eb06:	78fb      	ldrb	r3, [r7, #3]
 801eb08:	021b      	lsls	r3, r3, #8
 801eb0a:	b21b      	sxth	r3, r3
 801eb0c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801eb10:	b21b      	sxth	r3, r3
 801eb12:	b29b      	uxth	r3, r3
 801eb14:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eb18:	4619      	mov	r1, r3
 801eb1a:	6878      	ldr	r0, [r7, #4]
 801eb1c:	f7ec fc72 	bl	800b404 <_lv_style_set_int>
 801eb20:	bf00      	nop
 801eb22:	3708      	adds	r7, #8
 801eb24:	46bd      	mov	sp, r7
 801eb26:	bd80      	pop	{r7, pc}

0801eb28 <lv_style_set_shadow_spread>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
 801eb28:	b580      	push	{r7, lr}
 801eb2a:	b082      	sub	sp, #8
 801eb2c:	af00      	add	r7, sp, #0
 801eb2e:	6078      	str	r0, [r7, #4]
 801eb30:	460b      	mov	r3, r1
 801eb32:	70fb      	strb	r3, [r7, #3]
 801eb34:	4613      	mov	r3, r2
 801eb36:	803b      	strh	r3, [r7, #0]
 801eb38:	78fb      	ldrb	r3, [r7, #3]
 801eb3a:	021b      	lsls	r3, r3, #8
 801eb3c:	b21b      	sxth	r3, r3
 801eb3e:	f043 0353 	orr.w	r3, r3, #83	; 0x53
 801eb42:	b21b      	sxth	r3, r3
 801eb44:	b29b      	uxth	r3, r3
 801eb46:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eb4a:	4619      	mov	r1, r3
 801eb4c:	6878      	ldr	r0, [r7, #4]
 801eb4e:	f7ec fc59 	bl	800b404 <_lv_style_set_int>
 801eb52:	bf00      	nop
 801eb54:	3708      	adds	r7, #8
 801eb56:	46bd      	mov	sp, r7
 801eb58:	bd80      	pop	{r7, pc}

0801eb5a <lv_style_set_shadow_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
 801eb5a:	b580      	push	{r7, lr}
 801eb5c:	b084      	sub	sp, #16
 801eb5e:	af00      	add	r7, sp, #0
 801eb60:	60f8      	str	r0, [r7, #12]
 801eb62:	460b      	mov	r3, r1
 801eb64:	607a      	str	r2, [r7, #4]
 801eb66:	72fb      	strb	r3, [r7, #11]
 801eb68:	7afb      	ldrb	r3, [r7, #11]
 801eb6a:	021b      	lsls	r3, r3, #8
 801eb6c:	b21b      	sxth	r3, r3
 801eb6e:	f043 0359 	orr.w	r3, r3, #89	; 0x59
 801eb72:	b21b      	sxth	r3, r3
 801eb74:	b29b      	uxth	r3, r3
 801eb76:	687a      	ldr	r2, [r7, #4]
 801eb78:	4619      	mov	r1, r3
 801eb7a:	68f8      	ldr	r0, [r7, #12]
 801eb7c:	f7ec fcd0 	bl	800b520 <_lv_style_set_color>
 801eb80:	bf00      	nop
 801eb82:	3710      	adds	r7, #16
 801eb84:	46bd      	mov	sp, r7
 801eb86:	bd80      	pop	{r7, pc}

0801eb88 <lv_style_set_pattern_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 801eb88:	b580      	push	{r7, lr}
 801eb8a:	b084      	sub	sp, #16
 801eb8c:	af00      	add	r7, sp, #0
 801eb8e:	60f8      	str	r0, [r7, #12]
 801eb90:	460b      	mov	r3, r1
 801eb92:	607a      	str	r2, [r7, #4]
 801eb94:	72fb      	strb	r3, [r7, #11]
 801eb96:	7afb      	ldrb	r3, [r7, #11]
 801eb98:	021b      	lsls	r3, r3, #8
 801eb9a:	b21b      	sxth	r3, r3
 801eb9c:	f043 0369 	orr.w	r3, r3, #105	; 0x69
 801eba0:	b21b      	sxth	r3, r3
 801eba2:	b29b      	uxth	r3, r3
 801eba4:	687a      	ldr	r2, [r7, #4]
 801eba6:	4619      	mov	r1, r3
 801eba8:	68f8      	ldr	r0, [r7, #12]
 801ebaa:	f7ec fcb9 	bl	800b520 <_lv_style_set_color>
 801ebae:	bf00      	nop
 801ebb0:	3710      	adds	r7, #16
 801ebb2:	46bd      	mov	sp, r7
 801ebb4:	bd80      	pop	{r7, pc}

0801ebb6 <lv_style_set_pattern_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
 801ebb6:	b580      	push	{r7, lr}
 801ebb8:	b082      	sub	sp, #8
 801ebba:	af00      	add	r7, sp, #0
 801ebbc:	6078      	str	r0, [r7, #4]
 801ebbe:	460b      	mov	r3, r1
 801ebc0:	70fb      	strb	r3, [r7, #3]
 801ebc2:	4613      	mov	r3, r2
 801ebc4:	70bb      	strb	r3, [r7, #2]
 801ebc6:	78fb      	ldrb	r3, [r7, #3]
 801ebc8:	021b      	lsls	r3, r3, #8
 801ebca:	b21b      	sxth	r3, r3
 801ebcc:	f043 036c 	orr.w	r3, r3, #108	; 0x6c
 801ebd0:	b21b      	sxth	r3, r3
 801ebd2:	b29b      	uxth	r3, r3
 801ebd4:	78ba      	ldrb	r2, [r7, #2]
 801ebd6:	4619      	mov	r1, r3
 801ebd8:	6878      	ldr	r0, [r7, #4]
 801ebda:	f7ec fd2f 	bl	800b63c <_lv_style_set_opa>
 801ebde:	bf00      	nop
 801ebe0:	3708      	adds	r7, #8
 801ebe2:	46bd      	mov	sp, r7
 801ebe4:	bd80      	pop	{r7, pc}

0801ebe6 <lv_style_set_pattern_image>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 801ebe6:	b580      	push	{r7, lr}
 801ebe8:	b084      	sub	sp, #16
 801ebea:	af00      	add	r7, sp, #0
 801ebec:	60f8      	str	r0, [r7, #12]
 801ebee:	460b      	mov	r3, r1
 801ebf0:	607a      	str	r2, [r7, #4]
 801ebf2:	72fb      	strb	r3, [r7, #11]
 801ebf4:	7afb      	ldrb	r3, [r7, #11]
 801ebf6:	021b      	lsls	r3, r3, #8
 801ebf8:	b21b      	sxth	r3, r3
 801ebfa:	f043 036e 	orr.w	r3, r3, #110	; 0x6e
 801ebfe:	b21b      	sxth	r3, r3
 801ec00:	b29b      	uxth	r3, r3
 801ec02:	687a      	ldr	r2, [r7, #4]
 801ec04:	4619      	mov	r1, r3
 801ec06:	68f8      	ldr	r0, [r7, #12]
 801ec08:	f7ec fda6 	bl	800b758 <_lv_style_set_ptr>
 801ec0c:	bf00      	nop
 801ec0e:	3710      	adds	r7, #16
 801ec10:	46bd      	mov	sp, r7
 801ec12:	bd80      	pop	{r7, pc}

0801ec14 <lv_style_set_value_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 801ec14:	b580      	push	{r7, lr}
 801ec16:	b084      	sub	sp, #16
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	60f8      	str	r0, [r7, #12]
 801ec1c:	460b      	mov	r3, r1
 801ec1e:	607a      	str	r2, [r7, #4]
 801ec20:	72fb      	strb	r3, [r7, #11]
 801ec22:	7afb      	ldrb	r3, [r7, #11]
 801ec24:	021b      	lsls	r3, r3, #8
 801ec26:	b21b      	sxth	r3, r3
 801ec28:	f043 0379 	orr.w	r3, r3, #121	; 0x79
 801ec2c:	b21b      	sxth	r3, r3
 801ec2e:	b29b      	uxth	r3, r3
 801ec30:	687a      	ldr	r2, [r7, #4]
 801ec32:	4619      	mov	r1, r3
 801ec34:	68f8      	ldr	r0, [r7, #12]
 801ec36:	f7ec fc73 	bl	800b520 <_lv_style_set_color>
 801ec3a:	bf00      	nop
 801ec3c:	3710      	adds	r7, #16
 801ec3e:	46bd      	mov	sp, r7
 801ec40:	bd80      	pop	{r7, pc}

0801ec42 <lv_style_set_value_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 801ec42:	b580      	push	{r7, lr}
 801ec44:	b084      	sub	sp, #16
 801ec46:	af00      	add	r7, sp, #0
 801ec48:	60f8      	str	r0, [r7, #12]
 801ec4a:	460b      	mov	r3, r1
 801ec4c:	607a      	str	r2, [r7, #4]
 801ec4e:	72fb      	strb	r3, [r7, #11]
 801ec50:	7afb      	ldrb	r3, [r7, #11]
 801ec52:	021b      	lsls	r3, r3, #8
 801ec54:	b21b      	sxth	r3, r3
 801ec56:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
 801ec5a:	b21b      	sxth	r3, r3
 801ec5c:	b29b      	uxth	r3, r3
 801ec5e:	687a      	ldr	r2, [r7, #4]
 801ec60:	4619      	mov	r1, r3
 801ec62:	68f8      	ldr	r0, [r7, #12]
 801ec64:	f7ec fd78 	bl	800b758 <_lv_style_set_ptr>
 801ec68:	bf00      	nop
 801ec6a:	3710      	adds	r7, #16
 801ec6c:	46bd      	mov	sp, r7
 801ec6e:	bd80      	pop	{r7, pc}

0801ec70 <lv_style_set_text_line_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 801ec70:	b580      	push	{r7, lr}
 801ec72:	b082      	sub	sp, #8
 801ec74:	af00      	add	r7, sp, #0
 801ec76:	6078      	str	r0, [r7, #4]
 801ec78:	460b      	mov	r3, r1
 801ec7a:	70fb      	strb	r3, [r7, #3]
 801ec7c:	4613      	mov	r3, r2
 801ec7e:	803b      	strh	r3, [r7, #0]
 801ec80:	78fb      	ldrb	r3, [r7, #3]
 801ec82:	021b      	lsls	r3, r3, #8
 801ec84:	b21a      	sxth	r2, r3
 801ec86:	4b07      	ldr	r3, [pc, #28]	; (801eca4 <lv_style_set_text_line_space+0x34>)
 801ec88:	4313      	orrs	r3, r2
 801ec8a:	b21b      	sxth	r3, r3
 801ec8c:	b29b      	uxth	r3, r3
 801ec8e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ec92:	4619      	mov	r1, r3
 801ec94:	6878      	ldr	r0, [r7, #4]
 801ec96:	f7ec fbb5 	bl	800b404 <_lv_style_set_int>
 801ec9a:	bf00      	nop
 801ec9c:	3708      	adds	r7, #8
 801ec9e:	46bd      	mov	sp, r7
 801eca0:	bd80      	pop	{r7, pc}
 801eca2:	bf00      	nop
 801eca4:	ffff8081 	.word	0xffff8081

0801eca8 <lv_style_set_text_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 801eca8:	b580      	push	{r7, lr}
 801ecaa:	b084      	sub	sp, #16
 801ecac:	af00      	add	r7, sp, #0
 801ecae:	60f8      	str	r0, [r7, #12]
 801ecb0:	460b      	mov	r3, r1
 801ecb2:	607a      	str	r2, [r7, #4]
 801ecb4:	72fb      	strb	r3, [r7, #11]
 801ecb6:	7afb      	ldrb	r3, [r7, #11]
 801ecb8:	021b      	lsls	r3, r3, #8
 801ecba:	b21a      	sxth	r2, r3
 801ecbc:	4b06      	ldr	r3, [pc, #24]	; (801ecd8 <lv_style_set_text_color+0x30>)
 801ecbe:	4313      	orrs	r3, r2
 801ecc0:	b21b      	sxth	r3, r3
 801ecc2:	b29b      	uxth	r3, r3
 801ecc4:	687a      	ldr	r2, [r7, #4]
 801ecc6:	4619      	mov	r1, r3
 801ecc8:	68f8      	ldr	r0, [r7, #12]
 801ecca:	f7ec fc29 	bl	800b520 <_lv_style_set_color>
 801ecce:	bf00      	nop
 801ecd0:	3710      	adds	r7, #16
 801ecd2:	46bd      	mov	sp, r7
 801ecd4:	bd80      	pop	{r7, pc}
 801ecd6:	bf00      	nop
 801ecd8:	ffff8089 	.word	0xffff8089

0801ecdc <lv_style_set_text_sel_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
 801ecdc:	b580      	push	{r7, lr}
 801ecde:	b084      	sub	sp, #16
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	60f8      	str	r0, [r7, #12]
 801ece4:	460b      	mov	r3, r1
 801ece6:	607a      	str	r2, [r7, #4]
 801ece8:	72fb      	strb	r3, [r7, #11]
 801ecea:	7afb      	ldrb	r3, [r7, #11]
 801ecec:	021b      	lsls	r3, r3, #8
 801ecee:	b21a      	sxth	r2, r3
 801ecf0:	4b06      	ldr	r3, [pc, #24]	; (801ed0c <lv_style_set_text_sel_color+0x30>)
 801ecf2:	4313      	orrs	r3, r2
 801ecf4:	b21b      	sxth	r3, r3
 801ecf6:	b29b      	uxth	r3, r3
 801ecf8:	687a      	ldr	r2, [r7, #4]
 801ecfa:	4619      	mov	r1, r3
 801ecfc:	68f8      	ldr	r0, [r7, #12]
 801ecfe:	f7ec fc0f 	bl	800b520 <_lv_style_set_color>
 801ed02:	bf00      	nop
 801ed04:	3710      	adds	r7, #16
 801ed06:	46bd      	mov	sp, r7
 801ed08:	bd80      	pop	{r7, pc}
 801ed0a:	bf00      	nop
 801ed0c:	ffff808a 	.word	0xffff808a

0801ed10 <lv_style_set_text_sel_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
 801ed10:	b580      	push	{r7, lr}
 801ed12:	b084      	sub	sp, #16
 801ed14:	af00      	add	r7, sp, #0
 801ed16:	60f8      	str	r0, [r7, #12]
 801ed18:	460b      	mov	r3, r1
 801ed1a:	607a      	str	r2, [r7, #4]
 801ed1c:	72fb      	strb	r3, [r7, #11]
 801ed1e:	7afb      	ldrb	r3, [r7, #11]
 801ed20:	021b      	lsls	r3, r3, #8
 801ed22:	b21a      	sxth	r2, r3
 801ed24:	4b06      	ldr	r3, [pc, #24]	; (801ed40 <lv_style_set_text_sel_bg_color+0x30>)
 801ed26:	4313      	orrs	r3, r2
 801ed28:	b21b      	sxth	r3, r3
 801ed2a:	b29b      	uxth	r3, r3
 801ed2c:	687a      	ldr	r2, [r7, #4]
 801ed2e:	4619      	mov	r1, r3
 801ed30:	68f8      	ldr	r0, [r7, #12]
 801ed32:	f7ec fbf5 	bl	800b520 <_lv_style_set_color>
 801ed36:	bf00      	nop
 801ed38:	3710      	adds	r7, #16
 801ed3a:	46bd      	mov	sp, r7
 801ed3c:	bd80      	pop	{r7, pc}
 801ed3e:	bf00      	nop
 801ed40:	ffff808b 	.word	0xffff808b

0801ed44 <lv_style_set_text_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 801ed44:	b580      	push	{r7, lr}
 801ed46:	b084      	sub	sp, #16
 801ed48:	af00      	add	r7, sp, #0
 801ed4a:	60f8      	str	r0, [r7, #12]
 801ed4c:	460b      	mov	r3, r1
 801ed4e:	607a      	str	r2, [r7, #4]
 801ed50:	72fb      	strb	r3, [r7, #11]
 801ed52:	7afb      	ldrb	r3, [r7, #11]
 801ed54:	021b      	lsls	r3, r3, #8
 801ed56:	b21a      	sxth	r2, r3
 801ed58:	4b06      	ldr	r3, [pc, #24]	; (801ed74 <lv_style_set_text_font+0x30>)
 801ed5a:	4313      	orrs	r3, r2
 801ed5c:	b21b      	sxth	r3, r3
 801ed5e:	b29b      	uxth	r3, r3
 801ed60:	687a      	ldr	r2, [r7, #4]
 801ed62:	4619      	mov	r1, r3
 801ed64:	68f8      	ldr	r0, [r7, #12]
 801ed66:	f7ec fcf7 	bl	800b758 <_lv_style_set_ptr>
 801ed6a:	bf00      	nop
 801ed6c:	3710      	adds	r7, #16
 801ed6e:	46bd      	mov	sp, r7
 801ed70:	bd80      	pop	{r7, pc}
 801ed72:	bf00      	nop
 801ed74:	ffff808e 	.word	0xffff808e

0801ed78 <lv_style_set_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 801ed78:	b580      	push	{r7, lr}
 801ed7a:	b082      	sub	sp, #8
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	6078      	str	r0, [r7, #4]
 801ed80:	460b      	mov	r3, r1
 801ed82:	70fb      	strb	r3, [r7, #3]
 801ed84:	4613      	mov	r3, r2
 801ed86:	803b      	strh	r3, [r7, #0]
 801ed88:	78fb      	ldrb	r3, [r7, #3]
 801ed8a:	021b      	lsls	r3, r3, #8
 801ed8c:	b21b      	sxth	r3, r3
 801ed8e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801ed92:	b21b      	sxth	r3, r3
 801ed94:	b29b      	uxth	r3, r3
 801ed96:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ed9a:	4619      	mov	r1, r3
 801ed9c:	6878      	ldr	r0, [r7, #4]
 801ed9e:	f7ec fb31 	bl	800b404 <_lv_style_set_int>
 801eda2:	bf00      	nop
 801eda4:	3708      	adds	r7, #8
 801eda6:	46bd      	mov	sp, r7
 801eda8:	bd80      	pop	{r7, pc}

0801edaa <lv_style_set_line_dash_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
 801edaa:	b580      	push	{r7, lr}
 801edac:	b082      	sub	sp, #8
 801edae:	af00      	add	r7, sp, #0
 801edb0:	6078      	str	r0, [r7, #4]
 801edb2:	460b      	mov	r3, r1
 801edb4:	70fb      	strb	r3, [r7, #3]
 801edb6:	4613      	mov	r3, r2
 801edb8:	803b      	strh	r3, [r7, #0]
 801edba:	78fb      	ldrb	r3, [r7, #3]
 801edbc:	021b      	lsls	r3, r3, #8
 801edbe:	b21b      	sxth	r3, r3
 801edc0:	f043 0392 	orr.w	r3, r3, #146	; 0x92
 801edc4:	b21b      	sxth	r3, r3
 801edc6:	b29b      	uxth	r3, r3
 801edc8:	f9b7 2000 	ldrsh.w	r2, [r7]
 801edcc:	4619      	mov	r1, r3
 801edce:	6878      	ldr	r0, [r7, #4]
 801edd0:	f7ec fb18 	bl	800b404 <_lv_style_set_int>
 801edd4:	bf00      	nop
 801edd6:	3708      	adds	r7, #8
 801edd8:	46bd      	mov	sp, r7
 801edda:	bd80      	pop	{r7, pc}

0801eddc <lv_style_set_line_dash_gap>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
 801eddc:	b580      	push	{r7, lr}
 801edde:	b082      	sub	sp, #8
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	6078      	str	r0, [r7, #4]
 801ede4:	460b      	mov	r3, r1
 801ede6:	70fb      	strb	r3, [r7, #3]
 801ede8:	4613      	mov	r3, r2
 801edea:	803b      	strh	r3, [r7, #0]
 801edec:	78fb      	ldrb	r3, [r7, #3]
 801edee:	021b      	lsls	r3, r3, #8
 801edf0:	b21b      	sxth	r3, r3
 801edf2:	f043 0393 	orr.w	r3, r3, #147	; 0x93
 801edf6:	b21b      	sxth	r3, r3
 801edf8:	b29b      	uxth	r3, r3
 801edfa:	f9b7 2000 	ldrsh.w	r2, [r7]
 801edfe:	4619      	mov	r1, r3
 801ee00:	6878      	ldr	r0, [r7, #4]
 801ee02:	f7ec faff 	bl	800b404 <_lv_style_set_int>
 801ee06:	bf00      	nop
 801ee08:	3708      	adds	r7, #8
 801ee0a:	46bd      	mov	sp, r7
 801ee0c:	bd80      	pop	{r7, pc}

0801ee0e <lv_style_set_line_rounded>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 801ee0e:	b580      	push	{r7, lr}
 801ee10:	b082      	sub	sp, #8
 801ee12:	af00      	add	r7, sp, #0
 801ee14:	6078      	str	r0, [r7, #4]
 801ee16:	460b      	mov	r3, r1
 801ee18:	70fb      	strb	r3, [r7, #3]
 801ee1a:	4613      	mov	r3, r2
 801ee1c:	70bb      	strb	r3, [r7, #2]
 801ee1e:	78fb      	ldrb	r3, [r7, #3]
 801ee20:	021b      	lsls	r3, r3, #8
 801ee22:	b21b      	sxth	r3, r3
 801ee24:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 801ee28:	b21b      	sxth	r3, r3
 801ee2a:	b29b      	uxth	r3, r3
 801ee2c:	78ba      	ldrb	r2, [r7, #2]
 801ee2e:	b212      	sxth	r2, r2
 801ee30:	4619      	mov	r1, r3
 801ee32:	6878      	ldr	r0, [r7, #4]
 801ee34:	f7ec fae6 	bl	800b404 <_lv_style_set_int>
 801ee38:	bf00      	nop
 801ee3a:	3708      	adds	r7, #8
 801ee3c:	46bd      	mov	sp, r7
 801ee3e:	bd80      	pop	{r7, pc}

0801ee40 <lv_style_set_line_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 801ee40:	b580      	push	{r7, lr}
 801ee42:	b084      	sub	sp, #16
 801ee44:	af00      	add	r7, sp, #0
 801ee46:	60f8      	str	r0, [r7, #12]
 801ee48:	460b      	mov	r3, r1
 801ee4a:	607a      	str	r2, [r7, #4]
 801ee4c:	72fb      	strb	r3, [r7, #11]
 801ee4e:	7afb      	ldrb	r3, [r7, #11]
 801ee50:	021b      	lsls	r3, r3, #8
 801ee52:	b21b      	sxth	r3, r3
 801ee54:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 801ee58:	b21b      	sxth	r3, r3
 801ee5a:	b29b      	uxth	r3, r3
 801ee5c:	687a      	ldr	r2, [r7, #4]
 801ee5e:	4619      	mov	r1, r3
 801ee60:	68f8      	ldr	r0, [r7, #12]
 801ee62:	f7ec fb5d 	bl	800b520 <_lv_style_set_color>
 801ee66:	bf00      	nop
 801ee68:	3710      	adds	r7, #16
 801ee6a:	46bd      	mov	sp, r7
 801ee6c:	bd80      	pop	{r7, pc}
	...

0801ee70 <lv_style_set_image_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 801ee70:	b580      	push	{r7, lr}
 801ee72:	b084      	sub	sp, #16
 801ee74:	af00      	add	r7, sp, #0
 801ee76:	60f8      	str	r0, [r7, #12]
 801ee78:	460b      	mov	r3, r1
 801ee7a:	607a      	str	r2, [r7, #4]
 801ee7c:	72fb      	strb	r3, [r7, #11]
 801ee7e:	7afb      	ldrb	r3, [r7, #11]
 801ee80:	021b      	lsls	r3, r3, #8
 801ee82:	b21a      	sxth	r2, r3
 801ee84:	4b06      	ldr	r3, [pc, #24]	; (801eea0 <lv_style_set_image_recolor+0x30>)
 801ee86:	4313      	orrs	r3, r2
 801ee88:	b21b      	sxth	r3, r3
 801ee8a:	b29b      	uxth	r3, r3
 801ee8c:	687a      	ldr	r2, [r7, #4]
 801ee8e:	4619      	mov	r1, r3
 801ee90:	68f8      	ldr	r0, [r7, #12]
 801ee92:	f7ec fb45 	bl	800b520 <_lv_style_set_color>
 801ee96:	bf00      	nop
 801ee98:	3710      	adds	r7, #16
 801ee9a:	46bd      	mov	sp, r7
 801ee9c:	bd80      	pop	{r7, pc}
 801ee9e:	bf00      	nop
 801eea0:	ffff80a9 	.word	0xffff80a9

0801eea4 <lv_style_set_transition_time>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 801eea4:	b580      	push	{r7, lr}
 801eea6:	b082      	sub	sp, #8
 801eea8:	af00      	add	r7, sp, #0
 801eeaa:	6078      	str	r0, [r7, #4]
 801eeac:	460b      	mov	r3, r1
 801eeae:	70fb      	strb	r3, [r7, #3]
 801eeb0:	4613      	mov	r3, r2
 801eeb2:	803b      	strh	r3, [r7, #0]
 801eeb4:	78fb      	ldrb	r3, [r7, #3]
 801eeb6:	021b      	lsls	r3, r3, #8
 801eeb8:	b21b      	sxth	r3, r3
 801eeba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801eebe:	b21b      	sxth	r3, r3
 801eec0:	b29b      	uxth	r3, r3
 801eec2:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eec6:	4619      	mov	r1, r3
 801eec8:	6878      	ldr	r0, [r7, #4]
 801eeca:	f7ec fa9b 	bl	800b404 <_lv_style_set_int>
 801eece:	bf00      	nop
 801eed0:	3708      	adds	r7, #8
 801eed2:	46bd      	mov	sp, r7
 801eed4:	bd80      	pop	{r7, pc}

0801eed6 <lv_style_set_transition_delay>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 801eed6:	b580      	push	{r7, lr}
 801eed8:	b082      	sub	sp, #8
 801eeda:	af00      	add	r7, sp, #0
 801eedc:	6078      	str	r0, [r7, #4]
 801eede:	460b      	mov	r3, r1
 801eee0:	70fb      	strb	r3, [r7, #3]
 801eee2:	4613      	mov	r3, r2
 801eee4:	803b      	strh	r3, [r7, #0]
 801eee6:	78fb      	ldrb	r3, [r7, #3]
 801eee8:	021b      	lsls	r3, r3, #8
 801eeea:	b21b      	sxth	r3, r3
 801eeec:	f043 03b1 	orr.w	r3, r3, #177	; 0xb1
 801eef0:	b21b      	sxth	r3, r3
 801eef2:	b29b      	uxth	r3, r3
 801eef4:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eef8:	4619      	mov	r1, r3
 801eefa:	6878      	ldr	r0, [r7, #4]
 801eefc:	f7ec fa82 	bl	800b404 <_lv_style_set_int>
 801ef00:	bf00      	nop
 801ef02:	3708      	adds	r7, #8
 801ef04:	46bd      	mov	sp, r7
 801ef06:	bd80      	pop	{r7, pc}

0801ef08 <lv_style_set_transition_prop_3>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
 801ef08:	b580      	push	{r7, lr}
 801ef0a:	b082      	sub	sp, #8
 801ef0c:	af00      	add	r7, sp, #0
 801ef0e:	6078      	str	r0, [r7, #4]
 801ef10:	460b      	mov	r3, r1
 801ef12:	70fb      	strb	r3, [r7, #3]
 801ef14:	4613      	mov	r3, r2
 801ef16:	803b      	strh	r3, [r7, #0]
 801ef18:	78fb      	ldrb	r3, [r7, #3]
 801ef1a:	021b      	lsls	r3, r3, #8
 801ef1c:	b21b      	sxth	r3, r3
 801ef1e:	f043 03b4 	orr.w	r3, r3, #180	; 0xb4
 801ef22:	b21b      	sxth	r3, r3
 801ef24:	b29b      	uxth	r3, r3
 801ef26:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ef2a:	4619      	mov	r1, r3
 801ef2c:	6878      	ldr	r0, [r7, #4]
 801ef2e:	f7ec fa69 	bl	800b404 <_lv_style_set_int>
 801ef32:	bf00      	nop
 801ef34:	3708      	adds	r7, #8
 801ef36:	46bd      	mov	sp, r7
 801ef38:	bd80      	pop	{r7, pc}

0801ef3a <lv_style_set_transition_prop_4>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
 801ef3a:	b580      	push	{r7, lr}
 801ef3c:	b082      	sub	sp, #8
 801ef3e:	af00      	add	r7, sp, #0
 801ef40:	6078      	str	r0, [r7, #4]
 801ef42:	460b      	mov	r3, r1
 801ef44:	70fb      	strb	r3, [r7, #3]
 801ef46:	4613      	mov	r3, r2
 801ef48:	803b      	strh	r3, [r7, #0]
 801ef4a:	78fb      	ldrb	r3, [r7, #3]
 801ef4c:	021b      	lsls	r3, r3, #8
 801ef4e:	b21b      	sxth	r3, r3
 801ef50:	f043 03b5 	orr.w	r3, r3, #181	; 0xb5
 801ef54:	b21b      	sxth	r3, r3
 801ef56:	b29b      	uxth	r3, r3
 801ef58:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ef5c:	4619      	mov	r1, r3
 801ef5e:	6878      	ldr	r0, [r7, #4]
 801ef60:	f7ec fa50 	bl	800b404 <_lv_style_set_int>
 801ef64:	bf00      	nop
 801ef66:	3708      	adds	r7, #8
 801ef68:	46bd      	mov	sp, r7
 801ef6a:	bd80      	pop	{r7, pc}

0801ef6c <lv_style_set_transition_prop_5>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 801ef6c:	b580      	push	{r7, lr}
 801ef6e:	b082      	sub	sp, #8
 801ef70:	af00      	add	r7, sp, #0
 801ef72:	6078      	str	r0, [r7, #4]
 801ef74:	460b      	mov	r3, r1
 801ef76:	70fb      	strb	r3, [r7, #3]
 801ef78:	4613      	mov	r3, r2
 801ef7a:	803b      	strh	r3, [r7, #0]
 801ef7c:	78fb      	ldrb	r3, [r7, #3]
 801ef7e:	021b      	lsls	r3, r3, #8
 801ef80:	b21b      	sxth	r3, r3
 801ef82:	f043 03b6 	orr.w	r3, r3, #182	; 0xb6
 801ef86:	b21b      	sxth	r3, r3
 801ef88:	b29b      	uxth	r3, r3
 801ef8a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ef8e:	4619      	mov	r1, r3
 801ef90:	6878      	ldr	r0, [r7, #4]
 801ef92:	f7ec fa37 	bl	800b404 <_lv_style_set_int>
 801ef96:	bf00      	nop
 801ef98:	3708      	adds	r7, #8
 801ef9a:	46bd      	mov	sp, r7
 801ef9c:	bd80      	pop	{r7, pc}

0801ef9e <lv_style_set_transition_prop_6>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 801ef9e:	b580      	push	{r7, lr}
 801efa0:	b082      	sub	sp, #8
 801efa2:	af00      	add	r7, sp, #0
 801efa4:	6078      	str	r0, [r7, #4]
 801efa6:	460b      	mov	r3, r1
 801efa8:	70fb      	strb	r3, [r7, #3]
 801efaa:	4613      	mov	r3, r2
 801efac:	803b      	strh	r3, [r7, #0]
 801efae:	78fb      	ldrb	r3, [r7, #3]
 801efb0:	021b      	lsls	r3, r3, #8
 801efb2:	b21b      	sxth	r3, r3
 801efb4:	f043 03b7 	orr.w	r3, r3, #183	; 0xb7
 801efb8:	b21b      	sxth	r3, r3
 801efba:	b29b      	uxth	r3, r3
 801efbc:	f9b7 2000 	ldrsh.w	r2, [r7]
 801efc0:	4619      	mov	r1, r3
 801efc2:	6878      	ldr	r0, [r7, #4]
 801efc4:	f7ec fa1e 	bl	800b404 <_lv_style_set_int>
 801efc8:	bf00      	nop
 801efca:	3708      	adds	r7, #8
 801efcc:	46bd      	mov	sp, r7
 801efce:	bd80      	pop	{r7, pc}

0801efd0 <lv_style_set_scale_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 801efd0:	b580      	push	{r7, lr}
 801efd2:	b082      	sub	sp, #8
 801efd4:	af00      	add	r7, sp, #0
 801efd6:	6078      	str	r0, [r7, #4]
 801efd8:	460b      	mov	r3, r1
 801efda:	70fb      	strb	r3, [r7, #3]
 801efdc:	4613      	mov	r3, r2
 801efde:	803b      	strh	r3, [r7, #0]
 801efe0:	78fb      	ldrb	r3, [r7, #3]
 801efe2:	021b      	lsls	r3, r3, #8
 801efe4:	b21b      	sxth	r3, r3
 801efe6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801efea:	b21b      	sxth	r3, r3
 801efec:	b29b      	uxth	r3, r3
 801efee:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eff2:	4619      	mov	r1, r3
 801eff4:	6878      	ldr	r0, [r7, #4]
 801eff6:	f7ec fa05 	bl	800b404 <_lv_style_set_int>
 801effa:	bf00      	nop
 801effc:	3708      	adds	r7, #8
 801effe:	46bd      	mov	sp, r7
 801f000:	bd80      	pop	{r7, pc}

0801f002 <lv_style_set_scale_end_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
 801f002:	b580      	push	{r7, lr}
 801f004:	b082      	sub	sp, #8
 801f006:	af00      	add	r7, sp, #0
 801f008:	6078      	str	r0, [r7, #4]
 801f00a:	460b      	mov	r3, r1
 801f00c:	70fb      	strb	r3, [r7, #3]
 801f00e:	4613      	mov	r3, r2
 801f010:	803b      	strh	r3, [r7, #0]
 801f012:	78fb      	ldrb	r3, [r7, #3]
 801f014:	021b      	lsls	r3, r3, #8
 801f016:	b21b      	sxth	r3, r3
 801f018:	f043 03c2 	orr.w	r3, r3, #194	; 0xc2
 801f01c:	b21b      	sxth	r3, r3
 801f01e:	b29b      	uxth	r3, r3
 801f020:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f024:	4619      	mov	r1, r3
 801f026:	6878      	ldr	r0, [r7, #4]
 801f028:	f7ec f9ec 	bl	800b404 <_lv_style_set_int>
 801f02c:	bf00      	nop
 801f02e:	3708      	adds	r7, #8
 801f030:	46bd      	mov	sp, r7
 801f032:	bd80      	pop	{r7, pc}

0801f034 <lv_style_set_scale_end_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 801f034:	b580      	push	{r7, lr}
 801f036:	b082      	sub	sp, #8
 801f038:	af00      	add	r7, sp, #0
 801f03a:	6078      	str	r0, [r7, #4]
 801f03c:	460b      	mov	r3, r1
 801f03e:	70fb      	strb	r3, [r7, #3]
 801f040:	4613      	mov	r3, r2
 801f042:	803b      	strh	r3, [r7, #0]
 801f044:	78fb      	ldrb	r3, [r7, #3]
 801f046:	021b      	lsls	r3, r3, #8
 801f048:	b21b      	sxth	r3, r3
 801f04a:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
 801f04e:	b21b      	sxth	r3, r3
 801f050:	b29b      	uxth	r3, r3
 801f052:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f056:	4619      	mov	r1, r3
 801f058:	6878      	ldr	r0, [r7, #4]
 801f05a:	f7ec f9d3 	bl	800b404 <_lv_style_set_int>
 801f05e:	bf00      	nop
 801f060:	3708      	adds	r7, #8
 801f062:	46bd      	mov	sp, r7
 801f064:	bd80      	pop	{r7, pc}

0801f066 <lv_style_set_scale_grad_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 801f066:	b580      	push	{r7, lr}
 801f068:	b084      	sub	sp, #16
 801f06a:	af00      	add	r7, sp, #0
 801f06c:	60f8      	str	r0, [r7, #12]
 801f06e:	460b      	mov	r3, r1
 801f070:	607a      	str	r2, [r7, #4]
 801f072:	72fb      	strb	r3, [r7, #11]
 801f074:	7afb      	ldrb	r3, [r7, #11]
 801f076:	021b      	lsls	r3, r3, #8
 801f078:	b21b      	sxth	r3, r3
 801f07a:	f043 03c9 	orr.w	r3, r3, #201	; 0xc9
 801f07e:	b21b      	sxth	r3, r3
 801f080:	b29b      	uxth	r3, r3
 801f082:	687a      	ldr	r2, [r7, #4]
 801f084:	4619      	mov	r1, r3
 801f086:	68f8      	ldr	r0, [r7, #12]
 801f088:	f7ec fa4a 	bl	800b520 <_lv_style_set_color>
 801f08c:	bf00      	nop
 801f08e:	3710      	adds	r7, #16
 801f090:	46bd      	mov	sp, r7
 801f092:	bd80      	pop	{r7, pc}

0801f094 <lv_style_set_scale_end_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 801f094:	b580      	push	{r7, lr}
 801f096:	b084      	sub	sp, #16
 801f098:	af00      	add	r7, sp, #0
 801f09a:	60f8      	str	r0, [r7, #12]
 801f09c:	460b      	mov	r3, r1
 801f09e:	607a      	str	r2, [r7, #4]
 801f0a0:	72fb      	strb	r3, [r7, #11]
 801f0a2:	7afb      	ldrb	r3, [r7, #11]
 801f0a4:	021b      	lsls	r3, r3, #8
 801f0a6:	b21b      	sxth	r3, r3
 801f0a8:	f043 03ca 	orr.w	r3, r3, #202	; 0xca
 801f0ac:	b21b      	sxth	r3, r3
 801f0ae:	b29b      	uxth	r3, r3
 801f0b0:	687a      	ldr	r2, [r7, #4]
 801f0b2:	4619      	mov	r1, r3
 801f0b4:	68f8      	ldr	r0, [r7, #12]
 801f0b6:	f7ec fa33 	bl	800b520 <_lv_style_set_color>
 801f0ba:	bf00      	nop
 801f0bc:	3710      	adds	r7, #16
 801f0be:	46bd      	mov	sp, r7
 801f0c0:	bd80      	pop	{r7, pc}
	...

0801f0c4 <basic_init>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void basic_init(void)
{
 801f0c4:	b5b0      	push	{r4, r5, r7, lr}
 801f0c6:	b082      	sub	sp, #8
 801f0c8:	af00      	add	r7, sp, #0
    style_init_reset(&styles->scr);
 801f0ca:	4bb9      	ldr	r3, [pc, #740]	; (801f3b0 <basic_init+0x2ec>)
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	4618      	mov	r0, r3
 801f0d0:	f006 f83a 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_STATE_DEFAULT, LV_OPA_COVER);
 801f0d4:	4bb6      	ldr	r3, [pc, #728]	; (801f3b0 <basic_init+0x2ec>)
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	22ff      	movs	r2, #255	; 0xff
 801f0da:	2100      	movs	r1, #0
 801f0dc:	4618      	mov	r0, r3
 801f0de:	f7ff fc17 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
 801f0e2:	4bb3      	ldr	r3, [pc, #716]	; (801f3b0 <basic_init+0x2ec>)
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	461c      	mov	r4, r3
 801f0e8:	4bb2      	ldr	r3, [pc, #712]	; (801f3b4 <basic_init+0x2f0>)
 801f0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f0ec:	f003 0302 	and.w	r3, r3, #2
 801f0f0:	2b00      	cmp	r3, #0
 801f0f2:	d004      	beq.n	801f0fe <basic_init+0x3a>
 801f0f4:	48b0      	ldr	r0, [pc, #704]	; (801f3b8 <basic_init+0x2f4>)
 801f0f6:	f7ff fa69 	bl	801e5cc <lv_color_hex>
 801f0fa:	4603      	mov	r3, r0
 801f0fc:	e003      	b.n	801f106 <basic_init+0x42>
 801f0fe:	48af      	ldr	r0, [pc, #700]	; (801f3bc <basic_init+0x2f8>)
 801f100:	f7ff fa64 	bl	801e5cc <lv_color_hex>
 801f104:	4603      	mov	r3, r0
 801f106:	461a      	mov	r2, r3
 801f108:	2100      	movs	r1, #0
 801f10a:	4620      	mov	r0, r4
 801f10c:	f7ff fbe9 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 801f110:	4ba7      	ldr	r3, [pc, #668]	; (801f3b0 <basic_init+0x2ec>)
 801f112:	681b      	ldr	r3, [r3, #0]
 801f114:	461c      	mov	r4, r3
 801f116:	4ba7      	ldr	r3, [pc, #668]	; (801f3b4 <basic_init+0x2f0>)
 801f118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f11a:	f003 0302 	and.w	r3, r3, #2
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d004      	beq.n	801f12c <basic_init+0x68>
 801f122:	48a7      	ldr	r0, [pc, #668]	; (801f3c0 <basic_init+0x2fc>)
 801f124:	f7ff fa52 	bl	801e5cc <lv_color_hex>
 801f128:	4603      	mov	r3, r0
 801f12a:	e003      	b.n	801f134 <basic_init+0x70>
 801f12c:	48a5      	ldr	r0, [pc, #660]	; (801f3c4 <basic_init+0x300>)
 801f12e:	f7ff fa4d 	bl	801e5cc <lv_color_hex>
 801f132:	4603      	mov	r3, r0
 801f134:	461a      	mov	r2, r3
 801f136:	2100      	movs	r1, #0
 801f138:	4620      	mov	r0, r4
 801f13a:	f7ff fdb5 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 801f13e:	4b9c      	ldr	r3, [pc, #624]	; (801f3b0 <basic_init+0x2ec>)
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	461c      	mov	r4, r3
 801f144:	4b9b      	ldr	r3, [pc, #620]	; (801f3b4 <basic_init+0x2f0>)
 801f146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f148:	f003 0302 	and.w	r3, r3, #2
 801f14c:	2b00      	cmp	r3, #0
 801f14e:	d004      	beq.n	801f15a <basic_init+0x96>
 801f150:	489b      	ldr	r0, [pc, #620]	; (801f3c0 <basic_init+0x2fc>)
 801f152:	f7ff fa3b 	bl	801e5cc <lv_color_hex>
 801f156:	4603      	mov	r3, r0
 801f158:	e003      	b.n	801f162 <basic_init+0x9e>
 801f15a:	489a      	ldr	r0, [pc, #616]	; (801f3c4 <basic_init+0x300>)
 801f15c:	f7ff fa36 	bl	801e5cc <lv_color_hex>
 801f160:	4603      	mov	r3, r0
 801f162:	461a      	mov	r2, r3
 801f164:	2100      	movs	r1, #0
 801f166:	4620      	mov	r0, r4
 801f168:	f7ff fd54 	bl	801ec14 <lv_style_set_value_color>
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 801f16c:	4b90      	ldr	r3, [pc, #576]	; (801f3b0 <basic_init+0x2ec>)
 801f16e:	681b      	ldr	r3, [r3, #0]
 801f170:	461c      	mov	r4, r3
 801f172:	4b90      	ldr	r3, [pc, #576]	; (801f3b4 <basic_init+0x2f0>)
 801f174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f176:	f003 0302 	and.w	r3, r3, #2
 801f17a:	2b00      	cmp	r3, #0
 801f17c:	d004      	beq.n	801f188 <basic_init+0xc4>
 801f17e:	4890      	ldr	r0, [pc, #576]	; (801f3c0 <basic_init+0x2fc>)
 801f180:	f7ff fa24 	bl	801e5cc <lv_color_hex>
 801f184:	4603      	mov	r3, r0
 801f186:	e003      	b.n	801f190 <basic_init+0xcc>
 801f188:	488e      	ldr	r0, [pc, #568]	; (801f3c4 <basic_init+0x300>)
 801f18a:	f7ff fa1f 	bl	801e5cc <lv_color_hex>
 801f18e:	4603      	mov	r3, r0
 801f190:	461a      	mov	r2, r3
 801f192:	2100      	movs	r1, #0
 801f194:	4620      	mov	r0, r4
 801f196:	f7ff fda1 	bl	801ecdc <lv_style_set_text_sel_color>
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
 801f19a:	4b85      	ldr	r3, [pc, #532]	; (801f3b0 <basic_init+0x2ec>)
 801f19c:	681b      	ldr	r3, [r3, #0]
 801f19e:	4618      	mov	r0, r3
 801f1a0:	4b84      	ldr	r3, [pc, #528]	; (801f3b4 <basic_init+0x2f0>)
 801f1a2:	68da      	ldr	r2, [r3, #12]
 801f1a4:	2100      	movs	r1, #0
 801f1a6:	f7ff fdb3 	bl	801ed10 <lv_style_set_text_sel_bg_color>
    lv_style_set_value_font(&styles->scr, LV_STATE_DEFAULT, theme.font_normal);
 801f1aa:	4b81      	ldr	r3, [pc, #516]	; (801f3b0 <basic_init+0x2ec>)
 801f1ac:	681b      	ldr	r3, [r3, #0]
 801f1ae:	4618      	mov	r0, r3
 801f1b0:	4b80      	ldr	r3, [pc, #512]	; (801f3b4 <basic_init+0x2f0>)
 801f1b2:	699b      	ldr	r3, [r3, #24]
 801f1b4:	461a      	mov	r2, r3
 801f1b6:	2100      	movs	r1, #0
 801f1b8:	f7ff fd43 	bl	801ec42 <lv_style_set_value_font>

    style_init_reset(&styles->bg);
 801f1bc:	4b7c      	ldr	r3, [pc, #496]	; (801f3b0 <basic_init+0x2ec>)
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	3304      	adds	r3, #4
 801f1c2:	4618      	mov	r0, r3
 801f1c4:	f005 ffc0 	bl	8025148 <style_init_reset>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 801f1c8:	4b79      	ldr	r3, [pc, #484]	; (801f3b0 <basic_init+0x2ec>)
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	1d1c      	adds	r4, r3, #4
 801f1ce:	2000      	movs	r0, #0
 801f1d0:	f7fa ff92 	bl	801a0f8 <lv_disp_get_dpi>
 801f1d4:	4603      	mov	r3, r0
 801f1d6:	330a      	adds	r3, #10
 801f1d8:	00db      	lsls	r3, r3, #3
 801f1da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f1de:	db0d      	blt.n	801f1fc <basic_init+0x138>
 801f1e0:	2000      	movs	r0, #0
 801f1e2:	f7fa ff89 	bl	801a0f8 <lv_disp_get_dpi>
 801f1e6:	4603      	mov	r3, r0
 801f1e8:	330a      	adds	r3, #10
 801f1ea:	00db      	lsls	r3, r3, #3
 801f1ec:	4a76      	ldr	r2, [pc, #472]	; (801f3c8 <basic_init+0x304>)
 801f1ee:	fb82 1203 	smull	r1, r2, r2, r3
 801f1f2:	1192      	asrs	r2, r2, #6
 801f1f4:	17db      	asrs	r3, r3, #31
 801f1f6:	1ad3      	subs	r3, r2, r3
 801f1f8:	b21b      	sxth	r3, r3
 801f1fa:	e000      	b.n	801f1fe <basic_init+0x13a>
 801f1fc:	2301      	movs	r3, #1
 801f1fe:	461a      	mov	r2, r3
 801f200:	2100      	movs	r1, #0
 801f202:	4620      	mov	r0, r4
 801f204:	f7ff fa28 	bl	801e658 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 801f208:	4b69      	ldr	r3, [pc, #420]	; (801f3b0 <basic_init+0x2ec>)
 801f20a:	681b      	ldr	r3, [r3, #0]
 801f20c:	3304      	adds	r3, #4
 801f20e:	22ff      	movs	r2, #255	; 0xff
 801f210:	2100      	movs	r1, #0
 801f212:	4618      	mov	r0, r3
 801f214:	f7ff fb7c 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
 801f218:	4b65      	ldr	r3, [pc, #404]	; (801f3b0 <basic_init+0x2ec>)
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	1d1c      	adds	r4, r3, #4
 801f21e:	4b65      	ldr	r3, [pc, #404]	; (801f3b4 <basic_init+0x2f0>)
 801f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f222:	f003 0302 	and.w	r3, r3, #2
 801f226:	2b00      	cmp	r3, #0
 801f228:	d005      	beq.n	801f236 <basic_init+0x172>
 801f22a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f22e:	f7ff f9cd 	bl	801e5cc <lv_color_hex>
 801f232:	4603      	mov	r3, r0
 801f234:	e003      	b.n	801f23e <basic_init+0x17a>
 801f236:	4865      	ldr	r0, [pc, #404]	; (801f3cc <basic_init+0x308>)
 801f238:	f7ff f9c8 	bl	801e5cc <lv_color_hex>
 801f23c:	4603      	mov	r3, r0
 801f23e:	461a      	mov	r2, r3
 801f240:	2100      	movs	r1, #0
 801f242:	4620      	mov	r0, r4
 801f244:	f7ff fb4d 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 801f248:	4b59      	ldr	r3, [pc, #356]	; (801f3b0 <basic_init+0x2ec>)
 801f24a:	681b      	ldr	r3, [r3, #0]
 801f24c:	1d1c      	adds	r4, r3, #4
 801f24e:	4b59      	ldr	r3, [pc, #356]	; (801f3b4 <basic_init+0x2f0>)
 801f250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f252:	f003 0302 	and.w	r3, r3, #2
 801f256:	2b00      	cmp	r3, #0
 801f258:	d004      	beq.n	801f264 <basic_init+0x1a0>
 801f25a:	485d      	ldr	r0, [pc, #372]	; (801f3d0 <basic_init+0x30c>)
 801f25c:	f7ff f9b6 	bl	801e5cc <lv_color_hex>
 801f260:	4603      	mov	r3, r0
 801f262:	e003      	b.n	801f26c <basic_init+0x1a8>
 801f264:	485b      	ldr	r0, [pc, #364]	; (801f3d4 <basic_init+0x310>)
 801f266:	f7ff f9b1 	bl	801e5cc <lv_color_hex>
 801f26a:	4603      	mov	r3, r0
 801f26c:	461a      	mov	r2, r3
 801f26e:	2100      	movs	r1, #0
 801f270:	4620      	mov	r0, r4
 801f272:	f7ff fbb0 	bl	801e9d6 <lv_style_set_border_color>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
 801f276:	4b4f      	ldr	r3, [pc, #316]	; (801f3b4 <basic_init+0x2f0>)
 801f278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f27a:	f003 0320 	and.w	r3, r3, #32
 801f27e:	2b00      	cmp	r3, #0
 801f280:	d107      	bne.n	801f292 <basic_init+0x1ce>
 801f282:	4b4b      	ldr	r3, [pc, #300]	; (801f3b0 <basic_init+0x2ec>)
 801f284:	681b      	ldr	r3, [r3, #0]
 801f286:	1d18      	adds	r0, r3, #4
 801f288:	4b4a      	ldr	r3, [pc, #296]	; (801f3b4 <basic_init+0x2f0>)
 801f28a:	68da      	ldr	r2, [r3, #12]
 801f28c:	2102      	movs	r1, #2
 801f28e:	f7ff fba2 	bl	801e9d6 <lv_style_set_border_color>
                                                                                          theme.color_primary);
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
 801f292:	4b47      	ldr	r3, [pc, #284]	; (801f3b0 <basic_init+0x2ec>)
 801f294:	681b      	ldr	r3, [r3, #0]
 801f296:	1d18      	adds	r0, r3, #4
 801f298:	4b46      	ldr	r3, [pc, #280]	; (801f3b4 <basic_init+0x2f0>)
 801f29a:	691a      	ldr	r2, [r3, #16]
 801f29c:	2104      	movs	r1, #4
 801f29e:	f7ff fb9a 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
 801f2a2:	4b43      	ldr	r3, [pc, #268]	; (801f3b0 <basic_init+0x2ec>)
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	1d1c      	adds	r4, r3, #4
 801f2a8:	2000      	movs	r0, #0
 801f2aa:	f7fa ff25 	bl	801a0f8 <lv_disp_get_dpi>
 801f2ae:	4603      	mov	r3, r0
 801f2b0:	3328      	adds	r3, #40	; 0x28
 801f2b2:	005b      	lsls	r3, r3, #1
 801f2b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f2b8:	db0d      	blt.n	801f2d6 <basic_init+0x212>
 801f2ba:	2000      	movs	r0, #0
 801f2bc:	f7fa ff1c 	bl	801a0f8 <lv_disp_get_dpi>
 801f2c0:	4603      	mov	r3, r0
 801f2c2:	3328      	adds	r3, #40	; 0x28
 801f2c4:	005b      	lsls	r3, r3, #1
 801f2c6:	4a40      	ldr	r2, [pc, #256]	; (801f3c8 <basic_init+0x304>)
 801f2c8:	fb82 1203 	smull	r1, r2, r2, r3
 801f2cc:	1192      	asrs	r2, r2, #6
 801f2ce:	17db      	asrs	r3, r3, #31
 801f2d0:	1ad3      	subs	r3, r2, r3
 801f2d2:	b21b      	sxth	r3, r3
 801f2d4:	e000      	b.n	801f2d8 <basic_init+0x214>
 801f2d6:	2301      	movs	r3, #1
 801f2d8:	461a      	mov	r2, r3
 801f2da:	2100      	movs	r1, #0
 801f2dc:	4620      	mov	r0, r4
 801f2de:	f7ff fb2f 	bl	801e940 <lv_style_set_border_width>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
 801f2e2:	4b33      	ldr	r3, [pc, #204]	; (801f3b0 <basic_init+0x2ec>)
 801f2e4:	681b      	ldr	r3, [r3, #0]
 801f2e6:	3304      	adds	r3, #4
 801f2e8:	2201      	movs	r2, #1
 801f2ea:	2100      	movs	r1, #0
 801f2ec:	4618      	mov	r0, r3
 801f2ee:	f7ff fb59 	bl	801e9a4 <lv_style_set_border_post>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f2f2:	4b2f      	ldr	r3, [pc, #188]	; (801f3b0 <basic_init+0x2ec>)
 801f2f4:	681b      	ldr	r3, [r3, #0]
 801f2f6:	1d1c      	adds	r4, r3, #4
 801f2f8:	4b2e      	ldr	r3, [pc, #184]	; (801f3b4 <basic_init+0x2f0>)
 801f2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2fc:	f003 0302 	and.w	r3, r3, #2
 801f300:	2b00      	cmp	r3, #0
 801f302:	d004      	beq.n	801f30e <basic_init+0x24a>
 801f304:	482e      	ldr	r0, [pc, #184]	; (801f3c0 <basic_init+0x2fc>)
 801f306:	f7ff f961 	bl	801e5cc <lv_color_hex>
 801f30a:	4603      	mov	r3, r0
 801f30c:	e004      	b.n	801f318 <basic_init+0x254>
 801f30e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f312:	f7ff f95b 	bl	801e5cc <lv_color_hex>
 801f316:	4603      	mov	r3, r0
 801f318:	461a      	mov	r2, r3
 801f31a:	2100      	movs	r1, #0
 801f31c:	4620      	mov	r0, r4
 801f31e:	f7ff fcc3 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
 801f322:	4b23      	ldr	r3, [pc, #140]	; (801f3b0 <basic_init+0x2ec>)
 801f324:	681b      	ldr	r3, [r3, #0]
 801f326:	1d18      	adds	r0, r3, #4
 801f328:	4b22      	ldr	r3, [pc, #136]	; (801f3b4 <basic_init+0x2f0>)
 801f32a:	699b      	ldr	r3, [r3, #24]
 801f32c:	461a      	mov	r2, r3
 801f32e:	2100      	movs	r1, #0
 801f330:	f7ff fc87 	bl	801ec42 <lv_style_set_value_font>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f334:	4b1e      	ldr	r3, [pc, #120]	; (801f3b0 <basic_init+0x2ec>)
 801f336:	681b      	ldr	r3, [r3, #0]
 801f338:	1d1c      	adds	r4, r3, #4
 801f33a:	4b1e      	ldr	r3, [pc, #120]	; (801f3b4 <basic_init+0x2f0>)
 801f33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f33e:	f003 0302 	and.w	r3, r3, #2
 801f342:	2b00      	cmp	r3, #0
 801f344:	d004      	beq.n	801f350 <basic_init+0x28c>
 801f346:	481e      	ldr	r0, [pc, #120]	; (801f3c0 <basic_init+0x2fc>)
 801f348:	f7ff f940 	bl	801e5cc <lv_color_hex>
 801f34c:	4603      	mov	r3, r0
 801f34e:	e004      	b.n	801f35a <basic_init+0x296>
 801f350:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f354:	f7ff f93a 	bl	801e5cc <lv_color_hex>
 801f358:	4603      	mov	r3, r0
 801f35a:	461a      	mov	r2, r3
 801f35c:	2100      	movs	r1, #0
 801f35e:	4620      	mov	r0, r4
 801f360:	f7ff fc58 	bl	801ec14 <lv_style_set_value_color>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f364:	4b12      	ldr	r3, [pc, #72]	; (801f3b0 <basic_init+0x2ec>)
 801f366:	681b      	ldr	r3, [r3, #0]
 801f368:	1d1c      	adds	r4, r3, #4
 801f36a:	4b12      	ldr	r3, [pc, #72]	; (801f3b4 <basic_init+0x2f0>)
 801f36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f36e:	f003 0302 	and.w	r3, r3, #2
 801f372:	2b00      	cmp	r3, #0
 801f374:	d004      	beq.n	801f380 <basic_init+0x2bc>
 801f376:	4812      	ldr	r0, [pc, #72]	; (801f3c0 <basic_init+0x2fc>)
 801f378:	f7ff f928 	bl	801e5cc <lv_color_hex>
 801f37c:	4603      	mov	r3, r0
 801f37e:	e004      	b.n	801f38a <basic_init+0x2c6>
 801f380:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f384:	f7ff f922 	bl	801e5cc <lv_color_hex>
 801f388:	4603      	mov	r3, r0
 801f38a:	461a      	mov	r2, r3
 801f38c:	2100      	movs	r1, #0
 801f38e:	4620      	mov	r0, r4
 801f390:	f7ff fd6e 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f394:	4b06      	ldr	r3, [pc, #24]	; (801f3b0 <basic_init+0x2ec>)
 801f396:	681b      	ldr	r3, [r3, #0]
 801f398:	1d1c      	adds	r4, r3, #4
 801f39a:	4b06      	ldr	r3, [pc, #24]	; (801f3b4 <basic_init+0x2f0>)
 801f39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f39e:	f003 0302 	and.w	r3, r3, #2
 801f3a2:	2b00      	cmp	r3, #0
 801f3a4:	d018      	beq.n	801f3d8 <basic_init+0x314>
 801f3a6:	4806      	ldr	r0, [pc, #24]	; (801f3c0 <basic_init+0x2fc>)
 801f3a8:	f7ff f910 	bl	801e5cc <lv_color_hex>
 801f3ac:	4603      	mov	r3, r0
 801f3ae:	e018      	b.n	801f3e2 <basic_init+0x31e>
 801f3b0:	200200d0 	.word	0x200200d0
 801f3b4:	200200a4 	.word	0x200200a4
 801f3b8:	00eaeff3 	.word	0x00eaeff3
 801f3bc:	00444b5a 	.word	0x00444b5a
 801f3c0:	003b3e42 	.word	0x003b3e42
 801f3c4:	00e7e9ec 	.word	0x00e7e9ec
 801f3c8:	66666667 	.word	0x66666667
 801f3cc:	00586273 	.word	0x00586273
 801f3d0:	00d6dde3 	.word	0x00d6dde3
 801f3d4:	00808a97 	.word	0x00808a97
 801f3d8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f3dc:	f7ff f8f6 	bl	801e5cc <lv_color_hex>
 801f3e0:	4603      	mov	r3, r0
 801f3e2:	461a      	mov	r2, r3
 801f3e4:	2100      	movs	r1, #0
 801f3e6:	4620      	mov	r0, r4
 801f3e8:	f7ff fd2a 	bl	801ee40 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
 801f3ec:	4bcf      	ldr	r3, [pc, #828]	; (801f72c <basic_init+0x668>)
 801f3ee:	681b      	ldr	r3, [r3, #0]
 801f3f0:	3304      	adds	r3, #4
 801f3f2:	2201      	movs	r2, #1
 801f3f4:	2100      	movs	r1, #0
 801f3f6:	4618      	mov	r0, r3
 801f3f8:	f7ff fcbe 	bl	801ed78 <lv_style_set_line_width>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f3fc:	4bcb      	ldr	r3, [pc, #812]	; (801f72c <basic_init+0x668>)
 801f3fe:	681b      	ldr	r3, [r3, #0]
 801f400:	1d1d      	adds	r5, r3, #4
 801f402:	2000      	movs	r0, #0
 801f404:	f7fa fe91 	bl	801a12a <lv_disp_get_size_category>
 801f408:	4603      	mov	r3, r0
 801f40a:	2b01      	cmp	r3, #1
 801f40c:	d81e      	bhi.n	801f44c <basic_init+0x388>
 801f40e:	2000      	movs	r0, #0
 801f410:	f7fa fe72 	bl	801a0f8 <lv_disp_get_dpi>
 801f414:	4603      	mov	r3, r0
 801f416:	461a      	mov	r2, r3
 801f418:	4613      	mov	r3, r2
 801f41a:	011b      	lsls	r3, r3, #4
 801f41c:	1a9b      	subs	r3, r3, r2
 801f41e:	3350      	adds	r3, #80	; 0x50
 801f420:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f424:	db10      	blt.n	801f448 <basic_init+0x384>
 801f426:	2000      	movs	r0, #0
 801f428:	f7fa fe66 	bl	801a0f8 <lv_disp_get_dpi>
 801f42c:	4603      	mov	r3, r0
 801f42e:	461a      	mov	r2, r3
 801f430:	4613      	mov	r3, r2
 801f432:	011b      	lsls	r3, r3, #4
 801f434:	1a9b      	subs	r3, r3, r2
 801f436:	3350      	adds	r3, #80	; 0x50
 801f438:	4abd      	ldr	r2, [pc, #756]	; (801f730 <basic_init+0x66c>)
 801f43a:	fb82 1203 	smull	r1, r2, r2, r3
 801f43e:	1192      	asrs	r2, r2, #6
 801f440:	17db      	asrs	r3, r3, #31
 801f442:	1ad3      	subs	r3, r2, r3
 801f444:	b29c      	uxth	r4, r3
 801f446:	e021      	b.n	801f48c <basic_init+0x3c8>
 801f448:	2401      	movs	r4, #1
 801f44a:	e01f      	b.n	801f48c <basic_init+0x3c8>
 801f44c:	2000      	movs	r0, #0
 801f44e:	f7fa fe53 	bl	801a0f8 <lv_disp_get_dpi>
 801f452:	4603      	mov	r3, r0
 801f454:	461a      	mov	r2, r3
 801f456:	4613      	mov	r3, r2
 801f458:	011b      	lsls	r3, r3, #4
 801f45a:	1a9b      	subs	r3, r3, r2
 801f45c:	005b      	lsls	r3, r3, #1
 801f45e:	3350      	adds	r3, #80	; 0x50
 801f460:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f464:	db11      	blt.n	801f48a <basic_init+0x3c6>
 801f466:	2000      	movs	r0, #0
 801f468:	f7fa fe46 	bl	801a0f8 <lv_disp_get_dpi>
 801f46c:	4603      	mov	r3, r0
 801f46e:	461a      	mov	r2, r3
 801f470:	4613      	mov	r3, r2
 801f472:	011b      	lsls	r3, r3, #4
 801f474:	1a9b      	subs	r3, r3, r2
 801f476:	005b      	lsls	r3, r3, #1
 801f478:	3350      	adds	r3, #80	; 0x50
 801f47a:	4aad      	ldr	r2, [pc, #692]	; (801f730 <basic_init+0x66c>)
 801f47c:	fb82 1203 	smull	r1, r2, r2, r3
 801f480:	1192      	asrs	r2, r2, #6
 801f482:	17db      	asrs	r3, r3, #31
 801f484:	1ad3      	subs	r3, r2, r3
 801f486:	b29c      	uxth	r4, r3
 801f488:	e000      	b.n	801f48c <basic_init+0x3c8>
 801f48a:	2401      	movs	r4, #1
 801f48c:	2000      	movs	r0, #0
 801f48e:	f7fa fe33 	bl	801a0f8 <lv_disp_get_dpi>
 801f492:	4603      	mov	r3, r0
 801f494:	3328      	adds	r3, #40	; 0x28
 801f496:	005b      	lsls	r3, r3, #1
 801f498:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f49c:	db0d      	blt.n	801f4ba <basic_init+0x3f6>
 801f49e:	2000      	movs	r0, #0
 801f4a0:	f7fa fe2a 	bl	801a0f8 <lv_disp_get_dpi>
 801f4a4:	4603      	mov	r3, r0
 801f4a6:	3328      	adds	r3, #40	; 0x28
 801f4a8:	005b      	lsls	r3, r3, #1
 801f4aa:	4aa1      	ldr	r2, [pc, #644]	; (801f730 <basic_init+0x66c>)
 801f4ac:	fb82 1203 	smull	r1, r2, r2, r3
 801f4b0:	1192      	asrs	r2, r2, #6
 801f4b2:	17db      	asrs	r3, r3, #31
 801f4b4:	1ad3      	subs	r3, r2, r3
 801f4b6:	b29b      	uxth	r3, r3
 801f4b8:	e000      	b.n	801f4bc <basic_init+0x3f8>
 801f4ba:	2301      	movs	r3, #1
 801f4bc:	4423      	add	r3, r4
 801f4be:	b29b      	uxth	r3, r3
 801f4c0:	b21b      	sxth	r3, r3
 801f4c2:	461a      	mov	r2, r3
 801f4c4:	2100      	movs	r1, #0
 801f4c6:	4628      	mov	r0, r5
 801f4c8:	f7ff f95c 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f4cc:	4b97      	ldr	r3, [pc, #604]	; (801f72c <basic_init+0x668>)
 801f4ce:	681b      	ldr	r3, [r3, #0]
 801f4d0:	1d1d      	adds	r5, r3, #4
 801f4d2:	2000      	movs	r0, #0
 801f4d4:	f7fa fe29 	bl	801a12a <lv_disp_get_size_category>
 801f4d8:	4603      	mov	r3, r0
 801f4da:	2b01      	cmp	r3, #1
 801f4dc:	d81e      	bhi.n	801f51c <basic_init+0x458>
 801f4de:	2000      	movs	r0, #0
 801f4e0:	f7fa fe0a 	bl	801a0f8 <lv_disp_get_dpi>
 801f4e4:	4603      	mov	r3, r0
 801f4e6:	461a      	mov	r2, r3
 801f4e8:	4613      	mov	r3, r2
 801f4ea:	011b      	lsls	r3, r3, #4
 801f4ec:	1a9b      	subs	r3, r3, r2
 801f4ee:	3350      	adds	r3, #80	; 0x50
 801f4f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f4f4:	db10      	blt.n	801f518 <basic_init+0x454>
 801f4f6:	2000      	movs	r0, #0
 801f4f8:	f7fa fdfe 	bl	801a0f8 <lv_disp_get_dpi>
 801f4fc:	4603      	mov	r3, r0
 801f4fe:	461a      	mov	r2, r3
 801f500:	4613      	mov	r3, r2
 801f502:	011b      	lsls	r3, r3, #4
 801f504:	1a9b      	subs	r3, r3, r2
 801f506:	3350      	adds	r3, #80	; 0x50
 801f508:	4a89      	ldr	r2, [pc, #548]	; (801f730 <basic_init+0x66c>)
 801f50a:	fb82 1203 	smull	r1, r2, r2, r3
 801f50e:	1192      	asrs	r2, r2, #6
 801f510:	17db      	asrs	r3, r3, #31
 801f512:	1ad3      	subs	r3, r2, r3
 801f514:	b29c      	uxth	r4, r3
 801f516:	e021      	b.n	801f55c <basic_init+0x498>
 801f518:	2401      	movs	r4, #1
 801f51a:	e01f      	b.n	801f55c <basic_init+0x498>
 801f51c:	2000      	movs	r0, #0
 801f51e:	f7fa fdeb 	bl	801a0f8 <lv_disp_get_dpi>
 801f522:	4603      	mov	r3, r0
 801f524:	461a      	mov	r2, r3
 801f526:	4613      	mov	r3, r2
 801f528:	011b      	lsls	r3, r3, #4
 801f52a:	1a9b      	subs	r3, r3, r2
 801f52c:	005b      	lsls	r3, r3, #1
 801f52e:	3350      	adds	r3, #80	; 0x50
 801f530:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f534:	db11      	blt.n	801f55a <basic_init+0x496>
 801f536:	2000      	movs	r0, #0
 801f538:	f7fa fdde 	bl	801a0f8 <lv_disp_get_dpi>
 801f53c:	4603      	mov	r3, r0
 801f53e:	461a      	mov	r2, r3
 801f540:	4613      	mov	r3, r2
 801f542:	011b      	lsls	r3, r3, #4
 801f544:	1a9b      	subs	r3, r3, r2
 801f546:	005b      	lsls	r3, r3, #1
 801f548:	3350      	adds	r3, #80	; 0x50
 801f54a:	4a79      	ldr	r2, [pc, #484]	; (801f730 <basic_init+0x66c>)
 801f54c:	fb82 1203 	smull	r1, r2, r2, r3
 801f550:	1192      	asrs	r2, r2, #6
 801f552:	17db      	asrs	r3, r3, #31
 801f554:	1ad3      	subs	r3, r2, r3
 801f556:	b29c      	uxth	r4, r3
 801f558:	e000      	b.n	801f55c <basic_init+0x498>
 801f55a:	2401      	movs	r4, #1
 801f55c:	2000      	movs	r0, #0
 801f55e:	f7fa fdcb 	bl	801a0f8 <lv_disp_get_dpi>
 801f562:	4603      	mov	r3, r0
 801f564:	3328      	adds	r3, #40	; 0x28
 801f566:	005b      	lsls	r3, r3, #1
 801f568:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f56c:	db0d      	blt.n	801f58a <basic_init+0x4c6>
 801f56e:	2000      	movs	r0, #0
 801f570:	f7fa fdc2 	bl	801a0f8 <lv_disp_get_dpi>
 801f574:	4603      	mov	r3, r0
 801f576:	3328      	adds	r3, #40	; 0x28
 801f578:	005b      	lsls	r3, r3, #1
 801f57a:	4a6d      	ldr	r2, [pc, #436]	; (801f730 <basic_init+0x66c>)
 801f57c:	fb82 1203 	smull	r1, r2, r2, r3
 801f580:	1192      	asrs	r2, r2, #6
 801f582:	17db      	asrs	r3, r3, #31
 801f584:	1ad3      	subs	r3, r2, r3
 801f586:	b29b      	uxth	r3, r3
 801f588:	e000      	b.n	801f58c <basic_init+0x4c8>
 801f58a:	2301      	movs	r3, #1
 801f58c:	4423      	add	r3, r4
 801f58e:	b29b      	uxth	r3, r3
 801f590:	b21b      	sxth	r3, r3
 801f592:	461a      	mov	r2, r3
 801f594:	2100      	movs	r1, #0
 801f596:	4628      	mov	r0, r5
 801f598:	f7ff f90d 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f59c:	4b63      	ldr	r3, [pc, #396]	; (801f72c <basic_init+0x668>)
 801f59e:	681b      	ldr	r3, [r3, #0]
 801f5a0:	1d1d      	adds	r5, r3, #4
 801f5a2:	2000      	movs	r0, #0
 801f5a4:	f7fa fdc1 	bl	801a12a <lv_disp_get_size_category>
 801f5a8:	4603      	mov	r3, r0
 801f5aa:	2b01      	cmp	r3, #1
 801f5ac:	d81e      	bhi.n	801f5ec <basic_init+0x528>
 801f5ae:	2000      	movs	r0, #0
 801f5b0:	f7fa fda2 	bl	801a0f8 <lv_disp_get_dpi>
 801f5b4:	4603      	mov	r3, r0
 801f5b6:	461a      	mov	r2, r3
 801f5b8:	4613      	mov	r3, r2
 801f5ba:	011b      	lsls	r3, r3, #4
 801f5bc:	1a9b      	subs	r3, r3, r2
 801f5be:	3350      	adds	r3, #80	; 0x50
 801f5c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f5c4:	db10      	blt.n	801f5e8 <basic_init+0x524>
 801f5c6:	2000      	movs	r0, #0
 801f5c8:	f7fa fd96 	bl	801a0f8 <lv_disp_get_dpi>
 801f5cc:	4603      	mov	r3, r0
 801f5ce:	461a      	mov	r2, r3
 801f5d0:	4613      	mov	r3, r2
 801f5d2:	011b      	lsls	r3, r3, #4
 801f5d4:	1a9b      	subs	r3, r3, r2
 801f5d6:	3350      	adds	r3, #80	; 0x50
 801f5d8:	4a55      	ldr	r2, [pc, #340]	; (801f730 <basic_init+0x66c>)
 801f5da:	fb82 1203 	smull	r1, r2, r2, r3
 801f5de:	1192      	asrs	r2, r2, #6
 801f5e0:	17db      	asrs	r3, r3, #31
 801f5e2:	1ad3      	subs	r3, r2, r3
 801f5e4:	b29c      	uxth	r4, r3
 801f5e6:	e021      	b.n	801f62c <basic_init+0x568>
 801f5e8:	2401      	movs	r4, #1
 801f5ea:	e01f      	b.n	801f62c <basic_init+0x568>
 801f5ec:	2000      	movs	r0, #0
 801f5ee:	f7fa fd83 	bl	801a0f8 <lv_disp_get_dpi>
 801f5f2:	4603      	mov	r3, r0
 801f5f4:	461a      	mov	r2, r3
 801f5f6:	4613      	mov	r3, r2
 801f5f8:	011b      	lsls	r3, r3, #4
 801f5fa:	1a9b      	subs	r3, r3, r2
 801f5fc:	005b      	lsls	r3, r3, #1
 801f5fe:	3350      	adds	r3, #80	; 0x50
 801f600:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f604:	db11      	blt.n	801f62a <basic_init+0x566>
 801f606:	2000      	movs	r0, #0
 801f608:	f7fa fd76 	bl	801a0f8 <lv_disp_get_dpi>
 801f60c:	4603      	mov	r3, r0
 801f60e:	461a      	mov	r2, r3
 801f610:	4613      	mov	r3, r2
 801f612:	011b      	lsls	r3, r3, #4
 801f614:	1a9b      	subs	r3, r3, r2
 801f616:	005b      	lsls	r3, r3, #1
 801f618:	3350      	adds	r3, #80	; 0x50
 801f61a:	4a45      	ldr	r2, [pc, #276]	; (801f730 <basic_init+0x66c>)
 801f61c:	fb82 1203 	smull	r1, r2, r2, r3
 801f620:	1192      	asrs	r2, r2, #6
 801f622:	17db      	asrs	r3, r3, #31
 801f624:	1ad3      	subs	r3, r2, r3
 801f626:	b29c      	uxth	r4, r3
 801f628:	e000      	b.n	801f62c <basic_init+0x568>
 801f62a:	2401      	movs	r4, #1
 801f62c:	2000      	movs	r0, #0
 801f62e:	f7fa fd63 	bl	801a0f8 <lv_disp_get_dpi>
 801f632:	4603      	mov	r3, r0
 801f634:	3328      	adds	r3, #40	; 0x28
 801f636:	005b      	lsls	r3, r3, #1
 801f638:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f63c:	db0d      	blt.n	801f65a <basic_init+0x596>
 801f63e:	2000      	movs	r0, #0
 801f640:	f7fa fd5a 	bl	801a0f8 <lv_disp_get_dpi>
 801f644:	4603      	mov	r3, r0
 801f646:	3328      	adds	r3, #40	; 0x28
 801f648:	005b      	lsls	r3, r3, #1
 801f64a:	4a39      	ldr	r2, [pc, #228]	; (801f730 <basic_init+0x66c>)
 801f64c:	fb82 1203 	smull	r1, r2, r2, r3
 801f650:	1192      	asrs	r2, r2, #6
 801f652:	17db      	asrs	r3, r3, #31
 801f654:	1ad3      	subs	r3, r2, r3
 801f656:	b29b      	uxth	r3, r3
 801f658:	e000      	b.n	801f65c <basic_init+0x598>
 801f65a:	2301      	movs	r3, #1
 801f65c:	4423      	add	r3, r4
 801f65e:	b29b      	uxth	r3, r3
 801f660:	b21b      	sxth	r3, r3
 801f662:	461a      	mov	r2, r3
 801f664:	2100      	movs	r1, #0
 801f666:	4628      	mov	r0, r5
 801f668:	f7ff f85a 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f66c:	4b2f      	ldr	r3, [pc, #188]	; (801f72c <basic_init+0x668>)
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	1d1d      	adds	r5, r3, #4
 801f672:	2000      	movs	r0, #0
 801f674:	f7fa fd59 	bl	801a12a <lv_disp_get_size_category>
 801f678:	4603      	mov	r3, r0
 801f67a:	2b01      	cmp	r3, #1
 801f67c:	d81e      	bhi.n	801f6bc <basic_init+0x5f8>
 801f67e:	2000      	movs	r0, #0
 801f680:	f7fa fd3a 	bl	801a0f8 <lv_disp_get_dpi>
 801f684:	4603      	mov	r3, r0
 801f686:	461a      	mov	r2, r3
 801f688:	4613      	mov	r3, r2
 801f68a:	011b      	lsls	r3, r3, #4
 801f68c:	1a9b      	subs	r3, r3, r2
 801f68e:	3350      	adds	r3, #80	; 0x50
 801f690:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f694:	db10      	blt.n	801f6b8 <basic_init+0x5f4>
 801f696:	2000      	movs	r0, #0
 801f698:	f7fa fd2e 	bl	801a0f8 <lv_disp_get_dpi>
 801f69c:	4603      	mov	r3, r0
 801f69e:	461a      	mov	r2, r3
 801f6a0:	4613      	mov	r3, r2
 801f6a2:	011b      	lsls	r3, r3, #4
 801f6a4:	1a9b      	subs	r3, r3, r2
 801f6a6:	3350      	adds	r3, #80	; 0x50
 801f6a8:	4a21      	ldr	r2, [pc, #132]	; (801f730 <basic_init+0x66c>)
 801f6aa:	fb82 1203 	smull	r1, r2, r2, r3
 801f6ae:	1192      	asrs	r2, r2, #6
 801f6b0:	17db      	asrs	r3, r3, #31
 801f6b2:	1ad3      	subs	r3, r2, r3
 801f6b4:	b29c      	uxth	r4, r3
 801f6b6:	e021      	b.n	801f6fc <basic_init+0x638>
 801f6b8:	2401      	movs	r4, #1
 801f6ba:	e01f      	b.n	801f6fc <basic_init+0x638>
 801f6bc:	2000      	movs	r0, #0
 801f6be:	f7fa fd1b 	bl	801a0f8 <lv_disp_get_dpi>
 801f6c2:	4603      	mov	r3, r0
 801f6c4:	461a      	mov	r2, r3
 801f6c6:	4613      	mov	r3, r2
 801f6c8:	011b      	lsls	r3, r3, #4
 801f6ca:	1a9b      	subs	r3, r3, r2
 801f6cc:	005b      	lsls	r3, r3, #1
 801f6ce:	3350      	adds	r3, #80	; 0x50
 801f6d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f6d4:	db11      	blt.n	801f6fa <basic_init+0x636>
 801f6d6:	2000      	movs	r0, #0
 801f6d8:	f7fa fd0e 	bl	801a0f8 <lv_disp_get_dpi>
 801f6dc:	4603      	mov	r3, r0
 801f6de:	461a      	mov	r2, r3
 801f6e0:	4613      	mov	r3, r2
 801f6e2:	011b      	lsls	r3, r3, #4
 801f6e4:	1a9b      	subs	r3, r3, r2
 801f6e6:	005b      	lsls	r3, r3, #1
 801f6e8:	3350      	adds	r3, #80	; 0x50
 801f6ea:	4a11      	ldr	r2, [pc, #68]	; (801f730 <basic_init+0x66c>)
 801f6ec:	fb82 1203 	smull	r1, r2, r2, r3
 801f6f0:	1192      	asrs	r2, r2, #6
 801f6f2:	17db      	asrs	r3, r3, #31
 801f6f4:	1ad3      	subs	r3, r2, r3
 801f6f6:	b29c      	uxth	r4, r3
 801f6f8:	e000      	b.n	801f6fc <basic_init+0x638>
 801f6fa:	2401      	movs	r4, #1
 801f6fc:	2000      	movs	r0, #0
 801f6fe:	f7fa fcfb 	bl	801a0f8 <lv_disp_get_dpi>
 801f702:	4603      	mov	r3, r0
 801f704:	3328      	adds	r3, #40	; 0x28
 801f706:	005b      	lsls	r3, r3, #1
 801f708:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f70c:	db12      	blt.n	801f734 <basic_init+0x670>
 801f70e:	2000      	movs	r0, #0
 801f710:	f7fa fcf2 	bl	801a0f8 <lv_disp_get_dpi>
 801f714:	4603      	mov	r3, r0
 801f716:	3328      	adds	r3, #40	; 0x28
 801f718:	005b      	lsls	r3, r3, #1
 801f71a:	4a05      	ldr	r2, [pc, #20]	; (801f730 <basic_init+0x66c>)
 801f71c:	fb82 1203 	smull	r1, r2, r2, r3
 801f720:	1192      	asrs	r2, r2, #6
 801f722:	17db      	asrs	r3, r3, #31
 801f724:	1ad3      	subs	r3, r2, r3
 801f726:	b29b      	uxth	r3, r3
 801f728:	e005      	b.n	801f736 <basic_init+0x672>
 801f72a:	bf00      	nop
 801f72c:	200200d0 	.word	0x200200d0
 801f730:	66666667 	.word	0x66666667
 801f734:	2301      	movs	r3, #1
 801f736:	4423      	add	r3, r4
 801f738:	b29b      	uxth	r3, r3
 801f73a:	b21b      	sxth	r3, r3
 801f73c:	461a      	mov	r2, r3
 801f73e:	2100      	movs	r1, #0
 801f740:	4628      	mov	r0, r5
 801f742:	f7ff f806 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 801f746:	4bba      	ldr	r3, [pc, #744]	; (801fa30 <basic_init+0x96c>)
 801f748:	681b      	ldr	r3, [r3, #0]
 801f74a:	1d1c      	adds	r4, r3, #4
 801f74c:	2000      	movs	r0, #0
 801f74e:	f7fa fcec 	bl	801a12a <lv_disp_get_size_category>
 801f752:	4603      	mov	r3, r0
 801f754:	2b01      	cmp	r3, #1
 801f756:	d81e      	bhi.n	801f796 <basic_init+0x6d2>
 801f758:	2000      	movs	r0, #0
 801f75a:	f7fa fccd 	bl	801a0f8 <lv_disp_get_dpi>
 801f75e:	4603      	mov	r3, r0
 801f760:	461a      	mov	r2, r3
 801f762:	4613      	mov	r3, r2
 801f764:	011b      	lsls	r3, r3, #4
 801f766:	1a9b      	subs	r3, r3, r2
 801f768:	3350      	adds	r3, #80	; 0x50
 801f76a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f76e:	db10      	blt.n	801f792 <basic_init+0x6ce>
 801f770:	2000      	movs	r0, #0
 801f772:	f7fa fcc1 	bl	801a0f8 <lv_disp_get_dpi>
 801f776:	4603      	mov	r3, r0
 801f778:	461a      	mov	r2, r3
 801f77a:	4613      	mov	r3, r2
 801f77c:	011b      	lsls	r3, r3, #4
 801f77e:	1a9b      	subs	r3, r3, r2
 801f780:	3350      	adds	r3, #80	; 0x50
 801f782:	4aac      	ldr	r2, [pc, #688]	; (801fa34 <basic_init+0x970>)
 801f784:	fb82 1203 	smull	r1, r2, r2, r3
 801f788:	1192      	asrs	r2, r2, #6
 801f78a:	17db      	asrs	r3, r3, #31
 801f78c:	1ad3      	subs	r3, r2, r3
 801f78e:	b21b      	sxth	r3, r3
 801f790:	e021      	b.n	801f7d6 <basic_init+0x712>
 801f792:	2301      	movs	r3, #1
 801f794:	e01f      	b.n	801f7d6 <basic_init+0x712>
 801f796:	2000      	movs	r0, #0
 801f798:	f7fa fcae 	bl	801a0f8 <lv_disp_get_dpi>
 801f79c:	4603      	mov	r3, r0
 801f79e:	461a      	mov	r2, r3
 801f7a0:	4613      	mov	r3, r2
 801f7a2:	011b      	lsls	r3, r3, #4
 801f7a4:	1a9b      	subs	r3, r3, r2
 801f7a6:	005b      	lsls	r3, r3, #1
 801f7a8:	3350      	adds	r3, #80	; 0x50
 801f7aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f7ae:	db11      	blt.n	801f7d4 <basic_init+0x710>
 801f7b0:	2000      	movs	r0, #0
 801f7b2:	f7fa fca1 	bl	801a0f8 <lv_disp_get_dpi>
 801f7b6:	4603      	mov	r3, r0
 801f7b8:	461a      	mov	r2, r3
 801f7ba:	4613      	mov	r3, r2
 801f7bc:	011b      	lsls	r3, r3, #4
 801f7be:	1a9b      	subs	r3, r3, r2
 801f7c0:	005b      	lsls	r3, r3, #1
 801f7c2:	3350      	adds	r3, #80	; 0x50
 801f7c4:	4a9b      	ldr	r2, [pc, #620]	; (801fa34 <basic_init+0x970>)
 801f7c6:	fb82 1203 	smull	r1, r2, r2, r3
 801f7ca:	1192      	asrs	r2, r2, #6
 801f7cc:	17db      	asrs	r3, r3, #31
 801f7ce:	1ad3      	subs	r3, r2, r3
 801f7d0:	b21b      	sxth	r3, r3
 801f7d2:	e000      	b.n	801f7d6 <basic_init+0x712>
 801f7d4:	2301      	movs	r3, #1
 801f7d6:	461a      	mov	r2, r3
 801f7d8:	2100      	movs	r1, #0
 801f7da:	4620      	mov	r0, r4
 801f7dc:	f7ff f804 	bl	801e7e8 <lv_style_set_pad_inner>
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 801f7e0:	4b93      	ldr	r3, [pc, #588]	; (801fa30 <basic_init+0x96c>)
 801f7e2:	681b      	ldr	r3, [r3, #0]
 801f7e4:	3304      	adds	r3, #4
 801f7e6:	2200      	movs	r2, #0
 801f7e8:	2100      	movs	r1, #0
 801f7ea:	4618      	mov	r0, r3
 801f7ec:	f7ff fb5a 	bl	801eea4 <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
 801f7f0:	4b8f      	ldr	r3, [pc, #572]	; (801fa30 <basic_init+0x96c>)
 801f7f2:	681b      	ldr	r3, [r3, #0]
 801f7f4:	3304      	adds	r3, #4
 801f7f6:	2239      	movs	r2, #57	; 0x39
 801f7f8:	2100      	movs	r1, #0
 801f7fa:	4618      	mov	r0, r3
 801f7fc:	f7ff fbcf 	bl	801ef9e <lv_style_set_transition_prop_6>

    style_init_reset(&styles->bg_sec);
 801f800:	4b8b      	ldr	r3, [pc, #556]	; (801fa30 <basic_init+0x96c>)
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	330c      	adds	r3, #12
 801f806:	4618      	mov	r0, r3
 801f808:	f005 fc9e 	bl	8025148 <style_init_reset>
    lv_style_copy(&styles->bg_sec, &styles->bg);
 801f80c:	4b88      	ldr	r3, [pc, #544]	; (801fa30 <basic_init+0x96c>)
 801f80e:	681b      	ldr	r3, [r3, #0]
 801f810:	f103 020c 	add.w	r2, r3, #12
 801f814:	4b86      	ldr	r3, [pc, #536]	; (801fa30 <basic_init+0x96c>)
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	3304      	adds	r3, #4
 801f81a:	4619      	mov	r1, r3
 801f81c:	4610      	mov	r0, r2
 801f81e:	f7eb fabc 	bl	800ad9a <lv_style_copy>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
 801f822:	4b83      	ldr	r3, [pc, #524]	; (801fa30 <basic_init+0x96c>)
 801f824:	681b      	ldr	r3, [r3, #0]
 801f826:	f103 040c 	add.w	r4, r3, #12
 801f82a:	4b83      	ldr	r3, [pc, #524]	; (801fa38 <basic_init+0x974>)
 801f82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f82e:	f003 0302 	and.w	r3, r3, #2
 801f832:	2b00      	cmp	r3, #0
 801f834:	d004      	beq.n	801f840 <basic_init+0x77c>
 801f836:	4881      	ldr	r0, [pc, #516]	; (801fa3c <basic_init+0x978>)
 801f838:	f7fe fec8 	bl	801e5cc <lv_color_hex>
 801f83c:	4603      	mov	r3, r0
 801f83e:	e003      	b.n	801f848 <basic_init+0x784>
 801f840:	487f      	ldr	r0, [pc, #508]	; (801fa40 <basic_init+0x97c>)
 801f842:	f7fe fec3 	bl	801e5cc <lv_color_hex>
 801f846:	4603      	mov	r3, r0
 801f848:	461a      	mov	r2, r3
 801f84a:	2100      	movs	r1, #0
 801f84c:	4620      	mov	r0, r4
 801f84e:	f7ff f848 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
 801f852:	4b77      	ldr	r3, [pc, #476]	; (801fa30 <basic_init+0x96c>)
 801f854:	681b      	ldr	r3, [r3, #0]
 801f856:	f103 040c 	add.w	r4, r3, #12
 801f85a:	4b77      	ldr	r3, [pc, #476]	; (801fa38 <basic_init+0x974>)
 801f85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f85e:	f003 0302 	and.w	r3, r3, #2
 801f862:	2b00      	cmp	r3, #0
 801f864:	d004      	beq.n	801f870 <basic_init+0x7ac>
 801f866:	4877      	ldr	r0, [pc, #476]	; (801fa44 <basic_init+0x980>)
 801f868:	f7fe feb0 	bl	801e5cc <lv_color_hex>
 801f86c:	4603      	mov	r3, r0
 801f86e:	e003      	b.n	801f878 <basic_init+0x7b4>
 801f870:	4875      	ldr	r0, [pc, #468]	; (801fa48 <basic_init+0x984>)
 801f872:	f7fe feab 	bl	801e5cc <lv_color_hex>
 801f876:	4603      	mov	r3, r0
 801f878:	461a      	mov	r2, r3
 801f87a:	2100      	movs	r1, #0
 801f87c:	4620      	mov	r0, r4
 801f87e:	f7ff f8aa 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801f882:	4b6b      	ldr	r3, [pc, #428]	; (801fa30 <basic_init+0x96c>)
 801f884:	681b      	ldr	r3, [r3, #0]
 801f886:	f103 040c 	add.w	r4, r3, #12
 801f88a:	4b6b      	ldr	r3, [pc, #428]	; (801fa38 <basic_init+0x974>)
 801f88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f88e:	f003 0302 	and.w	r3, r3, #2
 801f892:	2b00      	cmp	r3, #0
 801f894:	d004      	beq.n	801f8a0 <basic_init+0x7dc>
 801f896:	486d      	ldr	r0, [pc, #436]	; (801fa4c <basic_init+0x988>)
 801f898:	f7fe fe98 	bl	801e5cc <lv_color_hex>
 801f89c:	4603      	mov	r3, r0
 801f89e:	e003      	b.n	801f8a8 <basic_init+0x7e4>
 801f8a0:	486b      	ldr	r0, [pc, #428]	; (801fa50 <basic_init+0x98c>)
 801f8a2:	f7fe fe93 	bl	801e5cc <lv_color_hex>
 801f8a6:	4603      	mov	r3, r0
 801f8a8:	461a      	mov	r2, r3
 801f8aa:	2100      	movs	r1, #0
 801f8ac:	4620      	mov	r0, r4
 801f8ae:	f7ff f9fb 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801f8b2:	4b5f      	ldr	r3, [pc, #380]	; (801fa30 <basic_init+0x96c>)
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	f103 040c 	add.w	r4, r3, #12
 801f8ba:	4b5f      	ldr	r3, [pc, #380]	; (801fa38 <basic_init+0x974>)
 801f8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8be:	f003 0302 	and.w	r3, r3, #2
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	d004      	beq.n	801f8d0 <basic_init+0x80c>
 801f8c6:	4861      	ldr	r0, [pc, #388]	; (801fa4c <basic_init+0x988>)
 801f8c8:	f7fe fe80 	bl	801e5cc <lv_color_hex>
 801f8cc:	4603      	mov	r3, r0
 801f8ce:	e003      	b.n	801f8d8 <basic_init+0x814>
 801f8d0:	485f      	ldr	r0, [pc, #380]	; (801fa50 <basic_init+0x98c>)
 801f8d2:	f7fe fe7b 	bl	801e5cc <lv_color_hex>
 801f8d6:	4603      	mov	r3, r0
 801f8d8:	461a      	mov	r2, r3
 801f8da:	2100      	movs	r1, #0
 801f8dc:	4620      	mov	r0, r4
 801f8de:	f7ff f999 	bl	801ec14 <lv_style_set_value_color>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801f8e2:	4b53      	ldr	r3, [pc, #332]	; (801fa30 <basic_init+0x96c>)
 801f8e4:	681b      	ldr	r3, [r3, #0]
 801f8e6:	f103 040c 	add.w	r4, r3, #12
 801f8ea:	4b53      	ldr	r3, [pc, #332]	; (801fa38 <basic_init+0x974>)
 801f8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8ee:	f003 0302 	and.w	r3, r3, #2
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d004      	beq.n	801f900 <basic_init+0x83c>
 801f8f6:	4855      	ldr	r0, [pc, #340]	; (801fa4c <basic_init+0x988>)
 801f8f8:	f7fe fe68 	bl	801e5cc <lv_color_hex>
 801f8fc:	4603      	mov	r3, r0
 801f8fe:	e003      	b.n	801f908 <basic_init+0x844>
 801f900:	4853      	ldr	r0, [pc, #332]	; (801fa50 <basic_init+0x98c>)
 801f902:	f7fe fe63 	bl	801e5cc <lv_color_hex>
 801f906:	4603      	mov	r3, r0
 801f908:	461a      	mov	r2, r3
 801f90a:	2100      	movs	r1, #0
 801f90c:	4620      	mov	r0, r4
 801f90e:	f7ff faaf 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801f912:	4b47      	ldr	r3, [pc, #284]	; (801fa30 <basic_init+0x96c>)
 801f914:	681b      	ldr	r3, [r3, #0]
 801f916:	f103 040c 	add.w	r4, r3, #12
 801f91a:	4b47      	ldr	r3, [pc, #284]	; (801fa38 <basic_init+0x974>)
 801f91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f91e:	f003 0302 	and.w	r3, r3, #2
 801f922:	2b00      	cmp	r3, #0
 801f924:	d004      	beq.n	801f930 <basic_init+0x86c>
 801f926:	4849      	ldr	r0, [pc, #292]	; (801fa4c <basic_init+0x988>)
 801f928:	f7fe fe50 	bl	801e5cc <lv_color_hex>
 801f92c:	4603      	mov	r3, r0
 801f92e:	e003      	b.n	801f938 <basic_init+0x874>
 801f930:	4847      	ldr	r0, [pc, #284]	; (801fa50 <basic_init+0x98c>)
 801f932:	f7fe fe4b 	bl	801e5cc <lv_color_hex>
 801f936:	4603      	mov	r3, r0
 801f938:	461a      	mov	r2, r3
 801f93a:	2100      	movs	r1, #0
 801f93c:	4620      	mov	r0, r4
 801f93e:	f7ff fa7f 	bl	801ee40 <lv_style_set_line_color>

    style_init_reset(&styles->bg_click);
 801f942:	4b3b      	ldr	r3, [pc, #236]	; (801fa30 <basic_init+0x96c>)
 801f944:	681b      	ldr	r3, [r3, #0]
 801f946:	3308      	adds	r3, #8
 801f948:	4618      	mov	r0, r3
 801f94a:	f005 fbfd 	bl	8025148 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
 801f94e:	4b38      	ldr	r3, [pc, #224]	; (801fa30 <basic_init+0x96c>)
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	f103 0408 	add.w	r4, r3, #8
 801f956:	4b38      	ldr	r3, [pc, #224]	; (801fa38 <basic_init+0x974>)
 801f958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f95a:	f003 0302 	and.w	r3, r3, #2
 801f95e:	2b00      	cmp	r3, #0
 801f960:	d004      	beq.n	801f96c <basic_init+0x8a8>
 801f962:	483c      	ldr	r0, [pc, #240]	; (801fa54 <basic_init+0x990>)
 801f964:	f7fe fe32 	bl	801e5cc <lv_color_hex>
 801f968:	4603      	mov	r3, r0
 801f96a:	e003      	b.n	801f974 <basic_init+0x8b0>
 801f96c:	483a      	ldr	r0, [pc, #232]	; (801fa58 <basic_init+0x994>)
 801f96e:	f7fe fe2d 	bl	801e5cc <lv_color_hex>
 801f972:	4603      	mov	r3, r0
 801f974:	461a      	mov	r2, r3
 801f976:	2110      	movs	r1, #16
 801f978:	4620      	mov	r0, r4
 801f97a:	f7fe ffb2 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
 801f97e:	4b2c      	ldr	r3, [pc, #176]	; (801fa30 <basic_init+0x96c>)
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	f103 0008 	add.w	r0, r3, #8
 801f986:	4b2c      	ldr	r3, [pc, #176]	; (801fa38 <basic_init+0x974>)
 801f988:	68da      	ldr	r2, [r3, #12]
 801f98a:	2101      	movs	r1, #1
 801f98c:	f7fe ffa9 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
 801f990:	4b27      	ldr	r3, [pc, #156]	; (801fa30 <basic_init+0x96c>)
 801f992:	681b      	ldr	r3, [r3, #0]
 801f994:	f103 0408 	add.w	r4, r3, #8
 801f998:	4b27      	ldr	r3, [pc, #156]	; (801fa38 <basic_init+0x974>)
 801f99a:	2133      	movs	r1, #51	; 0x33
 801f99c:	68d8      	ldr	r0, [r3, #12]
 801f99e:	f7fb ff41 	bl	801b824 <lv_color_darken>
 801f9a2:	4603      	mov	r3, r0
 801f9a4:	461a      	mov	r2, r3
 801f9a6:	2111      	movs	r1, #17
 801f9a8:	4620      	mov	r0, r4
 801f9aa:	f7fe ff9a 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
 801f9ae:	4b20      	ldr	r3, [pc, #128]	; (801fa30 <basic_init+0x96c>)
 801f9b0:	681b      	ldr	r3, [r3, #0]
 801f9b2:	f103 0408 	add.w	r4, r3, #8
 801f9b6:	4b20      	ldr	r3, [pc, #128]	; (801fa38 <basic_init+0x974>)
 801f9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f9ba:	f003 0302 	and.w	r3, r3, #2
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d005      	beq.n	801f9ce <basic_init+0x90a>
 801f9c2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f9c6:	f7fe fe01 	bl	801e5cc <lv_color_hex>
 801f9ca:	4603      	mov	r3, r0
 801f9cc:	e003      	b.n	801f9d6 <basic_init+0x912>
 801f9ce:	4823      	ldr	r0, [pc, #140]	; (801fa5c <basic_init+0x998>)
 801f9d0:	f7fe fdfc 	bl	801e5cc <lv_color_hex>
 801f9d4:	4603      	mov	r3, r0
 801f9d6:	461a      	mov	r2, r3
 801f9d8:	2120      	movs	r1, #32
 801f9da:	4620      	mov	r0, r4
 801f9dc:	f7fe ff81 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
 801f9e0:	4b13      	ldr	r3, [pc, #76]	; (801fa30 <basic_init+0x96c>)
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	3308      	adds	r3, #8
 801f9e6:	2200      	movs	r2, #0
 801f9e8:	2101      	movs	r1, #1
 801f9ea:	4618      	mov	r0, r3
 801f9ec:	f7fe ffa8 	bl	801e940 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
 801f9f0:	4b0f      	ldr	r3, [pc, #60]	; (801fa30 <basic_init+0x96c>)
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	f103 0408 	add.w	r4, r3, #8
 801f9f8:	4b0f      	ldr	r3, [pc, #60]	; (801fa38 <basic_init+0x974>)
 801f9fa:	2133      	movs	r1, #51	; 0x33
 801f9fc:	68d8      	ldr	r0, [r3, #12]
 801f9fe:	f7fb ff11 	bl	801b824 <lv_color_darken>
 801fa02:	4603      	mov	r3, r0
 801fa04:	461a      	mov	r2, r3
 801fa06:	2112      	movs	r1, #18
 801fa08:	4620      	mov	r0, r4
 801fa0a:	f7fe ffe4 	bl	801e9d6 <lv_style_set_border_color>
                                                                                                      LV_OPA_20));
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
 801fa0e:	4b08      	ldr	r3, [pc, #32]	; (801fa30 <basic_init+0x96c>)
 801fa10:	681b      	ldr	r3, [r3, #0]
 801fa12:	f103 0408 	add.w	r4, r3, #8
 801fa16:	4b08      	ldr	r3, [pc, #32]	; (801fa38 <basic_init+0x974>)
 801fa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa1a:	f003 0302 	and.w	r3, r3, #2
 801fa1e:	2b00      	cmp	r3, #0
 801fa20:	d01e      	beq.n	801fa60 <basic_init+0x99c>
 801fa22:	f640 40cc 	movw	r0, #3276	; 0xccc
 801fa26:	f7fe fde5 	bl	801e5f4 <lv_color_hex3>
 801fa2a:	4603      	mov	r3, r0
 801fa2c:	e01c      	b.n	801fa68 <basic_init+0x9a4>
 801fa2e:	bf00      	nop
 801fa30:	200200d0 	.word	0x200200d0
 801fa34:	66666667 	.word	0x66666667
 801fa38:	200200a4 	.word	0x200200a4
 801fa3c:	00d4d7d9 	.word	0x00d4d7d9
 801fa40:	0045494d 	.word	0x0045494d
 801fa44:	00dfe7ed 	.word	0x00dfe7ed
 801fa48:	00404040 	.word	0x00404040
 801fa4c:	0031404f 	.word	0x0031404f
 801fa50:	00a5a8ad 	.word	0x00a5a8ad
 801fa54:	00eeeeee 	.word	0x00eeeeee
 801fa58:	00494f57 	.word	0x00494f57
 801fa5c:	00586273 	.word	0x00586273
 801fa60:	48c1      	ldr	r0, [pc, #772]	; (801fd68 <basic_init+0xca4>)
 801fa62:	f7fe fdb3 	bl	801e5cc <lv_color_hex>
 801fa66:	4603      	mov	r3, r0
 801fa68:	461a      	mov	r2, r3
 801fa6a:	2110      	movs	r1, #16
 801fa6c:	4620      	mov	r0, r4
 801fa6e:	f7fe ffb2 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
 801fa72:	4bbe      	ldr	r3, [pc, #760]	; (801fd6c <basic_init+0xca8>)
 801fa74:	681b      	ldr	r3, [r3, #0]
 801fa76:	f103 0408 	add.w	r4, r3, #8
 801fa7a:	4bbd      	ldr	r3, [pc, #756]	; (801fd70 <basic_init+0xcac>)
 801fa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa7e:	f003 0302 	and.w	r3, r3, #2
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d004      	beq.n	801fa90 <basic_init+0x9cc>
 801fa86:	48bb      	ldr	r0, [pc, #748]	; (801fd74 <basic_init+0xcb0>)
 801fa88:	f7fe fda0 	bl	801e5cc <lv_color_hex>
 801fa8c:	4603      	mov	r3, r0
 801fa8e:	e003      	b.n	801fa98 <basic_init+0x9d4>
 801fa90:	48b5      	ldr	r0, [pc, #724]	; (801fd68 <basic_init+0xca4>)
 801fa92:	f7fe fd9b 	bl	801e5cc <lv_color_hex>
 801fa96:	4603      	mov	r3, r0
 801fa98:	461a      	mov	r2, r3
 801fa9a:	2101      	movs	r1, #1
 801fa9c:	4620      	mov	r0, r4
 801fa9e:	f7fe ff9a 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
 801faa2:	4bb2      	ldr	r3, [pc, #712]	; (801fd6c <basic_init+0xca8>)
 801faa4:	681b      	ldr	r3, [r3, #0]
 801faa6:	f103 0408 	add.w	r4, r3, #8
 801faaa:	4bb1      	ldr	r3, [pc, #708]	; (801fd70 <basic_init+0xcac>)
 801faac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801faae:	f003 0302 	and.w	r3, r3, #2
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d004      	beq.n	801fac0 <basic_init+0x9fc>
 801fab6:	48af      	ldr	r0, [pc, #700]	; (801fd74 <basic_init+0xcb0>)
 801fab8:	f7fe fd88 	bl	801e5cc <lv_color_hex>
 801fabc:	4603      	mov	r3, r0
 801fabe:	e003      	b.n	801fac8 <basic_init+0xa04>
 801fac0:	48a9      	ldr	r0, [pc, #676]	; (801fd68 <basic_init+0xca4>)
 801fac2:	f7fe fd83 	bl	801e5cc <lv_color_hex>
 801fac6:	4603      	mov	r3, r0
 801fac8:	461a      	mov	r2, r3
 801faca:	2111      	movs	r1, #17
 801facc:	4620      	mov	r0, r4
 801face:	f7fe ff82 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
 801fad2:	4ba6      	ldr	r3, [pc, #664]	; (801fd6c <basic_init+0xca8>)
 801fad4:	681b      	ldr	r3, [r3, #0]
 801fad6:	f103 0408 	add.w	r4, r3, #8
 801fada:	4ba5      	ldr	r3, [pc, #660]	; (801fd70 <basic_init+0xcac>)
 801fadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fade:	f003 0302 	and.w	r3, r3, #2
 801fae2:	2b00      	cmp	r3, #0
 801fae4:	d004      	beq.n	801faf0 <basic_init+0xa2c>
 801fae6:	48a4      	ldr	r0, [pc, #656]	; (801fd78 <basic_init+0xcb4>)
 801fae8:	f7fe fd70 	bl	801e5cc <lv_color_hex>
 801faec:	4603      	mov	r3, r0
 801faee:	e003      	b.n	801faf8 <basic_init+0xa34>
 801faf0:	489d      	ldr	r0, [pc, #628]	; (801fd68 <basic_init+0xca4>)
 801faf2:	f7fe fd6b 	bl	801e5cc <lv_color_hex>
 801faf6:	4603      	mov	r3, r0
 801faf8:	461a      	mov	r2, r3
 801fafa:	2120      	movs	r1, #32
 801fafc:	4620      	mov	r0, r4
 801fafe:	f7fe ff6a 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 801fb02:	4b9a      	ldr	r3, [pc, #616]	; (801fd6c <basic_init+0xca8>)
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	f103 0408 	add.w	r4, r3, #8
 801fb0a:	4b99      	ldr	r3, [pc, #612]	; (801fd70 <basic_init+0xcac>)
 801fb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb0e:	f003 0302 	and.w	r3, r3, #2
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d004      	beq.n	801fb20 <basic_init+0xa5c>
 801fb16:	4897      	ldr	r0, [pc, #604]	; (801fd74 <basic_init+0xcb0>)
 801fb18:	f7fe fd58 	bl	801e5cc <lv_color_hex>
 801fb1c:	4603      	mov	r3, r0
 801fb1e:	e004      	b.n	801fb2a <basic_init+0xa66>
 801fb20:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fb24:	f7fe fd52 	bl	801e5cc <lv_color_hex>
 801fb28:	4603      	mov	r3, r0
 801fb2a:	461a      	mov	r2, r3
 801fb2c:	2110      	movs	r1, #16
 801fb2e:	4620      	mov	r0, r4
 801fb30:	f7ff f8ba 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 801fb34:	4b8d      	ldr	r3, [pc, #564]	; (801fd6c <basic_init+0xca8>)
 801fb36:	681b      	ldr	r3, [r3, #0]
 801fb38:	f103 0408 	add.w	r4, r3, #8
 801fb3c:	4b8c      	ldr	r3, [pc, #560]	; (801fd70 <basic_init+0xcac>)
 801fb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb40:	f003 0302 	and.w	r3, r3, #2
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d005      	beq.n	801fb54 <basic_init+0xa90>
 801fb48:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fb4c:	f7fe fd3e 	bl	801e5cc <lv_color_hex>
 801fb50:	4603      	mov	r3, r0
 801fb52:	e004      	b.n	801fb5e <basic_init+0xa9a>
 801fb54:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fb58:	f7fe fd38 	bl	801e5cc <lv_color_hex>
 801fb5c:	4603      	mov	r3, r0
 801fb5e:	461a      	mov	r2, r3
 801fb60:	2101      	movs	r1, #1
 801fb62:	4620      	mov	r0, r4
 801fb64:	f7ff f8a0 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 801fb68:	4b80      	ldr	r3, [pc, #512]	; (801fd6c <basic_init+0xca8>)
 801fb6a:	681b      	ldr	r3, [r3, #0]
 801fb6c:	f103 0408 	add.w	r4, r3, #8
 801fb70:	4b7f      	ldr	r3, [pc, #508]	; (801fd70 <basic_init+0xcac>)
 801fb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb74:	f003 0302 	and.w	r3, r3, #2
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d005      	beq.n	801fb88 <basic_init+0xac4>
 801fb7c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fb80:	f7fe fd24 	bl	801e5cc <lv_color_hex>
 801fb84:	4603      	mov	r3, r0
 801fb86:	e004      	b.n	801fb92 <basic_init+0xace>
 801fb88:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fb8c:	f7fe fd1e 	bl	801e5cc <lv_color_hex>
 801fb90:	4603      	mov	r3, r0
 801fb92:	461a      	mov	r2, r3
 801fb94:	2111      	movs	r1, #17
 801fb96:	4620      	mov	r0, r4
 801fb98:	f7ff f886 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 801fb9c:	4b73      	ldr	r3, [pc, #460]	; (801fd6c <basic_init+0xca8>)
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	f103 0408 	add.w	r4, r3, #8
 801fba4:	4b72      	ldr	r3, [pc, #456]	; (801fd70 <basic_init+0xcac>)
 801fba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fba8:	f003 0302 	and.w	r3, r3, #2
 801fbac:	2b00      	cmp	r3, #0
 801fbae:	d005      	beq.n	801fbbc <basic_init+0xaf8>
 801fbb0:	f640 20aa 	movw	r0, #2730	; 0xaaa
 801fbb4:	f7fe fd1e 	bl	801e5f4 <lv_color_hex3>
 801fbb8:	4603      	mov	r3, r0
 801fbba:	e004      	b.n	801fbc6 <basic_init+0xb02>
 801fbbc:	f640 1099 	movw	r0, #2457	; 0x999
 801fbc0:	f7fe fd18 	bl	801e5f4 <lv_color_hex3>
 801fbc4:	4603      	mov	r3, r0
 801fbc6:	461a      	mov	r2, r3
 801fbc8:	2120      	movs	r1, #32
 801fbca:	4620      	mov	r0, r4
 801fbcc:	f7ff f86c 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 801fbd0:	4b66      	ldr	r3, [pc, #408]	; (801fd6c <basic_init+0xca8>)
 801fbd2:	681b      	ldr	r3, [r3, #0]
 801fbd4:	f103 0408 	add.w	r4, r3, #8
 801fbd8:	4b65      	ldr	r3, [pc, #404]	; (801fd70 <basic_init+0xcac>)
 801fbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbdc:	f003 0302 	and.w	r3, r3, #2
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d004      	beq.n	801fbee <basic_init+0xb2a>
 801fbe4:	4863      	ldr	r0, [pc, #396]	; (801fd74 <basic_init+0xcb0>)
 801fbe6:	f7fe fcf1 	bl	801e5cc <lv_color_hex>
 801fbea:	4603      	mov	r3, r0
 801fbec:	e004      	b.n	801fbf8 <basic_init+0xb34>
 801fbee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fbf2:	f7fe fceb 	bl	801e5cc <lv_color_hex>
 801fbf6:	4603      	mov	r3, r0
 801fbf8:	461a      	mov	r2, r3
 801fbfa:	2110      	movs	r1, #16
 801fbfc:	4620      	mov	r0, r4
 801fbfe:	f7ff f937 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 801fc02:	4b5a      	ldr	r3, [pc, #360]	; (801fd6c <basic_init+0xca8>)
 801fc04:	681b      	ldr	r3, [r3, #0]
 801fc06:	f103 0408 	add.w	r4, r3, #8
 801fc0a:	4b59      	ldr	r3, [pc, #356]	; (801fd70 <basic_init+0xcac>)
 801fc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc0e:	f003 0302 	and.w	r3, r3, #2
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	d005      	beq.n	801fc22 <basic_init+0xb5e>
 801fc16:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fc1a:	f7fe fcd7 	bl	801e5cc <lv_color_hex>
 801fc1e:	4603      	mov	r3, r0
 801fc20:	e004      	b.n	801fc2c <basic_init+0xb68>
 801fc22:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fc26:	f7fe fcd1 	bl	801e5cc <lv_color_hex>
 801fc2a:	4603      	mov	r3, r0
 801fc2c:	461a      	mov	r2, r3
 801fc2e:	2101      	movs	r1, #1
 801fc30:	4620      	mov	r0, r4
 801fc32:	f7ff f91d 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 801fc36:	4b4d      	ldr	r3, [pc, #308]	; (801fd6c <basic_init+0xca8>)
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	f103 0408 	add.w	r4, r3, #8
 801fc3e:	4b4c      	ldr	r3, [pc, #304]	; (801fd70 <basic_init+0xcac>)
 801fc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc42:	f003 0302 	and.w	r3, r3, #2
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d005      	beq.n	801fc56 <basic_init+0xb92>
 801fc4a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fc4e:	f7fe fcbd 	bl	801e5cc <lv_color_hex>
 801fc52:	4603      	mov	r3, r0
 801fc54:	e004      	b.n	801fc60 <basic_init+0xb9c>
 801fc56:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fc5a:	f7fe fcb7 	bl	801e5cc <lv_color_hex>
 801fc5e:	4603      	mov	r3, r0
 801fc60:	461a      	mov	r2, r3
 801fc62:	2111      	movs	r1, #17
 801fc64:	4620      	mov	r0, r4
 801fc66:	f7ff f903 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 801fc6a:	4b40      	ldr	r3, [pc, #256]	; (801fd6c <basic_init+0xca8>)
 801fc6c:	681b      	ldr	r3, [r3, #0]
 801fc6e:	f103 0408 	add.w	r4, r3, #8
 801fc72:	4b3f      	ldr	r3, [pc, #252]	; (801fd70 <basic_init+0xcac>)
 801fc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc76:	f003 0302 	and.w	r3, r3, #2
 801fc7a:	2b00      	cmp	r3, #0
 801fc7c:	d005      	beq.n	801fc8a <basic_init+0xbc6>
 801fc7e:	f640 20aa 	movw	r0, #2730	; 0xaaa
 801fc82:	f7fe fcb7 	bl	801e5f4 <lv_color_hex3>
 801fc86:	4603      	mov	r3, r0
 801fc88:	e004      	b.n	801fc94 <basic_init+0xbd0>
 801fc8a:	f640 1099 	movw	r0, #2457	; 0x999
 801fc8e:	f7fe fcb1 	bl	801e5f4 <lv_color_hex3>
 801fc92:	4603      	mov	r3, r0
 801fc94:	461a      	mov	r2, r3
 801fc96:	2120      	movs	r1, #32
 801fc98:	4620      	mov	r0, r4
 801fc9a:	f7ff f8e9 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 801fc9e:	4b33      	ldr	r3, [pc, #204]	; (801fd6c <basic_init+0xca8>)
 801fca0:	681b      	ldr	r3, [r3, #0]
 801fca2:	3308      	adds	r3, #8
 801fca4:	2229      	movs	r2, #41	; 0x29
 801fca6:	2100      	movs	r1, #0
 801fca8:	4618      	mov	r0, r3
 801fcaa:	f7ff f95f 	bl	801ef6c <lv_style_set_transition_prop_5>

    style_init_reset(&styles->btn);
 801fcae:	4b2f      	ldr	r3, [pc, #188]	; (801fd6c <basic_init+0xca8>)
 801fcb0:	681b      	ldr	r3, [r3, #0]
 801fcb2:	3310      	adds	r3, #16
 801fcb4:	4618      	mov	r0, r3
 801fcb6:	f005 fa47 	bl	8025148 <style_init_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 801fcba:	4b2c      	ldr	r3, [pc, #176]	; (801fd6c <basic_init+0xca8>)
 801fcbc:	681b      	ldr	r3, [r3, #0]
 801fcbe:	3310      	adds	r3, #16
 801fcc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801fcc4:	2100      	movs	r1, #0
 801fcc6:	4618      	mov	r0, r3
 801fcc8:	f7fe fcc6 	bl	801e658 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 801fccc:	4b27      	ldr	r3, [pc, #156]	; (801fd6c <basic_init+0xca8>)
 801fcce:	681b      	ldr	r3, [r3, #0]
 801fcd0:	3310      	adds	r3, #16
 801fcd2:	22ff      	movs	r2, #255	; 0xff
 801fcd4:	2100      	movs	r1, #0
 801fcd6:	4618      	mov	r0, r3
 801fcd8:	f7fe fe1a 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
 801fcdc:	4b23      	ldr	r3, [pc, #140]	; (801fd6c <basic_init+0xca8>)
 801fcde:	681b      	ldr	r3, [r3, #0]
 801fce0:	f103 0410 	add.w	r4, r3, #16
 801fce4:	4b22      	ldr	r3, [pc, #136]	; (801fd70 <basic_init+0xcac>)
 801fce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fce8:	f003 0302 	and.w	r3, r3, #2
 801fcec:	2b00      	cmp	r3, #0
 801fcee:	d005      	beq.n	801fcfc <basic_init+0xc38>
 801fcf0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fcf4:	f7fe fc6a 	bl	801e5cc <lv_color_hex>
 801fcf8:	4603      	mov	r3, r0
 801fcfa:	e003      	b.n	801fd04 <basic_init+0xc40>
 801fcfc:	481f      	ldr	r0, [pc, #124]	; (801fd7c <basic_init+0xcb8>)
 801fcfe:	f7fe fc65 	bl	801e5cc <lv_color_hex>
 801fd02:	4603      	mov	r3, r0
 801fd04:	461a      	mov	r2, r3
 801fd06:	2100      	movs	r1, #0
 801fd08:	4620      	mov	r0, r4
 801fd0a:	f7fe fdea 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
 801fd0e:	4b17      	ldr	r3, [pc, #92]	; (801fd6c <basic_init+0xca8>)
 801fd10:	681b      	ldr	r3, [r3, #0]
 801fd12:	f103 0410 	add.w	r4, r3, #16
 801fd16:	4b16      	ldr	r3, [pc, #88]	; (801fd70 <basic_init+0xcac>)
 801fd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd1a:	f003 0302 	and.w	r3, r3, #2
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	d016      	beq.n	801fd50 <basic_init+0xc8c>
 801fd22:	4b13      	ldr	r3, [pc, #76]	; (801fd70 <basic_init+0xcac>)
 801fd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd26:	f003 0302 	and.w	r3, r3, #2
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d005      	beq.n	801fd3a <basic_init+0xc76>
 801fd2e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fd32:	f7fe fc4b 	bl	801e5cc <lv_color_hex>
 801fd36:	4601      	mov	r1, r0
 801fd38:	e003      	b.n	801fd42 <basic_init+0xc7e>
 801fd3a:	4810      	ldr	r0, [pc, #64]	; (801fd7c <basic_init+0xcb8>)
 801fd3c:	f7fe fc46 	bl	801e5cc <lv_color_hex>
 801fd40:	4601      	mov	r1, r0
 801fd42:	4b0b      	ldr	r3, [pc, #44]	; (801fd70 <basic_init+0xcac>)
 801fd44:	2233      	movs	r2, #51	; 0x33
 801fd46:	68d8      	ldr	r0, [r3, #12]
 801fd48:	f7fe fbd2 	bl	801e4f0 <lv_color_mix>
 801fd4c:	4603      	mov	r3, r0
 801fd4e:	e021      	b.n	801fd94 <basic_init+0xcd0>
 801fd50:	4b07      	ldr	r3, [pc, #28]	; (801fd70 <basic_init+0xcac>)
 801fd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd54:	f003 0302 	and.w	r3, r3, #2
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d011      	beq.n	801fd80 <basic_init+0xcbc>
 801fd5c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fd60:	f7fe fc34 	bl	801e5cc <lv_color_hex>
 801fd64:	4601      	mov	r1, r0
 801fd66:	e00f      	b.n	801fd88 <basic_init+0xcc4>
 801fd68:	005f656e 	.word	0x005f656e
 801fd6c:	200200d0 	.word	0x200200d0
 801fd70:	200200a4 	.word	0x200200a4
 801fd74:	003b3e42 	.word	0x003b3e42
 801fd78:	00d6dde3 	.word	0x00d6dde3
 801fd7c:	00586273 	.word	0x00586273
 801fd80:	48c4      	ldr	r0, [pc, #784]	; (8020094 <basic_init+0xfd0>)
 801fd82:	f7fe fc23 	bl	801e5cc <lv_color_hex>
 801fd86:	4601      	mov	r1, r0
 801fd88:	4bc3      	ldr	r3, [pc, #780]	; (8020098 <basic_init+0xfd4>)
 801fd8a:	224c      	movs	r2, #76	; 0x4c
 801fd8c:	68d8      	ldr	r0, [r3, #12]
 801fd8e:	f7fe fbaf 	bl	801e4f0 <lv_color_mix>
 801fd92:	4603      	mov	r3, r0
 801fd94:	461a      	mov	r2, r3
 801fd96:	2110      	movs	r1, #16
 801fd98:	4620      	mov	r0, r4
 801fd9a:	f7fe fda2 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
 801fd9e:	4bbf      	ldr	r3, [pc, #764]	; (802009c <basic_init+0xfd8>)
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	f103 0010 	add.w	r0, r3, #16
 801fda6:	4bbc      	ldr	r3, [pc, #752]	; (8020098 <basic_init+0xfd4>)
 801fda8:	68da      	ldr	r2, [r3, #12]
 801fdaa:	2101      	movs	r1, #1
 801fdac:	f7fe fd99 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
 801fdb0:	4bba      	ldr	r3, [pc, #744]	; (802009c <basic_init+0xfd8>)
 801fdb2:	681b      	ldr	r3, [r3, #0]
 801fdb4:	f103 0410 	add.w	r4, r3, #16
 801fdb8:	4bb7      	ldr	r3, [pc, #732]	; (8020098 <basic_init+0xfd4>)
 801fdba:	214c      	movs	r1, #76	; 0x4c
 801fdbc:	68d8      	ldr	r0, [r3, #12]
 801fdbe:	f7fb fd31 	bl	801b824 <lv_color_darken>
 801fdc2:	4603      	mov	r3, r0
 801fdc4:	461a      	mov	r2, r3
 801fdc6:	2111      	movs	r1, #17
 801fdc8:	4620      	mov	r0, r4
 801fdca:	f7fe fd8a 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
 801fdce:	4bb3      	ldr	r3, [pc, #716]	; (802009c <basic_init+0xfd8>)
 801fdd0:	681b      	ldr	r3, [r3, #0]
 801fdd2:	f103 0410 	add.w	r4, r3, #16
 801fdd6:	4bb0      	ldr	r3, [pc, #704]	; (8020098 <basic_init+0xfd4>)
 801fdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdda:	f003 0302 	and.w	r3, r3, #2
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	d005      	beq.n	801fdee <basic_init+0xd2a>
 801fde2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fde6:	f7fe fbf1 	bl	801e5cc <lv_color_hex>
 801fdea:	4603      	mov	r3, r0
 801fdec:	e003      	b.n	801fdf6 <basic_init+0xd32>
 801fdee:	48a9      	ldr	r0, [pc, #676]	; (8020094 <basic_init+0xfd0>)
 801fdf0:	f7fe fbec 	bl	801e5cc <lv_color_hex>
 801fdf4:	4603      	mov	r3, r0
 801fdf6:	461a      	mov	r2, r3
 801fdf8:	2120      	movs	r1, #32
 801fdfa:	4620      	mov	r0, r4
 801fdfc:	f7fe fd71 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
 801fe00:	4ba6      	ldr	r3, [pc, #664]	; (802009c <basic_init+0xfd8>)
 801fe02:	681b      	ldr	r3, [r3, #0]
 801fe04:	f103 0410 	add.w	r4, r3, #16
 801fe08:	4ba3      	ldr	r3, [pc, #652]	; (8020098 <basic_init+0xfd4>)
 801fe0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe0c:	f003 0302 	and.w	r3, r3, #2
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d005      	beq.n	801fe20 <basic_init+0xd5c>
 801fe14:	f640 40cc 	movw	r0, #3276	; 0xccc
 801fe18:	f7fe fbec 	bl	801e5f4 <lv_color_hex3>
 801fe1c:	4603      	mov	r3, r0
 801fe1e:	e004      	b.n	801fe2a <basic_init+0xd66>
 801fe20:	f640 0088 	movw	r0, #2184	; 0x888
 801fe24:	f7fe fbe6 	bl	801e5f4 <lv_color_hex3>
 801fe28:	4603      	mov	r3, r0
 801fe2a:	461a      	mov	r2, r3
 801fe2c:	2121      	movs	r1, #33	; 0x21
 801fe2e:	4620      	mov	r0, r4
 801fe30:	f7fe fd57 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
 801fe34:	4b99      	ldr	r3, [pc, #612]	; (802009c <basic_init+0xfd8>)
 801fe36:	681b      	ldr	r3, [r3, #0]
 801fe38:	f103 0010 	add.w	r0, r3, #16
 801fe3c:	4b96      	ldr	r3, [pc, #600]	; (8020098 <basic_init+0xfd4>)
 801fe3e:	68da      	ldr	r2, [r3, #12]
 801fe40:	2100      	movs	r1, #0
 801fe42:	f7fe fdc8 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
 801fe46:	4b95      	ldr	r3, [pc, #596]	; (802009c <basic_init+0xfd8>)
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	f103 0010 	add.w	r0, r3, #16
 801fe4e:	4b92      	ldr	r3, [pc, #584]	; (8020098 <basic_init+0xfd4>)
 801fe50:	68da      	ldr	r2, [r3, #12]
 801fe52:	2110      	movs	r1, #16
 801fe54:	f7fe fdbf 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
 801fe58:	4b90      	ldr	r3, [pc, #576]	; (802009c <basic_init+0xfd8>)
 801fe5a:	681b      	ldr	r3, [r3, #0]
 801fe5c:	f103 0410 	add.w	r4, r3, #16
 801fe60:	4b8d      	ldr	r3, [pc, #564]	; (8020098 <basic_init+0xfd4>)
 801fe62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe64:	f003 0302 	and.w	r3, r3, #2
 801fe68:	2b00      	cmp	r3, #0
 801fe6a:	d005      	beq.n	801fe78 <basic_init+0xdb4>
 801fe6c:	f640 0088 	movw	r0, #2184	; 0x888
 801fe70:	f7fe fbc0 	bl	801e5f4 <lv_color_hex3>
 801fe74:	4603      	mov	r3, r0
 801fe76:	e003      	b.n	801fe80 <basic_init+0xdbc>
 801fe78:	4889      	ldr	r0, [pc, #548]	; (80200a0 <basic_init+0xfdc>)
 801fe7a:	f7fe fba7 	bl	801e5cc <lv_color_hex>
 801fe7e:	4603      	mov	r3, r0
 801fe80:	461a      	mov	r2, r3
 801fe82:	2120      	movs	r1, #32
 801fe84:	4620      	mov	r0, r4
 801fe86:	f7fe fda6 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
 801fe8a:	4b84      	ldr	r3, [pc, #528]	; (802009c <basic_init+0xfd8>)
 801fe8c:	681b      	ldr	r3, [r3, #0]
 801fe8e:	f103 0410 	add.w	r4, r3, #16
 801fe92:	2000      	movs	r0, #0
 801fe94:	f7fa f930 	bl	801a0f8 <lv_disp_get_dpi>
 801fe98:	4603      	mov	r3, r0
 801fe9a:	3328      	adds	r3, #40	; 0x28
 801fe9c:	005b      	lsls	r3, r3, #1
 801fe9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801fea2:	db0d      	blt.n	801fec0 <basic_init+0xdfc>
 801fea4:	2000      	movs	r0, #0
 801fea6:	f7fa f927 	bl	801a0f8 <lv_disp_get_dpi>
 801feaa:	4603      	mov	r3, r0
 801feac:	3328      	adds	r3, #40	; 0x28
 801feae:	005b      	lsls	r3, r3, #1
 801feb0:	4a7c      	ldr	r2, [pc, #496]	; (80200a4 <basic_init+0xfe0>)
 801feb2:	fb82 1203 	smull	r1, r2, r2, r3
 801feb6:	1192      	asrs	r2, r2, #6
 801feb8:	17db      	asrs	r3, r3, #31
 801feba:	1ad3      	subs	r3, r2, r3
 801febc:	b21b      	sxth	r3, r3
 801febe:	e000      	b.n	801fec2 <basic_init+0xdfe>
 801fec0:	2301      	movs	r3, #1
 801fec2:	461a      	mov	r2, r3
 801fec4:	2100      	movs	r1, #0
 801fec6:	4620      	mov	r0, r4
 801fec8:	f7fe fd3a 	bl	801e940 <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
 801fecc:	4b73      	ldr	r3, [pc, #460]	; (802009c <basic_init+0xfd8>)
 801fece:	681b      	ldr	r3, [r3, #0]
 801fed0:	3310      	adds	r3, #16
 801fed2:	2200      	movs	r2, #0
 801fed4:	2101      	movs	r1, #1
 801fed6:	4618      	mov	r0, r3
 801fed8:	f7fe fd94 	bl	801ea04 <lv_style_set_border_opa>

    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 801fedc:	4b6f      	ldr	r3, [pc, #444]	; (802009c <basic_init+0xfd8>)
 801fede:	681b      	ldr	r3, [r3, #0]
 801fee0:	f103 0410 	add.w	r4, r3, #16
 801fee4:	4b6c      	ldr	r3, [pc, #432]	; (8020098 <basic_init+0xfd4>)
 801fee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fee8:	f003 0302 	and.w	r3, r3, #2
 801feec:	2b00      	cmp	r3, #0
 801feee:	d004      	beq.n	801fefa <basic_init+0xe36>
 801fef0:	486d      	ldr	r0, [pc, #436]	; (80200a8 <basic_init+0xfe4>)
 801fef2:	f7fe fb6b 	bl	801e5cc <lv_color_hex>
 801fef6:	4603      	mov	r3, r0
 801fef8:	e004      	b.n	801ff04 <basic_init+0xe40>
 801fefa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fefe:	f7fe fb65 	bl	801e5cc <lv_color_hex>
 801ff02:	4603      	mov	r3, r0
 801ff04:	461a      	mov	r2, r3
 801ff06:	2100      	movs	r1, #0
 801ff08:	4620      	mov	r0, r4
 801ff0a:	f7fe fecd 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 801ff0e:	4b63      	ldr	r3, [pc, #396]	; (802009c <basic_init+0xfd8>)
 801ff10:	681b      	ldr	r3, [r3, #0]
 801ff12:	f103 0410 	add.w	r4, r3, #16
 801ff16:	4b60      	ldr	r3, [pc, #384]	; (8020098 <basic_init+0xfd4>)
 801ff18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff1a:	f003 0302 	and.w	r3, r3, #2
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d004      	beq.n	801ff2c <basic_init+0xe68>
 801ff22:	4861      	ldr	r0, [pc, #388]	; (80200a8 <basic_init+0xfe4>)
 801ff24:	f7fe fb52 	bl	801e5cc <lv_color_hex>
 801ff28:	4603      	mov	r3, r0
 801ff2a:	e004      	b.n	801ff36 <basic_init+0xe72>
 801ff2c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff30:	f7fe fb4c 	bl	801e5cc <lv_color_hex>
 801ff34:	4603      	mov	r3, r0
 801ff36:	461a      	mov	r2, r3
 801ff38:	2110      	movs	r1, #16
 801ff3a:	4620      	mov	r0, r4
 801ff3c:	f7fe feb4 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 801ff40:	4b56      	ldr	r3, [pc, #344]	; (802009c <basic_init+0xfd8>)
 801ff42:	681b      	ldr	r3, [r3, #0]
 801ff44:	f103 0410 	add.w	r4, r3, #16
 801ff48:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff4c:	f7fe fb3e 	bl	801e5cc <lv_color_hex>
 801ff50:	4603      	mov	r3, r0
 801ff52:	461a      	mov	r2, r3
 801ff54:	2101      	movs	r1, #1
 801ff56:	4620      	mov	r0, r4
 801ff58:	f7fe fea6 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 801ff5c:	4b4f      	ldr	r3, [pc, #316]	; (802009c <basic_init+0xfd8>)
 801ff5e:	681b      	ldr	r3, [r3, #0]
 801ff60:	f103 0410 	add.w	r4, r3, #16
 801ff64:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff68:	f7fe fb30 	bl	801e5cc <lv_color_hex>
 801ff6c:	4603      	mov	r3, r0
 801ff6e:	461a      	mov	r2, r3
 801ff70:	2111      	movs	r1, #17
 801ff72:	4620      	mov	r0, r4
 801ff74:	f7fe fe98 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 801ff78:	4b48      	ldr	r3, [pc, #288]	; (802009c <basic_init+0xfd8>)
 801ff7a:	681b      	ldr	r3, [r3, #0]
 801ff7c:	f103 0410 	add.w	r4, r3, #16
 801ff80:	4b45      	ldr	r3, [pc, #276]	; (8020098 <basic_init+0xfd4>)
 801ff82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff84:	f003 0302 	and.w	r3, r3, #2
 801ff88:	2b00      	cmp	r3, #0
 801ff8a:	d004      	beq.n	801ff96 <basic_init+0xed2>
 801ff8c:	4847      	ldr	r0, [pc, #284]	; (80200ac <basic_init+0xfe8>)
 801ff8e:	f7fe fb1d 	bl	801e5cc <lv_color_hex>
 801ff92:	4603      	mov	r3, r0
 801ff94:	e003      	b.n	801ff9e <basic_init+0xeda>
 801ff96:	4845      	ldr	r0, [pc, #276]	; (80200ac <basic_init+0xfe8>)
 801ff98:	f7fe fb18 	bl	801e5cc <lv_color_hex>
 801ff9c:	4603      	mov	r3, r0
 801ff9e:	461a      	mov	r2, r3
 801ffa0:	2120      	movs	r1, #32
 801ffa2:	4620      	mov	r0, r4
 801ffa4:	f7fe fe80 	bl	801eca8 <lv_style_set_text_color>

    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 801ffa8:	4b3c      	ldr	r3, [pc, #240]	; (802009c <basic_init+0xfd8>)
 801ffaa:	681b      	ldr	r3, [r3, #0]
 801ffac:	f103 0410 	add.w	r4, r3, #16
 801ffb0:	4b39      	ldr	r3, [pc, #228]	; (8020098 <basic_init+0xfd4>)
 801ffb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ffb4:	f003 0302 	and.w	r3, r3, #2
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	d004      	beq.n	801ffc6 <basic_init+0xf02>
 801ffbc:	483a      	ldr	r0, [pc, #232]	; (80200a8 <basic_init+0xfe4>)
 801ffbe:	f7fe fb05 	bl	801e5cc <lv_color_hex>
 801ffc2:	4603      	mov	r3, r0
 801ffc4:	e004      	b.n	801ffd0 <basic_init+0xf0c>
 801ffc6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ffca:	f7fe faff 	bl	801e5cc <lv_color_hex>
 801ffce:	4603      	mov	r3, r0
 801ffd0:	461a      	mov	r2, r3
 801ffd2:	2100      	movs	r1, #0
 801ffd4:	4620      	mov	r0, r4
 801ffd6:	f7fe ff4b 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 801ffda:	4b30      	ldr	r3, [pc, #192]	; (802009c <basic_init+0xfd8>)
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	f103 0410 	add.w	r4, r3, #16
 801ffe2:	4b2d      	ldr	r3, [pc, #180]	; (8020098 <basic_init+0xfd4>)
 801ffe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ffe6:	f003 0302 	and.w	r3, r3, #2
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	d004      	beq.n	801fff8 <basic_init+0xf34>
 801ffee:	482e      	ldr	r0, [pc, #184]	; (80200a8 <basic_init+0xfe4>)
 801fff0:	f7fe faec 	bl	801e5cc <lv_color_hex>
 801fff4:	4603      	mov	r3, r0
 801fff6:	e004      	b.n	8020002 <basic_init+0xf3e>
 801fff8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fffc:	f7fe fae6 	bl	801e5cc <lv_color_hex>
 8020000:	4603      	mov	r3, r0
 8020002:	461a      	mov	r2, r3
 8020004:	2110      	movs	r1, #16
 8020006:	4620      	mov	r0, r4
 8020008:	f7fe ff32 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
 802000c:	4b23      	ldr	r3, [pc, #140]	; (802009c <basic_init+0xfd8>)
 802000e:	681b      	ldr	r3, [r3, #0]
 8020010:	f103 0410 	add.w	r4, r3, #16
 8020014:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020018:	f7fe fad8 	bl	801e5cc <lv_color_hex>
 802001c:	4603      	mov	r3, r0
 802001e:	461a      	mov	r2, r3
 8020020:	2110      	movs	r1, #16
 8020022:	4620      	mov	r0, r4
 8020024:	f7fe ff24 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 8020028:	4b1c      	ldr	r3, [pc, #112]	; (802009c <basic_init+0xfd8>)
 802002a:	681b      	ldr	r3, [r3, #0]
 802002c:	f103 0410 	add.w	r4, r3, #16
 8020030:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020034:	f7fe faca 	bl	801e5cc <lv_color_hex>
 8020038:	4603      	mov	r3, r0
 802003a:	461a      	mov	r2, r3
 802003c:	2111      	movs	r1, #17
 802003e:	4620      	mov	r0, r4
 8020040:	f7fe ff16 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 8020044:	4b15      	ldr	r3, [pc, #84]	; (802009c <basic_init+0xfd8>)
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	f103 0410 	add.w	r4, r3, #16
 802004c:	4b12      	ldr	r3, [pc, #72]	; (8020098 <basic_init+0xfd4>)
 802004e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020050:	f003 0302 	and.w	r3, r3, #2
 8020054:	2b00      	cmp	r3, #0
 8020056:	d004      	beq.n	8020062 <basic_init+0xf9e>
 8020058:	4814      	ldr	r0, [pc, #80]	; (80200ac <basic_init+0xfe8>)
 802005a:	f7fe fab7 	bl	801e5cc <lv_color_hex>
 802005e:	4603      	mov	r3, r0
 8020060:	e003      	b.n	802006a <basic_init+0xfa6>
 8020062:	4812      	ldr	r0, [pc, #72]	; (80200ac <basic_init+0xfe8>)
 8020064:	f7fe fab2 	bl	801e5cc <lv_color_hex>
 8020068:	4603      	mov	r3, r0
 802006a:	461a      	mov	r2, r3
 802006c:	2120      	movs	r1, #32
 802006e:	4620      	mov	r0, r4
 8020070:	f7fe fefe 	bl	801ee70 <lv_style_set_image_recolor>

    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 8020074:	4b09      	ldr	r3, [pc, #36]	; (802009c <basic_init+0xfd8>)
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	f103 0410 	add.w	r4, r3, #16
 802007c:	4b06      	ldr	r3, [pc, #24]	; (8020098 <basic_init+0xfd4>)
 802007e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020080:	f003 0302 	and.w	r3, r3, #2
 8020084:	2b00      	cmp	r3, #0
 8020086:	d013      	beq.n	80200b0 <basic_init+0xfec>
 8020088:	4807      	ldr	r0, [pc, #28]	; (80200a8 <basic_init+0xfe4>)
 802008a:	f7fe fa9f 	bl	801e5cc <lv_color_hex>
 802008e:	4603      	mov	r3, r0
 8020090:	e013      	b.n	80200ba <basic_init+0xff6>
 8020092:	bf00      	nop
 8020094:	00586273 	.word	0x00586273
 8020098:	200200a4 	.word	0x200200a4
 802009c:	200200d0 	.word	0x200200d0
 80200a0:	00404040 	.word	0x00404040
 80200a4:	66666667 	.word	0x66666667
 80200a8:	0031404f 	.word	0x0031404f
 80200ac:	00888888 	.word	0x00888888
 80200b0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80200b4:	f7fe fa8a 	bl	801e5cc <lv_color_hex>
 80200b8:	4603      	mov	r3, r0
 80200ba:	461a      	mov	r2, r3
 80200bc:	2100      	movs	r1, #0
 80200be:	4620      	mov	r0, r4
 80200c0:	f7fe fda8 	bl	801ec14 <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80200c4:	4b9c      	ldr	r3, [pc, #624]	; (8020338 <basic_init+0x1274>)
 80200c6:	681b      	ldr	r3, [r3, #0]
 80200c8:	f103 0410 	add.w	r4, r3, #16
 80200cc:	4b9b      	ldr	r3, [pc, #620]	; (802033c <basic_init+0x1278>)
 80200ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200d0:	f003 0302 	and.w	r3, r3, #2
 80200d4:	2b00      	cmp	r3, #0
 80200d6:	d004      	beq.n	80200e2 <basic_init+0x101e>
 80200d8:	4899      	ldr	r0, [pc, #612]	; (8020340 <basic_init+0x127c>)
 80200da:	f7fe fa77 	bl	801e5cc <lv_color_hex>
 80200de:	4603      	mov	r3, r0
 80200e0:	e004      	b.n	80200ec <basic_init+0x1028>
 80200e2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80200e6:	f7fe fa71 	bl	801e5cc <lv_color_hex>
 80200ea:	4603      	mov	r3, r0
 80200ec:	461a      	mov	r2, r3
 80200ee:	2110      	movs	r1, #16
 80200f0:	4620      	mov	r0, r4
 80200f2:	f7fe fd8f 	bl	801ec14 <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 80200f6:	4b90      	ldr	r3, [pc, #576]	; (8020338 <basic_init+0x1274>)
 80200f8:	681b      	ldr	r3, [r3, #0]
 80200fa:	f103 0410 	add.w	r4, r3, #16
 80200fe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020102:	f7fe fa63 	bl	801e5cc <lv_color_hex>
 8020106:	4603      	mov	r3, r0
 8020108:	461a      	mov	r2, r3
 802010a:	2101      	movs	r1, #1
 802010c:	4620      	mov	r0, r4
 802010e:	f7fe fd81 	bl	801ec14 <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 8020112:	4b89      	ldr	r3, [pc, #548]	; (8020338 <basic_init+0x1274>)
 8020114:	681b      	ldr	r3, [r3, #0]
 8020116:	f103 0410 	add.w	r4, r3, #16
 802011a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802011e:	f7fe fa55 	bl	801e5cc <lv_color_hex>
 8020122:	4603      	mov	r3, r0
 8020124:	461a      	mov	r2, r3
 8020126:	2111      	movs	r1, #17
 8020128:	4620      	mov	r0, r4
 802012a:	f7fe fd73 	bl	801ec14 <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 802012e:	4b82      	ldr	r3, [pc, #520]	; (8020338 <basic_init+0x1274>)
 8020130:	681b      	ldr	r3, [r3, #0]
 8020132:	f103 0410 	add.w	r4, r3, #16
 8020136:	4b81      	ldr	r3, [pc, #516]	; (802033c <basic_init+0x1278>)
 8020138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802013a:	f003 0302 	and.w	r3, r3, #2
 802013e:	2b00      	cmp	r3, #0
 8020140:	d004      	beq.n	802014c <basic_init+0x1088>
 8020142:	4880      	ldr	r0, [pc, #512]	; (8020344 <basic_init+0x1280>)
 8020144:	f7fe fa42 	bl	801e5cc <lv_color_hex>
 8020148:	4603      	mov	r3, r0
 802014a:	e003      	b.n	8020154 <basic_init+0x1090>
 802014c:	487d      	ldr	r0, [pc, #500]	; (8020344 <basic_init+0x1280>)
 802014e:	f7fe fa3d 	bl	801e5cc <lv_color_hex>
 8020152:	4603      	mov	r3, r0
 8020154:	461a      	mov	r2, r3
 8020156:	2120      	movs	r1, #32
 8020158:	4620      	mov	r0, r4
 802015a:	f7fe fd5b 	bl	801ec14 <lv_style_set_value_color>

    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 802015e:	4b76      	ldr	r3, [pc, #472]	; (8020338 <basic_init+0x1274>)
 8020160:	681b      	ldr	r3, [r3, #0]
 8020162:	f103 0410 	add.w	r4, r3, #16
 8020166:	2000      	movs	r0, #0
 8020168:	f7f9 ffc6 	bl	801a0f8 <lv_disp_get_dpi>
 802016c:	4603      	mov	r3, r0
 802016e:	461a      	mov	r2, r3
 8020170:	4613      	mov	r3, r2
 8020172:	009b      	lsls	r3, r3, #2
 8020174:	4413      	add	r3, r2
 8020176:	00db      	lsls	r3, r3, #3
 8020178:	3350      	adds	r3, #80	; 0x50
 802017a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802017e:	db11      	blt.n	80201a4 <basic_init+0x10e0>
 8020180:	2000      	movs	r0, #0
 8020182:	f7f9 ffb9 	bl	801a0f8 <lv_disp_get_dpi>
 8020186:	4603      	mov	r3, r0
 8020188:	461a      	mov	r2, r3
 802018a:	4613      	mov	r3, r2
 802018c:	009b      	lsls	r3, r3, #2
 802018e:	4413      	add	r3, r2
 8020190:	00db      	lsls	r3, r3, #3
 8020192:	3350      	adds	r3, #80	; 0x50
 8020194:	4a6c      	ldr	r2, [pc, #432]	; (8020348 <basic_init+0x1284>)
 8020196:	fb82 1203 	smull	r1, r2, r2, r3
 802019a:	1192      	asrs	r2, r2, #6
 802019c:	17db      	asrs	r3, r3, #31
 802019e:	1ad3      	subs	r3, r2, r3
 80201a0:	b21b      	sxth	r3, r3
 80201a2:	e000      	b.n	80201a6 <basic_init+0x10e2>
 80201a4:	2301      	movs	r3, #1
 80201a6:	461a      	mov	r2, r3
 80201a8:	2100      	movs	r1, #0
 80201aa:	4620      	mov	r0, r4
 80201ac:	f7fe faea 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 80201b0:	4b61      	ldr	r3, [pc, #388]	; (8020338 <basic_init+0x1274>)
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	f103 0410 	add.w	r4, r3, #16
 80201b8:	2000      	movs	r0, #0
 80201ba:	f7f9 ff9d 	bl	801a0f8 <lv_disp_get_dpi>
 80201be:	4603      	mov	r3, r0
 80201c0:	461a      	mov	r2, r3
 80201c2:	4613      	mov	r3, r2
 80201c4:	009b      	lsls	r3, r3, #2
 80201c6:	4413      	add	r3, r2
 80201c8:	00db      	lsls	r3, r3, #3
 80201ca:	3350      	adds	r3, #80	; 0x50
 80201cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80201d0:	db11      	blt.n	80201f6 <basic_init+0x1132>
 80201d2:	2000      	movs	r0, #0
 80201d4:	f7f9 ff90 	bl	801a0f8 <lv_disp_get_dpi>
 80201d8:	4603      	mov	r3, r0
 80201da:	461a      	mov	r2, r3
 80201dc:	4613      	mov	r3, r2
 80201de:	009b      	lsls	r3, r3, #2
 80201e0:	4413      	add	r3, r2
 80201e2:	00db      	lsls	r3, r3, #3
 80201e4:	3350      	adds	r3, #80	; 0x50
 80201e6:	4a58      	ldr	r2, [pc, #352]	; (8020348 <basic_init+0x1284>)
 80201e8:	fb82 1203 	smull	r1, r2, r2, r3
 80201ec:	1192      	asrs	r2, r2, #6
 80201ee:	17db      	asrs	r3, r3, #31
 80201f0:	1ad3      	subs	r3, r2, r3
 80201f2:	b21b      	sxth	r3, r3
 80201f4:	e000      	b.n	80201f8 <basic_init+0x1134>
 80201f6:	2301      	movs	r3, #1
 80201f8:	461a      	mov	r2, r3
 80201fa:	2100      	movs	r1, #0
 80201fc:	4620      	mov	r0, r4
 80201fe:	f7fe fada 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 8020202:	4b4d      	ldr	r3, [pc, #308]	; (8020338 <basic_init+0x1274>)
 8020204:	681b      	ldr	r3, [r3, #0]
 8020206:	f103 0410 	add.w	r4, r3, #16
 802020a:	2000      	movs	r0, #0
 802020c:	f7f9 ff74 	bl	801a0f8 <lv_disp_get_dpi>
 8020210:	4603      	mov	r3, r0
 8020212:	461a      	mov	r2, r3
 8020214:	4613      	mov	r3, r2
 8020216:	011b      	lsls	r3, r3, #4
 8020218:	1a9b      	subs	r3, r3, r2
 802021a:	3350      	adds	r3, #80	; 0x50
 802021c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020220:	db10      	blt.n	8020244 <basic_init+0x1180>
 8020222:	2000      	movs	r0, #0
 8020224:	f7f9 ff68 	bl	801a0f8 <lv_disp_get_dpi>
 8020228:	4603      	mov	r3, r0
 802022a:	461a      	mov	r2, r3
 802022c:	4613      	mov	r3, r2
 802022e:	011b      	lsls	r3, r3, #4
 8020230:	1a9b      	subs	r3, r3, r2
 8020232:	3350      	adds	r3, #80	; 0x50
 8020234:	4a44      	ldr	r2, [pc, #272]	; (8020348 <basic_init+0x1284>)
 8020236:	fb82 1203 	smull	r1, r2, r2, r3
 802023a:	1192      	asrs	r2, r2, #6
 802023c:	17db      	asrs	r3, r3, #31
 802023e:	1ad3      	subs	r3, r2, r3
 8020240:	b21b      	sxth	r3, r3
 8020242:	e000      	b.n	8020246 <basic_init+0x1182>
 8020244:	2301      	movs	r3, #1
 8020246:	461a      	mov	r2, r3
 8020248:	2100      	movs	r1, #0
 802024a:	4620      	mov	r0, r4
 802024c:	f7fe fa68 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 8020250:	4b39      	ldr	r3, [pc, #228]	; (8020338 <basic_init+0x1274>)
 8020252:	681b      	ldr	r3, [r3, #0]
 8020254:	f103 0410 	add.w	r4, r3, #16
 8020258:	2000      	movs	r0, #0
 802025a:	f7f9 ff4d 	bl	801a0f8 <lv_disp_get_dpi>
 802025e:	4603      	mov	r3, r0
 8020260:	461a      	mov	r2, r3
 8020262:	4613      	mov	r3, r2
 8020264:	011b      	lsls	r3, r3, #4
 8020266:	1a9b      	subs	r3, r3, r2
 8020268:	3350      	adds	r3, #80	; 0x50
 802026a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802026e:	db10      	blt.n	8020292 <basic_init+0x11ce>
 8020270:	2000      	movs	r0, #0
 8020272:	f7f9 ff41 	bl	801a0f8 <lv_disp_get_dpi>
 8020276:	4603      	mov	r3, r0
 8020278:	461a      	mov	r2, r3
 802027a:	4613      	mov	r3, r2
 802027c:	011b      	lsls	r3, r3, #4
 802027e:	1a9b      	subs	r3, r3, r2
 8020280:	3350      	adds	r3, #80	; 0x50
 8020282:	4a31      	ldr	r2, [pc, #196]	; (8020348 <basic_init+0x1284>)
 8020284:	fb82 1203 	smull	r1, r2, r2, r3
 8020288:	1192      	asrs	r2, r2, #6
 802028a:	17db      	asrs	r3, r3, #31
 802028c:	1ad3      	subs	r3, r2, r3
 802028e:	b21b      	sxth	r3, r3
 8020290:	e000      	b.n	8020294 <basic_init+0x11d0>
 8020292:	2301      	movs	r3, #1
 8020294:	461a      	mov	r2, r3
 8020296:	2100      	movs	r1, #0
 8020298:	4620      	mov	r0, r4
 802029a:	f7fe fa5a 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
 802029e:	4b26      	ldr	r3, [pc, #152]	; (8020338 <basic_init+0x1274>)
 80202a0:	681b      	ldr	r3, [r3, #0]
 80202a2:	f103 0410 	add.w	r4, r3, #16
 80202a6:	2000      	movs	r0, #0
 80202a8:	f7f9 ff26 	bl	801a0f8 <lv_disp_get_dpi>
 80202ac:	4603      	mov	r3, r0
 80202ae:	461a      	mov	r2, r3
 80202b0:	4613      	mov	r3, r2
 80202b2:	009b      	lsls	r3, r3, #2
 80202b4:	4413      	add	r3, r2
 80202b6:	009b      	lsls	r3, r3, #2
 80202b8:	3350      	adds	r3, #80	; 0x50
 80202ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80202be:	db11      	blt.n	80202e4 <basic_init+0x1220>
 80202c0:	2000      	movs	r0, #0
 80202c2:	f7f9 ff19 	bl	801a0f8 <lv_disp_get_dpi>
 80202c6:	4603      	mov	r3, r0
 80202c8:	461a      	mov	r2, r3
 80202ca:	4613      	mov	r3, r2
 80202cc:	009b      	lsls	r3, r3, #2
 80202ce:	4413      	add	r3, r2
 80202d0:	009b      	lsls	r3, r3, #2
 80202d2:	3350      	adds	r3, #80	; 0x50
 80202d4:	4a1c      	ldr	r2, [pc, #112]	; (8020348 <basic_init+0x1284>)
 80202d6:	fb82 1203 	smull	r1, r2, r2, r3
 80202da:	1192      	asrs	r2, r2, #6
 80202dc:	17db      	asrs	r3, r3, #31
 80202de:	1ad3      	subs	r3, r2, r3
 80202e0:	b21b      	sxth	r3, r3
 80202e2:	e000      	b.n	80202e6 <basic_init+0x1222>
 80202e4:	2301      	movs	r3, #1
 80202e6:	461a      	mov	r2, r3
 80202e8:	2100      	movs	r1, #0
 80202ea:	4620      	mov	r0, r4
 80202ec:	f7fe fa7c 	bl	801e7e8 <lv_style_set_pad_inner>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 80202f0:	4b11      	ldr	r3, [pc, #68]	; (8020338 <basic_init+0x1274>)
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	f103 0410 	add.w	r4, r3, #16
 80202f8:	4b10      	ldr	r3, [pc, #64]	; (802033c <basic_init+0x1278>)
 80202fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80202fc:	f003 0320 	and.w	r3, r3, #32
 8020300:	2b00      	cmp	r3, #0
 8020302:	d123      	bne.n	802034c <basic_init+0x1288>
 8020304:	2000      	movs	r0, #0
 8020306:	f7f9 fef7 	bl	801a0f8 <lv_disp_get_dpi>
 802030a:	4603      	mov	r3, r0
 802030c:	3328      	adds	r3, #40	; 0x28
 802030e:	005b      	lsls	r3, r3, #1
 8020310:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020314:	db0d      	blt.n	8020332 <basic_init+0x126e>
 8020316:	2000      	movs	r0, #0
 8020318:	f7f9 feee 	bl	801a0f8 <lv_disp_get_dpi>
 802031c:	4603      	mov	r3, r0
 802031e:	3328      	adds	r3, #40	; 0x28
 8020320:	005b      	lsls	r3, r3, #1
 8020322:	4a09      	ldr	r2, [pc, #36]	; (8020348 <basic_init+0x1284>)
 8020324:	fb82 1203 	smull	r1, r2, r2, r3
 8020328:	1192      	asrs	r2, r2, #6
 802032a:	17db      	asrs	r3, r3, #31
 802032c:	1ad3      	subs	r3, r2, r3
 802032e:	b21b      	sxth	r3, r3
 8020330:	e00d      	b.n	802034e <basic_init+0x128a>
 8020332:	2301      	movs	r3, #1
 8020334:	e00b      	b.n	802034e <basic_init+0x128a>
 8020336:	bf00      	nop
 8020338:	200200d0 	.word	0x200200d0
 802033c:	200200a4 	.word	0x200200a4
 8020340:	0031404f 	.word	0x0031404f
 8020344:	00888888 	.word	0x00888888
 8020348:	66666667 	.word	0x66666667
 802034c:	2300      	movs	r3, #0
 802034e:	461a      	mov	r2, r3
 8020350:	2100      	movs	r1, #0
 8020352:	4620      	mov	r0, r4
 8020354:	f7fe fb6e 	bl	801ea34 <lv_style_set_outline_width>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
 8020358:	4b93      	ldr	r3, [pc, #588]	; (80205a8 <basic_init+0x14e4>)
 802035a:	681b      	ldr	r3, [r3, #0]
 802035c:	3310      	adds	r3, #16
 802035e:	2200      	movs	r2, #0
 8020360:	2100      	movs	r1, #0
 8020362:	4618      	mov	r0, r3
 8020364:	f7fe fbaf 	bl	801eac6 <lv_style_set_outline_opa>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
 8020368:	4b8f      	ldr	r3, [pc, #572]	; (80205a8 <basic_init+0x14e4>)
 802036a:	681b      	ldr	r3, [r3, #0]
 802036c:	3310      	adds	r3, #16
 802036e:	227f      	movs	r2, #127	; 0x7f
 8020370:	2102      	movs	r1, #2
 8020372:	4618      	mov	r0, r3
 8020374:	f7fe fba7 	bl	801eac6 <lv_style_set_outline_opa>
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
 8020378:	4b8b      	ldr	r3, [pc, #556]	; (80205a8 <basic_init+0x14e4>)
 802037a:	681b      	ldr	r3, [r3, #0]
 802037c:	f103 0010 	add.w	r0, r3, #16
 8020380:	4b8a      	ldr	r3, [pc, #552]	; (80205ac <basic_init+0x14e8>)
 8020382:	68da      	ldr	r2, [r3, #12]
 8020384:	2100      	movs	r1, #0
 8020386:	f7fe fb87 	bl	801ea98 <lv_style_set_outline_color>
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
 802038a:	4b87      	ldr	r3, [pc, #540]	; (80205a8 <basic_init+0x14e4>)
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	f103 0010 	add.w	r0, r3, #16
 8020392:	4b86      	ldr	r3, [pc, #536]	; (80205ac <basic_init+0x14e8>)
 8020394:	691a      	ldr	r2, [r3, #16]
 8020396:	2104      	movs	r1, #4
 8020398:	f7fe fb7e 	bl	801ea98 <lv_style_set_outline_color>
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 802039c:	4b82      	ldr	r3, [pc, #520]	; (80205a8 <basic_init+0x14e4>)
 802039e:	681b      	ldr	r3, [r3, #0]
 80203a0:	3310      	adds	r3, #16
 80203a2:	2200      	movs	r2, #0
 80203a4:	2100      	movs	r1, #0
 80203a6:	4618      	mov	r0, r3
 80203a8:	f7fe fd7c 	bl	801eea4 <lv_style_set_transition_time>
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
 80203ac:	4b7e      	ldr	r3, [pc, #504]	; (80205a8 <basic_init+0x14e4>)
 80203ae:	681b      	ldr	r3, [r3, #0]
 80203b0:	3310      	adds	r3, #16
 80203b2:	223c      	movs	r2, #60	; 0x3c
 80203b4:	2100      	movs	r1, #0
 80203b6:	4618      	mov	r0, r3
 80203b8:	f7fe fdbf 	bl	801ef3a <lv_style_set_transition_prop_4>
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 80203bc:	4b7a      	ldr	r3, [pc, #488]	; (80205a8 <basic_init+0x14e4>)
 80203be:	681b      	ldr	r3, [r3, #0]
 80203c0:	3310      	adds	r3, #16
 80203c2:	2229      	movs	r2, #41	; 0x29
 80203c4:	2100      	movs	r1, #0
 80203c6:	4618      	mov	r0, r3
 80203c8:	f7fe fdd0 	bl	801ef6c <lv_style_set_transition_prop_5>
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 80203cc:	4b76      	ldr	r3, [pc, #472]	; (80205a8 <basic_init+0x14e4>)
 80203ce:	681b      	ldr	r3, [r3, #0]
 80203d0:	3310      	adds	r3, #16
 80203d2:	224c      	movs	r2, #76	; 0x4c
 80203d4:	2100      	movs	r1, #0
 80203d6:	4618      	mov	r0, r3
 80203d8:	f7fe fde1 	bl	801ef9e <lv_style_set_transition_prop_6>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 80203dc:	4b72      	ldr	r3, [pc, #456]	; (80205a8 <basic_init+0x14e4>)
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	3310      	adds	r3, #16
 80203e2:	2200      	movs	r2, #0
 80203e4:	2100      	movs	r1, #0
 80203e6:	4618      	mov	r0, r3
 80203e8:	f7fe fd75 	bl	801eed6 <lv_style_set_transition_delay>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
 80203ec:	4b6e      	ldr	r3, [pc, #440]	; (80205a8 <basic_init+0x14e4>)
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	3310      	adds	r3, #16
 80203f2:	2200      	movs	r2, #0
 80203f4:	2110      	movs	r1, #16
 80203f6:	4618      	mov	r0, r3
 80203f8:	f7fe fd6d 	bl	801eed6 <lv_style_set_transition_delay>

    style_init_reset(&styles->pad_inner);
 80203fc:	4b6a      	ldr	r3, [pc, #424]	; (80205a8 <basic_init+0x14e4>)
 80203fe:	681b      	ldr	r3, [r3, #0]
 8020400:	3314      	adds	r3, #20
 8020402:	4618      	mov	r0, r3
 8020404:	f004 fea0 	bl	8025148 <style_init_reset>

    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020408:	4b67      	ldr	r3, [pc, #412]	; (80205a8 <basic_init+0x14e4>)
 802040a:	681b      	ldr	r3, [r3, #0]
 802040c:	f103 0414 	add.w	r4, r3, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8020410:	2000      	movs	r0, #0
 8020412:	f7f9 fe8a 	bl	801a12a <lv_disp_get_size_category>
 8020416:	4603      	mov	r3, r0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020418:	2b01      	cmp	r3, #1
 802041a:	d820      	bhi.n	802045e <basic_init+0x139a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 802041c:	2000      	movs	r0, #0
 802041e:	f7f9 fe6b 	bl	801a0f8 <lv_disp_get_dpi>
 8020422:	4603      	mov	r3, r0
 8020424:	461a      	mov	r2, r3
 8020426:	4613      	mov	r3, r2
 8020428:	009b      	lsls	r3, r3, #2
 802042a:	4413      	add	r3, r2
 802042c:	009b      	lsls	r3, r3, #2
 802042e:	3350      	adds	r3, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020430:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020434:	db11      	blt.n	802045a <basic_init+0x1396>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8020436:	2000      	movs	r0, #0
 8020438:	f7f9 fe5e 	bl	801a0f8 <lv_disp_get_dpi>
 802043c:	4603      	mov	r3, r0
 802043e:	461a      	mov	r2, r3
 8020440:	4613      	mov	r3, r2
 8020442:	009b      	lsls	r3, r3, #2
 8020444:	4413      	add	r3, r2
 8020446:	009b      	lsls	r3, r3, #2
 8020448:	3350      	adds	r3, #80	; 0x50
 802044a:	4a59      	ldr	r2, [pc, #356]	; (80205b0 <basic_init+0x14ec>)
 802044c:	fb82 1203 	smull	r1, r2, r2, r3
 8020450:	1192      	asrs	r2, r2, #6
 8020452:	17db      	asrs	r3, r3, #31
 8020454:	1ad3      	subs	r3, r2, r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020456:	b21b      	sxth	r3, r3
 8020458:	e021      	b.n	802049e <basic_init+0x13da>
 802045a:	2301      	movs	r3, #1
 802045c:	e01f      	b.n	802049e <basic_init+0x13da>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 802045e:	2000      	movs	r0, #0
 8020460:	f7f9 fe4a 	bl	801a0f8 <lv_disp_get_dpi>
 8020464:	4603      	mov	r3, r0
 8020466:	461a      	mov	r2, r3
 8020468:	4613      	mov	r3, r2
 802046a:	009b      	lsls	r3, r3, #2
 802046c:	4413      	add	r3, r2
 802046e:	00db      	lsls	r3, r3, #3
 8020470:	3350      	adds	r3, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020472:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020476:	db11      	blt.n	802049c <basic_init+0x13d8>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8020478:	2000      	movs	r0, #0
 802047a:	f7f9 fe3d 	bl	801a0f8 <lv_disp_get_dpi>
 802047e:	4603      	mov	r3, r0
 8020480:	461a      	mov	r2, r3
 8020482:	4613      	mov	r3, r2
 8020484:	009b      	lsls	r3, r3, #2
 8020486:	4413      	add	r3, r2
 8020488:	00db      	lsls	r3, r3, #3
 802048a:	3350      	adds	r3, #80	; 0x50
 802048c:	4a48      	ldr	r2, [pc, #288]	; (80205b0 <basic_init+0x14ec>)
 802048e:	fb82 1203 	smull	r1, r2, r2, r3
 8020492:	1192      	asrs	r2, r2, #6
 8020494:	17db      	asrs	r3, r3, #31
 8020496:	1ad3      	subs	r3, r2, r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020498:	b21b      	sxth	r3, r3
 802049a:	e000      	b.n	802049e <basic_init+0x13da>
 802049c:	2301      	movs	r3, #1
 802049e:	461a      	mov	r2, r3
 80204a0:	2100      	movs	r1, #0
 80204a2:	4620      	mov	r0, r4
 80204a4:	f7fe f9a0 	bl	801e7e8 <lv_style_set_pad_inner>

    style_init_reset(&styles->pad_small);
 80204a8:	4b3f      	ldr	r3, [pc, #252]	; (80205a8 <basic_init+0x14e4>)
 80204aa:	681b      	ldr	r3, [r3, #0]
 80204ac:	3318      	adds	r3, #24
 80204ae:	4618      	mov	r0, r3
 80204b0:	f004 fe4a 	bl	8025148 <style_init_reset>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 80204b4:	2000      	movs	r0, #0
 80204b6:	f7f9 fe38 	bl	801a12a <lv_disp_get_size_category>
 80204ba:	4603      	mov	r3, r0
 80204bc:	2b01      	cmp	r3, #1
 80204be:	d820      	bhi.n	8020502 <basic_init+0x143e>
 80204c0:	2000      	movs	r0, #0
 80204c2:	f7f9 fe19 	bl	801a0f8 <lv_disp_get_dpi>
 80204c6:	4603      	mov	r3, r0
 80204c8:	461a      	mov	r2, r3
 80204ca:	4613      	mov	r3, r2
 80204cc:	009b      	lsls	r3, r3, #2
 80204ce:	4413      	add	r3, r2
 80204d0:	005b      	lsls	r3, r3, #1
 80204d2:	3350      	adds	r3, #80	; 0x50
 80204d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80204d8:	db11      	blt.n	80204fe <basic_init+0x143a>
 80204da:	2000      	movs	r0, #0
 80204dc:	f7f9 fe0c 	bl	801a0f8 <lv_disp_get_dpi>
 80204e0:	4603      	mov	r3, r0
 80204e2:	461a      	mov	r2, r3
 80204e4:	4613      	mov	r3, r2
 80204e6:	009b      	lsls	r3, r3, #2
 80204e8:	4413      	add	r3, r2
 80204ea:	005b      	lsls	r3, r3, #1
 80204ec:	3350      	adds	r3, #80	; 0x50
 80204ee:	4a30      	ldr	r2, [pc, #192]	; (80205b0 <basic_init+0x14ec>)
 80204f0:	fb82 1203 	smull	r1, r2, r2, r3
 80204f4:	1192      	asrs	r2, r2, #6
 80204f6:	17db      	asrs	r3, r3, #31
 80204f8:	1ad3      	subs	r3, r2, r3
 80204fa:	b21b      	sxth	r3, r3
 80204fc:	e021      	b.n	8020542 <basic_init+0x147e>
 80204fe:	2301      	movs	r3, #1
 8020500:	e01f      	b.n	8020542 <basic_init+0x147e>
 8020502:	2000      	movs	r0, #0
 8020504:	f7f9 fdf8 	bl	801a0f8 <lv_disp_get_dpi>
 8020508:	4603      	mov	r3, r0
 802050a:	461a      	mov	r2, r3
 802050c:	4613      	mov	r3, r2
 802050e:	009b      	lsls	r3, r3, #2
 8020510:	4413      	add	r3, r2
 8020512:	009b      	lsls	r3, r3, #2
 8020514:	3350      	adds	r3, #80	; 0x50
 8020516:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802051a:	db11      	blt.n	8020540 <basic_init+0x147c>
 802051c:	2000      	movs	r0, #0
 802051e:	f7f9 fdeb 	bl	801a0f8 <lv_disp_get_dpi>
 8020522:	4603      	mov	r3, r0
 8020524:	461a      	mov	r2, r3
 8020526:	4613      	mov	r3, r2
 8020528:	009b      	lsls	r3, r3, #2
 802052a:	4413      	add	r3, r2
 802052c:	009b      	lsls	r3, r3, #2
 802052e:	3350      	adds	r3, #80	; 0x50
 8020530:	4a1f      	ldr	r2, [pc, #124]	; (80205b0 <basic_init+0x14ec>)
 8020532:	fb82 1203 	smull	r1, r2, r2, r3
 8020536:	1192      	asrs	r2, r2, #6
 8020538:	17db      	asrs	r3, r3, #31
 802053a:	1ad3      	subs	r3, r2, r3
 802053c:	b21b      	sxth	r3, r3
 802053e:	e000      	b.n	8020542 <basic_init+0x147e>
 8020540:	2301      	movs	r3, #1
 8020542:	80fb      	strh	r3, [r7, #6]
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 8020544:	4b18      	ldr	r3, [pc, #96]	; (80205a8 <basic_init+0x14e4>)
 8020546:	681b      	ldr	r3, [r3, #0]
 8020548:	3318      	adds	r3, #24
 802054a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 802054e:	2100      	movs	r1, #0
 8020550:	4618      	mov	r0, r3
 8020552:	f7fe f917 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 8020556:	4b14      	ldr	r3, [pc, #80]	; (80205a8 <basic_init+0x14e4>)
 8020558:	681b      	ldr	r3, [r3, #0]
 802055a:	3318      	adds	r3, #24
 802055c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020560:	2100      	movs	r1, #0
 8020562:	4618      	mov	r0, r3
 8020564:	f7fe f927 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 8020568:	4b0f      	ldr	r3, [pc, #60]	; (80205a8 <basic_init+0x14e4>)
 802056a:	681b      	ldr	r3, [r3, #0]
 802056c:	3318      	adds	r3, #24
 802056e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020572:	2100      	movs	r1, #0
 8020574:	4618      	mov	r0, r3
 8020576:	f7fe f8d3 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 802057a:	4b0b      	ldr	r3, [pc, #44]	; (80205a8 <basic_init+0x14e4>)
 802057c:	681b      	ldr	r3, [r3, #0]
 802057e:	3318      	adds	r3, #24
 8020580:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020584:	2100      	movs	r1, #0
 8020586:	4618      	mov	r0, r3
 8020588:	f7fe f8e3 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 802058c:	4b06      	ldr	r3, [pc, #24]	; (80205a8 <basic_init+0x14e4>)
 802058e:	681b      	ldr	r3, [r3, #0]
 8020590:	3318      	adds	r3, #24
 8020592:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020596:	2100      	movs	r1, #0
 8020598:	4618      	mov	r0, r3
 802059a:	f7fe f925 	bl	801e7e8 <lv_style_set_pad_inner>
}
 802059e:	bf00      	nop
 80205a0:	3708      	adds	r7, #8
 80205a2:	46bd      	mov	sp, r7
 80205a4:	bdb0      	pop	{r4, r5, r7, pc}
 80205a6:	bf00      	nop
 80205a8:	200200d0 	.word	0x200200d0
 80205ac:	200200a4 	.word	0x200200a4
 80205b0:	66666667 	.word	0x66666667

080205b4 <cont_init>:

static void cont_init(void)
{
 80205b4:	b480      	push	{r7}
 80205b6:	af00      	add	r7, sp, #0
#if LV_USE_CONT != 0

#endif
}
 80205b8:	bf00      	nop
 80205ba:	46bd      	mov	sp, r7
 80205bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205c0:	4770      	bx	lr

080205c2 <btn_init>:

static void btn_init(void)
{
 80205c2:	b480      	push	{r7}
 80205c4:	af00      	add	r7, sp, #0
#if LV_USE_BTN != 0

#endif
}
 80205c6:	bf00      	nop
 80205c8:	46bd      	mov	sp, r7
 80205ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205ce:	4770      	bx	lr

080205d0 <label_init>:

static void label_init(void)
{
 80205d0:	b480      	push	{r7}
 80205d2:	af00      	add	r7, sp, #0
#if LV_USE_LABEL != 0

#endif
}
 80205d4:	bf00      	nop
 80205d6:	46bd      	mov	sp, r7
 80205d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205dc:	4770      	bx	lr
	...

080205e0 <bar_init>:

static void bar_init(void)
{
 80205e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205e2:	af00      	add	r7, sp, #0
#if LV_USE_BAR
    style_init_reset(&styles->bar_bg);
 80205e4:	4b7c      	ldr	r3, [pc, #496]	; (80207d8 <bar_init+0x1f8>)
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	3328      	adds	r3, #40	; 0x28
 80205ea:	4618      	mov	r0, r3
 80205ec:	f004 fdac 	bl	8025148 <style_init_reset>
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80205f0:	4b79      	ldr	r3, [pc, #484]	; (80207d8 <bar_init+0x1f8>)
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	3328      	adds	r3, #40	; 0x28
 80205f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80205fa:	2100      	movs	r1, #0
 80205fc:	4618      	mov	r0, r3
 80205fe:	f7fe f82b 	bl	801e658 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020602:	4b75      	ldr	r3, [pc, #468]	; (80207d8 <bar_init+0x1f8>)
 8020604:	681b      	ldr	r3, [r3, #0]
 8020606:	3328      	adds	r3, #40	; 0x28
 8020608:	22ff      	movs	r2, #255	; 0xff
 802060a:	2100      	movs	r1, #0
 802060c:	4618      	mov	r0, r3
 802060e:	f7fe f97f 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 8020612:	4b71      	ldr	r3, [pc, #452]	; (80207d8 <bar_init+0x1f8>)
 8020614:	681b      	ldr	r3, [r3, #0]
 8020616:	f103 0628 	add.w	r6, r3, #40	; 0x28
 802061a:	4b70      	ldr	r3, [pc, #448]	; (80207dc <bar_init+0x1fc>)
 802061c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802061e:	f003 0302 	and.w	r3, r3, #2
 8020622:	2b00      	cmp	r3, #0
 8020624:	d004      	beq.n	8020630 <bar_init+0x50>
 8020626:	486e      	ldr	r0, [pc, #440]	; (80207e0 <bar_init+0x200>)
 8020628:	f7fd ffd0 	bl	801e5cc <lv_color_hex>
 802062c:	4603      	mov	r3, r0
 802062e:	e003      	b.n	8020638 <bar_init+0x58>
 8020630:	486c      	ldr	r0, [pc, #432]	; (80207e4 <bar_init+0x204>)
 8020632:	f7fd ffcb 	bl	801e5cc <lv_color_hex>
 8020636:	4603      	mov	r3, r0
 8020638:	461a      	mov	r2, r3
 802063a:	2100      	movs	r1, #0
 802063c:	4630      	mov	r0, r6
 802063e:	f7fe f950 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 8020642:	4b65      	ldr	r3, [pc, #404]	; (80207d8 <bar_init+0x1f8>)
 8020644:	681b      	ldr	r3, [r3, #0]
 8020646:	f103 0628 	add.w	r6, r3, #40	; 0x28
 802064a:	4b64      	ldr	r3, [pc, #400]	; (80207dc <bar_init+0x1fc>)
 802064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802064e:	f003 0302 	and.w	r3, r3, #2
 8020652:	2b00      	cmp	r3, #0
 8020654:	d004      	beq.n	8020660 <bar_init+0x80>
 8020656:	4864      	ldr	r0, [pc, #400]	; (80207e8 <bar_init+0x208>)
 8020658:	f7fd ffb8 	bl	801e5cc <lv_color_hex>
 802065c:	4605      	mov	r5, r0
 802065e:	e00b      	b.n	8020678 <bar_init+0x98>
 8020660:	462b      	mov	r3, r5
 8020662:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 8020666:	462b      	mov	r3, r5
 8020668:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 802066c:	462b      	mov	r3, r5
 802066e:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 8020672:	462b      	mov	r3, r5
 8020674:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 8020678:	462a      	mov	r2, r5
 802067a:	2100      	movs	r1, #0
 802067c:	4630      	mov	r0, r6
 802067e:	f7fe fac9 	bl	801ec14 <lv_style_set_value_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
 8020682:	4b55      	ldr	r3, [pc, #340]	; (80207d8 <bar_init+0x1f8>)
 8020684:	681b      	ldr	r3, [r3, #0]
 8020686:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802068a:	4b54      	ldr	r3, [pc, #336]	; (80207dc <bar_init+0x1fc>)
 802068c:	68da      	ldr	r2, [r3, #12]
 802068e:	2100      	movs	r1, #0
 8020690:	f7fe fa02 	bl	801ea98 <lv_style_set_outline_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
 8020694:	4b50      	ldr	r3, [pc, #320]	; (80207d8 <bar_init+0x1f8>)
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802069c:	4b4f      	ldr	r3, [pc, #316]	; (80207dc <bar_init+0x1fc>)
 802069e:	691a      	ldr	r2, [r3, #16]
 80206a0:	2104      	movs	r1, #4
 80206a2:	f7fe f9f9 	bl	801ea98 <lv_style_set_outline_color>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 80206a6:	4b4c      	ldr	r3, [pc, #304]	; (80207d8 <bar_init+0x1f8>)
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	3328      	adds	r3, #40	; 0x28
 80206ac:	2200      	movs	r2, #0
 80206ae:	2100      	movs	r1, #0
 80206b0:	4618      	mov	r0, r3
 80206b2:	f7fe fa08 	bl	801eac6 <lv_style_set_outline_opa>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
 80206b6:	4b48      	ldr	r3, [pc, #288]	; (80207d8 <bar_init+0x1f8>)
 80206b8:	681b      	ldr	r3, [r3, #0]
 80206ba:	3328      	adds	r3, #40	; 0x28
 80206bc:	227f      	movs	r2, #127	; 0x7f
 80206be:	2102      	movs	r1, #2
 80206c0:	4618      	mov	r0, r3
 80206c2:	f7fe fa00 	bl	801eac6 <lv_style_set_outline_opa>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 80206c6:	4b44      	ldr	r3, [pc, #272]	; (80207d8 <bar_init+0x1f8>)
 80206c8:	681b      	ldr	r3, [r3, #0]
 80206ca:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80206ce:	4b43      	ldr	r3, [pc, #268]	; (80207dc <bar_init+0x1fc>)
 80206d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206d2:	f003 0320 	and.w	r3, r3, #32
 80206d6:	2b00      	cmp	r3, #0
 80206d8:	d118      	bne.n	802070c <bar_init+0x12c>
 80206da:	2000      	movs	r0, #0
 80206dc:	f7f9 fd0c 	bl	801a0f8 <lv_disp_get_dpi>
 80206e0:	4603      	mov	r3, r0
 80206e2:	3328      	adds	r3, #40	; 0x28
 80206e4:	005b      	lsls	r3, r3, #1
 80206e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80206ea:	db0d      	blt.n	8020708 <bar_init+0x128>
 80206ec:	2000      	movs	r0, #0
 80206ee:	f7f9 fd03 	bl	801a0f8 <lv_disp_get_dpi>
 80206f2:	4603      	mov	r3, r0
 80206f4:	3328      	adds	r3, #40	; 0x28
 80206f6:	005b      	lsls	r3, r3, #1
 80206f8:	4a3c      	ldr	r2, [pc, #240]	; (80207ec <bar_init+0x20c>)
 80206fa:	fb82 1203 	smull	r1, r2, r2, r3
 80206fe:	1192      	asrs	r2, r2, #6
 8020700:	17db      	asrs	r3, r3, #31
 8020702:	1ad3      	subs	r3, r2, r3
 8020704:	b21b      	sxth	r3, r3
 8020706:	e002      	b.n	802070e <bar_init+0x12e>
 8020708:	2301      	movs	r3, #1
 802070a:	e000      	b.n	802070e <bar_init+0x12e>
 802070c:	2300      	movs	r3, #0
 802070e:	461a      	mov	r2, r3
 8020710:	2100      	movs	r1, #0
 8020712:	4628      	mov	r0, r5
 8020714:	f7fe f98e 	bl	801ea34 <lv_style_set_outline_width>
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8020718:	4b2f      	ldr	r3, [pc, #188]	; (80207d8 <bar_init+0x1f8>)
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	3328      	adds	r3, #40	; 0x28
 802071e:	2200      	movs	r2, #0
 8020720:	2100      	movs	r1, #0
 8020722:	4618      	mov	r0, r3
 8020724:	f7fe fbbe 	bl	801eea4 <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 8020728:	4b2b      	ldr	r3, [pc, #172]	; (80207d8 <bar_init+0x1f8>)
 802072a:	681b      	ldr	r3, [r3, #0]
 802072c:	3328      	adds	r3, #40	; 0x28
 802072e:	224c      	movs	r2, #76	; 0x4c
 8020730:	2100      	movs	r1, #0
 8020732:	4618      	mov	r0, r3
 8020734:	f7fe fc33 	bl	801ef9e <lv_style_set_transition_prop_6>

    style_init_reset(&styles->bar_indic);
 8020738:	4b27      	ldr	r3, [pc, #156]	; (80207d8 <bar_init+0x1f8>)
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	332c      	adds	r3, #44	; 0x2c
 802073e:	4618      	mov	r0, r3
 8020740:	f004 fd02 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020744:	4b24      	ldr	r3, [pc, #144]	; (80207d8 <bar_init+0x1f8>)
 8020746:	681b      	ldr	r3, [r3, #0]
 8020748:	332c      	adds	r3, #44	; 0x2c
 802074a:	22ff      	movs	r2, #255	; 0xff
 802074c:	2100      	movs	r1, #0
 802074e:	4618      	mov	r0, r3
 8020750:	f7fe f8de 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020754:	4b20      	ldr	r3, [pc, #128]	; (80207d8 <bar_init+0x1f8>)
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	332c      	adds	r3, #44	; 0x2c
 802075a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802075e:	2100      	movs	r1, #0
 8020760:	4618      	mov	r0, r3
 8020762:	f7fd ff79 	bl	801e658 <lv_style_set_radius>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
 8020766:	4b1c      	ldr	r3, [pc, #112]	; (80207d8 <bar_init+0x1f8>)
 8020768:	681b      	ldr	r3, [r3, #0]
 802076a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 802076e:	4b1b      	ldr	r3, [pc, #108]	; (80207dc <bar_init+0x1fc>)
 8020770:	68da      	ldr	r2, [r3, #12]
 8020772:	2100      	movs	r1, #0
 8020774:	f7fe f8b5 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
 8020778:	4b17      	ldr	r3, [pc, #92]	; (80207d8 <bar_init+0x1f8>)
 802077a:	681b      	ldr	r3, [r3, #0]
 802077c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8020780:	f640 0088 	movw	r0, #2184	; 0x888
 8020784:	f7fd ff36 	bl	801e5f4 <lv_color_hex3>
 8020788:	4603      	mov	r3, r0
 802078a:	461a      	mov	r2, r3
 802078c:	2120      	movs	r1, #32
 802078e:	4628      	mov	r0, r5
 8020790:	f7fe f8a7 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
 8020794:	4b10      	ldr	r3, [pc, #64]	; (80207d8 <bar_init+0x1f8>)
 8020796:	681b      	ldr	r3, [r3, #0]
 8020798:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 802079c:	4b0f      	ldr	r3, [pc, #60]	; (80207dc <bar_init+0x1fc>)
 802079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80207a0:	f003 0302 	and.w	r3, r3, #2
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	d004      	beq.n	80207b2 <bar_init+0x1d2>
 80207a8:	4811      	ldr	r0, [pc, #68]	; (80207f0 <bar_init+0x210>)
 80207aa:	f7fd ff0f 	bl	801e5cc <lv_color_hex>
 80207ae:	4604      	mov	r4, r0
 80207b0:	e00b      	b.n	80207ca <bar_init+0x1ea>
 80207b2:	4623      	mov	r3, r4
 80207b4:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 80207b8:	4623      	mov	r3, r4
 80207ba:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 80207be:	4623      	mov	r3, r4
 80207c0:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 80207c4:	4623      	mov	r3, r4
 80207c6:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 80207ca:	4622      	mov	r2, r4
 80207cc:	2100      	movs	r1, #0
 80207ce:	4628      	mov	r0, r5
 80207d0:	f7fe fa20 	bl	801ec14 <lv_style_set_value_color>
#endif
}
 80207d4:	bf00      	nop
 80207d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80207d8:	200200d0 	.word	0x200200d0
 80207dc:	200200a4 	.word	0x200200a4
 80207e0:	00d4d7d9 	.word	0x00d4d7d9
 80207e4:	0045494d 	.word	0x0045494d
 80207e8:	0031404f 	.word	0x0031404f
 80207ec:	66666667 	.word	0x66666667
 80207f0:	0041404f 	.word	0x0041404f

080207f4 <img_init>:

static void img_init(void)
{
 80207f4:	b480      	push	{r7}
 80207f6:	af00      	add	r7, sp, #0
#if LV_USE_IMG != 0

#endif
}
 80207f8:	bf00      	nop
 80207fa:	46bd      	mov	sp, r7
 80207fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020800:	4770      	bx	lr

08020802 <line_init>:

static void line_init(void)
{
 8020802:	b480      	push	{r7}
 8020804:	af00      	add	r7, sp, #0
#if LV_USE_LINE != 0

#endif
}
 8020806:	bf00      	nop
 8020808:	46bd      	mov	sp, r7
 802080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802080e:	4770      	bx	lr

08020810 <led_init>:

static void led_init(void)
{
 8020810:	b598      	push	{r3, r4, r7, lr}
 8020812:	af00      	add	r7, sp, #0
#if LV_USE_LED != 0
    style_init_reset(&styles->led);
 8020814:	4b4b      	ldr	r3, [pc, #300]	; (8020944 <led_init+0x134>)
 8020816:	681b      	ldr	r3, [r3, #0]
 8020818:	3370      	adds	r3, #112	; 0x70
 802081a:	4618      	mov	r0, r3
 802081c:	f004 fc94 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020820:	4b48      	ldr	r3, [pc, #288]	; (8020944 <led_init+0x134>)
 8020822:	681b      	ldr	r3, [r3, #0]
 8020824:	3370      	adds	r3, #112	; 0x70
 8020826:	22ff      	movs	r2, #255	; 0xff
 8020828:	2100      	movs	r1, #0
 802082a:	4618      	mov	r0, r3
 802082c:	f7fe f870 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
 8020830:	4b44      	ldr	r3, [pc, #272]	; (8020944 <led_init+0x134>)
 8020832:	681b      	ldr	r3, [r3, #0]
 8020834:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8020838:	4b43      	ldr	r3, [pc, #268]	; (8020948 <led_init+0x138>)
 802083a:	68da      	ldr	r2, [r3, #12]
 802083c:	2100      	movs	r1, #0
 802083e:	f7fe f850 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
 8020842:	4b40      	ldr	r3, [pc, #256]	; (8020944 <led_init+0x134>)
 8020844:	681b      	ldr	r3, [r3, #0]
 8020846:	3370      	adds	r3, #112	; 0x70
 8020848:	2202      	movs	r2, #2
 802084a:	2100      	movs	r1, #0
 802084c:	4618      	mov	r0, r3
 802084e:	f7fe f877 	bl	801e940 <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
 8020852:	4b3c      	ldr	r3, [pc, #240]	; (8020944 <led_init+0x134>)
 8020854:	681b      	ldr	r3, [r3, #0]
 8020856:	3370      	adds	r3, #112	; 0x70
 8020858:	227f      	movs	r2, #127	; 0x7f
 802085a:	2100      	movs	r1, #0
 802085c:	4618      	mov	r0, r3
 802085e:	f7fe f8d1 	bl	801ea04 <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
 8020862:	4b38      	ldr	r3, [pc, #224]	; (8020944 <led_init+0x134>)
 8020864:	681b      	ldr	r3, [r3, #0]
 8020866:	f103 0470 	add.w	r4, r3, #112	; 0x70
 802086a:	4b37      	ldr	r3, [pc, #220]	; (8020948 <led_init+0x138>)
 802086c:	214c      	movs	r1, #76	; 0x4c
 802086e:	68d8      	ldr	r0, [r3, #12]
 8020870:	f7fa ffc0 	bl	801b7f4 <lv_color_lighten>
 8020874:	4603      	mov	r3, r0
 8020876:	461a      	mov	r2, r3
 8020878:	2100      	movs	r1, #0
 802087a:	4620      	mov	r0, r4
 802087c:	f7fe f8ab 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020880:	4b30      	ldr	r3, [pc, #192]	; (8020944 <led_init+0x134>)
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	3370      	adds	r3, #112	; 0x70
 8020886:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802088a:	2100      	movs	r1, #0
 802088c:	4618      	mov	r0, r3
 802088e:	f7fd fee3 	bl	801e658 <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
 8020892:	4b2c      	ldr	r3, [pc, #176]	; (8020944 <led_init+0x134>)
 8020894:	681b      	ldr	r3, [r3, #0]
 8020896:	f103 0470 	add.w	r4, r3, #112	; 0x70
 802089a:	2000      	movs	r0, #0
 802089c:	f7f9 fc2c 	bl	801a0f8 <lv_disp_get_dpi>
 80208a0:	4603      	mov	r3, r0
 80208a2:	461a      	mov	r2, r3
 80208a4:	4613      	mov	r3, r2
 80208a6:	011b      	lsls	r3, r3, #4
 80208a8:	1a9b      	subs	r3, r3, r2
 80208aa:	3350      	adds	r3, #80	; 0x50
 80208ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80208b0:	db10      	blt.n	80208d4 <led_init+0xc4>
 80208b2:	2000      	movs	r0, #0
 80208b4:	f7f9 fc20 	bl	801a0f8 <lv_disp_get_dpi>
 80208b8:	4603      	mov	r3, r0
 80208ba:	461a      	mov	r2, r3
 80208bc:	4613      	mov	r3, r2
 80208be:	011b      	lsls	r3, r3, #4
 80208c0:	1a9b      	subs	r3, r3, r2
 80208c2:	3350      	adds	r3, #80	; 0x50
 80208c4:	4a21      	ldr	r2, [pc, #132]	; (802094c <led_init+0x13c>)
 80208c6:	fb82 1203 	smull	r1, r2, r2, r3
 80208ca:	1192      	asrs	r2, r2, #6
 80208cc:	17db      	asrs	r3, r3, #31
 80208ce:	1ad3      	subs	r3, r2, r3
 80208d0:	b21b      	sxth	r3, r3
 80208d2:	e000      	b.n	80208d6 <led_init+0xc6>
 80208d4:	2301      	movs	r3, #1
 80208d6:	461a      	mov	r2, r3
 80208d8:	2100      	movs	r1, #0
 80208da:	4620      	mov	r0, r4
 80208dc:	f7fe f90b 	bl	801eaf6 <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
 80208e0:	4b18      	ldr	r3, [pc, #96]	; (8020944 <led_init+0x134>)
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80208e8:	4b17      	ldr	r3, [pc, #92]	; (8020948 <led_init+0x138>)
 80208ea:	68da      	ldr	r2, [r3, #12]
 80208ec:	2100      	movs	r1, #0
 80208ee:	f7fe f934 	bl	801eb5a <lv_style_set_shadow_color>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
 80208f2:	4b14      	ldr	r3, [pc, #80]	; (8020944 <led_init+0x134>)
 80208f4:	681b      	ldr	r3, [r3, #0]
 80208f6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80208fa:	2000      	movs	r0, #0
 80208fc:	f7f9 fbfc 	bl	801a0f8 <lv_disp_get_dpi>
 8020900:	4603      	mov	r3, r0
 8020902:	461a      	mov	r2, r3
 8020904:	4613      	mov	r3, r2
 8020906:	009b      	lsls	r3, r3, #2
 8020908:	4413      	add	r3, r2
 802090a:	3350      	adds	r3, #80	; 0x50
 802090c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020910:	db10      	blt.n	8020934 <led_init+0x124>
 8020912:	2000      	movs	r0, #0
 8020914:	f7f9 fbf0 	bl	801a0f8 <lv_disp_get_dpi>
 8020918:	4603      	mov	r3, r0
 802091a:	461a      	mov	r2, r3
 802091c:	4613      	mov	r3, r2
 802091e:	009b      	lsls	r3, r3, #2
 8020920:	4413      	add	r3, r2
 8020922:	3350      	adds	r3, #80	; 0x50
 8020924:	4a09      	ldr	r2, [pc, #36]	; (802094c <led_init+0x13c>)
 8020926:	fb82 1203 	smull	r1, r2, r2, r3
 802092a:	1192      	asrs	r2, r2, #6
 802092c:	17db      	asrs	r3, r3, #31
 802092e:	1ad3      	subs	r3, r2, r3
 8020930:	b21b      	sxth	r3, r3
 8020932:	e000      	b.n	8020936 <led_init+0x126>
 8020934:	2301      	movs	r3, #1
 8020936:	461a      	mov	r2, r3
 8020938:	2100      	movs	r1, #0
 802093a:	4620      	mov	r0, r4
 802093c:	f7fe f8f4 	bl	801eb28 <lv_style_set_shadow_spread>
#endif
}
 8020940:	bf00      	nop
 8020942:	bd98      	pop	{r3, r4, r7, pc}
 8020944:	200200d0 	.word	0x200200d0
 8020948:	200200a4 	.word	0x200200a4
 802094c:	66666667 	.word	0x66666667

08020950 <slider_init>:

static void slider_init(void)
{
 8020950:	b5b0      	push	{r4, r5, r7, lr}
 8020952:	af00      	add	r7, sp, #0
#if LV_USE_SLIDER != 0
    style_init_reset(&styles->slider_knob);
 8020954:	4bcd      	ldr	r3, [pc, #820]	; (8020c8c <slider_init+0x33c>)
 8020956:	681b      	ldr	r3, [r3, #0]
 8020958:	3394      	adds	r3, #148	; 0x94
 802095a:	4618      	mov	r0, r3
 802095c:	f004 fbf4 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020960:	4bca      	ldr	r3, [pc, #808]	; (8020c8c <slider_init+0x33c>)
 8020962:	681b      	ldr	r3, [r3, #0]
 8020964:	3394      	adds	r3, #148	; 0x94
 8020966:	22ff      	movs	r2, #255	; 0xff
 8020968:	2100      	movs	r1, #0
 802096a:	4618      	mov	r0, r3
 802096c:	f7fd ffd0 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
 8020970:	4bc6      	ldr	r3, [pc, #792]	; (8020c8c <slider_init+0x33c>)
 8020972:	681b      	ldr	r3, [r3, #0]
 8020974:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8020978:	4bc5      	ldr	r3, [pc, #788]	; (8020c90 <slider_init+0x340>)
 802097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802097c:	f003 0302 	and.w	r3, r3, #2
 8020980:	2b00      	cmp	r3, #0
 8020982:	d002      	beq.n	802098a <slider_init+0x3a>
 8020984:	4bc2      	ldr	r3, [pc, #776]	; (8020c90 <slider_init+0x340>)
 8020986:	68dc      	ldr	r4, [r3, #12]
 8020988:	e00b      	b.n	80209a2 <slider_init+0x52>
 802098a:	4623      	mov	r3, r4
 802098c:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 8020990:	4623      	mov	r3, r4
 8020992:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 8020996:	4623      	mov	r3, r4
 8020998:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 802099c:	4623      	mov	r3, r4
 802099e:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 80209a2:	4622      	mov	r2, r4
 80209a4:	2100      	movs	r1, #0
 80209a6:	f7fd ff9c 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 80209aa:	4bb8      	ldr	r3, [pc, #736]	; (8020c8c <slider_init+0x33c>)
 80209ac:	681b      	ldr	r3, [r3, #0]
 80209ae:	f103 0494 	add.w	r4, r3, #148	; 0x94
 80209b2:	4bb7      	ldr	r3, [pc, #732]	; (8020c90 <slider_init+0x340>)
 80209b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80209b6:	f003 0302 	and.w	r3, r3, #2
 80209ba:	2b00      	cmp	r3, #0
 80209bc:	d004      	beq.n	80209c8 <slider_init+0x78>
 80209be:	48b5      	ldr	r0, [pc, #724]	; (8020c94 <slider_init+0x344>)
 80209c0:	f7fd fe04 	bl	801e5cc <lv_color_hex>
 80209c4:	4605      	mov	r5, r0
 80209c6:	e00b      	b.n	80209e0 <slider_init+0x90>
 80209c8:	462b      	mov	r3, r5
 80209ca:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 80209ce:	462b      	mov	r3, r5
 80209d0:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 80209d4:	462b      	mov	r3, r5
 80209d6:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 80209da:	462b      	mov	r3, r5
 80209dc:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 80209e0:	462a      	mov	r2, r5
 80209e2:	2100      	movs	r1, #0
 80209e4:	4620      	mov	r0, r4
 80209e6:	f7fe f915 	bl	801ec14 <lv_style_set_value_color>
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80209ea:	4ba8      	ldr	r3, [pc, #672]	; (8020c8c <slider_init+0x33c>)
 80209ec:	681b      	ldr	r3, [r3, #0]
 80209ee:	3394      	adds	r3, #148	; 0x94
 80209f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80209f4:	2100      	movs	r1, #0
 80209f6:	4618      	mov	r0, r3
 80209f8:	f7fd fe2e 	bl	801e658 <lv_style_set_radius>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 80209fc:	4ba3      	ldr	r3, [pc, #652]	; (8020c8c <slider_init+0x33c>)
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020a04:	2000      	movs	r0, #0
 8020a06:	f7f9 fb77 	bl	801a0f8 <lv_disp_get_dpi>
 8020a0a:	4603      	mov	r3, r0
 8020a0c:	461a      	mov	r2, r3
 8020a0e:	4613      	mov	r3, r2
 8020a10:	00db      	lsls	r3, r3, #3
 8020a12:	1a9b      	subs	r3, r3, r2
 8020a14:	3350      	adds	r3, #80	; 0x50
 8020a16:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020a1a:	db10      	blt.n	8020a3e <slider_init+0xee>
 8020a1c:	2000      	movs	r0, #0
 8020a1e:	f7f9 fb6b 	bl	801a0f8 <lv_disp_get_dpi>
 8020a22:	4603      	mov	r3, r0
 8020a24:	461a      	mov	r2, r3
 8020a26:	4613      	mov	r3, r2
 8020a28:	00db      	lsls	r3, r3, #3
 8020a2a:	1a9b      	subs	r3, r3, r2
 8020a2c:	3350      	adds	r3, #80	; 0x50
 8020a2e:	4a9a      	ldr	r2, [pc, #616]	; (8020c98 <slider_init+0x348>)
 8020a30:	fb82 1203 	smull	r1, r2, r2, r3
 8020a34:	1192      	asrs	r2, r2, #6
 8020a36:	17db      	asrs	r3, r3, #31
 8020a38:	1ad3      	subs	r3, r2, r3
 8020a3a:	b21b      	sxth	r3, r3
 8020a3c:	e000      	b.n	8020a40 <slider_init+0xf0>
 8020a3e:	2301      	movs	r3, #1
 8020a40:	461a      	mov	r2, r3
 8020a42:	2100      	movs	r1, #0
 8020a44:	4620      	mov	r0, r4
 8020a46:	f7fd fe9d 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020a4a:	4b90      	ldr	r3, [pc, #576]	; (8020c8c <slider_init+0x33c>)
 8020a4c:	681b      	ldr	r3, [r3, #0]
 8020a4e:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020a52:	2000      	movs	r0, #0
 8020a54:	f7f9 fb50 	bl	801a0f8 <lv_disp_get_dpi>
 8020a58:	4603      	mov	r3, r0
 8020a5a:	461a      	mov	r2, r3
 8020a5c:	4613      	mov	r3, r2
 8020a5e:	00db      	lsls	r3, r3, #3
 8020a60:	1a9b      	subs	r3, r3, r2
 8020a62:	3350      	adds	r3, #80	; 0x50
 8020a64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020a68:	db10      	blt.n	8020a8c <slider_init+0x13c>
 8020a6a:	2000      	movs	r0, #0
 8020a6c:	f7f9 fb44 	bl	801a0f8 <lv_disp_get_dpi>
 8020a70:	4603      	mov	r3, r0
 8020a72:	461a      	mov	r2, r3
 8020a74:	4613      	mov	r3, r2
 8020a76:	00db      	lsls	r3, r3, #3
 8020a78:	1a9b      	subs	r3, r3, r2
 8020a7a:	3350      	adds	r3, #80	; 0x50
 8020a7c:	4a86      	ldr	r2, [pc, #536]	; (8020c98 <slider_init+0x348>)
 8020a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8020a82:	1192      	asrs	r2, r2, #6
 8020a84:	17db      	asrs	r3, r3, #31
 8020a86:	1ad3      	subs	r3, r2, r3
 8020a88:	b21b      	sxth	r3, r3
 8020a8a:	e000      	b.n	8020a8e <slider_init+0x13e>
 8020a8c:	2301      	movs	r3, #1
 8020a8e:	461a      	mov	r2, r3
 8020a90:	2100      	movs	r1, #0
 8020a92:	4620      	mov	r0, r4
 8020a94:	f7fd fe8f 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020a98:	4b7c      	ldr	r3, [pc, #496]	; (8020c8c <slider_init+0x33c>)
 8020a9a:	681b      	ldr	r3, [r3, #0]
 8020a9c:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020aa0:	2000      	movs	r0, #0
 8020aa2:	f7f9 fb29 	bl	801a0f8 <lv_disp_get_dpi>
 8020aa6:	4603      	mov	r3, r0
 8020aa8:	461a      	mov	r2, r3
 8020aaa:	4613      	mov	r3, r2
 8020aac:	00db      	lsls	r3, r3, #3
 8020aae:	1a9b      	subs	r3, r3, r2
 8020ab0:	3350      	adds	r3, #80	; 0x50
 8020ab2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020ab6:	db10      	blt.n	8020ada <slider_init+0x18a>
 8020ab8:	2000      	movs	r0, #0
 8020aba:	f7f9 fb1d 	bl	801a0f8 <lv_disp_get_dpi>
 8020abe:	4603      	mov	r3, r0
 8020ac0:	461a      	mov	r2, r3
 8020ac2:	4613      	mov	r3, r2
 8020ac4:	00db      	lsls	r3, r3, #3
 8020ac6:	1a9b      	subs	r3, r3, r2
 8020ac8:	3350      	adds	r3, #80	; 0x50
 8020aca:	4a73      	ldr	r2, [pc, #460]	; (8020c98 <slider_init+0x348>)
 8020acc:	fb82 1203 	smull	r1, r2, r2, r3
 8020ad0:	1192      	asrs	r2, r2, #6
 8020ad2:	17db      	asrs	r3, r3, #31
 8020ad4:	1ad3      	subs	r3, r2, r3
 8020ad6:	b21b      	sxth	r3, r3
 8020ad8:	e000      	b.n	8020adc <slider_init+0x18c>
 8020ada:	2301      	movs	r3, #1
 8020adc:	461a      	mov	r2, r3
 8020ade:	2100      	movs	r1, #0
 8020ae0:	4620      	mov	r0, r4
 8020ae2:	f7fd fe1d 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020ae6:	4b69      	ldr	r3, [pc, #420]	; (8020c8c <slider_init+0x33c>)
 8020ae8:	681b      	ldr	r3, [r3, #0]
 8020aea:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020aee:	2000      	movs	r0, #0
 8020af0:	f7f9 fb02 	bl	801a0f8 <lv_disp_get_dpi>
 8020af4:	4603      	mov	r3, r0
 8020af6:	461a      	mov	r2, r3
 8020af8:	4613      	mov	r3, r2
 8020afa:	00db      	lsls	r3, r3, #3
 8020afc:	1a9b      	subs	r3, r3, r2
 8020afe:	3350      	adds	r3, #80	; 0x50
 8020b00:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020b04:	db10      	blt.n	8020b28 <slider_init+0x1d8>
 8020b06:	2000      	movs	r0, #0
 8020b08:	f7f9 faf6 	bl	801a0f8 <lv_disp_get_dpi>
 8020b0c:	4603      	mov	r3, r0
 8020b0e:	461a      	mov	r2, r3
 8020b10:	4613      	mov	r3, r2
 8020b12:	00db      	lsls	r3, r3, #3
 8020b14:	1a9b      	subs	r3, r3, r2
 8020b16:	3350      	adds	r3, #80	; 0x50
 8020b18:	4a5f      	ldr	r2, [pc, #380]	; (8020c98 <slider_init+0x348>)
 8020b1a:	fb82 1203 	smull	r1, r2, r2, r3
 8020b1e:	1192      	asrs	r2, r2, #6
 8020b20:	17db      	asrs	r3, r3, #31
 8020b22:	1ad3      	subs	r3, r2, r3
 8020b24:	b21b      	sxth	r3, r3
 8020b26:	e000      	b.n	8020b2a <slider_init+0x1da>
 8020b28:	2301      	movs	r3, #1
 8020b2a:	461a      	mov	r2, r3
 8020b2c:	2100      	movs	r1, #0
 8020b2e:	4620      	mov	r0, r4
 8020b30:	f7fd fe0f 	bl	801e752 <lv_style_set_pad_bottom>

    style_init_reset(&styles->slider_bg);
 8020b34:	4b55      	ldr	r3, [pc, #340]	; (8020c8c <slider_init+0x33c>)
 8020b36:	681b      	ldr	r3, [r3, #0]
 8020b38:	3398      	adds	r3, #152	; 0x98
 8020b3a:	4618      	mov	r0, r3
 8020b3c:	f004 fb04 	bl	8025148 <style_init_reset>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020b40:	4b52      	ldr	r3, [pc, #328]	; (8020c8c <slider_init+0x33c>)
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020b48:	2000      	movs	r0, #0
 8020b4a:	f7f9 fad5 	bl	801a0f8 <lv_disp_get_dpi>
 8020b4e:	4603      	mov	r3, r0
 8020b50:	461a      	mov	r2, r3
 8020b52:	4613      	mov	r3, r2
 8020b54:	009b      	lsls	r3, r3, #2
 8020b56:	4413      	add	r3, r2
 8020b58:	005b      	lsls	r3, r3, #1
 8020b5a:	3350      	adds	r3, #80	; 0x50
 8020b5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020b60:	db11      	blt.n	8020b86 <slider_init+0x236>
 8020b62:	2000      	movs	r0, #0
 8020b64:	f7f9 fac8 	bl	801a0f8 <lv_disp_get_dpi>
 8020b68:	4603      	mov	r3, r0
 8020b6a:	461a      	mov	r2, r3
 8020b6c:	4613      	mov	r3, r2
 8020b6e:	009b      	lsls	r3, r3, #2
 8020b70:	4413      	add	r3, r2
 8020b72:	005b      	lsls	r3, r3, #1
 8020b74:	3350      	adds	r3, #80	; 0x50
 8020b76:	4a48      	ldr	r2, [pc, #288]	; (8020c98 <slider_init+0x348>)
 8020b78:	fb82 1203 	smull	r1, r2, r2, r3
 8020b7c:	1192      	asrs	r2, r2, #6
 8020b7e:	17db      	asrs	r3, r3, #31
 8020b80:	1ad3      	subs	r3, r2, r3
 8020b82:	b21b      	sxth	r3, r3
 8020b84:	e000      	b.n	8020b88 <slider_init+0x238>
 8020b86:	2301      	movs	r3, #1
 8020b88:	461a      	mov	r2, r3
 8020b8a:	2100      	movs	r1, #0
 8020b8c:	4620      	mov	r0, r4
 8020b8e:	f7fd fe76 	bl	801e87e <lv_style_set_margin_left>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020b92:	4b3e      	ldr	r3, [pc, #248]	; (8020c8c <slider_init+0x33c>)
 8020b94:	681b      	ldr	r3, [r3, #0]
 8020b96:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020b9a:	2000      	movs	r0, #0
 8020b9c:	f7f9 faac 	bl	801a0f8 <lv_disp_get_dpi>
 8020ba0:	4603      	mov	r3, r0
 8020ba2:	461a      	mov	r2, r3
 8020ba4:	4613      	mov	r3, r2
 8020ba6:	009b      	lsls	r3, r3, #2
 8020ba8:	4413      	add	r3, r2
 8020baa:	005b      	lsls	r3, r3, #1
 8020bac:	3350      	adds	r3, #80	; 0x50
 8020bae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020bb2:	db11      	blt.n	8020bd8 <slider_init+0x288>
 8020bb4:	2000      	movs	r0, #0
 8020bb6:	f7f9 fa9f 	bl	801a0f8 <lv_disp_get_dpi>
 8020bba:	4603      	mov	r3, r0
 8020bbc:	461a      	mov	r2, r3
 8020bbe:	4613      	mov	r3, r2
 8020bc0:	009b      	lsls	r3, r3, #2
 8020bc2:	4413      	add	r3, r2
 8020bc4:	005b      	lsls	r3, r3, #1
 8020bc6:	3350      	adds	r3, #80	; 0x50
 8020bc8:	4a33      	ldr	r2, [pc, #204]	; (8020c98 <slider_init+0x348>)
 8020bca:	fb82 1203 	smull	r1, r2, r2, r3
 8020bce:	1192      	asrs	r2, r2, #6
 8020bd0:	17db      	asrs	r3, r3, #31
 8020bd2:	1ad3      	subs	r3, r2, r3
 8020bd4:	b21b      	sxth	r3, r3
 8020bd6:	e000      	b.n	8020bda <slider_init+0x28a>
 8020bd8:	2301      	movs	r3, #1
 8020bda:	461a      	mov	r2, r3
 8020bdc:	2100      	movs	r1, #0
 8020bde:	4620      	mov	r0, r4
 8020be0:	f7fd fe66 	bl	801e8b0 <lv_style_set_margin_right>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020be4:	4b29      	ldr	r3, [pc, #164]	; (8020c8c <slider_init+0x33c>)
 8020be6:	681b      	ldr	r3, [r3, #0]
 8020be8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020bec:	2000      	movs	r0, #0
 8020bee:	f7f9 fa83 	bl	801a0f8 <lv_disp_get_dpi>
 8020bf2:	4603      	mov	r3, r0
 8020bf4:	461a      	mov	r2, r3
 8020bf6:	4613      	mov	r3, r2
 8020bf8:	009b      	lsls	r3, r3, #2
 8020bfa:	4413      	add	r3, r2
 8020bfc:	005b      	lsls	r3, r3, #1
 8020bfe:	3350      	adds	r3, #80	; 0x50
 8020c00:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020c04:	db11      	blt.n	8020c2a <slider_init+0x2da>
 8020c06:	2000      	movs	r0, #0
 8020c08:	f7f9 fa76 	bl	801a0f8 <lv_disp_get_dpi>
 8020c0c:	4603      	mov	r3, r0
 8020c0e:	461a      	mov	r2, r3
 8020c10:	4613      	mov	r3, r2
 8020c12:	009b      	lsls	r3, r3, #2
 8020c14:	4413      	add	r3, r2
 8020c16:	005b      	lsls	r3, r3, #1
 8020c18:	3350      	adds	r3, #80	; 0x50
 8020c1a:	4a1f      	ldr	r2, [pc, #124]	; (8020c98 <slider_init+0x348>)
 8020c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8020c20:	1192      	asrs	r2, r2, #6
 8020c22:	17db      	asrs	r3, r3, #31
 8020c24:	1ad3      	subs	r3, r2, r3
 8020c26:	b21b      	sxth	r3, r3
 8020c28:	e000      	b.n	8020c2c <slider_init+0x2dc>
 8020c2a:	2301      	movs	r3, #1
 8020c2c:	461a      	mov	r2, r3
 8020c2e:	2100      	movs	r1, #0
 8020c30:	4620      	mov	r0, r4
 8020c32:	f7fd fdf2 	bl	801e81a <lv_style_set_margin_top>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020c36:	4b15      	ldr	r3, [pc, #84]	; (8020c8c <slider_init+0x33c>)
 8020c38:	681b      	ldr	r3, [r3, #0]
 8020c3a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020c3e:	2000      	movs	r0, #0
 8020c40:	f7f9 fa5a 	bl	801a0f8 <lv_disp_get_dpi>
 8020c44:	4603      	mov	r3, r0
 8020c46:	461a      	mov	r2, r3
 8020c48:	4613      	mov	r3, r2
 8020c4a:	009b      	lsls	r3, r3, #2
 8020c4c:	4413      	add	r3, r2
 8020c4e:	005b      	lsls	r3, r3, #1
 8020c50:	3350      	adds	r3, #80	; 0x50
 8020c52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020c56:	db11      	blt.n	8020c7c <slider_init+0x32c>
 8020c58:	2000      	movs	r0, #0
 8020c5a:	f7f9 fa4d 	bl	801a0f8 <lv_disp_get_dpi>
 8020c5e:	4603      	mov	r3, r0
 8020c60:	461a      	mov	r2, r3
 8020c62:	4613      	mov	r3, r2
 8020c64:	009b      	lsls	r3, r3, #2
 8020c66:	4413      	add	r3, r2
 8020c68:	005b      	lsls	r3, r3, #1
 8020c6a:	3350      	adds	r3, #80	; 0x50
 8020c6c:	4a0a      	ldr	r2, [pc, #40]	; (8020c98 <slider_init+0x348>)
 8020c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8020c72:	1192      	asrs	r2, r2, #6
 8020c74:	17db      	asrs	r3, r3, #31
 8020c76:	1ad3      	subs	r3, r2, r3
 8020c78:	b21b      	sxth	r3, r3
 8020c7a:	e000      	b.n	8020c7e <slider_init+0x32e>
 8020c7c:	2301      	movs	r3, #1
 8020c7e:	461a      	mov	r2, r3
 8020c80:	2100      	movs	r1, #0
 8020c82:	4620      	mov	r0, r4
 8020c84:	f7fd fde2 	bl	801e84c <lv_style_set_margin_bottom>

#endif
}
 8020c88:	bf00      	nop
 8020c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8020c8c:	200200d0 	.word	0x200200d0
 8020c90:	200200a4 	.word	0x200200a4
 8020c94:	0031404f 	.word	0x0031404f
 8020c98:	66666667 	.word	0x66666667

08020c9c <switch_init>:

static void switch_init(void)
{
 8020c9c:	b598      	push	{r3, r4, r7, lr}
 8020c9e:	af00      	add	r7, sp, #0
#if LV_USE_SWITCH != 0
    style_init_reset(&styles->sw_knob);
 8020ca0:	4b5a      	ldr	r3, [pc, #360]	; (8020e0c <switch_init+0x170>)
 8020ca2:	681b      	ldr	r3, [r3, #0]
 8020ca4:	33a0      	adds	r3, #160	; 0xa0
 8020ca6:	4618      	mov	r0, r3
 8020ca8:	f004 fa4e 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020cac:	4b57      	ldr	r3, [pc, #348]	; (8020e0c <switch_init+0x170>)
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	33a0      	adds	r3, #160	; 0xa0
 8020cb2:	22ff      	movs	r2, #255	; 0xff
 8020cb4:	2100      	movs	r1, #0
 8020cb6:	4618      	mov	r0, r3
 8020cb8:	f7fd fe2a 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8020cbc:	4b53      	ldr	r3, [pc, #332]	; (8020e0c <switch_init+0x170>)
 8020cbe:	681b      	ldr	r3, [r3, #0]
 8020cc0:	33a0      	adds	r3, #160	; 0xa0
 8020cc2:	4622      	mov	r2, r4
 8020cc4:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 8020cc8:	4622      	mov	r2, r4
 8020cca:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8020cce:	4622      	mov	r2, r4
 8020cd0:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 8020cd4:	4622      	mov	r2, r4
 8020cd6:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8020cda:	4622      	mov	r2, r4
 8020cdc:	2100      	movs	r1, #0
 8020cde:	4618      	mov	r0, r3
 8020ce0:	f7fd fdff 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020ce4:	4b49      	ldr	r3, [pc, #292]	; (8020e0c <switch_init+0x170>)
 8020ce6:	681b      	ldr	r3, [r3, #0]
 8020ce8:	33a0      	adds	r3, #160	; 0xa0
 8020cea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020cee:	2100      	movs	r1, #0
 8020cf0:	4618      	mov	r0, r3
 8020cf2:	f7fd fcb1 	bl	801e658 <lv_style_set_radius>
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
 8020cf6:	4b45      	ldr	r3, [pc, #276]	; (8020e0c <switch_init+0x170>)
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8020cfe:	2000      	movs	r0, #0
 8020d00:	f7f9 f9fa 	bl	801a0f8 <lv_disp_get_dpi>
 8020d04:	4603      	mov	r3, r0
 8020d06:	3314      	adds	r3, #20
 8020d08:	009b      	lsls	r3, r3, #2
 8020d0a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020d0e:	db0d      	blt.n	8020d2c <switch_init+0x90>
 8020d10:	2000      	movs	r0, #0
 8020d12:	f7f9 f9f1 	bl	801a0f8 <lv_disp_get_dpi>
 8020d16:	4603      	mov	r3, r0
 8020d18:	3314      	adds	r3, #20
 8020d1a:	009b      	lsls	r3, r3, #2
 8020d1c:	4a3c      	ldr	r2, [pc, #240]	; (8020e10 <switch_init+0x174>)
 8020d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8020d22:	1192      	asrs	r2, r2, #6
 8020d24:	17db      	asrs	r3, r3, #31
 8020d26:	1a9b      	subs	r3, r3, r2
 8020d28:	b21b      	sxth	r3, r3
 8020d2a:	e001      	b.n	8020d30 <switch_init+0x94>
 8020d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8020d30:	461a      	mov	r2, r3
 8020d32:	2100      	movs	r1, #0
 8020d34:	4620      	mov	r0, r4
 8020d36:	f7fd fcf3 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
 8020d3a:	4b34      	ldr	r3, [pc, #208]	; (8020e0c <switch_init+0x170>)
 8020d3c:	681b      	ldr	r3, [r3, #0]
 8020d3e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8020d42:	2000      	movs	r0, #0
 8020d44:	f7f9 f9d8 	bl	801a0f8 <lv_disp_get_dpi>
 8020d48:	4603      	mov	r3, r0
 8020d4a:	3314      	adds	r3, #20
 8020d4c:	009b      	lsls	r3, r3, #2
 8020d4e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020d52:	db0d      	blt.n	8020d70 <switch_init+0xd4>
 8020d54:	2000      	movs	r0, #0
 8020d56:	f7f9 f9cf 	bl	801a0f8 <lv_disp_get_dpi>
 8020d5a:	4603      	mov	r3, r0
 8020d5c:	3314      	adds	r3, #20
 8020d5e:	009b      	lsls	r3, r3, #2
 8020d60:	4a2b      	ldr	r2, [pc, #172]	; (8020e10 <switch_init+0x174>)
 8020d62:	fb82 1203 	smull	r1, r2, r2, r3
 8020d66:	1192      	asrs	r2, r2, #6
 8020d68:	17db      	asrs	r3, r3, #31
 8020d6a:	1a9b      	subs	r3, r3, r2
 8020d6c:	b21b      	sxth	r3, r3
 8020d6e:	e001      	b.n	8020d74 <switch_init+0xd8>
 8020d70:	f04f 33ff 	mov.w	r3, #4294967295
 8020d74:	461a      	mov	r2, r3
 8020d76:	2100      	movs	r1, #0
 8020d78:	4620      	mov	r0, r4
 8020d7a:	f7fd fcea 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
 8020d7e:	4b23      	ldr	r3, [pc, #140]	; (8020e0c <switch_init+0x170>)
 8020d80:	681b      	ldr	r3, [r3, #0]
 8020d82:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8020d86:	2000      	movs	r0, #0
 8020d88:	f7f9 f9b6 	bl	801a0f8 <lv_disp_get_dpi>
 8020d8c:	4603      	mov	r3, r0
 8020d8e:	3314      	adds	r3, #20
 8020d90:	009b      	lsls	r3, r3, #2
 8020d92:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020d96:	db0d      	blt.n	8020db4 <switch_init+0x118>
 8020d98:	2000      	movs	r0, #0
 8020d9a:	f7f9 f9ad 	bl	801a0f8 <lv_disp_get_dpi>
 8020d9e:	4603      	mov	r3, r0
 8020da0:	3314      	adds	r3, #20
 8020da2:	009b      	lsls	r3, r3, #2
 8020da4:	4a1a      	ldr	r2, [pc, #104]	; (8020e10 <switch_init+0x174>)
 8020da6:	fb82 1203 	smull	r1, r2, r2, r3
 8020daa:	1192      	asrs	r2, r2, #6
 8020dac:	17db      	asrs	r3, r3, #31
 8020dae:	1a9b      	subs	r3, r3, r2
 8020db0:	b21b      	sxth	r3, r3
 8020db2:	e001      	b.n	8020db8 <switch_init+0x11c>
 8020db4:	f04f 33ff 	mov.w	r3, #4294967295
 8020db8:	461a      	mov	r2, r3
 8020dba:	2100      	movs	r1, #0
 8020dbc:	4620      	mov	r0, r4
 8020dbe:	f7fd fce1 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
 8020dc2:	4b12      	ldr	r3, [pc, #72]	; (8020e0c <switch_init+0x170>)
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8020dca:	2000      	movs	r0, #0
 8020dcc:	f7f9 f994 	bl	801a0f8 <lv_disp_get_dpi>
 8020dd0:	4603      	mov	r3, r0
 8020dd2:	3314      	adds	r3, #20
 8020dd4:	009b      	lsls	r3, r3, #2
 8020dd6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020dda:	db0d      	blt.n	8020df8 <switch_init+0x15c>
 8020ddc:	2000      	movs	r0, #0
 8020dde:	f7f9 f98b 	bl	801a0f8 <lv_disp_get_dpi>
 8020de2:	4603      	mov	r3, r0
 8020de4:	3314      	adds	r3, #20
 8020de6:	009b      	lsls	r3, r3, #2
 8020de8:	4a09      	ldr	r2, [pc, #36]	; (8020e10 <switch_init+0x174>)
 8020dea:	fb82 1203 	smull	r1, r2, r2, r3
 8020dee:	1192      	asrs	r2, r2, #6
 8020df0:	17db      	asrs	r3, r3, #31
 8020df2:	1a9b      	subs	r3, r3, r2
 8020df4:	b21b      	sxth	r3, r3
 8020df6:	e001      	b.n	8020dfc <switch_init+0x160>
 8020df8:	f04f 33ff 	mov.w	r3, #4294967295
 8020dfc:	461a      	mov	r2, r3
 8020dfe:	2100      	movs	r1, #0
 8020e00:	4620      	mov	r0, r4
 8020e02:	f7fd fcd8 	bl	801e7b6 <lv_style_set_pad_right>
#endif
}
 8020e06:	bf00      	nop
 8020e08:	bd98      	pop	{r3, r4, r7, pc}
 8020e0a:	bf00      	nop
 8020e0c:	200200d0 	.word	0x200200d0
 8020e10:	66666667 	.word	0x66666667

08020e14 <linemeter_init>:

static void linemeter_init(void)
{
 8020e14:	b598      	push	{r3, r4, r7, lr}
 8020e16:	af00      	add	r7, sp, #0
#if LV_USE_LINEMETER != 0
    style_init_reset(&styles->lmeter);
 8020e18:	4ba7      	ldr	r3, [pc, #668]	; (80210b8 <linemeter_init+0x2a4>)
 8020e1a:	681b      	ldr	r3, [r3, #0]
 8020e1c:	3374      	adds	r3, #116	; 0x74
 8020e1e:	4618      	mov	r0, r3
 8020e20:	f004 f992 	bl	8025148 <style_init_reset>
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020e24:	4ba4      	ldr	r3, [pc, #656]	; (80210b8 <linemeter_init+0x2a4>)
 8020e26:	681b      	ldr	r3, [r3, #0]
 8020e28:	3374      	adds	r3, #116	; 0x74
 8020e2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020e2e:	2100      	movs	r1, #0
 8020e30:	4618      	mov	r0, r3
 8020e32:	f7fd fc11 	bl	801e658 <lv_style_set_radius>
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8020e36:	4ba0      	ldr	r3, [pc, #640]	; (80210b8 <linemeter_init+0x2a4>)
 8020e38:	681b      	ldr	r3, [r3, #0]
 8020e3a:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8020e3e:	2000      	movs	r0, #0
 8020e40:	f7f9 f95a 	bl	801a0f8 <lv_disp_get_dpi>
 8020e44:	4603      	mov	r3, r0
 8020e46:	461a      	mov	r2, r3
 8020e48:	4613      	mov	r3, r2
 8020e4a:	009b      	lsls	r3, r3, #2
 8020e4c:	4413      	add	r3, r2
 8020e4e:	009b      	lsls	r3, r3, #2
 8020e50:	3350      	adds	r3, #80	; 0x50
 8020e52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020e56:	db11      	blt.n	8020e7c <linemeter_init+0x68>
 8020e58:	2000      	movs	r0, #0
 8020e5a:	f7f9 f94d 	bl	801a0f8 <lv_disp_get_dpi>
 8020e5e:	4603      	mov	r3, r0
 8020e60:	461a      	mov	r2, r3
 8020e62:	4613      	mov	r3, r2
 8020e64:	009b      	lsls	r3, r3, #2
 8020e66:	4413      	add	r3, r2
 8020e68:	009b      	lsls	r3, r3, #2
 8020e6a:	3350      	adds	r3, #80	; 0x50
 8020e6c:	4a93      	ldr	r2, [pc, #588]	; (80210bc <linemeter_init+0x2a8>)
 8020e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8020e72:	1192      	asrs	r2, r2, #6
 8020e74:	17db      	asrs	r3, r3, #31
 8020e76:	1ad3      	subs	r3, r2, r3
 8020e78:	b21b      	sxth	r3, r3
 8020e7a:	e000      	b.n	8020e7e <linemeter_init+0x6a>
 8020e7c:	2301      	movs	r3, #1
 8020e7e:	461a      	mov	r2, r3
 8020e80:	2100      	movs	r1, #0
 8020e82:	4620      	mov	r0, r4
 8020e84:	f7fd fc7e 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8020e88:	4b8b      	ldr	r3, [pc, #556]	; (80210b8 <linemeter_init+0x2a4>)
 8020e8a:	681b      	ldr	r3, [r3, #0]
 8020e8c:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8020e90:	2000      	movs	r0, #0
 8020e92:	f7f9 f931 	bl	801a0f8 <lv_disp_get_dpi>
 8020e96:	4603      	mov	r3, r0
 8020e98:	461a      	mov	r2, r3
 8020e9a:	4613      	mov	r3, r2
 8020e9c:	009b      	lsls	r3, r3, #2
 8020e9e:	4413      	add	r3, r2
 8020ea0:	009b      	lsls	r3, r3, #2
 8020ea2:	3350      	adds	r3, #80	; 0x50
 8020ea4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020ea8:	db11      	blt.n	8020ece <linemeter_init+0xba>
 8020eaa:	2000      	movs	r0, #0
 8020eac:	f7f9 f924 	bl	801a0f8 <lv_disp_get_dpi>
 8020eb0:	4603      	mov	r3, r0
 8020eb2:	461a      	mov	r2, r3
 8020eb4:	4613      	mov	r3, r2
 8020eb6:	009b      	lsls	r3, r3, #2
 8020eb8:	4413      	add	r3, r2
 8020eba:	009b      	lsls	r3, r3, #2
 8020ebc:	3350      	adds	r3, #80	; 0x50
 8020ebe:	4a7f      	ldr	r2, [pc, #508]	; (80210bc <linemeter_init+0x2a8>)
 8020ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8020ec4:	1192      	asrs	r2, r2, #6
 8020ec6:	17db      	asrs	r3, r3, #31
 8020ec8:	1ad3      	subs	r3, r2, r3
 8020eca:	b21b      	sxth	r3, r3
 8020ecc:	e000      	b.n	8020ed0 <linemeter_init+0xbc>
 8020ece:	2301      	movs	r3, #1
 8020ed0:	461a      	mov	r2, r3
 8020ed2:	2100      	movs	r1, #0
 8020ed4:	4620      	mov	r0, r4
 8020ed6:	f7fd fc6e 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8020eda:	4b77      	ldr	r3, [pc, #476]	; (80210b8 <linemeter_init+0x2a4>)
 8020edc:	681b      	ldr	r3, [r3, #0]
 8020ede:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8020ee2:	2000      	movs	r0, #0
 8020ee4:	f7f9 f908 	bl	801a0f8 <lv_disp_get_dpi>
 8020ee8:	4603      	mov	r3, r0
 8020eea:	461a      	mov	r2, r3
 8020eec:	4613      	mov	r3, r2
 8020eee:	009b      	lsls	r3, r3, #2
 8020ef0:	4413      	add	r3, r2
 8020ef2:	009b      	lsls	r3, r3, #2
 8020ef4:	3350      	adds	r3, #80	; 0x50
 8020ef6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020efa:	db11      	blt.n	8020f20 <linemeter_init+0x10c>
 8020efc:	2000      	movs	r0, #0
 8020efe:	f7f9 f8fb 	bl	801a0f8 <lv_disp_get_dpi>
 8020f02:	4603      	mov	r3, r0
 8020f04:	461a      	mov	r2, r3
 8020f06:	4613      	mov	r3, r2
 8020f08:	009b      	lsls	r3, r3, #2
 8020f0a:	4413      	add	r3, r2
 8020f0c:	009b      	lsls	r3, r3, #2
 8020f0e:	3350      	adds	r3, #80	; 0x50
 8020f10:	4a6a      	ldr	r2, [pc, #424]	; (80210bc <linemeter_init+0x2a8>)
 8020f12:	fb82 1203 	smull	r1, r2, r2, r3
 8020f16:	1192      	asrs	r2, r2, #6
 8020f18:	17db      	asrs	r3, r3, #31
 8020f1a:	1ad3      	subs	r3, r2, r3
 8020f1c:	b21b      	sxth	r3, r3
 8020f1e:	e000      	b.n	8020f22 <linemeter_init+0x10e>
 8020f20:	2301      	movs	r3, #1
 8020f22:	461a      	mov	r2, r3
 8020f24:	2100      	movs	r1, #0
 8020f26:	4620      	mov	r0, r4
 8020f28:	f7fd fbfa 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
 8020f2c:	4b62      	ldr	r3, [pc, #392]	; (80210b8 <linemeter_init+0x2a4>)
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8020f34:	2000      	movs	r0, #0
 8020f36:	f7f9 f8df 	bl	801a0f8 <lv_disp_get_dpi>
 8020f3a:	4603      	mov	r3, r0
 8020f3c:	461a      	mov	r2, r3
 8020f3e:	4613      	mov	r3, r2
 8020f40:	011b      	lsls	r3, r3, #4
 8020f42:	1a9b      	subs	r3, r3, r2
 8020f44:	005b      	lsls	r3, r3, #1
 8020f46:	3350      	adds	r3, #80	; 0x50
 8020f48:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020f4c:	db11      	blt.n	8020f72 <linemeter_init+0x15e>
 8020f4e:	2000      	movs	r0, #0
 8020f50:	f7f9 f8d2 	bl	801a0f8 <lv_disp_get_dpi>
 8020f54:	4603      	mov	r3, r0
 8020f56:	461a      	mov	r2, r3
 8020f58:	4613      	mov	r3, r2
 8020f5a:	011b      	lsls	r3, r3, #4
 8020f5c:	1a9b      	subs	r3, r3, r2
 8020f5e:	005b      	lsls	r3, r3, #1
 8020f60:	3350      	adds	r3, #80	; 0x50
 8020f62:	4a56      	ldr	r2, [pc, #344]	; (80210bc <linemeter_init+0x2a8>)
 8020f64:	fb82 1203 	smull	r1, r2, r2, r3
 8020f68:	1192      	asrs	r2, r2, #6
 8020f6a:	17db      	asrs	r3, r3, #31
 8020f6c:	1ad3      	subs	r3, r2, r3
 8020f6e:	b21b      	sxth	r3, r3
 8020f70:	e000      	b.n	8020f74 <linemeter_init+0x160>
 8020f72:	2301      	movs	r3, #1
 8020f74:	461a      	mov	r2, r3
 8020f76:	2100      	movs	r1, #0
 8020f78:	4620      	mov	r0, r4
 8020f7a:	f7fd fc35 	bl	801e7e8 <lv_style_set_pad_inner>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
 8020f7e:	4b4e      	ldr	r3, [pc, #312]	; (80210b8 <linemeter_init+0x2a4>)
 8020f80:	681b      	ldr	r3, [r3, #0]
 8020f82:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8020f86:	2000      	movs	r0, #0
 8020f88:	f7f9 f8b6 	bl	801a0f8 <lv_disp_get_dpi>
 8020f8c:	4603      	mov	r3, r0
 8020f8e:	461a      	mov	r2, r3
 8020f90:	4613      	mov	r3, r2
 8020f92:	009b      	lsls	r3, r3, #2
 8020f94:	4413      	add	r3, r2
 8020f96:	009a      	lsls	r2, r3, #2
 8020f98:	4413      	add	r3, r2
 8020f9a:	3350      	adds	r3, #80	; 0x50
 8020f9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020fa0:	db12      	blt.n	8020fc8 <linemeter_init+0x1b4>
 8020fa2:	2000      	movs	r0, #0
 8020fa4:	f7f9 f8a8 	bl	801a0f8 <lv_disp_get_dpi>
 8020fa8:	4603      	mov	r3, r0
 8020faa:	461a      	mov	r2, r3
 8020fac:	4613      	mov	r3, r2
 8020fae:	009b      	lsls	r3, r3, #2
 8020fb0:	4413      	add	r3, r2
 8020fb2:	009a      	lsls	r2, r3, #2
 8020fb4:	4413      	add	r3, r2
 8020fb6:	3350      	adds	r3, #80	; 0x50
 8020fb8:	4a40      	ldr	r2, [pc, #256]	; (80210bc <linemeter_init+0x2a8>)
 8020fba:	fb82 1203 	smull	r1, r2, r2, r3
 8020fbe:	1192      	asrs	r2, r2, #6
 8020fc0:	17db      	asrs	r3, r3, #31
 8020fc2:	1ad3      	subs	r3, r2, r3
 8020fc4:	b21b      	sxth	r3, r3
 8020fc6:	e000      	b.n	8020fca <linemeter_init+0x1b6>
 8020fc8:	2301      	movs	r3, #1
 8020fca:	461a      	mov	r2, r3
 8020fcc:	2100      	movs	r1, #0
 8020fce:	4620      	mov	r0, r4
 8020fd0:	f7fd fffe 	bl	801efd0 <lv_style_set_scale_width>

    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
 8020fd4:	4b38      	ldr	r3, [pc, #224]	; (80210b8 <linemeter_init+0x2a4>)
 8020fd6:	681b      	ldr	r3, [r3, #0]
 8020fd8:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8020fdc:	4b38      	ldr	r3, [pc, #224]	; (80210c0 <linemeter_init+0x2ac>)
 8020fde:	68da      	ldr	r2, [r3, #12]
 8020fe0:	2100      	movs	r1, #0
 8020fe2:	f7fd ff2d 	bl	801ee40 <lv_style_set_line_color>
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
 8020fe6:	4b34      	ldr	r3, [pc, #208]	; (80210b8 <linemeter_init+0x2a4>)
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8020fee:	4b34      	ldr	r3, [pc, #208]	; (80210c0 <linemeter_init+0x2ac>)
 8020ff0:	68da      	ldr	r2, [r3, #12]
 8020ff2:	2100      	movs	r1, #0
 8020ff4:	f7fe f837 	bl	801f066 <lv_style_set_scale_grad_color>
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 8020ff8:	4b2f      	ldr	r3, [pc, #188]	; (80210b8 <linemeter_init+0x2a4>)
 8020ffa:	681b      	ldr	r3, [r3, #0]
 8020ffc:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8021000:	f640 0088 	movw	r0, #2184	; 0x888
 8021004:	f7fd faf6 	bl	801e5f4 <lv_color_hex3>
 8021008:	4603      	mov	r3, r0
 802100a:	461a      	mov	r2, r3
 802100c:	2100      	movs	r1, #0
 802100e:	4620      	mov	r0, r4
 8021010:	f7fe f840 	bl	801f094 <lv_style_set_scale_end_color>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
 8021014:	4b28      	ldr	r3, [pc, #160]	; (80210b8 <linemeter_init+0x2a4>)
 8021016:	681b      	ldr	r3, [r3, #0]
 8021018:	f103 0474 	add.w	r4, r3, #116	; 0x74
 802101c:	2000      	movs	r0, #0
 802101e:	f7f9 f86b 	bl	801a0f8 <lv_disp_get_dpi>
 8021022:	4603      	mov	r3, r0
 8021024:	461a      	mov	r2, r3
 8021026:	4613      	mov	r3, r2
 8021028:	009b      	lsls	r3, r3, #2
 802102a:	4413      	add	r3, r2
 802102c:	005b      	lsls	r3, r3, #1
 802102e:	3350      	adds	r3, #80	; 0x50
 8021030:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021034:	db11      	blt.n	802105a <linemeter_init+0x246>
 8021036:	2000      	movs	r0, #0
 8021038:	f7f9 f85e 	bl	801a0f8 <lv_disp_get_dpi>
 802103c:	4603      	mov	r3, r0
 802103e:	461a      	mov	r2, r3
 8021040:	4613      	mov	r3, r2
 8021042:	009b      	lsls	r3, r3, #2
 8021044:	4413      	add	r3, r2
 8021046:	005b      	lsls	r3, r3, #1
 8021048:	3350      	adds	r3, #80	; 0x50
 802104a:	4a1c      	ldr	r2, [pc, #112]	; (80210bc <linemeter_init+0x2a8>)
 802104c:	fb82 1203 	smull	r1, r2, r2, r3
 8021050:	1192      	asrs	r2, r2, #6
 8021052:	17db      	asrs	r3, r3, #31
 8021054:	1ad3      	subs	r3, r2, r3
 8021056:	b21b      	sxth	r3, r3
 8021058:	e000      	b.n	802105c <linemeter_init+0x248>
 802105a:	2301      	movs	r3, #1
 802105c:	461a      	mov	r2, r3
 802105e:	2100      	movs	r1, #0
 8021060:	4620      	mov	r0, r4
 8021062:	f7fd fe89 	bl	801ed78 <lv_style_set_line_width>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
 8021066:	4b14      	ldr	r3, [pc, #80]	; (80210b8 <linemeter_init+0x2a4>)
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	f103 0474 	add.w	r4, r3, #116	; 0x74
 802106e:	2000      	movs	r0, #0
 8021070:	f7f9 f842 	bl	801a0f8 <lv_disp_get_dpi>
 8021074:	4603      	mov	r3, r0
 8021076:	461a      	mov	r2, r3
 8021078:	4613      	mov	r3, r2
 802107a:	00db      	lsls	r3, r3, #3
 802107c:	1a9b      	subs	r3, r3, r2
 802107e:	3350      	adds	r3, #80	; 0x50
 8021080:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021084:	db10      	blt.n	80210a8 <linemeter_init+0x294>
 8021086:	2000      	movs	r0, #0
 8021088:	f7f9 f836 	bl	801a0f8 <lv_disp_get_dpi>
 802108c:	4603      	mov	r3, r0
 802108e:	461a      	mov	r2, r3
 8021090:	4613      	mov	r3, r2
 8021092:	00db      	lsls	r3, r3, #3
 8021094:	1a9b      	subs	r3, r3, r2
 8021096:	3350      	adds	r3, #80	; 0x50
 8021098:	4a08      	ldr	r2, [pc, #32]	; (80210bc <linemeter_init+0x2a8>)
 802109a:	fb82 1203 	smull	r1, r2, r2, r3
 802109e:	1192      	asrs	r2, r2, #6
 80210a0:	17db      	asrs	r3, r3, #31
 80210a2:	1ad3      	subs	r3, r2, r3
 80210a4:	b21b      	sxth	r3, r3
 80210a6:	e000      	b.n	80210aa <linemeter_init+0x296>
 80210a8:	2301      	movs	r3, #1
 80210aa:	461a      	mov	r2, r3
 80210ac:	2100      	movs	r1, #0
 80210ae:	4620      	mov	r0, r4
 80210b0:	f7fd ffc0 	bl	801f034 <lv_style_set_scale_end_line_width>
#endif
}
 80210b4:	bf00      	nop
 80210b6:	bd98      	pop	{r3, r4, r7, pc}
 80210b8:	200200d0 	.word	0x200200d0
 80210bc:	66666667 	.word	0x66666667
 80210c0:	200200a4 	.word	0x200200a4

080210c4 <gauge_init>:

static void gauge_init(void)
{
 80210c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210c6:	af00      	add	r7, sp, #0
#if LV_USE_GAUGE != 0
    style_init_reset(&styles->gauge_main);
 80210c8:	4bd6      	ldr	r3, [pc, #856]	; (8021424 <gauge_init+0x360>)
 80210ca:	681b      	ldr	r3, [r3, #0]
 80210cc:	3360      	adds	r3, #96	; 0x60
 80210ce:	4618      	mov	r0, r3
 80210d0:	f004 f83a 	bl	8025148 <style_init_reset>
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80210d4:	4bd3      	ldr	r3, [pc, #844]	; (8021424 <gauge_init+0x360>)
 80210d6:	681b      	ldr	r3, [r3, #0]
 80210d8:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80210dc:	f640 0088 	movw	r0, #2184	; 0x888
 80210e0:	f7fd fa88 	bl	801e5f4 <lv_color_hex3>
 80210e4:	4603      	mov	r3, r0
 80210e6:	461a      	mov	r2, r3
 80210e8:	2100      	movs	r1, #0
 80210ea:	4630      	mov	r0, r6
 80210ec:	f7fd fea8 	bl	801ee40 <lv_style_set_line_color>
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80210f0:	4bcc      	ldr	r3, [pc, #816]	; (8021424 <gauge_init+0x360>)
 80210f2:	681b      	ldr	r3, [r3, #0]
 80210f4:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80210f8:	f640 0088 	movw	r0, #2184	; 0x888
 80210fc:	f7fd fa7a 	bl	801e5f4 <lv_color_hex3>
 8021100:	4603      	mov	r3, r0
 8021102:	461a      	mov	r2, r3
 8021104:	2100      	movs	r1, #0
 8021106:	4630      	mov	r0, r6
 8021108:	f7fd ffad 	bl	801f066 <lv_style_set_scale_grad_color>
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
 802110c:	4bc5      	ldr	r3, [pc, #788]	; (8021424 <gauge_init+0x360>)
 802110e:	681b      	ldr	r3, [r3, #0]
 8021110:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8021114:	4bc4      	ldr	r3, [pc, #784]	; (8021428 <gauge_init+0x364>)
 8021116:	68da      	ldr	r2, [r3, #12]
 8021118:	2100      	movs	r1, #0
 802111a:	f7fd ffbb 	bl	801f094 <lv_style_set_scale_end_color>
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
 802111e:	4bc1      	ldr	r3, [pc, #772]	; (8021424 <gauge_init+0x360>)
 8021120:	681b      	ldr	r3, [r3, #0]
 8021122:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021126:	2000      	movs	r0, #0
 8021128:	f7f8 ffe6 	bl	801a0f8 <lv_disp_get_dpi>
 802112c:	4603      	mov	r3, r0
 802112e:	461a      	mov	r2, r3
 8021130:	4613      	mov	r3, r2
 8021132:	009b      	lsls	r3, r3, #2
 8021134:	4413      	add	r3, r2
 8021136:	3350      	adds	r3, #80	; 0x50
 8021138:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802113c:	db10      	blt.n	8021160 <gauge_init+0x9c>
 802113e:	2000      	movs	r0, #0
 8021140:	f7f8 ffda 	bl	801a0f8 <lv_disp_get_dpi>
 8021144:	4603      	mov	r3, r0
 8021146:	461a      	mov	r2, r3
 8021148:	4613      	mov	r3, r2
 802114a:	009b      	lsls	r3, r3, #2
 802114c:	4413      	add	r3, r2
 802114e:	3350      	adds	r3, #80	; 0x50
 8021150:	4ab6      	ldr	r2, [pc, #728]	; (802142c <gauge_init+0x368>)
 8021152:	fb82 1203 	smull	r1, r2, r2, r3
 8021156:	1192      	asrs	r2, r2, #6
 8021158:	17db      	asrs	r3, r3, #31
 802115a:	1ad3      	subs	r3, r2, r3
 802115c:	b21b      	sxth	r3, r3
 802115e:	e000      	b.n	8021162 <gauge_init+0x9e>
 8021160:	2301      	movs	r3, #1
 8021162:	461a      	mov	r2, r3
 8021164:	2100      	movs	r1, #0
 8021166:	4630      	mov	r0, r6
 8021168:	f7fd fe06 	bl	801ed78 <lv_style_set_line_width>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
 802116c:	4bad      	ldr	r3, [pc, #692]	; (8021424 <gauge_init+0x360>)
 802116e:	681b      	ldr	r3, [r3, #0]
 8021170:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021174:	2000      	movs	r0, #0
 8021176:	f7f8 ffbf 	bl	801a0f8 <lv_disp_get_dpi>
 802117a:	4603      	mov	r3, r0
 802117c:	3314      	adds	r3, #20
 802117e:	009b      	lsls	r3, r3, #2
 8021180:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021184:	db0d      	blt.n	80211a2 <gauge_init+0xde>
 8021186:	2000      	movs	r0, #0
 8021188:	f7f8 ffb6 	bl	801a0f8 <lv_disp_get_dpi>
 802118c:	4603      	mov	r3, r0
 802118e:	3314      	adds	r3, #20
 8021190:	009b      	lsls	r3, r3, #2
 8021192:	4aa6      	ldr	r2, [pc, #664]	; (802142c <gauge_init+0x368>)
 8021194:	fb82 1203 	smull	r1, r2, r2, r3
 8021198:	1192      	asrs	r2, r2, #6
 802119a:	17db      	asrs	r3, r3, #31
 802119c:	1ad3      	subs	r3, r2, r3
 802119e:	b21b      	sxth	r3, r3
 80211a0:	e000      	b.n	80211a4 <gauge_init+0xe0>
 80211a2:	2301      	movs	r3, #1
 80211a4:	461a      	mov	r2, r3
 80211a6:	2100      	movs	r1, #0
 80211a8:	4630      	mov	r0, r6
 80211aa:	f7fd ff43 	bl	801f034 <lv_style_set_scale_end_line_width>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
 80211ae:	4b9d      	ldr	r3, [pc, #628]	; (8021424 <gauge_init+0x360>)
 80211b0:	681b      	ldr	r3, [r3, #0]
 80211b2:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80211b6:	2000      	movs	r0, #0
 80211b8:	f7f8 ff9e 	bl	801a0f8 <lv_disp_get_dpi>
 80211bc:	4603      	mov	r3, r0
 80211be:	330a      	adds	r3, #10
 80211c0:	00db      	lsls	r3, r3, #3
 80211c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80211c6:	db0d      	blt.n	80211e4 <gauge_init+0x120>
 80211c8:	2000      	movs	r0, #0
 80211ca:	f7f8 ff95 	bl	801a0f8 <lv_disp_get_dpi>
 80211ce:	4603      	mov	r3, r0
 80211d0:	330a      	adds	r3, #10
 80211d2:	00db      	lsls	r3, r3, #3
 80211d4:	4a95      	ldr	r2, [pc, #596]	; (802142c <gauge_init+0x368>)
 80211d6:	fb82 1203 	smull	r1, r2, r2, r3
 80211da:	1192      	asrs	r2, r2, #6
 80211dc:	17db      	asrs	r3, r3, #31
 80211de:	1ad3      	subs	r3, r2, r3
 80211e0:	b21b      	sxth	r3, r3
 80211e2:	e000      	b.n	80211e6 <gauge_init+0x122>
 80211e4:	2301      	movs	r3, #1
 80211e6:	461a      	mov	r2, r3
 80211e8:	2100      	movs	r1, #0
 80211ea:	4630      	mov	r0, r6
 80211ec:	f7fd ff09 	bl	801f002 <lv_style_set_scale_end_border_width>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80211f0:	4b8c      	ldr	r3, [pc, #560]	; (8021424 <gauge_init+0x360>)
 80211f2:	681b      	ldr	r3, [r3, #0]
 80211f4:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80211f8:	2000      	movs	r0, #0
 80211fa:	f7f8 ff7d 	bl	801a0f8 <lv_disp_get_dpi>
 80211fe:	4603      	mov	r3, r0
 8021200:	461a      	mov	r2, r3
 8021202:	4613      	mov	r3, r2
 8021204:	009b      	lsls	r3, r3, #2
 8021206:	4413      	add	r3, r2
 8021208:	009b      	lsls	r3, r3, #2
 802120a:	3350      	adds	r3, #80	; 0x50
 802120c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021210:	db11      	blt.n	8021236 <gauge_init+0x172>
 8021212:	2000      	movs	r0, #0
 8021214:	f7f8 ff70 	bl	801a0f8 <lv_disp_get_dpi>
 8021218:	4603      	mov	r3, r0
 802121a:	461a      	mov	r2, r3
 802121c:	4613      	mov	r3, r2
 802121e:	009b      	lsls	r3, r3, #2
 8021220:	4413      	add	r3, r2
 8021222:	009b      	lsls	r3, r3, #2
 8021224:	3350      	adds	r3, #80	; 0x50
 8021226:	4a81      	ldr	r2, [pc, #516]	; (802142c <gauge_init+0x368>)
 8021228:	fb82 1203 	smull	r1, r2, r2, r3
 802122c:	1192      	asrs	r2, r2, #6
 802122e:	17db      	asrs	r3, r3, #31
 8021230:	1ad3      	subs	r3, r2, r3
 8021232:	b21b      	sxth	r3, r3
 8021234:	e000      	b.n	8021238 <gauge_init+0x174>
 8021236:	2301      	movs	r3, #1
 8021238:	461a      	mov	r2, r3
 802123a:	2100      	movs	r1, #0
 802123c:	4630      	mov	r0, r6
 802123e:	f7fd faa1 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 8021242:	4b78      	ldr	r3, [pc, #480]	; (8021424 <gauge_init+0x360>)
 8021244:	681b      	ldr	r3, [r3, #0]
 8021246:	f103 0660 	add.w	r6, r3, #96	; 0x60
 802124a:	2000      	movs	r0, #0
 802124c:	f7f8 ff54 	bl	801a0f8 <lv_disp_get_dpi>
 8021250:	4603      	mov	r3, r0
 8021252:	461a      	mov	r2, r3
 8021254:	4613      	mov	r3, r2
 8021256:	009b      	lsls	r3, r3, #2
 8021258:	4413      	add	r3, r2
 802125a:	009b      	lsls	r3, r3, #2
 802125c:	3350      	adds	r3, #80	; 0x50
 802125e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021262:	db11      	blt.n	8021288 <gauge_init+0x1c4>
 8021264:	2000      	movs	r0, #0
 8021266:	f7f8 ff47 	bl	801a0f8 <lv_disp_get_dpi>
 802126a:	4603      	mov	r3, r0
 802126c:	461a      	mov	r2, r3
 802126e:	4613      	mov	r3, r2
 8021270:	009b      	lsls	r3, r3, #2
 8021272:	4413      	add	r3, r2
 8021274:	009b      	lsls	r3, r3, #2
 8021276:	3350      	adds	r3, #80	; 0x50
 8021278:	4a6c      	ldr	r2, [pc, #432]	; (802142c <gauge_init+0x368>)
 802127a:	fb82 1203 	smull	r1, r2, r2, r3
 802127e:	1192      	asrs	r2, r2, #6
 8021280:	17db      	asrs	r3, r3, #31
 8021282:	1ad3      	subs	r3, r2, r3
 8021284:	b21b      	sxth	r3, r3
 8021286:	e000      	b.n	802128a <gauge_init+0x1c6>
 8021288:	2301      	movs	r3, #1
 802128a:	461a      	mov	r2, r3
 802128c:	2100      	movs	r1, #0
 802128e:	4630      	mov	r0, r6
 8021290:	f7fd fa91 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 8021294:	4b63      	ldr	r3, [pc, #396]	; (8021424 <gauge_init+0x360>)
 8021296:	681b      	ldr	r3, [r3, #0]
 8021298:	f103 0660 	add.w	r6, r3, #96	; 0x60
 802129c:	2000      	movs	r0, #0
 802129e:	f7f8 ff2b 	bl	801a0f8 <lv_disp_get_dpi>
 80212a2:	4603      	mov	r3, r0
 80212a4:	461a      	mov	r2, r3
 80212a6:	4613      	mov	r3, r2
 80212a8:	009b      	lsls	r3, r3, #2
 80212aa:	4413      	add	r3, r2
 80212ac:	009b      	lsls	r3, r3, #2
 80212ae:	3350      	adds	r3, #80	; 0x50
 80212b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80212b4:	db11      	blt.n	80212da <gauge_init+0x216>
 80212b6:	2000      	movs	r0, #0
 80212b8:	f7f8 ff1e 	bl	801a0f8 <lv_disp_get_dpi>
 80212bc:	4603      	mov	r3, r0
 80212be:	461a      	mov	r2, r3
 80212c0:	4613      	mov	r3, r2
 80212c2:	009b      	lsls	r3, r3, #2
 80212c4:	4413      	add	r3, r2
 80212c6:	009b      	lsls	r3, r3, #2
 80212c8:	3350      	adds	r3, #80	; 0x50
 80212ca:	4a58      	ldr	r2, [pc, #352]	; (802142c <gauge_init+0x368>)
 80212cc:	fb82 1203 	smull	r1, r2, r2, r3
 80212d0:	1192      	asrs	r2, r2, #6
 80212d2:	17db      	asrs	r3, r3, #31
 80212d4:	1ad3      	subs	r3, r2, r3
 80212d6:	b21b      	sxth	r3, r3
 80212d8:	e000      	b.n	80212dc <gauge_init+0x218>
 80212da:	2301      	movs	r3, #1
 80212dc:	461a      	mov	r2, r3
 80212de:	2100      	movs	r1, #0
 80212e0:	4630      	mov	r0, r6
 80212e2:	f7fd fa1d 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80212e6:	4b4f      	ldr	r3, [pc, #316]	; (8021424 <gauge_init+0x360>)
 80212e8:	681b      	ldr	r3, [r3, #0]
 80212ea:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80212ee:	2000      	movs	r0, #0
 80212f0:	f7f8 ff02 	bl	801a0f8 <lv_disp_get_dpi>
 80212f4:	4603      	mov	r3, r0
 80212f6:	461a      	mov	r2, r3
 80212f8:	4613      	mov	r3, r2
 80212fa:	009b      	lsls	r3, r3, #2
 80212fc:	4413      	add	r3, r2
 80212fe:	009b      	lsls	r3, r3, #2
 8021300:	3350      	adds	r3, #80	; 0x50
 8021302:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021306:	db11      	blt.n	802132c <gauge_init+0x268>
 8021308:	2000      	movs	r0, #0
 802130a:	f7f8 fef5 	bl	801a0f8 <lv_disp_get_dpi>
 802130e:	4603      	mov	r3, r0
 8021310:	461a      	mov	r2, r3
 8021312:	4613      	mov	r3, r2
 8021314:	009b      	lsls	r3, r3, #2
 8021316:	4413      	add	r3, r2
 8021318:	009b      	lsls	r3, r3, #2
 802131a:	3350      	adds	r3, #80	; 0x50
 802131c:	4a43      	ldr	r2, [pc, #268]	; (802142c <gauge_init+0x368>)
 802131e:	fb82 1203 	smull	r1, r2, r2, r3
 8021322:	1192      	asrs	r2, r2, #6
 8021324:	17db      	asrs	r3, r3, #31
 8021326:	1ad3      	subs	r3, r2, r3
 8021328:	b21b      	sxth	r3, r3
 802132a:	e000      	b.n	802132e <gauge_init+0x26a>
 802132c:	2301      	movs	r3, #1
 802132e:	461a      	mov	r2, r3
 8021330:	2100      	movs	r1, #0
 8021332:	4630      	mov	r0, r6
 8021334:	f7fd fa58 	bl	801e7e8 <lv_style_set_pad_inner>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
 8021338:	4b3a      	ldr	r3, [pc, #232]	; (8021424 <gauge_init+0x360>)
 802133a:	681b      	ldr	r3, [r3, #0]
 802133c:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021340:	2000      	movs	r0, #0
 8021342:	f7f8 fed9 	bl	801a0f8 <lv_disp_get_dpi>
 8021346:	4603      	mov	r3, r0
 8021348:	461a      	mov	r2, r3
 802134a:	4613      	mov	r3, r2
 802134c:	011b      	lsls	r3, r3, #4
 802134e:	1a9b      	subs	r3, r3, r2
 8021350:	3350      	adds	r3, #80	; 0x50
 8021352:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021356:	db10      	blt.n	802137a <gauge_init+0x2b6>
 8021358:	2000      	movs	r0, #0
 802135a:	f7f8 fecd 	bl	801a0f8 <lv_disp_get_dpi>
 802135e:	4603      	mov	r3, r0
 8021360:	461a      	mov	r2, r3
 8021362:	4613      	mov	r3, r2
 8021364:	011b      	lsls	r3, r3, #4
 8021366:	1a9b      	subs	r3, r3, r2
 8021368:	3350      	adds	r3, #80	; 0x50
 802136a:	4a30      	ldr	r2, [pc, #192]	; (802142c <gauge_init+0x368>)
 802136c:	fb82 1203 	smull	r1, r2, r2, r3
 8021370:	1192      	asrs	r2, r2, #6
 8021372:	17db      	asrs	r3, r3, #31
 8021374:	1ad3      	subs	r3, r2, r3
 8021376:	b21b      	sxth	r3, r3
 8021378:	e000      	b.n	802137c <gauge_init+0x2b8>
 802137a:	2301      	movs	r3, #1
 802137c:	461a      	mov	r2, r3
 802137e:	2100      	movs	r1, #0
 8021380:	4630      	mov	r0, r6
 8021382:	f7fd fe25 	bl	801efd0 <lv_style_set_scale_width>
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8021386:	4b27      	ldr	r3, [pc, #156]	; (8021424 <gauge_init+0x360>)
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	3360      	adds	r3, #96	; 0x60
 802138c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8021390:	2100      	movs	r1, #0
 8021392:	4618      	mov	r0, r3
 8021394:	f7fd f960 	bl	801e658 <lv_style_set_radius>

    style_init_reset(&styles->gauge_strong);
 8021398:	4b22      	ldr	r3, [pc, #136]	; (8021424 <gauge_init+0x360>)
 802139a:	681b      	ldr	r3, [r3, #0]
 802139c:	3364      	adds	r3, #100	; 0x64
 802139e:	4618      	mov	r0, r3
 80213a0:	f003 fed2 	bl	8025148 <style_init_reset>
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80213a4:	4b1f      	ldr	r3, [pc, #124]	; (8021424 <gauge_init+0x360>)
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	f103 0664 	add.w	r6, r3, #100	; 0x64
 80213ac:	f640 0088 	movw	r0, #2184	; 0x888
 80213b0:	f7fd f920 	bl	801e5f4 <lv_color_hex3>
 80213b4:	4603      	mov	r3, r0
 80213b6:	461a      	mov	r2, r3
 80213b8:	2100      	movs	r1, #0
 80213ba:	4630      	mov	r0, r6
 80213bc:	f7fd fd40 	bl	801ee40 <lv_style_set_line_color>
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80213c0:	4b18      	ldr	r3, [pc, #96]	; (8021424 <gauge_init+0x360>)
 80213c2:	681b      	ldr	r3, [r3, #0]
 80213c4:	f103 0664 	add.w	r6, r3, #100	; 0x64
 80213c8:	f640 0088 	movw	r0, #2184	; 0x888
 80213cc:	f7fd f912 	bl	801e5f4 <lv_color_hex3>
 80213d0:	4603      	mov	r3, r0
 80213d2:	461a      	mov	r2, r3
 80213d4:	2100      	movs	r1, #0
 80213d6:	4630      	mov	r0, r6
 80213d8:	f7fd fe45 	bl	801f066 <lv_style_set_scale_grad_color>
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
 80213dc:	4b11      	ldr	r3, [pc, #68]	; (8021424 <gauge_init+0x360>)
 80213de:	681b      	ldr	r3, [r3, #0]
 80213e0:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80213e4:	4b10      	ldr	r3, [pc, #64]	; (8021428 <gauge_init+0x364>)
 80213e6:	68da      	ldr	r2, [r3, #12]
 80213e8:	2100      	movs	r1, #0
 80213ea:	f7fd fe53 	bl	801f094 <lv_style_set_scale_end_color>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 80213ee:	4b0d      	ldr	r3, [pc, #52]	; (8021424 <gauge_init+0x360>)
 80213f0:	681b      	ldr	r3, [r3, #0]
 80213f2:	f103 0664 	add.w	r6, r3, #100	; 0x64
 80213f6:	2000      	movs	r0, #0
 80213f8:	f7f8 fe7e 	bl	801a0f8 <lv_disp_get_dpi>
 80213fc:	4603      	mov	r3, r0
 80213fe:	330a      	adds	r3, #10
 8021400:	00db      	lsls	r3, r3, #3
 8021402:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021406:	db13      	blt.n	8021430 <gauge_init+0x36c>
 8021408:	2000      	movs	r0, #0
 802140a:	f7f8 fe75 	bl	801a0f8 <lv_disp_get_dpi>
 802140e:	4603      	mov	r3, r0
 8021410:	330a      	adds	r3, #10
 8021412:	00db      	lsls	r3, r3, #3
 8021414:	4a05      	ldr	r2, [pc, #20]	; (802142c <gauge_init+0x368>)
 8021416:	fb82 1203 	smull	r1, r2, r2, r3
 802141a:	1192      	asrs	r2, r2, #6
 802141c:	17db      	asrs	r3, r3, #31
 802141e:	1ad3      	subs	r3, r2, r3
 8021420:	b21b      	sxth	r3, r3
 8021422:	e006      	b.n	8021432 <gauge_init+0x36e>
 8021424:	200200d0 	.word	0x200200d0
 8021428:	200200a4 	.word	0x200200a4
 802142c:	66666667 	.word	0x66666667
 8021430:	2301      	movs	r3, #1
 8021432:	461a      	mov	r2, r3
 8021434:	2100      	movs	r1, #0
 8021436:	4630      	mov	r0, r6
 8021438:	f7fd fc9e 	bl	801ed78 <lv_style_set_line_width>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 802143c:	4b8b      	ldr	r3, [pc, #556]	; (802166c <gauge_init+0x5a8>)
 802143e:	681b      	ldr	r3, [r3, #0]
 8021440:	f103 0664 	add.w	r6, r3, #100	; 0x64
 8021444:	2000      	movs	r0, #0
 8021446:	f7f8 fe57 	bl	801a0f8 <lv_disp_get_dpi>
 802144a:	4603      	mov	r3, r0
 802144c:	330a      	adds	r3, #10
 802144e:	00db      	lsls	r3, r3, #3
 8021450:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021454:	db0d      	blt.n	8021472 <gauge_init+0x3ae>
 8021456:	2000      	movs	r0, #0
 8021458:	f7f8 fe4e 	bl	801a0f8 <lv_disp_get_dpi>
 802145c:	4603      	mov	r3, r0
 802145e:	330a      	adds	r3, #10
 8021460:	00db      	lsls	r3, r3, #3
 8021462:	4a83      	ldr	r2, [pc, #524]	; (8021670 <gauge_init+0x5ac>)
 8021464:	fb82 1203 	smull	r1, r2, r2, r3
 8021468:	1192      	asrs	r2, r2, #6
 802146a:	17db      	asrs	r3, r3, #31
 802146c:	1ad3      	subs	r3, r2, r3
 802146e:	b21b      	sxth	r3, r3
 8021470:	e000      	b.n	8021474 <gauge_init+0x3b0>
 8021472:	2301      	movs	r3, #1
 8021474:	461a      	mov	r2, r3
 8021476:	2100      	movs	r1, #0
 8021478:	4630      	mov	r0, r6
 802147a:	f7fd fddb 	bl	801f034 <lv_style_set_scale_end_line_width>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
 802147e:	4b7b      	ldr	r3, [pc, #492]	; (802166c <gauge_init+0x5a8>)
 8021480:	681b      	ldr	r3, [r3, #0]
 8021482:	f103 0664 	add.w	r6, r3, #100	; 0x64
 8021486:	2000      	movs	r0, #0
 8021488:	f7f8 fe36 	bl	801a0f8 <lv_disp_get_dpi>
 802148c:	4603      	mov	r3, r0
 802148e:	461a      	mov	r2, r3
 8021490:	4613      	mov	r3, r2
 8021492:	009b      	lsls	r3, r3, #2
 8021494:	4413      	add	r3, r2
 8021496:	009a      	lsls	r2, r3, #2
 8021498:	4413      	add	r3, r2
 802149a:	3350      	adds	r3, #80	; 0x50
 802149c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80214a0:	db12      	blt.n	80214c8 <gauge_init+0x404>
 80214a2:	2000      	movs	r0, #0
 80214a4:	f7f8 fe28 	bl	801a0f8 <lv_disp_get_dpi>
 80214a8:	4603      	mov	r3, r0
 80214aa:	461a      	mov	r2, r3
 80214ac:	4613      	mov	r3, r2
 80214ae:	009b      	lsls	r3, r3, #2
 80214b0:	4413      	add	r3, r2
 80214b2:	009a      	lsls	r2, r3, #2
 80214b4:	4413      	add	r3, r2
 80214b6:	3350      	adds	r3, #80	; 0x50
 80214b8:	4a6d      	ldr	r2, [pc, #436]	; (8021670 <gauge_init+0x5ac>)
 80214ba:	fb82 1203 	smull	r1, r2, r2, r3
 80214be:	1192      	asrs	r2, r2, #6
 80214c0:	17db      	asrs	r3, r3, #31
 80214c2:	1ad3      	subs	r3, r2, r3
 80214c4:	b21b      	sxth	r3, r3
 80214c6:	e000      	b.n	80214ca <gauge_init+0x406>
 80214c8:	2301      	movs	r3, #1
 80214ca:	461a      	mov	r2, r3
 80214cc:	2100      	movs	r1, #0
 80214ce:	4630      	mov	r0, r6
 80214d0:	f7fd fd7e 	bl	801efd0 <lv_style_set_scale_width>

    style_init_reset(&styles->gauge_needle);
 80214d4:	4b65      	ldr	r3, [pc, #404]	; (802166c <gauge_init+0x5a8>)
 80214d6:	681b      	ldr	r3, [r3, #0]
 80214d8:	3368      	adds	r3, #104	; 0x68
 80214da:	4618      	mov	r0, r3
 80214dc:	f003 fe34 	bl	8025148 <style_init_reset>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 80214e0:	4b62      	ldr	r3, [pc, #392]	; (802166c <gauge_init+0x5a8>)
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	f103 0668 	add.w	r6, r3, #104	; 0x68
 80214e8:	4b62      	ldr	r3, [pc, #392]	; (8021674 <gauge_init+0x5b0>)
 80214ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80214ec:	f003 0302 	and.w	r3, r3, #2
 80214f0:	2b00      	cmp	r3, #0
 80214f2:	d004      	beq.n	80214fe <gauge_init+0x43a>
 80214f4:	4860      	ldr	r0, [pc, #384]	; (8021678 <gauge_init+0x5b4>)
 80214f6:	f7fd f869 	bl	801e5cc <lv_color_hex>
 80214fa:	4605      	mov	r5, r0
 80214fc:	e00b      	b.n	8021516 <gauge_init+0x452>
 80214fe:	462b      	mov	r3, r5
 8021500:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 8021504:	462b      	mov	r3, r5
 8021506:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 802150a:	462b      	mov	r3, r5
 802150c:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 8021510:	462b      	mov	r3, r5
 8021512:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 8021516:	462a      	mov	r2, r5
 8021518:	2100      	movs	r1, #0
 802151a:	4630      	mov	r0, r6
 802151c:	f7fd fc90 	bl	801ee40 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
 8021520:	4b52      	ldr	r3, [pc, #328]	; (802166c <gauge_init+0x5a8>)
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	f103 0568 	add.w	r5, r3, #104	; 0x68
 8021528:	2000      	movs	r0, #0
 802152a:	f7f8 fde5 	bl	801a0f8 <lv_disp_get_dpi>
 802152e:	4603      	mov	r3, r0
 8021530:	330a      	adds	r3, #10
 8021532:	00db      	lsls	r3, r3, #3
 8021534:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021538:	db0d      	blt.n	8021556 <gauge_init+0x492>
 802153a:	2000      	movs	r0, #0
 802153c:	f7f8 fddc 	bl	801a0f8 <lv_disp_get_dpi>
 8021540:	4603      	mov	r3, r0
 8021542:	330a      	adds	r3, #10
 8021544:	00db      	lsls	r3, r3, #3
 8021546:	4a4a      	ldr	r2, [pc, #296]	; (8021670 <gauge_init+0x5ac>)
 8021548:	fb82 1203 	smull	r1, r2, r2, r3
 802154c:	1192      	asrs	r2, r2, #6
 802154e:	17db      	asrs	r3, r3, #31
 8021550:	1ad3      	subs	r3, r2, r3
 8021552:	b21b      	sxth	r3, r3
 8021554:	e000      	b.n	8021558 <gauge_init+0x494>
 8021556:	2301      	movs	r3, #1
 8021558:	461a      	mov	r2, r3
 802155a:	2100      	movs	r1, #0
 802155c:	4628      	mov	r0, r5
 802155e:	f7fd fc0b 	bl	801ed78 <lv_style_set_line_width>
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
 8021562:	4b42      	ldr	r3, [pc, #264]	; (802166c <gauge_init+0x5a8>)
 8021564:	681b      	ldr	r3, [r3, #0]
 8021566:	3368      	adds	r3, #104	; 0x68
 8021568:	22ff      	movs	r2, #255	; 0xff
 802156a:	2100      	movs	r1, #0
 802156c:	4618      	mov	r0, r3
 802156e:	f7fd f9cf 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 8021572:	4b3e      	ldr	r3, [pc, #248]	; (802166c <gauge_init+0x5a8>)
 8021574:	681b      	ldr	r3, [r3, #0]
 8021576:	f103 0568 	add.w	r5, r3, #104	; 0x68
 802157a:	4b3e      	ldr	r3, [pc, #248]	; (8021674 <gauge_init+0x5b0>)
 802157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802157e:	f003 0302 	and.w	r3, r3, #2
 8021582:	2b00      	cmp	r3, #0
 8021584:	d004      	beq.n	8021590 <gauge_init+0x4cc>
 8021586:	483c      	ldr	r0, [pc, #240]	; (8021678 <gauge_init+0x5b4>)
 8021588:	f7fd f820 	bl	801e5cc <lv_color_hex>
 802158c:	4604      	mov	r4, r0
 802158e:	e00b      	b.n	80215a8 <gauge_init+0x4e4>
 8021590:	4623      	mov	r3, r4
 8021592:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 8021596:	4623      	mov	r3, r4
 8021598:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 802159c:	4623      	mov	r3, r4
 802159e:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 80215a2:	4623      	mov	r3, r4
 80215a4:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 80215a8:	4622      	mov	r2, r4
 80215aa:	2100      	movs	r1, #0
 80215ac:	4628      	mov	r0, r5
 80215ae:	f7fd f998 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80215b2:	4b2e      	ldr	r3, [pc, #184]	; (802166c <gauge_init+0x5a8>)
 80215b4:	681b      	ldr	r3, [r3, #0]
 80215b6:	3368      	adds	r3, #104	; 0x68
 80215b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80215bc:	2100      	movs	r1, #0
 80215be:	4618      	mov	r0, r3
 80215c0:	f7fd f84a 	bl	801e658 <lv_style_set_radius>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
 80215c4:	4b29      	ldr	r3, [pc, #164]	; (802166c <gauge_init+0x5a8>)
 80215c6:	681b      	ldr	r3, [r3, #0]
 80215c8:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80215cc:	2000      	movs	r0, #0
 80215ce:	f7f8 fd93 	bl	801a0f8 <lv_disp_get_dpi>
 80215d2:	4603      	mov	r3, r0
 80215d4:	461a      	mov	r2, r3
 80215d6:	4613      	mov	r3, r2
 80215d8:	011b      	lsls	r3, r3, #4
 80215da:	1a9b      	subs	r3, r3, r2
 80215dc:	005b      	lsls	r3, r3, #1
 80215de:	3350      	adds	r3, #80	; 0x50
 80215e0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80215e4:	db11      	blt.n	802160a <gauge_init+0x546>
 80215e6:	2000      	movs	r0, #0
 80215e8:	f7f8 fd86 	bl	801a0f8 <lv_disp_get_dpi>
 80215ec:	4603      	mov	r3, r0
 80215ee:	461a      	mov	r2, r3
 80215f0:	4613      	mov	r3, r2
 80215f2:	011b      	lsls	r3, r3, #4
 80215f4:	1a9b      	subs	r3, r3, r2
 80215f6:	005b      	lsls	r3, r3, #1
 80215f8:	3350      	adds	r3, #80	; 0x50
 80215fa:	4a1d      	ldr	r2, [pc, #116]	; (8021670 <gauge_init+0x5ac>)
 80215fc:	fb82 1203 	smull	r1, r2, r2, r3
 8021600:	1192      	asrs	r2, r2, #6
 8021602:	17db      	asrs	r3, r3, #31
 8021604:	1ad3      	subs	r3, r2, r3
 8021606:	b21b      	sxth	r3, r3
 8021608:	e000      	b.n	802160c <gauge_init+0x548>
 802160a:	2301      	movs	r3, #1
 802160c:	461a      	mov	r2, r3
 802160e:	2100      	movs	r1, #0
 8021610:	4620      	mov	r0, r4
 8021612:	f7fd f853 	bl	801e6bc <lv_style_set_size>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
 8021616:	4b15      	ldr	r3, [pc, #84]	; (802166c <gauge_init+0x5a8>)
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 802161e:	2000      	movs	r0, #0
 8021620:	f7f8 fd6a 	bl	801a0f8 <lv_disp_get_dpi>
 8021624:	4603      	mov	r3, r0
 8021626:	461a      	mov	r2, r3
 8021628:	4613      	mov	r3, r2
 802162a:	009b      	lsls	r3, r3, #2
 802162c:	4413      	add	r3, r2
 802162e:	005b      	lsls	r3, r3, #1
 8021630:	3350      	adds	r3, #80	; 0x50
 8021632:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021636:	db11      	blt.n	802165c <gauge_init+0x598>
 8021638:	2000      	movs	r0, #0
 802163a:	f7f8 fd5d 	bl	801a0f8 <lv_disp_get_dpi>
 802163e:	4603      	mov	r3, r0
 8021640:	461a      	mov	r2, r3
 8021642:	4613      	mov	r3, r2
 8021644:	009b      	lsls	r3, r3, #2
 8021646:	4413      	add	r3, r2
 8021648:	005b      	lsls	r3, r3, #1
 802164a:	3350      	adds	r3, #80	; 0x50
 802164c:	4a08      	ldr	r2, [pc, #32]	; (8021670 <gauge_init+0x5ac>)
 802164e:	fb82 1203 	smull	r1, r2, r2, r3
 8021652:	1192      	asrs	r2, r2, #6
 8021654:	17db      	asrs	r3, r3, #31
 8021656:	1ad3      	subs	r3, r2, r3
 8021658:	b21b      	sxth	r3, r3
 802165a:	e000      	b.n	802165e <gauge_init+0x59a>
 802165c:	2301      	movs	r3, #1
 802165e:	461a      	mov	r2, r3
 8021660:	2100      	movs	r1, #0
 8021662:	4620      	mov	r0, r4
 8021664:	f7fd f8c0 	bl	801e7e8 <lv_style_set_pad_inner>
#endif
}
 8021668:	bf00      	nop
 802166a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802166c:	200200d0 	.word	0x200200d0
 8021670:	66666667 	.word	0x66666667
 8021674:	200200a4 	.word	0x200200a4
 8021678:	00464b5b 	.word	0x00464b5b

0802167c <arc_init>:

static void arc_init(void)
{
 802167c:	b598      	push	{r3, r4, r7, lr}
 802167e:	af00      	add	r7, sp, #0
#if LV_USE_ARC != 0
    style_init_reset(&styles->arc_indic);
 8021680:	4b61      	ldr	r3, [pc, #388]	; (8021808 <arc_init+0x18c>)
 8021682:	681b      	ldr	r3, [r3, #0]
 8021684:	331c      	adds	r3, #28
 8021686:	4618      	mov	r0, r3
 8021688:	f003 fd5e 	bl	8025148 <style_init_reset>
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
 802168c:	4b5e      	ldr	r3, [pc, #376]	; (8021808 <arc_init+0x18c>)
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	f103 001c 	add.w	r0, r3, #28
 8021694:	4b5d      	ldr	r3, [pc, #372]	; (802180c <arc_init+0x190>)
 8021696:	68da      	ldr	r2, [r3, #12]
 8021698:	2100      	movs	r1, #0
 802169a:	f7fd fbd1 	bl	801ee40 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 802169e:	4b5a      	ldr	r3, [pc, #360]	; (8021808 <arc_init+0x18c>)
 80216a0:	681b      	ldr	r3, [r3, #0]
 80216a2:	f103 041c 	add.w	r4, r3, #28
 80216a6:	2000      	movs	r0, #0
 80216a8:	f7f8 fd26 	bl	801a0f8 <lv_disp_get_dpi>
 80216ac:	4603      	mov	r3, r0
 80216ae:	461a      	mov	r2, r3
 80216b0:	4613      	mov	r3, r2
 80216b2:	009b      	lsls	r3, r3, #2
 80216b4:	4413      	add	r3, r2
 80216b6:	009a      	lsls	r2, r3, #2
 80216b8:	4413      	add	r3, r2
 80216ba:	3350      	adds	r3, #80	; 0x50
 80216bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80216c0:	db12      	blt.n	80216e8 <arc_init+0x6c>
 80216c2:	2000      	movs	r0, #0
 80216c4:	f7f8 fd18 	bl	801a0f8 <lv_disp_get_dpi>
 80216c8:	4603      	mov	r3, r0
 80216ca:	461a      	mov	r2, r3
 80216cc:	4613      	mov	r3, r2
 80216ce:	009b      	lsls	r3, r3, #2
 80216d0:	4413      	add	r3, r2
 80216d2:	009a      	lsls	r2, r3, #2
 80216d4:	4413      	add	r3, r2
 80216d6:	3350      	adds	r3, #80	; 0x50
 80216d8:	4a4d      	ldr	r2, [pc, #308]	; (8021810 <arc_init+0x194>)
 80216da:	fb82 1203 	smull	r1, r2, r2, r3
 80216de:	1192      	asrs	r2, r2, #6
 80216e0:	17db      	asrs	r3, r3, #31
 80216e2:	1ad3      	subs	r3, r2, r3
 80216e4:	b21b      	sxth	r3, r3
 80216e6:	e000      	b.n	80216ea <arc_init+0x6e>
 80216e8:	2301      	movs	r3, #1
 80216ea:	461a      	mov	r2, r3
 80216ec:	2100      	movs	r1, #0
 80216ee:	4620      	mov	r0, r4
 80216f0:	f7fd fb42 	bl	801ed78 <lv_style_set_line_width>
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
 80216f4:	4b44      	ldr	r3, [pc, #272]	; (8021808 <arc_init+0x18c>)
 80216f6:	681b      	ldr	r3, [r3, #0]
 80216f8:	331c      	adds	r3, #28
 80216fa:	2201      	movs	r2, #1
 80216fc:	2100      	movs	r1, #0
 80216fe:	4618      	mov	r0, r3
 8021700:	f7fd fb85 	bl	801ee0e <lv_style_set_line_rounded>

    style_init_reset(&styles->arc_bg);
 8021704:	4b40      	ldr	r3, [pc, #256]	; (8021808 <arc_init+0x18c>)
 8021706:	681b      	ldr	r3, [r3, #0]
 8021708:	3320      	adds	r3, #32
 802170a:	4618      	mov	r0, r3
 802170c:	f003 fd1c 	bl	8025148 <style_init_reset>
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 8021710:	4b3d      	ldr	r3, [pc, #244]	; (8021808 <arc_init+0x18c>)
 8021712:	681b      	ldr	r3, [r3, #0]
 8021714:	f103 0420 	add.w	r4, r3, #32
 8021718:	4b3c      	ldr	r3, [pc, #240]	; (802180c <arc_init+0x190>)
 802171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802171c:	f003 0302 	and.w	r3, r3, #2
 8021720:	2b00      	cmp	r3, #0
 8021722:	d004      	beq.n	802172e <arc_init+0xb2>
 8021724:	483b      	ldr	r0, [pc, #236]	; (8021814 <arc_init+0x198>)
 8021726:	f7fc ff51 	bl	801e5cc <lv_color_hex>
 802172a:	4603      	mov	r3, r0
 802172c:	e003      	b.n	8021736 <arc_init+0xba>
 802172e:	483a      	ldr	r0, [pc, #232]	; (8021818 <arc_init+0x19c>)
 8021730:	f7fc ff4c 	bl	801e5cc <lv_color_hex>
 8021734:	4603      	mov	r3, r0
 8021736:	461a      	mov	r2, r3
 8021738:	2100      	movs	r1, #0
 802173a:	4620      	mov	r0, r4
 802173c:	f7fd fb80 	bl	801ee40 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
 8021740:	4b31      	ldr	r3, [pc, #196]	; (8021808 <arc_init+0x18c>)
 8021742:	681b      	ldr	r3, [r3, #0]
 8021744:	f103 0420 	add.w	r4, r3, #32
 8021748:	2000      	movs	r0, #0
 802174a:	f7f8 fcd5 	bl	801a0f8 <lv_disp_get_dpi>
 802174e:	4603      	mov	r3, r0
 8021750:	461a      	mov	r2, r3
 8021752:	4613      	mov	r3, r2
 8021754:	009b      	lsls	r3, r3, #2
 8021756:	4413      	add	r3, r2
 8021758:	009a      	lsls	r2, r3, #2
 802175a:	4413      	add	r3, r2
 802175c:	3350      	adds	r3, #80	; 0x50
 802175e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021762:	db12      	blt.n	802178a <arc_init+0x10e>
 8021764:	2000      	movs	r0, #0
 8021766:	f7f8 fcc7 	bl	801a0f8 <lv_disp_get_dpi>
 802176a:	4603      	mov	r3, r0
 802176c:	461a      	mov	r2, r3
 802176e:	4613      	mov	r3, r2
 8021770:	009b      	lsls	r3, r3, #2
 8021772:	4413      	add	r3, r2
 8021774:	009a      	lsls	r2, r3, #2
 8021776:	4413      	add	r3, r2
 8021778:	3350      	adds	r3, #80	; 0x50
 802177a:	4a25      	ldr	r2, [pc, #148]	; (8021810 <arc_init+0x194>)
 802177c:	fb82 1203 	smull	r1, r2, r2, r3
 8021780:	1192      	asrs	r2, r2, #6
 8021782:	17db      	asrs	r3, r3, #31
 8021784:	1ad3      	subs	r3, r2, r3
 8021786:	b21b      	sxth	r3, r3
 8021788:	e000      	b.n	802178c <arc_init+0x110>
 802178a:	2301      	movs	r3, #1
 802178c:	461a      	mov	r2, r3
 802178e:	2100      	movs	r1, #0
 8021790:	4620      	mov	r0, r4
 8021792:	f7fd faf1 	bl	801ed78 <lv_style_set_line_width>
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
 8021796:	4b1c      	ldr	r3, [pc, #112]	; (8021808 <arc_init+0x18c>)
 8021798:	681b      	ldr	r3, [r3, #0]
 802179a:	3320      	adds	r3, #32
 802179c:	2201      	movs	r2, #1
 802179e:	2100      	movs	r1, #0
 80217a0:	4618      	mov	r0, r3
 80217a2:	f7fd fb34 	bl	801ee0e <lv_style_set_line_rounded>

    style_init_reset(&styles->arc_knob);
 80217a6:	4b18      	ldr	r3, [pc, #96]	; (8021808 <arc_init+0x18c>)
 80217a8:	681b      	ldr	r3, [r3, #0]
 80217aa:	3324      	adds	r3, #36	; 0x24
 80217ac:	4618      	mov	r0, r3
 80217ae:	f003 fccb 	bl	8025148 <style_init_reset>
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
 80217b2:	4b15      	ldr	r3, [pc, #84]	; (8021808 <arc_init+0x18c>)
 80217b4:	681b      	ldr	r3, [r3, #0]
 80217b6:	3324      	adds	r3, #36	; 0x24
 80217b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80217bc:	2100      	movs	r1, #0
 80217be:	4618      	mov	r0, r3
 80217c0:	f7fc ff4a 	bl	801e658 <lv_style_set_radius>
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 80217c4:	4b10      	ldr	r3, [pc, #64]	; (8021808 <arc_init+0x18c>)
 80217c6:	681b      	ldr	r3, [r3, #0]
 80217c8:	3324      	adds	r3, #36	; 0x24
 80217ca:	2200      	movs	r2, #0
 80217cc:	2100      	movs	r1, #0
 80217ce:	4618      	mov	r0, r3
 80217d0:	f7fc ffa6 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 80217d4:	4b0c      	ldr	r3, [pc, #48]	; (8021808 <arc_init+0x18c>)
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	3324      	adds	r3, #36	; 0x24
 80217da:	2200      	movs	r2, #0
 80217dc:	2100      	movs	r1, #0
 80217de:	4618      	mov	r0, r3
 80217e0:	f7fc ffb7 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
 80217e4:	4b08      	ldr	r3, [pc, #32]	; (8021808 <arc_init+0x18c>)
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	3324      	adds	r3, #36	; 0x24
 80217ea:	2200      	movs	r2, #0
 80217ec:	2100      	movs	r1, #0
 80217ee:	4618      	mov	r0, r3
 80217f0:	f7fc ffc8 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
 80217f4:	4b04      	ldr	r3, [pc, #16]	; (8021808 <arc_init+0x18c>)
 80217f6:	681b      	ldr	r3, [r3, #0]
 80217f8:	3324      	adds	r3, #36	; 0x24
 80217fa:	2200      	movs	r2, #0
 80217fc:	2100      	movs	r1, #0
 80217fe:	4618      	mov	r0, r3
 8021800:	f7fc ffd9 	bl	801e7b6 <lv_style_set_pad_right>

#endif
}
 8021804:	bf00      	nop
 8021806:	bd98      	pop	{r3, r4, r7, pc}
 8021808:	200200d0 	.word	0x200200d0
 802180c:	200200a4 	.word	0x200200a4
 8021810:	66666667 	.word	0x66666667
 8021814:	00d4d7d9 	.word	0x00d4d7d9
 8021818:	0045494d 	.word	0x0045494d

0802181c <spinner_init>:

static void spinner_init(void)
{
 802181c:	b480      	push	{r7}
 802181e:	af00      	add	r7, sp, #0
#if LV_USE_SPINNER != 0
#endif
}
 8021820:	bf00      	nop
 8021822:	46bd      	mov	sp, r7
 8021824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021828:	4770      	bx	lr
	...

0802182c <chart_init>:

static void chart_init(void)
{
 802182c:	b598      	push	{r3, r4, r7, lr}
 802182e:	af00      	add	r7, sp, #0
#if LV_USE_CHART
    style_init_reset(&styles->chart_bg);
 8021830:	4ba4      	ldr	r3, [pc, #656]	; (8021ac4 <chart_init+0x298>)
 8021832:	681b      	ldr	r3, [r3, #0]
 8021834:	3344      	adds	r3, #68	; 0x44
 8021836:	4618      	mov	r0, r3
 8021838:	f003 fc86 	bl	8025148 <style_init_reset>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 802183c:	4ba1      	ldr	r3, [pc, #644]	; (8021ac4 <chart_init+0x298>)
 802183e:	681b      	ldr	r3, [r3, #0]
 8021840:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8021844:	4ba0      	ldr	r3, [pc, #640]	; (8021ac8 <chart_init+0x29c>)
 8021846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021848:	f003 0302 	and.w	r3, r3, #2
 802184c:	2b00      	cmp	r3, #0
 802184e:	d011      	beq.n	8021874 <chart_init+0x48>
 8021850:	4b9d      	ldr	r3, [pc, #628]	; (8021ac8 <chart_init+0x29c>)
 8021852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021854:	f003 0302 	and.w	r3, r3, #2
 8021858:	2b00      	cmp	r3, #0
 802185a:	d005      	beq.n	8021868 <chart_init+0x3c>
 802185c:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8021860:	f7fc fec8 	bl	801e5f4 <lv_color_hex3>
 8021864:	4603      	mov	r3, r0
 8021866:	e009      	b.n	802187c <chart_init+0x50>
 8021868:	f640 1099 	movw	r0, #2457	; 0x999
 802186c:	f7fc fec2 	bl	801e5f4 <lv_color_hex3>
 8021870:	4603      	mov	r3, r0
 8021872:	e003      	b.n	802187c <chart_init+0x50>
 8021874:	4895      	ldr	r0, [pc, #596]	; (8021acc <chart_init+0x2a0>)
 8021876:	f7fc fea9 	bl	801e5cc <lv_color_hex>
 802187a:	4603      	mov	r3, r0
 802187c:	461a      	mov	r2, r3
 802187e:	2100      	movs	r1, #0
 8021880:	4620      	mov	r0, r4
 8021882:	f7fd fa11 	bl	801eca8 <lv_style_set_text_color>

    style_init_reset(&styles->chart_series_bg);
 8021886:	4b8f      	ldr	r3, [pc, #572]	; (8021ac4 <chart_init+0x298>)
 8021888:	681b      	ldr	r3, [r3, #0]
 802188a:	3348      	adds	r3, #72	; 0x48
 802188c:	4618      	mov	r0, r3
 802188e:	f003 fc5b 	bl	8025148 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
 8021892:	4b8c      	ldr	r3, [pc, #560]	; (8021ac4 <chart_init+0x298>)
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	f103 0448 	add.w	r4, r3, #72	; 0x48
 802189a:	2000      	movs	r0, #0
 802189c:	f7f8 fc2c 	bl	801a0f8 <lv_disp_get_dpi>
 80218a0:	4603      	mov	r3, r0
 80218a2:	3350      	adds	r3, #80	; 0x50
 80218a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80218a8:	db0c      	blt.n	80218c4 <chart_init+0x98>
 80218aa:	2000      	movs	r0, #0
 80218ac:	f7f8 fc24 	bl	801a0f8 <lv_disp_get_dpi>
 80218b0:	4603      	mov	r3, r0
 80218b2:	3350      	adds	r3, #80	; 0x50
 80218b4:	4a86      	ldr	r2, [pc, #536]	; (8021ad0 <chart_init+0x2a4>)
 80218b6:	fb82 1203 	smull	r1, r2, r2, r3
 80218ba:	1192      	asrs	r2, r2, #6
 80218bc:	17db      	asrs	r3, r3, #31
 80218be:	1ad3      	subs	r3, r2, r3
 80218c0:	b21b      	sxth	r3, r3
 80218c2:	e000      	b.n	80218c6 <chart_init+0x9a>
 80218c4:	2301      	movs	r3, #1
 80218c6:	461a      	mov	r2, r3
 80218c8:	2100      	movs	r1, #0
 80218ca:	4620      	mov	r0, r4
 80218cc:	f7fd fa54 	bl	801ed78 <lv_style_set_line_width>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 80218d0:	4b7c      	ldr	r3, [pc, #496]	; (8021ac4 <chart_init+0x298>)
 80218d2:	681b      	ldr	r3, [r3, #0]
 80218d4:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80218d8:	2000      	movs	r0, #0
 80218da:	f7f8 fc0d 	bl	801a0f8 <lv_disp_get_dpi>
 80218de:	4603      	mov	r3, r0
 80218e0:	461a      	mov	r2, r3
 80218e2:	4613      	mov	r3, r2
 80218e4:	009b      	lsls	r3, r3, #2
 80218e6:	4413      	add	r3, r2
 80218e8:	005b      	lsls	r3, r3, #1
 80218ea:	3350      	adds	r3, #80	; 0x50
 80218ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80218f0:	db11      	blt.n	8021916 <chart_init+0xea>
 80218f2:	2000      	movs	r0, #0
 80218f4:	f7f8 fc00 	bl	801a0f8 <lv_disp_get_dpi>
 80218f8:	4603      	mov	r3, r0
 80218fa:	461a      	mov	r2, r3
 80218fc:	4613      	mov	r3, r2
 80218fe:	009b      	lsls	r3, r3, #2
 8021900:	4413      	add	r3, r2
 8021902:	005b      	lsls	r3, r3, #1
 8021904:	3350      	adds	r3, #80	; 0x50
 8021906:	4a72      	ldr	r2, [pc, #456]	; (8021ad0 <chart_init+0x2a4>)
 8021908:	fb82 1203 	smull	r1, r2, r2, r3
 802190c:	1192      	asrs	r2, r2, #6
 802190e:	17db      	asrs	r3, r3, #31
 8021910:	1ad3      	subs	r3, r2, r3
 8021912:	b21b      	sxth	r3, r3
 8021914:	e000      	b.n	8021918 <chart_init+0xec>
 8021916:	2301      	movs	r3, #1
 8021918:	461a      	mov	r2, r3
 802191a:	2100      	movs	r1, #0
 802191c:	4620      	mov	r0, r4
 802191e:	f7fd fa44 	bl	801edaa <lv_style_set_line_dash_width>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8021922:	4b68      	ldr	r3, [pc, #416]	; (8021ac4 <chart_init+0x298>)
 8021924:	681b      	ldr	r3, [r3, #0]
 8021926:	f103 0448 	add.w	r4, r3, #72	; 0x48
 802192a:	2000      	movs	r0, #0
 802192c:	f7f8 fbe4 	bl	801a0f8 <lv_disp_get_dpi>
 8021930:	4603      	mov	r3, r0
 8021932:	461a      	mov	r2, r3
 8021934:	4613      	mov	r3, r2
 8021936:	009b      	lsls	r3, r3, #2
 8021938:	4413      	add	r3, r2
 802193a:	005b      	lsls	r3, r3, #1
 802193c:	3350      	adds	r3, #80	; 0x50
 802193e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021942:	db11      	blt.n	8021968 <chart_init+0x13c>
 8021944:	2000      	movs	r0, #0
 8021946:	f7f8 fbd7 	bl	801a0f8 <lv_disp_get_dpi>
 802194a:	4603      	mov	r3, r0
 802194c:	461a      	mov	r2, r3
 802194e:	4613      	mov	r3, r2
 8021950:	009b      	lsls	r3, r3, #2
 8021952:	4413      	add	r3, r2
 8021954:	005b      	lsls	r3, r3, #1
 8021956:	3350      	adds	r3, #80	; 0x50
 8021958:	4a5d      	ldr	r2, [pc, #372]	; (8021ad0 <chart_init+0x2a4>)
 802195a:	fb82 1203 	smull	r1, r2, r2, r3
 802195e:	1192      	asrs	r2, r2, #6
 8021960:	17db      	asrs	r3, r3, #31
 8021962:	1ad3      	subs	r3, r2, r3
 8021964:	b21b      	sxth	r3, r3
 8021966:	e000      	b.n	802196a <chart_init+0x13e>
 8021968:	2301      	movs	r3, #1
 802196a:	461a      	mov	r2, r3
 802196c:	2100      	movs	r1, #0
 802196e:	4620      	mov	r0, r4
 8021970:	f7fd fa34 	bl	801eddc <lv_style_set_line_dash_gap>
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8021974:	4b53      	ldr	r3, [pc, #332]	; (8021ac4 <chart_init+0x298>)
 8021976:	681b      	ldr	r3, [r3, #0]
 8021978:	f103 0448 	add.w	r4, r3, #72	; 0x48
 802197c:	4b52      	ldr	r3, [pc, #328]	; (8021ac8 <chart_init+0x29c>)
 802197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021980:	f003 0302 	and.w	r3, r3, #2
 8021984:	2b00      	cmp	r3, #0
 8021986:	d004      	beq.n	8021992 <chart_init+0x166>
 8021988:	4852      	ldr	r0, [pc, #328]	; (8021ad4 <chart_init+0x2a8>)
 802198a:	f7fc fe1f 	bl	801e5cc <lv_color_hex>
 802198e:	4603      	mov	r3, r0
 8021990:	e003      	b.n	802199a <chart_init+0x16e>
 8021992:	4851      	ldr	r0, [pc, #324]	; (8021ad8 <chart_init+0x2ac>)
 8021994:	f7fc fe1a 	bl	801e5cc <lv_color_hex>
 8021998:	4603      	mov	r3, r0
 802199a:	461a      	mov	r2, r3
 802199c:	2100      	movs	r1, #0
 802199e:	4620      	mov	r0, r4
 80219a0:	f7fd fa4e 	bl	801ee40 <lv_style_set_line_color>

    style_init_reset(&styles->chart_series);
 80219a4:	4b47      	ldr	r3, [pc, #284]	; (8021ac4 <chart_init+0x298>)
 80219a6:	681b      	ldr	r3, [r3, #0]
 80219a8:	334c      	adds	r3, #76	; 0x4c
 80219aa:	4618      	mov	r0, r3
 80219ac:	f003 fbcc 	bl	8025148 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
 80219b0:	4b44      	ldr	r3, [pc, #272]	; (8021ac4 <chart_init+0x298>)
 80219b2:	681b      	ldr	r3, [r3, #0]
 80219b4:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80219b8:	2000      	movs	r0, #0
 80219ba:	f7f8 fb9d 	bl	801a0f8 <lv_disp_get_dpi>
 80219be:	4603      	mov	r3, r0
 80219c0:	461a      	mov	r2, r3
 80219c2:	4613      	mov	r3, r2
 80219c4:	005b      	lsls	r3, r3, #1
 80219c6:	4413      	add	r3, r2
 80219c8:	3350      	adds	r3, #80	; 0x50
 80219ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80219ce:	db10      	blt.n	80219f2 <chart_init+0x1c6>
 80219d0:	2000      	movs	r0, #0
 80219d2:	f7f8 fb91 	bl	801a0f8 <lv_disp_get_dpi>
 80219d6:	4603      	mov	r3, r0
 80219d8:	461a      	mov	r2, r3
 80219da:	4613      	mov	r3, r2
 80219dc:	005b      	lsls	r3, r3, #1
 80219de:	4413      	add	r3, r2
 80219e0:	3350      	adds	r3, #80	; 0x50
 80219e2:	4a3b      	ldr	r2, [pc, #236]	; (8021ad0 <chart_init+0x2a4>)
 80219e4:	fb82 1203 	smull	r1, r2, r2, r3
 80219e8:	1192      	asrs	r2, r2, #6
 80219ea:	17db      	asrs	r3, r3, #31
 80219ec:	1ad3      	subs	r3, r2, r3
 80219ee:	b21b      	sxth	r3, r3
 80219f0:	e000      	b.n	80219f4 <chart_init+0x1c8>
 80219f2:	2301      	movs	r3, #1
 80219f4:	461a      	mov	r2, r3
 80219f6:	2100      	movs	r1, #0
 80219f8:	4620      	mov	r0, r4
 80219fa:	f7fd f9bd 	bl	801ed78 <lv_style_set_line_width>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
 80219fe:	4b31      	ldr	r3, [pc, #196]	; (8021ac4 <chart_init+0x298>)
 8021a00:	681b      	ldr	r3, [r3, #0]
 8021a02:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021a06:	2000      	movs	r0, #0
 8021a08:	f7f8 fb76 	bl	801a0f8 <lv_disp_get_dpi>
 8021a0c:	4603      	mov	r3, r0
 8021a0e:	3314      	adds	r3, #20
 8021a10:	009b      	lsls	r3, r3, #2
 8021a12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021a16:	db0d      	blt.n	8021a34 <chart_init+0x208>
 8021a18:	2000      	movs	r0, #0
 8021a1a:	f7f8 fb6d 	bl	801a0f8 <lv_disp_get_dpi>
 8021a1e:	4603      	mov	r3, r0
 8021a20:	3314      	adds	r3, #20
 8021a22:	009b      	lsls	r3, r3, #2
 8021a24:	4a2a      	ldr	r2, [pc, #168]	; (8021ad0 <chart_init+0x2a4>)
 8021a26:	fb82 1203 	smull	r1, r2, r2, r3
 8021a2a:	1192      	asrs	r2, r2, #6
 8021a2c:	17db      	asrs	r3, r3, #31
 8021a2e:	1ad3      	subs	r3, r2, r3
 8021a30:	b21b      	sxth	r3, r3
 8021a32:	e000      	b.n	8021a36 <chart_init+0x20a>
 8021a34:	2301      	movs	r3, #1
 8021a36:	461a      	mov	r2, r3
 8021a38:	2100      	movs	r1, #0
 8021a3a:	4620      	mov	r0, r4
 8021a3c:	f7fc fe3e 	bl	801e6bc <lv_style_set_size>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
 8021a40:	4b20      	ldr	r3, [pc, #128]	; (8021ac4 <chart_init+0x298>)
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021a48:	2000      	movs	r0, #0
 8021a4a:	f7f8 fb55 	bl	801a0f8 <lv_disp_get_dpi>
 8021a4e:	4603      	mov	r3, r0
 8021a50:	3328      	adds	r3, #40	; 0x28
 8021a52:	005b      	lsls	r3, r3, #1
 8021a54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021a58:	db0d      	blt.n	8021a76 <chart_init+0x24a>
 8021a5a:	2000      	movs	r0, #0
 8021a5c:	f7f8 fb4c 	bl	801a0f8 <lv_disp_get_dpi>
 8021a60:	4603      	mov	r3, r0
 8021a62:	3328      	adds	r3, #40	; 0x28
 8021a64:	005b      	lsls	r3, r3, #1
 8021a66:	4a1a      	ldr	r2, [pc, #104]	; (8021ad0 <chart_init+0x2a4>)
 8021a68:	fb82 1203 	smull	r1, r2, r2, r3
 8021a6c:	1192      	asrs	r2, r2, #6
 8021a6e:	17db      	asrs	r3, r3, #31
 8021a70:	1ad3      	subs	r3, r2, r3
 8021a72:	b21b      	sxth	r3, r3
 8021a74:	e000      	b.n	8021a78 <chart_init+0x24c>
 8021a76:	2301      	movs	r3, #1
 8021a78:	461a      	mov	r2, r3
 8021a7a:	2100      	movs	r1, #0
 8021a7c:	4620      	mov	r0, r4
 8021a7e:	f7fc feb3 	bl	801e7e8 <lv_style_set_pad_inner>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
 8021a82:	4b10      	ldr	r3, [pc, #64]	; (8021ac4 <chart_init+0x298>)
 8021a84:	681b      	ldr	r3, [r3, #0]
 8021a86:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021a8a:	2000      	movs	r0, #0
 8021a8c:	f7f8 fb34 	bl	801a0f8 <lv_disp_get_dpi>
 8021a90:	4603      	mov	r3, r0
 8021a92:	3350      	adds	r3, #80	; 0x50
 8021a94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021a98:	db0c      	blt.n	8021ab4 <chart_init+0x288>
 8021a9a:	2000      	movs	r0, #0
 8021a9c:	f7f8 fb2c 	bl	801a0f8 <lv_disp_get_dpi>
 8021aa0:	4603      	mov	r3, r0
 8021aa2:	3350      	adds	r3, #80	; 0x50
 8021aa4:	4a0a      	ldr	r2, [pc, #40]	; (8021ad0 <chart_init+0x2a4>)
 8021aa6:	fb82 1203 	smull	r1, r2, r2, r3
 8021aaa:	1192      	asrs	r2, r2, #6
 8021aac:	17db      	asrs	r3, r3, #31
 8021aae:	1ad3      	subs	r3, r2, r3
 8021ab0:	b21b      	sxth	r3, r3
 8021ab2:	e000      	b.n	8021ab6 <chart_init+0x28a>
 8021ab4:	2301      	movs	r3, #1
 8021ab6:	461a      	mov	r2, r3
 8021ab8:	2100      	movs	r1, #0
 8021aba:	4620      	mov	r0, r4
 8021abc:	f7fc fdcc 	bl	801e658 <lv_style_set_radius>

#endif
}
 8021ac0:	bf00      	nop
 8021ac2:	bd98      	pop	{r3, r4, r7, pc}
 8021ac4:	200200d0 	.word	0x200200d0
 8021ac8:	200200a4 	.word	0x200200a4
 8021acc:	00a1adbd 	.word	0x00a1adbd
 8021ad0:	66666667 	.word	0x66666667
 8021ad4:	00d6dde3 	.word	0x00d6dde3
 8021ad8:	00808a97 	.word	0x00808a97

08021adc <calendar_init>:

static void calendar_init(void)
{
 8021adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ae0:	af00      	add	r7, sp, #0
#if LV_USE_CALENDAR

    style_init_reset(&styles->calendar_header);
 8021ae2:	4bc1      	ldr	r3, [pc, #772]	; (8021de8 <calendar_init+0x30c>)
 8021ae4:	681b      	ldr	r3, [r3, #0]
 8021ae6:	3334      	adds	r3, #52	; 0x34
 8021ae8:	4618      	mov	r0, r3
 8021aea:	f003 fb2d 	bl	8025148 <style_init_reset>
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
 8021aee:	4bbe      	ldr	r3, [pc, #760]	; (8021de8 <calendar_init+0x30c>)
 8021af0:	681b      	ldr	r3, [r3, #0]
 8021af2:	3334      	adds	r3, #52	; 0x34
 8021af4:	2200      	movs	r2, #0
 8021af6:	2100      	movs	r1, #0
 8021af8:	4618      	mov	r0, r3
 8021afa:	f7fc fe11 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021afe:	4bba      	ldr	r3, [pc, #744]	; (8021de8 <calendar_init+0x30c>)
 8021b00:	681b      	ldr	r3, [r3, #0]
 8021b02:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021b06:	2000      	movs	r0, #0
 8021b08:	f7f8 fb0f 	bl	801a12a <lv_disp_get_size_category>
 8021b0c:	4603      	mov	r3, r0
 8021b0e:	2b01      	cmp	r3, #1
 8021b10:	d81e      	bhi.n	8021b50 <calendar_init+0x74>
 8021b12:	2000      	movs	r0, #0
 8021b14:	f7f8 faf0 	bl	801a0f8 <lv_disp_get_dpi>
 8021b18:	4603      	mov	r3, r0
 8021b1a:	461a      	mov	r2, r3
 8021b1c:	4613      	mov	r3, r2
 8021b1e:	011b      	lsls	r3, r3, #4
 8021b20:	1a9b      	subs	r3, r3, r2
 8021b22:	3350      	adds	r3, #80	; 0x50
 8021b24:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021b28:	db10      	blt.n	8021b4c <calendar_init+0x70>
 8021b2a:	2000      	movs	r0, #0
 8021b2c:	f7f8 fae4 	bl	801a0f8 <lv_disp_get_dpi>
 8021b30:	4603      	mov	r3, r0
 8021b32:	461a      	mov	r2, r3
 8021b34:	4613      	mov	r3, r2
 8021b36:	011b      	lsls	r3, r3, #4
 8021b38:	1a9b      	subs	r3, r3, r2
 8021b3a:	3350      	adds	r3, #80	; 0x50
 8021b3c:	4aab      	ldr	r2, [pc, #684]	; (8021dec <calendar_init+0x310>)
 8021b3e:	fb82 1203 	smull	r1, r2, r2, r3
 8021b42:	1192      	asrs	r2, r2, #6
 8021b44:	17db      	asrs	r3, r3, #31
 8021b46:	1ad3      	subs	r3, r2, r3
 8021b48:	b21b      	sxth	r3, r3
 8021b4a:	e021      	b.n	8021b90 <calendar_init+0xb4>
 8021b4c:	2301      	movs	r3, #1
 8021b4e:	e01f      	b.n	8021b90 <calendar_init+0xb4>
 8021b50:	2000      	movs	r0, #0
 8021b52:	f7f8 fad1 	bl	801a0f8 <lv_disp_get_dpi>
 8021b56:	4603      	mov	r3, r0
 8021b58:	461a      	mov	r2, r3
 8021b5a:	4613      	mov	r3, r2
 8021b5c:	011b      	lsls	r3, r3, #4
 8021b5e:	1a9b      	subs	r3, r3, r2
 8021b60:	005b      	lsls	r3, r3, #1
 8021b62:	3350      	adds	r3, #80	; 0x50
 8021b64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021b68:	db11      	blt.n	8021b8e <calendar_init+0xb2>
 8021b6a:	2000      	movs	r0, #0
 8021b6c:	f7f8 fac4 	bl	801a0f8 <lv_disp_get_dpi>
 8021b70:	4603      	mov	r3, r0
 8021b72:	461a      	mov	r2, r3
 8021b74:	4613      	mov	r3, r2
 8021b76:	011b      	lsls	r3, r3, #4
 8021b78:	1a9b      	subs	r3, r3, r2
 8021b7a:	005b      	lsls	r3, r3, #1
 8021b7c:	3350      	adds	r3, #80	; 0x50
 8021b7e:	4a9b      	ldr	r2, [pc, #620]	; (8021dec <calendar_init+0x310>)
 8021b80:	fb82 1203 	smull	r1, r2, r2, r3
 8021b84:	1192      	asrs	r2, r2, #6
 8021b86:	17db      	asrs	r3, r3, #31
 8021b88:	1ad3      	subs	r3, r2, r3
 8021b8a:	b21b      	sxth	r3, r3
 8021b8c:	e000      	b.n	8021b90 <calendar_init+0xb4>
 8021b8e:	2301      	movs	r3, #1
 8021b90:	461a      	mov	r2, r3
 8021b92:	2100      	movs	r1, #0
 8021b94:	4650      	mov	r0, sl
 8021b96:	f7fc fdf5 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021b9a:	4b93      	ldr	r3, [pc, #588]	; (8021de8 <calendar_init+0x30c>)
 8021b9c:	681b      	ldr	r3, [r3, #0]
 8021b9e:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021ba2:	2000      	movs	r0, #0
 8021ba4:	f7f8 fac1 	bl	801a12a <lv_disp_get_size_category>
 8021ba8:	4603      	mov	r3, r0
 8021baa:	2b01      	cmp	r3, #1
 8021bac:	d81e      	bhi.n	8021bec <calendar_init+0x110>
 8021bae:	2000      	movs	r0, #0
 8021bb0:	f7f8 faa2 	bl	801a0f8 <lv_disp_get_dpi>
 8021bb4:	4603      	mov	r3, r0
 8021bb6:	461a      	mov	r2, r3
 8021bb8:	4613      	mov	r3, r2
 8021bba:	011b      	lsls	r3, r3, #4
 8021bbc:	1a9b      	subs	r3, r3, r2
 8021bbe:	3350      	adds	r3, #80	; 0x50
 8021bc0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021bc4:	db10      	blt.n	8021be8 <calendar_init+0x10c>
 8021bc6:	2000      	movs	r0, #0
 8021bc8:	f7f8 fa96 	bl	801a0f8 <lv_disp_get_dpi>
 8021bcc:	4603      	mov	r3, r0
 8021bce:	461a      	mov	r2, r3
 8021bd0:	4613      	mov	r3, r2
 8021bd2:	011b      	lsls	r3, r3, #4
 8021bd4:	1a9b      	subs	r3, r3, r2
 8021bd6:	3350      	adds	r3, #80	; 0x50
 8021bd8:	4a84      	ldr	r2, [pc, #528]	; (8021dec <calendar_init+0x310>)
 8021bda:	fb82 1203 	smull	r1, r2, r2, r3
 8021bde:	1192      	asrs	r2, r2, #6
 8021be0:	17db      	asrs	r3, r3, #31
 8021be2:	1ad3      	subs	r3, r2, r3
 8021be4:	b21b      	sxth	r3, r3
 8021be6:	e021      	b.n	8021c2c <calendar_init+0x150>
 8021be8:	2301      	movs	r3, #1
 8021bea:	e01f      	b.n	8021c2c <calendar_init+0x150>
 8021bec:	2000      	movs	r0, #0
 8021bee:	f7f8 fa83 	bl	801a0f8 <lv_disp_get_dpi>
 8021bf2:	4603      	mov	r3, r0
 8021bf4:	461a      	mov	r2, r3
 8021bf6:	4613      	mov	r3, r2
 8021bf8:	011b      	lsls	r3, r3, #4
 8021bfa:	1a9b      	subs	r3, r3, r2
 8021bfc:	005b      	lsls	r3, r3, #1
 8021bfe:	3350      	adds	r3, #80	; 0x50
 8021c00:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021c04:	db11      	blt.n	8021c2a <calendar_init+0x14e>
 8021c06:	2000      	movs	r0, #0
 8021c08:	f7f8 fa76 	bl	801a0f8 <lv_disp_get_dpi>
 8021c0c:	4603      	mov	r3, r0
 8021c0e:	461a      	mov	r2, r3
 8021c10:	4613      	mov	r3, r2
 8021c12:	011b      	lsls	r3, r3, #4
 8021c14:	1a9b      	subs	r3, r3, r2
 8021c16:	005b      	lsls	r3, r3, #1
 8021c18:	3350      	adds	r3, #80	; 0x50
 8021c1a:	4a74      	ldr	r2, [pc, #464]	; (8021dec <calendar_init+0x310>)
 8021c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8021c20:	1192      	asrs	r2, r2, #6
 8021c22:	17db      	asrs	r3, r3, #31
 8021c24:	1ad3      	subs	r3, r2, r3
 8021c26:	b21b      	sxth	r3, r3
 8021c28:	e000      	b.n	8021c2c <calendar_init+0x150>
 8021c2a:	2301      	movs	r3, #1
 8021c2c:	461a      	mov	r2, r3
 8021c2e:	2100      	movs	r1, #0
 8021c30:	4650      	mov	r0, sl
 8021c32:	f7fc fdc0 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
 8021c36:	4b6c      	ldr	r3, [pc, #432]	; (8021de8 <calendar_init+0x30c>)
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	3334      	adds	r3, #52	; 0x34
 8021c3c:	2200      	movs	r2, #0
 8021c3e:	2100      	movs	r1, #0
 8021c40:	4618      	mov	r0, r3
 8021c42:	f7fc fd86 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021c46:	4b68      	ldr	r3, [pc, #416]	; (8021de8 <calendar_init+0x30c>)
 8021c48:	681b      	ldr	r3, [r3, #0]
 8021c4a:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021c4e:	2000      	movs	r0, #0
 8021c50:	f7f8 fa6b 	bl	801a12a <lv_disp_get_size_category>
 8021c54:	4603      	mov	r3, r0
 8021c56:	2b01      	cmp	r3, #1
 8021c58:	d81e      	bhi.n	8021c98 <calendar_init+0x1bc>
 8021c5a:	2000      	movs	r0, #0
 8021c5c:	f7f8 fa4c 	bl	801a0f8 <lv_disp_get_dpi>
 8021c60:	4603      	mov	r3, r0
 8021c62:	461a      	mov	r2, r3
 8021c64:	4613      	mov	r3, r2
 8021c66:	011b      	lsls	r3, r3, #4
 8021c68:	1a9b      	subs	r3, r3, r2
 8021c6a:	3350      	adds	r3, #80	; 0x50
 8021c6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021c70:	db10      	blt.n	8021c94 <calendar_init+0x1b8>
 8021c72:	2000      	movs	r0, #0
 8021c74:	f7f8 fa40 	bl	801a0f8 <lv_disp_get_dpi>
 8021c78:	4603      	mov	r3, r0
 8021c7a:	461a      	mov	r2, r3
 8021c7c:	4613      	mov	r3, r2
 8021c7e:	011b      	lsls	r3, r3, #4
 8021c80:	1a9b      	subs	r3, r3, r2
 8021c82:	3350      	adds	r3, #80	; 0x50
 8021c84:	4a59      	ldr	r2, [pc, #356]	; (8021dec <calendar_init+0x310>)
 8021c86:	fb82 1203 	smull	r1, r2, r2, r3
 8021c8a:	1192      	asrs	r2, r2, #6
 8021c8c:	17db      	asrs	r3, r3, #31
 8021c8e:	1ad3      	subs	r3, r2, r3
 8021c90:	b21b      	sxth	r3, r3
 8021c92:	e021      	b.n	8021cd8 <calendar_init+0x1fc>
 8021c94:	2301      	movs	r3, #1
 8021c96:	e01f      	b.n	8021cd8 <calendar_init+0x1fc>
 8021c98:	2000      	movs	r0, #0
 8021c9a:	f7f8 fa2d 	bl	801a0f8 <lv_disp_get_dpi>
 8021c9e:	4603      	mov	r3, r0
 8021ca0:	461a      	mov	r2, r3
 8021ca2:	4613      	mov	r3, r2
 8021ca4:	011b      	lsls	r3, r3, #4
 8021ca6:	1a9b      	subs	r3, r3, r2
 8021ca8:	005b      	lsls	r3, r3, #1
 8021caa:	3350      	adds	r3, #80	; 0x50
 8021cac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021cb0:	db11      	blt.n	8021cd6 <calendar_init+0x1fa>
 8021cb2:	2000      	movs	r0, #0
 8021cb4:	f7f8 fa20 	bl	801a0f8 <lv_disp_get_dpi>
 8021cb8:	4603      	mov	r3, r0
 8021cba:	461a      	mov	r2, r3
 8021cbc:	4613      	mov	r3, r2
 8021cbe:	011b      	lsls	r3, r3, #4
 8021cc0:	1a9b      	subs	r3, r3, r2
 8021cc2:	005b      	lsls	r3, r3, #1
 8021cc4:	3350      	adds	r3, #80	; 0x50
 8021cc6:	4a49      	ldr	r2, [pc, #292]	; (8021dec <calendar_init+0x310>)
 8021cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8021ccc:	1192      	asrs	r2, r2, #6
 8021cce:	17db      	asrs	r3, r3, #31
 8021cd0:	1ad3      	subs	r3, r2, r3
 8021cd2:	b21b      	sxth	r3, r3
 8021cd4:	e000      	b.n	8021cd8 <calendar_init+0x1fc>
 8021cd6:	2301      	movs	r3, #1
 8021cd8:	461a      	mov	r2, r3
 8021cda:	2100      	movs	r1, #0
 8021cdc:	4650      	mov	r0, sl
 8021cde:	f7fc fd9c 	bl	801e81a <lv_style_set_margin_top>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021ce2:	4b41      	ldr	r3, [pc, #260]	; (8021de8 <calendar_init+0x30c>)
 8021ce4:	681b      	ldr	r3, [r3, #0]
 8021ce6:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021cea:	2000      	movs	r0, #0
 8021cec:	f7f8 fa1d 	bl	801a12a <lv_disp_get_size_category>
 8021cf0:	4603      	mov	r3, r0
 8021cf2:	2b01      	cmp	r3, #1
 8021cf4:	d81e      	bhi.n	8021d34 <calendar_init+0x258>
 8021cf6:	2000      	movs	r0, #0
 8021cf8:	f7f8 f9fe 	bl	801a0f8 <lv_disp_get_dpi>
 8021cfc:	4603      	mov	r3, r0
 8021cfe:	461a      	mov	r2, r3
 8021d00:	4613      	mov	r3, r2
 8021d02:	011b      	lsls	r3, r3, #4
 8021d04:	1a9b      	subs	r3, r3, r2
 8021d06:	3350      	adds	r3, #80	; 0x50
 8021d08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021d0c:	db10      	blt.n	8021d30 <calendar_init+0x254>
 8021d0e:	2000      	movs	r0, #0
 8021d10:	f7f8 f9f2 	bl	801a0f8 <lv_disp_get_dpi>
 8021d14:	4603      	mov	r3, r0
 8021d16:	461a      	mov	r2, r3
 8021d18:	4613      	mov	r3, r2
 8021d1a:	011b      	lsls	r3, r3, #4
 8021d1c:	1a9b      	subs	r3, r3, r2
 8021d1e:	3350      	adds	r3, #80	; 0x50
 8021d20:	4a32      	ldr	r2, [pc, #200]	; (8021dec <calendar_init+0x310>)
 8021d22:	fb82 1203 	smull	r1, r2, r2, r3
 8021d26:	1192      	asrs	r2, r2, #6
 8021d28:	17db      	asrs	r3, r3, #31
 8021d2a:	1ad3      	subs	r3, r2, r3
 8021d2c:	b21b      	sxth	r3, r3
 8021d2e:	e021      	b.n	8021d74 <calendar_init+0x298>
 8021d30:	2301      	movs	r3, #1
 8021d32:	e01f      	b.n	8021d74 <calendar_init+0x298>
 8021d34:	2000      	movs	r0, #0
 8021d36:	f7f8 f9df 	bl	801a0f8 <lv_disp_get_dpi>
 8021d3a:	4603      	mov	r3, r0
 8021d3c:	461a      	mov	r2, r3
 8021d3e:	4613      	mov	r3, r2
 8021d40:	011b      	lsls	r3, r3, #4
 8021d42:	1a9b      	subs	r3, r3, r2
 8021d44:	005b      	lsls	r3, r3, #1
 8021d46:	3350      	adds	r3, #80	; 0x50
 8021d48:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021d4c:	db11      	blt.n	8021d72 <calendar_init+0x296>
 8021d4e:	2000      	movs	r0, #0
 8021d50:	f7f8 f9d2 	bl	801a0f8 <lv_disp_get_dpi>
 8021d54:	4603      	mov	r3, r0
 8021d56:	461a      	mov	r2, r3
 8021d58:	4613      	mov	r3, r2
 8021d5a:	011b      	lsls	r3, r3, #4
 8021d5c:	1a9b      	subs	r3, r3, r2
 8021d5e:	005b      	lsls	r3, r3, #1
 8021d60:	3350      	adds	r3, #80	; 0x50
 8021d62:	4a22      	ldr	r2, [pc, #136]	; (8021dec <calendar_init+0x310>)
 8021d64:	fb82 1203 	smull	r1, r2, r2, r3
 8021d68:	1192      	asrs	r2, r2, #6
 8021d6a:	17db      	asrs	r3, r3, #31
 8021d6c:	1ad3      	subs	r3, r2, r3
 8021d6e:	b21b      	sxth	r3, r3
 8021d70:	e000      	b.n	8021d74 <calendar_init+0x298>
 8021d72:	2301      	movs	r3, #1
 8021d74:	461a      	mov	r2, r3
 8021d76:	2100      	movs	r1, #0
 8021d78:	4650      	mov	r0, sl
 8021d7a:	f7fc fd67 	bl	801e84c <lv_style_set_margin_bottom>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
 8021d7e:	4b1a      	ldr	r3, [pc, #104]	; (8021de8 <calendar_init+0x30c>)
 8021d80:	681b      	ldr	r3, [r3, #0]
 8021d82:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021d86:	4b1a      	ldr	r3, [pc, #104]	; (8021df0 <calendar_init+0x314>)
 8021d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021d8a:	f003 0302 	and.w	r3, r3, #2
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	d004      	beq.n	8021d9c <calendar_init+0x2c0>
 8021d92:	4818      	ldr	r0, [pc, #96]	; (8021df4 <calendar_init+0x318>)
 8021d94:	f7fc fc1a 	bl	801e5cc <lv_color_hex>
 8021d98:	4680      	mov	r8, r0
 8021d9a:	e00b      	b.n	8021db4 <calendar_init+0x2d8>
 8021d9c:	4643      	mov	r3, r8
 8021d9e:	f043 08ff 	orr.w	r8, r3, #255	; 0xff
 8021da2:	4643      	mov	r3, r8
 8021da4:	f443 487f 	orr.w	r8, r3, #65280	; 0xff00
 8021da8:	4643      	mov	r3, r8
 8021daa:	f443 087f 	orr.w	r8, r3, #16711680	; 0xff0000
 8021dae:	4643      	mov	r3, r8
 8021db0:	f043 487f 	orr.w	r8, r3, #4278190080	; 0xff000000
 8021db4:	4642      	mov	r2, r8
 8021db6:	2110      	movs	r1, #16
 8021db8:	4650      	mov	r0, sl
 8021dba:	f7fc ff75 	bl	801eca8 <lv_style_set_text_color>

    style_init_reset(&styles->calendar_daynames);
 8021dbe:	4b0a      	ldr	r3, [pc, #40]	; (8021de8 <calendar_init+0x30c>)
 8021dc0:	681b      	ldr	r3, [r3, #0]
 8021dc2:	3338      	adds	r3, #56	; 0x38
 8021dc4:	4618      	mov	r0, r3
 8021dc6:	f003 f9bf 	bl	8025148 <style_init_reset>
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
 8021dca:	4b07      	ldr	r3, [pc, #28]	; (8021de8 <calendar_init+0x30c>)
 8021dcc:	681b      	ldr	r3, [r3, #0]
 8021dce:	f103 0838 	add.w	r8, r3, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
 8021dd2:	4b07      	ldr	r3, [pc, #28]	; (8021df0 <calendar_init+0x314>)
 8021dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021dd6:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
 8021dda:	2b00      	cmp	r3, #0
 8021ddc:	d00e      	beq.n	8021dfc <calendar_init+0x320>
 8021dde:	4806      	ldr	r0, [pc, #24]	; (8021df8 <calendar_init+0x31c>)
 8021de0:	f7fc fbf4 	bl	801e5cc <lv_color_hex>
 8021de4:	4603      	mov	r3, r0
 8021de6:	e00e      	b.n	8021e06 <calendar_init+0x32a>
 8021de8:	200200d0 	.word	0x200200d0
 8021dec:	66666667 	.word	0x66666667
 8021df0:	200200a4 	.word	0x200200a4
 8021df4:	00888888 	.word	0x00888888
 8021df8:	0031404f 	.word	0x0031404f
 8021dfc:	f640 60ee 	movw	r0, #3822	; 0xeee
 8021e00:	f7fc fbf8 	bl	801e5f4 <lv_color_hex3>
 8021e04:	4603      	mov	r3, r0
 8021e06:	461a      	mov	r2, r3
 8021e08:	2100      	movs	r1, #0
 8021e0a:	4640      	mov	r0, r8
 8021e0c:	f7fc ff4c 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8021e10:	4bca      	ldr	r3, [pc, #808]	; (802213c <calendar_init+0x660>)
 8021e12:	681b      	ldr	r3, [r3, #0]
 8021e14:	f103 0838 	add.w	r8, r3, #56	; 0x38
 8021e18:	2000      	movs	r0, #0
 8021e1a:	f7f8 f986 	bl	801a12a <lv_disp_get_size_category>
 8021e1e:	4603      	mov	r3, r0
 8021e20:	2b01      	cmp	r3, #1
 8021e22:	d81e      	bhi.n	8021e62 <calendar_init+0x386>
 8021e24:	2000      	movs	r0, #0
 8021e26:	f7f8 f967 	bl	801a0f8 <lv_disp_get_dpi>
 8021e2a:	4603      	mov	r3, r0
 8021e2c:	461a      	mov	r2, r3
 8021e2e:	4613      	mov	r3, r2
 8021e30:	011b      	lsls	r3, r3, #4
 8021e32:	1a9b      	subs	r3, r3, r2
 8021e34:	3350      	adds	r3, #80	; 0x50
 8021e36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021e3a:	db10      	blt.n	8021e5e <calendar_init+0x382>
 8021e3c:	2000      	movs	r0, #0
 8021e3e:	f7f8 f95b 	bl	801a0f8 <lv_disp_get_dpi>
 8021e42:	4603      	mov	r3, r0
 8021e44:	461a      	mov	r2, r3
 8021e46:	4613      	mov	r3, r2
 8021e48:	011b      	lsls	r3, r3, #4
 8021e4a:	1a9b      	subs	r3, r3, r2
 8021e4c:	3350      	adds	r3, #80	; 0x50
 8021e4e:	4abc      	ldr	r2, [pc, #752]	; (8022140 <calendar_init+0x664>)
 8021e50:	fb82 1203 	smull	r1, r2, r2, r3
 8021e54:	1192      	asrs	r2, r2, #6
 8021e56:	17db      	asrs	r3, r3, #31
 8021e58:	1ad3      	subs	r3, r2, r3
 8021e5a:	b21b      	sxth	r3, r3
 8021e5c:	e021      	b.n	8021ea2 <calendar_init+0x3c6>
 8021e5e:	2301      	movs	r3, #1
 8021e60:	e01f      	b.n	8021ea2 <calendar_init+0x3c6>
 8021e62:	2000      	movs	r0, #0
 8021e64:	f7f8 f948 	bl	801a0f8 <lv_disp_get_dpi>
 8021e68:	4603      	mov	r3, r0
 8021e6a:	461a      	mov	r2, r3
 8021e6c:	4613      	mov	r3, r2
 8021e6e:	011b      	lsls	r3, r3, #4
 8021e70:	1a9b      	subs	r3, r3, r2
 8021e72:	005b      	lsls	r3, r3, #1
 8021e74:	3350      	adds	r3, #80	; 0x50
 8021e76:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021e7a:	db11      	blt.n	8021ea0 <calendar_init+0x3c4>
 8021e7c:	2000      	movs	r0, #0
 8021e7e:	f7f8 f93b 	bl	801a0f8 <lv_disp_get_dpi>
 8021e82:	4603      	mov	r3, r0
 8021e84:	461a      	mov	r2, r3
 8021e86:	4613      	mov	r3, r2
 8021e88:	011b      	lsls	r3, r3, #4
 8021e8a:	1a9b      	subs	r3, r3, r2
 8021e8c:	005b      	lsls	r3, r3, #1
 8021e8e:	3350      	adds	r3, #80	; 0x50
 8021e90:	4aab      	ldr	r2, [pc, #684]	; (8022140 <calendar_init+0x664>)
 8021e92:	fb82 1203 	smull	r1, r2, r2, r3
 8021e96:	1192      	asrs	r2, r2, #6
 8021e98:	17db      	asrs	r3, r3, #31
 8021e9a:	1ad3      	subs	r3, r2, r3
 8021e9c:	b21b      	sxth	r3, r3
 8021e9e:	e000      	b.n	8021ea2 <calendar_init+0x3c6>
 8021ea0:	2301      	movs	r3, #1
 8021ea2:	461a      	mov	r2, r3
 8021ea4:	2100      	movs	r1, #0
 8021ea6:	4640      	mov	r0, r8
 8021ea8:	f7fc fc6c 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8021eac:	4ba3      	ldr	r3, [pc, #652]	; (802213c <calendar_init+0x660>)
 8021eae:	681b      	ldr	r3, [r3, #0]
 8021eb0:	f103 0838 	add.w	r8, r3, #56	; 0x38
 8021eb4:	2000      	movs	r0, #0
 8021eb6:	f7f8 f938 	bl	801a12a <lv_disp_get_size_category>
 8021eba:	4603      	mov	r3, r0
 8021ebc:	2b01      	cmp	r3, #1
 8021ebe:	d81e      	bhi.n	8021efe <calendar_init+0x422>
 8021ec0:	2000      	movs	r0, #0
 8021ec2:	f7f8 f919 	bl	801a0f8 <lv_disp_get_dpi>
 8021ec6:	4603      	mov	r3, r0
 8021ec8:	461a      	mov	r2, r3
 8021eca:	4613      	mov	r3, r2
 8021ecc:	011b      	lsls	r3, r3, #4
 8021ece:	1a9b      	subs	r3, r3, r2
 8021ed0:	3350      	adds	r3, #80	; 0x50
 8021ed2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021ed6:	db10      	blt.n	8021efa <calendar_init+0x41e>
 8021ed8:	2000      	movs	r0, #0
 8021eda:	f7f8 f90d 	bl	801a0f8 <lv_disp_get_dpi>
 8021ede:	4603      	mov	r3, r0
 8021ee0:	461a      	mov	r2, r3
 8021ee2:	4613      	mov	r3, r2
 8021ee4:	011b      	lsls	r3, r3, #4
 8021ee6:	1a9b      	subs	r3, r3, r2
 8021ee8:	3350      	adds	r3, #80	; 0x50
 8021eea:	4a95      	ldr	r2, [pc, #596]	; (8022140 <calendar_init+0x664>)
 8021eec:	fb82 1203 	smull	r1, r2, r2, r3
 8021ef0:	1192      	asrs	r2, r2, #6
 8021ef2:	17db      	asrs	r3, r3, #31
 8021ef4:	1ad3      	subs	r3, r2, r3
 8021ef6:	b21b      	sxth	r3, r3
 8021ef8:	e021      	b.n	8021f3e <calendar_init+0x462>
 8021efa:	2301      	movs	r3, #1
 8021efc:	e01f      	b.n	8021f3e <calendar_init+0x462>
 8021efe:	2000      	movs	r0, #0
 8021f00:	f7f8 f8fa 	bl	801a0f8 <lv_disp_get_dpi>
 8021f04:	4603      	mov	r3, r0
 8021f06:	461a      	mov	r2, r3
 8021f08:	4613      	mov	r3, r2
 8021f0a:	011b      	lsls	r3, r3, #4
 8021f0c:	1a9b      	subs	r3, r3, r2
 8021f0e:	005b      	lsls	r3, r3, #1
 8021f10:	3350      	adds	r3, #80	; 0x50
 8021f12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021f16:	db11      	blt.n	8021f3c <calendar_init+0x460>
 8021f18:	2000      	movs	r0, #0
 8021f1a:	f7f8 f8ed 	bl	801a0f8 <lv_disp_get_dpi>
 8021f1e:	4603      	mov	r3, r0
 8021f20:	461a      	mov	r2, r3
 8021f22:	4613      	mov	r3, r2
 8021f24:	011b      	lsls	r3, r3, #4
 8021f26:	1a9b      	subs	r3, r3, r2
 8021f28:	005b      	lsls	r3, r3, #1
 8021f2a:	3350      	adds	r3, #80	; 0x50
 8021f2c:	4a84      	ldr	r2, [pc, #528]	; (8022140 <calendar_init+0x664>)
 8021f2e:	fb82 1203 	smull	r1, r2, r2, r3
 8021f32:	1192      	asrs	r2, r2, #6
 8021f34:	17db      	asrs	r3, r3, #31
 8021f36:	1ad3      	subs	r3, r2, r3
 8021f38:	b21b      	sxth	r3, r3
 8021f3a:	e000      	b.n	8021f3e <calendar_init+0x462>
 8021f3c:	2301      	movs	r3, #1
 8021f3e:	461a      	mov	r2, r3
 8021f40:	2100      	movs	r1, #0
 8021f42:	4640      	mov	r0, r8
 8021f44:	f7fc fc37 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8021f48:	4b7c      	ldr	r3, [pc, #496]	; (802213c <calendar_init+0x660>)
 8021f4a:	681b      	ldr	r3, [r3, #0]
 8021f4c:	f103 0838 	add.w	r8, r3, #56	; 0x38
 8021f50:	2000      	movs	r0, #0
 8021f52:	f7f8 f8ea 	bl	801a12a <lv_disp_get_size_category>
 8021f56:	4603      	mov	r3, r0
 8021f58:	2b01      	cmp	r3, #1
 8021f5a:	d81e      	bhi.n	8021f9a <calendar_init+0x4be>
 8021f5c:	2000      	movs	r0, #0
 8021f5e:	f7f8 f8cb 	bl	801a0f8 <lv_disp_get_dpi>
 8021f62:	4603      	mov	r3, r0
 8021f64:	461a      	mov	r2, r3
 8021f66:	4613      	mov	r3, r2
 8021f68:	011b      	lsls	r3, r3, #4
 8021f6a:	1a9b      	subs	r3, r3, r2
 8021f6c:	3350      	adds	r3, #80	; 0x50
 8021f6e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021f72:	db10      	blt.n	8021f96 <calendar_init+0x4ba>
 8021f74:	2000      	movs	r0, #0
 8021f76:	f7f8 f8bf 	bl	801a0f8 <lv_disp_get_dpi>
 8021f7a:	4603      	mov	r3, r0
 8021f7c:	461a      	mov	r2, r3
 8021f7e:	4613      	mov	r3, r2
 8021f80:	011b      	lsls	r3, r3, #4
 8021f82:	1a9b      	subs	r3, r3, r2
 8021f84:	3350      	adds	r3, #80	; 0x50
 8021f86:	4a6e      	ldr	r2, [pc, #440]	; (8022140 <calendar_init+0x664>)
 8021f88:	fb82 1203 	smull	r1, r2, r2, r3
 8021f8c:	1192      	asrs	r2, r2, #6
 8021f8e:	17db      	asrs	r3, r3, #31
 8021f90:	1ad3      	subs	r3, r2, r3
 8021f92:	b21b      	sxth	r3, r3
 8021f94:	e021      	b.n	8021fda <calendar_init+0x4fe>
 8021f96:	2301      	movs	r3, #1
 8021f98:	e01f      	b.n	8021fda <calendar_init+0x4fe>
 8021f9a:	2000      	movs	r0, #0
 8021f9c:	f7f8 f8ac 	bl	801a0f8 <lv_disp_get_dpi>
 8021fa0:	4603      	mov	r3, r0
 8021fa2:	461a      	mov	r2, r3
 8021fa4:	4613      	mov	r3, r2
 8021fa6:	011b      	lsls	r3, r3, #4
 8021fa8:	1a9b      	subs	r3, r3, r2
 8021faa:	005b      	lsls	r3, r3, #1
 8021fac:	3350      	adds	r3, #80	; 0x50
 8021fae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021fb2:	db11      	blt.n	8021fd8 <calendar_init+0x4fc>
 8021fb4:	2000      	movs	r0, #0
 8021fb6:	f7f8 f89f 	bl	801a0f8 <lv_disp_get_dpi>
 8021fba:	4603      	mov	r3, r0
 8021fbc:	461a      	mov	r2, r3
 8021fbe:	4613      	mov	r3, r2
 8021fc0:	011b      	lsls	r3, r3, #4
 8021fc2:	1a9b      	subs	r3, r3, r2
 8021fc4:	005b      	lsls	r3, r3, #1
 8021fc6:	3350      	adds	r3, #80	; 0x50
 8021fc8:	4a5d      	ldr	r2, [pc, #372]	; (8022140 <calendar_init+0x664>)
 8021fca:	fb82 1203 	smull	r1, r2, r2, r3
 8021fce:	1192      	asrs	r2, r2, #6
 8021fd0:	17db      	asrs	r3, r3, #31
 8021fd2:	1ad3      	subs	r3, r2, r3
 8021fd4:	b21b      	sxth	r3, r3
 8021fd6:	e000      	b.n	8021fda <calendar_init+0x4fe>
 8021fd8:	2301      	movs	r3, #1
 8021fda:	461a      	mov	r2, r3
 8021fdc:	2100      	movs	r1, #0
 8021fde:	4640      	mov	r0, r8
 8021fe0:	f7fc fbb7 	bl	801e752 <lv_style_set_pad_bottom>

    style_init_reset(&styles->calendar_date_nums);
 8021fe4:	4b55      	ldr	r3, [pc, #340]	; (802213c <calendar_init+0x660>)
 8021fe6:	681b      	ldr	r3, [r3, #0]
 8021fe8:	3330      	adds	r3, #48	; 0x30
 8021fea:	4618      	mov	r0, r3
 8021fec:	f003 f8ac 	bl	8025148 <style_init_reset>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
 8021ff0:	4b52      	ldr	r3, [pc, #328]	; (802213c <calendar_init+0x660>)
 8021ff2:	681b      	ldr	r3, [r3, #0]
 8021ff4:	f103 0830 	add.w	r8, r3, #48	; 0x30
 8021ff8:	2000      	movs	r0, #0
 8021ffa:	f7f8 f87d 	bl	801a0f8 <lv_disp_get_dpi>
 8021ffe:	4603      	mov	r3, r0
 8022000:	3314      	adds	r3, #20
 8022002:	009b      	lsls	r3, r3, #2
 8022004:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022008:	db0d      	blt.n	8022026 <calendar_init+0x54a>
 802200a:	2000      	movs	r0, #0
 802200c:	f7f8 f874 	bl	801a0f8 <lv_disp_get_dpi>
 8022010:	4603      	mov	r3, r0
 8022012:	3314      	adds	r3, #20
 8022014:	009b      	lsls	r3, r3, #2
 8022016:	4a4a      	ldr	r2, [pc, #296]	; (8022140 <calendar_init+0x664>)
 8022018:	fb82 1203 	smull	r1, r2, r2, r3
 802201c:	1192      	asrs	r2, r2, #6
 802201e:	17db      	asrs	r3, r3, #31
 8022020:	1ad3      	subs	r3, r2, r3
 8022022:	b21b      	sxth	r3, r3
 8022024:	e000      	b.n	8022028 <calendar_init+0x54c>
 8022026:	2301      	movs	r3, #1
 8022028:	461a      	mov	r2, r3
 802202a:	2100      	movs	r1, #0
 802202c:	4640      	mov	r0, r8
 802202e:	f7fc fb13 	bl	801e658 <lv_style_set_radius>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
 8022032:	4b42      	ldr	r3, [pc, #264]	; (802213c <calendar_init+0x660>)
 8022034:	681b      	ldr	r3, [r3, #0]
 8022036:	f103 0830 	add.w	r8, r3, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 802203a:	4b42      	ldr	r3, [pc, #264]	; (8022144 <calendar_init+0x668>)
 802203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802203e:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
 8022042:	2b00      	cmp	r3, #0
 8022044:	d004      	beq.n	8022050 <calendar_init+0x574>
 8022046:	4840      	ldr	r0, [pc, #256]	; (8022148 <calendar_init+0x66c>)
 8022048:	f7fc fac0 	bl	801e5cc <lv_color_hex>
 802204c:	4606      	mov	r6, r0
 802204e:	e00b      	b.n	8022068 <calendar_init+0x58c>
 8022050:	4633      	mov	r3, r6
 8022052:	f043 06ff 	orr.w	r6, r3, #255	; 0xff
 8022056:	4633      	mov	r3, r6
 8022058:	f443 467f 	orr.w	r6, r3, #65280	; 0xff00
 802205c:	4633      	mov	r3, r6
 802205e:	f443 067f 	orr.w	r6, r3, #16711680	; 0xff0000
 8022062:	4633      	mov	r3, r6
 8022064:	f043 467f 	orr.w	r6, r3, #4278190080	; 0xff000000
 8022068:	4632      	mov	r2, r6
 802206a:	2101      	movs	r1, #1
 802206c:	4640      	mov	r0, r8
 802206e:	f7fc fe1b 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
 8022072:	4b32      	ldr	r3, [pc, #200]	; (802213c <calendar_init+0x660>)
 8022074:	681b      	ldr	r3, [r3, #0]
 8022076:	f103 0030 	add.w	r0, r3, #48	; 0x30
 802207a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802207e:	f363 0407 	bfi	r4, r3, #0, #8
 8022082:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8022086:	f363 240f 	bfi	r4, r3, #8, #8
 802208a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802208e:	f363 4417 	bfi	r4, r3, #16, #8
 8022092:	4623      	mov	r3, r4
 8022094:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8022098:	4622      	mov	r2, r4
 802209a:	2120      	movs	r1, #32
 802209c:	f7fc fe04 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
 80220a0:	4b26      	ldr	r3, [pc, #152]	; (802213c <calendar_init+0x660>)
 80220a2:	681b      	ldr	r3, [r3, #0]
 80220a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80220a8:	4b26      	ldr	r3, [pc, #152]	; (8022144 <calendar_init+0x668>)
 80220aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80220ac:	f003 0302 	and.w	r3, r3, #2
 80220b0:	2b00      	cmp	r3, #0
 80220b2:	d001      	beq.n	80220b8 <calendar_init+0x5dc>
 80220b4:	2333      	movs	r3, #51	; 0x33
 80220b6:	e000      	b.n	80220ba <calendar_init+0x5de>
 80220b8:	2366      	movs	r3, #102	; 0x66
 80220ba:	461a      	mov	r2, r3
 80220bc:	2101      	movs	r1, #1
 80220be:	f7fc fc27 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
 80220c2:	4b1e      	ldr	r3, [pc, #120]	; (802213c <calendar_init+0x660>)
 80220c4:	681b      	ldr	r3, [r3, #0]
 80220c6:	3330      	adds	r3, #48	; 0x30
 80220c8:	2233      	movs	r2, #51	; 0x33
 80220ca:	2110      	movs	r1, #16
 80220cc:	4618      	mov	r0, r3
 80220ce:	f7fc fc1f 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
 80220d2:	4b1a      	ldr	r3, [pc, #104]	; (802213c <calendar_init+0x660>)
 80220d4:	681b      	ldr	r3, [r3, #0]
 80220d6:	3330      	adds	r3, #48	; 0x30
 80220d8:	22ff      	movs	r2, #255	; 0xff
 80220da:	2102      	movs	r1, #2
 80220dc:	4618      	mov	r0, r3
 80220de:	f7fc fc17 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
 80220e2:	4b16      	ldr	r3, [pc, #88]	; (802213c <calendar_init+0x660>)
 80220e4:	681b      	ldr	r3, [r3, #0]
 80220e6:	3330      	adds	r3, #48	; 0x30
 80220e8:	464a      	mov	r2, r9
 80220ea:	f042 09ff 	orr.w	r9, r2, #255	; 0xff
 80220ee:	464a      	mov	r2, r9
 80220f0:	f442 497f 	orr.w	r9, r2, #65280	; 0xff00
 80220f4:	464a      	mov	r2, r9
 80220f6:	f442 097f 	orr.w	r9, r2, #16711680	; 0xff0000
 80220fa:	464a      	mov	r2, r9
 80220fc:	f042 497f 	orr.w	r9, r2, #4278190080	; 0xff000000
 8022100:	464a      	mov	r2, r9
 8022102:	2102      	movs	r1, #2
 8022104:	4618      	mov	r0, r3
 8022106:	f7fc fdcf 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
 802210a:	4b0c      	ldr	r3, [pc, #48]	; (802213c <calendar_init+0x660>)
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8022112:	4b0c      	ldr	r3, [pc, #48]	; (8022144 <calendar_init+0x668>)
 8022114:	68da      	ldr	r2, [r3, #12]
 8022116:	2102      	movs	r1, #2
 8022118:	f7fc fbe3 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
 802211c:	4b07      	ldr	r3, [pc, #28]	; (802213c <calendar_init+0x660>)
 802211e:	681b      	ldr	r3, [r3, #0]
 8022120:	f103 0430 	add.w	r4, r3, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
 8022124:	4b07      	ldr	r3, [pc, #28]	; (8022144 <calendar_init+0x668>)
 8022126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022128:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
 802212c:	2b00      	cmp	r3, #0
 802212e:	d00f      	beq.n	8022150 <calendar_init+0x674>
 8022130:	4806      	ldr	r0, [pc, #24]	; (802214c <calendar_init+0x670>)
 8022132:	f7fc fa4b 	bl	801e5cc <lv_color_hex>
 8022136:	4605      	mov	r5, r0
 8022138:	e016      	b.n	8022168 <calendar_init+0x68c>
 802213a:	bf00      	nop
 802213c:	200200d0 	.word	0x200200d0
 8022140:	66666667 	.word	0x66666667
 8022144:	200200a4 	.word	0x200200a4
 8022148:	0031404f 	.word	0x0031404f
 802214c:	00666666 	.word	0x00666666
 8022150:	462b      	mov	r3, r5
 8022152:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 8022156:	462b      	mov	r3, r5
 8022158:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 802215c:	462b      	mov	r3, r5
 802215e:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 8022162:	462b      	mov	r3, r5
 8022164:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 8022168:	462a      	mov	r2, r5
 802216a:	2100      	movs	r1, #0
 802216c:	4620      	mov	r0, r4
 802216e:	f7fc fbb8 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
 8022172:	4b9b      	ldr	r3, [pc, #620]	; (80223e0 <calendar_init+0x904>)
 8022174:	681b      	ldr	r3, [r3, #0]
 8022176:	f103 0030 	add.w	r0, r3, #48	; 0x30
 802217a:	4b9a      	ldr	r3, [pc, #616]	; (80223e4 <calendar_init+0x908>)
 802217c:	68da      	ldr	r2, [r3, #12]
 802217e:	2101      	movs	r1, #1
 8022180:	f7fc fbaf 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
 8022184:	4b96      	ldr	r3, [pc, #600]	; (80223e0 <calendar_init+0x904>)
 8022186:	681b      	ldr	r3, [r3, #0]
 8022188:	3330      	adds	r3, #48	; 0x30
 802218a:	2202      	movs	r2, #2
 802218c:	2101      	movs	r1, #1
 802218e:	4618      	mov	r0, r3
 8022190:	f7fc fbd6 	bl	801e940 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
 8022194:	4b92      	ldr	r3, [pc, #584]	; (80223e0 <calendar_init+0x904>)
 8022196:	681b      	ldr	r3, [r3, #0]
 8022198:	3330      	adds	r3, #48	; 0x30
 802219a:	2204      	movs	r2, #4
 802219c:	2101      	movs	r1, #1
 802219e:	4618      	mov	r0, r3
 80221a0:	f7fc fbe7 	bl	801e972 <lv_style_set_border_side>
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
 80221a4:	4b8e      	ldr	r3, [pc, #568]	; (80223e0 <calendar_init+0x904>)
 80221a6:	681b      	ldr	r3, [r3, #0]
 80221a8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80221ac:	4b8d      	ldr	r3, [pc, #564]	; (80223e4 <calendar_init+0x908>)
 80221ae:	68da      	ldr	r2, [r3, #12]
 80221b0:	2101      	movs	r1, #1
 80221b2:	f7fc fc10 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
 80221b6:	4b8a      	ldr	r3, [pc, #552]	; (80223e0 <calendar_init+0x904>)
 80221b8:	681b      	ldr	r3, [r3, #0]
 80221ba:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80221be:	2000      	movs	r0, #0
 80221c0:	f7f7 ff9a 	bl	801a0f8 <lv_disp_get_dpi>
 80221c4:	4603      	mov	r3, r0
 80221c6:	461a      	mov	r2, r3
 80221c8:	4613      	mov	r3, r2
 80221ca:	005b      	lsls	r3, r3, #1
 80221cc:	4413      	add	r3, r2
 80221ce:	3350      	adds	r3, #80	; 0x50
 80221d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80221d4:	db10      	blt.n	80221f8 <calendar_init+0x71c>
 80221d6:	2000      	movs	r0, #0
 80221d8:	f7f7 ff8e 	bl	801a0f8 <lv_disp_get_dpi>
 80221dc:	4603      	mov	r3, r0
 80221de:	461a      	mov	r2, r3
 80221e0:	4613      	mov	r3, r2
 80221e2:	005b      	lsls	r3, r3, #1
 80221e4:	4413      	add	r3, r2
 80221e6:	3350      	adds	r3, #80	; 0x50
 80221e8:	4a7f      	ldr	r2, [pc, #508]	; (80223e8 <calendar_init+0x90c>)
 80221ea:	fb82 1203 	smull	r1, r2, r2, r3
 80221ee:	1192      	asrs	r2, r2, #6
 80221f0:	17db      	asrs	r3, r3, #31
 80221f2:	1ad3      	subs	r3, r2, r3
 80221f4:	b21b      	sxth	r3, r3
 80221f6:	e000      	b.n	80221fa <calendar_init+0x71e>
 80221f8:	2301      	movs	r3, #1
 80221fa:	461a      	mov	r2, r3
 80221fc:	2100      	movs	r1, #0
 80221fe:	4620      	mov	r0, r4
 8022200:	f7fc faf2 	bl	801e7e8 <lv_style_set_pad_inner>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8022204:	4b76      	ldr	r3, [pc, #472]	; (80223e0 <calendar_init+0x904>)
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	f103 0430 	add.w	r4, r3, #48	; 0x30
 802220c:	2000      	movs	r0, #0
 802220e:	f7f7 ff8c 	bl	801a12a <lv_disp_get_size_category>
 8022212:	4603      	mov	r3, r0
 8022214:	2b01      	cmp	r3, #1
 8022216:	d81e      	bhi.n	8022256 <calendar_init+0x77a>
 8022218:	2000      	movs	r0, #0
 802221a:	f7f7 ff6d 	bl	801a0f8 <lv_disp_get_dpi>
 802221e:	4603      	mov	r3, r0
 8022220:	461a      	mov	r2, r3
 8022222:	4613      	mov	r3, r2
 8022224:	011b      	lsls	r3, r3, #4
 8022226:	1a9b      	subs	r3, r3, r2
 8022228:	3350      	adds	r3, #80	; 0x50
 802222a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802222e:	db10      	blt.n	8022252 <calendar_init+0x776>
 8022230:	2000      	movs	r0, #0
 8022232:	f7f7 ff61 	bl	801a0f8 <lv_disp_get_dpi>
 8022236:	4603      	mov	r3, r0
 8022238:	461a      	mov	r2, r3
 802223a:	4613      	mov	r3, r2
 802223c:	011b      	lsls	r3, r3, #4
 802223e:	1a9b      	subs	r3, r3, r2
 8022240:	3350      	adds	r3, #80	; 0x50
 8022242:	4a69      	ldr	r2, [pc, #420]	; (80223e8 <calendar_init+0x90c>)
 8022244:	fb82 1203 	smull	r1, r2, r2, r3
 8022248:	1192      	asrs	r2, r2, #6
 802224a:	17db      	asrs	r3, r3, #31
 802224c:	1ad3      	subs	r3, r2, r3
 802224e:	b21b      	sxth	r3, r3
 8022250:	e021      	b.n	8022296 <calendar_init+0x7ba>
 8022252:	2301      	movs	r3, #1
 8022254:	e01f      	b.n	8022296 <calendar_init+0x7ba>
 8022256:	2000      	movs	r0, #0
 8022258:	f7f7 ff4e 	bl	801a0f8 <lv_disp_get_dpi>
 802225c:	4603      	mov	r3, r0
 802225e:	461a      	mov	r2, r3
 8022260:	4613      	mov	r3, r2
 8022262:	011b      	lsls	r3, r3, #4
 8022264:	1a9b      	subs	r3, r3, r2
 8022266:	005b      	lsls	r3, r3, #1
 8022268:	3350      	adds	r3, #80	; 0x50
 802226a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802226e:	db11      	blt.n	8022294 <calendar_init+0x7b8>
 8022270:	2000      	movs	r0, #0
 8022272:	f7f7 ff41 	bl	801a0f8 <lv_disp_get_dpi>
 8022276:	4603      	mov	r3, r0
 8022278:	461a      	mov	r2, r3
 802227a:	4613      	mov	r3, r2
 802227c:	011b      	lsls	r3, r3, #4
 802227e:	1a9b      	subs	r3, r3, r2
 8022280:	005b      	lsls	r3, r3, #1
 8022282:	3350      	adds	r3, #80	; 0x50
 8022284:	4a58      	ldr	r2, [pc, #352]	; (80223e8 <calendar_init+0x90c>)
 8022286:	fb82 1203 	smull	r1, r2, r2, r3
 802228a:	1192      	asrs	r2, r2, #6
 802228c:	17db      	asrs	r3, r3, #31
 802228e:	1ad3      	subs	r3, r2, r3
 8022290:	b21b      	sxth	r3, r3
 8022292:	e000      	b.n	8022296 <calendar_init+0x7ba>
 8022294:	2301      	movs	r3, #1
 8022296:	461a      	mov	r2, r3
 8022298:	2100      	movs	r1, #0
 802229a:	4620      	mov	r0, r4
 802229c:	f7fc fa72 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 80222a0:	4b4f      	ldr	r3, [pc, #316]	; (80223e0 <calendar_init+0x904>)
 80222a2:	681b      	ldr	r3, [r3, #0]
 80222a4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80222a8:	2000      	movs	r0, #0
 80222aa:	f7f7 ff3e 	bl	801a12a <lv_disp_get_size_category>
 80222ae:	4603      	mov	r3, r0
 80222b0:	2b01      	cmp	r3, #1
 80222b2:	d81e      	bhi.n	80222f2 <calendar_init+0x816>
 80222b4:	2000      	movs	r0, #0
 80222b6:	f7f7 ff1f 	bl	801a0f8 <lv_disp_get_dpi>
 80222ba:	4603      	mov	r3, r0
 80222bc:	461a      	mov	r2, r3
 80222be:	4613      	mov	r3, r2
 80222c0:	011b      	lsls	r3, r3, #4
 80222c2:	1a9b      	subs	r3, r3, r2
 80222c4:	3350      	adds	r3, #80	; 0x50
 80222c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80222ca:	db10      	blt.n	80222ee <calendar_init+0x812>
 80222cc:	2000      	movs	r0, #0
 80222ce:	f7f7 ff13 	bl	801a0f8 <lv_disp_get_dpi>
 80222d2:	4603      	mov	r3, r0
 80222d4:	461a      	mov	r2, r3
 80222d6:	4613      	mov	r3, r2
 80222d8:	011b      	lsls	r3, r3, #4
 80222da:	1a9b      	subs	r3, r3, r2
 80222dc:	3350      	adds	r3, #80	; 0x50
 80222de:	4a42      	ldr	r2, [pc, #264]	; (80223e8 <calendar_init+0x90c>)
 80222e0:	fb82 1203 	smull	r1, r2, r2, r3
 80222e4:	1192      	asrs	r2, r2, #6
 80222e6:	17db      	asrs	r3, r3, #31
 80222e8:	1ad3      	subs	r3, r2, r3
 80222ea:	b21b      	sxth	r3, r3
 80222ec:	e021      	b.n	8022332 <calendar_init+0x856>
 80222ee:	2301      	movs	r3, #1
 80222f0:	e01f      	b.n	8022332 <calendar_init+0x856>
 80222f2:	2000      	movs	r0, #0
 80222f4:	f7f7 ff00 	bl	801a0f8 <lv_disp_get_dpi>
 80222f8:	4603      	mov	r3, r0
 80222fa:	461a      	mov	r2, r3
 80222fc:	4613      	mov	r3, r2
 80222fe:	011b      	lsls	r3, r3, #4
 8022300:	1a9b      	subs	r3, r3, r2
 8022302:	005b      	lsls	r3, r3, #1
 8022304:	3350      	adds	r3, #80	; 0x50
 8022306:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802230a:	db11      	blt.n	8022330 <calendar_init+0x854>
 802230c:	2000      	movs	r0, #0
 802230e:	f7f7 fef3 	bl	801a0f8 <lv_disp_get_dpi>
 8022312:	4603      	mov	r3, r0
 8022314:	461a      	mov	r2, r3
 8022316:	4613      	mov	r3, r2
 8022318:	011b      	lsls	r3, r3, #4
 802231a:	1a9b      	subs	r3, r3, r2
 802231c:	005b      	lsls	r3, r3, #1
 802231e:	3350      	adds	r3, #80	; 0x50
 8022320:	4a31      	ldr	r2, [pc, #196]	; (80223e8 <calendar_init+0x90c>)
 8022322:	fb82 1203 	smull	r1, r2, r2, r3
 8022326:	1192      	asrs	r2, r2, #6
 8022328:	17db      	asrs	r3, r3, #31
 802232a:	1ad3      	subs	r3, r2, r3
 802232c:	b21b      	sxth	r3, r3
 802232e:	e000      	b.n	8022332 <calendar_init+0x856>
 8022330:	2301      	movs	r3, #1
 8022332:	461a      	mov	r2, r3
 8022334:	2100      	movs	r1, #0
 8022336:	4620      	mov	r0, r4
 8022338:	f7fc fa3d 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 802233c:	4b28      	ldr	r3, [pc, #160]	; (80223e0 <calendar_init+0x904>)
 802233e:	681b      	ldr	r3, [r3, #0]
 8022340:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8022344:	2000      	movs	r0, #0
 8022346:	f7f7 fef0 	bl	801a12a <lv_disp_get_size_category>
 802234a:	4603      	mov	r3, r0
 802234c:	2b01      	cmp	r3, #1
 802234e:	d81e      	bhi.n	802238e <calendar_init+0x8b2>
 8022350:	2000      	movs	r0, #0
 8022352:	f7f7 fed1 	bl	801a0f8 <lv_disp_get_dpi>
 8022356:	4603      	mov	r3, r0
 8022358:	461a      	mov	r2, r3
 802235a:	4613      	mov	r3, r2
 802235c:	011b      	lsls	r3, r3, #4
 802235e:	1a9b      	subs	r3, r3, r2
 8022360:	3350      	adds	r3, #80	; 0x50
 8022362:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022366:	db10      	blt.n	802238a <calendar_init+0x8ae>
 8022368:	2000      	movs	r0, #0
 802236a:	f7f7 fec5 	bl	801a0f8 <lv_disp_get_dpi>
 802236e:	4603      	mov	r3, r0
 8022370:	461a      	mov	r2, r3
 8022372:	4613      	mov	r3, r2
 8022374:	011b      	lsls	r3, r3, #4
 8022376:	1a9b      	subs	r3, r3, r2
 8022378:	3350      	adds	r3, #80	; 0x50
 802237a:	4a1b      	ldr	r2, [pc, #108]	; (80223e8 <calendar_init+0x90c>)
 802237c:	fb82 1203 	smull	r1, r2, r2, r3
 8022380:	1192      	asrs	r2, r2, #6
 8022382:	17db      	asrs	r3, r3, #31
 8022384:	1ad3      	subs	r3, r2, r3
 8022386:	b21b      	sxth	r3, r3
 8022388:	e021      	b.n	80223ce <calendar_init+0x8f2>
 802238a:	2301      	movs	r3, #1
 802238c:	e01f      	b.n	80223ce <calendar_init+0x8f2>
 802238e:	2000      	movs	r0, #0
 8022390:	f7f7 feb2 	bl	801a0f8 <lv_disp_get_dpi>
 8022394:	4603      	mov	r3, r0
 8022396:	461a      	mov	r2, r3
 8022398:	4613      	mov	r3, r2
 802239a:	011b      	lsls	r3, r3, #4
 802239c:	1a9b      	subs	r3, r3, r2
 802239e:	005b      	lsls	r3, r3, #1
 80223a0:	3350      	adds	r3, #80	; 0x50
 80223a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80223a6:	db11      	blt.n	80223cc <calendar_init+0x8f0>
 80223a8:	2000      	movs	r0, #0
 80223aa:	f7f7 fea5 	bl	801a0f8 <lv_disp_get_dpi>
 80223ae:	4603      	mov	r3, r0
 80223b0:	461a      	mov	r2, r3
 80223b2:	4613      	mov	r3, r2
 80223b4:	011b      	lsls	r3, r3, #4
 80223b6:	1a9b      	subs	r3, r3, r2
 80223b8:	005b      	lsls	r3, r3, #1
 80223ba:	3350      	adds	r3, #80	; 0x50
 80223bc:	4a0a      	ldr	r2, [pc, #40]	; (80223e8 <calendar_init+0x90c>)
 80223be:	fb82 1203 	smull	r1, r2, r2, r3
 80223c2:	1192      	asrs	r2, r2, #6
 80223c4:	17db      	asrs	r3, r3, #31
 80223c6:	1ad3      	subs	r3, r2, r3
 80223c8:	b21b      	sxth	r3, r3
 80223ca:	e000      	b.n	80223ce <calendar_init+0x8f2>
 80223cc:	2301      	movs	r3, #1
 80223ce:	461a      	mov	r2, r3
 80223d0:	2100      	movs	r1, #0
 80223d2:	4620      	mov	r0, r4
 80223d4:	f7fc f9bd 	bl	801e752 <lv_style_set_pad_bottom>
#endif
}
 80223d8:	bf00      	nop
 80223da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223de:	bf00      	nop
 80223e0:	200200d0 	.word	0x200200d0
 80223e4:	200200a4 	.word	0x200200a4
 80223e8:	66666667 	.word	0x66666667

080223ec <cpicker_init>:

static void cpicker_init(void)
{
 80223ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223ee:	af00      	add	r7, sp, #0
#if LV_USE_CPICKER
    style_init_reset(&styles->cpicker_bg);
 80223f0:	4bc5      	ldr	r3, [pc, #788]	; (8022708 <cpicker_init+0x31c>)
 80223f2:	681b      	ldr	r3, [r3, #0]
 80223f4:	333c      	adds	r3, #60	; 0x3c
 80223f6:	4618      	mov	r0, r3
 80223f8:	f002 fea6 	bl	8025148 <style_init_reset>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 80223fc:	4bc2      	ldr	r3, [pc, #776]	; (8022708 <cpicker_init+0x31c>)
 80223fe:	681b      	ldr	r3, [r3, #0]
 8022400:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 8022404:	2000      	movs	r0, #0
 8022406:	f7f7 fe77 	bl	801a0f8 <lv_disp_get_dpi>
 802240a:	4603      	mov	r3, r0
 802240c:	461a      	mov	r2, r3
 802240e:	4613      	mov	r3, r2
 8022410:	011b      	lsls	r3, r3, #4
 8022412:	1a9b      	subs	r3, r3, r2
 8022414:	005b      	lsls	r3, r3, #1
 8022416:	3350      	adds	r3, #80	; 0x50
 8022418:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802241c:	db11      	blt.n	8022442 <cpicker_init+0x56>
 802241e:	2000      	movs	r0, #0
 8022420:	f7f7 fe6a 	bl	801a0f8 <lv_disp_get_dpi>
 8022424:	4603      	mov	r3, r0
 8022426:	461a      	mov	r2, r3
 8022428:	4613      	mov	r3, r2
 802242a:	011b      	lsls	r3, r3, #4
 802242c:	1a9b      	subs	r3, r3, r2
 802242e:	005b      	lsls	r3, r3, #1
 8022430:	3350      	adds	r3, #80	; 0x50
 8022432:	4ab6      	ldr	r2, [pc, #728]	; (802270c <cpicker_init+0x320>)
 8022434:	fb82 1203 	smull	r1, r2, r2, r3
 8022438:	1192      	asrs	r2, r2, #6
 802243a:	17db      	asrs	r3, r3, #31
 802243c:	1ad3      	subs	r3, r2, r3
 802243e:	b21b      	sxth	r3, r3
 8022440:	e000      	b.n	8022444 <cpicker_init+0x58>
 8022442:	2301      	movs	r3, #1
 8022444:	461a      	mov	r2, r3
 8022446:	2100      	movs	r1, #0
 8022448:	4630      	mov	r0, r6
 802244a:	f7fc fdc1 	bl	801efd0 <lv_style_set_scale_width>
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 802244e:	4bae      	ldr	r3, [pc, #696]	; (8022708 <cpicker_init+0x31c>)
 8022450:	681b      	ldr	r3, [r3, #0]
 8022452:	333c      	adds	r3, #60	; 0x3c
 8022454:	22ff      	movs	r2, #255	; 0xff
 8022456:	2100      	movs	r1, #0
 8022458:	4618      	mov	r0, r3
 802245a:	f7fc fa59 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
 802245e:	4baa      	ldr	r3, [pc, #680]	; (8022708 <cpicker_init+0x31c>)
 8022460:	681b      	ldr	r3, [r3, #0]
 8022462:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 8022466:	4baa      	ldr	r3, [pc, #680]	; (8022710 <cpicker_init+0x324>)
 8022468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802246a:	f003 0302 	and.w	r3, r3, #2
 802246e:	2b00      	cmp	r3, #0
 8022470:	d004      	beq.n	802247c <cpicker_init+0x90>
 8022472:	48a8      	ldr	r0, [pc, #672]	; (8022714 <cpicker_init+0x328>)
 8022474:	f7fc f8aa 	bl	801e5cc <lv_color_hex>
 8022478:	4603      	mov	r3, r0
 802247a:	e003      	b.n	8022484 <cpicker_init+0x98>
 802247c:	48a6      	ldr	r0, [pc, #664]	; (8022718 <cpicker_init+0x32c>)
 802247e:	f7fc f8a5 	bl	801e5cc <lv_color_hex>
 8022482:	4603      	mov	r3, r0
 8022484:	461a      	mov	r2, r3
 8022486:	2100      	movs	r1, #0
 8022488:	4630      	mov	r0, r6
 802248a:	f7fc fa2a 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
 802248e:	4b9e      	ldr	r3, [pc, #632]	; (8022708 <cpicker_init+0x31c>)
 8022490:	681b      	ldr	r3, [r3, #0]
 8022492:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 8022496:	2000      	movs	r0, #0
 8022498:	f7f7 fe2e 	bl	801a0f8 <lv_disp_get_dpi>
 802249c:	4603      	mov	r3, r0
 802249e:	461a      	mov	r2, r3
 80224a0:	4613      	mov	r3, r2
 80224a2:	009b      	lsls	r3, r3, #2
 80224a4:	4413      	add	r3, r2
 80224a6:	009b      	lsls	r3, r3, #2
 80224a8:	3350      	adds	r3, #80	; 0x50
 80224aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80224ae:	db11      	blt.n	80224d4 <cpicker_init+0xe8>
 80224b0:	2000      	movs	r0, #0
 80224b2:	f7f7 fe21 	bl	801a0f8 <lv_disp_get_dpi>
 80224b6:	4603      	mov	r3, r0
 80224b8:	461a      	mov	r2, r3
 80224ba:	4613      	mov	r3, r2
 80224bc:	009b      	lsls	r3, r3, #2
 80224be:	4413      	add	r3, r2
 80224c0:	009b      	lsls	r3, r3, #2
 80224c2:	3350      	adds	r3, #80	; 0x50
 80224c4:	4a91      	ldr	r2, [pc, #580]	; (802270c <cpicker_init+0x320>)
 80224c6:	fb82 1203 	smull	r1, r2, r2, r3
 80224ca:	1192      	asrs	r2, r2, #6
 80224cc:	17db      	asrs	r3, r3, #31
 80224ce:	1ad3      	subs	r3, r2, r3
 80224d0:	b21b      	sxth	r3, r3
 80224d2:	e000      	b.n	80224d6 <cpicker_init+0xea>
 80224d4:	2301      	movs	r3, #1
 80224d6:	461a      	mov	r2, r3
 80224d8:	2100      	movs	r1, #0
 80224da:	4630      	mov	r0, r6
 80224dc:	f7fc f984 	bl	801e7e8 <lv_style_set_pad_inner>
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80224e0:	4b89      	ldr	r3, [pc, #548]	; (8022708 <cpicker_init+0x31c>)
 80224e2:	681b      	ldr	r3, [r3, #0]
 80224e4:	333c      	adds	r3, #60	; 0x3c
 80224e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80224ea:	2100      	movs	r1, #0
 80224ec:	4618      	mov	r0, r3
 80224ee:	f7fc f8b3 	bl	801e658 <lv_style_set_radius>

    style_init_reset(&styles->cpicker_indic);
 80224f2:	4b85      	ldr	r3, [pc, #532]	; (8022708 <cpicker_init+0x31c>)
 80224f4:	681b      	ldr	r3, [r3, #0]
 80224f6:	3340      	adds	r3, #64	; 0x40
 80224f8:	4618      	mov	r0, r3
 80224fa:	f002 fe25 	bl	8025148 <style_init_reset>
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80224fe:	4b82      	ldr	r3, [pc, #520]	; (8022708 <cpicker_init+0x31c>)
 8022500:	681b      	ldr	r3, [r3, #0]
 8022502:	3340      	adds	r3, #64	; 0x40
 8022504:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8022508:	2100      	movs	r1, #0
 802250a:	4618      	mov	r0, r3
 802250c:	f7fc f8a4 	bl	801e658 <lv_style_set_radius>
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8022510:	4b7d      	ldr	r3, [pc, #500]	; (8022708 <cpicker_init+0x31c>)
 8022512:	681b      	ldr	r3, [r3, #0]
 8022514:	3340      	adds	r3, #64	; 0x40
 8022516:	462a      	mov	r2, r5
 8022518:	f042 05ff 	orr.w	r5, r2, #255	; 0xff
 802251c:	462a      	mov	r2, r5
 802251e:	f442 457f 	orr.w	r5, r2, #65280	; 0xff00
 8022522:	462a      	mov	r2, r5
 8022524:	f442 057f 	orr.w	r5, r2, #16711680	; 0xff0000
 8022528:	462a      	mov	r2, r5
 802252a:	f042 457f 	orr.w	r5, r2, #4278190080	; 0xff000000
 802252e:	462a      	mov	r2, r5
 8022530:	2100      	movs	r1, #0
 8022532:	4618      	mov	r0, r3
 8022534:	f7fc f9d5 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 8022538:	4b73      	ldr	r3, [pc, #460]	; (8022708 <cpicker_init+0x31c>)
 802253a:	681b      	ldr	r3, [r3, #0]
 802253c:	3340      	adds	r3, #64	; 0x40
 802253e:	22ff      	movs	r2, #255	; 0xff
 8022540:	2100      	movs	r1, #0
 8022542:	4618      	mov	r0, r3
 8022544:	f7fc f9e4 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
 8022548:	4b6f      	ldr	r3, [pc, #444]	; (8022708 <cpicker_init+0x31c>)
 802254a:	681b      	ldr	r3, [r3, #0]
 802254c:	3340      	adds	r3, #64	; 0x40
 802254e:	2202      	movs	r2, #2
 8022550:	2100      	movs	r1, #0
 8022552:	4618      	mov	r0, r3
 8022554:	f7fc f9f4 	bl	801e940 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
 8022558:	4b6b      	ldr	r3, [pc, #428]	; (8022708 <cpicker_init+0x31c>)
 802255a:	681b      	ldr	r3, [r3, #0]
 802255c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8022560:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8022564:	f363 0407 	bfi	r4, r3, #0, #8
 8022568:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802256c:	f363 240f 	bfi	r4, r3, #8, #8
 8022570:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8022574:	f363 4417 	bfi	r4, r3, #16, #8
 8022578:	4623      	mov	r3, r4
 802257a:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 802257e:	4622      	mov	r2, r4
 8022580:	2100      	movs	r1, #0
 8022582:	f7fc fa28 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
 8022586:	4b60      	ldr	r3, [pc, #384]	; (8022708 <cpicker_init+0x31c>)
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 802258e:	4b60      	ldr	r3, [pc, #384]	; (8022710 <cpicker_init+0x324>)
 8022590:	68da      	ldr	r2, [r3, #12]
 8022592:	2102      	movs	r1, #2
 8022594:	f7fc fa1f 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
 8022598:	4b5b      	ldr	r3, [pc, #364]	; (8022708 <cpicker_init+0x31c>)
 802259a:	681b      	ldr	r3, [r3, #0]
 802259c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80225a0:	4b5b      	ldr	r3, [pc, #364]	; (8022710 <cpicker_init+0x324>)
 80225a2:	691a      	ldr	r2, [r3, #16]
 80225a4:	2104      	movs	r1, #4
 80225a6:	f7fc fa16 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 80225aa:	4b57      	ldr	r3, [pc, #348]	; (8022708 <cpicker_init+0x31c>)
 80225ac:	681b      	ldr	r3, [r3, #0]
 80225ae:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80225b2:	2000      	movs	r0, #0
 80225b4:	f7f7 fda0 	bl	801a0f8 <lv_disp_get_dpi>
 80225b8:	4603      	mov	r3, r0
 80225ba:	461a      	mov	r2, r3
 80225bc:	4613      	mov	r3, r2
 80225be:	005b      	lsls	r3, r3, #1
 80225c0:	4413      	add	r3, r2
 80225c2:	009b      	lsls	r3, r3, #2
 80225c4:	4413      	add	r3, r2
 80225c6:	3350      	adds	r3, #80	; 0x50
 80225c8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80225cc:	db12      	blt.n	80225f4 <cpicker_init+0x208>
 80225ce:	2000      	movs	r0, #0
 80225d0:	f7f7 fd92 	bl	801a0f8 <lv_disp_get_dpi>
 80225d4:	4603      	mov	r3, r0
 80225d6:	461a      	mov	r2, r3
 80225d8:	4613      	mov	r3, r2
 80225da:	005b      	lsls	r3, r3, #1
 80225dc:	4413      	add	r3, r2
 80225de:	009b      	lsls	r3, r3, #2
 80225e0:	4413      	add	r3, r2
 80225e2:	3350      	adds	r3, #80	; 0x50
 80225e4:	4a49      	ldr	r2, [pc, #292]	; (802270c <cpicker_init+0x320>)
 80225e6:	fb82 1203 	smull	r1, r2, r2, r3
 80225ea:	1192      	asrs	r2, r2, #6
 80225ec:	17db      	asrs	r3, r3, #31
 80225ee:	1ad3      	subs	r3, r2, r3
 80225f0:	b21b      	sxth	r3, r3
 80225f2:	e000      	b.n	80225f6 <cpicker_init+0x20a>
 80225f4:	2301      	movs	r3, #1
 80225f6:	461a      	mov	r2, r3
 80225f8:	2100      	movs	r1, #0
 80225fa:	4620      	mov	r0, r4
 80225fc:	f7fc f8c2 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8022600:	4b41      	ldr	r3, [pc, #260]	; (8022708 <cpicker_init+0x31c>)
 8022602:	681b      	ldr	r3, [r3, #0]
 8022604:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8022608:	2000      	movs	r0, #0
 802260a:	f7f7 fd75 	bl	801a0f8 <lv_disp_get_dpi>
 802260e:	4603      	mov	r3, r0
 8022610:	461a      	mov	r2, r3
 8022612:	4613      	mov	r3, r2
 8022614:	005b      	lsls	r3, r3, #1
 8022616:	4413      	add	r3, r2
 8022618:	009b      	lsls	r3, r3, #2
 802261a:	4413      	add	r3, r2
 802261c:	3350      	adds	r3, #80	; 0x50
 802261e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022622:	db12      	blt.n	802264a <cpicker_init+0x25e>
 8022624:	2000      	movs	r0, #0
 8022626:	f7f7 fd67 	bl	801a0f8 <lv_disp_get_dpi>
 802262a:	4603      	mov	r3, r0
 802262c:	461a      	mov	r2, r3
 802262e:	4613      	mov	r3, r2
 8022630:	005b      	lsls	r3, r3, #1
 8022632:	4413      	add	r3, r2
 8022634:	009b      	lsls	r3, r3, #2
 8022636:	4413      	add	r3, r2
 8022638:	3350      	adds	r3, #80	; 0x50
 802263a:	4a34      	ldr	r2, [pc, #208]	; (802270c <cpicker_init+0x320>)
 802263c:	fb82 1203 	smull	r1, r2, r2, r3
 8022640:	1192      	asrs	r2, r2, #6
 8022642:	17db      	asrs	r3, r3, #31
 8022644:	1ad3      	subs	r3, r2, r3
 8022646:	b21b      	sxth	r3, r3
 8022648:	e000      	b.n	802264c <cpicker_init+0x260>
 802264a:	2301      	movs	r3, #1
 802264c:	461a      	mov	r2, r3
 802264e:	2100      	movs	r1, #0
 8022650:	4620      	mov	r0, r4
 8022652:	f7fc f8b0 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8022656:	4b2c      	ldr	r3, [pc, #176]	; (8022708 <cpicker_init+0x31c>)
 8022658:	681b      	ldr	r3, [r3, #0]
 802265a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 802265e:	2000      	movs	r0, #0
 8022660:	f7f7 fd4a 	bl	801a0f8 <lv_disp_get_dpi>
 8022664:	4603      	mov	r3, r0
 8022666:	461a      	mov	r2, r3
 8022668:	4613      	mov	r3, r2
 802266a:	005b      	lsls	r3, r3, #1
 802266c:	4413      	add	r3, r2
 802266e:	009b      	lsls	r3, r3, #2
 8022670:	4413      	add	r3, r2
 8022672:	3350      	adds	r3, #80	; 0x50
 8022674:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022678:	db12      	blt.n	80226a0 <cpicker_init+0x2b4>
 802267a:	2000      	movs	r0, #0
 802267c:	f7f7 fd3c 	bl	801a0f8 <lv_disp_get_dpi>
 8022680:	4603      	mov	r3, r0
 8022682:	461a      	mov	r2, r3
 8022684:	4613      	mov	r3, r2
 8022686:	005b      	lsls	r3, r3, #1
 8022688:	4413      	add	r3, r2
 802268a:	009b      	lsls	r3, r3, #2
 802268c:	4413      	add	r3, r2
 802268e:	3350      	adds	r3, #80	; 0x50
 8022690:	4a1e      	ldr	r2, [pc, #120]	; (802270c <cpicker_init+0x320>)
 8022692:	fb82 1203 	smull	r1, r2, r2, r3
 8022696:	1192      	asrs	r2, r2, #6
 8022698:	17db      	asrs	r3, r3, #31
 802269a:	1ad3      	subs	r3, r2, r3
 802269c:	b21b      	sxth	r3, r3
 802269e:	e000      	b.n	80226a2 <cpicker_init+0x2b6>
 80226a0:	2301      	movs	r3, #1
 80226a2:	461a      	mov	r2, r3
 80226a4:	2100      	movs	r1, #0
 80226a6:	4620      	mov	r0, r4
 80226a8:	f7fc f83a 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 80226ac:	4b16      	ldr	r3, [pc, #88]	; (8022708 <cpicker_init+0x31c>)
 80226ae:	681b      	ldr	r3, [r3, #0]
 80226b0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80226b4:	2000      	movs	r0, #0
 80226b6:	f7f7 fd1f 	bl	801a0f8 <lv_disp_get_dpi>
 80226ba:	4603      	mov	r3, r0
 80226bc:	461a      	mov	r2, r3
 80226be:	4613      	mov	r3, r2
 80226c0:	005b      	lsls	r3, r3, #1
 80226c2:	4413      	add	r3, r2
 80226c4:	009b      	lsls	r3, r3, #2
 80226c6:	4413      	add	r3, r2
 80226c8:	3350      	adds	r3, #80	; 0x50
 80226ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80226ce:	db12      	blt.n	80226f6 <cpicker_init+0x30a>
 80226d0:	2000      	movs	r0, #0
 80226d2:	f7f7 fd11 	bl	801a0f8 <lv_disp_get_dpi>
 80226d6:	4603      	mov	r3, r0
 80226d8:	461a      	mov	r2, r3
 80226da:	4613      	mov	r3, r2
 80226dc:	005b      	lsls	r3, r3, #1
 80226de:	4413      	add	r3, r2
 80226e0:	009b      	lsls	r3, r3, #2
 80226e2:	4413      	add	r3, r2
 80226e4:	3350      	adds	r3, #80	; 0x50
 80226e6:	4a09      	ldr	r2, [pc, #36]	; (802270c <cpicker_init+0x320>)
 80226e8:	fb82 1203 	smull	r1, r2, r2, r3
 80226ec:	1192      	asrs	r2, r2, #6
 80226ee:	17db      	asrs	r3, r3, #31
 80226f0:	1ad3      	subs	r3, r2, r3
 80226f2:	b21b      	sxth	r3, r3
 80226f4:	e000      	b.n	80226f8 <cpicker_init+0x30c>
 80226f6:	2301      	movs	r3, #1
 80226f8:	461a      	mov	r2, r3
 80226fa:	2100      	movs	r1, #0
 80226fc:	4620      	mov	r0, r4
 80226fe:	f7fc f828 	bl	801e752 <lv_style_set_pad_bottom>
#endif
}
 8022702:	bf00      	nop
 8022704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022706:	bf00      	nop
 8022708:	200200d0 	.word	0x200200d0
 802270c:	66666667 	.word	0x66666667
 8022710:	200200a4 	.word	0x200200a4
 8022714:	00eaeff3 	.word	0x00eaeff3
 8022718:	00444b5a 	.word	0x00444b5a

0802271c <checkbox_init>:

static void checkbox_init(void)
{
 802271c:	b5b0      	push	{r4, r5, r7, lr}
 802271e:	af00      	add	r7, sp, #0
#if LV_USE_CHECKBOX != 0
    style_init_reset(&styles->cb_bg);
 8022720:	4bd3      	ldr	r3, [pc, #844]	; (8022a70 <checkbox_init+0x354>)
 8022722:	681b      	ldr	r3, [r3, #0]
 8022724:	3350      	adds	r3, #80	; 0x50
 8022726:	4618      	mov	r0, r3
 8022728:	f002 fd0e 	bl	8025148 <style_init_reset>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 802272c:	4bd0      	ldr	r3, [pc, #832]	; (8022a70 <checkbox_init+0x354>)
 802272e:	681b      	ldr	r3, [r3, #0]
 8022730:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8022734:	2000      	movs	r0, #0
 8022736:	f7f7 fcdf 	bl	801a0f8 <lv_disp_get_dpi>
 802273a:	4603      	mov	r3, r0
 802273c:	3314      	adds	r3, #20
 802273e:	009b      	lsls	r3, r3, #2
 8022740:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022744:	db0d      	blt.n	8022762 <checkbox_init+0x46>
 8022746:	2000      	movs	r0, #0
 8022748:	f7f7 fcd6 	bl	801a0f8 <lv_disp_get_dpi>
 802274c:	4603      	mov	r3, r0
 802274e:	3314      	adds	r3, #20
 8022750:	009b      	lsls	r3, r3, #2
 8022752:	4ac8      	ldr	r2, [pc, #800]	; (8022a74 <checkbox_init+0x358>)
 8022754:	fb82 1203 	smull	r1, r2, r2, r3
 8022758:	1192      	asrs	r2, r2, #6
 802275a:	17db      	asrs	r3, r3, #31
 802275c:	1ad3      	subs	r3, r2, r3
 802275e:	b21b      	sxth	r3, r3
 8022760:	e000      	b.n	8022764 <checkbox_init+0x48>
 8022762:	2301      	movs	r3, #1
 8022764:	461a      	mov	r2, r3
 8022766:	2100      	movs	r1, #0
 8022768:	4628      	mov	r0, r5
 802276a:	f7fb ff75 	bl	801e658 <lv_style_set_radius>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 802276e:	4bc0      	ldr	r3, [pc, #768]	; (8022a70 <checkbox_init+0x354>)
 8022770:	681b      	ldr	r3, [r3, #0]
 8022772:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8022776:	2000      	movs	r0, #0
 8022778:	f7f7 fcbe 	bl	801a0f8 <lv_disp_get_dpi>
 802277c:	4603      	mov	r3, r0
 802277e:	461a      	mov	r2, r3
 8022780:	4613      	mov	r3, r2
 8022782:	009b      	lsls	r3, r3, #2
 8022784:	4413      	add	r3, r2
 8022786:	005b      	lsls	r3, r3, #1
 8022788:	3350      	adds	r3, #80	; 0x50
 802278a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802278e:	db11      	blt.n	80227b4 <checkbox_init+0x98>
 8022790:	2000      	movs	r0, #0
 8022792:	f7f7 fcb1 	bl	801a0f8 <lv_disp_get_dpi>
 8022796:	4603      	mov	r3, r0
 8022798:	461a      	mov	r2, r3
 802279a:	4613      	mov	r3, r2
 802279c:	009b      	lsls	r3, r3, #2
 802279e:	4413      	add	r3, r2
 80227a0:	005b      	lsls	r3, r3, #1
 80227a2:	3350      	adds	r3, #80	; 0x50
 80227a4:	4ab3      	ldr	r2, [pc, #716]	; (8022a74 <checkbox_init+0x358>)
 80227a6:	fb82 1203 	smull	r1, r2, r2, r3
 80227aa:	1192      	asrs	r2, r2, #6
 80227ac:	17db      	asrs	r3, r3, #31
 80227ae:	1ad3      	subs	r3, r2, r3
 80227b0:	b21b      	sxth	r3, r3
 80227b2:	e000      	b.n	80227b6 <checkbox_init+0x9a>
 80227b4:	2301      	movs	r3, #1
 80227b6:	461a      	mov	r2, r3
 80227b8:	2100      	movs	r1, #0
 80227ba:	4628      	mov	r0, r5
 80227bc:	f7fc f814 	bl	801e7e8 <lv_style_set_pad_inner>
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
 80227c0:	4bab      	ldr	r3, [pc, #684]	; (8022a70 <checkbox_init+0x354>)
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80227c8:	4bab      	ldr	r3, [pc, #684]	; (8022a78 <checkbox_init+0x35c>)
 80227ca:	68da      	ldr	r2, [r3, #12]
 80227cc:	2100      	movs	r1, #0
 80227ce:	f7fc f963 	bl	801ea98 <lv_style_set_outline_color>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 80227d2:	4ba7      	ldr	r3, [pc, #668]	; (8022a70 <checkbox_init+0x354>)
 80227d4:	681b      	ldr	r3, [r3, #0]
 80227d6:	3350      	adds	r3, #80	; 0x50
 80227d8:	2200      	movs	r2, #0
 80227da:	2100      	movs	r1, #0
 80227dc:	4618      	mov	r0, r3
 80227de:	f7fc f972 	bl	801eac6 <lv_style_set_outline_opa>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
 80227e2:	4ba3      	ldr	r3, [pc, #652]	; (8022a70 <checkbox_init+0x354>)
 80227e4:	681b      	ldr	r3, [r3, #0]
 80227e6:	3350      	adds	r3, #80	; 0x50
 80227e8:	227f      	movs	r2, #127	; 0x7f
 80227ea:	2102      	movs	r1, #2
 80227ec:	4618      	mov	r0, r3
 80227ee:	f7fc f96a 	bl	801eac6 <lv_style_set_outline_opa>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 80227f2:	4b9f      	ldr	r3, [pc, #636]	; (8022a70 <checkbox_init+0x354>)
 80227f4:	681b      	ldr	r3, [r3, #0]
 80227f6:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80227fa:	4b9f      	ldr	r3, [pc, #636]	; (8022a78 <checkbox_init+0x35c>)
 80227fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80227fe:	f003 0320 	and.w	r3, r3, #32
 8022802:	2b00      	cmp	r3, #0
 8022804:	d118      	bne.n	8022838 <checkbox_init+0x11c>
 8022806:	2000      	movs	r0, #0
 8022808:	f7f7 fc76 	bl	801a0f8 <lv_disp_get_dpi>
 802280c:	4603      	mov	r3, r0
 802280e:	3328      	adds	r3, #40	; 0x28
 8022810:	005b      	lsls	r3, r3, #1
 8022812:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022816:	db0d      	blt.n	8022834 <checkbox_init+0x118>
 8022818:	2000      	movs	r0, #0
 802281a:	f7f7 fc6d 	bl	801a0f8 <lv_disp_get_dpi>
 802281e:	4603      	mov	r3, r0
 8022820:	3328      	adds	r3, #40	; 0x28
 8022822:	005b      	lsls	r3, r3, #1
 8022824:	4a93      	ldr	r2, [pc, #588]	; (8022a74 <checkbox_init+0x358>)
 8022826:	fb82 1203 	smull	r1, r2, r2, r3
 802282a:	1192      	asrs	r2, r2, #6
 802282c:	17db      	asrs	r3, r3, #31
 802282e:	1ad3      	subs	r3, r2, r3
 8022830:	b21b      	sxth	r3, r3
 8022832:	e002      	b.n	802283a <checkbox_init+0x11e>
 8022834:	2301      	movs	r3, #1
 8022836:	e000      	b.n	802283a <checkbox_init+0x11e>
 8022838:	2300      	movs	r3, #0
 802283a:	461a      	mov	r2, r3
 802283c:	2100      	movs	r1, #0
 802283e:	4628      	mov	r0, r5
 8022840:	f7fc f8f8 	bl	801ea34 <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8022844:	4b8a      	ldr	r3, [pc, #552]	; (8022a70 <checkbox_init+0x354>)
 8022846:	681b      	ldr	r3, [r3, #0]
 8022848:	f103 0550 	add.w	r5, r3, #80	; 0x50
 802284c:	2000      	movs	r0, #0
 802284e:	f7f7 fc53 	bl	801a0f8 <lv_disp_get_dpi>
 8022852:	4603      	mov	r3, r0
 8022854:	461a      	mov	r2, r3
 8022856:	4613      	mov	r3, r2
 8022858:	009b      	lsls	r3, r3, #2
 802285a:	4413      	add	r3, r2
 802285c:	005b      	lsls	r3, r3, #1
 802285e:	3350      	adds	r3, #80	; 0x50
 8022860:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022864:	db11      	blt.n	802288a <checkbox_init+0x16e>
 8022866:	2000      	movs	r0, #0
 8022868:	f7f7 fc46 	bl	801a0f8 <lv_disp_get_dpi>
 802286c:	4603      	mov	r3, r0
 802286e:	461a      	mov	r2, r3
 8022870:	4613      	mov	r3, r2
 8022872:	009b      	lsls	r3, r3, #2
 8022874:	4413      	add	r3, r2
 8022876:	005b      	lsls	r3, r3, #1
 8022878:	3350      	adds	r3, #80	; 0x50
 802287a:	4a7e      	ldr	r2, [pc, #504]	; (8022a74 <checkbox_init+0x358>)
 802287c:	fb82 1203 	smull	r1, r2, r2, r3
 8022880:	1192      	asrs	r2, r2, #6
 8022882:	17db      	asrs	r3, r3, #31
 8022884:	1ad3      	subs	r3, r2, r3
 8022886:	b21b      	sxth	r3, r3
 8022888:	e000      	b.n	802288c <checkbox_init+0x170>
 802288a:	2301      	movs	r3, #1
 802288c:	461a      	mov	r2, r3
 802288e:	2100      	movs	r1, #0
 8022890:	4628      	mov	r0, r5
 8022892:	f7fc f8e8 	bl	801ea66 <lv_style_set_outline_pad>
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8022896:	4b76      	ldr	r3, [pc, #472]	; (8022a70 <checkbox_init+0x354>)
 8022898:	681b      	ldr	r3, [r3, #0]
 802289a:	3350      	adds	r3, #80	; 0x50
 802289c:	2200      	movs	r2, #0
 802289e:	2100      	movs	r1, #0
 80228a0:	4618      	mov	r0, r3
 80228a2:	f7fc faff 	bl	801eea4 <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 80228a6:	4b72      	ldr	r3, [pc, #456]	; (8022a70 <checkbox_init+0x354>)
 80228a8:	681b      	ldr	r3, [r3, #0]
 80228aa:	3350      	adds	r3, #80	; 0x50
 80228ac:	224c      	movs	r2, #76	; 0x4c
 80228ae:	2100      	movs	r1, #0
 80228b0:	4618      	mov	r0, r3
 80228b2:	f7fc fb74 	bl	801ef9e <lv_style_set_transition_prop_6>

    style_init_reset(&styles->cb_bullet);
 80228b6:	4b6e      	ldr	r3, [pc, #440]	; (8022a70 <checkbox_init+0x354>)
 80228b8:	681b      	ldr	r3, [r3, #0]
 80228ba:	3354      	adds	r3, #84	; 0x54
 80228bc:	4618      	mov	r0, r3
 80228be:	f002 fc43 	bl	8025148 <style_init_reset>
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
 80228c2:	4b6b      	ldr	r3, [pc, #428]	; (8022a70 <checkbox_init+0x354>)
 80228c4:	681b      	ldr	r3, [r3, #0]
 80228c6:	3354      	adds	r3, #84	; 0x54
 80228c8:	2200      	movs	r2, #0
 80228ca:	2102      	movs	r1, #2
 80228cc:	4618      	mov	r0, r3
 80228ce:	f7fc f8fa 	bl	801eac6 <lv_style_set_outline_opa>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
 80228d2:	4b67      	ldr	r3, [pc, #412]	; (8022a70 <checkbox_init+0x354>)
 80228d4:	681b      	ldr	r3, [r3, #0]
 80228d6:	f103 0554 	add.w	r5, r3, #84	; 0x54
 80228da:	2000      	movs	r0, #0
 80228dc:	f7f7 fc0c 	bl	801a0f8 <lv_disp_get_dpi>
 80228e0:	4603      	mov	r3, r0
 80228e2:	3314      	adds	r3, #20
 80228e4:	009b      	lsls	r3, r3, #2
 80228e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80228ea:	db0d      	blt.n	8022908 <checkbox_init+0x1ec>
 80228ec:	2000      	movs	r0, #0
 80228ee:	f7f7 fc03 	bl	801a0f8 <lv_disp_get_dpi>
 80228f2:	4603      	mov	r3, r0
 80228f4:	3314      	adds	r3, #20
 80228f6:	009b      	lsls	r3, r3, #2
 80228f8:	4a5e      	ldr	r2, [pc, #376]	; (8022a74 <checkbox_init+0x358>)
 80228fa:	fb82 1203 	smull	r1, r2, r2, r3
 80228fe:	1192      	asrs	r2, r2, #6
 8022900:	17db      	asrs	r3, r3, #31
 8022902:	1ad3      	subs	r3, r2, r3
 8022904:	b21b      	sxth	r3, r3
 8022906:	e000      	b.n	802290a <checkbox_init+0x1ee>
 8022908:	2301      	movs	r3, #1
 802290a:	461a      	mov	r2, r3
 802290c:	2100      	movs	r1, #0
 802290e:	4628      	mov	r0, r5
 8022910:	f7fb fea2 	bl	801e658 <lv_style_set_radius>
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
 8022914:	4b56      	ldr	r3, [pc, #344]	; (8022a70 <checkbox_init+0x354>)
 8022916:	681b      	ldr	r3, [r3, #0]
 8022918:	3354      	adds	r3, #84	; 0x54
 802291a:	4a58      	ldr	r2, [pc, #352]	; (8022a7c <checkbox_init+0x360>)
 802291c:	2101      	movs	r1, #1
 802291e:	4618      	mov	r0, r3
 8022920:	f7fc f961 	bl	801ebe6 <lv_style_set_pattern_image>
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
 8022924:	4b52      	ldr	r3, [pc, #328]	; (8022a70 <checkbox_init+0x354>)
 8022926:	681b      	ldr	r3, [r3, #0]
 8022928:	3354      	adds	r3, #84	; 0x54
 802292a:	4622      	mov	r2, r4
 802292c:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 8022930:	4622      	mov	r2, r4
 8022932:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8022936:	4622      	mov	r2, r4
 8022938:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 802293c:	4622      	mov	r2, r4
 802293e:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8022942:	4622      	mov	r2, r4
 8022944:	2101      	movs	r1, #1
 8022946:	4618      	mov	r0, r3
 8022948:	f7fc f91e 	bl	801eb88 <lv_style_set_pattern_recolor>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 802294c:	4b48      	ldr	r3, [pc, #288]	; (8022a70 <checkbox_init+0x354>)
 802294e:	681b      	ldr	r3, [r3, #0]
 8022950:	3354      	adds	r3, #84	; 0x54
 8022952:	2200      	movs	r2, #0
 8022954:	2100      	movs	r1, #0
 8022956:	4618      	mov	r0, r3
 8022958:	f7fc f92d 	bl	801ebb6 <lv_style_set_pattern_opa>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
 802295c:	4b44      	ldr	r3, [pc, #272]	; (8022a70 <checkbox_init+0x354>)
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	3354      	adds	r3, #84	; 0x54
 8022962:	22ff      	movs	r2, #255	; 0xff
 8022964:	2101      	movs	r1, #1
 8022966:	4618      	mov	r0, r3
 8022968:	f7fc f925 	bl	801ebb6 <lv_style_set_pattern_opa>
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
 802296c:	4b40      	ldr	r3, [pc, #256]	; (8022a70 <checkbox_init+0x354>)
 802296e:	681b      	ldr	r3, [r3, #0]
 8022970:	3354      	adds	r3, #84	; 0x54
 8022972:	226c      	movs	r2, #108	; 0x6c
 8022974:	2100      	movs	r1, #0
 8022976:	4618      	mov	r0, r3
 8022978:	f7fc fac6 	bl	801ef08 <lv_style_set_transition_prop_3>
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
 802297c:	4b3c      	ldr	r3, [pc, #240]	; (8022a70 <checkbox_init+0x354>)
 802297e:	681b      	ldr	r3, [r3, #0]
 8022980:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8022984:	4b3c      	ldr	r3, [pc, #240]	; (8022a78 <checkbox_init+0x35c>)
 8022986:	695b      	ldr	r3, [r3, #20]
 8022988:	461a      	mov	r2, r3
 802298a:	2101      	movs	r1, #1
 802298c:	f7fc f9da 	bl	801ed44 <lv_style_set_text_font>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022990:	4b37      	ldr	r3, [pc, #220]	; (8022a70 <checkbox_init+0x354>)
 8022992:	681b      	ldr	r3, [r3, #0]
 8022994:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022998:	2000      	movs	r0, #0
 802299a:	f7f7 fbad 	bl	801a0f8 <lv_disp_get_dpi>
 802299e:	4603      	mov	r3, r0
 80229a0:	461a      	mov	r2, r3
 80229a2:	4613      	mov	r3, r2
 80229a4:	005b      	lsls	r3, r3, #1
 80229a6:	4413      	add	r3, r2
 80229a8:	3350      	adds	r3, #80	; 0x50
 80229aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80229ae:	db10      	blt.n	80229d2 <checkbox_init+0x2b6>
 80229b0:	2000      	movs	r0, #0
 80229b2:	f7f7 fba1 	bl	801a0f8 <lv_disp_get_dpi>
 80229b6:	4603      	mov	r3, r0
 80229b8:	461a      	mov	r2, r3
 80229ba:	4613      	mov	r3, r2
 80229bc:	005b      	lsls	r3, r3, #1
 80229be:	4413      	add	r3, r2
 80229c0:	3350      	adds	r3, #80	; 0x50
 80229c2:	4a2c      	ldr	r2, [pc, #176]	; (8022a74 <checkbox_init+0x358>)
 80229c4:	fb82 1203 	smull	r1, r2, r2, r3
 80229c8:	1192      	asrs	r2, r2, #6
 80229ca:	17db      	asrs	r3, r3, #31
 80229cc:	1ad3      	subs	r3, r2, r3
 80229ce:	b21b      	sxth	r3, r3
 80229d0:	e000      	b.n	80229d4 <checkbox_init+0x2b8>
 80229d2:	2301      	movs	r3, #1
 80229d4:	461a      	mov	r2, r3
 80229d6:	2100      	movs	r1, #0
 80229d8:	4620      	mov	r0, r4
 80229da:	f7fb fed3 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 80229de:	4b24      	ldr	r3, [pc, #144]	; (8022a70 <checkbox_init+0x354>)
 80229e0:	681b      	ldr	r3, [r3, #0]
 80229e2:	f103 0454 	add.w	r4, r3, #84	; 0x54
 80229e6:	2000      	movs	r0, #0
 80229e8:	f7f7 fb86 	bl	801a0f8 <lv_disp_get_dpi>
 80229ec:	4603      	mov	r3, r0
 80229ee:	461a      	mov	r2, r3
 80229f0:	4613      	mov	r3, r2
 80229f2:	005b      	lsls	r3, r3, #1
 80229f4:	4413      	add	r3, r2
 80229f6:	3350      	adds	r3, #80	; 0x50
 80229f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80229fc:	db10      	blt.n	8022a20 <checkbox_init+0x304>
 80229fe:	2000      	movs	r0, #0
 8022a00:	f7f7 fb7a 	bl	801a0f8 <lv_disp_get_dpi>
 8022a04:	4603      	mov	r3, r0
 8022a06:	461a      	mov	r2, r3
 8022a08:	4613      	mov	r3, r2
 8022a0a:	005b      	lsls	r3, r3, #1
 8022a0c:	4413      	add	r3, r2
 8022a0e:	3350      	adds	r3, #80	; 0x50
 8022a10:	4a18      	ldr	r2, [pc, #96]	; (8022a74 <checkbox_init+0x358>)
 8022a12:	fb82 1203 	smull	r1, r2, r2, r3
 8022a16:	1192      	asrs	r2, r2, #6
 8022a18:	17db      	asrs	r3, r3, #31
 8022a1a:	1ad3      	subs	r3, r2, r3
 8022a1c:	b21b      	sxth	r3, r3
 8022a1e:	e000      	b.n	8022a22 <checkbox_init+0x306>
 8022a20:	2301      	movs	r3, #1
 8022a22:	461a      	mov	r2, r3
 8022a24:	2100      	movs	r1, #0
 8022a26:	4620      	mov	r0, r4
 8022a28:	f7fb fec5 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022a2c:	4b10      	ldr	r3, [pc, #64]	; (8022a70 <checkbox_init+0x354>)
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022a34:	2000      	movs	r0, #0
 8022a36:	f7f7 fb5f 	bl	801a0f8 <lv_disp_get_dpi>
 8022a3a:	4603      	mov	r3, r0
 8022a3c:	461a      	mov	r2, r3
 8022a3e:	4613      	mov	r3, r2
 8022a40:	005b      	lsls	r3, r3, #1
 8022a42:	4413      	add	r3, r2
 8022a44:	3350      	adds	r3, #80	; 0x50
 8022a46:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022a4a:	db19      	blt.n	8022a80 <checkbox_init+0x364>
 8022a4c:	2000      	movs	r0, #0
 8022a4e:	f7f7 fb53 	bl	801a0f8 <lv_disp_get_dpi>
 8022a52:	4603      	mov	r3, r0
 8022a54:	461a      	mov	r2, r3
 8022a56:	4613      	mov	r3, r2
 8022a58:	005b      	lsls	r3, r3, #1
 8022a5a:	4413      	add	r3, r2
 8022a5c:	3350      	adds	r3, #80	; 0x50
 8022a5e:	4a05      	ldr	r2, [pc, #20]	; (8022a74 <checkbox_init+0x358>)
 8022a60:	fb82 1203 	smull	r1, r2, r2, r3
 8022a64:	1192      	asrs	r2, r2, #6
 8022a66:	17db      	asrs	r3, r3, #31
 8022a68:	1ad3      	subs	r3, r2, r3
 8022a6a:	b21b      	sxth	r3, r3
 8022a6c:	e009      	b.n	8022a82 <checkbox_init+0x366>
 8022a6e:	bf00      	nop
 8022a70:	200200d0 	.word	0x200200d0
 8022a74:	66666667 	.word	0x66666667
 8022a78:	200200a4 	.word	0x200200a4
 8022a7c:	080284b0 	.word	0x080284b0
 8022a80:	2301      	movs	r3, #1
 8022a82:	461a      	mov	r2, r3
 8022a84:	2100      	movs	r1, #0
 8022a86:	4620      	mov	r0, r4
 8022a88:	f7fb fe4a 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022a8c:	4b14      	ldr	r3, [pc, #80]	; (8022ae0 <checkbox_init+0x3c4>)
 8022a8e:	681b      	ldr	r3, [r3, #0]
 8022a90:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022a94:	2000      	movs	r0, #0
 8022a96:	f7f7 fb2f 	bl	801a0f8 <lv_disp_get_dpi>
 8022a9a:	4603      	mov	r3, r0
 8022a9c:	461a      	mov	r2, r3
 8022a9e:	4613      	mov	r3, r2
 8022aa0:	005b      	lsls	r3, r3, #1
 8022aa2:	4413      	add	r3, r2
 8022aa4:	3350      	adds	r3, #80	; 0x50
 8022aa6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022aaa:	db10      	blt.n	8022ace <checkbox_init+0x3b2>
 8022aac:	2000      	movs	r0, #0
 8022aae:	f7f7 fb23 	bl	801a0f8 <lv_disp_get_dpi>
 8022ab2:	4603      	mov	r3, r0
 8022ab4:	461a      	mov	r2, r3
 8022ab6:	4613      	mov	r3, r2
 8022ab8:	005b      	lsls	r3, r3, #1
 8022aba:	4413      	add	r3, r2
 8022abc:	3350      	adds	r3, #80	; 0x50
 8022abe:	4a09      	ldr	r2, [pc, #36]	; (8022ae4 <checkbox_init+0x3c8>)
 8022ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8022ac4:	1192      	asrs	r2, r2, #6
 8022ac6:	17db      	asrs	r3, r3, #31
 8022ac8:	1ad3      	subs	r3, r2, r3
 8022aca:	b21b      	sxth	r3, r3
 8022acc:	e000      	b.n	8022ad0 <checkbox_init+0x3b4>
 8022ace:	2301      	movs	r3, #1
 8022ad0:	461a      	mov	r2, r3
 8022ad2:	2100      	movs	r1, #0
 8022ad4:	4620      	mov	r0, r4
 8022ad6:	f7fb fe3c 	bl	801e752 <lv_style_set_pad_bottom>
#endif
}
 8022ada:	bf00      	nop
 8022adc:	bdb0      	pop	{r4, r5, r7, pc}
 8022ade:	bf00      	nop
 8022ae0:	200200d0 	.word	0x200200d0
 8022ae4:	66666667 	.word	0x66666667

08022ae8 <btnmatrix_init>:

static void btnmatrix_init(void)
{
 8022ae8:	b480      	push	{r7}
 8022aea:	af00      	add	r7, sp, #0
}
 8022aec:	bf00      	nop
 8022aee:	46bd      	mov	sp, r7
 8022af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022af4:	4770      	bx	lr
	...

08022af8 <keyboard_init>:

static void keyboard_init(void)
{
 8022af8:	b5b0      	push	{r4, r5, r7, lr}
 8022afa:	af00      	add	r7, sp, #0
#if LV_USE_KEYBOARD
    style_init_reset(&styles->kb_bg);
 8022afc:	4b96      	ldr	r3, [pc, #600]	; (8022d58 <keyboard_init+0x260>)
 8022afe:	681b      	ldr	r3, [r3, #0]
 8022b00:	336c      	adds	r3, #108	; 0x6c
 8022b02:	4618      	mov	r0, r3
 8022b04:	f002 fb20 	bl	8025148 <style_init_reset>
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
 8022b08:	4b93      	ldr	r3, [pc, #588]	; (8022d58 <keyboard_init+0x260>)
 8022b0a:	681b      	ldr	r3, [r3, #0]
 8022b0c:	336c      	adds	r3, #108	; 0x6c
 8022b0e:	2200      	movs	r2, #0
 8022b10:	2100      	movs	r1, #0
 8022b12:	4618      	mov	r0, r3
 8022b14:	f7fb fda0 	bl	801e658 <lv_style_set_radius>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 8022b18:	4b8f      	ldr	r3, [pc, #572]	; (8022d58 <keyboard_init+0x260>)
 8022b1a:	681b      	ldr	r3, [r3, #0]
 8022b1c:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 8022b20:	2000      	movs	r0, #0
 8022b22:	f7f7 fae9 	bl	801a0f8 <lv_disp_get_dpi>
 8022b26:	4603      	mov	r3, r0
 8022b28:	3314      	adds	r3, #20
 8022b2a:	009b      	lsls	r3, r3, #2
 8022b2c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022b30:	db0d      	blt.n	8022b4e <keyboard_init+0x56>
 8022b32:	2000      	movs	r0, #0
 8022b34:	f7f7 fae0 	bl	801a0f8 <lv_disp_get_dpi>
 8022b38:	4603      	mov	r3, r0
 8022b3a:	3314      	adds	r3, #20
 8022b3c:	009b      	lsls	r3, r3, #2
 8022b3e:	4a87      	ldr	r2, [pc, #540]	; (8022d5c <keyboard_init+0x264>)
 8022b40:	fb82 1203 	smull	r1, r2, r2, r3
 8022b44:	1192      	asrs	r2, r2, #6
 8022b46:	17db      	asrs	r3, r3, #31
 8022b48:	1ad3      	subs	r3, r2, r3
 8022b4a:	b21b      	sxth	r3, r3
 8022b4c:	e000      	b.n	8022b50 <keyboard_init+0x58>
 8022b4e:	2301      	movs	r3, #1
 8022b50:	461a      	mov	r2, r3
 8022b52:	2100      	movs	r1, #0
 8022b54:	4628      	mov	r0, r5
 8022b56:	f7fb fef3 	bl	801e940 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
 8022b5a:	4b7f      	ldr	r3, [pc, #508]	; (8022d58 <keyboard_init+0x260>)
 8022b5c:	681b      	ldr	r3, [r3, #0]
 8022b5e:	336c      	adds	r3, #108	; 0x6c
 8022b60:	2202      	movs	r2, #2
 8022b62:	2100      	movs	r1, #0
 8022b64:	4618      	mov	r0, r3
 8022b66:	f7fb ff04 	bl	801e972 <lv_style_set_border_side>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
 8022b6a:	4b7b      	ldr	r3, [pc, #492]	; (8022d58 <keyboard_init+0x260>)
 8022b6c:	681b      	ldr	r3, [r3, #0]
 8022b6e:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 8022b72:	4b7b      	ldr	r3, [pc, #492]	; (8022d60 <keyboard_init+0x268>)
 8022b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022b76:	f003 0302 	and.w	r3, r3, #2
 8022b7a:	2b00      	cmp	r3, #0
 8022b7c:	d010      	beq.n	8022ba0 <keyboard_init+0xa8>
 8022b7e:	4b78      	ldr	r3, [pc, #480]	; (8022d60 <keyboard_init+0x268>)
 8022b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022b82:	f003 0302 	and.w	r3, r3, #2
 8022b86:	2b00      	cmp	r3, #0
 8022b88:	d004      	beq.n	8022b94 <keyboard_init+0x9c>
 8022b8a:	4876      	ldr	r0, [pc, #472]	; (8022d64 <keyboard_init+0x26c>)
 8022b8c:	f7fb fd1e 	bl	801e5cc <lv_color_hex>
 8022b90:	4604      	mov	r4, r0
 8022b92:	e00e      	b.n	8022bb2 <keyboard_init+0xba>
 8022b94:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8022b98:	f7fb fd18 	bl	801e5cc <lv_color_hex>
 8022b9c:	4604      	mov	r4, r0
 8022b9e:	e008      	b.n	8022bb2 <keyboard_init+0xba>
 8022ba0:	f36f 0407 	bfc	r4, #0, #8
 8022ba4:	f36f 240f 	bfc	r4, #8, #8
 8022ba8:	f36f 4417 	bfc	r4, #16, #8
 8022bac:	4623      	mov	r3, r4
 8022bae:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8022bb2:	4622      	mov	r2, r4
 8022bb4:	2100      	movs	r1, #0
 8022bb6:	4628      	mov	r0, r5
 8022bb8:	f7fb ff0d 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
 8022bbc:	4b66      	ldr	r3, [pc, #408]	; (8022d58 <keyboard_init+0x260>)
 8022bbe:	681b      	ldr	r3, [r3, #0]
 8022bc0:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8022bc4:	4b66      	ldr	r3, [pc, #408]	; (8022d60 <keyboard_init+0x268>)
 8022bc6:	691a      	ldr	r2, [r3, #16]
 8022bc8:	2104      	movs	r1, #4
 8022bca:	f7fb ff04 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 8022bce:	4b62      	ldr	r3, [pc, #392]	; (8022d58 <keyboard_init+0x260>)
 8022bd0:	681b      	ldr	r3, [r3, #0]
 8022bd2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022bd6:	2000      	movs	r0, #0
 8022bd8:	f7f7 fa8e 	bl	801a0f8 <lv_disp_get_dpi>
 8022bdc:	4603      	mov	r3, r0
 8022bde:	461a      	mov	r2, r3
 8022be0:	4613      	mov	r3, r2
 8022be2:	009b      	lsls	r3, r3, #2
 8022be4:	4413      	add	r3, r2
 8022be6:	3350      	adds	r3, #80	; 0x50
 8022be8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022bec:	db10      	blt.n	8022c10 <keyboard_init+0x118>
 8022bee:	2000      	movs	r0, #0
 8022bf0:	f7f7 fa82 	bl	801a0f8 <lv_disp_get_dpi>
 8022bf4:	4603      	mov	r3, r0
 8022bf6:	461a      	mov	r2, r3
 8022bf8:	4613      	mov	r3, r2
 8022bfa:	009b      	lsls	r3, r3, #2
 8022bfc:	4413      	add	r3, r2
 8022bfe:	3350      	adds	r3, #80	; 0x50
 8022c00:	4a56      	ldr	r2, [pc, #344]	; (8022d5c <keyboard_init+0x264>)
 8022c02:	fb82 1203 	smull	r1, r2, r2, r3
 8022c06:	1192      	asrs	r2, r2, #6
 8022c08:	17db      	asrs	r3, r3, #31
 8022c0a:	1ad3      	subs	r3, r2, r3
 8022c0c:	b21b      	sxth	r3, r3
 8022c0e:	e000      	b.n	8022c12 <keyboard_init+0x11a>
 8022c10:	2301      	movs	r3, #1
 8022c12:	461a      	mov	r2, r3
 8022c14:	2100      	movs	r1, #0
 8022c16:	4620      	mov	r0, r4
 8022c18:	f7fb fdb4 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 8022c1c:	4b4e      	ldr	r3, [pc, #312]	; (8022d58 <keyboard_init+0x260>)
 8022c1e:	681b      	ldr	r3, [r3, #0]
 8022c20:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022c24:	2000      	movs	r0, #0
 8022c26:	f7f7 fa67 	bl	801a0f8 <lv_disp_get_dpi>
 8022c2a:	4603      	mov	r3, r0
 8022c2c:	461a      	mov	r2, r3
 8022c2e:	4613      	mov	r3, r2
 8022c30:	009b      	lsls	r3, r3, #2
 8022c32:	4413      	add	r3, r2
 8022c34:	3350      	adds	r3, #80	; 0x50
 8022c36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022c3a:	db10      	blt.n	8022c5e <keyboard_init+0x166>
 8022c3c:	2000      	movs	r0, #0
 8022c3e:	f7f7 fa5b 	bl	801a0f8 <lv_disp_get_dpi>
 8022c42:	4603      	mov	r3, r0
 8022c44:	461a      	mov	r2, r3
 8022c46:	4613      	mov	r3, r2
 8022c48:	009b      	lsls	r3, r3, #2
 8022c4a:	4413      	add	r3, r2
 8022c4c:	3350      	adds	r3, #80	; 0x50
 8022c4e:	4a43      	ldr	r2, [pc, #268]	; (8022d5c <keyboard_init+0x264>)
 8022c50:	fb82 1203 	smull	r1, r2, r2, r3
 8022c54:	1192      	asrs	r2, r2, #6
 8022c56:	17db      	asrs	r3, r3, #31
 8022c58:	1ad3      	subs	r3, r2, r3
 8022c5a:	b21b      	sxth	r3, r3
 8022c5c:	e000      	b.n	8022c60 <keyboard_init+0x168>
 8022c5e:	2301      	movs	r3, #1
 8022c60:	461a      	mov	r2, r3
 8022c62:	2100      	movs	r1, #0
 8022c64:	4620      	mov	r0, r4
 8022c66:	f7fb fda6 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 8022c6a:	4b3b      	ldr	r3, [pc, #236]	; (8022d58 <keyboard_init+0x260>)
 8022c6c:	681b      	ldr	r3, [r3, #0]
 8022c6e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022c72:	2000      	movs	r0, #0
 8022c74:	f7f7 fa40 	bl	801a0f8 <lv_disp_get_dpi>
 8022c78:	4603      	mov	r3, r0
 8022c7a:	461a      	mov	r2, r3
 8022c7c:	4613      	mov	r3, r2
 8022c7e:	009b      	lsls	r3, r3, #2
 8022c80:	4413      	add	r3, r2
 8022c82:	3350      	adds	r3, #80	; 0x50
 8022c84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022c88:	db10      	blt.n	8022cac <keyboard_init+0x1b4>
 8022c8a:	2000      	movs	r0, #0
 8022c8c:	f7f7 fa34 	bl	801a0f8 <lv_disp_get_dpi>
 8022c90:	4603      	mov	r3, r0
 8022c92:	461a      	mov	r2, r3
 8022c94:	4613      	mov	r3, r2
 8022c96:	009b      	lsls	r3, r3, #2
 8022c98:	4413      	add	r3, r2
 8022c9a:	3350      	adds	r3, #80	; 0x50
 8022c9c:	4a2f      	ldr	r2, [pc, #188]	; (8022d5c <keyboard_init+0x264>)
 8022c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8022ca2:	1192      	asrs	r2, r2, #6
 8022ca4:	17db      	asrs	r3, r3, #31
 8022ca6:	1ad3      	subs	r3, r2, r3
 8022ca8:	b21b      	sxth	r3, r3
 8022caa:	e000      	b.n	8022cae <keyboard_init+0x1b6>
 8022cac:	2301      	movs	r3, #1
 8022cae:	461a      	mov	r2, r3
 8022cb0:	2100      	movs	r1, #0
 8022cb2:	4620      	mov	r0, r4
 8022cb4:	f7fb fd34 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 8022cb8:	4b27      	ldr	r3, [pc, #156]	; (8022d58 <keyboard_init+0x260>)
 8022cba:	681b      	ldr	r3, [r3, #0]
 8022cbc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022cc0:	2000      	movs	r0, #0
 8022cc2:	f7f7 fa19 	bl	801a0f8 <lv_disp_get_dpi>
 8022cc6:	4603      	mov	r3, r0
 8022cc8:	461a      	mov	r2, r3
 8022cca:	4613      	mov	r3, r2
 8022ccc:	009b      	lsls	r3, r3, #2
 8022cce:	4413      	add	r3, r2
 8022cd0:	3350      	adds	r3, #80	; 0x50
 8022cd2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022cd6:	db10      	blt.n	8022cfa <keyboard_init+0x202>
 8022cd8:	2000      	movs	r0, #0
 8022cda:	f7f7 fa0d 	bl	801a0f8 <lv_disp_get_dpi>
 8022cde:	4603      	mov	r3, r0
 8022ce0:	461a      	mov	r2, r3
 8022ce2:	4613      	mov	r3, r2
 8022ce4:	009b      	lsls	r3, r3, #2
 8022ce6:	4413      	add	r3, r2
 8022ce8:	3350      	adds	r3, #80	; 0x50
 8022cea:	4a1c      	ldr	r2, [pc, #112]	; (8022d5c <keyboard_init+0x264>)
 8022cec:	fb82 1203 	smull	r1, r2, r2, r3
 8022cf0:	1192      	asrs	r2, r2, #6
 8022cf2:	17db      	asrs	r3, r3, #31
 8022cf4:	1ad3      	subs	r3, r2, r3
 8022cf6:	b21b      	sxth	r3, r3
 8022cf8:	e000      	b.n	8022cfc <keyboard_init+0x204>
 8022cfa:	2301      	movs	r3, #1
 8022cfc:	461a      	mov	r2, r3
 8022cfe:	2100      	movs	r1, #0
 8022d00:	4620      	mov	r0, r4
 8022d02:	f7fb fd26 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
 8022d06:	4b14      	ldr	r3, [pc, #80]	; (8022d58 <keyboard_init+0x260>)
 8022d08:	681b      	ldr	r3, [r3, #0]
 8022d0a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022d0e:	2000      	movs	r0, #0
 8022d10:	f7f7 f9f2 	bl	801a0f8 <lv_disp_get_dpi>
 8022d14:	4603      	mov	r3, r0
 8022d16:	461a      	mov	r2, r3
 8022d18:	4613      	mov	r3, r2
 8022d1a:	005b      	lsls	r3, r3, #1
 8022d1c:	4413      	add	r3, r2
 8022d1e:	3350      	adds	r3, #80	; 0x50
 8022d20:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022d24:	db10      	blt.n	8022d48 <keyboard_init+0x250>
 8022d26:	2000      	movs	r0, #0
 8022d28:	f7f7 f9e6 	bl	801a0f8 <lv_disp_get_dpi>
 8022d2c:	4603      	mov	r3, r0
 8022d2e:	461a      	mov	r2, r3
 8022d30:	4613      	mov	r3, r2
 8022d32:	005b      	lsls	r3, r3, #1
 8022d34:	4413      	add	r3, r2
 8022d36:	3350      	adds	r3, #80	; 0x50
 8022d38:	4a08      	ldr	r2, [pc, #32]	; (8022d5c <keyboard_init+0x264>)
 8022d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8022d3e:	1192      	asrs	r2, r2, #6
 8022d40:	17db      	asrs	r3, r3, #31
 8022d42:	1ad3      	subs	r3, r2, r3
 8022d44:	b21b      	sxth	r3, r3
 8022d46:	e000      	b.n	8022d4a <keyboard_init+0x252>
 8022d48:	2301      	movs	r3, #1
 8022d4a:	461a      	mov	r2, r3
 8022d4c:	2100      	movs	r1, #0
 8022d4e:	4620      	mov	r0, r4
 8022d50:	f7fb fd4a 	bl	801e7e8 <lv_style_set_pad_inner>
#endif
}
 8022d54:	bf00      	nop
 8022d56:	bdb0      	pop	{r4, r5, r7, pc}
 8022d58:	200200d0 	.word	0x200200d0
 8022d5c:	66666667 	.word	0x66666667
 8022d60:	200200a4 	.word	0x200200a4
 8022d64:	003b3e42 	.word	0x003b3e42

08022d68 <msgbox_init>:

static void msgbox_init(void)
{
 8022d68:	b5b0      	push	{r4, r5, r7, lr}
 8022d6a:	af00      	add	r7, sp, #0
#if LV_USE_MSGBOX
    style_init_reset(&styles->mbox_bg);
 8022d6c:	4b29      	ldr	r3, [pc, #164]	; (8022e14 <msgbox_init+0xac>)
 8022d6e:	681b      	ldr	r3, [r3, #0]
 8022d70:	3380      	adds	r3, #128	; 0x80
 8022d72:	4618      	mov	r0, r3
 8022d74:	f002 f9e8 	bl	8025148 <style_init_reset>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
 8022d78:	4b26      	ldr	r3, [pc, #152]	; (8022e14 <msgbox_init+0xac>)
 8022d7a:	681b      	ldr	r3, [r3, #0]
 8022d7c:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8022d80:	2000      	movs	r0, #0
 8022d82:	f7f7 f9b9 	bl	801a0f8 <lv_disp_get_dpi>
 8022d86:	4603      	mov	r3, r0
 8022d88:	461a      	mov	r2, r3
 8022d8a:	2332      	movs	r3, #50	; 0x32
 8022d8c:	fb03 f302 	mul.w	r3, r3, r2
 8022d90:	3350      	adds	r3, #80	; 0x50
 8022d92:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022d96:	db10      	blt.n	8022dba <msgbox_init+0x52>
 8022d98:	2000      	movs	r0, #0
 8022d9a:	f7f7 f9ad 	bl	801a0f8 <lv_disp_get_dpi>
 8022d9e:	4603      	mov	r3, r0
 8022da0:	461a      	mov	r2, r3
 8022da2:	2332      	movs	r3, #50	; 0x32
 8022da4:	fb03 f302 	mul.w	r3, r3, r2
 8022da8:	3350      	adds	r3, #80	; 0x50
 8022daa:	4a1b      	ldr	r2, [pc, #108]	; (8022e18 <msgbox_init+0xb0>)
 8022dac:	fb82 1203 	smull	r1, r2, r2, r3
 8022db0:	1192      	asrs	r2, r2, #6
 8022db2:	17db      	asrs	r3, r3, #31
 8022db4:	1ad3      	subs	r3, r2, r3
 8022db6:	b21b      	sxth	r3, r3
 8022db8:	e000      	b.n	8022dbc <msgbox_init+0x54>
 8022dba:	2301      	movs	r3, #1
 8022dbc:	461a      	mov	r2, r3
 8022dbe:	2100      	movs	r1, #0
 8022dc0:	4628      	mov	r0, r5
 8022dc2:	f7fb fe98 	bl	801eaf6 <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
 8022dc6:	4b13      	ldr	r3, [pc, #76]	; (8022e14 <msgbox_init+0xac>)
 8022dc8:	681b      	ldr	r3, [r3, #0]
 8022dca:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8022dce:	4b13      	ldr	r3, [pc, #76]	; (8022e1c <msgbox_init+0xb4>)
 8022dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022dd2:	f003 0302 	and.w	r3, r3, #2
 8022dd6:	2b00      	cmp	r3, #0
 8022dd8:	d00f      	beq.n	8022dfa <msgbox_init+0x92>
 8022dda:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8022dde:	f363 0407 	bfi	r4, r3, #0, #8
 8022de2:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8022de6:	f363 240f 	bfi	r4, r3, #8, #8
 8022dea:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8022dee:	f363 4417 	bfi	r4, r3, #16, #8
 8022df2:	4623      	mov	r3, r4
 8022df4:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8022df8:	e004      	b.n	8022e04 <msgbox_init+0x9c>
 8022dfa:	f640 1099 	movw	r0, #2457	; 0x999
 8022dfe:	f7fb fbf9 	bl	801e5f4 <lv_color_hex3>
 8022e02:	4604      	mov	r4, r0
 8022e04:	4622      	mov	r2, r4
 8022e06:	2100      	movs	r1, #0
 8022e08:	4628      	mov	r0, r5
 8022e0a:	f7fb fea6 	bl	801eb5a <lv_style_set_shadow_color>

#endif
}
 8022e0e:	bf00      	nop
 8022e10:	bdb0      	pop	{r4, r5, r7, pc}
 8022e12:	bf00      	nop
 8022e14:	200200d0 	.word	0x200200d0
 8022e18:	66666667 	.word	0x66666667
 8022e1c:	200200a4 	.word	0x200200a4

08022e20 <page_init>:

static void page_init(void)
{
 8022e20:	b598      	push	{r3, r4, r7, lr}
 8022e22:	af00      	add	r7, sp, #0
#if LV_USE_PAGE
    style_init_reset(&styles->sb);
 8022e24:	4b60      	ldr	r3, [pc, #384]	; (8022fa8 <page_init+0x188>)
 8022e26:	681b      	ldr	r3, [r3, #0]
 8022e28:	3384      	adds	r3, #132	; 0x84
 8022e2a:	4618      	mov	r0, r3
 8022e2c:	f002 f98c 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
 8022e30:	4b5d      	ldr	r3, [pc, #372]	; (8022fa8 <page_init+0x188>)
 8022e32:	681b      	ldr	r3, [r3, #0]
 8022e34:	3384      	adds	r3, #132	; 0x84
 8022e36:	22ff      	movs	r2, #255	; 0xff
 8022e38:	2100      	movs	r1, #0
 8022e3a:	4618      	mov	r0, r3
 8022e3c:	f7fb fd68 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
 8022e40:	4b59      	ldr	r3, [pc, #356]	; (8022fa8 <page_init+0x188>)
 8022e42:	681b      	ldr	r3, [r3, #0]
 8022e44:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8022e48:	4b58      	ldr	r3, [pc, #352]	; (8022fac <page_init+0x18c>)
 8022e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e4c:	f003 0302 	and.w	r3, r3, #2
 8022e50:	2b00      	cmp	r3, #0
 8022e52:	d004      	beq.n	8022e5e <page_init+0x3e>
 8022e54:	4856      	ldr	r0, [pc, #344]	; (8022fb0 <page_init+0x190>)
 8022e56:	f7fb fbb9 	bl	801e5cc <lv_color_hex>
 8022e5a:	4603      	mov	r3, r0
 8022e5c:	e003      	b.n	8022e66 <page_init+0x46>
 8022e5e:	4855      	ldr	r0, [pc, #340]	; (8022fb4 <page_init+0x194>)
 8022e60:	f7fb fbb4 	bl	801e5cc <lv_color_hex>
 8022e64:	4603      	mov	r3, r0
 8022e66:	461a      	mov	r2, r3
 8022e68:	2100      	movs	r1, #0
 8022e6a:	4620      	mov	r0, r4
 8022e6c:	f7fb fd39 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8022e70:	4b4d      	ldr	r3, [pc, #308]	; (8022fa8 <page_init+0x188>)
 8022e72:	681b      	ldr	r3, [r3, #0]
 8022e74:	3384      	adds	r3, #132	; 0x84
 8022e76:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8022e7a:	2100      	movs	r1, #0
 8022e7c:	4618      	mov	r0, r3
 8022e7e:	f7fb fbeb 	bl	801e658 <lv_style_set_radius>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
 8022e82:	4b49      	ldr	r3, [pc, #292]	; (8022fa8 <page_init+0x188>)
 8022e84:	681b      	ldr	r3, [r3, #0]
 8022e86:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8022e8a:	2000      	movs	r0, #0
 8022e8c:	f7f7 f934 	bl	801a0f8 <lv_disp_get_dpi>
 8022e90:	4603      	mov	r3, r0
 8022e92:	461a      	mov	r2, r3
 8022e94:	4613      	mov	r3, r2
 8022e96:	00db      	lsls	r3, r3, #3
 8022e98:	1a9b      	subs	r3, r3, r2
 8022e9a:	3350      	adds	r3, #80	; 0x50
 8022e9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022ea0:	db10      	blt.n	8022ec4 <page_init+0xa4>
 8022ea2:	2000      	movs	r0, #0
 8022ea4:	f7f7 f928 	bl	801a0f8 <lv_disp_get_dpi>
 8022ea8:	4603      	mov	r3, r0
 8022eaa:	461a      	mov	r2, r3
 8022eac:	4613      	mov	r3, r2
 8022eae:	00db      	lsls	r3, r3, #3
 8022eb0:	1a9b      	subs	r3, r3, r2
 8022eb2:	3350      	adds	r3, #80	; 0x50
 8022eb4:	4a40      	ldr	r2, [pc, #256]	; (8022fb8 <page_init+0x198>)
 8022eb6:	fb82 1203 	smull	r1, r2, r2, r3
 8022eba:	1192      	asrs	r2, r2, #6
 8022ebc:	17db      	asrs	r3, r3, #31
 8022ebe:	1ad3      	subs	r3, r2, r3
 8022ec0:	b21b      	sxth	r3, r3
 8022ec2:	e000      	b.n	8022ec6 <page_init+0xa6>
 8022ec4:	2301      	movs	r3, #1
 8022ec6:	461a      	mov	r2, r3
 8022ec8:	2100      	movs	r1, #0
 8022eca:	4620      	mov	r0, r4
 8022ecc:	f7fb fbf6 	bl	801e6bc <lv_style_set_size>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 8022ed0:	4b35      	ldr	r3, [pc, #212]	; (8022fa8 <page_init+0x188>)
 8022ed2:	681b      	ldr	r3, [r3, #0]
 8022ed4:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8022ed8:	2000      	movs	r0, #0
 8022eda:	f7f7 f90d 	bl	801a0f8 <lv_disp_get_dpi>
 8022ede:	4603      	mov	r3, r0
 8022ee0:	461a      	mov	r2, r3
 8022ee2:	4613      	mov	r3, r2
 8022ee4:	00db      	lsls	r3, r3, #3
 8022ee6:	1a9b      	subs	r3, r3, r2
 8022ee8:	3350      	adds	r3, #80	; 0x50
 8022eea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022eee:	db10      	blt.n	8022f12 <page_init+0xf2>
 8022ef0:	2000      	movs	r0, #0
 8022ef2:	f7f7 f901 	bl	801a0f8 <lv_disp_get_dpi>
 8022ef6:	4603      	mov	r3, r0
 8022ef8:	461a      	mov	r2, r3
 8022efa:	4613      	mov	r3, r2
 8022efc:	00db      	lsls	r3, r3, #3
 8022efe:	1a9b      	subs	r3, r3, r2
 8022f00:	3350      	adds	r3, #80	; 0x50
 8022f02:	4a2d      	ldr	r2, [pc, #180]	; (8022fb8 <page_init+0x198>)
 8022f04:	fb82 1203 	smull	r1, r2, r2, r3
 8022f08:	1192      	asrs	r2, r2, #6
 8022f0a:	17db      	asrs	r3, r3, #31
 8022f0c:	1ad3      	subs	r3, r2, r3
 8022f0e:	b21b      	sxth	r3, r3
 8022f10:	e000      	b.n	8022f14 <page_init+0xf4>
 8022f12:	2301      	movs	r3, #1
 8022f14:	461a      	mov	r2, r3
 8022f16:	2100      	movs	r1, #0
 8022f18:	4620      	mov	r0, r4
 8022f1a:	f7fb fc4c 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 8022f1e:	4b22      	ldr	r3, [pc, #136]	; (8022fa8 <page_init+0x188>)
 8022f20:	681b      	ldr	r3, [r3, #0]
 8022f22:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8022f26:	2000      	movs	r0, #0
 8022f28:	f7f7 f8e6 	bl	801a0f8 <lv_disp_get_dpi>
 8022f2c:	4603      	mov	r3, r0
 8022f2e:	461a      	mov	r2, r3
 8022f30:	4613      	mov	r3, r2
 8022f32:	00db      	lsls	r3, r3, #3
 8022f34:	1a9b      	subs	r3, r3, r2
 8022f36:	3350      	adds	r3, #80	; 0x50
 8022f38:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022f3c:	db10      	blt.n	8022f60 <page_init+0x140>
 8022f3e:	2000      	movs	r0, #0
 8022f40:	f7f7 f8da 	bl	801a0f8 <lv_disp_get_dpi>
 8022f44:	4603      	mov	r3, r0
 8022f46:	461a      	mov	r2, r3
 8022f48:	4613      	mov	r3, r2
 8022f4a:	00db      	lsls	r3, r3, #3
 8022f4c:	1a9b      	subs	r3, r3, r2
 8022f4e:	3350      	adds	r3, #80	; 0x50
 8022f50:	4a19      	ldr	r2, [pc, #100]	; (8022fb8 <page_init+0x198>)
 8022f52:	fb82 1203 	smull	r1, r2, r2, r3
 8022f56:	1192      	asrs	r2, r2, #6
 8022f58:	17db      	asrs	r3, r3, #31
 8022f5a:	1ad3      	subs	r3, r2, r3
 8022f5c:	b21b      	sxth	r3, r3
 8022f5e:	e000      	b.n	8022f62 <page_init+0x142>
 8022f60:	2301      	movs	r3, #1
 8022f62:	461a      	mov	r2, r3
 8022f64:	2100      	movs	r1, #0
 8022f66:	4620      	mov	r0, r4
 8022f68:	f7fb fbf3 	bl	801e752 <lv_style_set_pad_bottom>

#if LV_USE_ANIMATION
    style_init_reset(&styles->edge_flash);
 8022f6c:	4b0e      	ldr	r3, [pc, #56]	; (8022fa8 <page_init+0x188>)
 8022f6e:	681b      	ldr	r3, [r3, #0]
 8022f70:	3388      	adds	r3, #136	; 0x88
 8022f72:	4618      	mov	r0, r3
 8022f74:	f002 f8e8 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
 8022f78:	4b0b      	ldr	r3, [pc, #44]	; (8022fa8 <page_init+0x188>)
 8022f7a:	681b      	ldr	r3, [r3, #0]
 8022f7c:	3388      	adds	r3, #136	; 0x88
 8022f7e:	22ff      	movs	r2, #255	; 0xff
 8022f80:	2100      	movs	r1, #0
 8022f82:	4618      	mov	r0, r3
 8022f84:	f7fb fcc4 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
 8022f88:	4b07      	ldr	r3, [pc, #28]	; (8022fa8 <page_init+0x188>)
 8022f8a:	681b      	ldr	r3, [r3, #0]
 8022f8c:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8022f90:	f640 0088 	movw	r0, #2184	; 0x888
 8022f94:	f7fb fb2e 	bl	801e5f4 <lv_color_hex3>
 8022f98:	4603      	mov	r3, r0
 8022f9a:	461a      	mov	r2, r3
 8022f9c:	2100      	movs	r1, #0
 8022f9e:	4620      	mov	r0, r4
 8022fa0:	f7fb fc9f 	bl	801e8e2 <lv_style_set_bg_color>
#endif
#endif
}
 8022fa4:	bf00      	nop
 8022fa6:	bd98      	pop	{r3, r4, r7, pc}
 8022fa8:	200200d0 	.word	0x200200d0
 8022fac:	200200a4 	.word	0x200200a4
 8022fb0:	00cccfd1 	.word	0x00cccfd1
 8022fb4:	00777f85 	.word	0x00777f85
 8022fb8:	66666667 	.word	0x66666667

08022fbc <textarea_init>:

static void textarea_init(void)
{
 8022fbc:	b598      	push	{r3, r4, r7, lr}
 8022fbe:	af00      	add	r7, sp, #0
#if LV_USE_TEXTAREA
    style_init_reset(&styles->ta_cursor);
 8022fc0:	4b49      	ldr	r3, [pc, #292]	; (80230e8 <textarea_init+0x12c>)
 8022fc2:	681b      	ldr	r3, [r3, #0]
 8022fc4:	33b8      	adds	r3, #184	; 0xb8
 8022fc6:	4618      	mov	r0, r3
 8022fc8:	f002 f8be 	bl	8025148 <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 8022fcc:	4b46      	ldr	r3, [pc, #280]	; (80230e8 <textarea_init+0x12c>)
 8022fce:	681b      	ldr	r3, [r3, #0]
 8022fd0:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8022fd4:	4b45      	ldr	r3, [pc, #276]	; (80230ec <textarea_init+0x130>)
 8022fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fd8:	f003 0302 	and.w	r3, r3, #2
 8022fdc:	2b00      	cmp	r3, #0
 8022fde:	d004      	beq.n	8022fea <textarea_init+0x2e>
 8022fe0:	4843      	ldr	r0, [pc, #268]	; (80230f0 <textarea_init+0x134>)
 8022fe2:	f7fb faf3 	bl	801e5cc <lv_color_hex>
 8022fe6:	4603      	mov	r3, r0
 8022fe8:	e003      	b.n	8022ff2 <textarea_init+0x36>
 8022fea:	4842      	ldr	r0, [pc, #264]	; (80230f4 <textarea_init+0x138>)
 8022fec:	f7fb faee 	bl	801e5cc <lv_color_hex>
 8022ff0:	4603      	mov	r3, r0
 8022ff2:	461a      	mov	r2, r3
 8022ff4:	2100      	movs	r1, #0
 8022ff6:	4620      	mov	r0, r4
 8022ff8:	f7fb fced 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
 8022ffc:	4b3a      	ldr	r3, [pc, #232]	; (80230e8 <textarea_init+0x12c>)
 8022ffe:	681b      	ldr	r3, [r3, #0]
 8023000:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8023004:	2000      	movs	r0, #0
 8023006:	f7f7 f877 	bl	801a0f8 <lv_disp_get_dpi>
 802300a:	4603      	mov	r3, r0
 802300c:	3328      	adds	r3, #40	; 0x28
 802300e:	005b      	lsls	r3, r3, #1
 8023010:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023014:	db0d      	blt.n	8023032 <textarea_init+0x76>
 8023016:	2000      	movs	r0, #0
 8023018:	f7f7 f86e 	bl	801a0f8 <lv_disp_get_dpi>
 802301c:	4603      	mov	r3, r0
 802301e:	3328      	adds	r3, #40	; 0x28
 8023020:	005b      	lsls	r3, r3, #1
 8023022:	4a35      	ldr	r2, [pc, #212]	; (80230f8 <textarea_init+0x13c>)
 8023024:	fb82 1203 	smull	r1, r2, r2, r3
 8023028:	1192      	asrs	r2, r2, #6
 802302a:	17db      	asrs	r3, r3, #31
 802302c:	1ad3      	subs	r3, r2, r3
 802302e:	b21b      	sxth	r3, r3
 8023030:	e000      	b.n	8023034 <textarea_init+0x78>
 8023032:	2301      	movs	r3, #1
 8023034:	461a      	mov	r2, r3
 8023036:	2100      	movs	r1, #0
 8023038:	4620      	mov	r0, r4
 802303a:	f7fb fc81 	bl	801e940 <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
 802303e:	4b2a      	ldr	r3, [pc, #168]	; (80230e8 <textarea_init+0x12c>)
 8023040:	681b      	ldr	r3, [r3, #0]
 8023042:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8023046:	2000      	movs	r0, #0
 8023048:	f7f7 f856 	bl	801a0f8 <lv_disp_get_dpi>
 802304c:	4603      	mov	r3, r0
 802304e:	3350      	adds	r3, #80	; 0x50
 8023050:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023054:	db0c      	blt.n	8023070 <textarea_init+0xb4>
 8023056:	2000      	movs	r0, #0
 8023058:	f7f7 f84e 	bl	801a0f8 <lv_disp_get_dpi>
 802305c:	4603      	mov	r3, r0
 802305e:	3350      	adds	r3, #80	; 0x50
 8023060:	4a25      	ldr	r2, [pc, #148]	; (80230f8 <textarea_init+0x13c>)
 8023062:	fb82 1203 	smull	r1, r2, r2, r3
 8023066:	1192      	asrs	r2, r2, #6
 8023068:	17db      	asrs	r3, r3, #31
 802306a:	1ad3      	subs	r3, r2, r3
 802306c:	b21b      	sxth	r3, r3
 802306e:	e000      	b.n	8023072 <textarea_init+0xb6>
 8023070:	2301      	movs	r3, #1
 8023072:	461a      	mov	r2, r3
 8023074:	2100      	movs	r1, #0
 8023076:	4620      	mov	r0, r4
 8023078:	f7fb fb84 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
 802307c:	4b1a      	ldr	r3, [pc, #104]	; (80230e8 <textarea_init+0x12c>)
 802307e:	681b      	ldr	r3, [r3, #0]
 8023080:	33b8      	adds	r3, #184	; 0xb8
 8023082:	2204      	movs	r2, #4
 8023084:	2100      	movs	r1, #0
 8023086:	4618      	mov	r0, r3
 8023088:	f7fb fc73 	bl	801e972 <lv_style_set_border_side>

    style_init_reset(&styles->ta_placeholder);
 802308c:	4b16      	ldr	r3, [pc, #88]	; (80230e8 <textarea_init+0x12c>)
 802308e:	681b      	ldr	r3, [r3, #0]
 8023090:	33bc      	adds	r3, #188	; 0xbc
 8023092:	4618      	mov	r0, r3
 8023094:	f002 f858 	bl	8025148 <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 8023098:	4b13      	ldr	r3, [pc, #76]	; (80230e8 <textarea_init+0x12c>)
 802309a:	681b      	ldr	r3, [r3, #0]
 802309c:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 80230a0:	4b12      	ldr	r3, [pc, #72]	; (80230ec <textarea_init+0x130>)
 80230a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80230a4:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 80230a8:	2b00      	cmp	r3, #0
 80230aa:	d011      	beq.n	80230d0 <textarea_init+0x114>
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 80230ac:	4b0f      	ldr	r3, [pc, #60]	; (80230ec <textarea_init+0x130>)
 80230ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80230b0:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	d005      	beq.n	80230c4 <textarea_init+0x108>
 80230b8:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80230bc:	f7fb fa9a 	bl	801e5f4 <lv_color_hex3>
 80230c0:	4603      	mov	r3, r0
 80230c2:	e009      	b.n	80230d8 <textarea_init+0x11c>
 80230c4:	f640 1099 	movw	r0, #2457	; 0x999
 80230c8:	f7fb fa94 	bl	801e5f4 <lv_color_hex3>
 80230cc:	4603      	mov	r3, r0
 80230ce:	e003      	b.n	80230d8 <textarea_init+0x11c>
 80230d0:	480a      	ldr	r0, [pc, #40]	; (80230fc <textarea_init+0x140>)
 80230d2:	f7fb fa7b 	bl	801e5cc <lv_color_hex>
 80230d6:	4603      	mov	r3, r0
 80230d8:	461a      	mov	r2, r3
 80230da:	2100      	movs	r1, #0
 80230dc:	4620      	mov	r0, r4
 80230de:	f7fb fde3 	bl	801eca8 <lv_style_set_text_color>
#endif
}
 80230e2:	bf00      	nop
 80230e4:	bd98      	pop	{r3, r4, r7, pc}
 80230e6:	bf00      	nop
 80230e8:	200200d0 	.word	0x200200d0
 80230ec:	200200a4 	.word	0x200200a4
 80230f0:	0031404f 	.word	0x0031404f
 80230f4:	00a5a8ad 	.word	0x00a5a8ad
 80230f8:	66666667 	.word	0x66666667
 80230fc:	00a1adbd 	.word	0x00a1adbd

08023100 <spinbox_init>:

static void spinbox_init(void)
{
 8023100:	b598      	push	{r3, r4, r7, lr}
 8023102:	af00      	add	r7, sp, #0
#if LV_USE_SPINBOX

    style_init_reset(&styles->spinbox_cursor);
 8023104:	4b3d      	ldr	r3, [pc, #244]	; (80231fc <spinbox_init+0xfc>)
 8023106:	681b      	ldr	r3, [r3, #0]
 8023108:	339c      	adds	r3, #156	; 0x9c
 802310a:	4618      	mov	r0, r3
 802310c:	f002 f81c 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023110:	4b3a      	ldr	r3, [pc, #232]	; (80231fc <spinbox_init+0xfc>)
 8023112:	681b      	ldr	r3, [r3, #0]
 8023114:	339c      	adds	r3, #156	; 0x9c
 8023116:	22ff      	movs	r2, #255	; 0xff
 8023118:	2100      	movs	r1, #0
 802311a:	4618      	mov	r0, r3
 802311c:	f7fb fbf8 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
 8023120:	4b36      	ldr	r3, [pc, #216]	; (80231fc <spinbox_init+0xfc>)
 8023122:	681b      	ldr	r3, [r3, #0]
 8023124:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 8023128:	4b35      	ldr	r3, [pc, #212]	; (8023200 <spinbox_init+0x100>)
 802312a:	68da      	ldr	r2, [r3, #12]
 802312c:	2100      	movs	r1, #0
 802312e:	f7fb fbd8 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8023132:	4b32      	ldr	r3, [pc, #200]	; (80231fc <spinbox_init+0xfc>)
 8023134:	681b      	ldr	r3, [r3, #0]
 8023136:	339c      	adds	r3, #156	; 0x9c
 8023138:	4622      	mov	r2, r4
 802313a:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 802313e:	4622      	mov	r2, r4
 8023140:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8023144:	4622      	mov	r2, r4
 8023146:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 802314a:	4622      	mov	r2, r4
 802314c:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8023150:	4622      	mov	r2, r4
 8023152:	2100      	movs	r1, #0
 8023154:	4618      	mov	r0, r3
 8023156:	f7fb fda7 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 802315a:	4b28      	ldr	r3, [pc, #160]	; (80231fc <spinbox_init+0xfc>)
 802315c:	681b      	ldr	r3, [r3, #0]
 802315e:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8023162:	2000      	movs	r0, #0
 8023164:	f7f6 ffc8 	bl	801a0f8 <lv_disp_get_dpi>
 8023168:	4603      	mov	r3, r0
 802316a:	461a      	mov	r2, r3
 802316c:	2364      	movs	r3, #100	; 0x64
 802316e:	fb03 f302 	mul.w	r3, r3, r2
 8023172:	3350      	adds	r3, #80	; 0x50
 8023174:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023178:	db10      	blt.n	802319c <spinbox_init+0x9c>
 802317a:	2000      	movs	r0, #0
 802317c:	f7f6 ffbc 	bl	801a0f8 <lv_disp_get_dpi>
 8023180:	4603      	mov	r3, r0
 8023182:	461a      	mov	r2, r3
 8023184:	2364      	movs	r3, #100	; 0x64
 8023186:	fb03 f302 	mul.w	r3, r3, r2
 802318a:	3350      	adds	r3, #80	; 0x50
 802318c:	4a1d      	ldr	r2, [pc, #116]	; (8023204 <spinbox_init+0x104>)
 802318e:	fb82 1203 	smull	r1, r2, r2, r3
 8023192:	1192      	asrs	r2, r2, #6
 8023194:	17db      	asrs	r3, r3, #31
 8023196:	1ad3      	subs	r3, r2, r3
 8023198:	b21b      	sxth	r3, r3
 802319a:	e000      	b.n	802319e <spinbox_init+0x9e>
 802319c:	2301      	movs	r3, #1
 802319e:	461a      	mov	r2, r3
 80231a0:	2100      	movs	r1, #0
 80231a2:	4620      	mov	r0, r4
 80231a4:	f7fb fabc 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 80231a8:	4b14      	ldr	r3, [pc, #80]	; (80231fc <spinbox_init+0xfc>)
 80231aa:	681b      	ldr	r3, [r3, #0]
 80231ac:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80231b0:	2000      	movs	r0, #0
 80231b2:	f7f6 ffa1 	bl	801a0f8 <lv_disp_get_dpi>
 80231b6:	4603      	mov	r3, r0
 80231b8:	461a      	mov	r2, r3
 80231ba:	2364      	movs	r3, #100	; 0x64
 80231bc:	fb03 f302 	mul.w	r3, r3, r2
 80231c0:	3350      	adds	r3, #80	; 0x50
 80231c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80231c6:	db10      	blt.n	80231ea <spinbox_init+0xea>
 80231c8:	2000      	movs	r0, #0
 80231ca:	f7f6 ff95 	bl	801a0f8 <lv_disp_get_dpi>
 80231ce:	4603      	mov	r3, r0
 80231d0:	461a      	mov	r2, r3
 80231d2:	2364      	movs	r3, #100	; 0x64
 80231d4:	fb03 f302 	mul.w	r3, r3, r2
 80231d8:	3350      	adds	r3, #80	; 0x50
 80231da:	4a0a      	ldr	r2, [pc, #40]	; (8023204 <spinbox_init+0x104>)
 80231dc:	fb82 1203 	smull	r1, r2, r2, r3
 80231e0:	1192      	asrs	r2, r2, #6
 80231e2:	17db      	asrs	r3, r3, #31
 80231e4:	1ad3      	subs	r3, r2, r3
 80231e6:	b21b      	sxth	r3, r3
 80231e8:	e000      	b.n	80231ec <spinbox_init+0xec>
 80231ea:	2301      	movs	r3, #1
 80231ec:	461a      	mov	r2, r3
 80231ee:	2100      	movs	r1, #0
 80231f0:	4620      	mov	r0, r4
 80231f2:	f7fb faae 	bl	801e752 <lv_style_set_pad_bottom>

#endif
}
 80231f6:	bf00      	nop
 80231f8:	bd98      	pop	{r3, r4, r7, pc}
 80231fa:	bf00      	nop
 80231fc:	200200d0 	.word	0x200200d0
 8023200:	200200a4 	.word	0x200200a4
 8023204:	66666667 	.word	0x66666667

08023208 <list_init>:

static void list_init(void)
{
 8023208:	b598      	push	{r3, r4, r7, lr}
 802320a:	af00      	add	r7, sp, #0
#if LV_USE_LIST != 0
    style_init_reset(&styles->list_bg);
 802320c:	4bab      	ldr	r3, [pc, #684]	; (80234bc <list_init+0x2b4>)
 802320e:	681b      	ldr	r3, [r3, #0]
 8023210:	3378      	adds	r3, #120	; 0x78
 8023212:	4618      	mov	r0, r3
 8023214:	f001 ff98 	bl	8025148 <style_init_reset>
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
 8023218:	4ba8      	ldr	r3, [pc, #672]	; (80234bc <list_init+0x2b4>)
 802321a:	681b      	ldr	r3, [r3, #0]
 802321c:	3378      	adds	r3, #120	; 0x78
 802321e:	2201      	movs	r2, #1
 8023220:	2100      	movs	r1, #0
 8023222:	4618      	mov	r0, r3
 8023224:	f7fb fa31 	bl	801e68a <lv_style_set_clip_corner>
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023228:	4ba4      	ldr	r3, [pc, #656]	; (80234bc <list_init+0x2b4>)
 802322a:	681b      	ldr	r3, [r3, #0]
 802322c:	3378      	adds	r3, #120	; 0x78
 802322e:	2200      	movs	r2, #0
 8023230:	2100      	movs	r1, #0
 8023232:	4618      	mov	r0, r3
 8023234:	f7fb faa6 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023238:	4ba0      	ldr	r3, [pc, #640]	; (80234bc <list_init+0x2b4>)
 802323a:	681b      	ldr	r3, [r3, #0]
 802323c:	3378      	adds	r3, #120	; 0x78
 802323e:	2200      	movs	r2, #0
 8023240:	2100      	movs	r1, #0
 8023242:	4618      	mov	r0, r3
 8023244:	f7fb fab7 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023248:	4b9c      	ldr	r3, [pc, #624]	; (80234bc <list_init+0x2b4>)
 802324a:	681b      	ldr	r3, [r3, #0]
 802324c:	3378      	adds	r3, #120	; 0x78
 802324e:	2200      	movs	r2, #0
 8023250:	2100      	movs	r1, #0
 8023252:	4618      	mov	r0, r3
 8023254:	f7fb fa64 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023258:	4b98      	ldr	r3, [pc, #608]	; (80234bc <list_init+0x2b4>)
 802325a:	681b      	ldr	r3, [r3, #0]
 802325c:	3378      	adds	r3, #120	; 0x78
 802325e:	2200      	movs	r2, #0
 8023260:	2100      	movs	r1, #0
 8023262:	4618      	mov	r0, r3
 8023264:	f7fb fa75 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023268:	4b94      	ldr	r3, [pc, #592]	; (80234bc <list_init+0x2b4>)
 802326a:	681b      	ldr	r3, [r3, #0]
 802326c:	3378      	adds	r3, #120	; 0x78
 802326e:	2200      	movs	r2, #0
 8023270:	2100      	movs	r1, #0
 8023272:	4618      	mov	r0, r3
 8023274:	f7fb fab8 	bl	801e7e8 <lv_style_set_pad_inner>

    style_init_reset(&styles->list_btn);
 8023278:	4b90      	ldr	r3, [pc, #576]	; (80234bc <list_init+0x2b4>)
 802327a:	681b      	ldr	r3, [r3, #0]
 802327c:	337c      	adds	r3, #124	; 0x7c
 802327e:	4618      	mov	r0, r3
 8023280:	f001 ff62 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023284:	4b8d      	ldr	r3, [pc, #564]	; (80234bc <list_init+0x2b4>)
 8023286:	681b      	ldr	r3, [r3, #0]
 8023288:	337c      	adds	r3, #124	; 0x7c
 802328a:	22ff      	movs	r2, #255	; 0xff
 802328c:	2100      	movs	r1, #0
 802328e:	4618      	mov	r0, r3
 8023290:	f7fb fb3e 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
 8023294:	4b89      	ldr	r3, [pc, #548]	; (80234bc <list_init+0x2b4>)
 8023296:	681b      	ldr	r3, [r3, #0]
 8023298:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 802329c:	4b88      	ldr	r3, [pc, #544]	; (80234c0 <list_init+0x2b8>)
 802329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80232a0:	f003 0302 	and.w	r3, r3, #2
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	d005      	beq.n	80232b4 <list_init+0xac>
 80232a8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80232ac:	f7fb f98e 	bl	801e5cc <lv_color_hex>
 80232b0:	4603      	mov	r3, r0
 80232b2:	e003      	b.n	80232bc <list_init+0xb4>
 80232b4:	4883      	ldr	r0, [pc, #524]	; (80234c4 <list_init+0x2bc>)
 80232b6:	f7fb f989 	bl	801e5cc <lv_color_hex>
 80232ba:	4603      	mov	r3, r0
 80232bc:	461a      	mov	r2, r3
 80232be:	2100      	movs	r1, #0
 80232c0:	4620      	mov	r0, r4
 80232c2:	f7fb fb0e 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
 80232c6:	4b7d      	ldr	r3, [pc, #500]	; (80234bc <list_init+0x2b4>)
 80232c8:	681b      	ldr	r3, [r3, #0]
 80232ca:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80232ce:	4b7c      	ldr	r3, [pc, #496]	; (80234c0 <list_init+0x2b8>)
 80232d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80232d2:	f003 0302 	and.w	r3, r3, #2
 80232d6:	2b00      	cmp	r3, #0
 80232d8:	d004      	beq.n	80232e4 <list_init+0xdc>
 80232da:	487b      	ldr	r0, [pc, #492]	; (80234c8 <list_init+0x2c0>)
 80232dc:	f7fb f976 	bl	801e5cc <lv_color_hex>
 80232e0:	4603      	mov	r3, r0
 80232e2:	e003      	b.n	80232ec <list_init+0xe4>
 80232e4:	4879      	ldr	r0, [pc, #484]	; (80234cc <list_init+0x2c4>)
 80232e6:	f7fb f971 	bl	801e5cc <lv_color_hex>
 80232ea:	4603      	mov	r3, r0
 80232ec:	461a      	mov	r2, r3
 80232ee:	2110      	movs	r1, #16
 80232f0:	4620      	mov	r0, r4
 80232f2:	f7fb faf6 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
 80232f6:	4b71      	ldr	r3, [pc, #452]	; (80234bc <list_init+0x2b4>)
 80232f8:	681b      	ldr	r3, [r3, #0]
 80232fa:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80232fe:	4b70      	ldr	r3, [pc, #448]	; (80234c0 <list_init+0x2b8>)
 8023300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023302:	f003 0302 	and.w	r3, r3, #2
 8023306:	2b00      	cmp	r3, #0
 8023308:	d005      	beq.n	8023316 <list_init+0x10e>
 802330a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802330e:	f7fb f95d 	bl	801e5cc <lv_color_hex>
 8023312:	4603      	mov	r3, r0
 8023314:	e003      	b.n	802331e <list_init+0x116>
 8023316:	486b      	ldr	r0, [pc, #428]	; (80234c4 <list_init+0x2bc>)
 8023318:	f7fb f958 	bl	801e5cc <lv_color_hex>
 802331c:	4603      	mov	r3, r0
 802331e:	461a      	mov	r2, r3
 8023320:	2120      	movs	r1, #32
 8023322:	4620      	mov	r0, r4
 8023324:	f7fb fadd 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
 8023328:	4b64      	ldr	r3, [pc, #400]	; (80234bc <list_init+0x2b4>)
 802332a:	681b      	ldr	r3, [r3, #0]
 802332c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8023330:	4b63      	ldr	r3, [pc, #396]	; (80234c0 <list_init+0x2b8>)
 8023332:	68da      	ldr	r2, [r3, #12]
 8023334:	2101      	movs	r1, #1
 8023336:	f7fb fad4 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
 802333a:	4b60      	ldr	r3, [pc, #384]	; (80234bc <list_init+0x2b4>)
 802333c:	681b      	ldr	r3, [r3, #0]
 802333e:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023342:	4b5f      	ldr	r3, [pc, #380]	; (80234c0 <list_init+0x2b8>)
 8023344:	2133      	movs	r1, #51	; 0x33
 8023346:	68d8      	ldr	r0, [r3, #12]
 8023348:	f7f8 fa6c 	bl	801b824 <lv_color_darken>
 802334c:	4603      	mov	r3, r0
 802334e:	461a      	mov	r2, r3
 8023350:	2111      	movs	r1, #17
 8023352:	4620      	mov	r0, r4
 8023354:	f7fb fac5 	bl	801e8e2 <lv_style_set_bg_color>

    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8023358:	4b58      	ldr	r3, [pc, #352]	; (80234bc <list_init+0x2b4>)
 802335a:	681b      	ldr	r3, [r3, #0]
 802335c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023360:	4b57      	ldr	r3, [pc, #348]	; (80234c0 <list_init+0x2b8>)
 8023362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023364:	f003 0302 	and.w	r3, r3, #2
 8023368:	2b00      	cmp	r3, #0
 802336a:	d004      	beq.n	8023376 <list_init+0x16e>
 802336c:	4858      	ldr	r0, [pc, #352]	; (80234d0 <list_init+0x2c8>)
 802336e:	f7fb f92d 	bl	801e5cc <lv_color_hex>
 8023372:	4603      	mov	r3, r0
 8023374:	e004      	b.n	8023380 <list_init+0x178>
 8023376:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802337a:	f7fb f927 	bl	801e5cc <lv_color_hex>
 802337e:	4603      	mov	r3, r0
 8023380:	461a      	mov	r2, r3
 8023382:	2100      	movs	r1, #0
 8023384:	4620      	mov	r0, r4
 8023386:	f7fb fc8f 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 802338a:	4b4c      	ldr	r3, [pc, #304]	; (80234bc <list_init+0x2b4>)
 802338c:	681b      	ldr	r3, [r3, #0]
 802338e:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023392:	4b4b      	ldr	r3, [pc, #300]	; (80234c0 <list_init+0x2b8>)
 8023394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023396:	f003 0302 	and.w	r3, r3, #2
 802339a:	2b00      	cmp	r3, #0
 802339c:	d005      	beq.n	80233aa <list_init+0x1a2>
 802339e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80233a2:	f7fb f913 	bl	801e5cc <lv_color_hex>
 80233a6:	4603      	mov	r3, r0
 80233a8:	e004      	b.n	80233b4 <list_init+0x1ac>
 80233aa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80233ae:	f7fb f90d 	bl	801e5cc <lv_color_hex>
 80233b2:	4603      	mov	r3, r0
 80233b4:	461a      	mov	r2, r3
 80233b6:	2101      	movs	r1, #1
 80233b8:	4620      	mov	r0, r4
 80233ba:	f7fb fc75 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 80233be:	4b3f      	ldr	r3, [pc, #252]	; (80234bc <list_init+0x2b4>)
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80233c6:	4b3e      	ldr	r3, [pc, #248]	; (80234c0 <list_init+0x2b8>)
 80233c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80233ca:	f003 0302 	and.w	r3, r3, #2
 80233ce:	2b00      	cmp	r3, #0
 80233d0:	d005      	beq.n	80233de <list_init+0x1d6>
 80233d2:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80233d6:	f7fb f90d 	bl	801e5f4 <lv_color_hex3>
 80233da:	4603      	mov	r3, r0
 80233dc:	e004      	b.n	80233e8 <list_init+0x1e0>
 80233de:	f640 1099 	movw	r0, #2457	; 0x999
 80233e2:	f7fb f907 	bl	801e5f4 <lv_color_hex3>
 80233e6:	4603      	mov	r3, r0
 80233e8:	461a      	mov	r2, r3
 80233ea:	2120      	movs	r1, #32
 80233ec:	4620      	mov	r0, r4
 80233ee:	f7fb fc5b 	bl	801eca8 <lv_style_set_text_color>

    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 80233f2:	4b32      	ldr	r3, [pc, #200]	; (80234bc <list_init+0x2b4>)
 80233f4:	681b      	ldr	r3, [r3, #0]
 80233f6:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80233fa:	4b31      	ldr	r3, [pc, #196]	; (80234c0 <list_init+0x2b8>)
 80233fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80233fe:	f003 0302 	and.w	r3, r3, #2
 8023402:	2b00      	cmp	r3, #0
 8023404:	d004      	beq.n	8023410 <list_init+0x208>
 8023406:	4832      	ldr	r0, [pc, #200]	; (80234d0 <list_init+0x2c8>)
 8023408:	f7fb f8e0 	bl	801e5cc <lv_color_hex>
 802340c:	4603      	mov	r3, r0
 802340e:	e004      	b.n	802341a <list_init+0x212>
 8023410:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023414:	f7fb f8da 	bl	801e5cc <lv_color_hex>
 8023418:	4603      	mov	r3, r0
 802341a:	461a      	mov	r2, r3
 802341c:	2100      	movs	r1, #0
 802341e:	4620      	mov	r0, r4
 8023420:	f7fb fd26 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 8023424:	4b25      	ldr	r3, [pc, #148]	; (80234bc <list_init+0x2b4>)
 8023426:	681b      	ldr	r3, [r3, #0]
 8023428:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 802342c:	4b24      	ldr	r3, [pc, #144]	; (80234c0 <list_init+0x2b8>)
 802342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023430:	f003 0302 	and.w	r3, r3, #2
 8023434:	2b00      	cmp	r3, #0
 8023436:	d005      	beq.n	8023444 <list_init+0x23c>
 8023438:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802343c:	f7fb f8c6 	bl	801e5cc <lv_color_hex>
 8023440:	4603      	mov	r3, r0
 8023442:	e004      	b.n	802344e <list_init+0x246>
 8023444:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023448:	f7fb f8c0 	bl	801e5cc <lv_color_hex>
 802344c:	4603      	mov	r3, r0
 802344e:	461a      	mov	r2, r3
 8023450:	2101      	movs	r1, #1
 8023452:	4620      	mov	r0, r4
 8023454:	f7fb fd0c 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 8023458:	4b18      	ldr	r3, [pc, #96]	; (80234bc <list_init+0x2b4>)
 802345a:	681b      	ldr	r3, [r3, #0]
 802345c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023460:	4b17      	ldr	r3, [pc, #92]	; (80234c0 <list_init+0x2b8>)
 8023462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023464:	f003 0302 	and.w	r3, r3, #2
 8023468:	2b00      	cmp	r3, #0
 802346a:	d005      	beq.n	8023478 <list_init+0x270>
 802346c:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8023470:	f7fb f8c0 	bl	801e5f4 <lv_color_hex3>
 8023474:	4603      	mov	r3, r0
 8023476:	e004      	b.n	8023482 <list_init+0x27a>
 8023478:	f640 1099 	movw	r0, #2457	; 0x999
 802347c:	f7fb f8ba 	bl	801e5f4 <lv_color_hex3>
 8023480:	4603      	mov	r3, r0
 8023482:	461a      	mov	r2, r3
 8023484:	2120      	movs	r1, #32
 8023486:	4620      	mov	r0, r4
 8023488:	f7fb fcf2 	bl	801ee70 <lv_style_set_image_recolor>

    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
 802348c:	4b0b      	ldr	r3, [pc, #44]	; (80234bc <list_init+0x2b4>)
 802348e:	681b      	ldr	r3, [r3, #0]
 8023490:	337c      	adds	r3, #124	; 0x7c
 8023492:	2201      	movs	r2, #1
 8023494:	2100      	movs	r1, #0
 8023496:	4618      	mov	r0, r3
 8023498:	f7fb fa6b 	bl	801e972 <lv_style_set_border_side>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 802349c:	4b07      	ldr	r3, [pc, #28]	; (80234bc <list_init+0x2b4>)
 802349e:	681b      	ldr	r3, [r3, #0]
 80234a0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80234a4:	4b06      	ldr	r3, [pc, #24]	; (80234c0 <list_init+0x2b8>)
 80234a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80234a8:	f003 0302 	and.w	r3, r3, #2
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	d013      	beq.n	80234d8 <list_init+0x2d0>
 80234b0:	4808      	ldr	r0, [pc, #32]	; (80234d4 <list_init+0x2cc>)
 80234b2:	f7fb f88b 	bl	801e5cc <lv_color_hex>
 80234b6:	4603      	mov	r3, r0
 80234b8:	e012      	b.n	80234e0 <list_init+0x2d8>
 80234ba:	bf00      	nop
 80234bc:	200200d0 	.word	0x200200d0
 80234c0:	200200a4 	.word	0x200200a4
 80234c4:	00586273 	.word	0x00586273
 80234c8:	00eeeeee 	.word	0x00eeeeee
 80234cc:	00494f57 	.word	0x00494f57
 80234d0:	003b3e42 	.word	0x003b3e42
 80234d4:	00d6dde3 	.word	0x00d6dde3
 80234d8:	48cf      	ldr	r0, [pc, #828]	; (8023818 <list_init+0x610>)
 80234da:	f7fb f877 	bl	801e5cc <lv_color_hex>
 80234de:	4603      	mov	r3, r0
 80234e0:	461a      	mov	r2, r3
 80234e2:	2100      	movs	r1, #0
 80234e4:	4620      	mov	r0, r4
 80234e6:	f7fb fa76 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
 80234ea:	4bcc      	ldr	r3, [pc, #816]	; (802381c <list_init+0x614>)
 80234ec:	681b      	ldr	r3, [r3, #0]
 80234ee:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80234f2:	4bcb      	ldr	r3, [pc, #812]	; (8023820 <list_init+0x618>)
 80234f4:	68da      	ldr	r2, [r3, #12]
 80234f6:	2102      	movs	r1, #2
 80234f8:	f7fb fa6d 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
 80234fc:	4bc7      	ldr	r3, [pc, #796]	; (802381c <list_init+0x614>)
 80234fe:	681b      	ldr	r3, [r3, #0]
 8023500:	337c      	adds	r3, #124	; 0x7c
 8023502:	2201      	movs	r2, #1
 8023504:	2100      	movs	r1, #0
 8023506:	4618      	mov	r0, r3
 8023508:	f7fb fa1a 	bl	801e940 <lv_style_set_border_width>

    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
 802350c:	4bc3      	ldr	r3, [pc, #780]	; (802381c <list_init+0x614>)
 802350e:	681b      	ldr	r3, [r3, #0]
 8023510:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8023514:	4bc2      	ldr	r3, [pc, #776]	; (8023820 <list_init+0x618>)
 8023516:	691a      	ldr	r2, [r3, #16]
 8023518:	2102      	movs	r1, #2
 802351a:	f7fb fabd 	bl	801ea98 <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
 802351e:	4bbf      	ldr	r3, [pc, #764]	; (802381c <list_init+0x614>)
 8023520:	681b      	ldr	r3, [r3, #0]
 8023522:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023526:	4bbe      	ldr	r3, [pc, #760]	; (8023820 <list_init+0x618>)
 8023528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802352a:	f003 0320 	and.w	r3, r3, #32
 802352e:	2b00      	cmp	r3, #0
 8023530:	d118      	bne.n	8023564 <list_init+0x35c>
 8023532:	2000      	movs	r0, #0
 8023534:	f7f6 fde0 	bl	801a0f8 <lv_disp_get_dpi>
 8023538:	4603      	mov	r3, r0
 802353a:	3328      	adds	r3, #40	; 0x28
 802353c:	005b      	lsls	r3, r3, #1
 802353e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023542:	db0d      	blt.n	8023560 <list_init+0x358>
 8023544:	2000      	movs	r0, #0
 8023546:	f7f6 fdd7 	bl	801a0f8 <lv_disp_get_dpi>
 802354a:	4603      	mov	r3, r0
 802354c:	3328      	adds	r3, #40	; 0x28
 802354e:	005b      	lsls	r3, r3, #1
 8023550:	4ab4      	ldr	r2, [pc, #720]	; (8023824 <list_init+0x61c>)
 8023552:	fb82 1203 	smull	r1, r2, r2, r3
 8023556:	1192      	asrs	r2, r2, #6
 8023558:	17db      	asrs	r3, r3, #31
 802355a:	1ad3      	subs	r3, r2, r3
 802355c:	b21b      	sxth	r3, r3
 802355e:	e002      	b.n	8023566 <list_init+0x35e>
 8023560:	2301      	movs	r3, #1
 8023562:	e000      	b.n	8023566 <list_init+0x35e>
 8023564:	2300      	movs	r3, #0
 8023566:	461a      	mov	r2, r3
 8023568:	2102      	movs	r1, #2
 802356a:	4620      	mov	r0, r4
 802356c:	f7fb fa62 	bl	801ea34 <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
 8023570:	4baa      	ldr	r3, [pc, #680]	; (802381c <list_init+0x614>)
 8023572:	681b      	ldr	r3, [r3, #0]
 8023574:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023578:	2000      	movs	r0, #0
 802357a:	f7f6 fdbd 	bl	801a0f8 <lv_disp_get_dpi>
 802357e:	4603      	mov	r3, r0
 8023580:	3328      	adds	r3, #40	; 0x28
 8023582:	005b      	lsls	r3, r3, #1
 8023584:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023588:	db0d      	blt.n	80235a6 <list_init+0x39e>
 802358a:	2000      	movs	r0, #0
 802358c:	f7f6 fdb4 	bl	801a0f8 <lv_disp_get_dpi>
 8023590:	4603      	mov	r3, r0
 8023592:	3328      	adds	r3, #40	; 0x28
 8023594:	005b      	lsls	r3, r3, #1
 8023596:	4aa3      	ldr	r2, [pc, #652]	; (8023824 <list_init+0x61c>)
 8023598:	fb82 1203 	smull	r1, r2, r2, r3
 802359c:	1192      	asrs	r2, r2, #6
 802359e:	17db      	asrs	r3, r3, #31
 80235a0:	1a9b      	subs	r3, r3, r2
 80235a2:	b21b      	sxth	r3, r3
 80235a4:	e001      	b.n	80235aa <list_init+0x3a2>
 80235a6:	f04f 33ff 	mov.w	r3, #4294967295
 80235aa:	461a      	mov	r2, r3
 80235ac:	2102      	movs	r1, #2
 80235ae:	4620      	mov	r0, r4
 80235b0:	f7fb fa59 	bl	801ea66 <lv_style_set_outline_pad>

    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 80235b4:	4b99      	ldr	r3, [pc, #612]	; (802381c <list_init+0x614>)
 80235b6:	681b      	ldr	r3, [r3, #0]
 80235b8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80235bc:	2000      	movs	r0, #0
 80235be:	f7f6 fdb4 	bl	801a12a <lv_disp_get_size_category>
 80235c2:	4603      	mov	r3, r0
 80235c4:	2b01      	cmp	r3, #1
 80235c6:	d81e      	bhi.n	8023606 <list_init+0x3fe>
 80235c8:	2000      	movs	r0, #0
 80235ca:	f7f6 fd95 	bl	801a0f8 <lv_disp_get_dpi>
 80235ce:	4603      	mov	r3, r0
 80235d0:	461a      	mov	r2, r3
 80235d2:	4613      	mov	r3, r2
 80235d4:	011b      	lsls	r3, r3, #4
 80235d6:	1a9b      	subs	r3, r3, r2
 80235d8:	3350      	adds	r3, #80	; 0x50
 80235da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80235de:	db10      	blt.n	8023602 <list_init+0x3fa>
 80235e0:	2000      	movs	r0, #0
 80235e2:	f7f6 fd89 	bl	801a0f8 <lv_disp_get_dpi>
 80235e6:	4603      	mov	r3, r0
 80235e8:	461a      	mov	r2, r3
 80235ea:	4613      	mov	r3, r2
 80235ec:	011b      	lsls	r3, r3, #4
 80235ee:	1a9b      	subs	r3, r3, r2
 80235f0:	3350      	adds	r3, #80	; 0x50
 80235f2:	4a8c      	ldr	r2, [pc, #560]	; (8023824 <list_init+0x61c>)
 80235f4:	fb82 1203 	smull	r1, r2, r2, r3
 80235f8:	1192      	asrs	r2, r2, #6
 80235fa:	17db      	asrs	r3, r3, #31
 80235fc:	1ad3      	subs	r3, r2, r3
 80235fe:	b21b      	sxth	r3, r3
 8023600:	e021      	b.n	8023646 <list_init+0x43e>
 8023602:	2301      	movs	r3, #1
 8023604:	e01f      	b.n	8023646 <list_init+0x43e>
 8023606:	2000      	movs	r0, #0
 8023608:	f7f6 fd76 	bl	801a0f8 <lv_disp_get_dpi>
 802360c:	4603      	mov	r3, r0
 802360e:	461a      	mov	r2, r3
 8023610:	4613      	mov	r3, r2
 8023612:	011b      	lsls	r3, r3, #4
 8023614:	1a9b      	subs	r3, r3, r2
 8023616:	005b      	lsls	r3, r3, #1
 8023618:	3350      	adds	r3, #80	; 0x50
 802361a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802361e:	db11      	blt.n	8023644 <list_init+0x43c>
 8023620:	2000      	movs	r0, #0
 8023622:	f7f6 fd69 	bl	801a0f8 <lv_disp_get_dpi>
 8023626:	4603      	mov	r3, r0
 8023628:	461a      	mov	r2, r3
 802362a:	4613      	mov	r3, r2
 802362c:	011b      	lsls	r3, r3, #4
 802362e:	1a9b      	subs	r3, r3, r2
 8023630:	005b      	lsls	r3, r3, #1
 8023632:	3350      	adds	r3, #80	; 0x50
 8023634:	4a7b      	ldr	r2, [pc, #492]	; (8023824 <list_init+0x61c>)
 8023636:	fb82 1203 	smull	r1, r2, r2, r3
 802363a:	1192      	asrs	r2, r2, #6
 802363c:	17db      	asrs	r3, r3, #31
 802363e:	1ad3      	subs	r3, r2, r3
 8023640:	b21b      	sxth	r3, r3
 8023642:	e000      	b.n	8023646 <list_init+0x43e>
 8023644:	2301      	movs	r3, #1
 8023646:	461a      	mov	r2, r3
 8023648:	2100      	movs	r1, #0
 802364a:	4620      	mov	r0, r4
 802364c:	f7fb f89a 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8023650:	4b72      	ldr	r3, [pc, #456]	; (802381c <list_init+0x614>)
 8023652:	681b      	ldr	r3, [r3, #0]
 8023654:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023658:	2000      	movs	r0, #0
 802365a:	f7f6 fd66 	bl	801a12a <lv_disp_get_size_category>
 802365e:	4603      	mov	r3, r0
 8023660:	2b01      	cmp	r3, #1
 8023662:	d81e      	bhi.n	80236a2 <list_init+0x49a>
 8023664:	2000      	movs	r0, #0
 8023666:	f7f6 fd47 	bl	801a0f8 <lv_disp_get_dpi>
 802366a:	4603      	mov	r3, r0
 802366c:	461a      	mov	r2, r3
 802366e:	4613      	mov	r3, r2
 8023670:	011b      	lsls	r3, r3, #4
 8023672:	1a9b      	subs	r3, r3, r2
 8023674:	3350      	adds	r3, #80	; 0x50
 8023676:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802367a:	db10      	blt.n	802369e <list_init+0x496>
 802367c:	2000      	movs	r0, #0
 802367e:	f7f6 fd3b 	bl	801a0f8 <lv_disp_get_dpi>
 8023682:	4603      	mov	r3, r0
 8023684:	461a      	mov	r2, r3
 8023686:	4613      	mov	r3, r2
 8023688:	011b      	lsls	r3, r3, #4
 802368a:	1a9b      	subs	r3, r3, r2
 802368c:	3350      	adds	r3, #80	; 0x50
 802368e:	4a65      	ldr	r2, [pc, #404]	; (8023824 <list_init+0x61c>)
 8023690:	fb82 1203 	smull	r1, r2, r2, r3
 8023694:	1192      	asrs	r2, r2, #6
 8023696:	17db      	asrs	r3, r3, #31
 8023698:	1ad3      	subs	r3, r2, r3
 802369a:	b21b      	sxth	r3, r3
 802369c:	e021      	b.n	80236e2 <list_init+0x4da>
 802369e:	2301      	movs	r3, #1
 80236a0:	e01f      	b.n	80236e2 <list_init+0x4da>
 80236a2:	2000      	movs	r0, #0
 80236a4:	f7f6 fd28 	bl	801a0f8 <lv_disp_get_dpi>
 80236a8:	4603      	mov	r3, r0
 80236aa:	461a      	mov	r2, r3
 80236ac:	4613      	mov	r3, r2
 80236ae:	011b      	lsls	r3, r3, #4
 80236b0:	1a9b      	subs	r3, r3, r2
 80236b2:	005b      	lsls	r3, r3, #1
 80236b4:	3350      	adds	r3, #80	; 0x50
 80236b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80236ba:	db11      	blt.n	80236e0 <list_init+0x4d8>
 80236bc:	2000      	movs	r0, #0
 80236be:	f7f6 fd1b 	bl	801a0f8 <lv_disp_get_dpi>
 80236c2:	4603      	mov	r3, r0
 80236c4:	461a      	mov	r2, r3
 80236c6:	4613      	mov	r3, r2
 80236c8:	011b      	lsls	r3, r3, #4
 80236ca:	1a9b      	subs	r3, r3, r2
 80236cc:	005b      	lsls	r3, r3, #1
 80236ce:	3350      	adds	r3, #80	; 0x50
 80236d0:	4a54      	ldr	r2, [pc, #336]	; (8023824 <list_init+0x61c>)
 80236d2:	fb82 1203 	smull	r1, r2, r2, r3
 80236d6:	1192      	asrs	r2, r2, #6
 80236d8:	17db      	asrs	r3, r3, #31
 80236da:	1ad3      	subs	r3, r2, r3
 80236dc:	b21b      	sxth	r3, r3
 80236de:	e000      	b.n	80236e2 <list_init+0x4da>
 80236e0:	2301      	movs	r3, #1
 80236e2:	461a      	mov	r2, r3
 80236e4:	2100      	movs	r1, #0
 80236e6:	4620      	mov	r0, r4
 80236e8:	f7fb f865 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 80236ec:	4b4b      	ldr	r3, [pc, #300]	; (802381c <list_init+0x614>)
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80236f4:	2000      	movs	r0, #0
 80236f6:	f7f6 fd18 	bl	801a12a <lv_disp_get_size_category>
 80236fa:	4603      	mov	r3, r0
 80236fc:	2b01      	cmp	r3, #1
 80236fe:	d81e      	bhi.n	802373e <list_init+0x536>
 8023700:	2000      	movs	r0, #0
 8023702:	f7f6 fcf9 	bl	801a0f8 <lv_disp_get_dpi>
 8023706:	4603      	mov	r3, r0
 8023708:	461a      	mov	r2, r3
 802370a:	4613      	mov	r3, r2
 802370c:	011b      	lsls	r3, r3, #4
 802370e:	1a9b      	subs	r3, r3, r2
 8023710:	3350      	adds	r3, #80	; 0x50
 8023712:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023716:	db10      	blt.n	802373a <list_init+0x532>
 8023718:	2000      	movs	r0, #0
 802371a:	f7f6 fced 	bl	801a0f8 <lv_disp_get_dpi>
 802371e:	4603      	mov	r3, r0
 8023720:	461a      	mov	r2, r3
 8023722:	4613      	mov	r3, r2
 8023724:	011b      	lsls	r3, r3, #4
 8023726:	1a9b      	subs	r3, r3, r2
 8023728:	3350      	adds	r3, #80	; 0x50
 802372a:	4a3e      	ldr	r2, [pc, #248]	; (8023824 <list_init+0x61c>)
 802372c:	fb82 1203 	smull	r1, r2, r2, r3
 8023730:	1192      	asrs	r2, r2, #6
 8023732:	17db      	asrs	r3, r3, #31
 8023734:	1ad3      	subs	r3, r2, r3
 8023736:	b21b      	sxth	r3, r3
 8023738:	e021      	b.n	802377e <list_init+0x576>
 802373a:	2301      	movs	r3, #1
 802373c:	e01f      	b.n	802377e <list_init+0x576>
 802373e:	2000      	movs	r0, #0
 8023740:	f7f6 fcda 	bl	801a0f8 <lv_disp_get_dpi>
 8023744:	4603      	mov	r3, r0
 8023746:	461a      	mov	r2, r3
 8023748:	4613      	mov	r3, r2
 802374a:	011b      	lsls	r3, r3, #4
 802374c:	1a9b      	subs	r3, r3, r2
 802374e:	005b      	lsls	r3, r3, #1
 8023750:	3350      	adds	r3, #80	; 0x50
 8023752:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023756:	db11      	blt.n	802377c <list_init+0x574>
 8023758:	2000      	movs	r0, #0
 802375a:	f7f6 fccd 	bl	801a0f8 <lv_disp_get_dpi>
 802375e:	4603      	mov	r3, r0
 8023760:	461a      	mov	r2, r3
 8023762:	4613      	mov	r3, r2
 8023764:	011b      	lsls	r3, r3, #4
 8023766:	1a9b      	subs	r3, r3, r2
 8023768:	005b      	lsls	r3, r3, #1
 802376a:	3350      	adds	r3, #80	; 0x50
 802376c:	4a2d      	ldr	r2, [pc, #180]	; (8023824 <list_init+0x61c>)
 802376e:	fb82 1203 	smull	r1, r2, r2, r3
 8023772:	1192      	asrs	r2, r2, #6
 8023774:	17db      	asrs	r3, r3, #31
 8023776:	1ad3      	subs	r3, r2, r3
 8023778:	b21b      	sxth	r3, r3
 802377a:	e000      	b.n	802377e <list_init+0x576>
 802377c:	2301      	movs	r3, #1
 802377e:	461a      	mov	r2, r3
 8023780:	2100      	movs	r1, #0
 8023782:	4620      	mov	r0, r4
 8023784:	f7fa ffcc 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8023788:	4b24      	ldr	r3, [pc, #144]	; (802381c <list_init+0x614>)
 802378a:	681b      	ldr	r3, [r3, #0]
 802378c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023790:	2000      	movs	r0, #0
 8023792:	f7f6 fcca 	bl	801a12a <lv_disp_get_size_category>
 8023796:	4603      	mov	r3, r0
 8023798:	2b01      	cmp	r3, #1
 802379a:	d81e      	bhi.n	80237da <list_init+0x5d2>
 802379c:	2000      	movs	r0, #0
 802379e:	f7f6 fcab 	bl	801a0f8 <lv_disp_get_dpi>
 80237a2:	4603      	mov	r3, r0
 80237a4:	461a      	mov	r2, r3
 80237a6:	4613      	mov	r3, r2
 80237a8:	011b      	lsls	r3, r3, #4
 80237aa:	1a9b      	subs	r3, r3, r2
 80237ac:	3350      	adds	r3, #80	; 0x50
 80237ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80237b2:	db10      	blt.n	80237d6 <list_init+0x5ce>
 80237b4:	2000      	movs	r0, #0
 80237b6:	f7f6 fc9f 	bl	801a0f8 <lv_disp_get_dpi>
 80237ba:	4603      	mov	r3, r0
 80237bc:	461a      	mov	r2, r3
 80237be:	4613      	mov	r3, r2
 80237c0:	011b      	lsls	r3, r3, #4
 80237c2:	1a9b      	subs	r3, r3, r2
 80237c4:	3350      	adds	r3, #80	; 0x50
 80237c6:	4a17      	ldr	r2, [pc, #92]	; (8023824 <list_init+0x61c>)
 80237c8:	fb82 1203 	smull	r1, r2, r2, r3
 80237cc:	1192      	asrs	r2, r2, #6
 80237ce:	17db      	asrs	r3, r3, #31
 80237d0:	1ad3      	subs	r3, r2, r3
 80237d2:	b21b      	sxth	r3, r3
 80237d4:	e029      	b.n	802382a <list_init+0x622>
 80237d6:	2301      	movs	r3, #1
 80237d8:	e027      	b.n	802382a <list_init+0x622>
 80237da:	2000      	movs	r0, #0
 80237dc:	f7f6 fc8c 	bl	801a0f8 <lv_disp_get_dpi>
 80237e0:	4603      	mov	r3, r0
 80237e2:	461a      	mov	r2, r3
 80237e4:	4613      	mov	r3, r2
 80237e6:	011b      	lsls	r3, r3, #4
 80237e8:	1a9b      	subs	r3, r3, r2
 80237ea:	005b      	lsls	r3, r3, #1
 80237ec:	3350      	adds	r3, #80	; 0x50
 80237ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80237f2:	db19      	blt.n	8023828 <list_init+0x620>
 80237f4:	2000      	movs	r0, #0
 80237f6:	f7f6 fc7f 	bl	801a0f8 <lv_disp_get_dpi>
 80237fa:	4603      	mov	r3, r0
 80237fc:	461a      	mov	r2, r3
 80237fe:	4613      	mov	r3, r2
 8023800:	011b      	lsls	r3, r3, #4
 8023802:	1a9b      	subs	r3, r3, r2
 8023804:	005b      	lsls	r3, r3, #1
 8023806:	3350      	adds	r3, #80	; 0x50
 8023808:	4a06      	ldr	r2, [pc, #24]	; (8023824 <list_init+0x61c>)
 802380a:	fb82 1203 	smull	r1, r2, r2, r3
 802380e:	1192      	asrs	r2, r2, #6
 8023810:	17db      	asrs	r3, r3, #31
 8023812:	1ad3      	subs	r3, r2, r3
 8023814:	b21b      	sxth	r3, r3
 8023816:	e008      	b.n	802382a <list_init+0x622>
 8023818:	00808a97 	.word	0x00808a97
 802381c:	200200d0 	.word	0x200200d0
 8023820:	200200a4 	.word	0x200200a4
 8023824:	66666667 	.word	0x66666667
 8023828:	2301      	movs	r3, #1
 802382a:	461a      	mov	r2, r3
 802382c:	2100      	movs	r1, #0
 802382e:	4620      	mov	r0, r4
 8023830:	f7fa ff8f 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8023834:	4b9f      	ldr	r3, [pc, #636]	; (8023ab4 <list_init+0x8ac>)
 8023836:	681b      	ldr	r3, [r3, #0]
 8023838:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 802383c:	2000      	movs	r0, #0
 802383e:	f7f6 fc74 	bl	801a12a <lv_disp_get_size_category>
 8023842:	4603      	mov	r3, r0
 8023844:	2b01      	cmp	r3, #1
 8023846:	d81e      	bhi.n	8023886 <list_init+0x67e>
 8023848:	2000      	movs	r0, #0
 802384a:	f7f6 fc55 	bl	801a0f8 <lv_disp_get_dpi>
 802384e:	4603      	mov	r3, r0
 8023850:	461a      	mov	r2, r3
 8023852:	4613      	mov	r3, r2
 8023854:	011b      	lsls	r3, r3, #4
 8023856:	1a9b      	subs	r3, r3, r2
 8023858:	3350      	adds	r3, #80	; 0x50
 802385a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802385e:	db10      	blt.n	8023882 <list_init+0x67a>
 8023860:	2000      	movs	r0, #0
 8023862:	f7f6 fc49 	bl	801a0f8 <lv_disp_get_dpi>
 8023866:	4603      	mov	r3, r0
 8023868:	461a      	mov	r2, r3
 802386a:	4613      	mov	r3, r2
 802386c:	011b      	lsls	r3, r3, #4
 802386e:	1a9b      	subs	r3, r3, r2
 8023870:	3350      	adds	r3, #80	; 0x50
 8023872:	4a91      	ldr	r2, [pc, #580]	; (8023ab8 <list_init+0x8b0>)
 8023874:	fb82 1203 	smull	r1, r2, r2, r3
 8023878:	1192      	asrs	r2, r2, #6
 802387a:	17db      	asrs	r3, r3, #31
 802387c:	1ad3      	subs	r3, r2, r3
 802387e:	b21b      	sxth	r3, r3
 8023880:	e021      	b.n	80238c6 <list_init+0x6be>
 8023882:	2301      	movs	r3, #1
 8023884:	e01f      	b.n	80238c6 <list_init+0x6be>
 8023886:	2000      	movs	r0, #0
 8023888:	f7f6 fc36 	bl	801a0f8 <lv_disp_get_dpi>
 802388c:	4603      	mov	r3, r0
 802388e:	461a      	mov	r2, r3
 8023890:	4613      	mov	r3, r2
 8023892:	011b      	lsls	r3, r3, #4
 8023894:	1a9b      	subs	r3, r3, r2
 8023896:	005b      	lsls	r3, r3, #1
 8023898:	3350      	adds	r3, #80	; 0x50
 802389a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802389e:	db11      	blt.n	80238c4 <list_init+0x6bc>
 80238a0:	2000      	movs	r0, #0
 80238a2:	f7f6 fc29 	bl	801a0f8 <lv_disp_get_dpi>
 80238a6:	4603      	mov	r3, r0
 80238a8:	461a      	mov	r2, r3
 80238aa:	4613      	mov	r3, r2
 80238ac:	011b      	lsls	r3, r3, #4
 80238ae:	1a9b      	subs	r3, r3, r2
 80238b0:	005b      	lsls	r3, r3, #1
 80238b2:	3350      	adds	r3, #80	; 0x50
 80238b4:	4a80      	ldr	r2, [pc, #512]	; (8023ab8 <list_init+0x8b0>)
 80238b6:	fb82 1203 	smull	r1, r2, r2, r3
 80238ba:	1192      	asrs	r2, r2, #6
 80238bc:	17db      	asrs	r3, r3, #31
 80238be:	1ad3      	subs	r3, r2, r3
 80238c0:	b21b      	sxth	r3, r3
 80238c2:	e000      	b.n	80238c6 <list_init+0x6be>
 80238c4:	2301      	movs	r3, #1
 80238c6:	461a      	mov	r2, r3
 80238c8:	2100      	movs	r1, #0
 80238ca:	4620      	mov	r0, r4
 80238cc:	f7fa ff8c 	bl	801e7e8 <lv_style_set_pad_inner>

    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
 80238d0:	4b78      	ldr	r3, [pc, #480]	; (8023ab4 <list_init+0x8ac>)
 80238d2:	681b      	ldr	r3, [r3, #0]
 80238d4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80238d8:	2000      	movs	r0, #0
 80238da:	f7f6 fc26 	bl	801a12a <lv_disp_get_size_category>
 80238de:	4603      	mov	r3, r0
 80238e0:	2b01      	cmp	r3, #1
 80238e2:	d81f      	bhi.n	8023924 <list_init+0x71c>
 80238e4:	2000      	movs	r0, #0
 80238e6:	f7f6 fc07 	bl	801a0f8 <lv_disp_get_dpi>
 80238ea:	4603      	mov	r3, r0
 80238ec:	461a      	mov	r2, r3
 80238ee:	4613      	mov	r3, r2
 80238f0:	011b      	lsls	r3, r3, #4
 80238f2:	1a9b      	subs	r3, r3, r2
 80238f4:	3350      	adds	r3, #80	; 0x50
 80238f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80238fa:	db10      	blt.n	802391e <list_init+0x716>
 80238fc:	2000      	movs	r0, #0
 80238fe:	f7f6 fbfb 	bl	801a0f8 <lv_disp_get_dpi>
 8023902:	4603      	mov	r3, r0
 8023904:	461a      	mov	r2, r3
 8023906:	4613      	mov	r3, r2
 8023908:	011b      	lsls	r3, r3, #4
 802390a:	1a9b      	subs	r3, r3, r2
 802390c:	3350      	adds	r3, #80	; 0x50
 802390e:	4a6a      	ldr	r2, [pc, #424]	; (8023ab8 <list_init+0x8b0>)
 8023910:	fb82 1203 	smull	r1, r2, r2, r3
 8023914:	1192      	asrs	r2, r2, #6
 8023916:	17db      	asrs	r3, r3, #31
 8023918:	1a9b      	subs	r3, r3, r2
 802391a:	b21b      	sxth	r3, r3
 802391c:	e023      	b.n	8023966 <list_init+0x75e>
 802391e:	f04f 33ff 	mov.w	r3, #4294967295
 8023922:	e020      	b.n	8023966 <list_init+0x75e>
 8023924:	2000      	movs	r0, #0
 8023926:	f7f6 fbe7 	bl	801a0f8 <lv_disp_get_dpi>
 802392a:	4603      	mov	r3, r0
 802392c:	461a      	mov	r2, r3
 802392e:	4613      	mov	r3, r2
 8023930:	011b      	lsls	r3, r3, #4
 8023932:	1a9b      	subs	r3, r3, r2
 8023934:	005b      	lsls	r3, r3, #1
 8023936:	3350      	adds	r3, #80	; 0x50
 8023938:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802393c:	db11      	blt.n	8023962 <list_init+0x75a>
 802393e:	2000      	movs	r0, #0
 8023940:	f7f6 fbda 	bl	801a0f8 <lv_disp_get_dpi>
 8023944:	4603      	mov	r3, r0
 8023946:	461a      	mov	r2, r3
 8023948:	4613      	mov	r3, r2
 802394a:	011b      	lsls	r3, r3, #4
 802394c:	1a9b      	subs	r3, r3, r2
 802394e:	005b      	lsls	r3, r3, #1
 8023950:	3350      	adds	r3, #80	; 0x50
 8023952:	4a59      	ldr	r2, [pc, #356]	; (8023ab8 <list_init+0x8b0>)
 8023954:	fb82 1203 	smull	r1, r2, r2, r3
 8023958:	1192      	asrs	r2, r2, #6
 802395a:	17db      	asrs	r3, r3, #31
 802395c:	1a9b      	subs	r3, r3, r2
 802395e:	b21b      	sxth	r3, r3
 8023960:	e001      	b.n	8023966 <list_init+0x75e>
 8023962:	f04f 33ff 	mov.w	r3, #4294967295
 8023966:	461a      	mov	r2, r3
 8023968:	2100      	movs	r1, #0
 802396a:	4620      	mov	r0, r4
 802396c:	f7fa febf 	bl	801e6ee <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
 8023970:	4b50      	ldr	r3, [pc, #320]	; (8023ab4 <list_init+0x8ac>)
 8023972:	681b      	ldr	r3, [r3, #0]
 8023974:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023978:	2000      	movs	r0, #0
 802397a:	f7f6 fbbd 	bl	801a0f8 <lv_disp_get_dpi>
 802397e:	4603      	mov	r3, r0
 8023980:	3328      	adds	r3, #40	; 0x28
 8023982:	005b      	lsls	r3, r3, #1
 8023984:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023988:	db0d      	blt.n	80239a6 <list_init+0x79e>
 802398a:	2000      	movs	r0, #0
 802398c:	f7f6 fbb4 	bl	801a0f8 <lv_disp_get_dpi>
 8023990:	4603      	mov	r3, r0
 8023992:	3328      	adds	r3, #40	; 0x28
 8023994:	005b      	lsls	r3, r3, #1
 8023996:	4a48      	ldr	r2, [pc, #288]	; (8023ab8 <list_init+0x8b0>)
 8023998:	fb82 1203 	smull	r1, r2, r2, r3
 802399c:	1192      	asrs	r2, r2, #6
 802399e:	17db      	asrs	r3, r3, #31
 80239a0:	1a9b      	subs	r3, r3, r2
 80239a2:	b21b      	sxth	r3, r3
 80239a4:	e001      	b.n	80239aa <list_init+0x7a2>
 80239a6:	f04f 33ff 	mov.w	r3, #4294967295
 80239aa:	461a      	mov	r2, r3
 80239ac:	2110      	movs	r1, #16
 80239ae:	4620      	mov	r0, r4
 80239b0:	f7fa fe9d 	bl	801e6ee <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
 80239b4:	4b3f      	ldr	r3, [pc, #252]	; (8023ab4 <list_init+0x8ac>)
 80239b6:	681b      	ldr	r3, [r3, #0]
 80239b8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80239bc:	2000      	movs	r0, #0
 80239be:	f7f6 fb9b 	bl	801a0f8 <lv_disp_get_dpi>
 80239c2:	4603      	mov	r3, r0
 80239c4:	3328      	adds	r3, #40	; 0x28
 80239c6:	005b      	lsls	r3, r3, #1
 80239c8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80239cc:	db0d      	blt.n	80239ea <list_init+0x7e2>
 80239ce:	2000      	movs	r0, #0
 80239d0:	f7f6 fb92 	bl	801a0f8 <lv_disp_get_dpi>
 80239d4:	4603      	mov	r3, r0
 80239d6:	3328      	adds	r3, #40	; 0x28
 80239d8:	005b      	lsls	r3, r3, #1
 80239da:	4a37      	ldr	r2, [pc, #220]	; (8023ab8 <list_init+0x8b0>)
 80239dc:	fb82 1203 	smull	r1, r2, r2, r3
 80239e0:	1192      	asrs	r2, r2, #6
 80239e2:	17db      	asrs	r3, r3, #31
 80239e4:	1a9b      	subs	r3, r3, r2
 80239e6:	b21b      	sxth	r3, r3
 80239e8:	e001      	b.n	80239ee <list_init+0x7e6>
 80239ea:	f04f 33ff 	mov.w	r3, #4294967295
 80239ee:	461a      	mov	r2, r3
 80239f0:	2101      	movs	r1, #1
 80239f2:	4620      	mov	r0, r4
 80239f4:	f7fa fe7b 	bl	801e6ee <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
 80239f8:	4b2e      	ldr	r3, [pc, #184]	; (8023ab4 <list_init+0x8ac>)
 80239fa:	681b      	ldr	r3, [r3, #0]
 80239fc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023a00:	2000      	movs	r0, #0
 8023a02:	f7f6 fb79 	bl	801a0f8 <lv_disp_get_dpi>
 8023a06:	4603      	mov	r3, r0
 8023a08:	3328      	adds	r3, #40	; 0x28
 8023a0a:	005b      	lsls	r3, r3, #1
 8023a0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023a10:	db0d      	blt.n	8023a2e <list_init+0x826>
 8023a12:	2000      	movs	r0, #0
 8023a14:	f7f6 fb70 	bl	801a0f8 <lv_disp_get_dpi>
 8023a18:	4603      	mov	r3, r0
 8023a1a:	3328      	adds	r3, #40	; 0x28
 8023a1c:	005b      	lsls	r3, r3, #1
 8023a1e:	4a26      	ldr	r2, [pc, #152]	; (8023ab8 <list_init+0x8b0>)
 8023a20:	fb82 1203 	smull	r1, r2, r2, r3
 8023a24:	1192      	asrs	r2, r2, #6
 8023a26:	17db      	asrs	r3, r3, #31
 8023a28:	1a9b      	subs	r3, r3, r2
 8023a2a:	b21b      	sxth	r3, r3
 8023a2c:	e001      	b.n	8023a32 <list_init+0x82a>
 8023a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8023a32:	461a      	mov	r2, r3
 8023a34:	2120      	movs	r1, #32
 8023a36:	4620      	mov	r0, r4
 8023a38:	f7fa fe59 	bl	801e6ee <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
 8023a3c:	4b1d      	ldr	r3, [pc, #116]	; (8023ab4 <list_init+0x8ac>)
 8023a3e:	681b      	ldr	r3, [r3, #0]
 8023a40:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023a44:	2000      	movs	r0, #0
 8023a46:	f7f6 fb57 	bl	801a0f8 <lv_disp_get_dpi>
 8023a4a:	4603      	mov	r3, r0
 8023a4c:	3328      	adds	r3, #40	; 0x28
 8023a4e:	005b      	lsls	r3, r3, #1
 8023a50:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023a54:	db0d      	blt.n	8023a72 <list_init+0x86a>
 8023a56:	2000      	movs	r0, #0
 8023a58:	f7f6 fb4e 	bl	801a0f8 <lv_disp_get_dpi>
 8023a5c:	4603      	mov	r3, r0
 8023a5e:	3328      	adds	r3, #40	; 0x28
 8023a60:	005b      	lsls	r3, r3, #1
 8023a62:	4a15      	ldr	r2, [pc, #84]	; (8023ab8 <list_init+0x8b0>)
 8023a64:	fb82 1203 	smull	r1, r2, r2, r3
 8023a68:	1192      	asrs	r2, r2, #6
 8023a6a:	17db      	asrs	r3, r3, #31
 8023a6c:	1a9b      	subs	r3, r3, r2
 8023a6e:	b21b      	sxth	r3, r3
 8023a70:	e001      	b.n	8023a76 <list_init+0x86e>
 8023a72:	f04f 33ff 	mov.w	r3, #4294967295
 8023a76:	461a      	mov	r2, r3
 8023a78:	2102      	movs	r1, #2
 8023a7a:	4620      	mov	r0, r4
 8023a7c:	f7fa fe37 	bl	801e6ee <lv_style_set_transform_width>

    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 8023a80:	4b0c      	ldr	r3, [pc, #48]	; (8023ab4 <list_init+0x8ac>)
 8023a82:	681b      	ldr	r3, [r3, #0]
 8023a84:	337c      	adds	r3, #124	; 0x7c
 8023a86:	2200      	movs	r2, #0
 8023a88:	2100      	movs	r1, #0
 8023a8a:	4618      	mov	r0, r3
 8023a8c:	f7fb fa0a 	bl	801eea4 <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 8023a90:	4b08      	ldr	r3, [pc, #32]	; (8023ab4 <list_init+0x8ac>)
 8023a92:	681b      	ldr	r3, [r3, #0]
 8023a94:	337c      	adds	r3, #124	; 0x7c
 8023a96:	2229      	movs	r2, #41	; 0x29
 8023a98:	2100      	movs	r1, #0
 8023a9a:	4618      	mov	r0, r3
 8023a9c:	f7fb fa7f 	bl	801ef9e <lv_style_set_transition_prop_6>
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
 8023aa0:	4b04      	ldr	r3, [pc, #16]	; (8023ab4 <list_init+0x8ac>)
 8023aa2:	681b      	ldr	r3, [r3, #0]
 8023aa4:	337c      	adds	r3, #124	; 0x7c
 8023aa6:	2204      	movs	r2, #4
 8023aa8:	2100      	movs	r1, #0
 8023aaa:	4618      	mov	r0, r3
 8023aac:	f7fb fa5e 	bl	801ef6c <lv_style_set_transition_prop_5>
#endif
}
 8023ab0:	bf00      	nop
 8023ab2:	bd98      	pop	{r3, r4, r7, pc}
 8023ab4:	200200d0 	.word	0x200200d0
 8023ab8:	66666667 	.word	0x66666667

08023abc <ddlist_init>:

static void ddlist_init(void)
{
 8023abc:	b598      	push	{r3, r4, r7, lr}
 8023abe:	af00      	add	r7, sp, #0
#if LV_USE_DROPDOWN != 0

    style_init_reset(&styles->ddlist_page);
 8023ac0:	4b4d      	ldr	r3, [pc, #308]	; (8023bf8 <ddlist_init+0x13c>)
 8023ac2:	681b      	ldr	r3, [r3, #0]
 8023ac4:	3358      	adds	r3, #88	; 0x58
 8023ac6:	4618      	mov	r0, r3
 8023ac8:	f001 fb3e 	bl	8025148 <style_init_reset>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
 8023acc:	4b4a      	ldr	r3, [pc, #296]	; (8023bf8 <ddlist_init+0x13c>)
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8023ad4:	2000      	movs	r0, #0
 8023ad6:	f7f6 fb0f 	bl	801a0f8 <lv_disp_get_dpi>
 8023ada:	4603      	mov	r3, r0
 8023adc:	461a      	mov	r2, r3
 8023ade:	4613      	mov	r3, r2
 8023ae0:	009b      	lsls	r3, r3, #2
 8023ae2:	4413      	add	r3, r2
 8023ae4:	009b      	lsls	r3, r3, #2
 8023ae6:	3350      	adds	r3, #80	; 0x50
 8023ae8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023aec:	db11      	blt.n	8023b12 <ddlist_init+0x56>
 8023aee:	2000      	movs	r0, #0
 8023af0:	f7f6 fb02 	bl	801a0f8 <lv_disp_get_dpi>
 8023af4:	4603      	mov	r3, r0
 8023af6:	461a      	mov	r2, r3
 8023af8:	4613      	mov	r3, r2
 8023afa:	009b      	lsls	r3, r3, #2
 8023afc:	4413      	add	r3, r2
 8023afe:	009b      	lsls	r3, r3, #2
 8023b00:	3350      	adds	r3, #80	; 0x50
 8023b02:	4a3e      	ldr	r2, [pc, #248]	; (8023bfc <ddlist_init+0x140>)
 8023b04:	fb82 1203 	smull	r1, r2, r2, r3
 8023b08:	1192      	asrs	r2, r2, #6
 8023b0a:	17db      	asrs	r3, r3, #31
 8023b0c:	1ad3      	subs	r3, r2, r3
 8023b0e:	b21b      	sxth	r3, r3
 8023b10:	e000      	b.n	8023b14 <ddlist_init+0x58>
 8023b12:	2301      	movs	r3, #1
 8023b14:	461a      	mov	r2, r3
 8023b16:	2100      	movs	r1, #0
 8023b18:	4620      	mov	r0, r4
 8023b1a:	f7fb f8a9 	bl	801ec70 <lv_style_set_text_line_space>
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
 8023b1e:	4b36      	ldr	r3, [pc, #216]	; (8023bf8 <ddlist_init+0x13c>)
 8023b20:	681b      	ldr	r3, [r3, #0]
 8023b22:	3358      	adds	r3, #88	; 0x58
 8023b24:	2201      	movs	r2, #1
 8023b26:	2100      	movs	r1, #0
 8023b28:	4618      	mov	r0, r3
 8023b2a:	f7fa fdae 	bl	801e68a <lv_style_set_clip_corner>

    style_init_reset(&styles->ddlist_sel);
 8023b2e:	4b32      	ldr	r3, [pc, #200]	; (8023bf8 <ddlist_init+0x13c>)
 8023b30:	681b      	ldr	r3, [r3, #0]
 8023b32:	335c      	adds	r3, #92	; 0x5c
 8023b34:	4618      	mov	r0, r3
 8023b36:	f001 fb07 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023b3a:	4b2f      	ldr	r3, [pc, #188]	; (8023bf8 <ddlist_init+0x13c>)
 8023b3c:	681b      	ldr	r3, [r3, #0]
 8023b3e:	335c      	adds	r3, #92	; 0x5c
 8023b40:	22ff      	movs	r2, #255	; 0xff
 8023b42:	2100      	movs	r1, #0
 8023b44:	4618      	mov	r0, r3
 8023b46:	f7fa fee3 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
 8023b4a:	4b2b      	ldr	r3, [pc, #172]	; (8023bf8 <ddlist_init+0x13c>)
 8023b4c:	681b      	ldr	r3, [r3, #0]
 8023b4e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8023b52:	4b2b      	ldr	r3, [pc, #172]	; (8023c00 <ddlist_init+0x144>)
 8023b54:	68da      	ldr	r2, [r3, #12]
 8023b56:	2100      	movs	r1, #0
 8023b58:	f7fa fec3 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
 8023b5c:	4b26      	ldr	r3, [pc, #152]	; (8023bf8 <ddlist_init+0x13c>)
 8023b5e:	681b      	ldr	r3, [r3, #0]
 8023b60:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8023b64:	4b26      	ldr	r3, [pc, #152]	; (8023c00 <ddlist_init+0x144>)
 8023b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b68:	f003 0302 	and.w	r3, r3, #2
 8023b6c:	2b00      	cmp	r3, #0
 8023b6e:	d005      	beq.n	8023b7c <ddlist_init+0xc0>
 8023b70:	f640 70ff 	movw	r0, #4095	; 0xfff
 8023b74:	f7fa fd3e 	bl	801e5f4 <lv_color_hex3>
 8023b78:	4603      	mov	r3, r0
 8023b7a:	e004      	b.n	8023b86 <ddlist_init+0xca>
 8023b7c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8023b80:	f7fa fd38 	bl	801e5f4 <lv_color_hex3>
 8023b84:	4603      	mov	r3, r0
 8023b86:	461a      	mov	r2, r3
 8023b88:	2100      	movs	r1, #0
 8023b8a:	4620      	mov	r0, r4
 8023b8c:	f7fb f88c 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
 8023b90:	4b19      	ldr	r3, [pc, #100]	; (8023bf8 <ddlist_init+0x13c>)
 8023b92:	681b      	ldr	r3, [r3, #0]
 8023b94:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8023b98:	4b19      	ldr	r3, [pc, #100]	; (8023c00 <ddlist_init+0x144>)
 8023b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b9c:	f003 0302 	and.w	r3, r3, #2
 8023ba0:	2b00      	cmp	r3, #0
 8023ba2:	d004      	beq.n	8023bae <ddlist_init+0xf2>
 8023ba4:	4817      	ldr	r0, [pc, #92]	; (8023c04 <ddlist_init+0x148>)
 8023ba6:	f7fa fd11 	bl	801e5cc <lv_color_hex>
 8023baa:	4603      	mov	r3, r0
 8023bac:	e003      	b.n	8023bb6 <ddlist_init+0xfa>
 8023bae:	4816      	ldr	r0, [pc, #88]	; (8023c08 <ddlist_init+0x14c>)
 8023bb0:	f7fa fd0c 	bl	801e5cc <lv_color_hex>
 8023bb4:	4603      	mov	r3, r0
 8023bb6:	461a      	mov	r2, r3
 8023bb8:	2110      	movs	r1, #16
 8023bba:	4620      	mov	r0, r4
 8023bbc:	f7fa fe91 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 8023bc0:	4b0d      	ldr	r3, [pc, #52]	; (8023bf8 <ddlist_init+0x13c>)
 8023bc2:	681b      	ldr	r3, [r3, #0]
 8023bc4:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8023bc8:	4b0d      	ldr	r3, [pc, #52]	; (8023c00 <ddlist_init+0x144>)
 8023bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023bcc:	f003 0302 	and.w	r3, r3, #2
 8023bd0:	2b00      	cmp	r3, #0
 8023bd2:	d004      	beq.n	8023bde <ddlist_init+0x122>
 8023bd4:	480d      	ldr	r0, [pc, #52]	; (8023c0c <ddlist_init+0x150>)
 8023bd6:	f7fa fcf9 	bl	801e5cc <lv_color_hex>
 8023bda:	4603      	mov	r3, r0
 8023bdc:	e004      	b.n	8023be8 <ddlist_init+0x12c>
 8023bde:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023be2:	f7fa fcf3 	bl	801e5cc <lv_color_hex>
 8023be6:	4603      	mov	r3, r0
 8023be8:	461a      	mov	r2, r3
 8023bea:	2110      	movs	r1, #16
 8023bec:	4620      	mov	r0, r4
 8023bee:	f7fb f85b 	bl	801eca8 <lv_style_set_text_color>
#endif
}
 8023bf2:	bf00      	nop
 8023bf4:	bd98      	pop	{r3, r4, r7, pc}
 8023bf6:	bf00      	nop
 8023bf8:	200200d0 	.word	0x200200d0
 8023bfc:	66666667 	.word	0x66666667
 8023c00:	200200a4 	.word	0x200200a4
 8023c04:	00eeeeee 	.word	0x00eeeeee
 8023c08:	00494f57 	.word	0x00494f57
 8023c0c:	003b3e42 	.word	0x003b3e42

08023c10 <roller_init>:

static void roller_init(void)
{
 8023c10:	b5b0      	push	{r4, r5, r7, lr}
 8023c12:	af00      	add	r7, sp, #0
#if LV_USE_ROLLER != 0
    style_init_reset(&styles->roller_bg);
 8023c14:	4b2e      	ldr	r3, [pc, #184]	; (8023cd0 <roller_init+0xc0>)
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	338c      	adds	r3, #140	; 0x8c
 8023c1a:	4618      	mov	r0, r3
 8023c1c:	f001 fa94 	bl	8025148 <style_init_reset>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
 8023c20:	4b2b      	ldr	r3, [pc, #172]	; (8023cd0 <roller_init+0xc0>)
 8023c22:	681b      	ldr	r3, [r3, #0]
 8023c24:	f103 058c 	add.w	r5, r3, #140	; 0x8c
 8023c28:	2000      	movs	r0, #0
 8023c2a:	f7f6 fa65 	bl	801a0f8 <lv_disp_get_dpi>
 8023c2e:	4603      	mov	r3, r0
 8023c30:	461a      	mov	r2, r3
 8023c32:	4613      	mov	r3, r2
 8023c34:	009b      	lsls	r3, r3, #2
 8023c36:	4413      	add	r3, r2
 8023c38:	009a      	lsls	r2, r3, #2
 8023c3a:	4413      	add	r3, r2
 8023c3c:	3350      	adds	r3, #80	; 0x50
 8023c3e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023c42:	db12      	blt.n	8023c6a <roller_init+0x5a>
 8023c44:	2000      	movs	r0, #0
 8023c46:	f7f6 fa57 	bl	801a0f8 <lv_disp_get_dpi>
 8023c4a:	4603      	mov	r3, r0
 8023c4c:	461a      	mov	r2, r3
 8023c4e:	4613      	mov	r3, r2
 8023c50:	009b      	lsls	r3, r3, #2
 8023c52:	4413      	add	r3, r2
 8023c54:	009a      	lsls	r2, r3, #2
 8023c56:	4413      	add	r3, r2
 8023c58:	3350      	adds	r3, #80	; 0x50
 8023c5a:	4a1e      	ldr	r2, [pc, #120]	; (8023cd4 <roller_init+0xc4>)
 8023c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8023c60:	1192      	asrs	r2, r2, #6
 8023c62:	17db      	asrs	r3, r3, #31
 8023c64:	1ad3      	subs	r3, r2, r3
 8023c66:	b21b      	sxth	r3, r3
 8023c68:	e000      	b.n	8023c6c <roller_init+0x5c>
 8023c6a:	2301      	movs	r3, #1
 8023c6c:	461a      	mov	r2, r3
 8023c6e:	2100      	movs	r1, #0
 8023c70:	4628      	mov	r0, r5
 8023c72:	f7fa fffd 	bl	801ec70 <lv_style_set_text_line_space>

    style_init_reset(&styles->roller_sel);
 8023c76:	4b16      	ldr	r3, [pc, #88]	; (8023cd0 <roller_init+0xc0>)
 8023c78:	681b      	ldr	r3, [r3, #0]
 8023c7a:	3390      	adds	r3, #144	; 0x90
 8023c7c:	4618      	mov	r0, r3
 8023c7e:	f001 fa63 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023c82:	4b13      	ldr	r3, [pc, #76]	; (8023cd0 <roller_init+0xc0>)
 8023c84:	681b      	ldr	r3, [r3, #0]
 8023c86:	3390      	adds	r3, #144	; 0x90
 8023c88:	22ff      	movs	r2, #255	; 0xff
 8023c8a:	2100      	movs	r1, #0
 8023c8c:	4618      	mov	r0, r3
 8023c8e:	f7fa fe3f 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
 8023c92:	4b0f      	ldr	r3, [pc, #60]	; (8023cd0 <roller_init+0xc0>)
 8023c94:	681b      	ldr	r3, [r3, #0]
 8023c96:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8023c9a:	4b0f      	ldr	r3, [pc, #60]	; (8023cd8 <roller_init+0xc8>)
 8023c9c:	68da      	ldr	r2, [r3, #12]
 8023c9e:	2100      	movs	r1, #0
 8023ca0:	f7fa fe1f 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8023ca4:	4b0a      	ldr	r3, [pc, #40]	; (8023cd0 <roller_init+0xc0>)
 8023ca6:	681b      	ldr	r3, [r3, #0]
 8023ca8:	3390      	adds	r3, #144	; 0x90
 8023caa:	4622      	mov	r2, r4
 8023cac:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 8023cb0:	4622      	mov	r2, r4
 8023cb2:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8023cb6:	4622      	mov	r2, r4
 8023cb8:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 8023cbc:	4622      	mov	r2, r4
 8023cbe:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8023cc2:	4622      	mov	r2, r4
 8023cc4:	2100      	movs	r1, #0
 8023cc6:	4618      	mov	r0, r3
 8023cc8:	f7fa ffee 	bl	801eca8 <lv_style_set_text_color>
#endif
}
 8023ccc:	bf00      	nop
 8023cce:	bdb0      	pop	{r4, r5, r7, pc}
 8023cd0:	200200d0 	.word	0x200200d0
 8023cd4:	66666667 	.word	0x66666667
 8023cd8:	200200a4 	.word	0x200200a4

08023cdc <tabview_init>:

static void tabview_init(void)
{
 8023cdc:	b480      	push	{r7}
 8023cde:	af00      	add	r7, sp, #0
#if LV_USE_TABVIEW != 0
#endif
}
 8023ce0:	bf00      	nop
 8023ce2:	46bd      	mov	sp, r7
 8023ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ce8:	4770      	bx	lr

08023cea <tileview_init>:

static void tileview_init(void)
{
 8023cea:	b480      	push	{r7}
 8023cec:	af00      	add	r7, sp, #0
#if LV_USE_TILEVIEW != 0
#endif
}
 8023cee:	bf00      	nop
 8023cf0:	46bd      	mov	sp, r7
 8023cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cf6:	4770      	bx	lr

08023cf8 <table_init>:

static void table_init(void)
{
 8023cf8:	b598      	push	{r3, r4, r7, lr}
 8023cfa:	af00      	add	r7, sp, #0
#if LV_USE_TABLE != 0
    style_init_reset(&styles->table_cell);
 8023cfc:	4bb3      	ldr	r3, [pc, #716]	; (8023fcc <table_init+0x2d4>)
 8023cfe:	681b      	ldr	r3, [r3, #0]
 8023d00:	33a4      	adds	r3, #164	; 0xa4
 8023d02:	4618      	mov	r0, r3
 8023d04:	f001 fa20 	bl	8025148 <style_init_reset>
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8023d08:	4bb0      	ldr	r3, [pc, #704]	; (8023fcc <table_init+0x2d4>)
 8023d0a:	681b      	ldr	r3, [r3, #0]
 8023d0c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8023d10:	4baf      	ldr	r3, [pc, #700]	; (8023fd0 <table_init+0x2d8>)
 8023d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023d14:	f003 0302 	and.w	r3, r3, #2
 8023d18:	2b00      	cmp	r3, #0
 8023d1a:	d004      	beq.n	8023d26 <table_init+0x2e>
 8023d1c:	48ad      	ldr	r0, [pc, #692]	; (8023fd4 <table_init+0x2dc>)
 8023d1e:	f7fa fc55 	bl	801e5cc <lv_color_hex>
 8023d22:	4603      	mov	r3, r0
 8023d24:	e003      	b.n	8023d2e <table_init+0x36>
 8023d26:	48ac      	ldr	r0, [pc, #688]	; (8023fd8 <table_init+0x2e0>)
 8023d28:	f7fa fc50 	bl	801e5cc <lv_color_hex>
 8023d2c:	4603      	mov	r3, r0
 8023d2e:	461a      	mov	r2, r3
 8023d30:	2100      	movs	r1, #0
 8023d32:	4620      	mov	r0, r4
 8023d34:	f7fa fe4f 	bl	801e9d6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
 8023d38:	4ba4      	ldr	r3, [pc, #656]	; (8023fcc <table_init+0x2d4>)
 8023d3a:	681b      	ldr	r3, [r3, #0]
 8023d3c:	33a4      	adds	r3, #164	; 0xa4
 8023d3e:	2201      	movs	r2, #1
 8023d40:	2100      	movs	r1, #0
 8023d42:	4618      	mov	r0, r3
 8023d44:	f7fa fdfc 	bl	801e940 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
 8023d48:	4ba0      	ldr	r3, [pc, #640]	; (8023fcc <table_init+0x2d4>)
 8023d4a:	681b      	ldr	r3, [r3, #0]
 8023d4c:	33a4      	adds	r3, #164	; 0xa4
 8023d4e:	2203      	movs	r2, #3
 8023d50:	2100      	movs	r1, #0
 8023d52:	4618      	mov	r0, r3
 8023d54:	f7fa fe0d 	bl	801e972 <lv_style_set_border_side>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8023d58:	4b9c      	ldr	r3, [pc, #624]	; (8023fcc <table_init+0x2d4>)
 8023d5a:	681b      	ldr	r3, [r3, #0]
 8023d5c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8023d60:	2000      	movs	r0, #0
 8023d62:	f7f6 f9e2 	bl	801a12a <lv_disp_get_size_category>
 8023d66:	4603      	mov	r3, r0
 8023d68:	2b01      	cmp	r3, #1
 8023d6a:	d81e      	bhi.n	8023daa <table_init+0xb2>
 8023d6c:	2000      	movs	r0, #0
 8023d6e:	f7f6 f9c3 	bl	801a0f8 <lv_disp_get_dpi>
 8023d72:	4603      	mov	r3, r0
 8023d74:	461a      	mov	r2, r3
 8023d76:	4613      	mov	r3, r2
 8023d78:	011b      	lsls	r3, r3, #4
 8023d7a:	1a9b      	subs	r3, r3, r2
 8023d7c:	3350      	adds	r3, #80	; 0x50
 8023d7e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023d82:	db10      	blt.n	8023da6 <table_init+0xae>
 8023d84:	2000      	movs	r0, #0
 8023d86:	f7f6 f9b7 	bl	801a0f8 <lv_disp_get_dpi>
 8023d8a:	4603      	mov	r3, r0
 8023d8c:	461a      	mov	r2, r3
 8023d8e:	4613      	mov	r3, r2
 8023d90:	011b      	lsls	r3, r3, #4
 8023d92:	1a9b      	subs	r3, r3, r2
 8023d94:	3350      	adds	r3, #80	; 0x50
 8023d96:	4a91      	ldr	r2, [pc, #580]	; (8023fdc <table_init+0x2e4>)
 8023d98:	fb82 1203 	smull	r1, r2, r2, r3
 8023d9c:	1192      	asrs	r2, r2, #6
 8023d9e:	17db      	asrs	r3, r3, #31
 8023da0:	1ad3      	subs	r3, r2, r3
 8023da2:	b21b      	sxth	r3, r3
 8023da4:	e021      	b.n	8023dea <table_init+0xf2>
 8023da6:	2301      	movs	r3, #1
 8023da8:	e01f      	b.n	8023dea <table_init+0xf2>
 8023daa:	2000      	movs	r0, #0
 8023dac:	f7f6 f9a4 	bl	801a0f8 <lv_disp_get_dpi>
 8023db0:	4603      	mov	r3, r0
 8023db2:	461a      	mov	r2, r3
 8023db4:	4613      	mov	r3, r2
 8023db6:	011b      	lsls	r3, r3, #4
 8023db8:	1a9b      	subs	r3, r3, r2
 8023dba:	005b      	lsls	r3, r3, #1
 8023dbc:	3350      	adds	r3, #80	; 0x50
 8023dbe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023dc2:	db11      	blt.n	8023de8 <table_init+0xf0>
 8023dc4:	2000      	movs	r0, #0
 8023dc6:	f7f6 f997 	bl	801a0f8 <lv_disp_get_dpi>
 8023dca:	4603      	mov	r3, r0
 8023dcc:	461a      	mov	r2, r3
 8023dce:	4613      	mov	r3, r2
 8023dd0:	011b      	lsls	r3, r3, #4
 8023dd2:	1a9b      	subs	r3, r3, r2
 8023dd4:	005b      	lsls	r3, r3, #1
 8023dd6:	3350      	adds	r3, #80	; 0x50
 8023dd8:	4a80      	ldr	r2, [pc, #512]	; (8023fdc <table_init+0x2e4>)
 8023dda:	fb82 1203 	smull	r1, r2, r2, r3
 8023dde:	1192      	asrs	r2, r2, #6
 8023de0:	17db      	asrs	r3, r3, #31
 8023de2:	1ad3      	subs	r3, r2, r3
 8023de4:	b21b      	sxth	r3, r3
 8023de6:	e000      	b.n	8023dea <table_init+0xf2>
 8023de8:	2301      	movs	r3, #1
 8023dea:	461a      	mov	r2, r3
 8023dec:	2100      	movs	r1, #0
 8023dee:	4620      	mov	r0, r4
 8023df0:	f7fa fcc8 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8023df4:	4b75      	ldr	r3, [pc, #468]	; (8023fcc <table_init+0x2d4>)
 8023df6:	681b      	ldr	r3, [r3, #0]
 8023df8:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8023dfc:	2000      	movs	r0, #0
 8023dfe:	f7f6 f994 	bl	801a12a <lv_disp_get_size_category>
 8023e02:	4603      	mov	r3, r0
 8023e04:	2b01      	cmp	r3, #1
 8023e06:	d81e      	bhi.n	8023e46 <table_init+0x14e>
 8023e08:	2000      	movs	r0, #0
 8023e0a:	f7f6 f975 	bl	801a0f8 <lv_disp_get_dpi>
 8023e0e:	4603      	mov	r3, r0
 8023e10:	461a      	mov	r2, r3
 8023e12:	4613      	mov	r3, r2
 8023e14:	011b      	lsls	r3, r3, #4
 8023e16:	1a9b      	subs	r3, r3, r2
 8023e18:	3350      	adds	r3, #80	; 0x50
 8023e1a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023e1e:	db10      	blt.n	8023e42 <table_init+0x14a>
 8023e20:	2000      	movs	r0, #0
 8023e22:	f7f6 f969 	bl	801a0f8 <lv_disp_get_dpi>
 8023e26:	4603      	mov	r3, r0
 8023e28:	461a      	mov	r2, r3
 8023e2a:	4613      	mov	r3, r2
 8023e2c:	011b      	lsls	r3, r3, #4
 8023e2e:	1a9b      	subs	r3, r3, r2
 8023e30:	3350      	adds	r3, #80	; 0x50
 8023e32:	4a6a      	ldr	r2, [pc, #424]	; (8023fdc <table_init+0x2e4>)
 8023e34:	fb82 1203 	smull	r1, r2, r2, r3
 8023e38:	1192      	asrs	r2, r2, #6
 8023e3a:	17db      	asrs	r3, r3, #31
 8023e3c:	1ad3      	subs	r3, r2, r3
 8023e3e:	b21b      	sxth	r3, r3
 8023e40:	e021      	b.n	8023e86 <table_init+0x18e>
 8023e42:	2301      	movs	r3, #1
 8023e44:	e01f      	b.n	8023e86 <table_init+0x18e>
 8023e46:	2000      	movs	r0, #0
 8023e48:	f7f6 f956 	bl	801a0f8 <lv_disp_get_dpi>
 8023e4c:	4603      	mov	r3, r0
 8023e4e:	461a      	mov	r2, r3
 8023e50:	4613      	mov	r3, r2
 8023e52:	011b      	lsls	r3, r3, #4
 8023e54:	1a9b      	subs	r3, r3, r2
 8023e56:	005b      	lsls	r3, r3, #1
 8023e58:	3350      	adds	r3, #80	; 0x50
 8023e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023e5e:	db11      	blt.n	8023e84 <table_init+0x18c>
 8023e60:	2000      	movs	r0, #0
 8023e62:	f7f6 f949 	bl	801a0f8 <lv_disp_get_dpi>
 8023e66:	4603      	mov	r3, r0
 8023e68:	461a      	mov	r2, r3
 8023e6a:	4613      	mov	r3, r2
 8023e6c:	011b      	lsls	r3, r3, #4
 8023e6e:	1a9b      	subs	r3, r3, r2
 8023e70:	005b      	lsls	r3, r3, #1
 8023e72:	3350      	adds	r3, #80	; 0x50
 8023e74:	4a59      	ldr	r2, [pc, #356]	; (8023fdc <table_init+0x2e4>)
 8023e76:	fb82 1203 	smull	r1, r2, r2, r3
 8023e7a:	1192      	asrs	r2, r2, #6
 8023e7c:	17db      	asrs	r3, r3, #31
 8023e7e:	1ad3      	subs	r3, r2, r3
 8023e80:	b21b      	sxth	r3, r3
 8023e82:	e000      	b.n	8023e86 <table_init+0x18e>
 8023e84:	2301      	movs	r3, #1
 8023e86:	461a      	mov	r2, r3
 8023e88:	2100      	movs	r1, #0
 8023e8a:	4620      	mov	r0, r4
 8023e8c:	f7fa fc93 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8023e90:	4b4e      	ldr	r3, [pc, #312]	; (8023fcc <table_init+0x2d4>)
 8023e92:	681b      	ldr	r3, [r3, #0]
 8023e94:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8023e98:	2000      	movs	r0, #0
 8023e9a:	f7f6 f946 	bl	801a12a <lv_disp_get_size_category>
 8023e9e:	4603      	mov	r3, r0
 8023ea0:	2b01      	cmp	r3, #1
 8023ea2:	d81e      	bhi.n	8023ee2 <table_init+0x1ea>
 8023ea4:	2000      	movs	r0, #0
 8023ea6:	f7f6 f927 	bl	801a0f8 <lv_disp_get_dpi>
 8023eaa:	4603      	mov	r3, r0
 8023eac:	461a      	mov	r2, r3
 8023eae:	4613      	mov	r3, r2
 8023eb0:	011b      	lsls	r3, r3, #4
 8023eb2:	1a9b      	subs	r3, r3, r2
 8023eb4:	3350      	adds	r3, #80	; 0x50
 8023eb6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023eba:	db10      	blt.n	8023ede <table_init+0x1e6>
 8023ebc:	2000      	movs	r0, #0
 8023ebe:	f7f6 f91b 	bl	801a0f8 <lv_disp_get_dpi>
 8023ec2:	4603      	mov	r3, r0
 8023ec4:	461a      	mov	r2, r3
 8023ec6:	4613      	mov	r3, r2
 8023ec8:	011b      	lsls	r3, r3, #4
 8023eca:	1a9b      	subs	r3, r3, r2
 8023ecc:	3350      	adds	r3, #80	; 0x50
 8023ece:	4a43      	ldr	r2, [pc, #268]	; (8023fdc <table_init+0x2e4>)
 8023ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8023ed4:	1192      	asrs	r2, r2, #6
 8023ed6:	17db      	asrs	r3, r3, #31
 8023ed8:	1ad3      	subs	r3, r2, r3
 8023eda:	b21b      	sxth	r3, r3
 8023edc:	e021      	b.n	8023f22 <table_init+0x22a>
 8023ede:	2301      	movs	r3, #1
 8023ee0:	e01f      	b.n	8023f22 <table_init+0x22a>
 8023ee2:	2000      	movs	r0, #0
 8023ee4:	f7f6 f908 	bl	801a0f8 <lv_disp_get_dpi>
 8023ee8:	4603      	mov	r3, r0
 8023eea:	461a      	mov	r2, r3
 8023eec:	4613      	mov	r3, r2
 8023eee:	011b      	lsls	r3, r3, #4
 8023ef0:	1a9b      	subs	r3, r3, r2
 8023ef2:	005b      	lsls	r3, r3, #1
 8023ef4:	3350      	adds	r3, #80	; 0x50
 8023ef6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023efa:	db11      	blt.n	8023f20 <table_init+0x228>
 8023efc:	2000      	movs	r0, #0
 8023efe:	f7f6 f8fb 	bl	801a0f8 <lv_disp_get_dpi>
 8023f02:	4603      	mov	r3, r0
 8023f04:	461a      	mov	r2, r3
 8023f06:	4613      	mov	r3, r2
 8023f08:	011b      	lsls	r3, r3, #4
 8023f0a:	1a9b      	subs	r3, r3, r2
 8023f0c:	005b      	lsls	r3, r3, #1
 8023f0e:	3350      	adds	r3, #80	; 0x50
 8023f10:	4a32      	ldr	r2, [pc, #200]	; (8023fdc <table_init+0x2e4>)
 8023f12:	fb82 1203 	smull	r1, r2, r2, r3
 8023f16:	1192      	asrs	r2, r2, #6
 8023f18:	17db      	asrs	r3, r3, #31
 8023f1a:	1ad3      	subs	r3, r2, r3
 8023f1c:	b21b      	sxth	r3, r3
 8023f1e:	e000      	b.n	8023f22 <table_init+0x22a>
 8023f20:	2301      	movs	r3, #1
 8023f22:	461a      	mov	r2, r3
 8023f24:	2100      	movs	r1, #0
 8023f26:	4620      	mov	r0, r4
 8023f28:	f7fa fbfa 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8023f2c:	4b27      	ldr	r3, [pc, #156]	; (8023fcc <table_init+0x2d4>)
 8023f2e:	681b      	ldr	r3, [r3, #0]
 8023f30:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8023f34:	2000      	movs	r0, #0
 8023f36:	f7f6 f8f8 	bl	801a12a <lv_disp_get_size_category>
 8023f3a:	4603      	mov	r3, r0
 8023f3c:	2b01      	cmp	r3, #1
 8023f3e:	d81e      	bhi.n	8023f7e <table_init+0x286>
 8023f40:	2000      	movs	r0, #0
 8023f42:	f7f6 f8d9 	bl	801a0f8 <lv_disp_get_dpi>
 8023f46:	4603      	mov	r3, r0
 8023f48:	461a      	mov	r2, r3
 8023f4a:	4613      	mov	r3, r2
 8023f4c:	011b      	lsls	r3, r3, #4
 8023f4e:	1a9b      	subs	r3, r3, r2
 8023f50:	3350      	adds	r3, #80	; 0x50
 8023f52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023f56:	db10      	blt.n	8023f7a <table_init+0x282>
 8023f58:	2000      	movs	r0, #0
 8023f5a:	f7f6 f8cd 	bl	801a0f8 <lv_disp_get_dpi>
 8023f5e:	4603      	mov	r3, r0
 8023f60:	461a      	mov	r2, r3
 8023f62:	4613      	mov	r3, r2
 8023f64:	011b      	lsls	r3, r3, #4
 8023f66:	1a9b      	subs	r3, r3, r2
 8023f68:	3350      	adds	r3, #80	; 0x50
 8023f6a:	4a1c      	ldr	r2, [pc, #112]	; (8023fdc <table_init+0x2e4>)
 8023f6c:	fb82 1203 	smull	r1, r2, r2, r3
 8023f70:	1192      	asrs	r2, r2, #6
 8023f72:	17db      	asrs	r3, r3, #31
 8023f74:	1ad3      	subs	r3, r2, r3
 8023f76:	b21b      	sxth	r3, r3
 8023f78:	e021      	b.n	8023fbe <table_init+0x2c6>
 8023f7a:	2301      	movs	r3, #1
 8023f7c:	e01f      	b.n	8023fbe <table_init+0x2c6>
 8023f7e:	2000      	movs	r0, #0
 8023f80:	f7f6 f8ba 	bl	801a0f8 <lv_disp_get_dpi>
 8023f84:	4603      	mov	r3, r0
 8023f86:	461a      	mov	r2, r3
 8023f88:	4613      	mov	r3, r2
 8023f8a:	011b      	lsls	r3, r3, #4
 8023f8c:	1a9b      	subs	r3, r3, r2
 8023f8e:	005b      	lsls	r3, r3, #1
 8023f90:	3350      	adds	r3, #80	; 0x50
 8023f92:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023f96:	db11      	blt.n	8023fbc <table_init+0x2c4>
 8023f98:	2000      	movs	r0, #0
 8023f9a:	f7f6 f8ad 	bl	801a0f8 <lv_disp_get_dpi>
 8023f9e:	4603      	mov	r3, r0
 8023fa0:	461a      	mov	r2, r3
 8023fa2:	4613      	mov	r3, r2
 8023fa4:	011b      	lsls	r3, r3, #4
 8023fa6:	1a9b      	subs	r3, r3, r2
 8023fa8:	005b      	lsls	r3, r3, #1
 8023faa:	3350      	adds	r3, #80	; 0x50
 8023fac:	4a0b      	ldr	r2, [pc, #44]	; (8023fdc <table_init+0x2e4>)
 8023fae:	fb82 1203 	smull	r1, r2, r2, r3
 8023fb2:	1192      	asrs	r2, r2, #6
 8023fb4:	17db      	asrs	r3, r3, #31
 8023fb6:	1ad3      	subs	r3, r2, r3
 8023fb8:	b21b      	sxth	r3, r3
 8023fba:	e000      	b.n	8023fbe <table_init+0x2c6>
 8023fbc:	2301      	movs	r3, #1
 8023fbe:	461a      	mov	r2, r3
 8023fc0:	2100      	movs	r1, #0
 8023fc2:	4620      	mov	r0, r4
 8023fc4:	f7fa fbc5 	bl	801e752 <lv_style_set_pad_bottom>

#endif
}
 8023fc8:	bf00      	nop
 8023fca:	bd98      	pop	{r3, r4, r7, pc}
 8023fcc:	200200d0 	.word	0x200200d0
 8023fd0:	200200a4 	.word	0x200200a4
 8023fd4:	00d6dde3 	.word	0x00d6dde3
 8023fd8:	00808a97 	.word	0x00808a97
 8023fdc:	66666667 	.word	0x66666667

08023fe0 <win_init>:

static void win_init(void)
{
 8023fe0:	b480      	push	{r7}
 8023fe2:	af00      	add	r7, sp, #0
#if LV_USE_WIN != 0
#endif
}
 8023fe4:	bf00      	nop
 8023fe6:	46bd      	mov	sp, r7
 8023fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fec:	4770      	bx	lr
	...

08023ff0 <tabview_win_shared_init>:

static void tabview_win_shared_init(void)
{
 8023ff0:	b598      	push	{r3, r4, r7, lr}
 8023ff2:	af00      	add	r7, sp, #0
#if LV_USE_TABVIEW || LV_USE_WIN
    style_init_reset(&styles->tabview_btns_bg);
 8023ff4:	4bcc      	ldr	r3, [pc, #816]	; (8024328 <tabview_win_shared_init+0x338>)
 8023ff6:	681b      	ldr	r3, [r3, #0]
 8023ff8:	33ac      	adds	r3, #172	; 0xac
 8023ffa:	4618      	mov	r0, r3
 8023ffc:	f001 f8a4 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8024000:	4bc9      	ldr	r3, [pc, #804]	; (8024328 <tabview_win_shared_init+0x338>)
 8024002:	681b      	ldr	r3, [r3, #0]
 8024004:	33ac      	adds	r3, #172	; 0xac
 8024006:	22ff      	movs	r2, #255	; 0xff
 8024008:	2100      	movs	r1, #0
 802400a:	4618      	mov	r0, r3
 802400c:	f7fa fc80 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
 8024010:	4bc5      	ldr	r3, [pc, #788]	; (8024328 <tabview_win_shared_init+0x338>)
 8024012:	681b      	ldr	r3, [r3, #0]
 8024014:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8024018:	4bc4      	ldr	r3, [pc, #784]	; (802432c <tabview_win_shared_init+0x33c>)
 802401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802401c:	f003 0302 	and.w	r3, r3, #2
 8024020:	2b00      	cmp	r3, #0
 8024022:	d005      	beq.n	8024030 <tabview_win_shared_init+0x40>
 8024024:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8024028:	f7fa fad0 	bl	801e5cc <lv_color_hex>
 802402c:	4603      	mov	r3, r0
 802402e:	e003      	b.n	8024038 <tabview_win_shared_init+0x48>
 8024030:	48bf      	ldr	r0, [pc, #764]	; (8024330 <tabview_win_shared_init+0x340>)
 8024032:	f7fa facb 	bl	801e5cc <lv_color_hex>
 8024036:	4603      	mov	r3, r0
 8024038:	461a      	mov	r2, r3
 802403a:	2100      	movs	r1, #0
 802403c:	4620      	mov	r0, r4
 802403e:	f7fa fc50 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 8024042:	4bb9      	ldr	r3, [pc, #740]	; (8024328 <tabview_win_shared_init+0x338>)
 8024044:	681b      	ldr	r3, [r3, #0]
 8024046:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 802404a:	4bb8      	ldr	r3, [pc, #736]	; (802432c <tabview_win_shared_init+0x33c>)
 802404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802404e:	f003 0302 	and.w	r3, r3, #2
 8024052:	2b00      	cmp	r3, #0
 8024054:	d004      	beq.n	8024060 <tabview_win_shared_init+0x70>
 8024056:	48b7      	ldr	r0, [pc, #732]	; (8024334 <tabview_win_shared_init+0x344>)
 8024058:	f7fa fab8 	bl	801e5cc <lv_color_hex>
 802405c:	4603      	mov	r3, r0
 802405e:	e003      	b.n	8024068 <tabview_win_shared_init+0x78>
 8024060:	48b5      	ldr	r0, [pc, #724]	; (8024338 <tabview_win_shared_init+0x348>)
 8024062:	f7fa fab3 	bl	801e5cc <lv_color_hex>
 8024066:	4603      	mov	r3, r0
 8024068:	461a      	mov	r2, r3
 802406a:	2100      	movs	r1, #0
 802406c:	4620      	mov	r0, r4
 802406e:	f7fa fe1b 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
 8024072:	4bad      	ldr	r3, [pc, #692]	; (8024328 <tabview_win_shared_init+0x338>)
 8024074:	681b      	ldr	r3, [r3, #0]
 8024076:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 802407a:	48b0      	ldr	r0, [pc, #704]	; (802433c <tabview_win_shared_init+0x34c>)
 802407c:	f7fa faa6 	bl	801e5cc <lv_color_hex>
 8024080:	4603      	mov	r3, r0
 8024082:	461a      	mov	r2, r3
 8024084:	2100      	movs	r1, #0
 8024086:	4620      	mov	r0, r4
 8024088:	f7fa fef2 	bl	801ee70 <lv_style_set_image_recolor>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 802408c:	4ba6      	ldr	r3, [pc, #664]	; (8024328 <tabview_win_shared_init+0x338>)
 802408e:	681b      	ldr	r3, [r3, #0]
 8024090:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8024094:	2000      	movs	r0, #0
 8024096:	f7f6 f82f 	bl	801a0f8 <lv_disp_get_dpi>
 802409a:	4603      	mov	r3, r0
 802409c:	461a      	mov	r2, r3
 802409e:	4613      	mov	r3, r2
 80240a0:	00db      	lsls	r3, r3, #3
 80240a2:	1a9b      	subs	r3, r3, r2
 80240a4:	3350      	adds	r3, #80	; 0x50
 80240a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80240aa:	db10      	blt.n	80240ce <tabview_win_shared_init+0xde>
 80240ac:	2000      	movs	r0, #0
 80240ae:	f7f6 f823 	bl	801a0f8 <lv_disp_get_dpi>
 80240b2:	4603      	mov	r3, r0
 80240b4:	461a      	mov	r2, r3
 80240b6:	4613      	mov	r3, r2
 80240b8:	00db      	lsls	r3, r3, #3
 80240ba:	1a9b      	subs	r3, r3, r2
 80240bc:	3350      	adds	r3, #80	; 0x50
 80240be:	4aa0      	ldr	r2, [pc, #640]	; (8024340 <tabview_win_shared_init+0x350>)
 80240c0:	fb82 1203 	smull	r1, r2, r2, r3
 80240c4:	1192      	asrs	r2, r2, #6
 80240c6:	17db      	asrs	r3, r3, #31
 80240c8:	1ad3      	subs	r3, r2, r3
 80240ca:	b21b      	sxth	r3, r3
 80240cc:	e000      	b.n	80240d0 <tabview_win_shared_init+0xe0>
 80240ce:	2301      	movs	r3, #1
 80240d0:	461a      	mov	r2, r3
 80240d2:	2100      	movs	r1, #0
 80240d4:	4620      	mov	r0, r4
 80240d6:	f7fa fb23 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 80240da:	4b93      	ldr	r3, [pc, #588]	; (8024328 <tabview_win_shared_init+0x338>)
 80240dc:	681b      	ldr	r3, [r3, #0]
 80240de:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 80240e2:	2000      	movs	r0, #0
 80240e4:	f7f6 f808 	bl	801a0f8 <lv_disp_get_dpi>
 80240e8:	4603      	mov	r3, r0
 80240ea:	461a      	mov	r2, r3
 80240ec:	4613      	mov	r3, r2
 80240ee:	00db      	lsls	r3, r3, #3
 80240f0:	1a9b      	subs	r3, r3, r2
 80240f2:	3350      	adds	r3, #80	; 0x50
 80240f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80240f8:	db10      	blt.n	802411c <tabview_win_shared_init+0x12c>
 80240fa:	2000      	movs	r0, #0
 80240fc:	f7f5 fffc 	bl	801a0f8 <lv_disp_get_dpi>
 8024100:	4603      	mov	r3, r0
 8024102:	461a      	mov	r2, r3
 8024104:	4613      	mov	r3, r2
 8024106:	00db      	lsls	r3, r3, #3
 8024108:	1a9b      	subs	r3, r3, r2
 802410a:	3350      	adds	r3, #80	; 0x50
 802410c:	4a8c      	ldr	r2, [pc, #560]	; (8024340 <tabview_win_shared_init+0x350>)
 802410e:	fb82 1203 	smull	r1, r2, r2, r3
 8024112:	1192      	asrs	r2, r2, #6
 8024114:	17db      	asrs	r3, r3, #31
 8024116:	1ad3      	subs	r3, r2, r3
 8024118:	b21b      	sxth	r3, r3
 802411a:	e000      	b.n	802411e <tabview_win_shared_init+0x12e>
 802411c:	2301      	movs	r3, #1
 802411e:	461a      	mov	r2, r3
 8024120:	2100      	movs	r1, #0
 8024122:	4620      	mov	r0, r4
 8024124:	f7fa fb2e 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 8024128:	4b7f      	ldr	r3, [pc, #508]	; (8024328 <tabview_win_shared_init+0x338>)
 802412a:	681b      	ldr	r3, [r3, #0]
 802412c:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8024130:	2000      	movs	r0, #0
 8024132:	f7f5 ffe1 	bl	801a0f8 <lv_disp_get_dpi>
 8024136:	4603      	mov	r3, r0
 8024138:	461a      	mov	r2, r3
 802413a:	4613      	mov	r3, r2
 802413c:	00db      	lsls	r3, r3, #3
 802413e:	1a9b      	subs	r3, r3, r2
 8024140:	3350      	adds	r3, #80	; 0x50
 8024142:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024146:	db10      	blt.n	802416a <tabview_win_shared_init+0x17a>
 8024148:	2000      	movs	r0, #0
 802414a:	f7f5 ffd5 	bl	801a0f8 <lv_disp_get_dpi>
 802414e:	4603      	mov	r3, r0
 8024150:	461a      	mov	r2, r3
 8024152:	4613      	mov	r3, r2
 8024154:	00db      	lsls	r3, r3, #3
 8024156:	1a9b      	subs	r3, r3, r2
 8024158:	3350      	adds	r3, #80	; 0x50
 802415a:	4a79      	ldr	r2, [pc, #484]	; (8024340 <tabview_win_shared_init+0x350>)
 802415c:	fb82 1203 	smull	r1, r2, r2, r3
 8024160:	1192      	asrs	r2, r2, #6
 8024162:	17db      	asrs	r3, r3, #31
 8024164:	1ad3      	subs	r3, r2, r3
 8024166:	b21b      	sxth	r3, r3
 8024168:	e000      	b.n	802416c <tabview_win_shared_init+0x17c>
 802416a:	2301      	movs	r3, #1
 802416c:	461a      	mov	r2, r3
 802416e:	2100      	movs	r1, #0
 8024170:	4620      	mov	r0, r4
 8024172:	f7fa fb20 	bl	801e7b6 <lv_style_set_pad_right>

    style_init_reset(&styles->tabview_btns);
 8024176:	4b6c      	ldr	r3, [pc, #432]	; (8024328 <tabview_win_shared_init+0x338>)
 8024178:	681b      	ldr	r3, [r3, #0]
 802417a:	33a8      	adds	r3, #168	; 0xa8
 802417c:	4618      	mov	r0, r3
 802417e:	f000 ffe3 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
 8024182:	4b69      	ldr	r3, [pc, #420]	; (8024328 <tabview_win_shared_init+0x338>)
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	33a8      	adds	r3, #168	; 0xa8
 8024188:	227f      	movs	r2, #127	; 0x7f
 802418a:	2110      	movs	r1, #16
 802418c:	4618      	mov	r0, r3
 802418e:	f7fa fbbf 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
 8024192:	4b65      	ldr	r3, [pc, #404]	; (8024328 <tabview_win_shared_init+0x338>)
 8024194:	681b      	ldr	r3, [r3, #0]
 8024196:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 802419a:	f640 0088 	movw	r0, #2184	; 0x888
 802419e:	f7fa fa29 	bl	801e5f4 <lv_color_hex3>
 80241a2:	4603      	mov	r3, r0
 80241a4:	461a      	mov	r2, r3
 80241a6:	2110      	movs	r1, #16
 80241a8:	4620      	mov	r0, r4
 80241aa:	f7fa fb9a 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
 80241ae:	4b5e      	ldr	r3, [pc, #376]	; (8024328 <tabview_win_shared_init+0x338>)
 80241b0:	681b      	ldr	r3, [r3, #0]
 80241b2:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80241b6:	4b5d      	ldr	r3, [pc, #372]	; (802432c <tabview_win_shared_init+0x33c>)
 80241b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80241ba:	f003 0302 	and.w	r3, r3, #2
 80241be:	2b00      	cmp	r3, #0
 80241c0:	d004      	beq.n	80241cc <tabview_win_shared_init+0x1dc>
 80241c2:	485c      	ldr	r0, [pc, #368]	; (8024334 <tabview_win_shared_init+0x344>)
 80241c4:	f7fa fa02 	bl	801e5cc <lv_color_hex>
 80241c8:	4603      	mov	r3, r0
 80241ca:	e003      	b.n	80241d4 <tabview_win_shared_init+0x1e4>
 80241cc:	485a      	ldr	r0, [pc, #360]	; (8024338 <tabview_win_shared_init+0x348>)
 80241ce:	f7fa f9fd 	bl	801e5cc <lv_color_hex>
 80241d2:	4603      	mov	r3, r0
 80241d4:	461a      	mov	r2, r3
 80241d6:	2101      	movs	r1, #1
 80241d8:	4620      	mov	r0, r4
 80241da:	f7fa fd65 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 80241de:	4b52      	ldr	r3, [pc, #328]	; (8024328 <tabview_win_shared_init+0x338>)
 80241e0:	681b      	ldr	r3, [r3, #0]
 80241e2:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80241e6:	2000      	movs	r0, #0
 80241e8:	f7f5 ff86 	bl	801a0f8 <lv_disp_get_dpi>
 80241ec:	4603      	mov	r3, r0
 80241ee:	461a      	mov	r2, r3
 80241f0:	4613      	mov	r3, r2
 80241f2:	009b      	lsls	r3, r3, #2
 80241f4:	4413      	add	r3, r2
 80241f6:	009b      	lsls	r3, r3, #2
 80241f8:	3350      	adds	r3, #80	; 0x50
 80241fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80241fe:	db11      	blt.n	8024224 <tabview_win_shared_init+0x234>
 8024200:	2000      	movs	r0, #0
 8024202:	f7f5 ff79 	bl	801a0f8 <lv_disp_get_dpi>
 8024206:	4603      	mov	r3, r0
 8024208:	461a      	mov	r2, r3
 802420a:	4613      	mov	r3, r2
 802420c:	009b      	lsls	r3, r3, #2
 802420e:	4413      	add	r3, r2
 8024210:	009b      	lsls	r3, r3, #2
 8024212:	3350      	adds	r3, #80	; 0x50
 8024214:	4a4a      	ldr	r2, [pc, #296]	; (8024340 <tabview_win_shared_init+0x350>)
 8024216:	fb82 1203 	smull	r1, r2, r2, r3
 802421a:	1192      	asrs	r2, r2, #6
 802421c:	17db      	asrs	r3, r3, #31
 802421e:	1ad3      	subs	r3, r2, r3
 8024220:	b21b      	sxth	r3, r3
 8024222:	e000      	b.n	8024226 <tabview_win_shared_init+0x236>
 8024224:	2301      	movs	r3, #1
 8024226:	461a      	mov	r2, r3
 8024228:	2100      	movs	r1, #0
 802422a:	4620      	mov	r0, r4
 802422c:	f7fa fa78 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 8024230:	4b3d      	ldr	r3, [pc, #244]	; (8024328 <tabview_win_shared_init+0x338>)
 8024232:	681b      	ldr	r3, [r3, #0]
 8024234:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8024238:	2000      	movs	r0, #0
 802423a:	f7f5 ff5d 	bl	801a0f8 <lv_disp_get_dpi>
 802423e:	4603      	mov	r3, r0
 8024240:	461a      	mov	r2, r3
 8024242:	4613      	mov	r3, r2
 8024244:	009b      	lsls	r3, r3, #2
 8024246:	4413      	add	r3, r2
 8024248:	009b      	lsls	r3, r3, #2
 802424a:	3350      	adds	r3, #80	; 0x50
 802424c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024250:	db11      	blt.n	8024276 <tabview_win_shared_init+0x286>
 8024252:	2000      	movs	r0, #0
 8024254:	f7f5 ff50 	bl	801a0f8 <lv_disp_get_dpi>
 8024258:	4603      	mov	r3, r0
 802425a:	461a      	mov	r2, r3
 802425c:	4613      	mov	r3, r2
 802425e:	009b      	lsls	r3, r3, #2
 8024260:	4413      	add	r3, r2
 8024262:	009b      	lsls	r3, r3, #2
 8024264:	3350      	adds	r3, #80	; 0x50
 8024266:	4a36      	ldr	r2, [pc, #216]	; (8024340 <tabview_win_shared_init+0x350>)
 8024268:	fb82 1203 	smull	r1, r2, r2, r3
 802426c:	1192      	asrs	r2, r2, #6
 802426e:	17db      	asrs	r3, r3, #31
 8024270:	1ad3      	subs	r3, r2, r3
 8024272:	b21b      	sxth	r3, r3
 8024274:	e000      	b.n	8024278 <tabview_win_shared_init+0x288>
 8024276:	2301      	movs	r3, #1
 8024278:	461a      	mov	r2, r3
 802427a:	2100      	movs	r1, #0
 802427c:	4620      	mov	r0, r4
 802427e:	f7fa fa68 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
 8024282:	4b29      	ldr	r3, [pc, #164]	; (8024328 <tabview_win_shared_init+0x338>)
 8024284:	681b      	ldr	r3, [r3, #0]
 8024286:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 802428a:	4b28      	ldr	r3, [pc, #160]	; (802432c <tabview_win_shared_init+0x33c>)
 802428c:	68da      	ldr	r2, [r3, #12]
 802428e:	2102      	movs	r1, #2
 8024290:	f7fa fd0a 	bl	801eca8 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
 8024294:	4b24      	ldr	r3, [pc, #144]	; (8024328 <tabview_win_shared_init+0x338>)
 8024296:	681b      	ldr	r3, [r3, #0]
 8024298:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 802429c:	4b23      	ldr	r3, [pc, #140]	; (802432c <tabview_win_shared_init+0x33c>)
 802429e:	691a      	ldr	r2, [r3, #16]
 80242a0:	2104      	movs	r1, #4
 80242a2:	f7fa fd01 	bl	801eca8 <lv_style_set_text_color>

    style_init_reset(&styles->tabview_indic);
 80242a6:	4b20      	ldr	r3, [pc, #128]	; (8024328 <tabview_win_shared_init+0x338>)
 80242a8:	681b      	ldr	r3, [r3, #0]
 80242aa:	33b0      	adds	r3, #176	; 0xb0
 80242ac:	4618      	mov	r0, r3
 80242ae:	f000 ff4b 	bl	8025148 <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 80242b2:	4b1d      	ldr	r3, [pc, #116]	; (8024328 <tabview_win_shared_init+0x338>)
 80242b4:	681b      	ldr	r3, [r3, #0]
 80242b6:	33b0      	adds	r3, #176	; 0xb0
 80242b8:	22ff      	movs	r2, #255	; 0xff
 80242ba:	2100      	movs	r1, #0
 80242bc:	4618      	mov	r0, r3
 80242be:	f7fa fb27 	bl	801e910 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
 80242c2:	4b19      	ldr	r3, [pc, #100]	; (8024328 <tabview_win_shared_init+0x338>)
 80242c4:	681b      	ldr	r3, [r3, #0]
 80242c6:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 80242ca:	4b18      	ldr	r3, [pc, #96]	; (802432c <tabview_win_shared_init+0x33c>)
 80242cc:	68da      	ldr	r2, [r3, #12]
 80242ce:	2100      	movs	r1, #0
 80242d0:	f7fa fb07 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
 80242d4:	4b14      	ldr	r3, [pc, #80]	; (8024328 <tabview_win_shared_init+0x338>)
 80242d6:	681b      	ldr	r3, [r3, #0]
 80242d8:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 80242dc:	4b13      	ldr	r3, [pc, #76]	; (802432c <tabview_win_shared_init+0x33c>)
 80242de:	691a      	ldr	r2, [r3, #16]
 80242e0:	2104      	movs	r1, #4
 80242e2:	f7fa fafe 	bl	801e8e2 <lv_style_set_bg_color>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
 80242e6:	4b10      	ldr	r3, [pc, #64]	; (8024328 <tabview_win_shared_init+0x338>)
 80242e8:	681b      	ldr	r3, [r3, #0]
 80242ea:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80242ee:	2000      	movs	r0, #0
 80242f0:	f7f5 ff02 	bl	801a0f8 <lv_disp_get_dpi>
 80242f4:	4603      	mov	r3, r0
 80242f6:	461a      	mov	r2, r3
 80242f8:	4613      	mov	r3, r2
 80242fa:	009b      	lsls	r3, r3, #2
 80242fc:	4413      	add	r3, r2
 80242fe:	3350      	adds	r3, #80	; 0x50
 8024300:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024304:	db1e      	blt.n	8024344 <tabview_win_shared_init+0x354>
 8024306:	2000      	movs	r0, #0
 8024308:	f7f5 fef6 	bl	801a0f8 <lv_disp_get_dpi>
 802430c:	4603      	mov	r3, r0
 802430e:	461a      	mov	r2, r3
 8024310:	4613      	mov	r3, r2
 8024312:	009b      	lsls	r3, r3, #2
 8024314:	4413      	add	r3, r2
 8024316:	3350      	adds	r3, #80	; 0x50
 8024318:	4a09      	ldr	r2, [pc, #36]	; (8024340 <tabview_win_shared_init+0x350>)
 802431a:	fb82 1203 	smull	r1, r2, r2, r3
 802431e:	1192      	asrs	r2, r2, #6
 8024320:	17db      	asrs	r3, r3, #31
 8024322:	1ad3      	subs	r3, r2, r3
 8024324:	b21b      	sxth	r3, r3
 8024326:	e00e      	b.n	8024346 <tabview_win_shared_init+0x356>
 8024328:	200200d0 	.word	0x200200d0
 802432c:	200200a4 	.word	0x200200a4
 8024330:	00586273 	.word	0x00586273
 8024334:	003b3e42 	.word	0x003b3e42
 8024338:	00e7e9ec 	.word	0x00e7e9ec
 802433c:	00979a9f 	.word	0x00979a9f
 8024340:	66666667 	.word	0x66666667
 8024344:	2301      	movs	r3, #1
 8024346:	461a      	mov	r2, r3
 8024348:	2100      	movs	r1, #0
 802434a:	4620      	mov	r0, r4
 802434c:	f7fa f9b6 	bl	801e6bc <lv_style_set_size>
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8024350:	4bcb      	ldr	r3, [pc, #812]	; (8024680 <tabview_win_shared_init+0x690>)
 8024352:	681b      	ldr	r3, [r3, #0]
 8024354:	33b0      	adds	r3, #176	; 0xb0
 8024356:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802435a:	2100      	movs	r1, #0
 802435c:	4618      	mov	r0, r3
 802435e:	f7fa f97b 	bl	801e658 <lv_style_set_radius>

    style_init_reset(&styles->tabview_page_scrl);
 8024362:	4bc7      	ldr	r3, [pc, #796]	; (8024680 <tabview_win_shared_init+0x690>)
 8024364:	681b      	ldr	r3, [r3, #0]
 8024366:	33b4      	adds	r3, #180	; 0xb4
 8024368:	4618      	mov	r0, r3
 802436a:	f000 feed 	bl	8025148 <style_init_reset>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 802436e:	4bc4      	ldr	r3, [pc, #784]	; (8024680 <tabview_win_shared_init+0x690>)
 8024370:	681b      	ldr	r3, [r3, #0]
 8024372:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8024376:	2000      	movs	r0, #0
 8024378:	f7f5 fed7 	bl	801a12a <lv_disp_get_size_category>
 802437c:	4603      	mov	r3, r0
 802437e:	2b01      	cmp	r3, #1
 8024380:	d81e      	bhi.n	80243c0 <tabview_win_shared_init+0x3d0>
 8024382:	2000      	movs	r0, #0
 8024384:	f7f5 feb8 	bl	801a0f8 <lv_disp_get_dpi>
 8024388:	4603      	mov	r3, r0
 802438a:	461a      	mov	r2, r3
 802438c:	4613      	mov	r3, r2
 802438e:	011b      	lsls	r3, r3, #4
 8024390:	1a9b      	subs	r3, r3, r2
 8024392:	3350      	adds	r3, #80	; 0x50
 8024394:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024398:	db10      	blt.n	80243bc <tabview_win_shared_init+0x3cc>
 802439a:	2000      	movs	r0, #0
 802439c:	f7f5 feac 	bl	801a0f8 <lv_disp_get_dpi>
 80243a0:	4603      	mov	r3, r0
 80243a2:	461a      	mov	r2, r3
 80243a4:	4613      	mov	r3, r2
 80243a6:	011b      	lsls	r3, r3, #4
 80243a8:	1a9b      	subs	r3, r3, r2
 80243aa:	3350      	adds	r3, #80	; 0x50
 80243ac:	4ab5      	ldr	r2, [pc, #724]	; (8024684 <tabview_win_shared_init+0x694>)
 80243ae:	fb82 1203 	smull	r1, r2, r2, r3
 80243b2:	1192      	asrs	r2, r2, #6
 80243b4:	17db      	asrs	r3, r3, #31
 80243b6:	1ad3      	subs	r3, r2, r3
 80243b8:	b21b      	sxth	r3, r3
 80243ba:	e021      	b.n	8024400 <tabview_win_shared_init+0x410>
 80243bc:	2301      	movs	r3, #1
 80243be:	e01f      	b.n	8024400 <tabview_win_shared_init+0x410>
 80243c0:	2000      	movs	r0, #0
 80243c2:	f7f5 fe99 	bl	801a0f8 <lv_disp_get_dpi>
 80243c6:	4603      	mov	r3, r0
 80243c8:	461a      	mov	r2, r3
 80243ca:	4613      	mov	r3, r2
 80243cc:	011b      	lsls	r3, r3, #4
 80243ce:	1a9b      	subs	r3, r3, r2
 80243d0:	005b      	lsls	r3, r3, #1
 80243d2:	3350      	adds	r3, #80	; 0x50
 80243d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80243d8:	db11      	blt.n	80243fe <tabview_win_shared_init+0x40e>
 80243da:	2000      	movs	r0, #0
 80243dc:	f7f5 fe8c 	bl	801a0f8 <lv_disp_get_dpi>
 80243e0:	4603      	mov	r3, r0
 80243e2:	461a      	mov	r2, r3
 80243e4:	4613      	mov	r3, r2
 80243e6:	011b      	lsls	r3, r3, #4
 80243e8:	1a9b      	subs	r3, r3, r2
 80243ea:	005b      	lsls	r3, r3, #1
 80243ec:	3350      	adds	r3, #80	; 0x50
 80243ee:	4aa5      	ldr	r2, [pc, #660]	; (8024684 <tabview_win_shared_init+0x694>)
 80243f0:	fb82 1203 	smull	r1, r2, r2, r3
 80243f4:	1192      	asrs	r2, r2, #6
 80243f6:	17db      	asrs	r3, r3, #31
 80243f8:	1ad3      	subs	r3, r2, r3
 80243fa:	b21b      	sxth	r3, r3
 80243fc:	e000      	b.n	8024400 <tabview_win_shared_init+0x410>
 80243fe:	2301      	movs	r3, #1
 8024400:	461a      	mov	r2, r3
 8024402:	2100      	movs	r1, #0
 8024404:	4620      	mov	r0, r4
 8024406:	f7fa f98b 	bl	801e720 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 802440a:	4b9d      	ldr	r3, [pc, #628]	; (8024680 <tabview_win_shared_init+0x690>)
 802440c:	681b      	ldr	r3, [r3, #0]
 802440e:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8024412:	2000      	movs	r0, #0
 8024414:	f7f5 fe89 	bl	801a12a <lv_disp_get_size_category>
 8024418:	4603      	mov	r3, r0
 802441a:	2b01      	cmp	r3, #1
 802441c:	d81e      	bhi.n	802445c <tabview_win_shared_init+0x46c>
 802441e:	2000      	movs	r0, #0
 8024420:	f7f5 fe6a 	bl	801a0f8 <lv_disp_get_dpi>
 8024424:	4603      	mov	r3, r0
 8024426:	461a      	mov	r2, r3
 8024428:	4613      	mov	r3, r2
 802442a:	011b      	lsls	r3, r3, #4
 802442c:	1a9b      	subs	r3, r3, r2
 802442e:	3350      	adds	r3, #80	; 0x50
 8024430:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024434:	db10      	blt.n	8024458 <tabview_win_shared_init+0x468>
 8024436:	2000      	movs	r0, #0
 8024438:	f7f5 fe5e 	bl	801a0f8 <lv_disp_get_dpi>
 802443c:	4603      	mov	r3, r0
 802443e:	461a      	mov	r2, r3
 8024440:	4613      	mov	r3, r2
 8024442:	011b      	lsls	r3, r3, #4
 8024444:	1a9b      	subs	r3, r3, r2
 8024446:	3350      	adds	r3, #80	; 0x50
 8024448:	4a8e      	ldr	r2, [pc, #568]	; (8024684 <tabview_win_shared_init+0x694>)
 802444a:	fb82 1203 	smull	r1, r2, r2, r3
 802444e:	1192      	asrs	r2, r2, #6
 8024450:	17db      	asrs	r3, r3, #31
 8024452:	1ad3      	subs	r3, r2, r3
 8024454:	b21b      	sxth	r3, r3
 8024456:	e021      	b.n	802449c <tabview_win_shared_init+0x4ac>
 8024458:	2301      	movs	r3, #1
 802445a:	e01f      	b.n	802449c <tabview_win_shared_init+0x4ac>
 802445c:	2000      	movs	r0, #0
 802445e:	f7f5 fe4b 	bl	801a0f8 <lv_disp_get_dpi>
 8024462:	4603      	mov	r3, r0
 8024464:	461a      	mov	r2, r3
 8024466:	4613      	mov	r3, r2
 8024468:	011b      	lsls	r3, r3, #4
 802446a:	1a9b      	subs	r3, r3, r2
 802446c:	005b      	lsls	r3, r3, #1
 802446e:	3350      	adds	r3, #80	; 0x50
 8024470:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024474:	db11      	blt.n	802449a <tabview_win_shared_init+0x4aa>
 8024476:	2000      	movs	r0, #0
 8024478:	f7f5 fe3e 	bl	801a0f8 <lv_disp_get_dpi>
 802447c:	4603      	mov	r3, r0
 802447e:	461a      	mov	r2, r3
 8024480:	4613      	mov	r3, r2
 8024482:	011b      	lsls	r3, r3, #4
 8024484:	1a9b      	subs	r3, r3, r2
 8024486:	005b      	lsls	r3, r3, #1
 8024488:	3350      	adds	r3, #80	; 0x50
 802448a:	4a7e      	ldr	r2, [pc, #504]	; (8024684 <tabview_win_shared_init+0x694>)
 802448c:	fb82 1203 	smull	r1, r2, r2, r3
 8024490:	1192      	asrs	r2, r2, #6
 8024492:	17db      	asrs	r3, r3, #31
 8024494:	1ad3      	subs	r3, r2, r3
 8024496:	b21b      	sxth	r3, r3
 8024498:	e000      	b.n	802449c <tabview_win_shared_init+0x4ac>
 802449a:	2301      	movs	r3, #1
 802449c:	461a      	mov	r2, r3
 802449e:	2100      	movs	r1, #0
 80244a0:	4620      	mov	r0, r4
 80244a2:	f7fa f956 	bl	801e752 <lv_style_set_pad_bottom>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 80244a6:	4b76      	ldr	r3, [pc, #472]	; (8024680 <tabview_win_shared_init+0x690>)
 80244a8:	681b      	ldr	r3, [r3, #0]
 80244aa:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80244ae:	2000      	movs	r0, #0
 80244b0:	f7f5 fe3b 	bl	801a12a <lv_disp_get_size_category>
 80244b4:	4603      	mov	r3, r0
 80244b6:	2b01      	cmp	r3, #1
 80244b8:	d81e      	bhi.n	80244f8 <tabview_win_shared_init+0x508>
 80244ba:	2000      	movs	r0, #0
 80244bc:	f7f5 fe1c 	bl	801a0f8 <lv_disp_get_dpi>
 80244c0:	4603      	mov	r3, r0
 80244c2:	461a      	mov	r2, r3
 80244c4:	4613      	mov	r3, r2
 80244c6:	011b      	lsls	r3, r3, #4
 80244c8:	1a9b      	subs	r3, r3, r2
 80244ca:	3350      	adds	r3, #80	; 0x50
 80244cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80244d0:	db10      	blt.n	80244f4 <tabview_win_shared_init+0x504>
 80244d2:	2000      	movs	r0, #0
 80244d4:	f7f5 fe10 	bl	801a0f8 <lv_disp_get_dpi>
 80244d8:	4603      	mov	r3, r0
 80244da:	461a      	mov	r2, r3
 80244dc:	4613      	mov	r3, r2
 80244de:	011b      	lsls	r3, r3, #4
 80244e0:	1a9b      	subs	r3, r3, r2
 80244e2:	3350      	adds	r3, #80	; 0x50
 80244e4:	4a67      	ldr	r2, [pc, #412]	; (8024684 <tabview_win_shared_init+0x694>)
 80244e6:	fb82 1203 	smull	r1, r2, r2, r3
 80244ea:	1192      	asrs	r2, r2, #6
 80244ec:	17db      	asrs	r3, r3, #31
 80244ee:	1ad3      	subs	r3, r2, r3
 80244f0:	b21b      	sxth	r3, r3
 80244f2:	e021      	b.n	8024538 <tabview_win_shared_init+0x548>
 80244f4:	2301      	movs	r3, #1
 80244f6:	e01f      	b.n	8024538 <tabview_win_shared_init+0x548>
 80244f8:	2000      	movs	r0, #0
 80244fa:	f7f5 fdfd 	bl	801a0f8 <lv_disp_get_dpi>
 80244fe:	4603      	mov	r3, r0
 8024500:	461a      	mov	r2, r3
 8024502:	4613      	mov	r3, r2
 8024504:	011b      	lsls	r3, r3, #4
 8024506:	1a9b      	subs	r3, r3, r2
 8024508:	005b      	lsls	r3, r3, #1
 802450a:	3350      	adds	r3, #80	; 0x50
 802450c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024510:	db11      	blt.n	8024536 <tabview_win_shared_init+0x546>
 8024512:	2000      	movs	r0, #0
 8024514:	f7f5 fdf0 	bl	801a0f8 <lv_disp_get_dpi>
 8024518:	4603      	mov	r3, r0
 802451a:	461a      	mov	r2, r3
 802451c:	4613      	mov	r3, r2
 802451e:	011b      	lsls	r3, r3, #4
 8024520:	1a9b      	subs	r3, r3, r2
 8024522:	005b      	lsls	r3, r3, #1
 8024524:	3350      	adds	r3, #80	; 0x50
 8024526:	4a57      	ldr	r2, [pc, #348]	; (8024684 <tabview_win_shared_init+0x694>)
 8024528:	fb82 1203 	smull	r1, r2, r2, r3
 802452c:	1192      	asrs	r2, r2, #6
 802452e:	17db      	asrs	r3, r3, #31
 8024530:	1ad3      	subs	r3, r2, r3
 8024532:	b21b      	sxth	r3, r3
 8024534:	e000      	b.n	8024538 <tabview_win_shared_init+0x548>
 8024536:	2301      	movs	r3, #1
 8024538:	461a      	mov	r2, r3
 802453a:	2100      	movs	r1, #0
 802453c:	4620      	mov	r0, r4
 802453e:	f7fa f921 	bl	801e784 <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 8024542:	4b4f      	ldr	r3, [pc, #316]	; (8024680 <tabview_win_shared_init+0x690>)
 8024544:	681b      	ldr	r3, [r3, #0]
 8024546:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 802454a:	2000      	movs	r0, #0
 802454c:	f7f5 fded 	bl	801a12a <lv_disp_get_size_category>
 8024550:	4603      	mov	r3, r0
 8024552:	2b01      	cmp	r3, #1
 8024554:	d81e      	bhi.n	8024594 <tabview_win_shared_init+0x5a4>
 8024556:	2000      	movs	r0, #0
 8024558:	f7f5 fdce 	bl	801a0f8 <lv_disp_get_dpi>
 802455c:	4603      	mov	r3, r0
 802455e:	461a      	mov	r2, r3
 8024560:	4613      	mov	r3, r2
 8024562:	011b      	lsls	r3, r3, #4
 8024564:	1a9b      	subs	r3, r3, r2
 8024566:	3350      	adds	r3, #80	; 0x50
 8024568:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802456c:	db10      	blt.n	8024590 <tabview_win_shared_init+0x5a0>
 802456e:	2000      	movs	r0, #0
 8024570:	f7f5 fdc2 	bl	801a0f8 <lv_disp_get_dpi>
 8024574:	4603      	mov	r3, r0
 8024576:	461a      	mov	r2, r3
 8024578:	4613      	mov	r3, r2
 802457a:	011b      	lsls	r3, r3, #4
 802457c:	1a9b      	subs	r3, r3, r2
 802457e:	3350      	adds	r3, #80	; 0x50
 8024580:	4a40      	ldr	r2, [pc, #256]	; (8024684 <tabview_win_shared_init+0x694>)
 8024582:	fb82 1203 	smull	r1, r2, r2, r3
 8024586:	1192      	asrs	r2, r2, #6
 8024588:	17db      	asrs	r3, r3, #31
 802458a:	1ad3      	subs	r3, r2, r3
 802458c:	b21b      	sxth	r3, r3
 802458e:	e021      	b.n	80245d4 <tabview_win_shared_init+0x5e4>
 8024590:	2301      	movs	r3, #1
 8024592:	e01f      	b.n	80245d4 <tabview_win_shared_init+0x5e4>
 8024594:	2000      	movs	r0, #0
 8024596:	f7f5 fdaf 	bl	801a0f8 <lv_disp_get_dpi>
 802459a:	4603      	mov	r3, r0
 802459c:	461a      	mov	r2, r3
 802459e:	4613      	mov	r3, r2
 80245a0:	011b      	lsls	r3, r3, #4
 80245a2:	1a9b      	subs	r3, r3, r2
 80245a4:	005b      	lsls	r3, r3, #1
 80245a6:	3350      	adds	r3, #80	; 0x50
 80245a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80245ac:	db11      	blt.n	80245d2 <tabview_win_shared_init+0x5e2>
 80245ae:	2000      	movs	r0, #0
 80245b0:	f7f5 fda2 	bl	801a0f8 <lv_disp_get_dpi>
 80245b4:	4603      	mov	r3, r0
 80245b6:	461a      	mov	r2, r3
 80245b8:	4613      	mov	r3, r2
 80245ba:	011b      	lsls	r3, r3, #4
 80245bc:	1a9b      	subs	r3, r3, r2
 80245be:	005b      	lsls	r3, r3, #1
 80245c0:	3350      	adds	r3, #80	; 0x50
 80245c2:	4a30      	ldr	r2, [pc, #192]	; (8024684 <tabview_win_shared_init+0x694>)
 80245c4:	fb82 1203 	smull	r1, r2, r2, r3
 80245c8:	1192      	asrs	r2, r2, #6
 80245ca:	17db      	asrs	r3, r3, #31
 80245cc:	1ad3      	subs	r3, r2, r3
 80245ce:	b21b      	sxth	r3, r3
 80245d0:	e000      	b.n	80245d4 <tabview_win_shared_init+0x5e4>
 80245d2:	2301      	movs	r3, #1
 80245d4:	461a      	mov	r2, r3
 80245d6:	2100      	movs	r1, #0
 80245d8:	4620      	mov	r0, r4
 80245da:	f7fa f8ec 	bl	801e7b6 <lv_style_set_pad_right>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 80245de:	4b28      	ldr	r3, [pc, #160]	; (8024680 <tabview_win_shared_init+0x690>)
 80245e0:	681b      	ldr	r3, [r3, #0]
 80245e2:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80245e6:	2000      	movs	r0, #0
 80245e8:	f7f5 fd9f 	bl	801a12a <lv_disp_get_size_category>
 80245ec:	4603      	mov	r3, r0
 80245ee:	2b01      	cmp	r3, #1
 80245f0:	d81e      	bhi.n	8024630 <tabview_win_shared_init+0x640>
 80245f2:	2000      	movs	r0, #0
 80245f4:	f7f5 fd80 	bl	801a0f8 <lv_disp_get_dpi>
 80245f8:	4603      	mov	r3, r0
 80245fa:	461a      	mov	r2, r3
 80245fc:	4613      	mov	r3, r2
 80245fe:	011b      	lsls	r3, r3, #4
 8024600:	1a9b      	subs	r3, r3, r2
 8024602:	3350      	adds	r3, #80	; 0x50
 8024604:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024608:	db10      	blt.n	802462c <tabview_win_shared_init+0x63c>
 802460a:	2000      	movs	r0, #0
 802460c:	f7f5 fd74 	bl	801a0f8 <lv_disp_get_dpi>
 8024610:	4603      	mov	r3, r0
 8024612:	461a      	mov	r2, r3
 8024614:	4613      	mov	r3, r2
 8024616:	011b      	lsls	r3, r3, #4
 8024618:	1a9b      	subs	r3, r3, r2
 802461a:	3350      	adds	r3, #80	; 0x50
 802461c:	4a19      	ldr	r2, [pc, #100]	; (8024684 <tabview_win_shared_init+0x694>)
 802461e:	fb82 1203 	smull	r1, r2, r2, r3
 8024622:	1192      	asrs	r2, r2, #6
 8024624:	17db      	asrs	r3, r3, #31
 8024626:	1ad3      	subs	r3, r2, r3
 8024628:	b21b      	sxth	r3, r3
 802462a:	e021      	b.n	8024670 <tabview_win_shared_init+0x680>
 802462c:	2301      	movs	r3, #1
 802462e:	e01f      	b.n	8024670 <tabview_win_shared_init+0x680>
 8024630:	2000      	movs	r0, #0
 8024632:	f7f5 fd61 	bl	801a0f8 <lv_disp_get_dpi>
 8024636:	4603      	mov	r3, r0
 8024638:	461a      	mov	r2, r3
 802463a:	4613      	mov	r3, r2
 802463c:	011b      	lsls	r3, r3, #4
 802463e:	1a9b      	subs	r3, r3, r2
 8024640:	005b      	lsls	r3, r3, #1
 8024642:	3350      	adds	r3, #80	; 0x50
 8024644:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024648:	db11      	blt.n	802466e <tabview_win_shared_init+0x67e>
 802464a:	2000      	movs	r0, #0
 802464c:	f7f5 fd54 	bl	801a0f8 <lv_disp_get_dpi>
 8024650:	4603      	mov	r3, r0
 8024652:	461a      	mov	r2, r3
 8024654:	4613      	mov	r3, r2
 8024656:	011b      	lsls	r3, r3, #4
 8024658:	1a9b      	subs	r3, r3, r2
 802465a:	005b      	lsls	r3, r3, #1
 802465c:	3350      	adds	r3, #80	; 0x50
 802465e:	4a09      	ldr	r2, [pc, #36]	; (8024684 <tabview_win_shared_init+0x694>)
 8024660:	fb82 1203 	smull	r1, r2, r2, r3
 8024664:	1192      	asrs	r2, r2, #6
 8024666:	17db      	asrs	r3, r3, #31
 8024668:	1ad3      	subs	r3, r2, r3
 802466a:	b21b      	sxth	r3, r3
 802466c:	e000      	b.n	8024670 <tabview_win_shared_init+0x680>
 802466e:	2301      	movs	r3, #1
 8024670:	461a      	mov	r2, r3
 8024672:	2100      	movs	r1, #0
 8024674:	4620      	mov	r0, r4
 8024676:	f7fa f8b7 	bl	801e7e8 <lv_style_set_pad_inner>
#endif
}
 802467a:	bf00      	nop
 802467c:	bd98      	pop	{r3, r4, r7, pc}
 802467e:	bf00      	nop
 8024680:	200200d0 	.word	0x200200d0
 8024684:	66666667 	.word	0x66666667

08024688 <lv_theme_material_init>:
 * @return a pointer to reference this theme later
 */
lv_theme_t * lv_theme_material_init(lv_color_t color_primary, lv_color_t color_secondary, uint32_t flags,
                                    const lv_font_t * font_small, const lv_font_t * font_normal, const lv_font_t * font_subtitle,
                                    const lv_font_t * font_title)
{
 8024688:	b580      	push	{r7, lr}
 802468a:	b084      	sub	sp, #16
 802468c:	af00      	add	r7, sp, #0
 802468e:	60f8      	str	r0, [r7, #12]
 8024690:	60b9      	str	r1, [r7, #8]
 8024692:	607a      	str	r2, [r7, #4]
 8024694:	603b      	str	r3, [r7, #0]

    /* This trick is required only to avoid the garbage collection of
     * styles' data if LVGL is used in a binding (e.g. Micropython)
     * In a general case styles could be simple `static lv_style_t my style` variables*/
    if(!inited) {
 8024696:	4b3b      	ldr	r3, [pc, #236]	; (8024784 <lv_theme_material_init+0xfc>)
 8024698:	781b      	ldrb	r3, [r3, #0]
 802469a:	f083 0301 	eor.w	r3, r3, #1
 802469e:	b2db      	uxtb	r3, r3
 80246a0:	2b00      	cmp	r3, #0
 80246a2:	d009      	beq.n	80246b8 <lv_theme_material_init+0x30>
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
 80246a4:	20c0      	movs	r0, #192	; 0xc0
 80246a6:	f7f7 fe61 	bl	801c36c <lv_mem_alloc>
 80246aa:	4602      	mov	r2, r0
 80246ac:	4b36      	ldr	r3, [pc, #216]	; (8024788 <lv_theme_material_init+0x100>)
 80246ae:	601a      	str	r2, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
 80246b0:	4b35      	ldr	r3, [pc, #212]	; (8024788 <lv_theme_material_init+0x100>)
 80246b2:	681b      	ldr	r3, [r3, #0]
 80246b4:	4a35      	ldr	r2, [pc, #212]	; (802478c <lv_theme_material_init+0x104>)
 80246b6:	6013      	str	r3, [r2, #0]
    }

    theme.color_primary = color_primary;
 80246b8:	4a35      	ldr	r2, [pc, #212]	; (8024790 <lv_theme_material_init+0x108>)
 80246ba:	68fb      	ldr	r3, [r7, #12]
 80246bc:	60d3      	str	r3, [r2, #12]
    theme.color_secondary = color_secondary;
 80246be:	4a34      	ldr	r2, [pc, #208]	; (8024790 <lv_theme_material_init+0x108>)
 80246c0:	68bb      	ldr	r3, [r7, #8]
 80246c2:	6113      	str	r3, [r2, #16]
    theme.font_small = font_small;
 80246c4:	4a32      	ldr	r2, [pc, #200]	; (8024790 <lv_theme_material_init+0x108>)
 80246c6:	683b      	ldr	r3, [r7, #0]
 80246c8:	6153      	str	r3, [r2, #20]
    theme.font_normal = font_normal;
 80246ca:	4a31      	ldr	r2, [pc, #196]	; (8024790 <lv_theme_material_init+0x108>)
 80246cc:	69bb      	ldr	r3, [r7, #24]
 80246ce:	6193      	str	r3, [r2, #24]
    theme.font_subtitle = font_subtitle;
 80246d0:	4a2f      	ldr	r2, [pc, #188]	; (8024790 <lv_theme_material_init+0x108>)
 80246d2:	69fb      	ldr	r3, [r7, #28]
 80246d4:	61d3      	str	r3, [r2, #28]
    theme.font_title = font_title;
 80246d6:	4a2e      	ldr	r2, [pc, #184]	; (8024790 <lv_theme_material_init+0x108>)
 80246d8:	6a3b      	ldr	r3, [r7, #32]
 80246da:	6213      	str	r3, [r2, #32]
    theme.flags = flags;
 80246dc:	4a2c      	ldr	r2, [pc, #176]	; (8024790 <lv_theme_material_init+0x108>)
 80246de:	687b      	ldr	r3, [r7, #4]
 80246e0:	6253      	str	r3, [r2, #36]	; 0x24

    basic_init();
 80246e2:	f7fa fcef 	bl	801f0c4 <basic_init>
    cont_init();
 80246e6:	f7fb ff65 	bl	80205b4 <cont_init>
    btn_init();
 80246ea:	f7fb ff6a 	bl	80205c2 <btn_init>
    label_init();
 80246ee:	f7fb ff6f 	bl	80205d0 <label_init>
    bar_init();
 80246f2:	f7fb ff75 	bl	80205e0 <bar_init>
    img_init();
 80246f6:	f7fc f87d 	bl	80207f4 <img_init>
    line_init();
 80246fa:	f7fc f882 	bl	8020802 <line_init>
    led_init();
 80246fe:	f7fc f887 	bl	8020810 <led_init>
    slider_init();
 8024702:	f7fc f925 	bl	8020950 <slider_init>
    switch_init();
 8024706:	f7fc fac9 	bl	8020c9c <switch_init>
    linemeter_init();
 802470a:	f7fc fb83 	bl	8020e14 <linemeter_init>
    gauge_init();
 802470e:	f7fc fcd9 	bl	80210c4 <gauge_init>
    arc_init();
 8024712:	f7fc ffb3 	bl	802167c <arc_init>
    spinner_init();
 8024716:	f7fd f881 	bl	802181c <spinner_init>
    chart_init();
 802471a:	f7fd f887 	bl	802182c <chart_init>
    calendar_init();
 802471e:	f7fd f9dd 	bl	8021adc <calendar_init>
    cpicker_init();
 8024722:	f7fd fe63 	bl	80223ec <cpicker_init>
    checkbox_init();
 8024726:	f7fd fff9 	bl	802271c <checkbox_init>
    btnmatrix_init();
 802472a:	f7fe f9dd 	bl	8022ae8 <btnmatrix_init>
    keyboard_init();
 802472e:	f7fe f9e3 	bl	8022af8 <keyboard_init>
    msgbox_init();
 8024732:	f7fe fb19 	bl	8022d68 <msgbox_init>
    page_init();
 8024736:	f7fe fb73 	bl	8022e20 <page_init>
    textarea_init();
 802473a:	f7fe fc3f 	bl	8022fbc <textarea_init>
    spinbox_init();
 802473e:	f7fe fcdf 	bl	8023100 <spinbox_init>
    list_init();
 8024742:	f7fe fd61 	bl	8023208 <list_init>
    ddlist_init();
 8024746:	f7ff f9b9 	bl	8023abc <ddlist_init>
    roller_init();
 802474a:	f7ff fa61 	bl	8023c10 <roller_init>
    tabview_init();
 802474e:	f7ff fac5 	bl	8023cdc <tabview_init>
    tileview_init();
 8024752:	f7ff faca 	bl	8023cea <tileview_init>
    table_init();
 8024756:	f7ff facf 	bl	8023cf8 <table_init>
    win_init();
 802475a:	f7ff fc41 	bl	8023fe0 <win_init>
    tabview_win_shared_init();
 802475e:	f7ff fc47 	bl	8023ff0 <tabview_win_shared_init>

    theme.apply_xcb = NULL;
 8024762:	4b0b      	ldr	r3, [pc, #44]	; (8024790 <lv_theme_material_init+0x108>)
 8024764:	2200      	movs	r2, #0
 8024766:	605a      	str	r2, [r3, #4]
    theme.apply_cb = theme_apply;
 8024768:	4b09      	ldr	r3, [pc, #36]	; (8024790 <lv_theme_material_init+0x108>)
 802476a:	4a0a      	ldr	r2, [pc, #40]	; (8024794 <lv_theme_material_init+0x10c>)
 802476c:	601a      	str	r2, [r3, #0]

    inited = true;
 802476e:	4b05      	ldr	r3, [pc, #20]	; (8024784 <lv_theme_material_init+0xfc>)
 8024770:	2201      	movs	r2, #1
 8024772:	701a      	strb	r2, [r3, #0]

    lv_obj_report_style_mod(NULL);
 8024774:	2000      	movs	r0, #0
 8024776:	f7e1 fac7 	bl	8005d08 <lv_obj_report_style_mod>

    return &theme;
 802477a:	4b05      	ldr	r3, [pc, #20]	; (8024790 <lv_theme_material_init+0x108>)
}
 802477c:	4618      	mov	r0, r3
 802477e:	3710      	adds	r7, #16
 8024780:	46bd      	mov	sp, r7
 8024782:	bd80      	pop	{r7, pc}
 8024784:	200200d4 	.word	0x200200d4
 8024788:	20020450 	.word	0x20020450
 802478c:	200200d0 	.word	0x200200d0
 8024790:	200200a4 	.word	0x200200a4
 8024794:	08024799 	.word	0x08024799

08024798 <theme_apply>:

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 8024798:	b580      	push	{r7, lr}
 802479a:	b086      	sub	sp, #24
 802479c:	af00      	add	r7, sp, #0
 802479e:	60f8      	str	r0, [r7, #12]
 80247a0:	60b9      	str	r1, [r7, #8]
 80247a2:	4613      	mov	r3, r2
 80247a4:	80fb      	strh	r3, [r7, #6]
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
 80247a6:	88fb      	ldrh	r3, [r7, #6]
 80247a8:	2b28      	cmp	r3, #40	; 0x28
 80247aa:	f200 84c1 	bhi.w	8025130 <theme_apply+0x998>
 80247ae:	a201      	add	r2, pc, #4	; (adr r2, 80247b4 <theme_apply+0x1c>)
 80247b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80247b4:	08025131 	.word	0x08025131
 80247b8:	08024859 	.word	0x08024859
 80247bc:	08024873 	.word	0x08024873
 80247c0:	080249df 	.word	0x080249df
 80247c4:	08024963 	.word	0x08024963
 80247c8:	080248ab 	.word	0x080248ab
 80247cc:	080248c7 	.word	0x080248c7
 80247d0:	08025017 	.word	0x08025017
 80247d4:	08025131 	.word	0x08025131
 80247d8:	08024add 	.word	0x08024add
 80247dc:	08024df1 	.word	0x08024df1
 80247e0:	0802488f 	.word	0x0802488f
 80247e4:	08025079 	.word	0x08025079
 80247e8:	08024d5f 	.word	0x08024d5f
 80247ec:	080250d9 	.word	0x080250d9
 80247f0:	08025131 	.word	0x08025131
 80247f4:	08025131 	.word	0x08025131
 80247f8:	08024917 	.word	0x08024917
 80247fc:	08025131 	.word	0x08025131
 8024800:	08024b7b 	.word	0x08024b7b
 8024804:	08025131 	.word	0x08025131
 8024808:	08024d05 	.word	0x08024d05
 802480c:	08024d45 	.word	0x08024d45
 8024810:	080250b1 	.word	0x080250b1
 8024814:	08024b21 	.word	0x08024b21
 8024818:	08024b49 	.word	0x08024b49
 802481c:	08024cf9 	.word	0x08024cf9
 8024820:	08024b95 	.word	0x08024b95
 8024824:	08024cb9 	.word	0x08024cb9
 8024828:	08024a85 	.word	0x08024a85
 802482c:	08024faf 	.word	0x08024faf
 8024830:	08024fef 	.word	0x08024fef
 8024834:	08024a53 	.word	0x08024a53
 8024838:	08024995 	.word	0x08024995
 802483c:	08024e7d 	.word	0x08024e7d
 8024840:	08024bf7 	.word	0x08024bf7
 8024844:	08024c57 	.word	0x08024c57
 8024848:	08024f3f 	.word	0x08024f3f
 802484c:	08024c71 	.word	0x08024c71
 8024850:	08024ec5 	.word	0x08024ec5
 8024854:	08024f25 	.word	0x08024f25
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 8024858:	2100      	movs	r1, #0
 802485a:	68b8      	ldr	r0, [r7, #8]
 802485c:	f7e1 ffa8 	bl	80067b0 <lv_obj_get_style_list>
 8024860:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024862:	4bae      	ldr	r3, [pc, #696]	; (8024b1c <theme_apply+0x384>)
 8024864:	681b      	ldr	r3, [r3, #0]
 8024866:	4619      	mov	r1, r3
 8024868:	6938      	ldr	r0, [r7, #16]
 802486a:	f7e6 fbfd 	bl	800b068 <_lv_style_list_add_style>
            break;
 802486e:	f000 bc60 	b.w	8025132 <theme_apply+0x99a>
        case LV_THEME_OBJ:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 8024872:	2100      	movs	r1, #0
 8024874:	68b8      	ldr	r0, [r7, #8]
 8024876:	f7e1 ff9b 	bl	80067b0 <lv_obj_get_style_list>
 802487a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 802487c:	4ba7      	ldr	r3, [pc, #668]	; (8024b1c <theme_apply+0x384>)
 802487e:	681b      	ldr	r3, [r3, #0]
 8024880:	3304      	adds	r3, #4
 8024882:	4619      	mov	r1, r3
 8024884:	6938      	ldr	r0, [r7, #16]
 8024886:	f7e6 fbef 	bl	800b068 <_lv_style_list_add_style>
            break;
 802488a:	f000 bc52 	b.w	8025132 <theme_apply+0x99a>
#if LV_USE_CONT
        case LV_THEME_CONT:
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
 802488e:	2100      	movs	r1, #0
 8024890:	68b8      	ldr	r0, [r7, #8]
 8024892:	f7e1 ff8d 	bl	80067b0 <lv_obj_get_style_list>
 8024896:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024898:	4ba0      	ldr	r3, [pc, #640]	; (8024b1c <theme_apply+0x384>)
 802489a:	681b      	ldr	r3, [r3, #0]
 802489c:	3304      	adds	r3, #4
 802489e:	4619      	mov	r1, r3
 80248a0:	6938      	ldr	r0, [r7, #16]
 80248a2:	f7e6 fbe1 	bl	800b068 <_lv_style_list_add_style>
            break;
 80248a6:	f000 bc44 	b.w	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 80248aa:	2100      	movs	r1, #0
 80248ac:	68b8      	ldr	r0, [r7, #8]
 80248ae:	f7e1 ff7f 	bl	80067b0 <lv_obj_get_style_list>
 80248b2:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->btn);
 80248b4:	4b99      	ldr	r3, [pc, #612]	; (8024b1c <theme_apply+0x384>)
 80248b6:	681b      	ldr	r3, [r3, #0]
 80248b8:	3310      	adds	r3, #16
 80248ba:	4619      	mov	r1, r3
 80248bc:	6938      	ldr	r0, [r7, #16]
 80248be:	f7e6 fbd3 	bl	800b068 <_lv_style_list_add_style>
            break;
 80248c2:	f000 bc36 	b.w	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
 80248c6:	2100      	movs	r1, #0
 80248c8:	68b8      	ldr	r0, [r7, #8]
 80248ca:	f7e1 ff71 	bl	80067b0 <lv_obj_get_style_list>
 80248ce:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80248d0:	4b92      	ldr	r3, [pc, #584]	; (8024b1c <theme_apply+0x384>)
 80248d2:	681b      	ldr	r3, [r3, #0]
 80248d4:	3304      	adds	r3, #4
 80248d6:	4619      	mov	r1, r3
 80248d8:	6938      	ldr	r0, [r7, #16]
 80248da:	f7e6 fbc5 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 80248de:	4b8f      	ldr	r3, [pc, #572]	; (8024b1c <theme_apply+0x384>)
 80248e0:	681b      	ldr	r3, [r3, #0]
 80248e2:	3318      	adds	r3, #24
 80248e4:	4619      	mov	r1, r3
 80248e6:	6938      	ldr	r0, [r7, #16]
 80248e8:	f7e6 fbbe 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
 80248ec:	2101      	movs	r1, #1
 80248ee:	68b8      	ldr	r0, [r7, #8]
 80248f0:	f7e1 ff5e 	bl	80067b0 <lv_obj_get_style_list>
 80248f4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80248f6:	4b89      	ldr	r3, [pc, #548]	; (8024b1c <theme_apply+0x384>)
 80248f8:	681b      	ldr	r3, [r3, #0]
 80248fa:	3304      	adds	r3, #4
 80248fc:	4619      	mov	r1, r3
 80248fe:	6938      	ldr	r0, [r7, #16]
 8024900:	f7e6 fbb2 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8024904:	4b85      	ldr	r3, [pc, #532]	; (8024b1c <theme_apply+0x384>)
 8024906:	681b      	ldr	r3, [r3, #0]
 8024908:	3308      	adds	r3, #8
 802490a:	4619      	mov	r1, r3
 802490c:	6938      	ldr	r0, [r7, #16]
 802490e:	f7e6 fbab 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024912:	f000 bc0e 	b.w	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
 8024916:	2100      	movs	r1, #0
 8024918:	68b8      	ldr	r0, [r7, #8]
 802491a:	f7e1 ff49 	bl	80067b0 <lv_obj_get_style_list>
 802491e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024920:	4b7e      	ldr	r3, [pc, #504]	; (8024b1c <theme_apply+0x384>)
 8024922:	681b      	ldr	r3, [r3, #0]
 8024924:	4619      	mov	r1, r3
 8024926:	6938      	ldr	r0, [r7, #16]
 8024928:	f7e6 fb9e 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->kb_bg);
 802492c:	4b7b      	ldr	r3, [pc, #492]	; (8024b1c <theme_apply+0x384>)
 802492e:	681b      	ldr	r3, [r3, #0]
 8024930:	336c      	adds	r3, #108	; 0x6c
 8024932:	4619      	mov	r1, r3
 8024934:	6938      	ldr	r0, [r7, #16]
 8024936:	f7e6 fb97 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
 802493a:	2101      	movs	r1, #1
 802493c:	68b8      	ldr	r0, [r7, #8]
 802493e:	f7e1 ff37 	bl	80067b0 <lv_obj_get_style_list>
 8024942:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024944:	4b75      	ldr	r3, [pc, #468]	; (8024b1c <theme_apply+0x384>)
 8024946:	681b      	ldr	r3, [r3, #0]
 8024948:	3304      	adds	r3, #4
 802494a:	4619      	mov	r1, r3
 802494c:	6938      	ldr	r0, [r7, #16]
 802494e:	f7e6 fb8b 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8024952:	4b72      	ldr	r3, [pc, #456]	; (8024b1c <theme_apply+0x384>)
 8024954:	681b      	ldr	r3, [r3, #0]
 8024956:	3308      	adds	r3, #8
 8024958:	4619      	mov	r1, r3
 802495a:	6938      	ldr	r0, [r7, #16]
 802495c:	f7e6 fb84 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024960:	e3e7      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
 8024962:	2100      	movs	r1, #0
 8024964:	68b8      	ldr	r0, [r7, #8]
 8024966:	f7e1 ff23 	bl	80067b0 <lv_obj_get_style_list>
 802496a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_bg);
 802496c:	4b6b      	ldr	r3, [pc, #428]	; (8024b1c <theme_apply+0x384>)
 802496e:	681b      	ldr	r3, [r3, #0]
 8024970:	3328      	adds	r3, #40	; 0x28
 8024972:	4619      	mov	r1, r3
 8024974:	6938      	ldr	r0, [r7, #16]
 8024976:	f7e6 fb77 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
 802497a:	2101      	movs	r1, #1
 802497c:	68b8      	ldr	r0, [r7, #8]
 802497e:	f7e1 ff17 	bl	80067b0 <lv_obj_get_style_list>
 8024982:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_indic);
 8024984:	4b65      	ldr	r3, [pc, #404]	; (8024b1c <theme_apply+0x384>)
 8024986:	681b      	ldr	r3, [r3, #0]
 8024988:	332c      	adds	r3, #44	; 0x2c
 802498a:	4619      	mov	r1, r3
 802498c:	6938      	ldr	r0, [r7, #16]
 802498e:	f7e6 fb6b 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024992:	e3ce      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
 8024994:	2100      	movs	r1, #0
 8024996:	68b8      	ldr	r0, [r7, #8]
 8024998:	f7e1 ff0a 	bl	80067b0 <lv_obj_get_style_list>
 802499c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_bg);
 802499e:	4b5f      	ldr	r3, [pc, #380]	; (8024b1c <theme_apply+0x384>)
 80249a0:	681b      	ldr	r3, [r3, #0]
 80249a2:	3328      	adds	r3, #40	; 0x28
 80249a4:	4619      	mov	r1, r3
 80249a6:	6938      	ldr	r0, [r7, #16]
 80249a8:	f7e6 fb5e 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
 80249ac:	2101      	movs	r1, #1
 80249ae:	68b8      	ldr	r0, [r7, #8]
 80249b0:	f7e1 fefe 	bl	80067b0 <lv_obj_get_style_list>
 80249b4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_indic);
 80249b6:	4b59      	ldr	r3, [pc, #356]	; (8024b1c <theme_apply+0x384>)
 80249b8:	681b      	ldr	r3, [r3, #0]
 80249ba:	332c      	adds	r3, #44	; 0x2c
 80249bc:	4619      	mov	r1, r3
 80249be:	6938      	ldr	r0, [r7, #16]
 80249c0:	f7e6 fb52 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
 80249c4:	2102      	movs	r1, #2
 80249c6:	68b8      	ldr	r0, [r7, #8]
 80249c8:	f7e1 fef2 	bl	80067b0 <lv_obj_get_style_list>
 80249cc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sw_knob);
 80249ce:	4b53      	ldr	r3, [pc, #332]	; (8024b1c <theme_apply+0x384>)
 80249d0:	681b      	ldr	r3, [r3, #0]
 80249d2:	33a0      	adds	r3, #160	; 0xa0
 80249d4:	4619      	mov	r1, r3
 80249d6:	6938      	ldr	r0, [r7, #16]
 80249d8:	f7e6 fb46 	bl	800b068 <_lv_style_list_add_style>
            break;
 80249dc:	e3a9      	b.n	8025132 <theme_apply+0x99a>
            break;
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
 80249de:	2100      	movs	r1, #0
 80249e0:	68b8      	ldr	r0, [r7, #8]
 80249e2:	f7e1 fee5 	bl	80067b0 <lv_obj_get_style_list>
 80249e6:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80249e8:	4b4c      	ldr	r3, [pc, #304]	; (8024b1c <theme_apply+0x384>)
 80249ea:	681b      	ldr	r3, [r3, #0]
 80249ec:	3304      	adds	r3, #4
 80249ee:	4619      	mov	r1, r3
 80249f0:	6938      	ldr	r0, [r7, #16]
 80249f2:	f7e6 fb39 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_bg);
 80249f6:	4b49      	ldr	r3, [pc, #292]	; (8024b1c <theme_apply+0x384>)
 80249f8:	681b      	ldr	r3, [r3, #0]
 80249fa:	3320      	adds	r3, #32
 80249fc:	4619      	mov	r1, r3
 80249fe:	6938      	ldr	r0, [r7, #16]
 8024a00:	f7e6 fb32 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
 8024a04:	2101      	movs	r1, #1
 8024a06:	68b8      	ldr	r0, [r7, #8]
 8024a08:	f7e1 fed2 	bl	80067b0 <lv_obj_get_style_list>
 8024a0c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->arc_indic);
 8024a0e:	4b43      	ldr	r3, [pc, #268]	; (8024b1c <theme_apply+0x384>)
 8024a10:	681b      	ldr	r3, [r3, #0]
 8024a12:	331c      	adds	r3, #28
 8024a14:	4619      	mov	r1, r3
 8024a16:	6938      	ldr	r0, [r7, #16]
 8024a18:	f7e6 fb26 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
 8024a1c:	2102      	movs	r1, #2
 8024a1e:	68b8      	ldr	r0, [r7, #8]
 8024a20:	f7e1 fec6 	bl	80067b0 <lv_obj_get_style_list>
 8024a24:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024a26:	4b3d      	ldr	r3, [pc, #244]	; (8024b1c <theme_apply+0x384>)
 8024a28:	681b      	ldr	r3, [r3, #0]
 8024a2a:	3304      	adds	r3, #4
 8024a2c:	4619      	mov	r1, r3
 8024a2e:	6938      	ldr	r0, [r7, #16]
 8024a30:	f7e6 fb1a 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8024a34:	4b39      	ldr	r3, [pc, #228]	; (8024b1c <theme_apply+0x384>)
 8024a36:	681b      	ldr	r3, [r3, #0]
 8024a38:	3308      	adds	r3, #8
 8024a3a:	4619      	mov	r1, r3
 8024a3c:	6938      	ldr	r0, [r7, #16]
 8024a3e:	f7e6 fb13 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_knob);
 8024a42:	4b36      	ldr	r3, [pc, #216]	; (8024b1c <theme_apply+0x384>)
 8024a44:	681b      	ldr	r3, [r3, #0]
 8024a46:	3324      	adds	r3, #36	; 0x24
 8024a48:	4619      	mov	r1, r3
 8024a4a:	6938      	ldr	r0, [r7, #16]
 8024a4c:	f7e6 fb0c 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024a50:	e36f      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
 8024a52:	2100      	movs	r1, #0
 8024a54:	68b8      	ldr	r0, [r7, #8]
 8024a56:	f7e1 feab 	bl	80067b0 <lv_obj_get_style_list>
 8024a5a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->arc_bg);
 8024a5c:	4b2f      	ldr	r3, [pc, #188]	; (8024b1c <theme_apply+0x384>)
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	3320      	adds	r3, #32
 8024a62:	4619      	mov	r1, r3
 8024a64:	6938      	ldr	r0, [r7, #16]
 8024a66:	f7e6 faff 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
 8024a6a:	2101      	movs	r1, #1
 8024a6c:	68b8      	ldr	r0, [r7, #8]
 8024a6e:	f7e1 fe9f 	bl	80067b0 <lv_obj_get_style_list>
 8024a72:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->arc_indic);
 8024a74:	4b29      	ldr	r3, [pc, #164]	; (8024b1c <theme_apply+0x384>)
 8024a76:	681b      	ldr	r3, [r3, #0]
 8024a78:	331c      	adds	r3, #28
 8024a7a:	4619      	mov	r1, r3
 8024a7c:	6938      	ldr	r0, [r7, #16]
 8024a7e:	f7e6 faf3 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024a82:	e356      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
 8024a84:	2100      	movs	r1, #0
 8024a86:	68b8      	ldr	r0, [r7, #8]
 8024a88:	f7e1 fe92 	bl	80067b0 <lv_obj_get_style_list>
 8024a8c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_bg);
 8024a8e:	4b23      	ldr	r3, [pc, #140]	; (8024b1c <theme_apply+0x384>)
 8024a90:	681b      	ldr	r3, [r3, #0]
 8024a92:	3328      	adds	r3, #40	; 0x28
 8024a94:	4619      	mov	r1, r3
 8024a96:	6938      	ldr	r0, [r7, #16]
 8024a98:	f7e6 fae6 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->slider_bg);
 8024a9c:	4b1f      	ldr	r3, [pc, #124]	; (8024b1c <theme_apply+0x384>)
 8024a9e:	681b      	ldr	r3, [r3, #0]
 8024aa0:	3398      	adds	r3, #152	; 0x98
 8024aa2:	4619      	mov	r1, r3
 8024aa4:	6938      	ldr	r0, [r7, #16]
 8024aa6:	f7e6 fadf 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
 8024aaa:	2101      	movs	r1, #1
 8024aac:	68b8      	ldr	r0, [r7, #8]
 8024aae:	f7e1 fe7f 	bl	80067b0 <lv_obj_get_style_list>
 8024ab2:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_indic);
 8024ab4:	4b19      	ldr	r3, [pc, #100]	; (8024b1c <theme_apply+0x384>)
 8024ab6:	681b      	ldr	r3, [r3, #0]
 8024ab8:	332c      	adds	r3, #44	; 0x2c
 8024aba:	4619      	mov	r1, r3
 8024abc:	6938      	ldr	r0, [r7, #16]
 8024abe:	f7e6 fad3 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
 8024ac2:	2102      	movs	r1, #2
 8024ac4:	68b8      	ldr	r0, [r7, #8]
 8024ac6:	f7e1 fe73 	bl	80067b0 <lv_obj_get_style_list>
 8024aca:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->slider_knob);
 8024acc:	4b13      	ldr	r3, [pc, #76]	; (8024b1c <theme_apply+0x384>)
 8024ace:	681b      	ldr	r3, [r3, #0]
 8024ad0:	3394      	adds	r3, #148	; 0x94
 8024ad2:	4619      	mov	r1, r3
 8024ad4:	6938      	ldr	r0, [r7, #16]
 8024ad6:	f7e6 fac7 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024ada:	e32a      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
 8024adc:	2100      	movs	r1, #0
 8024ade:	68b8      	ldr	r0, [r7, #8]
 8024ae0:	f7e1 fe66 	bl	80067b0 <lv_obj_get_style_list>
 8024ae4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->cb_bg);
 8024ae6:	4b0d      	ldr	r3, [pc, #52]	; (8024b1c <theme_apply+0x384>)
 8024ae8:	681b      	ldr	r3, [r3, #0]
 8024aea:	3350      	adds	r3, #80	; 0x50
 8024aec:	4619      	mov	r1, r3
 8024aee:	6938      	ldr	r0, [r7, #16]
 8024af0:	f7e6 faba 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
 8024af4:	2140      	movs	r1, #64	; 0x40
 8024af6:	68b8      	ldr	r0, [r7, #8]
 8024af8:	f7e1 fe5a 	bl	80067b0 <lv_obj_get_style_list>
 8024afc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->btn);
 8024afe:	4b07      	ldr	r3, [pc, #28]	; (8024b1c <theme_apply+0x384>)
 8024b00:	681b      	ldr	r3, [r3, #0]
 8024b02:	3310      	adds	r3, #16
 8024b04:	4619      	mov	r1, r3
 8024b06:	6938      	ldr	r0, [r7, #16]
 8024b08:	f7e6 faae 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->cb_bullet);
 8024b0c:	4b03      	ldr	r3, [pc, #12]	; (8024b1c <theme_apply+0x384>)
 8024b0e:	681b      	ldr	r3, [r3, #0]
 8024b10:	3354      	adds	r3, #84	; 0x54
 8024b12:	4619      	mov	r1, r3
 8024b14:	6938      	ldr	r0, [r7, #16]
 8024b16:	f7e6 faa7 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024b1a:	e30a      	b.n	8025132 <theme_apply+0x99a>
 8024b1c:	200200d0 	.word	0x200200d0
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
 8024b20:	2100      	movs	r1, #0
 8024b22:	68b8      	ldr	r0, [r7, #8]
 8024b24:	f7e1 fe44 	bl	80067b0 <lv_obj_get_style_list>
 8024b28:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024b2a:	4bb0      	ldr	r3, [pc, #704]	; (8024dec <theme_apply+0x654>)
 8024b2c:	681b      	ldr	r3, [r3, #0]
 8024b2e:	3304      	adds	r3, #4
 8024b30:	4619      	mov	r1, r3
 8024b32:	6938      	ldr	r0, [r7, #16]
 8024b34:	f7e6 fa98 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->mbox_bg);
 8024b38:	4bac      	ldr	r3, [pc, #688]	; (8024dec <theme_apply+0x654>)
 8024b3a:	681b      	ldr	r3, [r3, #0]
 8024b3c:	3380      	adds	r3, #128	; 0x80
 8024b3e:	4619      	mov	r1, r3
 8024b40:	6938      	ldr	r0, [r7, #16]
 8024b42:	f7e6 fa91 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024b46:	e2f4      	b.n	8025132 <theme_apply+0x99a>

        case LV_THEME_MSGBOX_BTNS:
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
 8024b48:	2140      	movs	r1, #64	; 0x40
 8024b4a:	68b8      	ldr	r0, [r7, #8]
 8024b4c:	f7e1 fe30 	bl	80067b0 <lv_obj_get_style_list>
 8024b50:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->pad_small);
 8024b52:	4ba6      	ldr	r3, [pc, #664]	; (8024dec <theme_apply+0x654>)
 8024b54:	681b      	ldr	r3, [r3, #0]
 8024b56:	3318      	adds	r3, #24
 8024b58:	4619      	mov	r1, r3
 8024b5a:	6938      	ldr	r0, [r7, #16]
 8024b5c:	f7e6 fa84 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
 8024b60:	2141      	movs	r1, #65	; 0x41
 8024b62:	68b8      	ldr	r0, [r7, #8]
 8024b64:	f7e1 fe24 	bl	80067b0 <lv_obj_get_style_list>
 8024b68:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->btn);
 8024b6a:	4ba0      	ldr	r3, [pc, #640]	; (8024dec <theme_apply+0x654>)
 8024b6c:	681b      	ldr	r3, [r3, #0]
 8024b6e:	3310      	adds	r3, #16
 8024b70:	4619      	mov	r1, r3
 8024b72:	6938      	ldr	r0, [r7, #16]
 8024b74:	f7e6 fa78 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024b78:	e2db      	b.n	8025132 <theme_apply+0x99a>

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
 8024b7a:	2100      	movs	r1, #0
 8024b7c:	68b8      	ldr	r0, [r7, #8]
 8024b7e:	f7e1 fe17 	bl	80067b0 <lv_obj_get_style_list>
 8024b82:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->led);
 8024b84:	4b99      	ldr	r3, [pc, #612]	; (8024dec <theme_apply+0x654>)
 8024b86:	681b      	ldr	r3, [r3, #0]
 8024b88:	3370      	adds	r3, #112	; 0x70
 8024b8a:	4619      	mov	r1, r3
 8024b8c:	6938      	ldr	r0, [r7, #16]
 8024b8e:	f7e6 fa6b 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024b92:	e2ce      	b.n	8025132 <theme_apply+0x99a>
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
 8024b94:	2100      	movs	r1, #0
 8024b96:	68b8      	ldr	r0, [r7, #8]
 8024b98:	f7e1 fe0a 	bl	80067b0 <lv_obj_get_style_list>
 8024b9c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024b9e:	4b93      	ldr	r3, [pc, #588]	; (8024dec <theme_apply+0x654>)
 8024ba0:	681b      	ldr	r3, [r3, #0]
 8024ba2:	3304      	adds	r3, #4
 8024ba4:	4619      	mov	r1, r3
 8024ba6:	6938      	ldr	r0, [r7, #16]
 8024ba8:	f7e6 fa5e 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 8024bac:	2140      	movs	r1, #64	; 0x40
 8024bae:	68b8      	ldr	r0, [r7, #8]
 8024bb0:	f7e1 fdfe 	bl	80067b0 <lv_obj_get_style_list>
 8024bb4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->pad_inner);
 8024bb6:	4b8d      	ldr	r3, [pc, #564]	; (8024dec <theme_apply+0x654>)
 8024bb8:	681b      	ldr	r3, [r3, #0]
 8024bba:	3314      	adds	r3, #20
 8024bbc:	4619      	mov	r1, r3
 8024bbe:	6938      	ldr	r0, [r7, #16]
 8024bc0:	f7e6 fa52 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
 8024bc4:	2101      	movs	r1, #1
 8024bc6:	68b8      	ldr	r0, [r7, #8]
 8024bc8:	f7e1 fdf2 	bl	80067b0 <lv_obj_get_style_list>
 8024bcc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8024bce:	4b87      	ldr	r3, [pc, #540]	; (8024dec <theme_apply+0x654>)
 8024bd0:	681b      	ldr	r3, [r3, #0]
 8024bd2:	3384      	adds	r3, #132	; 0x84
 8024bd4:	4619      	mov	r1, r3
 8024bd6:	6938      	ldr	r0, [r7, #16]
 8024bd8:	f7e6 fa46 	bl	800b068 <_lv_style_list_add_style>

#if LV_USE_ANIMATION
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
 8024bdc:	2102      	movs	r1, #2
 8024bde:	68b8      	ldr	r0, [r7, #8]
 8024be0:	f7e1 fde6 	bl	80067b0 <lv_obj_get_style_list>
 8024be4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->edge_flash);
 8024be6:	4b81      	ldr	r3, [pc, #516]	; (8024dec <theme_apply+0x654>)
 8024be8:	681b      	ldr	r3, [r3, #0]
 8024bea:	3388      	adds	r3, #136	; 0x88
 8024bec:	4619      	mov	r1, r3
 8024bee:	6938      	ldr	r0, [r7, #16]
 8024bf0:	f7e6 fa3a 	bl	800b068 <_lv_style_list_add_style>
#endif
            break;
 8024bf4:	e29d      	b.n	8025132 <theme_apply+0x99a>
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
 8024bf6:	2100      	movs	r1, #0
 8024bf8:	68b8      	ldr	r0, [r7, #8]
 8024bfa:	f7e1 fdd9 	bl	80067b0 <lv_obj_get_style_list>
 8024bfe:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024c00:	4b7a      	ldr	r3, [pc, #488]	; (8024dec <theme_apply+0x654>)
 8024c02:	681b      	ldr	r3, [r3, #0]
 8024c04:	4619      	mov	r1, r3
 8024c06:	6938      	ldr	r0, [r7, #16]
 8024c08:	f7e6 fa2e 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
 8024c0c:	2141      	movs	r1, #65	; 0x41
 8024c0e:	68b8      	ldr	r0, [r7, #8]
 8024c10:	f7e1 fdce 	bl	80067b0 <lv_obj_get_style_list>
 8024c14:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
 8024c16:	4b75      	ldr	r3, [pc, #468]	; (8024dec <theme_apply+0x654>)
 8024c18:	681b      	ldr	r3, [r3, #0]
 8024c1a:	33ac      	adds	r3, #172	; 0xac
 8024c1c:	4619      	mov	r1, r3
 8024c1e:	6938      	ldr	r0, [r7, #16]
 8024c20:	f7e6 fa22 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
 8024c24:	2143      	movs	r1, #67	; 0x43
 8024c26:	68b8      	ldr	r0, [r7, #8]
 8024c28:	f7e1 fdc2 	bl	80067b0 <lv_obj_get_style_list>
 8024c2c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_indic);
 8024c2e:	4b6f      	ldr	r3, [pc, #444]	; (8024dec <theme_apply+0x654>)
 8024c30:	681b      	ldr	r3, [r3, #0]
 8024c32:	33b0      	adds	r3, #176	; 0xb0
 8024c34:	4619      	mov	r1, r3
 8024c36:	6938      	ldr	r0, [r7, #16]
 8024c38:	f7e6 fa16 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
 8024c3c:	2142      	movs	r1, #66	; 0x42
 8024c3e:	68b8      	ldr	r0, [r7, #8]
 8024c40:	f7e1 fdb6 	bl	80067b0 <lv_obj_get_style_list>
 8024c44:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns);
 8024c46:	4b69      	ldr	r3, [pc, #420]	; (8024dec <theme_apply+0x654>)
 8024c48:	681b      	ldr	r3, [r3, #0]
 8024c4a:	33a8      	adds	r3, #168	; 0xa8
 8024c4c:	4619      	mov	r1, r3
 8024c4e:	6938      	ldr	r0, [r7, #16]
 8024c50:	f7e6 fa0a 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024c54:	e26d      	b.n	8025132 <theme_apply+0x99a>

        case LV_THEME_TABVIEW_PAGE:
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 8024c56:	2140      	movs	r1, #64	; 0x40
 8024c58:	68b8      	ldr	r0, [r7, #8]
 8024c5a:	f7e1 fda9 	bl	80067b0 <lv_obj_get_style_list>
 8024c5e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
 8024c60:	4b62      	ldr	r3, [pc, #392]	; (8024dec <theme_apply+0x654>)
 8024c62:	681b      	ldr	r3, [r3, #0]
 8024c64:	33b4      	adds	r3, #180	; 0xb4
 8024c66:	4619      	mov	r1, r3
 8024c68:	6938      	ldr	r0, [r7, #16]
 8024c6a:	f7e6 f9fd 	bl	800b068 <_lv_style_list_add_style>

            break;
 8024c6e:	e260      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
 8024c70:	2100      	movs	r1, #0
 8024c72:	68b8      	ldr	r0, [r7, #8]
 8024c74:	f7e1 fd9c 	bl	80067b0 <lv_obj_get_style_list>
 8024c78:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024c7a:	4b5c      	ldr	r3, [pc, #368]	; (8024dec <theme_apply+0x654>)
 8024c7c:	681b      	ldr	r3, [r3, #0]
 8024c7e:	4619      	mov	r1, r3
 8024c80:	6938      	ldr	r0, [r7, #16]
 8024c82:	f7e6 f9f1 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
 8024c86:	2101      	movs	r1, #1
 8024c88:	68b8      	ldr	r0, [r7, #8]
 8024c8a:	f7e1 fd91 	bl	80067b0 <lv_obj_get_style_list>
 8024c8e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8024c90:	4b56      	ldr	r3, [pc, #344]	; (8024dec <theme_apply+0x654>)
 8024c92:	681b      	ldr	r3, [r3, #0]
 8024c94:	3384      	adds	r3, #132	; 0x84
 8024c96:	4619      	mov	r1, r3
 8024c98:	6938      	ldr	r0, [r7, #16]
 8024c9a:	f7e6 f9e5 	bl	800b068 <_lv_style_list_add_style>

#if LV_USE_ANIMATION
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
 8024c9e:	2102      	movs	r1, #2
 8024ca0:	68b8      	ldr	r0, [r7, #8]
 8024ca2:	f7e1 fd85 	bl	80067b0 <lv_obj_get_style_list>
 8024ca6:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->edge_flash);
 8024ca8:	4b50      	ldr	r3, [pc, #320]	; (8024dec <theme_apply+0x654>)
 8024caa:	681b      	ldr	r3, [r3, #0]
 8024cac:	3388      	adds	r3, #136	; 0x88
 8024cae:	4619      	mov	r1, r3
 8024cb0:	6938      	ldr	r0, [r7, #16]
 8024cb2:	f7e6 f9d9 	bl	800b068 <_lv_style_list_add_style>
#endif
            break;
 8024cb6:	e23c      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
 8024cb8:	2100      	movs	r1, #0
 8024cba:	68b8      	ldr	r0, [r7, #8]
 8024cbc:	f7e1 fd78 	bl	80067b0 <lv_obj_get_style_list>
 8024cc0:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024cc2:	4b4a      	ldr	r3, [pc, #296]	; (8024dec <theme_apply+0x654>)
 8024cc4:	681b      	ldr	r3, [r3, #0]
 8024cc6:	3304      	adds	r3, #4
 8024cc8:	4619      	mov	r1, r3
 8024cca:	6938      	ldr	r0, [r7, #16]
 8024ccc:	f7e6 f9cc 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->roller_bg);
 8024cd0:	4b46      	ldr	r3, [pc, #280]	; (8024dec <theme_apply+0x654>)
 8024cd2:	681b      	ldr	r3, [r3, #0]
 8024cd4:	338c      	adds	r3, #140	; 0x8c
 8024cd6:	4619      	mov	r1, r3
 8024cd8:	6938      	ldr	r0, [r7, #16]
 8024cda:	f7e6 f9c5 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
 8024cde:	2103      	movs	r1, #3
 8024ce0:	68b8      	ldr	r0, [r7, #8]
 8024ce2:	f7e1 fd65 	bl	80067b0 <lv_obj_get_style_list>
 8024ce6:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->roller_sel);
 8024ce8:	4b40      	ldr	r3, [pc, #256]	; (8024dec <theme_apply+0x654>)
 8024cea:	681b      	ldr	r3, [r3, #0]
 8024cec:	3390      	adds	r3, #144	; 0x90
 8024cee:	4619      	mov	r1, r3
 8024cf0:	6938      	ldr	r0, [r7, #16]
 8024cf2:	f7e6 f9b9 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024cf6:	e21c      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
 8024cf8:	2100      	movs	r1, #0
 8024cfa:	68b8      	ldr	r0, [r7, #8]
 8024cfc:	f7e1 fd58 	bl	80067b0 <lv_obj_get_style_list>
 8024d00:	6138      	str	r0, [r7, #16]
            break;
 8024d02:	e216      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
 8024d04:	2100      	movs	r1, #0
 8024d06:	68b8      	ldr	r0, [r7, #8]
 8024d08:	f7e1 fd52 	bl	80067b0 <lv_obj_get_style_list>
 8024d0c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024d0e:	4b37      	ldr	r3, [pc, #220]	; (8024dec <theme_apply+0x654>)
 8024d10:	681b      	ldr	r3, [r3, #0]
 8024d12:	3304      	adds	r3, #4
 8024d14:	4619      	mov	r1, r3
 8024d16:	6938      	ldr	r0, [r7, #16]
 8024d18:	f7e6 f9a6 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->list_bg);
 8024d1c:	4b33      	ldr	r3, [pc, #204]	; (8024dec <theme_apply+0x654>)
 8024d1e:	681b      	ldr	r3, [r3, #0]
 8024d20:	3378      	adds	r3, #120	; 0x78
 8024d22:	4619      	mov	r1, r3
 8024d24:	6938      	ldr	r0, [r7, #16]
 8024d26:	f7e6 f99f 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
 8024d2a:	2101      	movs	r1, #1
 8024d2c:	68b8      	ldr	r0, [r7, #8]
 8024d2e:	f7e1 fd3f 	bl	80067b0 <lv_obj_get_style_list>
 8024d32:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8024d34:	4b2d      	ldr	r3, [pc, #180]	; (8024dec <theme_apply+0x654>)
 8024d36:	681b      	ldr	r3, [r3, #0]
 8024d38:	3384      	adds	r3, #132	; 0x84
 8024d3a:	4619      	mov	r1, r3
 8024d3c:	6938      	ldr	r0, [r7, #16]
 8024d3e:	f7e6 f993 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024d42:	e1f6      	b.n	8025132 <theme_apply+0x99a>

        case LV_THEME_LIST_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8024d44:	2100      	movs	r1, #0
 8024d46:	68b8      	ldr	r0, [r7, #8]
 8024d48:	f7e1 fd32 	bl	80067b0 <lv_obj_get_style_list>
 8024d4c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->list_btn);
 8024d4e:	4b27      	ldr	r3, [pc, #156]	; (8024dec <theme_apply+0x654>)
 8024d50:	681b      	ldr	r3, [r3, #0]
 8024d52:	337c      	adds	r3, #124	; 0x7c
 8024d54:	4619      	mov	r1, r3
 8024d56:	6938      	ldr	r0, [r7, #16]
 8024d58:	f7e6 f986 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024d5c:	e1e9      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
 8024d5e:	2100      	movs	r1, #0
 8024d60:	68b8      	ldr	r0, [r7, #8]
 8024d62:	f7e1 fd25 	bl	80067b0 <lv_obj_get_style_list>
 8024d66:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024d68:	4b20      	ldr	r3, [pc, #128]	; (8024dec <theme_apply+0x654>)
 8024d6a:	681b      	ldr	r3, [r3, #0]
 8024d6c:	3304      	adds	r3, #4
 8024d6e:	4619      	mov	r1, r3
 8024d70:	6938      	ldr	r0, [r7, #16]
 8024d72:	f7e6 f979 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8024d76:	4b1d      	ldr	r3, [pc, #116]	; (8024dec <theme_apply+0x654>)
 8024d78:	681b      	ldr	r3, [r3, #0]
 8024d7a:	3308      	adds	r3, #8
 8024d7c:	4619      	mov	r1, r3
 8024d7e:	6938      	ldr	r0, [r7, #16]
 8024d80:	f7e6 f972 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8024d84:	4b19      	ldr	r3, [pc, #100]	; (8024dec <theme_apply+0x654>)
 8024d86:	681b      	ldr	r3, [r3, #0]
 8024d88:	3318      	adds	r3, #24
 8024d8a:	4619      	mov	r1, r3
 8024d8c:	6938      	ldr	r0, [r7, #16]
 8024d8e:	f7e6 f96b 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
 8024d92:	2140      	movs	r1, #64	; 0x40
 8024d94:	68b8      	ldr	r0, [r7, #8]
 8024d96:	f7e1 fd0b 	bl	80067b0 <lv_obj_get_style_list>
 8024d9a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024d9c:	4b13      	ldr	r3, [pc, #76]	; (8024dec <theme_apply+0x654>)
 8024d9e:	681b      	ldr	r3, [r3, #0]
 8024da0:	3304      	adds	r3, #4
 8024da2:	4619      	mov	r1, r3
 8024da4:	6938      	ldr	r0, [r7, #16]
 8024da6:	f7e6 f95f 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->ddlist_page);
 8024daa:	4b10      	ldr	r3, [pc, #64]	; (8024dec <theme_apply+0x654>)
 8024dac:	681b      	ldr	r3, [r3, #0]
 8024dae:	3358      	adds	r3, #88	; 0x58
 8024db0:	4619      	mov	r1, r3
 8024db2:	6938      	ldr	r0, [r7, #16]
 8024db4:	f7e6 f958 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 8024db8:	2141      	movs	r1, #65	; 0x41
 8024dba:	68b8      	ldr	r0, [r7, #8]
 8024dbc:	f7e1 fcf8 	bl	80067b0 <lv_obj_get_style_list>
 8024dc0:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8024dc2:	4b0a      	ldr	r3, [pc, #40]	; (8024dec <theme_apply+0x654>)
 8024dc4:	681b      	ldr	r3, [r3, #0]
 8024dc6:	3384      	adds	r3, #132	; 0x84
 8024dc8:	4619      	mov	r1, r3
 8024dca:	6938      	ldr	r0, [r7, #16]
 8024dcc:	f7e6 f94c 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
 8024dd0:	2142      	movs	r1, #66	; 0x42
 8024dd2:	68b8      	ldr	r0, [r7, #8]
 8024dd4:	f7e1 fcec 	bl	80067b0 <lv_obj_get_style_list>
 8024dd8:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->ddlist_sel);
 8024dda:	4b04      	ldr	r3, [pc, #16]	; (8024dec <theme_apply+0x654>)
 8024ddc:	681b      	ldr	r3, [r3, #0]
 8024dde:	335c      	adds	r3, #92	; 0x5c
 8024de0:	4619      	mov	r1, r3
 8024de2:	6938      	ldr	r0, [r7, #16]
 8024de4:	f7e6 f940 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024de8:	e1a3      	b.n	8025132 <theme_apply+0x99a>
 8024dea:	bf00      	nop
 8024dec:	200200d0 	.word	0x200200d0
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
 8024df0:	2100      	movs	r1, #0
 8024df2:	68b8      	ldr	r0, [r7, #8]
 8024df4:	f7e1 fcdc 	bl	80067b0 <lv_obj_get_style_list>
 8024df8:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024dfa:	4bac      	ldr	r3, [pc, #688]	; (80250ac <theme_apply+0x914>)
 8024dfc:	681b      	ldr	r3, [r3, #0]
 8024dfe:	3304      	adds	r3, #4
 8024e00:	4619      	mov	r1, r3
 8024e02:	6938      	ldr	r0, [r7, #16]
 8024e04:	f7e6 f930 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_bg);
 8024e08:	4ba8      	ldr	r3, [pc, #672]	; (80250ac <theme_apply+0x914>)
 8024e0a:	681b      	ldr	r3, [r3, #0]
 8024e0c:	3344      	adds	r3, #68	; 0x44
 8024e0e:	4619      	mov	r1, r3
 8024e10:	6938      	ldr	r0, [r7, #16]
 8024e12:	f7e6 f929 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8024e16:	4ba5      	ldr	r3, [pc, #660]	; (80250ac <theme_apply+0x914>)
 8024e18:	681b      	ldr	r3, [r3, #0]
 8024e1a:	3318      	adds	r3, #24
 8024e1c:	4619      	mov	r1, r3
 8024e1e:	6938      	ldr	r0, [r7, #16]
 8024e20:	f7e6 f922 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
 8024e24:	2101      	movs	r1, #1
 8024e26:	68b8      	ldr	r0, [r7, #8]
 8024e28:	f7e1 fcc2 	bl	80067b0 <lv_obj_get_style_list>
 8024e2c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->pad_small);
 8024e2e:	4b9f      	ldr	r3, [pc, #636]	; (80250ac <theme_apply+0x914>)
 8024e30:	681b      	ldr	r3, [r3, #0]
 8024e32:	3318      	adds	r3, #24
 8024e34:	4619      	mov	r1, r3
 8024e36:	6938      	ldr	r0, [r7, #16]
 8024e38:	f7e6 f916 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_series_bg);
 8024e3c:	4b9b      	ldr	r3, [pc, #620]	; (80250ac <theme_apply+0x914>)
 8024e3e:	681b      	ldr	r3, [r3, #0]
 8024e40:	3348      	adds	r3, #72	; 0x48
 8024e42:	4619      	mov	r1, r3
 8024e44:	6938      	ldr	r0, [r7, #16]
 8024e46:	f7e6 f90f 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
 8024e4a:	2103      	movs	r1, #3
 8024e4c:	68b8      	ldr	r0, [r7, #8]
 8024e4e:	f7e1 fcaf 	bl	80067b0 <lv_obj_get_style_list>
 8024e52:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->chart_series_bg);
 8024e54:	4b95      	ldr	r3, [pc, #596]	; (80250ac <theme_apply+0x914>)
 8024e56:	681b      	ldr	r3, [r3, #0]
 8024e58:	3348      	adds	r3, #72	; 0x48
 8024e5a:	4619      	mov	r1, r3
 8024e5c:	6938      	ldr	r0, [r7, #16]
 8024e5e:	f7e6 f903 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
 8024e62:	2102      	movs	r1, #2
 8024e64:	68b8      	ldr	r0, [r7, #8]
 8024e66:	f7e1 fca3 	bl	80067b0 <lv_obj_get_style_list>
 8024e6a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->chart_series);
 8024e6c:	4b8f      	ldr	r3, [pc, #572]	; (80250ac <theme_apply+0x914>)
 8024e6e:	681b      	ldr	r3, [r3, #0]
 8024e70:	334c      	adds	r3, #76	; 0x4c
 8024e72:	4619      	mov	r1, r3
 8024e74:	6938      	ldr	r0, [r7, #16]
 8024e76:	f7e6 f8f7 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024e7a:	e15a      	b.n	8025132 <theme_apply+0x99a>
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE: {
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
 8024e7c:	2100      	movs	r1, #0
 8024e7e:	68b8      	ldr	r0, [r7, #8]
 8024e80:	f7e1 fc96 	bl	80067b0 <lv_obj_get_style_list>
 8024e84:	6138      	str	r0, [r7, #16]
                _lv_style_list_add_style(list, &styles->bg);
 8024e86:	4b89      	ldr	r3, [pc, #548]	; (80250ac <theme_apply+0x914>)
 8024e88:	681b      	ldr	r3, [r3, #0]
 8024e8a:	3304      	adds	r3, #4
 8024e8c:	4619      	mov	r1, r3
 8024e8e:	6938      	ldr	r0, [r7, #16]
 8024e90:	f7e6 f8ea 	bl	800b068 <_lv_style_list_add_style>

                int idx = 1; /* start value should be 1, not zero, since cell styles
 8024e94:	2301      	movs	r3, #1
 8024e96:	617b      	str	r3, [r7, #20]
                            start at 1 due to presence of LV_TABLE_PART_BG=0
                            in the enum (lv_table.h) */
                /* declaring idx outside loop to work with older compilers */
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
 8024e98:	e010      	b.n	8024ebc <theme_apply+0x724>
                    list = lv_obj_get_style_list(obj, idx);
 8024e9a:	697b      	ldr	r3, [r7, #20]
 8024e9c:	b2db      	uxtb	r3, r3
 8024e9e:	4619      	mov	r1, r3
 8024ea0:	68b8      	ldr	r0, [r7, #8]
 8024ea2:	f7e1 fc85 	bl	80067b0 <lv_obj_get_style_list>
 8024ea6:	6138      	str	r0, [r7, #16]
                    _lv_style_list_add_style(list, &styles->table_cell);
 8024ea8:	4b80      	ldr	r3, [pc, #512]	; (80250ac <theme_apply+0x914>)
 8024eaa:	681b      	ldr	r3, [r3, #0]
 8024eac:	33a4      	adds	r3, #164	; 0xa4
 8024eae:	4619      	mov	r1, r3
 8024eb0:	6938      	ldr	r0, [r7, #16]
 8024eb2:	f7e6 f8d9 	bl	800b068 <_lv_style_list_add_style>
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
 8024eb6:	697b      	ldr	r3, [r7, #20]
 8024eb8:	3301      	adds	r3, #1
 8024eba:	617b      	str	r3, [r7, #20]
 8024ebc:	697b      	ldr	r3, [r7, #20]
 8024ebe:	2b04      	cmp	r3, #4
 8024ec0:	ddeb      	ble.n	8024e9a <theme_apply+0x702>
                }
                break;
 8024ec2:	e136      	b.n	8025132 <theme_apply+0x99a>
            }
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
 8024ec4:	2100      	movs	r1, #0
 8024ec6:	68b8      	ldr	r0, [r7, #8]
 8024ec8:	f7e1 fc72 	bl	80067b0 <lv_obj_get_style_list>
 8024ecc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024ece:	4b77      	ldr	r3, [pc, #476]	; (80250ac <theme_apply+0x914>)
 8024ed0:	681b      	ldr	r3, [r3, #0]
 8024ed2:	4619      	mov	r1, r3
 8024ed4:	6938      	ldr	r0, [r7, #16]
 8024ed6:	f7e6 f8c7 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
 8024eda:	2142      	movs	r1, #66	; 0x42
 8024edc:	68b8      	ldr	r0, [r7, #8]
 8024ede:	f7e1 fc67 	bl	80067b0 <lv_obj_get_style_list>
 8024ee2:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8024ee4:	4b71      	ldr	r3, [pc, #452]	; (80250ac <theme_apply+0x914>)
 8024ee6:	681b      	ldr	r3, [r3, #0]
 8024ee8:	3384      	adds	r3, #132	; 0x84
 8024eea:	4619      	mov	r1, r3
 8024eec:	6938      	ldr	r0, [r7, #16]
 8024eee:	f7e6 f8bb 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 8024ef2:	2141      	movs	r1, #65	; 0x41
 8024ef4:	68b8      	ldr	r0, [r7, #8]
 8024ef6:	f7e1 fc5b 	bl	80067b0 <lv_obj_get_style_list>
 8024efa:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
 8024efc:	4b6b      	ldr	r3, [pc, #428]	; (80250ac <theme_apply+0x914>)
 8024efe:	681b      	ldr	r3, [r3, #0]
 8024f00:	33b4      	adds	r3, #180	; 0xb4
 8024f02:	4619      	mov	r1, r3
 8024f04:	6938      	ldr	r0, [r7, #16]
 8024f06:	f7e6 f8af 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
 8024f0a:	2140      	movs	r1, #64	; 0x40
 8024f0c:	68b8      	ldr	r0, [r7, #8]
 8024f0e:	f7e1 fc4f 	bl	80067b0 <lv_obj_get_style_list>
 8024f12:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
 8024f14:	4b65      	ldr	r3, [pc, #404]	; (80250ac <theme_apply+0x914>)
 8024f16:	681b      	ldr	r3, [r3, #0]
 8024f18:	33ac      	adds	r3, #172	; 0xac
 8024f1a:	4619      	mov	r1, r3
 8024f1c:	6938      	ldr	r0, [r7, #16]
 8024f1e:	f7e6 f8a3 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024f22:	e106      	b.n	8025132 <theme_apply+0x99a>

        case LV_THEME_WIN_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8024f24:	2100      	movs	r1, #0
 8024f26:	68b8      	ldr	r0, [r7, #8]
 8024f28:	f7e1 fc42 	bl	80067b0 <lv_obj_get_style_list>
 8024f2c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns);
 8024f2e:	4b5f      	ldr	r3, [pc, #380]	; (80250ac <theme_apply+0x914>)
 8024f30:	681b      	ldr	r3, [r3, #0]
 8024f32:	33a8      	adds	r3, #168	; 0xa8
 8024f34:	4619      	mov	r1, r3
 8024f36:	6938      	ldr	r0, [r7, #16]
 8024f38:	f7e6 f896 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024f3c:	e0f9      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
 8024f3e:	2100      	movs	r1, #0
 8024f40:	68b8      	ldr	r0, [r7, #8]
 8024f42:	f7e1 fc35 	bl	80067b0 <lv_obj_get_style_list>
 8024f46:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024f48:	4b58      	ldr	r3, [pc, #352]	; (80250ac <theme_apply+0x914>)
 8024f4a:	681b      	ldr	r3, [r3, #0]
 8024f4c:	3304      	adds	r3, #4
 8024f4e:	4619      	mov	r1, r3
 8024f50:	6938      	ldr	r0, [r7, #16]
 8024f52:	f7e6 f889 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8024f56:	4b55      	ldr	r3, [pc, #340]	; (80250ac <theme_apply+0x914>)
 8024f58:	681b      	ldr	r3, [r3, #0]
 8024f5a:	3318      	adds	r3, #24
 8024f5c:	4619      	mov	r1, r3
 8024f5e:	6938      	ldr	r0, [r7, #16]
 8024f60:	f7e6 f882 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
 8024f64:	2104      	movs	r1, #4
 8024f66:	68b8      	ldr	r0, [r7, #8]
 8024f68:	f7e1 fc22 	bl	80067b0 <lv_obj_get_style_list>
 8024f6c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->ta_placeholder);
 8024f6e:	4b4f      	ldr	r3, [pc, #316]	; (80250ac <theme_apply+0x914>)
 8024f70:	681b      	ldr	r3, [r3, #0]
 8024f72:	33bc      	adds	r3, #188	; 0xbc
 8024f74:	4619      	mov	r1, r3
 8024f76:	6938      	ldr	r0, [r7, #16]
 8024f78:	f7e6 f876 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 8024f7c:	2103      	movs	r1, #3
 8024f7e:	68b8      	ldr	r0, [r7, #8]
 8024f80:	f7e1 fc16 	bl	80067b0 <lv_obj_get_style_list>
 8024f84:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->ta_cursor);
 8024f86:	4b49      	ldr	r3, [pc, #292]	; (80250ac <theme_apply+0x914>)
 8024f88:	681b      	ldr	r3, [r3, #0]
 8024f8a:	33b8      	adds	r3, #184	; 0xb8
 8024f8c:	4619      	mov	r1, r3
 8024f8e:	6938      	ldr	r0, [r7, #16]
 8024f90:	f7e6 f86a 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
 8024f94:	2101      	movs	r1, #1
 8024f96:	68b8      	ldr	r0, [r7, #8]
 8024f98:	f7e1 fc0a 	bl	80067b0 <lv_obj_get_style_list>
 8024f9c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8024f9e:	4b43      	ldr	r3, [pc, #268]	; (80250ac <theme_apply+0x914>)
 8024fa0:	681b      	ldr	r3, [r3, #0]
 8024fa2:	3384      	adds	r3, #132	; 0x84
 8024fa4:	4619      	mov	r1, r3
 8024fa6:	6938      	ldr	r0, [r7, #16]
 8024fa8:	f7e6 f85e 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024fac:	e0c1      	b.n	8025132 <theme_apply+0x99a>

#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
 8024fae:	2100      	movs	r1, #0
 8024fb0:	68b8      	ldr	r0, [r7, #8]
 8024fb2:	f7e1 fbfd 	bl	80067b0 <lv_obj_get_style_list>
 8024fb6:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024fb8:	4b3c      	ldr	r3, [pc, #240]	; (80250ac <theme_apply+0x914>)
 8024fba:	681b      	ldr	r3, [r3, #0]
 8024fbc:	3304      	adds	r3, #4
 8024fbe:	4619      	mov	r1, r3
 8024fc0:	6938      	ldr	r0, [r7, #16]
 8024fc2:	f7e6 f851 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8024fc6:	4b39      	ldr	r3, [pc, #228]	; (80250ac <theme_apply+0x914>)
 8024fc8:	681b      	ldr	r3, [r3, #0]
 8024fca:	3318      	adds	r3, #24
 8024fcc:	4619      	mov	r1, r3
 8024fce:	6938      	ldr	r0, [r7, #16]
 8024fd0:	f7e6 f84a 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
 8024fd4:	2103      	movs	r1, #3
 8024fd6:	68b8      	ldr	r0, [r7, #8]
 8024fd8:	f7e1 fbea 	bl	80067b0 <lv_obj_get_style_list>
 8024fdc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
 8024fde:	4b33      	ldr	r3, [pc, #204]	; (80250ac <theme_apply+0x914>)
 8024fe0:	681b      	ldr	r3, [r3, #0]
 8024fe2:	339c      	adds	r3, #156	; 0x9c
 8024fe4:	4619      	mov	r1, r3
 8024fe6:	6938      	ldr	r0, [r7, #16]
 8024fe8:	f7e6 f83e 	bl	800b068 <_lv_style_list_add_style>
            break;
 8024fec:	e0a1      	b.n	8025132 <theme_apply+0x99a>

        case LV_THEME_SPINBOX_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8024fee:	2100      	movs	r1, #0
 8024ff0:	68b8      	ldr	r0, [r7, #8]
 8024ff2:	f7e1 fbdd 	bl	80067b0 <lv_obj_get_style_list>
 8024ff6:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024ff8:	4b2c      	ldr	r3, [pc, #176]	; (80250ac <theme_apply+0x914>)
 8024ffa:	681b      	ldr	r3, [r3, #0]
 8024ffc:	3304      	adds	r3, #4
 8024ffe:	4619      	mov	r1, r3
 8025000:	6938      	ldr	r0, [r7, #16]
 8025002:	f7e6 f831 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8025006:	4b29      	ldr	r3, [pc, #164]	; (80250ac <theme_apply+0x914>)
 8025008:	681b      	ldr	r3, [r3, #0]
 802500a:	3308      	adds	r3, #8
 802500c:	4619      	mov	r1, r3
 802500e:	6938      	ldr	r0, [r7, #16]
 8025010:	f7e6 f82a 	bl	800b068 <_lv_style_list_add_style>
            break;
 8025014:	e08d      	b.n	8025132 <theme_apply+0x99a>
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
 8025016:	2100      	movs	r1, #0
 8025018:	68b8      	ldr	r0, [r7, #8]
 802501a:	f7e1 fbc9 	bl	80067b0 <lv_obj_get_style_list>
 802501e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8025020:	4b22      	ldr	r3, [pc, #136]	; (80250ac <theme_apply+0x914>)
 8025022:	681b      	ldr	r3, [r3, #0]
 8025024:	3304      	adds	r3, #4
 8025026:	4619      	mov	r1, r3
 8025028:	6938      	ldr	r0, [r7, #16]
 802502a:	f7e6 f81d 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
 802502e:	2103      	movs	r1, #3
 8025030:	68b8      	ldr	r0, [r7, #8]
 8025032:	f7e1 fbbd 	bl	80067b0 <lv_obj_get_style_list>
 8025036:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
 8025038:	4b1c      	ldr	r3, [pc, #112]	; (80250ac <theme_apply+0x914>)
 802503a:	681b      	ldr	r3, [r3, #0]
 802503c:	3330      	adds	r3, #48	; 0x30
 802503e:	4619      	mov	r1, r3
 8025040:	6938      	ldr	r0, [r7, #16]
 8025042:	f7e6 f811 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
 8025046:	2101      	movs	r1, #1
 8025048:	68b8      	ldr	r0, [r7, #8]
 802504a:	f7e1 fbb1 	bl	80067b0 <lv_obj_get_style_list>
 802504e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->calendar_header);
 8025050:	4b16      	ldr	r3, [pc, #88]	; (80250ac <theme_apply+0x914>)
 8025052:	681b      	ldr	r3, [r3, #0]
 8025054:	3334      	adds	r3, #52	; 0x34
 8025056:	4619      	mov	r1, r3
 8025058:	6938      	ldr	r0, [r7, #16]
 802505a:	f7e6 f805 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 802505e:	2102      	movs	r1, #2
 8025060:	68b8      	ldr	r0, [r7, #8]
 8025062:	f7e1 fba5 	bl	80067b0 <lv_obj_get_style_list>
 8025066:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->calendar_daynames);
 8025068:	4b10      	ldr	r3, [pc, #64]	; (80250ac <theme_apply+0x914>)
 802506a:	681b      	ldr	r3, [r3, #0]
 802506c:	3338      	adds	r3, #56	; 0x38
 802506e:	4619      	mov	r1, r3
 8025070:	6938      	ldr	r0, [r7, #16]
 8025072:	f7e5 fff9 	bl	800b068 <_lv_style_list_add_style>
            break;
 8025076:	e05c      	b.n	8025132 <theme_apply+0x99a>
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
 8025078:	2100      	movs	r1, #0
 802507a:	68b8      	ldr	r0, [r7, #8]
 802507c:	f7e1 fb98 	bl	80067b0 <lv_obj_get_style_list>
 8025080:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->cpicker_bg);
 8025082:	4b0a      	ldr	r3, [pc, #40]	; (80250ac <theme_apply+0x914>)
 8025084:	681b      	ldr	r3, [r3, #0]
 8025086:	333c      	adds	r3, #60	; 0x3c
 8025088:	4619      	mov	r1, r3
 802508a:	6938      	ldr	r0, [r7, #16]
 802508c:	f7e5 ffec 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
 8025090:	2101      	movs	r1, #1
 8025092:	68b8      	ldr	r0, [r7, #8]
 8025094:	f7e1 fb8c 	bl	80067b0 <lv_obj_get_style_list>
 8025098:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->cpicker_indic);
 802509a:	4b04      	ldr	r3, [pc, #16]	; (80250ac <theme_apply+0x914>)
 802509c:	681b      	ldr	r3, [r3, #0]
 802509e:	3340      	adds	r3, #64	; 0x40
 80250a0:	4619      	mov	r1, r3
 80250a2:	6938      	ldr	r0, [r7, #16]
 80250a4:	f7e5 ffe0 	bl	800b068 <_lv_style_list_add_style>
            break;
 80250a8:	e043      	b.n	8025132 <theme_apply+0x99a>
 80250aa:	bf00      	nop
 80250ac:	200200d0 	.word	0x200200d0
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
 80250b0:	2100      	movs	r1, #0
 80250b2:	68b8      	ldr	r0, [r7, #8]
 80250b4:	f7e1 fb7c 	bl	80067b0 <lv_obj_get_style_list>
 80250b8:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80250ba:	4b22      	ldr	r3, [pc, #136]	; (8025144 <theme_apply+0x9ac>)
 80250bc:	681b      	ldr	r3, [r3, #0]
 80250be:	3304      	adds	r3, #4
 80250c0:	4619      	mov	r1, r3
 80250c2:	6938      	ldr	r0, [r7, #16]
 80250c4:	f7e5 ffd0 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->lmeter);
 80250c8:	4b1e      	ldr	r3, [pc, #120]	; (8025144 <theme_apply+0x9ac>)
 80250ca:	681b      	ldr	r3, [r3, #0]
 80250cc:	3374      	adds	r3, #116	; 0x74
 80250ce:	4619      	mov	r1, r3
 80250d0:	6938      	ldr	r0, [r7, #16]
 80250d2:	f7e5 ffc9 	bl	800b068 <_lv_style_list_add_style>
            break;
 80250d6:	e02c      	b.n	8025132 <theme_apply+0x99a>
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
 80250d8:	2100      	movs	r1, #0
 80250da:	68b8      	ldr	r0, [r7, #8]
 80250dc:	f7e1 fb68 	bl	80067b0 <lv_obj_get_style_list>
 80250e0:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80250e2:	4b18      	ldr	r3, [pc, #96]	; (8025144 <theme_apply+0x9ac>)
 80250e4:	681b      	ldr	r3, [r3, #0]
 80250e6:	3304      	adds	r3, #4
 80250e8:	4619      	mov	r1, r3
 80250ea:	6938      	ldr	r0, [r7, #16]
 80250ec:	f7e5 ffbc 	bl	800b068 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->gauge_main);
 80250f0:	4b14      	ldr	r3, [pc, #80]	; (8025144 <theme_apply+0x9ac>)
 80250f2:	681b      	ldr	r3, [r3, #0]
 80250f4:	3360      	adds	r3, #96	; 0x60
 80250f6:	4619      	mov	r1, r3
 80250f8:	6938      	ldr	r0, [r7, #16]
 80250fa:	f7e5 ffb5 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
 80250fe:	2101      	movs	r1, #1
 8025100:	68b8      	ldr	r0, [r7, #8]
 8025102:	f7e1 fb55 	bl	80067b0 <lv_obj_get_style_list>
 8025106:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->gauge_strong);
 8025108:	4b0e      	ldr	r3, [pc, #56]	; (8025144 <theme_apply+0x9ac>)
 802510a:	681b      	ldr	r3, [r3, #0]
 802510c:	3364      	adds	r3, #100	; 0x64
 802510e:	4619      	mov	r1, r3
 8025110:	6938      	ldr	r0, [r7, #16]
 8025112:	f7e5 ffa9 	bl	800b068 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
 8025116:	2102      	movs	r1, #2
 8025118:	68b8      	ldr	r0, [r7, #8]
 802511a:	f7e1 fb49 	bl	80067b0 <lv_obj_get_style_list>
 802511e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->gauge_needle);
 8025120:	4b08      	ldr	r3, [pc, #32]	; (8025144 <theme_apply+0x9ac>)
 8025122:	681b      	ldr	r3, [r3, #0]
 8025124:	3368      	adds	r3, #104	; 0x68
 8025126:	4619      	mov	r1, r3
 8025128:	6938      	ldr	r0, [r7, #16]
 802512a:	f7e5 ff9d 	bl	800b068 <_lv_style_list_add_style>
            break;
 802512e:	e000      	b.n	8025132 <theme_apply+0x99a>
#endif
        default:
            break;
 8025130:	bf00      	nop
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8025132:	22ff      	movs	r2, #255	; 0xff
 8025134:	21ff      	movs	r1, #255	; 0xff
 8025136:	68b8      	ldr	r0, [r7, #8]
 8025138:	f7e0 fd50 	bl	8005bdc <lv_obj_refresh_style>
}
 802513c:	bf00      	nop
 802513e:	3718      	adds	r7, #24
 8025140:	46bd      	mov	sp, r7
 8025142:	bd80      	pop	{r7, pc}
 8025144:	200200d0 	.word	0x200200d0

08025148 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
 8025148:	b580      	push	{r7, lr}
 802514a:	b082      	sub	sp, #8
 802514c:	af00      	add	r7, sp, #0
 802514e:	6078      	str	r0, [r7, #4]
    if(inited) lv_style_reset(style);
 8025150:	4b07      	ldr	r3, [pc, #28]	; (8025170 <style_init_reset+0x28>)
 8025152:	781b      	ldrb	r3, [r3, #0]
 8025154:	2b00      	cmp	r3, #0
 8025156:	d003      	beq.n	8025160 <style_init_reset+0x18>
 8025158:	6878      	ldr	r0, [r7, #4]
 802515a:	f7e6 f91e 	bl	800b39a <lv_style_reset>
    else lv_style_init(style);
}
 802515e:	e002      	b.n	8025166 <style_init_reset+0x1e>
    else lv_style_init(style);
 8025160:	6878      	ldr	r0, [r7, #4]
 8025162:	f7e5 fe0e 	bl	800ad82 <lv_style_init>
}
 8025166:	bf00      	nop
 8025168:	3708      	adds	r7, #8
 802516a:	46bd      	mov	sp, r7
 802516c:	bd80      	pop	{r7, pc}
 802516e:	bf00      	nop
 8025170:	200200d4 	.word	0x200200d4

08025174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8025174:	b580      	push	{r7, lr}
 8025176:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8025178:	2003      	movs	r0, #3
 802517a:	f000 f8f8 	bl	802536e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802517e:	2000      	movs	r0, #0
 8025180:	f7dc f88e 	bl	80012a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8025184:	f7dc f868 	bl	8001258 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8025188:	2300      	movs	r3, #0
}
 802518a:	4618      	mov	r0, r3
 802518c:	bd80      	pop	{r7, pc}
	...

08025190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8025190:	b480      	push	{r7}
 8025192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8025194:	4b06      	ldr	r3, [pc, #24]	; (80251b0 <HAL_IncTick+0x20>)
 8025196:	781b      	ldrb	r3, [r3, #0]
 8025198:	461a      	mov	r2, r3
 802519a:	4b06      	ldr	r3, [pc, #24]	; (80251b4 <HAL_IncTick+0x24>)
 802519c:	681b      	ldr	r3, [r3, #0]
 802519e:	4413      	add	r3, r2
 80251a0:	4a04      	ldr	r2, [pc, #16]	; (80251b4 <HAL_IncTick+0x24>)
 80251a2:	6013      	str	r3, [r2, #0]
}
 80251a4:	bf00      	nop
 80251a6:	46bd      	mov	sp, r7
 80251a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251ac:	4770      	bx	lr
 80251ae:	bf00      	nop
 80251b0:	20000050 	.word	0x20000050
 80251b4:	2002050c 	.word	0x2002050c

080251b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80251b8:	b480      	push	{r7}
 80251ba:	af00      	add	r7, sp, #0
  return uwTick;
 80251bc:	4b03      	ldr	r3, [pc, #12]	; (80251cc <HAL_GetTick+0x14>)
 80251be:	681b      	ldr	r3, [r3, #0]
}
 80251c0:	4618      	mov	r0, r3
 80251c2:	46bd      	mov	sp, r7
 80251c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251c8:	4770      	bx	lr
 80251ca:	bf00      	nop
 80251cc:	2002050c 	.word	0x2002050c

080251d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80251d0:	b580      	push	{r7, lr}
 80251d2:	b084      	sub	sp, #16
 80251d4:	af00      	add	r7, sp, #0
 80251d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80251d8:	f7ff ffee 	bl	80251b8 <HAL_GetTick>
 80251dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80251de:	687b      	ldr	r3, [r7, #4]
 80251e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80251e2:	68fb      	ldr	r3, [r7, #12]
 80251e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80251e8:	d005      	beq.n	80251f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80251ea:	4b09      	ldr	r3, [pc, #36]	; (8025210 <HAL_Delay+0x40>)
 80251ec:	781b      	ldrb	r3, [r3, #0]
 80251ee:	461a      	mov	r2, r3
 80251f0:	68fb      	ldr	r3, [r7, #12]
 80251f2:	4413      	add	r3, r2
 80251f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80251f6:	bf00      	nop
 80251f8:	f7ff ffde 	bl	80251b8 <HAL_GetTick>
 80251fc:	4602      	mov	r2, r0
 80251fe:	68bb      	ldr	r3, [r7, #8]
 8025200:	1ad3      	subs	r3, r2, r3
 8025202:	68fa      	ldr	r2, [r7, #12]
 8025204:	429a      	cmp	r2, r3
 8025206:	d8f7      	bhi.n	80251f8 <HAL_Delay+0x28>
  {
  }
}
 8025208:	bf00      	nop
 802520a:	3710      	adds	r7, #16
 802520c:	46bd      	mov	sp, r7
 802520e:	bd80      	pop	{r7, pc}
 8025210:	20000050 	.word	0x20000050

08025214 <__NVIC_SetPriorityGrouping>:
{
 8025214:	b480      	push	{r7}
 8025216:	b085      	sub	sp, #20
 8025218:	af00      	add	r7, sp, #0
 802521a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802521c:	687b      	ldr	r3, [r7, #4]
 802521e:	f003 0307 	and.w	r3, r3, #7
 8025222:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8025224:	4b0b      	ldr	r3, [pc, #44]	; (8025254 <__NVIC_SetPriorityGrouping+0x40>)
 8025226:	68db      	ldr	r3, [r3, #12]
 8025228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802522a:	68ba      	ldr	r2, [r7, #8]
 802522c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8025230:	4013      	ands	r3, r2
 8025232:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8025234:	68fb      	ldr	r3, [r7, #12]
 8025236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8025238:	68bb      	ldr	r3, [r7, #8]
 802523a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802523c:	4b06      	ldr	r3, [pc, #24]	; (8025258 <__NVIC_SetPriorityGrouping+0x44>)
 802523e:	4313      	orrs	r3, r2
 8025240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8025242:	4a04      	ldr	r2, [pc, #16]	; (8025254 <__NVIC_SetPriorityGrouping+0x40>)
 8025244:	68bb      	ldr	r3, [r7, #8]
 8025246:	60d3      	str	r3, [r2, #12]
}
 8025248:	bf00      	nop
 802524a:	3714      	adds	r7, #20
 802524c:	46bd      	mov	sp, r7
 802524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025252:	4770      	bx	lr
 8025254:	e000ed00 	.word	0xe000ed00
 8025258:	05fa0000 	.word	0x05fa0000

0802525c <__NVIC_GetPriorityGrouping>:
{
 802525c:	b480      	push	{r7}
 802525e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8025260:	4b04      	ldr	r3, [pc, #16]	; (8025274 <__NVIC_GetPriorityGrouping+0x18>)
 8025262:	68db      	ldr	r3, [r3, #12]
 8025264:	0a1b      	lsrs	r3, r3, #8
 8025266:	f003 0307 	and.w	r3, r3, #7
}
 802526a:	4618      	mov	r0, r3
 802526c:	46bd      	mov	sp, r7
 802526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025272:	4770      	bx	lr
 8025274:	e000ed00 	.word	0xe000ed00

08025278 <__NVIC_EnableIRQ>:
{
 8025278:	b480      	push	{r7}
 802527a:	b083      	sub	sp, #12
 802527c:	af00      	add	r7, sp, #0
 802527e:	4603      	mov	r3, r0
 8025280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8025282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025286:	2b00      	cmp	r3, #0
 8025288:	db0b      	blt.n	80252a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802528a:	79fb      	ldrb	r3, [r7, #7]
 802528c:	f003 021f 	and.w	r2, r3, #31
 8025290:	4907      	ldr	r1, [pc, #28]	; (80252b0 <__NVIC_EnableIRQ+0x38>)
 8025292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025296:	095b      	lsrs	r3, r3, #5
 8025298:	2001      	movs	r0, #1
 802529a:	fa00 f202 	lsl.w	r2, r0, r2
 802529e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80252a2:	bf00      	nop
 80252a4:	370c      	adds	r7, #12
 80252a6:	46bd      	mov	sp, r7
 80252a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252ac:	4770      	bx	lr
 80252ae:	bf00      	nop
 80252b0:	e000e100 	.word	0xe000e100

080252b4 <__NVIC_SetPriority>:
{
 80252b4:	b480      	push	{r7}
 80252b6:	b083      	sub	sp, #12
 80252b8:	af00      	add	r7, sp, #0
 80252ba:	4603      	mov	r3, r0
 80252bc:	6039      	str	r1, [r7, #0]
 80252be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80252c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80252c4:	2b00      	cmp	r3, #0
 80252c6:	db0a      	blt.n	80252de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80252c8:	683b      	ldr	r3, [r7, #0]
 80252ca:	b2da      	uxtb	r2, r3
 80252cc:	490c      	ldr	r1, [pc, #48]	; (8025300 <__NVIC_SetPriority+0x4c>)
 80252ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80252d2:	0112      	lsls	r2, r2, #4
 80252d4:	b2d2      	uxtb	r2, r2
 80252d6:	440b      	add	r3, r1
 80252d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80252dc:	e00a      	b.n	80252f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80252de:	683b      	ldr	r3, [r7, #0]
 80252e0:	b2da      	uxtb	r2, r3
 80252e2:	4908      	ldr	r1, [pc, #32]	; (8025304 <__NVIC_SetPriority+0x50>)
 80252e4:	79fb      	ldrb	r3, [r7, #7]
 80252e6:	f003 030f 	and.w	r3, r3, #15
 80252ea:	3b04      	subs	r3, #4
 80252ec:	0112      	lsls	r2, r2, #4
 80252ee:	b2d2      	uxtb	r2, r2
 80252f0:	440b      	add	r3, r1
 80252f2:	761a      	strb	r2, [r3, #24]
}
 80252f4:	bf00      	nop
 80252f6:	370c      	adds	r7, #12
 80252f8:	46bd      	mov	sp, r7
 80252fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252fe:	4770      	bx	lr
 8025300:	e000e100 	.word	0xe000e100
 8025304:	e000ed00 	.word	0xe000ed00

08025308 <NVIC_EncodePriority>:
{
 8025308:	b480      	push	{r7}
 802530a:	b089      	sub	sp, #36	; 0x24
 802530c:	af00      	add	r7, sp, #0
 802530e:	60f8      	str	r0, [r7, #12]
 8025310:	60b9      	str	r1, [r7, #8]
 8025312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8025314:	68fb      	ldr	r3, [r7, #12]
 8025316:	f003 0307 	and.w	r3, r3, #7
 802531a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802531c:	69fb      	ldr	r3, [r7, #28]
 802531e:	f1c3 0307 	rsb	r3, r3, #7
 8025322:	2b04      	cmp	r3, #4
 8025324:	bf28      	it	cs
 8025326:	2304      	movcs	r3, #4
 8025328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802532a:	69fb      	ldr	r3, [r7, #28]
 802532c:	3304      	adds	r3, #4
 802532e:	2b06      	cmp	r3, #6
 8025330:	d902      	bls.n	8025338 <NVIC_EncodePriority+0x30>
 8025332:	69fb      	ldr	r3, [r7, #28]
 8025334:	3b03      	subs	r3, #3
 8025336:	e000      	b.n	802533a <NVIC_EncodePriority+0x32>
 8025338:	2300      	movs	r3, #0
 802533a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802533c:	f04f 32ff 	mov.w	r2, #4294967295
 8025340:	69bb      	ldr	r3, [r7, #24]
 8025342:	fa02 f303 	lsl.w	r3, r2, r3
 8025346:	43da      	mvns	r2, r3
 8025348:	68bb      	ldr	r3, [r7, #8]
 802534a:	401a      	ands	r2, r3
 802534c:	697b      	ldr	r3, [r7, #20]
 802534e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8025350:	f04f 31ff 	mov.w	r1, #4294967295
 8025354:	697b      	ldr	r3, [r7, #20]
 8025356:	fa01 f303 	lsl.w	r3, r1, r3
 802535a:	43d9      	mvns	r1, r3
 802535c:	687b      	ldr	r3, [r7, #4]
 802535e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8025360:	4313      	orrs	r3, r2
}
 8025362:	4618      	mov	r0, r3
 8025364:	3724      	adds	r7, #36	; 0x24
 8025366:	46bd      	mov	sp, r7
 8025368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802536c:	4770      	bx	lr

0802536e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802536e:	b580      	push	{r7, lr}
 8025370:	b082      	sub	sp, #8
 8025372:	af00      	add	r7, sp, #0
 8025374:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8025376:	6878      	ldr	r0, [r7, #4]
 8025378:	f7ff ff4c 	bl	8025214 <__NVIC_SetPriorityGrouping>
}
 802537c:	bf00      	nop
 802537e:	3708      	adds	r7, #8
 8025380:	46bd      	mov	sp, r7
 8025382:	bd80      	pop	{r7, pc}

08025384 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8025384:	b580      	push	{r7, lr}
 8025386:	b086      	sub	sp, #24
 8025388:	af00      	add	r7, sp, #0
 802538a:	4603      	mov	r3, r0
 802538c:	60b9      	str	r1, [r7, #8]
 802538e:	607a      	str	r2, [r7, #4]
 8025390:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8025392:	2300      	movs	r3, #0
 8025394:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8025396:	f7ff ff61 	bl	802525c <__NVIC_GetPriorityGrouping>
 802539a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802539c:	687a      	ldr	r2, [r7, #4]
 802539e:	68b9      	ldr	r1, [r7, #8]
 80253a0:	6978      	ldr	r0, [r7, #20]
 80253a2:	f7ff ffb1 	bl	8025308 <NVIC_EncodePriority>
 80253a6:	4602      	mov	r2, r0
 80253a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80253ac:	4611      	mov	r1, r2
 80253ae:	4618      	mov	r0, r3
 80253b0:	f7ff ff80 	bl	80252b4 <__NVIC_SetPriority>
}
 80253b4:	bf00      	nop
 80253b6:	3718      	adds	r7, #24
 80253b8:	46bd      	mov	sp, r7
 80253ba:	bd80      	pop	{r7, pc}

080253bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80253bc:	b580      	push	{r7, lr}
 80253be:	b082      	sub	sp, #8
 80253c0:	af00      	add	r7, sp, #0
 80253c2:	4603      	mov	r3, r0
 80253c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80253c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80253ca:	4618      	mov	r0, r3
 80253cc:	f7ff ff54 	bl	8025278 <__NVIC_EnableIRQ>
}
 80253d0:	bf00      	nop
 80253d2:	3708      	adds	r7, #8
 80253d4:	46bd      	mov	sp, r7
 80253d6:	bd80      	pop	{r7, pc}

080253d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80253d8:	b580      	push	{r7, lr}
 80253da:	b086      	sub	sp, #24
 80253dc:	af00      	add	r7, sp, #0
 80253de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80253e0:	2300      	movs	r3, #0
 80253e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80253e4:	4b92      	ldr	r3, [pc, #584]	; (8025630 <HAL_DMA_IRQHandler+0x258>)
 80253e6:	681b      	ldr	r3, [r3, #0]
 80253e8:	4a92      	ldr	r2, [pc, #584]	; (8025634 <HAL_DMA_IRQHandler+0x25c>)
 80253ea:	fba2 2303 	umull	r2, r3, r2, r3
 80253ee:	0a9b      	lsrs	r3, r3, #10
 80253f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80253f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80253f8:	693b      	ldr	r3, [r7, #16]
 80253fa:	681b      	ldr	r3, [r3, #0]
 80253fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80253fe:	687b      	ldr	r3, [r7, #4]
 8025400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025402:	2208      	movs	r2, #8
 8025404:	409a      	lsls	r2, r3
 8025406:	68fb      	ldr	r3, [r7, #12]
 8025408:	4013      	ands	r3, r2
 802540a:	2b00      	cmp	r3, #0
 802540c:	d01a      	beq.n	8025444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802540e:	687b      	ldr	r3, [r7, #4]
 8025410:	681b      	ldr	r3, [r3, #0]
 8025412:	681b      	ldr	r3, [r3, #0]
 8025414:	f003 0304 	and.w	r3, r3, #4
 8025418:	2b00      	cmp	r3, #0
 802541a:	d013      	beq.n	8025444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 802541c:	687b      	ldr	r3, [r7, #4]
 802541e:	681b      	ldr	r3, [r3, #0]
 8025420:	681a      	ldr	r2, [r3, #0]
 8025422:	687b      	ldr	r3, [r7, #4]
 8025424:	681b      	ldr	r3, [r3, #0]
 8025426:	f022 0204 	bic.w	r2, r2, #4
 802542a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802542c:	687b      	ldr	r3, [r7, #4]
 802542e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025430:	2208      	movs	r2, #8
 8025432:	409a      	lsls	r2, r3
 8025434:	693b      	ldr	r3, [r7, #16]
 8025436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8025438:	687b      	ldr	r3, [r7, #4]
 802543a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802543c:	f043 0201 	orr.w	r2, r3, #1
 8025440:	687b      	ldr	r3, [r7, #4]
 8025442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8025444:	687b      	ldr	r3, [r7, #4]
 8025446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025448:	2201      	movs	r2, #1
 802544a:	409a      	lsls	r2, r3
 802544c:	68fb      	ldr	r3, [r7, #12]
 802544e:	4013      	ands	r3, r2
 8025450:	2b00      	cmp	r3, #0
 8025452:	d012      	beq.n	802547a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8025454:	687b      	ldr	r3, [r7, #4]
 8025456:	681b      	ldr	r3, [r3, #0]
 8025458:	695b      	ldr	r3, [r3, #20]
 802545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802545e:	2b00      	cmp	r3, #0
 8025460:	d00b      	beq.n	802547a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8025462:	687b      	ldr	r3, [r7, #4]
 8025464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025466:	2201      	movs	r2, #1
 8025468:	409a      	lsls	r2, r3
 802546a:	693b      	ldr	r3, [r7, #16]
 802546c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802546e:	687b      	ldr	r3, [r7, #4]
 8025470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025472:	f043 0202 	orr.w	r2, r3, #2
 8025476:	687b      	ldr	r3, [r7, #4]
 8025478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802547a:	687b      	ldr	r3, [r7, #4]
 802547c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802547e:	2204      	movs	r2, #4
 8025480:	409a      	lsls	r2, r3
 8025482:	68fb      	ldr	r3, [r7, #12]
 8025484:	4013      	ands	r3, r2
 8025486:	2b00      	cmp	r3, #0
 8025488:	d012      	beq.n	80254b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 802548a:	687b      	ldr	r3, [r7, #4]
 802548c:	681b      	ldr	r3, [r3, #0]
 802548e:	681b      	ldr	r3, [r3, #0]
 8025490:	f003 0302 	and.w	r3, r3, #2
 8025494:	2b00      	cmp	r3, #0
 8025496:	d00b      	beq.n	80254b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8025498:	687b      	ldr	r3, [r7, #4]
 802549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802549c:	2204      	movs	r2, #4
 802549e:	409a      	lsls	r2, r3
 80254a0:	693b      	ldr	r3, [r7, #16]
 80254a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80254a4:	687b      	ldr	r3, [r7, #4]
 80254a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80254a8:	f043 0204 	orr.w	r2, r3, #4
 80254ac:	687b      	ldr	r3, [r7, #4]
 80254ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80254b0:	687b      	ldr	r3, [r7, #4]
 80254b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80254b4:	2210      	movs	r2, #16
 80254b6:	409a      	lsls	r2, r3
 80254b8:	68fb      	ldr	r3, [r7, #12]
 80254ba:	4013      	ands	r3, r2
 80254bc:	2b00      	cmp	r3, #0
 80254be:	d043      	beq.n	8025548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80254c0:	687b      	ldr	r3, [r7, #4]
 80254c2:	681b      	ldr	r3, [r3, #0]
 80254c4:	681b      	ldr	r3, [r3, #0]
 80254c6:	f003 0308 	and.w	r3, r3, #8
 80254ca:	2b00      	cmp	r3, #0
 80254cc:	d03c      	beq.n	8025548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80254ce:	687b      	ldr	r3, [r7, #4]
 80254d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80254d2:	2210      	movs	r2, #16
 80254d4:	409a      	lsls	r2, r3
 80254d6:	693b      	ldr	r3, [r7, #16]
 80254d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80254da:	687b      	ldr	r3, [r7, #4]
 80254dc:	681b      	ldr	r3, [r3, #0]
 80254de:	681b      	ldr	r3, [r3, #0]
 80254e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80254e4:	2b00      	cmp	r3, #0
 80254e6:	d018      	beq.n	802551a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80254e8:	687b      	ldr	r3, [r7, #4]
 80254ea:	681b      	ldr	r3, [r3, #0]
 80254ec:	681b      	ldr	r3, [r3, #0]
 80254ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80254f2:	2b00      	cmp	r3, #0
 80254f4:	d108      	bne.n	8025508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80254f6:	687b      	ldr	r3, [r7, #4]
 80254f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80254fa:	2b00      	cmp	r3, #0
 80254fc:	d024      	beq.n	8025548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80254fe:	687b      	ldr	r3, [r7, #4]
 8025500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025502:	6878      	ldr	r0, [r7, #4]
 8025504:	4798      	blx	r3
 8025506:	e01f      	b.n	8025548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8025508:	687b      	ldr	r3, [r7, #4]
 802550a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802550c:	2b00      	cmp	r3, #0
 802550e:	d01b      	beq.n	8025548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8025510:	687b      	ldr	r3, [r7, #4]
 8025512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025514:	6878      	ldr	r0, [r7, #4]
 8025516:	4798      	blx	r3
 8025518:	e016      	b.n	8025548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802551a:	687b      	ldr	r3, [r7, #4]
 802551c:	681b      	ldr	r3, [r3, #0]
 802551e:	681b      	ldr	r3, [r3, #0]
 8025520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025524:	2b00      	cmp	r3, #0
 8025526:	d107      	bne.n	8025538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8025528:	687b      	ldr	r3, [r7, #4]
 802552a:	681b      	ldr	r3, [r3, #0]
 802552c:	681a      	ldr	r2, [r3, #0]
 802552e:	687b      	ldr	r3, [r7, #4]
 8025530:	681b      	ldr	r3, [r3, #0]
 8025532:	f022 0208 	bic.w	r2, r2, #8
 8025536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8025538:	687b      	ldr	r3, [r7, #4]
 802553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802553c:	2b00      	cmp	r3, #0
 802553e:	d003      	beq.n	8025548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8025540:	687b      	ldr	r3, [r7, #4]
 8025542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025544:	6878      	ldr	r0, [r7, #4]
 8025546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8025548:	687b      	ldr	r3, [r7, #4]
 802554a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802554c:	2220      	movs	r2, #32
 802554e:	409a      	lsls	r2, r3
 8025550:	68fb      	ldr	r3, [r7, #12]
 8025552:	4013      	ands	r3, r2
 8025554:	2b00      	cmp	r3, #0
 8025556:	f000 808e 	beq.w	8025676 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 802555a:	687b      	ldr	r3, [r7, #4]
 802555c:	681b      	ldr	r3, [r3, #0]
 802555e:	681b      	ldr	r3, [r3, #0]
 8025560:	f003 0310 	and.w	r3, r3, #16
 8025564:	2b00      	cmp	r3, #0
 8025566:	f000 8086 	beq.w	8025676 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 802556a:	687b      	ldr	r3, [r7, #4]
 802556c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802556e:	2220      	movs	r2, #32
 8025570:	409a      	lsls	r2, r3
 8025572:	693b      	ldr	r3, [r7, #16]
 8025574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8025576:	687b      	ldr	r3, [r7, #4]
 8025578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802557c:	b2db      	uxtb	r3, r3
 802557e:	2b05      	cmp	r3, #5
 8025580:	d136      	bne.n	80255f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8025582:	687b      	ldr	r3, [r7, #4]
 8025584:	681b      	ldr	r3, [r3, #0]
 8025586:	681a      	ldr	r2, [r3, #0]
 8025588:	687b      	ldr	r3, [r7, #4]
 802558a:	681b      	ldr	r3, [r3, #0]
 802558c:	f022 0216 	bic.w	r2, r2, #22
 8025590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8025592:	687b      	ldr	r3, [r7, #4]
 8025594:	681b      	ldr	r3, [r3, #0]
 8025596:	695a      	ldr	r2, [r3, #20]
 8025598:	687b      	ldr	r3, [r7, #4]
 802559a:	681b      	ldr	r3, [r3, #0]
 802559c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80255a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80255a2:	687b      	ldr	r3, [r7, #4]
 80255a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80255a6:	2b00      	cmp	r3, #0
 80255a8:	d103      	bne.n	80255b2 <HAL_DMA_IRQHandler+0x1da>
 80255aa:	687b      	ldr	r3, [r7, #4]
 80255ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80255ae:	2b00      	cmp	r3, #0
 80255b0:	d007      	beq.n	80255c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80255b2:	687b      	ldr	r3, [r7, #4]
 80255b4:	681b      	ldr	r3, [r3, #0]
 80255b6:	681a      	ldr	r2, [r3, #0]
 80255b8:	687b      	ldr	r3, [r7, #4]
 80255ba:	681b      	ldr	r3, [r3, #0]
 80255bc:	f022 0208 	bic.w	r2, r2, #8
 80255c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80255c2:	687b      	ldr	r3, [r7, #4]
 80255c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80255c6:	223f      	movs	r2, #63	; 0x3f
 80255c8:	409a      	lsls	r2, r3
 80255ca:	693b      	ldr	r3, [r7, #16]
 80255cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80255ce:	687b      	ldr	r3, [r7, #4]
 80255d0:	2200      	movs	r2, #0
 80255d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80255d6:	687b      	ldr	r3, [r7, #4]
 80255d8:	2201      	movs	r2, #1
 80255da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80255de:	687b      	ldr	r3, [r7, #4]
 80255e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	d07d      	beq.n	80256e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80255e6:	687b      	ldr	r3, [r7, #4]
 80255e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80255ea:	6878      	ldr	r0, [r7, #4]
 80255ec:	4798      	blx	r3
        }
        return;
 80255ee:	e078      	b.n	80256e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80255f0:	687b      	ldr	r3, [r7, #4]
 80255f2:	681b      	ldr	r3, [r3, #0]
 80255f4:	681b      	ldr	r3, [r3, #0]
 80255f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80255fa:	2b00      	cmp	r3, #0
 80255fc:	d01c      	beq.n	8025638 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80255fe:	687b      	ldr	r3, [r7, #4]
 8025600:	681b      	ldr	r3, [r3, #0]
 8025602:	681b      	ldr	r3, [r3, #0]
 8025604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025608:	2b00      	cmp	r3, #0
 802560a:	d108      	bne.n	802561e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802560c:	687b      	ldr	r3, [r7, #4]
 802560e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025610:	2b00      	cmp	r3, #0
 8025612:	d030      	beq.n	8025676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8025614:	687b      	ldr	r3, [r7, #4]
 8025616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025618:	6878      	ldr	r0, [r7, #4]
 802561a:	4798      	blx	r3
 802561c:	e02b      	b.n	8025676 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802561e:	687b      	ldr	r3, [r7, #4]
 8025620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025622:	2b00      	cmp	r3, #0
 8025624:	d027      	beq.n	8025676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8025626:	687b      	ldr	r3, [r7, #4]
 8025628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802562a:	6878      	ldr	r0, [r7, #4]
 802562c:	4798      	blx	r3
 802562e:	e022      	b.n	8025676 <HAL_DMA_IRQHandler+0x29e>
 8025630:	20000000 	.word	0x20000000
 8025634:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8025638:	687b      	ldr	r3, [r7, #4]
 802563a:	681b      	ldr	r3, [r3, #0]
 802563c:	681b      	ldr	r3, [r3, #0]
 802563e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025642:	2b00      	cmp	r3, #0
 8025644:	d10f      	bne.n	8025666 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8025646:	687b      	ldr	r3, [r7, #4]
 8025648:	681b      	ldr	r3, [r3, #0]
 802564a:	681a      	ldr	r2, [r3, #0]
 802564c:	687b      	ldr	r3, [r7, #4]
 802564e:	681b      	ldr	r3, [r3, #0]
 8025650:	f022 0210 	bic.w	r2, r2, #16
 8025654:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8025656:	687b      	ldr	r3, [r7, #4]
 8025658:	2200      	movs	r2, #0
 802565a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802565e:	687b      	ldr	r3, [r7, #4]
 8025660:	2201      	movs	r2, #1
 8025662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8025666:	687b      	ldr	r3, [r7, #4]
 8025668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802566a:	2b00      	cmp	r3, #0
 802566c:	d003      	beq.n	8025676 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802566e:	687b      	ldr	r3, [r7, #4]
 8025670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025672:	6878      	ldr	r0, [r7, #4]
 8025674:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8025676:	687b      	ldr	r3, [r7, #4]
 8025678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802567a:	2b00      	cmp	r3, #0
 802567c:	d032      	beq.n	80256e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802567e:	687b      	ldr	r3, [r7, #4]
 8025680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025682:	f003 0301 	and.w	r3, r3, #1
 8025686:	2b00      	cmp	r3, #0
 8025688:	d022      	beq.n	80256d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 802568a:	687b      	ldr	r3, [r7, #4]
 802568c:	2205      	movs	r2, #5
 802568e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8025692:	687b      	ldr	r3, [r7, #4]
 8025694:	681b      	ldr	r3, [r3, #0]
 8025696:	681a      	ldr	r2, [r3, #0]
 8025698:	687b      	ldr	r3, [r7, #4]
 802569a:	681b      	ldr	r3, [r3, #0]
 802569c:	f022 0201 	bic.w	r2, r2, #1
 80256a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80256a2:	68bb      	ldr	r3, [r7, #8]
 80256a4:	3301      	adds	r3, #1
 80256a6:	60bb      	str	r3, [r7, #8]
 80256a8:	697a      	ldr	r2, [r7, #20]
 80256aa:	429a      	cmp	r2, r3
 80256ac:	d307      	bcc.n	80256be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80256ae:	687b      	ldr	r3, [r7, #4]
 80256b0:	681b      	ldr	r3, [r3, #0]
 80256b2:	681b      	ldr	r3, [r3, #0]
 80256b4:	f003 0301 	and.w	r3, r3, #1
 80256b8:	2b00      	cmp	r3, #0
 80256ba:	d1f2      	bne.n	80256a2 <HAL_DMA_IRQHandler+0x2ca>
 80256bc:	e000      	b.n	80256c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80256be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80256c0:	687b      	ldr	r3, [r7, #4]
 80256c2:	2200      	movs	r2, #0
 80256c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80256c8:	687b      	ldr	r3, [r7, #4]
 80256ca:	2201      	movs	r2, #1
 80256cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80256d0:	687b      	ldr	r3, [r7, #4]
 80256d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80256d4:	2b00      	cmp	r3, #0
 80256d6:	d005      	beq.n	80256e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80256d8:	687b      	ldr	r3, [r7, #4]
 80256da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80256dc:	6878      	ldr	r0, [r7, #4]
 80256de:	4798      	blx	r3
 80256e0:	e000      	b.n	80256e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80256e2:	bf00      	nop
    }
  }
}
 80256e4:	3718      	adds	r7, #24
 80256e6:	46bd      	mov	sp, r7
 80256e8:	bd80      	pop	{r7, pc}
 80256ea:	bf00      	nop

080256ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80256ec:	b480      	push	{r7}
 80256ee:	b089      	sub	sp, #36	; 0x24
 80256f0:	af00      	add	r7, sp, #0
 80256f2:	6078      	str	r0, [r7, #4]
 80256f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80256f6:	2300      	movs	r3, #0
 80256f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80256fa:	2300      	movs	r3, #0
 80256fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80256fe:	2300      	movs	r3, #0
 8025700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8025702:	2300      	movs	r3, #0
 8025704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8025706:	2300      	movs	r3, #0
 8025708:	61fb      	str	r3, [r7, #28]
 802570a:	e175      	b.n	80259f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 802570c:	2201      	movs	r2, #1
 802570e:	69fb      	ldr	r3, [r7, #28]
 8025710:	fa02 f303 	lsl.w	r3, r2, r3
 8025714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8025716:	683b      	ldr	r3, [r7, #0]
 8025718:	681b      	ldr	r3, [r3, #0]
 802571a:	697a      	ldr	r2, [r7, #20]
 802571c:	4013      	ands	r3, r2
 802571e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8025720:	693a      	ldr	r2, [r7, #16]
 8025722:	697b      	ldr	r3, [r7, #20]
 8025724:	429a      	cmp	r2, r3
 8025726:	f040 8164 	bne.w	80259f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802572a:	683b      	ldr	r3, [r7, #0]
 802572c:	685b      	ldr	r3, [r3, #4]
 802572e:	2b01      	cmp	r3, #1
 8025730:	d00b      	beq.n	802574a <HAL_GPIO_Init+0x5e>
 8025732:	683b      	ldr	r3, [r7, #0]
 8025734:	685b      	ldr	r3, [r3, #4]
 8025736:	2b02      	cmp	r3, #2
 8025738:	d007      	beq.n	802574a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802573a:	683b      	ldr	r3, [r7, #0]
 802573c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802573e:	2b11      	cmp	r3, #17
 8025740:	d003      	beq.n	802574a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8025742:	683b      	ldr	r3, [r7, #0]
 8025744:	685b      	ldr	r3, [r3, #4]
 8025746:	2b12      	cmp	r3, #18
 8025748:	d130      	bne.n	80257ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802574a:	687b      	ldr	r3, [r7, #4]
 802574c:	689b      	ldr	r3, [r3, #8]
 802574e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8025750:	69fb      	ldr	r3, [r7, #28]
 8025752:	005b      	lsls	r3, r3, #1
 8025754:	2203      	movs	r2, #3
 8025756:	fa02 f303 	lsl.w	r3, r2, r3
 802575a:	43db      	mvns	r3, r3
 802575c:	69ba      	ldr	r2, [r7, #24]
 802575e:	4013      	ands	r3, r2
 8025760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8025762:	683b      	ldr	r3, [r7, #0]
 8025764:	68da      	ldr	r2, [r3, #12]
 8025766:	69fb      	ldr	r3, [r7, #28]
 8025768:	005b      	lsls	r3, r3, #1
 802576a:	fa02 f303 	lsl.w	r3, r2, r3
 802576e:	69ba      	ldr	r2, [r7, #24]
 8025770:	4313      	orrs	r3, r2
 8025772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8025774:	687b      	ldr	r3, [r7, #4]
 8025776:	69ba      	ldr	r2, [r7, #24]
 8025778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802577a:	687b      	ldr	r3, [r7, #4]
 802577c:	685b      	ldr	r3, [r3, #4]
 802577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8025780:	2201      	movs	r2, #1
 8025782:	69fb      	ldr	r3, [r7, #28]
 8025784:	fa02 f303 	lsl.w	r3, r2, r3
 8025788:	43db      	mvns	r3, r3
 802578a:	69ba      	ldr	r2, [r7, #24]
 802578c:	4013      	ands	r3, r2
 802578e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8025790:	683b      	ldr	r3, [r7, #0]
 8025792:	685b      	ldr	r3, [r3, #4]
 8025794:	091b      	lsrs	r3, r3, #4
 8025796:	f003 0201 	and.w	r2, r3, #1
 802579a:	69fb      	ldr	r3, [r7, #28]
 802579c:	fa02 f303 	lsl.w	r3, r2, r3
 80257a0:	69ba      	ldr	r2, [r7, #24]
 80257a2:	4313      	orrs	r3, r2
 80257a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80257a6:	687b      	ldr	r3, [r7, #4]
 80257a8:	69ba      	ldr	r2, [r7, #24]
 80257aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80257ac:	687b      	ldr	r3, [r7, #4]
 80257ae:	68db      	ldr	r3, [r3, #12]
 80257b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80257b2:	69fb      	ldr	r3, [r7, #28]
 80257b4:	005b      	lsls	r3, r3, #1
 80257b6:	2203      	movs	r2, #3
 80257b8:	fa02 f303 	lsl.w	r3, r2, r3
 80257bc:	43db      	mvns	r3, r3
 80257be:	69ba      	ldr	r2, [r7, #24]
 80257c0:	4013      	ands	r3, r2
 80257c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80257c4:	683b      	ldr	r3, [r7, #0]
 80257c6:	689a      	ldr	r2, [r3, #8]
 80257c8:	69fb      	ldr	r3, [r7, #28]
 80257ca:	005b      	lsls	r3, r3, #1
 80257cc:	fa02 f303 	lsl.w	r3, r2, r3
 80257d0:	69ba      	ldr	r2, [r7, #24]
 80257d2:	4313      	orrs	r3, r2
 80257d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80257d6:	687b      	ldr	r3, [r7, #4]
 80257d8:	69ba      	ldr	r2, [r7, #24]
 80257da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80257dc:	683b      	ldr	r3, [r7, #0]
 80257de:	685b      	ldr	r3, [r3, #4]
 80257e0:	2b02      	cmp	r3, #2
 80257e2:	d003      	beq.n	80257ec <HAL_GPIO_Init+0x100>
 80257e4:	683b      	ldr	r3, [r7, #0]
 80257e6:	685b      	ldr	r3, [r3, #4]
 80257e8:	2b12      	cmp	r3, #18
 80257ea:	d123      	bne.n	8025834 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80257ec:	69fb      	ldr	r3, [r7, #28]
 80257ee:	08da      	lsrs	r2, r3, #3
 80257f0:	687b      	ldr	r3, [r7, #4]
 80257f2:	3208      	adds	r2, #8
 80257f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80257f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80257fa:	69fb      	ldr	r3, [r7, #28]
 80257fc:	f003 0307 	and.w	r3, r3, #7
 8025800:	009b      	lsls	r3, r3, #2
 8025802:	220f      	movs	r2, #15
 8025804:	fa02 f303 	lsl.w	r3, r2, r3
 8025808:	43db      	mvns	r3, r3
 802580a:	69ba      	ldr	r2, [r7, #24]
 802580c:	4013      	ands	r3, r2
 802580e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8025810:	683b      	ldr	r3, [r7, #0]
 8025812:	691a      	ldr	r2, [r3, #16]
 8025814:	69fb      	ldr	r3, [r7, #28]
 8025816:	f003 0307 	and.w	r3, r3, #7
 802581a:	009b      	lsls	r3, r3, #2
 802581c:	fa02 f303 	lsl.w	r3, r2, r3
 8025820:	69ba      	ldr	r2, [r7, #24]
 8025822:	4313      	orrs	r3, r2
 8025824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8025826:	69fb      	ldr	r3, [r7, #28]
 8025828:	08da      	lsrs	r2, r3, #3
 802582a:	687b      	ldr	r3, [r7, #4]
 802582c:	3208      	adds	r2, #8
 802582e:	69b9      	ldr	r1, [r7, #24]
 8025830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8025834:	687b      	ldr	r3, [r7, #4]
 8025836:	681b      	ldr	r3, [r3, #0]
 8025838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 802583a:	69fb      	ldr	r3, [r7, #28]
 802583c:	005b      	lsls	r3, r3, #1
 802583e:	2203      	movs	r2, #3
 8025840:	fa02 f303 	lsl.w	r3, r2, r3
 8025844:	43db      	mvns	r3, r3
 8025846:	69ba      	ldr	r2, [r7, #24]
 8025848:	4013      	ands	r3, r2
 802584a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 802584c:	683b      	ldr	r3, [r7, #0]
 802584e:	685b      	ldr	r3, [r3, #4]
 8025850:	f003 0203 	and.w	r2, r3, #3
 8025854:	69fb      	ldr	r3, [r7, #28]
 8025856:	005b      	lsls	r3, r3, #1
 8025858:	fa02 f303 	lsl.w	r3, r2, r3
 802585c:	69ba      	ldr	r2, [r7, #24]
 802585e:	4313      	orrs	r3, r2
 8025860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8025862:	687b      	ldr	r3, [r7, #4]
 8025864:	69ba      	ldr	r2, [r7, #24]
 8025866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8025868:	683b      	ldr	r3, [r7, #0]
 802586a:	685b      	ldr	r3, [r3, #4]
 802586c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025870:	2b00      	cmp	r3, #0
 8025872:	f000 80be 	beq.w	80259f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025876:	4b65      	ldr	r3, [pc, #404]	; (8025a0c <HAL_GPIO_Init+0x320>)
 8025878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802587a:	4a64      	ldr	r2, [pc, #400]	; (8025a0c <HAL_GPIO_Init+0x320>)
 802587c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025880:	6453      	str	r3, [r2, #68]	; 0x44
 8025882:	4b62      	ldr	r3, [pc, #392]	; (8025a0c <HAL_GPIO_Init+0x320>)
 8025884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802588a:	60fb      	str	r3, [r7, #12]
 802588c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 802588e:	4a60      	ldr	r2, [pc, #384]	; (8025a10 <HAL_GPIO_Init+0x324>)
 8025890:	69fb      	ldr	r3, [r7, #28]
 8025892:	089b      	lsrs	r3, r3, #2
 8025894:	3302      	adds	r3, #2
 8025896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802589a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 802589c:	69fb      	ldr	r3, [r7, #28]
 802589e:	f003 0303 	and.w	r3, r3, #3
 80258a2:	009b      	lsls	r3, r3, #2
 80258a4:	220f      	movs	r2, #15
 80258a6:	fa02 f303 	lsl.w	r3, r2, r3
 80258aa:	43db      	mvns	r3, r3
 80258ac:	69ba      	ldr	r2, [r7, #24]
 80258ae:	4013      	ands	r3, r2
 80258b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80258b2:	687b      	ldr	r3, [r7, #4]
 80258b4:	4a57      	ldr	r2, [pc, #348]	; (8025a14 <HAL_GPIO_Init+0x328>)
 80258b6:	4293      	cmp	r3, r2
 80258b8:	d037      	beq.n	802592a <HAL_GPIO_Init+0x23e>
 80258ba:	687b      	ldr	r3, [r7, #4]
 80258bc:	4a56      	ldr	r2, [pc, #344]	; (8025a18 <HAL_GPIO_Init+0x32c>)
 80258be:	4293      	cmp	r3, r2
 80258c0:	d031      	beq.n	8025926 <HAL_GPIO_Init+0x23a>
 80258c2:	687b      	ldr	r3, [r7, #4]
 80258c4:	4a55      	ldr	r2, [pc, #340]	; (8025a1c <HAL_GPIO_Init+0x330>)
 80258c6:	4293      	cmp	r3, r2
 80258c8:	d02b      	beq.n	8025922 <HAL_GPIO_Init+0x236>
 80258ca:	687b      	ldr	r3, [r7, #4]
 80258cc:	4a54      	ldr	r2, [pc, #336]	; (8025a20 <HAL_GPIO_Init+0x334>)
 80258ce:	4293      	cmp	r3, r2
 80258d0:	d025      	beq.n	802591e <HAL_GPIO_Init+0x232>
 80258d2:	687b      	ldr	r3, [r7, #4]
 80258d4:	4a53      	ldr	r2, [pc, #332]	; (8025a24 <HAL_GPIO_Init+0x338>)
 80258d6:	4293      	cmp	r3, r2
 80258d8:	d01f      	beq.n	802591a <HAL_GPIO_Init+0x22e>
 80258da:	687b      	ldr	r3, [r7, #4]
 80258dc:	4a52      	ldr	r2, [pc, #328]	; (8025a28 <HAL_GPIO_Init+0x33c>)
 80258de:	4293      	cmp	r3, r2
 80258e0:	d019      	beq.n	8025916 <HAL_GPIO_Init+0x22a>
 80258e2:	687b      	ldr	r3, [r7, #4]
 80258e4:	4a51      	ldr	r2, [pc, #324]	; (8025a2c <HAL_GPIO_Init+0x340>)
 80258e6:	4293      	cmp	r3, r2
 80258e8:	d013      	beq.n	8025912 <HAL_GPIO_Init+0x226>
 80258ea:	687b      	ldr	r3, [r7, #4]
 80258ec:	4a50      	ldr	r2, [pc, #320]	; (8025a30 <HAL_GPIO_Init+0x344>)
 80258ee:	4293      	cmp	r3, r2
 80258f0:	d00d      	beq.n	802590e <HAL_GPIO_Init+0x222>
 80258f2:	687b      	ldr	r3, [r7, #4]
 80258f4:	4a4f      	ldr	r2, [pc, #316]	; (8025a34 <HAL_GPIO_Init+0x348>)
 80258f6:	4293      	cmp	r3, r2
 80258f8:	d007      	beq.n	802590a <HAL_GPIO_Init+0x21e>
 80258fa:	687b      	ldr	r3, [r7, #4]
 80258fc:	4a4e      	ldr	r2, [pc, #312]	; (8025a38 <HAL_GPIO_Init+0x34c>)
 80258fe:	4293      	cmp	r3, r2
 8025900:	d101      	bne.n	8025906 <HAL_GPIO_Init+0x21a>
 8025902:	2309      	movs	r3, #9
 8025904:	e012      	b.n	802592c <HAL_GPIO_Init+0x240>
 8025906:	230a      	movs	r3, #10
 8025908:	e010      	b.n	802592c <HAL_GPIO_Init+0x240>
 802590a:	2308      	movs	r3, #8
 802590c:	e00e      	b.n	802592c <HAL_GPIO_Init+0x240>
 802590e:	2307      	movs	r3, #7
 8025910:	e00c      	b.n	802592c <HAL_GPIO_Init+0x240>
 8025912:	2306      	movs	r3, #6
 8025914:	e00a      	b.n	802592c <HAL_GPIO_Init+0x240>
 8025916:	2305      	movs	r3, #5
 8025918:	e008      	b.n	802592c <HAL_GPIO_Init+0x240>
 802591a:	2304      	movs	r3, #4
 802591c:	e006      	b.n	802592c <HAL_GPIO_Init+0x240>
 802591e:	2303      	movs	r3, #3
 8025920:	e004      	b.n	802592c <HAL_GPIO_Init+0x240>
 8025922:	2302      	movs	r3, #2
 8025924:	e002      	b.n	802592c <HAL_GPIO_Init+0x240>
 8025926:	2301      	movs	r3, #1
 8025928:	e000      	b.n	802592c <HAL_GPIO_Init+0x240>
 802592a:	2300      	movs	r3, #0
 802592c:	69fa      	ldr	r2, [r7, #28]
 802592e:	f002 0203 	and.w	r2, r2, #3
 8025932:	0092      	lsls	r2, r2, #2
 8025934:	4093      	lsls	r3, r2
 8025936:	69ba      	ldr	r2, [r7, #24]
 8025938:	4313      	orrs	r3, r2
 802593a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 802593c:	4934      	ldr	r1, [pc, #208]	; (8025a10 <HAL_GPIO_Init+0x324>)
 802593e:	69fb      	ldr	r3, [r7, #28]
 8025940:	089b      	lsrs	r3, r3, #2
 8025942:	3302      	adds	r3, #2
 8025944:	69ba      	ldr	r2, [r7, #24]
 8025946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802594a:	4b3c      	ldr	r3, [pc, #240]	; (8025a3c <HAL_GPIO_Init+0x350>)
 802594c:	681b      	ldr	r3, [r3, #0]
 802594e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025950:	693b      	ldr	r3, [r7, #16]
 8025952:	43db      	mvns	r3, r3
 8025954:	69ba      	ldr	r2, [r7, #24]
 8025956:	4013      	ands	r3, r2
 8025958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802595a:	683b      	ldr	r3, [r7, #0]
 802595c:	685b      	ldr	r3, [r3, #4]
 802595e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025962:	2b00      	cmp	r3, #0
 8025964:	d003      	beq.n	802596e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8025966:	69ba      	ldr	r2, [r7, #24]
 8025968:	693b      	ldr	r3, [r7, #16]
 802596a:	4313      	orrs	r3, r2
 802596c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802596e:	4a33      	ldr	r2, [pc, #204]	; (8025a3c <HAL_GPIO_Init+0x350>)
 8025970:	69bb      	ldr	r3, [r7, #24]
 8025972:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8025974:	4b31      	ldr	r3, [pc, #196]	; (8025a3c <HAL_GPIO_Init+0x350>)
 8025976:	685b      	ldr	r3, [r3, #4]
 8025978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802597a:	693b      	ldr	r3, [r7, #16]
 802597c:	43db      	mvns	r3, r3
 802597e:	69ba      	ldr	r2, [r7, #24]
 8025980:	4013      	ands	r3, r2
 8025982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8025984:	683b      	ldr	r3, [r7, #0]
 8025986:	685b      	ldr	r3, [r3, #4]
 8025988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802598c:	2b00      	cmp	r3, #0
 802598e:	d003      	beq.n	8025998 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8025990:	69ba      	ldr	r2, [r7, #24]
 8025992:	693b      	ldr	r3, [r7, #16]
 8025994:	4313      	orrs	r3, r2
 8025996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8025998:	4a28      	ldr	r2, [pc, #160]	; (8025a3c <HAL_GPIO_Init+0x350>)
 802599a:	69bb      	ldr	r3, [r7, #24]
 802599c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802599e:	4b27      	ldr	r3, [pc, #156]	; (8025a3c <HAL_GPIO_Init+0x350>)
 80259a0:	689b      	ldr	r3, [r3, #8]
 80259a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80259a4:	693b      	ldr	r3, [r7, #16]
 80259a6:	43db      	mvns	r3, r3
 80259a8:	69ba      	ldr	r2, [r7, #24]
 80259aa:	4013      	ands	r3, r2
 80259ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80259ae:	683b      	ldr	r3, [r7, #0]
 80259b0:	685b      	ldr	r3, [r3, #4]
 80259b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80259b6:	2b00      	cmp	r3, #0
 80259b8:	d003      	beq.n	80259c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80259ba:	69ba      	ldr	r2, [r7, #24]
 80259bc:	693b      	ldr	r3, [r7, #16]
 80259be:	4313      	orrs	r3, r2
 80259c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80259c2:	4a1e      	ldr	r2, [pc, #120]	; (8025a3c <HAL_GPIO_Init+0x350>)
 80259c4:	69bb      	ldr	r3, [r7, #24]
 80259c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80259c8:	4b1c      	ldr	r3, [pc, #112]	; (8025a3c <HAL_GPIO_Init+0x350>)
 80259ca:	68db      	ldr	r3, [r3, #12]
 80259cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80259ce:	693b      	ldr	r3, [r7, #16]
 80259d0:	43db      	mvns	r3, r3
 80259d2:	69ba      	ldr	r2, [r7, #24]
 80259d4:	4013      	ands	r3, r2
 80259d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80259d8:	683b      	ldr	r3, [r7, #0]
 80259da:	685b      	ldr	r3, [r3, #4]
 80259dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80259e0:	2b00      	cmp	r3, #0
 80259e2:	d003      	beq.n	80259ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80259e4:	69ba      	ldr	r2, [r7, #24]
 80259e6:	693b      	ldr	r3, [r7, #16]
 80259e8:	4313      	orrs	r3, r2
 80259ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80259ec:	4a13      	ldr	r2, [pc, #76]	; (8025a3c <HAL_GPIO_Init+0x350>)
 80259ee:	69bb      	ldr	r3, [r7, #24]
 80259f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80259f2:	69fb      	ldr	r3, [r7, #28]
 80259f4:	3301      	adds	r3, #1
 80259f6:	61fb      	str	r3, [r7, #28]
 80259f8:	69fb      	ldr	r3, [r7, #28]
 80259fa:	2b0f      	cmp	r3, #15
 80259fc:	f67f ae86 	bls.w	802570c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8025a00:	bf00      	nop
 8025a02:	3724      	adds	r7, #36	; 0x24
 8025a04:	46bd      	mov	sp, r7
 8025a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a0a:	4770      	bx	lr
 8025a0c:	40023800 	.word	0x40023800
 8025a10:	40013800 	.word	0x40013800
 8025a14:	40020000 	.word	0x40020000
 8025a18:	40020400 	.word	0x40020400
 8025a1c:	40020800 	.word	0x40020800
 8025a20:	40020c00 	.word	0x40020c00
 8025a24:	40021000 	.word	0x40021000
 8025a28:	40021400 	.word	0x40021400
 8025a2c:	40021800 	.word	0x40021800
 8025a30:	40021c00 	.word	0x40021c00
 8025a34:	40022000 	.word	0x40022000
 8025a38:	40022400 	.word	0x40022400
 8025a3c:	40013c00 	.word	0x40013c00

08025a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8025a40:	b480      	push	{r7}
 8025a42:	b083      	sub	sp, #12
 8025a44:	af00      	add	r7, sp, #0
 8025a46:	6078      	str	r0, [r7, #4]
 8025a48:	460b      	mov	r3, r1
 8025a4a:	807b      	strh	r3, [r7, #2]
 8025a4c:	4613      	mov	r3, r2
 8025a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8025a50:	787b      	ldrb	r3, [r7, #1]
 8025a52:	2b00      	cmp	r3, #0
 8025a54:	d003      	beq.n	8025a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8025a56:	887a      	ldrh	r2, [r7, #2]
 8025a58:	687b      	ldr	r3, [r7, #4]
 8025a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8025a5c:	e003      	b.n	8025a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8025a5e:	887b      	ldrh	r3, [r7, #2]
 8025a60:	041a      	lsls	r2, r3, #16
 8025a62:	687b      	ldr	r3, [r7, #4]
 8025a64:	619a      	str	r2, [r3, #24]
}
 8025a66:	bf00      	nop
 8025a68:	370c      	adds	r7, #12
 8025a6a:	46bd      	mov	sp, r7
 8025a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a70:	4770      	bx	lr
	...

08025a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8025a74:	b580      	push	{r7, lr}
 8025a76:	b082      	sub	sp, #8
 8025a78:	af00      	add	r7, sp, #0
 8025a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8025a7c:	687b      	ldr	r3, [r7, #4]
 8025a7e:	2b00      	cmp	r3, #0
 8025a80:	d101      	bne.n	8025a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8025a82:	2301      	movs	r3, #1
 8025a84:	e07f      	b.n	8025b86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8025a86:	687b      	ldr	r3, [r7, #4]
 8025a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025a8c:	b2db      	uxtb	r3, r3
 8025a8e:	2b00      	cmp	r3, #0
 8025a90:	d106      	bne.n	8025aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8025a92:	687b      	ldr	r3, [r7, #4]
 8025a94:	2200      	movs	r2, #0
 8025a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8025a9a:	6878      	ldr	r0, [r7, #4]
 8025a9c:	f7db f994 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8025aa0:	687b      	ldr	r3, [r7, #4]
 8025aa2:	2224      	movs	r2, #36	; 0x24
 8025aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8025aa8:	687b      	ldr	r3, [r7, #4]
 8025aaa:	681b      	ldr	r3, [r3, #0]
 8025aac:	681a      	ldr	r2, [r3, #0]
 8025aae:	687b      	ldr	r3, [r7, #4]
 8025ab0:	681b      	ldr	r3, [r3, #0]
 8025ab2:	f022 0201 	bic.w	r2, r2, #1
 8025ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8025ab8:	687b      	ldr	r3, [r7, #4]
 8025aba:	685a      	ldr	r2, [r3, #4]
 8025abc:	687b      	ldr	r3, [r7, #4]
 8025abe:	681b      	ldr	r3, [r3, #0]
 8025ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8025ac4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8025ac6:	687b      	ldr	r3, [r7, #4]
 8025ac8:	681b      	ldr	r3, [r3, #0]
 8025aca:	689a      	ldr	r2, [r3, #8]
 8025acc:	687b      	ldr	r3, [r7, #4]
 8025ace:	681b      	ldr	r3, [r3, #0]
 8025ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025ad4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8025ad6:	687b      	ldr	r3, [r7, #4]
 8025ad8:	68db      	ldr	r3, [r3, #12]
 8025ada:	2b01      	cmp	r3, #1
 8025adc:	d107      	bne.n	8025aee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8025ade:	687b      	ldr	r3, [r7, #4]
 8025ae0:	689a      	ldr	r2, [r3, #8]
 8025ae2:	687b      	ldr	r3, [r7, #4]
 8025ae4:	681b      	ldr	r3, [r3, #0]
 8025ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8025aea:	609a      	str	r2, [r3, #8]
 8025aec:	e006      	b.n	8025afc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8025aee:	687b      	ldr	r3, [r7, #4]
 8025af0:	689a      	ldr	r2, [r3, #8]
 8025af2:	687b      	ldr	r3, [r7, #4]
 8025af4:	681b      	ldr	r3, [r3, #0]
 8025af6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8025afa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8025afc:	687b      	ldr	r3, [r7, #4]
 8025afe:	68db      	ldr	r3, [r3, #12]
 8025b00:	2b02      	cmp	r3, #2
 8025b02:	d104      	bne.n	8025b0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8025b04:	687b      	ldr	r3, [r7, #4]
 8025b06:	681b      	ldr	r3, [r3, #0]
 8025b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025b0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8025b0e:	687b      	ldr	r3, [r7, #4]
 8025b10:	681b      	ldr	r3, [r3, #0]
 8025b12:	6859      	ldr	r1, [r3, #4]
 8025b14:	687b      	ldr	r3, [r7, #4]
 8025b16:	681a      	ldr	r2, [r3, #0]
 8025b18:	4b1d      	ldr	r3, [pc, #116]	; (8025b90 <HAL_I2C_Init+0x11c>)
 8025b1a:	430b      	orrs	r3, r1
 8025b1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8025b1e:	687b      	ldr	r3, [r7, #4]
 8025b20:	681b      	ldr	r3, [r3, #0]
 8025b22:	68da      	ldr	r2, [r3, #12]
 8025b24:	687b      	ldr	r3, [r7, #4]
 8025b26:	681b      	ldr	r3, [r3, #0]
 8025b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025b2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8025b2e:	687b      	ldr	r3, [r7, #4]
 8025b30:	691a      	ldr	r2, [r3, #16]
 8025b32:	687b      	ldr	r3, [r7, #4]
 8025b34:	695b      	ldr	r3, [r3, #20]
 8025b36:	ea42 0103 	orr.w	r1, r2, r3
 8025b3a:	687b      	ldr	r3, [r7, #4]
 8025b3c:	699b      	ldr	r3, [r3, #24]
 8025b3e:	021a      	lsls	r2, r3, #8
 8025b40:	687b      	ldr	r3, [r7, #4]
 8025b42:	681b      	ldr	r3, [r3, #0]
 8025b44:	430a      	orrs	r2, r1
 8025b46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8025b48:	687b      	ldr	r3, [r7, #4]
 8025b4a:	69d9      	ldr	r1, [r3, #28]
 8025b4c:	687b      	ldr	r3, [r7, #4]
 8025b4e:	6a1a      	ldr	r2, [r3, #32]
 8025b50:	687b      	ldr	r3, [r7, #4]
 8025b52:	681b      	ldr	r3, [r3, #0]
 8025b54:	430a      	orrs	r2, r1
 8025b56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8025b58:	687b      	ldr	r3, [r7, #4]
 8025b5a:	681b      	ldr	r3, [r3, #0]
 8025b5c:	681a      	ldr	r2, [r3, #0]
 8025b5e:	687b      	ldr	r3, [r7, #4]
 8025b60:	681b      	ldr	r3, [r3, #0]
 8025b62:	f042 0201 	orr.w	r2, r2, #1
 8025b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025b68:	687b      	ldr	r3, [r7, #4]
 8025b6a:	2200      	movs	r2, #0
 8025b6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8025b6e:	687b      	ldr	r3, [r7, #4]
 8025b70:	2220      	movs	r2, #32
 8025b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8025b76:	687b      	ldr	r3, [r7, #4]
 8025b78:	2200      	movs	r2, #0
 8025b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8025b7c:	687b      	ldr	r3, [r7, #4]
 8025b7e:	2200      	movs	r2, #0
 8025b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8025b84:	2300      	movs	r3, #0
}
 8025b86:	4618      	mov	r0, r3
 8025b88:	3708      	adds	r7, #8
 8025b8a:	46bd      	mov	sp, r7
 8025b8c:	bd80      	pop	{r7, pc}
 8025b8e:	bf00      	nop
 8025b90:	02008000 	.word	0x02008000

08025b94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8025b94:	b580      	push	{r7, lr}
 8025b96:	b088      	sub	sp, #32
 8025b98:	af02      	add	r7, sp, #8
 8025b9a:	60f8      	str	r0, [r7, #12]
 8025b9c:	4608      	mov	r0, r1
 8025b9e:	4611      	mov	r1, r2
 8025ba0:	461a      	mov	r2, r3
 8025ba2:	4603      	mov	r3, r0
 8025ba4:	817b      	strh	r3, [r7, #10]
 8025ba6:	460b      	mov	r3, r1
 8025ba8:	813b      	strh	r3, [r7, #8]
 8025baa:	4613      	mov	r3, r2
 8025bac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8025bae:	68fb      	ldr	r3, [r7, #12]
 8025bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025bb4:	b2db      	uxtb	r3, r3
 8025bb6:	2b20      	cmp	r3, #32
 8025bb8:	f040 80fd 	bne.w	8025db6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8025bbc:	6a3b      	ldr	r3, [r7, #32]
 8025bbe:	2b00      	cmp	r3, #0
 8025bc0:	d002      	beq.n	8025bc8 <HAL_I2C_Mem_Read+0x34>
 8025bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025bc4:	2b00      	cmp	r3, #0
 8025bc6:	d105      	bne.n	8025bd4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8025bc8:	68fb      	ldr	r3, [r7, #12]
 8025bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8025bce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8025bd0:	2301      	movs	r3, #1
 8025bd2:	e0f1      	b.n	8025db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8025bd4:	68fb      	ldr	r3, [r7, #12]
 8025bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8025bda:	2b01      	cmp	r3, #1
 8025bdc:	d101      	bne.n	8025be2 <HAL_I2C_Mem_Read+0x4e>
 8025bde:	2302      	movs	r3, #2
 8025be0:	e0ea      	b.n	8025db8 <HAL_I2C_Mem_Read+0x224>
 8025be2:	68fb      	ldr	r3, [r7, #12]
 8025be4:	2201      	movs	r2, #1
 8025be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8025bea:	f7ff fae5 	bl	80251b8 <HAL_GetTick>
 8025bee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8025bf0:	697b      	ldr	r3, [r7, #20]
 8025bf2:	9300      	str	r3, [sp, #0]
 8025bf4:	2319      	movs	r3, #25
 8025bf6:	2201      	movs	r2, #1
 8025bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025bfc:	68f8      	ldr	r0, [r7, #12]
 8025bfe:	f000 f975 	bl	8025eec <I2C_WaitOnFlagUntilTimeout>
 8025c02:	4603      	mov	r3, r0
 8025c04:	2b00      	cmp	r3, #0
 8025c06:	d001      	beq.n	8025c0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8025c08:	2301      	movs	r3, #1
 8025c0a:	e0d5      	b.n	8025db8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8025c0c:	68fb      	ldr	r3, [r7, #12]
 8025c0e:	2222      	movs	r2, #34	; 0x22
 8025c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8025c14:	68fb      	ldr	r3, [r7, #12]
 8025c16:	2240      	movs	r2, #64	; 0x40
 8025c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025c1c:	68fb      	ldr	r3, [r7, #12]
 8025c1e:	2200      	movs	r2, #0
 8025c20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8025c22:	68fb      	ldr	r3, [r7, #12]
 8025c24:	6a3a      	ldr	r2, [r7, #32]
 8025c26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8025c28:	68fb      	ldr	r3, [r7, #12]
 8025c2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8025c2e:	68fb      	ldr	r3, [r7, #12]
 8025c30:	2200      	movs	r2, #0
 8025c32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8025c34:	88f8      	ldrh	r0, [r7, #6]
 8025c36:	893a      	ldrh	r2, [r7, #8]
 8025c38:	8979      	ldrh	r1, [r7, #10]
 8025c3a:	697b      	ldr	r3, [r7, #20]
 8025c3c:	9301      	str	r3, [sp, #4]
 8025c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c40:	9300      	str	r3, [sp, #0]
 8025c42:	4603      	mov	r3, r0
 8025c44:	68f8      	ldr	r0, [r7, #12]
 8025c46:	f000 f8d9 	bl	8025dfc <I2C_RequestMemoryRead>
 8025c4a:	4603      	mov	r3, r0
 8025c4c:	2b00      	cmp	r3, #0
 8025c4e:	d005      	beq.n	8025c5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8025c50:	68fb      	ldr	r3, [r7, #12]
 8025c52:	2200      	movs	r2, #0
 8025c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8025c58:	2301      	movs	r3, #1
 8025c5a:	e0ad      	b.n	8025db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8025c5c:	68fb      	ldr	r3, [r7, #12]
 8025c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c60:	b29b      	uxth	r3, r3
 8025c62:	2bff      	cmp	r3, #255	; 0xff
 8025c64:	d90e      	bls.n	8025c84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8025c66:	68fb      	ldr	r3, [r7, #12]
 8025c68:	22ff      	movs	r2, #255	; 0xff
 8025c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8025c6c:	68fb      	ldr	r3, [r7, #12]
 8025c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025c70:	b2da      	uxtb	r2, r3
 8025c72:	8979      	ldrh	r1, [r7, #10]
 8025c74:	4b52      	ldr	r3, [pc, #328]	; (8025dc0 <HAL_I2C_Mem_Read+0x22c>)
 8025c76:	9300      	str	r3, [sp, #0]
 8025c78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8025c7c:	68f8      	ldr	r0, [r7, #12]
 8025c7e:	f000 fa57 	bl	8026130 <I2C_TransferConfig>
 8025c82:	e00f      	b.n	8025ca4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8025c84:	68fb      	ldr	r3, [r7, #12]
 8025c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c88:	b29a      	uxth	r2, r3
 8025c8a:	68fb      	ldr	r3, [r7, #12]
 8025c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8025c8e:	68fb      	ldr	r3, [r7, #12]
 8025c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025c92:	b2da      	uxtb	r2, r3
 8025c94:	8979      	ldrh	r1, [r7, #10]
 8025c96:	4b4a      	ldr	r3, [pc, #296]	; (8025dc0 <HAL_I2C_Mem_Read+0x22c>)
 8025c98:	9300      	str	r3, [sp, #0]
 8025c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8025c9e:	68f8      	ldr	r0, [r7, #12]
 8025ca0:	f000 fa46 	bl	8026130 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8025ca4:	697b      	ldr	r3, [r7, #20]
 8025ca6:	9300      	str	r3, [sp, #0]
 8025ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025caa:	2200      	movs	r2, #0
 8025cac:	2104      	movs	r1, #4
 8025cae:	68f8      	ldr	r0, [r7, #12]
 8025cb0:	f000 f91c 	bl	8025eec <I2C_WaitOnFlagUntilTimeout>
 8025cb4:	4603      	mov	r3, r0
 8025cb6:	2b00      	cmp	r3, #0
 8025cb8:	d001      	beq.n	8025cbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8025cba:	2301      	movs	r3, #1
 8025cbc:	e07c      	b.n	8025db8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8025cbe:	68fb      	ldr	r3, [r7, #12]
 8025cc0:	681b      	ldr	r3, [r3, #0]
 8025cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025cc4:	68fb      	ldr	r3, [r7, #12]
 8025cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025cc8:	b2d2      	uxtb	r2, r2
 8025cca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8025ccc:	68fb      	ldr	r3, [r7, #12]
 8025cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025cd0:	1c5a      	adds	r2, r3, #1
 8025cd2:	68fb      	ldr	r3, [r7, #12]
 8025cd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8025cd6:	68fb      	ldr	r3, [r7, #12]
 8025cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025cda:	3b01      	subs	r3, #1
 8025cdc:	b29a      	uxth	r2, r3
 8025cde:	68fb      	ldr	r3, [r7, #12]
 8025ce0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8025ce2:	68fb      	ldr	r3, [r7, #12]
 8025ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025ce6:	b29b      	uxth	r3, r3
 8025ce8:	3b01      	subs	r3, #1
 8025cea:	b29a      	uxth	r2, r3
 8025cec:	68fb      	ldr	r3, [r7, #12]
 8025cee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8025cf0:	68fb      	ldr	r3, [r7, #12]
 8025cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025cf4:	b29b      	uxth	r3, r3
 8025cf6:	2b00      	cmp	r3, #0
 8025cf8:	d034      	beq.n	8025d64 <HAL_I2C_Mem_Read+0x1d0>
 8025cfa:	68fb      	ldr	r3, [r7, #12]
 8025cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025cfe:	2b00      	cmp	r3, #0
 8025d00:	d130      	bne.n	8025d64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8025d02:	697b      	ldr	r3, [r7, #20]
 8025d04:	9300      	str	r3, [sp, #0]
 8025d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d08:	2200      	movs	r2, #0
 8025d0a:	2180      	movs	r1, #128	; 0x80
 8025d0c:	68f8      	ldr	r0, [r7, #12]
 8025d0e:	f000 f8ed 	bl	8025eec <I2C_WaitOnFlagUntilTimeout>
 8025d12:	4603      	mov	r3, r0
 8025d14:	2b00      	cmp	r3, #0
 8025d16:	d001      	beq.n	8025d1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8025d18:	2301      	movs	r3, #1
 8025d1a:	e04d      	b.n	8025db8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8025d1c:	68fb      	ldr	r3, [r7, #12]
 8025d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025d20:	b29b      	uxth	r3, r3
 8025d22:	2bff      	cmp	r3, #255	; 0xff
 8025d24:	d90e      	bls.n	8025d44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8025d26:	68fb      	ldr	r3, [r7, #12]
 8025d28:	22ff      	movs	r2, #255	; 0xff
 8025d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8025d2c:	68fb      	ldr	r3, [r7, #12]
 8025d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025d30:	b2da      	uxtb	r2, r3
 8025d32:	8979      	ldrh	r1, [r7, #10]
 8025d34:	2300      	movs	r3, #0
 8025d36:	9300      	str	r3, [sp, #0]
 8025d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8025d3c:	68f8      	ldr	r0, [r7, #12]
 8025d3e:	f000 f9f7 	bl	8026130 <I2C_TransferConfig>
 8025d42:	e00f      	b.n	8025d64 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8025d44:	68fb      	ldr	r3, [r7, #12]
 8025d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025d48:	b29a      	uxth	r2, r3
 8025d4a:	68fb      	ldr	r3, [r7, #12]
 8025d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8025d4e:	68fb      	ldr	r3, [r7, #12]
 8025d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025d52:	b2da      	uxtb	r2, r3
 8025d54:	8979      	ldrh	r1, [r7, #10]
 8025d56:	2300      	movs	r3, #0
 8025d58:	9300      	str	r3, [sp, #0]
 8025d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8025d5e:	68f8      	ldr	r0, [r7, #12]
 8025d60:	f000 f9e6 	bl	8026130 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8025d64:	68fb      	ldr	r3, [r7, #12]
 8025d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025d68:	b29b      	uxth	r3, r3
 8025d6a:	2b00      	cmp	r3, #0
 8025d6c:	d19a      	bne.n	8025ca4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8025d6e:	697a      	ldr	r2, [r7, #20]
 8025d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025d72:	68f8      	ldr	r0, [r7, #12]
 8025d74:	f000 f93a 	bl	8025fec <I2C_WaitOnSTOPFlagUntilTimeout>
 8025d78:	4603      	mov	r3, r0
 8025d7a:	2b00      	cmp	r3, #0
 8025d7c:	d001      	beq.n	8025d82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8025d7e:	2301      	movs	r3, #1
 8025d80:	e01a      	b.n	8025db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8025d82:	68fb      	ldr	r3, [r7, #12]
 8025d84:	681b      	ldr	r3, [r3, #0]
 8025d86:	2220      	movs	r2, #32
 8025d88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8025d8a:	68fb      	ldr	r3, [r7, #12]
 8025d8c:	681b      	ldr	r3, [r3, #0]
 8025d8e:	6859      	ldr	r1, [r3, #4]
 8025d90:	68fb      	ldr	r3, [r7, #12]
 8025d92:	681a      	ldr	r2, [r3, #0]
 8025d94:	4b0b      	ldr	r3, [pc, #44]	; (8025dc4 <HAL_I2C_Mem_Read+0x230>)
 8025d96:	400b      	ands	r3, r1
 8025d98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8025d9a:	68fb      	ldr	r3, [r7, #12]
 8025d9c:	2220      	movs	r2, #32
 8025d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8025da2:	68fb      	ldr	r3, [r7, #12]
 8025da4:	2200      	movs	r2, #0
 8025da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8025daa:	68fb      	ldr	r3, [r7, #12]
 8025dac:	2200      	movs	r2, #0
 8025dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8025db2:	2300      	movs	r3, #0
 8025db4:	e000      	b.n	8025db8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8025db6:	2302      	movs	r3, #2
  }
}
 8025db8:	4618      	mov	r0, r3
 8025dba:	3718      	adds	r7, #24
 8025dbc:	46bd      	mov	sp, r7
 8025dbe:	bd80      	pop	{r7, pc}
 8025dc0:	80002400 	.word	0x80002400
 8025dc4:	fe00e800 	.word	0xfe00e800

08025dc8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8025dc8:	b580      	push	{r7, lr}
 8025dca:	b084      	sub	sp, #16
 8025dcc:	af00      	add	r7, sp, #0
 8025dce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8025dd0:	687b      	ldr	r3, [r7, #4]
 8025dd2:	681b      	ldr	r3, [r3, #0]
 8025dd4:	699b      	ldr	r3, [r3, #24]
 8025dd6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8025dd8:	687b      	ldr	r3, [r7, #4]
 8025dda:	681b      	ldr	r3, [r3, #0]
 8025ddc:	681b      	ldr	r3, [r3, #0]
 8025dde:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8025de0:	687b      	ldr	r3, [r7, #4]
 8025de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025de4:	2b00      	cmp	r3, #0
 8025de6:	d005      	beq.n	8025df4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8025de8:	687b      	ldr	r3, [r7, #4]
 8025dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025dec:	68ba      	ldr	r2, [r7, #8]
 8025dee:	68f9      	ldr	r1, [r7, #12]
 8025df0:	6878      	ldr	r0, [r7, #4]
 8025df2:	4798      	blx	r3
  }
}
 8025df4:	bf00      	nop
 8025df6:	3710      	adds	r7, #16
 8025df8:	46bd      	mov	sp, r7
 8025dfa:	bd80      	pop	{r7, pc}

08025dfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8025dfc:	b580      	push	{r7, lr}
 8025dfe:	b086      	sub	sp, #24
 8025e00:	af02      	add	r7, sp, #8
 8025e02:	60f8      	str	r0, [r7, #12]
 8025e04:	4608      	mov	r0, r1
 8025e06:	4611      	mov	r1, r2
 8025e08:	461a      	mov	r2, r3
 8025e0a:	4603      	mov	r3, r0
 8025e0c:	817b      	strh	r3, [r7, #10]
 8025e0e:	460b      	mov	r3, r1
 8025e10:	813b      	strh	r3, [r7, #8]
 8025e12:	4613      	mov	r3, r2
 8025e14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8025e16:	88fb      	ldrh	r3, [r7, #6]
 8025e18:	b2da      	uxtb	r2, r3
 8025e1a:	8979      	ldrh	r1, [r7, #10]
 8025e1c:	4b20      	ldr	r3, [pc, #128]	; (8025ea0 <I2C_RequestMemoryRead+0xa4>)
 8025e1e:	9300      	str	r3, [sp, #0]
 8025e20:	2300      	movs	r3, #0
 8025e22:	68f8      	ldr	r0, [r7, #12]
 8025e24:	f000 f984 	bl	8026130 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8025e28:	69fa      	ldr	r2, [r7, #28]
 8025e2a:	69b9      	ldr	r1, [r7, #24]
 8025e2c:	68f8      	ldr	r0, [r7, #12]
 8025e2e:	f000 f89d 	bl	8025f6c <I2C_WaitOnTXISFlagUntilTimeout>
 8025e32:	4603      	mov	r3, r0
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	d001      	beq.n	8025e3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8025e38:	2301      	movs	r3, #1
 8025e3a:	e02c      	b.n	8025e96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8025e3c:	88fb      	ldrh	r3, [r7, #6]
 8025e3e:	2b01      	cmp	r3, #1
 8025e40:	d105      	bne.n	8025e4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8025e42:	893b      	ldrh	r3, [r7, #8]
 8025e44:	b2da      	uxtb	r2, r3
 8025e46:	68fb      	ldr	r3, [r7, #12]
 8025e48:	681b      	ldr	r3, [r3, #0]
 8025e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8025e4c:	e015      	b.n	8025e7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8025e4e:	893b      	ldrh	r3, [r7, #8]
 8025e50:	0a1b      	lsrs	r3, r3, #8
 8025e52:	b29b      	uxth	r3, r3
 8025e54:	b2da      	uxtb	r2, r3
 8025e56:	68fb      	ldr	r3, [r7, #12]
 8025e58:	681b      	ldr	r3, [r3, #0]
 8025e5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8025e5c:	69fa      	ldr	r2, [r7, #28]
 8025e5e:	69b9      	ldr	r1, [r7, #24]
 8025e60:	68f8      	ldr	r0, [r7, #12]
 8025e62:	f000 f883 	bl	8025f6c <I2C_WaitOnTXISFlagUntilTimeout>
 8025e66:	4603      	mov	r3, r0
 8025e68:	2b00      	cmp	r3, #0
 8025e6a:	d001      	beq.n	8025e70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8025e6c:	2301      	movs	r3, #1
 8025e6e:	e012      	b.n	8025e96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8025e70:	893b      	ldrh	r3, [r7, #8]
 8025e72:	b2da      	uxtb	r2, r3
 8025e74:	68fb      	ldr	r3, [r7, #12]
 8025e76:	681b      	ldr	r3, [r3, #0]
 8025e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8025e7a:	69fb      	ldr	r3, [r7, #28]
 8025e7c:	9300      	str	r3, [sp, #0]
 8025e7e:	69bb      	ldr	r3, [r7, #24]
 8025e80:	2200      	movs	r2, #0
 8025e82:	2140      	movs	r1, #64	; 0x40
 8025e84:	68f8      	ldr	r0, [r7, #12]
 8025e86:	f000 f831 	bl	8025eec <I2C_WaitOnFlagUntilTimeout>
 8025e8a:	4603      	mov	r3, r0
 8025e8c:	2b00      	cmp	r3, #0
 8025e8e:	d001      	beq.n	8025e94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8025e90:	2301      	movs	r3, #1
 8025e92:	e000      	b.n	8025e96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8025e94:	2300      	movs	r3, #0
}
 8025e96:	4618      	mov	r0, r3
 8025e98:	3710      	adds	r7, #16
 8025e9a:	46bd      	mov	sp, r7
 8025e9c:	bd80      	pop	{r7, pc}
 8025e9e:	bf00      	nop
 8025ea0:	80002000 	.word	0x80002000

08025ea4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8025ea4:	b480      	push	{r7}
 8025ea6:	b083      	sub	sp, #12
 8025ea8:	af00      	add	r7, sp, #0
 8025eaa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8025eac:	687b      	ldr	r3, [r7, #4]
 8025eae:	681b      	ldr	r3, [r3, #0]
 8025eb0:	699b      	ldr	r3, [r3, #24]
 8025eb2:	f003 0302 	and.w	r3, r3, #2
 8025eb6:	2b02      	cmp	r3, #2
 8025eb8:	d103      	bne.n	8025ec2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8025eba:	687b      	ldr	r3, [r7, #4]
 8025ebc:	681b      	ldr	r3, [r3, #0]
 8025ebe:	2200      	movs	r2, #0
 8025ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8025ec2:	687b      	ldr	r3, [r7, #4]
 8025ec4:	681b      	ldr	r3, [r3, #0]
 8025ec6:	699b      	ldr	r3, [r3, #24]
 8025ec8:	f003 0301 	and.w	r3, r3, #1
 8025ecc:	2b01      	cmp	r3, #1
 8025ece:	d007      	beq.n	8025ee0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8025ed0:	687b      	ldr	r3, [r7, #4]
 8025ed2:	681b      	ldr	r3, [r3, #0]
 8025ed4:	699a      	ldr	r2, [r3, #24]
 8025ed6:	687b      	ldr	r3, [r7, #4]
 8025ed8:	681b      	ldr	r3, [r3, #0]
 8025eda:	f042 0201 	orr.w	r2, r2, #1
 8025ede:	619a      	str	r2, [r3, #24]
  }
}
 8025ee0:	bf00      	nop
 8025ee2:	370c      	adds	r7, #12
 8025ee4:	46bd      	mov	sp, r7
 8025ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025eea:	4770      	bx	lr

08025eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8025eec:	b580      	push	{r7, lr}
 8025eee:	b084      	sub	sp, #16
 8025ef0:	af00      	add	r7, sp, #0
 8025ef2:	60f8      	str	r0, [r7, #12]
 8025ef4:	60b9      	str	r1, [r7, #8]
 8025ef6:	603b      	str	r3, [r7, #0]
 8025ef8:	4613      	mov	r3, r2
 8025efa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8025efc:	e022      	b.n	8025f44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8025efe:	683b      	ldr	r3, [r7, #0]
 8025f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025f04:	d01e      	beq.n	8025f44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025f06:	f7ff f957 	bl	80251b8 <HAL_GetTick>
 8025f0a:	4602      	mov	r2, r0
 8025f0c:	69bb      	ldr	r3, [r7, #24]
 8025f0e:	1ad3      	subs	r3, r2, r3
 8025f10:	683a      	ldr	r2, [r7, #0]
 8025f12:	429a      	cmp	r2, r3
 8025f14:	d302      	bcc.n	8025f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8025f16:	683b      	ldr	r3, [r7, #0]
 8025f18:	2b00      	cmp	r3, #0
 8025f1a:	d113      	bne.n	8025f44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8025f1c:	68fb      	ldr	r3, [r7, #12]
 8025f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025f20:	f043 0220 	orr.w	r2, r3, #32
 8025f24:	68fb      	ldr	r3, [r7, #12]
 8025f26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8025f28:	68fb      	ldr	r3, [r7, #12]
 8025f2a:	2220      	movs	r2, #32
 8025f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8025f30:	68fb      	ldr	r3, [r7, #12]
 8025f32:	2200      	movs	r2, #0
 8025f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8025f38:	68fb      	ldr	r3, [r7, #12]
 8025f3a:	2200      	movs	r2, #0
 8025f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8025f40:	2301      	movs	r3, #1
 8025f42:	e00f      	b.n	8025f64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8025f44:	68fb      	ldr	r3, [r7, #12]
 8025f46:	681b      	ldr	r3, [r3, #0]
 8025f48:	699a      	ldr	r2, [r3, #24]
 8025f4a:	68bb      	ldr	r3, [r7, #8]
 8025f4c:	4013      	ands	r3, r2
 8025f4e:	68ba      	ldr	r2, [r7, #8]
 8025f50:	429a      	cmp	r2, r3
 8025f52:	bf0c      	ite	eq
 8025f54:	2301      	moveq	r3, #1
 8025f56:	2300      	movne	r3, #0
 8025f58:	b2db      	uxtb	r3, r3
 8025f5a:	461a      	mov	r2, r3
 8025f5c:	79fb      	ldrb	r3, [r7, #7]
 8025f5e:	429a      	cmp	r2, r3
 8025f60:	d0cd      	beq.n	8025efe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8025f62:	2300      	movs	r3, #0
}
 8025f64:	4618      	mov	r0, r3
 8025f66:	3710      	adds	r7, #16
 8025f68:	46bd      	mov	sp, r7
 8025f6a:	bd80      	pop	{r7, pc}

08025f6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8025f6c:	b580      	push	{r7, lr}
 8025f6e:	b084      	sub	sp, #16
 8025f70:	af00      	add	r7, sp, #0
 8025f72:	60f8      	str	r0, [r7, #12]
 8025f74:	60b9      	str	r1, [r7, #8]
 8025f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8025f78:	e02c      	b.n	8025fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8025f7a:	687a      	ldr	r2, [r7, #4]
 8025f7c:	68b9      	ldr	r1, [r7, #8]
 8025f7e:	68f8      	ldr	r0, [r7, #12]
 8025f80:	f000 f870 	bl	8026064 <I2C_IsAcknowledgeFailed>
 8025f84:	4603      	mov	r3, r0
 8025f86:	2b00      	cmp	r3, #0
 8025f88:	d001      	beq.n	8025f8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8025f8a:	2301      	movs	r3, #1
 8025f8c:	e02a      	b.n	8025fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8025f8e:	68bb      	ldr	r3, [r7, #8]
 8025f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025f94:	d01e      	beq.n	8025fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025f96:	f7ff f90f 	bl	80251b8 <HAL_GetTick>
 8025f9a:	4602      	mov	r2, r0
 8025f9c:	687b      	ldr	r3, [r7, #4]
 8025f9e:	1ad3      	subs	r3, r2, r3
 8025fa0:	68ba      	ldr	r2, [r7, #8]
 8025fa2:	429a      	cmp	r2, r3
 8025fa4:	d302      	bcc.n	8025fac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8025fa6:	68bb      	ldr	r3, [r7, #8]
 8025fa8:	2b00      	cmp	r3, #0
 8025faa:	d113      	bne.n	8025fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8025fac:	68fb      	ldr	r3, [r7, #12]
 8025fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025fb0:	f043 0220 	orr.w	r2, r3, #32
 8025fb4:	68fb      	ldr	r3, [r7, #12]
 8025fb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8025fb8:	68fb      	ldr	r3, [r7, #12]
 8025fba:	2220      	movs	r2, #32
 8025fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8025fc0:	68fb      	ldr	r3, [r7, #12]
 8025fc2:	2200      	movs	r2, #0
 8025fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8025fc8:	68fb      	ldr	r3, [r7, #12]
 8025fca:	2200      	movs	r2, #0
 8025fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8025fd0:	2301      	movs	r3, #1
 8025fd2:	e007      	b.n	8025fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8025fd4:	68fb      	ldr	r3, [r7, #12]
 8025fd6:	681b      	ldr	r3, [r3, #0]
 8025fd8:	699b      	ldr	r3, [r3, #24]
 8025fda:	f003 0302 	and.w	r3, r3, #2
 8025fde:	2b02      	cmp	r3, #2
 8025fe0:	d1cb      	bne.n	8025f7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8025fe2:	2300      	movs	r3, #0
}
 8025fe4:	4618      	mov	r0, r3
 8025fe6:	3710      	adds	r7, #16
 8025fe8:	46bd      	mov	sp, r7
 8025fea:	bd80      	pop	{r7, pc}

08025fec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8025fec:	b580      	push	{r7, lr}
 8025fee:	b084      	sub	sp, #16
 8025ff0:	af00      	add	r7, sp, #0
 8025ff2:	60f8      	str	r0, [r7, #12]
 8025ff4:	60b9      	str	r1, [r7, #8]
 8025ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8025ff8:	e028      	b.n	802604c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8025ffa:	687a      	ldr	r2, [r7, #4]
 8025ffc:	68b9      	ldr	r1, [r7, #8]
 8025ffe:	68f8      	ldr	r0, [r7, #12]
 8026000:	f000 f830 	bl	8026064 <I2C_IsAcknowledgeFailed>
 8026004:	4603      	mov	r3, r0
 8026006:	2b00      	cmp	r3, #0
 8026008:	d001      	beq.n	802600e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 802600a:	2301      	movs	r3, #1
 802600c:	e026      	b.n	802605c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802600e:	f7ff f8d3 	bl	80251b8 <HAL_GetTick>
 8026012:	4602      	mov	r2, r0
 8026014:	687b      	ldr	r3, [r7, #4]
 8026016:	1ad3      	subs	r3, r2, r3
 8026018:	68ba      	ldr	r2, [r7, #8]
 802601a:	429a      	cmp	r2, r3
 802601c:	d302      	bcc.n	8026024 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 802601e:	68bb      	ldr	r3, [r7, #8]
 8026020:	2b00      	cmp	r3, #0
 8026022:	d113      	bne.n	802604c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8026024:	68fb      	ldr	r3, [r7, #12]
 8026026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026028:	f043 0220 	orr.w	r2, r3, #32
 802602c:	68fb      	ldr	r3, [r7, #12]
 802602e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8026030:	68fb      	ldr	r3, [r7, #12]
 8026032:	2220      	movs	r2, #32
 8026034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8026038:	68fb      	ldr	r3, [r7, #12]
 802603a:	2200      	movs	r2, #0
 802603c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8026040:	68fb      	ldr	r3, [r7, #12]
 8026042:	2200      	movs	r2, #0
 8026044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8026048:	2301      	movs	r3, #1
 802604a:	e007      	b.n	802605c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 802604c:	68fb      	ldr	r3, [r7, #12]
 802604e:	681b      	ldr	r3, [r3, #0]
 8026050:	699b      	ldr	r3, [r3, #24]
 8026052:	f003 0320 	and.w	r3, r3, #32
 8026056:	2b20      	cmp	r3, #32
 8026058:	d1cf      	bne.n	8025ffa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 802605a:	2300      	movs	r3, #0
}
 802605c:	4618      	mov	r0, r3
 802605e:	3710      	adds	r7, #16
 8026060:	46bd      	mov	sp, r7
 8026062:	bd80      	pop	{r7, pc}

08026064 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8026064:	b580      	push	{r7, lr}
 8026066:	b084      	sub	sp, #16
 8026068:	af00      	add	r7, sp, #0
 802606a:	60f8      	str	r0, [r7, #12]
 802606c:	60b9      	str	r1, [r7, #8]
 802606e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8026070:	68fb      	ldr	r3, [r7, #12]
 8026072:	681b      	ldr	r3, [r3, #0]
 8026074:	699b      	ldr	r3, [r3, #24]
 8026076:	f003 0310 	and.w	r3, r3, #16
 802607a:	2b10      	cmp	r3, #16
 802607c:	d151      	bne.n	8026122 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 802607e:	e022      	b.n	80260c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8026080:	68bb      	ldr	r3, [r7, #8]
 8026082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026086:	d01e      	beq.n	80260c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8026088:	f7ff f896 	bl	80251b8 <HAL_GetTick>
 802608c:	4602      	mov	r2, r0
 802608e:	687b      	ldr	r3, [r7, #4]
 8026090:	1ad3      	subs	r3, r2, r3
 8026092:	68ba      	ldr	r2, [r7, #8]
 8026094:	429a      	cmp	r2, r3
 8026096:	d302      	bcc.n	802609e <I2C_IsAcknowledgeFailed+0x3a>
 8026098:	68bb      	ldr	r3, [r7, #8]
 802609a:	2b00      	cmp	r3, #0
 802609c:	d113      	bne.n	80260c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 802609e:	68fb      	ldr	r3, [r7, #12]
 80260a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80260a2:	f043 0220 	orr.w	r2, r3, #32
 80260a6:	68fb      	ldr	r3, [r7, #12]
 80260a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80260aa:	68fb      	ldr	r3, [r7, #12]
 80260ac:	2220      	movs	r2, #32
 80260ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80260b2:	68fb      	ldr	r3, [r7, #12]
 80260b4:	2200      	movs	r2, #0
 80260b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80260ba:	68fb      	ldr	r3, [r7, #12]
 80260bc:	2200      	movs	r2, #0
 80260be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80260c2:	2301      	movs	r3, #1
 80260c4:	e02e      	b.n	8026124 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80260c6:	68fb      	ldr	r3, [r7, #12]
 80260c8:	681b      	ldr	r3, [r3, #0]
 80260ca:	699b      	ldr	r3, [r3, #24]
 80260cc:	f003 0320 	and.w	r3, r3, #32
 80260d0:	2b20      	cmp	r3, #32
 80260d2:	d1d5      	bne.n	8026080 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80260d4:	68fb      	ldr	r3, [r7, #12]
 80260d6:	681b      	ldr	r3, [r3, #0]
 80260d8:	2210      	movs	r2, #16
 80260da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80260dc:	68fb      	ldr	r3, [r7, #12]
 80260de:	681b      	ldr	r3, [r3, #0]
 80260e0:	2220      	movs	r2, #32
 80260e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80260e4:	68f8      	ldr	r0, [r7, #12]
 80260e6:	f7ff fedd 	bl	8025ea4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80260ea:	68fb      	ldr	r3, [r7, #12]
 80260ec:	681b      	ldr	r3, [r3, #0]
 80260ee:	6859      	ldr	r1, [r3, #4]
 80260f0:	68fb      	ldr	r3, [r7, #12]
 80260f2:	681a      	ldr	r2, [r3, #0]
 80260f4:	4b0d      	ldr	r3, [pc, #52]	; (802612c <I2C_IsAcknowledgeFailed+0xc8>)
 80260f6:	400b      	ands	r3, r1
 80260f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80260fa:	68fb      	ldr	r3, [r7, #12]
 80260fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80260fe:	f043 0204 	orr.w	r2, r3, #4
 8026102:	68fb      	ldr	r3, [r7, #12]
 8026104:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8026106:	68fb      	ldr	r3, [r7, #12]
 8026108:	2220      	movs	r2, #32
 802610a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 802610e:	68fb      	ldr	r3, [r7, #12]
 8026110:	2200      	movs	r2, #0
 8026112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026116:	68fb      	ldr	r3, [r7, #12]
 8026118:	2200      	movs	r2, #0
 802611a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 802611e:	2301      	movs	r3, #1
 8026120:	e000      	b.n	8026124 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8026122:	2300      	movs	r3, #0
}
 8026124:	4618      	mov	r0, r3
 8026126:	3710      	adds	r7, #16
 8026128:	46bd      	mov	sp, r7
 802612a:	bd80      	pop	{r7, pc}
 802612c:	fe00e800 	.word	0xfe00e800

08026130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8026130:	b480      	push	{r7}
 8026132:	b085      	sub	sp, #20
 8026134:	af00      	add	r7, sp, #0
 8026136:	60f8      	str	r0, [r7, #12]
 8026138:	607b      	str	r3, [r7, #4]
 802613a:	460b      	mov	r3, r1
 802613c:	817b      	strh	r3, [r7, #10]
 802613e:	4613      	mov	r3, r2
 8026140:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8026142:	68fb      	ldr	r3, [r7, #12]
 8026144:	681b      	ldr	r3, [r3, #0]
 8026146:	685a      	ldr	r2, [r3, #4]
 8026148:	69bb      	ldr	r3, [r7, #24]
 802614a:	0d5b      	lsrs	r3, r3, #21
 802614c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8026150:	4b0d      	ldr	r3, [pc, #52]	; (8026188 <I2C_TransferConfig+0x58>)
 8026152:	430b      	orrs	r3, r1
 8026154:	43db      	mvns	r3, r3
 8026156:	ea02 0103 	and.w	r1, r2, r3
 802615a:	897b      	ldrh	r3, [r7, #10]
 802615c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8026160:	7a7b      	ldrb	r3, [r7, #9]
 8026162:	041b      	lsls	r3, r3, #16
 8026164:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8026168:	431a      	orrs	r2, r3
 802616a:	687b      	ldr	r3, [r7, #4]
 802616c:	431a      	orrs	r2, r3
 802616e:	69bb      	ldr	r3, [r7, #24]
 8026170:	431a      	orrs	r2, r3
 8026172:	68fb      	ldr	r3, [r7, #12]
 8026174:	681b      	ldr	r3, [r3, #0]
 8026176:	430a      	orrs	r2, r1
 8026178:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 802617a:	bf00      	nop
 802617c:	3714      	adds	r7, #20
 802617e:	46bd      	mov	sp, r7
 8026180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026184:	4770      	bx	lr
 8026186:	bf00      	nop
 8026188:	03ff63ff 	.word	0x03ff63ff

0802618c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 802618c:	b480      	push	{r7}
 802618e:	b083      	sub	sp, #12
 8026190:	af00      	add	r7, sp, #0
 8026192:	6078      	str	r0, [r7, #4]
 8026194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026196:	687b      	ldr	r3, [r7, #4]
 8026198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802619c:	b2db      	uxtb	r3, r3
 802619e:	2b20      	cmp	r3, #32
 80261a0:	d138      	bne.n	8026214 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80261a2:	687b      	ldr	r3, [r7, #4]
 80261a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80261a8:	2b01      	cmp	r3, #1
 80261aa:	d101      	bne.n	80261b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80261ac:	2302      	movs	r3, #2
 80261ae:	e032      	b.n	8026216 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80261b0:	687b      	ldr	r3, [r7, #4]
 80261b2:	2201      	movs	r2, #1
 80261b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80261b8:	687b      	ldr	r3, [r7, #4]
 80261ba:	2224      	movs	r2, #36	; 0x24
 80261bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80261c0:	687b      	ldr	r3, [r7, #4]
 80261c2:	681b      	ldr	r3, [r3, #0]
 80261c4:	681a      	ldr	r2, [r3, #0]
 80261c6:	687b      	ldr	r3, [r7, #4]
 80261c8:	681b      	ldr	r3, [r3, #0]
 80261ca:	f022 0201 	bic.w	r2, r2, #1
 80261ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80261d0:	687b      	ldr	r3, [r7, #4]
 80261d2:	681b      	ldr	r3, [r3, #0]
 80261d4:	681a      	ldr	r2, [r3, #0]
 80261d6:	687b      	ldr	r3, [r7, #4]
 80261d8:	681b      	ldr	r3, [r3, #0]
 80261da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80261de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80261e0:	687b      	ldr	r3, [r7, #4]
 80261e2:	681b      	ldr	r3, [r3, #0]
 80261e4:	6819      	ldr	r1, [r3, #0]
 80261e6:	687b      	ldr	r3, [r7, #4]
 80261e8:	681b      	ldr	r3, [r3, #0]
 80261ea:	683a      	ldr	r2, [r7, #0]
 80261ec:	430a      	orrs	r2, r1
 80261ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80261f0:	687b      	ldr	r3, [r7, #4]
 80261f2:	681b      	ldr	r3, [r3, #0]
 80261f4:	681a      	ldr	r2, [r3, #0]
 80261f6:	687b      	ldr	r3, [r7, #4]
 80261f8:	681b      	ldr	r3, [r3, #0]
 80261fa:	f042 0201 	orr.w	r2, r2, #1
 80261fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026200:	687b      	ldr	r3, [r7, #4]
 8026202:	2220      	movs	r2, #32
 8026204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026208:	687b      	ldr	r3, [r7, #4]
 802620a:	2200      	movs	r2, #0
 802620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8026210:	2300      	movs	r3, #0
 8026212:	e000      	b.n	8026216 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8026214:	2302      	movs	r3, #2
  }
}
 8026216:	4618      	mov	r0, r3
 8026218:	370c      	adds	r7, #12
 802621a:	46bd      	mov	sp, r7
 802621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026220:	4770      	bx	lr

08026222 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8026222:	b480      	push	{r7}
 8026224:	b085      	sub	sp, #20
 8026226:	af00      	add	r7, sp, #0
 8026228:	6078      	str	r0, [r7, #4]
 802622a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026232:	b2db      	uxtb	r3, r3
 8026234:	2b20      	cmp	r3, #32
 8026236:	d139      	bne.n	80262ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8026238:	687b      	ldr	r3, [r7, #4]
 802623a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802623e:	2b01      	cmp	r3, #1
 8026240:	d101      	bne.n	8026246 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8026242:	2302      	movs	r3, #2
 8026244:	e033      	b.n	80262ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8026246:	687b      	ldr	r3, [r7, #4]
 8026248:	2201      	movs	r2, #1
 802624a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802624e:	687b      	ldr	r3, [r7, #4]
 8026250:	2224      	movs	r2, #36	; 0x24
 8026252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026256:	687b      	ldr	r3, [r7, #4]
 8026258:	681b      	ldr	r3, [r3, #0]
 802625a:	681a      	ldr	r2, [r3, #0]
 802625c:	687b      	ldr	r3, [r7, #4]
 802625e:	681b      	ldr	r3, [r3, #0]
 8026260:	f022 0201 	bic.w	r2, r2, #1
 8026264:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8026266:	687b      	ldr	r3, [r7, #4]
 8026268:	681b      	ldr	r3, [r3, #0]
 802626a:	681b      	ldr	r3, [r3, #0]
 802626c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 802626e:	68fb      	ldr	r3, [r7, #12]
 8026270:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8026274:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8026276:	683b      	ldr	r3, [r7, #0]
 8026278:	021b      	lsls	r3, r3, #8
 802627a:	68fa      	ldr	r2, [r7, #12]
 802627c:	4313      	orrs	r3, r2
 802627e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8026280:	687b      	ldr	r3, [r7, #4]
 8026282:	681b      	ldr	r3, [r3, #0]
 8026284:	68fa      	ldr	r2, [r7, #12]
 8026286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8026288:	687b      	ldr	r3, [r7, #4]
 802628a:	681b      	ldr	r3, [r3, #0]
 802628c:	681a      	ldr	r2, [r3, #0]
 802628e:	687b      	ldr	r3, [r7, #4]
 8026290:	681b      	ldr	r3, [r3, #0]
 8026292:	f042 0201 	orr.w	r2, r2, #1
 8026296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026298:	687b      	ldr	r3, [r7, #4]
 802629a:	2220      	movs	r2, #32
 802629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80262a0:	687b      	ldr	r3, [r7, #4]
 80262a2:	2200      	movs	r2, #0
 80262a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80262a8:	2300      	movs	r3, #0
 80262aa:	e000      	b.n	80262ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80262ac:	2302      	movs	r3, #2
  }
}
 80262ae:	4618      	mov	r0, r3
 80262b0:	3714      	adds	r7, #20
 80262b2:	46bd      	mov	sp, r7
 80262b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262b8:	4770      	bx	lr
	...

080262bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80262bc:	b580      	push	{r7, lr}
 80262be:	b084      	sub	sp, #16
 80262c0:	af00      	add	r7, sp, #0
 80262c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80262c4:	687b      	ldr	r3, [r7, #4]
 80262c6:	2b00      	cmp	r3, #0
 80262c8:	d101      	bne.n	80262ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80262ca:	2301      	movs	r3, #1
 80262cc:	e0bf      	b.n	802644e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80262ce:	687b      	ldr	r3, [r7, #4]
 80262d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80262d4:	b2db      	uxtb	r3, r3
 80262d6:	2b00      	cmp	r3, #0
 80262d8:	d106      	bne.n	80262e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80262da:	687b      	ldr	r3, [r7, #4]
 80262dc:	2200      	movs	r2, #0
 80262de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80262e2:	6878      	ldr	r0, [r7, #4]
 80262e4:	f7da fdbc 	bl	8000e60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80262e8:	687b      	ldr	r3, [r7, #4]
 80262ea:	2202      	movs	r2, #2
 80262ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80262f0:	687b      	ldr	r3, [r7, #4]
 80262f2:	681b      	ldr	r3, [r3, #0]
 80262f4:	699a      	ldr	r2, [r3, #24]
 80262f6:	687b      	ldr	r3, [r7, #4]
 80262f8:	681b      	ldr	r3, [r3, #0]
 80262fa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80262fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026300:	687b      	ldr	r3, [r7, #4]
 8026302:	681b      	ldr	r3, [r3, #0]
 8026304:	6999      	ldr	r1, [r3, #24]
 8026306:	687b      	ldr	r3, [r7, #4]
 8026308:	685a      	ldr	r2, [r3, #4]
 802630a:	687b      	ldr	r3, [r7, #4]
 802630c:	689b      	ldr	r3, [r3, #8]
 802630e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026310:	687b      	ldr	r3, [r7, #4]
 8026312:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026314:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026316:	687b      	ldr	r3, [r7, #4]
 8026318:	691b      	ldr	r3, [r3, #16]
 802631a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 802631c:	687b      	ldr	r3, [r7, #4]
 802631e:	681b      	ldr	r3, [r3, #0]
 8026320:	430a      	orrs	r2, r1
 8026322:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	681b      	ldr	r3, [r3, #0]
 8026328:	6899      	ldr	r1, [r3, #8]
 802632a:	687b      	ldr	r3, [r7, #4]
 802632c:	681a      	ldr	r2, [r3, #0]
 802632e:	4b4a      	ldr	r3, [pc, #296]	; (8026458 <HAL_LTDC_Init+0x19c>)
 8026330:	400b      	ands	r3, r1
 8026332:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8026334:	687b      	ldr	r3, [r7, #4]
 8026336:	695b      	ldr	r3, [r3, #20]
 8026338:	041b      	lsls	r3, r3, #16
 802633a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 802633c:	687b      	ldr	r3, [r7, #4]
 802633e:	681b      	ldr	r3, [r3, #0]
 8026340:	6899      	ldr	r1, [r3, #8]
 8026342:	687b      	ldr	r3, [r7, #4]
 8026344:	699a      	ldr	r2, [r3, #24]
 8026346:	68fb      	ldr	r3, [r7, #12]
 8026348:	431a      	orrs	r2, r3
 802634a:	687b      	ldr	r3, [r7, #4]
 802634c:	681b      	ldr	r3, [r3, #0]
 802634e:	430a      	orrs	r2, r1
 8026350:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8026352:	687b      	ldr	r3, [r7, #4]
 8026354:	681b      	ldr	r3, [r3, #0]
 8026356:	68d9      	ldr	r1, [r3, #12]
 8026358:	687b      	ldr	r3, [r7, #4]
 802635a:	681a      	ldr	r2, [r3, #0]
 802635c:	4b3e      	ldr	r3, [pc, #248]	; (8026458 <HAL_LTDC_Init+0x19c>)
 802635e:	400b      	ands	r3, r1
 8026360:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8026362:	687b      	ldr	r3, [r7, #4]
 8026364:	69db      	ldr	r3, [r3, #28]
 8026366:	041b      	lsls	r3, r3, #16
 8026368:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 802636a:	687b      	ldr	r3, [r7, #4]
 802636c:	681b      	ldr	r3, [r3, #0]
 802636e:	68d9      	ldr	r1, [r3, #12]
 8026370:	687b      	ldr	r3, [r7, #4]
 8026372:	6a1a      	ldr	r2, [r3, #32]
 8026374:	68fb      	ldr	r3, [r7, #12]
 8026376:	431a      	orrs	r2, r3
 8026378:	687b      	ldr	r3, [r7, #4]
 802637a:	681b      	ldr	r3, [r3, #0]
 802637c:	430a      	orrs	r2, r1
 802637e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8026380:	687b      	ldr	r3, [r7, #4]
 8026382:	681b      	ldr	r3, [r3, #0]
 8026384:	6919      	ldr	r1, [r3, #16]
 8026386:	687b      	ldr	r3, [r7, #4]
 8026388:	681a      	ldr	r2, [r3, #0]
 802638a:	4b33      	ldr	r3, [pc, #204]	; (8026458 <HAL_LTDC_Init+0x19c>)
 802638c:	400b      	ands	r3, r1
 802638e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8026390:	687b      	ldr	r3, [r7, #4]
 8026392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026394:	041b      	lsls	r3, r3, #16
 8026396:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8026398:	687b      	ldr	r3, [r7, #4]
 802639a:	681b      	ldr	r3, [r3, #0]
 802639c:	6919      	ldr	r1, [r3, #16]
 802639e:	687b      	ldr	r3, [r7, #4]
 80263a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80263a2:	68fb      	ldr	r3, [r7, #12]
 80263a4:	431a      	orrs	r2, r3
 80263a6:	687b      	ldr	r3, [r7, #4]
 80263a8:	681b      	ldr	r3, [r3, #0]
 80263aa:	430a      	orrs	r2, r1
 80263ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80263ae:	687b      	ldr	r3, [r7, #4]
 80263b0:	681b      	ldr	r3, [r3, #0]
 80263b2:	6959      	ldr	r1, [r3, #20]
 80263b4:	687b      	ldr	r3, [r7, #4]
 80263b6:	681a      	ldr	r2, [r3, #0]
 80263b8:	4b27      	ldr	r3, [pc, #156]	; (8026458 <HAL_LTDC_Init+0x19c>)
 80263ba:	400b      	ands	r3, r1
 80263bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80263be:	687b      	ldr	r3, [r7, #4]
 80263c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80263c2:	041b      	lsls	r3, r3, #16
 80263c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80263c6:	687b      	ldr	r3, [r7, #4]
 80263c8:	681b      	ldr	r3, [r3, #0]
 80263ca:	6959      	ldr	r1, [r3, #20]
 80263cc:	687b      	ldr	r3, [r7, #4]
 80263ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80263d0:	68fb      	ldr	r3, [r7, #12]
 80263d2:	431a      	orrs	r2, r3
 80263d4:	687b      	ldr	r3, [r7, #4]
 80263d6:	681b      	ldr	r3, [r3, #0]
 80263d8:	430a      	orrs	r2, r1
 80263da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80263dc:	687b      	ldr	r3, [r7, #4]
 80263de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80263e2:	021b      	lsls	r3, r3, #8
 80263e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80263e6:	687b      	ldr	r3, [r7, #4]
 80263e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80263ec:	041b      	lsls	r3, r3, #16
 80263ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80263f0:	687b      	ldr	r3, [r7, #4]
 80263f2:	681b      	ldr	r3, [r3, #0]
 80263f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80263f6:	687b      	ldr	r3, [r7, #4]
 80263f8:	681b      	ldr	r3, [r3, #0]
 80263fa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80263fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8026400:	687b      	ldr	r3, [r7, #4]
 8026402:	681b      	ldr	r3, [r3, #0]
 8026404:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026406:	68ba      	ldr	r2, [r7, #8]
 8026408:	68fb      	ldr	r3, [r7, #12]
 802640a:	4313      	orrs	r3, r2
 802640c:	687a      	ldr	r2, [r7, #4]
 802640e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8026412:	431a      	orrs	r2, r3
 8026414:	687b      	ldr	r3, [r7, #4]
 8026416:	681b      	ldr	r3, [r3, #0]
 8026418:	430a      	orrs	r2, r1
 802641a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 802641c:	687b      	ldr	r3, [r7, #4]
 802641e:	681b      	ldr	r3, [r3, #0]
 8026420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026422:	687b      	ldr	r3, [r7, #4]
 8026424:	681b      	ldr	r3, [r3, #0]
 8026426:	f042 0206 	orr.w	r2, r2, #6
 802642a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 802642c:	687b      	ldr	r3, [r7, #4]
 802642e:	681b      	ldr	r3, [r3, #0]
 8026430:	699a      	ldr	r2, [r3, #24]
 8026432:	687b      	ldr	r3, [r7, #4]
 8026434:	681b      	ldr	r3, [r3, #0]
 8026436:	f042 0201 	orr.w	r2, r2, #1
 802643a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 802643c:	687b      	ldr	r3, [r7, #4]
 802643e:	2200      	movs	r2, #0
 8026440:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026444:	687b      	ldr	r3, [r7, #4]
 8026446:	2201      	movs	r2, #1
 8026448:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 802644c:	2300      	movs	r3, #0
}
 802644e:	4618      	mov	r0, r3
 8026450:	3710      	adds	r7, #16
 8026452:	46bd      	mov	sp, r7
 8026454:	bd80      	pop	{r7, pc}
 8026456:	bf00      	nop
 8026458:	f000f800 	.word	0xf000f800

0802645c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 802645c:	b5b0      	push	{r4, r5, r7, lr}
 802645e:	b084      	sub	sp, #16
 8026460:	af00      	add	r7, sp, #0
 8026462:	60f8      	str	r0, [r7, #12]
 8026464:	60b9      	str	r1, [r7, #8]
 8026466:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026468:	68fb      	ldr	r3, [r7, #12]
 802646a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 802646e:	2b01      	cmp	r3, #1
 8026470:	d101      	bne.n	8026476 <HAL_LTDC_ConfigLayer+0x1a>
 8026472:	2302      	movs	r3, #2
 8026474:	e02c      	b.n	80264d0 <HAL_LTDC_ConfigLayer+0x74>
 8026476:	68fb      	ldr	r3, [r7, #12]
 8026478:	2201      	movs	r2, #1
 802647a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802647e:	68fb      	ldr	r3, [r7, #12]
 8026480:	2202      	movs	r2, #2
 8026482:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8026486:	68fa      	ldr	r2, [r7, #12]
 8026488:	687b      	ldr	r3, [r7, #4]
 802648a:	2134      	movs	r1, #52	; 0x34
 802648c:	fb01 f303 	mul.w	r3, r1, r3
 8026490:	4413      	add	r3, r2
 8026492:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8026496:	68bb      	ldr	r3, [r7, #8]
 8026498:	4614      	mov	r4, r2
 802649a:	461d      	mov	r5, r3
 802649c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802649e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80264a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80264a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80264a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80264a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80264a8:	682b      	ldr	r3, [r5, #0]
 80264aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80264ac:	687a      	ldr	r2, [r7, #4]
 80264ae:	68b9      	ldr	r1, [r7, #8]
 80264b0:	68f8      	ldr	r0, [r7, #12]
 80264b2:	f000 f83b 	bl	802652c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80264b6:	68fb      	ldr	r3, [r7, #12]
 80264b8:	681b      	ldr	r3, [r3, #0]
 80264ba:	2201      	movs	r2, #1
 80264bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80264be:	68fb      	ldr	r3, [r7, #12]
 80264c0:	2201      	movs	r2, #1
 80264c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80264c6:	68fb      	ldr	r3, [r7, #12]
 80264c8:	2200      	movs	r2, #0
 80264ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80264ce:	2300      	movs	r3, #0
}
 80264d0:	4618      	mov	r0, r3
 80264d2:	3710      	adds	r7, #16
 80264d4:	46bd      	mov	sp, r7
 80264d6:	bdb0      	pop	{r4, r5, r7, pc}

080264d8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80264d8:	b480      	push	{r7}
 80264da:	b083      	sub	sp, #12
 80264dc:	af00      	add	r7, sp, #0
 80264de:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80264e0:	687b      	ldr	r3, [r7, #4]
 80264e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80264e6:	2b01      	cmp	r3, #1
 80264e8:	d101      	bne.n	80264ee <HAL_LTDC_EnableDither+0x16>
 80264ea:	2302      	movs	r3, #2
 80264ec:	e016      	b.n	802651c <HAL_LTDC_EnableDither+0x44>
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	2201      	movs	r2, #1
 80264f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80264f6:	687b      	ldr	r3, [r7, #4]
 80264f8:	2202      	movs	r2, #2
 80264fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80264fe:	4b0a      	ldr	r3, [pc, #40]	; (8026528 <HAL_LTDC_EnableDither+0x50>)
 8026500:	699b      	ldr	r3, [r3, #24]
 8026502:	4a09      	ldr	r2, [pc, #36]	; (8026528 <HAL_LTDC_EnableDither+0x50>)
 8026504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026508:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802650a:	687b      	ldr	r3, [r7, #4]
 802650c:	2201      	movs	r2, #1
 802650e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026512:	687b      	ldr	r3, [r7, #4]
 8026514:	2200      	movs	r2, #0
 8026516:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802651a:	2300      	movs	r3, #0
}
 802651c:	4618      	mov	r0, r3
 802651e:	370c      	adds	r7, #12
 8026520:	46bd      	mov	sp, r7
 8026522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026526:	4770      	bx	lr
 8026528:	40016800 	.word	0x40016800

0802652c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 802652c:	b480      	push	{r7}
 802652e:	b089      	sub	sp, #36	; 0x24
 8026530:	af00      	add	r7, sp, #0
 8026532:	60f8      	str	r0, [r7, #12]
 8026534:	60b9      	str	r1, [r7, #8]
 8026536:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8026538:	68bb      	ldr	r3, [r7, #8]
 802653a:	685a      	ldr	r2, [r3, #4]
 802653c:	68fb      	ldr	r3, [r7, #12]
 802653e:	681b      	ldr	r3, [r3, #0]
 8026540:	68db      	ldr	r3, [r3, #12]
 8026542:	0c1b      	lsrs	r3, r3, #16
 8026544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026548:	4413      	add	r3, r2
 802654a:	041b      	lsls	r3, r3, #16
 802654c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 802654e:	68fb      	ldr	r3, [r7, #12]
 8026550:	681b      	ldr	r3, [r3, #0]
 8026552:	461a      	mov	r2, r3
 8026554:	687b      	ldr	r3, [r7, #4]
 8026556:	01db      	lsls	r3, r3, #7
 8026558:	4413      	add	r3, r2
 802655a:	3384      	adds	r3, #132	; 0x84
 802655c:	685b      	ldr	r3, [r3, #4]
 802655e:	68fa      	ldr	r2, [r7, #12]
 8026560:	6812      	ldr	r2, [r2, #0]
 8026562:	4611      	mov	r1, r2
 8026564:	687a      	ldr	r2, [r7, #4]
 8026566:	01d2      	lsls	r2, r2, #7
 8026568:	440a      	add	r2, r1
 802656a:	3284      	adds	r2, #132	; 0x84
 802656c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8026570:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8026572:	68bb      	ldr	r3, [r7, #8]
 8026574:	681a      	ldr	r2, [r3, #0]
 8026576:	68fb      	ldr	r3, [r7, #12]
 8026578:	681b      	ldr	r3, [r3, #0]
 802657a:	68db      	ldr	r3, [r3, #12]
 802657c:	0c1b      	lsrs	r3, r3, #16
 802657e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026582:	4413      	add	r3, r2
 8026584:	1c5a      	adds	r2, r3, #1
 8026586:	68fb      	ldr	r3, [r7, #12]
 8026588:	681b      	ldr	r3, [r3, #0]
 802658a:	4619      	mov	r1, r3
 802658c:	687b      	ldr	r3, [r7, #4]
 802658e:	01db      	lsls	r3, r3, #7
 8026590:	440b      	add	r3, r1
 8026592:	3384      	adds	r3, #132	; 0x84
 8026594:	4619      	mov	r1, r3
 8026596:	69fb      	ldr	r3, [r7, #28]
 8026598:	4313      	orrs	r3, r2
 802659a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 802659c:	68bb      	ldr	r3, [r7, #8]
 802659e:	68da      	ldr	r2, [r3, #12]
 80265a0:	68fb      	ldr	r3, [r7, #12]
 80265a2:	681b      	ldr	r3, [r3, #0]
 80265a4:	68db      	ldr	r3, [r3, #12]
 80265a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80265aa:	4413      	add	r3, r2
 80265ac:	041b      	lsls	r3, r3, #16
 80265ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80265b0:	68fb      	ldr	r3, [r7, #12]
 80265b2:	681b      	ldr	r3, [r3, #0]
 80265b4:	461a      	mov	r2, r3
 80265b6:	687b      	ldr	r3, [r7, #4]
 80265b8:	01db      	lsls	r3, r3, #7
 80265ba:	4413      	add	r3, r2
 80265bc:	3384      	adds	r3, #132	; 0x84
 80265be:	689b      	ldr	r3, [r3, #8]
 80265c0:	68fa      	ldr	r2, [r7, #12]
 80265c2:	6812      	ldr	r2, [r2, #0]
 80265c4:	4611      	mov	r1, r2
 80265c6:	687a      	ldr	r2, [r7, #4]
 80265c8:	01d2      	lsls	r2, r2, #7
 80265ca:	440a      	add	r2, r1
 80265cc:	3284      	adds	r2, #132	; 0x84
 80265ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80265d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80265d4:	68bb      	ldr	r3, [r7, #8]
 80265d6:	689a      	ldr	r2, [r3, #8]
 80265d8:	68fb      	ldr	r3, [r7, #12]
 80265da:	681b      	ldr	r3, [r3, #0]
 80265dc:	68db      	ldr	r3, [r3, #12]
 80265de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80265e2:	4413      	add	r3, r2
 80265e4:	1c5a      	adds	r2, r3, #1
 80265e6:	68fb      	ldr	r3, [r7, #12]
 80265e8:	681b      	ldr	r3, [r3, #0]
 80265ea:	4619      	mov	r1, r3
 80265ec:	687b      	ldr	r3, [r7, #4]
 80265ee:	01db      	lsls	r3, r3, #7
 80265f0:	440b      	add	r3, r1
 80265f2:	3384      	adds	r3, #132	; 0x84
 80265f4:	4619      	mov	r1, r3
 80265f6:	69fb      	ldr	r3, [r7, #28]
 80265f8:	4313      	orrs	r3, r2
 80265fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80265fc:	68fb      	ldr	r3, [r7, #12]
 80265fe:	681b      	ldr	r3, [r3, #0]
 8026600:	461a      	mov	r2, r3
 8026602:	687b      	ldr	r3, [r7, #4]
 8026604:	01db      	lsls	r3, r3, #7
 8026606:	4413      	add	r3, r2
 8026608:	3384      	adds	r3, #132	; 0x84
 802660a:	691b      	ldr	r3, [r3, #16]
 802660c:	68fa      	ldr	r2, [r7, #12]
 802660e:	6812      	ldr	r2, [r2, #0]
 8026610:	4611      	mov	r1, r2
 8026612:	687a      	ldr	r2, [r7, #4]
 8026614:	01d2      	lsls	r2, r2, #7
 8026616:	440a      	add	r2, r1
 8026618:	3284      	adds	r2, #132	; 0x84
 802661a:	f023 0307 	bic.w	r3, r3, #7
 802661e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8026620:	68fb      	ldr	r3, [r7, #12]
 8026622:	681b      	ldr	r3, [r3, #0]
 8026624:	461a      	mov	r2, r3
 8026626:	687b      	ldr	r3, [r7, #4]
 8026628:	01db      	lsls	r3, r3, #7
 802662a:	4413      	add	r3, r2
 802662c:	3384      	adds	r3, #132	; 0x84
 802662e:	461a      	mov	r2, r3
 8026630:	68bb      	ldr	r3, [r7, #8]
 8026632:	691b      	ldr	r3, [r3, #16]
 8026634:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8026636:	68bb      	ldr	r3, [r7, #8]
 8026638:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802663c:	021b      	lsls	r3, r3, #8
 802663e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8026640:	68bb      	ldr	r3, [r7, #8]
 8026642:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8026646:	041b      	lsls	r3, r3, #16
 8026648:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 802664a:	68bb      	ldr	r3, [r7, #8]
 802664c:	699b      	ldr	r3, [r3, #24]
 802664e:	061b      	lsls	r3, r3, #24
 8026650:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8026652:	68fb      	ldr	r3, [r7, #12]
 8026654:	681b      	ldr	r3, [r3, #0]
 8026656:	461a      	mov	r2, r3
 8026658:	687b      	ldr	r3, [r7, #4]
 802665a:	01db      	lsls	r3, r3, #7
 802665c:	4413      	add	r3, r2
 802665e:	3384      	adds	r3, #132	; 0x84
 8026660:	699b      	ldr	r3, [r3, #24]
 8026662:	68fb      	ldr	r3, [r7, #12]
 8026664:	681b      	ldr	r3, [r3, #0]
 8026666:	461a      	mov	r2, r3
 8026668:	687b      	ldr	r3, [r7, #4]
 802666a:	01db      	lsls	r3, r3, #7
 802666c:	4413      	add	r3, r2
 802666e:	3384      	adds	r3, #132	; 0x84
 8026670:	461a      	mov	r2, r3
 8026672:	2300      	movs	r3, #0
 8026674:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8026676:	68bb      	ldr	r3, [r7, #8]
 8026678:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802667c:	461a      	mov	r2, r3
 802667e:	69fb      	ldr	r3, [r7, #28]
 8026680:	431a      	orrs	r2, r3
 8026682:	69bb      	ldr	r3, [r7, #24]
 8026684:	431a      	orrs	r2, r3
 8026686:	68fb      	ldr	r3, [r7, #12]
 8026688:	681b      	ldr	r3, [r3, #0]
 802668a:	4619      	mov	r1, r3
 802668c:	687b      	ldr	r3, [r7, #4]
 802668e:	01db      	lsls	r3, r3, #7
 8026690:	440b      	add	r3, r1
 8026692:	3384      	adds	r3, #132	; 0x84
 8026694:	4619      	mov	r1, r3
 8026696:	697b      	ldr	r3, [r7, #20]
 8026698:	4313      	orrs	r3, r2
 802669a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 802669c:	68fb      	ldr	r3, [r7, #12]
 802669e:	681b      	ldr	r3, [r3, #0]
 80266a0:	461a      	mov	r2, r3
 80266a2:	687b      	ldr	r3, [r7, #4]
 80266a4:	01db      	lsls	r3, r3, #7
 80266a6:	4413      	add	r3, r2
 80266a8:	3384      	adds	r3, #132	; 0x84
 80266aa:	695b      	ldr	r3, [r3, #20]
 80266ac:	68fa      	ldr	r2, [r7, #12]
 80266ae:	6812      	ldr	r2, [r2, #0]
 80266b0:	4611      	mov	r1, r2
 80266b2:	687a      	ldr	r2, [r7, #4]
 80266b4:	01d2      	lsls	r2, r2, #7
 80266b6:	440a      	add	r2, r1
 80266b8:	3284      	adds	r2, #132	; 0x84
 80266ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80266be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80266c0:	68fb      	ldr	r3, [r7, #12]
 80266c2:	681b      	ldr	r3, [r3, #0]
 80266c4:	461a      	mov	r2, r3
 80266c6:	687b      	ldr	r3, [r7, #4]
 80266c8:	01db      	lsls	r3, r3, #7
 80266ca:	4413      	add	r3, r2
 80266cc:	3384      	adds	r3, #132	; 0x84
 80266ce:	461a      	mov	r2, r3
 80266d0:	68bb      	ldr	r3, [r7, #8]
 80266d2:	695b      	ldr	r3, [r3, #20]
 80266d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80266d6:	68fb      	ldr	r3, [r7, #12]
 80266d8:	681b      	ldr	r3, [r3, #0]
 80266da:	461a      	mov	r2, r3
 80266dc:	687b      	ldr	r3, [r7, #4]
 80266de:	01db      	lsls	r3, r3, #7
 80266e0:	4413      	add	r3, r2
 80266e2:	3384      	adds	r3, #132	; 0x84
 80266e4:	69da      	ldr	r2, [r3, #28]
 80266e6:	68fb      	ldr	r3, [r7, #12]
 80266e8:	681b      	ldr	r3, [r3, #0]
 80266ea:	4619      	mov	r1, r3
 80266ec:	687b      	ldr	r3, [r7, #4]
 80266ee:	01db      	lsls	r3, r3, #7
 80266f0:	440b      	add	r3, r1
 80266f2:	3384      	adds	r3, #132	; 0x84
 80266f4:	4619      	mov	r1, r3
 80266f6:	4b58      	ldr	r3, [pc, #352]	; (8026858 <LTDC_SetConfig+0x32c>)
 80266f8:	4013      	ands	r3, r2
 80266fa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80266fc:	68bb      	ldr	r3, [r7, #8]
 80266fe:	69da      	ldr	r2, [r3, #28]
 8026700:	68bb      	ldr	r3, [r7, #8]
 8026702:	6a1b      	ldr	r3, [r3, #32]
 8026704:	68f9      	ldr	r1, [r7, #12]
 8026706:	6809      	ldr	r1, [r1, #0]
 8026708:	4608      	mov	r0, r1
 802670a:	6879      	ldr	r1, [r7, #4]
 802670c:	01c9      	lsls	r1, r1, #7
 802670e:	4401      	add	r1, r0
 8026710:	3184      	adds	r1, #132	; 0x84
 8026712:	4313      	orrs	r3, r2
 8026714:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8026716:	68fb      	ldr	r3, [r7, #12]
 8026718:	681b      	ldr	r3, [r3, #0]
 802671a:	461a      	mov	r2, r3
 802671c:	687b      	ldr	r3, [r7, #4]
 802671e:	01db      	lsls	r3, r3, #7
 8026720:	4413      	add	r3, r2
 8026722:	3384      	adds	r3, #132	; 0x84
 8026724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026726:	68fb      	ldr	r3, [r7, #12]
 8026728:	681b      	ldr	r3, [r3, #0]
 802672a:	461a      	mov	r2, r3
 802672c:	687b      	ldr	r3, [r7, #4]
 802672e:	01db      	lsls	r3, r3, #7
 8026730:	4413      	add	r3, r2
 8026732:	3384      	adds	r3, #132	; 0x84
 8026734:	461a      	mov	r2, r3
 8026736:	2300      	movs	r3, #0
 8026738:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 802673a:	68fb      	ldr	r3, [r7, #12]
 802673c:	681b      	ldr	r3, [r3, #0]
 802673e:	461a      	mov	r2, r3
 8026740:	687b      	ldr	r3, [r7, #4]
 8026742:	01db      	lsls	r3, r3, #7
 8026744:	4413      	add	r3, r2
 8026746:	3384      	adds	r3, #132	; 0x84
 8026748:	461a      	mov	r2, r3
 802674a:	68bb      	ldr	r3, [r7, #8]
 802674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802674e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8026750:	68bb      	ldr	r3, [r7, #8]
 8026752:	691b      	ldr	r3, [r3, #16]
 8026754:	2b00      	cmp	r3, #0
 8026756:	d102      	bne.n	802675e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8026758:	2304      	movs	r3, #4
 802675a:	61fb      	str	r3, [r7, #28]
 802675c:	e01b      	b.n	8026796 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 802675e:	68bb      	ldr	r3, [r7, #8]
 8026760:	691b      	ldr	r3, [r3, #16]
 8026762:	2b01      	cmp	r3, #1
 8026764:	d102      	bne.n	802676c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8026766:	2303      	movs	r3, #3
 8026768:	61fb      	str	r3, [r7, #28]
 802676a:	e014      	b.n	8026796 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 802676c:	68bb      	ldr	r3, [r7, #8]
 802676e:	691b      	ldr	r3, [r3, #16]
 8026770:	2b04      	cmp	r3, #4
 8026772:	d00b      	beq.n	802678c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8026774:	68bb      	ldr	r3, [r7, #8]
 8026776:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8026778:	2b02      	cmp	r3, #2
 802677a:	d007      	beq.n	802678c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 802677c:	68bb      	ldr	r3, [r7, #8]
 802677e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8026780:	2b03      	cmp	r3, #3
 8026782:	d003      	beq.n	802678c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8026784:	68bb      	ldr	r3, [r7, #8]
 8026786:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8026788:	2b07      	cmp	r3, #7
 802678a:	d102      	bne.n	8026792 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 802678c:	2302      	movs	r3, #2
 802678e:	61fb      	str	r3, [r7, #28]
 8026790:	e001      	b.n	8026796 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8026792:	2301      	movs	r3, #1
 8026794:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8026796:	68fb      	ldr	r3, [r7, #12]
 8026798:	681b      	ldr	r3, [r3, #0]
 802679a:	461a      	mov	r2, r3
 802679c:	687b      	ldr	r3, [r7, #4]
 802679e:	01db      	lsls	r3, r3, #7
 80267a0:	4413      	add	r3, r2
 80267a2:	3384      	adds	r3, #132	; 0x84
 80267a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80267a6:	68fa      	ldr	r2, [r7, #12]
 80267a8:	6812      	ldr	r2, [r2, #0]
 80267aa:	4611      	mov	r1, r2
 80267ac:	687a      	ldr	r2, [r7, #4]
 80267ae:	01d2      	lsls	r2, r2, #7
 80267b0:	440a      	add	r2, r1
 80267b2:	3284      	adds	r2, #132	; 0x84
 80267b4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80267b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80267ba:	68bb      	ldr	r3, [r7, #8]
 80267bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80267be:	69fa      	ldr	r2, [r7, #28]
 80267c0:	fb02 f303 	mul.w	r3, r2, r3
 80267c4:	041a      	lsls	r2, r3, #16
 80267c6:	68bb      	ldr	r3, [r7, #8]
 80267c8:	6859      	ldr	r1, [r3, #4]
 80267ca:	68bb      	ldr	r3, [r7, #8]
 80267cc:	681b      	ldr	r3, [r3, #0]
 80267ce:	1acb      	subs	r3, r1, r3
 80267d0:	69f9      	ldr	r1, [r7, #28]
 80267d2:	fb01 f303 	mul.w	r3, r1, r3
 80267d6:	3303      	adds	r3, #3
 80267d8:	68f9      	ldr	r1, [r7, #12]
 80267da:	6809      	ldr	r1, [r1, #0]
 80267dc:	4608      	mov	r0, r1
 80267de:	6879      	ldr	r1, [r7, #4]
 80267e0:	01c9      	lsls	r1, r1, #7
 80267e2:	4401      	add	r1, r0
 80267e4:	3184      	adds	r1, #132	; 0x84
 80267e6:	4313      	orrs	r3, r2
 80267e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80267ea:	68fb      	ldr	r3, [r7, #12]
 80267ec:	681b      	ldr	r3, [r3, #0]
 80267ee:	461a      	mov	r2, r3
 80267f0:	687b      	ldr	r3, [r7, #4]
 80267f2:	01db      	lsls	r3, r3, #7
 80267f4:	4413      	add	r3, r2
 80267f6:	3384      	adds	r3, #132	; 0x84
 80267f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80267fa:	68fb      	ldr	r3, [r7, #12]
 80267fc:	681b      	ldr	r3, [r3, #0]
 80267fe:	4619      	mov	r1, r3
 8026800:	687b      	ldr	r3, [r7, #4]
 8026802:	01db      	lsls	r3, r3, #7
 8026804:	440b      	add	r3, r1
 8026806:	3384      	adds	r3, #132	; 0x84
 8026808:	4619      	mov	r1, r3
 802680a:	4b14      	ldr	r3, [pc, #80]	; (802685c <LTDC_SetConfig+0x330>)
 802680c:	4013      	ands	r3, r2
 802680e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8026810:	68fb      	ldr	r3, [r7, #12]
 8026812:	681b      	ldr	r3, [r3, #0]
 8026814:	461a      	mov	r2, r3
 8026816:	687b      	ldr	r3, [r7, #4]
 8026818:	01db      	lsls	r3, r3, #7
 802681a:	4413      	add	r3, r2
 802681c:	3384      	adds	r3, #132	; 0x84
 802681e:	461a      	mov	r2, r3
 8026820:	68bb      	ldr	r3, [r7, #8]
 8026822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026824:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8026826:	68fb      	ldr	r3, [r7, #12]
 8026828:	681b      	ldr	r3, [r3, #0]
 802682a:	461a      	mov	r2, r3
 802682c:	687b      	ldr	r3, [r7, #4]
 802682e:	01db      	lsls	r3, r3, #7
 8026830:	4413      	add	r3, r2
 8026832:	3384      	adds	r3, #132	; 0x84
 8026834:	681b      	ldr	r3, [r3, #0]
 8026836:	68fa      	ldr	r2, [r7, #12]
 8026838:	6812      	ldr	r2, [r2, #0]
 802683a:	4611      	mov	r1, r2
 802683c:	687a      	ldr	r2, [r7, #4]
 802683e:	01d2      	lsls	r2, r2, #7
 8026840:	440a      	add	r2, r1
 8026842:	3284      	adds	r2, #132	; 0x84
 8026844:	f043 0301 	orr.w	r3, r3, #1
 8026848:	6013      	str	r3, [r2, #0]
}
 802684a:	bf00      	nop
 802684c:	3724      	adds	r7, #36	; 0x24
 802684e:	46bd      	mov	sp, r7
 8026850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026854:	4770      	bx	lr
 8026856:	bf00      	nop
 8026858:	fffff8f8 	.word	0xfffff8f8
 802685c:	fffff800 	.word	0xfffff800

08026860 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8026860:	b580      	push	{r7, lr}
 8026862:	b082      	sub	sp, #8
 8026864:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8026866:	2300      	movs	r3, #0
 8026868:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 802686a:	4b23      	ldr	r3, [pc, #140]	; (80268f8 <HAL_PWREx_EnableOverDrive+0x98>)
 802686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802686e:	4a22      	ldr	r2, [pc, #136]	; (80268f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8026870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026874:	6413      	str	r3, [r2, #64]	; 0x40
 8026876:	4b20      	ldr	r3, [pc, #128]	; (80268f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8026878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802687a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802687e:	603b      	str	r3, [r7, #0]
 8026880:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8026882:	4b1e      	ldr	r3, [pc, #120]	; (80268fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8026884:	681b      	ldr	r3, [r3, #0]
 8026886:	4a1d      	ldr	r2, [pc, #116]	; (80268fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8026888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802688c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 802688e:	f7fe fc93 	bl	80251b8 <HAL_GetTick>
 8026892:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8026894:	e009      	b.n	80268aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8026896:	f7fe fc8f 	bl	80251b8 <HAL_GetTick>
 802689a:	4602      	mov	r2, r0
 802689c:	687b      	ldr	r3, [r7, #4]
 802689e:	1ad3      	subs	r3, r2, r3
 80268a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80268a4:	d901      	bls.n	80268aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80268a6:	2303      	movs	r3, #3
 80268a8:	e022      	b.n	80268f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80268aa:	4b14      	ldr	r3, [pc, #80]	; (80268fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80268ac:	685b      	ldr	r3, [r3, #4]
 80268ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80268b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80268b6:	d1ee      	bne.n	8026896 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80268b8:	4b10      	ldr	r3, [pc, #64]	; (80268fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80268ba:	681b      	ldr	r3, [r3, #0]
 80268bc:	4a0f      	ldr	r2, [pc, #60]	; (80268fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80268be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80268c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80268c4:	f7fe fc78 	bl	80251b8 <HAL_GetTick>
 80268c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80268ca:	e009      	b.n	80268e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80268cc:	f7fe fc74 	bl	80251b8 <HAL_GetTick>
 80268d0:	4602      	mov	r2, r0
 80268d2:	687b      	ldr	r3, [r7, #4]
 80268d4:	1ad3      	subs	r3, r2, r3
 80268d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80268da:	d901      	bls.n	80268e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80268dc:	2303      	movs	r3, #3
 80268de:	e007      	b.n	80268f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80268e0:	4b06      	ldr	r3, [pc, #24]	; (80268fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80268e2:	685b      	ldr	r3, [r3, #4]
 80268e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80268e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80268ec:	d1ee      	bne.n	80268cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80268ee:	2300      	movs	r3, #0
}
 80268f0:	4618      	mov	r0, r3
 80268f2:	3708      	adds	r7, #8
 80268f4:	46bd      	mov	sp, r7
 80268f6:	bd80      	pop	{r7, pc}
 80268f8:	40023800 	.word	0x40023800
 80268fc:	40007000 	.word	0x40007000

08026900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026900:	b580      	push	{r7, lr}
 8026902:	b086      	sub	sp, #24
 8026904:	af00      	add	r7, sp, #0
 8026906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8026908:	2300      	movs	r3, #0
 802690a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 802690c:	687b      	ldr	r3, [r7, #4]
 802690e:	2b00      	cmp	r3, #0
 8026910:	d101      	bne.n	8026916 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8026912:	2301      	movs	r3, #1
 8026914:	e291      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026916:	687b      	ldr	r3, [r7, #4]
 8026918:	681b      	ldr	r3, [r3, #0]
 802691a:	f003 0301 	and.w	r3, r3, #1
 802691e:	2b00      	cmp	r3, #0
 8026920:	f000 8087 	beq.w	8026a32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8026924:	4b96      	ldr	r3, [pc, #600]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026926:	689b      	ldr	r3, [r3, #8]
 8026928:	f003 030c 	and.w	r3, r3, #12
 802692c:	2b04      	cmp	r3, #4
 802692e:	d00c      	beq.n	802694a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026930:	4b93      	ldr	r3, [pc, #588]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026932:	689b      	ldr	r3, [r3, #8]
 8026934:	f003 030c 	and.w	r3, r3, #12
 8026938:	2b08      	cmp	r3, #8
 802693a:	d112      	bne.n	8026962 <HAL_RCC_OscConfig+0x62>
 802693c:	4b90      	ldr	r3, [pc, #576]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 802693e:	685b      	ldr	r3, [r3, #4]
 8026940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026948:	d10b      	bne.n	8026962 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802694a:	4b8d      	ldr	r3, [pc, #564]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 802694c:	681b      	ldr	r3, [r3, #0]
 802694e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026952:	2b00      	cmp	r3, #0
 8026954:	d06c      	beq.n	8026a30 <HAL_RCC_OscConfig+0x130>
 8026956:	687b      	ldr	r3, [r7, #4]
 8026958:	685b      	ldr	r3, [r3, #4]
 802695a:	2b00      	cmp	r3, #0
 802695c:	d168      	bne.n	8026a30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 802695e:	2301      	movs	r3, #1
 8026960:	e26b      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026962:	687b      	ldr	r3, [r7, #4]
 8026964:	685b      	ldr	r3, [r3, #4]
 8026966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802696a:	d106      	bne.n	802697a <HAL_RCC_OscConfig+0x7a>
 802696c:	4b84      	ldr	r3, [pc, #528]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 802696e:	681b      	ldr	r3, [r3, #0]
 8026970:	4a83      	ldr	r2, [pc, #524]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026976:	6013      	str	r3, [r2, #0]
 8026978:	e02e      	b.n	80269d8 <HAL_RCC_OscConfig+0xd8>
 802697a:	687b      	ldr	r3, [r7, #4]
 802697c:	685b      	ldr	r3, [r3, #4]
 802697e:	2b00      	cmp	r3, #0
 8026980:	d10c      	bne.n	802699c <HAL_RCC_OscConfig+0x9c>
 8026982:	4b7f      	ldr	r3, [pc, #508]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026984:	681b      	ldr	r3, [r3, #0]
 8026986:	4a7e      	ldr	r2, [pc, #504]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802698c:	6013      	str	r3, [r2, #0]
 802698e:	4b7c      	ldr	r3, [pc, #496]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026990:	681b      	ldr	r3, [r3, #0]
 8026992:	4a7b      	ldr	r2, [pc, #492]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026998:	6013      	str	r3, [r2, #0]
 802699a:	e01d      	b.n	80269d8 <HAL_RCC_OscConfig+0xd8>
 802699c:	687b      	ldr	r3, [r7, #4]
 802699e:	685b      	ldr	r3, [r3, #4]
 80269a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80269a4:	d10c      	bne.n	80269c0 <HAL_RCC_OscConfig+0xc0>
 80269a6:	4b76      	ldr	r3, [pc, #472]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 80269a8:	681b      	ldr	r3, [r3, #0]
 80269aa:	4a75      	ldr	r2, [pc, #468]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 80269ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80269b0:	6013      	str	r3, [r2, #0]
 80269b2:	4b73      	ldr	r3, [pc, #460]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 80269b4:	681b      	ldr	r3, [r3, #0]
 80269b6:	4a72      	ldr	r2, [pc, #456]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 80269b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80269bc:	6013      	str	r3, [r2, #0]
 80269be:	e00b      	b.n	80269d8 <HAL_RCC_OscConfig+0xd8>
 80269c0:	4b6f      	ldr	r3, [pc, #444]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 80269c2:	681b      	ldr	r3, [r3, #0]
 80269c4:	4a6e      	ldr	r2, [pc, #440]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 80269c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80269ca:	6013      	str	r3, [r2, #0]
 80269cc:	4b6c      	ldr	r3, [pc, #432]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 80269ce:	681b      	ldr	r3, [r3, #0]
 80269d0:	4a6b      	ldr	r2, [pc, #428]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 80269d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80269d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80269d8:	687b      	ldr	r3, [r7, #4]
 80269da:	685b      	ldr	r3, [r3, #4]
 80269dc:	2b00      	cmp	r3, #0
 80269de:	d013      	beq.n	8026a08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80269e0:	f7fe fbea 	bl	80251b8 <HAL_GetTick>
 80269e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80269e6:	e008      	b.n	80269fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80269e8:	f7fe fbe6 	bl	80251b8 <HAL_GetTick>
 80269ec:	4602      	mov	r2, r0
 80269ee:	693b      	ldr	r3, [r7, #16]
 80269f0:	1ad3      	subs	r3, r2, r3
 80269f2:	2b64      	cmp	r3, #100	; 0x64
 80269f4:	d901      	bls.n	80269fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80269f6:	2303      	movs	r3, #3
 80269f8:	e21f      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80269fa:	4b61      	ldr	r3, [pc, #388]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 80269fc:	681b      	ldr	r3, [r3, #0]
 80269fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026a02:	2b00      	cmp	r3, #0
 8026a04:	d0f0      	beq.n	80269e8 <HAL_RCC_OscConfig+0xe8>
 8026a06:	e014      	b.n	8026a32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026a08:	f7fe fbd6 	bl	80251b8 <HAL_GetTick>
 8026a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026a0e:	e008      	b.n	8026a22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8026a10:	f7fe fbd2 	bl	80251b8 <HAL_GetTick>
 8026a14:	4602      	mov	r2, r0
 8026a16:	693b      	ldr	r3, [r7, #16]
 8026a18:	1ad3      	subs	r3, r2, r3
 8026a1a:	2b64      	cmp	r3, #100	; 0x64
 8026a1c:	d901      	bls.n	8026a22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8026a1e:	2303      	movs	r3, #3
 8026a20:	e20b      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026a22:	4b57      	ldr	r3, [pc, #348]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026a24:	681b      	ldr	r3, [r3, #0]
 8026a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026a2a:	2b00      	cmp	r3, #0
 8026a2c:	d1f0      	bne.n	8026a10 <HAL_RCC_OscConfig+0x110>
 8026a2e:	e000      	b.n	8026a32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026a32:	687b      	ldr	r3, [r7, #4]
 8026a34:	681b      	ldr	r3, [r3, #0]
 8026a36:	f003 0302 	and.w	r3, r3, #2
 8026a3a:	2b00      	cmp	r3, #0
 8026a3c:	d069      	beq.n	8026b12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8026a3e:	4b50      	ldr	r3, [pc, #320]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026a40:	689b      	ldr	r3, [r3, #8]
 8026a42:	f003 030c 	and.w	r3, r3, #12
 8026a46:	2b00      	cmp	r3, #0
 8026a48:	d00b      	beq.n	8026a62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026a4a:	4b4d      	ldr	r3, [pc, #308]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026a4c:	689b      	ldr	r3, [r3, #8]
 8026a4e:	f003 030c 	and.w	r3, r3, #12
 8026a52:	2b08      	cmp	r3, #8
 8026a54:	d11c      	bne.n	8026a90 <HAL_RCC_OscConfig+0x190>
 8026a56:	4b4a      	ldr	r3, [pc, #296]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026a58:	685b      	ldr	r3, [r3, #4]
 8026a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026a5e:	2b00      	cmp	r3, #0
 8026a60:	d116      	bne.n	8026a90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026a62:	4b47      	ldr	r3, [pc, #284]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026a64:	681b      	ldr	r3, [r3, #0]
 8026a66:	f003 0302 	and.w	r3, r3, #2
 8026a6a:	2b00      	cmp	r3, #0
 8026a6c:	d005      	beq.n	8026a7a <HAL_RCC_OscConfig+0x17a>
 8026a6e:	687b      	ldr	r3, [r7, #4]
 8026a70:	68db      	ldr	r3, [r3, #12]
 8026a72:	2b01      	cmp	r3, #1
 8026a74:	d001      	beq.n	8026a7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8026a76:	2301      	movs	r3, #1
 8026a78:	e1df      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026a7a:	4b41      	ldr	r3, [pc, #260]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026a7c:	681b      	ldr	r3, [r3, #0]
 8026a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026a82:	687b      	ldr	r3, [r7, #4]
 8026a84:	691b      	ldr	r3, [r3, #16]
 8026a86:	00db      	lsls	r3, r3, #3
 8026a88:	493d      	ldr	r1, [pc, #244]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026a8a:	4313      	orrs	r3, r2
 8026a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026a8e:	e040      	b.n	8026b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8026a90:	687b      	ldr	r3, [r7, #4]
 8026a92:	68db      	ldr	r3, [r3, #12]
 8026a94:	2b00      	cmp	r3, #0
 8026a96:	d023      	beq.n	8026ae0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8026a98:	4b39      	ldr	r3, [pc, #228]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026a9a:	681b      	ldr	r3, [r3, #0]
 8026a9c:	4a38      	ldr	r2, [pc, #224]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026a9e:	f043 0301 	orr.w	r3, r3, #1
 8026aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026aa4:	f7fe fb88 	bl	80251b8 <HAL_GetTick>
 8026aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026aaa:	e008      	b.n	8026abe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8026aac:	f7fe fb84 	bl	80251b8 <HAL_GetTick>
 8026ab0:	4602      	mov	r2, r0
 8026ab2:	693b      	ldr	r3, [r7, #16]
 8026ab4:	1ad3      	subs	r3, r2, r3
 8026ab6:	2b02      	cmp	r3, #2
 8026ab8:	d901      	bls.n	8026abe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8026aba:	2303      	movs	r3, #3
 8026abc:	e1bd      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026abe:	4b30      	ldr	r3, [pc, #192]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026ac0:	681b      	ldr	r3, [r3, #0]
 8026ac2:	f003 0302 	and.w	r3, r3, #2
 8026ac6:	2b00      	cmp	r3, #0
 8026ac8:	d0f0      	beq.n	8026aac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026aca:	4b2d      	ldr	r3, [pc, #180]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026acc:	681b      	ldr	r3, [r3, #0]
 8026ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026ad2:	687b      	ldr	r3, [r7, #4]
 8026ad4:	691b      	ldr	r3, [r3, #16]
 8026ad6:	00db      	lsls	r3, r3, #3
 8026ad8:	4929      	ldr	r1, [pc, #164]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026ada:	4313      	orrs	r3, r2
 8026adc:	600b      	str	r3, [r1, #0]
 8026ade:	e018      	b.n	8026b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026ae0:	4b27      	ldr	r3, [pc, #156]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026ae2:	681b      	ldr	r3, [r3, #0]
 8026ae4:	4a26      	ldr	r2, [pc, #152]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026ae6:	f023 0301 	bic.w	r3, r3, #1
 8026aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026aec:	f7fe fb64 	bl	80251b8 <HAL_GetTick>
 8026af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026af2:	e008      	b.n	8026b06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8026af4:	f7fe fb60 	bl	80251b8 <HAL_GetTick>
 8026af8:	4602      	mov	r2, r0
 8026afa:	693b      	ldr	r3, [r7, #16]
 8026afc:	1ad3      	subs	r3, r2, r3
 8026afe:	2b02      	cmp	r3, #2
 8026b00:	d901      	bls.n	8026b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8026b02:	2303      	movs	r3, #3
 8026b04:	e199      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026b06:	4b1e      	ldr	r3, [pc, #120]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026b08:	681b      	ldr	r3, [r3, #0]
 8026b0a:	f003 0302 	and.w	r3, r3, #2
 8026b0e:	2b00      	cmp	r3, #0
 8026b10:	d1f0      	bne.n	8026af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026b12:	687b      	ldr	r3, [r7, #4]
 8026b14:	681b      	ldr	r3, [r3, #0]
 8026b16:	f003 0308 	and.w	r3, r3, #8
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d038      	beq.n	8026b90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8026b1e:	687b      	ldr	r3, [r7, #4]
 8026b20:	695b      	ldr	r3, [r3, #20]
 8026b22:	2b00      	cmp	r3, #0
 8026b24:	d019      	beq.n	8026b5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026b26:	4b16      	ldr	r3, [pc, #88]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026b2a:	4a15      	ldr	r2, [pc, #84]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026b2c:	f043 0301 	orr.w	r3, r3, #1
 8026b30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026b32:	f7fe fb41 	bl	80251b8 <HAL_GetTick>
 8026b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026b38:	e008      	b.n	8026b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8026b3a:	f7fe fb3d 	bl	80251b8 <HAL_GetTick>
 8026b3e:	4602      	mov	r2, r0
 8026b40:	693b      	ldr	r3, [r7, #16]
 8026b42:	1ad3      	subs	r3, r2, r3
 8026b44:	2b02      	cmp	r3, #2
 8026b46:	d901      	bls.n	8026b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8026b48:	2303      	movs	r3, #3
 8026b4a:	e176      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026b4c:	4b0c      	ldr	r3, [pc, #48]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026b50:	f003 0302 	and.w	r3, r3, #2
 8026b54:	2b00      	cmp	r3, #0
 8026b56:	d0f0      	beq.n	8026b3a <HAL_RCC_OscConfig+0x23a>
 8026b58:	e01a      	b.n	8026b90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026b5a:	4b09      	ldr	r3, [pc, #36]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026b5e:	4a08      	ldr	r2, [pc, #32]	; (8026b80 <HAL_RCC_OscConfig+0x280>)
 8026b60:	f023 0301 	bic.w	r3, r3, #1
 8026b64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026b66:	f7fe fb27 	bl	80251b8 <HAL_GetTick>
 8026b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026b6c:	e00a      	b.n	8026b84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8026b6e:	f7fe fb23 	bl	80251b8 <HAL_GetTick>
 8026b72:	4602      	mov	r2, r0
 8026b74:	693b      	ldr	r3, [r7, #16]
 8026b76:	1ad3      	subs	r3, r2, r3
 8026b78:	2b02      	cmp	r3, #2
 8026b7a:	d903      	bls.n	8026b84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8026b7c:	2303      	movs	r3, #3
 8026b7e:	e15c      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
 8026b80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026b84:	4b91      	ldr	r3, [pc, #580]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026b88:	f003 0302 	and.w	r3, r3, #2
 8026b8c:	2b00      	cmp	r3, #0
 8026b8e:	d1ee      	bne.n	8026b6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026b90:	687b      	ldr	r3, [r7, #4]
 8026b92:	681b      	ldr	r3, [r3, #0]
 8026b94:	f003 0304 	and.w	r3, r3, #4
 8026b98:	2b00      	cmp	r3, #0
 8026b9a:	f000 80a4 	beq.w	8026ce6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8026b9e:	4b8b      	ldr	r3, [pc, #556]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026ba6:	2b00      	cmp	r3, #0
 8026ba8:	d10d      	bne.n	8026bc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8026baa:	4b88      	ldr	r3, [pc, #544]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026bae:	4a87      	ldr	r2, [pc, #540]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8026bb6:	4b85      	ldr	r3, [pc, #532]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026bbe:	60bb      	str	r3, [r7, #8]
 8026bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8026bc2:	2301      	movs	r3, #1
 8026bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8026bc6:	4b82      	ldr	r3, [pc, #520]	; (8026dd0 <HAL_RCC_OscConfig+0x4d0>)
 8026bc8:	681b      	ldr	r3, [r3, #0]
 8026bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026bce:	2b00      	cmp	r3, #0
 8026bd0:	d118      	bne.n	8026c04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8026bd2:	4b7f      	ldr	r3, [pc, #508]	; (8026dd0 <HAL_RCC_OscConfig+0x4d0>)
 8026bd4:	681b      	ldr	r3, [r3, #0]
 8026bd6:	4a7e      	ldr	r2, [pc, #504]	; (8026dd0 <HAL_RCC_OscConfig+0x4d0>)
 8026bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8026bde:	f7fe faeb 	bl	80251b8 <HAL_GetTick>
 8026be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8026be4:	e008      	b.n	8026bf8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8026be6:	f7fe fae7 	bl	80251b8 <HAL_GetTick>
 8026bea:	4602      	mov	r2, r0
 8026bec:	693b      	ldr	r3, [r7, #16]
 8026bee:	1ad3      	subs	r3, r2, r3
 8026bf0:	2b64      	cmp	r3, #100	; 0x64
 8026bf2:	d901      	bls.n	8026bf8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8026bf4:	2303      	movs	r3, #3
 8026bf6:	e120      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8026bf8:	4b75      	ldr	r3, [pc, #468]	; (8026dd0 <HAL_RCC_OscConfig+0x4d0>)
 8026bfa:	681b      	ldr	r3, [r3, #0]
 8026bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026c00:	2b00      	cmp	r3, #0
 8026c02:	d0f0      	beq.n	8026be6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026c04:	687b      	ldr	r3, [r7, #4]
 8026c06:	689b      	ldr	r3, [r3, #8]
 8026c08:	2b01      	cmp	r3, #1
 8026c0a:	d106      	bne.n	8026c1a <HAL_RCC_OscConfig+0x31a>
 8026c0c:	4b6f      	ldr	r3, [pc, #444]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c10:	4a6e      	ldr	r2, [pc, #440]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c12:	f043 0301 	orr.w	r3, r3, #1
 8026c16:	6713      	str	r3, [r2, #112]	; 0x70
 8026c18:	e02d      	b.n	8026c76 <HAL_RCC_OscConfig+0x376>
 8026c1a:	687b      	ldr	r3, [r7, #4]
 8026c1c:	689b      	ldr	r3, [r3, #8]
 8026c1e:	2b00      	cmp	r3, #0
 8026c20:	d10c      	bne.n	8026c3c <HAL_RCC_OscConfig+0x33c>
 8026c22:	4b6a      	ldr	r3, [pc, #424]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c26:	4a69      	ldr	r2, [pc, #420]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c28:	f023 0301 	bic.w	r3, r3, #1
 8026c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8026c2e:	4b67      	ldr	r3, [pc, #412]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c32:	4a66      	ldr	r2, [pc, #408]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c34:	f023 0304 	bic.w	r3, r3, #4
 8026c38:	6713      	str	r3, [r2, #112]	; 0x70
 8026c3a:	e01c      	b.n	8026c76 <HAL_RCC_OscConfig+0x376>
 8026c3c:	687b      	ldr	r3, [r7, #4]
 8026c3e:	689b      	ldr	r3, [r3, #8]
 8026c40:	2b05      	cmp	r3, #5
 8026c42:	d10c      	bne.n	8026c5e <HAL_RCC_OscConfig+0x35e>
 8026c44:	4b61      	ldr	r3, [pc, #388]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c48:	4a60      	ldr	r2, [pc, #384]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c4a:	f043 0304 	orr.w	r3, r3, #4
 8026c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8026c50:	4b5e      	ldr	r3, [pc, #376]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c54:	4a5d      	ldr	r2, [pc, #372]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c56:	f043 0301 	orr.w	r3, r3, #1
 8026c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8026c5c:	e00b      	b.n	8026c76 <HAL_RCC_OscConfig+0x376>
 8026c5e:	4b5b      	ldr	r3, [pc, #364]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c62:	4a5a      	ldr	r2, [pc, #360]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c64:	f023 0301 	bic.w	r3, r3, #1
 8026c68:	6713      	str	r3, [r2, #112]	; 0x70
 8026c6a:	4b58      	ldr	r3, [pc, #352]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c6e:	4a57      	ldr	r2, [pc, #348]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c70:	f023 0304 	bic.w	r3, r3, #4
 8026c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026c76:	687b      	ldr	r3, [r7, #4]
 8026c78:	689b      	ldr	r3, [r3, #8]
 8026c7a:	2b00      	cmp	r3, #0
 8026c7c:	d015      	beq.n	8026caa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026c7e:	f7fe fa9b 	bl	80251b8 <HAL_GetTick>
 8026c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026c84:	e00a      	b.n	8026c9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8026c86:	f7fe fa97 	bl	80251b8 <HAL_GetTick>
 8026c8a:	4602      	mov	r2, r0
 8026c8c:	693b      	ldr	r3, [r7, #16]
 8026c8e:	1ad3      	subs	r3, r2, r3
 8026c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8026c94:	4293      	cmp	r3, r2
 8026c96:	d901      	bls.n	8026c9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8026c98:	2303      	movs	r3, #3
 8026c9a:	e0ce      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026c9c:	4b4b      	ldr	r3, [pc, #300]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026ca0:	f003 0302 	and.w	r3, r3, #2
 8026ca4:	2b00      	cmp	r3, #0
 8026ca6:	d0ee      	beq.n	8026c86 <HAL_RCC_OscConfig+0x386>
 8026ca8:	e014      	b.n	8026cd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026caa:	f7fe fa85 	bl	80251b8 <HAL_GetTick>
 8026cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026cb0:	e00a      	b.n	8026cc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8026cb2:	f7fe fa81 	bl	80251b8 <HAL_GetTick>
 8026cb6:	4602      	mov	r2, r0
 8026cb8:	693b      	ldr	r3, [r7, #16]
 8026cba:	1ad3      	subs	r3, r2, r3
 8026cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8026cc0:	4293      	cmp	r3, r2
 8026cc2:	d901      	bls.n	8026cc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8026cc4:	2303      	movs	r3, #3
 8026cc6:	e0b8      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026cc8:	4b40      	ldr	r3, [pc, #256]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026ccc:	f003 0302 	and.w	r3, r3, #2
 8026cd0:	2b00      	cmp	r3, #0
 8026cd2:	d1ee      	bne.n	8026cb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8026cd4:	7dfb      	ldrb	r3, [r7, #23]
 8026cd6:	2b01      	cmp	r3, #1
 8026cd8:	d105      	bne.n	8026ce6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8026cda:	4b3c      	ldr	r3, [pc, #240]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026cde:	4a3b      	ldr	r2, [pc, #236]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8026ce4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8026ce6:	687b      	ldr	r3, [r7, #4]
 8026ce8:	699b      	ldr	r3, [r3, #24]
 8026cea:	2b00      	cmp	r3, #0
 8026cec:	f000 80a4 	beq.w	8026e38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8026cf0:	4b36      	ldr	r3, [pc, #216]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026cf2:	689b      	ldr	r3, [r3, #8]
 8026cf4:	f003 030c 	and.w	r3, r3, #12
 8026cf8:	2b08      	cmp	r3, #8
 8026cfa:	d06b      	beq.n	8026dd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8026cfc:	687b      	ldr	r3, [r7, #4]
 8026cfe:	699b      	ldr	r3, [r3, #24]
 8026d00:	2b02      	cmp	r3, #2
 8026d02:	d149      	bne.n	8026d98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026d04:	4b31      	ldr	r3, [pc, #196]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026d06:	681b      	ldr	r3, [r3, #0]
 8026d08:	4a30      	ldr	r2, [pc, #192]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8026d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026d10:	f7fe fa52 	bl	80251b8 <HAL_GetTick>
 8026d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026d16:	e008      	b.n	8026d2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8026d18:	f7fe fa4e 	bl	80251b8 <HAL_GetTick>
 8026d1c:	4602      	mov	r2, r0
 8026d1e:	693b      	ldr	r3, [r7, #16]
 8026d20:	1ad3      	subs	r3, r2, r3
 8026d22:	2b02      	cmp	r3, #2
 8026d24:	d901      	bls.n	8026d2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8026d26:	2303      	movs	r3, #3
 8026d28:	e087      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026d2a:	4b28      	ldr	r3, [pc, #160]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026d2c:	681b      	ldr	r3, [r3, #0]
 8026d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026d32:	2b00      	cmp	r3, #0
 8026d34:	d1f0      	bne.n	8026d18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8026d36:	687b      	ldr	r3, [r7, #4]
 8026d38:	69da      	ldr	r2, [r3, #28]
 8026d3a:	687b      	ldr	r3, [r7, #4]
 8026d3c:	6a1b      	ldr	r3, [r3, #32]
 8026d3e:	431a      	orrs	r2, r3
 8026d40:	687b      	ldr	r3, [r7, #4]
 8026d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d44:	019b      	lsls	r3, r3, #6
 8026d46:	431a      	orrs	r2, r3
 8026d48:	687b      	ldr	r3, [r7, #4]
 8026d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d4c:	085b      	lsrs	r3, r3, #1
 8026d4e:	3b01      	subs	r3, #1
 8026d50:	041b      	lsls	r3, r3, #16
 8026d52:	431a      	orrs	r2, r3
 8026d54:	687b      	ldr	r3, [r7, #4]
 8026d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d58:	061b      	lsls	r3, r3, #24
 8026d5a:	4313      	orrs	r3, r2
 8026d5c:	4a1b      	ldr	r2, [pc, #108]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026d5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8026d62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8026d64:	4b19      	ldr	r3, [pc, #100]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026d66:	681b      	ldr	r3, [r3, #0]
 8026d68:	4a18      	ldr	r2, [pc, #96]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8026d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026d70:	f7fe fa22 	bl	80251b8 <HAL_GetTick>
 8026d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026d76:	e008      	b.n	8026d8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8026d78:	f7fe fa1e 	bl	80251b8 <HAL_GetTick>
 8026d7c:	4602      	mov	r2, r0
 8026d7e:	693b      	ldr	r3, [r7, #16]
 8026d80:	1ad3      	subs	r3, r2, r3
 8026d82:	2b02      	cmp	r3, #2
 8026d84:	d901      	bls.n	8026d8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8026d86:	2303      	movs	r3, #3
 8026d88:	e057      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026d8a:	4b10      	ldr	r3, [pc, #64]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026d8c:	681b      	ldr	r3, [r3, #0]
 8026d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026d92:	2b00      	cmp	r3, #0
 8026d94:	d0f0      	beq.n	8026d78 <HAL_RCC_OscConfig+0x478>
 8026d96:	e04f      	b.n	8026e38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026d98:	4b0c      	ldr	r3, [pc, #48]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026d9a:	681b      	ldr	r3, [r3, #0]
 8026d9c:	4a0b      	ldr	r2, [pc, #44]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8026da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026da4:	f7fe fa08 	bl	80251b8 <HAL_GetTick>
 8026da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026daa:	e008      	b.n	8026dbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8026dac:	f7fe fa04 	bl	80251b8 <HAL_GetTick>
 8026db0:	4602      	mov	r2, r0
 8026db2:	693b      	ldr	r3, [r7, #16]
 8026db4:	1ad3      	subs	r3, r2, r3
 8026db6:	2b02      	cmp	r3, #2
 8026db8:	d901      	bls.n	8026dbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8026dba:	2303      	movs	r3, #3
 8026dbc:	e03d      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026dbe:	4b03      	ldr	r3, [pc, #12]	; (8026dcc <HAL_RCC_OscConfig+0x4cc>)
 8026dc0:	681b      	ldr	r3, [r3, #0]
 8026dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026dc6:	2b00      	cmp	r3, #0
 8026dc8:	d1f0      	bne.n	8026dac <HAL_RCC_OscConfig+0x4ac>
 8026dca:	e035      	b.n	8026e38 <HAL_RCC_OscConfig+0x538>
 8026dcc:	40023800 	.word	0x40023800
 8026dd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8026dd4:	4b1b      	ldr	r3, [pc, #108]	; (8026e44 <HAL_RCC_OscConfig+0x544>)
 8026dd6:	685b      	ldr	r3, [r3, #4]
 8026dd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026dda:	687b      	ldr	r3, [r7, #4]
 8026ddc:	699b      	ldr	r3, [r3, #24]
 8026dde:	2b01      	cmp	r3, #1
 8026de0:	d028      	beq.n	8026e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026de2:	68fb      	ldr	r3, [r7, #12]
 8026de4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8026de8:	687b      	ldr	r3, [r7, #4]
 8026dea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026dec:	429a      	cmp	r2, r3
 8026dee:	d121      	bne.n	8026e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8026df0:	68fb      	ldr	r3, [r7, #12]
 8026df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8026df6:	687b      	ldr	r3, [r7, #4]
 8026df8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026dfa:	429a      	cmp	r2, r3
 8026dfc:	d11a      	bne.n	8026e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8026dfe:	68fa      	ldr	r2, [r7, #12]
 8026e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8026e04:	4013      	ands	r3, r2
 8026e06:	687a      	ldr	r2, [r7, #4]
 8026e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026e0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8026e0c:	4293      	cmp	r3, r2
 8026e0e:	d111      	bne.n	8026e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8026e10:	68fb      	ldr	r3, [r7, #12]
 8026e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8026e16:	687b      	ldr	r3, [r7, #4]
 8026e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e1a:	085b      	lsrs	r3, r3, #1
 8026e1c:	3b01      	subs	r3, #1
 8026e1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8026e20:	429a      	cmp	r2, r3
 8026e22:	d107      	bne.n	8026e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8026e24:	68fb      	ldr	r3, [r7, #12]
 8026e26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8026e2a:	687b      	ldr	r3, [r7, #4]
 8026e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026e2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8026e30:	429a      	cmp	r2, r3
 8026e32:	d001      	beq.n	8026e38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8026e34:	2301      	movs	r3, #1
 8026e36:	e000      	b.n	8026e3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8026e38:	2300      	movs	r3, #0
}
 8026e3a:	4618      	mov	r0, r3
 8026e3c:	3718      	adds	r7, #24
 8026e3e:	46bd      	mov	sp, r7
 8026e40:	bd80      	pop	{r7, pc}
 8026e42:	bf00      	nop
 8026e44:	40023800 	.word	0x40023800

08026e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8026e48:	b580      	push	{r7, lr}
 8026e4a:	b084      	sub	sp, #16
 8026e4c:	af00      	add	r7, sp, #0
 8026e4e:	6078      	str	r0, [r7, #4]
 8026e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8026e52:	2300      	movs	r3, #0
 8026e54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8026e56:	687b      	ldr	r3, [r7, #4]
 8026e58:	2b00      	cmp	r3, #0
 8026e5a:	d101      	bne.n	8026e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8026e5c:	2301      	movs	r3, #1
 8026e5e:	e0d0      	b.n	8027002 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8026e60:	4b6a      	ldr	r3, [pc, #424]	; (802700c <HAL_RCC_ClockConfig+0x1c4>)
 8026e62:	681b      	ldr	r3, [r3, #0]
 8026e64:	f003 030f 	and.w	r3, r3, #15
 8026e68:	683a      	ldr	r2, [r7, #0]
 8026e6a:	429a      	cmp	r2, r3
 8026e6c:	d910      	bls.n	8026e90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026e6e:	4b67      	ldr	r3, [pc, #412]	; (802700c <HAL_RCC_ClockConfig+0x1c4>)
 8026e70:	681b      	ldr	r3, [r3, #0]
 8026e72:	f023 020f 	bic.w	r2, r3, #15
 8026e76:	4965      	ldr	r1, [pc, #404]	; (802700c <HAL_RCC_ClockConfig+0x1c4>)
 8026e78:	683b      	ldr	r3, [r7, #0]
 8026e7a:	4313      	orrs	r3, r2
 8026e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8026e7e:	4b63      	ldr	r3, [pc, #396]	; (802700c <HAL_RCC_ClockConfig+0x1c4>)
 8026e80:	681b      	ldr	r3, [r3, #0]
 8026e82:	f003 030f 	and.w	r3, r3, #15
 8026e86:	683a      	ldr	r2, [r7, #0]
 8026e88:	429a      	cmp	r2, r3
 8026e8a:	d001      	beq.n	8026e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8026e8c:	2301      	movs	r3, #1
 8026e8e:	e0b8      	b.n	8027002 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8026e90:	687b      	ldr	r3, [r7, #4]
 8026e92:	681b      	ldr	r3, [r3, #0]
 8026e94:	f003 0302 	and.w	r3, r3, #2
 8026e98:	2b00      	cmp	r3, #0
 8026e9a:	d020      	beq.n	8026ede <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026e9c:	687b      	ldr	r3, [r7, #4]
 8026e9e:	681b      	ldr	r3, [r3, #0]
 8026ea0:	f003 0304 	and.w	r3, r3, #4
 8026ea4:	2b00      	cmp	r3, #0
 8026ea6:	d005      	beq.n	8026eb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8026ea8:	4b59      	ldr	r3, [pc, #356]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026eaa:	689b      	ldr	r3, [r3, #8]
 8026eac:	4a58      	ldr	r2, [pc, #352]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8026eb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026eb4:	687b      	ldr	r3, [r7, #4]
 8026eb6:	681b      	ldr	r3, [r3, #0]
 8026eb8:	f003 0308 	and.w	r3, r3, #8
 8026ebc:	2b00      	cmp	r3, #0
 8026ebe:	d005      	beq.n	8026ecc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8026ec0:	4b53      	ldr	r3, [pc, #332]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026ec2:	689b      	ldr	r3, [r3, #8]
 8026ec4:	4a52      	ldr	r2, [pc, #328]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8026eca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8026ecc:	4b50      	ldr	r3, [pc, #320]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026ece:	689b      	ldr	r3, [r3, #8]
 8026ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8026ed4:	687b      	ldr	r3, [r7, #4]
 8026ed6:	689b      	ldr	r3, [r3, #8]
 8026ed8:	494d      	ldr	r1, [pc, #308]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026eda:	4313      	orrs	r3, r2
 8026edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8026ede:	687b      	ldr	r3, [r7, #4]
 8026ee0:	681b      	ldr	r3, [r3, #0]
 8026ee2:	f003 0301 	and.w	r3, r3, #1
 8026ee6:	2b00      	cmp	r3, #0
 8026ee8:	d040      	beq.n	8026f6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8026eea:	687b      	ldr	r3, [r7, #4]
 8026eec:	685b      	ldr	r3, [r3, #4]
 8026eee:	2b01      	cmp	r3, #1
 8026ef0:	d107      	bne.n	8026f02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026ef2:	4b47      	ldr	r3, [pc, #284]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026ef4:	681b      	ldr	r3, [r3, #0]
 8026ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026efa:	2b00      	cmp	r3, #0
 8026efc:	d115      	bne.n	8026f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8026efe:	2301      	movs	r3, #1
 8026f00:	e07f      	b.n	8027002 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8026f02:	687b      	ldr	r3, [r7, #4]
 8026f04:	685b      	ldr	r3, [r3, #4]
 8026f06:	2b02      	cmp	r3, #2
 8026f08:	d107      	bne.n	8026f1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026f0a:	4b41      	ldr	r3, [pc, #260]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026f0c:	681b      	ldr	r3, [r3, #0]
 8026f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026f12:	2b00      	cmp	r3, #0
 8026f14:	d109      	bne.n	8026f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8026f16:	2301      	movs	r3, #1
 8026f18:	e073      	b.n	8027002 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026f1a:	4b3d      	ldr	r3, [pc, #244]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026f1c:	681b      	ldr	r3, [r3, #0]
 8026f1e:	f003 0302 	and.w	r3, r3, #2
 8026f22:	2b00      	cmp	r3, #0
 8026f24:	d101      	bne.n	8026f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8026f26:	2301      	movs	r3, #1
 8026f28:	e06b      	b.n	8027002 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8026f2a:	4b39      	ldr	r3, [pc, #228]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026f2c:	689b      	ldr	r3, [r3, #8]
 8026f2e:	f023 0203 	bic.w	r2, r3, #3
 8026f32:	687b      	ldr	r3, [r7, #4]
 8026f34:	685b      	ldr	r3, [r3, #4]
 8026f36:	4936      	ldr	r1, [pc, #216]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026f38:	4313      	orrs	r3, r2
 8026f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8026f3c:	f7fe f93c 	bl	80251b8 <HAL_GetTick>
 8026f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026f42:	e00a      	b.n	8026f5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8026f44:	f7fe f938 	bl	80251b8 <HAL_GetTick>
 8026f48:	4602      	mov	r2, r0
 8026f4a:	68fb      	ldr	r3, [r7, #12]
 8026f4c:	1ad3      	subs	r3, r2, r3
 8026f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8026f52:	4293      	cmp	r3, r2
 8026f54:	d901      	bls.n	8026f5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8026f56:	2303      	movs	r3, #3
 8026f58:	e053      	b.n	8027002 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026f5a:	4b2d      	ldr	r3, [pc, #180]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026f5c:	689b      	ldr	r3, [r3, #8]
 8026f5e:	f003 020c 	and.w	r2, r3, #12
 8026f62:	687b      	ldr	r3, [r7, #4]
 8026f64:	685b      	ldr	r3, [r3, #4]
 8026f66:	009b      	lsls	r3, r3, #2
 8026f68:	429a      	cmp	r2, r3
 8026f6a:	d1eb      	bne.n	8026f44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8026f6c:	4b27      	ldr	r3, [pc, #156]	; (802700c <HAL_RCC_ClockConfig+0x1c4>)
 8026f6e:	681b      	ldr	r3, [r3, #0]
 8026f70:	f003 030f 	and.w	r3, r3, #15
 8026f74:	683a      	ldr	r2, [r7, #0]
 8026f76:	429a      	cmp	r2, r3
 8026f78:	d210      	bcs.n	8026f9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026f7a:	4b24      	ldr	r3, [pc, #144]	; (802700c <HAL_RCC_ClockConfig+0x1c4>)
 8026f7c:	681b      	ldr	r3, [r3, #0]
 8026f7e:	f023 020f 	bic.w	r2, r3, #15
 8026f82:	4922      	ldr	r1, [pc, #136]	; (802700c <HAL_RCC_ClockConfig+0x1c4>)
 8026f84:	683b      	ldr	r3, [r7, #0]
 8026f86:	4313      	orrs	r3, r2
 8026f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8026f8a:	4b20      	ldr	r3, [pc, #128]	; (802700c <HAL_RCC_ClockConfig+0x1c4>)
 8026f8c:	681b      	ldr	r3, [r3, #0]
 8026f8e:	f003 030f 	and.w	r3, r3, #15
 8026f92:	683a      	ldr	r2, [r7, #0]
 8026f94:	429a      	cmp	r2, r3
 8026f96:	d001      	beq.n	8026f9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8026f98:	2301      	movs	r3, #1
 8026f9a:	e032      	b.n	8027002 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026f9c:	687b      	ldr	r3, [r7, #4]
 8026f9e:	681b      	ldr	r3, [r3, #0]
 8026fa0:	f003 0304 	and.w	r3, r3, #4
 8026fa4:	2b00      	cmp	r3, #0
 8026fa6:	d008      	beq.n	8026fba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8026fa8:	4b19      	ldr	r3, [pc, #100]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026faa:	689b      	ldr	r3, [r3, #8]
 8026fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8026fb0:	687b      	ldr	r3, [r7, #4]
 8026fb2:	68db      	ldr	r3, [r3, #12]
 8026fb4:	4916      	ldr	r1, [pc, #88]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026fb6:	4313      	orrs	r3, r2
 8026fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026fba:	687b      	ldr	r3, [r7, #4]
 8026fbc:	681b      	ldr	r3, [r3, #0]
 8026fbe:	f003 0308 	and.w	r3, r3, #8
 8026fc2:	2b00      	cmp	r3, #0
 8026fc4:	d009      	beq.n	8026fda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8026fc6:	4b12      	ldr	r3, [pc, #72]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026fc8:	689b      	ldr	r3, [r3, #8]
 8026fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8026fce:	687b      	ldr	r3, [r7, #4]
 8026fd0:	691b      	ldr	r3, [r3, #16]
 8026fd2:	00db      	lsls	r3, r3, #3
 8026fd4:	490e      	ldr	r1, [pc, #56]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026fd6:	4313      	orrs	r3, r2
 8026fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8026fda:	f000 f831 	bl	8027040 <HAL_RCC_GetSysClockFreq>
 8026fde:	4601      	mov	r1, r0
 8026fe0:	4b0b      	ldr	r3, [pc, #44]	; (8027010 <HAL_RCC_ClockConfig+0x1c8>)
 8026fe2:	689b      	ldr	r3, [r3, #8]
 8026fe4:	091b      	lsrs	r3, r3, #4
 8026fe6:	f003 030f 	and.w	r3, r3, #15
 8026fea:	4a0a      	ldr	r2, [pc, #40]	; (8027014 <HAL_RCC_ClockConfig+0x1cc>)
 8026fec:	5cd3      	ldrb	r3, [r2, r3]
 8026fee:	fa21 f303 	lsr.w	r3, r1, r3
 8026ff2:	4a09      	ldr	r2, [pc, #36]	; (8027018 <HAL_RCC_ClockConfig+0x1d0>)
 8026ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8026ff6:	4b09      	ldr	r3, [pc, #36]	; (802701c <HAL_RCC_ClockConfig+0x1d4>)
 8026ff8:	681b      	ldr	r3, [r3, #0]
 8026ffa:	4618      	mov	r0, r3
 8026ffc:	f7da f950 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8027000:	2300      	movs	r3, #0
}
 8027002:	4618      	mov	r0, r3
 8027004:	3710      	adds	r7, #16
 8027006:	46bd      	mov	sp, r7
 8027008:	bd80      	pop	{r7, pc}
 802700a:	bf00      	nop
 802700c:	40023c00 	.word	0x40023c00
 8027010:	40023800 	.word	0x40023800
 8027014:	080284b4 	.word	0x080284b4
 8027018:	20000000 	.word	0x20000000
 802701c:	2000004c 	.word	0x2000004c

08027020 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8027020:	b480      	push	{r7}
 8027022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8027024:	4b05      	ldr	r3, [pc, #20]	; (802703c <HAL_RCC_EnableCSS+0x1c>)
 8027026:	681b      	ldr	r3, [r3, #0]
 8027028:	4a04      	ldr	r2, [pc, #16]	; (802703c <HAL_RCC_EnableCSS+0x1c>)
 802702a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802702e:	6013      	str	r3, [r2, #0]
}
 8027030:	bf00      	nop
 8027032:	46bd      	mov	sp, r7
 8027034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027038:	4770      	bx	lr
 802703a:	bf00      	nop
 802703c:	40023800 	.word	0x40023800

08027040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8027040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027042:	b085      	sub	sp, #20
 8027044:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8027046:	2300      	movs	r3, #0
 8027048:	607b      	str	r3, [r7, #4]
 802704a:	2300      	movs	r3, #0
 802704c:	60fb      	str	r3, [r7, #12]
 802704e:	2300      	movs	r3, #0
 8027050:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8027052:	2300      	movs	r3, #0
 8027054:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8027056:	4b50      	ldr	r3, [pc, #320]	; (8027198 <HAL_RCC_GetSysClockFreq+0x158>)
 8027058:	689b      	ldr	r3, [r3, #8]
 802705a:	f003 030c 	and.w	r3, r3, #12
 802705e:	2b04      	cmp	r3, #4
 8027060:	d007      	beq.n	8027072 <HAL_RCC_GetSysClockFreq+0x32>
 8027062:	2b08      	cmp	r3, #8
 8027064:	d008      	beq.n	8027078 <HAL_RCC_GetSysClockFreq+0x38>
 8027066:	2b00      	cmp	r3, #0
 8027068:	f040 808d 	bne.w	8027186 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802706c:	4b4b      	ldr	r3, [pc, #300]	; (802719c <HAL_RCC_GetSysClockFreq+0x15c>)
 802706e:	60bb      	str	r3, [r7, #8]
      break;
 8027070:	e08c      	b.n	802718c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8027072:	4b4b      	ldr	r3, [pc, #300]	; (80271a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8027074:	60bb      	str	r3, [r7, #8]
      break;
 8027076:	e089      	b.n	802718c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027078:	4b47      	ldr	r3, [pc, #284]	; (8027198 <HAL_RCC_GetSysClockFreq+0x158>)
 802707a:	685b      	ldr	r3, [r3, #4]
 802707c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027080:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8027082:	4b45      	ldr	r3, [pc, #276]	; (8027198 <HAL_RCC_GetSysClockFreq+0x158>)
 8027084:	685b      	ldr	r3, [r3, #4]
 8027086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802708a:	2b00      	cmp	r3, #0
 802708c:	d023      	beq.n	80270d6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802708e:	4b42      	ldr	r3, [pc, #264]	; (8027198 <HAL_RCC_GetSysClockFreq+0x158>)
 8027090:	685b      	ldr	r3, [r3, #4]
 8027092:	099b      	lsrs	r3, r3, #6
 8027094:	f04f 0400 	mov.w	r4, #0
 8027098:	f240 11ff 	movw	r1, #511	; 0x1ff
 802709c:	f04f 0200 	mov.w	r2, #0
 80270a0:	ea03 0501 	and.w	r5, r3, r1
 80270a4:	ea04 0602 	and.w	r6, r4, r2
 80270a8:	4a3d      	ldr	r2, [pc, #244]	; (80271a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80270aa:	fb02 f106 	mul.w	r1, r2, r6
 80270ae:	2200      	movs	r2, #0
 80270b0:	fb02 f205 	mul.w	r2, r2, r5
 80270b4:	440a      	add	r2, r1
 80270b6:	493a      	ldr	r1, [pc, #232]	; (80271a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80270b8:	fba5 0101 	umull	r0, r1, r5, r1
 80270bc:	1853      	adds	r3, r2, r1
 80270be:	4619      	mov	r1, r3
 80270c0:	687b      	ldr	r3, [r7, #4]
 80270c2:	f04f 0400 	mov.w	r4, #0
 80270c6:	461a      	mov	r2, r3
 80270c8:	4623      	mov	r3, r4
 80270ca:	f7d9 f8af 	bl	800022c <__aeabi_uldivmod>
 80270ce:	4603      	mov	r3, r0
 80270d0:	460c      	mov	r4, r1
 80270d2:	60fb      	str	r3, [r7, #12]
 80270d4:	e049      	b.n	802716a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80270d6:	4b30      	ldr	r3, [pc, #192]	; (8027198 <HAL_RCC_GetSysClockFreq+0x158>)
 80270d8:	685b      	ldr	r3, [r3, #4]
 80270da:	099b      	lsrs	r3, r3, #6
 80270dc:	f04f 0400 	mov.w	r4, #0
 80270e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80270e4:	f04f 0200 	mov.w	r2, #0
 80270e8:	ea03 0501 	and.w	r5, r3, r1
 80270ec:	ea04 0602 	and.w	r6, r4, r2
 80270f0:	4629      	mov	r1, r5
 80270f2:	4632      	mov	r2, r6
 80270f4:	f04f 0300 	mov.w	r3, #0
 80270f8:	f04f 0400 	mov.w	r4, #0
 80270fc:	0154      	lsls	r4, r2, #5
 80270fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8027102:	014b      	lsls	r3, r1, #5
 8027104:	4619      	mov	r1, r3
 8027106:	4622      	mov	r2, r4
 8027108:	1b49      	subs	r1, r1, r5
 802710a:	eb62 0206 	sbc.w	r2, r2, r6
 802710e:	f04f 0300 	mov.w	r3, #0
 8027112:	f04f 0400 	mov.w	r4, #0
 8027116:	0194      	lsls	r4, r2, #6
 8027118:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 802711c:	018b      	lsls	r3, r1, #6
 802711e:	1a5b      	subs	r3, r3, r1
 8027120:	eb64 0402 	sbc.w	r4, r4, r2
 8027124:	f04f 0100 	mov.w	r1, #0
 8027128:	f04f 0200 	mov.w	r2, #0
 802712c:	00e2      	lsls	r2, r4, #3
 802712e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8027132:	00d9      	lsls	r1, r3, #3
 8027134:	460b      	mov	r3, r1
 8027136:	4614      	mov	r4, r2
 8027138:	195b      	adds	r3, r3, r5
 802713a:	eb44 0406 	adc.w	r4, r4, r6
 802713e:	f04f 0100 	mov.w	r1, #0
 8027142:	f04f 0200 	mov.w	r2, #0
 8027146:	02a2      	lsls	r2, r4, #10
 8027148:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 802714c:	0299      	lsls	r1, r3, #10
 802714e:	460b      	mov	r3, r1
 8027150:	4614      	mov	r4, r2
 8027152:	4618      	mov	r0, r3
 8027154:	4621      	mov	r1, r4
 8027156:	687b      	ldr	r3, [r7, #4]
 8027158:	f04f 0400 	mov.w	r4, #0
 802715c:	461a      	mov	r2, r3
 802715e:	4623      	mov	r3, r4
 8027160:	f7d9 f864 	bl	800022c <__aeabi_uldivmod>
 8027164:	4603      	mov	r3, r0
 8027166:	460c      	mov	r4, r1
 8027168:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 802716a:	4b0b      	ldr	r3, [pc, #44]	; (8027198 <HAL_RCC_GetSysClockFreq+0x158>)
 802716c:	685b      	ldr	r3, [r3, #4]
 802716e:	0c1b      	lsrs	r3, r3, #16
 8027170:	f003 0303 	and.w	r3, r3, #3
 8027174:	3301      	adds	r3, #1
 8027176:	005b      	lsls	r3, r3, #1
 8027178:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 802717a:	68fa      	ldr	r2, [r7, #12]
 802717c:	683b      	ldr	r3, [r7, #0]
 802717e:	fbb2 f3f3 	udiv	r3, r2, r3
 8027182:	60bb      	str	r3, [r7, #8]
      break;
 8027184:	e002      	b.n	802718c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8027186:	4b05      	ldr	r3, [pc, #20]	; (802719c <HAL_RCC_GetSysClockFreq+0x15c>)
 8027188:	60bb      	str	r3, [r7, #8]
      break;
 802718a:	bf00      	nop
    }
  }
  return sysclockfreq;
 802718c:	68bb      	ldr	r3, [r7, #8]
}
 802718e:	4618      	mov	r0, r3
 8027190:	3714      	adds	r7, #20
 8027192:	46bd      	mov	sp, r7
 8027194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027196:	bf00      	nop
 8027198:	40023800 	.word	0x40023800
 802719c:	00f42400 	.word	0x00f42400
 80271a0:	017d7840 	.word	0x017d7840

080271a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80271a4:	b480      	push	{r7}
 80271a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80271a8:	4b03      	ldr	r3, [pc, #12]	; (80271b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80271aa:	681b      	ldr	r3, [r3, #0]
}
 80271ac:	4618      	mov	r0, r3
 80271ae:	46bd      	mov	sp, r7
 80271b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271b4:	4770      	bx	lr
 80271b6:	bf00      	nop
 80271b8:	20000000 	.word	0x20000000

080271bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80271bc:	b580      	push	{r7, lr}
 80271be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80271c0:	f7ff fff0 	bl	80271a4 <HAL_RCC_GetHCLKFreq>
 80271c4:	4601      	mov	r1, r0
 80271c6:	4b05      	ldr	r3, [pc, #20]	; (80271dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80271c8:	689b      	ldr	r3, [r3, #8]
 80271ca:	0b5b      	lsrs	r3, r3, #13
 80271cc:	f003 0307 	and.w	r3, r3, #7
 80271d0:	4a03      	ldr	r2, [pc, #12]	; (80271e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80271d2:	5cd3      	ldrb	r3, [r2, r3]
 80271d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80271d8:	4618      	mov	r0, r3
 80271da:	bd80      	pop	{r7, pc}
 80271dc:	40023800 	.word	0x40023800
 80271e0:	080284c4 	.word	0x080284c4

080271e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80271e4:	b480      	push	{r7}
 80271e6:	b083      	sub	sp, #12
 80271e8:	af00      	add	r7, sp, #0
 80271ea:	6078      	str	r0, [r7, #4]
 80271ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80271ee:	687b      	ldr	r3, [r7, #4]
 80271f0:	220f      	movs	r2, #15
 80271f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80271f4:	4b12      	ldr	r3, [pc, #72]	; (8027240 <HAL_RCC_GetClockConfig+0x5c>)
 80271f6:	689b      	ldr	r3, [r3, #8]
 80271f8:	f003 0203 	and.w	r2, r3, #3
 80271fc:	687b      	ldr	r3, [r7, #4]
 80271fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8027200:	4b0f      	ldr	r3, [pc, #60]	; (8027240 <HAL_RCC_GetClockConfig+0x5c>)
 8027202:	689b      	ldr	r3, [r3, #8]
 8027204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027208:	687b      	ldr	r3, [r7, #4]
 802720a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 802720c:	4b0c      	ldr	r3, [pc, #48]	; (8027240 <HAL_RCC_GetClockConfig+0x5c>)
 802720e:	689b      	ldr	r3, [r3, #8]
 8027210:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027214:	687b      	ldr	r3, [r7, #4]
 8027216:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8027218:	4b09      	ldr	r3, [pc, #36]	; (8027240 <HAL_RCC_GetClockConfig+0x5c>)
 802721a:	689b      	ldr	r3, [r3, #8]
 802721c:	08db      	lsrs	r3, r3, #3
 802721e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027222:	687b      	ldr	r3, [r7, #4]
 8027224:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027226:	4b07      	ldr	r3, [pc, #28]	; (8027244 <HAL_RCC_GetClockConfig+0x60>)
 8027228:	681b      	ldr	r3, [r3, #0]
 802722a:	f003 020f 	and.w	r2, r3, #15
 802722e:	683b      	ldr	r3, [r7, #0]
 8027230:	601a      	str	r2, [r3, #0]
}
 8027232:	bf00      	nop
 8027234:	370c      	adds	r7, #12
 8027236:	46bd      	mov	sp, r7
 8027238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802723c:	4770      	bx	lr
 802723e:	bf00      	nop
 8027240:	40023800 	.word	0x40023800
 8027244:	40023c00 	.word	0x40023c00

08027248 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8027248:	b580      	push	{r7, lr}
 802724a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 802724c:	4b06      	ldr	r3, [pc, #24]	; (8027268 <HAL_RCC_NMI_IRQHandler+0x20>)
 802724e:	68db      	ldr	r3, [r3, #12]
 8027250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027254:	2b80      	cmp	r3, #128	; 0x80
 8027256:	d104      	bne.n	8027262 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8027258:	f000 f80a 	bl	8027270 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 802725c:	4b03      	ldr	r3, [pc, #12]	; (802726c <HAL_RCC_NMI_IRQHandler+0x24>)
 802725e:	2280      	movs	r2, #128	; 0x80
 8027260:	701a      	strb	r2, [r3, #0]
  }
}
 8027262:	bf00      	nop
 8027264:	bd80      	pop	{r7, pc}
 8027266:	bf00      	nop
 8027268:	40023800 	.word	0x40023800
 802726c:	4002380e 	.word	0x4002380e

08027270 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8027270:	b480      	push	{r7}
 8027272:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8027274:	bf00      	nop
 8027276:	46bd      	mov	sp, r7
 8027278:	f85d 7b04 	ldr.w	r7, [sp], #4
 802727c:	4770      	bx	lr
	...

08027280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027280:	b580      	push	{r7, lr}
 8027282:	b088      	sub	sp, #32
 8027284:	af00      	add	r7, sp, #0
 8027286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8027288:	2300      	movs	r3, #0
 802728a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 802728c:	2300      	movs	r3, #0
 802728e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8027290:	2300      	movs	r3, #0
 8027292:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8027294:	2300      	movs	r3, #0
 8027296:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8027298:	2300      	movs	r3, #0
 802729a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 802729c:	687b      	ldr	r3, [r7, #4]
 802729e:	681b      	ldr	r3, [r3, #0]
 80272a0:	f003 0301 	and.w	r3, r3, #1
 80272a4:	2b00      	cmp	r3, #0
 80272a6:	d012      	beq.n	80272ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80272a8:	4b69      	ldr	r3, [pc, #420]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80272aa:	689b      	ldr	r3, [r3, #8]
 80272ac:	4a68      	ldr	r2, [pc, #416]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80272ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80272b2:	6093      	str	r3, [r2, #8]
 80272b4:	4b66      	ldr	r3, [pc, #408]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80272b6:	689a      	ldr	r2, [r3, #8]
 80272b8:	687b      	ldr	r3, [r7, #4]
 80272ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80272bc:	4964      	ldr	r1, [pc, #400]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80272be:	4313      	orrs	r3, r2
 80272c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80272c2:	687b      	ldr	r3, [r7, #4]
 80272c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80272c6:	2b00      	cmp	r3, #0
 80272c8:	d101      	bne.n	80272ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80272ca:	2301      	movs	r3, #1
 80272cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80272ce:	687b      	ldr	r3, [r7, #4]
 80272d0:	681b      	ldr	r3, [r3, #0]
 80272d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80272d6:	2b00      	cmp	r3, #0
 80272d8:	d017      	beq.n	802730a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80272da:	4b5d      	ldr	r3, [pc, #372]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80272dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80272e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80272e4:	687b      	ldr	r3, [r7, #4]
 80272e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80272e8:	4959      	ldr	r1, [pc, #356]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80272ea:	4313      	orrs	r3, r2
 80272ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80272f0:	687b      	ldr	r3, [r7, #4]
 80272f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80272f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80272f8:	d101      	bne.n	80272fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80272fa:	2301      	movs	r3, #1
 80272fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80272fe:	687b      	ldr	r3, [r7, #4]
 8027300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027302:	2b00      	cmp	r3, #0
 8027304:	d101      	bne.n	802730a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8027306:	2301      	movs	r3, #1
 8027308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 802730a:	687b      	ldr	r3, [r7, #4]
 802730c:	681b      	ldr	r3, [r3, #0]
 802730e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027312:	2b00      	cmp	r3, #0
 8027314:	d017      	beq.n	8027346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8027316:	4b4e      	ldr	r3, [pc, #312]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802731c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8027320:	687b      	ldr	r3, [r7, #4]
 8027322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027324:	494a      	ldr	r1, [pc, #296]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027326:	4313      	orrs	r3, r2
 8027328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 802732c:	687b      	ldr	r3, [r7, #4]
 802732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027334:	d101      	bne.n	802733a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8027336:	2301      	movs	r3, #1
 8027338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 802733a:	687b      	ldr	r3, [r7, #4]
 802733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802733e:	2b00      	cmp	r3, #0
 8027340:	d101      	bne.n	8027346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8027342:	2301      	movs	r3, #1
 8027344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8027346:	687b      	ldr	r3, [r7, #4]
 8027348:	681b      	ldr	r3, [r3, #0]
 802734a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802734e:	2b00      	cmp	r3, #0
 8027350:	d001      	beq.n	8027356 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8027352:	2301      	movs	r3, #1
 8027354:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8027356:	687b      	ldr	r3, [r7, #4]
 8027358:	681b      	ldr	r3, [r3, #0]
 802735a:	f003 0320 	and.w	r3, r3, #32
 802735e:	2b00      	cmp	r3, #0
 8027360:	f000 808b 	beq.w	802747a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8027364:	4b3a      	ldr	r3, [pc, #232]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027368:	4a39      	ldr	r2, [pc, #228]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802736a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802736e:	6413      	str	r3, [r2, #64]	; 0x40
 8027370:	4b37      	ldr	r3, [pc, #220]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027378:	60bb      	str	r3, [r7, #8]
 802737a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 802737c:	4b35      	ldr	r3, [pc, #212]	; (8027454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 802737e:	681b      	ldr	r3, [r3, #0]
 8027380:	4a34      	ldr	r2, [pc, #208]	; (8027454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8027382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027388:	f7fd ff16 	bl	80251b8 <HAL_GetTick>
 802738c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 802738e:	e008      	b.n	80273a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8027390:	f7fd ff12 	bl	80251b8 <HAL_GetTick>
 8027394:	4602      	mov	r2, r0
 8027396:	697b      	ldr	r3, [r7, #20]
 8027398:	1ad3      	subs	r3, r2, r3
 802739a:	2b64      	cmp	r3, #100	; 0x64
 802739c:	d901      	bls.n	80273a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 802739e:	2303      	movs	r3, #3
 80273a0:	e355      	b.n	8027a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80273a2:	4b2c      	ldr	r3, [pc, #176]	; (8027454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80273a4:	681b      	ldr	r3, [r3, #0]
 80273a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80273aa:	2b00      	cmp	r3, #0
 80273ac:	d0f0      	beq.n	8027390 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80273ae:	4b28      	ldr	r3, [pc, #160]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80273b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80273b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80273b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80273b8:	693b      	ldr	r3, [r7, #16]
 80273ba:	2b00      	cmp	r3, #0
 80273bc:	d035      	beq.n	802742a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80273be:	687b      	ldr	r3, [r7, #4]
 80273c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80273c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80273c6:	693a      	ldr	r2, [r7, #16]
 80273c8:	429a      	cmp	r2, r3
 80273ca:	d02e      	beq.n	802742a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80273cc:	4b20      	ldr	r3, [pc, #128]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80273ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80273d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80273d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80273d6:	4b1e      	ldr	r3, [pc, #120]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80273d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80273da:	4a1d      	ldr	r2, [pc, #116]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80273dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80273e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80273e2:	4b1b      	ldr	r3, [pc, #108]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80273e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80273e6:	4a1a      	ldr	r2, [pc, #104]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80273e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80273ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80273ee:	4a18      	ldr	r2, [pc, #96]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80273f0:	693b      	ldr	r3, [r7, #16]
 80273f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80273f4:	4b16      	ldr	r3, [pc, #88]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80273f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80273f8:	f003 0301 	and.w	r3, r3, #1
 80273fc:	2b01      	cmp	r3, #1
 80273fe:	d114      	bne.n	802742a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027400:	f7fd feda 	bl	80251b8 <HAL_GetTick>
 8027404:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027406:	e00a      	b.n	802741e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027408:	f7fd fed6 	bl	80251b8 <HAL_GetTick>
 802740c:	4602      	mov	r2, r0
 802740e:	697b      	ldr	r3, [r7, #20]
 8027410:	1ad3      	subs	r3, r2, r3
 8027412:	f241 3288 	movw	r2, #5000	; 0x1388
 8027416:	4293      	cmp	r3, r2
 8027418:	d901      	bls.n	802741e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 802741a:	2303      	movs	r3, #3
 802741c:	e317      	b.n	8027a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802741e:	4b0c      	ldr	r3, [pc, #48]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027422:	f003 0302 	and.w	r3, r3, #2
 8027426:	2b00      	cmp	r3, #0
 8027428:	d0ee      	beq.n	8027408 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802742a:	687b      	ldr	r3, [r7, #4]
 802742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802742e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8027436:	d111      	bne.n	802745c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8027438:	4b05      	ldr	r3, [pc, #20]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802743a:	689b      	ldr	r3, [r3, #8]
 802743c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8027440:	687b      	ldr	r3, [r7, #4]
 8027442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8027444:	4b04      	ldr	r3, [pc, #16]	; (8027458 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8027446:	400b      	ands	r3, r1
 8027448:	4901      	ldr	r1, [pc, #4]	; (8027450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802744a:	4313      	orrs	r3, r2
 802744c:	608b      	str	r3, [r1, #8]
 802744e:	e00b      	b.n	8027468 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8027450:	40023800 	.word	0x40023800
 8027454:	40007000 	.word	0x40007000
 8027458:	0ffffcff 	.word	0x0ffffcff
 802745c:	4bb0      	ldr	r3, [pc, #704]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802745e:	689b      	ldr	r3, [r3, #8]
 8027460:	4aaf      	ldr	r2, [pc, #700]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027462:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8027466:	6093      	str	r3, [r2, #8]
 8027468:	4bad      	ldr	r3, [pc, #692]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802746a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802746c:	687b      	ldr	r3, [r7, #4]
 802746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027474:	49aa      	ldr	r1, [pc, #680]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027476:	4313      	orrs	r3, r2
 8027478:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 802747a:	687b      	ldr	r3, [r7, #4]
 802747c:	681b      	ldr	r3, [r3, #0]
 802747e:	f003 0310 	and.w	r3, r3, #16
 8027482:	2b00      	cmp	r3, #0
 8027484:	d010      	beq.n	80274a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8027486:	4ba6      	ldr	r3, [pc, #664]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802748c:	4aa4      	ldr	r2, [pc, #656]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802748e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027492:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8027496:	4ba2      	ldr	r3, [pc, #648]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027498:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 802749c:	687b      	ldr	r3, [r7, #4]
 802749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80274a0:	499f      	ldr	r1, [pc, #636]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80274a2:	4313      	orrs	r3, r2
 80274a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80274a8:	687b      	ldr	r3, [r7, #4]
 80274aa:	681b      	ldr	r3, [r3, #0]
 80274ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80274b0:	2b00      	cmp	r3, #0
 80274b2:	d00a      	beq.n	80274ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80274b4:	4b9a      	ldr	r3, [pc, #616]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80274b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80274ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80274be:	687b      	ldr	r3, [r7, #4]
 80274c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80274c2:	4997      	ldr	r1, [pc, #604]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80274c4:	4313      	orrs	r3, r2
 80274c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80274ca:	687b      	ldr	r3, [r7, #4]
 80274cc:	681b      	ldr	r3, [r3, #0]
 80274ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80274d2:	2b00      	cmp	r3, #0
 80274d4:	d00a      	beq.n	80274ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80274d6:	4b92      	ldr	r3, [pc, #584]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80274d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80274dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80274e0:	687b      	ldr	r3, [r7, #4]
 80274e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80274e4:	498e      	ldr	r1, [pc, #568]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80274e6:	4313      	orrs	r3, r2
 80274e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80274ec:	687b      	ldr	r3, [r7, #4]
 80274ee:	681b      	ldr	r3, [r3, #0]
 80274f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80274f4:	2b00      	cmp	r3, #0
 80274f6:	d00a      	beq.n	802750e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80274f8:	4b89      	ldr	r3, [pc, #548]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80274fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80274fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8027502:	687b      	ldr	r3, [r7, #4]
 8027504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027506:	4986      	ldr	r1, [pc, #536]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027508:	4313      	orrs	r3, r2
 802750a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 802750e:	687b      	ldr	r3, [r7, #4]
 8027510:	681b      	ldr	r3, [r3, #0]
 8027512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027516:	2b00      	cmp	r3, #0
 8027518:	d00a      	beq.n	8027530 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 802751a:	4b81      	ldr	r3, [pc, #516]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802751c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8027524:	687b      	ldr	r3, [r7, #4]
 8027526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027528:	497d      	ldr	r1, [pc, #500]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802752a:	4313      	orrs	r3, r2
 802752c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8027530:	687b      	ldr	r3, [r7, #4]
 8027532:	681b      	ldr	r3, [r3, #0]
 8027534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027538:	2b00      	cmp	r3, #0
 802753a:	d00a      	beq.n	8027552 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 802753c:	4b78      	ldr	r3, [pc, #480]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802753e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027542:	f023 0203 	bic.w	r2, r3, #3
 8027546:	687b      	ldr	r3, [r7, #4]
 8027548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802754a:	4975      	ldr	r1, [pc, #468]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802754c:	4313      	orrs	r3, r2
 802754e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8027552:	687b      	ldr	r3, [r7, #4]
 8027554:	681b      	ldr	r3, [r3, #0]
 8027556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802755a:	2b00      	cmp	r3, #0
 802755c:	d00a      	beq.n	8027574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 802755e:	4b70      	ldr	r3, [pc, #448]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027564:	f023 020c 	bic.w	r2, r3, #12
 8027568:	687b      	ldr	r3, [r7, #4]
 802756a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802756c:	496c      	ldr	r1, [pc, #432]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802756e:	4313      	orrs	r3, r2
 8027570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8027574:	687b      	ldr	r3, [r7, #4]
 8027576:	681b      	ldr	r3, [r3, #0]
 8027578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802757c:	2b00      	cmp	r3, #0
 802757e:	d00a      	beq.n	8027596 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8027580:	4b67      	ldr	r3, [pc, #412]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027586:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 802758a:	687b      	ldr	r3, [r7, #4]
 802758c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802758e:	4964      	ldr	r1, [pc, #400]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027590:	4313      	orrs	r3, r2
 8027592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8027596:	687b      	ldr	r3, [r7, #4]
 8027598:	681b      	ldr	r3, [r3, #0]
 802759a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802759e:	2b00      	cmp	r3, #0
 80275a0:	d00a      	beq.n	80275b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80275a2:	4b5f      	ldr	r3, [pc, #380]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80275a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80275a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80275ac:	687b      	ldr	r3, [r7, #4]
 80275ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80275b0:	495b      	ldr	r1, [pc, #364]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80275b2:	4313      	orrs	r3, r2
 80275b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80275b8:	687b      	ldr	r3, [r7, #4]
 80275ba:	681b      	ldr	r3, [r3, #0]
 80275bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80275c0:	2b00      	cmp	r3, #0
 80275c2:	d00a      	beq.n	80275da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80275c4:	4b56      	ldr	r3, [pc, #344]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80275c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80275ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80275ce:	687b      	ldr	r3, [r7, #4]
 80275d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80275d2:	4953      	ldr	r1, [pc, #332]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80275d4:	4313      	orrs	r3, r2
 80275d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80275da:	687b      	ldr	r3, [r7, #4]
 80275dc:	681b      	ldr	r3, [r3, #0]
 80275de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80275e2:	2b00      	cmp	r3, #0
 80275e4:	d00a      	beq.n	80275fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80275e6:	4b4e      	ldr	r3, [pc, #312]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80275e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80275ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80275f0:	687b      	ldr	r3, [r7, #4]
 80275f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80275f4:	494a      	ldr	r1, [pc, #296]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80275f6:	4313      	orrs	r3, r2
 80275f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80275fc:	687b      	ldr	r3, [r7, #4]
 80275fe:	681b      	ldr	r3, [r3, #0]
 8027600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8027604:	2b00      	cmp	r3, #0
 8027606:	d00a      	beq.n	802761e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8027608:	4b45      	ldr	r3, [pc, #276]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802760a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802760e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8027612:	687b      	ldr	r3, [r7, #4]
 8027614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027616:	4942      	ldr	r1, [pc, #264]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027618:	4313      	orrs	r3, r2
 802761a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 802761e:	687b      	ldr	r3, [r7, #4]
 8027620:	681b      	ldr	r3, [r3, #0]
 8027622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8027626:	2b00      	cmp	r3, #0
 8027628:	d00a      	beq.n	8027640 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 802762a:	4b3d      	ldr	r3, [pc, #244]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8027634:	687b      	ldr	r3, [r7, #4]
 8027636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8027638:	4939      	ldr	r1, [pc, #228]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802763a:	4313      	orrs	r3, r2
 802763c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8027640:	687b      	ldr	r3, [r7, #4]
 8027642:	681b      	ldr	r3, [r3, #0]
 8027644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027648:	2b00      	cmp	r3, #0
 802764a:	d00a      	beq.n	8027662 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 802764c:	4b34      	ldr	r3, [pc, #208]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027652:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8027656:	687b      	ldr	r3, [r7, #4]
 8027658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802765a:	4931      	ldr	r1, [pc, #196]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802765c:	4313      	orrs	r3, r2
 802765e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8027662:	687b      	ldr	r3, [r7, #4]
 8027664:	681b      	ldr	r3, [r3, #0]
 8027666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802766a:	2b00      	cmp	r3, #0
 802766c:	d011      	beq.n	8027692 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 802766e:	4b2c      	ldr	r3, [pc, #176]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027674:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8027678:	687b      	ldr	r3, [r7, #4]
 802767a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802767c:	4928      	ldr	r1, [pc, #160]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 802767e:	4313      	orrs	r3, r2
 8027680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8027684:	687b      	ldr	r3, [r7, #4]
 8027686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8027688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802768c:	d101      	bne.n	8027692 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 802768e:	2301      	movs	r3, #1
 8027690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8027692:	687b      	ldr	r3, [r7, #4]
 8027694:	681b      	ldr	r3, [r3, #0]
 8027696:	f003 0308 	and.w	r3, r3, #8
 802769a:	2b00      	cmp	r3, #0
 802769c:	d001      	beq.n	80276a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 802769e:	2301      	movs	r3, #1
 80276a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80276a2:	687b      	ldr	r3, [r7, #4]
 80276a4:	681b      	ldr	r3, [r3, #0]
 80276a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80276aa:	2b00      	cmp	r3, #0
 80276ac:	d00a      	beq.n	80276c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80276ae:	4b1c      	ldr	r3, [pc, #112]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80276b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80276b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80276b8:	687b      	ldr	r3, [r7, #4]
 80276ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80276bc:	4918      	ldr	r1, [pc, #96]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80276be:	4313      	orrs	r3, r2
 80276c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80276c4:	687b      	ldr	r3, [r7, #4]
 80276c6:	681b      	ldr	r3, [r3, #0]
 80276c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80276cc:	2b00      	cmp	r3, #0
 80276ce:	d00b      	beq.n	80276e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80276d0:	4b13      	ldr	r3, [pc, #76]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80276d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80276d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80276da:	687b      	ldr	r3, [r7, #4]
 80276dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80276e0:	490f      	ldr	r1, [pc, #60]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80276e2:	4313      	orrs	r3, r2
 80276e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80276e8:	69fb      	ldr	r3, [r7, #28]
 80276ea:	2b01      	cmp	r3, #1
 80276ec:	d005      	beq.n	80276fa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80276ee:	687b      	ldr	r3, [r7, #4]
 80276f0:	681b      	ldr	r3, [r3, #0]
 80276f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80276f6:	f040 80d8 	bne.w	80278aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80276fa:	4b09      	ldr	r3, [pc, #36]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80276fc:	681b      	ldr	r3, [r3, #0]
 80276fe:	4a08      	ldr	r2, [pc, #32]	; (8027720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027700:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8027704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027706:	f7fd fd57 	bl	80251b8 <HAL_GetTick>
 802770a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802770c:	e00a      	b.n	8027724 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 802770e:	f7fd fd53 	bl	80251b8 <HAL_GetTick>
 8027712:	4602      	mov	r2, r0
 8027714:	697b      	ldr	r3, [r7, #20]
 8027716:	1ad3      	subs	r3, r2, r3
 8027718:	2b64      	cmp	r3, #100	; 0x64
 802771a:	d903      	bls.n	8027724 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802771c:	2303      	movs	r3, #3
 802771e:	e196      	b.n	8027a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8027720:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027724:	4b6c      	ldr	r3, [pc, #432]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027726:	681b      	ldr	r3, [r3, #0]
 8027728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802772c:	2b00      	cmp	r3, #0
 802772e:	d1ee      	bne.n	802770e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8027730:	687b      	ldr	r3, [r7, #4]
 8027732:	681b      	ldr	r3, [r3, #0]
 8027734:	f003 0301 	and.w	r3, r3, #1
 8027738:	2b00      	cmp	r3, #0
 802773a:	d021      	beq.n	8027780 <HAL_RCCEx_PeriphCLKConfig+0x500>
 802773c:	687b      	ldr	r3, [r7, #4]
 802773e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027740:	2b00      	cmp	r3, #0
 8027742:	d11d      	bne.n	8027780 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8027744:	4b64      	ldr	r3, [pc, #400]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802774a:	0c1b      	lsrs	r3, r3, #16
 802774c:	f003 0303 	and.w	r3, r3, #3
 8027750:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8027752:	4b61      	ldr	r3, [pc, #388]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027758:	0e1b      	lsrs	r3, r3, #24
 802775a:	f003 030f 	and.w	r3, r3, #15
 802775e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8027760:	687b      	ldr	r3, [r7, #4]
 8027762:	685b      	ldr	r3, [r3, #4]
 8027764:	019a      	lsls	r2, r3, #6
 8027766:	693b      	ldr	r3, [r7, #16]
 8027768:	041b      	lsls	r3, r3, #16
 802776a:	431a      	orrs	r2, r3
 802776c:	68fb      	ldr	r3, [r7, #12]
 802776e:	061b      	lsls	r3, r3, #24
 8027770:	431a      	orrs	r2, r3
 8027772:	687b      	ldr	r3, [r7, #4]
 8027774:	689b      	ldr	r3, [r3, #8]
 8027776:	071b      	lsls	r3, r3, #28
 8027778:	4957      	ldr	r1, [pc, #348]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 802777a:	4313      	orrs	r3, r2
 802777c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8027780:	687b      	ldr	r3, [r7, #4]
 8027782:	681b      	ldr	r3, [r3, #0]
 8027784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027788:	2b00      	cmp	r3, #0
 802778a:	d004      	beq.n	8027796 <HAL_RCCEx_PeriphCLKConfig+0x516>
 802778c:	687b      	ldr	r3, [r7, #4]
 802778e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8027794:	d00a      	beq.n	80277ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8027796:	687b      	ldr	r3, [r7, #4]
 8027798:	681b      	ldr	r3, [r3, #0]
 802779a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 802779e:	2b00      	cmp	r3, #0
 80277a0:	d02e      	beq.n	8027800 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80277a2:	687b      	ldr	r3, [r7, #4]
 80277a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80277a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80277aa:	d129      	bne.n	8027800 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80277ac:	4b4a      	ldr	r3, [pc, #296]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80277ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80277b2:	0c1b      	lsrs	r3, r3, #16
 80277b4:	f003 0303 	and.w	r3, r3, #3
 80277b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80277ba:	4b47      	ldr	r3, [pc, #284]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80277bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80277c0:	0f1b      	lsrs	r3, r3, #28
 80277c2:	f003 0307 	and.w	r3, r3, #7
 80277c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80277c8:	687b      	ldr	r3, [r7, #4]
 80277ca:	685b      	ldr	r3, [r3, #4]
 80277cc:	019a      	lsls	r2, r3, #6
 80277ce:	693b      	ldr	r3, [r7, #16]
 80277d0:	041b      	lsls	r3, r3, #16
 80277d2:	431a      	orrs	r2, r3
 80277d4:	687b      	ldr	r3, [r7, #4]
 80277d6:	68db      	ldr	r3, [r3, #12]
 80277d8:	061b      	lsls	r3, r3, #24
 80277da:	431a      	orrs	r2, r3
 80277dc:	68fb      	ldr	r3, [r7, #12]
 80277de:	071b      	lsls	r3, r3, #28
 80277e0:	493d      	ldr	r1, [pc, #244]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80277e2:	4313      	orrs	r3, r2
 80277e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80277e8:	4b3b      	ldr	r3, [pc, #236]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80277ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80277ee:	f023 021f 	bic.w	r2, r3, #31
 80277f2:	687b      	ldr	r3, [r7, #4]
 80277f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80277f6:	3b01      	subs	r3, #1
 80277f8:	4937      	ldr	r1, [pc, #220]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80277fa:	4313      	orrs	r3, r2
 80277fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8027800:	687b      	ldr	r3, [r7, #4]
 8027802:	681b      	ldr	r3, [r3, #0]
 8027804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027808:	2b00      	cmp	r3, #0
 802780a:	d01d      	beq.n	8027848 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 802780c:	4b32      	ldr	r3, [pc, #200]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 802780e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027812:	0e1b      	lsrs	r3, r3, #24
 8027814:	f003 030f 	and.w	r3, r3, #15
 8027818:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 802781a:	4b2f      	ldr	r3, [pc, #188]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 802781c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027820:	0f1b      	lsrs	r3, r3, #28
 8027822:	f003 0307 	and.w	r3, r3, #7
 8027826:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8027828:	687b      	ldr	r3, [r7, #4]
 802782a:	685b      	ldr	r3, [r3, #4]
 802782c:	019a      	lsls	r2, r3, #6
 802782e:	687b      	ldr	r3, [r7, #4]
 8027830:	691b      	ldr	r3, [r3, #16]
 8027832:	041b      	lsls	r3, r3, #16
 8027834:	431a      	orrs	r2, r3
 8027836:	693b      	ldr	r3, [r7, #16]
 8027838:	061b      	lsls	r3, r3, #24
 802783a:	431a      	orrs	r2, r3
 802783c:	68fb      	ldr	r3, [r7, #12]
 802783e:	071b      	lsls	r3, r3, #28
 8027840:	4925      	ldr	r1, [pc, #148]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027842:	4313      	orrs	r3, r2
 8027844:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027848:	687b      	ldr	r3, [r7, #4]
 802784a:	681b      	ldr	r3, [r3, #0]
 802784c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027850:	2b00      	cmp	r3, #0
 8027852:	d011      	beq.n	8027878 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8027854:	687b      	ldr	r3, [r7, #4]
 8027856:	685b      	ldr	r3, [r3, #4]
 8027858:	019a      	lsls	r2, r3, #6
 802785a:	687b      	ldr	r3, [r7, #4]
 802785c:	691b      	ldr	r3, [r3, #16]
 802785e:	041b      	lsls	r3, r3, #16
 8027860:	431a      	orrs	r2, r3
 8027862:	687b      	ldr	r3, [r7, #4]
 8027864:	68db      	ldr	r3, [r3, #12]
 8027866:	061b      	lsls	r3, r3, #24
 8027868:	431a      	orrs	r2, r3
 802786a:	687b      	ldr	r3, [r7, #4]
 802786c:	689b      	ldr	r3, [r3, #8]
 802786e:	071b      	lsls	r3, r3, #28
 8027870:	4919      	ldr	r1, [pc, #100]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027872:	4313      	orrs	r3, r2
 8027874:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027878:	4b17      	ldr	r3, [pc, #92]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 802787a:	681b      	ldr	r3, [r3, #0]
 802787c:	4a16      	ldr	r2, [pc, #88]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 802787e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8027882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027884:	f7fd fc98 	bl	80251b8 <HAL_GetTick>
 8027888:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802788a:	e008      	b.n	802789e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 802788c:	f7fd fc94 	bl	80251b8 <HAL_GetTick>
 8027890:	4602      	mov	r2, r0
 8027892:	697b      	ldr	r3, [r7, #20]
 8027894:	1ad3      	subs	r3, r2, r3
 8027896:	2b64      	cmp	r3, #100	; 0x64
 8027898:	d901      	bls.n	802789e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802789a:	2303      	movs	r3, #3
 802789c:	e0d7      	b.n	8027a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802789e:	4b0e      	ldr	r3, [pc, #56]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80278a0:	681b      	ldr	r3, [r3, #0]
 80278a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80278a6:	2b00      	cmp	r3, #0
 80278a8:	d0f0      	beq.n	802788c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80278aa:	69bb      	ldr	r3, [r7, #24]
 80278ac:	2b01      	cmp	r3, #1
 80278ae:	f040 80cd 	bne.w	8027a4c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80278b2:	4b09      	ldr	r3, [pc, #36]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80278b4:	681b      	ldr	r3, [r3, #0]
 80278b6:	4a08      	ldr	r2, [pc, #32]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80278b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80278bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80278be:	f7fd fc7b 	bl	80251b8 <HAL_GetTick>
 80278c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80278c4:	e00a      	b.n	80278dc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80278c6:	f7fd fc77 	bl	80251b8 <HAL_GetTick>
 80278ca:	4602      	mov	r2, r0
 80278cc:	697b      	ldr	r3, [r7, #20]
 80278ce:	1ad3      	subs	r3, r2, r3
 80278d0:	2b64      	cmp	r3, #100	; 0x64
 80278d2:	d903      	bls.n	80278dc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80278d4:	2303      	movs	r3, #3
 80278d6:	e0ba      	b.n	8027a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80278d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80278dc:	4b5e      	ldr	r3, [pc, #376]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80278de:	681b      	ldr	r3, [r3, #0]
 80278e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80278e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80278e8:	d0ed      	beq.n	80278c6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80278ea:	687b      	ldr	r3, [r7, #4]
 80278ec:	681b      	ldr	r3, [r3, #0]
 80278ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80278f2:	2b00      	cmp	r3, #0
 80278f4:	d003      	beq.n	80278fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80278f6:	687b      	ldr	r3, [r7, #4]
 80278f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80278fa:	2b00      	cmp	r3, #0
 80278fc:	d009      	beq.n	8027912 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80278fe:	687b      	ldr	r3, [r7, #4]
 8027900:	681b      	ldr	r3, [r3, #0]
 8027902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8027906:	2b00      	cmp	r3, #0
 8027908:	d02e      	beq.n	8027968 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 802790a:	687b      	ldr	r3, [r7, #4]
 802790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802790e:	2b00      	cmp	r3, #0
 8027910:	d12a      	bne.n	8027968 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8027912:	4b51      	ldr	r3, [pc, #324]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027918:	0c1b      	lsrs	r3, r3, #16
 802791a:	f003 0303 	and.w	r3, r3, #3
 802791e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027920:	4b4d      	ldr	r3, [pc, #308]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027926:	0f1b      	lsrs	r3, r3, #28
 8027928:	f003 0307 	and.w	r3, r3, #7
 802792c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 802792e:	687b      	ldr	r3, [r7, #4]
 8027930:	695b      	ldr	r3, [r3, #20]
 8027932:	019a      	lsls	r2, r3, #6
 8027934:	693b      	ldr	r3, [r7, #16]
 8027936:	041b      	lsls	r3, r3, #16
 8027938:	431a      	orrs	r2, r3
 802793a:	687b      	ldr	r3, [r7, #4]
 802793c:	699b      	ldr	r3, [r3, #24]
 802793e:	061b      	lsls	r3, r3, #24
 8027940:	431a      	orrs	r2, r3
 8027942:	68fb      	ldr	r3, [r7, #12]
 8027944:	071b      	lsls	r3, r3, #28
 8027946:	4944      	ldr	r1, [pc, #272]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027948:	4313      	orrs	r3, r2
 802794a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 802794e:	4b42      	ldr	r3, [pc, #264]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027954:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8027958:	687b      	ldr	r3, [r7, #4]
 802795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802795c:	3b01      	subs	r3, #1
 802795e:	021b      	lsls	r3, r3, #8
 8027960:	493d      	ldr	r1, [pc, #244]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027962:	4313      	orrs	r3, r2
 8027964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8027968:	687b      	ldr	r3, [r7, #4]
 802796a:	681b      	ldr	r3, [r3, #0]
 802796c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027970:	2b00      	cmp	r3, #0
 8027972:	d022      	beq.n	80279ba <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8027974:	687b      	ldr	r3, [r7, #4]
 8027976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8027978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802797c:	d11d      	bne.n	80279ba <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 802797e:	4b36      	ldr	r3, [pc, #216]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027984:	0e1b      	lsrs	r3, r3, #24
 8027986:	f003 030f 	and.w	r3, r3, #15
 802798a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 802798c:	4b32      	ldr	r3, [pc, #200]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 802798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027992:	0f1b      	lsrs	r3, r3, #28
 8027994:	f003 0307 	and.w	r3, r3, #7
 8027998:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 802799a:	687b      	ldr	r3, [r7, #4]
 802799c:	695b      	ldr	r3, [r3, #20]
 802799e:	019a      	lsls	r2, r3, #6
 80279a0:	687b      	ldr	r3, [r7, #4]
 80279a2:	6a1b      	ldr	r3, [r3, #32]
 80279a4:	041b      	lsls	r3, r3, #16
 80279a6:	431a      	orrs	r2, r3
 80279a8:	693b      	ldr	r3, [r7, #16]
 80279aa:	061b      	lsls	r3, r3, #24
 80279ac:	431a      	orrs	r2, r3
 80279ae:	68fb      	ldr	r3, [r7, #12]
 80279b0:	071b      	lsls	r3, r3, #28
 80279b2:	4929      	ldr	r1, [pc, #164]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80279b4:	4313      	orrs	r3, r2
 80279b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80279ba:	687b      	ldr	r3, [r7, #4]
 80279bc:	681b      	ldr	r3, [r3, #0]
 80279be:	f003 0308 	and.w	r3, r3, #8
 80279c2:	2b00      	cmp	r3, #0
 80279c4:	d028      	beq.n	8027a18 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80279c6:	4b24      	ldr	r3, [pc, #144]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80279c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80279cc:	0e1b      	lsrs	r3, r3, #24
 80279ce:	f003 030f 	and.w	r3, r3, #15
 80279d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80279d4:	4b20      	ldr	r3, [pc, #128]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80279d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80279da:	0c1b      	lsrs	r3, r3, #16
 80279dc:	f003 0303 	and.w	r3, r3, #3
 80279e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80279e2:	687b      	ldr	r3, [r7, #4]
 80279e4:	695b      	ldr	r3, [r3, #20]
 80279e6:	019a      	lsls	r2, r3, #6
 80279e8:	68fb      	ldr	r3, [r7, #12]
 80279ea:	041b      	lsls	r3, r3, #16
 80279ec:	431a      	orrs	r2, r3
 80279ee:	693b      	ldr	r3, [r7, #16]
 80279f0:	061b      	lsls	r3, r3, #24
 80279f2:	431a      	orrs	r2, r3
 80279f4:	687b      	ldr	r3, [r7, #4]
 80279f6:	69db      	ldr	r3, [r3, #28]
 80279f8:	071b      	lsls	r3, r3, #28
 80279fa:	4917      	ldr	r1, [pc, #92]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80279fc:	4313      	orrs	r3, r2
 80279fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8027a02:	4b15      	ldr	r3, [pc, #84]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027a08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027a0c:	687b      	ldr	r3, [r7, #4]
 8027a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027a10:	4911      	ldr	r1, [pc, #68]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027a12:	4313      	orrs	r3, r2
 8027a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8027a18:	4b0f      	ldr	r3, [pc, #60]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027a1a:	681b      	ldr	r3, [r3, #0]
 8027a1c:	4a0e      	ldr	r2, [pc, #56]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027a24:	f7fd fbc8 	bl	80251b8 <HAL_GetTick>
 8027a28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027a2a:	e008      	b.n	8027a3e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8027a2c:	f7fd fbc4 	bl	80251b8 <HAL_GetTick>
 8027a30:	4602      	mov	r2, r0
 8027a32:	697b      	ldr	r3, [r7, #20]
 8027a34:	1ad3      	subs	r3, r2, r3
 8027a36:	2b64      	cmp	r3, #100	; 0x64
 8027a38:	d901      	bls.n	8027a3e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027a3a:	2303      	movs	r3, #3
 8027a3c:	e007      	b.n	8027a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027a3e:	4b06      	ldr	r3, [pc, #24]	; (8027a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027a40:	681b      	ldr	r3, [r3, #0]
 8027a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027a4a:	d1ef      	bne.n	8027a2c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8027a4c:	2300      	movs	r3, #0
}
 8027a4e:	4618      	mov	r0, r3
 8027a50:	3720      	adds	r7, #32
 8027a52:	46bd      	mov	sp, r7
 8027a54:	bd80      	pop	{r7, pc}
 8027a56:	bf00      	nop
 8027a58:	40023800 	.word	0x40023800

08027a5c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8027a5c:	b580      	push	{r7, lr}
 8027a5e:	b082      	sub	sp, #8
 8027a60:	af00      	add	r7, sp, #0
 8027a62:	6078      	str	r0, [r7, #4]
 8027a64:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8027a66:	687b      	ldr	r3, [r7, #4]
 8027a68:	2b00      	cmp	r3, #0
 8027a6a:	d101      	bne.n	8027a70 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8027a6c:	2301      	movs	r3, #1
 8027a6e:	e025      	b.n	8027abc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8027a70:	687b      	ldr	r3, [r7, #4]
 8027a72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027a76:	b2db      	uxtb	r3, r3
 8027a78:	2b00      	cmp	r3, #0
 8027a7a:	d106      	bne.n	8027a8a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8027a7c:	687b      	ldr	r3, [r7, #4]
 8027a7e:	2200      	movs	r2, #0
 8027a80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8027a84:	6878      	ldr	r0, [r7, #4]
 8027a86:	f7d9 f891 	bl	8000bac <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8027a8a:	687b      	ldr	r3, [r7, #4]
 8027a8c:	2202      	movs	r2, #2
 8027a8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8027a92:	687b      	ldr	r3, [r7, #4]
 8027a94:	681a      	ldr	r2, [r3, #0]
 8027a96:	687b      	ldr	r3, [r7, #4]
 8027a98:	3304      	adds	r3, #4
 8027a9a:	4619      	mov	r1, r3
 8027a9c:	4610      	mov	r0, r2
 8027a9e:	f000 fac1 	bl	8028024 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8027aa2:	687b      	ldr	r3, [r7, #4]
 8027aa4:	6818      	ldr	r0, [r3, #0]
 8027aa6:	687b      	ldr	r3, [r7, #4]
 8027aa8:	685b      	ldr	r3, [r3, #4]
 8027aaa:	461a      	mov	r2, r3
 8027aac:	6839      	ldr	r1, [r7, #0]
 8027aae:	f000 fb2b 	bl	8028108 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8027ab2:	687b      	ldr	r3, [r7, #4]
 8027ab4:	2201      	movs	r2, #1
 8027ab6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8027aba:	2300      	movs	r3, #0
}
 8027abc:	4618      	mov	r0, r3
 8027abe:	3708      	adds	r7, #8
 8027ac0:	46bd      	mov	sp, r7
 8027ac2:	bd80      	pop	{r7, pc}

08027ac4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8027ac4:	b580      	push	{r7, lr}
 8027ac6:	b084      	sub	sp, #16
 8027ac8:	af00      	add	r7, sp, #0
 8027aca:	60f8      	str	r0, [r7, #12]
 8027acc:	60b9      	str	r1, [r7, #8]
 8027ace:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8027ad0:	68fb      	ldr	r3, [r7, #12]
 8027ad2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027ad6:	b2db      	uxtb	r3, r3
 8027ad8:	2b02      	cmp	r3, #2
 8027ada:	d101      	bne.n	8027ae0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8027adc:	2302      	movs	r3, #2
 8027ade:	e018      	b.n	8027b12 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8027ae0:	68fb      	ldr	r3, [r7, #12]
 8027ae2:	2202      	movs	r2, #2
 8027ae4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8027ae8:	68fb      	ldr	r3, [r7, #12]
 8027aea:	681b      	ldr	r3, [r3, #0]
 8027aec:	687a      	ldr	r2, [r7, #4]
 8027aee:	68b9      	ldr	r1, [r7, #8]
 8027af0:	4618      	mov	r0, r3
 8027af2:	f000 fb89 	bl	8028208 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8027af6:	68bb      	ldr	r3, [r7, #8]
 8027af8:	681b      	ldr	r3, [r3, #0]
 8027afa:	2b02      	cmp	r3, #2
 8027afc:	d104      	bne.n	8027b08 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8027afe:	68fb      	ldr	r3, [r7, #12]
 8027b00:	2205      	movs	r2, #5
 8027b02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8027b06:	e003      	b.n	8027b10 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8027b08:	68fb      	ldr	r3, [r7, #12]
 8027b0a:	2201      	movs	r2, #1
 8027b0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8027b10:	2300      	movs	r3, #0
}
 8027b12:	4618      	mov	r0, r3
 8027b14:	3710      	adds	r7, #16
 8027b16:	46bd      	mov	sp, r7
 8027b18:	bd80      	pop	{r7, pc}

08027b1a <HAL_SDRAM_SetAutoRefreshNumber>:
  *                the configuration information for SDRAM module.  
  * @param  AutoRefreshNumber The SDRAM auto Refresh number       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
 8027b1a:	b580      	push	{r7, lr}
 8027b1c:	b082      	sub	sp, #8
 8027b1e:	af00      	add	r7, sp, #0
 8027b20:	6078      	str	r0, [r7, #4]
 8027b22:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8027b24:	687b      	ldr	r3, [r7, #4]
 8027b26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027b2a:	b2db      	uxtb	r3, r3
 8027b2c:	2b02      	cmp	r3, #2
 8027b2e:	d101      	bne.n	8027b34 <HAL_SDRAM_SetAutoRefreshNumber+0x1a>
  {
    return HAL_BUSY;
 8027b30:	2302      	movs	r3, #2
 8027b32:	e00e      	b.n	8027b52 <HAL_SDRAM_SetAutoRefreshNumber+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8027b34:	687b      	ldr	r3, [r7, #4]
 8027b36:	2202      	movs	r2, #2
 8027b38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Set the Auto-Refresh number */
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 8027b3c:	687b      	ldr	r3, [r7, #4]
 8027b3e:	681b      	ldr	r3, [r3, #0]
 8027b40:	6839      	ldr	r1, [r7, #0]
 8027b42:	4618      	mov	r0, r3
 8027b44:	f000 fb81 	bl	802824a <FMC_SDRAM_SetAutoRefreshNumber>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8027b48:	687b      	ldr	r3, [r7, #4]
 8027b4a:	2201      	movs	r2, #1
 8027b4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8027b50:	2300      	movs	r3, #0
}
 8027b52:	4618      	mov	r0, r3
 8027b54:	3708      	adds	r7, #8
 8027b56:	46bd      	mov	sp, r7
 8027b58:	bd80      	pop	{r7, pc}

08027b5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8027b5a:	b580      	push	{r7, lr}
 8027b5c:	b082      	sub	sp, #8
 8027b5e:	af00      	add	r7, sp, #0
 8027b60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8027b62:	687b      	ldr	r3, [r7, #4]
 8027b64:	2b00      	cmp	r3, #0
 8027b66:	d101      	bne.n	8027b6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8027b68:	2301      	movs	r3, #1
 8027b6a:	e01d      	b.n	8027ba8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8027b6c:	687b      	ldr	r3, [r7, #4]
 8027b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027b72:	b2db      	uxtb	r3, r3
 8027b74:	2b00      	cmp	r3, #0
 8027b76:	d106      	bne.n	8027b86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8027b78:	687b      	ldr	r3, [r7, #4]
 8027b7a:	2200      	movs	r2, #0
 8027b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8027b80:	6878      	ldr	r0, [r7, #4]
 8027b82:	f000 f815 	bl	8027bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8027b86:	687b      	ldr	r3, [r7, #4]
 8027b88:	2202      	movs	r2, #2
 8027b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8027b8e:	687b      	ldr	r3, [r7, #4]
 8027b90:	681a      	ldr	r2, [r3, #0]
 8027b92:	687b      	ldr	r3, [r7, #4]
 8027b94:	3304      	adds	r3, #4
 8027b96:	4619      	mov	r1, r3
 8027b98:	4610      	mov	r0, r2
 8027b9a:	f000 f985 	bl	8027ea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8027b9e:	687b      	ldr	r3, [r7, #4]
 8027ba0:	2201      	movs	r2, #1
 8027ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8027ba6:	2300      	movs	r3, #0
}
 8027ba8:	4618      	mov	r0, r3
 8027baa:	3708      	adds	r7, #8
 8027bac:	46bd      	mov	sp, r7
 8027bae:	bd80      	pop	{r7, pc}

08027bb0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8027bb0:	b480      	push	{r7}
 8027bb2:	b083      	sub	sp, #12
 8027bb4:	af00      	add	r7, sp, #0
 8027bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8027bb8:	bf00      	nop
 8027bba:	370c      	adds	r7, #12
 8027bbc:	46bd      	mov	sp, r7
 8027bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027bc2:	4770      	bx	lr

08027bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8027bc4:	b480      	push	{r7}
 8027bc6:	b085      	sub	sp, #20
 8027bc8:	af00      	add	r7, sp, #0
 8027bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8027bcc:	687b      	ldr	r3, [r7, #4]
 8027bce:	681b      	ldr	r3, [r3, #0]
 8027bd0:	68da      	ldr	r2, [r3, #12]
 8027bd2:	687b      	ldr	r3, [r7, #4]
 8027bd4:	681b      	ldr	r3, [r3, #0]
 8027bd6:	f042 0201 	orr.w	r2, r2, #1
 8027bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8027bdc:	687b      	ldr	r3, [r7, #4]
 8027bde:	681b      	ldr	r3, [r3, #0]
 8027be0:	689a      	ldr	r2, [r3, #8]
 8027be2:	4b0c      	ldr	r3, [pc, #48]	; (8027c14 <HAL_TIM_Base_Start_IT+0x50>)
 8027be4:	4013      	ands	r3, r2
 8027be6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8027be8:	68fb      	ldr	r3, [r7, #12]
 8027bea:	2b06      	cmp	r3, #6
 8027bec:	d00b      	beq.n	8027c06 <HAL_TIM_Base_Start_IT+0x42>
 8027bee:	68fb      	ldr	r3, [r7, #12]
 8027bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027bf4:	d007      	beq.n	8027c06 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8027bf6:	687b      	ldr	r3, [r7, #4]
 8027bf8:	681b      	ldr	r3, [r3, #0]
 8027bfa:	681a      	ldr	r2, [r3, #0]
 8027bfc:	687b      	ldr	r3, [r7, #4]
 8027bfe:	681b      	ldr	r3, [r3, #0]
 8027c00:	f042 0201 	orr.w	r2, r2, #1
 8027c04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8027c06:	2300      	movs	r3, #0
}
 8027c08:	4618      	mov	r0, r3
 8027c0a:	3714      	adds	r7, #20
 8027c0c:	46bd      	mov	sp, r7
 8027c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c12:	4770      	bx	lr
 8027c14:	00010007 	.word	0x00010007

08027c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8027c18:	b580      	push	{r7, lr}
 8027c1a:	b082      	sub	sp, #8
 8027c1c:	af00      	add	r7, sp, #0
 8027c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8027c20:	687b      	ldr	r3, [r7, #4]
 8027c22:	681b      	ldr	r3, [r3, #0]
 8027c24:	691b      	ldr	r3, [r3, #16]
 8027c26:	f003 0302 	and.w	r3, r3, #2
 8027c2a:	2b02      	cmp	r3, #2
 8027c2c:	d122      	bne.n	8027c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8027c2e:	687b      	ldr	r3, [r7, #4]
 8027c30:	681b      	ldr	r3, [r3, #0]
 8027c32:	68db      	ldr	r3, [r3, #12]
 8027c34:	f003 0302 	and.w	r3, r3, #2
 8027c38:	2b02      	cmp	r3, #2
 8027c3a:	d11b      	bne.n	8027c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8027c3c:	687b      	ldr	r3, [r7, #4]
 8027c3e:	681b      	ldr	r3, [r3, #0]
 8027c40:	f06f 0202 	mvn.w	r2, #2
 8027c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8027c46:	687b      	ldr	r3, [r7, #4]
 8027c48:	2201      	movs	r2, #1
 8027c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8027c4c:	687b      	ldr	r3, [r7, #4]
 8027c4e:	681b      	ldr	r3, [r3, #0]
 8027c50:	699b      	ldr	r3, [r3, #24]
 8027c52:	f003 0303 	and.w	r3, r3, #3
 8027c56:	2b00      	cmp	r3, #0
 8027c58:	d003      	beq.n	8027c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8027c5a:	6878      	ldr	r0, [r7, #4]
 8027c5c:	f000 f905 	bl	8027e6a <HAL_TIM_IC_CaptureCallback>
 8027c60:	e005      	b.n	8027c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8027c62:	6878      	ldr	r0, [r7, #4]
 8027c64:	f000 f8f7 	bl	8027e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8027c68:	6878      	ldr	r0, [r7, #4]
 8027c6a:	f000 f908 	bl	8027e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8027c6e:	687b      	ldr	r3, [r7, #4]
 8027c70:	2200      	movs	r2, #0
 8027c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8027c74:	687b      	ldr	r3, [r7, #4]
 8027c76:	681b      	ldr	r3, [r3, #0]
 8027c78:	691b      	ldr	r3, [r3, #16]
 8027c7a:	f003 0304 	and.w	r3, r3, #4
 8027c7e:	2b04      	cmp	r3, #4
 8027c80:	d122      	bne.n	8027cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8027c82:	687b      	ldr	r3, [r7, #4]
 8027c84:	681b      	ldr	r3, [r3, #0]
 8027c86:	68db      	ldr	r3, [r3, #12]
 8027c88:	f003 0304 	and.w	r3, r3, #4
 8027c8c:	2b04      	cmp	r3, #4
 8027c8e:	d11b      	bne.n	8027cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8027c90:	687b      	ldr	r3, [r7, #4]
 8027c92:	681b      	ldr	r3, [r3, #0]
 8027c94:	f06f 0204 	mvn.w	r2, #4
 8027c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8027c9a:	687b      	ldr	r3, [r7, #4]
 8027c9c:	2202      	movs	r2, #2
 8027c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8027ca0:	687b      	ldr	r3, [r7, #4]
 8027ca2:	681b      	ldr	r3, [r3, #0]
 8027ca4:	699b      	ldr	r3, [r3, #24]
 8027ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027caa:	2b00      	cmp	r3, #0
 8027cac:	d003      	beq.n	8027cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8027cae:	6878      	ldr	r0, [r7, #4]
 8027cb0:	f000 f8db 	bl	8027e6a <HAL_TIM_IC_CaptureCallback>
 8027cb4:	e005      	b.n	8027cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8027cb6:	6878      	ldr	r0, [r7, #4]
 8027cb8:	f000 f8cd 	bl	8027e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8027cbc:	6878      	ldr	r0, [r7, #4]
 8027cbe:	f000 f8de 	bl	8027e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8027cc2:	687b      	ldr	r3, [r7, #4]
 8027cc4:	2200      	movs	r2, #0
 8027cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8027cc8:	687b      	ldr	r3, [r7, #4]
 8027cca:	681b      	ldr	r3, [r3, #0]
 8027ccc:	691b      	ldr	r3, [r3, #16]
 8027cce:	f003 0308 	and.w	r3, r3, #8
 8027cd2:	2b08      	cmp	r3, #8
 8027cd4:	d122      	bne.n	8027d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8027cd6:	687b      	ldr	r3, [r7, #4]
 8027cd8:	681b      	ldr	r3, [r3, #0]
 8027cda:	68db      	ldr	r3, [r3, #12]
 8027cdc:	f003 0308 	and.w	r3, r3, #8
 8027ce0:	2b08      	cmp	r3, #8
 8027ce2:	d11b      	bne.n	8027d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8027ce4:	687b      	ldr	r3, [r7, #4]
 8027ce6:	681b      	ldr	r3, [r3, #0]
 8027ce8:	f06f 0208 	mvn.w	r2, #8
 8027cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8027cee:	687b      	ldr	r3, [r7, #4]
 8027cf0:	2204      	movs	r2, #4
 8027cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8027cf4:	687b      	ldr	r3, [r7, #4]
 8027cf6:	681b      	ldr	r3, [r3, #0]
 8027cf8:	69db      	ldr	r3, [r3, #28]
 8027cfa:	f003 0303 	and.w	r3, r3, #3
 8027cfe:	2b00      	cmp	r3, #0
 8027d00:	d003      	beq.n	8027d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8027d02:	6878      	ldr	r0, [r7, #4]
 8027d04:	f000 f8b1 	bl	8027e6a <HAL_TIM_IC_CaptureCallback>
 8027d08:	e005      	b.n	8027d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8027d0a:	6878      	ldr	r0, [r7, #4]
 8027d0c:	f000 f8a3 	bl	8027e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8027d10:	6878      	ldr	r0, [r7, #4]
 8027d12:	f000 f8b4 	bl	8027e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8027d16:	687b      	ldr	r3, [r7, #4]
 8027d18:	2200      	movs	r2, #0
 8027d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8027d1c:	687b      	ldr	r3, [r7, #4]
 8027d1e:	681b      	ldr	r3, [r3, #0]
 8027d20:	691b      	ldr	r3, [r3, #16]
 8027d22:	f003 0310 	and.w	r3, r3, #16
 8027d26:	2b10      	cmp	r3, #16
 8027d28:	d122      	bne.n	8027d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8027d2a:	687b      	ldr	r3, [r7, #4]
 8027d2c:	681b      	ldr	r3, [r3, #0]
 8027d2e:	68db      	ldr	r3, [r3, #12]
 8027d30:	f003 0310 	and.w	r3, r3, #16
 8027d34:	2b10      	cmp	r3, #16
 8027d36:	d11b      	bne.n	8027d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8027d38:	687b      	ldr	r3, [r7, #4]
 8027d3a:	681b      	ldr	r3, [r3, #0]
 8027d3c:	f06f 0210 	mvn.w	r2, #16
 8027d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8027d42:	687b      	ldr	r3, [r7, #4]
 8027d44:	2208      	movs	r2, #8
 8027d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8027d48:	687b      	ldr	r3, [r7, #4]
 8027d4a:	681b      	ldr	r3, [r3, #0]
 8027d4c:	69db      	ldr	r3, [r3, #28]
 8027d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027d52:	2b00      	cmp	r3, #0
 8027d54:	d003      	beq.n	8027d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8027d56:	6878      	ldr	r0, [r7, #4]
 8027d58:	f000 f887 	bl	8027e6a <HAL_TIM_IC_CaptureCallback>
 8027d5c:	e005      	b.n	8027d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8027d5e:	6878      	ldr	r0, [r7, #4]
 8027d60:	f000 f879 	bl	8027e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8027d64:	6878      	ldr	r0, [r7, #4]
 8027d66:	f000 f88a 	bl	8027e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8027d6a:	687b      	ldr	r3, [r7, #4]
 8027d6c:	2200      	movs	r2, #0
 8027d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8027d70:	687b      	ldr	r3, [r7, #4]
 8027d72:	681b      	ldr	r3, [r3, #0]
 8027d74:	691b      	ldr	r3, [r3, #16]
 8027d76:	f003 0301 	and.w	r3, r3, #1
 8027d7a:	2b01      	cmp	r3, #1
 8027d7c:	d10e      	bne.n	8027d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8027d7e:	687b      	ldr	r3, [r7, #4]
 8027d80:	681b      	ldr	r3, [r3, #0]
 8027d82:	68db      	ldr	r3, [r3, #12]
 8027d84:	f003 0301 	and.w	r3, r3, #1
 8027d88:	2b01      	cmp	r3, #1
 8027d8a:	d107      	bne.n	8027d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8027d8c:	687b      	ldr	r3, [r7, #4]
 8027d8e:	681b      	ldr	r3, [r3, #0]
 8027d90:	f06f 0201 	mvn.w	r2, #1
 8027d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8027d96:	6878      	ldr	r0, [r7, #4]
 8027d98:	f7d9 fa3e 	bl	8001218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8027d9c:	687b      	ldr	r3, [r7, #4]
 8027d9e:	681b      	ldr	r3, [r3, #0]
 8027da0:	691b      	ldr	r3, [r3, #16]
 8027da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027da6:	2b80      	cmp	r3, #128	; 0x80
 8027da8:	d10e      	bne.n	8027dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8027daa:	687b      	ldr	r3, [r7, #4]
 8027dac:	681b      	ldr	r3, [r3, #0]
 8027dae:	68db      	ldr	r3, [r3, #12]
 8027db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027db4:	2b80      	cmp	r3, #128	; 0x80
 8027db6:	d107      	bne.n	8027dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8027db8:	687b      	ldr	r3, [r7, #4]
 8027dba:	681b      	ldr	r3, [r3, #0]
 8027dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8027dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8027dc2:	6878      	ldr	r0, [r7, #4]
 8027dc4:	f000 f91a 	bl	8027ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8027dc8:	687b      	ldr	r3, [r7, #4]
 8027dca:	681b      	ldr	r3, [r3, #0]
 8027dcc:	691b      	ldr	r3, [r3, #16]
 8027dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8027dd6:	d10e      	bne.n	8027df6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8027dd8:	687b      	ldr	r3, [r7, #4]
 8027dda:	681b      	ldr	r3, [r3, #0]
 8027ddc:	68db      	ldr	r3, [r3, #12]
 8027dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027de2:	2b80      	cmp	r3, #128	; 0x80
 8027de4:	d107      	bne.n	8027df6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8027de6:	687b      	ldr	r3, [r7, #4]
 8027de8:	681b      	ldr	r3, [r3, #0]
 8027dea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8027dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8027df0:	6878      	ldr	r0, [r7, #4]
 8027df2:	f000 f90d 	bl	8028010 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8027df6:	687b      	ldr	r3, [r7, #4]
 8027df8:	681b      	ldr	r3, [r3, #0]
 8027dfa:	691b      	ldr	r3, [r3, #16]
 8027dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027e00:	2b40      	cmp	r3, #64	; 0x40
 8027e02:	d10e      	bne.n	8027e22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8027e04:	687b      	ldr	r3, [r7, #4]
 8027e06:	681b      	ldr	r3, [r3, #0]
 8027e08:	68db      	ldr	r3, [r3, #12]
 8027e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027e0e:	2b40      	cmp	r3, #64	; 0x40
 8027e10:	d107      	bne.n	8027e22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8027e12:	687b      	ldr	r3, [r7, #4]
 8027e14:	681b      	ldr	r3, [r3, #0]
 8027e16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8027e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8027e1c:	6878      	ldr	r0, [r7, #4]
 8027e1e:	f000 f838 	bl	8027e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8027e22:	687b      	ldr	r3, [r7, #4]
 8027e24:	681b      	ldr	r3, [r3, #0]
 8027e26:	691b      	ldr	r3, [r3, #16]
 8027e28:	f003 0320 	and.w	r3, r3, #32
 8027e2c:	2b20      	cmp	r3, #32
 8027e2e:	d10e      	bne.n	8027e4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8027e30:	687b      	ldr	r3, [r7, #4]
 8027e32:	681b      	ldr	r3, [r3, #0]
 8027e34:	68db      	ldr	r3, [r3, #12]
 8027e36:	f003 0320 	and.w	r3, r3, #32
 8027e3a:	2b20      	cmp	r3, #32
 8027e3c:	d107      	bne.n	8027e4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8027e3e:	687b      	ldr	r3, [r7, #4]
 8027e40:	681b      	ldr	r3, [r3, #0]
 8027e42:	f06f 0220 	mvn.w	r2, #32
 8027e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8027e48:	6878      	ldr	r0, [r7, #4]
 8027e4a:	f000 f8cd 	bl	8027fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8027e4e:	bf00      	nop
 8027e50:	3708      	adds	r7, #8
 8027e52:	46bd      	mov	sp, r7
 8027e54:	bd80      	pop	{r7, pc}

08027e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8027e56:	b480      	push	{r7}
 8027e58:	b083      	sub	sp, #12
 8027e5a:	af00      	add	r7, sp, #0
 8027e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8027e5e:	bf00      	nop
 8027e60:	370c      	adds	r7, #12
 8027e62:	46bd      	mov	sp, r7
 8027e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e68:	4770      	bx	lr

08027e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8027e6a:	b480      	push	{r7}
 8027e6c:	b083      	sub	sp, #12
 8027e6e:	af00      	add	r7, sp, #0
 8027e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8027e72:	bf00      	nop
 8027e74:	370c      	adds	r7, #12
 8027e76:	46bd      	mov	sp, r7
 8027e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e7c:	4770      	bx	lr

08027e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8027e7e:	b480      	push	{r7}
 8027e80:	b083      	sub	sp, #12
 8027e82:	af00      	add	r7, sp, #0
 8027e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8027e86:	bf00      	nop
 8027e88:	370c      	adds	r7, #12
 8027e8a:	46bd      	mov	sp, r7
 8027e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e90:	4770      	bx	lr

08027e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8027e92:	b480      	push	{r7}
 8027e94:	b083      	sub	sp, #12
 8027e96:	af00      	add	r7, sp, #0
 8027e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8027e9a:	bf00      	nop
 8027e9c:	370c      	adds	r7, #12
 8027e9e:	46bd      	mov	sp, r7
 8027ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ea4:	4770      	bx	lr
	...

08027ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8027ea8:	b480      	push	{r7}
 8027eaa:	b085      	sub	sp, #20
 8027eac:	af00      	add	r7, sp, #0
 8027eae:	6078      	str	r0, [r7, #4]
 8027eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8027eb2:	687b      	ldr	r3, [r7, #4]
 8027eb4:	681b      	ldr	r3, [r3, #0]
 8027eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8027eb8:	687b      	ldr	r3, [r7, #4]
 8027eba:	4a40      	ldr	r2, [pc, #256]	; (8027fbc <TIM_Base_SetConfig+0x114>)
 8027ebc:	4293      	cmp	r3, r2
 8027ebe:	d013      	beq.n	8027ee8 <TIM_Base_SetConfig+0x40>
 8027ec0:	687b      	ldr	r3, [r7, #4]
 8027ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027ec6:	d00f      	beq.n	8027ee8 <TIM_Base_SetConfig+0x40>
 8027ec8:	687b      	ldr	r3, [r7, #4]
 8027eca:	4a3d      	ldr	r2, [pc, #244]	; (8027fc0 <TIM_Base_SetConfig+0x118>)
 8027ecc:	4293      	cmp	r3, r2
 8027ece:	d00b      	beq.n	8027ee8 <TIM_Base_SetConfig+0x40>
 8027ed0:	687b      	ldr	r3, [r7, #4]
 8027ed2:	4a3c      	ldr	r2, [pc, #240]	; (8027fc4 <TIM_Base_SetConfig+0x11c>)
 8027ed4:	4293      	cmp	r3, r2
 8027ed6:	d007      	beq.n	8027ee8 <TIM_Base_SetConfig+0x40>
 8027ed8:	687b      	ldr	r3, [r7, #4]
 8027eda:	4a3b      	ldr	r2, [pc, #236]	; (8027fc8 <TIM_Base_SetConfig+0x120>)
 8027edc:	4293      	cmp	r3, r2
 8027ede:	d003      	beq.n	8027ee8 <TIM_Base_SetConfig+0x40>
 8027ee0:	687b      	ldr	r3, [r7, #4]
 8027ee2:	4a3a      	ldr	r2, [pc, #232]	; (8027fcc <TIM_Base_SetConfig+0x124>)
 8027ee4:	4293      	cmp	r3, r2
 8027ee6:	d108      	bne.n	8027efa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8027ee8:	68fb      	ldr	r3, [r7, #12]
 8027eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8027eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8027ef0:	683b      	ldr	r3, [r7, #0]
 8027ef2:	685b      	ldr	r3, [r3, #4]
 8027ef4:	68fa      	ldr	r2, [r7, #12]
 8027ef6:	4313      	orrs	r3, r2
 8027ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8027efa:	687b      	ldr	r3, [r7, #4]
 8027efc:	4a2f      	ldr	r2, [pc, #188]	; (8027fbc <TIM_Base_SetConfig+0x114>)
 8027efe:	4293      	cmp	r3, r2
 8027f00:	d02b      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f02:	687b      	ldr	r3, [r7, #4]
 8027f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027f08:	d027      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f0a:	687b      	ldr	r3, [r7, #4]
 8027f0c:	4a2c      	ldr	r2, [pc, #176]	; (8027fc0 <TIM_Base_SetConfig+0x118>)
 8027f0e:	4293      	cmp	r3, r2
 8027f10:	d023      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f12:	687b      	ldr	r3, [r7, #4]
 8027f14:	4a2b      	ldr	r2, [pc, #172]	; (8027fc4 <TIM_Base_SetConfig+0x11c>)
 8027f16:	4293      	cmp	r3, r2
 8027f18:	d01f      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f1a:	687b      	ldr	r3, [r7, #4]
 8027f1c:	4a2a      	ldr	r2, [pc, #168]	; (8027fc8 <TIM_Base_SetConfig+0x120>)
 8027f1e:	4293      	cmp	r3, r2
 8027f20:	d01b      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f22:	687b      	ldr	r3, [r7, #4]
 8027f24:	4a29      	ldr	r2, [pc, #164]	; (8027fcc <TIM_Base_SetConfig+0x124>)
 8027f26:	4293      	cmp	r3, r2
 8027f28:	d017      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f2a:	687b      	ldr	r3, [r7, #4]
 8027f2c:	4a28      	ldr	r2, [pc, #160]	; (8027fd0 <TIM_Base_SetConfig+0x128>)
 8027f2e:	4293      	cmp	r3, r2
 8027f30:	d013      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f32:	687b      	ldr	r3, [r7, #4]
 8027f34:	4a27      	ldr	r2, [pc, #156]	; (8027fd4 <TIM_Base_SetConfig+0x12c>)
 8027f36:	4293      	cmp	r3, r2
 8027f38:	d00f      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f3a:	687b      	ldr	r3, [r7, #4]
 8027f3c:	4a26      	ldr	r2, [pc, #152]	; (8027fd8 <TIM_Base_SetConfig+0x130>)
 8027f3e:	4293      	cmp	r3, r2
 8027f40:	d00b      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f42:	687b      	ldr	r3, [r7, #4]
 8027f44:	4a25      	ldr	r2, [pc, #148]	; (8027fdc <TIM_Base_SetConfig+0x134>)
 8027f46:	4293      	cmp	r3, r2
 8027f48:	d007      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f4a:	687b      	ldr	r3, [r7, #4]
 8027f4c:	4a24      	ldr	r2, [pc, #144]	; (8027fe0 <TIM_Base_SetConfig+0x138>)
 8027f4e:	4293      	cmp	r3, r2
 8027f50:	d003      	beq.n	8027f5a <TIM_Base_SetConfig+0xb2>
 8027f52:	687b      	ldr	r3, [r7, #4]
 8027f54:	4a23      	ldr	r2, [pc, #140]	; (8027fe4 <TIM_Base_SetConfig+0x13c>)
 8027f56:	4293      	cmp	r3, r2
 8027f58:	d108      	bne.n	8027f6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8027f5a:	68fb      	ldr	r3, [r7, #12]
 8027f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8027f62:	683b      	ldr	r3, [r7, #0]
 8027f64:	68db      	ldr	r3, [r3, #12]
 8027f66:	68fa      	ldr	r2, [r7, #12]
 8027f68:	4313      	orrs	r3, r2
 8027f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8027f6c:	68fb      	ldr	r3, [r7, #12]
 8027f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8027f72:	683b      	ldr	r3, [r7, #0]
 8027f74:	695b      	ldr	r3, [r3, #20]
 8027f76:	4313      	orrs	r3, r2
 8027f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8027f7a:	687b      	ldr	r3, [r7, #4]
 8027f7c:	68fa      	ldr	r2, [r7, #12]
 8027f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8027f80:	683b      	ldr	r3, [r7, #0]
 8027f82:	689a      	ldr	r2, [r3, #8]
 8027f84:	687b      	ldr	r3, [r7, #4]
 8027f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8027f88:	683b      	ldr	r3, [r7, #0]
 8027f8a:	681a      	ldr	r2, [r3, #0]
 8027f8c:	687b      	ldr	r3, [r7, #4]
 8027f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8027f90:	687b      	ldr	r3, [r7, #4]
 8027f92:	4a0a      	ldr	r2, [pc, #40]	; (8027fbc <TIM_Base_SetConfig+0x114>)
 8027f94:	4293      	cmp	r3, r2
 8027f96:	d003      	beq.n	8027fa0 <TIM_Base_SetConfig+0xf8>
 8027f98:	687b      	ldr	r3, [r7, #4]
 8027f9a:	4a0c      	ldr	r2, [pc, #48]	; (8027fcc <TIM_Base_SetConfig+0x124>)
 8027f9c:	4293      	cmp	r3, r2
 8027f9e:	d103      	bne.n	8027fa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8027fa0:	683b      	ldr	r3, [r7, #0]
 8027fa2:	691a      	ldr	r2, [r3, #16]
 8027fa4:	687b      	ldr	r3, [r7, #4]
 8027fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8027fa8:	687b      	ldr	r3, [r7, #4]
 8027faa:	2201      	movs	r2, #1
 8027fac:	615a      	str	r2, [r3, #20]
}
 8027fae:	bf00      	nop
 8027fb0:	3714      	adds	r7, #20
 8027fb2:	46bd      	mov	sp, r7
 8027fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fb8:	4770      	bx	lr
 8027fba:	bf00      	nop
 8027fbc:	40010000 	.word	0x40010000
 8027fc0:	40000400 	.word	0x40000400
 8027fc4:	40000800 	.word	0x40000800
 8027fc8:	40000c00 	.word	0x40000c00
 8027fcc:	40010400 	.word	0x40010400
 8027fd0:	40014000 	.word	0x40014000
 8027fd4:	40014400 	.word	0x40014400
 8027fd8:	40014800 	.word	0x40014800
 8027fdc:	40001800 	.word	0x40001800
 8027fe0:	40001c00 	.word	0x40001c00
 8027fe4:	40002000 	.word	0x40002000

08027fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8027fe8:	b480      	push	{r7}
 8027fea:	b083      	sub	sp, #12
 8027fec:	af00      	add	r7, sp, #0
 8027fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8027ff0:	bf00      	nop
 8027ff2:	370c      	adds	r7, #12
 8027ff4:	46bd      	mov	sp, r7
 8027ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ffa:	4770      	bx	lr

08027ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8027ffc:	b480      	push	{r7}
 8027ffe:	b083      	sub	sp, #12
 8028000:	af00      	add	r7, sp, #0
 8028002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8028004:	bf00      	nop
 8028006:	370c      	adds	r7, #12
 8028008:	46bd      	mov	sp, r7
 802800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802800e:	4770      	bx	lr

08028010 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8028010:	b480      	push	{r7}
 8028012:	b083      	sub	sp, #12
 8028014:	af00      	add	r7, sp, #0
 8028016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8028018:	bf00      	nop
 802801a:	370c      	adds	r7, #12
 802801c:	46bd      	mov	sp, r7
 802801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028022:	4770      	bx	lr

08028024 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8028024:	b480      	push	{r7}
 8028026:	b085      	sub	sp, #20
 8028028:	af00      	add	r7, sp, #0
 802802a:	6078      	str	r0, [r7, #4]
 802802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 802802e:	2300      	movs	r3, #0
 8028030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8028032:	2300      	movs	r3, #0
 8028034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8028036:	683b      	ldr	r3, [r7, #0]
 8028038:	681b      	ldr	r3, [r3, #0]
 802803a:	2b01      	cmp	r3, #1
 802803c:	d027      	beq.n	802808e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 802803e:	687b      	ldr	r3, [r7, #4]
 8028040:	681b      	ldr	r3, [r3, #0]
 8028042:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8028044:	68fa      	ldr	r2, [r7, #12]
 8028046:	4b2f      	ldr	r3, [pc, #188]	; (8028104 <FMC_SDRAM_Init+0xe0>)
 8028048:	4013      	ands	r3, r2
 802804a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 802804c:	683b      	ldr	r3, [r7, #0]
 802804e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8028050:	683b      	ldr	r3, [r7, #0]
 8028052:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8028054:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8028056:	683b      	ldr	r3, [r7, #0]
 8028058:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 802805a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 802805c:	683b      	ldr	r3, [r7, #0]
 802805e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8028060:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8028062:	683b      	ldr	r3, [r7, #0]
 8028064:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8028066:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8028068:	683b      	ldr	r3, [r7, #0]
 802806a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 802806c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 802806e:	683b      	ldr	r3, [r7, #0]
 8028070:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8028072:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8028074:	683b      	ldr	r3, [r7, #0]
 8028076:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8028078:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 802807a:	683b      	ldr	r3, [r7, #0]
 802807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 802807e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8028080:	68fa      	ldr	r2, [r7, #12]
 8028082:	4313      	orrs	r3, r2
 8028084:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8028086:	687b      	ldr	r3, [r7, #4]
 8028088:	68fa      	ldr	r2, [r7, #12]
 802808a:	601a      	str	r2, [r3, #0]
 802808c:	e032      	b.n	80280f4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 802808e:	687b      	ldr	r3, [r7, #4]
 8028090:	681b      	ldr	r3, [r3, #0]
 8028092:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8028094:	68fb      	ldr	r3, [r7, #12]
 8028096:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 802809a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 802809c:	683b      	ldr	r3, [r7, #0]
 802809e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80280a0:	683b      	ldr	r3, [r7, #0]
 80280a2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80280a4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80280a6:	683b      	ldr	r3, [r7, #0]
 80280a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80280aa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80280ac:	68fa      	ldr	r2, [r7, #12]
 80280ae:	4313      	orrs	r3, r2
 80280b0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80280b2:	687b      	ldr	r3, [r7, #4]
 80280b4:	685b      	ldr	r3, [r3, #4]
 80280b6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80280b8:	68ba      	ldr	r2, [r7, #8]
 80280ba:	4b12      	ldr	r3, [pc, #72]	; (8028104 <FMC_SDRAM_Init+0xe0>)
 80280bc:	4013      	ands	r3, r2
 80280be:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80280c0:	683b      	ldr	r3, [r7, #0]
 80280c2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80280c4:	683b      	ldr	r3, [r7, #0]
 80280c6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80280c8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80280ca:	683b      	ldr	r3, [r7, #0]
 80280cc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80280ce:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80280d0:	683b      	ldr	r3, [r7, #0]
 80280d2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80280d4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80280d6:	683b      	ldr	r3, [r7, #0]
 80280d8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80280da:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80280dc:	683b      	ldr	r3, [r7, #0]
 80280de:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80280e0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80280e2:	68ba      	ldr	r2, [r7, #8]
 80280e4:	4313      	orrs	r3, r2
 80280e6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80280e8:	687b      	ldr	r3, [r7, #4]
 80280ea:	68fa      	ldr	r2, [r7, #12]
 80280ec:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80280ee:	687b      	ldr	r3, [r7, #4]
 80280f0:	68ba      	ldr	r2, [r7, #8]
 80280f2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80280f4:	2300      	movs	r3, #0
}
 80280f6:	4618      	mov	r0, r3
 80280f8:	3714      	adds	r7, #20
 80280fa:	46bd      	mov	sp, r7
 80280fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028100:	4770      	bx	lr
 8028102:	bf00      	nop
 8028104:	ffff8000 	.word	0xffff8000

08028108 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8028108:	b480      	push	{r7}
 802810a:	b087      	sub	sp, #28
 802810c:	af00      	add	r7, sp, #0
 802810e:	60f8      	str	r0, [r7, #12]
 8028110:	60b9      	str	r1, [r7, #8]
 8028112:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8028114:	2300      	movs	r3, #0
 8028116:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8028118:	2300      	movs	r3, #0
 802811a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 802811c:	687b      	ldr	r3, [r7, #4]
 802811e:	2b01      	cmp	r3, #1
 8028120:	d02e      	beq.n	8028180 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8028122:	68fb      	ldr	r3, [r7, #12]
 8028124:	689b      	ldr	r3, [r3, #8]
 8028126:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8028128:	697b      	ldr	r3, [r7, #20]
 802812a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 802812e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8028130:	68bb      	ldr	r3, [r7, #8]
 8028132:	681b      	ldr	r3, [r3, #0]
 8028134:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8028136:	68bb      	ldr	r3, [r7, #8]
 8028138:	685b      	ldr	r3, [r3, #4]
 802813a:	3b01      	subs	r3, #1
 802813c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 802813e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8028140:	68bb      	ldr	r3, [r7, #8]
 8028142:	689b      	ldr	r3, [r3, #8]
 8028144:	3b01      	subs	r3, #1
 8028146:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8028148:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 802814a:	68bb      	ldr	r3, [r7, #8]
 802814c:	68db      	ldr	r3, [r3, #12]
 802814e:	3b01      	subs	r3, #1
 8028150:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8028152:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8028154:	68bb      	ldr	r3, [r7, #8]
 8028156:	691b      	ldr	r3, [r3, #16]
 8028158:	3b01      	subs	r3, #1
 802815a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 802815c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 802815e:	68bb      	ldr	r3, [r7, #8]
 8028160:	695b      	ldr	r3, [r3, #20]
 8028162:	3b01      	subs	r3, #1
 8028164:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8028166:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8028168:	68bb      	ldr	r3, [r7, #8]
 802816a:	699b      	ldr	r3, [r3, #24]
 802816c:	3b01      	subs	r3, #1
 802816e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8028170:	4313      	orrs	r3, r2
 8028172:	697a      	ldr	r2, [r7, #20]
 8028174:	4313      	orrs	r3, r2
 8028176:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8028178:	68fb      	ldr	r3, [r7, #12]
 802817a:	697a      	ldr	r2, [r7, #20]
 802817c:	609a      	str	r2, [r3, #8]
 802817e:	e039      	b.n	80281f4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8028180:	68fb      	ldr	r3, [r7, #12]
 8028182:	689b      	ldr	r3, [r3, #8]
 8028184:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8028186:	697a      	ldr	r2, [r7, #20]
 8028188:	4b1e      	ldr	r3, [pc, #120]	; (8028204 <FMC_SDRAM_Timing_Init+0xfc>)
 802818a:	4013      	ands	r3, r2
 802818c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 802818e:	68bb      	ldr	r3, [r7, #8]
 8028190:	68db      	ldr	r3, [r3, #12]
 8028192:	3b01      	subs	r3, #1
 8028194:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8028196:	68bb      	ldr	r3, [r7, #8]
 8028198:	695b      	ldr	r3, [r3, #20]
 802819a:	3b01      	subs	r3, #1
 802819c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 802819e:	4313      	orrs	r3, r2
 80281a0:	697a      	ldr	r2, [r7, #20]
 80281a2:	4313      	orrs	r3, r2
 80281a4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80281a6:	68fb      	ldr	r3, [r7, #12]
 80281a8:	68db      	ldr	r3, [r3, #12]
 80281aa:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80281ac:	693b      	ldr	r3, [r7, #16]
 80281ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80281b2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80281b4:	68bb      	ldr	r3, [r7, #8]
 80281b6:	681b      	ldr	r3, [r3, #0]
 80281b8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80281ba:	68bb      	ldr	r3, [r7, #8]
 80281bc:	685b      	ldr	r3, [r3, #4]
 80281be:	3b01      	subs	r3, #1
 80281c0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80281c2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80281c4:	68bb      	ldr	r3, [r7, #8]
 80281c6:	689b      	ldr	r3, [r3, #8]
 80281c8:	3b01      	subs	r3, #1
 80281ca:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80281cc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80281ce:	68bb      	ldr	r3, [r7, #8]
 80281d0:	691b      	ldr	r3, [r3, #16]
 80281d2:	3b01      	subs	r3, #1
 80281d4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80281d6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80281d8:	68bb      	ldr	r3, [r7, #8]
 80281da:	699b      	ldr	r3, [r3, #24]
 80281dc:	3b01      	subs	r3, #1
 80281de:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80281e0:	4313      	orrs	r3, r2
 80281e2:	693a      	ldr	r2, [r7, #16]
 80281e4:	4313      	orrs	r3, r2
 80281e6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80281e8:	68fb      	ldr	r3, [r7, #12]
 80281ea:	697a      	ldr	r2, [r7, #20]
 80281ec:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80281ee:	68fb      	ldr	r3, [r7, #12]
 80281f0:	693a      	ldr	r2, [r7, #16]
 80281f2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80281f4:	2300      	movs	r3, #0
}
 80281f6:	4618      	mov	r0, r3
 80281f8:	371c      	adds	r7, #28
 80281fa:	46bd      	mov	sp, r7
 80281fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028200:	4770      	bx	lr
 8028202:	bf00      	nop
 8028204:	ff0f0fff 	.word	0xff0f0fff

08028208 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8028208:	b480      	push	{r7}
 802820a:	b087      	sub	sp, #28
 802820c:	af00      	add	r7, sp, #0
 802820e:	60f8      	str	r0, [r7, #12]
 8028210:	60b9      	str	r1, [r7, #8]
 8028212:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8028214:	2300      	movs	r3, #0
 8028216:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8028218:	68bb      	ldr	r3, [r7, #8]
 802821a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 802821c:	68bb      	ldr	r3, [r7, #8]
 802821e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8028220:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8028222:	68bb      	ldr	r3, [r7, #8]
 8028224:	689b      	ldr	r3, [r3, #8]
 8028226:	3b01      	subs	r3, #1
 8028228:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 802822a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 802822c:	68bb      	ldr	r3, [r7, #8]
 802822e:	68db      	ldr	r3, [r3, #12]
 8028230:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8028232:	4313      	orrs	r3, r2
 8028234:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8028236:	697a      	ldr	r2, [r7, #20]
 8028238:	68fb      	ldr	r3, [r7, #12]
 802823a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 802823c:	2300      	movs	r3, #0
}
 802823e:	4618      	mov	r0, r3
 8028240:	371c      	adds	r7, #28
 8028242:	46bd      	mov	sp, r7
 8028244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028248:	4770      	bx	lr

0802824a <FMC_SDRAM_SetAutoRefreshNumber>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  AutoRefreshNumber Specifies the auto Refresh number.       
  * @retval None
  */
HAL_StatusTypeDef FMC_SDRAM_SetAutoRefreshNumber(FMC_SDRAM_TypeDef *Device, uint32_t AutoRefreshNumber)
{
 802824a:	b480      	push	{r7}
 802824c:	b083      	sub	sp, #12
 802824e:	af00      	add	r7, sp, #0
 8028250:	6078      	str	r0, [r7, #4]
 8028252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(AutoRefreshNumber));
  
  /* Set the Auto-refresh number in command register */
  Device->SDCMR |= (AutoRefreshNumber << 5); 
 8028254:	687b      	ldr	r3, [r7, #4]
 8028256:	691a      	ldr	r2, [r3, #16]
 8028258:	683b      	ldr	r3, [r7, #0]
 802825a:	015b      	lsls	r3, r3, #5
 802825c:	431a      	orrs	r2, r3
 802825e:	687b      	ldr	r3, [r7, #4]
 8028260:	611a      	str	r2, [r3, #16]

  return HAL_OK;  
 8028262:	2300      	movs	r3, #0
}
 8028264:	4618      	mov	r0, r3
 8028266:	370c      	adds	r7, #12
 8028268:	46bd      	mov	sp, r7
 802826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802826e:	4770      	bx	lr

08028270 <__libc_init_array>:
 8028270:	b570      	push	{r4, r5, r6, lr}
 8028272:	4e0d      	ldr	r6, [pc, #52]	; (80282a8 <__libc_init_array+0x38>)
 8028274:	4c0d      	ldr	r4, [pc, #52]	; (80282ac <__libc_init_array+0x3c>)
 8028276:	1ba4      	subs	r4, r4, r6
 8028278:	10a4      	asrs	r4, r4, #2
 802827a:	2500      	movs	r5, #0
 802827c:	42a5      	cmp	r5, r4
 802827e:	d109      	bne.n	8028294 <__libc_init_array+0x24>
 8028280:	4e0b      	ldr	r6, [pc, #44]	; (80282b0 <__libc_init_array+0x40>)
 8028282:	4c0c      	ldr	r4, [pc, #48]	; (80282b4 <__libc_init_array+0x44>)
 8028284:	f000 f838 	bl	80282f8 <_init>
 8028288:	1ba4      	subs	r4, r4, r6
 802828a:	10a4      	asrs	r4, r4, #2
 802828c:	2500      	movs	r5, #0
 802828e:	42a5      	cmp	r5, r4
 8028290:	d105      	bne.n	802829e <__libc_init_array+0x2e>
 8028292:	bd70      	pop	{r4, r5, r6, pc}
 8028294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8028298:	4798      	blx	r3
 802829a:	3501      	adds	r5, #1
 802829c:	e7ee      	b.n	802827c <__libc_init_array+0xc>
 802829e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80282a2:	4798      	blx	r3
 80282a4:	3501      	adds	r5, #1
 80282a6:	e7f2      	b.n	802828e <__libc_init_array+0x1e>
 80282a8:	0802baf0 	.word	0x0802baf0
 80282ac:	0802baf0 	.word	0x0802baf0
 80282b0:	0802baf0 	.word	0x0802baf0
 80282b4:	0802baf4 	.word	0x0802baf4

080282b8 <memcmp>:
 80282b8:	b530      	push	{r4, r5, lr}
 80282ba:	2400      	movs	r4, #0
 80282bc:	42a2      	cmp	r2, r4
 80282be:	d101      	bne.n	80282c4 <memcmp+0xc>
 80282c0:	2000      	movs	r0, #0
 80282c2:	e007      	b.n	80282d4 <memcmp+0x1c>
 80282c4:	5d03      	ldrb	r3, [r0, r4]
 80282c6:	3401      	adds	r4, #1
 80282c8:	190d      	adds	r5, r1, r4
 80282ca:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80282ce:	42ab      	cmp	r3, r5
 80282d0:	d0f4      	beq.n	80282bc <memcmp+0x4>
 80282d2:	1b58      	subs	r0, r3, r5
 80282d4:	bd30      	pop	{r4, r5, pc}

080282d6 <memset>:
 80282d6:	4402      	add	r2, r0
 80282d8:	4603      	mov	r3, r0
 80282da:	4293      	cmp	r3, r2
 80282dc:	d100      	bne.n	80282e0 <memset+0xa>
 80282de:	4770      	bx	lr
 80282e0:	f803 1b01 	strb.w	r1, [r3], #1
 80282e4:	e7f9      	b.n	80282da <memset+0x4>

080282e6 <strcpy>:
 80282e6:	4603      	mov	r3, r0
 80282e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80282ec:	f803 2b01 	strb.w	r2, [r3], #1
 80282f0:	2a00      	cmp	r2, #0
 80282f2:	d1f9      	bne.n	80282e8 <strcpy+0x2>
 80282f4:	4770      	bx	lr
	...

080282f8 <_init>:
 80282f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80282fa:	bf00      	nop
 80282fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80282fe:	bc08      	pop	{r3}
 8028300:	469e      	mov	lr, r3
 8028302:	4770      	bx	lr

08028304 <_fini>:
 8028304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028306:	bf00      	nop
 8028308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802830a:	bc08      	pop	{r3}
 802830c:	469e      	mov	lr, r3
 802830e:	4770      	bx	lr
